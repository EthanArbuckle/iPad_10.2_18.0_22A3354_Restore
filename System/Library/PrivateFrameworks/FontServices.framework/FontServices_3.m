void sub_1B09E19A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B09E19C0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
  {
    TcmapEncodingTable::~TcmapEncodingTable((TcmapEncodingTable *)&a21);
    TSFNTFont::~TSFNTFont((TSFNTFont *)&a33);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B09E196CLL);
  }
  JUMPOUT(0x1B09E19B0);
}

void sub_1B09E1A08()
{
  JUMPOUT(0x1B09E19B0);
}

uint64_t TFPFont::GetGlyphsForText(TFPFont *this, FPEncoding a2, const char *a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v5;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v15;
  const char *v16;
  _OWORD v17[4];
  __int128 v18;
  unint64_t v19;
  void (**v20)(TSFNTData *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[3];
  __int128 v30;
  uint64_t v31;

  if (!a5)
    return 0;
  v5 = a5;
  v8 = *(_DWORD *)&a2.var0;
  v9 = *((_QWORD *)this + 2);
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30 = v10;
  v29[2] = v10;
  v29[1] = v10;
  v29[0] = v10;
  v28 = v10;
  v27 = v10;
  v26 = v10;
  v25 = v10;
  v24 = v10;
  v23 = v10;
  v22 = v10;
  v21 = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  LODWORD(v21) = 0;
  v22 = 0uLL;
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = &off_1E6176770;
  v24 = 0u;
  v25 = 0u;
  LODWORD(v26) = 0;
  HIDWORD(v28) = 0;
  LOBYTE(v29[0]) = 0;
  *(_OWORD *)((char *)v29 + 8) = 0u;
  *(_OWORD *)((char *)&v29[1] + 8) = 0u;
  *((_QWORD *)&v29[2] + 1) = 0;
  *((_QWORD *)&v26 + 1) = &off_1E6176770;
  v27 = 0uLL;
  *(_QWORD *)&v28 = 0;
  BYTE8(v28) = 0;
  *(_QWORD *)&v30 = -1;
  DWORD2(v30) = 0;
  v20 = &off_1E6178EE0;
  *((_QWORD *)&v21 + 1) = &unk_1E61790E8;
  v31 = v11;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[3] = v12;
  v18 = v12;
  v17[1] = v12;
  v17[2] = v12;
  v17[0] = v12;
  TcmapEncodingTable::TcmapEncodingTable((TcmapEncodingTable *)v17, (const TSFNTFont *)&v20, (unsigned __int16)v8, HIWORD(v8), 0xFFFF);
  v13 = v18;
  if ((_QWORD)v18)
  {
    v16 = a3;
    v15 = v5;
    v5 = TcmapEncodingTable::Map<unsigned short>((uint64_t)v17, (uint64_t *)&v16, v5, a4, &v15);
  }
  *(_QWORD *)&v17[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v17);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v20);
  if (!v13)
    return 0;
  return v5;
}

void sub_1B09E1B94(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  TcmapEncodingTable::~TcmapEncodingTable((TcmapEncodingTable *)va);
  TSFNTFont::~TSFNTFont((TSFNTFont *)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E1B70);
}

uint64_t TFPFont::GetGlyphsForCharacters(TFPFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  int v4;
  unsigned int v6;

  v4 = -1;
  if (a4 < 0xFFFFFFFF)
    v4 = a4;
  v6 = v4;
  if (!v4)
    return 0;
  (*(void (**)(_QWORD, const unsigned __int16 *, unsigned __int16 *, unsigned int *, _QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2), a2, a3, &v6, 0);
  return v6;
}

uint64_t TFPFont::GetLongGlyphsForCharacters(TFPFont *this, const unsigned __int16 *a2, unsigned int *a3, unint64_t a4)
{
  return TFPFont::GetLongGlyphsForCharacters(this, a2, a3, a4, 0);
}

uint64_t TFPFont::GetGlyphsForCharacterRange(TFPFont *this, unsigned __int16 *a2, CFRange a3)
{
  return (*(uint64_t (**)(_QWORD, unsigned __int16 *, CFIndex, CFIndex))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), a2, a3.location, a3.length);
}

void sub_1B09E1C4C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E1C44);
}

uint64_t TFPFont::GetLongGlyphsForCharacterRange(TFPFont *this, unsigned int *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  CFIndex v14;
  uint64_t v15;
  char *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void **v24;
  char *v25;
  __int16 v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  __int16 v33;
  unint64_t v34;
  char *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void **v43;
  char *v44;
  __int16 v45;
  char *v46;
  __int16 v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void **v56;
  char *v57;
  __int16 v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int16 v71;
  char *v72;
  uint64_t v73;
  uint64_t result;
  unsigned __int16 *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char **v87;
  __int128 v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  _OWORD v94[4];
  _OWORD *v95;
  __int128 v96;
  _OWORD v97[5];
  uint64_t v98;

  length = a3.length;
  location = a3.location;
  v98 = *MEMORY[0x1E0C80C00];
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (v7
    && ((*(uint64_t (**)(uint64_t, unsigned int *, CFIndex, CFIndex))(*(_QWORD *)v7 + 496))(v7, a2, location, length) & 1) != 0)
  {
    return 1;
  }
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97[3] = v8;
  v97[4] = v8;
  v97[1] = v8;
  v97[2] = v8;
  v96 = v8;
  v97[0] = v8;
  LOWORD(v91) = 0;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::vector(&v96, length, &v91);
  v9 = *((_QWORD *)this + 2);
  if ((*(unsigned int (**)(uint64_t, _QWORD, CFIndex, CFIndex))(*(_QWORD *)v9 + 128))(v9, v96, location, length))
  {
    if (length)
    {
      v10 = (unsigned __int16 *)v96;
      v11 = 2 * length;
      do
      {
        v12 = *v10++;
        *a2++ = v12;
        v11 -= 2;
      }
      while (v11);
    }
    goto LABEL_105;
  }
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v94[3] = v13;
  v94[2] = v13;
  v94[1] = v13;
  v94[0] = v13;
  v92 = 0;
  v93 = 0;
  v91 = 0;
  v95 = v94;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(&v91, 2 * length);
  v86 = v9;
  v14 = location + length;
  if (location + length >= 0x10000)
    v15 = 0x10000;
  else
    v15 = location + length;
  if (location >= v15)
  {
    v16 = v92;
  }
  else
  {
    v16 = v92;
    do
    {
      if (v16 >= v93)
      {
        v17 = (void **)v91;
        v18 = v16 - v91;
        if (v16 - v91 <= -3)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        v19 = v18 >> 1;
        if (v93 - v91 <= (unint64_t)((v18 >> 1) + 1))
          v20 = v19 + 1;
        else
          v20 = v93 - v91;
        if ((unint64_t)(v93 - v91) >= 0x7FFFFFFFFFFFFFFELL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v90 = (char *)v94;
        if (v21)
        {
          v22 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v94, v21);
          v17 = (void **)v91;
          v16 = v92;
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[2 * v19];
        *(_WORD *)v23 = location;
        if (v16 == (char *)v17)
        {
          v25 = &v22[2 * v19];
        }
        else
        {
          v24 = (void **)v16;
          v25 = &v22[2 * v19];
          do
          {
            v26 = *((_WORD *)v24 - 1);
            v24 = (void **)((char *)v24 - 2);
            *((_WORD *)v25 - 1) = v26;
            v25 -= 2;
          }
          while (v24 != v17);
        }
        v27 = v23 + 2;
        v91 = v25;
        v92 = v23 + 2;
        v28 = v93;
        v93 = &v22[2 * v21];
        *((_QWORD *)&v88 + 1) = v16;
        v89 = v28;
        v87 = (char **)v17;
        *(_QWORD *)&v88 = v17;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v87);
        v16 = v27;
      }
      else
      {
        *(_WORD *)v16 = location;
        v16 += 2;
      }
      v92 = v16;
      ++location;
    }
    while (location != v15);
    location = v15;
  }
  v29 = v91;
  v30 = (v16 - v91) >> 1;
  v31 = v30;
  if (location < v14)
  {
    v84 = (v16 - v91) >> 1;
    v85 = v91;
    v32 = v16;
    do
    {
      v33 = ((unint64_t)location >> 10) - 10304;
      v34 = (unint64_t)v93;
      if (v32 >= v93)
      {
        v36 = (void **)v91;
        v37 = v32 - v91;
        if (v32 - v91 <= -3)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        v38 = v37 >> 1;
        if (v93 - v91 <= (unint64_t)((v37 >> 1) + 1))
          v39 = v38 + 1;
        else
          v39 = v93 - v91;
        if ((unint64_t)(v93 - v91) >= 0x7FFFFFFFFFFFFFFELL)
          v40 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        v90 = (char *)v94;
        if (v40)
        {
          v41 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v94, v40);
          v36 = (void **)v91;
          v32 = v92;
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[2 * v38];
        *(_WORD *)v42 = v33;
        if (v32 == (char *)v36)
        {
          v44 = &v41[2 * v38];
        }
        else
        {
          v43 = (void **)v32;
          v44 = &v41[2 * v38];
          do
          {
            v45 = *((_WORD *)v43 - 1);
            v43 = (void **)((char *)v43 - 2);
            *((_WORD *)v44 - 1) = v45;
            v44 -= 2;
          }
          while (v43 != v36);
        }
        v35 = v42 + 2;
        v91 = v44;
        v92 = v42 + 2;
        v46 = v93;
        v93 = &v41[2 * v40];
        *((_QWORD *)&v88 + 1) = v32;
        v89 = v46;
        v87 = (char **)v36;
        *(_QWORD *)&v88 = v36;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v87);
        v34 = (unint64_t)v93;
      }
      else
      {
        *(_WORD *)v32 = v33;
        v35 = v32 + 2;
      }
      v92 = v35;
      v47 = location & 0x3FF | 0xDC00;
      if ((unint64_t)v35 >= v34)
      {
        v48 = (void **)v91;
        v49 = v35 - v91;
        if (v35 - v91 <= -3)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        v50 = v49 >> 1;
        v51 = v34 - (_QWORD)v91;
        if (v51 <= (v49 >> 1) + 1)
          v52 = v50 + 1;
        else
          v52 = v51;
        if (v51 >= 0x7FFFFFFFFFFFFFFELL)
          v53 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        v90 = (char *)v94;
        if (v53)
        {
          v54 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v94, v53);
          v48 = (void **)v91;
          v35 = v92;
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[2 * v50];
        *(_WORD *)v55 = v47;
        if (v35 == (char *)v48)
        {
          v57 = &v54[2 * v50];
        }
        else
        {
          v56 = (void **)v35;
          v57 = &v54[2 * v50];
          do
          {
            v58 = *((_WORD *)v56 - 1);
            v56 = (void **)((char *)v56 - 2);
            *((_WORD *)v57 - 1) = v58;
            v57 -= 2;
          }
          while (v56 != v48);
        }
        v32 = v55 + 2;
        v91 = v57;
        v92 = v55 + 2;
        v59 = v93;
        v93 = &v54[2 * v53];
        *((_QWORD *)&v88 + 1) = v35;
        v89 = v59;
        v87 = (char **)v48;
        *(_QWORD *)&v88 = v48;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v87);
      }
      else
      {
        *(_WORD *)v35 = v47;
        v32 = v35 + 2;
      }
      v92 = v32;
      ++location;
    }
    while (location != v14);
    v31 = (v32 - v91) >> 1;
    v30 = v84;
    v29 = v85;
  }
  v60 = *((_QWORD *)&v96 + 1);
  v61 = (uint64_t)(*((_QWORD *)&v96 + 1) - v96) >> 1;
  if (v31 <= v61)
  {
    if (v31 >= v61)
      goto LABEL_91;
    v73 = v96 + 2 * v31;
    goto LABEL_90;
  }
  v62 = v31 - v61;
  if (v31 - v61 <= (uint64_t)(*(_QWORD *)&v97[0] - *((_QWORD *)&v96 + 1)) >> 1)
  {
    bzero(*((void **)&v96 + 1), 2 * v62);
    v73 = v60 + 2 * v62;
LABEL_90:
    *((_QWORD *)&v96 + 1) = v73;
    goto LABEL_91;
  }
  if ((v31 & 0x8000000000000000) != 0)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  if (*(_QWORD *)&v97[0] - (_QWORD)v96 <= v31)
    v63 = v31;
  else
    v63 = *(_QWORD *)&v97[0] - v96;
  if (*(_QWORD *)&v97[0] - (_QWORD)v96 >= 0x7FFFFFFFFFFFFFFEuLL)
    v64 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v64 = v63;
  v90 = (char *)v97 + 8;
  v65 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v97 + 8, v64);
  v66 = v96;
  v67 = &v65[2 * v61];
  v68 = &v65[2 * v64];
  bzero(v67, 2 * v62);
  v69 = &v67[2 * v62];
  if (*((_QWORD *)&v66 + 1) != (_QWORD)v66)
  {
    v70 = *((_QWORD *)&v66 + 1);
    do
    {
      v71 = *(_WORD *)(v70 - 2);
      v70 -= 2;
      *((_WORD *)v67 - 1) = v71;
      v67 -= 2;
    }
    while (v70 != (_QWORD)v66);
  }
  *(_QWORD *)&v96 = v67;
  *((_QWORD *)&v96 + 1) = v69;
  v72 = *(char **)&v97[0];
  *(_QWORD *)&v97[0] = v68;
  v89 = v72;
  v87 = (char **)v66;
  v88 = v66;
  std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v87);
LABEL_91:
  LODWORD(v87) = v31;
  result = (*(uint64_t (**)(uint64_t, char *, _QWORD, char ***, _QWORD))(*(_QWORD *)v86 + 120))(v86, v91, v96, &v87, 0);
  if (v16 == v29)
  {
    v77 = 0;
LABEL_100:
    if (v77 >= v31)
    {
LABEL_104:
      v87 = &v91;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v87);
LABEL_105:
      v91 = (char *)&v96;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v91);
      return 1;
    }
    v81 = v96;
    v82 = (uint64_t)(*((_QWORD *)&v96 + 1) - v96) >> 1;
    v83 = &a2[v77];
    while (v82 > v77)
    {
      *v83++ = *(unsigned __int16 *)(v81 + 2 * v77);
      v77 += 2;
      if (v77 >= v31)
        goto LABEL_104;
    }
  }
  else
  {
    v75 = (unsigned __int16 *)v96;
    v76 = (uint64_t)(*((_QWORD *)&v96 + 1) - v96) >> 1;
    if (v30 <= 1)
      v77 = 1;
    else
      v77 = v30;
    v78 = v77;
    v79 = a2;
    while (v76)
    {
      v80 = *v75++;
      *v79++ = v80;
      --v76;
      if (!--v78)
        goto LABEL_100;
    }
  }
  __break(1u);
  return result;
}

void sub_1B09E224C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
  {
    a13 = &a19;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a13);
    a19 = &a31;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a19);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B09E21E0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFPFont::GetGlyphsXo(TFPFont *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int Glyph;
  uint64_t result;

  Glyph = *((_DWORD *)this + 102);
  if (!Glyph)
  {
    if ((TFPFont::GetXoGlyphsPerShortCuts(this) & 1) != 0)
    {
      Glyph = *((_DWORD *)this + 102);
    }
    else
    {
      Glyph = TFPFont::GetGlyph(*((TFPFont **)this + 2), "X");
      atomic_store(Glyph, (unsigned int *)this + 102);
    }
  }
  *a2 = Glyph;
  result = *((unsigned int *)this + 103);
  if (!(_DWORD)result)
  {
    if (TFPFont::GetXoGlyphsPerShortCuts(this) >= 2)
    {
      result = *((unsigned int *)this + 103);
    }
    else
    {
      result = TFPFont::GetGlyph(*((TFPFont **)this + 2), "o");
      atomic_store(result, (unsigned int *)this + 103);
    }
  }
  *a3 = result;
  return result;
}

uint64_t TFPFont::GetGlyphsForGlyphNames(uint64_t this, const char **a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  const char *v8;

  if (a4)
  {
    v4 = a4;
    v7 = this;
    do
    {
      v8 = *a2++;
      this = TFPFont::GetGlyph(*(TFPFont **)(v7 + 16), v8);
      *a3++ = this;
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t TFPFont::GetGlyphsForCIDs(TFPFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  if (((*(uint64_t (**)(_QWORD, const unsigned __int16 *, uint64_t, unsigned __int16 *))(**((_QWORD **)this + 2)
                                                                                                 + 368))(*((_QWORD *)this + 2), a2, a4, a3) & 1) != 0)return 1;
  bzero(a3, 2 * a4);
  return 0;
}

void sub_1B09E2410(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E2400);
}

uint64_t TFPFont::GetCIDsForGlyphs(TFPFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  if (((*(uint64_t (**)(_QWORD, const unsigned __int16 *, uint64_t, unsigned __int16 *))(**((_QWORD **)this + 2)
                                                                                                 + 376))(*((_QWORD *)this + 2), a2, a4, a3) & 1) != 0)return 1;
  if (a4)
    memset(a3, 255, 2 * a4);
  return 0;
}

void sub_1B09E2478(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E2468);
}

uint64_t TFPFont::GetGlyphForGlyphName(TFPFont **this, CFStringRef theString)
{
  __int128 v4;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  char *v7;
  size_t v8;
  char *v9;
  uint64_t result;
  unsigned __int16 Glyph;
  char *v12;
  const char *v13;
  char *v14;
  _OWORD v15[16];
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[15] = v4;
  v15[14] = v4;
  v15[13] = v4;
  v15[12] = v4;
  v15[11] = v4;
  v15[10] = v4;
  v15[9] = v4;
  v15[8] = v4;
  v15[7] = v4;
  v15[5] = v4;
  v15[6] = v4;
  v15[3] = v4;
  v15[4] = v4;
  v15[1] = v4;
  v15[2] = v4;
  v15[0] = v4;
  Length = CFStringGetLength(theString);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  v7 = (char *)v15;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v16[0] = v15;
  v8 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding == -1)
  {
    v9 = 0;
    v7 = 0;
  }
  else
  {
    if (MaximumSizeForEncoding <= -2)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    if ((_QWORD *)((char *)v15 + v8) <= v16)
      v16[0] = (char *)v15 + v8;
    else
      v7 = (char *)operator new(MaximumSizeForEncoding + 1);
    v9 = &v7[v8];
    v12 = v7;
    v14 = &v7[v8];
    bzero(v7, v8);
    v13 = &v7[v8];
  }
  result = CFStringGetCString(theString, v7, v9 - v7, 0x600u);
  if (!(_DWORD)result)
  {
    std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v12);
    return 0;
  }
  if (v13 != v12)
  {
    Glyph = TFPFont::GetGlyph(this[2], v12);
    std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v12);
    return Glyph;
  }
  __break(1u);
  return result;
}

void sub_1B09E25FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&a10);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B09E25B8);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef TFPFont::CopyGlyphNameForGlyph(TFont **this, unsigned int a2)
{
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) <= a2)
    return 0;
  else
    return TFont::CopyGlyphName(this[2]);
}

CFStringRef TFont::CopyGlyphName(TFont *this)
{
  __int128 v1;
  const UInt8 *v2;
  CFStringRef v3;
  uint64_t v4;
  UInt8 *bytes[2];
  CFIndex numBytes[2];
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v1 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8 = v1;
  v9 = v1;
  *(_OWORD *)bytes = v1;
  *(_OWORD *)numBytes = v1;
  (*(void (**)(UInt8 **__return_ptr))(*(_QWORD *)this + 336))(bytes);
  v2 = bytes[1];
  if (!bytes[1])
  {
    if (!*((_QWORD *)&v8 + 1) || (v4 = *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8)) == 0)
    {
      v3 = 0;
      goto LABEL_7;
    }
    v2 = (const UInt8 *)(v4 + v9);
  }
  v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, numBytes[0], 0x600u, 0);
LABEL_7:
  TStringRef::~TStringRef((void **)bytes);
  return v3;
}

void sub_1B09E2714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TStringRef::~TStringRef(&a9);
  _Unwind_Resume(a1);
}

void TFPFont::GetGlyphIdealAdvanceWidths(TFPFont *this, const unsigned __int16 *a2, double *a3, unint64_t a4)
{
  unsigned int NumberOfGlyphs;
  const TSFNTFont *v9;
  __int128 v10;
  const unsigned __int16 *v11;
  double *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  double Advance;
  const DeltaSetIndexMap **HVARTable;
  const double *HVARScalars;
  const double *v19;
  const unsigned __int16 *v20;
  double *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t Handler;
  unint64_t v26;
  uint64_t EmSpaceTrueTypeScaler;
  uint64_t v28;
  uint64_t v29;
  int v30;
  double v31;
  _OWORD v32[5];

  NumberOfGlyphs = TFPFont::GetNumberOfGlyphs(this);
  v9 = (const TSFNTFont *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (!v9)
    goto LABEL_17;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[3] = v10;
  v32[4] = v10;
  v32[1] = v10;
  v32[2] = v10;
  v32[0] = v10;
  ThmtxTable::ThmtxTable((uint64_t)v32, v9, NumberOfGlyphs | 0x100000000);
  if (a4)
  {
    v11 = a2;
    v12 = a3;
    v13 = a4;
    do
    {
      v15 = *v11++;
      v14 = v15;
      Advance = 0.0;
      if (NumberOfGlyphs > v15)
        Advance = (double)ThmtxTable::GetAdvance((ThmtxTable *)v32, v14);
      *v12++ = Advance;
      --v13;
    }
    while (v13);
  }
  if (!*((_QWORD *)this + 42))
    goto LABEL_15;
  HVARTable = (const DeltaSetIndexMap **)TFPFont::GetHVARTable(this, v9);
  if (HVARTable)
  {
    HVARScalars = (const double *)TFPFont::GetHVARScalars(this, (const THVARTable *)HVARTable);
    if (a4)
    {
      v19 = HVARScalars;
      if (HVARScalars)
      {
        v20 = a2;
        v21 = a3;
        v22 = a4;
        do
        {
          v24 = *v20++;
          v23 = v24;
          if (NumberOfGlyphs > v24)
            *v21 = THVARTable::GetDelta((THVARTable *)HVARTable, v23, HVARTable[13], 0, 0, v19) + *v21;
          ++v21;
          --v22;
        }
        while (v22);
      }
    }
LABEL_15:
    *(_QWORD *)&v32[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v32);
    return;
  }
  Handler = TFPFont::GetHandler(this);
  *(_QWORD *)&v32[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v32);
  if (!Handler)
  {
LABEL_17:
    v26 = TFPFont::GetHandler(this);
    if (v26)
    {
      (*(void (**)(unint64_t, const unsigned __int16 *, double *, unint64_t))(*(_QWORD *)v26 + 64))(v26, a2, a3, a4);
    }
    else
    {
      EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
      if (a4)
      {
        v28 = EmSpaceTrueTypeScaler;
        if (EmSpaceTrueTypeScaler)
        {
          v29 = 0;
          v30 = 0;
          do
          {
            v31 = 0.0;
            if (NumberOfGlyphs > a2[v29])
              v31 = (*(double (**)(uint64_t, double))(*(_QWORD *)v28 + 32))(v28, 0.0);
            a3[v29] = v31;
            v29 = (unsigned __int16)++v30;
          }
          while ((unsigned __int16)v30 < a4);
        }
      }
    }
  }
}

void sub_1B09E292C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E290CLL);
}

double TFPFont::GetGlyphIdealAdvanceAndSideBearing(TFPFont *this, uint64_t a2, double *a3, uint64_t a4)
{
  unsigned int NumberOfGlyphs;
  unsigned int v9;
  const TSFNTFont *v10;
  __int128 v11;
  unsigned int v12;
  double v13;
  __int128 v14;
  const __int16 *v15;
  __int128 v16;
  unsigned int RawMetrics;
  THVARTable *HVARTable;
  const double *HVARScalars;
  const DeltaSetIndexMap *v20;
  double MinX;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t Handler;
  unint64_t v26;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  DeltaSetIndexMap *v35[2];
  DeltaSetIndexMap *v36[2];
  __int16 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  CGRect v43;
  CGRect v44;

  NumberOfGlyphs = TFPFont::GetNumberOfGlyphs(this);
  if (NumberOfGlyphs <= a2)
  {
    v13 = 0.0;
    if (a3)
      *a3 = 0.0;
    return v13;
  }
  v9 = NumberOfGlyphs;
  v10 = (const TSFNTFont *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (!v10)
    return GetIdealAdvanceAndSideBearing(this, a2, a3, a4);
  if (!(_DWORD)a4)
  {
    *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v32 = v16;
    v33 = v16;
    v30 = v16;
    v31 = v16;
    v29 = v16;
    ThmtxTable::ThmtxTable((uint64_t)&v29, v10, v9 | 0x100000000);
    if (!*((_QWORD *)&v29 + 1) || !*(_QWORD *)(*((_QWORD *)&v29 + 1) + 8))
    {
      *(_QWORD *)&v29 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v29);
      return GetIdealAdvanceAndSideBearing(this, a2, a3, a4);
    }
    LOWORD(v38) = 0;
    RawMetrics = ThmtxTable::GetRawMetrics((ThmtxTable *)&v29, a2, (__int16 *)&v38);
    if (a3)
      *a3 = (double)(__int16)v38;
    v13 = (double)RawMetrics;
    if (*((_QWORD *)this + 42))
    {
      HVARTable = TFPFont::GetHVARTable(this, v10);
      if (HVARTable)
      {
        HVARScalars = (const double *)TFPFont::GetHVARScalars(this, HVARTable);
        if (!HVARScalars)
          goto LABEL_39;
        v13 = THVARTable::GetDelta(HVARTable, a2, *((const DeltaSetIndexMap **)HVARTable + 13), 0, 0, HVARScalars)
            + v13;
        if (!a3)
          goto LABEL_39;
        v20 = (const DeltaSetIndexMap *)*((_QWORD *)HVARTable + 14);
        if (!v20)
        {
          GetIdealAdvanceAndSideBearing(this, a2, a3, 0);
          goto LABEL_39;
        }
        MinX = THVARTable::GetDelta(HVARTable, a2, v20, 0, 0, HVARScalars) + *a3;
      }
      else
      {
        Handler = TFPFont::GetHandler(this);
        v26 = Handler;
        if (!a3 || !Handler)
        {
          ThmtxTable::~ThmtxTable((ThmtxTable *)&v29);
          if (v26)
            return v13;
          return GetIdealAdvanceAndSideBearing(this, a2, a3, a4);
        }
        v44.origin.x = (*(double (**)(TFPFont *, uint64_t))(*(_QWORD *)this + 568))(this, a2);
        MinX = CGRectGetMinX(v44);
      }
      *a3 = MinX;
    }
LABEL_39:
    *(_QWORD *)&v29 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v29);
    return v13;
  }
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41 = v11;
  v42 = v11;
  v39 = v11;
  v40 = v11;
  v38 = v11;
  ThmtxTable::ThmtxTable((uint64_t)&v38, v10, 1986553185, 1986884728, v9 | 0x100000000);
  *(_QWORD *)&v38 = &off_1E61B4A78;
  if (!*((_QWORD *)&v38 + 1) || !*(_QWORD *)(*((_QWORD *)&v38 + 1) + 8))
  {
    *(_QWORD *)&v38 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v38);
    return GetIdealAdvanceAndSideBearing(this, a2, a3, a4);
  }
  v37 = -21846;
  v12 = ThmtxTable::GetRawMetrics((ThmtxTable *)&v38, a2, &v37);
  if (a3)
    *a3 = (double)v37;
  v13 = (double)v12;
  if (!*((_QWORD *)this + 42))
    goto LABEL_42;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v35 = v14;
  *(_OWORD *)v36 = v14;
  v33 = v14;
  v34 = v14;
  v31 = v14;
  v32 = v14;
  v29 = v14;
  v30 = v14;
  TVVARTable::TVVARTable((TVVARTable *)&v29, v10);
  if (TsfntTable::operator BOOL((TsfntTable *)&v29))
  {
    v28 = 0;
    v15 = (const __int16 *)(*(uint64_t (**)(TFPFont *, unint64_t *))(*(_QWORD *)this + 232))(this, &v28);
    if (v15)
    {
      v13 = THVARTable::GetDelta((THVARTable *)&v29, a2, v35[1], v28, v15, 0) + v13;
      if (a3)
      {
        if (v36[0])
          *a3 = THVARTable::GetDelta((THVARTable *)&v29, a2, v36[0], v28, v15, 0) + *a3;
        else
          GetIdealAdvanceAndSideBearing(this, a2, a3, 1);
      }
    }
    *(_QWORD *)&v29 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v29);
    goto LABEL_42;
  }
  *(_QWORD *)&v29 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v29);
  v22 = TFPFont::GetHandler(this);
  v23 = v22;
  if (a3 && v22)
  {
    v24 = *(_DWORD *)((*(uint64_t (**)(TFPFont *))(*(_QWORD *)this + 256))(this) + 12);
    v43.origin.x = (*(double (**)(TFPFont *, uint64_t))(*(_QWORD *)this + 568))(this, a2);
    *a3 = (double)(__int16)v24 - CGRectGetMaxY(v43);
LABEL_42:
    *(_QWORD *)&v38 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v38);
    return v13;
  }
  TvmtxTable::~TvmtxTable((TvmtxTable *)&v38);
  if (!v23)
    return GetIdealAdvanceAndSideBearing(this, a2, a3, a4);
  return v13;
}

double GetIdealAdvanceAndSideBearing(const TFPFont *a1, uint64_t a2, double *a3, uint64_t a4)
{
  unint64_t Handler;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t EmSpaceTrueTypeScaler;
  uint64_t v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  int v25;
  int v26;
  double v27;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  _OWORD v33[10];
  _DWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  CGRect v39;
  CGRect v40;

  Handler = TFPFont::GetHandler(a1);
  if (!Handler)
  {
    v10 = *((_QWORD *)a1 + 32);
    v11 = *((_QWORD *)a1 + 35);
    v12 = *((_QWORD *)a1 + 2);
    if ((_DWORD)a4)
      v13 = 8;
    else
      v13 = 0;
    v34[0] = v13;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
    v35 = xmmword_1B0AABB70;
    v36 = xmmword_1B0AABB70;
    v37 = xmmword_1B0AABB80;
    v34[1] = v14 << 16;
    v38 = 0x10000;
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v33[8] = v15;
    v33[9] = v15;
    v33[6] = v15;
    v33[7] = v15;
    v33[4] = v15;
    v33[5] = v15;
    v33[2] = v15;
    v33[3] = v15;
    v33[0] = v15;
    v33[1] = v15;
    TScalerStrike::TScalerStrike((uint64_t)v33, v12, v10, v11, (__int128 *)v34);
    EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)a1);
    if ((_DWORD)a4)
    {
      TFontScaler::CreateFontScaler((uint64_t)v33, 0, &v31);
      v17 = v31;
      EmSpaceTrueTypeScaler = v31;
    }
    else
    {
      v17 = 0;
    }
    if (a2 <= 0xFFFE && EmSpaceTrueTypeScaler)
    {
      if (!a3)
      {
        v9 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)EmSpaceTrueTypeScaler + 32))(EmSpaceTrueTypeScaler, (unsigned __int16)a2);
        if (!v17)
        {
LABEL_28:
          TScalerStrike::~TScalerStrike((TScalerStrike *)v33);
          return v9;
        }
LABEL_27:
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        goto LABEL_28;
      }
      *(double *)&v31 = NAN;
      v32 = NAN;
      *(double *)&v29 = NAN;
      v30 = NAN;
      if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)EmSpaceTrueTypeScaler
                                                                                         + 72))(EmSpaceTrueTypeScaler, (unsigned __int16)a2, &v31, &v29, 0))
      {
        if ((a4 & 1) != 0)
        {
          v27 = -v30;
          v9 = -v32;
        }
        else
        {
          v27 = *(double *)&v29;
          v9 = *(double *)&v31;
        }
        *a3 = v27;
        if (!v17)
          goto LABEL_28;
        goto LABEL_27;
      }
    }
    else if (!a3)
    {
      goto LABEL_22;
    }
    *a3 = 0.0;
LABEL_22:
    v9 = 0.0;
    if (!v17)
      goto LABEL_28;
    goto LABEL_27;
  }
  *(_QWORD *)&v33[0] = -1;
  if ((*(unsigned int (**)(unint64_t, uint64_t, _OWORD *, double *, uint64_t))(*(_QWORD *)Handler + 40))(Handler, a2, v33, a3, a4))
  {
    return *(double *)v33;
  }
  if ((_DWORD)a4)
  {
    v18 = (*(double (**)(const TFPFont *, uint64_t))(*(_QWORD *)a1 + 568))(a1, a2);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    v25 = *(_DWORD *)((*(uint64_t (**)(const TFPFont *))(*(_QWORD *)a1 + 256))(a1) + 12);
    v26 = *(_DWORD *)((*(uint64_t (**)(const TFPFont *))(*(_QWORD *)a1 + 256))(a1) + 16);
    if (a3)
    {
      v39.origin.x = v18;
      v39.origin.y = v20;
      v39.size.width = v22;
      v39.size.height = v24;
      *a3 = (double)(__int16)v25 - CGRectGetMaxY(v39);
    }
    return (double)((__int16)v25 - (__int16)v26);
  }
  else
  {
    v9 = 0.0;
    if (a3)
    {
      v40.origin.x = (*(double (**)(const TFPFont *, uint64_t))(*(_QWORD *)a1 + 568))(a1, a2);
      *a3 = CGRectGetMinX(v40);
    }
  }
  return v9;
}

void sub_1B09E30DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  TScalerStrike::~TScalerStrike((TScalerStrike *)va);
  _Unwind_Resume(a1);
}

double TFPFont::GetGlyphIdealBounds(TFPFont *this, uint64_t a2)
{
  double v4;
  unint64_t Handler;
  const CGPath *v6;
  const CGPath *v7;
  double v9;
  double v10;
  double v11;
  double v12;

  v4 = *MEMORY[0x1E0C9D648];
  if (TFPFont::GetNumberOfGlyphs(this) > a2)
  {
    Handler = TFPFont::GetHandler(this);
    v11 = NAN;
    v12 = NAN;
    v9 = NAN;
    v10 = NAN;
    if (Handler
      && (*(unsigned int (**)(unint64_t, uint64_t, double *, double *, double *, double *, _QWORD))(*(_QWORD *)Handler + 48))(Handler, a2, &v12, &v11, &v10, &v9, 0))
    {
      if (v10 >= v12 && v9 >= v11)
        return v12;
    }
    else
    {
      v6 = TFPFont::CopyGlyphPath((unint64_t **)this, a2);
      if (v6)
      {
        v7 = v6;
        *(_QWORD *)&v4 = (unint64_t)CGPathGetBoundingBox(v6);
        CFRelease(v7);
      }
    }
  }
  return v4;
}

void sub_1B09E321C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E31F4);
}

const CGPath *TFPFont::CopyGlyphPath(unint64_t **this, uint64_t a2)
{
  unint64_t *v4;
  _QWORD *v5;
  TGlyphOutlineCache *v6;
  _QWORD *GlyphOutlineCache;
  unint64_t v8;
  const CGPath *v9;
  const CGPath *v10;
  char v11;
  unint64_t Handler;
  const CGPath *v13;
  BOOL v14;
  CGPathRef CopyByNormalizing;
  const CGPath *v16;
  const CGPath *v17;
  uint64_t EmSpaceTrueTypeScaler;
  BOOL v20;

  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) <= a2)
    return 0;
  if (this[35])
  {
    v4 = (unint64_t *)(this + 53);
    v5 = (_QWORD *)atomic_load((unint64_t *)this + 53);
    if (!v5)
    {
      v6 = (TGlyphOutlineCache *)(*(uint64_t (**)(unint64_t *))(*this[2] + 168))(this[2]);
      GlyphOutlineCache = TGlyphOutlineCache::CreateGlyphOutlineCache(v6);
      v5 = GlyphOutlineCache;
      while (1)
      {
        v8 = __ldaxr(v4);
        if (v8)
          break;
        if (!__stlxr((unint64_t)GlyphOutlineCache, v4))
          goto LABEL_10;
      }
      __clrex();
      (*(void (**)(_QWORD *))(*GlyphOutlineCache + 8))(GlyphOutlineCache);
      v5 = (_QWORD *)v8;
      goto LABEL_10;
    }
  }
  else
  {
    v5 = TFont::GetGlyphOutlineCache(this[2]);
  }
  if (!v5)
  {
    v11 = 1;
    goto LABEL_17;
  }
LABEL_10:
  v9 = (const CGPath *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 24))(v5, a2);
  v10 = v9;
  if (!v9)
  {
    v11 = 0;
LABEL_17:
    v20 = 0;
    Handler = TFPFont::GetHandler((TFPFont *)this);
    if (Handler)
    {
      v13 = (const CGPath *)(*(uint64_t (**)(unint64_t, uint64_t, BOOL *))(*(_QWORD *)Handler + 80))(Handler, a2, &v20);
    }
    else
    {
      EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
      v13 = 0;
      if (a2 <= 0xFFFE && EmSpaceTrueTypeScaler)
      {
        v13 = (const CGPath *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)EmSpaceTrueTypeScaler
                                                                                 + 88))(EmSpaceTrueTypeScaler, (unsigned __int16)a2, 0);
        v20 = this[32] != 0;
      }
    }
    v10 = PathOrNullIfEmpty(v13);
    if (v10)
      v14 = !v20;
    else
      v14 = 1;
    if (!v14 && _os_feature_enabled_impl())
    {
      CopyByNormalizing = CGPathCreateCopyByNormalizing(v10, 0);
      v16 = v10;
      v10 = CopyByNormalizing;
      CGPathRelease(v16);
    }
    if ((v11 & 1) == 0)
    {
      if (v10)
        v17 = v10;
      else
        v17 = (const CGPath *)*MEMORY[0x1E0C9B0D0];
      (*(void (**)(_QWORD *, uint64_t, const CGPath *))(*v5 + 32))(v5, a2, v17);
    }
    return v10;
  }
  if (v9 == (const CGPath *)*MEMORY[0x1E0C9B0D0])
  {
    CFRelease(v9);
    return 0;
  }
  return v10;
}

void sub_1B09E3438(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E33D4);
}

double TFPFont::GetGlyphIdealVerticalBounds(TFPFont *this, uint64_t a2)
{
  double v4;
  unint64_t Handler;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  _OWORD v23[10];
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  double v29;
  double v30;
  CGRect v31;

  v4 = *MEMORY[0x1E0C9D648];
  if (TFPFont::GetNumberOfGlyphs(this) <= a2)
    return v4;
  Handler = TFPFont::GetHandler(this);
  if (!Handler)
  {
    v6 = *((_QWORD *)this + 32);
    v7 = *((_QWORD *)this + 35);
    v8 = *((_QWORD *)this + 2);
    LODWORD(v24) = 8;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    v25 = xmmword_1B0AABB70;
    v26 = xmmword_1B0AABB70;
    v27 = xmmword_1B0AABB80;
    HIDWORD(v24) = v9 << 16;
    v28 = 0x10000;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[8] = v10;
    v23[9] = v10;
    v23[6] = v10;
    v23[7] = v10;
    v23[4] = v10;
    v23[5] = v10;
    v23[2] = v10;
    v23[3] = v10;
    v23[0] = v10;
    v23[1] = v10;
    TScalerStrike::TScalerStrike((uint64_t)v23, v8, v6, v7, (__int128 *)&v24);
    v30 = -3.72066208e-103;
    TFontScaler::CreateFontScaler((uint64_t)v23, 0, &v30);
    v11 = v30;
    if (a2 > 0xFFFE || v30 == 0.0)
    {
      if (v30 == 0.0)
      {
LABEL_14:
        TScalerStrike::~TScalerStrike((TScalerStrike *)v23);
        return v4;
      }
    }
    else
    {
      v4 = (*(double (**)(double, _QWORD))(**(_QWORD **)&v30 + 40))(COERCE_DOUBLE(*(_QWORD *)&v30), (unsigned __int16)a2);
    }
    (*(void (**)(double))(**(_QWORD **)&v11 + 8))(COERCE_DOUBLE(*(_QWORD *)&v11));
    goto LABEL_14;
  }
  *(_QWORD *)&v23[0] = -1;
  v24 = NAN;
  v29 = NAN;
  v30 = NAN;
  if ((*(unsigned int (**)(unint64_t, uint64_t, _OWORD *, double *, double *, double *, uint64_t))(*(_QWORD *)Handler + 48))(Handler, a2, v23, &v24, &v30, &v29, 1))
  {
    if (v30 >= *(double *)v23 && v29 >= v24)
      return *(double *)v23;
  }
  else
  {
    v12 = (*(double (**)(TFPFont *, uint64_t))(*(_QWORD *)this + 568))(this, a2);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v19 = (*(double (**)(TFPFont *, uint64_t))(*(_QWORD *)this + 624))(this, a2);
    v21 = v20;
    v31.origin.x = v12;
    v31.origin.y = v14;
    v31.size.width = v16;
    v31.size.height = v18;
    *(_QWORD *)&v4 = (unint64_t)CGRectOffset(v31, v19, v21);
  }
  return v4;
}

void sub_1B09E36BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  TScalerStrike::~TScalerStrike((TScalerStrike *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E3684);
}

double TFPFont::GetGlyphVerticalTranslate(TFPFont *this, uint64_t a2)
{
  double v4;
  unsigned int NumberOfGlyphs;
  unsigned int v6;
  unint64_t Handler;
  const TSFNTFont *v8;
  __int128 v9;
  TsfntTable *v10;
  __int128 v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t TableEnd;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v24;
  unsigned __int16 *v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned int v28;
  double v29;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned int v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unsigned __int16 *v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unsigned int Advance;
  __int128 v44;
  const __int16 *v45;
  _QWORD v46[2];
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  _OWORD v60[5];
  CGRect v61;

  v4 = *MEMORY[0x1E0C9D820];
  NumberOfGlyphs = TFPFont::GetNumberOfGlyphs(this);
  if (NumberOfGlyphs <= a2)
    return v4;
  v6 = NumberOfGlyphs;
  Handler = TFPFont::GetHandler(this);
  v46[0] = -1;
  v46[1] = -1;
  if (Handler
    && (*(unsigned int (**)(unint64_t, uint64_t, _QWORD *))(*(_QWORD *)Handler + 56))(Handler, a2, v46))
  {
    return *(double *)v46;
  }
  v8 = (const TSFNTFont *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 432))(*((_QWORD *)this + 2));
  if (!v8)
  {
LABEL_36:
    v61.origin.x = (*(double (**)(TFPFont *, uint64_t))(*(_QWORD *)this + 568))(this, a2);
    CGRectGetMaxY(v61);
    v29 = (*(double (**)(TFPFont *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 560))(this, a2, 0, 0);
    *(_QWORD *)&v48 = 0;
    (*(void (**)(TFPFont *, uint64_t, __int128 *, uint64_t))(*(_QWORD *)this + 560))(this, a2, &v48, 1);
    return v29 * -0.5;
  }
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60[3] = v9;
  v60[4] = v9;
  v60[1] = v9;
  v60[2] = v9;
  v60[0] = v9;
  v10 = (TsfntTable *)ThmtxTable::ThmtxTable((uint64_t)v60, v8, 1986553185, 1986884728, v6 | 0x100000000);
  *(_QWORD *)&v60[0] = &off_1E61B4A78;
  if (!TsfntTable::operator BOOL(v10))
  {
LABEL_35:
    *(_QWORD *)&v60[0] = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)v60);
    goto LABEL_36;
  }
  v59 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57 = v11;
  v58 = v11;
  v56 = v11;
  TsfntTable::TsfntTable((TsfntTable *)&v56, v8, 1448038983);
  *(_QWORD *)&v56 = &off_1E61B4EC0;
  if (*((_QWORD *)&v56 + 1) && (v12 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8)) != 0)
    v13 = (_WORD *)(v12 + v57);
  else
    v13 = 0;
  TableEnd = TsfntTable::GetTableEnd((TsfntTable *)&v56);
  v15 = *((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v15 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8);
    if (v15)
      v15 += v57;
  }
  if (TableEnd - v15 < 8 || *v13 != 256)
  {
    v48 = (unint64_t)&off_1E6176770;
    v49 = 0uLL;
    TDataReference::DucRefCount((TDataReference *)&v56);
    v57 = 0uLL;
    *((_QWORD *)&v56 + 1) = 0;
    v48 = (unint64_t)&off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v48);
  }
  if (!TsfntTable::operator BOOL((TsfntTable *)&v56))
  {
    *(_QWORD *)&v56 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v56);
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8) + v57;
  v17 = *(unsigned __int16 *)(v16 + 6);
  v18 = TsfntTable::GetTableEnd((TsfntTable *)&v56);
  v19 = (unsigned __int16 *)(v16 + 8);
  v20 = __rev16(v17);
  v21 = v16 + 8 + 4 * v20;
  if (v16 + 12 <= v18)
    v22 = (v18 - (v16 + 8)) >> 2;
  else
    LOWORD(v22) = 0;
  if (v21 > v18 || v21 < (unint64_t)v19)
    LOWORD(v20) = v22;
  if ((_WORD)v20)
  {
    v24 = (unsigned __int16)v20;
    v25 = &v19[2 * (unsigned __int16)v20];
    do
    {
      v26 = v24 >> 1;
      v27 = &v19[2 * (v24 >> 1)];
      v28 = bswap32(*v27) >> 16;
      if (v28 >= a2)
      {
        if (v28 <= a2)
        {
          if (v24 >= 2)
          {
            v31 = v19;
            do
            {
              v32 = v26 >> 1;
              v33 = &v31[2 * (v26 >> 1)];
              v35 = *v33;
              v34 = v33 + 2;
              v26 += ~(v26 >> 1);
              if (bswap32(v35) >> 16 >= a2)
                v26 = v32;
              else
                v31 = v34;
            }
            while (v26);
          }
          v36 = v27 + 2;
          if (v25 != v36)
          {
            v37 = ((char *)v25 - (char *)v36) >> 2;
            v38 = v36;
            do
            {
              v39 = v37 >> 1;
              v40 = &v38[2 * (v37 >> 1)];
              v42 = *v40;
              v41 = v40 + 2;
              v37 += ~(v37 >> 1);
              if (bswap32(v42) >> 16 > a2)
                v37 = v39;
              else
                v38 = v41;
            }
            while (v37);
          }
          break;
        }
        v25 = &v19[2 * (v24 >> 1)];
      }
      else
      {
        v19 = v27 + 2;
        v26 = v24 + ~v26;
      }
      v24 = v26;
    }
    while (v26);
  }
  ThmtxTable::ThmtxTable((uint64_t)&v48, v8, 0);
  Advance = ThmtxTable::GetAdvance((ThmtxTable *)&v48, a2);
  *(_QWORD *)&v48 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v48);
  *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v55 = v44;
  v53 = v44;
  v54 = v44;
  v51 = v44;
  v52 = v44;
  v49 = v44;
  v50 = v44;
  v48 = v44;
  TVVARTable::TVVARTable((TVVARTable *)&v48, v8);
  if (TsfntTable::operator BOOL((TsfntTable *)&v48))
  {
    if (*((_QWORD *)&v55 + 1))
    {
      v47 = 0;
      v45 = (const __int16 *)(*(uint64_t (**)(TFPFont *, unint64_t *))(*(_QWORD *)this + 232))(this, &v47);
      if (v45)
        THVARTable::GetDelta((THVARTable *)&v48, a2, *((const DeltaSetIndexMap **)&v55 + 1), v47, v45, 0);
    }
  }
  *(_QWORD *)&v48 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v48);
  *(_QWORD *)&v56 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v56);
  *(_QWORD *)&v60[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v60);
  return (double)-(Advance >> 1);
}

void sub_1B09E3BBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  TVVARTable::~TVVARTable((TVVARTable *)&a13);
  TVORGTable::~TVORGTable((TVORGTable *)&a29);
  TvmtxTable::~TvmtxTable((TvmtxTable *)(v29 - 192));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E3A08);
}

double TFPFont::GetGlyphDeviceAdvance(CGAffineTransform *this, const CGAffineTransform *a2, uint64_t a3)
{
  double v6;
  unint64_t v7;
  double v8;
  unint64_t v10;

  v6 = *MEMORY[0x1E0C9D820];
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) > a3)
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
    CreateHintedFontScaler((const TFPFont *)&v10, this, a2, 0);
    v7 = v10;
    if (a3 <= 0xFFFE && v10)
    {
      v8 = (*(double (**)(unint64_t, _QWORD))(*(_QWORD *)v10 + 48))(v10, (unsigned __int16)a3);
    }
    else
    {
      v8 = (*(double (**)(CGAffineTransform *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)&this->a + 560))(this, a3, 0, 0);
      if (!v7)
        return v8;
    }
    (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
    return v8;
  }
  return v6;
}

void sub_1B09E3D64(void *a1)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E3D40);
}

void CreateHintedFontScaler(const TFPFont *a1, const CGAffineTransform *a2, const CGAffineTransform *a3, int a4)
{
  CGFloat c;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  CGFloat ty;
  __int128 v12;
  const char *CString;
  _BOOL4 v14;
  _OWORD v15[10];
  __int128 v16[2];
  _OWORD v17[2];
  int64x2_t *v18;
  int64x2_t v19;
  uint64_t v20;
  _OWORD v21[2];
  _OWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  c = a2[5].c;
  v7 = *(_QWORD *)&a2[5].ty;
  v8 = *(_QWORD *)&a2->c;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v17 + 12) = v9;
  v16[1] = v9;
  v17[0] = v9;
  v16[0] = v9;
  TStrikeTransform::TStrikeTransform((TStrikeTransform *)v16, (const TFont *)v8, a3, a4 | 1);
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[8] = v10;
  v15[9] = v10;
  v15[6] = v10;
  v15[7] = v10;
  v15[4] = v10;
  v15[5] = v10;
  v15[2] = v10;
  v15[3] = v10;
  v15[0] = v10;
  v15[1] = v10;
  TScalerStrike::TScalerStrike((uint64_t)v15, v8, LODWORD(c), v7, v16);
  ty = a2->ty;
  if (ty == 0.0)
  {
    v14 = 0;
  }
  else
  {
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[0] = v12;
    v21[1] = v12;
    v19 = 0uLL;
    v20 = 0;
    v22 = v21;
    CString = GetCStringPtr<TInlineVector<char,30ul>>(*(const __CFString **)&ty, &v19, 0x8000100u);
    v14 = strncmp(CString, "/System/", 8uLL) == 0;
    v18 = &v19;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v18);
  }
  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  TFontScaler::CreateFontScaler((uint64_t)v15, v14, a1);
  if (!*(_QWORD *)a1)
    *(_QWORD *)a1 = 0;
  TScalerStrike::~TScalerStrike((TScalerStrike *)v15);
}

void sub_1B09E3EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 144) = v9;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)(v10 - 144));
  TScalerStrike::~TScalerStrike((TScalerStrike *)&a9);
  _Unwind_Resume(a1);
}

double TFPFont::GetGlyphDeviceVerticalAdvance(CGAffineTransform *this, const CGAffineTransform *a2, uint64_t a3)
{
  double v6;
  unint64_t v7;
  double v8;
  unint64_t v10;

  v6 = *MEMORY[0x1E0C9D820];
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) > a3)
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
    CreateHintedFontScaler((const TFPFont *)&v10, this, a2, 8);
    v7 = v10;
    if (a3 <= 0xFFFE && v10)
    {
      v8 = (*(double (**)(unint64_t, _QWORD))(*(_QWORD *)v10 + 48))(v10, (unsigned __int16)a3);
    }
    else
    {
      v8 = (*(double (**)(CGAffineTransform *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)&this->a + 560))(this, a3, 0, 1);
      if (!v7)
        return v8;
    }
    (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
    return v8;
  }
  return v6;
}

void sub_1B09E4010(void *a1)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E3FECLL);
}

double TFPFont::GetGlyphDeviceBounds(CGAffineTransform *this, const CGAffineTransform *a2, uint64_t a3)
{
  double v6;
  unint64_t v7;
  double v8;
  unint64_t v10;

  v6 = *MEMORY[0x1E0C9D648];
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) > a3)
  {
    v10 = 0xAAAAAAAAAAAAAAAALL;
    CreateHintedFontScaler((const TFPFont *)&v10, this, a2, 0);
    v7 = v10;
    if (a3 <= 0xFFFE && v10)
    {
      v8 = (*(double (**)(unint64_t, _QWORD))(*(_QWORD *)v10 + 56))(v10, (unsigned __int16)a3);
    }
    else
    {
      v8 = (*(double (**)(CGAffineTransform *, uint64_t))(*(_QWORD *)&this->a + 568))(this, a3);
      if (!v7)
        return v8;
    }
    (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
    return v8;
  }
  return v6;
}

void sub_1B09E4168(void *a1)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E4134);
}

double TFPFont::GetGlyphDeviceVerticalBounds(CGAffineTransform *this, const CGAffineTransform *a2, uint64_t a3)
{
  double v6;
  unint64_t v7;
  CGFloat x;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  __int128 v22;
  __int128 v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGAffineTransform v28;
  CGAffineTransform v29;
  unint64_t v30;
  CGRect v31;
  CGRect v32;

  v6 = *MEMORY[0x1E0C9D648];
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) > a3)
  {
    v30 = 0xAAAAAAAAAAAAAAAALL;
    CreateHintedFontScaler((const TFPFont *)&v30, this, a2, 8);
    v7 = v30;
    if (a3 <= 0xFFFE && v30)
    {
      x = (*(double (**)(unint64_t, _QWORD))(*(_QWORD *)v30 + 56))(v30, (unsigned __int16)a3);
    }
    else
    {
      v9 = (*(double (**)(CGAffineTransform *, uint64_t))(*(_QWORD *)&this->a + 568))(this, a3);
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v16 = (*(double (**)(CGAffineTransform *, uint64_t))(*(_QWORD *)&this->a + 624))(this, a3);
      v18 = v17;
      v31.origin.x = v9;
      v31.origin.y = v11;
      v31.size.width = v13;
      v31.size.height = v15;
      v32 = CGRectOffset(v31, v16, v18);
      x = v32.origin.x;
      y = v32.origin.y;
      width = v32.size.width;
      height = v32.size.height;
      if (a2)
      {
        v22 = *(_OWORD *)&a2->c;
        *(_OWORD *)&v29.a = *(_OWORD *)&a2->a;
        *(_OWORD *)&v29.c = v22;
        *(_OWORD *)&v29.tx = *(_OWORD *)&a2->tx;
        if (!CGAffineTransformIsIdentity(&v29))
        {
          v23 = *(_OWORD *)&a2->c;
          *(_OWORD *)&v28.a = *(_OWORD *)&a2->a;
          *(_OWORD *)&v28.c = v23;
          *(_OWORD *)&v28.tx = *(_OWORD *)&a2->tx;
          v24 = x;
          *(CGFloat *)&v23 = y;
          v25 = width;
          v26 = height;
          *(_QWORD *)&x = (unint64_t)CGRectApplyAffineTransform(*(CGRect *)((char *)&v23 - 8), &v28);
        }
      }
      if (!v7)
        return x;
    }
    (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
    return x;
  }
  return v6;
}

void sub_1B09E4358(void *a1)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E4324);
}

uint64_t TFPFont::CopyGlyphBitmap(TFPFont *this, const CGAffineTransform *a2, unsigned int a3, uint64_t a4, CGRect *a5, unint64_t *a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;

  if (TFPFont::GetNumberOfGlyphs(this) <= a3)
    return 0;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  CreateHintedFontScaler((const TFPFont *)&v15, (const CGAffineTransform *)this, a2, 0);
  v12 = v15;
  if (a3 <= 0xFFFE && v15)
  {
    v13 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, CGRect *, unint64_t *))(*(_QWORD *)v15 + 104))(v15, (unsigned __int16)a3, a4, a5, a6);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v15)
      return result;
  }
  (*(void (**)(unint64_t))(*(_QWORD *)v12 + 8))(v12);
  return v13;
}

const CGPath *PathOrNullIfEmpty(CGPathRef path)
{
  const CGPath *v1;
  CGRect BoundingBox;

  v1 = path;
  if (path)
  {
    if (CGPathIsEmpty(path) || (BoundingBox = CGPathGetBoundingBox(v1), CGRectIsEmpty(BoundingBox)))
    {
      CGPathRelease(v1);
      return 0;
    }
  }
  return v1;
}

const CGPath *TFPFont::CopyGlyphPath(unint64_t **this, const CGAffineTransform *a2, uint64_t a3)
{
  const CGPath *v5;
  __int128 v6;
  unsigned int UnitsPerEm;
  const CGPath *v8;
  const CGPath *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  CGAffineTransform v14;
  _OWORD v15[3];

  v5 = TFPFont::CopyGlyphPath(this, a3);
  if (a2)
  {
    v6 = *(_OWORD *)&a2->c;
    *(_OWORD *)&v14.a = *(_OWORD *)&a2->a;
    *(_OWORD *)&v14.c = v6;
    *(_OWORD *)&v14.tx = *(_OWORD *)&a2->tx;
    if (!CGAffineTransformIsIdentity(&v14))
    {
      UnitsPerEm = TFPFont::GetUnitsPerEm((uint64_t)this);
      v8 = PathOrNullIfEmpty(v5);
      if (v8)
      {
        v9 = v8;
        v10 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)UnitsPerEm), 0);
        v11 = vdivq_f64(*(float64x2_t *)&a2->a, v10);
        v12 = vdivq_f64(*(float64x2_t *)&a2->c, v10);
        v15[0] = v11;
        v15[1] = v12;
        v15[2] = *(_OWORD *)&a2->tx;
        v5 = (const CGPath *)MEMORY[0x1B5E0CB70](v8, v15);
        CGPathRelease(v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return v5;
}

CGPathRef TFPFont::CopyOriginalGlyphPath(TFPFont *this, const CGAffineTransform *a2, uint64_t a3)
{
  __int128 v6;
  unint64_t Handler;
  __int128 v8;
  CGPathRef v9;
  uint64_t EmSpaceTrueTypeScaler;
  __int128 v12;
  CGPathRef path[2];
  unint64_t v14;
  CGAffineTransform v15;

  if (TFPFont::GetNumberOfGlyphs(this) <= a3)
    return 0;
  if (a2)
  {
    v6 = *(_OWORD *)&a2->c;
    *(_OWORD *)&v15.a = *(_OWORD *)&a2->a;
    *(_OWORD *)&v15.c = v6;
    *(_OWORD *)&v15.tx = *(_OWORD *)&a2->tx;
    if (CGAffineTransformIsIdentity(&v15))
      a2 = 0;
  }
  Handler = TFPFont::GetHandler(this);
  if (Handler)
  {
    v14 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v12 = v8;
    *(_OWORD *)path = v8;
    TGlyphOutlineContext::TGlyphOutlineContext((TGlyphOutlineContext *)&v12, a2);
    (*(void (**)(unint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)Handler + 72))(Handler, a3, &v12, 0);
    v9 = path[0];
    path[0] = 0;
    *(_QWORD *)&v12 = &off_1E617B948;
    CGPathRelease(0);
  }
  else
  {
    EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
    v9 = 0;
    if (a3 <= 0xFFFE && EmSpaceTrueTypeScaler)
      return (CGPathRef)(*(uint64_t (**)(uint64_t, _QWORD, const CGAffineTransform *))(*(_QWORD *)EmSpaceTrueTypeScaler
                                                                                              + 88))(EmSpaceTrueTypeScaler, (unsigned __int16)a3, a2);
  }
  return v9;
}

uint64_t TFPFont::CopyHintedGlyphPath(TFPFont *this, const CGAffineTransform *a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;

  if (TFPFont::GetNumberOfGlyphs(this) <= a3)
    return 0;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  CreateHintedFontScaler((const TFPFont *)&v9, (const CGAffineTransform *)this, a2, 0);
  v6 = v9;
  if (a3 <= 0xFFFE && v9)
  {
    v7 = (*(uint64_t (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 88))(v9, (unsigned __int16)a3, 0);
  }
  else
  {
    v7 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  (*(void (**)(unint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v7;
}

uint64_t TFPFont::GetFontSubsetFormat(TType1PSFont **this, const TFont *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t EmSpaceTrueTypeScaler;
  unint64_t Handler;
  __int128 v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int v13;
  _OWORD v14[8];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v14[0] = 0xAAAAAAAAAAAAAAAALL;
  TType1PSFont::GetFont(this[2], a2, (uint64_t *)v14);
  v3 = *(_QWORD *)&v14[0];
  if (!*(_QWORD *)&v14[0])
  {
    Handler = TFPFont::GetHandler((TFPFont *)this);
    if (Handler && ((*(uint64_t (**)(unint64_t))(*(_QWORD *)Handler + 96))(Handler) & 1) != 0)
      return 2;
    EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
    if (!EmSpaceTrueTypeScaler)
      return EmSpaceTrueTypeScaler;
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[6] = v7;
    v14[7] = v7;
    v14[4] = v7;
    v14[5] = v7;
    v14[2] = v7;
    v14[3] = v7;
    v8 = 962;
    v9 = (int *)v14;
    v14[0] = v7;
    v14[1] = v7;
    while (1)
    {
      v13 = v8;
      if (!(*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)EmSpaceTrueTypeScaler + 128))(EmSpaceTrueTypeScaler, &v13))
      {
LABEL_21:
        *v9 = 0;
        return CGFontFormatFromStreamType(LODWORD(v14[0]), (uint64_t)this);
      }
      v10 = v13;
      if ((v13 & 0x40) != 0)
        break;
      if ((v13 & 2) != 0)
      {
        v11 = 2;
        goto LABEL_19;
      }
      if ((v13 & 0x200) != 0)
      {
        v11 = 512;
        goto LABEL_19;
      }
      if ((v13 & 0x100) != 0)
      {
        v11 = 256;
        goto LABEL_19;
      }
      if ((v13 & 0x80) != 0)
      {
        v11 = 128;
LABEL_19:
        *v9++ = v11;
        v10 = v13;
      }
      v8 &= ~v10;
      if (!v8)
        goto LABEL_21;
    }
    v11 = 64;
    goto LABEL_19;
  }
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)&v14[0] + 48))(*(_QWORD *)&v14[0], 962);
  EmSpaceTrueTypeScaler = CGFontFormatFromStreamType(v4, (uint64_t)this);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return EmSpaceTrueTypeScaler;
}

void sub_1B09E49B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B09E4984);
  }
  _Unwind_Resume(a1);
}

uint64_t CGFontFormatFromStreamType(uint64_t result, uint64_t a2)
{
  if ((int)result <= 127)
  {
    if ((_DWORD)result == 2)
      return result;
    return (_DWORD)result == 64;
  }
  if ((_DWORD)result != 128)
  {
    if ((_DWORD)result == 256)
      return 4;
    if ((_DWORD)result == 512)
      return 3;
    return 0;
  }
  if (FPFontCopyRegistryOrderingSupplement(a2))
    return 5;
  else
    return 1;
}

CFMutableDataRef TFPFont::CreateFontSubset(TFPFont *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFMutableDataRef Mutable;
  unint64_t Handler;
  uint64_t v15;
  uint64_t EmSpaceTrueTypeScaler;
  unsigned int v17;
  unsigned int v19;

  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    Handler = TFPFont::GetHandler(a1);
    if (!Handler
      || ((a2 - 1) > 4 ? (v15 = 0) : (v15 = dword_1B0AABDD4[a2 - 1]),
          ((*(uint64_t (**)(unint64_t, TFPFont *, uint64_t, uint64_t, uint64_t, _QWORD, CFMutableDataRef))(*(_QWORD *)Handler + 112))(Handler, a1, v15, a3, a5, 0, Mutable) & 1) == 0))
    {
      EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)a1);
      if (!EmSpaceTrueTypeScaler)
      {
        CFRelease(Mutable);
        return 0;
      }
      if ((a2 - 1) > 4)
        v17 = 0;
      else
        v17 = dword_1B0AABDD4[a2 - 1];
      v19 = v17;
      if ((FPOFAStreamPSDownload(EmSpaceTrueTypeScaler, (uint64_t)&v19, 0, a3, a5, a6, a7, (uint64_t)Mutable) & 1) == 0)
      {
        CFRelease(Mutable);
        return 0;
      }
    }
  }
  return Mutable;
}

uint64_t FPOFAStreamPSDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v16;
  uint64_t v17;
  void *v19;

  v16 = malloc_type_calloc(1uLL, 0x26uLL, 0x108004086473A5EuLL);
  v19 = v16;
  *v16 = 1;
  *(_QWORD *)(v16 + 5) = AppendBytes;
  *(_QWORD *)(v16 + 7) = a8;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, void **, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, &v19, 0, a4, a5, a3, 1, a6, a7);
  free(v19);
  return v17;
}

void sub_1B09E4C90(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E4C64);
}

void sub_1B09E4CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(a12);
  _Unwind_Resume(a1);
}

uint64_t TFPFont::CanCreatePostScriptSubset(TType1PSFont **this, const TFont *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  unint64_t Handler;
  int v9;
  int v10;
  uint64_t v11;

  v2 = (int)a2;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  TType1PSFont::GetFont(this[2], a2, &v11);
  v4 = v11;
  if (!v11)
    goto LABEL_14;
  if (v2 > 2)
  {
    if (v2 != 42)
    {
      if (v2 == 3)
      {
        v5 = 4;
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    v5 = 8;
  }
  else
  {
    if (v2 != -42)
    {
      if (v2 == 1)
      {
        v5 = 2;
        goto LABEL_12;
      }
LABEL_9:
      v5 = 0;
      goto LABEL_12;
    }
    v5 = 32;
  }
LABEL_12:
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v5) & v5;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v6)
    return 1;
LABEL_14:
  Handler = TFPFont::GetHandler((TFPFont *)this);
  if (Handler && (*(unsigned int (**)(unint64_t))(*(_QWORD *)Handler + 96))(Handler))
    return v2 == 1;
  result = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
  if (result)
  {
    if (v2 > 2)
    {
      if (v2 != 42)
      {
        if (v2 == 3)
        {
          v9 = 4;
          goto LABEL_28;
        }
        goto LABEL_25;
      }
      v9 = 8;
    }
    else
    {
      if (v2 != -42)
      {
        if (v2 == 1)
        {
          v9 = 2;
          goto LABEL_28;
        }
LABEL_25:
        v9 = 0;
        goto LABEL_28;
      }
      v9 = 32;
    }
LABEL_28:
    v10 = v9;
    return (*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)result + 128))(result, &v10) && (v10 & v9) != 0;
  }
  return result;
}

void sub_1B09E4E50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E4E38);
}

TFPFont *TFPFont::CreatePostScriptSubset(TFPFont *this, const __CFString *a2, int a3, const unsigned __int16 *a4, unint64_t a5, const unsigned __int16 *a6)
{
  CFMutableDataRef Mutable;
  TFPFont *v13;
  uint64_t v14;
  __int128 v15;
  unsigned int NumberOfGlyphs;
  size_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  CFIndex Length;
  __int128 v22;
  CFIndex MaximumSizeForEncoding;
  unint64_t Handler;
  uint64_t EmSpaceTrueTypeScaler;
  char v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  void **v61;
  _OWORD v62[4];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v13 = Mutable;
  if (a3 > 2)
  {
    if (a3 == 42)
    {
      v14 = 8;
      goto LABEL_12;
    }
    if (a3 == 3)
    {
      v14 = 4;
      goto LABEL_12;
    }
  }
  else
  {
    if (a3 == -42)
    {
      v14 = 32;
      goto LABEL_12;
    }
    if (a3 == 1)
    {
      v14 = 2;
      goto LABEL_12;
    }
  }
  v14 = 0;
LABEL_12:
  v60 = v14;
  *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v58 = v15;
  v59 = v15;
  v56 = v15;
  v57 = v15;
  v54 = v15;
  v55 = v15;
  v52 = v15;
  v53 = v15;
  v50 = v15;
  v51 = v15;
  v48 = v15;
  v49 = v15;
  v46 = v15;
  v47 = v15;
  v44 = v15;
  v45 = v15;
  v42 = v15;
  v43 = v15;
  v40 = v15;
  v41 = v15;
  v38 = v15;
  v39 = v15;
  v36 = v15;
  v37 = v15;
  v34 = v15;
  v35 = v15;
  v32 = v15;
  v33 = v15;
  v30 = v15;
  v31 = v15;
  v28 = v15;
  v29 = v15;
  if (!a6)
  {
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    a6 = (const unsigned __int16 *)&v28;
    v28 = 0u;
    v29 = 0u;
  }
  NumberOfGlyphs = TFPFont::GetNumberOfGlyphs(this);
  if (NumberOfGlyphs + 31 >= 0x20)
    v17 = ((NumberOfGlyphs + 31) >> 3) & 0x1FFFFFFC;
  else
    v17 = 4;
  v18 = (char *)operator new[]();
  bzero(v18, v17);
  if (a4)
  {
    if (a5)
    {
      v19 = 0;
      do
      {
        v20 = a4[v19];
        if (NumberOfGlyphs > v20)
          *(_DWORD *)&v18[(v20 >> 3) & 0x1FFC] |= 0x80000000 >> v20;
        ++v19;
      }
      while (a5 > v19);
    }
  }
  else
  {
    memset(v18, 255, v17);
  }
  Length = CFStringGetLength(a2);
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v62[2] = v22;
  v62[3] = v22;
  v62[0] = v22;
  v62[1] = v22;
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  LOBYTE(v61) = 0;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::vector((uint64_t)v62, MaximumSizeForEncoding + 1, &v61);
  CFStringGetCString(a2, *(char **)&v62[0], *((_QWORD *)&v62[0] + 1) - *(_QWORD *)&v62[0], 0x600u);
  Handler = TFPFont::GetHandler(this);
  if (Handler
    && ((*(uint64_t (**)(unint64_t, TFPFont *, uint64_t, _QWORD, char *, const unsigned __int16 *, TFPFont *))(*(_QWORD *)Handler + 112))(Handler, this, v14, *(_QWORD *)&v62[0], v18, a6, v13) & 1) != 0)
  {
    goto LABEL_30;
  }
  EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
  if (EmSpaceTrueTypeScaler)
  {
    if (*((_QWORD *)&v62[0] + 1) == *(_QWORD *)&v62[0])
      __break(1u);
    if ((FPOFAStreamPSDownload(EmSpaceTrueTypeScaler, (uint64_t)&v60, (uint64_t)a6, *(uint64_t *)&v62[0], (uint64_t)v18, 0, 0, (uint64_t)v13) & 1) != 0)
    {
LABEL_30:
      v26 = 0;
      this = v13;
      goto LABEL_33;
    }
    CFRelease(v13);
    this = 0;
    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
LABEL_33:
  v61 = (void **)v62;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](&v61);
  MEMORY[0x1B5E0CD14](v18, 0x1000C8052888210);
  if ((v26 & 1) != 0)
  {
    CFRelease(v13);
    return 0;
  }
  return this;
}

void sub_1B09E5198(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    *(_QWORD *)(v3 - 168) = v3 - 160;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)(v3 - 168));
    MEMORY[0x1B5E0CD14](v2, 0x1000C8052888210);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B09E5148);
  }
  _Unwind_Resume(exception_object);
}

CFMutableDataRef TFPFont::CreatePostScriptEncoding(TFPFont *this, const unsigned __int16 *a2)
{
  CFMutableDataRef Mutable;
  unint64_t Handler;
  uint64_t EmSpaceTrueTypeScaler;
  _DWORD *v7;
  char v8;
  int v10;
  void *v11;

  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    Handler = TFPFont::GetHandler(this);
    if (!Handler
      || ((*(uint64_t (**)(unint64_t, const unsigned __int16 *, CFMutableDataRef))(*(_QWORD *)Handler
                                                                                                  + 104))(Handler, a2, Mutable) & 1) == 0)
    {
      EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
      if (!EmSpaceTrueTypeScaler)
        goto LABEL_6;
      v10 = 6;
      v7 = malloc_type_calloc(1uLL, 0x26uLL, 0x108004086473A5EuLL);
      v11 = v7;
      *v7 = 1;
      *(_QWORD *)(v7 + 5) = AppendBytes;
      *(_QWORD *)(v7 + 7) = Mutable;
      v8 = (*(uint64_t (**)(uint64_t, int *, void **, _QWORD, const unsigned __int16 *))(*(_QWORD *)EmSpaceTrueTypeScaler
                                                                                                + 144))(EmSpaceTrueTypeScaler, &v10, &v11, 0, a2);
      free(v11);
      if ((v8 & 1) == 0)
      {
        CFRelease(Mutable);
        return 0;
      }
      else
      {
LABEL_6:
        CFDataAppendBytes(Mutable, (const UInt8 *)"\n", 1);
      }
    }
  }
  return Mutable;
}

void sub_1B09E5330(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  const void *v10;

  __cxa_begin_catch(a1);
  CFRelease(v10);
  __cxa_end_catch();
  JUMPOUT(0x1B09E5314);
}

void sub_1B09E5364(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void TFPFontImpl::PurgeCachesCxx(TFPFontImpl *this, const char *a2)
{
  os_unfair_lock_s *v3;

  pthread_once(&TLockedLRUCache<TTableCacheNode,16ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TTableCacheNode,16ul>::CreateCache);
  v3 = (os_unfair_lock_s *)TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache;
  os_unfair_lock_lock((os_unfair_lock_t)TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache + 196);
  TTableCache::Purge((TTableCache *)&v3, (const char *)this);
  os_unfair_lock_unlock(v3 + 196);
  PurgeTFontCache((const char *)this);
  PurgeFileFragmentCache((const char *)this);
}

void sub_1B09E53EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, os_unfair_lock_s *a10)
{
  os_unfair_lock_unlock(a10 + 196);
  _Unwind_Resume(a1);
}

uint64_t TTableCache::Purge(TTableCache *this, const char *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;

  result = *(_QWORD *)this;
  if (result)
  {
    v5 = result + 48 * *(_QWORD *)(result + 768);
    while (1)
    {
      if (!*(_QWORD *)(v5 + 8) || !*(_QWORD *)(v5 + 32))
        goto LABEL_10;
      if (CFGetRetainCount(*(CFTypeRef *)(v5 + 32)) != 1)
        break;
      v6 = TTableCacheNode::IsOfPath((TTableCacheNode *)v5, a2);
      result = *(_QWORD *)this;
      if (!v6)
        goto LABEL_10;
      v7 = TLRUCacheImp<TTableCacheNode,16ul>::RemoveNode(result, v5);
      result = *(_QWORD *)this;
      if (!v7)
        goto LABEL_10;
      v5 = result + 768;
LABEL_11:
      v5 = result + 48 * *(_QWORD *)v5;
      if (!result)
        return result;
    }
    result = *(_QWORD *)this;
LABEL_10:
    if (result + 48 * *(_QWORD *)(result + 776) == v5)
      return result;
    goto LABEL_11;
  }
  return result;
}

void TFPFont::PurgeFromCaches(TFPFont *this)
{
  const __CFString *v1;
  CFIndex v2;
  TFPFontImpl *v3;
  const char *v4;
  char **v5;
  char *__b[133];

  __b[132] = *(char **)MEMORY[0x1E0C80C00];
  v1 = (const __CFString *)*((_QWORD *)this + 5);
  if (v1)
  {
    v2 = CFStringGetMaximumSizeOfFileSystemRepresentation(*((CFStringRef *)this + 5)) + 1;
    memset(__b, 170, 0x420uLL);
    LOBYTE(v5) = 0;
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(__b, v2, &v5);
    v3 = (TFPFontImpl *)__b[0];
    if (CFStringGetFileSystemRepresentation(v1, __b[0], v2))
      TFPFontImpl::PurgeCachesCxx(v3, v4);
    v5 = __b;
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v5);
  }
}

void sub_1B09E5570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

CFTypeRef TFPFont::CopySplicedStash(TFPFont *this)
{
  _QWORD *v1;
  CFTypeRef result;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v1 || (*(unsigned int (**)(_QWORD))(*v1 + 40))(*((_QWORD *)this + 2)) != 32)
    return 0;
  result = (CFTypeRef)v1[9];
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t TFPFont::GetFormat(TFPFont *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
}

double TFPFont::GetVariationScalar(os_unfair_lock_s *this, uint64_t a2)
{
  double v2;
  uint64_t EmSpaceTrueTypeScaler;

  v2 = 0.0;
  if (*(_QWORD *)&this[70]._os_unfair_lock_opaque)
  {
    EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler(this);
    if (EmSpaceTrueTypeScaler)
      return (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)EmSpaceTrueTypeScaler + 152))(EmSpaceTrueTypeScaler, a2);
  }
  return v2;
}

void sub_1B09E564C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E5638);
}

uint64_t TFPFont::GetVariationScalars(TFPFont *this, uint64_t a2, double *a3)
{
  uint64_t result;

  if (!*((_QWORD *)this + 35))
    return 0;
  result = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, double *))(*(_QWORD *)result + 160))(result, a2, a3);
  return result;
}

void TFPFont::EnumerateNamedInstances(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _WORD *v7;
  _WORD *v8;
  _QWORD *v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  _DWORD *v20;
  double v21;
  double v22;
  __int128 v23;
  CFStringRef v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  size_t v36;
  CFStringRef v37;
  int v38;
  CFTypeRef cf;
  _QWORD v40[3];
  void *__p;
  void *v42;
  uint64_t v43;
  void **v44;
  _OWORD __b[66];
  int v46[2];
  _QWORD *v47;
  _QWORD *v48;
  _OWORD v49[30];
  _QWORD v50[2];

  v50[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 256) && *(_QWORD *)(a1 + 264))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    if (v5 != 16 && v5 != 22)
    {
      __p = 0;
      v42 = 0;
      v43 = 0;
      memset(v40, 170, sizeof(v40));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, void **))(*(_QWORD *)v4 + 400))(v40, v4, *(_QWORD *)(a1 + 256), &__p);
      v7 = (_WORD *)v40[0];
      v8 = (_WORD *)v40[1];
      if (v40[0] != v40[1])
      {
        v9 = v49;
        *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v49[28] = v10;
        v49[29] = v10;
        v49[26] = v10;
        v49[27] = v10;
        v49[24] = v10;
        v49[25] = v10;
        v49[22] = v10;
        v49[23] = v10;
        v49[20] = v10;
        v49[21] = v10;
        v49[18] = v10;
        v49[19] = v10;
        v49[16] = v10;
        v49[17] = v10;
        v49[15] = v10;
        v49[14] = v10;
        v49[13] = v10;
        v49[12] = v10;
        v49[11] = v10;
        v49[10] = v10;
        v49[9] = v10;
        v49[8] = v10;
        v49[7] = v10;
        v49[6] = v10;
        v49[5] = v10;
        v49[4] = v10;
        v49[3] = v10;
        v49[2] = v10;
        v49[1] = v10;
        v49[0] = v10;
        v11 = *(_QWORD *)(a1 + 256);
        *(_QWORD *)v46 = 0;
        v47 = 0;
        v48 = 0;
        v50[0] = v49;
        if (v11)
        {
          if (v11 >> 60)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          v12 = 16 * v11;
          if (&v49[v11] <= (_OWORD *)v50)
            v50[0] = &v49[v11];
          else
            v9 = operator new(16 * v11);
          v13 = &v9[2 * v11];
          *(_QWORD *)v46 = v9;
          v48 = v13;
          do
          {
            *v9 = 0;
            v9[1] = 0;
            v9 += 2;
            v12 -= 16;
          }
          while (v12);
          v47 = v13;
        }
        v14 = 0;
        v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          v16 = *(_QWORD *)(a1 + 256);
          if (v16)
          {
            v17 = *(_QWORD *)v46;
            v18 = (double *)((char *)__p + 8 * v16 * v14);
            v19 = 40 * v16;
            v20 = (_DWORD *)(*(_QWORD *)(a1 + 264) + 8);
            do
            {
              v21 = *v18++;
              v22 = v21;
              LODWORD(v21) = *v20;
              v20 += 10;
              *(_QWORD *)v17 = LODWORD(v21);
              *(double *)(v17 + 8) = trunc(v22 * 10000.0) / 10000.0;
              v17 += 16;
              v19 -= 40;
            }
            while (v19);
          }
          cf = 0;
          if (!v7[2])
            goto LABEL_26;
          *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[4] = v23;
          __b[5] = v23;
          __b[2] = v23;
          __b[3] = v23;
          __b[0] = v23;
          __b[1] = v23;
          (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(__b, v4, (unsigned __int16)(v7[2] - 1), 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
          if (TFontNameString::IsValid((TFontNameString *)__b))
          {
            v24 = CopyFontNameString((CFTypeRef *)__b, 0xFFFFFFFF);
            if (cf)
              CFRelease(cf);
            cf = v24;
          }
          TFontNameString::~TFontNameString((TFontNameString *)__b);
          v25 = cf;
          if (!cf)
          {
LABEL_26:
            v26 = *(_QWORD *)(a1 + 256);
            if (v26)
            {
              v27 = *(_QWORD *)v46;
              v28 = *(_QWORD *)v46 + 16 * v26;
              v29 = 40 * v26;
              while (2)
              {
                v30 = (double *)(*(_QWORD *)(a1 + 264) + 32);
                v31 = v29;
                do
                {
                  if (*(_DWORD *)v27 == *((_DWORD *)v30 - 6))
                  {
                    v32 = *(double *)(v27 + 8);
                    v33 = vabdd_f64(v32, *v30);
                    if (v33 >= 0.0001)
                    {
                      v34 = fabs(v32);
                      v35 = fabs(*v30);
                      if (v34 < v35)
                        v34 = v35;
                      if (v33 / v34 >= 0.0001)
                      {
                        memset(__b, 170, sizeof(__b));
                        v36 = *(_QWORD *)(a1 + 232) + 256;
                        LOBYTE(v44) = 0;
                        std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(__b, v36, &v44);
                        TFPFont::ComposePostScriptNameForVariation(a1, *(_QWORD *)(a1 + 256), *(uint64_t *)v46, *(char **)&__b[0], *((_QWORD *)&__b[0] + 1) - *(_QWORD *)&__b[0], 0);
                        v37 = CFStringCreateWithCString(v15, *(const char **)&__b[0], 0);
                        if (cf)
                          CFRelease(cf);
                        cf = v37;
                        v44 = (void **)__b;
                        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100](&v44);
                        v25 = cf;
                        goto LABEL_42;
                      }
                    }
                  }
                  v30 += 5;
                  v31 -= 40;
                }
                while (v31);
                v27 += 16;
                if (v27 != v28)
                  continue;
                break;
              }
            }
            v25 = CFStringCreateWithCString(v15, *(const char **)(a1 + 224), 0);
            if (cf)
              CFRelease(cf);
            cf = v25;
          }
LABEL_42:
          LOBYTE(__b[0]) = 0;
          (*(void (**)(uint64_t, const void *, _QWORD, _QWORD, _OWORD *))(a2 + 16))(a2, v25, *(_QWORD *)v46, *(_QWORD *)(a1 + 256), __b);
          v38 = LOBYTE(__b[0]);
          TCFRetained<__CFString const*>::~TCFRetained(&cf);
          if (v38)
            break;
          ++v14;
          v7 += 4;
        }
        while (v7 != v8);
        std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)v46);
        v7 = (_WORD *)v40[0];
      }
      if (v7)
      {
        v40[1] = v7;
        operator delete(v7);
      }
      if (__p)
      {
        v42 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1B09E5AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13)
{
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&STACK[0x468]);
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetTupleCount(os_unfair_lock_s *this)
{
  uint64_t result;

  result = TFPFont::GetEmSpaceTrueTypeScaler(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 176))(result);
  return result;
}

void sub_1B09E5B90(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B09E5B88);
}

uint64_t TFPFont::GetControlPoints(TFPFont *this, unsigned int a2, unsigned int *a3, CGPoint *a4)
{
  uint64_t EmSpaceTrueTypeScaler;
  uint64_t result;

  if (TFPFont::GetNumberOfGlyphs(this) <= a2)
    return 0;
  EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
  result = 0;
  if (a2 <= 0xFFFE)
  {
    if (EmSpaceTrueTypeScaler)
      return (*(uint64_t (**)(uint64_t, _QWORD, unsigned int *, CGPoint *))(*(_QWORD *)EmSpaceTrueTypeScaler
                                                                                   + 96))(EmSpaceTrueTypeScaler, (unsigned __int16)a2, a3, a4);
  }
  return result;
}

CFTypeRef TFPFont::CopyPath(TFPFont *this)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 5);
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t TLockedLRUCache<TTableCacheNode,16ul>::CreateCache()
{
  uint64_t result;
  uint64_t i;
  _OWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  result = operator new();
  for (i = 0; i != 768; i += 48)
  {
    v2 = (_OWORD *)(result + i);
    *(_OWORD *)((char *)v2 + 28) = 0uLL;
    *v2 = 0uLL;
    v2[1] = 0uLL;
  }
  *(_OWORD *)(result + 768) = xmmword_1B0AABBD0;
  v3 = 1;
  v4 = (_QWORD *)result;
  do
  {
    *v4 = v3;
    v4 += 6;
    ++v3;
  }
  while (v3 != 17);
  *(_QWORD *)(result + 720) = 0;
  *(_DWORD *)(result + 784) = 0;
  TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache = (_UNKNOWN *)result;
  return result;
}

void RetainedFPFontRef::~RetainedFPFontRef(RetainedFPFontRef *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 32))(*(_QWORD *)this))
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
}

_QWORD *RetainedFPFontRef::Retain(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = *result;
  if (*result != a2)
  {
    v4 = result;
    if (v2)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 32))(*result);
      if (!(_DWORD)result)
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
    if (a2)
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    *v4 = a2;
  }
  return result;
}

uint64_t TTableCacheNode::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  if (!v2 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
    return 0;
  result = *(_QWORD *)(a1 + 8);
  if (!result)
    return result;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 0;
  if (result == v4)
    return 1;
  return TFont::operator==(result, v4);
}

void ___ZL18CreateWrappedTableRK14TDataReferencem_block_invoke(uint64_t a1)
{
  _QWORD v1[4];

  TDataReference::TDataReference(v1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0, 0, 0);
  v1[0] = &off_1E61C9568;
  TDataReference::DucRefCount((TDataReference *)v1);
  v1[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v1);
}

void sub_1B09E5E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<char,TInlineBufferAllocator<char,64ul>>::__append(_QWORD *a1, size_t a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;

  v6 = a1 + 1;
  v4 = (char *)a1[1];
  v5 = v6[1];
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      v12 = &v4[a2];
      bzero(v4, a2);
      v4 = v12;
    }
    a1[1] = v4;
  }
  else
  {
    v7 = &v4[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v9 = v5 - *a1;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (void *)a1[11];
      if ((char *)v11 + v10 <= (char *)(a1 + 11))
        a1[11] = (char *)v11 + v10;
      else
        v11 = operator new(v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v7[(_QWORD)v11];
    v14 = (char *)v11 + v10;
    v15 = &v13[a2];
    bzero(v13, a2);
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != (char *)*a1)
    {
      do
      {
        v18 = *--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    v19 = a1[2];
    a1[2] = v14;
    if (v16)
    {
      v20 = (char *)(a1 + 11);
      if (a1 + 3 <= (_QWORD *)v16 && v20 > v16)
      {
        if (v19 == *(_QWORD *)v20)
          *(_QWORD *)v20 = v16;
      }
      else
      {
        operator delete(v16);
      }
    }
  }
}

void TComponentsJoinedByString::TComponentsJoinedByString(TComponentsJoinedByString *this, CFStringRef theString, const __CFString *a3)
{
  const __CFAllocator *v4;
  CFMutableStringRef MutableCopy;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theString)
    MutableCopy = CFStringCreateMutableCopy(v4, 0, theString);
  else
    MutableCopy = CFStringCreateMutable(v4, 0);
  *(_QWORD *)this = MutableCopy;
  *((_QWORD *)this + 1) = CFRetain(CFSTR(" "));
}

void sub_1B09E5FEC(_Unwind_Exception *a1)
{
  const void **v1;

  TCFString::~TCFString(v1);
  _Unwind_Resume(a1);
}

void TCFMutableString::AppendFormat(CFMutableStringRef *this, const __CFString *a2, ...)
{
  va_list va;

  va_start(va, a2);
  CFStringAppendFormatAndArguments(*this, 0, CFSTR("%@%@%g"), va);
}

void std::vector<TFontNameString>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 96;
      v6 = v3 - 96;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 96;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void TNameEntry::AddItems(CFMutableDictionaryRef *this, uint64_t a2, const __CFString *a3, const __CFString *a4)
{
  const __CFString *v7;

  if (a3 && *this)
  {
    CFDictionaryAddValue(*this, (const void *)kFPNameKeyKind, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", a2));
    CFDictionaryAddValue(*this, (const void *)kFPNameKeyString, a3);
    if (a4)
      v7 = a4;
    else
      v7 = CFSTR("en");
    CFDictionaryAddValue(*this, (const void *)kFPNameKeyLocaleIdentifier, v7);
  }
}

void TCFDictionary::~TCFDictionary(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

const void **TCFArray<void const*>::~TCFArray(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void TFPInMemoryFont::TFPInMemoryFont(TFPInMemoryFont *this, const TFont *a2, const __CFData *a3, const __CFData *a4)
{
  _QWORD *v7;
  CFTypeRef v8;
  timespec v9;

  v9.tv_sec = 0;
  v9.tv_nsec = 0;
  TFPFont::TFPFont(this, a2, 0, v9);
  *v7 = &off_1E617BCF8;
  *((_QWORD *)this + 56) = CFRetain(a3);
  if (a4)
    v8 = CFRetain(a4);
  else
    v8 = 0;
  *((_QWORD *)this + 57) = v8;
}

void sub_1B09E6220(_Unwind_Exception *a1)
{
  void **v1;
  const void **v2;

  TCFData::~TCFData(v2);
  TFPFont::~TFPFont(v1);
  _Unwind_Resume(a1);
}

BOOL EqualPostScriptNameAndVariations(const void *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  unint64_t v6;
  BOOL v8;
  unint64_t i;
  double *v10;
  int v11;
  double v12;
  double v13;
  double *v14;
  unint64_t v15;
  double v16;
  double v17;

  v2 = *((_QWORD *)a1 + 35);
  v3 = *((_QWORD *)a2 + 35);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    return strcmp(*((const char **)a1 + 17), *((const char **)a2 + 17)) == 0;
  }
  else
  {
    v6 = *((_QWORD *)a1 + 32);
    if (v6 == *((_QWORD *)a2 + 32) && !strcmp(*((const char **)a1 + 28), *((const char **)a2 + 28)))
    {
      if (v6)
      {
        v8 = 0;
        for (i = 0; i != v6; v8 = i >= v6)
        {
          v10 = (double *)(v2 + 16 * i);
          v11 = *(_DWORD *)v10;
          v12 = v10[1];
          v13 = fabs(v12);
          v14 = (double *)(v3 + 8);
          v15 = v6;
          while (1)
          {
            if (v11 == *((_DWORD *)v14 - 2))
            {
              v16 = vabdd_f64(v12, *v14);
              if (v16 < 0.0001)
                break;
              v17 = fabs(*v14);
              if (v13 >= v17)
                v17 = v13;
              if (v16 / v17 < 0.0001)
                break;
            }
            v14 += 2;
            if (!--v15)
              return v8;
          }
          ++i;
          v5 = 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t HashPostScriptName(const char **a1)
{
  strlen(a1[17]);
  return CFStringHashCString();
}

void std::vector<double,TInlineBufferAllocator<double,4ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 56);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 56))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void TCFNumber::~TCFNumber(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,2ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 32);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 32))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 280);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 280))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

uint64_t TTableCacheNode::IsOfPath(TTableCacheNode *this, const char *a2)
{
  uint64_t v3;
  uint64_t result;

  if (!a2)
    return 1;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  if (result)
    return strcmp(a2, (const char *)result) == 0;
  return result;
}

uint64_t TLRUCacheImp<TTableCacheNode,16ul>::RemoveNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[44];
  int v12;

  v4 = *(_QWORD *)(a1 + 776);
  v5 = *(_QWORD *)(a1 + 768);
  v6 = (uint64_t *)(a1 + 48 * v5);
  if ((TTableCacheNode::operator==((uint64_t)v6, a2) & 1) != 0)
  {
LABEL_5:
    v8 = *v6;
    if (v5 == *(_QWORD *)(a1 + 768))
      *(_QWORD *)(a1 + 768) = v8;
    v12 = -1431655766;
    memset(v11, 0, sizeof(v11));
    TTableCacheNode::operator=((uint64_t)v6, (uint64_t)v11);
    v9 = *(_QWORD *)(a1 + 776);
    if (v5 != v9)
    {
      *(_QWORD *)(a1 + 48 * v4) = v8;
      *(_QWORD *)(a1 + 48 * v9) = v5;
      *(_QWORD *)(a1 + 776) = v5;
    }
    *v6 = *(_QWORD *)(a1 + 768);
    TTableCacheNode::~TTableCacheNode((TTableCacheNode *)v11);
  }
  else
  {
    v7 = v5;
    while (v7 != *(_QWORD *)(a1 + 776))
    {
      v5 = *v6;
      v6 = (uint64_t *)(a1 + 48 * *v6);
      v4 = v7;
      v7 = v5;
      if (TTableCacheNode::operator==((uint64_t)v6, a2))
        goto LABEL_5;
    }
  }
  return 1;
}

void sub_1B09E66AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TTableCacheNode::~TTableCacheNode((TTableCacheNode *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,30ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 504);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 504))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

_QWORD *std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E61C95F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E61C95F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::operator()(uint64_t a1, unsigned int *a2)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8), (const void *)*a2);
}

uint64_t std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::target_type()
{
}

void std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

_QWORD *std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E61C9678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E61C9678;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::operator()(uint64_t result, int *a2, _BYTE **a3)
{
  int v3;
  BOOL v4;
  int v5;
  _BYTE *v7;

  v3 = *a2;
  if (*a2 > 1735162213)
  {
    v4 = v3 == 1752590188;
    v5 = 1735162214;
  }
  else
  {
    v4 = v3 == 1128678944;
    v5 = 1128678962;
  }
  if (v4 || v3 == v5)
  {
    v7 = *a3;
    **(_BYTE **)(result + 8) = 1;
    *v7 = 1;
  }
  return result;
}

uint64_t std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::target_type()
{
}

uint64_t std::vector<char,TInlineBufferAllocator<char,30ul>>::vector(uint64_t a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 24;
  if (a2)
  {
    v5 = a2;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::__vallocate[abi:fe180100]((char *)a1, a2);
    v6 = *(_BYTE **)(a1 + 8);
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    *(_QWORD *)(a1 + 8) = v7;
  }
  return a1;
}

void sub_1B09E694C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(int64x2_t *a1, size_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  int64x2_t v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t *v24;

  v6 = &a1->i64[1];
  result = (char *)a1->i64[1];
  v5 = v6[1];
  if (v5 - (uint64_t)result >= a2)
  {
    if (a2)
    {
      v12 = &result[a2];
      bzero(result, a2);
      result = v12;
    }
    a1->i64[1] = (uint64_t)result;
  }
  else
  {
    v7 = &result[-a1->i64[0]];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v9 = v5 - a1->i64[0];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v24 = &a1[1].i64[1];
    if (v10)
    {
      v11 = a1[3].i64[1];
      if (v11 + v10 <= (unint64_t)a1[3].u64 + 6)
        a1[3].i64[1] = v11 + v10;
      else
        v11 = (uint64_t)operator new(v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v7[v11];
    v14 = (char *)(v11 + v10);
    v23 = v14;
    v15 = &v13[a2];
    bzero(v13, a2);
    v22.i64[1] = (uint64_t)&v13[a2];
    v17 = a1->i64[0];
    v16 = a1->u64[1];
    if (v16 == a1->i64[0])
    {
      v19 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        v18 = *(_BYTE *)--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v19 = *a1;
      v15 = (char *)v22.i64[1];
      v14 = v23;
    }
    a1->i64[0] = (uint64_t)v13;
    a1->i64[1] = (uint64_t)v15;
    v22 = v19;
    v20 = (char *)a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v14;
    v23 = v20;
    v21 = v19.i64[0];
    return (char *)std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v21);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1B09E6D50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *TCharStringConversionContext::WriteData(TCharStringConversionContext *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  char *v9;
  void *result;
  _DWORD *exception;

  v6 = *((_QWORD *)this + 36);
  v7 = v6 + a3;
  if (v7 <= *((_DWORD *)this + 74))
  {
    v9 = (char *)*((_QWORD *)this + 35);
  }
  else
  {
    v8 = malloc_good_size(v7);
    v9 = (char *)reallocf(*((void **)this + 35), v8);
    *((_QWORD *)this + 35) = v9;
    if (!v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 20;
    }
    *((_DWORD *)this + 74) = v8;
    v6 = *((_QWORD *)this + 36);
  }
  result = memcpy(&v9[v6], a2, a3);
  *((_QWORD *)this + 36) += a3;
  return result;
}

void *TCharStringConversionContext::WriteOpCode(TCharStringConversionContext *this, unsigned int a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned __int8 v5[2];

  v5[0] = 12;
  v5[1] = a2;
  if (a2 > 0xFF)
  {
    v2 = v5;
    v3 = 2;
  }
  else
  {
    v2 = &v5[1];
    v3 = 1;
  }
  return TCharStringConversionContext::WriteData(this, v2, v3);
}

void *TCharStringConversionContext::WriteFixed(TCharStringConversionContext *this, int *a2)
{
  unsigned int v3;
  unsigned __int8 v5[8];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  memset(v6, 170, 22);
  *(_QWORD *)v5 = 0xAAAAAAAAAAAAAAAALL;
  v3 = TCharStringConversionContext::FixedToCharstr(this, *a2, v5);
  return TCharStringConversionContext::WriteData(this, v5, v3);
}

uint64_t TCharStringConversionContext::FixedToCharstr(TCharStringConversionContext *this, int a2, unsigned __int8 *a3)
{
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 v9;
  int v10;
  int v11;
  int v12;

  if (!(_WORD)a2)
    return TCharStringConversionContext::IntToCharstr(this, a2 >> 16, a3);
  if (a2 >= 0)
    LOWORD(v3) = a2;
  else
    v3 = -a2;
  v4 = 2 * ((5 * (_WORD)v3) & 0x7FFF);
  if (v4 > 0x8000)
    v4 = 0x10000 - v4;
  if (v4 > 0x3F)
  {
    v6 = (unsigned __int16)(100 * v3);
    v7 = 0x10000 - v6;
    if (v6 <= 0x8000)
      v7 = (unsigned __int16)(100 * v3);
    if (v7 >= 0x40)
    {
      v9 = 2 * v3;
      v5 = 1;
      v10 = 0xFFFF;
      v11 = 2;
      while (1)
      {
        v12 = v9;
        if (v9 > 0x8000u)
          v12 = 0x10000 - v9;
        if (v12 < 0x40)
          break;
        if (v12 < v10)
        {
          v5 = v11;
          v10 = v12;
        }
        ++v11;
        v9 += v3;
        if (v11 == 200)
          return TCharStringConversionContext::ConvertFixedDiv(this, a2, a3, v5);
      }
      v5 = v11;
    }
    else
    {
      v5 = 100;
    }
  }
  else
  {
    v5 = 10;
  }
  return TCharStringConversionContext::ConvertFixedDiv(this, a2, a3, v5);
}

uint64_t TCharStringConversionContext::IntToCharstr(TCharStringConversionContext *this, int a2, unsigned __int8 *a3)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  int v8;

  if ((a2 + 107) <= 0xD6)
  {
    *a3 = a2 - 117;
    v5 = 1;
    result = 1;
    goto LABEL_8;
  }
  v7 = a2 - 108;
  if ((a2 - 108) <= 0x3FF)
  {
    v8 = (v7 >> 8) - 9;
LABEL_7:
    *a3 = v8;
    a3[1] = v7;
    v5 = 2;
    result = 2;
    goto LABEL_8;
  }
  if ((a2 + 1131) <= 0x3FF)
  {
    LOBYTE(v7) = -108 - a2;
    v8 = ((-108 - a2) >> 8) - 5;
    goto LABEL_7;
  }
  if (a2 == (__int16)a2
    && (*(unsigned int (**)(TCharStringConversionContext *))(*(_QWORD *)this + 16))(this) == 2)
  {
    *a3 = 28;
    a3[1] = BYTE1(a2);
    a3[2] = a2;
    v5 = 3;
    result = 3;
  }
  else
  {
    *a3 = -1;
    a3[1] = HIBYTE(a2);
    a3[2] = BYTE2(a2);
    a3[3] = BYTE1(a2);
    v5 = 5;
    result = 5;
    a3[4] = a2;
  }
LABEL_8:
  a3[v5] = 0;
  return result;
}

uint64_t TCharStringConversionContext::ConvertFixedDiv(TCharStringConversionContext *this, int a2, unsigned __int8 *a3, int a4)
{
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  if (a2 >= 0)
    v7 = a2;
  else
    v7 = -a2;
  v8 = HIWORD(v7) * a4 + (((unsigned __int16)v7 * a4 + 0x8000) >> 16);
  if (a2 >= 0)
    v9 = v8;
  else
    v9 = -v8;
  v10 = TCharStringConversionContext::IntToCharstr(this, v9, a3);
  v11 = (unsigned __int16)(TCharStringConversionContext::IntToCharstr(this, a4, &a3[v10]) + v10);
  *(_WORD *)&a3[v11] = 3084;
  v11 += 2;
  a3[v11] = 0;
  return (unsigned __int16)v11;
}

void TType1ToType2CharStringConversionContext::TType1ToType2CharStringConversionContext(TType1ToType2CharStringConversionContext *this, const TType1SFNTFont *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  std::vector<int>::size_type v11;
  unsigned int v12;
  BOOL v13;

  *((_QWORD *)this + 33) = "/.notdef";
  *((_QWORD *)this + 34) = 8;
  *((_DWORD *)this + 74) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *(_QWORD *)this = &off_1E61C96F8;
  *((_BYTE *)this + 429) = 1;
  *(_DWORD *)((char *)this + 430) = 0;
  *((_QWORD *)this + 55) = a2;
  *((_QWORD *)this + 56) = (*(uint64_t (**)(const TType1SFNTFont *))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(const TType1SFNTFont *, uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, a3, (char *)this + 928);
  *((_QWORD *)this + 58) = *((_QWORD *)this + 57);
  *((_BYTE *)this + 552) = 0;
  *((_WORD *)this + 280) = 0;
  *(_QWORD *)((char *)this + 588) = 0;
  *((_BYTE *)this + 792) = 0;
  *((_BYTE *)this + 896) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 115) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_BYTE *)this + 504) = 0;
  if ((_DWORD)a3)
  {
    v6 = (char *)this + 300;
    *((_QWORD *)this + 34) = (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, char *))(**((_QWORD **)this + 55)
                                                                                              + 184))(*((_QWORD *)this + 55), a3, 127, (char *)this + 300);
  }
  else
  {
    v7 = *((_QWORD *)this + 33);
    --*((_QWORD *)this + 34);
    v6 = (char *)(v7 + 1);
  }
  *((_QWORD *)this + 33) = v6;
  v8 = *((__int16 *)a2 + 8);
  v9 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 104) + 8 * a3 + 4);
  if (v9 <= v8 || v8 <= -1)
    v8 = 0;
  *((_DWORD *)this + 142) = v9 - v8;
  if (*(_WORD *)(*((_QWORD *)this + 56) + 80))
    v11 = *(unsigned __int16 *)(*((_QWORD *)this + 56) + 80);
  else
    v11 = 32;
  std::vector<int>::resize((std::vector<int> *)this + 20, v11);
  v13 = 0;
  (*(void (**)(const TType1SFNTFont *, char *))(*(_QWORD *)a2 + 176))(a2, (char *)this + 564);
  v12 = malloc_good_size((4 * *((_DWORD *)this + 142)));
  *((_DWORD *)this + 74) = v12;
  *((_QWORD *)this + 35) = AllocateMemory(v12, 0);
  *((_QWORD *)this + 36) = 0;
  *(_QWORD *)((char *)this + 580) = 0;
  *((_QWORD *)this + 59) = *((_QWORD *)this + 58);
  TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString(this, 0, &v13);
}

void sub_1B09E72E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v5 = *(void **)(v1 + 904);
  if (v5)
  {
    *(_QWORD *)(v1 + 912) = v5;
    operator delete(v5);
  }
  if (*(_BYTE *)(v1 + 896))
    THintCntrConversion::~THintCntrConversion((THintCntrConversion *)(v1 + 792));
  if (*(_BYTE *)(v1 + 552))
  {
    *(_QWORD *)(v1 + 504) = &off_1E61C9790;
    v6 = *(void **)(v1 + 512);
    if (v6)
    {
      *(_QWORD *)(v1 + 520) = v6;
      operator delete(v6);
    }
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 488) = v7;
    operator delete(v7);
  }
  v8 = *v2;
  *v2 = 0;
  if (v8)
    MEMORY[0x1B5E0CD14](v8, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString(TType1ToType2CharStringConversionContext *this, unsigned int a2, BOOL *a3)
{
  __int128 v4;
  uint64_t v5;
  unsigned __int8 *v7;
  void (***v8)(THintCntrConversion *__hidden);
  _OWORD *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int32x2_t v52;
  int32x2_t v53;
  int32x2_t v54;
  int32x2_t v55;
  _DWORD *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  void (**v87)(THintCntrConversion *__hidden);
  uint64_t v88;
  void (**v89)(THintCntrConversion *__hidden);
  int v90;
  uint64_t v91;
  uint64_t v92;
  void (**v93)(THintCntrConversion *__hidden);
  _DWORD *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  int v109;
  int *v110;
  int v111;
  unint64_t v112;
  unsigned int v113;
  unsigned __int16 i;
  void (**v115)(THintCntrConversion *__hidden);
  unsigned __int8 *v116;
  unsigned int v117;
  void (**v118)(THintCntrConversion *__hidden);
  unsigned int v119;
  unsigned __int16 j;
  void (**v121)(THintCntrConversion *__hidden);
  unsigned __int8 *v122;
  unsigned int v123;
  void (**v124)(THintCntrConversion *__hidden);
  unsigned int v125;
  int v126;
  void (**v127)(THintCntrConversion *__hidden);
  unsigned int v128;
  void (**v129)(THintCntrConversion *__hidden);
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  unsigned __int16 v135;
  unsigned __int8 *v136;
  unsigned int v137;
  unsigned int v138;
  void *v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  char *v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int *v162;
  int v163;
  uint64_t v164;
  char *v165;
  int v166;
  int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  char *v183;
  int32x2_t v184;
  void (**v185)(THintCntrConversion *__hidden);
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  void (**v195)(THintCntrConversion *__hidden);
  int v196;
  uint64_t v197;
  uint64_t v198;
  void (**v199)(THintCntrConversion *__hidden);
  unsigned int v200;
  int v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  BOOL v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  char *v209;
  int v210;
  double v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  _WORD *v225;
  _WORD *exception;
  _WORD *v227;
  _WORD *v228;
  _WORD *v229;
  _WORD *v230;
  _WORD *v231;
  _WORD *v232;
  _WORD *v233;
  _WORD *v234;
  _WORD *v235;
  _WORD *v236;
  _WORD *v237;
  _WORD *v238;
  _WORD *v239;
  _WORD *v240;
  _WORD *v241;
  _WORD *v242;
  _WORD *v243;
  _WORD *v244;
  _WORD *v245;
  _WORD *v246;
  _WORD *v247;
  _WORD *v248;
  _WORD *v249;
  _WORD *v250;
  _WORD *v251;
  _WORD *v252;
  _WORD *v253;
  _WORD *v254;
  _WORD *v255;
  _WORD *v256;
  _WORD *v257;
  _WORD *v258;
  _WORD *v259;
  _WORD *v260;
  _WORD *v261;
  _WORD *v262;
  _WORD *v263;
  _WORD *v264;
  _WORD *v265;
  _WORD *v266;
  _WORD *v267;
  _WORD *v268;
  _WORD *v269;
  unsigned __int32 v270;
  char *v271;
  uint64_t v272;
  int32x2_t *v274;
  unint64_t v275;
  int v276;
  int v277;
  __int16 v278;
  int v279[4];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  unsigned __int8 v291[32];
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  if (a2 > 0xA)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v276 = 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v289 = v4;
  v290 = v4;
  v287 = v4;
  v288 = v4;
  v285 = v4;
  v286 = v4;
  v283 = v4;
  v284 = v4;
  v281 = v4;
  v282 = v4;
  *(_OWORD *)v279 = v4;
  v280 = v4;
  v5 = *((unsigned int *)this + 142);
  if (!(_DWORD)v5 || *a3)
    return;
  v7 = (unsigned __int8 *)*((_QWORD *)this + 58);
  v274 = (int32x2_t *)((char *)this + 572);
  v275 = (unint64_t)&v7[v5];
  v8 = (void (***)(THintCntrConversion *__hidden))((char *)this + 792);
  v9 = (_OWORD *)((char *)this + 800);
  v272 = 0;
  v271 = (char *)this + 504;
  v10 = v7;
  while (1)
  {
    v12 = *v10++;
    v11 = v12;
    if (v12 < 0x20)
      break;
    v13 = *((int *)this + 147);
    if ((int)v13 >= 48)
    {
      v225 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v225 = &off_1E61B2D68;
      v225[4] = 5;
    }
    if (v11 <= 0xF6)
    {
      v14 = (v11 << 16) - 9109504;
LABEL_22:
      *((_DWORD *)this + 147) = v13 + 1;
      *((_DWORD *)this + v13 + 149) = v14;
      goto LABEL_23;
    }
    if (v11 <= 0xFA)
    {
      v10 = v7 + 2;
      v16 = (v7[1] << 16) | (v11 << 24);
      v17 = 158072832;
LABEL_21:
      v14 = v16 + v17;
      goto LABEL_22;
    }
    if (v11 != 255)
    {
      v10 = v7 + 2;
      v16 = -9109504 - ((v7[1] << 16) | (v11 << 24));
      v17 = -81854464;
      goto LABEL_21;
    }
    v10 = v7 + 5;
    v18 = bswap32(*(_DWORD *)(v7 + 1));
    if (v18 + 32000 <= 0xFA00)
    {
      v14 = v18 << 16;
      goto LABEL_22;
    }
    *((_DWORD *)this + 147) = v13 + 1;
    *((_DWORD *)this + v13 + 149) = v18;
    LODWORD(v272) = 1;
LABEL_23:
    if ((unint64_t)v10 < v275)
    {
      v7 = v10;
      if (!*a3)
        continue;
    }
    return;
  }
  switch(v11)
  {
    case 1u:
    case 3u:
      if (*((_DWORD *)this + 147) != 2)
      {
        v227 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v227 = &off_1E61B2D68;
        v227[4] = 5;
      }
      *((_DWORD *)this + 147) = 0;
      v276 = (*((_DWORD *)this + 149) + 0x8000) & 0xFFFF0000;
      v15 = *((unsigned __int8 *)this + 431);
      if (!*((_BYTE *)this + 429))
        goto LABEL_142;
      *((_BYTE *)this + 428) = 1;
      if (a2)
      {
        if (!v15)
          goto LABEL_138;
      }
      else if (!v15)
      {
        *((_QWORD *)this + 59) = v10;
        goto LABEL_138;
      }
      if (!*((_BYTE *)this + 432))
        ++*((_WORD *)this + 280);
LABEL_138:
      if (*((_BYTE *)this + 896))
      {
        v129 = *v8;
      }
      else
      {
        *((_QWORD *)this + 99) = &off_1E61C9728;
        *v9 = 0u;
        *((_OWORD *)this + 51) = 0u;
        *((_OWORD *)this + 52) = 0u;
        *((_OWORD *)this + 53) = 0u;
        *((_OWORD *)this + 54) = 0u;
        *((_BYTE *)this + 880) = 1;
        v274[39] = 0;
        v129 = &off_1E61C9728;
        *((_BYTE *)this + 896) = 1;
      }
      v129[2]((TType1ToType2CharStringConversionContext *)((char *)this + 792));
      v15 = *((unsigned __int8 *)this + 431);
LABEL_142:
      if (v15)
LABEL_143:
        *((_BYTE *)this + 432) = 1;
      goto LABEL_23;
    case 4u:
      v45 = *((int *)this + 147);
      if (*((_BYTE *)this + 433))
      {
        *((_DWORD *)this + 147) = v45 + 1;
        v46 = (char *)this + 4 * v45;
        v47 = 4;
        goto LABEL_75;
      }
      if ((_DWORD)v45 != 1)
      {
        v236 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v236 = &off_1E61B2D68;
        v236[4] = 5;
      }
      *((_DWORD *)this + 147) = 0;
      v109 = *((_DWORD *)this + 149);
      v276 = v109;
      TType1ToType2CharStringConversionContext::SetHints(this);
      if (*((_BYTE *)this + 429))
        goto LABEL_23;
      if ((v272 & 0x100000000) != 0)
      {
        v276 = *((_DWORD *)this + 145) + v109;
        v110 = (int *)*((unsigned int *)this + 146);
      }
      else
      {
        v110 = 0;
      }
      TType1ToType2CharStringConversionContext::WriteMoveTo(this, v110, &v276);
      goto LABEL_163;
    case 5u:
      if (*((_DWORD *)this + 147) != 2)
      {
        v232 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v232 = &off_1E61B2D68;
        v232[4] = 5;
      }
      *((_DWORD *)this + 147) = 0;
      v52 = v274[3];
      TType1ToType2CharStringConversionContext::SetHints(this);
      if (!*((_BYTE *)this + 429))
      {
        v53 = *v274;
        v54 = vadd_s32(vrev64_s32(v274[1]), v52);
        *(int32x2_t *)((char *)this + 580) = vrev64_s32(v54);
        v55 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v54, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        *(int32x2_t *)((char *)this + 572) = v55;
        *(int32x2_t *)v279 = vsub_s32(v55, v53);
        TType1ToType2CharStringConversionContext::WriteLineTo(this, (int *)v279[0], &v279[1]);
      }
      goto LABEL_23;
    case 6u:
      if (*((_DWORD *)this + 147) != 1)
      {
        v231 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v231 = &off_1E61B2D68;
        v231[4] = 5;
      }
      *((_DWORD *)this + 147) = 0;
      v48 = *((_DWORD *)this + 149);
      v276 = v48;
      TType1ToType2CharStringConversionContext::SetHints(this);
      if (!*((_BYTE *)this + 429))
      {
        *(_DWORD *)v291 = 0;
        v49 = *((_DWORD *)this + 143);
        v50 = *((_DWORD *)this + 146) + v48;
        *((_DWORD *)this + 146) = v50;
        v51 = (v50 + 0x8000) & 0xFFFF0000;
        *((_DWORD *)this + 143) = v51;
        v279[0] = v51 - v49;
        TType1ToType2CharStringConversionContext::WriteLineTo(this, (int *)(v51 - v49), (int *)v291);
      }
      goto LABEL_23;
    case 7u:
      if (*((_DWORD *)this + 147) != 1)
      {
        v229 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v229 = &off_1E61B2D68;
        v229[4] = 5;
      }
      *((_DWORD *)this + 147) = 0;
      v19 = *((_DWORD *)this + 149);
      v276 = v19;
      TType1ToType2CharStringConversionContext::SetHints(this);
      if (!*((_BYTE *)this + 429))
      {
        v20 = *((_DWORD *)this + 144);
        v21 = *((_DWORD *)this + 145) + v19;
        *((_DWORD *)this + 145) = v21;
        v22 = (v21 + 0x8000) & 0xFFFF0000;
        *((_DWORD *)this + 144) = v22;
        v279[0] = v22 - v20;
        TType1ToType2CharStringConversionContext::WriteLineTo(this, 0, v279);
      }
      goto LABEL_23;
    case 8u:
      if (*((_DWORD *)this + 147) != 6)
      {
        v233 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v233 = &off_1E61B2D68;
        v233[4] = 5;
      }
      *((_DWORD *)this + 147) = 0;
      TType1ToType2CharStringConversionContext::SetHints(this);
      if (!*((_BYTE *)this + 429))
      {
        v56 = (_DWORD *)((char *)this + 4 * *((int *)this + 147));
        v57 = v56[149];
        v58 = v56[150];
        v59 = v56[151];
        v60 = v56[152];
        v61 = v56[153];
        LODWORD(v56) = v56[154];
        v62 = *((_DWORD *)this + 146) + v57;
        v63 = *((_DWORD *)this + 145) + v58;
        v64 = (v62 + 0x8000) & 0xFFFF0000;
        v65 = (v63 + 0x8000) & 0xFFFF0000;
        v67 = v65 - *((_DWORD *)this + 144);
        v279[0] = v64 - *((_DWORD *)this + 143);
        v66 = v279[0];
        v279[1] = v67;
        v68 = v62 + v59;
        v69 = v63 + v60;
        v70 = (v68 + 0x8000) & 0xFFFF0000;
        v71 = (v69 + 0x8000) & 0xFFFF0000;
        v72 = v70 - v64;
        v73 = v71 - v65;
        v279[2] = v70 - v64;
        v279[3] = v71 - v65;
        v74 = v68 + v61;
        *((_DWORD *)this + 146) = v74;
        LODWORD(v56) = v69 + (_DWORD)v56;
        *((_DWORD *)this + 145) = (_DWORD)v56;
        v75 = (v74 + 0x8000) & 0xFFFF0000;
        *((_DWORD *)this + 143) = v75;
        LODWORD(v56) = ((_DWORD)v56 + 0x8000) & 0xFFFF0000;
        *((_DWORD *)this + 144) = (_DWORD)v56;
        v76 = v75 - v70;
        v77 = (_DWORD)v56 - v71;
        LODWORD(v280) = v75 - v70;
        DWORD1(v280) = (_DWORD)v56 - v71;
        memset(v291, 170, 30);
        v78 = TCharStringConversionContext::FixedToCharstr(this, v66, v291);
        TCharStringConversionContext::WriteData(this, v291, v78);
        memset(v291, 170, 30);
        v79 = TCharStringConversionContext::FixedToCharstr(this, v67, v291);
        TCharStringConversionContext::WriteData(this, v291, v79);
        memset(v291, 170, 30);
        v80 = TCharStringConversionContext::FixedToCharstr(this, v72, v291);
        TCharStringConversionContext::WriteData(this, v291, v80);
        memset(v291, 170, 30);
        v81 = TCharStringConversionContext::FixedToCharstr(this, v73, v291);
        TCharStringConversionContext::WriteData(this, v291, v81);
        memset(v291, 170, 30);
        v82 = TCharStringConversionContext::FixedToCharstr(this, v76, v291);
        TCharStringConversionContext::WriteData(this, v291, v82);
        memset(v291, 170, 30);
        v83 = TCharStringConversionContext::FixedToCharstr(this, v77, v291);
        TCharStringConversionContext::WriteData(this, v291, v83);
        *(_WORD *)v291 = 2060;
        TCharStringConversionContext::WriteData(this, &v291[1], 1u);
      }
      goto LABEL_23;
    case 9u:
      goto LABEL_23;
    case 0xAu:
      v23 = *((_DWORD *)this + 147);
      *((_DWORD *)this + 147) = v23 - 1;
      v24 = *((_DWORD *)this + v23 + 148);
      v25 = v24 >> 16;
      if (v24 >= 0x40000)
      {
        if (v25 == 4)
        {
          if (*((_DWORD *)this + 141) != 1)
            goto LABEL_215;
          v108 = v23 - 2;
          *((_DWORD *)this + 147) = v108;
          v25 = *((__int16 *)this + 2 * v108 + 299);
        }
LABEL_79:
        if (v25 >= 5)
          (*(void (**)(TType1ToType2CharStringConversionContext *, _QWORD, _QWORD, BOOL *))(*(_QWORD *)this + 24))(this, a2, (unsigned __int16)v25, a3);
        goto LABEL_215;
      }
      if (v25)
      {
        if (v25 != 2)
        {
          if (v25 == 1)
          {
            *((_BYTE *)this + 433) = 1;
            if (!*((_BYTE *)this + 552) && !*((_BYTE *)this + 429))
              _ZNSt3__18optionalI15TFlexConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)v271);
            goto LABEL_215;
          }
          goto LABEL_79;
        }
        *((_DWORD *)this + 147) = v23 - 2;
        v140 = *((unsigned __int16 *)this + 2 * v23 + 294);
        if (v140 == 22)
        {
          v143 = 0;
          v190 = v23 - 3;
          *((_DWORD *)this + 147) = v190;
          v141 = *((unsigned int *)this + v190 + 149);
        }
        else if (v140 == 4)
        {
          v141 = 0;
          v142 = v23 - 3;
          *((_DWORD *)this + 147) = v142;
          v143 = *((unsigned int *)this + v142 + 149);
        }
        else
        {
          *((_DWORD *)this + 147) = v23 - 3;
          v143 = *((unsigned int *)this + v23 + 146);
          v191 = v23 - 4;
          *((_DWORD *)this + 147) = v191;
          v141 = *((unsigned int *)this + v191 + 149);
        }
        if (!*((_BYTE *)this + 429))
        {
          if (!*((_BYTE *)this + 552))
            goto LABEL_318;
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v271 + 16))(v271, v141, v143);
        }
LABEL_215:
        if (*((_BYTE *)this + 430))
        {
          if (a2)
            return;
          *((_BYTE *)this + 430) = 0;
          v10 = (unsigned __int8 *)*((_QWORD *)this + 59);
        }
        goto LABEL_23;
      }
      *((_DWORD *)this + 147) = v23 - 2;
      v130 = *((unsigned int *)this + v23 + 147);
      *((_DWORD *)this + 147) = v23 - 3;
      v131 = *((unsigned int *)this + v23 + 146);
      v132 = v23 - 4;
      *((_DWORD *)this + 147) = v132;
      v133 = *((unsigned int *)this + v132 + 149);
      *((_BYTE *)this + 433) = 0;
      if (*((_BYTE *)this + 429))
        goto LABEL_215;
      if (!*((_BYTE *)this + 552))
        goto LABEL_318;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this + 63) + 24))(v271, v131, v130, v133);
      if (!*((_BYTE *)this + 552))
        goto LABEL_318;
      v134 = (*(uint64_t (**)(char *))(*(_QWORD *)v271 + 32))(v271);
      v277 = -1431655766;
      memset(v291, 170, 6);
      if (!v134)
      {
LABEL_153:
        if (!*((_BYTE *)this + 552))
          goto LABEL_318;
        v138 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 63) + 56))(v271);
        TCharStringConversionContext::WriteOpCode(this, v138);
        if (*((_BYTE *)this + 552))
        {
          *((_QWORD *)this + 63) = &off_1E61C9790;
          v139 = (void *)*((_QWORD *)this + 64);
          if (v139)
          {
            *((_QWORD *)this + 65) = v139;
            operator delete(v139);
          }
          *((_BYTE *)this + 552) = 0;
        }
        goto LABEL_215;
      }
      v135 = 1;
      while (*((_BYTE *)this + 552))
      {
        if ((*(unsigned int (**)(char *, _QWORD, int *))(*(_QWORD *)v271 + 40))(v271, v135, &v277))
        {
          v137 = TCFFDict::EncodeNumber((TCFFDict *)SHIWORD(v277), v291, v136);
          TCharStringConversionContext::WriteData(this, v291, v137);
        }
        if (v134 < ++v135)
          goto LABEL_153;
      }
LABEL_318:
      __break(1u);
      return;
    case 0xBu:
      return;
    case 0xCu:
      v10 = v7 + 2;
      v90 = v7[1];
      switch(v90)
      {
        case 1:
        case 2:
          if (*((_DWORD *)this + 147) != 6)
          {
            v240 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v240 = &off_1E61B2D68;
            v240[4] = 5;
          }
          if (*((_BYTE *)this + 429))
          {
            if (v90 == 2)
              v91 = 1;
            else
              v91 = 3;
            v92 = *((unsigned int *)this + 154);
            *((_DWORD *)this + 147) = 4;
            if (*((_BYTE *)this + 896))
            {
              v93 = *v8;
            }
            else
            {
              *((_QWORD *)this + 99) = &off_1E61C9728;
              *v9 = 0u;
              *((_OWORD *)this + 51) = 0u;
              *((_OWORD *)this + 52) = 0u;
              *((_OWORD *)this + 53) = 0u;
              *((_OWORD *)this + 54) = 0u;
              *((_BYTE *)this + 880) = 1;
              v274[39] = 0;
              v93 = &off_1E61C9728;
              *((_BYTE *)this + 896) = 1;
            }
            ((void (*)(char *, uint64_t, _QWORD, uint64_t, _QWORD))v93[2])((char *)this + 792, v92, *((unsigned int *)this + 153), v91, *((unsigned __int16 *)this + 280));
            v192 = *((_DWORD *)this + 147);
            *((_DWORD *)this + 147) = v192 - 1;
            v193 = *((unsigned int *)this + v192 + 148);
            v192 -= 2;
            *((_DWORD *)this + 147) = v192;
            v194 = *((unsigned int *)this + v192 + 149);
            if (*((_BYTE *)this + 896))
            {
              v195 = *v8;
            }
            else
            {
              *((_QWORD *)this + 99) = &off_1E61C9728;
              *v9 = 0u;
              *((_OWORD *)this + 51) = 0u;
              *((_OWORD *)this + 52) = 0u;
              *((_OWORD *)this + 53) = 0u;
              *((_OWORD *)this + 54) = 0u;
              *((_BYTE *)this + 880) = 1;
              v274[39] = 0;
              v195 = &off_1E61C9728;
              *((_BYTE *)this + 896) = 1;
            }
            ((void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD))v195[2])((char *)this + 792, v193, v194, v91, *((unsigned __int16 *)this + 280));
            v196 = *((_DWORD *)this + 147);
            *((_DWORD *)this + 147) = v196 - 1;
            v197 = *((unsigned int *)this + v196 + 148);
            v196 -= 2;
            *((_DWORD *)this + 147) = v196;
            v198 = *((unsigned int *)this + v196 + 149);
            if (*((_BYTE *)this + 896))
            {
              v199 = *v8;
            }
            else
            {
              *((_QWORD *)this + 99) = &off_1E61C9728;
              *v9 = 0u;
              *((_OWORD *)this + 51) = 0u;
              *((_OWORD *)this + 52) = 0u;
              *((_OWORD *)this + 53) = 0u;
              *((_OWORD *)this + 54) = 0u;
              *((_BYTE *)this + 880) = 1;
              v274[39] = 0;
              v199 = &off_1E61C9728;
              *((_BYTE *)this + 896) = 1;
            }
            ((void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD))v199[2])((char *)this + 792, v197, v198, v91, *((unsigned __int16 *)this + 280));
          }
          else
          {
            *((_DWORD *)this + 147) = 0;
          }
          goto LABEL_143;
        case 6:
          if (*((_DWORD *)this + 147) != 5)
          {
            v241 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v241 = &off_1E61B2D68;
            v241[4] = 5;
          }
          *((_DWORD *)this + 147) = 0;
          memset(v291, 170, 30);
          v144 = TCharStringConversionContext::FixedToCharstr(this, *((_DWORD *)this + 151), v291);
          TCharStringConversionContext::WriteData(this, v291, v144);
          memset(v291, 170, 30);
          v145 = TCharStringConversionContext::FixedToCharstr(this, *((_DWORD *)this + 152), v291);
          TCharStringConversionContext::WriteData(this, v291, v145);
          memset(v291, 170, 30);
          v146 = TCharStringConversionContext::FixedToCharstr(this, *((_DWORD *)this + 153), v291);
          TCharStringConversionContext::WriteData(this, v291, v146);
          memset(v291, 170, 30);
          v147 = TCharStringConversionContext::FixedToCharstr(this, *((_DWORD *)this + 154), v291);
          TCharStringConversionContext::WriteData(this, v291, v147);
          *(_WORD *)v291 = 3596;
          TCharStringConversionContext::WriteData(this, &v291[1], 1u);
          *a3 = 1;
          goto LABEL_23;
        case 7:
          if (*((_DWORD *)this + 147) != 4)
          {
            v250 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v250 = &off_1E61B2D68;
            v250[4] = 5;
          }
          *((_DWORD *)this + 147) = 0;
          if (*((_BYTE *)this + 429))
          {
            *(_DWORD *)v291 = (*((_DWORD *)this + 151) + 0x8000) & 0xFFFF0000;
            v184 = v274[3];
            v270 = v184.i32[0];
            *v274 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v184, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
            v274[1] = vrev64_s32(v184);
            TCharStringConversionContext::WriteFixed(this, (int *)v291);
            if (*((_BYTE *)this + 896))
            {
              v185 = *v8;
            }
            else
            {
              *((_QWORD *)this + 99) = &off_1E61C9728;
              *v9 = 0u;
              *((_OWORD *)this + 51) = 0u;
              *((_OWORD *)this + 52) = 0u;
              *((_OWORD *)this + 53) = 0u;
              *((_OWORD *)this + 54) = 0u;
              *((_BYTE *)this + 880) = 1;
              v274[39] = 0;
              v185 = &off_1E61C9728;
              *((_BYTE *)this + 896) = 1;
            }
            ((void (*)(char *, _QWORD, _QWORD))v185[3])((char *)this + 792, v270, 0);
          }
          goto LABEL_23;
        case 10:
          v186 = *((_DWORD *)this + 147);
          v149 = v186 - 2;
          if (v186 < 2)
          {
            v251 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v251 = &off_1E61B2D68;
            v251[4] = 5;
          }
          v150 = v186 - 1;
          v151 = (char *)this + 596;
          v152 = *((_DWORD *)this + v149 + 149) + *((_DWORD *)this + v150 + 149);
          goto LABEL_208;
        case 11:
          v148 = *((_DWORD *)this + 147);
          v149 = v148 - 2;
          if (v148 < 2)
          {
            v244 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v244 = &off_1E61B2D68;
            v244[4] = 5;
          }
          v150 = v148 - 1;
          v151 = (char *)this + 596;
          v152 = *((_DWORD *)this + v149 + 149) - *((_DWORD *)this + v150 + 149);
          goto LABEL_208;
        case 12:
          v153 = *((_DWORD *)this + 147);
          v149 = v153 - 2;
          if (v153 < 2)
          {
            v245 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v245 = &off_1E61B2D68;
            v245[4] = 5;
          }
          v150 = v153 - 1;
          v151 = (char *)this + 596;
          v154 = *((_DWORD *)this + v150 + 149);
          v155 = v272;
          if ((v272 & 1) != 0)
            v154 >>= 16;
          v152 = vcvtd_n_s64_f64((double)*((int *)this + v149 + 149) * 0.0000152587891 / ((double)v154 * 0.0000152587891), 0x10uLL);
          if ((v272 & 1) != 0)
            v155 = 0;
          LODWORD(v272) = v155;
          goto LABEL_208;
        case 16:
          v156 = *((_DWORD *)this + 147);
          v157 = v156 - 1;
          *((_DWORD *)this + 147) = v156 - 1;
          v158 = *((_DWORD *)this + v156 + 148);
          switch(v158 >> 16)
          {
            case 3:
            case 5:
              v168 = v156 - 2;
              goto LABEL_183;
            case 4:
              *((_DWORD *)this + 147) = v156 - 2;
              if (*((unsigned __int16 *)this + 2 * v156 + 295) << 16 != 0x10000)
              {
                v257 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v257 = &off_1E61B2D68;
                v257[4] = 5;
              }
              v204 = v272;
              if ((v272 & 1) != 0)
                v204 = 0;
              LODWORD(v272) = v204;
              v168 = v156 - 3;
              goto LABEL_183;
            case 12:
            case 13:
              if (v156 < 2)
              {
                v253 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v253 = &off_1E61B2D68;
                v253[4] = 5;
              }
              TType1ToType2CharStringConversionContext::StoreCounterValues(this);
              goto LABEL_23;
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
              v159 = v156 - 2;
              *((_DWORD *)this + 147) = v159;
              v160 = v159 - *((__int16 *)this + 2 * v159 + 299);
              *((_DWORD *)this + 147) = v160;
              v161 = HIWORD(v158) - 13;
              if (v158 >> 16 == 18)
                v161 = 6;
              v162 = (int *)((char *)this + 4 * v160 + 596);
              do
              {
                --v161;
                v163 = *v162++;
                v164 = *((int *)this + 147);
                *((_DWORD *)this + 147) = v164 + 1;
                *((_DWORD *)this + v164 + 149) = v163;
              }
              while ((_WORD)v161);
              goto LABEL_23;
            case 19:
              v205 = __OFSUB__(v156, 3);
              v206 = v156 - 3;
              if (v206 < 0 != v205)
              {
                v258 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v258 = &off_1E61B2D68;
                v258[4] = 5;
              }
              *((_DWORD *)this + 147) = v206;
              if ((*((_DWORD *)this + v206 + 149) & 0x80000000) != 0)
              {
                v259 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v259 = &off_1E61B2D68;
                v259[4] = 5;
              }
              goto LABEL_23;
            case 20:
              v207 = v156 - 4;
              if (v156 < 4)
              {
                v260 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v260 = &off_1E61B2D68;
                v260[4] = 5;
              }
              v208 = v156 - 3;
              v209 = (char *)this + 596;
              v210 = *((_DWORD *)this + v207 + 149) + *((_DWORD *)this + v208 + 149);
              goto LABEL_252;
            case 21:
              v207 = v156 - 4;
              if (v156 < 4)
              {
                v261 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v261 = &off_1E61B2D68;
                v261[4] = 5;
              }
              v208 = v156 - 3;
              v209 = (char *)this + 596;
              v210 = *((_DWORD *)this + v207 + 149) - *((_DWORD *)this + v208 + 149);
              goto LABEL_252;
            case 22:
              v207 = v156 - 4;
              if (v156 < 4)
              {
                v262 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v262 = &off_1E61B2D68;
                v262[4] = 5;
              }
              v208 = v156 - 3;
              v209 = (char *)this + 596;
              v211 = (double)*((int *)this + v208 + 149)
                   * 0.0000152587891
                   * ((double)*((int *)this + v207 + 149)
                    * 0.0000152587891);
              goto LABEL_251;
            case 23:
              v207 = v156 - 4;
              if (v156 < 4)
              {
                v263 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v263 = &off_1E61B2D68;
                v263[4] = 5;
              }
              v208 = v156 - 3;
              v209 = (char *)this + 596;
              v211 = (double)*((int *)this + v207 + 149)
                   * 0.0000152587891
                   / ((double)*((int *)this + v208 + 149)
                    * 0.0000152587891);
LABEL_251:
              v210 = vcvtd_n_s64_f64(v211, 0x10uLL);
LABEL_252:
              *((_DWORD *)this + 147) = v208;
              *(_DWORD *)&v209[4 * v207] = v210;
              goto LABEL_23;
            case 24:
            case 26:
              v200 = v156 - 4;
              if (v156 < 4)
              {
                v254 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v254 = &off_1E61B2D68;
                v254[4] = 5;
              }
              v201 = *((_DWORD *)this + (v156 - 3) + 149);
              *((_DWORD *)this + 147) = v200;
              if (v201 < 0
                || (v202 = (v201 >> 16), (int)v202 >= *(unsigned __int16 *)(*((_QWORD *)this + 56) + 80)))
              {
                v255 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v255 = &off_1E61B2D68;
                v255[4] = 5;
              }
              v203 = *((_QWORD *)this + 60);
              if (v202 >= (*((_QWORD *)this + 61) - v203) >> 2)
                std::vector<int>::__throw_out_of_range[abi:fe180100]();
              *(_DWORD *)(v203 + 4 * v202) = *((_DWORD *)this + v200 + 149);
              goto LABEL_23;
            case 25:
              v212 = v156 - 3;
              if (v156 < 3)
              {
                v264 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v264 = &off_1E61B2D68;
                v264[4] = 5;
              }
              *((_DWORD *)this + 147) = v212;
              v174 = (char *)this + 4 * v212;
              v213 = *((_DWORD *)v174 + 149);
              if (v213 < 0
                || (v175 = (v213 >> 16), (int)v175 >= *(unsigned __int16 *)(*((_QWORD *)this + 56) + 80)))
              {
                v265 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v265 = &off_1E61B2D68;
                v265[4] = 5;
              }
              v176 = *((_QWORD *)this + 60);
              if (v175 >= (*((_QWORD *)this + 61) - v176) >> 2)
                std::vector<int>::__throw_out_of_range[abi:fe180100]();
              v173 = v156 - 2;
              goto LABEL_191;
            case 27:
              v214 = v156 - 6;
              if (v156 < 6)
              {
                v266 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v266 = &off_1E61B2D68;
                v266[4] = 5;
              }
              v215 = *((_DWORD *)this + (v156 - 3) + 149);
              v216 = *((_DWORD *)this + (v156 - 4) + 149);
              v168 = v156 - 5;
              v217 = *((_DWORD *)this + v168 + 149);
              *((_DWORD *)this + 147) = v214;
              if (v216 > v215)
                goto LABEL_183;
              *((_DWORD *)this + 147) = v168;
              *((_DWORD *)this + v214 + 149) = v217;
              break;
            case 28:
              v205 = __OFSUB__(v156, 2);
              v218 = v156 - 2;
              if (v218 < 0 != v205)
              {
                v267 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v267 = &off_1E61B2D68;
                v267[4] = 5;
              }
              v183 = (char *)this + 4 * v218;
              v219 = 1103515245 * *((_DWORD *)this + 148) + 12345;
              *((_DWORD *)this + 148) = v219;
              v182 = HIWORD(v219) + 1;
              goto LABEL_195;
            case 29:
              v220 = v156 - 2;
              *((_DWORD *)this + 147) = v156 - 2;
              v205 = __OFSUB__(v156, 3);
              v221 = v156 - 3;
              if (v221 < 0 != v205)
              {
                v268 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v268 = &off_1E61B2D68;
                v268[4] = 5;
              }
              *((_DWORD *)this + v220 + 149) = *((_DWORD *)this + v221 + 149);
              goto LABEL_265;
            case 30:
              v222 = v156 - 3;
              if (v156 < 3)
              {
                v269 = __cxa_allocate_exception(0x10uLL);
                *(_QWORD *)v269 = &off_1E61B2D68;
                v269[4] = 5;
              }
              v223 = *((_DWORD *)this + v222 + 149);
              *((_DWORD *)this + 147) = v222;
              v224 = v156 - 4;
              *((_DWORD *)this + v222 + 149) = *((_DWORD *)this + v224 + 149);
              *((_DWORD *)this + v224 + 149) = v223;
              goto LABEL_182;
            default:
              v256 = __cxa_allocate_exception(0x10uLL);
              *(_QWORD *)v256 = &off_1E61B2D68;
              v256[4] = 5;
          }
          goto LABEL_23;
        case 24:
          v187 = *((_DWORD *)this + 147);
          v149 = v187 - 2;
          if (v187 < 2)
          {
            v243 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v243 = &off_1E61B2D68;
            v243[4] = 5;
          }
          v150 = v187 - 1;
          v151 = (char *)this + 596;
          v152 = vcvtd_n_s64_f64((double)*((int *)this + v150 + 149)* 0.0000152587891* ((double)*((int *)this + v149 + 149)* 0.0000152587891), 0x10uLL);
          goto LABEL_208;
        case 25:
          v188 = *((_DWORD *)this + 147);
          v149 = v188 - 2;
          if (v188 < 2)
          {
            v252 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v252 = &off_1E61B2D68;
            v252[4] = 5;
          }
          v150 = v188 - 1;
          v151 = (char *)this + 596;
          v152 = vcvtd_n_s64_f64((double)*((int *)this + v149 + 149)* 0.0000152587891/ ((double)*((int *)this + v150 + 149)* 0.0000152587891), 0x10uLL);
          v189 = v272;
          if ((v272 & 1) != 0)
            v189 = 0;
          LODWORD(v272) = v189;
LABEL_208:
          *((_DWORD *)this + 147) = v150;
          *(_DWORD *)&v151[4 * v149] = v152;
          goto LABEL_23;
        case 26:
          v165 = (char *)this + 4 * *((int *)this + 147);
          *((_DWORD *)v165 + 149) = *((_DWORD *)v165 + 148);
          goto LABEL_182;
        case 27:
          v166 = *((_DWORD *)this + 147);
          *((_DWORD *)this + 147) = v166 - 1;
          v167 = *((_DWORD *)this + v166 + 148);
          *((_DWORD *)this + v166 + 148) = *((_DWORD *)this + v166 + 147);
          *((_DWORD *)this + *((int *)this + 147) + 148) = v167;
LABEL_182:
          v168 = *((_DWORD *)this + 147) + 1;
LABEL_183:
          *((_DWORD *)this + 147) = v168;
          break;
        case 28:
          v169 = *((_DWORD *)this + 147);
          v170 = v169 - 2;
          if (v169 < 2)
          {
            v246 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v246 = &off_1E61B2D68;
            v246[4] = 5;
          }
          v171 = *((unsigned int *)this + (v169 - 1) + 149);
          *((_DWORD *)this + 147) = v170;
          if (v171 >= *(unsigned __int16 *)(*((_QWORD *)this + 56) + 80))
          {
            v247 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v247 = &off_1E61B2D68;
            v247[4] = 5;
          }
          v172 = *((_QWORD *)this + 60);
          if (v171 >= (*((_QWORD *)this + 61) - v172) >> 2)
            std::vector<int>::__throw_out_of_range[abi:fe180100]();
          *(_DWORD *)(v172 + 4 * v171) = *((_DWORD *)this + v170 + 149);
          break;
        case 29:
          v173 = *((_DWORD *)this + 147);
          if (v173 < 2)
          {
            v248 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v248 = &off_1E61B2D68;
            v248[4] = 5;
          }
          *((_DWORD *)this + 147) = v173 - 1;
          v174 = (char *)this + 4 * (v173 - 1);
          v175 = *((unsigned int *)v174 + 149);
          if (v175 >= *(unsigned __int16 *)(*((_QWORD *)this + 56) + 80))
          {
            v249 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v249 = &off_1E61B2D68;
            v249[4] = 5;
          }
          v176 = *((_QWORD *)this + 60);
          if (v175 >= (*((_QWORD *)this + 61) - v176) >> 2)
            std::vector<int>::__throw_out_of_range[abi:fe180100]();
LABEL_191:
          v177 = *(_DWORD *)(v176 + 4 * v175);
          *((_DWORD *)this + 147) = v173;
          *((_DWORD *)v174 + 149) = v177;
          break;
        case 30:
          v178 = *((_DWORD *)this + 147);
          v179 = v178 - 4;
          if (v178 < 4)
          {
            v242 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v242 = &off_1E61B2D68;
            v242[4] = 5;
          }
          v180 = *((_DWORD *)this + (v178 - 1) + 149);
          v181 = *((_DWORD *)this + (v178 - 2) + 149);
          v157 = v178 - 3;
          v182 = *((_DWORD *)this + v157 + 149);
          *((_DWORD *)this + 147) = v179;
          if (v181 <= v180)
          {
LABEL_265:
            *((_DWORD *)this + 147) = v157;
          }
          else
          {
            v183 = (char *)this + 4 * v179;
LABEL_195:
            *((_DWORD *)this + 147) = v157;
            *((_DWORD *)v183 + 149) = v182;
          }
          break;
        default:
          goto LABEL_23;
      }
      goto LABEL_23;
    case 0xDu:
      if (*((_DWORD *)this + 147) != 2)
      {
        v234 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v234 = &off_1E61B2D68;
        v234[4] = 5;
      }
      v84 = *((_DWORD *)this + 150);
      *((_DWORD *)this + 147) = 0;
      if (*((_BYTE *)this + 429))
      {
        v85 = *((unsigned int *)this + 149);
        *((_DWORD *)this + 146) = v85;
        *((_DWORD *)this + 143) = (v85 + 0x8000) & 0xFFFF0000;
        *((_QWORD *)this + 72) = 0;
        memset(v291, 170, 30);
        v86 = TCharStringConversionContext::FixedToCharstr(this, v84, v291);
        TCharStringConversionContext::WriteData(this, v291, v86);
        if (!a2)
          *((_QWORD *)this + 59) = v10;
        if (*((_BYTE *)this + 896))
        {
          v87 = *v8;
        }
        else
        {
          *((_QWORD *)this + 99) = &off_1E61C9728;
          *v9 = 0u;
          *((_OWORD *)this + 51) = 0u;
          *((_OWORD *)this + 52) = 0u;
          *((_OWORD *)this + 53) = 0u;
          *((_OWORD *)this + 54) = 0u;
          *((_BYTE *)this + 880) = 1;
          v274[39] = 0;
          v87 = &off_1E61C9728;
          *((_BYTE *)this + 896) = 1;
        }
        ((void (*)(char *, uint64_t, _QWORD))v87[3])((char *)this + 792, v85, 0);
      }
      goto LABEL_23;
    case 0xEu:
      *((_BYTE *)this + 431) = 0;
      if (*((_BYTE *)this + 429))
      {
        *((_BYTE *)this + 429) = 0;
        *((_WORD *)this + 280) = 0;
        memset(v291, 170, 12);
        if (*((_BYTE *)this + 896))
        {
          v89 = *v8;
        }
        else
        {
          *((_QWORD *)this + 99) = &off_1E61C9728;
          *v9 = 0u;
          *((_OWORD *)this + 51) = 0u;
          *((_OWORD *)this + 52) = 0u;
          *((_OWORD *)this + 53) = 0u;
          *((_OWORD *)this + 54) = 0u;
          *((_BYTE *)this + 880) = 1;
          v274[39] = 0;
          v89 = &off_1E61C9728;
          *((_BYTE *)this + 896) = 1;
        }
        v277 = -1431655766;
        v113 = ((uint64_t (*)(char *, uint64_t))v89[4])((char *)this + 792, 1);
        if (v113)
        {
          for (i = 1; i <= v113; ++i)
          {
            if (*((_BYTE *)this + 896))
            {
              v115 = *v8;
            }
            else
            {
              *((_QWORD *)this + 99) = &off_1E61C9728;
              *v9 = 0u;
              *((_OWORD *)this + 51) = 0u;
              *((_OWORD *)this + 52) = 0u;
              *((_OWORD *)this + 53) = 0u;
              *((_OWORD *)this + 54) = 0u;
              *((_BYTE *)this + 880) = 1;
              v274[39] = 0;
              v115 = &off_1E61C9728;
              *((_BYTE *)this + 896) = 1;
            }
            if (((unsigned int (*)(char *, _QWORD, int *, uint64_t))v115[7])((char *)this + 792, i, &v277, 1))
            {
              v117 = TCFFDict::EncodeNumber((TCFFDict *)SHIWORD(v277), v291, v116);
              TCharStringConversionContext::WriteData(this, v291, v117);
            }
          }
          v278 = 4620;
          TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v278 + 1, 1u);
        }
        if (*((_BYTE *)this + 896))
        {
          v118 = *v8;
        }
        else
        {
          *((_QWORD *)this + 99) = &off_1E61C9728;
          *v9 = 0u;
          *((_OWORD *)this + 51) = 0u;
          *((_OWORD *)this + 52) = 0u;
          *((_OWORD *)this + 53) = 0u;
          *((_OWORD *)this + 54) = 0u;
          *((_BYTE *)this + 880) = 1;
          v274[39] = 0;
          v118 = &off_1E61C9728;
          *((_BYTE *)this + 896) = 1;
        }
        v119 = ((uint64_t (*)(char *, uint64_t))v118[4])((char *)this + 792, 3);
        if (v119)
        {
          for (j = 1; j <= v119; ++j)
          {
            if (*((_BYTE *)this + 896))
            {
              v121 = *v8;
            }
            else
            {
              *((_QWORD *)this + 99) = &off_1E61C9728;
              *v9 = 0u;
              *((_OWORD *)this + 51) = 0u;
              *((_OWORD *)this + 52) = 0u;
              *((_OWORD *)this + 53) = 0u;
              *((_OWORD *)this + 54) = 0u;
              *((_BYTE *)this + 880) = 1;
              v274[39] = 0;
              v121 = &off_1E61C9728;
              *((_BYTE *)this + 896) = 1;
            }
            if (((unsigned int (*)(char *, _QWORD, int *, uint64_t))v121[7])((char *)this + 792, j, &v277, 3))
            {
              v123 = TCFFDict::EncodeNumber((TCFFDict *)SHIWORD(v277), v291, v122);
              TCharStringConversionContext::WriteData(this, v291, v123);
            }
          }
          if (!v113)
          {
            v278 = 5900;
            TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v278 + 1, 1u);
          }
        }
        if (*((_BYTE *)this + 896))
        {
          v124 = *v8;
        }
        else
        {
          *((_QWORD *)this + 99) = &off_1E61C9728;
          *v9 = 0u;
          *((_OWORD *)this + 51) = 0u;
          *((_OWORD *)this + 52) = 0u;
          *((_OWORD *)this + 53) = 0u;
          *((_OWORD *)this + 54) = 0u;
          *((_BYTE *)this + 880) = 1;
          v274[39] = 0;
          v124 = &off_1E61C9728;
          *((_BYTE *)this + 896) = 1;
        }
        v125 = ((uint64_t (*)(char *))v124[6])((char *)this + 792);
        if (v125)
        {
          v126 = 1;
          do
          {
            *(_DWORD *)&v291[8] = 0;
            *(_QWORD *)v291 = 0;
            if (*((_BYTE *)this + 896))
            {
              v127 = *v8;
            }
            else
            {
              *((_QWORD *)this + 99) = &off_1E61C9728;
              *v9 = 0u;
              *((_OWORD *)this + 51) = 0u;
              *((_OWORD *)this + 52) = 0u;
              *((_OWORD *)this + 53) = 0u;
              *((_OWORD *)this + 54) = 0u;
              *((_BYTE *)this + 880) = 1;
              v274[39] = 0;
              v127 = &off_1E61C9728;
              *((_BYTE *)this + 896) = 1;
            }
            v128 = ((uint64_t (*)(char *, unsigned __int8 *, _QWORD))v127[9])((char *)this + 792, v291, (unsigned __int16)v126);
            v278 = 5132;
            TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v278 + 1, 1u);
            TCharStringConversionContext::WriteData(this, v291, v128);
            ++v126;
          }
          while (v125 >= (unsigned __int16)v126);
        }
        TType1ToType2CharStringConversionContext::WriteHintMask(this);
        if (a2)
        {
          *((_BYTE *)this + 430) = 1;
          return;
        }
        v10 = (unsigned __int8 *)*((_QWORD *)this + 59);
        BYTE4(v272) = 1;
      }
      else
      {
        if (*((_DWORD *)this + 147))
        {
          v238 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v238 = &off_1E61B2D68;
          v238[4] = 5;
        }
        *(_WORD *)v291 = 3596;
        TCharStringConversionContext::WriteData(this, &v291[1], 1u);
        *a3 = 1;
        if (*((_BYTE *)this + 896))
        {
          THintCntrConversion::~THintCntrConversion((TType1ToType2CharStringConversionContext *)((char *)this + 792));
          *((_BYTE *)this + 896) = 0;
        }
      }
      goto LABEL_23;
    case 0x15u:
      v88 = *((int *)this + 147);
      if (*((_BYTE *)this + 433))
      {
        *((_DWORD *)this + 147) = v88 + 1;
        v46 = (char *)this + 4 * v88;
        v47 = 21;
        goto LABEL_75;
      }
      if ((_DWORD)v88 != 2)
      {
        v237 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v237 = &off_1E61B2D68;
        v237[4] = 5;
      }
      v111 = *((_DWORD *)this + 150);
      *(_DWORD *)v291 = v111;
      *((_DWORD *)this + 147) = 0;
      v112 = *((unsigned int *)this + 149);
      TType1ToType2CharStringConversionContext::SetHints(this);
      if (*((_BYTE *)this + 429))
        goto LABEL_23;
      if ((v272 & 0x100000000) != 0)
      {
        v112 = (*((_DWORD *)this + 146) + v112);
        *(_DWORD *)v291 = *((_DWORD *)this + 145) + v111;
      }
      goto LABEL_92;
    case 0x16u:
      v107 = *((int *)this + 147);
      if (*((_BYTE *)this + 433))
      {
        *((_DWORD *)this + 147) = v107 + 1;
        v46 = (char *)this + 4 * v107;
        v47 = 22;
LABEL_75:
        *((_DWORD *)v46 + 149) = v47;
      }
      else
      {
        if ((_DWORD)v107 != 1)
        {
          v239 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v239 = &off_1E61B2D68;
          v239[4] = 5;
        }
        *((_DWORD *)this + 147) = 0;
        v112 = *((unsigned int *)this + 149);
        v276 = *((_DWORD *)this + 149);
        TType1ToType2CharStringConversionContext::SetHints(this);
        if (!*((_BYTE *)this + 429))
        {
          *(_DWORD *)v291 = 0;
          if ((v272 & 0x100000000) != 0)
          {
            v112 = (*((_DWORD *)this + 146) + v112);
            v276 = v112;
            *(_DWORD *)v291 = *((_DWORD *)this + 145);
          }
LABEL_92:
          TType1ToType2CharStringConversionContext::WriteMoveTo(this, (int *)v112, (int *)v291);
LABEL_163:
          BYTE4(v272) = 0;
        }
      }
      goto LABEL_23;
    case 0x1Eu:
      if (*((_DWORD *)this + 147) != 4)
      {
        v230 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v230 = &off_1E61B2D68;
        v230[4] = 5;
      }
      *((_DWORD *)this + 147) = 0;
      TType1ToType2CharStringConversionContext::SetHints(this);
      if (!*((_BYTE *)this + 429))
      {
        v26 = (_DWORD *)((char *)this + 4 * *((int *)this + 147));
        v27 = v26[149];
        v28 = v26[150];
        v29 = v26[151];
        LODWORD(v26) = v26[152];
        v30 = *((_DWORD *)this + 145) + v27;
        v31 = (v30 + 0x8000) & 0xFFFF0000;
        v32 = v31 - *((_DWORD *)this + 144);
        v33 = *((_DWORD *)this + 143);
        v34 = *((_DWORD *)this + 146) + v28;
        v35 = v30 + v29;
        *((_DWORD *)this + 145) = v35;
        v36 = (v34 + 0x8000) & 0xFFFF0000;
        v37 = (v35 + 0x8000) & 0xFFFF0000;
        *((_DWORD *)this + 144) = v37;
        v38 = v36 - v33;
        v279[0] = v32;
        v279[1] = v36 - v33;
        v39 = v37 - v31;
        LODWORD(v26) = v34 + (_DWORD)v26;
        *((_DWORD *)this + 146) = (_DWORD)v26;
        LODWORD(v26) = ((_DWORD)v26 + 0x8000) & 0xFFFF0000;
        *((_DWORD *)this + 143) = (_DWORD)v26;
        v40 = (_DWORD)v26 - v36;
        v279[2] = v37 - v31;
        v279[3] = (_DWORD)v26 - v36;
        memset(v291, 170, 30);
        v41 = TCharStringConversionContext::FixedToCharstr(this, v32, v291);
        TCharStringConversionContext::WriteData(this, v291, v41);
        memset(v291, 170, 30);
        v42 = TCharStringConversionContext::FixedToCharstr(this, v38, v291);
        TCharStringConversionContext::WriteData(this, v291, v42);
        memset(v291, 170, 30);
        v43 = TCharStringConversionContext::FixedToCharstr(this, v39, v291);
        TCharStringConversionContext::WriteData(this, v291, v43);
        memset(v291, 170, 30);
        v44 = TCharStringConversionContext::FixedToCharstr(this, v40, v291);
        TCharStringConversionContext::WriteData(this, v291, v44);
        *(_WORD *)v291 = 7692;
        TCharStringConversionContext::WriteData(this, &v291[1], 1u);
      }
      goto LABEL_23;
    case 0x1Fu:
      if (*((_DWORD *)this + 147) != 4)
      {
        v235 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v235 = &off_1E61B2D68;
        v235[4] = 5;
      }
      *((_DWORD *)this + 147) = 0;
      TType1ToType2CharStringConversionContext::SetHints(this);
      if (!*((_BYTE *)this + 429))
      {
        v94 = (_DWORD *)((char *)this + 4 * *((int *)this + 147));
        v95 = v94[149];
        v96 = v94[150];
        v97 = v94[151];
        LODWORD(v94) = v94[152];
        v98 = *((_DWORD *)this + 146) + v95;
        v279[0] = ((v98 + 0x8000) & 0xFFFF0000) - *((_DWORD *)this + 143);
        v99 = v279[0];
        v279[1] = v96;
        v100 = v98 + v96;
        *((_DWORD *)this + 146) = v100;
        v101 = *((_DWORD *)this + 145) + v97;
        *((_DWORD *)this + 143) = (v100 + 0x8000) & 0xFFFF0000;
        LODWORD(v94) = v101 + (_DWORD)v94;
        *((_DWORD *)this + 145) = (_DWORD)v94;
        LODWORD(v94) = ((_DWORD)v94 + 0x8000) & 0xFFFF0000;
        *((_DWORD *)this + 144) = (_DWORD)v94;
        v102 = (_DWORD)v94 - ((v101 + 0x8000) & 0xFFFF0000);
        v279[2] = v97;
        v279[3] = v102;
        memset(v291, 170, 30);
        v103 = TCharStringConversionContext::FixedToCharstr(this, v99, v291);
        TCharStringConversionContext::WriteData(this, v291, v103);
        memset(v291, 170, 30);
        v104 = TCharStringConversionContext::FixedToCharstr(this, v96, v291);
        TCharStringConversionContext::WriteData(this, v291, v104);
        memset(v291, 170, 30);
        v105 = TCharStringConversionContext::FixedToCharstr(this, v97, v291);
        TCharStringConversionContext::WriteData(this, v291, v105);
        memset(v291, 170, 30);
        v106 = TCharStringConversionContext::FixedToCharstr(this, v102, v291);
        TCharStringConversionContext::WriteData(this, v291, v106);
        *(_WORD *)v291 = 7948;
        TCharStringConversionContext::WriteData(this, &v291[1], 1u);
      }
      goto LABEL_23;
    default:
      v228 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v228 = &off_1E61B2D68;
      v228[4] = 5;
  }
}

void TType1ToType2CharStringConversionContext::~TType1ToType2CharStringConversionContext(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *this = &off_1E61C96F8;
  free(this[35]);
  v2 = this[113];
  if (v2)
  {
    this[114] = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 896))
    THintCntrConversion::~THintCntrConversion((THintCntrConversion *)(this + 99));
  if (*((_BYTE *)this + 552))
  {
    this[63] = &off_1E61C9790;
    v3 = this[64];
    if (v3)
    {
      this[65] = v3;
      operator delete(v3);
    }
  }
  v4 = this[60];
  if (v4)
  {
    this[61] = v4;
    operator delete(v4);
  }
  v5 = this[57];
  this[57] = 0;
  if (v5)
    MEMORY[0x1B5E0CD14](v5, 0x1000C8077774924);
}

{
  TType1ToType2CharStringConversionContext::~TType1ToType2CharStringConversionContext(this);
  JUMPOUT(0x1B5E0CD38);
}

_BYTE *TType1ToType2CharStringConversionContext::SetHints(_BYTE *this)
{
  this[431] = 1;
  if (this[432])
  {
    this[432] = 0;
    if (!this[429])
    {
      ++*((_WORD *)this + 280);
      return TType1ToType2CharStringConversionContext::WriteHintMask((TType1ToType2CharStringConversionContext *)this);
    }
  }
  return this;
}

void *TType1ToType2CharStringConversionContext::WriteMoveTo(TType1ToType2CharStringConversionContext *this, int *a2, int *a3)
{
  _BOOL4 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned __int8 v10[8];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    v5 = *a3 == 0;
    memset(v11, 170, 22);
    *(_QWORD *)v10 = 0xAAAAAAAAAAAAAAAALL;
    v6 = TCharStringConversionContext::FixedToCharstr(this, (int)a2, v10);
    TCharStringConversionContext::WriteData(this, v10, v6);
    if (v5)
    {
      *(_WORD *)v10 = 5644;
    }
    else
    {
      memset(v11, 170, 22);
      *(_QWORD *)v10 = 0xAAAAAAAAAAAAAAAALL;
      v7 = TCharStringConversionContext::FixedToCharstr(this, *a3, v10);
      TCharStringConversionContext::WriteData(this, v10, v7);
      *(_WORD *)v10 = 5388;
    }
    return TCharStringConversionContext::WriteData(this, &v10[1], 1u);
  }
  else
  {
    memset(v11, 170, 22);
    *(_QWORD *)v10 = 0xAAAAAAAAAAAAAAAALL;
    v9 = TCharStringConversionContext::FixedToCharstr(this, *a3, v10);
    TCharStringConversionContext::WriteData(this, v10, v9);
    *(_WORD *)v10 = 1036;
    return TCharStringConversionContext::WriteData(this, &v10[1], 1u);
  }
}

void *TType1ToType2CharStringConversionContext::WriteLineTo(TType1ToType2CharStringConversionContext *this, int *a2, int *a3)
{
  _BOOL4 v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned __int8 v10[8];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    v5 = *a3 == 0;
    memset(v11, 170, 22);
    *(_QWORD *)v10 = 0xAAAAAAAAAAAAAAAALL;
    v6 = TCharStringConversionContext::FixedToCharstr(this, (int)a2, v10);
    TCharStringConversionContext::WriteData(this, v10, v6);
    if (v5)
    {
      *(_WORD *)v10 = 1548;
    }
    else
    {
      memset(v11, 170, 22);
      *(_QWORD *)v10 = 0xAAAAAAAAAAAAAAAALL;
      v7 = TCharStringConversionContext::FixedToCharstr(this, *a3, v10);
      TCharStringConversionContext::WriteData(this, v10, v7);
      *(_WORD *)v10 = 1292;
    }
    return TCharStringConversionContext::WriteData(this, &v10[1], 1u);
  }
  else
  {
    memset(v11, 170, 22);
    *(_QWORD *)v10 = 0xAAAAAAAAAAAAAAAALL;
    v9 = TCharStringConversionContext::FixedToCharstr(this, *a3, v10);
    TCharStringConversionContext::WriteData(this, v10, v9);
    *(_WORD *)v10 = 1804;
    return TCharStringConversionContext::WriteData(this, &v10[1], 1u);
  }
}

uint64_t _ZNSt3__18optionalI15TFlexConversionE7emplaceB8fe180100IJEvEERS1_DpOT_(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)a1 = &off_1E61C9790;
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }
  *(_QWORD *)a1 = &off_1E61C9790;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 3107;
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void TType1ToType2CharStringConversionContext::StoreCounterValues(TType1ToType2CharStringConversionContext *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void **v9;
  char *v10;
  _DWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  char *v36;
  char *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  void (***v42)(THintCntrConversion *__hidden);
  _OWORD *v43;
  _QWORD *v44;
  unsigned __int16 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  void (**v51)(THintCntrConversion *__hidden);
  void (**v52)(THintCntrConversion *__hidden);
  unsigned int v53;
  uint64_t v54;
  void (***v55)(THintCntrConversion *__hidden);
  void (**v56)(THintCntrConversion *__hidden);
  uint64_t v57;
  int v58;
  _OWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  void (**v66)(THintCntrConversion *__hidden);
  void (**v67)(THintCntrConversion *__hidden);
  _WORD *exception;

  v2 = *((int *)this + 147);
  v3 = HIWORD(*((_DWORD *)this + v2 + 149));
  v4 = v2 - 1;
  *((_DWORD *)this + 147) = v4;
  if (v3 == 12)
  {
    v8 = 0;
    v9 = (void **)((char *)this + 904);
    v10 = (char *)*((_QWORD *)this + 114);
    do
    {
      v11 = (_DWORD *)((char *)this + 4 * (21 - v8) + 596);
      v12 = *((_QWORD *)this + 115);
      if ((unint64_t)v10 >= v12)
      {
        v14 = (char *)*v9;
        v15 = (v10 - (_BYTE *)*v9) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          goto LABEL_86;
        v17 = v12 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)this + 920, v18);
          v10 = (char *)*((_QWORD *)this + 114);
          v14 = (char *)*((_QWORD *)this + 113);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v15];
        *(_DWORD *)v20 = *v11;
        v13 = v20 + 4;
        while (v10 != v14)
        {
          v21 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        *((_QWORD *)this + 113) = v20;
        *((_QWORD *)this + 114) = v13;
        *((_QWORD *)this + 115) = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_DWORD *)v10 = *v11;
        v13 = v10 + 4;
      }
      *((_QWORD *)this + 114) = v13;
      ++v8;
      v10 = v13;
    }
    while (v8 != 22);
    *((_DWORD *)this + 147) -= 22;
  }
  else
  {
    if (v3 != 13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    v5 = *((unsigned int *)this + v4 + 149);
    v6 = v5 >> 16;
    if (WORD1(v5))
    {
      v22 = 0;
      v23 = (void **)((char *)this + 904);
      if (v6 <= 1)
        v24 = 1;
      else
        v24 = v6;
      v7 = (char *)*((_QWORD *)this + 114);
      do
      {
        v25 = (_DWORD *)((char *)this + 4 * ~v22 + 4 * v6 + 596);
        v26 = *((_QWORD *)this + 115);
        if ((unint64_t)v7 >= v26)
        {
          v27 = (char *)*v23;
          v28 = (v7 - (_BYTE *)*v23) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            goto LABEL_86;
          v30 = v26 - (_QWORD)v27;
          if (v30 >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)this + 920, v31);
            v7 = (char *)*((_QWORD *)this + 114);
            v27 = (char *)*((_QWORD *)this + 113);
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[4 * v28];
          *(_DWORD *)v33 = *v25;
          v34 = v33 + 4;
          while (v7 != v27)
          {
            v35 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v33 - 1) = v35;
            v33 -= 4;
          }
          *((_QWORD *)this + 113) = v33;
          *((_QWORD *)this + 114) = v34;
          *((_QWORD *)this + 115) = &v32[4 * v31];
          if (v27)
            operator delete(v27);
          v7 = v34;
        }
        else
        {
          *(_DWORD *)v7 = *v25;
          v7 += 4;
        }
        *((_QWORD *)this + 114) = v7;
        ++v22;
      }
      while (v22 != v24);
      LODWORD(v4) = *((_DWORD *)this + 147);
    }
    else
    {
      v7 = (char *)*((_QWORD *)this + 114);
    }
    *((_DWORD *)this + 147) = v4 - v6;
    v36 = (char *)*((_QWORD *)this + 113);
    if (v36 == v7)
      goto LABEL_85;
    v38 = *((_DWORD *)v7 - 1);
    v37 = v7 - 4;
    v39 = HIWORD(v38);
    *((_QWORD *)this + 114) = v37;
    if (HIWORD(v38))
    {
      LODWORD(v40) = 0;
      v41 = 0;
      v42 = (void (***)(THintCntrConversion *__hidden))((char *)this + 792);
      v43 = (_OWORD *)((char *)this + 800);
      v44 = (_QWORD *)((char *)this + 884);
      v45 = v39;
      do
      {
        v46 = *((_QWORD *)this + 113);
        v47 = *((_QWORD *)this + 114);
        if (v46 == v47)
          goto LABEL_85;
        v48 = *(_DWORD *)(v47 - 4);
        *((_QWORD *)this + 114) = v47 - 4;
        if (v46 == v47 - 4)
          goto LABEL_85;
        v49 = v41 + v40;
        v41 += v40 + v48;
        v50 = *(_DWORD *)(v47 - 8);
        v40 = v50;
        *((_QWORD *)this + 114) = v47 - 8;
        if ((v50 & 0x80000000) != 0)
        {
          if (*((_BYTE *)this + 896))
          {
            v52 = *v42;
          }
          else
          {
            *((_QWORD *)this + 99) = &off_1E61C9728;
            *v43 = 0u;
            *((_OWORD *)this + 51) = 0u;
            *((_OWORD *)this + 52) = 0u;
            *((_OWORD *)this + 53) = 0u;
            *((_OWORD *)this + 54) = 0u;
            *((_BYTE *)this + 880) = 1;
            *v44 = 0;
            v52 = &off_1E61C9728;
            *((_BYTE *)this + 896) = 1;
          }
          ((void (*)(char *, _QWORD, _QWORD, uint64_t, _QWORD))v52[2])((char *)this + 792, (v40 + v41), -(int)v40, 129, v45);
          v41 = 0;
          LODWORD(v40) = 0;
          --v45;
        }
        else
        {
          if (*((_BYTE *)this + 896))
          {
            v51 = *v42;
          }
          else
          {
            *((_QWORD *)this + 99) = &off_1E61C9728;
            *v43 = 0u;
            *((_OWORD *)this + 51) = 0u;
            *((_OWORD *)this + 52) = 0u;
            *((_OWORD *)this + 53) = 0u;
            *((_OWORD *)this + 54) = 0u;
            *((_BYTE *)this + 880) = 1;
            *v44 = 0;
            v51 = &off_1E61C9728;
            *((_BYTE *)this + 896) = 1;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t, _QWORD))v51[2])((char *)this + 792, (v49 + v48), v40, 129, v45);
        }
      }
      while (v45);
      v36 = (char *)*((_QWORD *)this + 113);
      v37 = (char *)*((_QWORD *)this + 114);
    }
    if (v36 == v37)
      goto LABEL_85;
    v53 = HIWORD(*((_DWORD *)v37 - 1));
    *((_QWORD *)this + 114) = v37 - 4;
    if (v53 <= v39)
      v54 = v39;
    else
      v54 = v53;
    v55 = (void (***)(THintCntrConversion *__hidden))((char *)this + 792);
    if (*((_BYTE *)this + 896))
    {
      v56 = *v55;
    }
    else
    {
      *((_QWORD *)this + 99) = &off_1E61C9728;
      *((_OWORD *)this + 50) = 0u;
      *((_OWORD *)this + 51) = 0u;
      *((_OWORD *)this + 52) = 0u;
      *((_OWORD *)this + 53) = 0u;
      *((_OWORD *)this + 54) = 0u;
      *((_BYTE *)this + 880) = 1;
      *(_QWORD *)((char *)this + 884) = 0;
      v56 = &off_1E61C9728;
      *((_BYTE *)this + 896) = 1;
    }
    ((void (*)(char *, uint64_t))v56[5])((char *)this + 792, v54);
    if (v53)
    {
      LODWORD(v57) = 0;
      v58 = 0;
      v59 = (_OWORD *)((char *)this + 800);
      v60 = (_QWORD *)((char *)this + 884);
      while (1)
      {
        v61 = *((_QWORD *)this + 113);
        v62 = *((_QWORD *)this + 114);
        if (v61 == v62)
          break;
        v63 = *(_DWORD *)(v62 - 4);
        *((_QWORD *)this + 114) = v62 - 4;
        if (v61 == v62 - 4)
          break;
        v64 = v58 + v57;
        v58 += v57 + v63;
        v65 = *(_DWORD *)(v62 - 8);
        v57 = v65;
        *((_QWORD *)this + 114) = v62 - 8;
        if ((v65 & 0x80000000) != 0)
        {
          if (*((_BYTE *)this + 896))
          {
            v67 = *v55;
          }
          else
          {
            *((_QWORD *)this + 99) = &off_1E61C9728;
            *v59 = 0u;
            *((_OWORD *)this + 51) = 0u;
            *((_OWORD *)this + 52) = 0u;
            *((_OWORD *)this + 53) = 0u;
            *((_OWORD *)this + 54) = 0u;
            *((_BYTE *)this + 880) = 1;
            *v60 = 0;
            v67 = &off_1E61C9728;
            *((_BYTE *)this + 896) = 1;
          }
          ((void (*)(char *, _QWORD, _QWORD, uint64_t, _QWORD))v67[2])((char *)this + 792, (v57 + v58), -(int)v57, 131, (unsigned __int16)v53);
          v58 = 0;
          LODWORD(v57) = 0;
          LOWORD(v53) = v53 - 1;
        }
        else
        {
          if (*((_BYTE *)this + 896))
          {
            v66 = *v55;
          }
          else
          {
            *((_QWORD *)this + 99) = &off_1E61C9728;
            *v59 = 0u;
            *((_OWORD *)this + 51) = 0u;
            *((_OWORD *)this + 52) = 0u;
            *((_OWORD *)this + 53) = 0u;
            *((_OWORD *)this + 54) = 0u;
            *((_BYTE *)this + 880) = 1;
            *v60 = 0;
            v66 = &off_1E61C9728;
            *((_BYTE *)this + 896) = 1;
          }
          ((void (*)(char *, _QWORD, uint64_t, uint64_t, _QWORD))v66[2])((char *)this + 792, (v64 + v63), v57, 131, (unsigned __int16)v53);
        }
        if (!(_WORD)v53)
          return;
      }
LABEL_85:
      __break(1u);
LABEL_86:
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
  }
}

void TType1ToType2CharStringConversionContext::FlattenSubroutine(TType1ToType2CharStringConversionContext *this, __int16 a2, int a3, BOOL *a4)
{
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  const unsigned __int8 *v17;
  unint64_t v18;
  const unsigned __int8 *v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  _WORD *exception;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;

  LOWORD(v33) = -21846;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v8 = (*(uint64_t (**)(_QWORD, unint64_t *, unsigned int *, unint64_t *))(**((_QWORD **)this + 55)
                                                                                                 + 136))(*((_QWORD *)this + 55), &v31, &v33, &v32);
  if (v8)
    v9 = v31 == 0;
  else
    v9 = 1;
  if (v9)
    goto LABEL_22;
  v10 = v8;
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 55) + 144))(*((_QWORD *)this + 55));
  v12 = (__int16)v33;
  v13 = v12 + v12 * v11;
  v14 = v32;
  v15 = v31 + v13;
  v16 = v15 < v31 || v15 > v32;
  if (v16 || (__int16)v33 * a3 < 0)
    goto LABEL_22;
  v17 = (const unsigned __int8 *)(v31 + (__int16)v33 * a3);
  v18 = v31 + v13;
  v19 = &v17[2 * (__int16)v33];
  v20 = v19 < v17 || (unint64_t)v19 > v18;
  if (v20
    || ((v21 = BytesToCard(v17, (__int16)v33),
         v22 = BytesToCard(&v17[v12], v12),
         v23 = v10 + v21 - 1,
         v24 = v22 - v21,
         v25 = v23 + v24,
         v10 <= v23)
      ? (v26 = v25 >= v23)
      : (v26 = 0),
        v26 ? (v27 = v25 > v14) : (v27 = 1),
        v27))
  {
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v28 = *((_QWORD *)this + 58);
  v29 = *((_DWORD *)this + 142);
  *((_DWORD *)this + 142) = v24;
  *((_QWORD *)this + 58) = v23;
  TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString(this, (unsigned __int16)(a2 + 1), a4);
  *((_QWORD *)this + 58) = v28;
  *((_DWORD *)this + 142) = v29;
}

void *TType1ToType2CharStringConversionContext::WriteHintMask(TType1ToType2CharStringConversionContext *this)
{
  _QWORD *v2;
  void (**v3)(THintCntrConversion *__hidden);
  void *result;
  unsigned int v5;
  __int16 v6;
  unsigned __int8 v7[8];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  *(_QWORD *)v7 = 0;
  v2 = (_QWORD *)((char *)this + 792);
  if (*((_BYTE *)this + 896))
  {
    v3 = (void (**)(THintCntrConversion *__hidden))*v2;
  }
  else
  {
    v3 = &off_1E61C9728;
    *((_QWORD *)this + 99) = &off_1E61C9728;
    *((_OWORD *)this + 50) = 0u;
    *((_OWORD *)this + 51) = 0u;
    *((_OWORD *)this + 52) = 0u;
    *((_OWORD *)this + 53) = 0u;
    *((_OWORD *)this + 54) = 0u;
    *((_BYTE *)this + 880) = 1;
    *(_QWORD *)((char *)v2 + 92) = 0;
    *((_BYTE *)this + 896) = 1;
  }
  result = (void *)((uint64_t (*)(void))v3[8])();
  v5 = result;
  if ((_DWORD)result)
  {
    HIBYTE(v6) = 19;
    TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v6 + 1, 1u);
    return TCharStringConversionContext::WriteData(this, v7, v5);
  }
  return result;
}

void THintCntrConversion::~THintCntrConversion(THintCntrConversion *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E61C9728;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  THintCntrConversion::~THintCntrConversion(this);
  JUMPOUT(0x1B5E0CD38);
}

void THintCntrConversion::Finalize(THintCntrConversion *this)
{
  unsigned __int16 v2;
  signed __int16 v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int16 v9;
  __int16 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  int v22;
  int v23;
  int *v24;
  int v25;
  int v26;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  __int16 v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned __int16 v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int16 v60;
  __int16 v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int *v72;
  int v73;
  int v74;
  int *v75;
  int v76;
  int v77;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  int v97;
  int v98;
  __int16 v99;
  int v100;
  uint64_t v101;
  int v102;
  unsigned __int16 v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  __int16 v109;
  unsigned __int16 v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;

  if (*((_BYTE *)this + 88))
  {
    if (!*((_WORD *)this + 40))
    {
LABEL_140:
      *((_BYTE *)this + 88) = 0;
      return;
    }
    v2 = 0;
    v3 = 0;
    v4 = *((_QWORD *)this + 1);
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v4) >> 3) <= v3)
        goto LABEL_142;
      if (*(_WORD *)(v4 + 24 * v3 + 8) == 1)
        ++v2;
      ++v3;
    }
    while (*((unsigned __int16 *)this + 40) > v3);
    v6 = *((_QWORD *)this + 4);
    v7 = *((_QWORD *)this + 5);
    v5 = (char **)((char *)this + 32);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) < v2)
    {
      std::vector<HintCntrValue>::resize(v5, v2);
      v6 = *((_QWORD *)this + 4);
      v7 = *((_QWORD *)this + 5);
    }
    if (v6 == v7)
    {
      v9 = 0;
    }
    else
    {
      v8 = *((unsigned __int16 *)this + 40);
      if (*((_WORD *)this + 40))
      {
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *((_QWORD *)this + 1);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v11) >> 3) <= v10)
            goto LABEL_142;
          v12 = (__int128 *)(v11 + 24 * v10);
          if (*((_WORD *)v12 + 4) == 1)
          {
            v13 = *((_QWORD *)this + 4);
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v13) >> 3) <= v9)
              goto LABEL_142;
            v14 = v13 + 24 * v9;
            v15 = *v12;
            *(_QWORD *)(v14 + 16) = *((_QWORD *)v12 + 2);
            *(_OWORD *)v14 = v15;
            ++v9;
            v8 = *((unsigned __int16 *)this + 40);
          }
          if (v8 <= ++v10)
          {
            v16 = (__int16)(v9 - 1);
            if (v16 < 1)
              goto LABEL_40;
            v17 = (__int16)(v9 - 1);
            while (1)
            {
              v18 = (unsigned __int16)v17 - 1;
              v19 = *((_QWORD *)this + 4);
              v20 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v19) >> 3);
              if (v20 <= v18 || v20 <= (unsigned __int16)v17)
                goto LABEL_142;
              v21 = (int *)(v19 + 24 * v18);
              v22 = *v21;
              v23 = v21[1];
              v24 = (int *)(v19 + 24 * (unsigned __int16)v17);
              v25 = *v24;
              v26 = v24[1];
              v116 = *(_OWORD *)(v24 + 2);
              if (*v21 != *v24 || v23 != v26 || v22 == -2147418112)
              {
                if (v22 <= v25)
                {
                  --v17;
                }
                else
                {
                  *v24 = v22;
                  v24[1] = v23;
                  *(_OWORD *)(v24 + 2) = *(_OWORD *)(v21 + 2);
                  v29 = *((_QWORD *)this + 4);
                  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v29) >> 3) <= v18)
                    goto LABEL_142;
                  v30 = v29 + 24 * v18;
                  *(_DWORD *)v30 = v25;
                  *(_DWORD *)(v30 + 4) = v26;
                  *(_OWORD *)(v30 + 8) = v116;
                  if (v16 > (__int16)v17)
                    ++v17;
                }
              }
              else
              {
                v31 = v19 + 24 * v18;
                v32 = v19 + 24 * (unsigned __int16)v17;
                *(int8x8_t *)(v32 + 12) = vorr_s8(*(int8x8_t *)(v32 + 12), *(int8x8_t *)(v31 + 12));
                *(_DWORD *)(v32 + 20) |= *(_DWORD *)(v31 + 20);
                *v21 = -2147418112;
              }
              if ((__int16)v17 <= 0)
                goto LABEL_40;
            }
          }
        }
      }
      v9 = 0;
LABEL_40:
      v33 = (int *)*((_QWORD *)this + 4);
      v34 = (int *)*((_QWORD *)this + 5);
      if (v34 == v33)
        goto LABEL_142;
      v35 = ((char *)v34 - (char *)v33) / 24;
      if (*v33 < -2147418111)
      {
        if ((__int16)v9 >= 2)
        {
          if (v35 <= 1)
            v36 = 1;
          else
            v36 = ((char *)v34 - (char *)v33) / 24;
          v37 = 1;
          v38 = 6;
          while (v36 != v37)
          {
            if (v33[v38] > -2147418112)
              goto LABEL_52;
            ++v37;
            v38 += 6;
            if (v9 == v37)
              goto LABEL_57;
          }
          goto LABEL_142;
        }
        LOWORD(v37) = 1;
LABEL_52:
        if ((__int16)v37 < (__int16)v9)
        {
          v39 = 0;
          v40 = 0;
          v41 = (unsigned __int16)v37;
          v42 = v9 - (unint64_t)(unsigned __int16)v37;
          v43 = 24 * (unsigned __int16)v37;
          while (1)
          {
            v44 = *((_QWORD *)this + 4);
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v44) >> 3) <= v41 + v40)
              goto LABEL_142;
            v45 = v44 + v39;
            v46 = *(_OWORD *)(v45 + v43);
            *(_QWORD *)(v45 + 16) = *(_QWORD *)(v45 + v43 + 16);
            *(_OWORD *)v45 = v46;
            ++v40;
            v39 += 24;
            if (v42 == v40)
            {
              v33 = (int *)*((_QWORD *)this + 4);
              v34 = (int *)*((_QWORD *)this + 5);
              v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3);
              v9 = v40;
              goto LABEL_58;
            }
          }
        }
LABEL_57:
        v9 = 0;
      }
LABEL_58:
      if (v34 == v33)
        goto LABEL_142;
      v47 = *((_DWORD *)this + 24);
      v48 = v47 + *v33;
      *v33 = v48;
      if (v9 >= 2u)
      {
        v49 = 0;
        v50 = 0;
        while (v35 > v50)
        {
          v51 = v49 + 1;
          if (v35 <= v51)
            break;
          v52 = 6 * v51;
          v53 = v33[v52] + v47;
          v33[v52] = v53 - (v33[6 * v50++ + 1] + v48);
          v49 = v50;
          v48 = v53;
          if (v9 - 1 <= v50)
            goto LABEL_64;
        }
        goto LABEL_142;
      }
    }
LABEL_64:
    if (*((_WORD *)this + 40))
    {
      v54 = 0;
      v55 = 0;
      v56 = *((_QWORD *)this + 1);
      while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v56) >> 3) > v55)
      {
        if (*(_WORD *)(v56 + 24 * v55 + 8) == 3)
          ++v54;
        if (*((unsigned __int16 *)this + 40) <= ++v55)
          goto LABEL_72;
      }
      goto LABEL_142;
    }
    v54 = 0;
LABEL_72:
    v57 = *((_QWORD *)this + 7);
    v58 = *((_QWORD *)this + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 3) < v54)
    {
      std::vector<HintCntrValue>::resize((char **)this + 7, v54);
      v57 = *((_QWORD *)this + 7);
      v58 = *((_QWORD *)this + 8);
    }
    if (v57 == v58)
    {
      v60 = 0;
LABEL_128:
      v103 = 0;
      if (v9)
      {
        do
        {
          v104 = *((_QWORD *)this + 4);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v104) >> 3) <= (__int16)v103)
            goto LABEL_142;
          v105 = *((_QWORD *)this + 1);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v105) >> 3) <= v103)
            goto LABEL_142;
          v106 = (__int128 *)(v104 + 24 * (__int16)v103);
          v107 = v105 + 24 * v103;
          v108 = *v106;
          *(_QWORD *)(v107 + 16) = *((_QWORD *)v106 + 2);
          *(_OWORD *)v107 = v108;
        }
        while (v9 > (__int16)++v103);
      }
      if (v60)
      {
        v109 = 0;
        v110 = v103;
        while (1)
        {
          v111 = *((_QWORD *)this + 7);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v111) >> 3) <= v109)
            goto LABEL_142;
          v112 = *((_QWORD *)this + 1);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v112) >> 3) <= v110)
            goto LABEL_142;
          v113 = (__int128 *)(v111 + 24 * v109);
          v114 = v112 + 24 * v110;
          v115 = *v113;
          *(_QWORD *)(v114 + 16) = *((_QWORD *)v113 + 2);
          *(_OWORD *)v114 = v115;
          ++v110;
          if (v60 <= ++v109)
            goto LABEL_139;
        }
      }
      v110 = v103;
LABEL_139:
      *((_WORD *)this + 40) = v110;
      *((_WORD *)this + 41) = 2 * v9;
      *((_WORD *)this + 42) = 2 * v60;
      goto LABEL_140;
    }
    v59 = *((unsigned __int16 *)this + 40);
    if (*((_WORD *)this + 40))
    {
      v60 = 0;
      v61 = 0;
      while (1)
      {
        v62 = *((_QWORD *)this + 1);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v62) >> 3) <= v61)
          goto LABEL_142;
        v63 = (__int128 *)(v62 + 24 * v61);
        if (*((_WORD *)v63 + 4) == 3)
        {
          v64 = *((_QWORD *)this + 7);
          if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v64) >> 3) <= v60)
            goto LABEL_142;
          v65 = v64 + 24 * v60;
          v66 = *v63;
          *(_QWORD *)(v65 + 16) = *((_QWORD *)v63 + 2);
          *(_OWORD *)v65 = v66;
          ++v60;
          v59 = *((unsigned __int16 *)this + 40);
        }
        if (v59 <= ++v61)
        {
          v67 = (__int16)(v60 - 1);
          if (v67 < 1)
            goto LABEL_104;
          v68 = (__int16)(v60 - 1);
          while (1)
          {
            v69 = (unsigned __int16)v68 - 1;
            v70 = *((_QWORD *)this + 7);
            v71 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v70) >> 3);
            if (v71 <= v69 || v71 <= (unsigned __int16)v68)
              goto LABEL_142;
            v72 = (int *)(v70 + 24 * v69);
            v73 = *v72;
            v74 = v72[1];
            v75 = (int *)(v70 + 24 * (unsigned __int16)v68);
            v76 = *v75;
            v77 = v75[1];
            v117 = *(_OWORD *)(v75 + 2);
            if (*v72 != *v75 || v74 != v77 || v73 == -2147418112)
            {
              if (v73 <= v76)
              {
                --v68;
              }
              else
              {
                *v75 = v73;
                v75[1] = v74;
                *(_OWORD *)(v75 + 2) = *(_OWORD *)(v72 + 2);
                v80 = *((_QWORD *)this + 7);
                if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v80) >> 3) <= v69)
                  goto LABEL_142;
                v81 = v80 + 24 * v69;
                *(_DWORD *)v81 = v76;
                *(_DWORD *)(v81 + 4) = v77;
                *(_OWORD *)(v81 + 8) = v117;
                if (v67 > (__int16)v68)
                  ++v68;
              }
            }
            else
            {
              v82 = v70 + 24 * v69;
              v83 = v70 + 24 * (unsigned __int16)v68;
              *(int8x8_t *)(v83 + 12) = vorr_s8(*(int8x8_t *)(v83 + 12), *(int8x8_t *)(v82 + 12));
              *(_DWORD *)(v83 + 20) |= *(_DWORD *)(v82 + 20);
              *v72 = -2147418112;
            }
            if ((__int16)v68 <= 0)
              goto LABEL_104;
          }
        }
      }
    }
    v60 = 0;
LABEL_104:
    v84 = (int *)*((_QWORD *)this + 7);
    v85 = (int *)*((_QWORD *)this + 8);
    if (v85 != v84)
    {
      v86 = ((char *)v85 - (char *)v84) / 24;
      if (*v84 < -2147418111)
      {
        if ((__int16)v60 >= 2)
        {
          if (v86 <= 1)
            v87 = 1;
          else
            v87 = ((char *)v85 - (char *)v84) / 24;
          v88 = 1;
          v89 = 6;
          while (v87 != v88)
          {
            if (v84[v89] > -2147418112)
              goto LABEL_116;
            ++v88;
            v89 += 6;
            if (v60 == v88)
              goto LABEL_121;
          }
          goto LABEL_142;
        }
        LOWORD(v88) = 1;
LABEL_116:
        if ((__int16)v88 < (__int16)v60)
        {
          v90 = 0;
          v91 = 0;
          v92 = v60 - (unint64_t)(unsigned __int16)v88;
          while (1)
          {
            v93 = *((_QWORD *)this + 7);
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v93) >> 3) <= (unint64_t)(unsigned __int16)v88
                                                                              + v91)
              goto LABEL_142;
            v94 = v93 + v90;
            v95 = *(_OWORD *)(v94 + 24 * (unsigned __int16)v88);
            *(_QWORD *)(v94 + 16) = *(_QWORD *)(v94 + 24 * (unsigned __int16)v88 + 16);
            *(_OWORD *)v94 = v95;
            ++v91;
            v90 += 24;
            if (v92 == v91)
            {
              v84 = (int *)*((_QWORD *)this + 7);
              v85 = (int *)*((_QWORD *)this + 8);
              v86 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85 - (char *)v84) >> 3);
              v60 = v91;
              goto LABEL_122;
            }
          }
        }
LABEL_121:
        v60 = 0;
      }
LABEL_122:
      if (v85 != v84)
      {
        v96 = *((_DWORD *)this + 23);
        v97 = v96 + *v84;
        *v84 = v97;
        if (v60 >= 2u)
        {
          v98 = 0;
          v99 = 0;
          while (v86 > v99)
          {
            v100 = v98 + 1;
            if (v86 <= v100)
              break;
            v101 = 6 * v100;
            v102 = v84[v101];
            v84[v101] = v102 + v96 - (v84[6 * v99++ + 1] + v97);
            v98 = v99;
            v97 = v102 + v96;
            if (v60 - 1 <= v99)
              goto LABEL_128;
          }
          goto LABEL_142;
        }
        goto LABEL_128;
      }
    }
LABEL_142:
    __break(1u);
  }
}

uint64_t THintCntrConversion::GetNumOfArguments(THintCntrConversion *this, int a2)
{
  (*(void (**)(THintCntrConversion *))(*(_QWORD *)this + 80))(this);
  if (a2 == 3)
    return *((unsigned __int16 *)this + 42);
  if (a2 == 1)
    return *((unsigned __int16 *)this + 41);
  return 0;
}

uint64_t THintCntrConversion::GetArgument(THintCntrConversion *this, int a2, int *a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  result = (*(uint64_t (**)(THintCntrConversion *))(*(_QWORD *)this + 80))(this);
  if (!a2)
    return 0;
  v9 = *((unsigned __int16 *)this + 40);
  if (!*((_WORD *)this + 40))
    return 0;
  v10 = 0;
  v11 = *((_QWORD *)this + 1);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v11) >> 3);
  v13 = v11 + 4;
  while (v12)
  {
    if (*(unsigned __int16 *)(v13 + 4) == a4)
    {
      if (v10 == (unsigned __int16)(a2 - 1))
      {
        v13 -= 4;
LABEL_12:
        *a3 = *(_DWORD *)v13;
        return 1;
      }
      if (v10 == (unsigned __int16)(a2 - 2))
        goto LABEL_12;
      v10 += 2;
    }
    v13 += 24;
    --v12;
    if (!--v9)
      return 0;
  }
  __break(1u);
  return result;
}

void std::vector<HintCntrValue>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  char *v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v18 = &v4[24 * a2];
    goto LABEL_18;
  }
  v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
  {
    bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
    v18 = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
LABEL_18:
    a1[1] = v18;
    return;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v9;
  if (v10 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:fe180100]();
  v11 = 3 * v10;
  v12 = (char *)operator new(24 * v10);
  v13 = &v12[24 * v5];
  v14 = &v12[8 * v11];
  v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
  bzero(v13, v15);
  v16 = &v13[v15];
  if (v3 != v4)
  {
    do
    {
      v17 = *(_OWORD *)(v3 - 24);
      *((_QWORD *)v13 - 1) = *((_QWORD *)v3 - 1);
      *(_OWORD *)(v13 - 24) = v17;
      v13 -= 24;
      v3 -= 24;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v3)
    operator delete(v3);
}

uint64_t THintCntrConversion::GetMaskDataBytesForHints(THintCntrConversion *this, unsigned __int8 *a2, unsigned int a3)
{
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _WORD *exception;

  (*(void (**)(THintCntrConversion *))(*(_QWORD *)this + 80))(this);
  if (a3 > 0x3F || *((unsigned __int16 *)this + 40) >= 0x61u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  if (a2)
  {
    LOWORD(v6) = (_WORD)a2;
    if (*((_WORD *)this + 40))
    {
      v7 = 0;
      v8 = *((_QWORD *)this + 1);
      v6 = a2;
      do
      {
        v9 = 4 * (a3 >> 5) + 12;
        v10 = 8;
        v11 = v7;
        while (1)
        {
          v12 = *((unsigned __int16 *)this + 40);
          if (v11 >= v12)
            break;
          if ((*(_DWORD *)(v8 + v9) & (1 << ~(_BYTE)a3)) != 0)
            *v6 |= 1 << (v10 - 1);
          ++v11;
          v9 += 24;
          if (!--v10)
          {
            v12 = *((unsigned __int16 *)this + 40);
            break;
          }
        }
        v8 += 192;
        ++v6;
        v7 = (unsigned __int16)(v7 + 8);
      }
      while (v7 < v12);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  return (unsigned __int16)((_WORD)v6 - (_WORD)a2);
}

uint64_t THintCntrConversion::GetMaskDataBytesForCounters(THintCntrConversion *this, unsigned __int8 *a2, unsigned int a3)
{
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _WORD *exception;

  (*(void (**)(THintCntrConversion *))(*(_QWORD *)this + 80))(this);
  if (a3 > 0x3F || *((unsigned __int16 *)this + 40) >= 0x61u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  if (a2)
  {
    LOWORD(v6) = (_WORD)a2;
    if (*((_WORD *)this + 40))
    {
      v7 = 0;
      v8 = *((_QWORD *)this + 1);
      v6 = a2;
      do
      {
        v9 = 7;
        v10 = 20;
        v11 = v7;
        while (1)
        {
          v12 = *((unsigned __int16 *)this + 40);
          if (v11 >= v12)
            break;
          if ((*(_DWORD *)(v8 + v10) & (0x80000000 >> a3)) != 0)
            *v6 |= 1 << v9;
          ++v11;
          --v9;
          v10 += 24;
          if (v10 == 212)
          {
            v12 = *((unsigned __int16 *)this + 40);
            break;
          }
        }
        v8 += 192;
        ++v6;
        v7 = (unsigned __int16)(v7 + 8);
      }
      while (v7 < v12);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  return (unsigned __int16)((_WORD)v6 - (_WORD)a2);
}

void THintCntrConversion::AddValue(THintCntrConversion *this, int a2, int a3, char a4, unsigned int a5)
{
  __int16 v7;
  BOOL v8;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _WORD *exception;

  if (a5 >= 0x40)
    goto LABEL_13;
  v7 = a4 & 0xF;
  if (*((_BYTE *)this + 88))
    v8 = (a4 & 0xD | 2) == 3;
  else
    v8 = 0;
  if (v8)
  {
    std::vector<HintCntrValue>::resize((char **)this + 1, *((unsigned __int16 *)this + 40) + 1);
    v12 = *((unsigned __int16 *)this + 40);
    v13 = *((_QWORD *)this + 1);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 2) - v13) >> 3) > v12)
    {
      v14 = v13 + 24 * *((unsigned __int16 *)this + 40);
      *(_DWORD *)v14 = a2;
      *(_DWORD *)(v14 + 4) = a3;
      *(_WORD *)(v14 + 8) = v7;
      *(_DWORD *)(v14 + 12) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      if (a4 < 0)
      {
        v15 = 0x80000000 >> a5;
      }
      else
      {
        v15 = 0;
        *(_DWORD *)(v13 + 24 * v12 + 4 * (a5 >> 5) + 12) = 1 << ~(_BYTE)a5;
      }
      *(_DWORD *)(v13 + 24 * v12 + 20) = v15;
      *((_WORD *)this + 40) = v12 + 1;
      return;
    }
    __break(1u);
LABEL_13:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
}

void TFlexConversion::~TFlexConversion(TFlexConversion *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E61C9790;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E61C9790;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TFlexConversion::Finalize(uint64_t this)
{
  __int128 v1;
  int32x2_t *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int16 v5;
  int v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  int32x2_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 36) && *(unsigned __int16 *)(this + 32) >= 7u)
  {
    v21 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v1 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19 = v1;
    v20 = v1;
    v18 = v1;
    v2 = *(int32x2_t **)(this + 8);
    v3 = *(_QWORD *)(this + 16) - (_QWORD)v2;
    if ((unint64_t)v3 > 0x38)
    {
      v4 = v3 >> 3;
      v22 = v2[7];
      v5 = 6;
      do
      {
        if (v4 <= v5)
          goto LABEL_35;
        v6 = v5;
        *((int32x2_t *)&v18 + v5) = vsub_s32(*(int32x2_t *)((char *)&v18 + 8 * v5 + 8), v2[v5]);
        --v5;
      }
      while (v6);
      v7 = 0;
      v2[1] = vadd_s32(v2[1], *v2);
      v8 = 1;
      do
      {
        v9 = *(_QWORD *)(this + 8);
        v10 = (*(_QWORD *)(this + 16) - v9) >> 3;
        if (v10 <= v8 || v10 <= v7)
          goto LABEL_35;
        *(_QWORD *)(v9 + 8 * v7++) = *(_QWORD *)(v9 + 8 * v8++);
        v11 = *(unsigned __int16 *)(this + 32);
      }
      while (v8 < v11);
      *(_WORD *)(this + 32) = v11 - 1;
      if (HIDWORD(v21) == (DWORD1(v19) == (DWORD1(v18) == v22.i32[1]))
        && HIDWORD(v20) == (HIDWORD(v19) == DWORD1(v20))
        && *(unsigned __int16 *)(this + 42) << 16 == 3276800)
      {
        *(_WORD *)(this + 44) = 3106;
        v12 = 7;
LABEL_30:
        *(_WORD *)(this + 34) = v12;
LABEL_33:
        *(_BYTE *)(this + 36) = 0;
        return this;
      }
      if (DWORD1(v18) != v22.i32[1])
        goto LABEL_31;
      if (HIDWORD(v20) == (HIDWORD(v19) == DWORD1(v20)) && *(unsigned __int16 *)(this + 42) << 16 == 3276800)
      {
        *(_WORD *)(this + 44) = 3108;
        v12 = 9;
        goto LABEL_30;
      }
      if ((_DWORD)v18 == v22.i32[0] && *(unsigned __int16 *)(this + 42) << 16 == 3276800)
      {
        *(_WORD *)(this + 44) = 3109;
        v13 = *(_QWORD *)(this + 8);
        if ((unint64_t)(*(_QWORD *)(this + 16) - v13) > 0x28)
        {
          v15 = *(_DWORD *)(v13 + 40);
          v14 = *(_DWORD *)(v13 + 44);
          if (v15 < 0)
            v15 = -v15;
          if (v14 >= 0)
            v16 = *(_DWORD *)(v13 + 44);
          else
            v16 = -v14;
          if (v15 < v16)
            *(_DWORD *)(v13 + 40) = v14;
          v12 = 11;
          goto LABEL_30;
        }
      }
      else
      {
LABEL_31:
        *(_WORD *)(this + 44) = 3107;
        *(_WORD *)(this + 34) = 13;
        v17 = *(_QWORD *)(this + 8);
        if ((unint64_t)(*(_QWORD *)(this + 16) - v17) > 0x30)
        {
          *(_QWORD *)(v17 + 48) = *(unsigned int *)(this + 40);
          goto LABEL_33;
        }
      }
    }
LABEL_35:
    __break(1u);
  }
  return this;
}

uint64_t TFlexConversion::GetNumOfArguments(TFlexConversion *this)
{
  (*(void (**)(TFlexConversion *))(*(_QWORD *)this + 64))(this);
  return *((unsigned __int16 *)this + 17);
}

uint64_t TFlexConversion::GetArgument(TFlexConversion *this, int a2, int *a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned __int16 *v8;
  int v9;
  unsigned int v10;
  unsigned __int16 i;
  uint64_t v12;
  int *v13;
  uint64_t v14;

  result = (*(uint64_t (**)(TFlexConversion *))(*(_QWORD *)this + 64))(this);
  if (!a2)
    return 0;
  v7 = *((unsigned __int16 *)this + 22) - 3106;
  v8 = (unsigned __int16 *)(v7 > 2 ? &index_flex1 : *(&off_1E61C9828 + (__int16)v7));
  v9 = v8[(unsigned __int16)(a2 - 1)];
  if (v9 == 0xFFFF || !*((_WORD *)this + 16))
    return 0;
  v10 = 0;
  for (i = 0; v9 != i; i += 2)
  {
    if (v9 == (i | 1))
    {
      v14 = *((_QWORD *)this + 1);
      if (v10 < (unint64_t)((*((_QWORD *)this + 2) - v14) >> 3))
      {
        v13 = (int *)(v14 + 8 * v10 + 4);
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    if (++v10 >= *((unsigned __int16 *)this + 16))
      return 0;
  }
  v12 = *((_QWORD *)this + 1);
  if (v10 < (unint64_t)((*((_QWORD *)this + 2) - v12) >> 3))
  {
    v13 = (int *)(v12 + 8 * v10);
LABEL_16:
    *a3 = *v13;
    return 1;
  }
LABEL_17:
  __break(1u);
  return result;
}

void TFlexConversion::AddValue(TFlexConversion *this, int a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;

  v6 = *((unsigned __int16 *)this + 16);
  v7 = v6 + 1;
  v9 = (char *)*((_QWORD *)this + 1);
  v8 = (char *)*((_QWORD *)this + 2);
  v10 = (v8 - v9) >> 3;
  if (v10 > v6)
  {
    v11 = (char *)*((_QWORD *)this + 2);
    if (v7 >= v10)
      goto LABEL_18;
    v11 = &v9[8 * v7];
    goto LABEL_17;
  }
  v12 = v7 - v10;
  v13 = *((_QWORD *)this + 3);
  if (v7 - v10 <= (v13 - (uint64_t)v8) >> 3)
  {
    bzero(*((void **)this + 2), 8 * v12);
    v11 = &v8[8 * v12];
LABEL_17:
    *((_QWORD *)this + 2) = v11;
    goto LABEL_18;
  }
  v14 = v13 - (_QWORD)v9;
  if (v14 >> 2 > v7)
    v7 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v7;
  if (v15 >> 61)
LABEL_21:
    std::__throw_bad_array_new_length[abi:fe180100]();
  v16 = (char *)operator new(8 * v15);
  v17 = &v16[8 * v10];
  v18 = &v16[8 * v15];
  bzero(v17, 8 * v12);
  v11 = &v17[8 * v12];
  if (v8 != v9)
  {
    do
    {
      v19 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v17 - 1) = v19;
      v17 -= 8;
    }
    while (v8 != v9);
    v8 = v9;
  }
  *((_QWORD *)this + 1) = v17;
  *((_QWORD *)this + 2) = v11;
  *((_QWORD *)this + 3) = v18;
  if (v8)
  {
    operator delete(v8);
    v11 = (char *)*((_QWORD *)this + 2);
  }
LABEL_18:
  v20 = *((unsigned __int16 *)this + 16);
  v21 = *((_QWORD *)this + 1);
  if (v20 >= (uint64_t)&v11[-v21] >> 3)
  {
    __break(1u);
    goto LABEL_21;
  }
  v22 = (_DWORD *)(v21 + 8 * v20);
  *v22 = a2;
  v22[1] = a3;
  *((_WORD *)this + 16) = v20 + 1;
}

uint64_t TFlexConversion::AddFlexDepth(TFlexConversion *this, int a2, int a3, int a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(TFlexConversion *))(*(_QWORD *)this + 16))(this);
  *((_DWORD *)this + 10) = a4;
  return result;
}

uint64_t THintCntrConversion::SetSidebearing(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 92) = a2;
  *(_DWORD *)(this + 96) = a3;
  return this;
}

uint64_t THintCntrConversion::SetNumOfCounterGroups(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 86) = a2;
  return this;
}

uint64_t THintCntrConversion::GetNumOfCounterGroups(THintCntrConversion *this)
{
  return *((unsigned __int16 *)this + 43);
}

uint64_t TFlexConversion::GetFlexDepth(TFlexConversion *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t TFlexConversion::GetOpcode(TFlexConversion *this)
{
  return *((unsigned __int16 *)this + 22);
}

void std::vector<int>::__throw_out_of_range[abi:fe180100]()
{
  std::__throw_out_of_range[abi:fe180100]("vector");
}

void std::__throw_out_of_range[abi:fe180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:fe180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6175D18, MEMORY[0x1E0DE42E0]);
}

void sub_1B09EB840(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:fe180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

double fnt_SVTCA_0(uint64_t a1)
{
  double result;

  result = 2.00000048;
  *(_QWORD *)(a1 + 24) = 0x4000000040000000;
  *(_QWORD *)(a1 + 120) = fnt_YMovePoint;
  *(_QWORD *)(a1 + 128) = fnt_YProject;
  *(_QWORD *)(a1 + 136) = fnt_YProject;
  *(_WORD *)(a1 + 360) = 0x4000;
  *(_WORD *)(a1 + 364) = 256;
  return result;
}

double fnt_SVTCA_1(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0x400000004000;
  *(_QWORD *)(a1 + 24) = 0x400000004000;
  *(_QWORD *)(a1 + 120) = fnt_XMovePoint;
  *(_QWORD *)(a1 + 128) = fnt_XProject;
  *(_QWORD *)(a1 + 136) = fnt_XProject;
  *(_WORD *)(a1 + 360) = 0x4000;
  *(_WORD *)(a1 + 364) = 256;
  return result;
}

uint64_t fnt_SPVTCA(uint64_t result)
{
  __int16 *v1;
  __int16 v2;
  __int16 v3;
  void *v4;
  __int16 v5;

  v1 = (__int16 *)(result + 30);
  if ((*(_BYTE *)(result + 363) & 1) != 0)
    v2 = 0x4000;
  else
    v2 = 0;
  if ((*(_BYTE *)(result + 363) & 1) != 0)
    v3 = 0;
  else
    v3 = 0x4000;
  if ((*(_BYTE *)(result + 363) & 1) != 0)
    v4 = fnt_XProject;
  else
    v4 = fnt_YProject;
  if ((*(_BYTE *)(result + 363) & 1) != 0)
    v1 = (__int16 *)(result + 28);
  v5 = *v1;
  *(_WORD *)(result + 24) = v2;
  *(_WORD *)(result + 26) = v3;
  *(_QWORD *)(result + 128) = v4;
  *(_WORD *)(result + 360) = v5;
  if ((unsigned __int16)(v5 + 1023) <= 0x7FEu)
  {
    *(_WORD *)(result + 360) = v5 & 0x8000 | 0x4000;
    *(_BYTE *)(result + 365) = 0;
  }
  *(_QWORD *)(result + 120) = fnt_MovePoint;
  *(_QWORD *)(result + 136) = v4;
  *(_BYTE *)(result + 364) = 0;
  return result;
}

uint64_t fnt_SFVTCA(uint64_t result)
{
  __int16 v1;
  uint64_t v2;
  __int16 v3;

  v1 = (*(_BYTE *)(result + 363) & 1) << 14;
  v2 = 24;
  if ((*(_BYTE *)(result + 363) & 1) == 0)
    v2 = 26;
  v3 = *(_WORD *)(result + v2);
  *(_WORD *)(result + 28) = v1;
  *(_WORD *)(result + 30) = v1 ^ 0x4000;
  *(_WORD *)(result + 360) = v3;
  if ((unsigned __int16)(v3 + 1023) <= 0x7FEu)
  {
    *(_WORD *)(result + 360) = v3 & 0x8000 | 0x4000;
    *(_BYTE *)(result + 365) = 0;
  }
  *(_QWORD *)(result + 120) = fnt_MovePoint;
  return result;
}

uint64_t fnt_SPVTL(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t result;
  FILE **v11;
  FILE *v12;
  uint64_t v13;
  _WORD *exception;

  if (!*(_QWORD *)(a1 + 16) || !*(_QWORD *)(a1 + 8))
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_14;
  }
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  v3 = v4;
  *(_QWORD *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned int *)(v5 - 4);
  *(_QWORD *)(a1 + 56) = v5 - 4;
  v7 = *(int **)(a1 + 16);
  CHECK_ELEMENTPTR(a1, v7);
  if ((v4 & 0x80000000) != 0 || v7[28] <= (int)v3)
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_13:
    fprintf(v12, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_14:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v13)
      fprintf(*v11, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    fputc(10, *v11);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v6 & 0x80000000) != 0 || *(_DWORD *)(v8 + 112) <= (int)v6)
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_13;
  }
  fnt_Normalize(a1, *(_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * v6) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 4 * v3), *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v6) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 4 * v3), (_WORD *)(a1 + 24));
  *(_BYTE *)(a1 + 364) = 0;
  if ((*(_BYTE *)(a1 + 363) & 1) != 0)
  {
    v9 = *(_WORD *)(a1 + 26);
    *(_WORD *)(a1 + 26) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = -v9;
    *(_BYTE *)(a1 + 364) = 1;
  }
  result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(_QWORD *)(a1 + 120) = fnt_MovePoint;
  *(_QWORD *)(a1 + 128) = fnt_Project;
  *(_QWORD *)(a1 + 136) = fnt_Project;
  return result;
}

uint64_t fnt_SFVTL(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t result;
  FILE **v11;
  FILE *v12;
  uint64_t v13;
  _WORD *exception;

  if (!*(_QWORD *)(a1 + 16) || !*(_QWORD *)(a1 + 8))
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_14;
  }
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  v3 = v4;
  *(_QWORD *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned int *)(v5 - 4);
  *(_QWORD *)(a1 + 56) = v5 - 4;
  v7 = *(int **)(a1 + 16);
  CHECK_ELEMENTPTR(a1, v7);
  if ((v4 & 0x80000000) != 0 || v7[28] <= (int)v3)
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_13:
    fprintf(v12, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_14:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v13)
      fprintf(*v11, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    fputc(10, *v11);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v6 & 0x80000000) != 0 || *(_DWORD *)(v8 + 112) <= (int)v6)
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_13;
  }
  fnt_Normalize(a1, *(_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * v6) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 4 * v3), *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v6) - *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 4 * v3), (_WORD *)(a1 + 28));
  if ((*(_BYTE *)(a1 + 363) & 1) != 0)
  {
    v9 = *(_WORD *)(a1 + 30);
    *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 28);
    *(_WORD *)(a1 + 28) = -v9;
  }
  result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(_QWORD *)(a1 + 120) = fnt_MovePoint;
  return result;
}

uint64_t fnt_SPVFS(uint64_t a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  *(_QWORD *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 26) = v3;
  CHECK_STACK_POINTER_BASE(a1, v2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v4 - 4);
  *(_QWORD *)(a1 + 56) = v4 - 4;
  *(_WORD *)(a1 + 24) = v5;
  result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(_QWORD *)(a1 + 120) = fnt_MovePoint;
  *(_QWORD *)(a1 + 128) = fnt_Project;
  *(_QWORD *)(a1 + 136) = fnt_Project;
  *(_BYTE *)(a1 + 364) = 0;
  return result;
}

uint64_t fnt_SFVFS(uint64_t a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  *(_QWORD *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 30) = v3;
  CHECK_STACK_POINTER_BASE(a1, v2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v4 - 4);
  *(_QWORD *)(a1 + 56) = v4 - 4;
  *(_WORD *)(a1 + 28) = v5;
  result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(_QWORD *)(a1 + 120) = fnt_MovePoint;
  return result;
}

uint64_t fnt_GPV(uint64_t a1)
{
  _DWORD *v2;
  uint64_t result;
  _DWORD *v4;

  GrowStackForPush((_QWORD *)a1, 2);
  CHECK_STACK_POINTER_END(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_DWORD **)(a1 + 56);
  *v2++ = *(__int16 *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = v2;
  result = CHECK_STACK_POINTER_END(a1, (unint64_t)v2);
  v4 = *(_DWORD **)(a1 + 56);
  *v4 = *(__int16 *)(a1 + 26);
  *(_QWORD *)(a1 + 56) = v4 + 1;
  return result;
}

uint64_t fnt_GFV(uint64_t a1)
{
  _DWORD *v2;
  uint64_t result;
  _DWORD *v4;

  GrowStackForPush((_QWORD *)a1, 2);
  CHECK_STACK_POINTER_END(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_DWORD **)(a1 + 56);
  *v2++ = *(__int16 *)(a1 + 28);
  *(_QWORD *)(a1 + 56) = v2;
  result = CHECK_STACK_POINTER_END(a1, (unint64_t)v2);
  v4 = *(_DWORD **)(a1 + 56);
  *v4 = *(__int16 *)(a1 + 30);
  *(_QWORD *)(a1 + 56) = v4 + 1;
  return result;
}

uint64_t fnt_SFVTPV(uint64_t result)
{
  *(_DWORD *)(result + 28) = *(_DWORD *)(result + 24);
  *(_WORD *)(result + 360) = 0x4000;
  *(_QWORD *)(result + 120) = fnt_MovePoint;
  *(_BYTE *)(result + 365) = 1;
  return result;
}

uint64_t fnt_SMD(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + 212) = v4;
  return result;
}

uint64_t fnt_SCVTCI(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + 192) = v4;
  return result;
}

uint64_t fnt_SSWCI(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + 196) = v4;
  return result;
}

uint64_t fnt_SSW(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 80);
  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(__int16 *)(v4 - 4);
  *(_QWORD *)(a1 + 56) = v4 - 4;
  *(_WORD *)(v2 + 242) = v5;
  *(_DWORD *)(v2 + 200) = (unint64_t)(*(int *)(v2 + 100) * (uint64_t)v5 + 0x8000) >> 16;
  return result;
}

uint64_t fnt_SRP0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(a1 + 96) = v4;
  return result;
}

uint64_t fnt_SRP1(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(a1 + 100) = v4;
  return result;
}

uint64_t fnt_SRP2(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(a1 + 104) = v4;
  return result;
}

uint64_t fnt_SLOOP(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(a1 + 112) = v4 - 1;
  return result;
}

uint64_t fnt_POP(uint64_t a1)
{
  uint64_t result;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  *(_QWORD *)(a1 + 56) -= 4;
  return result;
}

uint64_t fnt_SetElementPtr(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  FILE **v6;
  uint64_t v7;
  _WORD *exception;

  v1 = a1;
  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(int *)(v3 - 4);
  *(_QWORD *)(v1 + 56) = v3 - 4;
  if (v4 >= *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 248) + 14))
  {
    v6 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v4, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 248) + 14), 0);
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8);
    if (v7)
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    fputc(10, *v6);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * v4);
  switch(*(_BYTE *)(v1 + 363))
  {
    case 0x13:
      goto LABEL_6;
    case 0x14:
      v1 += 8;
      goto LABEL_6;
    case 0x15:
      v1 += 16;
      goto LABEL_6;
    case 0x16:
      *(_QWORD *)(v1 + 8) = v5;
      *(_QWORD *)(v1 + 16) = v5;
LABEL_6:
      *(_QWORD *)v1 = v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t fnt_SetRoundState(uint64_t result)
{
  unsigned int v1;
  uint64_t (*v2)(int);

  v1 = *(unsigned __int8 *)(result + 363);
  if (v1 > 0x79)
  {
    switch(v1)
    {
      case 'z':
        v2 = (uint64_t (*)(int))fnt_RoundOff;
        break;
      case '|':
        v2 = fnt_RoundUpToGrid;
        break;
      case '}':
        v2 = fnt_RoundDownToGrid;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v1)
    {
      case 0x18u:
        v2 = fnt_RoundToGrid;
        break;
      case 0x19u:
        v2 = fnt_RoundToHalfGrid;
        break;
      case 0x3Du:
        v2 = fnt_RoundToDoubleGrid;
        break;
      default:
        return result;
    }
  }
  *(_QWORD *)(*(_QWORD *)(result + 80) + 216) = v2;
  return result;
}

uint64_t fnt_DUP(_QWORD *a1)
{
  unint64_t v2;
  uint64_t result;
  _DWORD *v4;

  v2 = a1[7];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  LODWORD(v2) = *(_DWORD *)(v2 - 4);
  GrowStackForPush(a1, 1);
  result = CHECK_STACK_POINTER_END((uint64_t)a1, a1[7]);
  v4 = (_DWORD *)a1[7];
  *v4 = v2;
  a1[7] = v4 + 1;
  return result;
}

uint64_t fnt_CLEAR(uint64_t result)
{
  *(_QWORD *)(result + 56) = *(_QWORD *)(*(_QWORD *)(result + 80) + 8);
  return result;
}

uint64_t fnt_SWAP(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t result;

  v2 = *(_DWORD **)(a1 + 56);
  CHECK_STACK_POINTER_BASE(a1, (unint64_t)v2);
  v3 = v2 - 1;
  v4 = *(v2 - 1);
  CHECK_STACK_POINTER_BASE(a1, (unint64_t)(v2 - 1));
  v5 = *(v2 - 2);
  v2 -= 2;
  CHECK_STACK_POINTER_END(a1, (unint64_t)v2);
  *v2 = v4;
  result = CHECK_STACK_POINTER_END(a1, (unint64_t)v3);
  *v3 = v5;
  return result;
}

uint64_t fnt_DEPTH(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;

  v2 = (a1[7] - *(_QWORD *)(a1[10] + 8)) >> 2;
  GrowStackForPush(a1, 1);
  result = CHECK_STACK_POINTER_END((uint64_t)a1, a1[7]);
  v4 = (_DWORD *)a1[7];
  *v4 = v2;
  a1[7] = v4 + 1;
  return result;
}

uint64_t fnt_CINDEX(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  int v9;
  uint64_t result;
  FILE **v11;
  FILE *v12;
  const char *v13;
  uint64_t v14;
  _WORD *exception;

  v2 = a1[7];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  v5 = *(_DWORD *)(v2 - 4);
  v4 = (_DWORD *)(v2 - 4);
  v3 = v5;
  if ((v5 & 0x80000000) != 0
    || (v6 = a1[10], *(_DWORD *)(v6 + 4) <= (int)v3)
    || (v7 = *(_QWORD *)(v6 + 8), v3 > (uint64_t)((uint64_t)v4 - v7) >> 2))
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    v13 = "ERROR: invalid stack index";
    goto LABEL_9;
  }
  v8 = &v4[-v3];
  if (v7 > (unint64_t)v8 || a1[6] <= (unint64_t)v8)
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    v13 = "ERROR: trying to access outside the stack";
LABEL_9:
    fprintf(v12, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v13);
    v14 = *(_QWORD *)(a1[9] + 8);
    if (v14)
      fprintf(*v11, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    fputc(10, *v11);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v9 = *v8;
  result = CHECK_STACK_POINTER_END((uint64_t)a1, (unint64_t)v4);
  *v4 = v9;
  return result;
}

uint64_t fnt_MINDEX(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int v8;
  _DWORD *v9;
  uint64_t result;
  FILE **v11;
  FILE *v12;
  const char *v13;
  uint64_t v14;
  _WORD *exception;

  v2 = a1[7];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  v4 = (_DWORD *)(v2 - 4);
  v3 = *(unsigned int *)(v2 - 4);
  if ((v3 & 0x80000000) != 0
    || (v5 = a1[10], *(_DWORD *)(v5 + 4) <= (int)v3)
    || (v6 = *(_QWORD *)(v5 + 8), v3 > (uint64_t)((uint64_t)v4 - v6) >> 2))
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    v13 = "ERROR: invalid stack index";
    goto LABEL_13;
  }
  v7 = &v4[-v3];
  if (v6 > (unint64_t)v7 || a1[6] <= (unint64_t)v7)
  {
    v11 = (FILE **)MEMORY[0x1E0C80C10];
    v12 = (FILE *)*MEMORY[0x1E0C80C10];
    v13 = "ERROR: trying to access outside the stack";
LABEL_13:
    fprintf(v12, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v13);
    v14 = *(_QWORD *)(a1[9] + 8);
    if (v14)
      fprintf(*v11, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    fputc(10, *v11);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v8 = *v7;
  if ((_DWORD)v3)
  {
    v9 = (_DWORD *)(v2 - 4 * v3);
    do
    {
      *(v9 - 1) = *v9;
      ++v9;
      LODWORD(v3) = v3 - 1;
    }
    while ((_DWORD)v3);
    CHECK_STACK_POINTER_BASE((uint64_t)a1, v2 - 4);
    v4 = (_DWORD *)(v2 - 8);
  }
  result = CHECK_STACK_POINTER_END((uint64_t)a1, (unint64_t)v4);
  *v4 = v8;
  a1[7] = v4 + 1;
  return result;
}

_QWORD *fnt_ROLL(_QWORD *result)
{
  uint64_t v1;
  _DWORD *v2;
  unint64_t v3;
  int v4;
  int *v5;
  int v6;
  FILE **v7;
  _QWORD *v8;
  uint64_t v9;
  _WORD *exception;

  v1 = result[7];
  v2 = (_DWORD *)(v1 - 4);
  v3 = *(_QWORD *)(result[10] + 8);
  if (v3 > v1 - 4
    || result[6] <= (unint64_t)v2
    || v3 > v1 - 8
    || (v4 = *(_DWORD *)(v1 - 8),
        *(_DWORD *)(v1 - 8) = *(_DWORD *)(v1 - 4),
        v5 = (int *)(v1 - 12),
        v3 > (unint64_t)v5))
  {
    v7 = (FILE **)MEMORY[0x1E0C80C10];
    v8 = result;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access outside the stack");
    v9 = *(_QWORD *)(v8[9] + 8);
    if (v9)
      fprintf(*v7, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    fputc(10, *v7);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v6 = *v5;
  *v5 = v4;
  *v2 = v6;
  return result;
}

uint64_t fnt_MDAP(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  FILE **v8;
  uint64_t v9;
  _WORD *exception;

  v2 = *(_QWORD *)a1;
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(unsigned int *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  if (!v2 || (v4 & 0x80000000) != 0 || (int)v4 >= *(_DWORD *)(v2 + 112))
  {
    v8 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: gs->CE0 NULL or ptNum out of range(A)");
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v9)
      fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    fputc(10, *v8);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_DWORD *)(a1 + 96) = v4;
  *(_DWORD *)(a1 + 100) = v4;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, *(unsigned int *)(*(_QWORD *)(v2 + 8) + 4 * v4), *(unsigned int *)(*(_QWORD *)(v2 + 16) + 4 * v4));
  v6 = v5;
  if ((*(_BYTE *)(a1 + 363) & 1) != 0)
    LODWORD(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 216))(v5, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 120))(a1, v2, v4, (v5 - v6));
}

uint64_t fnt_MIAP(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  FILE **v17;
  uint64_t v18;
  _WORD *exception;

  v2 = *(_QWORD *)a1;
  v3 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 152);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v4 - 4);
  *(_QWORD *)(a1 + 56) = v4 - 4;
  v6 = v3(a1, v5);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(v7 - 4);
  *(_QWORD *)(a1 + 56) = v7 - 4;
  if (!v2 || (v8 & 0x80000000) != 0 || (int)v8 >= *(_DWORD *)(v2 + 112))
  {
    v17 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_18;
  }
  CHECK_ELEMENTPTR(a1, (int *)v2);
  if (*(_DWORD *)(v2 + 112) <= (int)v8)
  {
    v17 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_18:
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v18)
      fprintf(*v17, "(glyph = %d)\n", *(_DWORD *)(v18 + 88));
    fputc(10, *v17);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_DWORD *)(a1 + 96) = v8;
  *(_DWORD *)(a1 + 100) = v8;
  if (v2 == **(_QWORD **)(a1 + 72))
  {
    v11 = ShortFracMul(v6, *(__int16 *)(a1 + 24));
    *(_DWORD *)(*(_QWORD *)(v2 + 56) + 4 * v8) = v11;
    v9 = *(_QWORD *)(v2 + 8);
    *(_DWORD *)(v9 + 4 * v8) = v11;
    v10 = ShortFracMul(v6, *(__int16 *)(a1 + 26));
    *(_DWORD *)(*(_QWORD *)(v2 + 64) + 4 * v8) = v10;
    *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v8) = v10;
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 8);
    v10 = *(unsigned int *)(*(_QWORD *)(v2 + 16) + 4 * v8);
  }
  LODWORD(v12) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a1 + 128))(a1, *(unsigned int *)(v9 + 4 * v8), v10);
  v13 = v12;
  if ((*(_BYTE *)(a1 + 363) & 1) != 0)
  {
    v14 = *(_QWORD *)(a1 + 80);
    v15 = v6 - v12;
    if ((int)(v6 - v12) < 0)
      v15 = v12 - v6;
    if (v15 <= *(_DWORD *)(v14 + 192))
      v12 = v6;
    else
      v12 = v12;
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 216))(v12, a1);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 120))(a1, v2, v8, v6 - v13);
}

uint64_t fnt_IUP(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  signed int v41;
  unsigned int v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  int v46;
  int v47;
  _WORD *exception;
  __int16 v49;
  FILE **v50;
  FILE *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;

  v54 = result;
  v1 = *(_QWORD *)(result + 16);
  if (!v1)
  {
    v50 = (FILE **)MEMORY[0x1E0C80C10];
    v51 = (FILE *)*MEMORY[0x1E0C80C10];
    v52 = "ERROR: CE2 NULL(A)";
    goto LABEL_93;
  }
  if ((*(_BYTE *)(result + 363) & 1) != 0)
    v2 = (uint64_t *)(v1 + 8);
  else
    v2 = (uint64_t *)(v1 + 16);
  if ((*(_BYTE *)(result + 363) & 1) != 0)
    v3 = (uint64_t *)(v1 + 56);
  else
    v3 = (uint64_t *)(v1 + 64);
  if ((*(_BYTE *)(result + 363) & 1) != 0)
    v4 = (uint64_t *)(v1 + 72);
  else
    v4 = (uint64_t *)(v1 + 80);
  if ((*(_BYTE *)(result + 363) & 1) != 0)
    v5 = 1;
  else
    v5 = 2;
  v6 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v7 = 0;
    v8 = *v4;
    v9 = *v3;
    v10 = *v2;
    v11 = *(_QWORD *)(v1 + 24);
    v12 = *(_QWORD *)(v1 + 32);
    result = 0x3EF0000000000000;
    v13 = *(_DWORD *)(v1 + 112);
    while (1)
    {
      v14 = *(unsigned __int16 *)(v11 + 2 * v7);
      if (v13 <= (int)v14)
        break;
      if (*(__int16 *)(v12 + 2 * v7) < 0)
        break;
      v15 = *(unsigned __int16 *)(v12 + 2 * v7);
      if (v13 <= (int)v15)
        break;
      if (v14 > v15)
        goto LABEL_88;
      v16 = *(_QWORD *)(v1 + 48);
      v17 = *(unsigned __int16 *)(v11 + 2 * v7);
      do
      {
        if ((v5 & *(_BYTE *)(v16 + v17)) != 0)
        {
          v18 = v17;
          while (1)
          {
            if ((_DWORD)v15 == (__int16)v18)
              LOWORD(v19) = v14;
            else
              LOWORD(v19) = v18 + 1;
            if ((v19 & 0x8000) != 0)
              goto LABEL_90;
            v20 = v18;
            v18 = (unsigned __int16)v19;
            if (v13 <= (unsigned __int16)v19)
              goto LABEL_90;
            v19 = (__int16)v19;
            while ((v5 & *(_BYTE *)(v16 + v18)) == 0)
            {
              if ((_DWORD)v18 == (_DWORD)v15)
                LOWORD(v18) = v14;
              else
                LOWORD(v18) = v18 + 1;
              if ((v18 & 0x8000) != 0)
                goto LABEL_90;
              v18 = (unsigned __int16)v18;
              if (v13 <= (unsigned __int16)v18)
                goto LABEL_90;
              if ((_DWORD)v20 == (unsigned __int16)v18)
              {
                v21 = v20;
                v18 = v20;
                goto LABEL_40;
              }
            }
            v21 = v18;
LABEL_40:
            v22 = (int)v20;
            v23 = *(__int16 *)(v8 + 2 * (int)v20);
            v24 = *(__int16 *)(v8 + 2 * v21);
            v25 = v23 - v24;
            if (v23 >= v24)
            {
              v26 = *(_DWORD *)(v10 + 4 * v21);
              v27 = *(_DWORD *)(v9 + 4 * v22);
              v31 = *(_DWORD *)(v10 + 4 * v22);
              v29 = v31 - v27;
              v30 = v31 - v26;
              v22 = v21;
              v23 = *(__int16 *)(v8 + 2 * v21);
            }
            else
            {
              v26 = *(_DWORD *)(v10 + 4 * v22);
              v27 = *(_DWORD *)(v9 + 4 * v21);
              v28 = *(_DWORD *)(v10 + 4 * v21);
              v29 = v28 - v27;
              v30 = v28 - v26;
              v25 = v24 - v23;
            }
            v32 = *(_DWORD *)(v9 + 4 * v22);
            v33 = v26 - v32;
            if (v25)
            {
              if (v25 >= 0x8000 || v30 >= 0x8000)
              {
                if ((_DWORD)v18 != (__int16)v19)
                {
                  v41 = 0;
                  v42 = vcvtd_n_s64_f64((double)v30 * 0.0000152587891 / ((double)v25 * 0.0000152587891), 0x10uLL);
                  v43 = 1;
                  v44 = v19;
                  do
                  {
                    v45 = v44;
                    v46 = *(_DWORD *)(v9 + 4 * v44);
                    if (v46 <= v32)
                    {
                      v47 = v46 + v33;
                    }
                    else if (v46 >= v27)
                    {
                      v47 = v46 + v29;
                    }
                    else
                    {
                      if (v43)
                        v41 = v42;
                      v47 = v26 + ((unint64_t)((*(__int16 *)(v8 + 2 * v45) - v23) * (uint64_t)v41 + 0x8000) >> 16);
                      v43 = 0;
                    }
                    *(_DWORD *)(v10 + 4 * v45) = v47;
                    LOWORD(v19) = v19 == (_DWORD)v15 ? (unsigned __int16)v14 : v45 + 1;
                    if ((v19 & 0x8000) != 0)
                      goto LABEL_90;
                    v44 = v19;
                    v13 = *(_DWORD *)(v1 + 112);
                    if (v13 <= (unsigned __int16)v19)
                      goto LABEL_90;
                    v19 = (unsigned __int16)v19;
                  }
                  while ((_DWORD)v18 != (unsigned __int16)v19);
                }
              }
              else if ((_DWORD)v18 != (__int16)v19)
              {
                v34 = v19;
                do
                {
                  v35 = v34;
                  v36 = *(_DWORD *)(v9 + 4 * v34);
                  if (v36 <= v32)
                  {
                    v39 = v36 + v33;
                  }
                  else if (v36 >= v27)
                  {
                    v39 = v36 + v29;
                  }
                  else
                  {
                    v37 = (v25 >> 1) + (*(__int16 *)(v8 + 2 * v35) - v23) * v30;
                    v38 = v37 >= 0x8000 ? (__int16)v25 : v25;
                    v39 = v37 / v38 + v26;
                  }
                  *(_DWORD *)(v10 + 4 * v35) = v39;
                  LOWORD(v19) = v19 == (_DWORD)v15 ? (unsigned __int16)v14 : v35 + 1;
                  if ((v19 & 0x8000) != 0)
                    goto LABEL_90;
                  v34 = v19;
                  v13 = *(_DWORD *)(v1 + 112);
                  if (v13 <= (unsigned __int16)v19)
                    goto LABEL_90;
                  v19 = (unsigned __int16)v19;
                }
                while ((_DWORD)v18 != (unsigned __int16)v19);
              }
            }
            else
            {
              v40 = (__int16)v19;
              if ((_DWORD)v18 != (__int16)v19)
              {
                while (1)
                {
                  *(_DWORD *)(v10 + 4 * (__int16)v19) += v33;
                  LOWORD(v19) = v40 == (_DWORD)v15 ? (unsigned __int16)v14 : v19 + 1;
                  if ((v19 & 0x8000) != 0)
                    break;
                  v13 = *(_DWORD *)(v1 + 112);
                  if (v13 <= (unsigned __int16)v19)
                    break;
                  v40 = (unsigned __int16)v19;
                  if ((_DWORD)v18 == (unsigned __int16)v19)
                    goto LABEL_86;
                }
LABEL_90:
                exception = __cxa_allocate_exception(2uLL);
                v49 = 5;
LABEL_91:
                *exception = v49;
                __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
              }
            }
LABEL_86:
            if ((_DWORD)v18 == (_DWORD)v17)
            {
              v6 = *(_DWORD *)v1;
              goto LABEL_88;
            }
          }
        }
        ++v17;
      }
      while (v15 + 1 != v17);
LABEL_88:
      if (++v7 >= v6)
        return result;
    }
    v50 = (FILE **)MEMORY[0x1E0C80C10];
    v51 = (FILE *)*MEMORY[0x1E0C80C10];
    v52 = "ERROR: start or tmp16 beyond CE2->maxPointCount";
LABEL_93:
    fprintf(v51, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v52);
    v53 = *(_QWORD *)(*(_QWORD *)(v54 + 72) + 8);
    if (v53)
      fprintf(*v50, "(glyph = %d)\n", *(_DWORD *)(v53 + 88));
    fputc(10, *v50);
    exception = __cxa_allocate_exception(2uLL);
    v49 = 1;
    goto LABEL_91;
  }
  return result;
}

uint64_t fnt_SHP(uint64_t a1)
{
  unsigned int v3;
  int v4;
  int v5;

  v4 = -1431655766;
  v5 = -1431655766;
  fnt_SH_Common(a1, &v5, &v4, &v3);
  return fnt_SHP_Common(a1, v5, v4);
}

uint64_t fnt_SH_Common(uint64_t a1, _DWORD *a2, _DWORD *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *exception;

  v4 = 100;
  if ((*(_BYTE *)(a1 + 363) & 1) == 0)
    v4 = 104;
  v5 = *(_QWORD *)(a1 + 8 * ((*(_BYTE *)(a1 + 363) & 1) == 0));
  if (!v5
    || ((v10 = *(_DWORD *)(a1 + v4), **(_QWORD **)(a1 + 72) == v5)
      ? (v11 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 248) + 16))
      : (v11 = *(_DWORD *)(v5 + 112)),
        v11 <= v10))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * (int)v10)- *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * (int)v10)), (*(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * (int)v10)- *(_DWORD *)(*(_QWORD *)(v5 + 64) + 4 * (int)v10)));
  if (!*(_BYTE *)(a1 + 365))
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_PFPROJ: non-valid_pfProj (pfProj = %f)\n", (float)((float)*(__int16 *)(a1 + 360) * 0.000061035));
  v13 = *(__int16 *)(a1 + 360);
  if (v13 == 0x4000)
  {
    LODWORD(v14) = ShortFracMul(v12, *(__int16 *)(a1 + 28));
    LODWORD(v15) = ShortFracMul(v12, *(__int16 *)(a1 + 30));
  }
  else
  {
    v14 = *(__int16 *)(a1 + 28) * (uint64_t)v12 / v13;
    v15 = *(__int16 *)(a1 + 30) * (uint64_t)v12 / v13;
  }
  *a2 = v14;
  *a3 = v15;
  *a4 = v10;
  return v5;
}

uint64_t fnt_SHP_Common(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  FILE **v12;
  FILE *v13;
  const char *v14;
  uint64_t v15;
  _WORD *exception;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "ERROR: CE2 NULL(B)";
    goto LABEL_13;
  }
  v5 = *(_DWORD *)(result + 112);
  if ((v5 & 0x80000000) == 0)
  {
    v8 = v5 + 1;
    while (1)
    {
      result = CHECK_STACK_POINTER_BASE(v3, *(_QWORD *)(v3 + 56));
      v9 = *(_QWORD *)(v3 + 56);
      v11 = *(_DWORD *)(v9 - 4);
      v10 = v11;
      *(_QWORD *)(v3 + 56) = v9 - 4;
      if ((v11 & 0x80000000) != 0 || (int)v10 >= *(_DWORD *)(v4 + 112))
        break;
      if (*(_WORD *)(v3 + 28))
      {
        *(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * v10) += a2;
        *(_BYTE *)(*(_QWORD *)(v4 + 48) + v10) |= 1u;
      }
      if (*(_WORD *)(v3 + 30))
      {
        *(_DWORD *)(*(_QWORD *)(v4 + 16) + 4 * v10) += a3;
        *(_BYTE *)(*(_QWORD *)(v4 + 48) + v10) |= 2u;
      }
      if (--v8 <= 0)
        goto LABEL_11;
    }
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    v13 = (FILE *)*MEMORY[0x1E0C80C10];
    v14 = "ERROR: gxpoint out of range";
LABEL_13:
    fprintf(v13, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v14);
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 8);
    if (v15)
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v15 + 88));
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
LABEL_11:
  *(_DWORD *)(v3 + 112) = 0;
  return result;
}

uint64_t fnt_SHC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  FILE **v18;
  FILE *v19;
  uint64_t v20;
  _WORD *exception;
  unsigned int v22;
  int v23;
  int v24;

  v23 = -1431655766;
  v24 = -1431655766;
  v22 = -1431655766;
  v2 = fnt_SH_Common(a1, &v24, &v23, &v22);
  v3 = v22;
  v4 = v23;
  v5 = v24;
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(unsigned int *)(v6 - 4);
  *(_QWORD *)(a1 + 56) = v6 - 4;
  v8 = *(_DWORD **)(a1 + 16);
  if (!v8)
  {
    v18 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_24;
  }
  result = CHECK_ELEMENTPTR(a1, *(int **)(a1 + 16));
  if ((v7 & 0x80000000) != 0 || *v8 <= (int)v7)
  {
    v18 = (FILE **)MEMORY[0x1E0C80C10];
    v19 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_23:
    fprintf(v19, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_24:
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v20)
      fprintf(*v18, "(glyph = %d)\n", *(_DWORD *)(v20 + 88));
    fputc(10, *v18);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v10 = *(_QWORD *)(a1 + 16);
  if ((int)v7 >= *(_DWORD *)v10)
    return result;
  v11 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 24) + 2 * v7);
  v12 = *(_DWORD *)(v10 + 112);
  if (v12 <= (int)v11)
  {
    v18 = (FILE **)MEMORY[0x1E0C80C10];
    v19 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_23;
  }
  v13 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 32) + 2 * v7);
  v14 = v13 - v11;
  if (v13 - (int)v11 < 0 || v14 > *(_DWORD *)(v10 + 4))
  {
    v18 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE: %d not in range (%d - %d), interpreter value out of range");
    goto LABEL_24;
  }
  if (v12 <= v13)
  {
    v18 = (FILE **)MEMORY[0x1E0C80C10];
    v19 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_23;
  }
  v15 = *(unsigned __int16 *)(a1 + 28);
  v16 = *(unsigned __int16 *)(a1 + 30);
  v17 = v14 + 1;
  do
  {
    if (v3 != v11 || v2 != v10)
    {
      if (v15)
      {
        *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4 * v11) += v5;
        *(_BYTE *)(*(_QWORD *)(v10 + 48) + v11) |= 1u;
      }
      if (v16)
      {
        *(_DWORD *)(*(_QWORD *)(v10 + 16) + 4 * v11) += v4;
        *(_BYTE *)(*(_QWORD *)(v10 + 48) + v11) |= 2u;
      }
    }
    ++v11;
    --v17;
  }
  while (v17 > 0);
  return result;
}

uint64_t fnt_SHZ(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  __int16 v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  int v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _BYTE *v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  _DWORD *v29;
  int v30;
  FILE **v31;
  FILE *v32;
  uint64_t v33;
  _WORD *exception;
  int v35;
  int v36;
  unsigned int v37;

  v37 = -1431655766;
  v35 = -1431655766;
  v36 = -1431655766;
  v2 = fnt_SH_Common(a1, &v36, &v35, &v37);
  v3 = v35;
  v4 = v36;
  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(int *)(v6 - 4);
  *(_QWORD *)(a1 + 56) = v6 - 4;
  if (v7 >= *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 248) + 14))
  {
    v31 = (FILE **)MEMORY[0x1E0C80C10];
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_40:
    fprintf(v32, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_41:
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v33)
      fprintf(*v31, "(glyph = %d)\n", *(_DWORD *)(v33 + 88));
    fputc(10, *v31);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v7);
  if (!v8)
  {
    v31 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_41;
  }
  v9 = *(_DWORD *)(v8 + 4);
  v10 = v9 - 1;
  v11 = *(_DWORD *)(v8 + 112);
  if (v9 < 1 || v11 < v9)
  {
    v31 = (FILE **)MEMORY[0x1E0C80C10];
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_40;
  }
  v13 = **(unsigned __int16 **)(v8 + 24);
  if (v11 <= (int)v13)
  {
    v31 = (FILE **)MEMORY[0x1E0C80C10];
    v32 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_40;
  }
  if (v2 != v8)
    v37 = -1;
  v14 = *(_WORD *)(a1 + 28);
  if (v14)
  {
    v15 = (_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * v13);
    v16 = v37;
    if ((int)(v37 + ~(_DWORD)v13) >= 0)
    {
      v17 = v13 - v37;
      do
      {
        *v15++ += v4;
        v18 = __CFADD__(v17++, 1);
      }
      while (!v18);
    }
    v19 = -(int)v13;
    if (v16 != -1)
      v19 = ~v16;
    if (v19 + v10 >= 0)
    {
      v20 = &v15[v16 != -1];
      v21 = v19 + v9;
      do
      {
        *v20++ += v4;
        --v21;
      }
      while (v21);
    }
    LOBYTE(v14) = 1;
  }
  if (*(_WORD *)(a1 + 30))
  {
    v22 = (_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v13);
    v23 = (_BYTE *)(*(_QWORD *)(v8 + 48) + v13);
    v24 = v37;
    if ((int)(v37 + ~(_DWORD)v13) >= 0)
    {
      v25 = v13 - v37;
      do
      {
        *v22++ += v3;
        *v23++ |= v14;
        v18 = __CFADD__(v25++, 1);
      }
      while (!v18);
    }
    v26 = -(int)v13;
    if (v24 == -1)
      v27 = v26;
    else
      v27 = ~v24;
    if (v27 + v10 >= 0)
    {
      if (v24 == -1)
        v28 = v23;
      else
        v28 = v23 + 1;
      v29 = &v22[v24 != -1];
      v30 = v27 + v9;
      do
      {
        *v29++ += v3;
        *v28++ |= v14 | 2;
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t fnt_SHPIX(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_DWORD *)(v2 - 4);
  *(_QWORD *)(a1 + 56) = v2 - 4;
  if (*(_WORD *)(a1 + 28))
    v4 = ShortFracMul(v3, *(__int16 *)(a1 + 28));
  else
    v4 = 0;
  if (*(_WORD *)(a1 + 30))
    v5 = ShortFracMul(v3, *(__int16 *)(a1 + 30));
  else
    v5 = 0;
  return fnt_SHP_Common(a1, v4, v5);
}

uint64_t fnt_IP(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v11;
  int v12;
  uint64_t result;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  FILE **v27;
  FILE *v28;
  const char *v29;
  uint64_t v30;
  _WORD *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2
    || ((v3 = *(_QWORD *)a1, (v4 = *(_QWORD *)(a1 + 16)) != 0) ? (v5 = v3 == 0) : (v5 = 1),
        v5 || (v6 = *(unsigned int *)(a1 + 100), (v6 & 0x80000000) != 0) || (int)v6 >= *(_DWORD *)(v3 + 112)))
  {
    v27 = (FILE **)MEMORY[0x1E0C80C10];
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = "ERROR: CE0, CE1 or CE2 NULL; RP1 out of range";
    goto LABEL_36;
  }
  v7 = *(unsigned int *)(a1 + 104);
  v8 = **(_QWORD **)(a1 + 72);
  v11 = v3 == v8 || v2 == v8 || v4 == v8;
  if ((v7 & 0x80000000) != 0 || (int)v7 >= *(_DWORD *)(v2 + 112))
  {
    v27 = (FILE **)MEMORY[0x1E0C80C10];
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = "ERROR: pt2 out of range";
    goto LABEL_36;
  }
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, (*(_DWORD *)(*(_QWORD *)(v2 + 8) + 4 * v7) - *(_DWORD *)(*(_QWORD *)(v3 + 8) + 4 * v6)), (*(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v7) - *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v6)));
  if (v11)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 136))(a1, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 4 * v7)- *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v6)), (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 4 * v7)- *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4 * v6)));
  }
  else
  {
    if (*(_BYTE *)(a1 + 362))
      CorrectUnscaledOutline(a1);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 136))(a1, (*(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 2 * v7)- *(__int16 *)(*(_QWORD *)(v3 + 72) + 2 * v6)), (*(__int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 2 * v7)- *(__int16 *)(*(_QWORD *)(v3 + 80) + 2 * v6)));
  }
  v14 = result;
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    v15 = (double)v12;
    while (1)
    {
      CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
      v16 = *(_QWORD *)(a1 + 56);
      v18 = *(_DWORD *)(v16 - 4);
      v17 = v18;
      *(_QWORD *)(a1 + 56) = v16 - 4;
      if ((v18 & 0x80000000) != 0)
        break;
      v19 = *(_QWORD *)(a1 + 16);
      if ((int)v17 >= *(_DWORD *)(v19 + 112))
        break;
      if (v11)
      {
        v20 = (*(_DWORD *)(*(_QWORD *)(v19 + 56) + 4 * v17) - *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v6));
        v21 = *(_DWORD *)(*(_QWORD *)(v19 + 64) + 4 * v17);
        v22 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4 * v6);
      }
      else
      {
        v20 = (*(__int16 *)(*(_QWORD *)(v19 + 72) + 2 * v17) - *(__int16 *)(*(_QWORD *)(v3 + 72) + 2 * v6));
        v21 = *(__int16 *)(*(_QWORD *)(v19 + 80) + 2 * v17);
        v22 = *(__int16 *)(*(_QWORD *)(v3 + 80) + 2 * v6);
      }
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 136))(a1, v20, (v21 - v22));
      v24 = v23;
      if (v14)
        v24 = (int)(v15 * (double)v23 / (double)v14);
      v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 4 * v17)- *(_DWORD *)(*(_QWORD *)(v3 + 8) + 4 * v6)), (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 4 * v17)- *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v6)));
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 120))(a1, *(_QWORD *)(a1 + 16), v17, (v24 - v25));
      v26 = *(_DWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 112) = v26 - 1;
      if (v26 <= 0)
        goto LABEL_34;
    }
    v27 = (FILE **)MEMORY[0x1E0C80C10];
    v28 = (FILE *)*MEMORY[0x1E0C80C10];
    v29 = "ERROR: rag1 out of range";
LABEL_36:
    fprintf(v28, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v29);
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v30)
      fprintf(*v27, "(glyph = %d)\n", *(_DWORD *)(v30 + 88));
    fputc(10, *v27);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
LABEL_34:
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t fnt_MSIRP(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  FILE **v19;
  uint64_t v20;
  _WORD *exception;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 96);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(v5 - 4);
  v5 -= 4;
  v6 = v7;
  *(_QWORD *)(a1 + 56) = v5;
  CHECK_STACK_POINTER_BASE(a1, v5);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)(a1 + 56) = v8 - 4;
  if (!v2
    || !v3
    || (v4 & 0x80000000) != 0
    || (int)v4 >= *(_DWORD *)(v3 + 112)
    || (v9 & 0x80000000) != 0
    || (int)v9 >= *(_DWORD *)(v2 + 112))
  {
    v19 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: CE0, CE1 or CE2 NULL; pt1 or pt2 out of range");
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v20)
      fprintf(*v19, "(glyph = %d)\n", *(_DWORD *)(v20 + 88));
    fputc(10, *v19);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (v2 == **(_QWORD **)(a1 + 72))
  {
    v14 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v4);
    *(_DWORD *)(*(_QWORD *)(v2 + 56) + 4 * v9) = ShortFracMul(v6, *(__int16 *)(a1 + 24)) + v14;
    v15 = *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4 * v4);
    *(_DWORD *)(*(_QWORD *)(v2 + 64) + 4 * v9) = ShortFracMul(v6, *(__int16 *)(a1 + 26)) + v15;
    v12 = *(_QWORD *)(v3 + 8);
    v13 = *(_QWORD *)(v3 + 16);
    v10 = *(_QWORD *)(v2 + 8);
    v16 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)(v10 + 4 * v9) = *(_DWORD *)(v12 + 4 * v4);
    v11 = *(_DWORD *)(v13 + 4 * v4);
    *(_DWORD *)(v16 + 4 * v9) = v11;
  }
  else
  {
    v10 = *(_QWORD *)(v2 + 8);
    v11 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v9);
    v12 = *(_QWORD *)(v3 + 8);
    v13 = *(_QWORD *)(v3 + 16);
  }
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, (*(_DWORD *)(v10 + 4 * v9) - *(_DWORD *)(v12 + 4 * v4)), (v11 - *(_DWORD *)(v13 + 4 * v4)));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 120))(a1, v2, v9, (v6 - v17));
  *(_DWORD *)(a1 + 100) = v4;
  *(_DWORD *)(a1 + 104) = v9;
  if ((*(_BYTE *)(a1 + 363) & 1) != 0)
    *(_DWORD *)(a1 + 96) = v9;
  return result;
}

uint64_t fnt_ALIGNRP(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  FILE **v13;
  FILE *v14;
  const char *v15;
  uint64_t v16;
  _WORD *exception;

  v1 = result;
  v2 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4 || (v5 = *(unsigned int *)(result + 96), (v5 & 0x80000000) != 0) || (int)v5 >= *(_DWORD *)(v2 + 112))
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = "ERROR: ce0 or ce1 NULL; pt0 out of range";
    goto LABEL_14;
  }
  if ((*(_DWORD *)(result + 112) & 0x80000000) == 0)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 4 * v5);
    v7 = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v5);
    while (1)
    {
      CHECK_STACK_POINTER_BASE(v1, *(_QWORD *)(v1 + 56));
      v8 = *(_QWORD *)(v1 + 56);
      v10 = *(_DWORD *)(v8 - 4);
      v9 = v10;
      *(_QWORD *)(v1 + 56) = v8 - 4;
      if ((v10 & 0x80000000) != 0 || (int)v9 >= *(_DWORD *)(v3 + 112))
        break;
      v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 + 128))(v1, (*(_DWORD *)(*(_QWORD *)(v3 + 8) + 4 * v9) - v6), (*(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v9) - v7));
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v1 + 120))(v1, v3, v9, -v11);
      v12 = *(_DWORD *)(v1 + 112);
      *(_DWORD *)(v1 + 112) = v12 - 1;
      if (v12 <= 0)
        goto LABEL_12;
    }
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = "ERROR: ptNum out of range";
LABEL_14:
    fprintf(v14, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v15);
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8);
    if (v16)
      fprintf(*v13, "(glyph = %d)\n", *(_DWORD *)(v16 + 88));
    fputc(10, *v13);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
LABEL_12:
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t fnt_ALIGNPTS(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  FILE **v12;
  uint64_t v13;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  v3 = v4;
  *(_QWORD *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned int *)(v5 - 4);
  *(_QWORD *)(a1 + 56) = v5 - 4;
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7
    || (v8 = *(_QWORD *)a1) == 0
    || (v6 & 0x80000000) != 0
    || (int)v6 >= *(_DWORD *)(v7 + 112)
    || (v3 & 0x80000000) != 0
    || (int)v3 >= *(_DWORD *)(v8 + 112))
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: ce1 or ce2 NULL; pt1 or pt2 out of range");
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v13)
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, (*(_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * v3) - *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * v6)), (*(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v3) - *(_DWORD *)(*(_QWORD *)(v7 + 16) + 4 * v6)));
  v10 = (v9 >> 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 120))(a1, v8, v6, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 120))(a1, v7, v3, (v10 - v9));
}

uint64_t fnt_SCANCTRL(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(unsigned __int16 *)(v2 + 206);
  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(v5 - 4);
  *(_QWORD *)(a1 + 56) = v5 - 4;
  *(_DWORD *)(v2 + 204) = v6 | (v3 << 16);
  return result;
}

uint64_t fnt_SCANTYPE(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(a1 + 80);
  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v4 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(v4 - 4);
  v5 = v6;
  *(_QWORD *)(a1 + 56) = v4 - 4;
  if (v6 == 2)
  {
    v7 = *(unsigned __int16 *)(v2 + 204) | 0x20000;
  }
  else if (v5 == 1)
  {
    v7 = *(unsigned __int16 *)(v2 + 204) | 0x10000;
  }
  else
  {
    if (v5)
      return result;
    v7 = *(unsigned __int16 *)(v2 + 204);
  }
  *(_DWORD *)(v2 + 204) = v7;
  return result;
}

uint64_t fnt_INSTCTRL(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t result;
  _DWORD *v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 80);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(v3 - 4);
  v3 -= 4;
  v4 = v5;
  *(_QWORD *)(a1 + 56) = v3;
  result = CHECK_STACK_POINTER_BASE(a1, v3);
  v7 = (_DWORD *)(*(_QWORD *)(a1 + 56) - 4);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = v5 - 1;
  if (*(_DWORD *)(v2 + 128) == 1 && v8 <= 1)
    *(_DWORD *)(v2 + 208) = *(_DWORD *)(v2 + 208) & ~v4 | *v7 & v4;
  return result;
}

_QWORD *fnt_PUSHB(uint64_t a1)
{
  return fnt_PushSomeBytes((_QWORD *)a1, *(unsigned __int8 *)(a1 + 363) - 175);
}

_QWORD *fnt_PushSomeBytes(_QWORD *result, int a2)
{
  _QWORD *v3;
  _DWORD *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  int v7;
  FILE **v8;
  uint64_t v9;
  _WORD *exception;

  v3 = result;
  v4 = (_DWORD *)result[7];
  if ((unint64_t)&v4[a2] > result[6])
  {
    result = GrowStackForPush(result, a2);
    v4 = result;
  }
  v5 = (unsigned __int8 *)v3[8];
  if (a2 >= 1)
  {
    v6 = a2 + 1;
    do
    {
      if (v3[46] > (unint64_t)v5 || v3[47] <= (unint64_t)v5)
      {
        v8 = (FILE **)MEMORY[0x1E0C80C10];
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
        v9 = *(_QWORD *)(v3[9] + 8);
        if (v9)
          fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
        fputc(10, *v8);
        exception = __cxa_allocate_exception(2uLL);
        *exception = 1;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      }
      result = (_QWORD *)CHECK_STACK_POINTER_END((uint64_t)v3, (unint64_t)v4);
      v7 = *v5++;
      *v4++ = v7;
      --v6;
    }
    while (v6 > 1);
  }
  v3[7] = v4;
  v3[8] = v5;
  return result;
}

uint64_t fnt_PUSHB0(_QWORD *a1)
{
  char *v2;
  unsigned __int8 *v3;
  uint64_t result;
  FILE **v5;
  uint64_t v6;
  _WORD *exception;

  v2 = (char *)a1[7];
  if ((unint64_t)(v2 + 4) > a1[6])
    v2 = GrowStackForPush(a1, 1);
  v3 = (unsigned __int8 *)a1[8];
  if (a1[46] > (unint64_t)v3 || a1[47] <= (unint64_t)v3)
  {
    v5 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    v6 = *(_QWORD *)(a1[9] + 8);
    if (v6)
      fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
    fputc(10, *v5);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  result = CHECK_STACK_POINTER_END((uint64_t)a1, (unint64_t)v2);
  *(_DWORD *)v2 = *v3;
  a1[7] = v2 + 4;
  a1[8] = v3 + 1;
  return result;
}

_QWORD *fnt_NPUSHB(_QWORD *a1)
{
  unsigned __int8 *v1;
  FILE **v3;
  uint64_t v5;
  _WORD *exception;

  v1 = (unsigned __int8 *)a1[8];
  if (a1[46] > (unint64_t)v1 || a1[47] <= (unint64_t)v1)
  {
    v3 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    v5 = *(_QWORD *)(a1[9] + 8);
    if (v5)
      fprintf(*v3, "(glyph = %d)\n", *(_DWORD *)(v5 + 88));
    fputc(10, *v3);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  a1[8] = v1 + 1;
  return fnt_PushSomeBytes(a1, *v1);
}

_QWORD *fnt_PUSHW(uint64_t a1)
{
  return fnt_PushSomeWords((_QWORD *)a1, *(unsigned __int8 *)(a1 + 363) - 183);
}

_QWORD *fnt_PushSomeWords(_QWORD *result, int a2)
{
  _QWORD *v3;
  int *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;
  FILE **v10;
  uint64_t v11;
  _WORD *exception;

  v3 = result;
  v4 = (int *)result[7];
  if ((unint64_t)&v4[a2] > result[6])
  {
    result = GrowStackForPush(result, a2);
    v4 = (int *)result;
  }
  v5 = (unsigned __int8 *)v3[8];
  if (a2 >= 1)
  {
    v6 = a2 + 1;
    do
    {
      v7 = v5;
      if (v3[46] > (unint64_t)v5
        || (v8 = v3[47], v8 <= (unint64_t)v7)
        || v8 <= (unint64_t)(v7 + 1))
      {
        v10 = (FILE **)MEMORY[0x1E0C80C10];
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
        v11 = *(_QWORD *)(v3[9] + 8);
        if (v11)
          fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
        fputc(10, *v10);
        exception = __cxa_allocate_exception(2uLL);
        *exception = 1;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      }
      v9 = (__int16)(*v7 << 8) | v7[1];
      result = (_QWORD *)CHECK_STACK_POINTER_END((uint64_t)v3, (unint64_t)v4);
      *v4++ = v9;
      --v6;
      v5 = v7 + 2;
    }
    while (v6 > 1);
    v5 = v7 + 2;
  }
  v3[7] = v4;
  v3[8] = v5;
  return result;
}

uint64_t fnt_PUSHW0(_QWORD *a1)
{
  char *v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t result;
  FILE **v8;
  uint64_t v9;
  _WORD *exception;

  v2 = (char *)a1[7];
  if ((unint64_t)(v2 + 4) > a1[6])
    v2 = GrowStackForPush(a1, 1);
  v3 = (unsigned __int8 *)a1[8];
  if (a1[46] > (unint64_t)v3 || (v4 = a1[47], v4 <= (unint64_t)v3) || v4 <= (unint64_t)(v3 + 1))
  {
    v8 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    v9 = *(_QWORD *)(a1[9] + 8);
    if (v9)
      fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    fputc(10, *v8);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v5 = v3 + 2;
  v6 = (__int16)(*v3 << 8) | v3[1];
  result = CHECK_STACK_POINTER_END((uint64_t)a1, (unint64_t)v2);
  *(_DWORD *)v2 = v6;
  a1[7] = v2 + 4;
  a1[8] = v5;
  return result;
}

_QWORD *fnt_NPUSHW(_QWORD *a1)
{
  unsigned __int8 *v1;
  FILE **v3;
  uint64_t v5;
  _WORD *exception;

  v1 = (unsigned __int8 *)a1[8];
  if (a1[46] > (unint64_t)v1 || a1[47] <= (unint64_t)v1)
  {
    v3 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    v5 = *(_QWORD *)(a1[9] + 8);
    if (v5)
      fprintf(*v3, "(glyph = %d)\n", *(_DWORD *)(v5 + 88));
    fputc(10, *v3);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  a1[8] = v1 + 1;
  return fnt_PushSomeWords(a1, *v1);
}

uint64_t fnt_WS(unint64_t *a1)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  FILE **v9;
  uint64_t v10;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v2 = a1[7];
  v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  v3 = v4;
  a1[7] = v2;
  result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  v6 = a1[7];
  v7 = *(int *)(v6 - 4);
  a1[7] = v6 - 4;
  v8 = a1[10];
  if (v7 >= *(unsigned __int16 *)(*(_QWORD *)(v8 + 248) + 18))
  {
    v9 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v7, *(unsigned __int16 *)(*(_QWORD *)(v8 + 248) + 18), 0);
    v10 = *(_QWORD *)(a1[9] + 8);
    if (v10)
      fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
    fputc(10, *v9);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v7) = v3;
  return result;
}

uint64_t fnt_RS(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _DWORD *v7;
  int v8;
  FILE **v9;
  uint64_t v10;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v2 = a1[7];
  v5 = *(int *)(v2 - 4);
  v3 = v2 - 4;
  v4 = v5;
  a1[7] = v3;
  if (v5 >= *(unsigned __int16 *)(*(_QWORD *)(a1[10] + 248) + 18))
  {
    v8 = v4;
    v9 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v8, *(unsigned __int16 *)(*(_QWORD *)(a1[10] + 248) + 18), 0);
    v10 = *(_QWORD *)(a1[9] + 8);
    if (v10)
      fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
    fputc(10, *v9);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  result = CHECK_STACK_POINTER_END((uint64_t)a1, v3);
  v7 = (_DWORD *)a1[7];
  *v7 = *(_DWORD *)(*(_QWORD *)(a1[10] + 16) + 4 * v4);
  a1[7] = (unint64_t)(v7 + 1);
  return result;
}

double fnt_WCVTP(uint64_t a1)
{
  unint64_t v2;
  int v3;
  int v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  FILE **v12;
  uint64_t v13;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  v3 = v4;
  *(_QWORD *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  v6 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(v6 - 4);
  v7 = v8;
  *(_QWORD *)(a1 + 56) = v6 - 4;
  v9 = *(_QWORD *)(a1 + 80);
  if ((v8 & 0x80000000) != 0 || *(_DWORD *)(v9 + 256) <= (int)v7)
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v7, *(_DWORD *)(v9 + 256), 0);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v13)
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * v7) = v3;
  if (v3)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 152))(a1, v7);
    if (v10)
      v11 = v10 == v3;
    else
      v11 = 1;
    if (!v11)
    {
      result = (double)v3 * (double)v3 / (double)v10;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 24) + 4 * v7) = (int)result;
    }
  }
  return result;
}

uint64_t fnt_WCVTF(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  FILE **v10;
  uint64_t v11;
  _WORD *exception;

  v2 = a1[10];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v3 = a1[7];
  v5 = *(_DWORD *)(v3 - 4);
  v3 -= 4;
  v4 = v5;
  a1[7] = v3;
  result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v3);
  v7 = a1[7];
  v9 = *(_DWORD *)(v7 - 4);
  v8 = v9;
  a1[7] = v7 - 4;
  if ((v9 & 0x80000000) != 0 || *(_DWORD *)(a1[10] + 256) <= (int)v8)
  {
    v10 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v8, *(_DWORD *)(a1[10] + 256), 0);
    v11 = *(_QWORD *)(a1[9] + 8);
    if (v11)
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    fputc(10, *v10);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v8) = (unint64_t)(*(int *)(v2 + 100) * (uint64_t)v4 + 0x8000) >> 16;
  return result;
}

uint64_t fnt_RCVT(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  _DWORD *v7;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  v3 = v4;
  *(_QWORD *)(a1 + 56) = v2;
  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 256);
  result = CHECK_STACK_POINTER_END(a1, v2);
  if ((int)v4 >= v5)
  {
    v7 = *(_DWORD **)(a1 + 56);
    *v7 = 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 152))(a1, v3);
    v7 = *(_DWORD **)(a1 + 56);
    *v7 = result;
  }
  *(_QWORD *)(a1 + 56) = v7 + 1;
  return result;
}

uint64_t fnt_GC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  _DWORD *v8;
  FILE **v9;
  uint64_t v10;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned int *)(v2 - 4);
  *(_QWORD *)(a1 + 56) = v2 - 4;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || (v3 & 0x80000000) != 0 || (int)v3 >= *(_DWORD *)(v4 + 112))
  {
    v9 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: element NULL; pt out of range(A)");
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v10)
      fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
    fputc(10, *v9);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if ((*(_BYTE *)(a1 + 363) & 1) != 0)
    v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 136))(a1, *(unsigned int *)(*(_QWORD *)(v4 + 56) + 4 * v3), *(unsigned int *)(*(_QWORD *)(v4 + 64) + 4 * v3));
  else
    v5 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, *(unsigned int *)(*(_QWORD *)(v4 + 8) + 4 * v3), *(unsigned int *)(*(_QWORD *)(v4 + 16) + 4 * v3));
  v6 = v5;
  result = CHECK_STACK_POINTER_END(a1, *(_QWORD *)(a1 + 56));
  v8 = *(_DWORD **)(a1 + 56);
  *v8 = v6;
  *(_QWORD *)(a1 + 56) = v8 + 1;
  return result;
}

uint64_t fnt_SCFS(uint64_t a1)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  FILE **v12;
  uint64_t v13;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  v3 = v4;
  *(_QWORD *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned int *)(v5 - 4);
  *(_QWORD *)(a1 + 56) = v5 - 4;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7 || (v6 & 0x80000000) != 0 || (int)v6 >= *(_DWORD *)(v7 + 112))
  {
    v12 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: element NULL; pt out of range(B)");
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v13)
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, *(unsigned int *)(*(_QWORD *)(v7 + 8) + 4 * v6), *(unsigned int *)(*(_QWORD *)(v7 + 16) + 4 * v6));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 120))(a1, v7, v6, (v3 - v8));
  if (v7 == **(_QWORD **)(a1 + 72))
  {
    v10 = *(_QWORD *)(v7 + 16);
    v11 = *(_QWORD *)(v7 + 64);
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v6) = *(_DWORD *)(*(_QWORD *)(v7 + 8) + 4 * v6);
    *(_DWORD *)(v11 + 4 * v6) = *(_DWORD *)(v10 + 4 * v6);
  }
  return result;
}

uint64_t fnt_MD(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t result;
  FILE **v15;
  uint64_t v16;
  _WORD *exception;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  CHECK_STACK_POINTER_BASE(a1, v2);
  v6 = v2 - 4;
  v7 = *(unsigned int *)(v2 - 4);
  CHECK_STACK_POINTER_BASE(a1, v2 - 4);
  if (v5)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (v8
    || (v11 = *(_DWORD *)(v2 - 8), v9 = (_DWORD *)(v2 - 8), v10 = v11, (v11 & 0x80000000) != 0)
    || (int)v10 >= *(_DWORD *)(v5 + 112)
    || (v7 & 0x80000000) != 0
    || (int)v7 >= *(_DWORD *)(v4 + 112))
  {
    v15 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: ce0 or ce1 NULL; pt1 or pt2 out of range");
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v16)
      fprintf(*v15, "(glyph = %d)\n", *(_DWORD *)(v16 + 88));
    fputc(10, *v15);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if ((*(_BYTE *)(a1 + 363) & 1) != 0)
  {
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v10) - *(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * v7)), (*(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v10) - *(_DWORD *)(*(_QWORD *)(v4 + 16) + 4 * v7)));
  }
  else
  {
    if (*(_BYTE *)(a1 + 362))
      CorrectUnscaledOutline(a1);
    v12 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(a1 + 136))(a1, (unint64_t)((*(__int16 *)(*(_QWORD *)(v5 + 72) + 2 * v10)- *(__int16 *)(*(_QWORD *)(v4 + 72) + 2 * v7))* (uint64_t)*(int *)(v3 + 100)+ 0x8000) >> 16, (unint64_t)((*(__int16 *)(*(_QWORD *)(v5 + 80) + 2 * v10)- *(__int16 *)(*(_QWORD *)(v4 + 80) + 2 * v7))* (uint64_t)*(int *)(v3 + 104)+ 0x8000) >> 16);
  }
  v13 = v12;
  result = CHECK_STACK_POINTER_END(a1, (unint64_t)v9);
  *v9 = v13;
  *(_QWORD *)(a1 + 56) = v6;
  return result;
}

uint64_t fnt_MPPEM(_QWORD *a1)
{
  unsigned __int16 v2;
  uint64_t result;
  _DWORD *v4;

  v2 = fnt_ProjectIntegerPPEM((uint64_t)a1);
  GrowStackForPush(a1, 1);
  result = CHECK_STACK_POINTER_END((uint64_t)a1, a1[7]);
  v4 = (_DWORD *)a1[7];
  *v4 = v2;
  a1[7] = v4 + 1;
  return result;
}

uint64_t fnt_ProjectIntegerPPEM(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;

  v1 = *(_QWORD *)(a1 + 80);
  v2 = *(_DWORD *)(v1 + 92);
  v3 = *(_DWORD *)(v1 + 96);
  if (v2 != v3 && *(_WORD *)(a1 + 26))
  {
    if (*(_WORD *)(a1 + 24))
      v2 = (sqrt((double)(v3 * *(__int16 *)(a1 + 26)) * (double)(v3 * *(__int16 *)(a1 + 26))+ (double)(int)(v2 * *(__int16 *)(a1 + 24)) * (double)(int)(v2 * *(__int16 *)(a1 + 24)))+ 0x2000) >> 14;
    else
      LOWORD(v2) = v3;
  }
  return (__int16)v2;
}

uint64_t fnt_GETINFO(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int *v10;

  v2 = *(_QWORD *)(a1 + 80);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(v3 - 4);
  v4 = v3 - 4;
  v5 = v6;
  *(_QWORD *)(a1 + 56) = v4;
  v7 = ((int)(v6 << 31) >> 31) & 7;
  if ((v6 & 2) != 0)
    v7 = v7 & 0xFFFFFEFF | ((*(_BYTE *)(v2 + 267) & 1) << 8);
  if ((v5 & 4) != 0)
    v7 = v7 & 0xFFFFFDFF | ((((*(_BYTE *)(v2 + 267) & 2) >> 1) & 1) << 9);
  v8 = v7 & 0xFFFFF3FF | (((v5 >> 3) & 3) << 10);
  result = CHECK_STACK_POINTER_END(a1, v4);
  v10 = *(unsigned int **)(a1 + 56);
  *v10 = v8;
  *(_QWORD *)(a1 + 56) = v10 + 1;
  return result;
}

double fnt_GETVARIATION(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  __int16 *v4;
  unint64_t v5;
  double result;
  int v7;
  _DWORD *v8;
  _DWORD *v9;

  v2 = a1[10];
  v3 = *(_DWORD *)(v2 + 116);
  if (v3)
  {
    v4 = *(__int16 **)(v2 + 32);
    GrowStackForPush(a1, *(_DWORD *)(v2 + 116));
    v5 = a1[7];
    if (*(_BYTE *)(v2 + 264))
    {
      do
      {
        CHECK_STACK_POINTER_END((uint64_t)a1, v5);
        v7 = *v4++;
        v8 = (_DWORD *)a1[7];
        *v8 = v7;
        v5 = (unint64_t)(v8 + 1);
        a1[7] = v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        CHECK_STACK_POINTER_END((uint64_t)a1, v5);
        v9 = (_DWORD *)a1[7];
        *v9 = 0;
        v5 = (unint64_t)(v9 + 1);
        a1[7] = v5;
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    *(_QWORD *)&result = fnt_IDefPatch((uint64_t)a1).n128_u64[0];
  }
  return result;
}

uint64_t fnt_GETDATA(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t result;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  FILE **v14;
  uint64_t v15;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 - 4);
  v3 = v2 - 4;
  *(_QWORD *)(a1 + 56) = v3;
  if (v4 == 1)
  {
    CHECK_STACK_POINTER_BASE(a1, v3);
    v5 = *(_QWORD *)(a1 + 56);
    v8 = *(_DWORD *)(v5 - 4);
    v6 = v5 - 4;
    v7 = v8;
    *(_QWORD *)(a1 + 56) = v6;
    if (!v8)
    {
      v14 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: fnt_GETDATA - randomFntGetData: N == 0");
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      if (v15)
        fprintf(*v14, "(glyph = %d)\n", *(_DWORD *)(v15 + 88));
      fputc(10, *v14);
      exception = __cxa_allocate_exception(2uLL);
      *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    CHECK_STACK_POINTER_END(a1, v6);
    v9 = *(unsigned int **)(a1 + 56);
    *v9++ = 0x11 % v7;
    *(_QWORD *)(a1 + 56) = v9;
    result = CHECK_STACK_POINTER_END(a1, (unint64_t)v9);
    v11 = *(_DWORD **)(a1 + 56);
    *v11 = 1;
    v12 = v11 + 1;
  }
  else
  {
    result = CHECK_STACK_POINTER_END(a1, v3);
    v13 = *(_DWORD **)(a1 + 56);
    *v13 = 0;
    v12 = v13 + 1;
  }
  *(_QWORD *)(a1 + 56) = v12;
  return result;
}

uint64_t fnt_FLIPON(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 80) + 244) = 1;
  return result;
}

uint64_t fnt_FLIPOFF(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 80) + 244) = 0;
  return result;
}

uint64_t fnt_BinaryOperand(uint64_t a1)
{
  unint64_t v2;
  int *v3;
  int v4;
  uint64_t result;
  int *v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 56);
  CHECK_STACK_POINTER_BASE(a1, v2);
  v3 = (int *)(v2 - 4);
  v4 = *(_DWORD *)(v2 - 4);
  result = CHECK_STACK_POINTER_BASE(a1, v2 - 4);
  v8 = *(_DWORD *)(v2 - 8);
  v6 = (int *)(v2 - 8);
  v7 = v8;
  v9 = *(unsigned __int8 *)(a1 + 363);
  switch(*(_BYTE *)(a1 + 363))
  {
    case 'P':
      v4 = v7 < v4;
      goto LABEL_28;
    case 'Q':
      v4 = v7 <= v4;
      goto LABEL_28;
    case 'R':
      v4 = v7 > v4;
      goto LABEL_28;
    case 'S':
      v4 = v7 >= v4;
      goto LABEL_28;
    case 'T':
      v4 = v7 == v4;
      goto LABEL_28;
    case 'U':
      v10 = v7 == v4;
      goto LABEL_17;
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case '\\':
    case ']':
    case '^':
    case '_':
      goto LABEL_29;
    case 'Z':
      if (v7)
        v10 = v4 == 0;
      else
        v10 = 1;
      goto LABEL_17;
    case '[':
      v10 = (v7 | v4) == 0;
LABEL_17:
      v4 = !v10;
      goto LABEL_28;
      result = CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
      v4 += v7;
      goto LABEL_28;
    case 'a':
      result = CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
      v4 = v7 - v4;
      goto LABEL_28;
    case 'b':
      CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
      result = Div26Dot6(v7, v4);
      goto LABEL_24;
    case 'c':
      CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
      result = Mul26Dot6(v7, v4);
LABEL_24:
      v4 = result;
      goto LABEL_28;
    default:
      if (v9 == 139)
      {
        if (v7 > v4)
          v4 = v7;
      }
      else
      {
        if (v9 != 140)
          goto LABEL_29;
        if (v7 < v4)
          v4 = v7;
      }
      result = CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
LABEL_28:
      *v6 = v4;
      v6 = v3;
LABEL_29:
      *(_QWORD *)(a1 + 56) = v6;
      return result;
  }
}

uint64_t fnt_UnaryOperand(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  _DWORD *v4;
  int v5;
  int v6;
  unsigned int v7;
  _BOOL4 v8;
  BOOL v9;
  _BOOL4 v10;

  v2 = *(_QWORD *)(a1 + 56);
  result = CHECK_STACK_POINTER_BASE(a1, v2);
  v4 = (_DWORD *)(v2 - 4);
  v5 = *(_DWORD *)(v2 - 4);
  v6 = *(unsigned __int8 *)(a1 + 363);
  switch(*(_BYTE *)(a1 + 363))
  {
    case '\\':
      v5 = v5 == 0;
      goto LABEL_20;
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'b':
    case 'c':
      goto LABEL_21;
    case 'd':
      result = CHECK_STACK_POINTER_END(a1, v2 - 4);
      if (v5 < 0)
        v5 = -v5;
      goto LABEL_20;
    case 'e':
      result = CHECK_STACK_POINTER_END(a1, v2 - 4);
      v5 = -v5;
      goto LABEL_20;
    case 'f':
      goto LABEL_19;
    case 'g':
      v5 += 63;
LABEL_19:
      v5 &= 0xFFFFFFC0;
      result = CHECK_STACK_POINTER_END(a1, v2 - 4);
      goto LABEL_20;
    default:
      if ((v6 - 86) >= 2)
        goto LABEL_21;
      if (v5 < 0)
        v7 = -((32 - v5) & 0xFFFFFFC0);
      else
        v7 = (v5 + 32) & 0xFFFFFFC0;
      v8 = v6 == 86;
      if (v7)
        v9 = ((v7 ^ v5) & 0x80000000) != 0;
      else
        v9 = 0;
      v10 = v9 || (v7 & 0x40) == 0;
      v5 = v8 ^ v10;
LABEL_20:
      *v4 = v5;
      v4 = (_DWORD *)v2;
LABEL_21:
      *(_QWORD *)(a1 + 56) = v4;
      return result;
  }
}

uint64_t fnt_IF(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  FILE **v9;
  uint64_t v10;
  _WORD *exception;

  result = CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 - 4);
  *(_QWORD *)(a1 + 56) = v3 - 4;
  if (!v4)
  {
    v5 = *(unsigned __int8 **)(a1 + 64);
    v6 = 1;
    do
    {
      if (*(_QWORD *)(a1 + 368) > (unint64_t)v5 || *(_QWORD *)(a1 + 376) <= (unint64_t)v5)
      {
        v9 = (FILE **)MEMORY[0x1E0C80C10];
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        if (v10)
          fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
        fputc(10, *v9);
        exception = __cxa_allocate_exception(2uLL);
        *exception = 1;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      }
      v7 = v5 + 1;
      v8 = *v5;
      *(_BYTE *)(a1 + 363) = v8;
      switch(v8)
      {
        case 27:
          if (v6 == 1)
            goto LABEL_14;
          break;
        case 88:
          ++v6;
          break;
        case 89:
          --v6;
          break;
        default:
          result = (uint64_t)fnt_SkipPushCrap(a1, v7);
          v7 = (unsigned __int8 *)result;
          break;
      }
      v5 = v7;
    }
    while (v6);
LABEL_14:
    *(_QWORD *)(a1 + 64) = v7;
  }
  return result;
}

unsigned __int8 *fnt_ELSE(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  int v4;
  FILE **v5;
  uint64_t v6;
  _WORD *exception;

  result = *(unsigned __int8 **)(a1 + 64);
  v3 = 1;
  do
  {
    while (1)
    {
      if (*(_QWORD *)(a1 + 368) > (unint64_t)result || *(_QWORD *)(a1 + 376) <= (unint64_t)result)
      {
        v5 = (FILE **)MEMORY[0x1E0C80C10];
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
        if (v6)
          fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
        fputc(10, *v5);
        exception = __cxa_allocate_exception(2uLL);
        *exception = 1;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      }
      v4 = *result;
      *(_BYTE *)(a1 + 363) = v4;
      if (v4 == 88)
        break;
      if (v4 == 89)
      {
        --v3;
        ++result;
        if (!v3)
          goto LABEL_11;
      }
      else
      {
        result = fnt_SkipPushCrap(a1, result + 1);
      }
    }
    ++v3;
    ++result;
  }
  while (v3);
LABEL_11:
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

uint64_t fnt_JMPR(unint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  FILE **v5;
  uint64_t v6;
  _WORD *exception;

  result = CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v3 = a1[7];
  v4 = *(int *)(v3 - 4) + a1[8] - 1;
  a1[7] = v3 - 4;
  a1[8] = v4;
  if (v4 < a1[46] || v4 >= a1[48])
  {
    v5 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the font data");
    v6 = *(_QWORD *)(a1[9] + 8);
    if (v6)
      fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
    fputc(10, *v5);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return result;
}

uint64_t fnt_JROT(_QWORD *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  FILE **v7;
  FILE *v8;
  const char *v9;
  uint64_t v10;
  _WORD *exception;

  v2 = a1[7];
  result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  if (*(_DWORD *)(v2 - 4))
  {
    result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2 - 4);
    v5 = *(int *)(v2 - 8);
    v4 = v2 - 8;
    v6 = v5 + a1[8] - 1;
    a1[8] = v6;
    if (v6 < a1[46] || v6 >= a1[48])
    {
      v7 = (FILE **)MEMORY[0x1E0C80C10];
      v8 = (FILE *)*MEMORY[0x1E0C80C10];
      v9 = "ERROR: trying to access beyond the font data";
      goto LABEL_9;
    }
  }
  else
  {
    v4 = v2 - 8;
    if (*(_QWORD *)(a1[10] + 8) > v4 || a1[6] <= v4)
    {
      v7 = (FILE **)MEMORY[0x1E0C80C10];
      v8 = (FILE *)*MEMORY[0x1E0C80C10];
      v9 = "ERROR: trying to access outside the stack";
LABEL_9:
      fprintf(v8, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v9);
      v10 = *(_QWORD *)(a1[9] + 8);
      if (v10)
        fprintf(*v7, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
      fputc(10, *v7);
      exception = __cxa_allocate_exception(2uLL);
      *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
  }
  a1[7] = v4;
  return result;
}

uint64_t fnt_JROF(_QWORD *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  FILE **v5;
  FILE *v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _WORD *exception;

  v2 = a1[7];
  result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  if (*(_DWORD *)(v2 - 4))
  {
    v4 = v2 - 8;
    if (*(_QWORD *)(a1[10] + 8) > v4 || a1[6] <= v4)
    {
      v5 = (FILE **)MEMORY[0x1E0C80C10];
      v6 = (FILE *)*MEMORY[0x1E0C80C10];
      v7 = "ERROR: trying to access outside the stack";
      goto LABEL_9;
    }
  }
  else
  {
    result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2 - 4);
    v8 = *(int *)(v2 - 8);
    v4 = v2 - 8;
    v9 = v8 + a1[8] - 1;
    a1[8] = v9;
    if (v9 < a1[46] || v9 >= a1[48])
    {
      v5 = (FILE **)MEMORY[0x1E0C80C10];
      v6 = (FILE *)*MEMORY[0x1E0C80C10];
      v7 = "ERROR: trying to access beyond the font data";
LABEL_9:
      fprintf(v6, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v7);
      v10 = *(_QWORD *)(a1[9] + 8);
      if (v10)
        fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
      fputc(10, *v5);
      exception = __cxa_allocate_exception(2uLL);
      *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
  }
  a1[7] = v4;
  return result;
}

uint64_t fnt_ROUND(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  int v5;
  uint64_t result;
  _DWORD *v7;
  FILE **v8;
  uint64_t v9;
  _WORD *exception;

  v2 = *(_QWORD *)(a1 + 80);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v3 = (unsigned int *)(*(_QWORD *)(a1 + 56) - 4);
  *(_QWORD *)(a1 + 56) = v3;
  v4 = *(unsigned __int8 *)(a1 + 363);
  if ((v4 - 108) <= 0xFFFFFFFB)
  {
    v8 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE: %d not in range (%d - %d), interpreter value out of range", v4, 107, 104);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v9)
      fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    fputc(10, *v8);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 216))(*v3, a1);
  result = CHECK_STACK_POINTER_END(a1, *(_QWORD *)(a1 + 56));
  v7 = *(_DWORD **)(a1 + 56);
  *v7 = v5;
  *(_QWORD *)(a1 + 56) = v7 + 1;
  return result;
}

uint64_t fnt_NROUND(uint64_t a1)
{
  int *v2;
  int v3;
  int v4;
  uint64_t result;
  _DWORD *v6;
  FILE **v7;
  uint64_t v8;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v2 = (int *)(*(_QWORD *)(a1 + 56) - 4);
  *(_QWORD *)(a1 + 56) = v2;
  v3 = *(unsigned __int8 *)(a1 + 363);
  if ((v3 - 112) <= 0xFFFFFFFB)
  {
    v7 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE: %d not in range (%d - %d), interpreter value out of range", v3, 111, 108);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v8)
      fprintf(*v7, "(glyph = %d)\n", *(_DWORD *)(v8 + 88));
    fputc(10, *v7);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v4 = *v2;
  result = CHECK_STACK_POINTER_END(a1, (unint64_t)v2);
  v6 = *(_DWORD **)(a1 + 56);
  *v6 = v4;
  *(_QWORD *)(a1 + 56) = v6 + 1;
  return result;
}

uint64_t fnt_MDRP(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t, unint64_t, unint64_t);
  unint64_t v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t result;
  FILE **v23;
  uint64_t v24;
  FILE *v25;
  FILE **v26;
  uint64_t v27;
  _WORD *exception;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    v23 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
LABEL_39:
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v24)
      fprintf(*v23, "(glyph = %d)\n", *(_DWORD *)(v24 + 88));
    v25 = *v23;
LABEL_45:
    fputc(10, v25);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v5 = *(unsigned int *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 80);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(unsigned int *)(v7 - 4);
  *(_QWORD *)(a1 + 56) = v7 - 4;
  CHECK_ELEMENTPTR(a1, (int *)v3);
  if ((v5 & 0x80000000) != 0 || *(_DWORD *)(v3 + 112) <= (int)v5)
  {
    v23 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
    goto LABEL_39;
  }
  v9 = *(_DWORD *)(v2 + 112);
  if ((v8 & 0x80000000) != 0 || v9 <= (int)v8)
  {
    v26 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v8, v9, 0);
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v27)
      fprintf(*v26, "(glyph = %d)\n", *(_DWORD *)(v27 + 88));
    v25 = *v26;
    goto LABEL_45;
  }
  v10 = **(_QWORD **)(a1 + 72);
  if (v3 == v10 || v2 == v10)
  {
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 136))(a1, (*(_DWORD *)(*(_QWORD *)(v2 + 56) + 4 * v8) - *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v5)), (*(_DWORD *)(*(_QWORD *)(v2 + 64) + 4 * v8) - *(_DWORD *)(*(_QWORD *)(v3 + 64) + 4 * v5)));
  }
  else
  {
    if (*(_BYTE *)(a1 + 362))
      CorrectUnscaledOutline(a1);
    v14 = *(_DWORD *)(v6 + 100);
    v13 = *(_DWORD *)(v6 + 104);
    v15 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t))(a1 + 136);
    if (v14 == v13)
    {
      v16 = (unint64_t)(*(int *)(v6 + 100)
                             * (uint64_t)(int)v15(a1, (*(__int16 *)(*(_QWORD *)(v2 + 72) + 2 * v8)- *(__int16 *)(*(_QWORD *)(v3 + 72) + 2 * v5)), (*(__int16 *)(*(_QWORD *)(v2 + 80) + 2 * v8)- *(__int16 *)(*(_QWORD *)(v3 + 80) + 2 * v5)))+ 0x8000) >> 16;
      goto LABEL_21;
    }
    v12 = v15(a1, (unint64_t)((*(__int16 *)(*(_QWORD *)(v2 + 72) + 2 * v8) - *(__int16 *)(*(_QWORD *)(v3 + 72) + 2 * v5))* (uint64_t)v14+ 0x8000) >> 16, (unint64_t)((*(__int16 *)(*(_QWORD *)(v2 + 80) + 2 * v8) - *(__int16 *)(*(_QWORD *)(v3 + 80) + 2 * v5))* (uint64_t)v13+ 0x8000) >> 16);
  }
  v16 = v12;
LABEL_21:
  if (*(_DWORD *)(v6 + 196))
    v16 = fnt_CheckSingleWidth(v16, a1);
  v17 = *(_BYTE *)(a1 + 363);
  v18 = v16;
  if ((v17 & 4) != 0)
  {
    v18 = (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 216))(v16, a1);
    v17 = *(_BYTE *)(a1 + 363);
  }
  if ((v17 & 8) != 0)
  {
    v19 = *(_DWORD *)(v6 + 212);
    if (v18 >= -v19)
      v20 = -v19;
    else
      v20 = v18;
    if (v18 > v19)
      v19 = v18;
    if ((v16 & 0x80000000) == 0)
      v18 = v19;
    else
      v18 = v20;
  }
  v21 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, (*(_DWORD *)(*(_QWORD *)(v2 + 8) + 4 * v8) - *(_DWORD *)(*(_QWORD *)(v3 + 8) + 4 * v5)), (*(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v8) - *(_DWORD *)(*(_QWORD *)(v3 + 16) + 4 * v5)));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 120))(a1, v2, v8, (v18 - v21));
  *(_DWORD *)(a1 + 100) = v5;
  *(_DWORD *)(a1 + 104) = v8;
  if ((*(_BYTE *)(a1 + 363) & 0x10) != 0)
    *(_DWORD *)(a1 + 96) = v8;
  return result;
}

uint64_t fnt_CheckSingleWidth(unsigned int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;

  v3 = *(_QWORD *)(a2 + 80);
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(a2 + 160))(a2);
  if ((a1 & 0x80000000) != 0)
  {
    v6 = a1 + result;
    if ((int)(a1 + result) <= 0)
      v6 = -v6;
    if (v6 < *(_DWORD *)(v3 + 196))
      return -(int)result;
    else
      return a1;
  }
  else
  {
    v5 = a1 - result;
    if ((int)(a1 - result) < 0)
      v5 = result - a1;
    if (v5 >= *(_DWORD *)(v3 + 196))
      return a1;
    else
      return result;
  }
}

uint64_t fnt_MIRP(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD);
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t result;
  FILE **v27;
  uint64_t v28;
  _WORD *exception;
  uint64_t v30;

  v2 = *(unsigned int *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 152);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(v7 - 4);
  *(_QWORD *)(a1 + 56) = v7 - 4;
  v9 = v6(a1, v8);
  CHECK_STACK_POINTER_BASE(a1, *(_QWORD *)(a1 + 56));
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned int *)(v10 - 4);
  *(_QWORD *)(a1 + 56) = v10 - 4;
  if (!v4
    || !v5
    || (v2 & 0x80000000) != 0
    || (int)v2 >= *(_DWORD *)(v5 + 112)
    || (v11 & 0x80000000) != 0
    || (int)v11 >= *(_DWORD *)(v4 + 112))
  {
    v27 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: CE0 or CE1 NULL; pt0 or ptNum out of range");
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    if (v28)
      fprintf(*v27, "(glyph = %d)\n", *(_DWORD *)(v28 + 88));
    fputc(10, *v27);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  if (*(_DWORD *)(v3 + 196))
    v9 = fnt_CheckSingleWidth(v9, a1);
  v30 = v3;
  if (v4 == **(_QWORD **)(a1 + 72))
  {
    v14 = *(_QWORD *)(v5 + 56);
    v15 = *(_QWORD *)(v5 + 64);
    v12 = *(_QWORD *)(v4 + 56);
    v13 = *(_QWORD *)(v4 + 64);
    *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)(v14 + 4 * v2);
    *(_DWORD *)(v13 + 4 * v11) = *(_DWORD *)(v15 + 4 * v2);
    *(_DWORD *)(v12 + 4 * v11) += ShortFracMul(v9, *(__int16 *)(a1 + 24));
    *(_DWORD *)(v13 + 4 * v11) += ShortFracMul(v9, *(__int16 *)(a1 + 26));
    v16 = *(_QWORD *)(v5 + 16);
    v17 = *(_QWORD *)(v4 + 16);
    *(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * v11) = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v2);
    *(_DWORD *)(v17 + 4 * v11) = *(_DWORD *)(v16 + 4 * v2);
  }
  else
  {
    v12 = *(_QWORD *)(v4 + 56);
    v13 = *(_QWORD *)(v4 + 64);
    v14 = *(_QWORD *)(v5 + 56);
    v15 = *(_QWORD *)(v5 + 64);
  }
  LODWORD(v18) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 136))(a1, (*(_DWORD *)(v12 + 4 * v11) - *(_DWORD *)(v14 + 4 * v2)), (*(_DWORD *)(v13 + 4 * v11) - *(_DWORD *)(v15 + 4 * v2)));
  v19 = v18;
  if ((int)(v18 ^ v9) < 0 && *(_BYTE *)(v30 + 244) != 0)
    v9 = -v9;
  v21 = *(_BYTE *)(a1 + 363);
  if ((v21 & 4) != 0)
  {
    v22 = v9 - v18;
    if (v9 - (int)v18 < 0)
      v22 = v18 - v9;
    if (v22 <= *(_DWORD *)(v30 + 192))
      v18 = v9;
    else
      v18 = v18;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 216))(v18, a1);
    v21 = *(_BYTE *)(a1 + 363);
  }
  if ((v21 & 8) != 0)
  {
    v23 = *(_DWORD *)(v30 + 212);
    if (v9 >= -v23)
      v24 = -v23;
    else
      v24 = v9;
    if (v9 > v23)
      v23 = v9;
    if (v19 >= 0)
      v9 = v23;
    else
      v9 = v24;
  }
  v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 128))(a1, (*(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * v11) - *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v2)), (*(_DWORD *)(*(_QWORD *)(v4 + 16) + 4 * v11) - *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v2)));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 120))(a1, v4, v11, (v9 - v25));
  *(_DWORD *)(a1 + 100) = v2;
  *(_DWORD *)(a1 + 104) = v11;
  if ((*(_BYTE *)(a1 + 363) & 0x10) != 0)
    *(_DWORD *)(a1 + 96) = v11;
  return result;
}

uint64_t fnt_CALL(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  FILE **v6;
  uint64_t v7;
  uint64_t v8;
  FILE **v10;
  uint64_t v11;
  _WORD *exception;

  v2 = a1[10];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v3 = a1[7];
  v4 = *(int *)(v3 - 4);
  a1[7] = v3 - 4;
  v5 = *(unsigned __int16 *)(*(_QWORD *)(a1[10] + 248) + 20);
  if (v4 >= v5)
  {
    v6 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_FDEF: %d is out of range (0 - %d)", v4, v5);
    v7 = *(_QWORD *)(a1[9] + 8);
    if (v7)
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    fputc(10, *v6);
    if (*(unsigned __int16 *)(*(_QWORD *)(a1[10] + 248) + 20) + 6 <= v4)
    {
LABEL_10:
      exception = __cxa_allocate_exception(2uLL);
      *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
  }
  v8 = *(_QWORD *)(v2 + 48);
  if (!v8)
  {
    v10 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: globalGS->funcDef == 0");
    v11 = *(_QWORD *)(a1[9] + 8);
    if (v11)
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    fputc(10, *v10);
    goto LABEL_10;
  }
  return fnt_CALL_Common((uint64_t)a1, (int *)(v8 + 8 * v4), 1);
}

uint64_t fnt_CALL_Common(uint64_t result, int *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  unsigned int v9;
  FILE **v10;
  uint64_t v11;
  _WORD *exception;

  v3 = result;
  v4 = *((unsigned __int16 *)a2 + 3);
  if (v4 >= 2)
  {
    v10 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_PROGRAM: %d is neither a fontProgramIndex(%d) nor preProgramIndex(%d)", v4, 0, 1);
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + 8);
    if (v11)
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    fputc(10, *v10);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(result + 80) + 8 * *((unsigned __int16 *)a2 + 3) + 64);
  if (v5 && a3 >= 1)
  {
    v6 = v5 + *a2;
    v7 = v6 + *((unsigned __int16 *)a2 + 2);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 144);
    v9 = a3 + 1;
    do
    {
      result = v8(v3, v6, v7);
      --v9;
    }
    while (v9 > 1);
  }
  return result;
}

unsigned __int8 *fnt_FDEF(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  FILE **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *result;
  FILE **v15;
  uint64_t v16;
  _WORD *exception;
  FILE **v18;
  uint64_t v19;

  v2 = a1[10];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v3 = a1[7];
  v5 = *(_DWORD *)(v3 - 4);
  v4 = v5;
  a1[7] = v3 - 4;
  v6 = *(unsigned int *)(v2 + 128);
  v7 = *(unsigned __int16 *)(*(_QWORD *)(a1[10] + 248) + 20);
  if (v5 >= v7)
  {
    v8 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_FDEF: %d is out of range (0 - %d)", v4, v7);
    v9 = *(_QWORD *)(a1[9] + 8);
    if (v9)
      fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    fputc(10, *v8);
    if (*(unsigned __int16 *)(*(_QWORD *)(a1[10] + 248) + 20) + 6 <= v4)
      goto LABEL_20;
  }
  if (v6 >= 2)
  {
    v15 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_PROGRAM: %d is neither a fontProgramIndex(%d) nor preProgramIndex(%d)", v6, 0, 1);
    v16 = *(_QWORD *)(a1[9] + 8);
    if (v16)
      fprintf(*v15, "(glyph = %d)\n", *(_DWORD *)(v16 + 88));
    fputc(10, *v15);
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
LABEL_21:
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v10 = *(_QWORD *)(v2 + 48);
  if (!v10)
  {
    v18 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: globalGS->funcDef == 0(A)");
    v19 = *(_QWORD *)(a1[9] + 8);
    if (v19)
      fprintf(*v18, "(glyph = %d)\n", *(_DWORD *)(v19 + 88));
    fputc(10, *v18);
LABEL_20:
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    goto LABEL_21;
  }
  v11 = (unsigned __int8 *)a1[8];
  if ((v4 & 0x80000000) != 0 || v4 >= *(unsigned __int16 *)(*(_QWORD *)(v2 + 248) + 20))
  {
    result = fnt_FindENDF((uint64_t)a1, v11);
  }
  else
  {
    v12 = v10 + 8 * v4;
    *(_WORD *)(v12 + 6) = v6;
    v13 = *(_QWORD *)(v2 + 8 * v6 + 64);
    if ((_DWORD)v6 == 1)
      *(_BYTE *)(v2 + 265) = 1;
    *(_DWORD *)v12 = (_DWORD)v11 - v13;
    result = fnt_FindENDF((uint64_t)a1, v11);
    *(_WORD *)(v12 + 4) = ~*((_WORD *)a1 + 32) + (_WORD)result;
  }
  a1[8] = (unint64_t)result;
  return result;
}

uint64_t fnt_LOOPCALL(unint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  FILE **v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  int v11;
  FILE **v13;
  uint64_t v14;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v2 = a1[7];
  v3 = *(int *)(v2 - 4);
  a1[7] = v2 - 4;
  v4 = a1[10];
  v5 = *(unsigned __int16 *)(*(_QWORD *)(v4 + 248) + 20);
  if (v3 >= v5)
  {
    v6 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_FDEF: %d is out of range (0 - %d)", v3, v5);
    v7 = *(_QWORD *)(a1[9] + 8);
    if (v7)
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    fputc(10, *v6);
    v4 = a1[10];
    if (*(unsigned __int16 *)(*(_QWORD *)(v4 + 248) + 20) + 6 <= v3)
    {
LABEL_10:
      exception = __cxa_allocate_exception(2uLL);
      *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
  }
  v8 = *(_QWORD *)(v4 + 48);
  if (!v8)
  {
    v13 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: globalGS->funcDef == 0(B)");
    v14 = *(_QWORD *)(a1[9] + 8);
    if (v14)
      fprintf(*v13, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    fputc(10, *v13);
    goto LABEL_10;
  }
  v9 = (int *)(v8 + 8 * v3);
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v10 = a1[7];
  v11 = *(_DWORD *)(v10 - 4);
  a1[7] = v10 - 4;
  return fnt_CALL_Common((uint64_t)a1, v9, v11);
}

uint64_t fnt_DELTAP1(uint64_t a1)
{
  return fnt_DeltaEngine((_QWORD *)a1, *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(a1 + 120), *(__int16 *)(*(_QWORD *)(a1 + 80) + 238), *(_WORD *)(*(_QWORD *)(a1 + 80) + 240));
}

uint64_t fnt_DeltaEngine(_QWORD *a1, uint64_t (*a2)(_QWORD *, _QWORD, _QWORD, _QWORD), int a3, char a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v25;
  int v26;
  FILE **v27;
  uint64_t v28;
  _WORD *exception;

  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  v8 = a1[7];
  v10 = *(_DWORD *)(v8 - 4);
  v9 = v8 - 4;
  v11 = 2 * v10;
  v12 = v9 - 8 * v10;
  a1[7] = v12;
  v13 = *(_QWORD *)(a1[10] + 8);
  if (v13 > v12)
    goto LABEL_30;
  v14 = a1[6];
  if (v14 <= v12)
    goto LABEL_30;
  result = fnt_ProjectIntegerPPEM((uint64_t)a1);
  if ((result - a3) <= 0xF)
  {
    if (v13 > v9 || v14 <= v9)
    {
LABEL_30:
      v27 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access outside the stack");
      v28 = *(_QWORD *)(a1[9] + 8);
      if (v28)
        fprintf(*v27, "(glyph = %d)\n", *(_DWORD *)(v28 + 88));
      fputc(10, *v27);
      exception = __cxa_allocate_exception(2uLL);
      *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    v17 = 16 * (result - a3);
    v18 = v11 >> 1;
    v19 = (v11 >> 1) & 0xFFFFFFFE;
    if (v19 < 3)
    {
      v20 = 0;
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = v20 + v19;
        if ((int)(*(_DWORD *)(v12 + 4 * v21) & 0xFFFFFFF0) < v17)
          v20 = v21;
        v18 >>= 1;
        v19 = v18 & 0x7FFFFFFE;
      }
      while ((v18 & 0x7FFFFFFE) > 2);
    }
    if (v20 < v11)
    {
      while (1)
      {
        v22 = v20;
        while (1)
        {
          v23 = *(_DWORD *)(v12 + 4 * v22);
          if ((v23 & 0xFFFFFFF0) == v17)
            break;
          v22 += 2;
          if ((int)(v23 & 0xFFFFFFF0) > v17 || (int)v22 >= v11)
            return result;
        }
        v25 = *(_DWORD *)(v12 + 4 * v22) & 0xF;
        v26 = v25 <= 7 ? -8 : -7;
        result = a2(a1, *a1, *(unsigned int *)(v12 + 4 * ((int)v22 + 1)), ((int)((v26 + v25) << 6) >> a4));
        v20 = v22 + 2;
        if ((int)v22 + 2 >= v11)
          break;
        v12 = a1[7];
      }
    }
  }
  return result;
}

uint64_t fnt_DELTAP2(uint64_t a1)
{
  return fnt_DeltaEngine((_QWORD *)a1, *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(a1 + 120), (__int16)(*(_WORD *)(*(_QWORD *)(a1 + 80) + 238) + 16), *(_WORD *)(*(_QWORD *)(a1 + 80) + 240));
}

uint64_t fnt_DELTAP3(uint64_t a1)
{
  return fnt_DeltaEngine((_QWORD *)a1, *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(a1 + 120), (__int16)(*(_WORD *)(*(_QWORD *)(a1 + 80) + 238) + 32), *(_WORD *)(*(_QWORD *)(a1 + 80) + 240));
}

uint64_t fnt_DELTAC1(_QWORD *a1)
{
  return fnt_DeltaEngine(a1, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD))fnt_ChangeCvt, *(__int16 *)(a1[10] + 238), *(_WORD *)(a1[10] + 240));
}

uint64_t fnt_DELTAC2(_QWORD *a1)
{
  return fnt_DeltaEngine(a1, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD))fnt_ChangeCvt, (__int16)(*(_WORD *)(a1[10] + 238) + 16), *(_WORD *)(a1[10] + 240));
}

uint64_t fnt_DELTAC3(_QWORD *a1)
{
  return fnt_DeltaEngine(a1, (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD))fnt_ChangeCvt, (__int16)(*(_WORD *)(a1[10] + 238) + 32), *(_WORD *)(a1[10] + 240));
}

void TStrikeDescription::TStrikeDescription(TStrikeDescription *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E617C288;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E617C288;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

uint64_t TFontScaler::CreateFontScaler@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_DWORD *)(result + 72);
  if (v4 == 33)
    goto LABEL_9;
  v5 = result;
  if ((v4 - 9) > 4)
  {
    if ((v4 - 14) <= 0xF && a2 != 0)
    {
      v6 = (_QWORD *)operator new();
      result = TType1Scaler::TType1Scaler(v6, v5);
      goto LABEL_10;
    }
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  v6 = (_QWORD *)operator new();
  result = TTrueTypeScaler::TTrueTypeScaler(v6, v5);
LABEL_10:
  *a3 = v6;
  return result;
}

void sub_1B09F0948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10F1C40CF1E458ELL);
  _Unwind_Resume(a1);
}

uint64_t TConcreteFontScaler::TConcreteFontScaler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v6;
  int v7;
  int v8;
  int v10;

  *(_QWORD *)a1 = off_1E617C318;
  v6 = TScalerStrike::TScalerStrike(a1 + 8, a2);
  *(_QWORD *)a1 = off_1E617C1A8;
  *(_QWORD *)(a1 + 168) = a3;
  v10 = -1431655766;
  v7 = (*(uint64_t (**)(uint64_t, int *, __n128))(a3 + 8))(a2, &v10, v6);
  v8 = v10;
  if (v7)
    v8 = 0;
  *(_DWORD *)(a1 + 176) = v8;
  *(_DWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1B09F0A04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  TScalerStrike *v2;
  uint64_t v3;

  *v1 = v3;
  TScalerStrike::~TScalerStrike(v2);
  _Unwind_Resume(a1);
}

double TConcreteFontScaler::GetGlyphDeviceBounds(TConcreteFontScaler *this, __int16 a2)
{
  __int128 v2;
  __int128 v4;
  __int128 v5;
  int v6;
  _QWORD v7[3];
  __int16 v8;

  v8 = a2;
  v7[0] = 0x626D61706D726472;
  v7[1] = 0;
  v7[2] = 0;
  v6 = -1431655766;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v4 = v2;
  v5 = v2;
  if ((*(unsigned int (**)(_QWORD, char *, _QWORD *, uint64_t, __int16 *, __int128 *, uint64_t))(*((_QWORD *)this + 21) + 80))(*((unsigned int *)this + 44), (char *)this + 8, v7, 1, &v8, &v4, 36)|| !((unsigned __int16)v5 | WORD1(v5)))
  {
    return *MEMORY[0x1E0C9D648];
  }
  else
  {
    return (double)SDWORD2(v4) * 0.0000152587891;
  }
}

double TConcreteFontScaler::GetGlyphDeviceVerticalTranslate(TConcreteFontScaler *this, __int16 a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  unsigned int *v20;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  __int128 v28;
  unsigned int (*v29)(uint64_t, __int128 *, _QWORD *, uint64_t, __int16 *, __int128 *, uint64_t);
  uint64_t v30;
  double v31;
  int v33;
  int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _OWORD v39[2];
  _BYTE v40[28];
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  _BYTE v44[128];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  _QWORD v49[3];
  unint64_t v50;
  __int16 v51;

  v51 = a2;
  v49[2] = 0;
  v50 = 0xAAAAAAAA00000000;
  v49[0] = 0x706174686D726472;
  v49[1] = &v50;
  v48 = -1431655766;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46 = v3;
  v47 = v3;
  if ((*(unsigned int (**)(_QWORD, char *, _QWORD *, uint64_t, __int16 *, __int128 *, uint64_t))(*((_QWORD *)this + 21) + 80))(*((unsigned int *)this + 44), (char *)this + 8, v49, 1, &v51, &v46, 36))
  {
    return *MEMORY[0x1E0C9D820];
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43 = v4;
  *(_OWORD *)v44 = v4;
  *(_OWORD *)&v44[112] = v4;
  v45 = v4;
  *(_OWORD *)&v44[80] = v4;
  *(_OWORD *)&v44[96] = v4;
  *(_OWORD *)&v44[48] = v4;
  *(_OWORD *)&v44[64] = v4;
  *(_OWORD *)&v44[16] = v4;
  *(_OWORD *)&v44[32] = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)&v43 + 1) = *((_QWORD *)this + 2);
  *(_QWORD *)v44 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *((_OWORD *)this + 3);
  *(_OWORD *)&v44[8] = *((_OWORD *)this + 2);
  *(_OWORD *)&v44[24] = v8;
  *(_OWORD *)&v44[40] = *((_OWORD *)this + 4);
  *(_QWORD *)&v43 = &off_1E617BCB0;
  *(_DWORD *)&v44[56] = *((_DWORD *)this + 20);
  *(_OWORD *)&v44[60] = *(_OWORD *)((char *)this + 84);
  *(_OWORD *)&v44[76] = *(_OWORD *)((char *)this + 100);
  *(_OWORD *)&v44[92] = *(_OWORD *)((char *)this + 116);
  *(_OWORD *)&v44[104] = *((_OWORD *)this + 8);
  *(_QWORD *)&v44[120] = 0;
  v45 = 0uLL;
  v10 = (_BYTE *)*((_QWORD *)this + 18);
  v9 = (_BYTE *)*((_QWORD *)this + 19);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    *(_QWORD *)&v44[120] = std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(v11 >> 3);
    *((_QWORD *)&v45 + 1) = *(_QWORD *)&v44[120] + 8 * v12;
    memmove(*(void **)&v44[120], v10, v11);
    *(_QWORD *)&v45 = *(_QWORD *)&v44[120] + 8 * (v11 >> 3);
  }
  *(_QWORD *)&v44[24] = &v44[60];
  MScalerCache::SetCacheData((MScalerCache *)&v43, 0, &v41);
  v13 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v17 = *(_OWORD *)(*(_QWORD *)&v44[24] + 16);
  v16 = *(_OWORD *)(*(_QWORD *)&v44[24] + 32);
  v18 = **(_OWORD **)&v44[24];
  *(_OWORD *)&v40[12] = *(_OWORD *)(*(_QWORD *)&v44[24] + 44);
  v39[1] = v17;
  *(_OWORD *)v40 = v16;
  v39[0] = v18;
  *(_QWORD *)&v44[24] = v39;
  v19 = v18;
  LODWORD(v39[0]) = v18 ^ 8;
  v20 = (unsigned int *)((char *)this + 180);
  if (!atomic_load((unsigned int *)this + 45))
  {
    v22 = *((_QWORD *)this + 21);
    LODWORD(v36) = -1431655766;
    v23 = (*(uint64_t (**)(__int128 *, __int128 *))(v22 + 8))(&v43, &v36);
    v24 = v36;
    if (v23)
      v24 = 0;
    v25 = __ldaxr(v20);
    if (v25)
    {
      __clrex();
      goto LABEL_19;
    }
    if (__stlxr(v24, v20))
    {
LABEL_19:
      while (1)
      {
        v26 = __ldaxr(v20);
        if (v26 != v25)
          break;
        if (__stlxr(v24, v20))
          goto LABEL_23;
        v27 = 1;
LABEL_24:
        v25 = v26;
        if ((v27 & 1) != 0)
          goto LABEL_25;
      }
      __clrex();
LABEL_23:
      v27 = 0;
      goto LABEL_24;
    }
  }
LABEL_25:
  v38 = -1431655766;
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36 = v28;
  v37 = v28;
  v29 = *(unsigned int (**)(uint64_t, __int128 *, _QWORD *, uint64_t, __int16 *, __int128 *, uint64_t))(*((_QWORD *)this + 21) + 80);
  v30 = atomic_load(v20);
  if (!v29(v30, &v43, v49, 1, &v51, &v36, 36))
  {
    v33 = DWORD2(v46);
    v34 = DWORD2(v36);
    if (DWORD2(v46) == DWORD2(v36))
    {
      if ((v19 & 8) != 0)
      {
        v35 = -(WORD1(v37) << 16 >> 1);
        DWORD2(v46) = v35;
        goto LABEL_36;
      }
      v34 = -(WORD1(v47) << 16 >> 1);
    }
    else if ((v19 & 8) != 0)
    {
      v35 = DWORD2(v46);
      v33 = DWORD2(v36);
      goto LABEL_36;
    }
    v35 = v34;
LABEL_36:
    v31 = (double)v35 * 0.0000152587891 - (double)v33 * 0.0000152587891;
    TScalerStrike::~TScalerStrike((TScalerStrike *)&v43);
    return v31;
  }
  TScalerStrike::~TScalerStrike((TScalerStrike *)&v43);
  return *MEMORY[0x1E0C9D820];
}

void sub_1B09F0E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  TScalerStrike::~TScalerStrike((TScalerStrike *)&a25);
  _Unwind_Resume(a1);
}

BOOL TConcreteFontScaler::GetGlyphIdealMetrics(TConcreteFontScaler *this, __int16 a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5)
{
  int v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;

  v18 = a2;
  v14 = 1835430499;
  v16 = 0;
  v15 = 0;
  v17 = 0;
  memset(v13, 170, sizeof(v13));
  v8 = (*(uint64_t (**)(_QWORD, char *, int *, uint64_t, __int16 *, _QWORD *, uint64_t))(*((_QWORD *)this + 21)
                                                                                               + 80))(*((unsigned int *)this + 44), (char *)this + 8, &v14, 1, &v18, v13, 24);
  if (!v8)
  {
    if (a3)
    {
      v9.i64[0] = SLODWORD(v13[0]);
      v9.i64[1] = SHIDWORD(v13[0]);
      *a3 = vmulq_f64(vcvtq_f64_s64(v9), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a4)
    {
      v10.i64[0] = SLODWORD(v13[1]);
      v10.i64[1] = SHIDWORD(v13[1]);
      *a4 = vmulq_f64(vcvtq_f64_s64(v10), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a5)
    {
      v11.i64[0] = SLODWORD(v13[2]);
      v11.i64[1] = SHIDWORD(v13[2]);
      *a5 = vmulq_f64(vcvtq_f64_s64(v11), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
  }
  return v8 == 0;
}

BOOL TConcreteFontScaler::GetGlyphDeviceMetrics(TConcreteFontScaler *this, __int16 a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, CGRect *a6)
{
  __int128 v10;
  int v11;
  unint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  CGFloat v16;
  unint64_t v17;
  CGFloat v18;
  __int128 v20;
  __int128 v21;
  int v22;
  _QWORD v23[3];
  __int16 v24;

  v24 = a2;
  v23[0] = 0x626D61706D726472;
  v23[1] = 0;
  v23[2] = 0;
  v22 = -1431655766;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = v10;
  v21 = v10;
  v11 = (*(uint64_t (**)(_QWORD, char *, _QWORD *, uint64_t, __int16 *, __int128 *, uint64_t))(*((_QWORD *)this + 21) + 80))(*((unsigned int *)this + 44), (char *)this + 8, v23, 1, &v24, &v20, 36);
  if (!v11)
  {
    if (a3)
    {
      v13.i64[0] = (int)v20;
      v13.i64[1] = SDWORD1(v20);
      *a3 = vmulq_f64(vcvtq_f64_s64(v13), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a4)
    {
      v14.i64[0] = SDWORD1(v21);
      v14.i64[1] = SDWORD2(v21);
      *a4 = vmulq_f64(vcvtq_f64_s64(v14), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a5)
    {
      v15.i64[0] = SHIDWORD(v21);
      v15.i64[1] = v22;
      *a5 = vmulq_f64(vcvtq_f64_s64(v15), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a6)
    {
      LOWORD(v12) = v21;
      v16 = (double)v12;
      *(double *)&v17 = (double)SHIDWORD(v20);
      v18 = (double)SHIDWORD(v20) * 0.0000152587891 - v16;
      LOWORD(v17) = WORD1(v21);
      a6->origin.x = (double)SDWORD2(v20) * 0.0000152587891;
      a6->origin.y = v18;
      a6->size.width = (double)v17;
      a6->size.height = v16;
    }
  }
  return v11 == 0;
}

uint64_t TConcreteFontScaler::GetControlPoints(TConcreteFontScaler *this, __int16 a2, unsigned int *a3, CGPoint *a4)
{
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  unsigned int *v40;
  _QWORD v41[3];
  uint64_t v42;
  __int16 v43;
  void *__p;
  char *v45;
  char *v46;
  _BYTE v47[2048];
  _QWORD v48[3];

  v48[1] = *MEMORY[0x1E0C80C00];
  v43 = a2;
  if ((*(unsigned int (**)(TConcreteFontScaler *))(*(_QWORD *)this + 192))(this))
    return 0;
  v40 = a3;
  v42 = 0;
  memset(v47, 170, sizeof(v47));
  v7 = 0;
  __p = 0;
  v45 = 0;
  v46 = 0;
  v48[0] = v47;
  v41[0] = 0x7061746867787074;
  v41[1] = 0;
  v41[2] = 0;
  do
  {
    if (v7 == 4)
      goto LABEL_52;
    v8 = (*(uint64_t (**)(_QWORD, char *, _QWORD *, uint64_t, __int16 *))(*((_QWORD *)this + 21) + 88))(*((unsigned int *)this + 44), (char *)this + 8, v41, 1, &v43);
    v9 = v42;
    if (v8)
      v10 = 0;
    else
      v10 = (_DWORD)v42 == 0;
    if (!v10)
      goto LABEL_37;
    v11 = (2 * HIDWORD(v42));
    v12 = v45;
    v13 = (v45 - (_BYTE *)__p) >> 3;
    if (v11 <= v13)
    {
      if (v11 >= v13)
        goto LABEL_23;
      v18 = (char *)__p + 8 * v11;
      goto LABEL_22;
    }
    v14 = v11 - v13;
    if (v11 - v13 <= (v46 - v45) >> 3)
    {
      bzero(v45, 8 * v14);
      v18 = &v12[8 * v14];
LABEL_22:
      v45 = v18;
      goto LABEL_23;
    }
    v15 = v46 - (_BYTE *)__p;
    if ((v46 - (_BYTE *)__p) >> 2 > v11)
      v11 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v11;
    v17 = (char *)v48[0];
    if (v48[0] + 8 * v16 <= (unint64_t)v48)
    {
      v48[0] += 8 * v16;
    }
    else
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v17 = (char *)operator new(8 * v16);
    }
    v19 = &v17[8 * v13];
    bzero(v19, 8 * v14);
    v21 = (char *)__p;
    v20 = v45;
    v22 = v19;
    if (v45 != __p)
    {
      do
      {
        v23 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v22 - 1) = v23;
        v22 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)__p;
    }
    __p = v22;
    v45 = &v19[8 * v14];
    v24 = v46;
    v46 = &v17[8 * v16];
    if (v20)
    {
      if (v47 <= v20 && v48 > (_QWORD *)v20)
      {
        if (v24 == (char *)v48[0])
          v48[0] = v20;
      }
      else
      {
        operator delete(v20);
      }
    }
LABEL_23:
    ++v7;
    v9 = v42;
  }
  while (!(_DWORD)v42);
  v8 = 0;
LABEL_37:
  if (v8 || v9 != 1)
  {
LABEL_52:
    std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&__p);
    return 0;
  }
  v26 = *(_DWORD *)__p;
  if (*(_DWORD *)__p)
  {
    v27 = 0;
    v28 = 0;
    v29 = (unsigned int *)((char *)__p + 4);
    v30 = v40;
    while (1)
    {
      v31 = *v29;
      v32 = v28 + v31;
      if (__CFADD__(v28, (_DWORD)v31))
        break;
      v33 = (uint64_t *)((char *)v29 + (((v31 + 31) >> 3) & 0x1FFFFFFC) + 4);
      if (a4)
      {
        LODWORD(v34) = *v40 - v28;
        if (*v40 > v28)
        {
          if (v34 >= v31)
            v34 = v31;
          else
            v34 = v34;
          if ((_DWORD)v34)
          {
            v35 = v33;
            do
            {
              v36 = *v35++;
              v37.i64[0] = (int)v36;
              v37.i64[1] = SHIDWORD(v36);
              a4[v28++] = (CGPoint)vmulq_f64(vcvtq_f64_s64(v37), (float64x2_t)xmmword_1B0AAC010);
              --v34;
            }
            while (v34);
          }
        }
      }
      v29 = (unsigned int *)&v33[v31];
      ++v27;
      v28 = v32;
      if (v27 == v26)
        goto LABEL_56;
    }
    v38 = 0;
  }
  else
  {
    v32 = 0;
    v30 = v40;
LABEL_56:
    *v30 = v32;
    v38 = 1;
  }
  std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&__p);
  return v38;
}

void sub_1B09F1400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TConcreteFontScaler::GetGlyphFromName(TConcreteFontScaler *this, const char *a2)
{
  int v2;
  unsigned __int16 v3;
  int v5;
  unsigned __int16 v6;

  v6 = 0;
  v5 = 2;
  v2 = (*(uint64_t (**)(_QWORD, const char *, int *, unsigned __int16 *))(*((_QWORD *)this + 21) + 56))(*((_QWORD *)this + 9), a2, &v5, &v6);
  v3 = v6;
  if (v2)
    return 0;
  return v3;
}

double TConcreteFontScaler::GetVariationScalar(TConcreteFontScaler *this, unsigned int a2)
{
  double v2;
  unsigned __int16 v4;
  __int16 v6;
  __int128 v7;
  void **v9;
  _OWORD v10[9];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = 0.0;
  if (a2 <= 0x7FFE && *(_QWORD *)(*((_QWORD *)this + 21) + 176) != 0)
  {
    v4 = a2;
    v11 = 0xAAAAAAAAAAAAAAAALL;
    v6 = a2 + 1;
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[7] = v7;
    v10[8] = v7;
    v10[5] = v7;
    v10[6] = v7;
    v10[3] = v7;
    v10[4] = v7;
    v10[1] = v7;
    v10[2] = v7;
    v10[0] = v7;
    LODWORD(v9) = 0;
    std::vector<int,TInlineBufferAllocator<int,30ul>>::vector(v10, (unsigned __int16)(a2 + 1), &v9);
    if (!(*(unsigned int (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 21) + 176))((char *)this + 8, v6, *(_QWORD *)&v10[0]))
    {
      if (v4 >= (unint64_t)((uint64_t)(*((_QWORD *)&v10[0] + 1) - *(_QWORD *)&v10[0]) >> 2))
        __break(1u);
      v2 = (double)*(int *)(*(_QWORD *)&v10[0] + 4 * v4) * 0.0000152587891;
    }
    v9 = (void **)v10;
    std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&v9);
  }
  return v2;
}

void sub_1B09F157C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t TConcreteFontScaler::GetVariationScalars(TConcreteFontScaler *this, uint64_t a2, double *a3)
{
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  void **v12;
  _OWORD v13[9];
  unint64_t v14;
  uint64_t v15;

  result = 0;
  v15 = *MEMORY[0x1E0C80C00];
  if ((int)a2 >= 1 && *(_QWORD *)(*((_QWORD *)this + 21) + 176))
  {
    v14 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v13[7] = v7;
    v13[8] = v7;
    v13[5] = v7;
    v13[6] = v7;
    v13[3] = v7;
    v13[4] = v7;
    v13[1] = v7;
    v13[2] = v7;
    v13[0] = v7;
    v8 = (unsigned __int16)a2;
    LODWORD(v12) = 0;
    std::vector<int,TInlineBufferAllocator<int,30ul>>::vector(v13, (unsigned __int16)a2, &v12);
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD))(*((_QWORD *)this + 21) + 176))((char *)this + 8, a2, *(_QWORD *)&v13[0]))
    {
      v12 = (void **)v13;
      std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&v12);
      return 0;
    }
    else
    {
      v9 = *(int **)&v13[0];
      v10 = (uint64_t)(*((_QWORD *)&v13[0] + 1) - *(_QWORD *)&v13[0]) >> 2;
      do
      {
        if (!v10)
          __break(1u);
        v11 = *v9++;
        *a3++ = (double)v11 * 0.0000152587891;
        --v10;
        --v8;
      }
      while (v8);
      v12 = (void **)v13;
      std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&v12);
      return 1;
    }
  }
  return result;
}

void sub_1B09F16D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&a10);
  _Unwind_Resume(a1);
}

void *TConcreteFontScaler::GetVariationValues(TConcreteFontScaler *this, uint64_t a2)
{
  unint64_t *v3;
  void *v4;
  size_t v6;
  unint64_t v7;

  if (!*(_QWORD *)(*((_QWORD *)this + 21) + 184))
    return 0;
  v3 = (unint64_t *)((char *)this + 184);
  v4 = (void *)atomic_load((unint64_t *)this + 23);
  if (!v4)
  {
    if (a2 < 0)
      v6 = -1;
    else
      v6 = 2 * a2;
    v4 = (void *)operator new[]();
    bzero(v4, v6);
    if ((*(unsigned int (**)(char *, uint64_t, void *))(*((_QWORD *)this + 21) + 184))((char *)this + 8, a2, v4))
    {
      v7 = 0;
    }
    else
    {
      while (1)
      {
        v7 = __ldaxr(v3);
        if (v7)
          break;
        if (!__stlxr((unint64_t)v4, v3))
          return v4;
      }
      __clrex();
    }
    MEMORY[0x1B5E0CD14](v4, 0x1000C80BDFB0063);
    return (void *)v7;
  }
  return v4;
}

void sub_1B09F17E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD14](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t TConcreteFontScaler::GetTupleCount(TConcreteFontScaler *this)
{
  uint64_t (*v1)(char *, __int16 *);
  int v2;
  uint64_t result;
  __int16 v5;

  v1 = *(uint64_t (**)(char *, __int16 *))(*((_QWORD *)this + 21) + 192);
  if (!v1)
    return 0;
  v5 = -21846;
  v2 = v1((char *)this + 8, &v5);
  result = v5;
  if (v2 || (int)result <= 0)
    return 0;
  return result;
}

uint64_t TConcreteFontScaler::StreamPSEncoding(TConcreteFontScaler *this, unsigned int *a2, const void *a3, const unsigned int *a4, const unsigned __int16 *a5)
{
  uint64_t result;

  result = (*(uint64_t (**)(TConcreteFontScaler *))(*(_QWORD *)this + 128))(this);
  if ((_DWORD)result)
    return (*(unsigned int (**)(char *, unsigned int *, const void *, const unsigned int *, const unsigned __int16 *, _QWORD))(*((_QWORD *)this + 21) + 160))((char *)this + 8, a2, a3, a4, a5, 0) == 0;
  return result;
}

uint64_t TTrueTypeScaler::TTrueTypeScaler(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (TTrueTypeScaler::GetTrueTypeScaler(void)::once != -1)
    dispatch_once(&TTrueTypeScaler::GetTrueTypeScaler(void)::once, &__block_literal_global_3);
  result = TConcreteFontScaler::TConcreteFontScaler((uint64_t)a1, a2, TTrueTypeScaler::sProtocol);
  *a1 = &off_1E617C0C8;
  return result;
}

uint64_t TTrueTypeScaler::GetType1Encoding(TTrueTypeScaler *this, unsigned __int16 *a2)
{
  _DWORD *v4;
  __CFData *Mutable;
  int v6;
  uint64_t v7;
  UInt8 *MutableBytePtr;
  size_t Length;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  char *v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  const char *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  char *v24;
  unsigned __int16 v25;
  uint64_t i;
  const char *v27;
  size_t v28;
  unsigned __int16 v29;
  UInt8 *v30;
  void *v31;
  int v32;
  char v33[4];
  _QWORD v34[258];

  v34[256] = *MEMORY[0x1E0C80C00];
  v32 = 391;
  v4 = malloc_type_calloc(1uLL, 0x26uLL, 0x108004086473A5EuLL);
  v31 = v4;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
  {
    v7 = 0;
    goto LABEL_7;
  }
  bzero(a2, 0x200uLL);
  *v4 = 1;
  *(_QWORD *)(v4 + 5) = AppendBytes;
  *(_QWORD *)(v4 + 7) = Mutable;
  if (!(*(unsigned int (**)(TTrueTypeScaler *, int *))(*(_QWORD *)this + 128))(this, &v32))
    goto LABEL_4;
  v6 = (*(uint64_t (**)(char *, int *, void **, _QWORD, _QWORD, uint64_t))(*((_QWORD *)this + 21) + 160))((char *)this + 8, &v32, &v31, 0, 0, 1);
  CFDataAppendBytes(Mutable, (const UInt8 *)"\n", 1);
  if (v6)
    goto LABEL_4;
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  Length = CFDataGetLength(Mutable);
  bzero(v34, 0x800uLL);
  v11 = strnstr((const char *)MutableBytePtr, "dup", Length);
  if (!v11)
  {
LABEL_42:
    for (i = 0; i != 256; ++i)
    {
      v27 = (const char *)v34[i];
      if (v27)
      {
        if (!strncmp((const char *)v34[i], "gid", 3uLL))
        {
          v29 = atoi_l(v27 + 3, 0);
        }
        else
        {
          v28 = strlen(v27);
          v29 = (*(uint64_t (**)(TTrueTypeScaler *, const char *, size_t))(*(_QWORD *)this + 120))(this, v27, v28);
        }
        a2[i] = v29;
      }
    }
    v7 = 1;
    goto LABEL_5;
  }
  v30 = &MutableBytePtr[Length];
  v12 = MEMORY[0x1E0C80978];
  while (2)
  {
    v13 = 0;
    *(_DWORD *)v33 = -1431655766;
    v14 = v11 + 3;
    v15 = v33;
    while (1)
    {
      v16 = &v11[v13];
      v17 = v11[v13 + 3];
      if (!v11[v13 + 3] || v17 == 47)
        break;
      v18 = v11[v13 + 3];
      if ((char)v17 < 0)
      {
        v19 = __maskrune((char)v17, 0x4000uLL);
        v18 = v16[3];
        if (v19)
        {
LABEL_15:
          if ((v18 & 0x80) != 0 || (*(_DWORD *)(v12 + 4 * v18 + 60) & 0x400) == 0)
            goto LABEL_23;
          goto LABEL_21;
        }
      }
      else if ((*(_DWORD *)(v12 + 4 * (char)v17 + 60) & 0x4000) != 0)
      {
        goto LABEL_15;
      }
      if ((v18 & 0x80) != 0 || (*(_DWORD *)(v12 + 4 * v18 + 60) & 0x400) == 0)
        break;
LABEL_21:
      if (v15 - v33 <= 2)
        *v15++ = v18;
LABEL_23:
      ++v13;
      ++v14;
    }
    *v15 = 0;
    if (!v33[0])
    {
      if (v13 == -3)
        v24 = v11 + 1;
      else
        v24 = v11;
      v20 = &v24[v13 + 3];
LABEL_41:
      v11 = strnstr(v20, "dup", v30 - (UInt8 *)v20);
      if (!v11)
        goto LABEL_42;
      continue;
    }
    break;
  }
  v20 = v16 + 3;
  if (v16[3] != 47)
  {
    v21 = 0;
    if (!v16[3])
      goto LABEL_39;
    goto LABEL_38;
  }
  v21 = (uint64_t)&v11[v13 + 4];
  do
  {
    v22 = v14[1];
    if ((v22 & 0x80000000) != 0)
      v23 = __maskrune(v22, 0x4000uLL);
    else
      v23 = *(_DWORD *)(v12 + 4 * v22 + 60) & 0x4000;
    ++v14;
  }
  while (!v23);
  v20 = v14;
  if (*v14)
LABEL_38:
    *v20++ = 0;
LABEL_39:
  v25 = atoi_l(v33, 0);
  if ((v25 & 0xFF00) == 0)
  {
    v34[v25] = v21;
    goto LABEL_41;
  }
LABEL_4:
  v7 = 0;
LABEL_5:
  CFRelease(Mutable);
  v4 = v31;
LABEL_7:
  free(v4);
  return v7;
}

void sub_1B09F1D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  free(a11);
  _Unwind_Resume(a1);
}

uint64_t TType1Scaler::TType1Scaler(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (TType1Scaler::GetType1Scaler(void)::once != -1)
    dispatch_once(&TType1Scaler::GetType1Scaler(void)::once, &__block_literal_global_8);
  result = TConcreteFontScaler::TConcreteFontScaler((uint64_t)a1, a2, TType1Scaler::sProtocol);
  *a1 = &off_1E617BFE8;
  return result;
}

void ___ZN12TType1Scaler14GetType1ScalerEv_block_invoke()
{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  char *v3;
  _DWORD *exception;
  char __dst[1024];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memcpy(__dst, "/System/Library/PrivateFrameworks/FontServices.framework/lib", sizeof(__dst));
  strlcat(__dst, "Type1Scaler", 0x400uLL);
  strlcat(__dst, ".dylib", 0x400uLL);
  v0 = dlopen(__dst, 5);
  if (v0)
  {
    v1 = (uint64_t (*)(void))dlsym(v0, "Type1ScalerOpen");
    if (v1)
    {
      v2 = *(_QWORD *)(v1() + 72);
      TType1Scaler::sProtocol = v2;
      goto LABEL_6;
    }
  }
  else
  {
    v3 = dlerror();
    syslog(3, "Loading lib%s.dylib: %s", "Type1Scaler", v3);
  }
  v2 = TType1Scaler::sProtocol;
LABEL_6:
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 1;
  }
}

BOOL TType1Scaler::GetType1Encoding(TType1Scaler *this, unsigned __int16 *a2)
{
  unsigned int (*v2)(_QWORD, unsigned __int16 *, char *);
  _BOOL8 result;
  char v4;

  v2 = *(unsigned int (**)(_QWORD, unsigned __int16 *, char *))(TType1Scaler::sProtocol + 200);
  result = 0;
  if (v2)
  {
    v4 = -86;
    if (!v2(*((_QWORD *)this + 9), a2, &v4))
      return 1;
  }
  return result;
}

void TScalerStrike::TScalerStrike(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, __int128 *a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void **v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  int v27;
  double v28;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E617BCB0;
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v10 = *a5;
  v11 = a5[1];
  v12 = a5[2];
  v13 = *(__int128 *)((char *)a5 + 44);
  *(_QWORD *)(a1 + 136) = 0;
  v14 = (void **)(a1 + 136);
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 108) = v12;
  *(_OWORD *)(a1 + 92) = v11;
  *(_OWORD *)(a1 + 76) = v10;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  if (!a3)
    goto LABEL_11;
  v15 = a3;
  v16 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(a3);
  v18 = &v16[8 * v17];
  bzero(v16, 8 * v15);
  v19 = &v16[8 * v15];
  v21 = *(char **)(a1 + 136);
  v20 = *(char **)(a1 + 144);
  if (v20 != v21)
  {
    do
    {
      v22 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *((_QWORD *)v16 - 1) = v22;
      v16 -= 8;
    }
    while (v20 != v21);
    v20 = (char *)*v14;
  }
  *(_QWORD *)(a1 + 136) = v16;
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v18;
  if (v20)
  {
    operator delete(v20);
    v16 = (char *)*v14;
  }
  *(_QWORD *)(a1 + 32) = v16;
  v23 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v23)
  {
    v24 = (uint64_t)(*(_QWORD *)(a1 + 144) - (_QWORD)v16) >> 3;
    v25 = (_QWORD *)(a4 + 8);
    v26 = v16 + 4;
    while (v24)
    {
      v27 = *((_DWORD *)v25 - 2);
      v28 = *(double *)v25;
      v25 += 2;
      *(v26 - 1) = v27;
      *v26 = vcvtd_n_s64_f64(v28, 0x10uLL);
      v26 += 2;
      --v24;
      if (!--v23)
        goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
LABEL_11:
    *(_QWORD *)(a1 + 40) = a1 + 76;
    *(_QWORD *)(a1 + 64) = a2;
  }
}

void sub_1B09F2090(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    v1[18] = v5;
    operator delete(v5);
  }
  *v1 = &off_1E617B870;
  std::shared_ptr<cacheStrike>::~shared_ptr[abi:fe180100](v2);
  _Unwind_Resume(a1);
}

__n128 TScalerStrike::TScalerStrike(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  v3 = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = &off_1E617B870;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)a1 = &off_1E617C288;
  v6 = *(_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)a1 = &off_1E617BCB0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 76);
  v9 = *(_OWORD *)(a2 + 92);
  v10 = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 108) = v10;
  *(_OWORD *)(a1 + 92) = v9;
  *(_OWORD *)(a1 + 76) = v8;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  result = *(__n128 *)(a2 + 136);
  *(__n128 *)(a1 + 136) = result;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 76;
  return result;
}

uint64_t TConcreteFontScaler::IsType1(TConcreteFontScaler *this)
{
  return 0;
}

uint64_t TConcreteFontScaler::GetATSCompatibleMetrics(TConcreteFontScaler *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8)
{
  __int128 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _OWORD v25[4];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];

  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v29[12] = v16;
  v28 = v16;
  *(_OWORD *)v29 = v16;
  v26 = v16;
  v27 = v16;
  v25[2] = v16;
  v25[3] = v16;
  v25[0] = v16;
  v25[1] = v16;
  if ((*(unsigned int (**)(_QWORD, char *, _OWORD *))(*((_QWORD *)this + 21) + 16))(*((unsigned int *)this + 44), (char *)this + 8, v25))
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    v17 = v26;
    v18 = DWORD1(v26);
    v19 = DWORD2(v26);
    v20 = *(_DWORD *)&v29[8];
    v21 = *(_DWORD *)&v29[12];
    v22 = *(_DWORD *)&v29[16];
    v23 = *(_DWORD *)&v29[20];
  }
  *a2 = v17;
  *a3 = v18;
  *a4 = v19;
  *a5 = v20;
  *a6 = v21;
  *a7 = v22;
  *a8 = v23;
  return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9));
}

uint64_t TConcreteFontScaler::GetNativeCurveType(TConcreteFontScaler *this)
{
  return 0;
}

uint64_t TConcreteFontScaler::GetNeedsPix4Bitmap(TConcreteFontScaler *this)
{
  return 0;
}

uint64_t TTrueTypeScaler::GetNeedsPix4Bitmap(TTrueTypeScaler *this)
{
  return 0;
}

uint64_t TType1Scaler::IsType1(TType1Scaler *this)
{
  return 1;
}

uint64_t TType1Scaler::GetNativeCurveType(TType1Scaler *this)
{
  return 1;
}

uint64_t TType1Scaler::GetNeedsPix4Bitmap(TType1Scaler *this)
{
  return 1;
}

void std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 2072);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 2072))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,2048ul>>::__append(_QWORD *a1, size_t a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;

  v6 = a1 + 1;
  v4 = (char *)a1[1];
  v5 = v6[1];
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      v12 = &v4[a2];
      bzero(v4, a2);
      v4 = v12;
    }
    a1[1] = v4;
  }
  else
  {
    v7 = &v4[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v9 = v5 - *a1;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      v11 = (void *)a1[259];
      if ((char *)v11 + v10 <= (char *)(a1 + 259))
        a1[259] = (char *)v11 + v10;
      else
        v11 = operator new(v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v7[(_QWORD)v11];
    v14 = (char *)v11 + v10;
    v15 = &v13[a2];
    bzero(v13, a2);
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != (char *)*a1)
    {
      do
      {
        v18 = *--v16;
        *--v13 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    v19 = a1[2];
    a1[2] = v14;
    if (v16)
    {
      v20 = (char *)(a1 + 259);
      if (a1 + 3 <= (_QWORD *)v16 && v20 > v16)
      {
        if (v19 == *(_QWORD *)v20)
          *(_QWORD *)v20 = v16;
      }
      else
      {
        operator delete(v16);
      }
    }
  }
}

void std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v3;
  BOOL v4;
  BOOL v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    v3 = v1 + 18;
    if (v1 + 3 <= v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[18])
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(8 * a1);
}

void TConcreteFontScaler::~TConcreteFontScaler(TConcreteFontScaler *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E617C1A8;
  v2 = *((_QWORD *)this + 23);
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C80BDFB0063);
  *(_QWORD *)this = off_1E617C318;
  TScalerStrike::~TScalerStrike((TConcreteFontScaler *)((char *)this + 8));
}

_QWORD *std::vector<unsigned char,TInlineBufferAllocator<unsigned char,2048ul>>::vector(_QWORD *a1, size_t __sz, _BYTE *a3)
{
  _BYTE *v4;
  size_t v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  v4 = a1 + 3;
  a1[2] = 0;
  a1[259] = v4;
  if (__sz)
  {
    v6 = __sz;
    if (&v4[__sz] <= (_BYTE *)a1 + 2072)
      a1[259] = &v4[__sz];
    else
      v4 = operator new(__sz);
    *a1 = v4;
    a1[1] = v4;
    v7 = &v4[v6];
    a1[2] = &v4[v6];
    do
    {
      *v4++ = *a3;
      --v6;
    }
    while (v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B09F25B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int,TInlineBufferAllocator<int,30ul>>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[18] = a1 + 3;
  if (a2)
  {
    std::vector<int,TInlineBufferAllocator<int,30ul>>::__vallocate[abi:fe180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B09F2648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<int,TInlineBufferAllocator<int,30ul>>::__vallocate[abi:fe180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 62)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  result = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

uint64_t sbit_CalculateTransformSpaceNeeded(memoryContext *a1, unsigned int a2)
{
  unsigned int TableParts;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _WORD *exception;
  void *v13;

  v13 = (void *)0xAAAAAAAAAAAAAAAALL;
  TableParts = ScalerGetTableParts(a1, a2, 0, 0, &v13, 0);
  if (TableParts <= 7)
    goto LABEL_20;
  if (*(_DWORD *)v13 == 512)
  {
    v4 = bswap32(*((_DWORD *)v13 + 1));
    if (v4 >= (((unint64_t)TableParts - 8) / 0x30))
      v4 = ((unint64_t)TableParts - 8) / 0x30;
    if (v4)
    {
      LODWORD(v5) = 0;
      v6 = (unsigned int *)((char *)v13 + 8);
      while (1)
      {
        v7 = bswap32(*v6);
        if (v7 >= TableParts)
          break;
        v8 = bswap32(v6[1]);
        v9 = TableParts - v7;
        if (v8 >= TableParts)
          v10 = TableParts;
        else
          v10 = v8;
        if (v8 <= v9)
          v9 = v10;
        if (v9 <= v5)
          v5 = v5;
        else
          v5 = v9;
        v6 += 12;
        if (!--v4)
          goto LABEL_19;
      }
LABEL_20:
      exception = __cxa_allocate_exception(2uLL);
      *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
  }
  v5 = 0;
LABEL_19:
  ScalerReleaseFontTable(a1, v13);
  return v5;
}

uint64_t sbit_FontMatch(memoryContext *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int TableParts;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  _BYTE *v23;
  unint64_t v24;
  unsigned int FontTable;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  _BYTE *v34;
  _BYTE *v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  size_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _BYTE *v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int16 *v77;
  double v78;
  _DWORD *v79;
  unsigned __int16 *v80;
  double v81;
  int v82;
  int v83;
  void *v84;
  void *v85;

  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(v10 + 80);
  if ((*(_BYTE *)(v10 + 491) & 2) != 0 && *(_DWORD *)(*(_QWORD *)(a2 + 8) + 112))
    goto LABEL_10;
  v85 = (void *)0xAAAAAAAAAAAAAAAALL;
  if (M3x3Flags((_DWORD *)(v10 + 96)) == 6)
  {
    v12 = *(_DWORD *)(v10 + 88);
    v13 = v12;
  }
  else
  {
    v13 = *(_DWORD *)(v10 + 132);
    v12 = *(_DWORD *)(v10 + 148);
  }
  *(_DWORD *)(v11 + 36) = (v13 + 0x8000) >> 16;
  *(_DWORD *)(v11 + 40) = (v12 + 0x8000) >> 16;
  TableParts = ScalerGetTableParts(a1, *(_DWORD *)(*(_QWORD *)(a2 + 8) + 164), 0, 0, &v85, 0);
  v15 = (unsigned __int8 *)v85;
  if (*(_DWORD *)v85 != 512)
    goto LABEL_9;
  v16 = *((_DWORD *)v85 + 1);
  if (!v16)
    goto LABEL_9;
  v17 = bswap32(v16);
  if (48 * v17 + 8 > TableParts)
    goto LABEL_9;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = *(unsigned __int8 *)(v19 + 152);
  v21 = *(_DWORD *)(v11 + 36);
  if (*(_BYTE *)(v19 + 152) && v21 >= *(__int16 *)(v19 + 140))
  {
    if (v17 <= 1)
      v33 = 1;
    else
      v33 = v17;
    v34 = (char *)v85 + 54;
    while (v21 != *(v34 - 2) || *(_DWORD *)(v11 + 40) != *(v34 - 1) || *v34 != 1)
    {
      v34 += 48;
      if (!--v33)
        goto LABEL_9;
    }
    v22 = v34 - 46;
    goto LABEL_97;
  }
  if (v21 == 1 && *(_DWORD *)(v11 + 40) == 1)
  {
    v22 = (unsigned __int8 *)v85 + 48 * (v17 - 1) + 8;
    goto LABEL_97;
  }
  v84 = (void *)0xAAAAAAAAAAAAAAAALL;
  v23 = (char *)v85 + 54;
  v24 = 1;
  do
  {
    if (*v23 == 1 && v21 == *(v23 - 2))
    {
      if (*(_DWORD *)(v11 + 40) == *(v23 - 1))
        v22 = v23 - 46;
      else
        v22 = 0;
    }
    else
    {
      v22 = 0;
    }
    if (v24 >= v17)
      break;
    ++v24;
    v23 += 48;
  }
  while (!v22);
  if (!v20 && !v22)
  {
    FontTable = ScalerGetFontTable(a1, 1161974595, 0, &v84, 1, 0);
    if (v84)
    {
      v26 = (char *)v84 + FontTable;
      v27 = (char *)v84 + 8;
      if ((char *)v84 + 8 <= v26)
      {
        LODWORD(v28) = bswap32(*((_DWORD *)v84 + 1));
        v29 = &v27[28 * v28];
        if (v29 < v27 || v29 > v26)
        {
          if ((char *)v84 + 36 > v26)
            goto LABEL_41;
          v28 = ((unint64_t)FontTable - 8) / 0x1C;
        }
        if ((_DWORD)v28)
        {
          v31 = v28;
          v32 = (unsigned __int8 *)v84 + 35;
          while (*(_DWORD *)(v11 + 36) != *(v32 - 3) || *(_DWORD *)(v11 + 40) != *(v32 - 2))
          {
            v32 += 28;
            if (!--v31)
              goto LABEL_41;
          }
          v71 = *(v32 - 1);
          v72 = *v32;
          v73 = v15 + 54;
          v74 = 1;
          do
          {
            if (*v73 == 1 && *(v73 - 2) == v71)
            {
              if (*(v73 - 1) == v72)
                v22 = v73 - 46;
              else
                v22 = 0;
            }
            else
            {
              v22 = 0;
            }
            if (v74 >= v17)
              break;
            ++v74;
            v73 += 48;
          }
          while (!v22);
          goto LABEL_42;
        }
      }
LABEL_41:
      v22 = 0;
LABEL_42:
      ScalerReleaseFontTable(a1, v84);
      goto LABEL_53;
    }
    v22 = 0;
  }
LABEL_53:
  if (!v20 && !v22)
  {
    v35 = v15 + 54;
    v36 = 1;
    do
    {
      if (*v35 == 1 && *(v35 - 2) == 2 * *(_DWORD *)(v11 + 36))
      {
        if (*(v35 - 1) == 2 * *(_DWORD *)(v11 + 40))
          v22 = v35 - 46;
        else
          v22 = 0;
      }
      else
      {
        v22 = 0;
      }
      if (v36 >= v17)
        break;
      ++v36;
      v35 += 48;
    }
    while (!v22);
  }
  if (!v20 && !v22)
  {
    v37 = *(_DWORD *)(v11 + 36);
    v38 = *(_DWORD *)(v11 + 40);
    if (((v38 | v37) & 1) != 0)
    {
      v22 = 0;
    }
    else
    {
      v39 = v37 / 2;
      v40 = v38 / 2;
      v41 = v15 + 54;
      v42 = 1;
      do
      {
        if (*v41 == 1 && v39 == *(v41 - 2))
        {
          if (v40 == *(v41 - 1))
            v22 = v41 - 46;
          else
            v22 = 0;
        }
        else
        {
          v22 = 0;
        }
        if (v42 >= v17)
          break;
        ++v42;
        v41 += 48;
      }
      while (!v22);
    }
  }
  if (!v20 && !v22)
  {
    v43 = *(_DWORD *)(v11 + 36);
    v44 = *(_DWORD *)(v11 + 40);
    if (v17 <= 1)
      v45 = 1;
    else
      v45 = v17;
    v46 = v15 + 53;
    v47 = 0x7FFFFFFF;
    do
    {
      v48 = *(v46 - 1);
      v49 = v43 - v48;
      v50 = *v46;
      if (v43 - v48 <= v44 - v50)
        v49 = v44 - v50;
      if (v49 < 0)
        v49 = -v49;
      if (v49 <= v47 && (!v22 || v49 < v47 || v43 < v48 && v44 < v50))
      {
        v22 = v46 - 45;
        v47 = v49;
      }
      v46 += 48;
      --v45;
    }
    while (v45);
  }
  if (!v22)
    goto LABEL_9;
  v19 = *(_QWORD *)(a2 + 8);
LABEL_97:
  v51 = bswap32(*(_DWORD *)v22);
  if (v51 < 0)
    goto LABEL_9;
  v52 = *(_QWORD *)(a2 + 24);
  v53 = *(void **)(v52 + 64);
  v54 = *(int *)(v19 + 168);
  v55 = (char *)&v15[v51];
  v56 = *((_DWORD *)v22 + 2);
  v57 = bswap32(*((_DWORD *)v22 + 1));
  LODWORD(v58) = bswap32(v56);
  *(_DWORD *)(v11 + 56) = v58;
  if (v56)
  {
    v59 = v55 + 8;
    if (v58 <= 1)
      v58 = 1;
    else
      v58 = v58;
    while (v59 <= (char *)&v15[v54] && v57 >= bswap32(*((_DWORD *)v59 - 1)))
    {
      v59 += 8;
      if (!--v58)
        goto LABEL_105;
    }
    goto LABEL_9;
  }
LABEL_105:
  if (v51 >= (int)v54)
    goto LABEL_9;
  v60 = v22[44];
  *(_DWORD *)(v11 + 44) = v60;
  v61 = v22[45];
  *(_DWORD *)(v11 + 48) = v61;
  if (!v60 || !v61)
    goto LABEL_9;
  *(_WORD *)(v11 + 84) = bswap32(*((unsigned __int16 *)v22 + 20)) >> 16;
  *(_WORD *)(v11 + 86) = bswap32(*((unsigned __int16 *)v22 + 21)) >> 16;
  *(_DWORD *)(v11 + 56) = bswap32(*((_DWORD *)v22 + 2));
  *(_BYTE *)(v11 + 92) = v22[47];
  v62 = v57 + v51;
  v63 = v54 - v51;
  v64 = v62 <= (int)v54 ? v57 : v63;
  if (!(_DWORD)v64 || v64 > *(_DWORD *)(v52 + 72) - *(_DWORD *)(v52 + 56))
  {
LABEL_9:
    ScalerReleaseFontTable(a1, v15);
LABEL_10:
    result = 0;
    *(_DWORD *)(v11 + 44) = 0;
    *(_DWORD *)(v11 + 48) = 0;
    return result;
  }
  memmove(v53, v55, v64);
  v65 = *(_DWORD *)(v11 + 44);
  v66 = *(_DWORD *)(v11 + 48);
  v67 = *(_DWORD *)(v11 + 4) / v65;
  *(int *)v11 /= v65;
  *(_DWORD *)(v11 + 4) = v67;
  v68 = *(_DWORD *)(v11 + 16) / v66;
  *(int *)(v11 + 12) /= v66;
  *(_DWORD *)(v11 + 16) = v68;
  if (a3)
  {
    v84 = 0;
    v69 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 488);
    v70 = *(__int16 *)(*(_QWORD *)(a2 + 8) + 130) / v65;
    if (v69)
    {
      if (a4 || (ScalerGetFontTable(a1, 1986553185, 0, &v84, 1, 36), (v77 = (unsigned __int16 *)v84) == 0))
      {
        *(_DWORD *)(a3 + 8) = (char)v22[29] << 16;
        *(_DWORD *)a3 = (char)v22[28] << 16;
        *(_DWORD *)(a3 + 20) = (char)v22[31] << 16;
        *(_DWORD *)(a3 + 16) = (char)v22[32] << 16;
        *(_DWORD *)(a3 + 24) = (char)v22[33] << 16;
        *(_QWORD *)(a3 + 36) = v22[30] << 16;
      }
      else
      {
        v78 = (double)(__int16)v70 * 0.0000152587891;
        *(_DWORD *)a3 = vcvtd_n_s64_f64((double)((int)bswap32(*((unsigned __int16 *)v84 + 2)) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 8) = vcvtd_n_s64_f64((double)(((int)bswap32(v77[3]) >> 16) - ((int)bswap32(v77[4]) >> 16))* 0.0000152587891/ v78, 0x10uLL);
        *(_DWORD *)(a3 + 20) = vcvtd_n_s64_f64((double)((int)bswap32(v77[9]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 16) = vcvtd_n_s64_f64((double)((int)bswap32(v77[10]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 28) = 0;
        *(_DWORD *)(a3 + 24) = vcvtd_n_s64_f64((double)((int)bswap32(v77[11]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 36) = vcvtd_n_s64_f64((double)((int)bswap32(v77[4]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 40) = vcvtd_n_s64_f64((double)((int)bswap32(v77[4]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        ScalerReleaseFontTable(a1, v77);
      }
      *(_DWORD *)(a3 + 44) = 0;
      *(_DWORD *)(a3 + 28) = 0;
      *(_DWORD *)(a3 + 32) = 0;
      v79 = (_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 4) = 0;
    }
    else
    {
      if (a4 || (ScalerGetFontTable(a1, 1751672161, 0, &v84, 1, 36), (v80 = (unsigned __int16 *)v84) == 0))
      {
        if ((char)v22[16] < 1)
        {
          v82 = v22[18];
          v76 = ((-21846 * v82 + 10923) >> 17) + ((-21846 * v82 + 10923) >> 31);
          v75 = (60082 * v82) >> 16;
        }
        else
        {
          v75 = v22[16];
          v76 = (char)v22[17];
        }
        *(_DWORD *)(a3 + 12) = v76 << 16;
        *(_DWORD *)(a3 + 4) = v75 << 16;
        *(_DWORD *)(a3 + 20) = (char)v22[19] << 16;
        *(_DWORD *)(a3 + 16) = (char)v22[20] << 16;
        *(_DWORD *)(a3 + 24) = (char)v22[21] << 16;
        *(_DWORD *)(a3 + 32) = v22[18] << 16;
        *(_DWORD *)(a3 + 44) = 0;
      }
      else
      {
        v81 = (double)(__int16)v70 * 0.0000152587891;
        *(_DWORD *)(a3 + 4) = vcvtd_n_s64_f64((double)((int)bswap32(*((unsigned __int16 *)v84 + 2)) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 12) = vcvtd_n_s64_f64((double)(((int)bswap32(v80[3]) >> 16) - ((int)bswap32(v80[4]) >> 16))* 0.0000152587891/ v81, 0x10uLL);
        *(_DWORD *)(a3 + 20) = vcvtd_n_s64_f64((double)((int)bswap32(v80[9]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 16) = vcvtd_n_s64_f64((double)((int)bswap32(v80[10]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 28) = 0;
        *(_DWORD *)(a3 + 24) = vcvtd_n_s64_f64((double)((int)bswap32(v80[11]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 32) = vcvtd_n_s64_f64((double)(bswap32(v80[5]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 44) = vcvtd_n_s64_f64((double)((int)bswap32(v80[4]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        ScalerReleaseFontTable(a1, v80);
      }
      *(_DWORD *)(a3 + 36) = 0;
      *(_DWORD *)(a3 + 40) = 0;
      *(_DWORD *)(a3 + 28) = 0;
      v79 = (_DWORD *)(a3 + 8);
      *(_DWORD *)a3 = 0;
    }
    *v79 = 0;
    if (a5)
    {
      v83 = M3x3Flags((_DWORD *)v11);
      M3x3Mul((int *)v11, v83, (int32x2_t *)a3, (const int *)6);
    }
    *(_DWORD *)(a3 + 48) = *(_DWORD *)v11;
    *(_DWORD *)(a3 + 52) = *(_DWORD *)(v11 + 16);
    *(_DWORD *)(a3 + 56) = *(_DWORD *)(v11 + 44);
  }
  ScalerReleaseFontTable(a1, v15);
  return 1;
}

BOOL IsScalingSkewingTransform(_DWORD *a1)
{
  return (((*a1 + 8) & 0xFFFFFFF0) != 0x10000 || ((a1[4] + 8) & 0xFFFFFFF0) != 0x10000)
      && a1[3]
      && (a1[8] + 8) >> 4 == 0x4000000
      && !a1[1]
      && !a1[2]
      && !a1[6]
      && !a1[7]
      && a1[5] == 0;
}

BOOL IsDownScaleTransform(_DWORD *a1)
{
  unsigned int v1;
  BOOL v2;

  v1 = *a1 + 8;
  if (HIWORD(v1))
    v2 = 0;
  else
    v2 = (v1 & 0xFFFFFFF0) == ((a1[4] + 8) & 0xFFFFFFF0);
  return v2
      && (a1[8] + 8) >> 4 == 0x4000000
      && !a1[3]
      && !a1[1]
      && !a1[2]
      && !a1[6]
      && !a1[7]
      && a1[5] == 0;
}

void DownScaleBitmap(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;

  v32 = *((_DWORD *)a1 + 6);
  v4 = *((_DWORD *)a1 + 4);
  v5 = *((_DWORD *)a1 + 7) - *((_DWORD *)a1 + 5);
  v6 = *(_DWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 28) - *(_DWORD *)(a2 + 20);
  v9 = *(unsigned int **)a2;
  v10 = *a1;
  bzero(*(void **)a2, (*(_DWORD *)(a2 + 32) * (__int16)(*(_WORD *)(a2 + 28) - *(_WORD *)(a2 + 20))));
  if (v5 << 16 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = vcvtd_n_s64_f64((double)(v8 << 16) * 0.0000152587891 / ((double)(v5 << 16) * 0.0000152587891), 0x10uLL);
    v15 = (v32 - v4) << 16;
    v16 = vcvtd_n_s64_f64((double)((v6 - v7) << 16) * 0.0000152587891 / ((double)v15 * 0.0000152587891), 0x10uLL);
    v17 = (__int16)(v32 - v4);
    v18 = (unsigned __int16)v5;
    if (v14 >= 0)
      v19 = v14;
    else
      v19 = v14 + 1;
    v20 = v19 >> 1;
    if (v16 >= 0)
      v21 = v16;
    else
      v21 = v16 + 1;
    v22 = v21 >> 1;
    if (v17 <= 1)
      v17 = 1;
    if ((unsigned __int16)v5 <= 1u)
      v18 = 1;
    v23 = v9;
    do
    {
      if (v15 >= 1)
      {
        v24 = 0;
        v25 = 128;
        v26 = v17;
        v27 = v23;
        LOBYTE(v28) = 0x80;
        v29 = v22;
        do
        {
          if ((v28 & *(_BYTE *)(v10 + v24)) != 0)
            *(_BYTE *)v27 |= v25;
          v29 += v16;
          if (v29 >= 0x10000)
          {
            if (v25 <= 1)
            {
              v27 = (unsigned int *)((char *)v27 + 1);
              if ((++v13 & 3) == 0)
              {
                *v9 = bswap32(*v9);
                ++v9;
                v12 = 1;
              }
              v25 = 128;
            }
            else
            {
              v25 >>= 1;
            }
            v29 -= 0x10000;
          }
          v28 = v28 >> 1;
          if (!v28)
          {
            LOBYTE(v28) = 0x80;
            ++v24;
          }
          --v26;
        }
        while (v26);
      }
      v20 += v14;
      v30 = v20 - 0x10000;
      if (v20 >= 0x10000)
      {
        v31 = *(unsigned int *)(a2 + 32);
        if (!v12)
          *v9 = bswap32(*v9);
        v13 = 0;
        v12 = 0;
        v23 = (unsigned int *)((char *)v23 + v31);
        v20 = v30;
        v9 = v23;
      }
      v10 += *((unsigned int *)a1 + 8);
      ++v11;
    }
    while (v11 != v18);
  }
}

uint64_t SkewBitmap(uint64_t result, int a2, uint64_t a3, int a4, int a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  unint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  _WORD *exception;

  if (a2 == 0x80000000)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v5 = *(unsigned int *)(a3 + 32);
  v6 = v5 >> 2;
  v7 = ((*(_DWORD *)(a3 + 16) - *(_DWORD *)(a3 + 24)) << 16) + (*(_DWORD *)(a3 + 32) >> 2 << 21);
  if (v7 == 0x200000)
    v8 = 0;
  else
    v8 = -1 << SBYTE2(v7);
  if (a5 >= 1)
  {
    v9 = *(_DWORD *)(a3 + 28) - a4;
    v10 = v9 - a5;
    v11 = *(unsigned int *)(result + 32);
    v12 = (unsigned int *)(*(_QWORD *)result + (v11 * a4));
    v13 = *(_QWORD *)a3 + (v5 * a4);
    v14 = 4 * v6;
    v15 = 4 * v6 - 4;
    result = v13 + 4;
    do
    {
      v16 = v9 * a2 + 0x8000;
      v17 = v16 >> 16;
      v18 = v13 + v14;
      v19 = (unint64_t)&v12[v11 >> 2];
      if (v9 * a2 > -32769)
      {
        v30 = v17 >> 5;
        v29 = &v12[v30];
        v31 = HIWORD(v16) & 0x1F;
        v23 = v5 > 3 && v30 < (v11 >> 2);
        if (v31)
        {
          if (v23)
          {
            v33 = 0;
            v23 = 0;
            v34 = &v12[v30];
            do
            {
              if (v15 == v33)
              {
                v35 = bswap32(*(_DWORD *)(v18 - 4)) & v8;
                v34[v33 / 4] = (v35 >> v31) | v23;
              }
              else
              {
                v34[v33 / 4] = (bswap32(*(_DWORD *)(v13 + v33)) >> v31) | v23;
                v35 = bswap32(*(_DWORD *)(v13 + v33));
              }
              v23 = v35 << (32 - v31);
              v33 += 4;
            }
            while (v33 + v13 < v18 && (unint64_t)&v34[v33 / 4] < v19);
LABEL_53:
            v29 = &v12[v30 + v33 / 4];
          }
        }
        else if (v23)
        {
          v33 = 0;
          v41 = &v12[v30];
          do
          {
            if (v15 == v33)
              v42 = bswap32(*(_DWORD *)(v18 - 4)) & v8;
            else
              v42 = bswap32(*(_DWORD *)(v13 + v33));
            v41[v33 / 4] = v42;
            v43 = (unint64_t)&v41[v33 / 4 + 1];
            v33 += 4;
          }
          while (v33 + v13 < v18 && v43 < v19);
          v23 = 0;
          goto LABEL_53;
        }
      }
      else
      {
        v20 = -v17;
        v21 = (uint64_t)(v20 << 16) >> 21;
        v23 = (__int16)v20 >> 5 < (int)v6 && v11 > 3;
        if ((v20 & 0x1F) != 0)
        {
          if (v23)
          {
            v24 = 0;
            v25 = result + 4 * v21;
            v26 = v15 - 4 * v21;
            while (v26 != v24)
            {
              v27 = v25 + v24;
              v12[v24 / 4] = (bswap32(*(_DWORD *)(v25 + v24 - 4)) << v20) | (bswap32(*(_DWORD *)(v25 + v24)) >> 1 >> ~(_BYTE)v20);
              v28 = (unint64_t)&v12[v24 / 4 + 1];
              v24 += 4;
              if (v27 >= v18 || v28 >= v19)
              {
                v23 = 0;
                v29 = &v12[v24 / 4];
                goto LABEL_55;
              }
            }
            v23 = 0;
            v12[v24 / 4] = (bswap32(*(_DWORD *)(v18 - 4)) & v8) << (v20 & 0x1F);
            v29 = &v12[v24 / 4 + 1];
            goto LABEL_55;
          }
        }
        else if (v23)
        {
          v36 = 0;
          v37 = v13 + 4 * v21;
          v38 = v15 - 4 * v21;
          do
          {
            if (v38 == v36)
              v39 = bswap32(*(_DWORD *)(v18 - 4)) & v8;
            else
              v39 = bswap32(*(_DWORD *)(v37 + v36));
            v12[v36 / 4] = v39;
            v40 = (unint64_t)&v12[v36 / 4 + 1];
            v36 += 4;
          }
          while (v36 + v37 < v18 && v40 < v19);
          v23 = 0;
          v29 = &v12[v36 / 4];
          goto LABEL_55;
        }
        v29 = v12;
      }
LABEL_55:
      if ((unint64_t)v29 < v19)
        *v29 = v23;
      --v9;
      result += v14;
      v12 += v11 >> 2;
      v13 = v18;
    }
    while (v9 > v10);
  }
  return result;
}

BOOL IsSkewingTransform(_DWORD *a1)
{
  return ((*a1 + 8) & 0xFFFFFFF0) == 0x10000
      && ((a1[4] + 8) & 0xFFFFFFF0) == 0x10000
      && (a1[8] + 8) >> 4 == 0x4000000
      && a1[3]
      && !a1[1]
      && !a1[2]
      && !a1[6]
      && !a1[7]
      && a1[5] == 0;
}

void sbit_GetBitMapData(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4, int a5, int a6)
{
  uint64_t v11;
  __int128 v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  size_t *v22;
  int v23;
  char *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  int v41;
  __int16 v42;
  int v43;
  int v44;
  void *v45;
  char *v46;
  char *v47;
  unsigned __int16 *v48;
  char v49;
  int v50;
  int v51;
  unsigned __int16 *v52;
  int v53;
  unsigned __int16 *v54;
  unsigned int v55;
  _BYTE *v56;
  int v57;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  BOOL v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  __int128 v96;
  int v97;
  int v98;
  int v99;
  double v100;
  signed int v101;
  __int128 v102;
  size_t *v103;
  __int128 v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  _WORD *exception;
  unsigned int v110;
  unsigned int *v111;
  _QWORD *v112;
  int v113;
  uint64_t v114;
  signed int v115;
  int v116;
  _DWORD *v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned __int16 *v122;
  int v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127[2];
  __int128 v128;
  unsigned int v129;
  _QWORD v130[2];
  unint64_t (*v131)(uint64_t, unint64_t);
  void *v132;
  unsigned int *v133;
  unsigned int v134;
  __int128 v135;
  __int128 v136;
  unsigned int *v137;
  int v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  void *v142;
  char *v143;
  char *v144;
  void *v145;
  __int16 v146;

  v11 = a1;
  v129 = -1431655766;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v127 = v12;
  v128 = v12;
  v13 = *(int **)(*(_QWORD *)(a1 + 24) + 80);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = v14;
  if (a3)
    *a3 = v14;
  v126 = (void *)0xAAAAAAAAAAAAAAAALL;
  ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 172), v13[16], v13[15], &v126, 0);
  v15 = *(_QWORD *)(v11 + 32);
  v16 = *(unsigned __int8 *)(v15 + 125);
  v17 = *(char *)(v15 + 127);
  v18 = *(unsigned __int8 *)(v15 + 124);
  LODWORD(v128) = 0;
  DWORD1(v128) = v17 - v18;
  v129 = ((v16 + 31) >> 3) & 0x3C;
  *((_QWORD *)&v128 + 1) = __PAIR64__(v17, v16);
  v127[0] = 0;
  v120 = ((v16 + 31) >> 3) & 0x3CLL;
  if (v18 * (_DWORD)v120)
  {
    v118 = (uint64_t)a3;
    v19 = (unsigned int *)v126;
    v20 = v13[16];
    v21 = *(unsigned int *)(*(_QWORD *)(v11 + 8) + 176);
    v115 = v18 * v120;
    v22 = ScalerNewScratch(*(memoryContext **)v11, v18 * (int)v120, 1);
    v127[0] = v22;
    v119 = v13;
    v23 = *((unsigned __int8 *)v13 + 94) - 1;
    v117 = a2;
    v24 = (char *)v19 + v21 - v20;
    v25 = v19;
    v116 = a6;
    switch(v23)
    {
      case 0:
        v26 = *(_QWORD *)(v11 + 32);
        v27 = *(unsigned __int8 *)(v26 + 125);
        v28 = (unint64_t)(v27 + 7) >> 3;
        if (v119[16] + v28 * *(unsigned __int8 *)(v26 + 124) > *(_DWORD *)(*(_QWORD *)(v11 + 8) + 176))
          goto LABEL_99;
        if (*(_BYTE *)(v26 + 124))
        {
          LOWORD(v29) = 0;
          v30 = (char *)v19 + 5;
          if (v28 <= 1)
            v31 = 1;
          else
            v31 = v28;
          do
          {
            if ((_DWORD)v27)
            {
              for (i = 0; i != v31; ++i)
                *((_BYTE *)v22 + i) = v30[i];
              v26 = *(_QWORD *)(v11 + 32);
            }
            v30 += v28;
            v22 = (size_t *)((char *)v22 + v120);
            v29 = (unsigned __int16)(v29 + 1);
          }
          while (v29 < *(unsigned __int8 *)(v26 + 124));
        }
        goto LABEL_58;
      case 1:
        v33 = *(_QWORD *)(v11 + 32);
        if (*(_BYTE *)(v33 + 124))
        {
          LOWORD(v34) = 0;
          v35 = 0;
          v36 = *(unsigned __int8 *)(v33 + 125);
          do
          {
            MoveBitsSmall((unsigned int *)((char *)v19 + 5), v24, v35, (unsigned int *)v22, v36);
            v37 = *(_QWORD *)(v11 + 32);
            v36 = *(unsigned __int8 *)(v37 + 125);
            v35 += v36;
            v22 = (size_t *)((char *)v22 + v120);
            v34 = (unsigned __int16)(v34 + 1);
          }
          while (v34 < *(unsigned __int8 *)(v37 + 124));
        }
        goto LABEL_58;
      case 3:
        v111 = (unsigned int *)v22;
        v112 = a4;
        v113 = a5;
        v38 = (*(unsigned __int8 *)(*(_QWORD *)(v11 + 32) + 124)
             * *(unsigned __int8 *)(*(_QWORD *)(v11 + 32) + 125)
             + 31) >> 3;
        v124 = (void *)0xAAAAAAAAAAAAAAAALL;
        v125 = (void *)0xAAAAAAAAAAAAAAAALL;
        v39 = (unsigned int *)ScalerNewScratch(*(memoryContext **)v11, v38, 1);
        ScalerGetTableParts(*(memoryContext **)v11, *(_DWORD *)(*(_QWORD *)(v11 + 8) + 172), v119[17], v119[18], &v125, 0);
        ScalerGetTableParts(*(memoryContext **)v11, *(_DWORD *)(*(_QWORD *)(v11 + 8) + 172), v119[19], v119[20], &v124, 0);
        v40 = v19;
        v41 = 0;
        v42 = 0;
        v43 = v119[15];
        v114 = v11;
        v44 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 32) + 124) * *(unsigned __int8 *)(*(_QWORD *)(v11 + 32) + 125);
        v45 = v125;
        v46 = (char *)v125 + v119[18];
        v47 = (char *)v124 + v119[20];
        *(_QWORD *)&v140 = ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke;
        *((_QWORD *)&v140 + 1) = &__block_descriptor_tmp_4;
        *(_QWORD *)&v139 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v139 + 1) = 0x40000000;
        v146 = 0;
        v141 = v125;
        v142 = v124;
        v122 = (unsigned __int16 *)v124;
        v143 = v46;
        v144 = v47;
        v145 = v125;
        *(_QWORD *)&v135 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v135 + 1) = 0x40000000;
        *(_QWORD *)&v136 = ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke_2;
        *((_QWORD *)&v136 + 1) = &__block_descriptor_tmp_2;
        v137 = v19;
        v138 = v43;
        v130[0] = MEMORY[0x1E0C809B0];
        v130[1] = 0x40000000;
        v131 = ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke_3;
        v132 = &__block_descriptor_tmp_4_0;
        v133 = v39;
        v48 = (unsigned __int16 *)v125;
        v110 = v38;
        v134 = v38;
        break;
      case 4:
        v65 = *(_QWORD *)(v11 + 32);
        if (*(_BYTE *)(v65 + 124))
        {
          LOWORD(v66) = 0;
          v67 = 0;
          v68 = *(unsigned __int8 *)(v65 + 125);
          do
          {
            MoveBitsSmall(v25, v24, v67, (unsigned int *)v22, v68);
            v25 = v19;
            v69 = *(_QWORD *)(v11 + 32);
            v68 = *(unsigned __int8 *)(v69 + 125);
            v67 += v68;
            v22 = (size_t *)((char *)v22 + v120);
            v66 = (unsigned __int16)(v66 + 1);
          }
          while (v66 < *(unsigned __int8 *)(v69 + 124));
        }
        goto LABEL_58;
      case 5:
        v70 = *(_QWORD *)(v11 + 32);
        if (*(_BYTE *)(v70 + 124))
        {
          LOWORD(v71) = 0;
          v72 = *(unsigned __int8 *)(v70 + 125) + 7;
          v73 = v72 >> 3;
          v74 = v19 + 2;
          v75 = v72 & 0x1F8;
          do
          {
            MoveBitsSmall(v74, v24, 0, (unsigned int *)v22, v75);
            v74 = (unsigned int *)((char *)v74 + v73);
            v22 = (size_t *)((char *)v22 + v120);
            v71 = (unsigned __int16)(v71 + 1);
          }
          while (v71 < *(unsigned __int8 *)(*(_QWORD *)(v11 + 32) + 124));
        }
        goto LABEL_58;
      case 6:
        v76 = *(_QWORD *)(v11 + 32);
        if (*(_BYTE *)(v76 + 124))
        {
          LOWORD(v77) = 0;
          v78 = 0;
          v79 = *(unsigned __int8 *)(v76 + 125);
          do
          {
            MoveBitsSmall(v19 + 2, v24, v78, (unsigned int *)v22, v79);
            v80 = *(_QWORD *)(v11 + 32);
            v79 = *(unsigned __int8 *)(v80 + 125);
            v78 += v79;
            v22 = (size_t *)((char *)v22 + v120);
            v77 = (unsigned __int16)(v77 + 1);
          }
          while (v77 < *(unsigned __int8 *)(v80 + 124));
        }
        goto LABEL_58;
      case 7:
      case 8:
LABEL_99:
        exception = __cxa_allocate_exception(2uLL);
        *exception = 5;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      default:
        goto LABEL_59;
    }
    do
    {
      v121 = v40;
      v49 = *(_BYTE *)((uint64_t (*)(__int128 *))v136)(&v135);
      v50 = 458752;
      do
      {
        v51 = v50;
        v52 = (unsigned __int16 *)((uint64_t (*)(__int128 *, void *))v140)(&v139, v45);
        v53 = (int)bswap32(*v52) >> 16;
        if (v53 < 0)
        {
          v55 = v53 & 0x7FFF;
          if (v42)
          {
            v42 = v55 > 0x3F;
            if (v55 <= 0x3F)
              v54 = v48;
            else
              v54 = v122;
            while ((__int16)v55 >= 1)
            {
              LOWORD(v55) = v55 - 1;
              v56 = (_BYTE *)v131((uint64_t)v130, (unint64_t)v39 + ((__int16)v41 >> 3));
              *v56 |= 0x80u >> (v41 & 7);
              v57 = v41 + 1;
              if (v44 <= (__int16)v41++)
              {
                v41 = v57;
                break;
              }
            }
          }
          else
          {
            v41 += v55;
            v42 = v55 < 0x40;
            if (v55 >= 0x40)
              v54 = v48;
            else
              v54 = v122;
          }
        }
        else
        {
          v54 = v52;
        }
        if (v49 < 0)
          v54 = (unsigned __int16 *)((char *)v54 + (__int16)(bswap32(*v54) >> 16));
        v49 *= 2;
        v45 = v54 + 1;
        v50 = v51 - 0x10000;
      }
      while (v51);
      v40 = (unsigned int *)((char *)v121 + 1);
    }
    while (v44 > (__int16)v41);
    v11 = v114;
    v59 = *(_QWORD *)(v114 + 32);
    v60 = v111;
    if (*(_BYTE *)(v59 + 124))
    {
      LOWORD(v61) = 0;
      v62 = 0;
      v63 = *(unsigned __int8 *)(v59 + 125);
      do
      {
        MoveBitsSmall(v39, (char *)v39 + v110, v62, v60, v63);
        v64 = *(_QWORD *)(v114 + 32);
        v63 = *(unsigned __int8 *)(v64 + 125);
        v62 += v63;
        v60 = (unsigned int *)((char *)v60 + v120);
        v61 = (unsigned __int16)(v61 + 1);
      }
      while (v61 < *(unsigned __int8 *)(v64 + 124));
    }
    ScalerReleaseFontTable(*(memoryContext **)v114, v125);
    ScalerReleaseFontTable(*(memoryContext **)v114, v124);
    ScalerDisposeBlock(*(memoryContext **)v114, (char *)v39, -1);
    a5 = v113;
    a4 = v112;
LABEL_58:
    v22 = (size_t *)v127[0];
    a6 = v116;
    a2 = v117;
LABEL_59:
    if (!v118)
    {
      v13 = v119;
      goto LABEL_90;
    }
    v13 = v119;
    if (v22 && *(_QWORD *)v118)
    {
      LODWORD(v141) = -1431655766;
      *(_QWORD *)&v81 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v81 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v139 = v81;
      v140 = v81;
      v82 = *(_DWORD *)(v118 + 28);
      v83 = v82 - *(_DWORD *)(v118 + 20);
      v84 = a2[1];
      v85 = a2[2];
      v86 = v82 - v84;
      v87 = __OFSUB__(v84, v85);
      v88 = v84 - v85;
      if ((v88 < 0) ^ v87 | (v88 == 0))
        v89 = 0;
      else
        v89 = v86;
      if ((v88 < 0) ^ v87 | (v88 == 0))
        v90 = v83;
      else
        v90 = v88 + 1;
      if (IsScalingSkewingTransform(v119))
      {
        v91 = a6;
        v92 = v119[3];
        v119[3] = 0;
        v123 = v90;
        if (IsDownScaleTransform(v119))
        {
          v93 = v118;
          v94 = *(_OWORD *)(v118 + 16);
          v135 = *(_OWORD *)v118;
          v136 = v94;
          v95 = *(_DWORD *)(v118 + 32);
          ComputeDestBitmap(v119, (uint64_t)v127, v118);
          *(_DWORD *)(v118 + 32) = v95;
          DownScaleBitmap((uint64_t *)v127, v118);
          v96 = v136;
          *(_OWORD *)v118 = v135;
          *(_OWORD *)(v118 + 16) = v96;
          *(_DWORD *)(v118 + 32) = v95;
        }
        else
        {
          InvertMapping3x3((uint64_t)&v139, v119);
          v99 = (__int16)v90;
          v93 = v118;
          TransformScalerBitmap((int *)&v139, (uint64_t *)v127, v118, (__int16)v89, v99);
        }
        v119[3] = v92;
        v100 = (double)v92 * 0.0000152587891 / ((double)v119[4] * 0.0000152587891);
        v101 = (*(_DWORD *)(v93 + 28) - *(_DWORD *)(v93 + 20)) * *(_DWORD *)(v93 + 32);
        if (v101 <= v115)
        {
          v103 = (size_t *)v127[0];
          v104 = *(_OWORD *)(v93 + 16);
          *(_OWORD *)v127 = *(_OWORD *)v93;
          v128 = v104;
          v129 = *(_DWORD *)(v93 + 32);
        }
        else
        {
          ScalerDisposeBlock(*(memoryContext **)v11, (char *)v127[0], -1);
          v102 = *(_OWORD *)(v93 + 16);
          *(_OWORD *)v127 = *(_OWORD *)v93;
          v128 = v102;
          v129 = *(_DWORD *)(v93 + 32);
          v103 = ScalerNewScratch(*(memoryContext **)v11, v101, 0);
        }
        a6 = v91;
        v105 = vcvtd_n_s64_f64(v100, 0x10uLL);
        v127[0] = v103;
        if (v101 >= 1)
        {
          v106 = 0;
          do
          {
            *((_BYTE *)v127[0] + (unsigned __int16)v106) = *(_BYTE *)(*(_QWORD *)v93 + (unsigned __int16)v106);
            ++v106;
          }
          while (v101 > (unsigned __int16)v106);
        }
        if (*(_BYTE *)(*(_QWORD *)(v11 + 24) + 488))
        {
          v107 = v93;
          v108 = DWORD1(v128);
          HIDWORD(v128) -= DWORD1(v128);
          DWORD1(v128) = 0;
          SkewBitmap(v107, v105, (uint64_t)v127, v89, v123);
          HIDWORD(v128) += v108;
          DWORD1(v128) += v108;
        }
        else
        {
          SkewBitmap(v93, v105, (uint64_t)v127, v89, v123);
        }
        a2 = v117;
        v13 = v119;
      }
      else if (IsSkewingTransform(v119))
      {
        if (*(_BYTE *)(*(_QWORD *)(v11 + 24) + 488))
        {
          v97 = v90;
          if (DWORD1(v128) + HIDWORD(v128) < 0 != __OFADD__(DWORD1(v128), HIDWORD(v128)))
            v98 = DWORD1(v128) + HIDWORD(v128) + 1;
          else
            v98 = DWORD1(v128) + HIDWORD(v128);
          HIDWORD(v128) -= v98 >> 1;
          DWORD1(v128) -= v98 >> 1;
          v13 = v119;
          SkewBitmap(v118, v119[3], (uint64_t)v127, v89, v97);
          HIDWORD(v128) += v98 >> 1;
          DWORD1(v128) += v98 >> 1;
        }
        else
        {
          v13 = v119;
          SkewBitmap(v118, v119[3], (uint64_t)v127, v89, v90);
        }
      }
      else if (IsDownScaleTransform(v119))
      {
        DownScaleBitmap((uint64_t *)v127, v118);
      }
      else
      {
        InvertMapping3x3((uint64_t)&v139, v119);
        TransformScalerBitmap((int *)&v139, (uint64_t *)v127, v118, (__int16)v89, (__int16)v90);
      }
    }
  }
  else
  {
    if (!a3)
    {
      v22 = 0;
      goto LABEL_90;
    }
    bzero(a3, 0x24uLL);
  }
  v22 = (size_t *)v127[0];
LABEL_90:
  if (a4)
  {
    MakeOutlineFromBitmap(*(memoryContext **)v11, a2[3], (uint64_t)v22, (int *)&v128, v120, v13, a4, a5, a6);
    v22 = (size_t *)v127[0];
  }
  if (v22)
    ScalerDisposeBlock(*(memoryContext **)v11, (char *)v22, -1);
  ScalerReleaseFontTable(*(memoryContext **)v11, v126);
}

uint64_t sbit_GetBitMapInfo(_QWORD *a1, uint64_t a2, int a3, int32x2_t *a4, int32x2_t *a5, int a6)
{
  int16x4_t *v11;
  int *v12;
  int Metrics;
  __int32 v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  uint64_t result;
  int32x2_t v24;
  int32x2_t *v25;
  int32x4_t v26;
  _QWORD v27[2];
  int32x4_t v28;
  unsigned int v29;
  int32x2_t v30;

  v11 = (int16x4_t *)a1[4];
  v12 = *(int **)(a1[3] + 80);
  Metrics = sbit_GetMetrics(&v11[6], a5, (int *)&a4[1], (uint64_t)a1, a3, a6);
  *a4 = 0;
  v27[0] = 0;
  v27[1] = 0;
  v29 = (v11[12].u16[3] + 7) >> 3;
  v26 = vmovl_s16(v11[11]);
  v28 = v26;
  ComputeDestBitmap(v12, (uint64_t)v27, (uint64_t)a4);
  if (*(_BYTE *)(a1[3] + 488) && (IsSkewingTransform(v12) || IsScalingSkewingTransform(v12)))
  {
    v14 = a4[2].i32[0];
    v15 = __OFSUB__(v26.i32[0], v14);
    v16 = v26.i32[0] - v14;
    if (!((v16 < 0) ^ v15 | (v16 == 0)))
    {
      a4[2].i32[0] = v26.i32[0];
      a4[3].i32[0] += v16;
    }
  }
  v17 = *(_DWORD *)(a2 + 4);
  v18 = *(_DWORD *)(a2 + 8);
  v15 = __OFSUB__(v17, v18);
  v19 = v17 - v18;
  if ((v19 < 0) ^ v15 | (v19 == 0))
    v19 = a4[3].i32[1] - a4[2].i32[1];
  else
    LOWORD(v19) = v19 + 1;
  if (a4[3].i32[0] == a4[2].i32[0] || a4[3].i32[1] == a4[2].i32[1])
  {
    v20 = (int *)a1[5];
    *v20 = 0;
  }
  else
  {
    v21 = a4[4].i32[0] * (unsigned __int16)v19;
    v20 = (int *)a1[5];
    *v20 = v21;
  }
  v20[4] = 0;
  v20[8] = 0;
  v22 = M3x3Flags(v12);
  v30 = vsub_s32(vshl_n_s32((int32x2_t)__PAIR64__(v28.u32[3], v28.u32[0]), 0x10uLL), a4[1]);
  result = M3x3Mul(v12, v22, &v30, (const int *)1);
  v24.i32[0] = a4[2].i32[0];
  v24.i32[1] = a4[3].i32[1];
  a4[1] = vsub_s32(vshl_n_s32(v24, 0x10uLL), v30);
  if (a5)
  {
    if (!Metrics)
    {
      result = M3x3Mul(v12, v22, a5, (const int *)3);
      if (!a6)
      {
        if (*(_BYTE *)(a1[3] + 488))
        {
          a5->i32[0] = 0;
          a5[1].i32[0] = 0;
          v25 = a5 + 2;
        }
        else
        {
          a5->i32[1] = 0;
          a5[1].i32[1] = 0;
          v25 = (int32x2_t *)((char *)a5 + 20);
        }
        v25->i32[0] = 0;
      }
    }
  }
  return result;
}

uint64_t sbit_GetMetrics(_WORD *a1, int32x2_t *a2, int *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  int v16;
  int TableParts;
  void *v18;
  BOOL v19;
  int v20;
  int v21;
  _BYTE *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _BYTE *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _BYTE *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  _BYTE *v46;
  int v47;
  char v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  __int32 v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  int *v63;
  int v64;
  __int16 v66;
  __int16 v67;
  int v68;
  void *v69;

  v10 = *(_QWORD *)(a4 + 24);
  v11 = *(_QWORD *)(v10 + 80);
  v12 = *(unsigned __int8 *)(v11 + 93);
  if (v12 <= 5)
  {
    if (((1 << v12) & 0x1A) != 0)
    {
      v69 = (void *)0xAAAAAAAAAAAAAAAALL;
      v15 = *(unsigned __int8 *)(v11 + 94);
      v16 = *(_DWORD *)(v11 + 44);
      TableParts = ScalerGetTableParts(*(memoryContext **)a4, *(_DWORD *)(*(_QWORD *)(a4 + 8) + 172), *(_DWORD *)(v11 + 64), *(_DWORD *)(v11 + 60), &v69, 1);
      v18 = v69;
      if (TableParts)
        v19 = v69 == 0;
      else
        v19 = 1;
      if (v19)
        goto LABEL_37;
      if (v15 > 9)
        goto LABEL_36;
      if (((1 << v15) & 0x106) != 0)
      {
        v40 = vcvtd_n_s64_f64((double)(v16 << 16) * 0.0000152587891 / 10.0, 0x10uLL);
        v41 = *(unsigned __int8 *)v69;
        v42 = *((unsigned __int8 *)v69 + 1);
        v43 = *((char *)v69 + 2);
        v44 = *((char *)v69 + 3);
        v45 = *((unsigned __int8 *)v69 + 4);
        v46 = *(_BYTE **)(a4 + 32);
        v47 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 24) + 488);
        v48 = *(_BYTE *)(v11 + 92);
        v46[124] = v41;
        a1[26] = v41;
        v46[125] = v42;
        a1[27] = v42;
        a1[20] = 0;
        if (v47)
        {
          if ((v48 & 2) != 0)
          {
            *a3 = v43 << 16;
            v46[127] = v44;
            a1[23] = v44;
            a3[1] = v44 << 16;
            v60 = v44 - v41;
            a1[21] = v60;
            a1[22] = v42;
            if (!a2)
              goto LABEL_36;
            a2[1].i32[0] = v43 << 16;
            a2[1].i32[1] = v44 << 16;
            a2->i32[0] = 0;
            a2->i32[1] = -65536 * v45;
            v27 = (v60 + v45) << 16;
          }
          else
          {
            v49 = -(v40 >> 17);
            a1[23] = v49;
            v46[127] = v49;
            v50 = -(v40 >> 1);
            a3[1] = v50;
            a1[21] = v49 - v41;
            a1[22] = v42;
            *a3 = -32768 * v42;
            if (!a2)
              goto LABEL_36;
            a2[1].i32[0] = 0;
            a2[1].i32[1] = v50;
            v51 = v40 + (v41 << 16);
            a2->i32[0] = 0;
            a2->i32[1] = -v51;
            v27 = v51 - ((v40 >> 1) + (v41 << 16));
          }
          a2[2].i32[0] = 0;
          goto LABEL_32;
        }
        if ((v48 & 1) != 0)
        {
          *a3 = v43 << 16;
          v46[127] = v44;
          a1[23] = v44;
          a3[1] = v44 << 16;
          a1[21] = v44 - v41;
          a1[22] = v42;
          if (!a2)
            goto LABEL_36;
          a2[1].i32[0] = v43 << 16;
          a2[1].i32[1] = v44 << 16;
          *a2 = (int32x2_t)(v45 << 16);
          v56 = (v45 - (v43 + v42)) << 16;
        }
        else
        {
          a1[23] = v41;
          v46[127] = v41;
          v57 = v41 << 16;
          v58 = v40 >> 1;
          *a3 = v40 >> 1;
          a3[1] = v57;
          a1[21] = 0;
          a1[22] = v42;
          if (!a2)
            goto LABEL_36;
          a2[1].i32[0] = v58;
          a2[1].i32[1] = 0;
          v59 = v40 + (v42 << 16);
          *a2 = (int32x2_t)v59;
          v56 = v59 - (v58 + (v42 << 16));
        }
      }
      else
      {
        if (((1 << v15) & 0x2C0) == 0)
          goto LABEL_36;
        v20 = *(unsigned __int8 *)v69;
        v21 = *((unsigned __int8 *)v69 + 1);
        v22 = *(_BYTE **)(a4 + 32);
        if (*(_BYTE *)(*(_QWORD *)(a4 + 24) + 488))
        {
          v23 = *((unsigned __int8 *)v69 + 7);
          v24 = *((char *)v69 + 5);
          v25 = *((char *)v69 + 6);
          v22[124] = v20;
          a1[26] = v20;
          v22[125] = v21;
          a1[27] = v21;
          a1[20] = 0;
          *a3 = v24 << 16;
          v22[127] = v25;
          a1[23] = v25;
          a3[1] = v25 << 16;
          a1[21] = v25 - v20;
          a1[22] = v21;
          if (a2)
          {
            a2->i32[0] = 0;
            a2->i32[1] = -65536 * v23;
            a2[2].i32[0] = 0;
            a2[1].i32[0] = 0;
            v26 = a3[1];
            a2[1].i32[1] = -v26;
            v27 = v26 + ((v23 - v20) << 16);
LABEL_32:
            a2[2].i32[1] = v27;
          }
LABEL_36:
          ScalerReleaseFontTable(*(memoryContext **)a4, v18);
LABEL_37:
          v10 = *(_QWORD *)(a4 + 24);
          goto LABEL_38;
        }
        v52 = *((unsigned __int8 *)v69 + 4);
        v53 = *((char *)v69 + 2);
        v54 = *((char *)v69 + 3);
        v22[124] = v20;
        a1[26] = v20;
        v22[125] = v21;
        a1[27] = v21;
        a1[20] = 0;
        v55 = v53 << 16;
        *a3 = v55;
        v22[127] = v54;
        a1[23] = v54;
        a3[1] = v54 << 16;
        a1[21] = v54 - v20;
        a1[22] = v21;
        if (!a2)
          goto LABEL_36;
        a2[1].i32[0] = v55;
        a2[1].i32[1] = v54 << 16;
        a2->i32[0] = v52 << 16;
        a2->i32[1] = 0;
        v56 = v21 - v52;
      }
      a2[2].i32[0] = v56;
      a2[2].i32[1] = 0;
      goto LABEL_36;
    }
    if (((1 << v12) & 0x24) == 0)
      goto LABEL_38;
    v28 = *(_QWORD *)(v10 + 64) + *(unsigned int *)(v11 + 52);
    v29 = *(unsigned __int8 *)(v28 + 12);
    v30 = *(unsigned __int8 *)(v28 + 13);
    if (*(_BYTE *)(v10 + 488))
    {
      v31 = *(unsigned __int8 *)(v28 + 19);
      v32 = *(char *)(v28 + 17);
      v33 = *(char *)(v28 + 18);
      a1[20] = 0;
      v34 = *(_BYTE **)(a4 + 32);
      v34[124] = v29;
      a1[26] = v29;
      v34[125] = v30;
      a1[27] = v30;
      *a3 = v32 << 16;
      v34[127] = v33;
      a1[23] = v33;
      a3[1] = v33 << 16;
      a1[21] = v33 - v29;
      a1[22] = v30;
      if (!a2)
        goto LABEL_38;
      a2->i32[0] = 0;
      a2->i32[1] = -65536 * v31;
      a2[1].i32[0] = v32 << 16;
      a2[1].i32[1] = v33 << 16;
      a2[2].i32[0] = 0;
      v35 = (v31 - v29 + v33) << 16;
    }
    else
    {
      v36 = *(unsigned __int8 *)(v28 + 16);
      v37 = *(char *)(v28 + 14);
      v38 = *(char *)(v28 + 15);
      v39 = *(_BYTE **)(a4 + 32);
      v39[124] = v29;
      a1[26] = v29;
      v39[125] = v30;
      a1[27] = v30;
      a1[20] = 0;
      *a3 = v37 << 16;
      v39[127] = v38;
      a1[23] = v38;
      a3[1] = v38 << 16;
      a1[21] = v38 - v29;
      a1[22] = v30;
      if (!a2)
        goto LABEL_38;
      v35 = 0;
      *a2 = (int32x2_t)(v36 << 16);
      a2[1].i32[0] = v37 << 16;
      a2[1].i32[1] = v38 << 16;
      a2[2].i32[0] = (v36 - (v30 + v37)) << 16;
    }
    a2[2].i32[1] = v35;
  }
LABEL_38:
  v61 = *(unsigned __int8 *)(v10 + 488);
  if (!a6)
  {
    v68 = -1431655766;
    LODWORD(v69) = -1431655766;
    v67 = -21846;
    v66 = -21846;
    if (v61)
    {
LABEL_44:
      if (*(_DWORD *)(*(_QWORD *)(a4 + 8) + 116))
      {
        GetHmtxData(a4, a5, 0, &v68, &v67, &v66);
        a2->i32[1] = -vcvtd_n_s64_f64((double)(__int16)v68* 0.0000152587891/ ((double)*(__int16 *)(*(_QWORD *)(a4 + 8) + 130)* 0.0000152587891), 0x10uLL);
LABEL_51:
        v63 = (int *)(*(_QWORD *)(a4 + 24) + 96);
        v64 = M3x3Flags(v63);
        v62 = 1;
        M3x3Mul(v63, v64, a2, (const int *)1);
        return v62;
      }
      return 0;
    }
    goto LABEL_49;
  }
  v62 = 0;
  if (!v61)
  {
    if (a5 != 2 || a2->i32[0])
      return v62;
    LODWORD(v69) = -1431655766;
    v67 = -21846;
    v66 = -21846;
LABEL_49:
    if (*(_DWORD *)(*(_QWORD *)(a4 + 8) + 112))
    {
      GetHmtxData(a4, a5, &v69, 0, &v67, &v66);
      a2->i32[0] = vcvtd_n_s64_f64((double)(__int16)v69* 0.0000152587891/ ((double)*(__int16 *)(*(_QWORD *)(a4 + 8) + 130)* 0.0000152587891), 0x10uLL);
      goto LABEL_51;
    }
    return 0;
  }
  if (a5 == 2 && !a2->i32[1])
  {
    v68 = -1431655766;
    v67 = -21846;
    v66 = -21846;
    goto LABEL_44;
  }
  return v62;
}

uint64_t sbit_IsThereAGlyphImage(uint64_t a1, int *a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  unsigned int v32;
  unsigned int v33;
  signed int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned __int16 *v41;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _WORD *exception;
  void *v66;

  v4 = *a2;
  v5 = *a2 == 0;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 80);
  v8 = v7;
  v9 = *a2;
  while (1)
  {
    v10 = *(unsigned __int16 *)(v8 + 84);
    if (v9 >= v10)
    {
      v11 = *(unsigned __int16 *)(v8 + 86);
      if (v9 <= v11)
      {
        v12 = *(unsigned int *)(v8 + 56);
        if ((_DWORD)v12)
        {
          v13 = 0;
          v14 = *(_QWORD *)(v6 + 64);
          v15 = v14 + *(unsigned int *)(v6 + 60);
          v16 = 8 * v12;
          while (1)
          {
            v17 = bswap32(*(unsigned __int16 *)(v14 + v13)) >> 16;
            v18 = bswap32(*(unsigned __int16 *)(v14 + v13 + 2)) >> 16;
            if (v17 >= v10 && v18 <= v11)
            {
              if (v17 > v18)
                goto LABEL_17;
              if (v9 >= v17 && v9 <= v18)
                break;
            }
            v13 += 8;
            if (v16 == v13)
              goto LABEL_17;
          }
          v22 = bswap32(*(_DWORD *)(v14 + v13 + 4));
          *(_DWORD *)(v8 + 52) = v22;
          v23 = v14 + v22;
          v24 = (_WORD *)(v14 + v22 + 2);
          if ((unint64_t)v24 <= v15)
          {
            v25 = *(unsigned __int8 *)(v23 + 1);
            *(_BYTE *)(v8 + 93) = v25;
            *(_WORD *)(v8 + 88) = v17;
            *(_WORD *)(v8 + 90) = v18;
            switch(v25)
            {
              case 1:
                v26 = (int)v9 - (unint64_t)v17;
                v27 = v23 + 4 * v26;
                v28 = (unsigned int *)(v27 + 8);
                v29 = v27 + 16;
                if (v14 > (unint64_t)v28 || (unint64_t)v28 > 0xFFFFFFFFFFFFFFF7 || v29 > v15)
                  goto LABEL_95;
                *(_BYTE *)(v8 + 94) = *(_BYTE *)(v23 + 3);
                v32 = bswap32(*v28);
                v33 = bswap32(*(_DWORD *)(v23 + 4)) + v32;
                v34 = bswap32(*(_DWORD *)(v23 + 4 + 4 * v26 + 8)) - v32;
                *(_DWORD *)(v8 + 64) = v33;
                goto LABEL_92;
              case 2:
                if (v23 + 20 > v15)
                  goto LABEL_95;
                v35 = bswap32(*(_DWORD *)(v23 + 8));
                *(_BYTE *)(v8 + 94) = *(_BYTE *)(v23 + 3);
                *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)(v23 + 4)) + v35 * (v9 - v17);
                v34 = bswap32(*(_DWORD *)(v23 + 8));
                *(_DWORD *)(v8 + 60) = v34;
                if (v34 >= 0x10000)
                  goto LABEL_93;
                if (*v24 != 1024)
                  goto LABEL_83;
                v66 = (void *)0xAAAAAAAAAAAAAAAALL;
                ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 172), bswap32(*(_DWORD *)(v23 + 4)), 0xCu, &v66, 0);
                v36 = (unsigned int *)v66;
                *(_DWORD *)(v8 + 68) = bswap32(*(_DWORD *)v66) + bswap32(*(_DWORD *)(v23 + 4));
                *(_DWORD *)(v8 + 72) = bswap32(v36[1]) - bswap32(*v36);
                *(_DWORD *)(v8 + 76) = bswap32(v36[1]) + bswap32(*(_DWORD *)(v23 + 4));
                *(_DWORD *)(v8 + 80) = bswap32(v36[2]) - bswap32(v36[1]);
                ScalerReleaseFontTable(*(memoryContext **)a1, v36);
                ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 172), bswap32(*(_DWORD *)(v23 + 4)) + 4 * (v9 - *(unsigned __int16 *)(v8 + 88)) + 8, 8u, &v66, 0);
                v37 = (unsigned int *)v66;
                *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)v66) + bswap32(*(_DWORD *)(v23 + 4));
                v38 = bswap32(v37[1]) - bswap32(*v37);
                *(_DWORD *)(v8 + 60) = v38;
                if (HIWORD(v38))
                  goto LABEL_93;
                v39 = (unsigned __int16)v38;
                ScalerReleaseFontTable(*(memoryContext **)a1, v37);
                goto LABEL_84;
              case 3:
                v40 = v23 + 2 * ((int)v9 - (unint64_t)v17);
                v41 = (unsigned __int16 *)(v40 + 8);
                if (v14 > v40 + 8 || (unint64_t)v41 > 0xFFFFFFFFFFFFFFFBLL || v40 + 12 > v15)
                  goto LABEL_95;
                *(_BYTE *)(v8 + 94) = *(_BYTE *)(v23 + 3);
                *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)(v23 + 4)) + (bswap32(*v41) >> 16);
                v34 = (bswap32(*(unsigned __int16 *)(v40 + 10)) >> 16) - (bswap32(*v41) >> 16);
                v44 = v34 < 0;
                goto LABEL_82;
              case 4:
                v45 = bswap32(*(_DWORD *)(v23 + 8));
                v46 = v18 - v17;
                if (v46 + 1 < *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 40))
                  LODWORD(v47) = v46 + 1;
                else
                  LODWORD(v47) = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 40);
                if (v47 >= v45)
                  v47 = v45;
                else
                  v47 = v47;
                v48 = v23 + 4 * v47;
                v49 = v48 + 12;
                v50 = v48 + 16;
                if (v14 > v49 || v50 > v15)
                  goto LABEL_95;
                if (!(_DWORD)v47)
                  goto LABEL_80;
                v52 = (unsigned __int16 *)(v14 + v22 + 18);
                while (v9 != bswap32(*(v52 - 3)) >> 16)
                {
                  v52 += 2;
                  if (!--v47)
                    goto LABEL_80;
                }
                *(_BYTE *)(v8 + 94) = *(_BYTE *)(v23 + 3);
                *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)(v23 + 4)) + (bswap32(*(v52 - 2)) >> 16);
                v34 = (bswap32(*v52) >> 16) - (bswap32(*(v52 - 2)) >> 16);
                v44 = v34 < 0;
LABEL_82:
                *(_DWORD *)(v8 + 60) = v34;
                if (!v44)
                  goto LABEL_83;
                goto LABEL_93;
              case 5:
                v53 = bswap32(*(_DWORD *)(v23 + 20));
                v54 = v18 - v17;
                if (v54 + 1 < *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 40))
                  LODWORD(v55) = v54 + 1;
                else
                  LODWORD(v55) = *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 40);
                if (v55 >= v53)
                  v55 = v53;
                else
                  v55 = v55;
                v56 = v23 + 2 * v55;
                v57 = v56 + 24;
                v58 = v56 + 26;
                if (v14 > v57 || v58 > v15)
                  goto LABEL_95;
                if (!(_DWORD)v55)
                  goto LABEL_80;
                v60 = 0;
                v61 = v14 + v22 + 24;
                break;
              default:
                goto LABEL_80;
            }
            while (v9 != bswap32(*(unsigned __int16 *)(v61 + 2 * v60)) >> 16)
            {
              if (v55 == ++v60)
              {
LABEL_80:
                v39 = 0;
                goto LABEL_84;
              }
            }
            *(_BYTE *)(v8 + 94) = *(_BYTE *)(v23 + 3);
            *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)(v23 + 4)) + bswap32(*(_DWORD *)(v23 + 8)) * v60;
            v34 = bswap32(*(_DWORD *)(v23 + 8));
LABEL_92:
            *(_DWORD *)(v8 + 60) = v34;
            if (HIWORD(v34))
            {
LABEL_93:
              *(_DWORD *)(v8 + 60) = 0;
              goto LABEL_17;
            }
LABEL_83:
            v39 = (unsigned __int16)v34;
LABEL_84:
            v62 = *(unsigned __int8 *)(v8 + 94);
            if (v62 != 3 && (v62 - 10) > 0xFFFFFFF6)
              break;
          }
        }
      }
    }
LABEL_17:
    *(_DWORD *)(v7 + 60) = 0;
LABEL_18:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 152))
      return 0;
    if (*a2 >= 1 && !v5)
    {
      v9 = 0;
    }
    else
    {
      if (*a2 == 1 || v4 == 1)
      {
LABEL_95:
        exception = __cxa_allocate_exception(2uLL);
        *exception = 5;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      }
      v9 = 1;
    }
    *a2 = v9;
    v6 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(v6 + 80);
    v5 = 1;
  }
  *(_DWORD *)(v7 + 60) = v39;
  if (!v39)
    goto LABEL_18;
  return 1;
}

uint64_t ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *exception;

  v2 = 40;
  if (!*(_WORD *)(a1 + 72))
    v2 = 32;
  if (*(_QWORD *)(a1 + v2) > a2)
    goto LABEL_8;
  v3 = 56;
  if (!*(_WORD *)(a1 + 72))
    v3 = 48;
  if (a2 + 2 > *(_QWORD *)(a1 + v3))
  {
LABEL_8:
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return *(_QWORD *)(a1 + 64);
}

unint64_t ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke_2(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  _WORD *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 > a2 || v2 + *(unsigned int *)(a1 + 40) <= a2)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return a2;
}

unint64_t ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke_3(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  _WORD *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 > a2 || v2 + *(unsigned int *)(a1 + 40) <= a2)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return a2;
}

uint64_t ShortFracMul(int a1, int a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (a1 >= 0)
    v2 = a1;
  else
    v2 = -a1;
  if (a2 >= 0)
    LOWORD(v3) = a2;
  else
    v3 = -a2;
  v4 = HIWORD(v2) * (__int16)v3;
  v5 = (v4 << 16) | 0x2000;
  v6 = (unsigned __int16)v2 * (__int16)v3;
  v7 = __CFADD__(v5, v6);
  v8 = v5 + v6;
  v9 = (4 * v4) & 0xFFFC0000;
  if (v7)
    v9 += 0x40000;
  v10 = v9 & 0xFFFC0000 | (v8 >> 14);
  if (a1 >> 31 == (unsigned __int16)(a2 & 0x8000) >> 15)
    return v10;
  else
    return -v10;
}

uint64_t Mul26Dot6(int a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (a1 >= 0)
    v2 = a1;
  else
    v2 = -a1;
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = -a2;
  v4 = (__PAIR64__(((unsigned __int16)v3 * HIWORD(v2) + HIWORD(v3) * (unsigned __int16)v2) >> 16, (((unsigned __int16)v3 * HIWORD(v2) + HIWORD(v3) * (unsigned __int16)v2) << 16) | 0x20)+ __PAIR64__(HIWORD(v3) * HIWORD(v2), (unsigned __int16)v3 * (unsigned __int16)v2)) >> 6;
  if ((a2 ^ a1) < 0)
    v4 = -v4;
  if ((a1 + 46340) >= 0x16A09 || (a2 + 46340) >= 0x16A09)
    return v4;
  else
    return ((a2 * a1 + 32) >> 6);
}

uint64_t Div26Dot6(int a1, int a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;

  if (!a2)
  {
    v3 = a1 >> 31;
    return v3 ^ 0x7FFFFFFFu;
  }
  if ((a1 + 0x1FFFFFF) <= 0x3FFFFFE)
    return ((a1 << 6) / a2);
  if (a1 >= 0)
    v4 = a1;
  else
    v4 = -a1;
  if (a2 >= 0)
    v5 = a2;
  else
    v5 = -a2;
  v6 = a2 ^ a1;
  v7 = v4 >> 26;
  if (v4 >> 26 >= v5)
  {
    v3 = v6 >> 31;
    return v3 ^ 0x7FFFFFFFu;
  }
  v8 = 0;
  v9 = 0;
  v10 = v4 << 6;
  v11 = 0x80000000;
  do
  {
    v9 = __PAIR64__(v5, v9) >> 1;
    v12 = v5 >> 1;
    v13 = v10 - v9;
    v14 = v8 + v11;
    if (v10 >= v9)
      v15 = 0;
    else
      v15 = v7;
    if (v10 >= v9)
    {
      v16 = v8 + v11;
    }
    else
    {
      v13 = v10;
      v16 = v8;
    }
    if (v7 == v12)
    {
      v8 = v16;
    }
    else
    {
      v15 = v7;
      v13 = v10;
    }
    v17 = v10 >= v9;
    v10 -= v9;
    v18 = !v17;
    v19 = v7 - v12 - v18;
    v20 = v7 > v5 >> 1;
    if (v7 > v5 >> 1)
      v7 = v19;
    else
      v7 = v15;
    if (v20)
      v8 = v14;
    else
      v10 = v13;
    v5 >>= 1;
    v20 = v11 > 1;
    v11 >>= 1;
  }
  while (v20);
  if (v6 >= 0)
    return v8;
  else
    return -v8;
}

void PrepareTheCVT(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int16 *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  void *v18;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int16 *)(v2 + 150);
  if (*(_WORD *)(v2 + 150))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v6 + 56) && *(_BYTE *)(v2 + 157))
    {
      v7 = *(__int16 **)(v6 + 48);
      v8 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 232);
      v9 = 2 * v3;
      do
      {
        v10 = *v7++;
        *v8++ = (unint64_t)(v10 * (uint64_t)a2 + 0x8000) >> 16;
        v9 -= 2;
      }
      while (v9);
    }
    else
    {
      v18 = (void *)0xAAAAAAAAAAAAAAAALL;
      ScalerGetFontTable(*(memoryContext **)a1, 1668707360, 0, &v18, 0, 0);
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(unsigned __int16 *)(v11 + 150);
      v13 = v18;
      if (*(_WORD *)(v11 + 150))
      {
        v14 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 232);
        v15 = 2 * v12;
        v16 = (unsigned __int16 *)v18;
        do
        {
          v17 = *v16++;
          *v14++ = (unint64_t)((__int16)(bswap32(v17) >> 16) * (uint64_t)a2 + 0x8000) >> 16;
          v15 -= 2;
        }
        while (v15);
      }
      ScalerReleaseFontTable(*(memoryContext **)a1, v13);
    }
  }
}

void ReleaseProgramPtrs(memoryContext *a1, uint64_t a2)
{
  const void *v4;
  const void *v5;

  v4 = *(const void **)(a2 + 64);
  if (v4)
  {
    ScalerReleaseFontTable(a1, v4);
    *(_QWORD *)(a2 + 64) = 0;
  }
  v5 = *(const void **)(a2 + 72);
  if (v5)
  {
    ScalerReleaseFontTable(a1, v5);
    *(_QWORD *)(a2 + 72) = 0;
  }
}

uint64_t SetUpProgramPtrs(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 24);
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 280) = 0;
  if (*(_DWORD *)(v2 + 120))
    result = ScalerGetFontTable(*(memoryContext **)result, 1718642541, 0, (_QWORD *)(v3 + 272), 0, 0);
  if (*(_DWORD *)(v2 + 124) && (!*(_BYTE *)(*(_QWORD *)(v1 + 24) + 486) || *(_BYTE *)(v3 + 473)))
    result = ScalerGetFontTable(*(memoryContext **)v1, 1886545264, 0, (_QWORD *)(v3 + 280), 0, 0);
  *(_QWORD *)(v3 + 456) = v2 + 36;
  *(_DWORD *)(v3 + 464) = *(unsigned __int16 *)(v2 + 150);
  if (!*(_QWORD *)(v3 + 216))
  {
    result = (uint64_t)malloc_type_calloc(0x400uLL, 1uLL, 0x30AFEDDFuLL);
    *(_QWORD *)(v3 + 216) = result;
    *(_DWORD *)(v3 + 212) = 1024;
  }
  return result;
}

uint64_t SetGlobalGSMapping(uint64_t a1, int *a2, int a3)
{
  int v4;
  int v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v10;
  uint64_t result;
  char v12;

  *(_DWORD *)(a1 + 92) = (*a2 + 0x8000) >> 16;
  *(_DWORD *)(a1 + 96) = (a2[4] + 0x8000) >> 16;
  v4 = (int)((double)*a2 * 64.0 / (double)a3);
  *(_DWORD *)(a1 + 100) = v4;
  v5 = (int)((double)a2[4] * 64.0 / (double)a3);
  *(_DWORD *)(a1 + 104) = v5;
  v6 = (double)*(int *)(a1 + 80) * 0.0000152587891;
  v7 = vcvtd_n_s64_f64((double)*a2 * 0.0000152587891 / v6, 0x10uLL);
  *(_DWORD *)(a1 + 108) = v7;
  v8 = vcvtd_n_s64_f64((double)a2[4] * 0.0000152587891 / v6, 0x10uLL);
  *(_DWORD *)(a1 + 112) = v8;
  v10 = v7 == 0x10000 && v8 == 0x10000;
  *(_BYTE *)(a1 + 266) = v10;
  *(_BYTE *)(a1 + 267) = 0;
  result = M3x3Flags(a2);
  if ((result - 2) < 2)
  {
    v12 = 2;
  }
  else
  {
    if ((result - 4) > 1)
      return result;
    *(_BYTE *)(a1 + 267) = 1;
    v12 = 3;
  }
  if (v4 != v5)
    *(_BYTE *)(a1 + 267) = v12;
  return result;
}

void RunFontProgram(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1[1] + 120);
  if ((_DWORD)v2)
  {
    v4 = a1[3];
    v5 = v4 + 208;
    *(_QWORD *)(v4 + 332) = 0;
    v6[0] = 0;
    v6[1] = 0;
    fnt_Execute((uint64_t)v6, v4 + 208, *(unsigned __int8 **)(v4 + 272), *(_QWORD *)(v4 + 272) + v2, a2, *a1, 0, 0, 0);
    *(_BYTE *)(a1[1] + 160) = *(_DWORD *)(v5 + 124);
  }
}

__n128 RunPreProgram(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  if (*(_DWORD *)(v3 + 124))
  {
    v6 = a1[3];
    *(_DWORD *)(v6 + 336) = 1;
    SetGlobalGSMapping(v6 + 208, (int *)(a2 + 36), *(__int16 *)(v3 + 130));
    v7 = *(_OWORD *)(v6 + 360);
    *(_OWORD *)(v6 + 400) = *(_OWORD *)(v6 + 344);
    *(_OWORD *)(v6 + 416) = v7;
    *(_OWORD *)(v6 + 432) = *(_OWORD *)(v6 + 376);
    *(_QWORD *)(v6 + 448) = *(_QWORD *)(v6 + 392);
    v10[0] = a1[5] + 56;
    v10[1] = 0;
    fnt_Execute((uint64_t)v10, v6 + 208, *(unsigned __int8 **)(v6 + 280), *(_QWORD *)(v6 + 280) + *(unsigned int *)(a1[1] + 124), a3, *a1, 0, 0, 0);
    if ((*(_BYTE *)(v6 + 416) & 2) == 0)
    {
      v9 = *(_OWORD *)(v6 + 416);
      *(_OWORD *)(v6 + 344) = *(_OWORD *)(v6 + 400);
      *(_OWORD *)(v6 + 360) = v9;
      result = *(__n128 *)(v6 + 432);
      *(__n128 *)(v6 + 376) = result;
      *(_QWORD *)(v6 + 392) = *(_QWORD *)(v6 + 448);
    }
  }
  return result;
}

void RunGlyphProgram(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, BOOL a6)
{
  uint64_t v11;
  __int128 v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v11 = a1[3];
    *(_DWORD *)(v11 + 336) = 3;
    SetGlobalGSMapping(v11 + 208, (int *)(a3 + 36), *(__int16 *)(a1[1] + 130));
    v12 = *(_OWORD *)(v11 + 360);
    *(_OWORD *)(v11 + 400) = *(_OWORD *)(v11 + 344);
    *(_OWORD *)(v11 + 416) = v12;
    *(_OWORD *)(v11 + 432) = *(_OWORD *)(v11 + 376);
    *(_QWORD *)(v11 + 448) = *(_QWORD *)(v11 + 392);
    v13[0] = a1[5] + 56;
    v13[1] = a2;
    fnt_Execute((uint64_t)v13, v11 + 208, a5, (unint64_t)&a5[a4], 0, *a1, *(unsigned __int8 *)(a1[2] + 56), *(unsigned __int8 *)(a1[1] + 157), a6);
  }
}

uint64_t M3x3Flags(_DWORD *a1)
{
  uint64_t result;
  int v3;

  if (a1[2] || a1[5])
    return 6;
  v3 = a1[8];
  if (v3 < 1)
    return 7;
  if (v3 != 0x40000000)
    return 6;
  if (a1[6])
    result = 1;
  else
    result = a1[7] != 0;
  if (a1[1] || a1[3])
    return result | 4;
  if (*a1 != 0x10000 || a1[4] != 0x10000)
    return result | 2;
  return result;
}

uint64_t M3x3Inverse(int *a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  __int16 v79;
  __int16 v80;
  unsigned __int16 v81;
  unsigned int v82;
  unsigned int v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  int64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unsigned int v113[10];
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  result = 1;
  switch(a2)
  {
    case -1:
    case 7:
      return result;
    case 0:
      if (a1 != (int *)a3)
      {
        v19 = *(_OWORD *)a1;
        v20 = *((_OWORD *)a1 + 1);
        *(_DWORD *)(a3 + 32) = a1[8];
        *(_OWORD *)a3 = v19;
        *(_OWORD *)(a3 + 16) = v20;
      }
      return 0;
    case 1:
      *(_DWORD *)a3 = *a1;
      *(_DWORD *)(a3 + 4) = a1[1];
      *(_DWORD *)(a3 + 8) = a1[2];
      *(_DWORD *)(a3 + 12) = a1[3];
      *(_DWORD *)(a3 + 16) = a1[4];
      *(_DWORD *)(a3 + 20) = a1[5];
      *(_DWORD *)(a3 + 24) = -a1[6];
      v8 = -a1[7];
      goto LABEL_15;
    case 2:
    case 3:
      v6 = *a1;
      if ((0x100000000 / v6) == 0x80000000)
        return result;
      *(_DWORD *)a3 = 0x100000000 / v6;
      *(_DWORD *)(a3 + 4) = a1[1];
      *(_DWORD *)(a3 + 8) = a1[2];
      *(_DWORD *)(a3 + 12) = a1[3];
      v7 = a1[4];
      if ((0x100000000 / v7) == 0x80000000)
        return result;
      *(_DWORD *)(a3 + 16) = 0x100000000 / v7;
      *(_DWORD *)(a3 + 20) = a1[5];
      if ((a2 & 1) == 0)
      {
        *(_DWORD *)(a3 + 24) = a1[6];
        v8 = a1[7];
LABEL_15:
        *(_DWORD *)(a3 + 28) = v8;
        v21 = a1[8];
        goto LABEL_16;
      }
      v95 = ((uint64_t)a1[6] << 16) / v6;
      if ((_DWORD)v95 != 0x80000000)
      {
        *(_DWORD *)(a3 + 24) = -(int)v95;
        v96 = ((uint64_t)a1[7] << 16) / v7;
        if ((_DWORD)v96 != 0x80000000)
        {
          v8 = -(int)v96;
          goto LABEL_15;
        }
      }
      return result;
    case 4:
    case 5:
      v9 = a1[4];
      v10 = v9 * (uint64_t)*a1;
      v11 = HIDWORD(v10);
      v12 = a1[1] * (uint64_t)a1[3];
      v13 = v10 >= v12;
      v14 = (v10 - v12);
      if (v13)
        v15 = -HIDWORD(v12);
      else
        v15 = ~HIDWORD(v12);
      v16 = (v15 + v11);
      v17 = v14 | (v16 << 32);
      v18 = v14;
      if (v17 < 0)
      {
        if ((_DWORD)v14)
        {
          v18 = -(int)v14;
          LODWORD(v16) = ~(_DWORD)v16;
          if (!(_DWORD)v16)
            goto LABEL_47;
        }
        else
        {
          LODWORD(v16) = -(int)v16;
        }
LABEL_62:
        v83 = WORD1(v16);
        v84 = WORD1(v16) != 0;
        if (!WORD1(v16))
          v83 = v16;
        v85 = 16 * v84;
        if (v83 > 0xFF)
        {
          v83 >>= 8;
          v85 = (16 * (v84 & 1)) | 8;
        }
        if (v83 > 0xF)
        {
          v83 >>= 4;
          v85 |= 4u;
        }
        if (v83 > 3)
        {
          v83 >>= 2;
          v85 |= 2u;
        }
        if (v83 <= 1)
          v86 = v85;
        else
          v86 = v85 + 1;
        v81 = v86 + 32;
        goto LABEL_74;
      }
      if ((_DWORD)v16)
        goto LABEL_62;
LABEL_47:
      if (!v18)
        goto LABEL_60;
      v78 = HIWORD(v18);
      v79 = HIWORD(v18) != 0;
      if (!HIWORD(v18))
        v78 = v18;
      v80 = 16 * v79;
      if (v78 > 0xFF)
      {
        v78 >>= 8;
        v80 = (16 * (v79 & 1)) | 8;
      }
      if (v78 > 0xF)
      {
        v78 >>= 4;
        v80 |= 4u;
      }
      if (v78 > 3)
      {
        v78 >>= 2;
        v80 |= 2u;
      }
      v81 = v78 <= 1 ? v80 : v80 + 1;
      if (v81 < 0x1Fu)
      {
LABEL_60:
        v82 = 0;
        goto LABEL_75;
      }
LABEL_74:
      v82 = (unsigned __int16)(v81 - 30);
      LODWORD(v14) = ((unint64_t)(v17 << (30 - v81)) >> 63)
                   + (v17 >> (v81 - 30));
LABEL_75:
      if ((_DWORD)v14)
      {
        v87 = (unint64_t)v9 << 32;
        if (v82)
          v87 = (v87 >> v82) + ((unint64_t)(v87 << -(char)v82) >> 63);
        v88 = (int)v14;
        v89 = v87 / (int)v14;
        *(_DWORD *)a3 = v89;
        if ((_DWORD)v89 != 0x80000000)
        {
          v90 = (unint64_t)-a1[1] << 32;
          if (v82)
            v90 = (v90 >> v82) + ((unint64_t)(v90 << -(char)v82) >> 63);
          v91 = v90 / (int)v14;
          *(_DWORD *)(a3 + 4) = v91;
          if ((_DWORD)v91 != 0x80000000)
          {
            *(_DWORD *)(a3 + 8) = 0;
            v92 = (unint64_t)-a1[3] << 32;
            if (v82)
            {
              v93 = (uint64_t)((v92 >> v82) + ((unint64_t)(v92 << -(char)v82) >> 63)) / (int)v14;
              *(_DWORD *)(a3 + 12) = v93;
              if ((_DWORD)v93 == 0x80000000)
                return result;
              v94 = ((uint64_t)((unint64_t)*a1 << 32) >> v82)
                  + ((unint64_t)*a1 << 32 << (64 - v82) >> 63);
            }
            else
            {
              v97 = v92 / (int)v14;
              *(_DWORD *)(a3 + 12) = v97;
              if ((_DWORD)v97 == 0x80000000)
                return result;
              v94 = (unint64_t)*a1 << 32;
            }
            v98 = v94 / (int)v14;
            *(_DWORD *)(a3 + 16) = v98;
            if ((_DWORD)v98 != 0x80000000)
            {
              *(_DWORD *)(a3 + 20) = 0;
              if ((a2 & 1) != 0)
              {
                v99 = a1[7] * (uint64_t)a1[3];
                v100 = a1[4] * (uint64_t)a1[6];
                v101 = ~HIDWORD(v100);
                v102 = -HIDWORD(v100);
                v13 = v99 >= v100;
                v103 = (v99 - v100);
                if (!v13)
                  v102 = v101;
                v104 = (__int16)(v82 - 16);
                v105 = (v99 + (v102 << 32)) & 0xFFFFFFFF00000000 | v103;
                if (v104 < (__int16)(ATSWideScale(v105) - 62))
                  return 1;
                if (v82 < 0x11)
                {
                  if (v82 != 16)
                    v105 <<= 16 - v82;
                }
                else
                {
                  v105 = (v105 >> (v82 - 16))
                       + ((unint64_t)(v105 << (16 - v82)) >> 63);
                }
                *(_DWORD *)(a3 + 24) = v105 / v88;
                if ((v105 / v88) == 0x80000000)
                  return 1;
                v106 = a1[6] * (uint64_t)a1[1];
                v107 = *a1 * (uint64_t)a1[7];
                v108 = ~HIDWORD(v107);
                v109 = -HIDWORD(v107);
                v13 = v106 >= v107;
                v110 = (v106 - v107);
                if (!v13)
                  v109 = v108;
                v111 = (v106 + (v109 << 32)) & 0xFFFFFFFF00000000 | v110;
                if (v104 < (__int16)(ATSWideScale(v111) - 62))
                  return 1;
                if (v82 < 0x11)
                {
                  if (v82 != 16)
                    v111 <<= 16 - v82;
                }
                else
                {
                  v111 = (v111 >> (v82 - 16))
                       + ((unint64_t)(v111 << (16 - v82)) >> 63);
                }
                *(_DWORD *)(a3 + 28) = v111 / v88;
                if ((v111 / v88) == 0x80000000)
                  return 1;
              }
              else
              {
                *(_QWORD *)(a3 + 24) = 0;
              }
              v21 = 0x40000000;
LABEL_16:
              *(_DWORD *)(a3 + 32) = v21;
              return 0;
            }
          }
        }
      }
      return result;
    case 6:
      v22 = a1[7];
      v23 = a1[8];
      v24 = a1[4];
      v25 = a1[5];
      v26 = v23 * (uint64_t)v24;
      v27 = a1[6];
      v28 = v22 * (uint64_t)v25;
      v29 = HIDWORD(v26);
      v30 = v26 - v28;
      if (v26 < v28)
        v31 = ~HIDWORD(v28);
      else
        v31 = -HIDWORD(v28);
      v32 = v31 + v29;
      v34 = a1[2];
      v33 = a1[3];
      v35 = v34 * (uint64_t)v22;
      v36 = *a1;
      v37 = a1[1];
      v38 = v37 * (uint64_t)v23;
      v112 = 34607134;
      v113[0] = v30;
      v39 = HIDWORD(v35);
      *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v115 = v40;
      v114 = v40;
      v113[1] = v32;
      v41 = -HIDWORD(v38);
      v13 = v35 >= v38;
      v42 = v35 - v38;
      if (!v13)
        v41 = ~HIDWORD(v38);
      v113[2] = v42;
      v113[3] = v41 + v39;
      v43 = v37 * (uint64_t)v25;
      v44 = v34 * (uint64_t)v24;
      v45 = HIDWORD(v43);
      v13 = v43 >= v44;
      v46 = v43 - v44;
      if (v13)
        v47 = -HIDWORD(v44);
      else
        v47 = ~HIDWORD(v44);
      v113[4] = v46;
      v113[5] = v47 + v45;
      v48 = v27 * (uint64_t)v25;
      v49 = v33 * (uint64_t)v23;
      v50 = HIDWORD(v48);
      v13 = v48 >= v49;
      v51 = v48 - v49;
      if (v13)
        v52 = -HIDWORD(v49);
      else
        v52 = ~HIDWORD(v49);
      v113[6] = v51;
      v113[7] = v52 + v50;
      v53 = v36 * (uint64_t)v23;
      v54 = v27 * (uint64_t)v34;
      v55 = HIDWORD(v53);
      v13 = v53 >= v54;
      v56 = v53 - v54;
      if (v13)
        v57 = -HIDWORD(v54);
      else
        v57 = ~HIDWORD(v54);
      v113[8] = v56;
      v113[9] = v57 + v55;
      v58 = v33 * (uint64_t)v34;
      v61 = v36 * (uint64_t)v25;
      v59 = HIDWORD(v61);
      v60 = HIDWORD(v58);
      v13 = v58 >= v61;
      LODWORD(v61) = v58 - v61;
      if (v13)
        v62 = -HIDWORD(v61);
      else
        v62 = ~(_DWORD)v59;
      LODWORD(v114) = v61;
      DWORD1(v114) = v62 + v60;
      v63 = v33 * (uint64_t)v22;
      v64 = v27 * (uint64_t)v24;
      v65 = HIDWORD(v63);
      v13 = v63 >= v64;
      v66 = v63 - v64;
      if (v13)
        v67 = -HIDWORD(v64);
      else
        v67 = ~HIDWORD(v64);
      DWORD2(v114) = v66;
      HIDWORD(v114) = v67 + v65;
      v68 = v27 * (uint64_t)v37;
      v71 = v36 * (uint64_t)v22;
      v69 = HIDWORD(v71);
      v70 = HIDWORD(v68);
      v13 = v68 >= v71;
      LODWORD(v71) = v68 - v71;
      if (v13)
        v72 = -HIDWORD(v71);
      else
        v72 = ~(_DWORD)v69;
      LODWORD(v115) = v71;
      DWORD1(v115) = v72 + v70;
      v73 = v36 * (uint64_t)v24;
      v74 = v33 * (uint64_t)v37;
      v75 = HIDWORD(v73);
      v13 = v73 >= v74;
      v76 = v73 - v74;
      if (v13)
        v77 = -HIDWORD(v74);
      else
        v77 = ~HIDWORD(v74);
      DWORD2(v115) = v76;
      HIDWORD(v115) = v77 + v75;
      return M3x3WideNorm(v113, (_DWORD *)a3, (char *)&v112);
    default:
      return 0;
  }
}

uint64_t ATSWideScale(unint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  __int16 v3;
  __int16 v5;
  __int16 v6;
  __int16 v7;

  v1 = HIDWORD(a1);
  if ((a1 & 0x8000000000000000) != 0)
  {
    if ((_DWORD)a1)
    {
      LODWORD(a1) = -(int)a1;
      LODWORD(v1) = ~(_DWORD)v1;
      if (!(_DWORD)v1)
      {
LABEL_3:
        if ((_DWORD)a1)
        {
          v2 = WORD1(a1);
          if (!WORD1(a1))
            v2 = a1;
          if (v2 <= 0xFF)
          {
            v3 = 16 * (WORD1(a1) != 0);
          }
          else
          {
            v2 >>= 8;
            v3 = (16 * (WORD1(a1) != 0)) | 8;
          }
          if (v2 > 0xF)
          {
            v2 >>= 4;
            v3 |= 4u;
          }
          if (v2 > 3)
          {
            v2 >>= 2;
            v3 |= 2u;
          }
          if (v2 <= 1)
            return v3;
          else
            return (__int16)(v3 + 1);
        }
        else
        {
          return -1;
        }
      }
    }
    else
    {
      LODWORD(v1) = -HIDWORD(a1);
    }
  }
  else if (!HIDWORD(a1))
  {
    goto LABEL_3;
  }
  v5 = WORD1(v1) != 0;
  if (WORD1(v1))
    LODWORD(v1) = WORD1(v1);
  v6 = 16 * v5;
  if (v1 > 0xFF)
  {
    LODWORD(v1) = v1 >> 8;
    v6 = (16 * (v5 & 1)) | 8;
  }
  if (v1 > 0xF)
  {
    LODWORD(v1) = v1 >> 4;
    v6 |= 4u;
  }
  if (v1 > 3)
  {
    LODWORD(v1) = v1 >> 2;
    v6 |= 2u;
  }
  if (v1 <= 1)
    v7 = v6;
  else
    v7 = v6 + 1;
  return (__int16)(v7 + 32);
}

uint64_t M3x3WideNorm(unsigned int *a1, _DWORD *a2, char *a3)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  int v17;
  unsigned int v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  int v21;
  unsigned int v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  int v25;
  unsigned int v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  int v29;
  unsigned int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  int v33;
  unsigned int v34;
  unsigned __int16 v35;
  unsigned __int16 v36;
  int v37;
  unsigned int v38;
  unsigned __int16 v39;
  int v40;
  unsigned __int16 v41;
  int v42;
  int v43;
  _DWORD *v44;
  unint64_t v45;
  int v46;
  _BOOL8 v47;
  unsigned int *v48;
  char *v49;
  int v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  __int128 v57;
  int v58;
  __int16 v59;
  unsigned __int16 v60;
  unsigned __int16 v61;
  int v62;
  uint64_t result;
  unsigned int v64;
  unsigned int v65;
  unsigned __int16 v66;
  unsigned __int16 v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t v75;
  int64x2_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  uint64_t v88;

  v4 = 0;
  v88 = *MEMORY[0x1E0C80C00];
  v84 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v82 = v5;
  v83 = v5;
  v80 = v5;
  v81 = v5;
  do
  {
    v6 = (int *)((char *)&v80 + v4 * 4);
    v8 = a1[v4];
    v7 = a1[v4 + 1];
    v4 += 2;
    v9 = ~v8;
    if (v7)
    {
      v10 = -v7;
    }
    else
    {
      v9 = -v8;
      v10 = 0;
    }
    if (v8 < 0)
    {
      v8 = v9;
      v7 = v10;
    }
    v11 = 2 * v8;
    if (!v8)
      v11 = v7 >> 31;
    v12 = __CFADD__(v11, v7);
    v13 = v11 + v7;
    if (v12)
      ++v8;
    *v6 = v8;
    v6[1] = v13;
  }
  while ((_DWORD)(v4 * 4) != 72);
  v14 = DWORD1(v80);
  if (HIDWORD(v80) | HIDWORD(v81) | DWORD1(v82) | DWORD1(v80))
  {
    if (DWORD1(v80))
    {
      if (HIWORD(DWORD1(v80)))
        v14 = HIWORD(DWORD1(v80));
      v15 = 16 * (HIWORD(DWORD1(v80)) != 0);
      if (v14 > 0xFF)
      {
        v14 >>= 8;
        v15 = (16 * (HIWORD(DWORD1(v80)) != 0)) | 8;
      }
      if (v14 > 0xF)
      {
        v14 >>= 4;
        v15 |= 4u;
      }
      if (v14 > 3)
      {
        v14 >>= 2;
        v15 |= 2u;
      }
      if (v14 <= 1)
        v16 = v15;
      else
        v16 = v15 + 1;
      v17 = v16 + 2;
    }
    else
    {
      v17 = 1;
    }
  }
  else
  {
    v18 = v80;
    if (!(DWORD2(v80) | DWORD2(v81) | v82 | v80))
    {
      v21 = -64;
      goto LABEL_44;
    }
    if ((_DWORD)v80)
    {
      if (WORD1(v80))
        v18 = WORD1(v80);
      v19 = 16 * (WORD1(v80) != 0);
      if (v18 > 0xFF)
      {
        v18 >>= 8;
        v19 = (16 * (WORD1(v80) != 0)) | 8;
      }
      if (v18 > 0xF)
      {
        v18 >>= 4;
        v19 |= 4u;
      }
      if (v18 > 3)
      {
        v18 >>= 2;
        v19 |= 2u;
      }
      if (v18 <= 1)
        v20 = v19;
      else
        v20 = v19 + 1;
      v17 = v20 - 30;
    }
    else
    {
      v17 = -31;
    }
  }
  v21 = v17 - *a3;
LABEL_44:
  v22 = DWORD1(v81);
  if (HIDWORD(v82) | DWORD1(v81))
  {
    if (DWORD1(v81))
    {
      if (HIWORD(DWORD1(v81)))
        v22 = HIWORD(DWORD1(v81));
      v23 = 16 * (HIWORD(DWORD1(v81)) != 0);
      if (v22 > 0xFF)
      {
        v22 >>= 8;
        v23 = (16 * (HIWORD(DWORD1(v81)) != 0)) | 8;
      }
      if (v22 > 0xF)
      {
        v22 >>= 4;
        v23 |= 4u;
      }
      if (v22 > 3)
      {
        v22 >>= 2;
        v23 |= 2u;
      }
      if (v22 <= 1)
        v24 = v23;
      else
        v24 = v23 + 1;
      v25 = v24 + 2;
    }
    else
    {
      v25 = 1;
    }
  }
  else
  {
    v26 = v81;
    if (!(DWORD2(v82) | v81))
    {
      v29 = -64;
      goto LABEL_76;
    }
    if ((_DWORD)v81)
    {
      if (WORD1(v81))
        v26 = WORD1(v81);
      v27 = 16 * (WORD1(v81) != 0);
      if (v26 > 0xFF)
      {
        v26 >>= 8;
        v27 = (16 * (WORD1(v81) != 0)) | 8;
      }
      if (v26 > 0xF)
      {
        v26 >>= 4;
        v27 |= 4u;
      }
      if (v26 > 3)
      {
        v26 >>= 2;
        v27 |= 2u;
      }
      if (v26 <= 1)
        v28 = v27;
      else
        v28 = v27 + 1;
      v25 = v28 - 30;
    }
    else
    {
      v25 = -31;
    }
  }
  v29 = v25 - a3[1];
LABEL_76:
  if (v29 > v21)
    v21 = v29;
  v30 = DWORD1(v83);
  if (HIDWORD(v83) | DWORD1(v83))
  {
    if (DWORD1(v83))
    {
      if (HIWORD(DWORD1(v83)))
        v30 = HIWORD(DWORD1(v83));
      v31 = 16 * (HIWORD(DWORD1(v83)) != 0);
      if (v30 > 0xFF)
      {
        v30 >>= 8;
        v31 = (16 * (HIWORD(DWORD1(v83)) != 0)) | 8;
      }
      if (v30 > 0xF)
      {
        v30 >>= 4;
        v31 |= 4u;
      }
      if (v30 > 3)
      {
        v30 >>= 2;
        v31 |= 2u;
      }
      if (v30 <= 1)
        v32 = v31;
      else
        v32 = v31 + 1;
      v33 = v32 + 2;
    }
    else
    {
      v33 = 1;
    }
  }
  else
  {
    v34 = v83;
    if (!(DWORD2(v83) | v83))
    {
      v37 = -64;
      goto LABEL_110;
    }
    if ((_DWORD)v83)
    {
      if (WORD1(v83))
        v34 = WORD1(v83);
      v35 = 16 * (WORD1(v83) != 0);
      if (v34 > 0xFF)
      {
        v34 >>= 8;
        v35 = (16 * (WORD1(v83) != 0)) | 8;
      }
      if (v34 > 0xF)
      {
        v34 >>= 4;
        v35 |= 4u;
      }
      if (v34 > 3)
      {
        v34 >>= 2;
        v35 |= 2u;
      }
      if (v34 <= 1)
        v36 = v35;
      else
        v36 = v35 + 1;
      v33 = v36 - 30;
    }
    else
    {
      v33 = -31;
    }
  }
  v37 = v33 - a3[2];
LABEL_110:
  if (v37 > v21)
    v21 = v37;
  v38 = HIDWORD(v84);
  if (HIDWORD(v84))
  {
    if (HIWORD(HIDWORD(v84)))
      v38 = HIWORD(HIDWORD(v84));
    v39 = 16 * (HIWORD(HIDWORD(v84)) != 0);
    if (v38 > 0xFF)
    {
      v38 >>= 8;
      v39 = (16 * (HIWORD(HIDWORD(v84)) != 0)) | 8;
    }
    if (v38 > 0xF)
    {
      v38 >>= 4;
      v39 |= 4u;
    }
    if (v38 > 3)
    {
      v38 >>= 2;
      v39 |= 2u;
    }
    v40 = 2;
  }
  else
  {
    v38 = v84;
    if (!(_DWORD)v84)
    {
      v42 = -64;
      goto LABEL_136;
    }
    if (WORD1(v84))
      v38 = WORD1(v84);
    v39 = 16 * (WORD1(v84) != 0);
    if (v38 > 0xFF)
    {
      v38 >>= 8;
      v39 = (16 * (WORD1(v84) != 0)) | 8;
    }
    if (v38 > 0xF)
    {
      v38 >>= 4;
      v39 |= 4u;
    }
    if (v38 > 3)
    {
      v38 >>= 2;
      v39 |= 2u;
    }
    v40 = -30;
  }
  if (v38 <= 1)
    v41 = v39;
  else
    v41 = v39 + 1;
  v42 = v40 + v41 - a3[3];
LABEL_136:
  if (v42 > v21)
    v21 = v42;
  v43 = 2;
  v44 = a2;
  do
  {
    v45 = 0;
    v46 = v43;
    v47 = v43 == 0;
    v48 = a1;
    do
    {
      a1 = v48 + 2;
      v49 = &a3[2 * v47];
      if ((_DWORD)v45 == 8)
        ++v49;
      v50 = v21 + *v49;
      v51 = v48[1] | ((unint64_t)*v48 << 32);
      v52 = v51 << -(char)v50;
      if (v50 >= 0)
        LODWORD(v52) = v51;
      v53 = (v51 >> v50) + ((unint64_t)(v51 << -(char)v50) >> 63);
      if (v50 < 1)
        LODWORD(v53) = v52;
      v44[v45 / 4] = v53;
      v45 += 4;
      v48 = a1;
    }
    while ((_DWORD)v45 != 12);
    v43 = v46 - 1;
    v44 = (_DWORD *)((char *)v44 + v45);
  }
  while (v46);
  v54 = M3x3Flags(a2);
  if (v54 == 7)
    return 1;
  if ((unsigned __int16)v54 == 6)
  {
    v55 = 0;
    v56 = 0;
    v87 = -1431655766;
    *(_QWORD *)&v57 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v57 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v85 = v57;
    v86 = v57;
    do
    {
      v58 = a2[v55];
      if (v58 < 0)
        v58 = -v58;
      *(_DWORD *)((char *)&v85 + v55 * 4) = v58;
      v56 |= v58;
      ++v55;
    }
    while ((_DWORD)(v55 * 4) != 36);
    if (v56)
    {
      v59 = HIWORD(v56) != 0;
      if (HIWORD(v56))
        v56 >>= 16;
      v60 = 16 * v59;
      if (v56 > 0xFF)
      {
        v56 >>= 8;
        v60 = (16 * (v59 & 1)) | 8;
      }
      if (v56 > 0xF)
      {
        v56 >>= 4;
        v60 |= 4u;
      }
      if (v56 > 3)
      {
        v56 >>= 2;
        v60 |= 2u;
      }
      if (v56 <= 1)
        v61 = v60;
      else
        v61 = v60 + 1;
      v62 = v61 - 30;
    }
    else
    {
      v62 = -31;
    }
    v64 = DWORD1(v86) + DWORD2(v85);
    if (!(DWORD1(v86) + DWORD2(v85)))
    {
      v70 = a2[8];
      if ((v70 & (v70 - 1)) != 0)
      {
        v71 = 0;
        while (v70 > *(_DWORD *)((char *)&v85 + v71) >> 1 && v70 > *(_DWORD *)((char *)&v85 + v71 + 4) >> 1)
        {
          v71 += 12;
          if ((_DWORD)v71 == 36)
          {
            v72 = 0;
            v73 = (float64x2_t)vdupq_n_s64(0x3E10000000000000uLL);
            v74 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v70 * 9.31322575e-10), 0);
            do
            {
              v75 = *(_QWORD *)&a2[v72];
              v76.i64[0] = (int)v75;
              v76.i64[1] = SHIDWORD(v75);
              *(int32x2_t *)&a2[v72] = vmovn_s64(vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v76), v73), v74), 0x1EuLL));
              v72 += 3;
            }
            while ((_DWORD)(v72 * 4) != 36);
            result = 0;
            a2[8] = 0x40000000;
            return result;
          }
        }
      }
      goto LABEL_198;
    }
    v65 = HIWORD(v64);
    if (!HIWORD(v64))
      v65 = DWORD1(v86) + DWORD2(v85);
    if (v65 <= 0xFF)
    {
      v66 = 16 * (HIWORD(v64) != 0);
    }
    else
    {
      v65 >>= 8;
      v66 = (16 * (HIWORD(v64) != 0)) | 8;
    }
    if (v65 > 0xF)
    {
      v65 >>= 4;
      v66 |= 4u;
    }
    if (v65 > 3)
    {
      v65 >>= 2;
      v66 |= 2u;
    }
    if (v65 <= 1)
      v67 = v66;
    else
      v67 = v66 + 1;
    v68 = v67;
    v69 = v67 - 29;
    if (v68 < 0x1D)
    {
      if (v64 << (29 - v68) < 0x3FFF0001)
        goto LABEL_196;
    }
    else if (v64 <= 1073676288 << v69)
    {
LABEL_196:
      if (v69 > v62)
        v62 = v69;
LABEL_198:
      if (v62 < 1)
      {
        if (v62)
        {
          v78 = 0;
          v79 = -v62;
          do
            a2[v78++] <<= v79;
          while ((_DWORD)(v78 * 4) != 36);
        }
      }
      else
      {
        v77 = 0;
        do
        {
          a2[v77] = (a2[v77] + (1 << (v62 - 1))) >> v62;
          ++v77;
        }
        while ((_DWORD)(v77 * 4) != 36);
      }
      return 0;
    }
    v69 = v68 - 28;
    goto LABEL_196;
  }
  return 0;
}

uint64_t M3x3Mul(int *a1, int a2, int32x2_t *a3, const int *a4)
{
  int v4;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  __int32 v12;
  __int32 v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  int v17;
  int v18;
  __int32 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int32 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  signed int v33;
  const int *v34;
  _DWORD v35[3];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = (int)a4;
  result = 1;
  switch(a2)
  {
    case -1:
    case 7:
      return result;
    case 1:
      if ((_DWORD)a4)
      {
        v16 = *(int32x2_t *)(a1 + 6);
        do
        {
          *a3 = vadd_s32(*a3, v16);
          ++a3;
          --v4;
        }
        while (v4);
      }
      return 0;
    case 2:
      if (!(_DWORD)a4)
        return 0;
      v17 = a1[4];
      v18 = *a1;
      result = 0;
      while (!((unint64_t)(a3->i32[0] * (uint64_t)v18 + 0x800000008000) >> 48))
      {
        a3->i32[0] = (unint64_t)(a3->i32[0] * (uint64_t)v18 + 0x8000) >> 16;
        v19 = a3->i32[1];
        if ((unint64_t)(v19 * (uint64_t)v17 + 0x800000008000) >> 48)
          break;
        a3->i32[1] = (unint64_t)(v19 * (uint64_t)v17 + 0x8000) >> 16;
        ++a3;
        if (!--v4)
          return result;
      }
      return 1;
    case 3:
      if (!(_DWORD)a4)
        return 0;
      v20 = a1[4];
      v22 = a1[6];
      v21 = a1[7];
      v23 = *a1;
      while (1)
      {
        v24 = a3->i32[1];
        v25 = v22 + ((a3->i32[0] * (uint64_t)v23 + 0x8000) >> 16);
        a3->i32[0] = v25;
        if (v25 != (int)v25)
          break;
        v26 = v21 + ((v24 * (uint64_t)v20 + 0x8000) >> 16);
        a3->i32[1] = v26;
        if (v26 != (int)v26)
          break;
        result = 0;
        ++a3;
        if (!--v4)
          return result;
      }
      return 1;
    case 4:
    case 5:
      if (!(_DWORD)a4)
        return 0;
      v9 = a1[3];
      v8 = a1[4];
      v11 = *a1;
      v10 = a1[1];
      while (1)
      {
        v12 = a3->i32[0];
        v13 = a3->i32[1];
        v14 = a1[6] + ((v13 * (uint64_t)v9 + a3->i32[0] * (uint64_t)v11 + 0x8000) >> 16);
        a3->i32[0] = v14;
        if (v14 != (int)v14)
          break;
        v15 = a1[7] + ((v13 * (uint64_t)v8 + v12 * (uint64_t)v10 + 0x8000) >> 16);
        a3->i32[1] = v15;
        if (v15 != (int)v15)
          break;
        ++a3;
        if (!--v4)
          return 0;
      }
      return 1;
    case 6:
      v35[2] = 0x10000;
      if (!(_DWORD)a4)
        return 0;
      v27 = (unint64_t)(a1[8] + 0x2000) >> 14;
      v28 = (double)a1[2] * 9.31322575e-10;
      v29 = (double)a1[5] * 9.31322575e-10;
      break;
    default:
      return 0;
  }
  while (1)
  {
    v30 = a3->i32[1];
    v31 = vcvtd_n_s64_f64(v28 * ((double)a3->i32[0] * 9.31322575e-10), 0x1EuLL);
    v32 = vcvtd_n_s64_f64(v29 * ((double)v30 * 9.31322575e-10), 0x1EuLL);
    v33 = v31 + v27 + v32;
    if (v33 < 1)
      break;
    --v4;
    v35[0] = a3->i32[0];
    v35[1] = v30;
    a3->i32[0] = VectorMultiplyDivide((uint64_t)v35, a1, v31 + v27 + v32, a4);
    a3->i32[1] = VectorMultiplyDivide((uint64_t)v35, a1 + 1, v33, v34);
    ++a3;
    if (!v4)
      return 0;
  }
  return 1;
}

uint64_t VectorMultiplyDivide(uint64_t a1, const int *a2, unsigned int a3, const int *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  int v12;

  v4 = 0;
  LODWORD(v5) = 0;
  v6 = 0;
  v7 = 1;
  do
  {
    v7 ^= 2u;
    v8 = *a2 * (uint64_t)*(int *)(a1 + v4);
    v9 = HIDWORD(v8);
    if ((_WORD)v7)
    {
      v10 = __CFADD__(v6, (_DWORD)v8);
      v6 += v8;
      if (v10)
        v11 = v5;
      else
        v11 = (unint64_t)(*a2 * (uint64_t)*(int *)(a1 + v4)) >> 32;
      if (v10)
        LODWORD(v5) = v9 + 1;
      v5 = (v5 + v11);
    }
    else
    {
      v10 = v6 >= v8;
      v6 -= v8;
      if (v10)
        v12 = -HIDWORD(v8);
      else
        v12 = ~HIDWORD(v8);
      v5 = (v12 + v5);
    }
    a2 += 3;
    v4 += 4;
  }
  while ((_DWORD)v4 != 12);
  return (uint64_t)(v6 | (unint64_t)(v5 << 32)) / a3;
}

uint64_t M3x3Concat(__int128 *a1, int a2, __int128 *a3, int a4)
{
  int v6;
  uint64_t result;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  int v57;
  int v58;
  _DWORD *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  _DWORD *v63;
  int v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[2];
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73;

  v6 = a2;
  v73 = *MEMORY[0x1E0C80C00];
  if (a2 == -1)
  {
    v6 = M3x3Flags(a1);
    if (v6 == 7)
      return 1;
  }
  if (a4 == -1)
  {
    a4 = M3x3Flags(a3);
    if (a4 == 7)
      return 1;
  }
  if (!v6)
    return 0;
  if (!a4)
  {
    result = 0;
    v10 = *a1;
    v11 = a1[1];
    *((_DWORD *)a3 + 8) = *((_DWORD *)a1 + 8);
    *a3 = v10;
    a3[1] = v11;
    return result;
  }
  if (v6 <= 1 && a4 != 6)
  {
    result = 0;
    v9 = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 6) += *((_DWORD *)a1 + 6);
    *((_DWORD *)a3 + 7) = *((_DWORD *)a1 + 7) + v9;
    return result;
  }
  if (v6 > 3)
  {
    if (v6 > 5)
    {
LABEL_48:
      v39 = 0;
      v69[0] = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v67 = v40;
      v68 = v40;
      v41 = a1 + 2;
      v65 = v40;
      v66 = v40;
      v64 = 269488144;
      v42 = 2;
      do
      {
        v43 = 0;
        v44 = v42;
        v45 = (int *)a3 + 3 * v42;
        v47 = v45[1];
        v46 = v45[2];
        v48 = *v45;
        v49 = v39;
        v50 = 3;
        do
        {
          --v50;
          v51 = (char *)&v65 + v49;
          v52 = *(int *)((char *)v41 + v43) * (uint64_t)v46;
          v53 = (((unint64_t)v52 >> 13) & 1) + (v52 >> 14);
          *(_QWORD *)((char *)v69 + v49) = v53;
          v54 = *(int *)((char *)v41 + v43 - 12) * (uint64_t)v47;
          v55 = HIDWORD(v54);
          v56 = __CFADD__((_DWORD)v53, (_DWORD)v54);
          v57 = v53 + v54;
          if (v56)
          {
            v58 = v55 + 1;
            v59 = (_DWORD *)(((unint64_t)&v65 + 24 * v44 + 8 * v50) | 4);
            LODWORD(v55) = *((_DWORD *)v51 + 17);
          }
          else
          {
            v59 = v51 + 68;
            v58 = *((_DWORD *)v51 + 17);
          }
          *v59 = v58 + v55;
          v60 = *(int *)((char *)v41 + v43 - 24) * (uint64_t)v48;
          v61 = HIDWORD(v60);
          *((_DWORD *)v51 + 16) = v57 + v60;
          if (__CFADD__(v57, (_DWORD)v60))
          {
            v62 = HIDWORD(v60) + 1;
            v63 = (_DWORD *)(((unint64_t)&v65 + 24 * v44 + 8 * v50) | 4);
            LODWORD(v61) = *(_DWORD *)((char *)v69 + v49 + 4);
          }
          else
          {
            v63 = (_DWORD *)((char *)v69 + v49 + 4);
            v62 = *(_DWORD *)((char *)v69 + v49 + 4);
          }
          *v63 = v62 + v61;
          v43 -= 4;
          v49 -= 8;
        }
        while (v43 != -12);
        v42 = v44 - 1;
        v39 -= 24;
      }
      while (v44);
      return M3x3WideNorm((unsigned int *)&v65, a3, (char *)&v64);
    }
    LODWORD(v67) = -1431655766;
    *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23 = 2;
    v24 = 24;
    v65 = v22;
    v66 = v22;
    v25 = a3;
    v26 = (char *)&v66 + 12;
LABEL_32:
    v27 = 0;
    v28 = v23;
    v29 = 3 * v23;
    v30 = *((_DWORD *)a3 + 3 * v23 + 2);
    *((_DWORD *)&v65 + v29 + 2) = v30;
    v31 = v24;
    v32 = 4;
    while (1)
    {
      v33 = *(_DWORD *)((char *)v25 + v27 + 28);
      v34 = a1[v27 / 4 + 1];
      if ((unint64_t)(v34 * (uint64_t)v33 + 0x800000008000) >> 48)
        goto LABEL_48;
      v35 = ((*(int *)((char *)a1 + v32) * (uint64_t)*(int *)((char *)a3 + v31) + 0x8000) >> 16)
          + ((((v34 * (uint64_t)v33) << 16) + 0x80000000) >> 32);
      *(_DWORD *)&v26[v27] = v35;
      if (v35 != (int)v35)
        goto LABEL_48;
      if ((v6 & 1) == 0)
        goto LABEL_44;
      if (v28 == 2)
      {
        if (a4 == 6)
        {
          v36 = *(int *)((char *)&v66 + v27 + 12)
              + ((*(int *)((char *)a1 + v27 + 28) * (uint64_t)*((int *)a3 + 8) + 0x20000000) >> 30);
          *(_DWORD *)((char *)&v66 + v27 + 12) = v36;
          goto LABEL_41;
        }
        *(_DWORD *)((char *)&v66 + v27 + 12) += *(_DWORD *)((char *)a1 + v27 + 28);
      }
      else if (a4 == 6)
      {
        v36 = v35 + ((*(int *)((char *)a1 + v27 + 28) * (uint64_t)v30 + 0x20000000) >> 30);
        *(_DWORD *)&v26[v27] = v36;
LABEL_41:
        if (v36 != (int)v36)
          goto LABEL_48;
      }
LABEL_44:
      v32 += 8;
      v31 += 4;
      v27 -= 4;
      if (v27 == -8)
      {
        v23 = v28 - 1;
        v24 -= 12;
        v26 -= 12;
        v25 = (__int128 *)((char *)v25 - 12);
        if (!v28)
        {
          result = 0;
          v37 = v66;
          *a3 = v65;
          a3[1] = v37;
          *((_DWORD *)a3 + 8) = v67;
          return result;
        }
        goto LABEL_32;
      }
    }
  }
  v12 = a3[1];
  v70 = *a3;
  v71 = v12;
  v13 = 2;
  v72 = *((_DWORD *)a3 + 8);
  v14 = a3;
  while (2)
  {
    v15 = v13;
    v16 = (int *)a3 + 3 * v13 + 2;
    v17 = 28;
    for (i = 1; i != -1; --i)
    {
      if (v6 >= 2)
      {
        v19 = *(_DWORD *)((char *)v14 + v17);
        v20 = a1[i];
        *(_DWORD *)((char *)v14 + v17) = (unint64_t)(v20 * (uint64_t)v19 + 0x8000) >> 16;
        if ((unint64_t)(v20 * (uint64_t)v19 + 0x800000008000) >> 48)
        {
LABEL_47:
          v38 = v71;
          *a3 = v70;
          a3[1] = v38;
          *((_DWORD *)a3 + 8) = v72;
          goto LABEL_48;
        }
      }
      if ((v6 & 1) != 0)
      {
        if (v15 == 2)
        {
          if (a4 != 6)
          {
            *(_DWORD *)((char *)a3 + v17) += *(_DWORD *)((char *)a1 + v17);
            goto LABEL_27;
          }
          v21 = *(int *)((char *)a3 + v17)
              + ((*(int *)((char *)a1 + v17) * (uint64_t)*((int *)a3 + 8) + 0x20000000) >> 30);
          *(_DWORD *)((char *)a3 + v17) = v21;
        }
        else
        {
          if (a4 != 6)
            goto LABEL_27;
          v21 = *(int *)((char *)v14 + v17) + ((*(int *)((char *)a1 + v17) * (uint64_t)*v16 + 0x20000000) >> 30);
          *(_DWORD *)((char *)v14 + v17) = v21;
        }
        if (v21 != (int)v21)
          goto LABEL_47;
      }
LABEL_27:
      v17 -= 4;
    }
    result = 0;
    v13 = v15 - 1;
    v14 = (__int128 *)((char *)v14 - 12);
    if (v15)
      continue;
    return result;
  }
}

uint64_t InvertMapping3x3(uint64_t a1, int *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  int v10;

  v10 = -1431655766;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8 = v4;
  v9 = v4;
  v5 = M3x3Flags(a2);
  if (M3x3Inverse(a2, v5, (uint64_t)&v8))
    return 0;
  if (&v8 != (__int128 *)a1)
  {
    v6 = v9;
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v10;
  }
  return a1;
}

const unsigned __int8 *BCDtoASCII(const unsigned __int8 *a1, const unsigned __int8 *a2, char (*a3)[18])
{
  char v3;
  char v4;
  unsigned int v5;
  char (*v6)[18];
  const unsigned __int8 *v7;
  unsigned int v8;
  _DWORD *exception;

  v3 = 0;
  v4 = 0;
  LOBYTE(v5) = 0;
  v6 = a3;
  v7 = a1;
  while (1)
  {
    if ((v4 & 1) != 0)
    {
      v8 = v5 & 0xF;
    }
    else
    {
      if (v7 < a1 || v7 + 1 > a2)
        goto LABEL_19;
      v5 = *v7;
      v8 = v5 >> 4;
      ++v7;
    }
    if (v8 > 9)
    {
      switch(v8)
      {
        case 0xAu:
          *(_BYTE *)v6 = 46;
          v6 = (char (*)[18])((char *)v6 + 1);
          goto LABEL_18;
        case 0xBu:
          if ((v3 & 1) != 0)
            goto LABEL_19;
          *(_BYTE *)v6 = 69;
          v6 = (char (*)[18])((char *)v6 + 1);
          break;
        case 0xCu:
          if ((v3 & 1) != 0)
            goto LABEL_19;
          *(_BYTE *)v6 = 69;
          if ((char *)v6 - (char *)a3 + 1 >= 18)
            goto LABEL_19;
          (*v6)[1] = 45;
          v6 = (char (*)[18])((char *)v6 + 2);
          break;
        case 0xEu:
          *(_BYTE *)v6 = 45;
          v6 = (char (*)[18])((char *)v6 + 1);
          goto LABEL_18;
        case 0xFu:
          *(_BYTE *)v6 = 0;
          return v7;
        default:
          goto LABEL_18;
      }
      v3 = 1;
    }
    else
    {
      *(_BYTE *)v6 = v8 | 0x30;
      v6 = (char (*)[18])((char *)v6 + 1);
    }
LABEL_18:
    v4 ^= 1u;
    if ((char *)v6 - (char *)a3 >= 18)
    {
LABEL_19:
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
  }
}

uint64_t TCFFFontInfo::GetIndexedArray(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5, unint64_t *a6)
{
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t result;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *exception;
  _QWORD v33[3];

  if (!a4 || (a4 + a3) > *(_DWORD *)a2)
    goto LABEL_28;
  v9 = *(unsigned __int8 *)(a2 + 4);
  v10 = v9 + v9 * a4;
  v11 = *(_QWORD **)(*(_QWORD *)a1 + 296);
  v12 = v11[371];
  v13 = v11[372] - v12;
  v14 = *(_DWORD *)(a2 + 8) + v9 * a3;
  if (!v10)
    goto LABEL_10;
  v15 = v14 + v10;
  if (v15 <= v14 || v15 > v13)
  {
    v17 = 0;
    v18 = 0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
LABEL_10:
    v18 = v13 - v14;
    v19 = v11[370];
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      v21 = v20 + v12;
      if (!v20)
        v21 = 0;
    }
    else
    {
      v21 = 0;
    }
    v17 = v21 + v14;
  }
  if (!v17)
    v18 = 0;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v18;
  *a5 = v17;
  v22 = *(int *)(a2 + 12);
  memset(v33, 170, sizeof(v33));
  MDataReference::MDataReference((MDataReference *)v33, (const MDataReference *)(a2 + 16), v9 * a4, 0);
  v23 = ReadBytes((const MDataReference *)v33, (const char *)*(unsigned __int8 *)(a2 + 4)) + v22 - 1;
  if ((int)v22 - 1 >= v23 || (result = v23 - v22, v23 == (_DWORD)v22))
  {
LABEL_28:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v25 = v22 + result;
  if (v25 <= v22 || (v26 = *(_QWORD **)(*(_QWORD *)a1 + 296), v27 = v26[371], v28 = v26[372] - v27, v25 > v28))
  {
    v22 = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    goto LABEL_27;
  }
  v29 = v26[370];
  if (!v29 || (v30 = *(_QWORD *)(v29 + 8)) == 0)
  {
    *(_QWORD *)(a2 + 48) = v22;
    *(_QWORD *)(a2 + 56) = 0;
LABEL_27:
    *a6 = v22;
    goto LABEL_28;
  }
  v31 = v30 + v27 + v22;
  *(_QWORD *)(a2 + 48) = v31;
  *(_QWORD *)(a2 + 56) = v28 - v22;
  *a6 = v31;
  return result;
}

uint64_t TCFFFontSetInfo::GetIndexedArrayOffset(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  ASSERT(*(_BYTE *)(a3 + 4) != 0, (const char *)a2);
  ASSERT(*(unsigned __int8 *)(a3 + 4) < 5u, v8);
  ASSERT(*(_DWORD *)a3 >= a4, v9);
  v10 = (const char *)*(unsigned __int8 *)(a3 + 4);
  v11 = *(_QWORD **)(a1 + 296);
  v12 = v11[371];
  v13 = v11[372] - v12;
  v14 = (int)(*(_DWORD *)(a3 + 8) + (_DWORD)v10 * a4);
  if (*(_BYTE *)(a3 + 4)
    && ((unint64_t)&v10[v14] > v14 ? (v15 = (unint64_t)&v10[v14] > v13) : (v15 = 1), v15))
  {
    v16 = 0;
    v17 = 0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    v17 = v13 - v14;
    v18 = v11[370];
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      v20 = v19 + v12;
      if (!v19)
        v20 = 0;
    }
    else
    {
      v20 = 0;
    }
    v16 = v20 + v14;
  }
  if (!v16)
    v17 = 0;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v17;
  return ReadBytesInc((MDataReference *)a2, v10) - 1;
}

void TCFFFontInfo::EnumerateFontDict(uint64_t a1, const char *a2, uint64_t a3, uint64_t (*a4)(const unsigned __int8 *, uint64_t, uint64_t, _QWORD, uint64_t))
{
  int v6;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  const unsigned __int8 *v23;
  _BOOL4 v25;
  const unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  const char *v34;
  unsigned int v35;
  const unsigned __int8 *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  _BOOL8 v40;
  _BOOL8 v41;
  _BOOL8 v42;
  const char *v43;
  int v44;
  __int16 v45;
  __int16 v46;
  const unsigned __int8 *v47;
  uint64_t v48;
  _WORD *v49;
  _BOOL8 v50;
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const char *v56;
  int v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v67;
  _DWORD *exception;
  BOOL v69[4];
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  unsigned __int16 v74;
  unint64_t v75;

  v6 = (int)a2;
  v8 = 0;
  v9 = 8;
  if ((_DWORD)a2 == 6)
  {
    v9 = 352;
    v10 = a1 + 352;
  }
  else
  {
    v10 = a1 + 8;
  }
  v11 = *(_DWORD *)(v10 + 4);
  v12 = *(unsigned int *)(a1 + v9);
  if ((_DWORD)a2 && (int)a2 <= 6)
  {
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 296);
    v14 = v13[371];
    v15 = v13[372] - v14;
    if ((_DWORD)v12 && (v12 + (int)v11 > (unint64_t)(int)v11 ? (v16 = v12 + (int)v11 > v15) : (v16 = 1), v16))
    {
      v17 = 0;
      v18 = 0xAAAAAAAAAAAAAAAALL;
    }
    else
    {
      v18 = v15 - (int)v11;
      v19 = v13[370];
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        v21 = v20 + v14;
        if (!v20)
          v21 = 0;
      }
      else
      {
        v21 = 0;
      }
      v17 = v21 + (int)v11;
    }
    if (!v17)
      v18 = 0;
    *(_QWORD *)(v10 + 24) = v17;
    *(_QWORD *)(v10 + 32) = v18;
    v8 = v17 != 0;
  }
  v22 = v12 + v11;
  ASSERT(v8, a2);
  bzero((void *)(a1 + 54), 0x4BuLL);
  v70 = v6 & 0xFFFFFFFE;
  v71 = v6;
  v23 = *(const unsigned __int8 **)(v10 + 24);
  v75 = *(_QWORD *)(v10 + 32);
  v25 = v6 == 2 || v6 == 4;
  *(_DWORD *)v69 = v25;
  while (v11 < v22)
  {
    v74 = 0;
    v73 = 0;
    v26 = CFFScanNextOpCode(v23, &v75, &v73, &v74);
    v27 = v26 - v23;
    v28 = v74;
    ASSERT(v74 < 0x4BuLL, v29);
    ++*(_BYTE *)(a1 + v28 + 54);
    if (!*(_BYTE *)(v10 + 8))
    {
      switch((int)v28)
      {
        case 15:
          v72 = -1;
          v32 = v73 == 1 && CFFDictGet<unsigned int,0u>(v23, v27, &v72, 4);
          ASSERT(v32, v30);
          v57 = v72;
          switch(v72)
          {
            case 2:
              v58 = &ExpertSubsetGlyphID_to_StringID;
              v59 = 86;
              goto LABEL_74;
            case 1:
              v58 = &ExpertGlyphID_to_StringID;
              v59 = 165;
              goto LABEL_74;
            case 0:
              v58 = &StandardRomanGlyphID_to_StringID;
              v59 = 228;
LABEL_74:
              *(_QWORD *)(a1 + 456) = v58;
              *(_QWORD *)(a1 + 464) = v59;
              goto LABEL_31;
          }
          *(_QWORD *)(a1 + 456) = 0;
          *(_QWORD *)(a1 + 464) = 0;
          if (v57 == -1)
            goto LABEL_86;
          v60 = *(_QWORD **)(*(_QWORD *)a1 + 296);
          v61 = v60[371];
          v62 = v60[372] - v61;
          if (v57 + 1 > v62)
            goto LABEL_86;
          v63 = v60[370];
          if (!v63)
            goto LABEL_86;
          v64 = *(_QWORD *)(v63 + 8);
          v65 = v64 + v61;
          if (!v64)
            v65 = 0;
          if (!v65 || v62 == v57)
          {
LABEL_86:
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E6176998;
            exception[2] = 4;
          }
          v67 = *(unsigned __int8 *)(v65 + v57);
          *(_BYTE *)(a1 + 480) = v67;
          ASSERT(v67 < 3, v56);
          *(_DWORD *)(a1 + 484) = v72 + 1;
          break;
        case 16:
          ASSERT(v71 == 1, v30);
          v36 = v23;
          v37 = v26 - v23;
          v38 = (int *)(a1 + 272);
          v39 = 4;
          goto LABEL_46;
        case 17:
          v40 = 0;
          v72 = 0;
          if (v73 == 1)
            v40 = CFFDictGet<unsigned int,0u>(v23, v27, &v72, 4);
          ASSERT(v40, v30);
          TCFFFontSetInfo::GetArrayInfo(*(_QWORD *)a1, a1 + 136, v72);
          break;
        case 18:
          if (v73 == 2)
          {
            v36 = v23;
            v37 = v26 - v23;
            v38 = (int *)(a1 + 352);
            v39 = 8;
LABEL_46:
            v41 = CFFDictGet<unsigned int,0u>(v36, v37, v38, v39);
          }
          else
          {
            v41 = 0;
          }
          goto LABEL_71;
        case 19:
          ASSERT(v71 == 6, v30);
          v72 = 0;
          v42 = CFFDictGet<int,0u>(v23, v27, &v72, 4);
          ASSERT(v42, v43);
          TCFFFontSetInfo::GetArrayInfo(*(_QWORD *)a1, a1 + 280, v72 + *(_DWORD *)(a1 + 356));
          v44 = *(_DWORD *)(a1 + 280);
          if (v44 >= 33899)
            v45 = 0x8000;
          else
            v45 = 1131;
          if (v44 >= 1239)
            v46 = v45;
          else
            v46 = 107;
          if (*(_WORD *)(a1 + 392) == 1)
            v46 = 0;
          *(_WORD *)(a1 + 344) = v46;
          break;
        case 20:
        case 21:
        case 23:
          break;
        case 22:
          ASSERT(v71 == 6, v30);
          v47 = v23;
          v48 = v26 - v23;
          v49 = (_WORD *)(a1 + 448);
          goto LABEL_64;
        case 24:
          ASSERT(v70 == 4, v30);
          v72 = 0;
          v50 = CFFDictGet<unsigned int,0u>(v23, v27, &v72, 4);
          ASSERT(v50, v51);
          v52 = *(_QWORD **)(*(_QWORD *)a1 + 296);
          v53 = v52[370];
          if (v53)
          {
            v53 = *(_QWORD *)(v53 + 8);
            if (v53)
              v53 += v52[371];
          }
          v54 = v53 + v52[372] - v52[371];
          v55 = v53 + (v72 + 2);
          if (v55 + 8 > v54 || (ItemVariationStore::Initialize((_QWORD *)(a1 + 400), v55, v54) & 1) == 0)
            goto LABEL_86;
          break;
        default:
          if ((_DWORD)v28 == 38)
          {
            v47 = v23;
            v48 = v26 - v23;
            v49 = (_WORD *)(a1 + 392);
LABEL_64:
            v41 = CFFDictGet<unsigned short,0u>(v47, v48, v49, 2);
LABEL_71:
            ASSERT(v41, v30);
          }
          else if ((_DWORD)v28 == 68)
          {
            ASSERT(*(unsigned int *)v69, v30);
            v72 = 0;
            v33 = CFFDictGet<unsigned int,0u>(v23, v27, &v72, 4);
            ASSERT(v33, v34);
            TCFFFontSetInfo::GetArrayInfo(*(_QWORD *)a1, a1 + 208, v72);
            v35 = *(_DWORD *)(a1 + 208);
            if (v35 >= 0x10000)
              goto LABEL_86;
            *(_WORD *)(a1 + 200) = v35;
          }
          break;
      }
    }
LABEL_31:
    v11 += v27;
    v31 = a4(v23, v27, v28, (__int16)v73, a3);
    v23 = v26;
    if ((v31 & 1) == 0)
      return;
  }
}

BOOL CFFDictGet<unsigned int,0u>(const unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4)
{
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  int *v6;
  unint64_t v7;
  const unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v16;
  int v17;
  int v18;
  _DWORD *exception;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x1E0C80C00];
  if (a1 == (const unsigned __int8 *)-1 || (v4 = a1, v5 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_40:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v6 = a3;
  v7 = (unint64_t)a3 + a4;
  while (1)
  {
    v8 = v4 + 1;
    v9 = *v4;
    switch(v9)
    {
      case 0x1Eu:
        memset(v26, 170, 18);
        v4 = BCDtoASCII(v8, v5, (char (*)[18])v26);
        v14 = llround(atof_l((const char *)v26, 0));
        goto LABEL_20;
      case 0x1Du:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
        {
          v22 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v22 = &off_1E6176998;
          v22[2] = 4;
        }
        v13 = *(_DWORD *)(v4 + 1);
        v4 += 5;
        v14 = bswap32(v13);
        goto LABEL_20;
      case 0x1Cu:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFDLL || v4 + 3 > v5)
        {
          v21 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v21 = &off_1E6176998;
          v21[2] = 4;
        }
        v10 = v4[1];
        v11 = v4[2];
        v4 += 3;
        v12 = (v10 << 24) | (v11 << 16);
LABEL_19:
        v14 = v12 >> 16;
        goto LABEL_20;
    }
    if (v9 < 0x20)
      return v9 != 23;
    if (v9 == 255)
    {
      if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
      {
        v23 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v23 = &off_1E6176998;
        v23[2] = 4;
      }
      v12 = (v4[1] << 24) | (v4[2] << 16);
      v4 += 5;
      goto LABEL_19;
    }
    if (v9 > 0xF6)
    {
      v16 = v4 != (const unsigned __int8 *)-2 && v4 + 2 <= v5;
      if (v9 > 0xFA)
      {
        if (!v16)
        {
          v24 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v24 = &off_1E6176998;
          v24[2] = 4;
        }
        v18 = v4[1];
        v4 += 2;
        v14 = 64148 - (v18 | (v9 << 8));
      }
      else
      {
        if (!v16)
        {
          v25 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v25 = &off_1E6176998;
          v25[2] = 4;
        }
        v17 = v4[1];
        v4 += 2;
        v14 = (v17 | (v9 << 8)) - 63124;
      }
    }
    else
    {
      v14 = v9 - 139;
      ++v4;
    }
LABEL_20:
    if ((unint64_t)v6 >= v7)
      return 0;
    *v6++ = v14;
    if (v4 == (const unsigned __int8 *)-1 || v4 + 1 > v5)
      goto LABEL_40;
  }
}

BOOL CFFDictGet<unsigned short,0u>(const unsigned __int8 *a1, uint64_t a2, _WORD *a3, uint64_t a4)
{
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  _WORD *v6;
  unint64_t v7;
  const unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  __int16 v15;
  __int16 v16;
  _DWORD *exception;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  if (a1 == (const unsigned __int8 *)-1 || (v4 = a1, v5 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_40:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v6 = a3;
  v7 = (unint64_t)a3 + a4;
  while (1)
  {
    v8 = v4 + 1;
    v9 = *v4;
    switch(v9)
    {
      case 0x1Eu:
        memset(v24, 170, 18);
        v4 = BCDtoASCII(v8, v5, (char (*)[18])v24);
        LOWORD(v9) = llround(atof_l((const char *)v24, 0));
        goto LABEL_20;
      case 0x1Du:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
        {
          v20 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v20 = &off_1E6176998;
          v20[2] = 4;
        }
        v9 = *(unsigned __int16 *)(v4 + 3);
        v4 += 5;
        LOWORD(v9) = __rev16(v9);
        goto LABEL_20;
      case 0x1Cu:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFDLL || v4 + 3 > v5)
        {
          v19 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v19 = &off_1E6176998;
          v19[2] = 4;
        }
        v10 = v4[1];
        v11 = v4[2];
        v4 += 3;
        v12 = (v10 << 24) | (v11 << 16);
LABEL_19:
        v9 = v12 >> 16;
        goto LABEL_20;
    }
    if (v9 < 0x20)
      return v9 != 23;
    if (v9 == 255)
    {
      if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
      {
        v21 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v21 = &off_1E6176998;
        v21[2] = 4;
      }
      v12 = (v4[1] << 24) | (v4[2] << 16);
      v4 += 5;
      goto LABEL_19;
    }
    if (v9 > 0xF6)
    {
      v14 = v4 != (const unsigned __int8 *)-2 && v4 + 2 <= v5;
      if (v9 > 0xFA)
      {
        if (!v14)
        {
          v22 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v22 = &off_1E6176998;
          v22[2] = 4;
        }
        v16 = v4[1];
        v4 += 2;
        LOWORD(v9) = -1388 - (v16 | ((_WORD)v9 << 8));
      }
      else
      {
        if (!v14)
        {
          v23 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v23 = &off_1E6176998;
          v23[2] = 4;
        }
        v15 = v4[1];
        v4 += 2;
        LOWORD(v9) = (v15 | ((_WORD)v9 << 8)) + 2412;
      }
    }
    else
    {
      LOWORD(v9) = v9 - 139;
      ++v4;
    }
LABEL_20:
    if ((unint64_t)v6 >= v7)
      return 0;
    *v6++ = v9;
    if (v4 == (const unsigned __int8 *)-1 || v4 + 1 > v5)
      goto LABEL_40;
  }
}

BOOL CFFDictGet<int,0u>(const unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4)
{
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  int *v6;
  unint64_t v7;
  const unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v16;
  int v17;
  int v18;
  _DWORD *exception;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x1E0C80C00];
  if (a1 == (const unsigned __int8 *)-1 || (v4 = a1, v5 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_40:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v6 = a3;
  v7 = (unint64_t)a3 + a4;
  while (1)
  {
    v8 = v4 + 1;
    v9 = *v4;
    switch(v9)
    {
      case 0x1Eu:
        memset(v26, 170, 18);
        v4 = BCDtoASCII(v8, v5, (char (*)[18])v26);
        v14 = llround(atof_l((const char *)v26, 0));
        goto LABEL_20;
      case 0x1Du:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
        {
          v22 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v22 = &off_1E6176998;
          v22[2] = 4;
        }
        v13 = *(_DWORD *)(v4 + 1);
        v4 += 5;
        v14 = bswap32(v13);
        goto LABEL_20;
      case 0x1Cu:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFDLL || v4 + 3 > v5)
        {
          v21 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v21 = &off_1E6176998;
          v21[2] = 4;
        }
        v10 = v4[1];
        v11 = v4[2];
        v4 += 3;
        v12 = (v10 << 24) | (v11 << 16);
LABEL_19:
        v14 = v12 >> 16;
        goto LABEL_20;
    }
    if (v9 < 0x20)
      return v9 != 23;
    if (v9 == 255)
    {
      if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
      {
        v23 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v23 = &off_1E6176998;
        v23[2] = 4;
      }
      v12 = (v4[1] << 24) | (v4[2] << 16);
      v4 += 5;
      goto LABEL_19;
    }
    if (v9 > 0xF6)
    {
      v16 = v4 != (const unsigned __int8 *)-2 && v4 + 2 <= v5;
      if (v9 > 0xFA)
      {
        if (!v16)
        {
          v24 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v24 = &off_1E6176998;
          v24[2] = 4;
        }
        v18 = v4[1];
        v4 += 2;
        v14 = 64148 - (v18 | (v9 << 8));
      }
      else
      {
        if (!v16)
        {
          v25 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v25 = &off_1E6176998;
          v25[2] = 4;
        }
        v17 = v4[1];
        v4 += 2;
        v14 = (v17 | (v9 << 8)) - 63124;
      }
    }
    else
    {
      v14 = v9 - 139;
      ++v4;
    }
LABEL_20:
    if ((unint64_t)v6 >= v7)
      return 0;
    *v6++ = v14;
    if (v4 == (const unsigned __int8 *)-1 || v4 + 1 > v5)
      goto LABEL_40;
  }
}

uint64_t TCFFFontInfo::EnumerateDict(uint64_t a1, const char *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  int v6;
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(const TCFFFontInfo *, int);
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char ByteInc;
  const char *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  unsigned int v34;
  uint64_t v35;
  __int16 v36;
  unsigned __int16 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned __int16 BytesInc;
  uint64_t v44;
  unsigned __int16 v45;
  uint64_t i;
  void (**v47)(MDataReference *__hidden);
  uint64_t v48;
  uint64_t v49;

  v6 = (int)a2;
  result = ASSERT(*(_DWORD *)(a1 + 48) == 1, a2);
  if (v6 == 8)
  {
    v9 = *(int *)(a1 + 272);
    if (v9 < 2)
    {
      if ((_DWORD)v9 == 1)
      {
        if (*(_UNKNOWN **)(a1 + 456) == &ExpertSubsetGlyphID_to_StringID)
          v18 = &AdobeExpertSubsetCode_to_StringID;
        else
          v18 = &AdobeExpertCode_to_StringID;
      }
      else
      {
        v18 = &AdobeStandardCode_to_StringID;
      }
      *(_QWORD *)(a1 + 472) = v18;
      for (i = 0; i != 256; ++i)
      {
        if (*(_WORD *)(*(_QWORD *)(a1 + 472) + 2 * i))
          result = a4(0, 0);
      }
    }
    else
    {
      if (*(_QWORD *)(a1 + 456))
        v10 = StandardGlyphIDToStringID;
      else
        v10 = SpecialGlyphIDToStringID;
      if ((_DWORD)v9 != -1
        && (v11 = *(_QWORD **)(*(_QWORD *)a1 + 296), v12 = v11[371], v13 = v11[372] - v12, v9 + 1 <= v13)
        && (v14 = v11[370]) != 0
        && (v15 = *(_QWORD *)(v14 + 8)) != 0)
      {
        v48 = v15 + v12 + v9;
        v49 = v13 - v9;
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
      v47 = &off_1E6176898;
      ByteInc = ReadByteInc((MDataReference *)&v47);
      result = ReadByteInc((MDataReference *)&v47);
      v21 = result;
      if ((ByteInc & 0x7F) != 0)
      {
        result = ASSERT((ByteInc & 0x7F) == 1, v20);
        if (v21)
        {
          v22 = 0;
          v23 = 1;
          do
          {
            v24 = ReadByteInc((MDataReference *)&v47);
            v25 = ReadByteInc((MDataReference *)&v47) + 1;
            do
            {
              v26 = v10((const TCFFFontInfo *)a1, (unsigned __int16)v23);
              result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))a4)(0, 0, v26, v24, a3);
              ++v23;
              v24 = (v24 + 1);
              --v25;
            }
            while (v25);
            ++v22;
          }
          while (v22 != v21);
        }
      }
      else if ((_DWORD)result)
      {
        v38 = 0;
        do
        {
          v39 = v10((const TCFFFontInfo *)a1, (unsigned __int16)++v38);
          v40 = ReadByteInc((MDataReference *)&v47);
          result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))a4)(0, 0, v39, v40, a3);
        }
        while (v21 != v38);
      }
      if (ByteInc < 0)
      {
        result = ReadByteInc((MDataReference *)&v47);
        if ((_DWORD)result)
        {
          v41 = result;
          do
          {
            v42 = ReadByteInc((MDataReference *)&v47);
            BytesInc = ReadBytesInc((MDataReference *)&v47, (const char *)2);
            result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))a4)(0, 0, BytesInc, v42, a3);
            --v41;
          }
          while (v41);
        }
      }
    }
  }
  else
  {
    result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))a4)(0, 0, 0, 0, a3);
    if (*(_QWORD *)(a1 + 456))
    {
      if (*(_DWORD *)(a1 + 136) >= 2u)
      {
        v16 = 1;
        do
        {
          if ((_WORD)v16 && *(_QWORD *)(a1 + 464) > (unint64_t)(unsigned __int16)(v16 - 1))
            v17 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 456) + 2 * (unsigned __int16)(v16 - 1));
          else
            v17 = 0;
          result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))a4)(0, 0, v17, v16, a3);
          v16 = (v16 + 1);
        }
        while (v16 < *(_DWORD *)(a1 + 136));
      }
    }
    else
    {
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 296);
      v28 = v27[370];
      if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
      {
        v30 = v27[371] + *(int *)(a1 + 484);
        v31 = v27[372] - v30;
        v48 = v30 + v29;
        v49 = v31;
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
      v47 = &off_1E6176898;
      if (*(_BYTE *)(a1 + 480))
      {
        if (*(_BYTE *)(a1 + 480) == 1)
          v32 = 1;
        else
          v32 = 2;
        v33 = ReadBytesInc((MDataReference *)&v47, (const char *)2);
        result = ReadBytesInc((MDataReference *)&v47, (const char *)v32);
        if (*(_DWORD *)(a1 + 136) != 1)
        {
          v34 = result;
          LODWORD(v35) = 0;
          v36 = 0;
          do
          {
            if (v35 > v34)
            {
              v33 = ReadBytesInc((MDataReference *)&v47, (const char *)2);
              v36 = v34 + 1;
              v34 += ReadBytesInc((MDataReference *)&v47, (const char *)v32) + 1;
            }
            v37 = v33 + v35 - v36;
            v35 = (v35 + 1);
            result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))a4)(0, 0, v37, v35, a3);
          }
          while (v35 < *(_DWORD *)(a1 + 136) - 1);
        }
      }
      else if (*(_DWORD *)(a1 + 136) != 1)
      {
        LODWORD(v44) = 0;
        do
        {
          v45 = ReadBytesInc((MDataReference *)&v47, (const char *)2);
          v44 = (v44 + 1);
          result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))a4)(0, 0, v45, v44, a3);
        }
        while (v44 < *(_DWORD *)(a1 + 136) - 1);
      }
    }
  }
  return result;
}

uint64_t StandardGlyphIDToStringID(const TCFFFontInfo *a1, int a2)
{
  if (a2 && *((_QWORD *)a1 + 58) > (unint64_t)(unsigned __int16)(a2 - 1))
    return *(unsigned __int16 *)(*((_QWORD *)a1 + 57) + 2 * (unsigned __int16)(a2 - 1));
  else
    return 0;
}

uint64_t SpecialGlyphIDToStringID(const TCFFFontInfo *a1, int a2)
{
  unsigned __int16 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 BytesInc;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  void (**v19)(MDataReference *__hidden);
  uint64_t v20;
  uint64_t v21;

  if (!a2)
  {
    LOWORD(result) = 0;
    return (unsigned __int16)result;
  }
  v2 = a2 - 1;
  v3 = *((unsigned __int8 *)a1 + 480);
  if ((_DWORD)v3 != 1)
  {
    if (!*((_BYTE *)a1 + 480))
    {
      v4 = *(_QWORD **)(*(_QWORD *)a1 + 296);
      v5 = v4[370];
      if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
      {
        v7 = v4[371] + *((_DWORD *)a1 + 121) + 2 * v2;
        v8 = v4[372] - v7;
        v20 = v7 + v6;
        v21 = v8;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v19 = &off_1E6176898;
      LOWORD(result) = ReadBytes((const MDataReference *)&v19, (const char *)2);
      return (unsigned __int16)result;
    }
    v3 = 2;
  }
  v10 = *(_QWORD **)(*(_QWORD *)a1 + 296);
  v11 = v10[370];
  if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
  {
    v13 = v10[371] + *((int *)a1 + 121);
    v14 = v10[372] - v13;
    v20 = v13 + v12;
    v21 = v14;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v19 = &off_1E6176898;
  BytesInc = ReadBytesInc((MDataReference *)&v19, (const char *)2);
  v16 = ReadBytesInc((MDataReference *)&v19, (const char *)v3);
  if (v16 >= v2)
  {
    v18 = 0;
  }
  else
  {
    do
    {
      v17 = v16;
      BytesInc = ReadBytesInc((MDataReference *)&v19, (const char *)2);
      v16 = v17 + ReadBytesInc((MDataReference *)&v19, (const char *)v3) + 1;
    }
    while (v16 < v2);
    v18 = ~(_WORD)v17;
  }
  LOWORD(result) = v2 + BytesInc + v18;
  return (unsigned __int16)result;
}

void TCFFFontInfo::EnumerateDictAndDefaults(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4;
  const char *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  const unsigned __int8 **v9;
  _BOOL8 v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  _DWORD *exception;

  v4 = (int)a2;
  TCFFFontInfo::EnumerateFontDict(a1, a2, a3, (uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, _QWORD, uint64_t))DictParseCallback);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v7 = (unsigned __int16 *)defaultOpCodesArray[v4];
  v8 = *v7;
  if (v8 != 0xFFFF)
  {
    v9 = (const unsigned __int8 **)(v7 + 8);
    do
    {
      if (!*(_BYTE *)(a1 + v8 + 54))
      {
        if (v8 == 15)
        {
          if (v4 == 1)
          {
            *(_QWORD *)(a1 + 456) = &StandardRomanGlyphID_to_StringID;
            *(_QWORD *)(a1 + 464) = 228;
          }
          v8 = 15;
        }
        else if (v8 == 16)
        {
          ASSERT(v4 == 1, v6);
          v10 = CFFDictGet<unsigned int,0u>(*(v9 - 1), *(unsigned __int16 *)v9, (int *)(a1 + 272), 4);
          ASSERT(v10, v11);
          v8 = *((unsigned __int16 *)v9 - 8);
        }
        v12 = (uint64_t)*(v9 - 1);
        v13 = *(unsigned __int16 *)v9;
        v14 = *((_WORD *)v9 - 7);
        ASSERT(v8 < 0x4B, v6);
        v15 = a3 + 16 * v8;
        *(_QWORD *)(v15 + 976) = v12;
        *(_QWORD *)(v15 + 984) = v13;
        *(_WORD *)(a3 + 2 * v8 + 2176) = v14;
      }
      v8 = *((unsigned __int16 *)v9 + 4);
      v9 += 3;
    }
    while (v8 != 0xFFFF);
  }
}

uint64_t TCFFFontSetInfo::GetIndexedArrayOffsetAndLength(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _DWORD *a5)
{
  uint64_t result;
  int v11;
  BOOL v12;
  unsigned int v13;
  _DWORD *exception;
  _QWORD v15[3];

  v15[2] = 0;
  v15[0] = &off_1E6176898;
  v15[1] = 0;
  *a4 = TCFFFontSetInfo::GetIndexedArrayOffset(a1, (uint64_t)v15, a2, a3);
  result = TCFFFontSetInfo::GetIndexedArrayOffset(a1, (uint64_t)v15, a2, a3 + 1);
  *a5 = result - *a4;
  v11 = *a4 + *(_DWORD *)(a2 + 12);
  *a4 = v11;
  v12 = __CFADD__(v11, *a5);
  v13 = v11 + *a5;
  if (v12
    || *(_QWORD *)(*(_QWORD *)(a1 + 296) + 2976) - *(_QWORD *)(*(_QWORD *)(a1 + 296) + 2968) < (unint64_t)v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return result;
}

uint64_t DictParseCallback(const unsigned __int8 *a1, const char *a2, unsigned int a3, __int16 a4, _WORD *a5)
{
  char *v10;

  ASSERT(a3 < 0x4B, a2);
  v10 = (char *)&a5[8 * a3];
  *((_QWORD *)v10 + 122) = a1;
  *((_QWORD *)v10 + 123) = a2;
  a5[a3 + 1088] = a4;
  return 1;
}

uint64_t GetFontCallback(const unsigned __int8 *a1, const char *a2, int a3, unsigned int a4, _DWORD *a5)
{
  _DWORD *exception;

  if (a3 == 62)
  {
    ASSERT(a5[12] == 1, a2);
    a5[12] = 2;
    return 1;
  }
  else
  {
    if (a3 == 52)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    return 0;
  }
}

void TCFFFontSetInfo::GetFontDictInfo(uint64_t a1, const char *a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v7;

  v6 = (uint64_t)a2;
  *(_WORD *)(a5 + 52) = a4;
  *(_QWORD *)a5 = a1;
  *(_DWORD *)(a5 + 48) = (_DWORD)a2;
  if ((_DWORD)a2 == 4)
  {
    TCFFFontInfo::EnumerateFontDict(a5, a2, a5, (uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, _QWORD, uint64_t))DictParseCallback);
    *(_BYTE *)(a5 + 16) = 1;
LABEL_9:
    TCFFFontInfo::EnumerateDictAndDefaults(a5, (const char *)v6, a5);
    return;
  }
  TCFFFontSetInfo::GetIndexedArrayOffsetAndLength(a1, a3, a4, (int *)(a5 + 12), (_DWORD *)(a5 + 8));
  TCFFFontInfo::EnumerateFontDict(a5, (const char *)v6, a5, (uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, _QWORD, uint64_t))GetFontCallback);
  v7 = *(_DWORD *)(a5 + 48);
  TCFFFontInfo::EnumerateDictAndDefaults(a5, (const char *)v7, a5);
  if (v7 != 2 && v7 != 4)
  {
    v6 = 6;
    goto LABEL_9;
  }
}

void ProcessEntries(int a1, const unsigned __int8 *a2, unint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  const unsigned __int8 *v6;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  const unsigned __int8 *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  int *v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  char *v31;
  unsigned int v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  __int16 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  double *v44;
  int *v45;
  int64_t v46;
  unint64_t v47;
  double *v48;
  int v49;
  char *v50;
  int v52;
  _BOOL4 v54;
  int v55;
  int *v56;
  int v57;
  _DWORD *exception;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  int *v63;
  const unsigned __int8 *v64;
  unint64_t v65;
  char *v66;
  unsigned int v67;
  char *v68;
  __int128 v69;
  ItemVariationStore::VariationRegionList *v70[2];
  __int128 v71;
  double **v72;
  double *v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[32];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int16 *v106;
  void *v107;
  uint64_t v108;
  _OWORD v109[4];
  _OWORD *v110;
  _OWORD v111[9];
  unint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (a1 == -1)
    return;
  v6 = a2;
  if (!a2 || CFFDictGet<int,16u>(a2, a3, a4, a5))
    return;
  v11 = *(_QWORD *)(a6 + 8);
  v12 = *(unsigned __int16 *)(v11 + 448);
  v11 += 488;
  v13 = *(_OWORD *)(v11 + 416);
  v69 = *(_OWORD *)(v11 + 400);
  *(_OWORD *)v70 = v13;
  v71 = *(_OWORD *)(v11 + 432);
  v112 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v111[7] = v14;
  v111[8] = v14;
  v111[5] = v14;
  v111[6] = v14;
  v111[3] = v14;
  v111[4] = v14;
  v111[1] = v14;
  v111[2] = v14;
  v111[0] = v14;
  *(_DWORD *)v90 = 0;
  std::vector<int,TInlineBufferAllocator<int,30ul>>::vector(v111, a3, v90);
  if (v6 == (const unsigned __int8 *)-1)
    goto LABEL_81;
  v15 = &v6[a3];
  if (v6 + 1 > &v6[a3])
    goto LABEL_81;
  LODWORD(v16) = 0;
  v63 = (int *)((char *)a4 + a5);
  v18 = *((_QWORD *)&v111[0] + 1);
  v17 = *(char **)&v111[0];
  v66 = *(char **)&v111[0];
  v68 = *(char **)&v111[0];
  v19 = *(int **)&v111[0];
  v64 = v15;
  v65 = *((_QWORD *)&v111[0] + 1);
LABEL_7:
  v21 = (unint64_t)(v6 + 1);
  v20 = *v6;
  switch(v20)
  {
    case 0x1Eu:
      memset(v90, 170, 18);
      v6 = BCDtoASCII(v6 + 1, v15, (char (*)[18])v90);
      v24 = llround(atof_l(v90, 0) * 65536.0);
      goto LABEL_18;
    case 0x1Du:
      if (v21 > 0xFFFFFFFFFFFFFFFBLL || v6 + 5 > v15)
        goto LABEL_81;
      v22 = v6[3];
      v23 = v6[4];
      v6 += 5;
      goto LABEL_17;
    case 0x1Cu:
      if (v21 > 0xFFFFFFFFFFFFFFFDLL || v6 + 3 > v15)
        goto LABEL_81;
      v22 = v6[1];
      v23 = v6[2];
      v6 += 3;
LABEL_17:
      v24 = (v22 << 24) | (v23 << 16);
LABEL_18:
      if ((unint64_t)v68 < v18)
      {
        LODWORD(v16) = v16 + 1;
        *v19 = v24;
        v25 = v19 + 1;
        v68 = (char *)v19;
        goto LABEL_20;
      }
      goto LABEL_81;
  }
  if (v20 >= 0x20)
  {
    if (v20 == 255)
    {
      if (v21 > 0xFFFFFFFFFFFFFFFBLL || v6 + 5 > v15)
        goto LABEL_81;
      v26 = *(_DWORD *)(v6 + 1);
      v6 += 5;
      v24 = bswap32(v26);
    }
    else
    {
      if (v20 > 0xF6)
      {
        v54 = v6 != (const unsigned __int8 *)-2 && v6 + 2 <= v15;
        if (v20 > 0xFA)
        {
          if (!v54)
            goto LABEL_81;
          v21 = (unint64_t)(v6 + 2);
          v52 = 64148 - (v6[1] | (v20 << 8));
        }
        else
        {
          if (!v54)
            goto LABEL_81;
          v21 = (unint64_t)(v6 + 2);
          v52 = (v6[1] | (v20 << 8)) - 63124;
        }
      }
      else
      {
        v52 = v20 - 139;
      }
      v24 = v52 << 16;
      v6 = (const unsigned __int8 *)v21;
    }
    goto LABEL_18;
  }
  if (v20 == 23)
  {
    if (!(_QWORD)v69
      || ((unint64_t)v71 <= v12
       || (v27 = *(_DWORD *)(*((_QWORD *)&v71 + 1) + 4 * v12)) == 0
       || (v28 = v69 + bswap32(v27), (unint64_t)(v28 + 6) > *((_QWORD *)&v69 + 1))
        ? (v29 = 0)
        : (v29 = bswap32(*(unsigned __int16 *)(v28 + 4)) >> 16),
          *(_DWORD *)v68 < 0x10000u))
    {
      *(_QWORD *)v90 = v111;
      std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v90);
      return;
    }
    v67 = *(int *)v68 >> 16;
    v30 = v67 + v67 * v29;
    if (v30 > v16)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    v31 = &v68[-4 * v30];
    if (v17 > v31)
    {
      v59 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v59 = &off_1E6176998;
      v59[2] = 4;
    }
    v32 = *(unsigned __int16 *)(v69 + bswap32(*(_DWORD *)(v69 + 2)));
    v33 = __rev16(v32);
    *(_QWORD *)&v34 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v109[2] = v34;
    v109[3] = v34;
    v109[0] = v34;
    v109[1] = v34;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v110 = v109;
    *(_QWORD *)v90 = &v106;
    *(_QWORD *)&v90[8] = 0xAAAAAAAAAAAAAA00;
    if (v32)
    {
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:fe180100](&v106, v33);
      v35 = (char *)v107;
      bzero(v107, 2 * v33);
      v107 = &v35[2 * v33];
      if (v107 == v106)
        goto LABEL_84;
      *v106 = 0x4000;
    }
    *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v104 = v36;
    v105 = v36;
    v102 = v36;
    v103 = v36;
    v100 = v36;
    v101 = v36;
    v98 = v36;
    v99 = v36;
    v96 = v36;
    v97 = v36;
    v94 = v36;
    v95 = v36;
    v92 = v36;
    v93 = v36;
    *(_OWORD *)&v90[16] = v36;
    v91 = v36;
    *(_OWORD *)v90 = v36;
    v73[0] = 0;
    std::vector<double,TInlineBufferAllocator<double,30ul>>::vector(v90, (unint64_t)v70[0], v73);
    if (v70[0])
    {
      v37 = 0;
      v38 = v106;
      v39 = *(_QWORD *)v90;
      do
      {
        *(double *)(v39 + 8 * v37) = ItemVariationStore::VariationRegionList::ComputeScalar(v70[1], v37, v33, v38);
        ++v37;
      }
      while ((ItemVariationStore::VariationRegionList *)v37 != v70[0]);
    }
    *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v88 = v40;
    v89 = v40;
    v86 = v40;
    v87 = v40;
    v84 = v40;
    v85 = v40;
    v82 = v40;
    v83 = v40;
    v80 = v40;
    v81 = v40;
    v78 = v40;
    v79 = v40;
    v76 = v40;
    v77 = v40;
    v74 = v40;
    v75 = v40;
    *(_OWORD *)v73 = v40;
    v72 = 0;
    std::vector<double,TInlineBufferAllocator<double,30ul>>::vector(v73, v29, &v72);
    v41 = 0;
    v42 = v67;
    if (v67 <= 1)
      v43 = 1;
    else
      v43 = v67;
    while (1)
    {
      v44 = v73[0];
      if (v29)
        break;
LABEL_50:
      *(_DWORD *)&v31[4 * v41++] += vcvtd_n_s64_f64(ItemVariationStore::ValueFromBlendRequest((ItemVariationStore *)&v69, v12, *(const double **)v90, v29, v44), 0x10uLL);
      v42 += v29;
      if (v41 == v43)
      {
        v50 = &v68[-4 * v67 * v29];
        v18 = v65;
        v17 = v66;
        if (v66 >= v50 || (unint64_t)v50 >= v65)
        {
          v61 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v61 = &off_1E6176998;
          v61[2] = 4;
        }
        v68 -= 4 * v67 * v29;
        v16 = (unint64_t)(v50 - v66) >> 2;
        v72 = v73;
        std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v72);
        v73[0] = (double *)v90;
        std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v73);
        *(_QWORD *)v90 = &v106;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v90);
        v6 = (const unsigned __int8 *)v21;
        v25 = v19;
        v15 = v64;
LABEL_20:
        if (v6 == (const unsigned __int8 *)-1 || (v19 = v25, v6 + 1 > v15))
        {
LABEL_81:
          v60 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v60 = &off_1E6176998;
          v60[2] = 4;
        }
        goto LABEL_7;
      }
    }
    v45 = (int *)&v68[4 * v42 + -4 * v67 + -4 * v67 * (_DWORD)v29];
    v46 = v73[1] - v73[0];
    v47 = v29;
    v48 = v73[0];
    while (v46)
    {
      v49 = *v45++;
      *v48++ = (double)v49 * 0.0000152587891;
      --v46;
      if (!--v47)
        goto LABEL_50;
    }
LABEL_84:
    __break(1u);
  }
  else
  {
    if ((_DWORD)v16 == ((unint64_t)(v68 - v17) >> 2) && (int)v16 >= 1)
    {
      v55 = v16;
      v56 = a4;
      do
      {
        if (v56 >= v63)
        {
          v62 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v62 = &off_1E6176998;
          v62[2] = 4;
        }
        v57 = *(_DWORD *)v17;
        v17 += 4;
        *v56++ = v57;
        --v55;
      }
      while (v55);
    }
    *(_QWORD *)v90 = v111;
    std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v90);
  }
}

void sub_1B09F92C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  uint64_t v61;

  a61 = (void **)(v61 - 256);
  std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&a61);
  _Unwind_Resume(a1);
}

BOOL CFFDictGet<int,30u>(const unsigned __int8 *a1, uint64_t a2, int *a3)
{
  const unsigned __int8 *v3;
  const unsigned __int8 *v4;
  int *v5;
  unint64_t v6;
  const unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  _DWORD *exception;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  if (a1 == (const unsigned __int8 *)-1 || (v3 = a1, v4 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_37:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v5 = a3;
  v6 = (unint64_t)(a3 + 6);
  while (1)
  {
    v7 = v3 + 1;
    v8 = *v3;
    switch(v8)
    {
      case 0x1Eu:
        memset(v24, 170, 18);
        v3 = BCDtoASCII(v7, v4, (char (*)[18])v24);
        v10 = llround(atof_l((const char *)v24, 0) * 1073741820.0);
        goto LABEL_34;
      case 0x1Du:
        if ((unint64_t)v7 > 0xFFFFFFFFFFFFFFFBLL || v3 + 5 > v4)
        {
          v20 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v20 = &off_1E6176998;
          v20[2] = 4;
        }
        v9 = v3[4];
        v3 += 5;
        goto LABEL_13;
      case 0x1Cu:
        if ((unint64_t)v7 > 0xFFFFFFFFFFFFFFFDLL || v3 + 3 > v4)
        {
          v19 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v19 = &off_1E6176998;
          v19[2] = 4;
        }
        v9 = v3[2];
        v3 += 3;
LABEL_13:
        v10 = v9 << 30;
        goto LABEL_34;
    }
    if (v8 < 0x20)
      return v8 != 23;
    if (v8 == 255)
    {
      if ((unint64_t)v7 > 0xFFFFFFFFFFFFFFFBLL || v3 + 5 > v4)
      {
        v21 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v21 = &off_1E6176998;
        v21[2] = 4;
      }
      v11 = v3[2];
      v12 = v3[3];
      v13 = v3[4];
      v3 += 5;
      v10 = (v11 << 30) | (v12 << 22) | (v13 << 14);
    }
    else
    {
      if (v8 > 0xF6)
      {
        v16 = v3 != (const unsigned __int8 *)-2 && v3 + 2 <= v4;
        if (v8 > 0xFA)
        {
          if (!v16)
          {
            v22 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v22 = &off_1E6176998;
            v22[2] = 4;
          }
          v7 = v3 + 2;
          v14 = 64148 - (v3[1] | (v8 << 8));
        }
        else
        {
          if (!v16)
          {
            v23 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v23 = &off_1E6176998;
            v23[2] = 4;
          }
          v7 = v3 + 2;
          v14 = (v3[1] | (v8 << 8)) - 63124;
        }
      }
      else
      {
        v14 = v8 - 139;
      }
      v10 = v14 << 30;
      v3 = v7;
    }
LABEL_34:
    if ((unint64_t)v5 >= v6)
      return 0;
    *v5++ = v10;
    if (v3 == (const unsigned __int8 *)-1 || v3 + 1 > v4)
      goto LABEL_37;
  }
}

void TCFFParsingContext::InitFontDesc(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  int *v10;
  unint64_t v11;
  int v12;
  __int16 v13;
  const unsigned __int8 *v14;
  const unsigned __int8 *v15;
  _BOOL8 v16;
  const char *v17;
  int v18;
  const unsigned __int8 *v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  int v26;
  const char *v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  int *v31;
  int v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  int v35;
  const char *v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  int *v40;
  int v41;
  const unsigned __int8 *v42;
  int v43;
  const unsigned __int8 *v44;
  const unsigned __int8 *v45;
  const unsigned __int8 *v46;
  _WORD *v47;
  const unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  BOOL v54;
  __int16 v55;
  __int16 v56;
  _DWORD *v57;
  _DWORD *exception;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _QWORD v65[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  _OWORD *v70;
  _OWORD v71[16];
  int __b[1024];
  char v73[24];
  uint64_t v74;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v3 = 0;
  LOWORD(v4) = 0;
  v74 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v71[14] = v5;
  v71[15] = v5;
  v71[12] = v5;
  v71[13] = v5;
  v71[10] = v5;
  v71[11] = v5;
  v71[8] = v5;
  v71[9] = v5;
  v71[6] = v5;
  v71[7] = v5;
  v71[4] = v5;
  v71[5] = v5;
  v71[2] = v5;
  v71[3] = v5;
  v71[0] = v5;
  v71[1] = v5;
  v7 = *(_QWORD *)(v6 + 744);
  v65[0] = v1;
  v65[1] = v7;
  v9 = v8[2];
  v67 = v8[1];
  v68 = v9;
  v66 = *v8;
  v70 = v71;
  *(_DWORD *)v1 = 131077;
  *(_DWORD *)(v1 + 82) = -1;
  *(_WORD *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  v10 = (int *)(v1 + 48);
  if (*(_DWORD *)(v7 + 48) != 2)
  {
    v3 = *(_WORD *)(v7 + 344);
    v4 = *(_DWORD *)(v7 + 280);
  }
  *(_WORD *)(v1 + 76) = v3;
  *(_WORD *)(v1 + 58) = v4;
  v11 = v1 + 58;
  v12 = *(_DWORD *)(*(_QWORD *)v7 + 224);
  v13 = *(_WORD *)(*(_QWORD *)v7 + 288);
  *(_QWORD *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 74) = v12;
  *(_WORD *)(v1 + 78) = v13;
  *(_DWORD *)(v1 + 124) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 32) = 0x100000001;
  *(_QWORD *)(v1 + 62) = 0;
  *(_OWORD *)(v1 + 104) = xmmword_1B0AACFD0;
  *(_DWORD *)(v1 + 444) = 0;
  *(_WORD *)(v1 + 80) = 32;
  if (*(_QWORD *)(v7 + 1872))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v69 = 0xAAAAAAAA00000000;
  ProcessEntries(*(__int16 *)(v7 + 2186), *(const unsigned __int8 **)(v7 + 1056), *(_QWORD *)(v7 + 1064), (int *)(v1 + 88), 16, (uint64_t)v65);
  v14 = *(const unsigned __int8 **)(v7 + 1184);
  if (v14)
    CFFDictGet<unsigned int,0u>(v14, *(_QWORD *)(v7 + 1192), (int *)(v2 + 28), 4);
  v15 = *(const unsigned __int8 **)(v7 + 1600);
  if (v15)
  {
    v16 = CFFDictGet<int,30u>(v15, *(_QWORD *)(v7 + 1608), (int *)(v2 + 4));
    ASSERT(v16, v17);
    v18 = *(_DWORD *)(v2 + 4);
    if ((v18 - 0x7FFFFFFF) < 2
      || (v18 - 1073740750) <= 0x864
      && v18 == *(_DWORD *)(v2 + 16)
      && !*(_DWORD *)(v2 + 8)
      && !*(_DWORD *)(v2 + 12))
    {
      *(_OWORD *)(v2 + 4) = xmmword_1B0AACFE0;
      *(_DWORD *)(v2 + 20) = 0;
      *(_DWORD *)(v2 + 24) = 0;
    }
  }
  ProcessEntries(*(__int16 *)(v7 + 2256), *(const unsigned __int8 **)(v7 + 1616), *(_QWORD *)(v7 + 1624), (int *)(v2 + 40), 4, (uint64_t)v65);
  v19 = *(const unsigned __int8 **)(v7 + 1568);
  if (v19)
    CFFDictGet<unsigned short,0u>(v19, *(_QWORD *)(v7 + 1576), (_WORD *)(v2 + 60), 2);
  memset(__b, 170, sizeof(__b));
  if (*(_WORD *)(v2 + 2) != 2)
  {
    v59 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v59 = &off_1E6176998;
    v59[2] = 4;
  }
  *(_WORD *)(v2 + 66) = 0;
  ProcessEntries(*(__int16 *)(v7 + 2188), *(const unsigned __int8 **)(v7 + 1072), *(_QWORD *)(v7 + 1080), __b, 4096, (uint64_t)v65);
  DeltaBlues(__b, (const char *)v20, v2 + 248, (_WORD *)(v2 + 66));
  *(_DWORD *)(v2 + 32) |= -1 << *(_WORD *)(v2 + 66);
  ProcessEntries(*(__int16 *)(v7 + 2190), *(const unsigned __int8 **)(v7 + 1088), *(_QWORD *)(v7 + 1096), __b, 4096, (uint64_t)v65);
  DeltaBlues(__b, (const char *)v21, v2 + 248, (_WORD *)(v2 + 66));
  *(_WORD *)(v2 + 68) = 0;
  ProcessEntries(*(__int16 *)(v7 + 2192), *(const unsigned __int8 **)(v7 + 1104), *(_QWORD *)(v7 + 1112), __b, 4096, (uint64_t)v65);
  DeltaBlues(__b, (const char *)v22, v2 + 344, (_WORD *)(v2 + 68));
  *(_DWORD *)(v2 + 36) |= -1 << *(_WORD *)(v2 + 68);
  ProcessEntries(*(__int16 *)(v7 + 2194), *(const unsigned __int8 **)(v7 + 1120), *(_QWORD *)(v7 + 1128), __b, 4096, (uint64_t)v65);
  DeltaBlues(__b, (const char *)v23, v2 + 344, (_WORD *)(v2 + 68));
  ProcessEntries(*(__int16 *)(v7 + 2218), *(const unsigned __int8 **)(v7 + 1312), *(_QWORD *)(v7 + 1320), (int *)(v2 + 440), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2216), *(const unsigned __int8 **)(v7 + 1296), *(_QWORD *)(v7 + 1304), (int *)(v2 + 120), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2324), *(const unsigned __int8 **)(v7 + 2160), *(_QWORD *)(v7 + 2168), (int *)(v2 + 136), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2322), *(const unsigned __int8 **)(v7 + 2144), *(_QWORD *)(v7 + 2152), (int *)(v2 + 124), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2196), *(const unsigned __int8 **)(v7 + 1136), *(_QWORD *)(v7 + 1144), (int *)(v2 + 104), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2198), *(const unsigned __int8 **)(v7 + 1152), *(_QWORD *)(v7 + 1160), (int *)(v2 + 108), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2264), *(const unsigned __int8 **)(v7 + 1680), *(_QWORD *)(v7 + 1688), __b, 4096, (uint64_t)v65);
  v25 = v24;
  *(_WORD *)(v2 + 62) = v24;
  v26 = v24;
  ASSERT(v24 < 0xDu, v27);
  if (v26)
  {
    v28 = 0;
    v29 = (_DWORD *)(v2 + 140);
    v30 = v25;
    v31 = __b;
    do
    {
      v32 = *v31++;
      v28 += v32;
      *v29++ = v28;
      --v30;
    }
    while (v30);
  }
  ProcessEntries(*(__int16 *)(v7 + 2266), *(const unsigned __int8 **)(v7 + 1696), *(_QWORD *)(v7 + 1704), __b, 4096, (uint64_t)v65);
  v34 = v33;
  *(_WORD *)(v2 + 64) = v33;
  v35 = v33;
  ASSERT(v33 < 0xDu, v36);
  if (v35)
  {
    v37 = 0;
    v38 = (_DWORD *)(v2 + 188);
    v39 = v34;
    v40 = __b;
    do
    {
      v41 = *v40++;
      v37 += v41;
      *v38++ = v37;
      --v39;
    }
    while (v39);
  }
  ProcessEntries(*(__int16 *)(v7 + 2258), *(const unsigned __int8 **)(v7 + 1632), *(_QWORD *)(v7 + 1640), (int *)(v2 + 236), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2262), *(const unsigned __int8 **)(v7 + 1664), *(_QWORD *)(v7 + 1672), (int *)(v2 + 240), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2260), *(const unsigned __int8 **)(v7 + 1648), *(_QWORD *)(v7 + 1656), (int *)(v2 + 244), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2270), *(const unsigned __int8 **)(v7 + 1728), *(_QWORD *)(v7 + 1736), v10, 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2320), *(const unsigned __int8 **)(v7 + 2128), *(_QWORD *)(v7 + 2136), (int *)(v2 + 128), 8, (uint64_t)v65);
  v42 = *(const unsigned __int8 **)(v7 + 1712);
  if (v42)
  {
    ProcessEntries(*(__int16 *)(v7 + 2268), v42, *(_QWORD *)(v7 + 1720), __b, 4, (uint64_t)v65);
    v43 = *(_DWORD *)(v2 + 444);
    *(_DWORD *)(v2 + 444) = v43 | 2;
    if (__b[0] > *(_DWORD *)(v2 + 48))
      *(_DWORD *)(v2 + 444) = v43 | 3;
  }
  v44 = *(const unsigned __int8 **)(v7 + 1792);
  if (v44
    && *(_QWORD *)(v7 + 1744)
    && *(_QWORD *)(v7 + 1760)
    && CFFDictGet<int,16u>(v44, *(_QWORD *)(v7 + 1800), (int *)(v2 + 52), 4))
  {
    v45 = *(const unsigned __int8 **)(v7 + 1744);
    if (v45 == (const unsigned __int8 *)-1 || (v46 = &v45[*(_QWORD *)(v7 + 1752)], v45 + 1 > v46))
    {
LABEL_70:
      v57 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v57 = &off_1E6176998;
      v57[2] = 4;
    }
    v47 = (_WORD *)(v2 + 56);
    while (1)
    {
      v48 = v45 + 1;
      v49 = *v45;
      if (v49 == 30)
      {
        memset(v73, 170, 18);
        v45 = BCDtoASCII(v48, v46, (char (*)[18])v73);
        LOWORD(v49) = llround(atof_l(v73, 0));
      }
      else
      {
        if (v49 == 29)
        {
          if ((unint64_t)v48 > 0xFFFFFFFFFFFFFFFBLL || v45 + 5 > v46)
          {
            v61 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v61 = &off_1E6176998;
            v61[2] = 4;
          }
          v49 = *(unsigned __int16 *)(v45 + 3);
          v45 += 5;
          LOWORD(v49) = __rev16(v49);
          goto LABEL_48;
        }
        if (v49 == 28)
        {
          if ((unint64_t)v48 > 0xFFFFFFFFFFFFFFFDLL || v45 + 3 > v46)
          {
            v60 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v60 = &off_1E6176998;
            v60[2] = 4;
          }
          v50 = v45[1];
          v51 = v45[2];
          v45 += 3;
          v52 = (v50 << 24) | (v51 << 16);
        }
        else
        {
          if (v49 < 0x20)
          {
            if (v49 != 23
              && CFFDictGet<unsigned short,0u>(*(const unsigned __int8 **)(v7 + 1760), *(_QWORD *)(v7 + 1768), (_WORD *)(v2 + 70), 2))
            {
              ProcessEntries(*(__int16 *)(v7 + 2276), *(const unsigned __int8 **)(v7 + 1776), *(_QWORD *)(v7 + 1784), (int *)(v2 + 44), 4, (uint64_t)v65);
              if (*(__int16 *)(v2 + 56) >= 5)
                *(_WORD *)(v2 + 56) = -1;
            }
            return;
          }
          if (v49 != 255)
          {
            if (v49 > 0xF6)
            {
              v54 = v45 != (const unsigned __int8 *)-2 && v45 + 2 <= v46;
              if (v49 > 0xFA)
              {
                if (!v54)
                {
                  v63 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v63 = &off_1E6176998;
                  v63[2] = 4;
                }
                v56 = v45[1];
                v45 += 2;
                LOWORD(v49) = -1388 - (v56 | ((_WORD)v49 << 8));
              }
              else
              {
                if (!v54)
                {
                  v64 = __cxa_allocate_exception(0x10uLL);
                  *(_QWORD *)v64 = &off_1E6176998;
                  v64[2] = 4;
                }
                v55 = v45[1];
                v45 += 2;
                LOWORD(v49) = (v55 | ((_WORD)v49 << 8)) + 2412;
              }
            }
            else
            {
              LOWORD(v49) = v49 - 139;
              ++v45;
            }
            goto LABEL_48;
          }
          if ((unint64_t)v48 > 0xFFFFFFFFFFFFFFFBLL || v45 + 5 > v46)
          {
            v62 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v62 = &off_1E6176998;
            v62[2] = 4;
          }
          v52 = (v45[1] << 24) | (v45[2] << 16);
          v45 += 5;
        }
        v49 = v52 >> 16;
      }
LABEL_48:
      if ((unint64_t)v47 >= v11)
        return;
      *v47++ = v49;
      if (v45 == (const unsigned __int8 *)-1 || v45 + 1 > v46)
        goto LABEL_70;
    }
  }
}

uint64_t TType1CFFDescriptor::TType1CFFDescriptor(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  _BYTE *v8;
  uint64_t v9;
  MDataReference *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  signed int ByteInc;
  char v30;
  signed int ArrayInfo;
  signed int v32;
  signed int v33;
  int v34;
  __int16 v35;
  __int16 v36;
  size_t v37;
  unsigned __int16 v38;
  BOOL v39;
  _DWORD *exception;
  _DWORD *v42;
  unsigned int v43;
  char *__s2;

  *(_QWORD *)a1 = &off_1E617C408;
  *(_WORD *)(a1 + 8) = 0;
  v8 = (_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 10) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v9 = a1 + 16;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E6176898;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E6176898;
  *(_QWORD *)(a1 + 80) = &off_1E6176898;
  v10 = (MDataReference *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 101) = 0;
  *(_QWORD *)(a1 + 120) = &off_1E6176898;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = &off_1E6176898;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 165) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = &off_1E6176898;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = &off_1E6176898;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 229) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 248) = &off_1E6176898;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = &off_1E6176898;
  *(_WORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v11 = a1 + 312;
  *(_QWORD *)(a1 + 304) = a1;
  TCFFFontInfo::TCFFFontInfo((TCFFFontInfo *)(a1 + 312));
  TCFFFontInfo::TCFFFontInfo((TCFFFontInfo *)(a1 + 800));
  bzero((void *)(a1 + 1288), 0x546uLL);
  *(_WORD *)(a1 + 2640) = 0;
  *(_DWORD *)(a1 + 2644) = 0;
  v12 = (_OWORD *)(a1 + 2696);
  v13 = 2648;
  do
  {
    v14 = a1 + v13;
    *(_DWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    v13 += 16;
  }
  while ((_OWORD *)(v14 + 16) != v12);
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *v12 = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_QWORD *)(a1 + 2952) = &off_1E6176770;
  *(_QWORD *)(a1 + 2960) = 0;
  *(_QWORD *)(a1 + 2976) = 0;
  *(_QWORD *)(a1 + 2968) = 0;
  TDataReference::operator=((TDataReference *)(a1 + 2952), a2);
  *(_BYTE *)(a1 + 2984) = a4;
  v15 = *(_QWORD *)(a1 + 2960);
  if (!v15 || !*(_QWORD *)(v15 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 3;
  }
  v16 = a3[2];
  if ((_DWORD)v16)
  {
    v17 = (const char *)a3[1];
    if (!v17)
    {
      v26 = a3[5];
      if (!v26)
        goto LABEL_11;
      v27 = *(_QWORD *)(v26 + 8);
      if (!v27)
        goto LABEL_11;
      v17 = (const char *)(v27 + a3[6]);
    }
    if ((v16 & 0xFFFFFF80) != 0)
      v18 = 127;
    else
      v18 = v16;
    strncpy((char *)(a1 + 2825), v17, v18);
    *(_BYTE *)(a1 + 2824) = v18;
    a4 = *(unsigned __int8 *)(a1 + 2984);
  }
LABEL_11:
  if (a4)
    v19 = 5;
  else
    v19 = 4;
  v20 = *(_QWORD **)(a1 + 304);
  v21 = v20[371];
  v22 = v20[372] - v21;
  if (v19 <= v22)
  {
    v24 = v20[370];
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 8);
      v23 = v25 + v21;
      if (!v25)
        v23 = 0;
    }
    else
    {
      v23 = 0;
    }
  }
  else
  {
    v23 = 0;
    v22 = 0xAAAAAAAAAAAAAAAALL;
  }
  if (!v23)
    v22 = 0;
  *(_QWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 96) = v22;
  *v8 = ReadByteInc(v10);
  *(_BYTE *)(a1 + 9) = ReadByteInc(v10);
  v28 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 2984))
  {
    if (v28 == 2)
    {
      *(_DWORD *)(a1 + 324) = ReadByteInc(v10);
      *(_DWORD *)(a1 + 320) = (unsigned __int16)ReadBytes(v10, (const char *)2);
      *(_BYTE *)(a1 + 10) = 1;
      *(_WORD *)(a1 + 364) = *(_WORD *)(a1 + 2640);
      *(_QWORD *)(a1 + 312) = v8;
      *(_DWORD *)(a1 + 360) = 4;
      TCFFFontInfo::EnumerateFontDict(v11, (const char *)4, v11, (uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, _QWORD, uint64_t))DictParseCallback);
      *(_BYTE *)(a1 + 328) = 1;
      TCFFFontInfo::EnumerateDictAndDefaults(v11, (const char *)4, v11);
      TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, a1 + 232, *(_DWORD *)(a1 + 320) + *(_DWORD *)(a1 + 324));
      goto LABEL_32;
    }
LABEL_55:
    v42 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v42 = &off_1E6176998;
    v42[2] = 4;
  }
  if (v28 > 1)
    goto LABEL_55;
  ByteInc = ReadByteInc(v10);
  v30 = ReadByteInc(v10);
  *(_BYTE *)(a1 + 10) = v30;
  if ((v30 - 1) > 3u)
    goto LABEL_55;
  ArrayInfo = TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, a1 + 104, ByteInc);
  v32 = TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, a1 + 168, ArrayInfo);
  v33 = TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, v9, v32);
  TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, a1 + 232, v33);
LABEL_32:
  v34 = *(_DWORD *)(a1 + 232);
  if (v34 >= 33899)
    v35 = 0x8000;
  else
    v35 = 1131;
  if (v34 >= 1239)
    v36 = v35;
  else
    v36 = 107;
  *(_WORD *)(a1 + 296) = v36;
  if (!*(_BYTE *)(a1 + 2984))
  {
    *(_WORD *)(a1 + 2640) = 0;
    v37 = *(unsigned __int8 *)(a1 + 2824);
    if (*(_BYTE *)(a1 + 2824) && *(_DWORD *)(a1 + 104))
    {
      v38 = 0;
      while (1)
      {
        __s2 = (char *)0xAAAAAAAAAAAAAAAALL;
        v43 = -1431655766;
        TCFFFontSetInfo::GetFontName((uint64_t)v8, v38, &__s2, &v43);
        v39 = __s2 && v43 == (_DWORD)v37;
        if (v39 && !strncmp((const char *)(a1 + 2825), __s2, v37))
          break;
        if (*(_DWORD *)(a1 + 104) <= ++v38)
        {
          v38 = *(_WORD *)(a1 + 2640);
          goto LABEL_51;
        }
      }
      *(_WORD *)(a1 + 2640) = v38;
    }
    else
    {
      v38 = 0;
    }
LABEL_51:
    TCFFFontSetInfo::GetFontDictInfo((uint64_t)v8, (const char *)1, a1 + 168, v38, v11);
  }
  *(_DWORD *)(a1 + 2644) = *(_DWORD *)(a1 + 460);
  return a1;
}

void sub_1B09FA4CC(_Unwind_Exception *a1)
{
  TDataReference *v1;

  TDataReference::~TDataReference(v1);
  _Unwind_Resume(a1);
}

void sub_1B09FA4D4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1B09FA4E4()
{
  __cxa_end_catch();
  JUMPOUT(0x1B09FA4ECLL);
}

void TSFNTType1CFFDescriptor::TSFNTType1CFFDescriptor(TSFNTType1CFFDescriptor *this, const TSFNTData *a2, int a3, int a4)
{
  const TSFNTFont *v7;
  int v8;
  _QWORD v9[12];
  void *v10[3];
  char v11;
  void (**v12)(TDataReference *__hidden);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  TSFNTFont::GetTable(a2, a3, 0, v16);
  v8 = (*(uint64_t (**)(const TSFNTData *, uint64_t))(*(_QWORD *)a2 + 472))(a2, 1851878757);
  if (v8)
  {
    (*(void (**)(_QWORD *__return_ptr, const TSFNTData *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 88))(v9, a2, 6, 1, 0, 0);
    TStringRef::TStringRef((uint64_t)v10, (uint64_t)v9);
  }
  else
  {
    v10[1] = 0;
    v10[2] = 0;
    v10[0] = &off_1E61768F8;
    v11 = 0;
    v12 = &off_1E6176770;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  TTrueTypeFont::ThrowIfInvalid(a2, v7);
  TType1CFFDescriptor::TType1CFFDescriptor((uint64_t)this, (uint64_t)v16, v10, a4);
  TStringRef::~TStringRef(v10);
  if (v8)
    TFontNameString::~TFontNameString((TFontNameString *)v9);
  v16[0] = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)v16);
  *(_QWORD *)this = &off_1E617C3E8;
}

void sub_1B09FA644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  TFontNameString::~TFontNameString((TFontNameString *)&a9);
  TDataReference::~TDataReference((TDataReference *)(v21 - 80));
  _Unwind_Resume(a1);
}

void TSFNTType1CFFDescriptor::~TSFNTType1CFFDescriptor(TSFNTType1CFFDescriptor *this)
{
  TType1CFFDescriptor::~TType1CFFDescriptor(this);
  JUMPOUT(0x1B5E0CD38);
}

void TSFNTType1CFF2Descriptor::~TSFNTType1CFF2Descriptor(TSFNTType1CFF2Descriptor *this)
{
  TType1CFFDescriptor::~TType1CFFDescriptor(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TCFFParsingContext::FontType(TCFFParsingContext *this, char a2)
{
  if (!*((_BYTE *)this + 860))
    *((_BYTE *)this + 860) = a2;
  return 1;
}

BOOL TCFFParsingContext::UseSpecialEncoding(TCFFParsingContext *this, int a2)
{
  unsigned int v2;
  int v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *exception;

  v2 = a2 - 1;
  if ((a2 - 1) <= 0x1FFFFFFD)
  {
    *((_QWORD *)this + 105) = a2;
    if (a2 <= 256)
      v4 = 256;
    else
      v4 = a2;
    v5 = (4 * v4);
    *((_QWORD *)this + 102) = v5;
    if (*((_QWORD *)this + 103) >= v5)
    {
      v9 = (void *)*((_QWORD *)this + 101);
      if (!v9)
        return v2 < 0x1FFFFFFE;
    }
    else
    {
      v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 100) + 48))((char *)this + 800);
      v7 = *((_QWORD *)this + 101);
      v8 = *((_QWORD *)this + 100);
      if (v7)
        v9 = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 40))((char *)this + 800, v7, v6);
      else
        v9 = (void *)(*(uint64_t (**)(char *, uint64_t))(v8 + 16))((char *)this + 800, v6);
      *((_QWORD *)this + 101) = v9;
      if (!v9)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E6176998;
        exception[2] = 2;
      }
      *((_QWORD *)this + 103) = v6;
      v5 = *((_QWORD *)this + 102);
    }
    if (v5)
      bzero(v9, v5);
  }
  return v2 < 0x1FFFFFFE;
}

uint64_t TCFFParsingContext::SpecialEncoding(TCFFParsingContext *this, unsigned int a2, const char *__s)
{
  uint64_t v4;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _DWORD *exception;

  if (__s)
  {
    v4 = *((_QWORD *)this + 101);
    if (v4)
    {
      if ((a2 & 0x80000000) == 0 && *__s && *((_DWORD *)this + 210) > (signed int)a2)
      {
        v7 = strlen(__s);
        v8 = *((_QWORD *)this + 102);
        v9 = v7 + v8 + 2;
        *((_QWORD *)this + 102) = v9;
        if (*((_QWORD *)this + 103) < v9)
        {
          v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 100) + 48))((char *)this + 800);
          v11 = *((_QWORD *)this + 101);
          v12 = *((_QWORD *)this + 100);
          if (v11)
            v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 40))((char *)this + 800, v11, v10);
          else
            v13 = (*(uint64_t (**)(char *, uint64_t))(v12 + 16))((char *)this + 800, v10);
          v4 = v13;
          *((_QWORD *)this + 101) = v13;
          if (!v13)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)exception = &off_1E6176998;
            exception[2] = 2;
          }
          *((_QWORD *)this + 103) = v10;
        }
        *(_DWORD *)(v4 + 4 * a2) = v8;
        v14 = (_BYTE *)(v4 + (int)v8);
        *v14 = v7;
        strlcpy(v14 + 1, __s, v7 + 1);
      }
    }
  }
  return 1;
}

uint64_t TCFFParsingContext::CommenceParse(TCFFParsingContext *this, int *a2, unsigned int *a3)
{
  uint64_t v3;
  int v4;
  __int128 v8;
  const unsigned __int8 *v9;
  uint64_t v10;
  size_t v11;
  const unsigned __int8 *v12;
  const unsigned __int8 *v13;
  const unsigned __int8 *v14;
  const unsigned __int8 *v15;
  const unsigned __int8 *v16;
  const unsigned __int8 *v17;
  const unsigned __int8 *v18;
  const unsigned __int8 *v19;
  const unsigned __int8 *v20;
  const unsigned __int8 *v21;
  const unsigned __int8 *v22;
  const unsigned __int8 *v23;
  uint64_t result;
  __int128 v25;
  char v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _DWORD *exception;
  _DWORD *v51;
  int v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  unint64_t v62;
  unsigned __int16 v63;
  void *__src[2];
  __int128 v65;
  unint64_t v66;
  _OWORD __dst[8];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 93);
  v4 = *(_DWORD *)(v3 + 48);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __dst[6] = v8;
  __dst[7] = v8;
  __dst[4] = v8;
  __dst[5] = v8;
  __dst[2] = v8;
  __dst[3] = v8;
  __dst[0] = v8;
  __dst[1] = v8;
  v63 = -21846;
  if (v4 == 3 && (v9 = *(const unsigned __int8 **)(v3 + 2096)) != 0)
  {
    v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v9, *(_QWORD *)(v3 + 2104), &v63, 2))
      goto LABEL_88;
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(_QWORD *)this + 576))(this, __dst);
  }
  else
  {
    v10 = *(_QWORD *)v3;
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v3 + 296) + 2984))
    {
      __src[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      LODWORD(v62) = 0;
      TCFFFontSetInfo::GetFontName(v10, *(unsigned __int16 *)(v3 + 52), (char **)__src, (unsigned int *)&v62);
      if (v62 >= 0x7F)
        v11 = 127;
      else
        v11 = v62;
      if (__src[0])
        memmove(__dst, __src[0], v11);
      *((_BYTE *)__dst + v11) = 0;
      (*(void (**)(TCFFParsingContext *, _OWORD *))(*(_QWORD *)this + 88))(this, __dst);
    }
  }
  v12 = *(const unsigned __int8 **)(v3 + 1584);
  if (v12)
  {
    LODWORD(__src[0]) = 0;
    if (!CFFDictGet<int,0u>(v12, *(_QWORD *)(v3 + 1592), (int *)__src, 4))
    {
      v54 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v54 = &off_1E6176998;
      v54[2] = 4;
    }
    if (LODWORD(__src[0]) != 2)
      LODWORD(__src[0]) = 2;
    (*(void (**)(TCFFParsingContext *, uint64_t))(*(_QWORD *)this + 80))(this, 2);
  }
  v13 = *(const unsigned __int8 **)(v3 + 1184);
  if (v13)
  {
    LODWORD(__src[0]) = -1;
    if (!CFFDictGet<int,0u>(v13, *(_QWORD *)(v3 + 1192), (int *)__src, 4))
    {
      v55 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v55 = &off_1E6176998;
      v55[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, _QWORD))(*(_QWORD *)this + 168))(this, LODWORD(__src[0]));
  }
  v14 = *(const unsigned __int8 **)(v3 + 976);
  if (v14)
  {
    v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v14, *(_QWORD *)(v3 + 984), &v63, 2))
      goto LABEL_88;
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(_QWORD *)this + 128))(this, __dst);
  }
  v15 = *(const unsigned __int8 **)(v3 + 1232);
  if (v15 && !CFFDictGet<int,0u>(v15, *(_QWORD *)(v3 + 1240), (int *)this + 192, 4))
    goto LABEL_88;
  v16 = *(const unsigned __int8 **)(v3 + 1008);
  if (v16)
  {
    v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v16, *(_QWORD *)(v3 + 1016), &v63, 2))
      goto LABEL_88;
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(_QWORD *)this + 104))(this, __dst);
  }
  v17 = *(const unsigned __int8 **)(v3 + 1024);
  if (v17)
  {
    v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v17, *(_QWORD *)(v3 + 1032), &v63, 2))
      goto LABEL_88;
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(_QWORD *)this + 112))(this, __dst);
  }
  v18 = *(const unsigned __int8 **)(v3 + 1040);
  if (v18)
  {
    v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v18, *(_QWORD *)(v3 + 1048), &v63, 2))
      goto LABEL_88;
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(_QWORD *)this + 120))(this, __dst);
  }
  v19 = *(const unsigned __int8 **)(v3 + 1488);
  if (!v19)
    goto LABEL_38;
  v63 = -1;
  if (!CFFDictGet<unsigned short,0u>(v19, *(_QWORD *)(v3 + 1496), &v63, 2))
  {
LABEL_88:
    v51 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v51 = &off_1E6176998;
    v51[2] = 4;
  }
  TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
  (*(void (**)(TCFFParsingContext *, _OWORD *))(*(_QWORD *)this + 176))(this, __dst);
LABEL_38:
  v20 = *(const unsigned __int8 **)(v3 + 1504);
  if (v20)
  {
    LOWORD(__src[0]) = 0;
    if (!CFFDictGet<unsigned short,0u>(v20, *(_QWORD *)(v3 + 1512), __src, 2))
    {
      v56 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v56 = &off_1E6176998;
      v56[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, BOOL))(*(_QWORD *)this + 144))(this, LOWORD(__src[0]) != 0);
  }
  v21 = *(const unsigned __int8 **)(v3 + 1520);
  if (v21)
  {
    LODWORD(__src[0]) = 0;
    if (!CFFDictGet<int,0u>(v21, *(_QWORD *)(v3 + 1528), (int *)__src, 4))
    {
      v57 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v57 = &off_1E6176998;
      v57[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, _QWORD))(*(_QWORD *)this + 136))(this, (LODWORD(__src[0]) << 16));
  }
  v22 = *(const unsigned __int8 **)(v3 + 1536);
  if (v22)
  {
    LODWORD(__src[0]) = 0;
    if (!CFFDictGet<int,0u>(v22, *(_QWORD *)(v3 + 1544), (int *)__src, 4))
    {
      v58 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v58 = &off_1E6176998;
      v58[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, _QWORD))(*(_QWORD *)this + 152))(this, (LODWORD(__src[0]) << 16));
  }
  v23 = *(const unsigned __int8 **)(v3 + 1552);
  if (v23)
  {
    LODWORD(__src[0]) = 0;
    if (!CFFDictGet<int,0u>(v23, *(_QWORD *)(v3 + 1560), (int *)__src, 4))
    {
      v59 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v59 = &off_1E6176998;
      v59[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, _QWORD))(*(_QWORD *)this + 160))(this, (LODWORD(__src[0]) << 16));
  }
  result = *(_QWORD *)(v3 + 1872);
  if (result)
  {
    v66 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__src = v25;
    v65 = v25;
    result = CFFDictGet<unsigned short,0u>((const unsigned __int8 *)result, *(_QWORD *)(v3 + 1880), __src, 40);
    v26 = LOWORD(__src[0]) < 2u ? result : 0;
    if ((v26 & 1) == 0)
    {
      v60 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v60 = &off_1E6176998;
      v60[2] = 4;
    }
  }
  v27 = *((_DWORD *)this + 192);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
    {
      if (v27 <= 1)
        *((_BYTE *)this + 792) = 1;
      (*(void (**)(TCFFParsingContext *, uint64_t))(*(_QWORD *)this + 32))(this, 256);
      result = TCFFFontInfo::EnumerateDict(v3, (const char *)8, (uint64_t)this, (uint64_t (*)(_QWORD, _QWORD))EncodingEnumerationCallback);
    }
  }
  else
  {
    *((_BYTE *)this + 792) = 0;
    result = (*(uint64_t (**)(TCFFParsingContext *))(*(_QWORD *)this + 24))(this);
  }
  __src[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  v62 = 0xAAAAAAAAAAAAAAAALL;
  v28 = *(unsigned __int16 *)(v3 + 280);
  if (*(_WORD *)(v3 + 280))
  {
    *((_WORD *)this + 352) = v28;
    *((_WORD *)this + 353) = *(unsigned __int8 *)(v3 + 284);
    if (a2)
    {
      *a2 = *(_DWORD *)(v3 + 288);
      *a3 = *(_DWORD *)(v3 + 292);
    }
    else
    {
      result = TCFFFontInfo::GetIndexedArray(v3, v3 + 280, 0, v28, &v62, (unint64_t *)__src);
      if (!(_DWORD)result)
      {
        v61 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v61 = &off_1E6176998;
        v61[2] = 4;
      }
      v29 = *((__int16 *)this + 353)
          + *((__int16 *)this + 353) * *((unsigned __int16 *)this + 352)
          + result;
      *((_QWORD *)this + 108) = v62;
      *((_QWORD *)this + 109) = v29;
    }
  }
  v30 = *(unsigned int *)(v3 + 136);
  v31 = *(_DWORD *)(v3 + 48);
  if (v31 == 4 || v31 == 1)
  {
    if ((_DWORD)v30)
    {
      if (((*(uint64_t (**)(TCFFParsingContext *, _QWORD))(*(_QWORD *)this + 192))(this, *(unsigned int *)(v3 + 136)) & 1) != 0)
      {
        v32 = (unsigned __int8 **)((char *)this + 752);
        TCFFFontInfo::GetIndexedArray(v3, v3 + 136, 0, v30, (_QWORD *)this + 94, (unint64_t *)this + 95);
        result = (*(uint64_t (**)(TCFFParsingContext *))(*(_QWORD *)this + 792))(this);
        if (!(_DWORD)result)
          return (*(uint64_t (**)(TCFFParsingContext *, uint64_t))(*(_QWORD *)this + 824))(this, v3);
        v33 = *v32;
        if (*v32)
        {
          v34 = -1;
          v35 = *(unsigned __int8 *)(v3 + 140) - 1;
          v36 = 0;
          v37 = 0;
          switch(*(_BYTE *)(v3 + 140))
          {
            case 1:
              goto LABEL_76;
            case 2:
              goto LABEL_75;
            case 3:
              goto LABEL_74;
            case 4:
              v38 = *v33++;
              v36 = v38 << 8;
LABEL_74:
              v39 = *v33++;
              v37 = (v36 | v39) << 8;
LABEL_75:
              v40 = *v33++;
              v34 = ((v37 | v40) << 8) - 1;
LABEL_76:
              v41 = *v33++;
              v34 += v41;
              break;
            default:
              break;
          }
          v42 = *(_DWORD *)(v3 + 148);
          v43 = (_DWORD *)(*((_QWORD *)this + 79) + 4);
          do
          {
            v44 = 0;
            switch(v35)
            {
              case 0:
                goto LABEL_82;
              case 1:
                goto LABEL_81;
              case 2:
                goto LABEL_80;
              case 3:
                v45 = *v33++;
                v44 = v45 << 8;
LABEL_80:
                v46 = *v33++;
                v44 = (v44 | v46) << 8;
LABEL_81:
                v47 = *v33++;
                v44 = (v44 | v47) << 8;
LABEL_82:
                v48 = *v33++;
                v44 |= v48;
                break;
              default:
                break;
            }
            v49 = v44 - 1;
            *(v43 - 1) = v34 + v42;
            *v43 = v49 - v34;
            v43 += 2;
            v34 = v49;
            --v30;
          }
          while (v30);
        }
        return result;
      }
      v52 = 2;
    }
    else
    {
      v52 = 4;
    }
    v53 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v53 = &off_1E6176998;
    v53[2] = v52;
  }
  return result;
}

void sub_1B09FB25C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1B09FB2A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B09FB2AC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B09FB2B4);
  __clang_call_terminate(a1);
}

uint64_t EncodingEnumerationCallback(const unsigned __int8 *a1, unint64_t a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  TCFFFontInfo *v7;
  __int128 v8;
  _OWORD v10[8];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a5 + 192))
  {
    v7 = (TCFFFontInfo *)a5[93];
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[6] = v8;
    v10[7] = v8;
    v10[4] = v8;
    v10[5] = v8;
    v10[2] = v8;
    v10[3] = v8;
    v10[0] = v8;
    v10[1] = v8;
    TCFFFontInfo::GetString(v7, a3, (char *)v10);
    (*(void (**)(_QWORD *, uint64_t, _OWORD *))(*a5 + 40))(a5, a4, v10);
  }
  return 1;
}

_QWORD *TCFFParsingContext::ParseGlobalSubrs(TCFFParsingContext *this)
{
  _QWORD *result;
  uint64_t v3;
  _WORD *v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;

  result = (_QWORD *)*((_QWORD *)this + 93);
  v3 = *result;
  v4 = (_WORD *)(*result + 224);
  v5 = (unsigned __int16)*v4;
  if (*v4)
  {
    v9 = 0xAAAAAAAAAAAAAAAALL;
    result = (_QWORD *)TCFFFontInfo::GetIndexedArray((uint64_t)result, (uint64_t)v4, 0, v5, &v9, &v8);
    if ((_DWORD)result)
    {
      v6 = (unsigned __int16)*(_DWORD *)(v3 + 224);
      *((_WORD *)this + 431) = *(_DWORD *)(v3 + 224);
      v7 = *(unsigned __int8 *)(v3 + 228);
      *((_BYTE *)this + 861) = v7;
      *((_QWORD *)this + 110) = v9;
      *((_QWORD *)this + 111) = (v7 + v7 * v6 + (_DWORD)result);
    }
  }
  return result;
}

uint64_t TCFFParsingContext::ParseCharsetDict(TCFFParsingContext *this, TCFFFontInfo *a2)
{
  return TCFFFontInfo::EnumerateDict((uint64_t)a2, (const char *)9, (uint64_t)this, (uint64_t (*)(_QWORD, _QWORD))CharsetEnumerationCallback);
}

uint64_t CharsetEnumerationCallback(const unsigned __int8 *a1, unint64_t a2, unsigned int a3, unsigned int a4, _QWORD *a5)
{
  uint64_t *v8;
  __int128 v9;
  uint64_t IndexedArrayOffset;
  uint64_t v11;
  int v12;
  _QWORD v14[3];
  char v15[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)a5[93];
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21 = v9;
  v22 = v9;
  v19 = v9;
  v20 = v9;
  v17 = v9;
  v18 = v9;
  *(_OWORD *)v15 = v9;
  v16 = v9;
  v14[1] = 0;
  v14[2] = 0;
  v14[0] = &off_1E6176898;
  IndexedArrayOffset = TCFFFontSetInfo::GetIndexedArrayOffset(*v8, (uint64_t)v14, (uint64_t)(v8 + 17), a4);
  TCFFFontInfo::GetString((TCFFFontInfo *)v8, a3, v15);
  v11 = a5[95];
  v12 = TCFFFontSetInfo::GetIndexedArrayOffset(*v8, (uint64_t)v14, (uint64_t)(v8 + 17), a4 + 1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, _QWORD, char *, uint64_t, _QWORD))(*a5 + 200))(a5, 0, IndexedArrayOffset, 0, v15, v11 + IndexedArrayOffset, (v12 - IndexedArrayOffset));
  *(_WORD *)(a5[97] + 2 * (unsigned __int16)a4) = a3;
  *(_WORD *)(a5[98] + 2 * a3) = a4;
  return 1;
}

uint64_t TCFF2ParsingContext::TCFF2ParsingContext(uint64_t a1, const TDataReference *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;

  TParsingContext::TParsingContext((TParsingContext *)a1, a2, 0);
  *(_QWORD *)(v9 + 744) = a4;
  *(_OWORD *)(v9 + 752) = 0u;
  *(_DWORD *)(v9 + 768) = -1;
  *(_OWORD *)(v9 + 776) = 0u;
  *(_BYTE *)(v9 + 792) = -1;
  *(_QWORD *)(v9 + 808) = 0;
  *(_QWORD *)(v9 + 800) = &off_1E61C8D98;
  *(_OWORD *)(v9 + 816) = 0u;
  *(_OWORD *)(v9 + 832) = xmmword_1B0A3D7A0;
  *(_BYTE *)(v9 + 848) = 0;
  *(_OWORD *)(v9 + 850) = 0u;
  *(_OWORD *)(v9 + 866) = 0u;
  *(_OWORD *)(v9 + 882) = 0u;
  *(_QWORD *)(v9 + 896) = 0;
  *(_QWORD *)(v9 + 904) = a3;
  *(_DWORD *)(v9 + 912) = a5;
  *(_QWORD *)v9 = &off_1E61CA588;
  v10 = *(unsigned __int16 *)(a4 + 200);
  *(_WORD *)(v9 + 916) = v10;
  v11 = (uint64_t *)(v9 + 920);
  *(_OWORD *)(v9 + 920) = 0u;
  *(_DWORD *)(v9 + 936) = -1;
  *(_OWORD *)(v9 + 940) = 0u;
  *(_DWORD *)(a1 + 956) = 0;
  v12 = (_QWORD *)operator new[]();
  *v12 = 488;
  v12[1] = v10;
  v13 = v12 + 2;
  if ((_DWORD)v10)
  {
    v14 = &v13[61 * v10];
    v15 = v12 + 2;
    do
    {
      *(_BYTE *)v15 = 0;
      *(_QWORD *)((char *)v15 + 2) = 0;
      *((_WORD *)v15 + 5) = 0;
      v15[2] = 0;
      v15[3] = 0;
      *((_DWORD *)v15 + 8) = -1;
      *((_DWORD *)v15 + 121) = 0;
      bzero((char *)v15 + 36, 0x1C0uLL);
      v15 += 61;
    }
    while (v15 != v14);
  }
  v16 = *v11;
  *v11 = (uint64_t)v13;
  if (v16)
    std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>((uint64_t)v11, v16);
  v17 = 4 * *(unsigned __int16 *)(a1 + 916);
  v18 = (void *)operator new[]();
  bzero(v18, v17);
  v19 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)(a1 + 928) = v18;
  if (v19)
    MEMORY[0x1B5E0CD14](v19, 0x1000C8052888210);
  return a1;
}

void sub_1B09FB6B0(_Unwind_Exception *a1, int a2)
{
  TCFFParsingContext *v2;
  uint64_t *v3;
  _DWORD *exception;
  uint64_t v6;
  uint64_t v7;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v6 = *((_QWORD *)v2 + 116);
  *((_QWORD *)v2 + 116) = 0;
  if (v6)
    MEMORY[0x1B5E0CD14](v6, 0x1000C8052888210);
  v7 = *v3;
  *v3 = 0;
  if (v7)
    std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>((uint64_t)v3, v7);
  TCFFParsingContext::~TCFFParsingContext(v2);
  _Unwind_Resume(a1);
}

void TCFF2ParsingContext::~TCFF2ParsingContext(TCFF2ParsingContext *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E61CA588;
  v2 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v3)
    std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>((uint64_t)this + 920, v3);
  TCFFParsingContext::~TCFFParsingContext(this);
}

{
  TCFF2ParsingContext::~TCFF2ParsingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TCFF2ParsingContext::ParseCFF2FontDicts(TCFFParsingContext *this, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _DWORD *exception;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  unsigned int *v33;
  _BYTE v34[2328];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*((_QWORD *)this + 93);
  v5 = *v4;
  if (*v4)
  {
    v6 = *(unsigned __int16 *)(v5 + 8);
    *((_WORD *)this + 425) = v6;
    if (v6)
    {
      *((_BYTE *)this + 848) = *(_BYTE *)(v5 + 12);
      *(_QWORD *)((char *)this + 852) = *(_QWORD *)(v5 + 16);
    }
  }
  else
  {
    *((_WORD *)this + 425) = 0;
  }
  TCFFParsingContext::CommenceParse(this, 0, 0);
  TCFFParsingContext::ParseGlobalSubrs(this);
  TCFFParsingContext::InitFontDesc((uint64_t)this);
  TCFFParsingContext::FixFontDesc(v7, *((_QWORD *)this + 86));
  *(_WORD *)(*((_QWORD *)this + 86) + 56) = -1;
  v28 = *((_QWORD *)this + 93);
  if (*((_WORD *)this + 458))
  {
    v8 = 0;
    v9 = 0;
    v33 = (unsigned int *)*((_QWORD *)this + 116);
    v32 = v4 + 26;
    v31 = a2 + 8;
    v30 = 488 * *((unsigned __int16 *)this + 458);
    v29 = (uint64_t *)((char *)this + 648);
    while (1)
    {
      v10 = *((_QWORD *)this + 115);
      memset(&v34[16], 170, 0x908uLL);
      memset(v34, 0, 17);
      *(_QWORD *)&v34[24] = &off_1E6176898;
      *(_DWORD *)&v34[136] = 0;
      v34[140] = 0;
      *(_QWORD *)&v34[144] = 0;
      memset(&v34[32], 0, 97);
      *(_QWORD *)&v34[160] = 0;
      *(_QWORD *)&v34[168] = 0;
      *(_QWORD *)&v34[152] = &off_1E6176898;
      *(_QWORD *)&v34[176] = &off_1E6176898;
      *(_DWORD *)&v34[208] = 0;
      v34[212] = 0;
      *(_QWORD *)&v34[216] = 0;
      memset(&v34[184], 0, 18);
      *(_QWORD *)&v34[232] = 0;
      *(_QWORD *)&v34[240] = 0;
      *(_QWORD *)&v34[224] = &off_1E6176898;
      *(_QWORD *)&v34[248] = &off_1E6176898;
      *(_DWORD *)&v34[280] = 0;
      v34[284] = 0;
      *(_QWORD *)&v34[288] = 0;
      memset(&v34[256], 0, 20);
      *(_QWORD *)&v34[304] = 0;
      *(_QWORD *)&v34[312] = 0;
      *(_QWORD *)&v34[296] = &off_1E6176898;
      *(_QWORD *)&v34[320] = &off_1E6176898;
      memset(&v34[328], 0, 18);
      v34[360] = 0;
      *(_QWORD *)&v34[352] = 0;
      memset(&v34[376], 0, 18);
      memset(&v34[400], 0, 50);
      memset(&v34[456], 0, 25);
      memset(&v34[484], 0, 21);
      *(_QWORD *)&v34[368] = &off_1E6176898;
      *(_QWORD *)&v34[512] = &off_1E6176898;
      *(_DWORD *)&v34[624] = 0;
      v34[628] = 0;
      *(_QWORD *)&v34[632] = 0;
      memset(&v34[520], 0, 97);
      *(_QWORD *)&v34[640] = &off_1E6176898;
      *(_QWORD *)&v34[648] = 0;
      *(_QWORD *)&v34[656] = 0;
      *(_QWORD *)&v34[664] = &off_1E6176898;
      *(_DWORD *)&v34[696] = 0;
      v34[700] = 0;
      *(_QWORD *)&v34[704] = 0;
      memset(&v34[672], 0, 18);
      *(_QWORD *)&v34[712] = &off_1E6176898;
      *(_QWORD *)&v34[720] = 0;
      *(_QWORD *)&v34[728] = 0;
      *(_QWORD *)&v34[736] = &off_1E6176898;
      *(_DWORD *)&v34[768] = 0;
      v34[772] = 0;
      *(_QWORD *)&v34[776] = 0;
      memset(&v34[744], 0, 20);
      *(_QWORD *)&v34[784] = &off_1E6176898;
      *(_QWORD *)&v34[792] = 0;
      *(_QWORD *)&v34[800] = 0;
      *(_QWORD *)&v34[808] = &off_1E6176898;
      memset(&v34[816], 0, 18);
      v34[848] = 0;
      *(_QWORD *)&v34[840] = 0;
      *(_QWORD *)&v34[856] = &off_1E6176898;
      memset(&v34[864], 0, 18);
      memset(&v34[888], 0, 50);
      memset(&v34[944], 0, 25);
      bzero(&v34[972], 0x54AuLL);
      *(_QWORD *)&v34[488] = *v4;
      v11 = v4[1];
      v34[504] = *((_BYTE *)v4 + 16);
      *(_QWORD *)&v34[496] = v11;
      *(_QWORD *)&v34[520] = v4[4];
      *(_QWORD *)&v34[528] = v4[5];
      v12 = *((_OWORD *)v4 + 4);
      *(_OWORD *)&v34[536] = *((_OWORD *)v4 + 3);
      *(_OWORD *)&v34[552] = v12;
      v13 = *((_OWORD *)v4 + 5);
      v14 = *((_OWORD *)v4 + 6);
      v15 = *((_OWORD *)v4 + 7);
      v34[616] = *((_BYTE *)v4 + 128);
      *(_OWORD *)&v34[584] = v14;
      *(_OWORD *)&v34[600] = v15;
      *(_OWORD *)&v34[568] = v13;
      *(_OWORD *)&v34[624] = *(_OWORD *)(v4 + 17);
      *(_QWORD *)&v34[648] = v4[20];
      *(_QWORD *)&v34[656] = v4[21];
      *(_QWORD *)&v34[672] = v4[23];
      *(_QWORD *)&v34[680] = v4[24];
      *(_WORD *)&v34[688] = *((_WORD *)v4 + 100);
      *(_OWORD *)&v34[696] = *v32;
      *(_QWORD *)&v34[720] = v4[29];
      *(_QWORD *)&v34[728] = v4[30];
      *(_QWORD *)&v34[744] = v4[32];
      *(_QWORD *)&v34[752] = v4[33];
      *(_DWORD *)&v34[760] = *((_DWORD *)v4 + 68);
      *(_OWORD *)&v34[768] = *(_OWORD *)(v4 + 35);
      *(_QWORD *)&v34[792] = v4[38];
      *(_QWORD *)&v34[800] = v4[39];
      *(_QWORD *)&v34[816] = v4[41];
      *(_QWORD *)&v34[824] = v4[42];
      *(_WORD *)&v34[832] = *((_WORD *)v4 + 172);
      v16 = v4[44];
      v34[848] = *((_BYTE *)v4 + 360);
      *(_QWORD *)&v34[840] = v16;
      *(_QWORD *)&v34[864] = v4[47];
      *(_QWORD *)&v34[872] = v4[48];
      *(_WORD *)&v34[880] = *((_WORD *)v4 + 196);
      v17 = *((_OWORD *)v4 + 25);
      v18 = *((_OWORD *)v4 + 27);
      *(_OWORD *)&v34[904] = *((_OWORD *)v4 + 26);
      *(_OWORD *)&v34[920] = v18;
      *(_OWORD *)&v34[888] = v17;
      v19 = *((_OWORD *)v4 + 28);
      v20 = *((_OWORD *)v4 + 29);
      *(_QWORD *)&v34[968] = v4[60];
      *(_OWORD *)&v34[936] = v19;
      *(_OWORD *)&v34[952] = v20;
      TCFFFontSetInfo::GetFontDictInfo(v31, (const char *)5, (uint64_t)v32, v9, (uint64_t)v34);
      if (v9 >= *((unsigned __int16 *)this + 458))
        break;
      *((_DWORD *)this + 234) = v9;
      v21 = *((_QWORD *)this + 115) + v8;
      v22 = v21 + 36;
      *((_QWORD *)this + 119) = v21 + 36;
      *(_DWORD *)(v21 + 8) = -1;
      *(_DWORD *)(v21 + 2) = 0xFFFF;
      *(_DWORD *)(v21 + 32) = -1;
      *(_WORD *)(v21 + 92) = -1;
      *((_QWORD *)this + 93) = v34;
      TCFFParsingContext::CommenceParse(this, (int *)(v10 + v8 + 8), v33);
      if (*((_WORD *)this + 352))
      {
        v23 = v10 + v8;
        *(_WORD *)(v23 + 4) = *((_WORD *)this + 352);
        *((_WORD *)this + 352) = 0;
        *(_WORD *)(v23 + 2) = *((_WORD *)this + 353);
        if (*((_QWORD *)this + 83))
        {
          v24 = *v29;
          *((_QWORD *)this + 82) = 0;
          *((_QWORD *)this + 83) = 0;
          *v29 = 0;
          if (v24)
          {
            *(_QWORD *)(v10 + v8 + 16) = v24;
            *(_DWORD *)(v10 + v8 + 8) = 0;
          }
        }
      }
      *(_DWORD *)(v10 + v8 + 484) = *(unsigned __int16 *)&v34[448];
      TCFFParsingContext::InitFontDesc((uint64_t)this);
      TCFFParsingContext::FixFontDesc(v25, v22);
      if (!TCFF2ParsingContext::EndCFF2FontDict(this, v9))
      {
        v26 = 4;
        goto LABEL_17;
      }
      ++v9;
      v8 += 488;
      ++v33;
      if (v30 == v8)
        goto LABEL_14;
    }
    v26 = 2;
LABEL_17:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = v26;
  }
LABEL_14:
  *((_QWORD *)this + 93) = v28;
}

void sub_1B09FBE40(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B09FBE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  TCFF2ParsingContext *v9;
  unsigned int v10;

  if (a2)
  {
    __cxa_begin_catch(a1);
    TCFF2ParsingContext::EndCFF2FontDict(v9, v10);
    *((_QWORD *)v9 + 93) = a9;
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1B09FBE78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B09FBE84(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B09FBE8CLL);
  __clang_call_terminate(a1);
}

BOOL TCFF2ParsingContext::EndCFF2FontDict(TCFF2ParsingContext *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  _BOOL8 result;

  if (*((_DWORD *)this + 234) != a2)
    return 0;
  v2 = *((_QWORD *)this + 119);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)this + 115) + 488 * a2;
  v4 = *(unsigned __int16 *)(v3 + 4);
  *(_WORD *)(v2 + 58) = v4;
  *((_QWORD *)this + 119) = 0;
  v5 = *(_DWORD *)(v3 + 8);
  v6 = *(unsigned __int16 *)(v3 + 2);
  if (v4)
    v7 = 0;
  else
    v7 = v5 == -1;
  if (v7 && v6 == 0xFFFF)
    return 1;
  result = 0;
  if (v4)
  {
    if ((v5 & 0x80000000) == 0)
      return (v6 - 1) < 4;
  }
  return result;
}

double TCFF2ParsingContext::ParseCFF2data(uint64_t a1, uint64_t a2)
{
  double result;
  _DWORD *exception;

  if (!*(_WORD *)(a1 + 916))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(*(_QWORD *)(a1 + 744) + 136);
  TCFF2ParsingContext::LoadCFF2FDSelect(a1);
  TCFF2ParsingContext::ParseCFF2FontDicts((TCFFParsingContext *)a1, a2);
  CopyFontDesc(*(_QWORD *)(a1 + 688), *(_QWORD *)(a1 + 920) + 36);
  *(_QWORD *)&result = TCFF2ParsingContext::SwipeCFF2ResultsToFont((TCFF2ParsingContext *)a1, (TSFNTOpenTypeCFF2Font *)*(_QWORD *)(a1 + 904), (const ItemVariationStore *)(*(_QWORD *)(a1 + 744) + 400)).n128_u64[0];
  return result;
}

uint64_t TCFF2ParsingContext::LoadCFF2FDSelect(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  const unsigned __int8 *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *exception;
  void (**v15)(MDataReference *__hidden);
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;

  if (*(_WORD *)(this + 916) != 1)
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 744);
    v18 = -1431655766;
    v3 = *(const unsigned __int8 **)(v2 + 2080);
    if (v3 && CFFDictGet<unsigned int,0u>(v3, *(_QWORD *)(v2 + 2088), (int *)&v18, 4))
    {
      v4 = **(_QWORD **)(v1 + 744);
      if (v18 <= 0xFFFFFFFA
        && (v5 = *(_QWORD **)(v4 + 296), v6 = v5[371], v7 = v5[372] - v6, (int)v18 + 5 <= v7)
        && (v8 = v5[370]) != 0
        && (v9 = *(_QWORD *)(v8 + 8)) != 0)
      {
        v16 = v9 + v6 + (int)v18;
        v17 = v7 - (int)v18;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      v15 = &off_1E6176898;
      this = ReadByteInc((MDataReference *)&v15);
      if ((_DWORD)this == 4)
      {
        this = ReadBytes((const MDataReference *)&v15, (const char *)4);
        v10 = 6 * this + 9;
      }
      else if ((_DWORD)this == 3)
      {
        this = ReadBytes((const MDataReference *)&v15, (const char *)2);
        v10 = 3 * (unsigned __int16)this + 5;
      }
      else
      {
        if ((_DWORD)this)
          goto LABEL_22;
        v10 = *(unsigned int *)(v1 + 700) + 1;
      }
      *(_QWORD *)(v1 + 944) = v10;
      v11 = v10 + (int)v18;
      if (v11 > (int)v18)
      {
        v12 = *(_QWORD **)(v4 + 296);
        if (v11 <= v12[372] - v12[371])
        {
          v13 = v12[370];
          if (v13)
          {
            if (*(_QWORD *)(v13 + 8))
            {
              *(_DWORD *)(v1 + 940) = v18;
              return this;
            }
          }
        }
      }
    }
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  return this;
}

uint64_t TCFFCIDParsingContext::GDBytes(TCFFCIDParsingContext *this, int a2)
{
  *((_DWORD *)this + 230) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::FDBytes(TCFFCIDParsingContext *this, int a2)
{
  *((_DWORD *)this + 229) = a2;
  return 1;
}

BOOL TCFFCIDParsingContext::CIDCount(TCFFCIDParsingContext *this, __int16 a2)
{
  return *((unsigned __int16 *)this + 462) == a2;
}

uint64_t TCFFCIDParsingContext::CIDMapOffset(TCFFCIDParsingContext *this, int a2)
{
  *((_DWORD *)this + 235) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::SDBytes(TCFFCIDParsingContext *this, __int16 a2)
{
  *(_WORD *)(*((_QWORD *)this + 127) + 488 * *((unsigned __int16 *)this + 512) + 2) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::SubrMapOffset(TCFFCIDParsingContext *this, int a2)
{
  *(_DWORD *)(*((_QWORD *)this + 127) + 488 * *((unsigned __int16 *)this + 512) + 8) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::SubrCount(TCFFCIDParsingContext *this, __int16 a2)
{
  *(_WORD *)(*((_QWORD *)this + 127) + 488 * *((unsigned __int16 *)this + 512) + 4) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::CIDStartData(TCFFCIDParsingContext *this)
{
  return 1;
}

uint64_t TCFFCIDParsingContext::ParseCFFCIDdata(_QWORD *a1, uint64_t a2, int16x4_t *a3, char a4)
{
  _QWORD *v7;
  int *v8;
  const unsigned __int8 *v9;
  _QWORD *v10;
  _QWORD *v11;
  int32x4_t v12;
  const unsigned __int8 *v13;
  _DWORD *v14;
  const unsigned __int8 *v15;
  BOOL v16;
  BOOL v17;
  const unsigned __int8 *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int ByteInc;
  _QWORD *v25;
  unsigned int v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  const unsigned __int8 *v39;
  size_t v40;
  const unsigned __int8 *v41;
  const unsigned __int8 *v42;
  const unsigned __int8 *v43;
  const unsigned __int8 *v44;
  const unsigned __int8 *v45;
  const unsigned __int8 *v46;
  const unsigned __int8 *v47;
  __int128 v48;
  uint64_t v49;
  const unsigned __int8 *v50;
  const void **v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  const void **v59;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *exception;
  _DWORD *v77;
  _DWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  int v82;
  uint64_t v83;
  unsigned int v84;
  void *__src;
  unsigned __int16 v86[8];
  _OWORD v87[145];
  unint64_t v88;
  unsigned int v89;
  _OWORD __dst[8];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a1[93];
  v8 = (int *)(a1[86] + 88);
  v9 = (const unsigned __int8 *)v7[132];
  if (v9)
  {
    if (!CFFDictGet<int,16u>(v9, v7[133], v8, 16))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E6176998;
      exception[2] = 4;
    }
    v10 = a1;
    v11 = (_QWORD *)a1[93];
  }
  else
  {
    if (a3)
      v12 = vshll_n_s16(*a3, 0x10uLL);
    else
      v12 = (int32x4_t)xmmword_1B0AACFF0;
    *(int32x4_t *)v8 = v12;
    v11 = v7;
    v10 = a1;
  }
  *((_DWORD *)v10 + 236) = 0;
  v82 = -1431655766;
  v13 = (const unsigned __int8 *)v7[254];
  if (!v13 || !CFFDictGet<int,0u>(v13, v7[255], &v82, 4))
  {
    v66 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v66 = &off_1E6176998;
    v66[2] = 4;
  }
  v14 = a1;
  *((_WORD *)a1 + 462) = v82;
  *((_DWORD *)a1 + 175) = *((_DWORD *)v11 + 34);
  if ((a4 & 1) == 0)
  {
    *(_DWORD *)v86 = -1431655766;
    v15 = (const unsigned __int8 *)v7[152];
    if (!v15
      || ((v16 = CFFDictGet<unsigned int,0u>(v15, v7[153], (int *)v86, 4), *(_DWORD *)v86 > 2u)
        ? (v17 = v16)
        : (v17 = 0),
          !v17))
    {
      v74 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v74 = &off_1E6176998;
      v74[2] = 4;
    }
    v14 = a1;
    *((_DWORD *)a1 + 267) = *(_DWORD *)v86;
  }
  v14[229] = 0;
  v14[230] = *((unsigned __int8 *)v11 + 140);
  v14[235] = *((_DWORD *)v11 + 36);
  v14[232] = *(_DWORD *)(a2 + 2644);
  LODWORD(__dst[0]) = -1431655766;
  v18 = (const unsigned __int8 *)v7[260];
  if (!v18 || !CFFDictGet<unsigned int,0u>(v18, v7[261], (int *)__dst, 4))
    goto LABEL_92;
  if (LODWORD(__dst[0]) <= 0xFFFFFFFC
    && (v19 = *(_QWORD **)(*v11 + 296), v20 = v19[371], v21 = v19[372] - v20, SLODWORD(__dst[0]) + 3 <= v21)
    && (v22 = v19[370]) != 0
    && (v23 = *(_QWORD *)(v22 + 8)) != 0)
  {
    *(_QWORD *)&v86[4] = v23 + v20 + SLODWORD(__dst[0]);
    *(_QWORD *)&v87[0] = v21 - SLODWORD(__dst[0]);
  }
  else
  {
    *(_QWORD *)&v86[4] = 0;
    *(_QWORD *)&v87[0] = 0;
  }
  *(_QWORD *)v86 = &off_1E6176898;
  ByteInc = ReadByteInc((MDataReference *)v86);
  if (ByteInc == 3)
  {
    v26 = 3 * (unsigned __int16)ReadBytes((const MDataReference *)v86, (const char *)2) + 5;
    v25 = a1;
  }
  else
  {
    if (ByteInc)
    {
      v78 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v78 = &off_1E6176998;
      v78[2] = 4;
    }
    v25 = a1;
    v26 = *((_DWORD *)a1 + 175) + 1;
  }
  *((_DWORD *)v25 + 266) = v26;
  v27 = v26;
  v28 = *(_QWORD **)(*v11 + 296);
  v29 = v28[371];
  v30 = v28[372] - v29;
  if (v26)
  {
    v31 = SLODWORD(__dst[0]) + (unint64_t)v26;
    if (SLODWORD(__dst[0]) + v27 <= SLODWORD(__dst[0]) || v31 > v30)
      goto LABEL_92;
  }
  v32 = v28[370];
  if (!v32 || (v33 = *(_QWORD *)(v32 + 8)) == 0)
  {
LABEL_92:
    v64 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v64 = &off_1E6176998;
    v64[2] = 4;
  }
  v34 = (const void *)(v33 + v29 + SLODWORD(__dst[0]));
  *(_QWORD *)&v86[4] = v34;
  *(_QWORD *)&v87[0] = v30 - SLODWORD(__dst[0]);
  if (*(_QWORD *)&v87[0] < v27)
  {
    v61 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v61 = &off_1E6176998;
    v61[2] = 4;
  }
  v35 = (void *)operator new[]();
  v36 = a1[132];
  a1[132] = v35;
  if (v36)
  {
    MEMORY[0x1B5E0CD14](v36, 0x1000C8077774924);
    v35 = (void *)a1[132];
  }
  memmove(v35, v34, *((unsigned int *)a1 + 266));
  v37 = a1[93];
  *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __dst[7] = v38;
  __dst[6] = v38;
  __dst[5] = v38;
  __dst[4] = v38;
  __dst[3] = v38;
  __dst[2] = v38;
  __dst[1] = v38;
  __dst[0] = v38;
  v88 = 0xAAAAAAAAAAAAAAAALL;
  v89 = -1431655766;
  v39 = *(const unsigned __int8 **)(v37 + 1968);
  if (!v39 || *(_WORD *)(v37 + 2300) != 3 || !CFFDictGet<int,0u>(v39, *(_QWORD *)(v37 + 1976), (int *)&v88, 12))
  {
    v65 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v65 = &off_1E6176998;
    v65[2] = 4;
  }
  TCFFFontInfo::GetString((TCFFFontInfo *)v37, (unsigned __int16)v88, (char *)__dst);
  (*(void (**)(_QWORD *, _OWORD *))(*a1 + 552))(a1, __dst);
  TCFFFontInfo::GetString((TCFFFontInfo *)v37, WORD2(v88), (char *)__dst);
  (*(void (**)(_QWORD *, _OWORD *))(*a1 + 560))(a1, __dst);
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 568))(a1, v89);
  __src = (void *)0xAAAAAAAAAAAAAAAALL;
  v84 = 0;
  TCFFFontSetInfo::GetFontName(*(_QWORD *)v37, *(unsigned __int16 *)(v37 + 52), (char **)&__src, &v84);
  if (v84 >= 0x7F)
    v40 = 127;
  else
    v40 = v84;
  v84 = v40;
  memcpy(__dst, __src, v40);
  *((_BYTE *)__dst + v40) = 0;
  (*(void (**)(_QWORD *, _OWORD *))(*a1 + 88))(a1, __dst);
  v41 = *(const unsigned __int8 **)(v37 + 992);
  if (v41)
  {
    v86[0] = -1;
    if (*(_WORD *)(v37 + 2178) != 1 || !CFFDictGet<unsigned short,0u>(v41, *(_QWORD *)(v37 + 1000), v86, 2))
    {
      v67 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v67 = &off_1E6176998;
      v67[2] = 4;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v37, v86[0], (char *)__dst);
    (*(void (**)(_QWORD *, _OWORD *))(*a1 + 96))(a1, __dst);
  }
  v42 = *(const unsigned __int8 **)(v37 + 1008);
  if (v42)
  {
    v86[0] = -1;
    if (*(_WORD *)(v37 + 2180) != 1 || !CFFDictGet<unsigned short,0u>(v42, *(_QWORD *)(v37 + 1016), v86, 2))
    {
      v68 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v68 = &off_1E6176998;
      v68[2] = 4;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v37, v86[0], (char *)__dst);
    (*(void (**)(_QWORD *, _OWORD *))(*a1 + 104))(a1, __dst);
  }
  v43 = *(const unsigned __int8 **)(v37 + 1024);
  if (v43)
  {
    v86[0] = -1;
    if (*(_WORD *)(v37 + 2182) != 1 || !CFFDictGet<unsigned short,0u>(v43, *(_QWORD *)(v37 + 1032), v86, 2))
    {
      v69 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v69 = &off_1E6176998;
      v69[2] = 4;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v37, v86[0], (char *)__dst);
    (*(void (**)(_QWORD *, _OWORD *))(*a1 + 112))(a1, __dst);
  }
  v44 = *(const unsigned __int8 **)(v37 + 1040);
  if (v44)
  {
    v86[0] = -1;
    if (*(_WORD *)(v37 + 2184) != 1 || !CFFDictGet<unsigned short,0u>(v44, *(_QWORD *)(v37 + 1048), v86, 2))
    {
      v70 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v70 = &off_1E6176998;
      v70[2] = 4;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v37, v86[0], (char *)__dst);
    (*(void (**)(_QWORD *, _OWORD *))(*a1 + 120))(a1, __dst);
  }
  v45 = *(const unsigned __int8 **)(v37 + 1984);
  if (v45)
  {
    *(_DWORD *)v86 = -1;
    if (*(_WORD *)(v37 + 2302) != 1 || !CFFDictGet<int,0u>(v45, *(_QWORD *)(v37 + 1992), (int *)v86, 4))
    {
      v71 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v71 = &off_1E6176998;
      v71[2] = 4;
    }
    (*(void (**)(_QWORD *, _QWORD))(*a1 + 544))(a1, *(unsigned int *)v86);
  }
  v46 = *(const unsigned __int8 **)(v37 + 2048);
  if (v46)
  {
    *(_DWORD *)v86 = -1;
    if (*(_WORD *)(v37 + 2310) != 1 || !CFFDictGet<int,0u>(v46, *(_QWORD *)(v37 + 2056), (int *)v86, 4))
    {
      v72 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v72 = &off_1E6176998;
      v72[2] = 4;
    }
    (*(void (**)(_QWORD *, _QWORD))(*a1 + 616))(a1, *(unsigned int *)v86);
  }
  v47 = *(const unsigned __int8 **)(v37 + 1200);
  if (v47)
  {
    *(_QWORD *)&v48 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v87[1] = v48;
    v87[2] = v48;
    *(_OWORD *)v86 = v48;
    v87[0] = v48;
    v49 = *(__int16 *)(v37 + 2204);
    if ((int)v49 > 16 || !CFFDictGet<int,0u>(v47, *(_QWORD *)(v37 + 1208), (int *)v86, 4 * *(__int16 *)(v37 + 2204)))
    {
      v73 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v73 = &off_1E6176998;
      v73[2] = 4;
    }
    (*(void (**)(_QWORD *, uint64_t, unsigned __int16 *))(*a1 + 624))(a1, v49, v86);
  }
  v50 = *(const unsigned __int8 **)(v37 + 1600);
  if (v50 && !CFFDictGet<int,30u>(v50, *(_QWORD *)(v37 + 1608), (int *)(a1[86] + 4)))
  {
    v77 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v77 = &off_1E6176998;
    v77[2] = 4;
  }
  TCFFParsingContext::ParseGlobalSubrs((TCFFParsingContext *)a1);
  v80 = *((unsigned __int16 *)a1 + 463);
  if (((*(uint64_t (**)(void))(*a1 + 584))() & 1) == 0)
  {
    v75 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v75 = &off_1E6176998;
    v75[2] = 4;
  }
  v51 = (const void **)a1;
  if ((_DWORD)v80)
  {
    v52 = 0;
    v53 = 0;
    v54 = (unsigned int *)a1[131];
    v79 = a1 + 81;
    do
    {
      v55 = (char *)v51[127];
      memset(v87, 170, 0x908uLL);
      memset(v86, 0, sizeof(v86));
      LOBYTE(v87[0]) = 0;
      *((_QWORD *)&v87[0] + 1) = &off_1E6176898;
      DWORD2(v87[7]) = 0;
      BYTE12(v87[7]) = 0;
      *(_QWORD *)&v87[8] = 0;
      memset(&v87[1], 0, 97);
      *((_QWORD *)&v87[8] + 1) = &off_1E6176898;
      v87[9] = 0uLL;
      *(_QWORD *)&v87[10] = &off_1E6176898;
      LODWORD(v87[12]) = 0;
      BYTE4(v87[12]) = 0;
      *((_QWORD *)&v87[12] + 1) = 0;
      *((_QWORD *)&v87[10] + 1) = 0;
      *(_QWORD *)&v87[11] = 0;
      WORD4(v87[11]) = 0;
      *(_QWORD *)&v87[13] = &off_1E6176898;
      *((_QWORD *)&v87[13] + 1) = 0;
      *(_QWORD *)&v87[14] = 0;
      *((_QWORD *)&v87[14] + 1) = &off_1E6176898;
      DWORD2(v87[16]) = 0;
      BYTE12(v87[16]) = 0;
      *(_QWORD *)&v87[17] = 0;
      memset(&v87[15], 0, 20);
      *((_QWORD *)&v87[17] + 1) = &off_1E6176898;
      v87[18] = 0uLL;
      *(_QWORD *)&v87[19] = &off_1E6176898;
      WORD4(v87[20]) = 0;
      *((_QWORD *)&v87[19] + 1) = 0;
      *(_QWORD *)&v87[20] = 0;
      BYTE8(v87[21]) = 0;
      *(_QWORD *)&v87[21] = 0;
      *(_QWORD *)&v87[22] = &off_1E6176898;
      WORD4(v87[23]) = 0;
      *((_QWORD *)&v87[22] + 1) = 0;
      *(_QWORD *)&v87[23] = 0;
      memset(&v87[24], 0, 50);
      *((_QWORD *)&v87[27] + 1) = 0;
      memset(&v87[28], 0, 17);
      *(_QWORD *)((char *)&v87[29] + 4) = 0;
      *(_QWORD *)((char *)&v87[29] + 12) = 0;
      *(_QWORD *)((char *)&v87[30] + 1) = 0;
      *(_QWORD *)&v87[31] = &off_1E6176898;
      LODWORD(v87[38]) = 0;
      BYTE4(v87[38]) = 0;
      *((_QWORD *)&v87[38] + 1) = 0;
      BYTE8(v87[37]) = 0;
      *(_OWORD *)((char *)&v87[35] + 8) = 0u;
      *(_OWORD *)((char *)&v87[36] + 8) = 0u;
      *(_OWORD *)((char *)&v87[33] + 8) = 0u;
      *(_OWORD *)((char *)&v87[34] + 8) = 0u;
      *(_OWORD *)((char *)&v87[31] + 8) = 0u;
      *(_OWORD *)((char *)&v87[32] + 8) = 0u;
      *(_QWORD *)&v87[39] = &off_1E6176898;
      *((_QWORD *)&v87[39] + 1) = 0;
      *(_QWORD *)&v87[40] = 0;
      *((_QWORD *)&v87[40] + 1) = &off_1E6176898;
      DWORD2(v87[42]) = 0;
      BYTE12(v87[42]) = 0;
      *(_QWORD *)&v87[43] = 0;
      memset(&v87[41], 0, 18);
      *((_QWORD *)&v87[43] + 1) = &off_1E6176898;
      v87[44] = 0uLL;
      *(_QWORD *)&v87[45] = &off_1E6176898;
      LODWORD(v87[47]) = 0;
      BYTE4(v87[47]) = 0;
      *((_QWORD *)&v87[47] + 1) = 0;
      *((_QWORD *)&v87[45] + 1) = 0;
      *(_QWORD *)&v87[46] = 0;
      DWORD2(v87[46]) = 0;
      *(_QWORD *)&v87[48] = &off_1E6176898;
      *((_QWORD *)&v87[48] + 1) = 0;
      *(_QWORD *)&v87[49] = 0;
      *((_QWORD *)&v87[49] + 1) = &off_1E6176898;
      memset(&v87[50], 0, 18);
      LOBYTE(v87[52]) = 0;
      *((_QWORD *)&v87[51] + 1) = 0;
      *((_QWORD *)&v87[52] + 1) = &off_1E6176898;
      memset(&v87[53], 0, 18);
      WORD4(v87[57]) = 0;
      *(_OWORD *)((char *)&v87[55] + 8) = 0u;
      *(_OWORD *)((char *)&v87[56] + 8) = 0u;
      *(_OWORD *)((char *)&v87[54] + 8) = 0u;
      memset(&v87[58], 0, 25);
      bzero((char *)&v87[59] + 12, 0x54AuLL);
      TCFFFontSetInfo::GetFontDictInfo(a2 + 8, (const char *)3, v37 + 208, v53, (uint64_t)v86);
      v83 = 0xAAAAAAAAAAAAAAAALL;
      if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *))(*a1 + 592))(a1, v53, &v83) & 1) == 0)
      {
        v63 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v63 = &off_1E6176998;
        v63[2] = 2;
      }
      *(_WORD *)(v83 + 56) = -1;
      a1[93] = v86;
      TCFFParsingContext::CommenceParse((TCFFParsingContext *)a1, (int *)&v55[v52 + 8], v54);
      if (*((_WORD *)a1 + 352))
      {
        v56 = &v55[v52];
        *((_WORD *)v56 + 2) = *((_WORD *)a1 + 352);
        *((_WORD *)a1 + 352) = 0;
        *((_WORD *)v56 + 1) = *((_WORD *)a1 + 353);
        if (a1[83])
        {
          v57 = *v79;
          a1[82] = 0;
          a1[83] = 0;
          *v79 = 0;
          if (v57)
          {
            *(_QWORD *)&v55[v52 + 16] = v57;
            *(_DWORD *)&v55[v52 + 8] = 0;
          }
        }
      }
      TCFFParsingContext::InitFontDesc((uint64_t)a1);
      TCFFParsingContext::FixFontDesc(v58, v83);
      if (!*(_DWORD *)(v83 + 88) && !*(_DWORD *)(v83 + 96) && !*(_DWORD *)(v83 + 92) && !*(_DWORD *)(v83 + 100))
        *(_OWORD *)(v83 + 88) = *(_OWORD *)(a1[86] + 88);
      if (((*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 600))(a1, v53) & 1) == 0)
      {
        v62 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v62 = &off_1E6176998;
        v62[2] = 4;
      }
      ++v53;
      v52 += 488;
      ++v54;
      v51 = (const void **)a1;
    }
    while (v80 != v53);
  }
  v59 = v51;
  CopyFontDesc((uint64_t)v51[86], (uint64_t)v51[127] + 36);
  return TCFFCIDParsingContext::SwipeResultsToFont(v59, (TOpenTypeCIDFont *)v59[113]);
}

void sub_1B09FD054(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B09FD064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a36 + 600))(a36, v36);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1B09FD09C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B09FD0A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void *CopyFontDesc(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_WORD *)a1)
    *(_WORD *)a1 = *(_WORD *)a2;
  if (!*(_WORD *)(a1 + 2))
    *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  if (!*(_DWORD *)(a1 + 4))
  {
    v2 = *(_OWORD *)(a2 + 4);
    *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v2;
  }
  if (!*(_DWORD *)(a1 + 28))
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  if (!*(_DWORD *)(a1 + 32))
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  if (!*(_DWORD *)(a1 + 36))
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  if (!*(_DWORD *)(a1 + 40))
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  if (!*(_DWORD *)(a1 + 44))
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  if (!*(_DWORD *)(a1 + 48))
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  if (!*(_DWORD *)(a1 + 52))
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  if (*(__int16 *)(a1 + 56) <= 0)
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  if (!*(_WORD *)(a1 + 58))
    *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 58);
  if (!*(_WORD *)(a1 + 60))
    *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  if (!*(_WORD *)(a1 + 62))
    *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 62);
  if (!*(_WORD *)(a1 + 64))
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  if (!*(_WORD *)(a1 + 66))
    *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  if (!*(_WORD *)(a1 + 68))
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  if (!*(_WORD *)(a1 + 70))
    *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 70);
  if (!*(_WORD *)(a1 + 72))
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  if (!*(_WORD *)(a1 + 74))
    *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  if (!*(_WORD *)(a1 + 76))
    *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  if (!*(_WORD *)(a1 + 78))
    *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
  if (!*(_WORD *)(a1 + 80))
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  if (!*(_WORD *)(a1 + 82))
    *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  if (!*(_WORD *)(a1 + 84))
    *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  return memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x168uLL);
}

uint64_t TCFF2ParsingContext::IsCFF2(TCFF2ParsingContext *this)
{
  return 1;
}

BOOL CFFDictGet<int,16u>(const unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4)
{
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  int *v6;
  unint64_t v7;
  const unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v16;
  _DWORD *exception;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  if (a1 == (const unsigned __int8 *)-1 || (v4 = a1, v5 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_37:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  v6 = a3;
  v7 = (unint64_t)a3 + a4;
  while (1)
  {
    v8 = v4 + 1;
    v9 = *v4;
    switch(v9)
    {
      case 0x1Eu:
        memset(v24, 170, 18);
        v4 = BCDtoASCII(v8, v5, (char (*)[18])v24);
        v12 = llround(atof_l((const char *)v24, 0) * 65536.0);
        goto LABEL_34;
      case 0x1Du:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
        {
          v20 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v20 = &off_1E6176998;
          v20[2] = 4;
        }
        v10 = v4[3];
        v11 = v4[4];
        v4 += 5;
        goto LABEL_13;
      case 0x1Cu:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFDLL || v4 + 3 > v5)
        {
          v19 = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)v19 = &off_1E6176998;
          v19[2] = 4;
        }
        v10 = v4[1];
        v11 = v4[2];
        v4 += 3;
LABEL_13:
        v12 = (v10 << 24) | (v11 << 16);
        goto LABEL_34;
    }
    if (v9 < 0x20)
      return v9 != 23;
    if (v9 == 255)
    {
      if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
      {
        v21 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v21 = &off_1E6176998;
        v21[2] = 4;
      }
      v13 = *(_DWORD *)(v4 + 1);
      v4 += 5;
      v12 = bswap32(v13);
    }
    else
    {
      if (v9 > 0xF6)
      {
        v16 = v4 != (const unsigned __int8 *)-2 && v4 + 2 <= v5;
        if (v9 > 0xFA)
        {
          if (!v16)
          {
            v22 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v22 = &off_1E6176998;
            v22[2] = 4;
          }
          v8 = v4 + 2;
          v14 = 64148 - (v4[1] | (v9 << 8));
        }
        else
        {
          if (!v16)
          {
            v23 = __cxa_allocate_exception(0x10uLL);
            *(_QWORD *)v23 = &off_1E6176998;
            v23[2] = 4;
          }
          v8 = v4 + 2;
          v14 = (v4[1] | (v9 << 8)) - 63124;
        }
      }
      else
      {
        v14 = v9 - 139;
      }
      v12 = v14 << 16;
      v4 = v8;
    }
LABEL_34:
    if ((unint64_t)v6 >= v7)
      return 0;
    *v6++ = v12;
    if (v4 == (const unsigned __int8 *)-1 || v4 + 1 > v5)
      goto LABEL_37;
  }
}

double ItemVariationStore::ValueFromBlendRequest(ItemVariationStore *this, unsigned int a2, const double *a3, uint64_t a4, double *a5)
{
  double result;
  unsigned int v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v14;
  unint64_t v15;
  double v16;

  result = 0.0;
  if (*((_QWORD *)this + 4) > (unint64_t)a2)
  {
    v6 = *(_DWORD *)(*((_QWORD *)this + 5) + 4 * a2);
    if (v6)
    {
      v7 = *((_QWORD *)this + 1);
      v8 = (unsigned __int16 *)(*(_QWORD *)this + bswap32(v6));
      v9 = v8 + 3;
      if ((unint64_t)(v8 + 3) <= v7)
      {
        if (a4)
        {
          v10 = bswap32(v8[2]) >> 16;
          v11 = bswap32(v8[1]);
          v12 = (unint64_t)&v8[v10 + 3]
              + (((HIWORD(v11) & 0x7FFF) + v10) << (v11 < 0)) * (unint64_t)(bswap32(*v8) >> 16);
          if (v12 >= (unint64_t)v8 && v12 <= v7)
          {
            while (1)
            {
              v14 = *v9++;
              v15 = bswap32(v14) >> 16;
              if (*((_QWORD *)this + 2) <= v15)
                break;
              v16 = *a5++;
              result = result + a3[v15] * v16;
              if (!--a4)
                return result;
            }
            return 0.0;
          }
        }
      }
    }
  }
  return result;
}

void TType1SFNTFont::~TType1SFNTFont(TType1SFNTFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

void TType1SFNTFont::TType1SFNTFont(TType1SFNTFont *this, const TType1Font *a2)
{
  __int128 v3;
  const TFontObjectSurrogate *FontObject;
  uint64_t v5;
  unsigned int v6;
  __int128 v7;
  const TFontObjectSurrogate *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  __int16 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;

  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a2;
  *(_QWORD *)this = &off_1E61CAA88;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15 = v3;
  v16 = v3;
  v14 = v3;
  FontObject = (const TFontObjectSurrogate *)TType1PSFont::GetFontObject(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v14, FontObject, 1415139377, 0x10000, 0, 0x18u);
  v5 = *((_QWORD *)&v16 + 1);
  *((_DWORD *)this + 3) = bswap32(*(_DWORD *)(*((_QWORD *)&v16 + 1) + 20));
  v6 = *(unsigned __int16 *)(v5 + 4);
  if (bswap32(*(_DWORD *)(v5 + 8)) > bswap32(*(_DWORD *)(v5 + 12)) + bswap32(*(_DWORD *)(v5 + 16)))
    *((_WORD *)this + 4) |= 0x80u;
  *((_QWORD *)&v14 + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)&v14 + 8));
  v17 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15 = v7;
  v16 = v7;
  v14 = v7;
  v8 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1SFNTFont *))(*(_QWORD *)this + 216))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v14, v8, 1112297028);
  *((_WORD *)this + 4) |= 1u;
  *((_QWORD *)&v14 + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)&v14 + 8));
  v9 = (*(uint64_t (**)(TType1SFNTFont *))(*(_QWORD *)this + 216))(this);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 56))(v9, 1129205844);
  v11 = bswap32(v6) >> 16;
  v12 = *((_WORD *)this + 4);
  if (v10)
    v12 |= 2u;
  if ((v11 & 0xA) != 0)
    v12 |= 0x40u;
  if ((v11 & 4) != 0)
    v12 |= 0xC0u;
  if ((v11 & 0xE) != 0)
    v13 = 1;
  else
    v13 = v10;
  if ((v13 & 1) != 0)
    *((_WORD *)this + 4) = v12;
  *((_WORD *)this + 8) = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 128) + 56);
  if ((v12 & 0x80) != 0)
    *((_WORD *)this + 4) = v12 | 0x40;
}

void sub_1B09FD8E0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = off_1E61CC0A8;
  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t TType1SFNTFont::GetFontDataHeaderSize(TType1SFNTFont *this)
{
  return 24;
}

void *AllocateMemory(size_t a1, char a2)
{
  void *result;
  _WORD *exception;

  if ((a2 & 1) != 0)
    result = malloc_type_calloc(a1, 1uLL, 0xE6A616E6uLL);
  else
    result = malloc_type_malloc(a1, 0x1E8E5A64uLL);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 20;
  }
  return result;
}

uint64_t SelectStreamType(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 153) == 1 && !*(_BYTE *)(v4 + 152))
  {
    if ((v3 & 4) != 0)
    {
      v5 = 4;
      goto LABEL_18;
    }
    return 10;
  }
  if ((v3 & 0x80) != 0)
  {
    v5 = 128;
    goto LABEL_18;
  }
  if ((v3 & 0x40) != 0)
  {
    v5 = 64;
    goto LABEL_18;
  }
  if ((v3 & 8) != 0)
  {
    v5 = 8;
    goto LABEL_18;
  }
  if ((v3 & 1) != 0)
  {
    v5 = 1;
    goto LABEL_18;
  }
  if ((v3 & 0x20) != 0)
  {
    v5 = 32;
    goto LABEL_18;
  }
  if ((v3 & 2) == 0)
    return 10;
  v5 = 2;
LABEL_18:
  result = 0;
  *a3 = v5 | v3 & 0xFFFFF000;
  return result;
}

uint64_t GetGlyphNameFromGlyphID(uint64_t a1, memoryContext *a2, uint64_t a3, unsigned __int16 *a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t v7;
  unsigned int FontTable;
  __int128 v12;
  const void *v13;
  const char *v14;
  int v15;
  uint64_t v16;
  char __len[9];
  char v19[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 8);
  if (*a4 >= *(unsigned __int16 *)(v7 + 40))
  {
    *a6 = 0;
    return 22;
  }
  else
  {
    *(_QWORD *)&__len[1] = 0xAAAAAAAAAAAAAAAALL;
    FontTable = ScalerGetFontTable(a2, 1886352244, 0, &__len[1], 1, 0);
    v35 = -1431655766;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v33 = v12;
    v34 = v12;
    v31 = v12;
    v32 = v12;
    v29 = v12;
    v30 = v12;
    v27 = v12;
    v28 = v12;
    v25 = v12;
    v26 = v12;
    v23 = v12;
    v24 = v12;
    v21 = v12;
    v22 = v12;
    *(_OWORD *)v19 = v12;
    v20 = v12;
    __len[0] = -86;
    v13 = *(const void **)&__len[1];
    v14 = ZGetGlyphName(*(uint64_t *)&__len[1], FontTable, *(unsigned __int16 *)(v7 + 40), *a4, __len, v19, 0x104uLL);
    v15 = __len[0];
    if (*a5 > __len[0])
    {
      memmove(a6, v14, __len[0]);
      v16 = 0;
      a6[v15] = 0;
      *a5 = v15 + 1;
      if (!v13)
        return v16;
      goto LABEL_7;
    }
    v16 = 19;
    if (v13)
LABEL_7:
      ScalerReleaseFontTable(a2, v13);
  }
  return v16;
}

uint64_t GetGlyphIDFromGlyphName(uint64_t a1, memoryContext *a2, char *a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int FontTable;
  __int16 v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  void *v19;

  v7 = *a4;
  v8 = *(_QWORD *)(a1 + 8);
  v19 = (void *)0xAAAAAAAAAAAAAAAALL;
  FontTable = ScalerGetFontTable(a2, 1886352244, 0, &v19, 1, 0);
  v10 = 0;
  v11 = v19;
  if (v7 >= 2)
  {
    v12 = FontTable;
    v13 = 0;
    v10 = 0;
    v14 = v7 >> 1;
    do
    {
      if (*a3)
      {
        if (ZGetGlyphID((uint64_t)v11, v12, a3, *(unsigned __int16 *)(v8 + 40), (unsigned __int16 *)(a5 + 2 * v13)))
        {
          v15 = 1;
        }
        else
        {
          v10 = 22;
          v15 = (_DWORD)v14 == 1;
        }
        if (!v15)
        {
          *(_WORD *)(a5 + 2 * v13) = -1;
          v10 = 22;
        }
      }
      else
      {
        *(_WORD *)(a5 + 2 * v13) = 0;
      }
      while (*a3++)
        ;
      ++v13;
    }
    while (v13 != v14);
  }
  if (v11)
    ScalerReleaseFontTable(a2, v11);
  return v10;
}

void StreamT1Font(uint64_t a1, uint64_t a2, int a3)
{
  memoryContext *v5;
  unsigned int FontProtectionInfo;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int *v55;
  unsigned int v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t inited;
  char *v63;
  uint64_t v64;
  char v65;
  int v66;
  BOOL v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  __int128 v74;
  int v75;
  int v76;
  int v77;
  unsigned __int16 v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  int v87;
  int v88;
  char *v89;
  unsigned int v90;
  unsigned int *v91;
  char *v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  char *v96;
  char *v97;
  int v98;
  char *v99;
  unsigned int v100;
  unsigned __int16 v101;
  char *v102;
  unsigned int v103;
  char *v104;
  int v105;
  int v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  int v111;
  char *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  __int16 v117;
  int v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  char *v137;
  char *v138;
  char *v139;
  int v140;
  char *v141;
  char *v142;
  _WORD *exception;
  memoryContext *v144;
  memoryContext *v145;
  unsigned __int16 v147;
  int v148;
  char v149;
  void *v150;
  unsigned int FontTable;
  unsigned int *v152;
  void *v153;
  void *v154;
  unsigned __int8 v155;
  int v156[2];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  memoryContext **v180;
  void *v181[2];
  __int128 v182;
  _OWORD v183[3];
  unint64_t v184;
  char v185[16];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  char v193[16];
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v5 = *(memoryContext **)a1;
  v153 = 0;
  v154 = 0;
  FontProtectionInfo = TFontSurrogate::GetFontProtectionInfo((TFontSurrogate *)(*(_QWORD *)v5 + 16), 0);
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 56))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v7 = FontProtectionInfo;
  v145 = v5;
  ScalerGetFontTable(v5, 1751474532, 0, &v153, 0, 54);
  FontTable = ScalerGetFontTable(v5, 1886352244, 0, &v154, 1, 0);
  v14 = HIWORD(v7) & 0x30E;
  if (a3)
  {
    if ((_DWORD)v14)
      ZWriteStringF(a2, 203, v8, v9, v10, v11, v12, v13, HIWORD(v7) & 0x30E);
    v15 = 6;
  }
  else
  {
    v16 = strlen(*(const char **)(*(_QWORD *)(a2 + 8) + 56));
    ZWriteStringF(a2, 0, v17, v18, v19, v20, v21, v22, v16);
    if ((_DWORD)v14)
      ZWriteStringF(a2, 203, v23, v24, v25, v26, v27, v28, v14);
    ZWriteStringF(a2, 2, v23, v24, v25, v26, v27, v28, v16);
    v156[0] = -1431655766;
    v29 = (char *)ZGetString(3, v156);
    StreamBytesThroughBuffer(a2, v156[0], v29);
    v156[0] = -1431655766;
    v30 = (char *)ZGetString(6, v156);
    StreamBytesThroughBuffer(a2, v156[0], v30);
    v156[0] = -1431655766;
    v31 = (char *)ZGetString(7, v156);
    StreamBytesThroughBuffer(a2, v156[0], v31);
    DumpFontEncoding(v145, a2, (uint64_t)v154, FontTable);
    v15 = 8;
  }
  v156[0] = -1431655766;
  v32 = (char *)ZGetString(v15, v156);
  StreamBytesThroughBuffer(a2, v156[0], v32);
  v33 = v153;
  ZWriteStringF(a2, 11, v34, v35, v36, v37, v38, v39, COERCE__INT64(1.0 / (double)(bswap32(*((unsigned __int16 *)v153 + 9)) >> 16)));
  ZWriteStringF(a2, 12, v40, v41, v42, v43, v44, v45, (__int16)(bswap32(*((unsigned __int16 *)v33 + 18)) >> 16));
  v52 = bswap32(v33[2]);
  v53 = *(_QWORD *)(a2 + 8);
  v54 = *(_DWORD *)(v53 + 28);
  if (v54 >= 1)
  {
    v55 = *(int **)(v53 + 32);
    v56 = v54 + 1;
    do
    {
      v57 = *v55;
      v58 = v55[1];
      v55 += 2;
      v52 += v57 + v58;
      --v56;
    }
    while (v56 > 1);
  }
  ZWriteStringF(a2, 13, v46, v47, v48, v49, v50, v51, (v52 & 0x7FFFF) + 4000000);
  v156[0] = -1431655766;
  v59 = (char *)ZGetString(46, v156);
  StreamBytesThroughBuffer(a2, v156[0], v59);
  v156[0] = -1431655766;
  v60 = (char *)ZGetString(26, v156);
  StreamBytesThroughBuffer(a2, v156[0], v60);
  v150 = v154;
  v144 = *(memoryContext **)a1;
  v184 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v183[1] = v61;
  v183[2] = v61;
  v182 = v61;
  v183[0] = v61;
  *(_OWORD *)v181 = v61;
  v179 = 0xAAAAAAAAAAAAAAAALL;
  v173 = v61;
  v174 = v61;
  v175 = 0xAAAAAAAAAAAAAAAALL;
  v172 = v61;
  v171 = v61;
  v170 = v61;
  v169 = v61;
  v168 = v61;
  v167 = v61;
  v166 = v61;
  v165 = v61;
  v164 = v61;
  v163 = v61;
  v161 = v61;
  v162 = v61;
  v159 = v61;
  v160 = v61;
  v157 = v61;
  v158 = v61;
  *(_QWORD *)v156 = a2;
  inited = InitVariationInfo(a1, (uint64_t)v183, *(_DWORD *)(*(_QWORD *)(a2 + 8) + 28), *(uint64_t **)(*(_QWORD *)(a2 + 8) + 32));
  InitGlyphInfo(a1, (uint64_t)&v157, inited);
  ENewBuffer((uint64_t)v181, (memoryContext **)a2);
  *(_DWORD *)v185 = -1431655766;
  v63 = (char *)ZGetString(29, (int *)v185);
  EWriteBytesAny((uint64_t)v181, *(int *)v185, v63);
  v64 = *(_QWORD *)(a1 + 8);
  if (WORD4(v170))
    v65 = 2;
  else
    v65 = 1;
  v66 = *(int *)(v64 + 100) >> v65;
  v67 = __OFSUB__(v66, 1);
  v68 = v66 - 1;
  if (v68 < 0 != v67)
    goto LABEL_80;
  v69 = *(unsigned __int16 *)(v64 + 40);
  if (v68 >= v69)
    v70 = v69;
  else
    v70 = v68;
  v71 = *(unsigned int **)(*(_QWORD *)(a2 + 8) + 48);
  v72 = v70 + 31;
  v73 = ((v70 + 31) >> 3) & 0x3FFC;
  *(_QWORD *)&v74 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v74 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v191 = v74;
  v192 = v74;
  v189 = v74;
  v190 = v74;
  v187 = v74;
  v188 = v74;
  *(_OWORD *)v185 = v74;
  v186 = v74;
  if (v71)
  {
    *v71 |= 0x80000000;
    v152 = (unsigned int *)ScalerNewScratch(v144, v73, 1);
    FindComponentsFromGlyfTable(v144, v70, v71, v152, (unsigned int *)v170, (void *)SWORD4(v170), 1);
    v75 = (v70 - 1) | 0x1F;
    if (v75 >= (int)v70)
    {
      v76 = v75 + 1;
      v77 = v70;
      do
      {
        v71[v77 >> 5] &= ~(0x80000000 >> v77);
        ++v77;
      }
      while (v76 != v77);
    }
    v78 = 0;
    if ((unsigned __int16)(v72 >> 5))
    {
      v79 = v72 >> 5;
      v80 = v152;
      do
      {
        v81 = *v80;
        if (*v80)
        {
          v82 = 32;
          do
          {
            v78 += v81 & 1;
            if (v81 < 2)
              break;
            v81 >>= 1;
            --v82;
          }
          while ((_WORD)v82);
        }
        ++v80;
        v83 = (__int16)v79--;
      }
      while (v83 > 1);
    }
    v147 = ZMergeAndCountLongBits(v71, v152, (__int16)((int)v72 >> 5));
LABEL_39:
    v148 = v78;
    if (v78)
    {
      v89 = (char *)ScalerNewScratch(v144, 2 * v78, 0);
      v90 = 0;
      v91 = v152;
      v92 = v89;
      do
      {
        v93 = *v91;
        if (*v91)
        {
          v94 = 0;
          v95 = 0x80000000;
          do
          {
            if ((v95 & v93) != 0)
            {
              *(_WORD *)v92 = v90 + v94;
              v92 += 2;
            }
            v95 >>= 1;
            ++v94;
          }
          while (v94 != 32);
        }
        v90 += 32;
        ++v91;
      }
      while (v90 < v70);
      v149 = 0;
    }
    else
    {
      v89 = 0;
      v148 = 0;
      v149 = 1;
    }
    goto LABEL_50;
  }
  v152 = (unsigned int *)ScalerNewScratch(v144, v73, 1);
  if ((unsigned __int16)(v72 >> 5))
  {
    v78 = 0;
    v84 = v72 >> 5;
    v85 = v152;
    do
    {
      v86 = *v85;
      if (*v85)
      {
        v87 = 32;
        do
        {
          v78 += v86 & 1;
          if (v86 < 2)
            break;
          v86 >>= 1;
          --v87;
        }
        while ((_WORD)v87);
      }
      ++v85;
      v88 = (__int16)v84--;
    }
    while (v88 > 1);
    v147 = v70;
    goto LABEL_39;
  }
  v89 = 0;
  v148 = 0;
  v149 = 1;
  v147 = v70;
LABEL_50:
  v96 = (char *)ScalerNewScratch(*(memoryContext **)a2, 0x400u, 0);
  v176 = v96;
  v177 = v96;
  v178 = 0x40000000000;
  v180 = (memoryContext **)a2;
  LODWORD(v179) = 0;
  *(_DWORD *)v193 = -1431655766;
  v97 = (char *)ZGetString(30, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v97);
  memset(v193, 170, sizeof(v193));
  v98 = snprintf_l(v193, 0x10uLL, 0, "%d", v148 + 4);
  EWriteBytesAny((uint64_t)v181, v98, v193);
  *(_DWORD *)v193 = -1431655766;
  v99 = (char *)ZGetString(31, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v99);
  if ((v149 & 1) == 0)
  {
    v100 = v148 + 1;
    v101 = 4;
    v102 = v89;
    do
    {
      v103 = *(unsigned __int16 *)v102;
      v102 += 2;
      WriteCSGlyphData(&v176, (uint64_t)v156, v103, v148, (uint64_t)v89, 1, 0);
      EWriteCSByte(&v176, 11);
      *(_DWORD *)v193 = -1431655766;
      v104 = (char *)ZGetString(32, (int *)v193);
      EWriteBytesAny((uint64_t)v181, *(int *)v193, v104);
      memset(v193, 170, sizeof(v193));
      v105 = snprintf_l(v193, 0x10uLL, 0, "%d", v101);
      EWriteBytesAny((uint64_t)v181, v105, v193);
      EWriteByte((uint64_t)v181, 32);
      memset(v193, 170, sizeof(v193));
      v106 = snprintf_l(v193, 0x10uLL, 0, "%d", v178 + 4);
      EWriteBytesAny((uint64_t)v181, v106, v193);
      *(_DWORD *)v193 = -1431655766;
      v107 = (char *)ZGetString(33, (int *)v193);
      EWriteBytesAny((uint64_t)v181, *(int *)v193, v107);
      EWriteCSString((uint64_t)v181, (uint64_t)&v176);
      *(_DWORD *)v193 = -1431655766;
      v108 = (char *)ZGetString(34, (int *)v193);
      EWriteBytesAny((uint64_t)v181, *(int *)v193, v108);
      LODWORD(v178) = 0;
      v96 = v177;
      v176 = v177;
      ++v101;
      --v100;
    }
    while (v100 > 1);
  }
  *(_DWORD *)v193 = -1431655766;
  v109 = (char *)ZGetString(35, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v109);
  *(_DWORD *)v193 = -1431655766;
  v110 = (char *)ZGetString(36, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v110);
  memset(v193, 170, sizeof(v193));
  v111 = snprintf_l(v193, 0x10uLL, 0, "%d", v147);
  EWriteBytesAny((uint64_t)v181, v111, v193);
  *(_DWORD *)v193 = -1431655766;
  v112 = (char *)ZGetString(37, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v112);
  if (v71)
  {
    v113 = 0;
    do
    {
      v114 = v113 + 32;
      if (*v71)
      {
        v115 = 0x80000000;
        do
        {
          if ((*v71 & v115) != 0 && v113 < v70)
          {
            v155 = -86;
            GetGlyphForStreaming(v113, (unsigned int *)&v157, 1, 0);
            v117 = WORD6(v171);
            v118 = SWORD6(v158);
            v119 = (char *)ZGetGlyphName((uint64_t)v150, FontTable, (unsigned __int16)v70, (unsigned __int16)v113, (char *)&v155, v185, 0x80uLL);
            EWriteGlyphName((uint64_t)v181, v119, v155);
            EWriteCSNumber(&v176, 2, v120, v121, v122, v123, v124, v125, v117);
            EWriteCSByte(&v176, 13);
            if (((v152[v113 >> 5] << v113) & 0x80000000) != 0)
            {
              if (v117)
              {
                EWriteCSNumber(&v176, 2, v126, v127, v128, v129, v130, v131, 0);
                EWriteCSByte2(&v176, 33);
              }
              if ((v149 & 1) == 0)
              {
                v132 = 0;
                v133 = v148 - 1;
                do
                {
                  v134 = (v133 + v132) >> 1;
                  v135 = *(unsigned __int16 *)&v89[2 * v134];
                  if (v135 >= (unsigned __int16)v113)
                  {
                    if (v135 <= (unsigned __int16)v113)
                      goto LABEL_72;
                    v133 = v134 - 1;
                  }
                  else
                  {
                    v132 = v134 + 1;
                  }
                }
                while (v132 <= v133);
              }
              LOWORD(v134) = -1;
LABEL_72:
              EWriteCSNumber(&v176, 1, v126, v127, v128, v129, v130, v131, (unsigned __int16)(v134 + 4));
              EWriteCSByte(&v176, 10);
            }
            else
            {
              WriteCSGlyphData(&v176, (uint64_t)v156, (unsigned __int16)v113, v148, (uint64_t)v89, 0, v117 - v118);
            }
            EWriteCSByte(&v176, 14);
            memset(v193, 170, sizeof(v193));
            v136 = snprintf_l(v193, 0x10uLL, 0, "%d", v178 + 4);
            EWriteBytesAny((uint64_t)v181, v136, v193);
            *(_DWORD *)v193 = -1431655766;
            v137 = (char *)ZGetString(33, (int *)v193);
            EWriteBytesAny((uint64_t)v181, *(int *)v193, v137);
            EWriteCSString((uint64_t)v181, (uint64_t)&v176);
            *(_DWORD *)v193 = -1431655766;
            v138 = (char *)ZGetString(35, (int *)v193);
            EWriteBytesAny((uint64_t)v181, *(int *)v193, v138);
            LODWORD(v178) = 0;
            v96 = v177;
            v176 = v177;
          }
          v115 >>= 1;
          ++v113;
        }
        while (v113 != v114);
      }
      ++v71;
      v113 = v114;
    }
    while (v114 < v70);
  }
  *(_DWORD *)v193 = -1431655766;
  v139 = (char *)ZGetString(39, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v139);
  ScalerDisposeBlock(*v180, v96, -1);
  if (v89)
    ScalerDisposeBlock(v144, v89, -1);
  ScalerDisposeBlock(v144, (char *)v152, -1);
LABEL_80:
  EDumpBuffer((uint64_t)v181);
  ScalerDisposeBlock(**((memoryContext ***)&v182 + 1), (char *)v181[1], -1);
  UninitGlyphInfo((memoryContext **)a1, (uint64_t)&v157);
  v140 = 8;
  do
  {
    v156[0] = -1431655766;
    v141 = (char *)ZGetString(27, v156);
    StreamBytesThroughBuffer(a2, v156[0], v141);
    --v140;
  }
  while ((_WORD)v140);
  v156[0] = -1431655766;
  v142 = (char *)ZGetString(28, v156);
  StreamBytesThroughBuffer(a2, v156[0], v142);
  if (v154)
    ScalerReleaseFontTable(v145, v154);
  ScalerReleaseFontTable(v145, v153);
}

void WriteCSGlyphData(_QWORD *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  size_t *v23;
  size_t *v24;
  size_t *v25;
  int v26;
  size_t *v27;
  size_t *v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  char *v34;
  int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  int v39;
  unsigned __int16 v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  __int16 *v44;
  unsigned __int16 *v45;
  char *v46;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  unsigned __int16 v57;
  unsigned __int16 v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  char v64;
  int v65;
  int v66;
  char v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  char v74;
  unsigned __int16 *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  char *v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  _WORD *exception;
  unsigned __int16 *v94;
  char *v95;
  char *v96;
  int v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  int v103;
  unsigned __int16 *v104;
  int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned __int16 v109;

  v106 = (unsigned int *)(a2 + 8);
  GetGlyphForStreaming(a3, (unsigned int *)(a2 + 8), 1, 0);
  if (*(unsigned __int16 *)(a2 + 16) < 0xBu)
    return;
  if (*(__int16 *)(a2 + 32) < 1)
  {
    v20 = *(_QWORD *)(a2 + 72);
    if (!v20)
      return;
    v21 = (unsigned __int16 *)(v20 + 10);
    v103 = a7;
    v97 = *(unsigned __int8 *)(a2 + 267);
    if (*(_BYTE *)(a2 + 267))
    {
      v22 = *(unsigned __int16 *)(a2 + 264);
      v23 = ScalerNewScratch(**(memoryContext ***)(a2 + 256), 6 * (int)v22, 0);
      v24 = (size_t *)((char *)v23 + 6 * v22);
      v25 = ScalerNewScratch(**(memoryContext ***)(a2 + 256), 8 * (int)v22, 0);
      v26 = 0;
      v27 = &v25[v22];
      v99 = (char *)v25;
      v28 = v25 + 1;
      v29 = (char *)v23;
      do
      {
        if (v28 > v27)
          goto LABEL_115;
        v30 = bswap32(*v21) >> 16;
        *((_WORD *)v28 - 4) = __rev16(v30 | 1);
        *((_WORD *)v28 - 3) = v21[1];
        if ((v30 & 1) != 0)
        {
          v32 = v21[2];
          v31 = bswap32(v32) >> 16;
          *((_WORD *)v28 - 2) = v32;
          LOWORD(v32) = v21[3];
          v21 += 4;
        }
        else
        {
          v31 = *((char *)v21 + 4);
          *((_WORD *)v28 - 2) = bswap32(v31) >> 16;
          v32 = bswap32(*((char *)v21 + 5)) >> 16;
          v21 += 3;
        }
        *((_WORD *)v28 - 1) = v32;
        if ((v30 & 2) == 0)
        {
          if (v23 >= v24)
            goto LABEL_115;
          *(_WORD *)v23 = bswap32(v31) >> 16;
          v23 = (size_t *)((char *)v23 + 6);
          ++v26;
        }
        ++v28;
      }
      while ((v30 & 0x20) != 0);
      GetGlyphForStreaming(a3, v106, 1, 1);
      if (v26 >= 1)
      {
        v33 = v26;
        v34 = v29;
        while (1)
        {
          v35 = (int)bswap32(*(unsigned __int16 *)v34) >> 16;
          if (v35 < 0 || *(_DWORD *)(a2 + 200) <= (int)(unsigned __int16)v35)
            break;
          v36 = *(_QWORD *)(a2 + 168);
          *((_WORD *)v34 + 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(a2 + 160) + 2 * (unsigned __int16)v35)) >> 16;
          *((_WORD *)v34 + 2) = bswap32(*(unsigned __int16 *)(v36 + 2 * (unsigned __int16)v35)) >> 16;
          v34 += 6;
          if (!--v33)
            goto LABEL_21;
        }
LABEL_115:
        exception = __cxa_allocate_exception(2uLL);
        *exception = 5;
        __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
      }
LABEL_21:
      v21 = (unsigned __int16 *)v99;
    }
    else
    {
      v26 = 0;
      v29 = 0;
      v99 = 0;
    }
    v96 = v29;
    v102 = v29 + 4;
    while (1)
    {
      v75 = v21;
      v76 = bswap32(*v21) >> 16;
      if ((v76 & 1) != 0)
      {
        v77 = bswap32(v21[2]) >> 16;
        v21 += 4;
        v78 = bswap32(v75[3]) >> 16;
      }
      else
      {
        LOWORD(v77) = *((char *)v21 + 4);
        LOWORD(v78) = *((char *)v21 + 5);
        v21 += 3;
      }
      v79 = bswap32(v75[1]) >> 16;
      if ((v76 & 2) == 0)
      {
        if (v26 < 1)
        {
LABEL_98:
          LOWORD(v82) = 0;
        }
        else
        {
          v80 = v102;
          v81 = v26;
          while (bswap32(*((unsigned __int16 *)v80 - 2)) >> 16 != (unsigned __int16)v77)
          {
            v80 += 6;
            if (!--v81)
              goto LABEL_98;
          }
          v82 = bswap32(*((unsigned __int16 *)v80 - 1)) >> 16;
        }
        GetGlyphForStreaming((__int16)v79, v106, 1, 1);
        if ((v78 & 0x8000) != 0 || *(_DWORD *)(a2 + 200) <= (__int16)v78)
          goto LABEL_115;
        LOWORD(v77) = v82 - *(_WORD *)(*(_QWORD *)(a2 + 160) + 2 * (unsigned __int16)v78);
        a7 = v103;
      }
      EWriteCSNumber(a1, 2, v13, v14, v15, v16, v17, v18, (a7 + (__int16)v77));
      EWriteCSByte2(a1, 33);
      if (a4)
      {
        v89 = 0;
        v90 = a4 - 1;
        do
        {
          v91 = (v90 + v89) >> 1;
          v92 = *(unsigned __int16 *)(a5 + 2 * v91);
          if (v92 >= v79)
          {
            if (v92 <= v79)
              goto LABEL_111;
            v90 = v91 - 1;
          }
          else
          {
            v89 = v91 + 1;
          }
        }
        while (v89 <= v90);
      }
      LOWORD(v91) = -1;
LABEL_111:
      EWriteCSNumber(a1, 1, v83, v84, v85, v86, v87, v88, (unsigned __int16)v91 + 4);
      EWriteCSByte(a1, 10);
      if ((v76 & 0x20) == 0)
      {
        if (v97)
        {
          ScalerDisposeBlock(**(memoryContext ***)(a2 + 256), v96, -1);
          ScalerDisposeBlock(**(memoryContext ***)(a2 + 256), v99, -1);
        }
        return;
      }
    }
  }
  if (a6)
    v19 = 0;
  else
    v19 = *(unsigned __int16 *)(a2 + 36);
  v38 = *(unsigned __int16 **)(a2 + 112);
  v37 = *(unsigned __int16 **)(a2 + 120);
  if (*(unsigned __int16 *)(a2 + 32) > v37 - v38)
    return;
  if (!*(_WORD *)(a2 + 34))
    return;
  v98 = *(_QWORD *)(a2 + 168);
  v100 = *(char **)(a2 + 160);
  v101 = (v98 - (uint64_t)v100) >> 1;
  if (v101 < *(unsigned __int16 *)(a2 + 34))
    return;
  v39 = 0;
  v40 = 0;
  v95 = *(char **)(a2 + 128);
  do
  {
    v42 = *v37++;
    v41 = v42;
    if (v101 <= v42)
      return;
    v105 = v39;
    v43 = *(_QWORD *)(a2 + 208);
    v44 = (__int16 *)&v100[2 * v41];
    v45 = (unsigned __int16 *)(v98 + 2 * v41);
    v46 = &v95[v41];
    if ((unint64_t)v44 >= v43 || (unint64_t)v45 >= v43 || (unint64_t)v46 >= v43)
      goto LABEL_115;
    v50 = *v38++;
    v49 = v50;
    if (!(_DWORD)v41)
    {
      v54 = v19;
      goto LABEL_48;
    }
    v104 = v37;
    v51 = v41 - v49;
    if ((unsigned __int16)(v41 - v49) > 0x7FFEu)
      goto LABEL_47;
    if ((*v46 & 1) != 0)
    {
      v55 = (unsigned __int16)*v44--;
      v54 = v55;
      LOWORD(v55) = *v45--;
      v109 = v55;
      --v46;
    }
    else
    {
      v52 = 1 - (unsigned __int16)++v51;
      v53 = (__int16)v45[v52];
      if ((v46[v52] & 1) != 0)
      {
        v54 = (unsigned __int16)v44[v52];
      }
      else
      {
        v54 = (*v44 + v44[v52]) >> 1;
        v53 = ((__int16)*v45 + v53) >> 1;
      }
      v109 = v53;
    }
    if ((unsigned __int16)v51 < 2u)
    {
LABEL_47:
      v54 = v19;
      v37 = v104;
      goto LABEL_48;
    }
    v94 = v38;
    if (v109 == v40)
    {
      EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v54 - (__int16)v19));
      v56 = 22;
    }
    else if ((unsigned __int16)v54 == (unsigned __int16)v19)
    {
      EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v109 - (__int16)v40));
      v56 = 4;
    }
    else
    {
      EWriteCSNumber(a1, 2, v13, v14, v15, v16, v17, v18, ((__int16)v54 - (__int16)v19));
      v56 = 21;
    }
    EWriteCSByte(a1, v56);
    v57 = v54;
    v58 = v109;
    v107 = v54;
    while (1)
    {
      v59 = v51 - 1;
      if ((*v46 & 1) == 0)
        break;
      v62 = *v45;
      v63 = *v44;
      if (v62 == v58)
      {
        EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, (v63 - (__int16)v57));
        v64 = 6;
      }
      else if (v57 == (unsigned __int16)v63)
      {
        EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v62 - (__int16)v58));
        v64 = 7;
      }
      else
      {
        EWriteCSNumber(a1, 2, v13, v14, v15, v16, v17, v18, (v63 - (__int16)v57));
        v64 = 5;
      }
      EWriteCSByte(a1, v64);
      v60 = (unsigned __int16)*v44;
      LOWORD(v61) = *v45;
LABEL_82:
      --v44;
      --v45;
      --v46;
      v51 = v59;
      v57 = v60;
      v58 = v61;
      if ((__int16)v59 <= 0)
        goto LABEL_85;
    }
    v60 = v54;
    LOWORD(v61) = v109;
    if ((_WORD)v51 != 1)
    {
      if ((*(v46 - 1) & 1) != 0)
      {
        v60 = (unsigned __int16)*(v44 - 1);
        LOWORD(v61) = *(v45 - 1);
      }
      else
      {
        v60 = (*(v44 - 1) + *v44) >> 1;
        v61 = ((__int16)*(v45 - 1) + (__int16)*v45) >> 1;
      }
    }
    v65 = (unsigned __int16)*v44;
    v66 = (__int16)*v45;
    if (v65 == v57 && v65 == (unsigned __int16)v60)
    {
      EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v61 - (__int16)v58));
      v67 = 7;
    }
    else if (*v45 == v58 && (unsigned __int16)v61 == (unsigned __int16)v66)
    {
      EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v60 - (__int16)v57));
      v67 = 6;
    }
    else
    {
      v68 = (__int16)v65;
      v69 = (__int16)v65 - (__int16)v57;
      v70 = (2 * v69);
      v71 = (((2 * v69) | 1) / 3);
      v72 = v66 - (__int16)v58;
      v73 = (__int16)v60 - v68;
      if ((v70 + 3) > 4 || (2 * ((__int16)v61 - v66) + 3) > 4)
      {
        if ((2 * v72 + 3) > 4 || (2 * v73 + 3) > 4)
        {
          EWriteCSNumber(a1, 6, v70, 1431655766, v15, v16, v17, v18, v71);
          v67 = 8;
        }
        else
        {
          EWriteCSNumber(a1, 4, v70, 1431655766, v15, v16, v17, v18, v71);
          v67 = 31;
        }
      }
      else
      {
        EWriteCSNumber(a1, 4, v70, 1431655766, v15, v16, v17, v18, (((2 * v72) | 1) / 3));
        v67 = 30;
      }
    }
    EWriteCSByte(a1, v67);
    if ((_WORD)v51 != 1)
    {
      v74 = *(v46 - 1);
      if ((v74 & 1) != 0)
      {
        --v46;
        v59 = v51 - 2;
        --v45;
        --v44;
      }
      v54 = v107;
      goto LABEL_82;
    }
    v54 = v107;
LABEL_85:
    v38 = v94;
    v37 = v104;
    v40 = v109;
    if ((unsigned __int16)v60 != (unsigned __int16)v54 || (unsigned __int16)v61 != v109)
    {
      EWriteCSByte(a1, 9);
      v40 = v61;
      v54 = v60;
    }
LABEL_48:
    v39 = v105 + 0x10000;
    v19 = v54;
  }
  while (*(__int16 *)(a2 + 32) > (v105 + 0x10000) >> 16);
}

_QWORD *TGlyphOutlineCache::CreateGlyphOutlineCache(TGlyphOutlineCache *this)
{
  _QWORD *v1;

  if (this < 0x101)
  {
    v1 = (_QWORD *)operator new();
    *v1 = &off_1E61CABF8;
    v1[1] = 0;
    bzero(v1 + 2, 0x800uLL);
  }
  else if (this < 0x10000)
  {
    v1 = (_QWORD *)operator new();
    *((_DWORD *)v1 + 2) = 0;
    *v1 = &off_1E61CACC8;
    v1[2] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::kHashIndexKeyCallBacks, MEMORY[0x1E0C9B3A0]);
    v1[3] = 0;
    v1[4] = 0;
    v1[5] = 0;
    v1[22] = v1 + 6;
  }
  else
  {
    v1 = (_QWORD *)operator new();
    *((_DWORD *)v1 + 2) = 0;
    *v1 = &off_1E61CAC48;
    v1[2] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::kHashIndexKeyCallBacks, MEMORY[0x1E0C9B3A0]);
    v1[3] = 0;
    v1[4] = 0;
    v1[5] = 0;
    v1[38] = v1 + 6;
  }
  return v1;
}

void sub_1B09FF33C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10F1C40CC82DE90);
  _Unwind_Resume(a1);
}

void TKeyLookUpCache<256u>::~TKeyLookUpCache(_QWORD *a1)
{
  TKeyLookUpCache<256u>::~TKeyLookUpCache(a1);
  JUMPOUT(0x1B5E0CD38);
}

void TKeyLookUpCache<256u>::Purge(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  const void *v5;

  v2 = a1 + 2;
  os_unfair_lock_lock(a1 + 2);
  v3 = 0;
  v4 = a1 + 4;
  do
  {
    v5 = *(const void **)&v4[v3]._os_unfair_lock_opaque;
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)&v4[v3]._os_unfair_lock_opaque = 0;
    }
    v3 += 2;
  }
  while (v3 != 512);
  os_unfair_lock_unlock(v2);
}

void sub_1B09FF3F4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

CFTypeRef TKeyLookUpCache<256u>::Copy(os_unfair_lock_s *a1, int a2)
{
  os_unfair_lock_s *v4;
  const void *v5;
  CFTypeRef v6;

  v4 = a1 + 2;
  os_unfair_lock_lock(a1 + 2);
  v5 = *(const void **)&a1[2 * a2 + 4]._os_unfair_lock_opaque;
  if (v5)
    v6 = CFRetain(v5);
  else
    v6 = 0;
  os_unfair_lock_unlock(v4);
  return v6;
}

void sub_1B09FF464(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void TKeyLookUpCache<256u>::AddPair(os_unfair_lock_s *a1, int a2, const void *a3)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  const void *v8;
  os_unfair_lock_s *v9;
  const void *v10;
  CFTypeRef v11;

  v6 = a1 + 2;
  os_unfair_lock_lock(a1 + 2);
  v7 = &a1[2 * a2];
  v10 = *(const void **)&v7[4]._os_unfair_lock_opaque;
  v9 = v7 + 4;
  v8 = v10;
  if (v10 != a3)
  {
    if (a3)
      v11 = CFRetain(a3);
    else
      v11 = 0;
    *(_QWORD *)&v9->_os_unfair_lock_opaque = v11;
    if (v8)
      CFRelease(v8);
  }
  os_unfair_lock_unlock(v6);
}

void sub_1B09FF4E8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *TKeyLookUpCache<256u>::~TKeyLookUpCache(_QWORD *a1)
{
  uint64_t i;
  const void *v3;

  *a1 = &off_1E61CABF8;
  for (i = 2; i != 258; ++i)
  {
    v3 = (const void *)a1[i];
    if (v3)
    {
      CFRelease(v3);
      a1[i] = 0;
    }
  }
  return a1;
}

_QWORD *TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::~TGlyphOutlineDictionaryCache(_QWORD *a1)
{
  const void **v2;

  *a1 = &off_1E61CAC48;
  v2 = (const void **)(a1 + 2);
  std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)(a1 + 3));
  TCFDictionary::~TCFDictionary(v2);
  return a1;
}

void TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::~TGlyphOutlineDictionaryCache(_QWORD *a1)
{
  const void **v1;

  *a1 = &off_1E61CAC48;
  v1 = (const void **)(a1 + 2);
  std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)(a1 + 3));
  TCFDictionary::~TCFDictionary(v1);
  JUMPOUT(0x1B5E0CD38);
}

void TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::Purge(uint64_t a1)
{
  os_unfair_lock_s *v2;
  __CFDictionary *v3;

  v2 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v3 = *(__CFDictionary **)(a1 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  CFDictionaryRemoveAllValues(v3);
  os_unfair_lock_unlock(v2);
}

void sub_1B09FF614(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

const void *TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::Copy(uint64_t a1, unsigned __int32 a2)
{
  os_unfair_lock_s *v4;
  const __CFDictionary *v5;
  const void *Value;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  _BYTE *v10;
  __int32 v11;
  int64_t v12;

  v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v5 = *(const __CFDictionary **)(a1 + 16);
  if (v5)
  {
    Value = CFDictionaryGetValue(v5, (const void *)a2);
    if (Value)
    {
      v7 = *(__int32 **)(a1 + 32);
      v8 = wmemchr(*(__int32 **)(a1 + 24), a2, ((uint64_t)v7 - *(_QWORD *)(a1 + 24)) >> 2);
      if (v8)
        v9 = v8;
      else
        v9 = v7;
      v10 = v9 + 1;
      if (v9 + 1 != v7)
      {
        v11 = *v9;
        v12 = (char *)v7 - v10;
        memmove(v9, v10, (char *)v7 - v10);
        *(__int32 *)((char *)v9 + v12) = v11;
      }
      Value = CFRetain(Value);
    }
  }
  else
  {
    Value = 0;
  }
  os_unfair_lock_unlock(v4);
  return Value;
}

void sub_1B09FF6DC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::AddPair(uint64_t a1, unsigned int a2, const void *a3)
{
  os_unfair_lock_s *v6;
  unint64_t v7;
  const __CFDictionary *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  char *v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unsigned int *v35;
  char *v36;
  int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;

  v6 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v7 = a2;
  v8 = *(const __CFDictionary **)(a1 + 16);
  if (v8 && CFDictionaryContainsKey(v8, (const void *)a2))
  {
LABEL_38:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)v7, a3);
    os_unfair_lock_unlock(v6);
    return;
  }
  v10 = *(unsigned int **)(a1 + 24);
  v9 = *(unsigned int **)(a1 + 32);
  v11 = v9 - v10;
  v12 = v11 + 1;
  v13 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v10) >> 2;
  v14 = 64;
  if (v13 > 0x40)
    v14 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v10) >> 2;
  if (v12 < v14)
  {
LABEL_20:
    v26 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v9 >= v26)
    {
      v28 = *(unsigned int **)(a1 + 24);
      v29 = v9 - v28;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v31 = v26 - (_QWORD)v28;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      v43 = a1 + 48;
      if (v32)
      {
        v33 = TInlineBufferAllocator<unsigned int,64ul>::allocate(a1 + 48, v32);
        v28 = *(unsigned int **)(a1 + 24);
        v9 = *(unsigned int **)(a1 + 32);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[4 * v29];
      *(_DWORD *)v34 = a2;
      if (v9 == v28)
      {
        v36 = &v33[4 * v29];
      }
      else
      {
        v35 = v9;
        v36 = &v33[4 * v29];
        do
        {
          v37 = *--v35;
          *((_DWORD *)v36 - 1) = v37;
          v36 -= 4;
        }
        while (v35 != v28);
      }
      v27 = v34 + 4;
      *(_QWORD *)(a1 + 24) = v36;
      *(_QWORD *)(a1 + 32) = v34 + 4;
      v38 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = &v33[4 * v32];
      v41 = v9;
      v42 = v38;
      v39 = v28;
      v40 = v28;
      std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,64ul> &>::~__split_buffer((uint64_t)&v39);
    }
    else
    {
      *v9 = a2;
      v27 = v9 + 1;
    }
    *(_QWORD *)(a1 + 32) = v27;
    goto LABEL_38;
  }
  if (v12 <= 0x200)
  {
    if ((unint64_t)(v11 + 65) >= 0x200)
      v15 = 512;
    else
      v15 = v11 + 65;
    if (v13 < v15)
    {
      v43 = a1 + 48;
      v16 = TInlineBufferAllocator<unsigned int,64ul>::allocate(a1 + 48, v15);
      v18 = *(unsigned int **)(a1 + 24);
      v17 = *(unsigned int **)(a1 + 32);
      v19 = &v16[4 * v11];
      if (v17 != v18)
      {
        v20 = *(unsigned int **)(a1 + 32);
        v19 = &v16[4 * v11];
        do
        {
          v21 = *--v20;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        while (v20 != v18);
      }
      *(_QWORD *)(a1 + 24) = v19;
      *(_QWORD *)(a1 + 32) = &v16[4 * v11];
      v22 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = &v16[4 * v15];
      v41 = v17;
      v42 = v22;
      v39 = v18;
      v40 = v18;
      std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,64ul> &>::~__split_buffer((uint64_t)&v39);
      v9 = *(unsigned int **)(a1 + 32);
    }
    goto LABEL_20;
  }
  if (v10 != v9)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)*v10);
    v24 = *(_QWORD *)(a1 + 24);
    v23 = *(_QWORD *)(a1 + 32);
    if (v23 != v24)
    {
      v25 = v23 - (v24 + 4);
      if (v23 != v24 + 4)
        memmove(*(void **)(a1 + 24), (const void *)(v24 + 4), v23 - (v24 + 4));
      v9 = (unsigned int *)(v24 + v25);
      *(_QWORD *)(a1 + 32) = v24 + v25;
      goto LABEL_20;
    }
  }
  __break(1u);
}

void sub_1B09FF938(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN28TGlyphOutlineDictionaryCacheIjLm64ELm512EE22kHashIndexKeyCallBacksMUlPKvE_8__invokeES2_(uint64_t a1)
{
  return 2654435761 * a1;
}

char *TInlineBufferAllocator<unsigned int,64ul>::allocate(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *result;
  char *v4;

  v2 = (char *)(a1 + 256);
  result = *(char **)(a1 + 256);
  v4 = &result[4 * a2];
  if (v4 <= v2)
  {
    *(_QWORD *)v2 = v4;
  }
  else
  {
    if (a2 >> 62)
      std::__throw_bad_array_new_length[abi:fe180100]();
    return (char *)operator new(4 * a2);
  }
  return result;
}

uint64_t std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,64ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 256);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

_QWORD *TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::~TGlyphOutlineDictionaryCache(_QWORD *a1)
{
  const void **v2;

  *a1 = &off_1E61CACC8;
  v2 = (const void **)(a1 + 2);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,64ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)(a1 + 3));
  TCFDictionary::~TCFDictionary(v2);
  return a1;
}

void TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::~TGlyphOutlineDictionaryCache(_QWORD *a1)
{
  const void **v1;

  *a1 = &off_1E61CACC8;
  v1 = (const void **)(a1 + 2);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,64ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)(a1 + 3));
  TCFDictionary::~TCFDictionary(v1);
  JUMPOUT(0x1B5E0CD38);
}

void TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::Purge(uint64_t a1)
{
  os_unfair_lock_s *v2;
  __CFDictionary *v3;

  v2 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v3 = *(__CFDictionary **)(a1 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  CFDictionaryRemoveAllValues(v3);
  os_unfair_lock_unlock(v2);
}

void sub_1B09FFAE0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

const void *TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::Copy(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *v4;
  const __CFDictionary *v5;
  const void *Value;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  _BYTE *v10;
  unsigned __int16 v11;
  int64_t v12;

  v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v5 = *(const __CFDictionary **)(a1 + 16);
  if (v5)
  {
    Value = CFDictionaryGetValue(v5, (const void *)a2);
    if (Value)
    {
      v7 = *(unsigned __int16 **)(a1 + 32);
      v8 = v7;
      if (!HIWORD(a2))
      {
        v8 = *(unsigned __int16 **)(a1 + 24);
        if (v8 == v7)
        {
LABEL_8:
          v8 = *(unsigned __int16 **)(a1 + 32);
        }
        else
        {
          v9 = *(unsigned __int16 **)(a1 + 24);
          while (*v9 != (unsigned __int16)a2)
          {
            ++v9;
            ++v8;
            if (v9 == v7)
              goto LABEL_8;
          }
        }
      }
      v10 = v8 + 1;
      if (v8 + 1 != v7)
      {
        v11 = *v8;
        v12 = (char *)v7 - v10;
        memmove(v8, v10, (char *)v7 - v10);
        *(unsigned __int16 *)((char *)v8 + v12) = v11;
      }
      Value = CFRetain(Value);
    }
  }
  else
  {
    Value = 0;
  }
  os_unfair_lock_unlock(v4);
  return Value;
}

void sub_1B09FFBD0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::AddPair(uint64_t a1, unsigned int a2, const void *a3)
{
  os_unfair_lock_s *v6;
  unint64_t v7;
  const __CFDictionary *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _WORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  v7 = a2;
  v8 = *(const __CFDictionary **)(a1 + 16);
  if (v8 && CFDictionaryContainsKey(v8, (const void *)a2))
  {
LABEL_39:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)v7, a3);
    os_unfair_lock_unlock(v6);
    return;
  }
  v10 = *(char **)(a1 + 24);
  v9 = *(char **)(a1 + 32);
  v11 = (v9 - v10) >> 1;
  v12 = v11 + 1;
  v13 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v10) >> 1;
  v14 = 64;
  if (v13 > 0x40)
    v14 = (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v10) >> 1;
  if (v12 < v14)
  {
LABEL_20:
    v26 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v9 >= v26)
    {
      v28 = *(char **)(a1 + 24);
      v29 = v9 - v28;
      if (v9 - v28 <= -3)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v30 = v29 >> 1;
      v31 = v26 - (_QWORD)v28;
      if (v31 <= (v29 >> 1) + 1)
        v32 = v30 + 1;
      else
        v32 = v31;
      if (v31 >= 0x7FFFFFFFFFFFFFFELL)
        v33 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      v44 = a1 + 48;
      if (v33)
      {
        v34 = (char *)TInlineBufferAllocator<unsigned short,64ul>::allocate(a1 + 48, v33);
        v28 = *(char **)(a1 + 24);
        v9 = *(char **)(a1 + 32);
      }
      else
      {
        v34 = 0;
      }
      v35 = &v34[2 * v30];
      *(_WORD *)v35 = a2;
      if (v9 == v28)
      {
        v37 = &v34[2 * v30];
      }
      else
      {
        v36 = v9;
        v37 = &v34[2 * v30];
        do
        {
          v38 = *((_WORD *)v36 - 1);
          v36 -= 2;
          *((_WORD *)v37 - 1) = v38;
          v37 -= 2;
        }
        while (v36 != v28);
      }
      v27 = v35 + 2;
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v35 + 2;
      v39 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = &v34[2 * v33];
      v42 = v9;
      v43 = v39;
      v40 = v28;
      v41 = v28;
      std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,64ul> &>::~__split_buffer((uint64_t)&v40);
    }
    else
    {
      *(_WORD *)v9 = a2;
      v27 = v9 + 2;
    }
    *(_QWORD *)(a1 + 32) = v27;
    goto LABEL_39;
  }
  if (v12 <= 0x200)
  {
    if ((unint64_t)(v11 + 65) >= 0x200)
      v15 = 512;
    else
      v15 = v11 + 65;
    if (v13 < v15)
    {
      v44 = a1 + 48;
      v16 = (char *)TInlineBufferAllocator<unsigned short,64ul>::allocate(a1 + 48, v15);
      v18 = *(char **)(a1 + 24);
      v17 = *(char **)(a1 + 32);
      v19 = &v16[2 * v11];
      if (v17 != v18)
      {
        v20 = *(char **)(a1 + 32);
        v19 = &v16[2 * v11];
        do
        {
          v21 = *((_WORD *)v20 - 1);
          v20 -= 2;
          *((_WORD *)v19 - 1) = v21;
          v19 -= 2;
        }
        while (v20 != v18);
      }
      *(_QWORD *)(a1 + 24) = v19;
      *(_QWORD *)(a1 + 32) = &v16[2 * v11];
      v22 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = &v16[2 * v15];
      v42 = v17;
      v43 = v22;
      v40 = v18;
      v41 = v18;
      std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,64ul> &>::~__split_buffer((uint64_t)&v40);
      v9 = *(char **)(a1 + 32);
    }
    goto LABEL_20;
  }
  if (v10 != v9)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)*(unsigned __int16 *)v10);
    v24 = *(_QWORD *)(a1 + 24);
    v23 = *(_QWORD *)(a1 + 32);
    if (v23 != v24)
    {
      v25 = v23 - (v24 + 2);
      if (v23 != v24 + 2)
        memmove(*(void **)(a1 + 24), (const void *)(v24 + 2), v23 - (v24 + 2));
      v9 = (char *)(v24 + v25);
      *(_QWORD *)(a1 + 32) = v24 + v25;
      goto LABEL_20;
    }
  }
  __break(1u);
}

void sub_1B09FFE28(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN28TGlyphOutlineDictionaryCacheItLm64ELm512EE22kHashIndexKeyCallBacksMUlPKvE_8__invokeES2_(uint64_t a1)
{
  return 2654435761 * a1;
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,64ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 152);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 152))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

void *TInlineBufferAllocator<unsigned short,64ul>::allocate(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 128);
  v2 = (unint64_t *)(a1 + 128);
  v3 = v4;
  v5 = v4 + 2 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 < 0)
      std::__throw_bad_array_new_length[abi:fe180100]();
    return operator new(2 * a2);
  }
}

uint64_t std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,64ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(v5 + 128);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(_QWORD *)(a1 + 24) == *v6)
        *v6 = v4;
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t woff2::ComputeULongSum(woff2 *this, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  const unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;

  result = 0;
  v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    v5 = 0;
    do
    {
      result = bswap32(*(_DWORD *)((char *)this + v5)) + result;
      v5 += 4;
    }
    while (v5 < v4);
  }
  v6 = (const unsigned __int8 *)(a2 - v4);
  if (a2 != v4)
  {
    v7 = 0;
    if (a2 > v4)
    {
      v8 = (8 * a2) & 0xFFFFFFE0;
      v9 = (unsigned __int8 *)this + v4;
      do
      {
        v10 = *v9++;
        v7 |= v10 << (~(_BYTE)v8 & 0x18);
        v8 += 8;
        --v6;
      }
      while (v6);
    }
    return (v7 + result);
  }
  return result;
}

uint64_t sc_ScanChar2(int *a1, int *a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _WORD *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _WORD *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int *v46;
  uint64_t v47;
  int *v48;
  int v49;
  int *v50;
  int *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int *v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  __int16 *v71;
  unint64_t v72;
  int v73;
  int v74;
  __int16 *v75;
  BOOL v76;
  int v77;
  int v78;
  int v79;
  __int16 *v81;
  unint64_t v82;
  uint64_t v83;
  __int16 *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _WORD *v88;
  int *v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  _WORD *v94;
  _WORD *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  int v99;
  int v100;
  int v101;
  __int16 *v102;
  int v103;
  int *v104;
  __int16 *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  unsigned int v118;
  char v119;
  int v120;
  int v121;
  unsigned int v122;
  char v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  int *v136;
  int *v137;
  int *v138;
  int *v139;
  int v140;
  __int16 v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  __int16 *v145;
  char v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  __int16 *v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  unsigned int v159;
  BOOL v160;
  unsigned int *v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  __int16 *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  char v172;
  int v173;
  uint64_t v174;
  __int16 *v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  _DWORD *v183;
  _DWORD *v184;
  __int16 v185;
  unsigned int *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  unint64_t v193;
  __int16 *v195;
  char *v196;
  unsigned int v198;
  unsigned int *v199;
  unsigned int *v200;
  uint64_t v201;
  __int16 v202[4];
  int v203;
  __int16 v204[4];
  uint64_t v205;
  uint64_t v206;
  int v207;
  __int16 **v208;
  int v209;
  int v210;
  __int16 **v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int v222;
  int *v223;
  uint64_t v224;
  __int16 *v225;
  __int16 *v226;
  __int16 v227[4];
  int v228;
  int v229;
  uint64_t v230;
  unint64_t v231;
  int v232;
  __int16 **v234;
  __int16 **v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  int v241;
  _WORD *v242;
  int v243;
  int *v244;
  int v245;
  int v246;
  _BOOL4 v247;
  int *v248;
  int v249;
  int v251[7];

  v6 = a5;
  v7 = a4;
  v8 = a3;
  v9 = a1;
  v11 = *((_QWORD *)a1 + 1);
  v10 = *((_QWORD *)a1 + 2);
  v12 = *((_QWORD *)a1 + 5);
  memset(v251, 170, 20);
  if (a6)
  {
    v13 = *(_QWORD *)(a3 + 24);
    v14 = *(__int16 *)(a3 + 44);
    v15 = *(__int16 *)(a3 + 40);
    v16 = v14 - v15 - 1;
    if (v14 == v15)
      v16 = 0;
    if ((v16 & 0x80000000) == 0)
    {
      v17 = *(_WORD **)(a3 + 8);
      v18 = ~v14 + v15 + (v14 != v15);
      v19 = (unsigned __int16)(*(_WORD *)(a3 + 48) + 1);
      v20 = *(_QWORD **)(a3 + 24);
      do
      {
        *v20++ = v17;
        *v17 = 0;
        v17[v19] = 0;
        v17 = (_WORD *)((char *)v17 + v19 * 2 + 2);
        v160 = __CFADD__(v18++, 1);
      }
      while (!v160);
    }
    *(_QWORD *)(a3 + 24) = v13 - 8 * v15;
    v21 = *(_QWORD *)(a3 + 32);
    v22 = *(__int16 *)(a3 + 46);
    v23 = *(__int16 *)(a3 + 42);
    v24 = v22 - v23 - 1;
    if (v22 == v23)
      v24 = 0;
    if ((v24 & 0x80000000) == 0)
    {
      v25 = *(_WORD **)(a3 + 16);
      v26 = ~v22 + v23 + (v22 != v23);
      v27 = (unsigned __int16)(*(_WORD *)(a3 + 50) + 1);
      v28 = *(_QWORD **)(a3 + 32);
      do
      {
        *v28++ = v25;
        *v25 = 0;
        v25[v27] = 0;
        v25 = (_WORD *)((char *)v25 + v27 * 2 + 2);
        v160 = __CFADD__(v26++, 1);
      }
      while (!v160);
    }
    v29 = v21 - 8 * v23;
  }
  else
  {
    v30 = *(_QWORD *)(a3 + 32);
    v31 = a5 - a4 - 1;
    if (a5 == a4)
      v31 = 0;
    if ((v31 & 0x80000000) == 0)
    {
      v32 = *(_WORD **)(a3 + 16);
      v33 = ~a5 + a4 + (a5 != a4);
      v34 = (unsigned __int16)(*(_WORD *)(a3 + 50) + 1);
      v35 = *(_QWORD **)(a3 + 32);
      do
      {
        *v35++ = v32;
        *v32 = 0;
        v32[v34] = 0;
        v32 = (_WORD *)((char *)v32 + v34 * 2 + 2);
        v160 = __CFADD__(v33++, 1);
      }
      while (!v160);
    }
    v29 = v30 - ((uint64_t)((unint64_t)a4 << 48) >> 45);
  }
  *(_QWORD *)(a3 + 32) = v29;
  if (*a1)
  {
    v208 = (__int16 **)(v29 + 8 * a5 - 8);
    v211 = (__int16 **)(v29 + 8 * (int)a4);
    if (*a1 >= 1)
    {
      v36 = 0;
      v37 = a2 + 262;
      v200 = (unsigned int *)(a2 + 263);
      *(_QWORD *)v202 = a2 + 1;
      v223 = a2 + 264;
      *(_QWORD *)v227 = a2 + 2;
      v217 = (unsigned int *)(a2 + 266);
      v220 = (unsigned int *)(a2 + 4);
      v191 = (unsigned int *)(a2 + 262);
      v214 = v10;
      v230 = v12;
      while (1)
      {
        *(_QWORD *)&v251[1] = v37;
        *(_QWORD *)&v251[3] = a2;
        v38 = *(unsigned __int16 *)(*((_QWORD *)v9 + 3) + 2 * v36);
        v39 = *(unsigned __int16 *)(*((_QWORD *)v9 + 4) + 2 * v36);
        if ((_DWORD)v38 != (_DWORD)v39)
          break;
LABEL_72:
        if (++v36 >= *v9)
          goto LABEL_73;
      }
      v251[0] = 1;
      v205 = v36;
      if ((*(_BYTE *)(v12 + v38) & 1) != 0)
      {
        v40 = 0;
        v41 = *(_DWORD *)(v11 + 4 * v38);
        *a2 = v41;
        v44 = v38 + 1;
        v43 = *(_DWORD *)(v214 + 4 * v38);
        v49 = 1;
        v50 = (int *)v200;
        v51 = *(int **)v202;
        a2[262] = v43;
        v45 = v39;
        v46 = a2;
        v47 = v214;
      }
      else
      {
        if ((*(_BYTE *)(v12 + v39) & 1) == 0)
        {
          v40 = 0;
          v41 = (*(_DWORD *)(v11 + 4 * v38) + *(_DWORD *)(v11 + 4 * v39) + 1) >> 1;
          *a2 = v41;
          v42 = *(_DWORD *)(v214 + 4 * v38);
          *(_QWORD *)&v251[3] = *(_QWORD *)v202;
          v43 = (v42 + *(_DWORD *)(v214 + 4 * v39) + 1) >> 1;
          *(_QWORD *)&v251[1] = v200;
          a2[262] = v43;
          v44 = v38;
          v45 = v39;
          v46 = a2;
          v47 = v214;
          v48 = v37;
          goto LABEL_46;
        }
        v40 = 0;
        v41 = *(_DWORD *)(v11 + 4 * v39);
        v45 = v39 - 1;
        *a2 = v41;
        v43 = *(_DWORD *)(v214 + 4 * v39);
        v49 = 1;
        v50 = (int *)v200;
        v51 = *(int **)v202;
        a2[262] = v43;
        v44 = v38;
        v38 = v39;
        v46 = a2;
        v47 = v214;
      }
      v48 = v37;
LABEL_32:
      if ((*(_BYTE *)(v12 + v44) & 1) != 0)
      {
        v52 = v44;
        v237 = v38;
        v240 = v45;
        while (1)
        {
          if (v49 < 262)
          {
            ++v49;
          }
          else
          {
            v53 = (unint64_t)(v50 - 1);
            if (a6)
              sc_lineGen(a3, v46, v48, v53, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
            else
              sc_lineGenRows(a3, v46, v48, v53, *(_QWORD *)(a3 + 32), (unint64_t)v211, (unint64_t)v208);
            v45 = v240;
            v38 = v237;
            a2[2] = *(v51 - 2);
            a2[3] = *(v51 - 1);
            a2[264] = *(v50 - 2);
            v49 = 5;
            a2[265] = *(v50 - 1);
            v50 = (int *)v217;
            v51 = (int *)v220;
            v48 = v223;
            v46 = *(int **)v227;
          }
          v41 = *(_DWORD *)(v11 + 4 * v52);
          *v51++ = v41;
          v43 = *(_DWORD *)(v47 + 4 * v52);
          *v50++ = v43;
          if (v40)
            break;
          v40 = v44 == v45;
          if (v44 == v45)
            v44 = v38;
          else
            ++v44;
          v52 = v44;
          if ((*(_BYTE *)(v12 + v44) & 1) == 0)
            goto LABEL_45;
        }
        v251[0] = v49;
        *(_QWORD *)&v251[1] = v50;
        *(_QWORD *)&v251[3] = v51;
        v8 = a3;
LABEL_68:
        v7 = a4;
        v6 = a5;
        v9 = a1;
        v69 = (unint64_t)(v50 - 1);
        if (a6)
        {
          sc_lineGen(v8, v46, v48, v69, *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32));
          sc_mark(*a2, a2[262], a2[1], a2[263], *(_DWORD *)(*(_QWORD *)&v251[3] - 8), *(v50 - 2), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_DWORD *)(v8 + 48), HIWORD(*(_DWORD *)(v8 + 48)));
        }
        else
        {
          sc_lineGenRows(v8, v46, v48, v69, *(_QWORD *)(v8 + 32), (unint64_t)v211, (unint64_t)v208);
          sc_markRows(*a2, a2[262], a2[1], a2[263], *(_DWORD *)(*(_QWORD *)&v251[3] - 8), *(v50 - 2), *(_QWORD *)(v8 + 32), *(_WORD *)(v8 + 50), (unint64_t)v211, (unint64_t)v208);
        }
        v36 = v205;
        v37 = (int *)v191;
        goto LABEL_72;
      }
LABEL_45:
      v251[0] = v49;
      *(_QWORD *)&v251[1] = v50;
      *(_QWORD *)&v251[3] = v51;
LABEL_46:
      v54 = v44;
      v55 = v41;
      v56 = v43;
      v238 = v38;
      v241 = v45;
      while (1)
      {
        v244 = v48;
        v247 = v40;
        v57 = v54 == v45 ? v38 : v54 + 1;
        v58 = v46;
        if ((*(_BYTE *)(v12 + v57) & 1) != 0)
        {
          v41 = *(_DWORD *)(v11 + 4 * v57);
          v43 = *(_DWORD *)(v47 + 4 * v57);
          v60 = v54;
          v59 = *(_DWORD *)(v11 + 4 * v54);
          v61 = *(_DWORD *)(v47 + 4 * v54);
        }
        else
        {
          v59 = *(_DWORD *)(v11 + 4 * v54);
          v60 = v54;
          v41 = (v59 + *(_DWORD *)(v11 + 4 * v57) + 1) >> 1;
          v61 = *(_DWORD *)(v47 + 4 * v54);
          v43 = (v61 + *(_DWORD *)(v47 + 4 * v57) + 1) >> 1;
          v57 = v54;
        }
        if (sc_DrawParabola(v55, v56, v59, v61, v41, v43, (int **)&v251[3], (int **)&v251[1], v251, 0xFFFFFFFF))
        {
          v62 = v11;
          v63 = *(_QWORD *)&v251[1];
          v64 = *(_QWORD *)&v251[1] - 4;
          if (a6)
            sc_lineGen(a3, v58, v244, v64, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
          else
            sc_lineGenRows(a3, v58, v244, v64, *(_QWORD *)(a3 + 32), (unint64_t)v211, (unint64_t)v208);
          v66 = *(_QWORD *)&v251[3];
          a2[2] = *(_DWORD *)(*(_QWORD *)&v251[3] - 8);
          a2[3] = *(_DWORD *)(v66 - 4);
          a2[264] = *(_DWORD *)(v63 - 8);
          a2[265] = *(_DWORD *)(v63 - 4);
          *(_QWORD *)&v251[1] = v217;
          *(_QWORD *)&v251[3] = v220;
          v251[0] = 5;
          v11 = v62;
          v67 = *(_DWORD *)(v62 + 4 * v60);
          v47 = v214;
          v68 = sc_DrawParabola(v55, v56, v67, *(_DWORD *)(v214 + 4 * v60), v41, v43, (int **)&v251[3], (int **)&v251[1], v251, 0xFFFFFFFF);
          v48 = v223;
          v46 = *(int **)v227;
          v65 = v247;
          if (v68)
            return 15;
        }
        else
        {
          v48 = v244;
          v65 = v247;
          v46 = v58;
        }
        v45 = v241;
        if (v54 == v241 || v65)
          break;
        v40 = v57 == v241;
        v38 = v238;
        if (v57 == v241)
          v54 = v238;
        else
          v54 = v57 + 1;
        v12 = v230;
        v55 = v41;
        v56 = v43;
        if ((*(_BYTE *)(v230 + v54) & 1) != 0)
        {
          v49 = v251[0];
          v44 = v54;
          v50 = *(int **)&v251[1];
          v51 = *(int **)&v251[3];
          goto LABEL_32;
        }
      }
      v50 = *(int **)&v251[1];
      v12 = v230;
      v8 = a3;
      goto LABEL_68;
    }
LABEL_73:
    if (v208 >= v211)
    {
      v70 = *(unsigned __int16 *)(v8 + 50) + 1;
      v71 = *v211;
      v72 = (unint64_t)*v208;
      do
        v71 = sortTransitions(v71, v70);
      while ((unint64_t)v71 <= v72);
    }
    if (a6 && ((*(_WORD *)(v8 + 44) + ~*(_WORD *)(v8 + 40)) & 0x8000) == 0)
    {
      v73 = (__int16)(*(_WORD *)(v8 + 44) + ~*(_WORD *)(v8 + 40));
      v74 = *(unsigned __int16 *)(v8 + 48) + 1;
      v75 = *(__int16 **)(v8 + 8);
      do
      {
        v75 = sortTransitions(v75, v74);
        v76 = (unsigned __int16)v73-- == 0;
      }
      while (!v76);
    }
    if (v208 >= v211)
    {
      if (*(unsigned __int16 *)(v8 + 40) == *(unsigned __int16 *)(v8 + 44))
      {
        v81 = *v211;
        v82 = (unint64_t)*v208;
        if (*v211 <= *v208)
        {
          v83 = *(__int16 *)(v8 + 50);
          do
          {
            *v81 = 1;
            v84 = &v81[v83];
            *v84 = *(_WORD *)(v8 + 40) + 1;
            v81[1] = *(_WORD *)(v8 + 40);
            v84[1] = 1;
            v81 = (__int16 *)((char *)v81 + v83 * 2 + 4);
          }
          while ((unint64_t)v81 <= v82);
        }
      }
    }
    else
    {
      v77 = *(unsigned __int16 *)(v8 + 50) + 1;
      SET(*v211, v77, *(_WORD *)(v8 + 40));
      v78 = *(unsigned __int16 *)(v8 + 44);
      v79 = *(unsigned __int16 *)(v8 + 40);
      if (v78 == v79)
        LOWORD(v78) = v79 + 1;
      OFF((uint64_t)*v211, v77, v78);
      v6 = (__int16)(v7 + 1);
    }
    v85 = v6 - v7;
    v239 = *(unsigned __int16 *)(v8 + 50);
    if ((__int16)v85 >= 1)
    {
      v86 = (int)v7;
      v87 = v239 + 2;
      v88 = *(_WORD **)(*(_QWORD *)(v8 + 32) + 8 * v86 + 8 * (unsigned __int16)v85 - 8);
      v89 = *(int **)v8;
      v90 = (unint64_t)*(unsigned __int16 *)(v8 + 54) >> 5;
      v228 = *(__int16 *)(v8 + 40) + 32;
      v224 = v90;
      v91 = -2 - v239;
      v231 = v90;
      while (1)
      {
        v248 = v89;
        v92 = (unsigned __int16)*v88;
        v93 = *v88 != 0;
        v94 = &v88[v87];
        v97 = (__int16)*(v94 - 1);
        v95 = v94 - 1;
        v96 = v97;
        v98 = v97 != 0;
        if ((unsigned __int16)v92 | (unsigned __int16)v97)
          break;
        v100 = 0;
        v137 = v89;
        v136 = v89;
        v104 = v89;
LABEL_180:
        v89 = &v137[v90];
        *v104 = v100;
        v138 = v104 + 1;
        if (v138 < v89)
        {
          v139 = &v137[v224];
          if (&v137[v224] <= v136 + 2)
            v139 = v136 + 2;
          bzero(v138, (((char *)v139 - (char *)v136 - 5) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        }
        v140 = (__int16)v85--;
        v88 += v91;
        if (v140 <= 1)
          goto LABEL_185;
      }
      v245 = v85;
      v99 = 0;
      v100 = 0;
      v101 = (unsigned __int16)v96;
      v242 = v88;
      v102 = v88 + 1;
      v103 = v228;
      v104 = v89;
      v105 = &v95[-v96];
      while (v93)
      {
        v106 = *v102;
        if (v98)
        {
          v107 = *v105;
          if (v106 < v107)
          {
            --v92;
            ++v102;
            if (!v99)
            {
              if (v103 <= v106)
              {
                *v104++ = v100;
                v103 += 32;
                v100 = 0;
              }
              if (v103 <= v106)
              {
                v130 = v103 + 32;
                if (v103 + 32 <= v106 + 1)
                  v131 = v106 + 1;
                else
                  v131 = v103 + 32;
                v132 = v131 + ~v103;
                bzero(v104, ((v132 >> 3) & 0x1FFFFFFC) + 4);
                v104 = (int *)((char *)v104 + ((v132 >> 3) & 0x1FFFFFFC) + 4);
                v103 = (v132 & 0xFFFFFFE0) + v130;
              }
LABEL_168:
              v100 |= 0xFFFFFFFF >> (v106 - v103);
              v99 = 1;
              goto LABEL_169;
            }
            v160 = __CFADD__(v99++, 1);
            if (!v160)
              goto LABEL_169;
            if (v103 < v106)
            {
              *v104++ = v100;
              v103 += 32;
              v100 = -1;
            }
            if (v103 < v106)
            {
              v108 = v103 + 32;
              if (v103 + 32 <= v106)
                v109 = v106;
              else
                v109 = v103 + 32;
              v110 = v109 + ~v103;
              memset(v104, 255, ((v110 >> 3) & 0x1FFFFFFC) + 4);
              v104 = (int *)((char *)v104 + ((v110 >> 3) & 0x1FFFFFFC) + 4);
              v103 = (v110 & 0xFFFFFFE0) + v108;
            }
            goto LABEL_130;
          }
          if (v106 <= v107)
          {
            --v92;
            ++v102;
            --v101;
            ++v105;
            goto LABEL_169;
          }
          --v101;
          ++v105;
          v112 = v99 - 1;
          if (v99 == 1)
          {
            if (v103 < v107)
            {
              *v104++ = v100;
              v103 += 32;
              v100 = -1;
            }
            if (v103 < v107)
            {
              v133 = v103 + 32;
              if (v103 + 32 <= v107)
                v134 = v107;
              else
                v134 = v103 + 32;
              v135 = v134 + ~v103;
              memset(v104, 255, ((v135 >> 3) & 0x1FFFFFFC) + 4);
              v104 = (int *)((char *)v104 + ((v135 >> 3) & 0x1FFFFFFC) + 4);
              v103 = (v135 & 0xFFFFFFE0) + v133;
            }
            v99 = 0;
            v119 = v103 - v107;
            goto LABEL_131;
          }
          if (!v99)
          {
            if (v103 <= v107)
            {
              *v104++ = v100;
              v103 += 32;
              v100 = 0;
            }
            if (v103 <= v107)
            {
              v120 = v103 + 32;
              if (v103 + 32 <= v107 + 1)
                v121 = v107 + 1;
              else
                v121 = v103 + 32;
              v122 = v121 + ~v103;
              bzero(v104, ((v122 >> 3) & 0x1FFFFFFC) + 4);
              v104 = (int *)((char *)v104 + ((v122 >> 3) & 0x1FFFFFFC) + 4);
              v103 = (v122 & 0xFFFFFFE0) + v120;
            }
            v123 = v107 - v103;
LABEL_151:
            v99 = -1;
            v100 |= 0xFFFFFFFF >> v123;
            goto LABEL_169;
          }
LABEL_110:
          v99 = v112;
          goto LABEL_169;
        }
        --v92;
        ++v102;
        if (!v99)
        {
          if (v103 <= v106)
          {
            *v104++ = v100;
            v103 += 32;
            v100 = 0;
          }
          if (v103 <= v106)
          {
            v127 = v103 + 32;
            if (v103 + 32 <= v106 + 1)
              v128 = v106 + 1;
            else
              v128 = v103 + 32;
            v129 = v128 + ~v103;
            bzero(v104, ((v129 >> 3) & 0x1FFFFFFC) + 4);
            v104 = (int *)((char *)v104 + ((v129 >> 3) & 0x1FFFFFFC) + 4);
            v103 = (v129 & 0xFFFFFFE0) + v127;
          }
          v101 = 0;
          goto LABEL_168;
        }
        v160 = __CFADD__(v99++, 1);
        if (v160)
        {
          if (v103 < v106)
          {
            *v104++ = v100;
            v103 += 32;
            v100 = -1;
          }
          if (v103 < v106)
          {
            v113 = v103 + 32;
            if (v103 + 32 <= v106)
              v114 = v106;
            else
              v114 = v103 + 32;
            v115 = v114 + ~v103;
            memset(v104, 255, ((v115 >> 3) & 0x1FFFFFFC) + 4);
            v104 = (int *)((char *)v104 + ((v115 >> 3) & 0x1FFFFFFC) + 4);
            v103 = (v115 & 0xFFFFFFE0) + v113;
          }
          v101 = 0;
LABEL_130:
          v99 = 0;
          v119 = v103 - v106;
LABEL_131:
          v100 &= -1 << v119;
          goto LABEL_169;
        }
        v101 = 0;
LABEL_169:
        v93 = (unsigned __int16)v92 != 0;
        v98 = (unsigned __int16)v101 != 0;
        if (!((unsigned __int16)v92 | (unsigned __int16)v101))
        {
          v136 = v104;
          v8 = a3;
          v87 = v239 + 2;
          v85 = v245;
          v88 = v242;
          v90 = v231;
          v91 = -2 - v239;
          v137 = v248;
          goto LABEL_180;
        }
      }
      v111 = *v105++;
      v106 = v111;
      --v101;
      v112 = v99 - 1;
      if (v99 == 1)
      {
        if (v103 < v106)
        {
          *v104++ = v100;
          v103 += 32;
          v100 = -1;
        }
        if (v103 < v106)
        {
          v116 = v103 + 32;
          if (v103 + 32 <= v106)
            v117 = v106;
          else
            v117 = v103 + 32;
          v118 = v117 + ~v103;
          memset(v104, 255, ((v118 >> 3) & 0x1FFFFFFC) + 4);
          v104 = (int *)((char *)v104 + ((v118 >> 3) & 0x1FFFFFFC) + 4);
          v103 = (v118 & 0xFFFFFFE0) + v116;
        }
        v92 = 0;
        goto LABEL_130;
      }
      if (!v99)
      {
        if (v103 <= v106)
        {
          *v104++ = v100;
          v103 += 32;
          v100 = 0;
        }
        if (v103 <= v106)
        {
          v124 = v103 + 32;
          if (v103 + 32 <= v106 + 1)
            v125 = v106 + 1;
          else
            v125 = v103 + 32;
          v126 = v125 + ~v103;
          bzero(v104, ((v126 >> 3) & 0x1FFFFFFC) + 4);
          v104 = (int *)((char *)v104 + ((v126 >> 3) & 0x1FFFFFFC) + 4);
          v103 = (v126 & 0xFFFFFFE0) + v124;
        }
        v92 = 0;
        v123 = v106 - v103;
        goto LABEL_151;
      }
      v92 = 0;
      goto LABEL_110;
    }
LABEL_185:
    if (a6)
    {
      v185 = *(_WORD *)(v8 + 46);
      v243 = (__int16)(v185 - 1);
      v249 = *(__int16 *)(v8 + 40);
      v141 = *(_WORD *)(v8 + 44);
      v142 = (__int16)(v141 - 1);
      v234 = *(__int16 ***)(v8 + 32);
      v236 = *(__int16 ***)(v8 + 24);
      v143 = (unint64_t)*(unsigned __int16 *)(v8 + 54) >> 5;
      v144 = *(_QWORD *)v8 + 4 * (*(unsigned __int16 *)(v8 + 52) - 1) * (int)v143;
      v193 = v143;
      if ((_DWORD)v143 == 1)
        v144 = *(_QWORD *)v8 + 4 * *(unsigned __int16 *)(v8 + 52) - 4;
      v186 = (unsigned int *)v144;
      v246 = *(__int16 *)(v8 + 42);
      v187 = *(unsigned __int16 *)(v8 + 48);
      v229 = (__int16)v187;
      v232 = (__int16)(v141 - 1);
      if (v246 <= (__int16)(v185 - 1))
      {
        v145 = v234[*(__int16 *)(v8 + 42)];
        v146 = v141 - 1 - v249;
        v147 = (uint64_t)(v142 - v249) >> 5;
        if ((_DWORD)v143 == 1)
          v147 = 0;
        v201 = v147;
        if ((_DWORD)v143 != 1)
          v146 = (v141 - 1 - v249) & 0x1F;
        v198 = 0x80000000 >> v146;
        v189 = 2 * (__int16)(v239 + 2);
        v203 = v141;
        v218 = v186;
        v215 = *(__int16 *)(v8 + 42);
        while (1)
        {
          v148 = *v145;
          v195 = &v145[(unint64_t)v189 / 2];
          if (*v145)
            break;
LABEL_224:
          v218 -= v193;
          v145 = (__int16 *)((char *)v145 + v189);
          v76 = v215++ == v243;
          if (v76)
            goto LABEL_226;
        }
        v149 = *(v195 - 1);
        v150 = (unsigned __int16)*(v195 - 1);
        v151 = v195[-v149 - 1];
        v152 = v189 - 2 * v149;
        v153 = v145;
        v212 = v150;
        v209 = v151;
        v206 = v152;
        while (1)
        {
          v155 = v153[1];
          ++v153;
          v154 = v155;
          v156 = v151;
          if (v150)
          {
            v156 = v151;
            if (v151 < v154)
            {
              v157 = v152;
              v158 = v150;
              do
              {
                --v158;
                v156 = *(__int16 *)((char *)v145 + v157);
                if (!(_WORD)v158)
                  break;
                v157 += 2;
              }
              while (v156 < v154);
            }
          }
          if (v154 != v156)
            goto LABEL_213;
          if ((a6 & 0x10000) != 0)
          {
            v225 = v153;
            v221 = nUpperXings(v234, v236, (__int16)v215, v154, (__int16)v239, (__int16)v187, v249, v203, v243);
            v159 = nLowerXings(v234, v236, (__int16)v215, v154, (__int16)v239, (__int16)v187, v249, v203, v246);
            v153 = v225;
            v152 = v206;
            v151 = v209;
            v150 = v212;
            v142 = v232;
            v160 = v221 >= 2 && v159 >= 2;
            if (!v160)
              goto LABEL_213;
          }
          if (v154 <= v142)
          {
            if (v154 == v249)
            {
              v161 = v218;
              v162 = *v218 | 0x80000000;
            }
            else
            {
              v163 = v154 + ~v249;
              if ((_DWORD)v193 == 1)
              {
                if ((*v218 & (0x40000000u >> v163)) != 0)
                  goto LABEL_213;
                v162 = *v218 | (2 * (0x40000000u >> v163));
                v161 = v218;
              }
              else
              {
                v164 = 0x80000000 >> v163;
                v161 = &v218[v163 >> 5];
                v165 = *v161;
                if ((*v161 & (0x80000000 >> v163)) != 0)
                  goto LABEL_213;
                v166 = v163 & 0x1F;
                if (v166 == 31)
                {
                  if ((v161[1] & 0x80000000) != 0)
                    goto LABEL_213;
                }
                else if (((v165 << v166) & 0x40000000) != 0)
                {
                  goto LABEL_213;
                }
                v162 = v165 | v164;
              }
            }
            *v161 = v162;
          }
          else
          {
            v218[v201] |= v198;
          }
LABEL_213:
          if (!--v148)
            goto LABEL_224;
        }
      }
LABEL_226:
      if (v249 <= v142)
      {
        v167 = v236[v249];
        v188 = (uint64_t)((unint64_t)(v187 + 2) << 48) >> 47;
        v213 = v249;
        while (1)
        {
          v168 = *v167;
          v196 = (char *)v167 + v188;
          if (*v167)
            break;
LABEL_252:
          v167 = (__int16 *)((char *)v167 + v188);
          v76 = v213++ == v142;
          if (v76)
            return 0;
        }
        v169 = *((__int16 *)v196 - 1);
        v170 = (uint64_t)(v213 - v249) >> 5;
        if ((_DWORD)v193 == 1)
          v170 = 0;
        v190 = (uint64_t)&v186[v170 - v193];
        v171 = *(__int16 *)&v196[-2 * v169 - 2];
        v199 = &v186[v170];
        v172 = (v213 - v249) & 0x1F;
        if ((_DWORD)v193 == 1)
          v172 = v213 - v249;
        v219 = 0x80000000 >> v172;
        v173 = *((unsigned __int16 *)v196 - 1);
        v216 = (uint64_t)&v186[(v246 - v243) * (int)v193 + v170];
        v174 = v188 - 2 * v169;
        v175 = v167;
        v210 = *(__int16 *)&v196[-2 * v169 - 2];
        v207 = v173;
        *(_QWORD *)v204 = v174;
        while (1)
        {
          v177 = v175[1];
          ++v175;
          v176 = v177;
          v178 = v171;
          if (v173)
          {
            v178 = v171;
            if (v171 < v176)
            {
              v179 = v174;
              v180 = v173;
              do
              {
                --v180;
                v178 = *(__int16 *)((char *)v167 + v179);
                if (!(_WORD)v180)
                  break;
                v179 += 2;
              }
              while (v178 < v176);
            }
          }
          if (v176 != v178)
            goto LABEL_251;
          if ((a6 & 0x10000) != 0)
          {
            v226 = v175;
            v222 = nUpperXings(v236, v234, (__int16)v213, v176, v229, (__int16)v239, v246, v185, v142);
            v181 = nLowerXings(v236, v234, (__int16)v213, v176, v229, (__int16)v239, v246, v185, v249);
            v175 = v226;
            v174 = *(_QWORD *)v204;
            v173 = v207;
            v171 = v210;
            v142 = v232;
            if (v222 < 2 || v181 < 2)
              goto LABEL_251;
          }
          v183 = (_DWORD *)v216;
          if (v176 > v243)
            goto LABEL_250;
          v183 = v199;
          if (v176 == v246)
            goto LABEL_250;
          v184 = (_DWORD *)(v190 - 4 * (int)v193 * (uint64_t)(v176 + ~v246));
          if ((*v184 & v219) == 0)
            break;
LABEL_251:
          if (!--v168)
            goto LABEL_252;
        }
        v183 = &v184[v193];
LABEL_250:
        *v183 |= v219;
        goto LABEL_251;
      }
    }
  }
  return 0;
}

uint64_t sc_lineGen(uint64_t result, int *a2, int *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v6;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;

  v6 = a3 + 2;
  if ((unint64_t)(a3 + 2) <= a4)
  {
    v10 = result;
    v11 = (unsigned int *)(a2 + 2);
    v12 = *a3;
    v13 = a3[1];
    v14 = *a2;
    v15 = a2[1];
    do
    {
      v16 = v15;
      v17 = v13;
      v18 = *v11++;
      v15 = v18;
      v19 = *v6++;
      v13 = v19;
      result = sc_mark(v16, v17, v15, v19, v14, v12, a5, a6, *(_DWORD *)(v10 + 48), HIWORD(*(_DWORD *)(v10 + 48)));
      v12 = v17;
      v14 = v16;
    }
    while ((unint64_t)v6 <= a4);
  }
  return result;
}

uint64_t sc_lineGenRows(uint64_t result, int *a2, int *a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  int *v8;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;

  if (a7 >= a6)
  {
    v8 = a3 + 2;
    if ((unint64_t)(a3 + 2) <= a4)
    {
      v12 = result;
      v13 = (unsigned int *)(a2 + 2);
      v14 = *a3;
      v15 = a3[1];
      v16 = *a2;
      v17 = a2[1];
      do
      {
        v18 = v17;
        v22 = v17;
        v19 = v15;
        v20 = *v13++;
        v17 = v20;
        v21 = *v8++;
        v15 = v21;
        result = sc_markRows(v18, v19, v17, v21, v16, v14, a5, *(_WORD *)(v12 + 50), a6, a7);
        v14 = v19;
        v16 = v22;
      }
      while ((unint64_t)v8 <= a4);
    }
  }
  return result;
}

uint64_t sc_DrawParabola(int a1, int a2, int a3, int a4, int a5, int a6, int **a7, int **a8, int *a9, unsigned int a10)
{
  char v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v42;
  int v43;

  v14 = 0;
  v42 = a6 + 2;
  v43 = a5 + 2;
  v16 = a5 + 1;
  v17 = a6 + 1;
  while (1)
  {
    v18 = a1 - a3 - a3 + a5;
    v19 = a2 - a4 - a4 + a6;
    if ((a10 & 0x80000000) != 0)
    {
      if (v18 >= 0)
        v21 = a1 - a3 - a3 + a5;
      else
        v21 = -v18;
      if (v19 >= 0)
        v22 = a2 - a4 - a4 + a6;
      else
        v22 = -v19;
      if (v21 <= v22)
        v23 = 2 * v22;
      else
        v23 = v22 + v21;
      v24 = v23 + v21;
      v25 = 1;
      v26 = 1;
      if (v24 >= 0x81)
      {
        do
        {
          ++v26;
          v27 = v24 > 0x203;
          v24 >>= 2;
        }
        while (v27);
      }
      if (v26 >= 8)
        a10 = 8;
      else
        a10 = v26;
      v20 = 1 << a10;
      v28 = (1 << a10) + *a9;
      *a9 = v28;
      if (v28 > 262)
        goto LABEL_28;
    }
    else
    {
      v20 = 1 << a10;
    }
    if (a10 < 6)
      break;
    --a10;
    v29 = (v43 + a3 + a3 + a1) >> 2;
    v30 = (v42 + a4 + a4 + a2) >> 2;
    sc_DrawParabola(a1, a2, (a3 + a1 + 1) >> 1, (a4 + a2 + 1) >> 1, v29, v30, a7, a8, a9, a10);
    a3 = (v16 + a3) >> 1;
    a4 = (v17 + a4) >> 1;
    v14 = 1;
    a1 = v29;
    a2 = v30;
  }
  v31 = 2 * a10;
  v32 = v18 - ((a1 - a3) << (a10 + 1));
  v33 = 2 * v18;
  v34 = v19 - ((a2 - a4) << (a10 + 1));
  v35 = 2 * v19;
  v36 = *a7;
  v37 = *a8;
  v38 = 1 << (2 * a10 - 1);
  v39 = (a2 << (2 * a10)) + v38;
  v40 = (a1 << (2 * a10)) + v38;
  do
  {
    v40 += v32;
    v39 += v34;
    *v36 = v40 >> v31;
    *v37 = v39 >> v31;
    if (*v36 == *(v36 - 1) && v39 >> v31 == *(v37 - 1))
    {
      --*a9;
    }
    else
    {
      ++v36;
      ++v37;
    }
    v32 += v33;
    v34 += v35;
    --v20;
  }
  while (v20);
  v25 = 0;
  *a7 = v36;
  *a8 = v37;
LABEL_28:
  if ((v14 & 1) != 0)
    return 0;
  else
    return v25;
}

uint64_t sc_mark(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, __int16 a9, __int16 a10)
{
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  __int16 **v26;
  uint64_t *v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int16 **v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  __int16 v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  int v62;
  uint64_t *v63;
  unint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  unint64_t v69;
  __int16 **v70;
  int v71;
  __int16 *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  __int16 *v80;
  uint64_t v81;
  int v82;
  __int16 *v83;
  __int16 v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  unint64_t v93;
  __int16 **v94;
  int v95;
  __int16 *v96;
  unint64_t v97;
  __int16 **v98;
  int v99;
  __int16 *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  __int16 v107;
  int v108;
  int v109;
  __int16 *v110;
  int v111;
  __int16 *v112;
  int v113;
  __int16 *v114;
  __int16 v115;
  __int16 v116;
  __int16 v117;
  __int16 v118;
  unint64_t v119;
  __int16 **v120;
  int v121;
  __int16 *v122;
  __int16 v123;
  unint64_t v124;
  uint64_t *v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  __int16 v133;
  int v134;
  int v135;
  int v136;
  __int16 v137;
  int v138;
  int v139;
  uint64_t v140;
  __int16 *v141;
  int v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  __int16 v146;
  __int16 v147;
  __int16 v148;
  unsigned int v149;
  int v150;
  unint64_t v151;
  uint64_t *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  __int16 v156;
  unint64_t v157;
  uint64_t *v158;
  int v159;
  __int16 v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  __int16 v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  int v184;
  __int16 v185;
  __int16 v186;
  __int16 v187;
  __int16 v188;
  __int16 v189;
  __int16 v190;
  __int16 v191;
  __int16 v192;
  __int16 v193;
  __int16 v194;
  __int16 v195;
  unsigned int v196;
  __int16 v197;
  unsigned int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  unsigned int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  __int16 v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  __int16 v215;
  int v216;
  int v217;
  uint64_t *v218;

  v15 = result;
  v16 = (result + 31) >> 6;
  v17 = (a2 + 31) >> 6;
  v18 = (a3 + 31) >> 6;
  v19 = (a4 + 31) >> 6;
  v208 = (result + 31) & 0xFFFFFFC0;
  v20 = (__int16)((a2 + 31) >> 6);
  v21 = (__int16)(((int)result + 31) >> 6);
  v198 = (a2 + 31) & 0xFFFFFFC0;
  v22 = a4 - a2;
  v23 = a3 - result;
  v24 = a9 + 1;
  v25 = a10 + 1;
  v26 = (__int16 **)(a8 + 8 * (__int16)((a2 + 31) >> 6));
  v27 = (uint64_t *)(a7 + 8 * (__int16)(((int)result + 31) >> 6));
  v218 = v27;
  v216 = a3 - result;
  v217 = v20;
  if (((a4 - a2) & 0x80000000) == 0 && v23 >= 1)
  {
    result = a2 & 0x3F;
    v28 = v15 & 0x3F;
    if ((_DWORD)result == 32)
    {
      v29 = (v15 - a5) * v22;
      v30 = (a2 - a6) * v23;
      v211 = (a4 + 31) >> 6;
      v181 = 32;
      if (v28 == 32)
      {
        if (v29 < v30 || v15 < a5 && a4 == a2 && a2 == a6)
        {
          v191 = (a3 + 31) >> 6;
          v199 = a4 - a2;
          v175 = v25;
          v31 = v20;
          SET(*v26, v25, v21);
          OFF(*v218, (__int16)(a9 + 1), v31 + 1);
          if (v15 < a5)
            SET((__int16 *)*v218, (__int16)(a9 + 1), v217);
          if (a2 < a6)
            OFF((uint64_t)*v26, v175, v21 + 1);
          v32 = 0;
          v24 = a9 + 1;
          v25 = a10 + 1;
LABEL_55:
          v22 = v199;
          v20 = v217;
LABEL_56:
          LOWORD(v18) = v191;
          LOWORD(v19) = v211;
          result = v181;
          goto LABEL_126;
        }
        if (a3 > v15 && v15 > a5)
        {
          v206 = a4 - a2;
          v195 = (a3 + 31) >> 6;
          OFF(*v218, (__int16)(a9 + 1), v20 + 1);
          result = 32;
          LOWORD(v19) = v211;
          LOWORD(v18) = v195;
          v20 = v217;
          v22 = v206;
          v25 = a10 + 1;
          v24 = a9 + 1;
        }
        v32 = 0;
        if (a4 > a2 && a2 > a6)
        {
          v55 = v24;
          v56 = v25;
          v57 = v22;
          v58 = v18;
          SET(*v26, v25, v21);
LABEL_121:
          result = v181;
          LOWORD(v19) = v211;
          LOWORD(v18) = v58;
          v20 = v217;
          v22 = v57;
          v25 = v56;
          v24 = v55;
          v32 = 0;
          goto LABEL_126;
        }
        goto LABEL_126;
      }
      if (v29 < v30 || v15 < a5 && a4 == a2 && a2 == a6)
      {
        v191 = (a3 + 31) >> 6;
        v199 = a4 - a2;
        SET(*v26, (__int16)(a10 + 1), v21);
        if (a2 < a6)
          OFF((uint64_t)*v26, (__int16)(a10 + 1), v21);
        v32 = 1;
        v24 = a9 + 1;
        v25 = a10 + 1;
        goto LABEL_55;
      }
      v32 = 1;
      if (a4 <= a2 || a2 <= a6)
        goto LABEL_126;
      v59 = a4 - a2;
      v60 = (a3 + 31) >> 6;
      SET(*v26, (__int16)(a10 + 1), v21);
      result = 32;
      LOWORD(v19) = v211;
      LOWORD(v18) = v60;
      v20 = v217;
      v22 = v59;
      v25 = a10 + 1;
      v24 = a9 + 1;
    }
    else if (v28 == 32)
    {
      if ((v15 - a5) * v22 < (a2 - a6) * v23 || v15 < a5 && a4 == a2 && a2 == a6)
      {
        v181 = a2 & 0x3F;
        v211 = (a4 + 31) >> 6;
        v191 = (a3 + 31) >> 6;
        v201 = a4 - a2;
        v37 = v24;
        v38 = (__int16)((a2 + 31) >> 6);
        v39 = (__int16 **)v27;
        OFF(*v27, v24, v20);
        if (v15 < a5)
          SET(*v39, v37, v38);
        v32 = 0;
        v24 = a9 + 1;
        v25 = a10 + 1;
        v22 = v201;
        v20 = v38;
        goto LABEL_56;
      }
      v32 = 0;
      if (a3 > v15 && v15 > a5)
      {
        v181 = a2 & 0x3F;
        v55 = a9 + 1;
        v56 = a10 + 1;
        v57 = a4 - a2;
        v58 = (a3 + 31) >> 6;
        v211 = (a4 + 31) >> 6;
        OFF(*v27, (__int16)(a9 + 1), v20);
        goto LABEL_121;
      }
LABEL_126:
      v61 = (__int16)v19;
      v62 = (__int16)v18;
      if ((__int16)v19 == v20)
      {
        if ((__int16)v18 != v21)
        {
          v63 = &v218[v32 ^ 1u];
          v64 = a7 + 8 * (__int16)v18;
          if ((unint64_t)v63 < v64)
          {
            if ((_DWORD)result == 32)
              v65 = v17 + 1;
            else
              v65 = v17;
            v66 = v24;
            v67 = v65;
            do
            {
              v68 = *v63++;
              result = OFF(v68, v66, v67);
            }
            while ((unint64_t)v63 < v64);
          }
        }
      }
      else if ((__int16)v18 == v21)
      {
        v69 = a8 + 8 * (__int16)v19;
        v70 = &v26[(_DWORD)result == 32];
        if ((unint64_t)v70 < v69)
        {
          v71 = v25;
          do
          {
            v72 = *v70++;
            result = (uint64_t)SET(v72, v71, v21);
          }
          while ((unint64_t)v70 < v69);
        }
      }
      else
      {
        if ((_DWORD)result == 32)
        {
          v73 = v216 << 6;
          LOWORD(v17) = v17 + 1;
          ++v26;
        }
        else
        {
          v73 = (v198 - a2 + 32) * v216;
        }
        if (v32)
        {
          v74 = v22 * (v208 - v15 + 32);
          v75 = v22 << 6;
        }
        else
        {
          v75 = v22 << 6;
          LOWORD(v16) = v16 + 1;
          ++v218;
          v74 = v22 << 6;
        }
        v76 = v73 - v74;
        v77 = v25;
        v78 = -v75;
        v79 = v24;
        while (1)
        {
          while (v76 < 1)
          {
            if (v61 == (__int16)v17)
              return result;
            v80 = *v26++;
            result = (uint64_t)SET(v80, v77, v16);
            LOWORD(v17) = v17 + 1;
            v76 += v216 << 6;
          }
          if (v62 == (__int16)v16)
            break;
          v81 = *v218++;
          result = OFF(v81, v79, v17);
          LOWORD(v16) = v16 + 1;
          v76 += v78;
        }
      }
      return result;
    }
    v32 = 1;
    goto LABEL_126;
  }
  if (v22 >= 1 && v23 <= 0)
  {
    result = a2 & 0x3F;
    v33 = v15 & 0x3F;
    if ((_DWORD)result == 32)
    {
      v34 = (v15 - a5) * v22;
      v35 = (a2 - a6) * v23;
      v212 = (a4 + 31) >> 6;
      v182 = 32;
      if (v33 == 32)
      {
        if (v34 < v35 || a3 == v15 && v15 == a5 && a2 < a6)
        {
          v188 = a10 + 1;
          v192 = (a3 + 31) >> 6;
          v200 = a4 - a2;
          v176 = v25;
          SET(*v26, v25, v21);
          SET((__int16 *)*v218, (__int16)(a9 + 1), v217);
          if (v15 > a5)
            OFF(*v218, (__int16)(a9 + 1), v217 + 1);
          if (a2 < a6)
            OFF((uint64_t)*v26, v176, v21 + 1);
          v36 = 0;
          v24 = a9 + 1;
LABEL_85:
          v25 = v188;
          v22 = v200;
          v20 = v217;
LABEL_86:
          LOWORD(v18) = v192;
          LOWORD(v19) = v212;
          result = v182;
          goto LABEL_175;
        }
        if (a4 > a2 && a2 > a6)
        {
          v207 = a4 - a2;
          v196 = (a3 + 31) >> 6;
          SET(*v26, (__int16)(a10 + 1), v21);
          result = 32;
          LOWORD(v19) = v212;
          LOWORD(v18) = v196;
          v22 = v207;
          v25 = a10 + 1;
          v24 = a9 + 1;
        }
        v36 = 0;
        if (a3 < v15)
        {
          v20 = v217;
          if (v15 >= a5)
            goto LABEL_175;
          v82 = v24;
          v83 = (__int16 *)*v218;
          v84 = v217;
          v187 = v24;
          v85 = v25;
          v86 = v22;
          v87 = v18;
          goto LABEL_161;
        }
        v20 = v217;
        goto LABEL_175;
      }
      if (v34 < v35 || a3 == v15 && v15 == a5 && a2 < a6)
      {
        v188 = a10 + 1;
        v192 = (a3 + 31) >> 6;
        v200 = a4 - a2;
        v51 = v25;
        SET(*v26, v25, v21);
        if (a2 < a6)
          OFF((uint64_t)*v26, v51, v21);
        v36 = 1;
        v24 = a9 + 1;
        goto LABEL_85;
      }
      v36 = 1;
      if (a4 <= a2 || a2 <= a6)
        goto LABEL_175;
      v89 = a4 - a2;
      v90 = (a3 + 31) >> 6;
      SET(*v26, (__int16)(a10 + 1), v21);
      result = 32;
      v24 = a9 + 1;
      LOWORD(v19) = v212;
      LOWORD(v18) = v90;
      v20 = v217;
      v22 = v89;
      v25 = a10 + 1;
    }
    else if (v33 == 32)
    {
      if ((v15 - a5) * v22 < (a2 - a6) * v23 || a3 == v15 && v15 == a5 && a2 < a6)
      {
        v182 = a2 & 0x3F;
        v212 = (a4 + 31) >> 6;
        v192 = (a3 + 31) >> 6;
        v203 = a4 - a2;
        v44 = v24;
        v45 = (__int16)((a2 + 31) >> 6);
        SET((__int16 *)*v27, v24, v20);
        if (v15 > a5)
          OFF(*v218, v44, v45);
        v36 = 0;
        v24 = a9 + 1;
        v25 = a10 + 1;
        v22 = v203;
        v20 = v45;
        goto LABEL_86;
      }
      v36 = 0;
      if (a3 < v15 && v15 < a5)
      {
        v82 = v24;
        v182 = result;
        v187 = a9 + 1;
        v83 = (__int16 *)*v27;
        v84 = v20;
        v85 = a10 + 1;
        v86 = v22;
        v87 = v18;
        v212 = (a4 + 31) >> 6;
LABEL_161:
        SET(v83, v82, v84);
        result = v182;
        v24 = v187;
        LOWORD(v19) = v212;
        LOWORD(v18) = v87;
        v20 = v217;
        v22 = v86;
        v25 = v85;
        v36 = 0;
      }
LABEL_175:
      v91 = (__int16)v19;
      if ((__int16)v19 == v20)
      {
        if ((__int16)v18 != v21)
        {
          v92 = (a3 & 0x3F) == 0x20 ? v18 + 1 : v18;
          v93 = a7 + 8 * v92;
          v94 = (__int16 **)(v218 - 1);
          if ((unint64_t)(v218 - 1) >= v93)
          {
            v95 = v24;
            do
            {
              v96 = *v94--;
              result = (uint64_t)SET(v96, v95, v217);
            }
            while ((unint64_t)v94 >= v93);
          }
        }
      }
      else
      {
        if ((__int16)v18 != v21)
        {
          if ((_DWORD)result == 32)
          {
            v101 = v216 << 6;
            LOWORD(v17) = v17 + 1;
            ++v26;
            v102 = v216 << 6;
          }
          else
          {
            v102 = (v198 - a2 + 32) * v216;
            v101 = v216 << 6;
          }
          v103 = v22 << 6;
          if (v36)
            v104 = v22 * (v15 - v208 + 32);
          else
            v104 = v22 << 6;
          v105 = v102 + v104;
          v106 = v25;
          if ((a3 & 0x3F) == 0x20)
            v107 = v18 + 1;
          else
            v107 = v18;
          v108 = v107;
          v109 = v24;
          while (1)
          {
            if (v105 <= 0)
            {
              LOWORD(v16) = v16 - 1;
              if (v108 > (__int16)v16)
                return result;
              v112 = (__int16 *)*--v218;
              result = (uint64_t)SET(v112, v109, v17);
              v111 = v103;
            }
            else
            {
              if (v91 == (__int16)v17)
                return result;
              v110 = *v26++;
              result = (uint64_t)SET(v110, v106, v16);
              LOWORD(v17) = v17 + 1;
              v111 = v101;
            }
            v105 += v111;
          }
        }
        v97 = a8 + 8 * (__int16)v19;
        v98 = &v26[(_DWORD)result == 32];
        if ((unint64_t)v98 < v97)
        {
          v99 = v25;
          do
          {
            v100 = *v98++;
            result = (uint64_t)SET(v100, v99, v21);
          }
          while ((unint64_t)v98 < v97);
        }
      }
      return result;
    }
    v36 = 1;
    goto LABEL_175;
  }
  if (v22 <= 0 && v23 < 0)
  {
    v40 = result & 0x3F;
    v183 = a2 & 0x3F;
    if (v183 == 32)
    {
      v41 = (result - a5) * v22;
      v42 = (a2 - a6) * v23;
      v202 = a4 - a2;
      v193 = (a3 + 31) >> 6;
      v213 = (a4 + 31) >> 6;
      if (v40 == 32)
      {
        if (v41 < v42 || (int)result > a5 && a4 == a2 && a2 == a6)
        {
          v185 = a9 + 1;
          v189 = a10 + 1;
          v177 = v25;
          OFF((uint64_t)*v26, v25, v21 + 1);
          result = (uint64_t)SET((__int16 *)*v218, (__int16)(a9 + 1), v217);
          if (v15 > a5)
            result = OFF(*v218, v185, (unsigned __int16)v217 + 1);
          if (a2 > a6)
            result = (uint64_t)SET(*v26, v177, v21);
          v43 = 0;
LABEL_102:
          v24 = v185;
          v25 = v189;
          v23 = v216;
          v20 = v217;
          v22 = v202;
LABEL_103:
          LOWORD(v18) = v193;
          LOWORD(v19) = v213;
          goto LABEL_219;
        }
        if (a4 < a2 && a2 < a6)
        {
          result = OFF((uint64_t)*v26, (__int16)(a10 + 1), (unsigned __int16)v21 + 1);
          LOWORD(v19) = v213;
          v23 = v216;
          LOWORD(v18) = v193;
          v22 = v202;
          v25 = a10 + 1;
          v24 = a9 + 1;
        }
        v43 = 0;
        if (a3 < v15)
        {
          v20 = v217;
          if (v15 >= a5)
            goto LABEL_219;
          v113 = v24;
          v114 = (__int16 *)*v218;
          v115 = v217;
          v116 = v24;
          v117 = v25;
          goto LABEL_214;
        }
        v20 = v217;
        goto LABEL_219;
      }
      if (v41 < v42 || (int)result > a5 && a4 == a2 && a2 == a6)
      {
        v185 = a9 + 1;
        v189 = a10 + 1;
        v53 = v25;
        result = OFF((uint64_t)*v26, v25, v21);
        if (a2 > a6)
          result = (uint64_t)SET(*v26, v53, v21);
        v43 = 1;
        goto LABEL_102;
      }
      v43 = 1;
      if (a4 >= a2 || a2 >= a6)
        goto LABEL_219;
      result = OFF((uint64_t)*v26, (__int16)(a10 + 1), v21);
      LOWORD(v19) = v213;
      v23 = v216;
      LOWORD(v18) = v193;
      v20 = v217;
      v22 = v202;
      v25 = a10 + 1;
      v24 = a9 + 1;
    }
    else if (v40 == 32)
    {
      if (((int)result - a5) * v22 < (a2 - a6) * v23 || (int)result > a5 && a4 == a2 && a2 == a6)
      {
        v213 = (a4 + 31) >> 6;
        v193 = (a3 + 31) >> 6;
        v205 = a4 - a2;
        v179 = v24;
        v52 = (__int16)((a2 + 31) >> 6);
        result = (uint64_t)SET((__int16 *)*v27, v24, v20);
        if (v15 > a5)
          result = OFF(*v218, v179, v52);
        v43 = 0;
        v24 = a9 + 1;
        v25 = a10 + 1;
        v23 = v216;
        v22 = v205;
        v20 = v52;
        goto LABEL_103;
      }
      v43 = 0;
      if (a3 < (int)result && (int)result < a5)
      {
        v113 = (__int16)(a9 + 1);
        v114 = (__int16 *)*v27;
        v115 = v20;
        v116 = a9 + 1;
        v117 = a10 + 1;
        v202 = v22;
        v193 = v18;
        v213 = (a4 + 31) >> 6;
LABEL_214:
        result = (uint64_t)SET(v114, v113, v115);
        LOWORD(v19) = v213;
        v23 = v216;
        LOWORD(v18) = v193;
        v20 = v217;
        v22 = v202;
        v25 = v117;
        v24 = v116;
        v43 = 0;
      }
LABEL_219:
      if (v20 == (__int16)v19)
      {
        if ((__int16)v18 != v21)
        {
          v118 = (a3 & 0x3F) == 0x20 ? v18 + 1 : v18;
          v119 = a7 + 8 * v118;
          v120 = (__int16 **)(v218 - 1);
          if ((unint64_t)(v218 - 1) >= v119)
          {
            v121 = v24;
            do
            {
              v122 = *v120--;
              result = (uint64_t)SET(v122, v121, v217);
            }
            while ((unint64_t)v120 >= v119);
          }
        }
      }
      else if ((__int16)v18 == v21)
      {
        if ((a4 & 0x3F) == 0x20)
          v123 = v19 + 1;
        else
          v123 = v19;
        v124 = a8 + 8 * v123;
        v125 = (uint64_t *)(v26 - 1);
        if ((unint64_t)(v26 - 1) >= v124)
        {
          v126 = v25;
          do
          {
            v127 = *v125--;
            result = OFF(v127, v126, v21);
          }
          while ((unint64_t)v125 >= v124);
        }
      }
      else
      {
        v128 = v198 - a2 - 32;
        if (v183 == 32)
          v128 = -64;
        v129 = v22 << 6;
        if (v43)
          v130 = v22 * (v15 - v208 + 32);
        else
          v130 = v22 << 6;
        v131 = v130 + v128 * v23;
        v132 = v23 << 6;
        if ((a4 & 0x3F) == 0x20)
          v133 = v19 + 1;
        else
          v133 = v19;
        v134 = a3 & 0x3F;
        v135 = v133;
        v136 = v25;
        if (v134 == 32)
          v137 = v18 + 1;
        else
          v137 = v18;
        v138 = v137;
        v139 = v24;
        while (1)
        {
          while (v131 < 1)
          {
            LOWORD(v17) = v17 - 1;
            if (v135 > (__int16)v17)
              return result;
            v140 = (uint64_t)*--v26;
            result = OFF(v140, v136, v16);
            v131 -= v132;
          }
          LOWORD(v16) = v16 - 1;
          if (v138 > (__int16)v16)
            break;
          v141 = (__int16 *)*--v218;
          result = (uint64_t)SET(v141, v139, v17);
          v131 += v129;
        }
      }
      return result;
    }
    v43 = 1;
    goto LABEL_219;
  }
  if ((v22 & 0x80000000) == 0 || v23 < 0)
    return result;
  v46 = result & 0x3F;
  v184 = a2 & 0x3F;
  v204 = a4 - a2;
  if (v184 == 32)
  {
    v47 = (result - a5) * v22;
    v48 = (a2 - a6) * v23;
    if (v46 == 32)
    {
      v186 = a9 + 1;
      if (v47 < v48 || a3 == (_DWORD)result && (_DWORD)result == a5 && a2 > a6)
      {
        v214 = (a4 + 31) >> 6;
        v190 = a10 + 1;
        v194 = (a3 + 31) >> 6;
        v178 = v25;
        OFF((uint64_t)*v26, v25, v21 + 1);
        v49 = (__int16)(a9 + 1);
        result = OFF(*v218, (__int16)v49, (unsigned __int16)v217 + 1);
        if (v15 < a5)
          result = (uint64_t)SET((__int16 *)*v218, v49, v217);
        if (a2 > a6)
          result = (uint64_t)SET(*v26, v178, v21);
        v50 = 0;
        v24 = a9 + 1;
LABEL_169:
        v25 = v190;
        v20 = v217;
LABEL_170:
        LOWORD(v18) = v194;
        LOWORD(v19) = v214;
        goto LABEL_268;
      }
      if (a4 < a2 && a2 < a6)
      {
        v197 = (a3 + 31) >> 6;
        v215 = (a4 + 31) >> 6;
        result = OFF((uint64_t)*v26, (__int16)(a10 + 1), (unsigned __int16)v21 + 1);
        LOWORD(v19) = v215;
        LOWORD(v18) = v197;
        v20 = v217;
        v25 = a10 + 1;
        v24 = a9 + 1;
      }
      v50 = 0;
      if (a3 > v15 && v15 > a5)
      {
        v142 = v24;
        v143 = v217 + 1;
        v144 = *v218;
LABEL_262:
        v145 = v25;
        v146 = v18;
        v147 = v19;
        result = OFF(v144, v142, v143);
        LOWORD(v19) = v147;
        LOWORD(v18) = v146;
        v20 = v217;
        v25 = v145;
        v24 = v186;
        v50 = 0;
        goto LABEL_268;
      }
      goto LABEL_268;
    }
    if (v47 < v48 || a3 == (_DWORD)result && (_DWORD)result == a5 && a2 > a6)
    {
      v214 = (a4 + 31) >> 6;
      v190 = a10 + 1;
      v194 = (a3 + 31) >> 6;
      v88 = v25;
      result = OFF((uint64_t)*v26, v25, v21);
      if (a2 > a6)
        result = (uint64_t)SET(*v26, v88, v21);
      v50 = 1;
      v24 = a9 + 1;
      goto LABEL_169;
    }
    v50 = 1;
    if (a4 >= a2 || a2 >= a6)
      goto LABEL_268;
    v148 = (a3 + 31) >> 6;
    v149 = (a4 + 31) >> 6;
    result = OFF((uint64_t)*v26, (__int16)(a10 + 1), v21);
    LOWORD(v19) = v149;
    LOWORD(v18) = v148;
    v20 = v217;
    v25 = a10 + 1;
    v24 = a9 + 1;
LABEL_267:
    v50 = 1;
    goto LABEL_268;
  }
  if (v46 != 32)
    goto LABEL_267;
  if (((int)result - a5) * v22 < (a2 - a6) * v23 || a3 == (_DWORD)result && (_DWORD)result == a5 && a2 > a6)
  {
    v214 = (a4 + 31) >> 6;
    v194 = (a3 + 31) >> 6;
    v180 = v24;
    v54 = (__int16)((a2 + 31) >> 6);
    result = OFF(*v27, v24, v20);
    if (v15 < a5)
      result = (uint64_t)SET((__int16 *)*v218, v180, v54);
    v50 = 0;
    v24 = a9 + 1;
    v25 = a10 + 1;
    v20 = v54;
    goto LABEL_170;
  }
  v50 = 0;
  if (a3 > (int)result && (int)result > a5)
  {
    v142 = v24;
    v144 = *v27;
    v143 = v20;
    v186 = a9 + 1;
    goto LABEL_262;
  }
LABEL_268:
  v150 = (__int16)v18;
  if (v20 == (__int16)v19)
  {
    if ((__int16)v18 != v21)
    {
      v151 = a7 + 8 * (__int16)v18;
      v152 = &v218[v50 ^ 1u];
      if ((unint64_t)v152 < v151)
      {
        v153 = v24;
        do
        {
          v154 = *v152++;
          result = OFF(v154, v153, v217);
        }
        while ((unint64_t)v152 < v151);
      }
    }
  }
  else
  {
    v155 = v204;
    if ((__int16)v18 != v21)
    {
      v162 = v198 - a2 - 32;
      if (v184 == 32)
        v162 = -64;
      v163 = v162 * v216;
      if (v50)
      {
        v164 = v204 * (v208 - v15 + 32);
      }
      else
      {
        v164 = v204 << 6;
        LOWORD(v16) = v16 + 1;
        ++v218;
      }
      if ((a4 & 0x3F) == 0x20)
        v165 = v19 + 1;
      else
        v165 = v19;
      v166 = v165;
      v167 = v163 - v164;
      v168 = v25;
      v169 = v24;
      while (1)
      {
        if (v167 <= 0)
        {
          if (v150 == (__int16)v16)
            return result;
          v173 = *v218++;
          v174 = v155;
          result = OFF(v173, v169, v17);
          v155 = v174;
          LOWORD(v16) = v16 + 1;
          v172 = v174;
        }
        else
        {
          LOWORD(v17) = v17 - 1;
          if (v166 > (__int16)v17)
            return result;
          v170 = (uint64_t)*--v26;
          v171 = v155;
          result = OFF(v170, v168, v16);
          v155 = v171;
          v172 = v216;
        }
        v167 -= v172 << 6;
      }
    }
    if ((a4 & 0x3F) == 0x20)
      v156 = v19 + 1;
    else
      v156 = v19;
    v157 = a8 + 8 * v156;
    v158 = (uint64_t *)(v26 - 1);
    if ((unint64_t)(v26 - 1) >= v157)
    {
      v159 = v25;
      v160 = v16 + (v50 ^ 1);
      do
      {
        v161 = *v158--;
        result = OFF(v161, v159, v160);
      }
      while ((unint64_t)v158 >= v157);
    }
  }
  return result;
}

uint64_t sc_markRows(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned __int16 a8, unint64_t a9, unint64_t a10)
{
  char v11;
  char v12;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 **v22;
  unint64_t v23;
  BOOL v24;
  _BOOL4 v25;
  _BOOL4 v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v33;
  unint64_t v34;
  __int16 **i;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v41;
  unint64_t v42;
  __int16 **j;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v49;
  int v50;
  int v51;
  int v53;
  int v54;
  __int16 **v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v81;
  int v82;
  unsigned int v83;
  int v84;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *k;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  __int16 v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  int v179;

  v11 = a4;
  v12 = a3;
  v14 = (result + 31) & 0xFFFFFFC0;
  v15 = (((int)result + 31) >> 6);
  v16 = (a2 + 31) >> 6;
  v17 = (a4 + 31) >> 6;
  v18 = (a2 + 31) & 0xFFFFFFC0;
  v19 = (a4 - a2);
  v20 = (a3 - result);
  v21 = a8 + 1;
  v22 = (__int16 **)(a7 + 8 * v16);
  v23 = a7 + 8 * v17;
  v178 = (a3 + 31) >> 6;
  v179 = v21;
  if ((v19 & 0x80000000) == 0 && (int)v20 >= 1)
  {
    if ((unint64_t)v22 > a10 || v23 < a9)
      return result;
    if ((unint64_t)v22 < a9)
    {
      v24 = 0;
LABEL_34:
      v33 = 0;
      goto LABEL_35;
    }
    v24 = (result & 0x3F) == 32;
    if ((a2 & 0x3F) != 0x20)
      goto LABEL_34;
    v28 = (result - a5) * v19;
    v29 = (a2 - a6) * v20;
    if ((result & 0x3F) == 0x20)
    {
      if (v28 < v29 || (int)result < a5 && a4 == a2 && a2 == a6)
      {
        v132 = (a2 + 31) & 0xFFFFFFC0;
        v142 = (result + 31) & 0xFFFFFFC0;
        v154 = result;
        v166 = a3 - result;
        v126 = a4 - a2;
        v30 = a8 + 1;
        v31 = (((int)result + 31) >> 6);
        SET(*v22, v21, v15);
        if (a2 < a6)
          OFF((uint64_t)*v22, v30, v31 + 1);
        v24 = 1;
LABEL_83:
        v33 = 1;
        v15 = v31;
        result = v154;
        LODWORD(v20) = v166;
        LODWORD(v19) = v126;
        v18 = v132;
        v14 = v142;
        goto LABEL_35;
      }
      v24 = 1;
      if (a4 > a2)
      {
        v33 = 1;
        if (a2 <= a6)
          goto LABEL_35;
        v158 = result;
        v170 = a3 - result;
        v77 = (((int)result + 31) >> 6);
        v78 = a4 - a2;
        v146 = (result + 31) & 0xFFFFFFC0;
        v79 = (a2 + 31) & 0xFFFFFFC0;
        SET(*v22, v21, v15);
        v18 = v79;
        v14 = v146;
        result = v158;
        LODWORD(v19) = v78;
        LODWORD(v20) = v170;
        v15 = v77;
        v24 = 1;
      }
    }
    else
    {
      if (v28 < v29 || (int)result < a5 && a4 == a2 && a2 == a6)
      {
        v132 = (a2 + 31) & 0xFFFFFFC0;
        v142 = (result + 31) & 0xFFFFFFC0;
        v154 = result;
        v166 = a3 - result;
        v126 = a4 - a2;
        v51 = a8 + 1;
        v31 = (((int)result + 31) >> 6);
        SET(*v22, v21, v15);
        if (a2 < a6)
          OFF((uint64_t)*v22, v51, v31);
        v24 = 0;
        goto LABEL_83;
      }
      v24 = 0;
      v33 = 1;
      if (a4 <= a2 || a2 <= a6)
      {
LABEL_35:
        if (v17 != v16)
        {
          if (v178 == (_DWORD)v15)
          {
            if (v23 <= a10)
              v34 = v23;
            else
              v34 = a10 + 8;
            for (i = &v22[v33]; (unint64_t)i < v34; ++i)
            {
              if ((unint64_t)i >= a9)
              {
                v36 = v15;
                result = (uint64_t)SET(*i, v179, v15);
                v15 = v36;
              }
            }
          }
          else
          {
            if ((v33 & 1) != 0)
            {
              v45 = (_DWORD)v20 << 6;
              ++v16;
              ++v22;
            }
            else
            {
              v45 = (v18 - a2 + 32) * v20;
            }
            v63 = (_DWORD)v19 << 6;
            if (v24)
              v64 = v15 + 1;
            else
              v64 = v15;
            if (!v24)
              v63 = v19 * (v14 - result + 32);
            v65 = v45 - v63;
            v66 = (_DWORD)v20 << 6;
            v67 = -64 * v19;
            while (1)
            {
              while (v65 >= 1)
              {
                if (v64 == v178)
                  return result;
                ++v64;
                v65 += v67;
              }
              if (v17 == v16 || (unint64_t)v22 > a10)
                break;
              if ((unint64_t)v22 >= a9)
                result = (uint64_t)SET(*v22, v179, v64);
              ++v22;
              ++v16;
              v65 += v66;
            }
          }
        }
        return result;
      }
      v159 = result;
      v171 = a3 - result;
      v81 = (((int)result + 31) >> 6);
      v82 = a4 - a2;
      v147 = (result + 31) & 0xFFFFFFC0;
      v83 = (a2 + 31) & 0xFFFFFFC0;
      SET(*v22, v21, v15);
      v18 = v83;
      v14 = v147;
      result = v159;
      LODWORD(v19) = v82;
      LODWORD(v20) = v171;
      v15 = v81;
      v24 = 0;
    }
    v33 = 1;
    goto LABEL_35;
  }
  if ((int)v19 >= 1 && (int)v20 <= 0)
  {
    if ((unint64_t)v22 > a10 || v23 < a9)
      return result;
    if ((unint64_t)v22 < a9)
    {
      v25 = 0;
LABEL_54:
      v41 = 0;
      goto LABEL_55;
    }
    v25 = (result & 0x3F) == 32;
    if ((a2 & 0x3F) != 0x20)
      goto LABEL_54;
    v37 = (result - a5) * v19;
    v38 = (a2 - a6) * v20;
    if ((result & 0x3F) == 0x20)
    {
      if (v37 < v38 || a3 == (_DWORD)result && (_DWORD)result == a5 && a2 < a6)
      {
        v133 = (a2 + 31) & 0xFFFFFFC0;
        v143 = (result + 31) & 0xFFFFFFC0;
        v155 = result;
        v167 = a3 - result;
        v127 = a4 - a2;
        v39 = (((int)result + 31) >> 6);
        SET(*v22, v21, v15);
        if (a2 < a6)
          OFF((uint64_t)*v22, v179, v39 + 1);
        v25 = 1;
        v41 = 1;
        v15 = v39;
LABEL_151:
        result = v155;
        LODWORD(v20) = v167;
        LODWORD(v19) = v127;
        v18 = v133;
        v14 = v143;
        goto LABEL_55;
      }
      v25 = 1;
      if (a4 > a2)
      {
        v41 = 1;
        if (a2 <= a6)
          goto LABEL_55;
        v160 = result;
        v172 = a3 - result;
        v87 = (((int)result + 31) >> 6);
        v88 = a4 - a2;
        v136 = (a2 + 31) & 0xFFFFFFC0;
        v148 = (result + 31) & 0xFFFFFFC0;
        SET(*v22, v21, v15);
        v18 = v136;
        v14 = v148;
        result = v160;
        LODWORD(v20) = v172;
        LODWORD(v19) = v88;
        v15 = v87;
        v25 = 1;
      }
    }
    else
    {
      if (v37 < v38 || a3 == (_DWORD)result && (_DWORD)result == a5 && a2 < a6)
      {
        v133 = (a2 + 31) & 0xFFFFFFC0;
        v143 = (result + 31) & 0xFFFFFFC0;
        v155 = result;
        v167 = a3 - result;
        v125 = ((int)result + 31) >> 6;
        v127 = a4 - a2;
        v75 = a8 + 1;
        SET(*v22, v21, v15);
        if (a2 < a6)
          OFF((uint64_t)*v22, v75, v125);
        v25 = 0;
        v41 = 1;
        v15 = v125;
        goto LABEL_151;
      }
      v25 = 0;
      v41 = 1;
      if (a4 <= a2 || a2 <= a6)
      {
LABEL_55:
        if (v17 != v16)
        {
          if (v178 != (_DWORD)v15)
          {
            v53 = (v18 - a2 + 32) * v20;
            v54 = (_DWORD)v20 << 6;
            if ((v41 & 1) != 0)
            {
              ++v16;
              v55 = v22 + 1;
            }
            else
            {
              v55 = v22;
            }
            if ((v41 & 1) != 0)
              v56 = (_DWORD)v20 << 6;
            else
              v56 = v53;
            v57 = (_DWORD)v19 << 6;
            if (v25)
              v58 = (_DWORD)v19 << 6;
            else
              v58 = v19 * (result - v14 + 32);
            v59 = v56 + v58;
            if ((v12 & 0x3F) == 0x20)
              v60 = v178 + 1;
            else
              v60 = v178;
            while (1)
            {
              if (v59 <= 0)
              {
                if ((int)v15 <= v60)
                  return result;
                v15 = (v15 - 1);
                v62 = v57;
              }
              else
              {
                if (v16 == v17 || (unint64_t)v55 > a10)
                  return result;
                if ((unint64_t)v55 >= a9)
                {
                  v61 = v15;
                  result = (uint64_t)SET(*v55, v179, v15);
                  v15 = v61;
                }
                ++v55;
                ++v16;
                v62 = v54;
              }
              v59 += v62;
            }
          }
          if (v23 <= a10)
            v42 = v23;
          else
            v42 = a10 + 8;
          for (j = &v22[v41]; (unint64_t)j < v42; ++j)
          {
            if ((unint64_t)j >= a9)
            {
              v44 = v15;
              result = (uint64_t)SET(*j, v179, v15);
              v15 = v44;
            }
          }
        }
        return result;
      }
      v161 = result;
      v173 = a3 - result;
      v89 = (((int)result + 31) >> 6);
      v90 = a4 - a2;
      v137 = (a2 + 31) & 0xFFFFFFC0;
      v149 = (result + 31) & 0xFFFFFFC0;
      SET(*v22, v21, v15);
      v18 = v137;
      v14 = v149;
      result = v161;
      LODWORD(v20) = v173;
      LODWORD(v19) = v90;
      v15 = v89;
      v25 = 0;
    }
    v41 = 1;
    goto LABEL_55;
  }
  if ((int)v19 <= 0 && (v20 & 0x80000000) != 0)
  {
    if ((unint64_t)v22 < a9 || v23 > a10)
      return result;
    if ((unint64_t)v22 > a10)
    {
      v26 = 0;
LABEL_75:
      v50 = 0;
      goto LABEL_170;
    }
    v26 = (result & 0x3F) == 32;
    if ((a2 & 0x3F) != 0x20)
      goto LABEL_75;
    v46 = (result - a5) * v19;
    v47 = (a2 - a6) * v20;
    if ((result & 0x3F) == 0x20)
    {
      if (v46 < v47 || (int)result > a5 && a4 == a2 && a2 == a6)
      {
        v134 = (a2 + 31) & 0xFFFFFFC0;
        v144 = (result + 31) & 0xFFFFFFC0;
        v156 = result;
        v168 = a3 - result;
        v123 = ((int)result + 31) >> 6;
        v128 = a4 - a2;
        OFF((uint64_t)*v22, v21, v15 + 1);
        if (a2 > a6)
        {
          v49 = v123;
          SET(*v22, v179, v123);
          v26 = 1;
LABEL_145:
          v50 = 1;
          v15 = v49;
LABEL_169:
          result = v156;
          LODWORD(v20) = v168;
          LODWORD(v19) = v128;
          v18 = v134;
          v14 = v144;
          goto LABEL_170;
        }
        v26 = 1;
        goto LABEL_168;
      }
      v26 = 1;
      if (a4 < a2)
      {
        v50 = 1;
        if (a2 >= a6)
          goto LABEL_170;
        v104 = (((int)result + 31) >> 6);
        v162 = result;
        v174 = a3 - result;
        v130 = a4 - a2;
        v138 = (a2 + 31) & 0xFFFFFFC0;
        v150 = (result + 31) & 0xFFFFFFC0;
        OFF((uint64_t)*v22, v21, v15 + 1);
        v18 = v138;
        v14 = v150;
        result = v162;
        LODWORD(v20) = v174;
        LODWORD(v19) = v130;
        v15 = v104;
        v26 = 1;
      }
    }
    else
    {
      if (v46 < v47 || (int)result > a5 && a4 == a2 && a2 == a6)
      {
        v134 = (a2 + 31) & 0xFFFFFFC0;
        v144 = (result + 31) & 0xFFFFFFC0;
        v156 = result;
        v168 = a3 - result;
        v123 = ((int)result + 31) >> 6;
        v128 = a4 - a2;
        OFF((uint64_t)*v22, v21, v15);
        if (a2 > a6)
        {
          v49 = v123;
          SET(*v22, v179, v123);
          v26 = 0;
          goto LABEL_145;
        }
        v26 = 0;
LABEL_168:
        v50 = 1;
        v15 = v123;
        goto LABEL_169;
      }
      v26 = 0;
      v50 = 1;
      if (a4 >= a2 || a2 >= a6)
      {
LABEL_170:
        if (v17 != v16)
        {
          if (v178 == (_DWORD)v15)
          {
            if ((v11 & 0x3F) == 0x20)
              v91 = v17 + 1;
            else
              v91 = v17;
            v92 = a7 + 8 * v91;
            if (v92 >= a9)
              v93 = v92;
            else
              v93 = a9;
            for (k = (uint64_t *)(v22 - 1); (unint64_t)k >= v93; --k)
            {
              if ((unint64_t)k <= a10)
              {
                v95 = v15;
                result = OFF(*k, v179, v15);
                v15 = v95;
              }
            }
          }
          else
          {
            if (v50)
              v96 = -64;
            else
              v96 = v18 - a2 - 32;
            v97 = (_DWORD)v19 << 6;
            if (v26)
              v98 = (_DWORD)v19 << 6;
            else
              v98 = v19 * (result - v14 + 32);
            v99 = v98 + v96 * v20;
            v100 = (_DWORD)v20 << 6;
            if ((v11 & 0x3F) == 0x20)
              ++v17;
            if ((v12 & 0x3F) == 0x20)
              v101 = v178 + 1;
            else
              v101 = v178;
            while (1)
            {
              v102 = (uint64_t *)(v22 - 1);
              while (v99 < 1)
              {
                if (v16 <= v17 || (unint64_t)v102 < a9)
                  return result;
                if ((unint64_t)v102 <= a10)
                {
                  v103 = v15;
                  result = OFF(*v102, v179, v15);
                  v15 = v103;
                }
                v99 -= v100;
                --v102;
                --v16;
              }
              if ((int)v15 <= v101)
                break;
              v22 = (__int16 **)(v102 + 1);
              v15 = (v15 - 1);
              v99 += v97;
            }
          }
        }
        return result;
      }
      v163 = result;
      v175 = a3 - result;
      v105 = (((int)result + 31) >> 6);
      v131 = a4 - a2;
      v139 = (a2 + 31) & 0xFFFFFFC0;
      v151 = (result + 31) & 0xFFFFFFC0;
      OFF((uint64_t)*v22, v21, v15);
      v18 = v139;
      v14 = v151;
      result = v163;
      LODWORD(v20) = v175;
      LODWORD(v19) = v131;
      v15 = v105;
      v26 = 0;
    }
    v50 = 1;
    goto LABEL_170;
  }
  if ((v19 & 0x80000000) == 0 || (v20 & 0x80000000) != 0 || (unint64_t)v22 < a9 || v23 > a10)
    return result;
  if ((unint64_t)v22 > a10)
  {
    v27 = 0;
LABEL_128:
    v74 = 0;
    goto LABEL_214;
  }
  v27 = (result & 0x3F) == 32;
  if ((a2 & 0x3F) != 0x20)
    goto LABEL_128;
  v68 = (result - a5) * v19;
  v69 = (a2 - a6) * v20;
  if ((result & 0x3F) == 0x20)
  {
    if (v68 < v69 || a3 == (_DWORD)result && (_DWORD)result == a5 && a2 > a6)
    {
      v135 = (a2 + 31) & 0xFFFFFFC0;
      v145 = (result + 31) & 0xFFFFFFC0;
      v157 = result;
      v169 = a3 - result;
      v124 = ((int)result + 31) >> 6;
      v129 = a4 - a2;
      v70 = a8 + 1;
      OFF((uint64_t)*v22, v21, v15 + 1);
      if (a2 > a6)
      {
        v72 = v70;
        v73 = v124;
        SET(*v22, v72, v124);
        v27 = 1;
LABEL_158:
        v74 = 1;
        LODWORD(v15) = v73;
LABEL_213:
        result = v157;
        v20 = v169;
        v19 = v129;
        v18 = v135;
        v14 = v145;
        goto LABEL_214;
      }
      v27 = 1;
      goto LABEL_212;
    }
    v27 = 1;
    if (a4 < a2)
    {
      v74 = 1;
      if (a2 >= a6)
        goto LABEL_214;
      v119 = ((int)result + 31) >> 6;
      v164 = result;
      v176 = a3 - result;
      v120 = (a4 - a2);
      v140 = (a2 + 31) & 0xFFFFFFC0;
      v152 = (result + 31) & 0xFFFFFFC0;
      OFF((uint64_t)*v22, v21, v15 + 1);
      v18 = v140;
      v14 = v152;
      result = v164;
      v20 = v176;
      v19 = v120;
      LODWORD(v15) = v119;
      v27 = 1;
    }
    goto LABEL_254;
  }
  if (v68 < v69 || a3 == (_DWORD)result && (_DWORD)result == a5 && a2 > a6)
  {
    v135 = (a2 + 31) & 0xFFFFFFC0;
    v145 = (result + 31) & 0xFFFFFFC0;
    v157 = result;
    v169 = a3 - result;
    v124 = ((int)result + 31) >> 6;
    v129 = a4 - a2;
    v84 = a8 + 1;
    OFF((uint64_t)*v22, v21, v15);
    if (a2 > a6)
    {
      v86 = v84;
      v73 = v124;
      SET(*v22, v86, v124);
      v27 = 0;
      goto LABEL_158;
    }
    v27 = 0;
LABEL_212:
    v74 = 1;
    LODWORD(v15) = v124;
    goto LABEL_213;
  }
  v27 = 0;
  v74 = 1;
  if (a4 < a2 && a2 < a6)
  {
    v165 = result;
    v177 = a3 - result;
    v121 = ((int)result + 31) >> 6;
    v122 = (a4 - a2);
    v141 = (a2 + 31) & 0xFFFFFFC0;
    v153 = (result + 31) & 0xFFFFFFC0;
    OFF((uint64_t)*v22, v21, v15);
    v18 = v141;
    v14 = v153;
    result = v165;
    v20 = v177;
    v19 = v122;
    LODWORD(v15) = v121;
    v27 = 0;
LABEL_254:
    v74 = 1;
  }
LABEL_214:
  if (v17 != v16)
  {
    if (v178 != (_DWORD)v15)
    {
      if (v74)
        v111 = -64;
      else
        v111 = v18 - a2 - 32;
      v112 = v111 * v20;
      if ((v27 & 1) != 0)
        v113 = v15 + 1;
      else
        v113 = v15;
      if ((v27 & 1) != 0)
        v114 = (_DWORD)v19 << 6;
      else
        v114 = v19 * (v14 - result + 32);
      v115 = v112 - v114;
      if ((v11 & 0x3F) == 0x20)
        ++v17;
      while (1)
      {
        if (v115 <= 0)
        {
          if (v113 == v178)
            return result;
          ++v113;
          v116 = v19;
        }
        else
        {
          if (v16 <= v17)
            return result;
          if ((unint64_t)--v22 < a9)
            return result;
          --v16;
          if ((unint64_t)v22 <= a10)
          {
            v117 = v20;
            v118 = v19;
            result = OFF((uint64_t)*v22, v179, v113);
            v19 = v118;
            v20 = v117;
            v116 = v117;
          }
          else
          {
            v116 = v20;
          }
        }
        v115 -= v116 << 6;
      }
    }
    if ((v11 & 0x3F) == 0x20)
      v106 = v17 + 1;
    else
      v106 = v17;
    v107 = a7 + 8 * v106;
    if (v107 >= a9)
      v108 = v107;
    else
      v108 = a9;
    v109 = (uint64_t *)(v22 - 1);
    if ((unint64_t)(v22 - 1) >= v108)
    {
      v110 = v15 + v27;
      do
      {
        if ((unint64_t)v109 <= a10)
          result = OFF(*v109, v179, v110);
        --v109;
      }
      while ((unint64_t)v109 >= v108);
    }
  }
  return result;
}

__int16 *SET(__int16 *result, int a2, __int16 a3)
{
  uint64_t v3;
  _WORD *exception;

  v3 = *result + 1;
  *result = v3;
  if ((_DWORD)v3 != (__int16)v3 || (__int16)v3 >= a2)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  result[v3] = a3;
  return result;
}

uint64_t OFF(uint64_t result, int a2, __int16 a3)
{
  __int16 *v3;
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  _WORD *exception;

  v3 = (__int16 *)(result + 2 * a2);
  v4 = *v3;
  v5 = ++*v3;
  if (v4 + 1 == (__int16)(v4 + 1))
  {
    v7 = __OFSUB__(v5, a2);
    v6 = v5 - a2 < 0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  if (v6 == v7)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  v3[~v4] = a3;
  return result;
}

void sc_FindExtrema4(uint64_t a1, __int16 *a2, int a3, memoryContext **a4)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  size_t *v10;
  __int16 *v11;
  uint64_t (*v12)(uint64_t, unint64_t, unsigned int);
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  __int16 *v33;
  int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  __int16 *v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int16 *v51;
  int v52;
  int v53;
  __int16 *v54;
  __int16 *v55;
  int v56;
  int v57;
  __int16 v58;
  int v59;
  int v60;
  int v61;
  char *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  memoryContext *v67;
  __int16 v68;
  int v69;
  _BOOL4 v70;
  __int16 *v71;
  __int16 v72;
  int v73;
  int v74;
  int v75;
  memoryContext *v77;
  unsigned int v78;
  char *v79;
  int v80;
  int v81;
  __int16 *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int16 *v91;
  uint64_t v93;
  char *v94;
  int v95;
  int *v96;
  int *v97;
  _QWORD v98[2];
  uint64_t (*v99)(uint64_t, unint64_t, unsigned int);
  void *v100;
  size_t *v101;
  char *v102;

  v5 = a2[20];
  v6 = a2[21];
  v77 = *a4;
  v73 = a2[22];
  v74 = a2[23];
  v7 = v74 - v6 + 1;
  v75 = v73 - v5;
  if (a3)
    v8 = v73 - v5 + 1;
  else
    v8 = 0;
  v9 = v7 + v8;
  v10 = ScalerNewScratch(*a4, 2 * (v7 + v8), 1);
  v78 = v74 - v6 + 1;
  v11 = (__int16 *)v10 + v7;
  v98[0] = MEMORY[0x1E0C809B0];
  v98[1] = 0x40000000;
  v12 = ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke;
  v99 = ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke;
  v100 = &__block_descriptor_tmp_5;
  v13 = v10;
  v101 = v10;
  v102 = (char *)v10 + 2 * v9;
  v14 = *(_DWORD *)a1;
  v79 = (char *)v10;
  if (*(int *)a1 >= 1)
  {
    v15 = 0;
    v94 = (char *)v10 - 2 * v6;
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 32);
    v91 = &v11[-v5];
    v82 = v11;
    v80 = v6;
    v81 = v5;
    v89 = a1;
    do
    {
      v18 = *(unsigned __int16 *)(v17 + 2 * v15);
      v19 = *(unsigned __int16 *)(v16 + 2 * v15);
      if ((_DWORD)v19 != (_DWORD)v18)
      {
        v20 = *(_QWORD *)(a1 + 8);
        v21 = *(_QWORD *)(a1 + 16);
        v22 = (int *)(v20 + 4 * v19);
        v23 = (int *)(v21 + 4 * v19);
        if (*v22 == *(_DWORD *)(v20 + 4 * *(unsigned __int16 *)(v17 + 2 * v15)) && *v23 == *(_DWORD *)(v21 + 4 * v18))
        {
          LODWORD(v18) = v18 - 1;
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + v19) |= 1u;
        }
        v85 = v18;
        v86 = v15;
        if ((int)v18 >= (int)v19)
        {
          v24 = 0;
          v25 = v22[v18 - v19];
          v26 = (v25 + 31) >> 6;
          v27 = v23[v18 - v19];
          v28 = (v27 + 31) >> 6;
          v93 = (v18 + 1);
          v87 = v20 + 4 * v19 - 8;
          v88 = v21 + 4 * v19 - 8;
          v83 = 1 - v19;
          v29 = v19;
          v84 = v19;
          v90 = v19;
          do
          {
            v30 = v27;
            v27 = *v23;
            v31 = (*v23 + 31) >> 6;
            v32 = *v22;
            v33 = (__int16 *)&v94[2 * v28];
            v96 = v23 + 1;
            v97 = v22 + 1;
            v95 = v31;
            if (*v23 <= v30)
            {
              if (v27 >= v30)
              {
                if (v32 == v25)
                {
                  v47 = *(_QWORD *)(v89 + 40);
                  *(_BYTE *)(v47 + v29) |= 1u;
                  if ((int)v29 - v90 - 2 >= 0)
                  {
                    v48 = v47 + v84 - 2;
                    v49 = v24;
                    do
                    {
                      *(_DWORD *)(v87 + 4 * v49 + 4) = *(_DWORD *)(v87 + 4 * v49);
                      *(_DWORD *)(v88 + 4 * v49 + 4) = *(_DWORD *)(v88 + 4 * v49);
                      *(_BYTE *)(v48 + v49 + 1) = *(_BYTE *)(v48 + v49);
                      --v49;
                    }
                    while (v83 + v90 != (_DWORD)v49);
                  }
                  ++v90;
                }
              }
              else
              {
                v33 = (__int16 *)&v94[2 * v31];
                v41 = v28 - v31;
                v42 = (*v23 + 31) >> 6;
                v43 = v99((uint64_t)v98, (unint64_t)v33, v28 - v31);
                if (v41)
                  v44 = v43 == 0;
                else
                  v44 = 1;
                if (!v44)
                {
                  v45 = v42 - v28;
                  do
                  {
                    v46 = v33++;
                    ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v46, 1);
                    v40 = __CFADD__(v45++, 1);
                  }
                  while (!v40);
                }
              }
            }
            else
            {
              v34 = v31 - v28;
              v35 = (*v23 + 31) >> 6;
              v36 = v99((uint64_t)v98, (unint64_t)v33, v31 - v28);
              if (v34)
                v37 = v36 == 0;
              else
                v37 = 1;
              if (!v37)
              {
                v38 = v28 - v35;
                do
                {
                  v39 = v33++;
                  ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v39, 1);
                  v40 = __CFADD__(v38++, 1);
                }
                while (!v40);
              }
            }
            if ((v27 & 0x3F) == 0x20 && v99((uint64_t)v98, (unint64_t)v33, 1u))
              ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v33, 2);
            v50 = (v32 + 31) >> 6;
            if (a3)
            {
              v51 = &v91[v26];
              if (v32 <= v25)
              {
                if (v32 < v25)
                {
                  v55 = &v91[v50];
                  v56 = v99((uint64_t)v98, (unint64_t)v55, v26 - v50);
                  if (v26 == v50 || !v56)
                  {
                    v51 = &v91[v50];
                  }
                  else
                  {
                    v57 = v50 - v26;
                    do
                    {
                      v51 = v55 + 1;
                      ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v55++, 1);
                      v40 = __CFADD__(v57++, 1);
                    }
                    while (!v40);
                  }
                }
              }
              else
              {
                v52 = v99((uint64_t)v98, (unint64_t)&v91[v26], v50 - v26);
                if (v50 != v26 && v52)
                {
                  v53 = v26 - v50;
                  v54 = v51;
                  do
                  {
                    v51 = v54 + 1;
                    ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v54, 1);
                    v54 = v51;
                    v40 = __CFADD__(v53++, 1);
                  }
                  while (!v40);
                }
              }
              if ((v32 & 0x3F) == 0x20)
                ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v51, 2);
            }
            ++v29;
            ++v24;
            v28 = v95;
            v26 = (v32 + 31) >> 6;
            v25 = v32;
            v23 = v96;
            v22 = v97;
          }
          while (v29 != v93);
        }
        else
        {
          v90 = v19;
        }
        v15 = v86;
        v58 = v90;
        if (v90 >= v85)
          v58 = v85;
        a1 = v89;
        v16 = *(_QWORD *)(v89 + 24);
        v17 = *(_QWORD *)(v89 + 32);
        *(_WORD *)(v16 + 2 * v86) = v58;
        *(_WORD *)(v17 + 2 * v86) = v85;
        v14 = *(_DWORD *)v89;
        v11 = v82;
        v6 = v80;
        v5 = v81;
      }
      ++v15;
    }
    while (v15 < v14);
    v12 = v99;
    v13 = v79;
  }
  v59 = v12((uint64_t)v98, (unint64_t)v13, v78);
  v60 = 0;
  if (v78 && v59)
  {
    v60 = 0;
    v61 = ~v74 + v6;
    v62 = v79;
    do
    {
      v64 = *(__int16 *)v62;
      v62 += 2;
      v63 = v64;
      if (v60 <= v64)
        v60 = v63;
      v40 = __CFADD__(v61++, 1);
    }
    while (!v40);
  }
  if (!a3 || !v99((uint64_t)v98, (unint64_t)v11, v75 + 1) || v75 == -1)
  {
    v70 = v60 == 0;
    v71 = a2;
    v67 = v77;
LABEL_81:
    LOWORD(v65) = 2;
    goto LABEL_82;
  }
  v65 = 0;
  v66 = ~v73 + v5;
  v67 = v77;
  do
  {
    v68 = *v11++;
    v69 = v68;
    if (v65 <= v68)
      v65 = v69;
    v40 = __CFADD__(v66++, 1);
  }
  while (!v40);
  v70 = v60 == 0;
  v71 = a2;
  if (!v65)
    goto LABEL_81;
LABEL_82:
  v71[24] = v65;
  if (v70)
    v72 = 2;
  else
    v72 = v60;
  v71[25] = v72;
  ScalerDisposeBlock(v67, v79, -1);
}

uint64_t ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _WORD *exception;

  if ((a3 & 0x80000000) != 0
    || *(_QWORD *)(a1 + 32) > a2
    || ((v3 = *(_QWORD *)(a1 + 40), v4 = a2 + 2 * a3, v3 >= a2) ? (v5 = v4 >= v3, v6 = v4 == v3) : (v5 = 1, v6 = 0),
        !v6 && v5))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return 1;
}

__int16 *sortTransitions(__int16 *a1, int a2)
{
  __int16 *v4;

  if (*a1 >= 2)
    std::__sort<std::__less<short,short> &,short *>();
  v4 = &a1[a2];
  if (*v4 >= 2)
    std::__sort<std::__less<short,short> &,short *>();
  return v4 + 1;
}

uint64_t nUpperXings(__int16 **a1, __int16 **a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9)
{
  __int16 *v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  __int16 *v13;
  __int16 *v14;
  uint64_t v15;
  __int16 *v16;
  int v17;
  int v18;
  __int16 *v19;
  unint64_t v20;
  int v21;
  int v22;
  __int16 *v23;
  __int16 *v24;
  uint64_t v25;
  __int16 *v26;
  int v27;
  int v28;
  __int16 *v29;
  unint64_t v30;
  int v31;
  int v32;
  __int16 *v33;
  __int16 *v34;
  uint64_t v35;
  __int16 *v36;
  int v37;

  if (a3 >= a9)
  {
    result = 0;
  }
  else
  {
    v9 = a1[a3 + 1];
    v10 = (unint64_t)v9;
    while (1)
    {
      if (v10 >= (unint64_t)&v9[*v9])
      {
LABEL_6:
        result = 0;
        goto LABEL_9;
      }
      v11 = *(unsigned __int16 *)(v10 + 2);
      if (v11 == (unsigned __int16)a4)
        break;
      v10 += 2;
      if ((__int16)v11 > a4)
        goto LABEL_6;
    }
    result = 1;
LABEL_9:
    v13 = &v9[a5];
    v15 = v13[1];
    v14 = v13 + 1;
    v16 = &v14[-v15];
    while (v14 > v16)
    {
      v17 = (unsigned __int16)*(v14 - 1);
      if (v17 == (unsigned __int16)a4)
      {
        if ((result & 1) != 0)
          return 2;
        result = 1;
        break;
      }
      --v14;
      if ((__int16)v17 < a4)
        break;
    }
  }
  if (a4 > a7)
  {
    v18 = (__int16)(a3 + 1);
    v19 = a2[a4 - 1];
    v20 = (unint64_t)v19;
    while (1)
    {
      if (v20 >= (unint64_t)&v19[*v19])
      {
LABEL_22:
        v22 = 0;
        goto LABEL_24;
      }
      v21 = *(unsigned __int16 *)(v20 + 2);
      if (v21 == (unsigned __int16)v18)
        break;
      v20 += 2;
      if ((__int16)v21 > v18)
        goto LABEL_22;
    }
    v22 = 1;
LABEL_24:
    v23 = &v19[a6];
    v25 = v23[1];
    v24 = v23 + 1;
    v26 = &v24[-v25];
    while (v24 > v26)
    {
      v27 = (unsigned __int16)*(v24 - 1);
      if (v27 == (unsigned __int16)v18)
      {
        ++v22;
        break;
      }
      --v24;
      if ((__int16)v27 < v18)
        break;
    }
    result = (v22 + result);
  }
  if (a4 < a8 && (int)result <= 1)
  {
    v28 = (__int16)(a3 + 1);
    v29 = a2[a4];
    v30 = (unint64_t)v29;
    while (1)
    {
      if (v30 >= (unint64_t)&v29[*v29])
      {
LABEL_37:
        v32 = 0;
        goto LABEL_39;
      }
      v31 = *(unsigned __int16 *)(v30 + 2);
      if (v31 == (unsigned __int16)v28)
        break;
      v30 += 2;
      if ((__int16)v31 > v28)
        goto LABEL_37;
    }
    v32 = 1;
LABEL_39:
    v33 = &v29[a6];
    v35 = v33[1];
    v34 = v33 + 1;
    v36 = &v34[-v35];
    while (v34 > v36)
    {
      v37 = (unsigned __int16)*(v34 - 1);
      if (v37 == (unsigned __int16)v28)
        return (++v32 + result);
      --v34;
      if ((__int16)v37 < v28)
        return (v32 + result);
    }
    return (v32 + result);
  }
  return result;
}

uint64_t nLowerXings(__int16 **a1, __int16 **a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9)
{
  __int16 *v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  __int16 *v13;
  __int16 *v14;
  uint64_t v15;
  __int16 *v16;
  int v17;
  __int16 *v18;
  unint64_t v19;
  int v20;
  int v21;
  __int16 *v22;
  __int16 *v23;
  uint64_t v24;
  __int16 *v25;
  int v26;
  __int16 *v27;
  unint64_t v28;
  int v29;
  int v30;
  __int16 *v31;
  __int16 *v32;
  uint64_t v33;
  __int16 *v34;
  int v35;

  if (a3 <= a9)
  {
    result = 0;
  }
  else
  {
    v9 = a1[a3 - 1];
    v10 = (unint64_t)v9;
    while (1)
    {
      if (v10 >= (unint64_t)&v9[*v9])
      {
LABEL_6:
        result = 0;
        goto LABEL_9;
      }
      v11 = *(unsigned __int16 *)(v10 + 2);
      if (v11 == (unsigned __int16)a4)
        break;
      v10 += 2;
      if ((__int16)v11 > a4)
        goto LABEL_6;
    }
    result = 1;
LABEL_9:
    v13 = &v9[a5];
    v15 = v13[1];
    v14 = v13 + 1;
    v16 = &v14[-v15];
    while (v14 > v16)
    {
      v17 = (unsigned __int16)*(v14 - 1);
      if (v17 == (unsigned __int16)a4)
      {
        if ((result & 1) != 0)
          return 2;
        result = 1;
        break;
      }
      --v14;
      if ((__int16)v17 < a4)
        break;
    }
  }
  if (a4 > a7)
  {
    v18 = a2[a4 - 1];
    v19 = (unint64_t)v18;
    while (1)
    {
      if (v19 >= (unint64_t)&v18[*v18])
      {
LABEL_22:
        v21 = 0;
        goto LABEL_24;
      }
      v20 = *(unsigned __int16 *)(v19 + 2);
      if (v20 == (unsigned __int16)a3)
        break;
      v19 += 2;
      if ((__int16)v20 > a3)
        goto LABEL_22;
    }
    v21 = 1;
LABEL_24:
    v22 = &v18[a6];
    v24 = v22[1];
    v23 = v22 + 1;
    v25 = &v23[-v24];
    while (v23 > v25)
    {
      v26 = (unsigned __int16)*(v23 - 1);
      if (v26 == (unsigned __int16)a3)
      {
        ++v21;
        break;
      }
      --v23;
      if ((__int16)v26 < a3)
        break;
    }
    result = (v21 + result);
  }
  if (a4 < a8 && (int)result <= 1)
  {
    v27 = a2[a4];
    v28 = (unint64_t)v27;
    while (1)
    {
      if (v28 >= (unint64_t)&v27[*v27])
      {
LABEL_37:
        v30 = 0;
        goto LABEL_39;
      }
      v29 = *(unsigned __int16 *)(v28 + 2);
      if (v29 == (unsigned __int16)a3)
        break;
      v28 += 2;
      if ((__int16)v29 > a3)
        goto LABEL_37;
    }
    v30 = 1;
LABEL_39:
    v31 = &v27[a6];
    v33 = v31[1];
    v32 = v31 + 1;
    v34 = &v32[-v33];
    while (v32 > v34)
    {
      v35 = (unsigned __int16)*(v32 - 1);
      if (v35 == (unsigned __int16)a3)
        return (++v30 + result);
      --v32;
      if ((__int16)v35 < a3)
        return (v30 + result);
    }
    return (v30 + result);
  }
  return result;
}

uint64_t FPRMNewMappedRefFromMappedFork(unsigned int *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 < 70)
    return 4294967246;
  v4 = a2;
  v6 = CheckMapHeaderCommon(a1, a2);
  if ((_DWORD)v6)
    return v6;
  *a3 = 0;
  v7 = malloc_type_malloc(0x38uLL, 0x10300402A82DD23uLL);
  if (!v7)
    return 4294967188;
  v8 = v7;
  *v7 = -1;
  v7[1] = v4;
  *((_BYTE *)v7 + 48) = 1;
  v9 = a1[2];
  v7[6] = bswap32(a1[3]);
  v10 = a1[1];
  *((_QWORD *)v7 + 4) = (char *)a1 + bswap32(*a1);
  v11 = (uint64_t)a1 + bswap32(v10);
  *((_QWORD *)v7 + 1) = a1;
  *((_QWORD *)v7 + 2) = v11;
  v7[10] = bswap32(v9);
  v12 = CheckMapCommon(a1, v11);
  if ((_DWORD)v12)
    free(v8);
  else
    *a3 = v8;
  return v12;
}

uint64_t CheckMapHeaderCommon(unsigned int *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  unsigned int v9;
  unint64_t v10;

  v2 = bswap32(a1[1]);
  if (v2 > a2 - 30 || v2 - 0x1000000 < 0xFF000028)
    return -199;
  v4 = bswap32(a1[3]);
  if (v4 - 131357 < 0xFFFDFF01)
    return -199;
  v5 = a2 - 40;
  if (v5 < v4)
    return -199;
  v6 = v4 + v2;
  if (v4 + v2 > a2)
    return -199;
  v7 = bswap32(*a1);
  v8 = -199;
  if (v7 >= 0x28 && v7 <= a2)
  {
    v9 = a1[2];
    v10 = bswap32(v9);
    if (v5 >= v10 && !BYTE3(v10) && v10 + v7 <= a2)
    {
      if (v2 > v7)
      {
        if (v10 + v7 > v2)
          return v8;
        return 0;
      }
      if (v2 < v7)
      {
        if (v6 > v7)
          return v8;
        return 0;
      }
      if (!v9)
        return 0;
    }
  }
  return v8;
}

uint64_t CheckMapCommon(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned __int16 v11;
  __int16 v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int v20;
  int v21;
  char *v22;
  __int16 v23;
  unsigned int v24;
  unsigned __int8 *v25;

  v2 = bswap32(a1[3]);
  v3 = bswap32(a1[2]);
  v4 = v3 + bswap32(*a1);
  v5 = bswap32(a1[1]) + v2;
  if (v4 > v5)
    v5 = v4;
  if (v5 > 0xFFFFFE)
    return -199;
  v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 & 0x100) != 0)
    return -199;
  v7 = a2 + v2;
  v8 = (unsigned __int16 *)(a2 + __rev16(v6));
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > v7)
    return -199;
  v10 = bswap32(*v8) >> 16;
  v11 = v10 + 1;
  v12 = -199;
  if ((((_WORD)v10 + 1) & 0x8000) == 0 && (unint64_t)&v9[4 * (__int16)v11] <= v7)
  {
    v13 = *(unsigned __int16 *)(a2 + 26);
    if (v13 == 0xFFFF)
    {
      v14 = 0;
    }
    else
    {
      v14 = a2 + __rev16(v13);
      if (v14 > v7)
        return v12;
    }
    if (v10 <= 0x7FFE)
    {
      v15 = 0;
      LOWORD(v16) = 0;
      v17 = v3 - 4;
LABEL_14:
      v18 = &v9[4 * v15];
      v19 = bswap32(v18[2]);
      v20 = HIWORD(v19) + 1;
      v21 = (unsigned __int16)(HIWORD(v19) + 1);
      if (v21 == v20)
      {
        v22 = (char *)v8 + (bswap32(v18[3]) >> 16);
        if ((unint64_t)&v22[12 * v21] <= v7)
        {
          v23 = 0;
          while (1)
          {
            v24 = *(unsigned __int16 *)&v22[12 * v23 + 2];
            if (v24 != 0xFFFF)
            {
              if (!v14)
                break;
              v25 = (unsigned __int8 *)(v14 + __rev16(v24));
              if ((unint64_t)v25 >= v7 || (unint64_t)&v25[*v25 + 1] > v7)
                break;
            }
            if (bswap32(*(_DWORD *)&v22[12 * v23 + 4] & 0xFFFFFF00) > v17)
              break;
            if (v21 <= ++v23)
            {
              v16 = v21 + (__int16)v16;
              v12 = -199;
              if (v16 != v16 << 15 >> 15 || (v16 & 0x1FFFF) != ((__int16)v16 & 0x1FFFF))
                return v12;
              if (++v15 != v11)
                goto LABEL_14;
              return 0;
            }
          }
        }
      }
      return -199;
    }
    return 0;
  }
  return v12;
}

unsigned int *GetResourcePtrCommon(unsigned int *result, int a2, unsigned __int16 a3, int a4, _QWORD *a5, int *a6, unsigned __int8 *a7, _BYTE *a8)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v15;
  int v16;
  unsigned __int16 *i;
  unsigned int v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unsigned int *v29;
  signed int v30;
  uint64_t v31;
  char v32;

  if (!result)
    return result;
  v8 = result;
  v9 = *((_QWORD *)result + 2);
  v10 = bswap32(*(unsigned __int16 *)(v9 + 24)) >> 16;
  v11 = bswap32(*(unsigned __int16 *)(v9 + v10)) >> 16;
  if (v11 > 0x7FFE)
    return 0;
  v15 = v9 + (bswap32(*(unsigned __int16 *)(v9 + 26)) >> 16);
  v16 = (unsigned __int16)(v11 + 1);
  for (i = (unsigned __int16 *)(v10 + v9 + 6); bswap32(*((_DWORD *)i - 1)) != a2; i += 4)
  {
    if (!--v16)
      return 0;
  }
  v18 = (bswap32(*i) >> 16) + 1;
  v19 = a4 - 1;
  v20 = (_DWORD *)((bswap32(i[1]) >> 16) + v10 + v9 + 4);
  while (!a7)
  {
    if (a4 == -1)
    {
      if (bswap32(*((unsigned __int16 *)v20 - 2)) >> 16 == a3)
        goto LABEL_20;
    }
    else if (!v19)
    {
      goto LABEL_20;
    }
LABEL_17:
    --v19;
    v20 += 3;
    if (!--v18)
      return 0;
  }
  v21 = *((unsigned __int16 *)v20 - 1);
  if (v21 == 0xFFFF)
    goto LABEL_17;
  v22 = (unsigned __int8 *)(v15 + __rev16(v21));
  v23 = *a7;
  if (v23 != *v22 || TextCompare(a7 + 1, v22 + 1, v23, *a7, 0, 1))
    goto LABEL_17;
LABEL_20:
  v24 = *v20 & 0xFFFFFF00;
  if (a6)
    *a6 = (int)bswap32(*((unsigned __int16 *)v20 - 2)) >> 16;
  v25 = bswap32(v24);
  if (a8)
  {
    v26 = *((unsigned __int16 *)v20 - 1);
    if (v26 == 0xFFFF)
    {
      *a8 = 0;
    }
    else
    {
      v27 = (unsigned __int8 *)(v15 + __rev16(v26));
      memmove(a8, v27, *v27 + 1);
    }
  }
  v28 = v8[10];
  if (v25 > v28)
    return 0;
  v29 = (unsigned int *)(*((_QWORD *)v8 + 4) + v25);
  v30 = bswap32(*v29);
  v31 = v30 >= 0 ? v30 : -(uint64_t)v30;
  if (v31 + (unint64_t)v25 > v28)
    return 0;
  v32 = *(_BYTE *)v20;
  result = v29 + 1;
  if (a5)
    *a5 = v30;
  if ((v32 & 1) != 0 && *result == 1919262632)
    return 0;
  return result;
}

uint64_t FPRMGetResourceCount(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned __int16 *i;

  if (result)
  {
    v2 = *(_QWORD *)(result + 16);
    v3 = bswap32(*(unsigned __int16 *)(v2 + 24)) >> 16;
    v4 = bswap32(*(unsigned __int16 *)(v2 + v3)) >> 16;
    if (v4 > 0x7FFE)
    {
      return 0;
    }
    else
    {
      v5 = (unsigned __int16)(v4 + 1);
      for (i = (unsigned __int16 *)(v3 + v2 + 6); bswap32(*((_DWORD *)i - 1)) != a2; i += 4)
      {
        if (!--v5)
          return 0;
      }
      return (bswap32(*i) >> 16) + 1;
    }
  }
  return result;
}

BOOL THierVariationsFont::IsHierVariationsFont(THierVariationsFont *this, const TSFNTFont *a2)
{
  const TSFNTFont *v3;
  _BOOL8 HasTableTags;
  _BYTE v6[20];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  qmemcpy(v6, "lgvhdaehaehhxtmhpxam", sizeof(v6));
  HasTableTags = TSFNTFont::HasTableTags(this, (uint64_t)v6, 5);
  if (HasTableTags)
    TTrueTypeFont::ThrowIfInvalid(this, v3);
  return HasTableTags;
}

THierVariationsDataForkFont *HierVariationsFontCreate(const TFileDataSurrogate *a1)
{
  THierVariationsDataForkFont *v2;

  v2 = (THierVariationsDataForkFont *)operator new();
  THierVariationsDataForkFont::THierVariationsDataForkFont(v2, a1);
  return v2;
}

void sub_1B0A04694(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  _DWORD *exception;

  MEMORY[0x1B5E0CD38](v2, 0x10F1C405421BE5ALL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  _Unwind_Resume(a1);
}

void THierVariationsDataForkFont::THierVariationsDataForkFont(THierVariationsDataForkFont *this, const TFileDataSurrogate *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  HVF::Loader *v8;

  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &off_1E6176770;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 33) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = &off_1E6176770;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 23) = -1;
  *((_DWORD *)this + 48) = 0;
  *(_QWORD *)this = &off_1E61CAFF0;
  *((_QWORD *)this + 2) = &unk_1E61CB200;
  *((_QWORD *)this + 3) = 0;
  v4 = (*(uint64_t (**)(const TFileDataSurrogate *))(*(_QWORD *)a2 + 48))(a2);
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 25) = &off_1E61766C0;
  *((_QWORD *)this + 26) = v5;
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 24))(v5 + 24);
  *((_QWORD *)this + 25) = &off_1E6176630;
  *((_DWORD *)this + 54) = v4;
  TSFNTFont::GetTable(this, 1752590188, 0, (_QWORD *)this + 28);
  v6 = *((_QWORD *)this + 29);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    v8 = (HVF::Loader *)(v7 + *((_QWORD *)this + 30));
  else
    v8 = 0;
  HVF::Loader::withTableData(v8, (const void *)(*((_QWORD *)this + 31) - *((_QWORD *)this + 30)));
}

void sub_1B0A0483C(_Unwind_Exception *a1)
{
  const TFileFragmentReference **v1;
  TDataReference *v2;

  TDataReference::~TDataReference(v2);
  TFileDataSurrogate::~TFileDataSurrogate(v1 + 25);
  TSFNTFont::~TSFNTFont((TSFNTFont *)v1);
  _Unwind_Resume(a1);
}

void THierVariationsDataForkFont::~THierVariationsDataForkFont(THierVariationsDataForkFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61CAFF0;
  *((_QWORD *)this + 2) = &unk_1E61CB200;
  v2 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 28) = &off_1E6176770;
  TDataReference::DucRefCount((THierVariationsDataForkFont *)((char *)this + 224));
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 25);
  TSFNTFont::~TSFNTFont(this);
}

{
  THierVariationsDataForkFont::~THierVariationsDataForkFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'THierVariationsDataForkFont::~THierVariationsDataForkFont(THierVariationsDataForkFont *this)
{
  THierVariationsDataForkFont::~THierVariationsDataForkFont((THierVariationsDataForkFont *)((char *)this - 16));
}

{
  THierVariationsDataForkFont::~THierVariationsDataForkFont((THierVariationsDataForkFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t THierVariationsDataForkFont::GetRefCon(THierVariationsDataForkFont *this)
{
  return *((unsigned int *)this + 54);
}

uint64_t THierVariationsDataForkFont::GetFontRef(THierVariationsDataForkFont *this)
{
  return (uint64_t)this + 200;
}

void THierVariationsFontHandler::~THierVariationsFontHandler(THierVariationsFontHandler *this)
{
  *(_QWORD *)this = &off_1E61CAD80;
  if (*((_BYTE *)this + 568))
    MEMORY[0x1B5E0CC60]((char *)this + 144);
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,2ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)this + 96);
  TSFNTFontHandler::~TSFNTFontHandler(this);
}

{
  THierVariationsFontHandler::~THierVariationsFontHandler(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t THierVariationsDataForkFont::MakeHandler(const TSFNTFont *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  size_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = off_1E61C8FC0;
  *(_QWORD *)(v4 + 8) = a1;
  ThmtxTable::ThmtxTable(v4 + 16, a1, 0);
  *(_QWORD *)v4 = &off_1E61CAD80;
  *(_QWORD *)(v4 + 96) = 0;
  v5 = (char *)(v4 + 120);
  *(_QWORD *)(v4 + 128) = v4 + 120;
  v6 = (char *)(v4 + 128);
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_DWORD *)(v4 + 136) = 0;
  *(_BYTE *)(v4 + 144) = 0;
  *(_BYTE *)(v4 + 568) = 0;
  v7 = *a2;
  if (*a2)
  {
    if (v7 < 0)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v8 = &v5[2 * v7];
    if (v8 <= v6)
    {
      *(_QWORD *)v6 = v8;
      v9 = 2 * v7;
    }
    else
    {
      v9 = 2 * v7;
      v5 = (char *)operator new(2 * v7);
    }
    bzero(v5, v9);
    *(_QWORD *)(v4 + 96) = v5;
    *(_QWORD *)(v4 + 104) = &v5[v9];
    *(_QWORD *)(v4 + 112) = &v5[2 * v7];
  }
  else
  {
    v5 = 0;
  }
  (*(void (**)(const TSFNTFont *, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 408))(a1, v7, a2[1], v5);
  *(_QWORD *)v4 = &off_1E61CAE18;
  return v4;
}

void sub_1B0A04AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10F1C40F8E32245);
  _Unwind_Resume(a1);
}

void THierVariationsFontDataHandler::~THierVariationsFontDataHandler(THierVariationsFontDataHandler *this)
{
  THierVariationsFontHandler::~THierVariationsFontHandler(this);
  JUMPOUT(0x1B5E0CD38);
}

void THierVariationsFontHandler::GetOutlinePath(uint64_t a1, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t (***v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  __int16 *v14;
  unint64_t v15;
  __int16 *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;
  unsigned int v23;
  os_unfair_lock_t lock;
  double v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t (***v30)();
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  if (!*(_BYTE *)(a1 + 568))
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 504))(*(_QWORD *)(a1 + 8));
    if (!v8)
    {
LABEL_39:
      os_unfair_lock_unlock(v7);
      return;
    }
    if (*(_BYTE *)(a1 + 568))
    {
      MEMORY[0x1B5E0CC60](a1 + 144);
      *(_BYTE *)(a1 + 568) = 0;
    }
    v27 = &off_1E61CAF60;
    v28 = (uint64_t (***)())v8;
    v30 = &v27;
    MEMORY[0x1B5E0CC54](a1 + 144, a2, &v27, 0);
    v9 = v30;
    if (v30 == &v27)
    {
      v10 = 4;
      v9 = &v27;
    }
    else
    {
      if (!v30)
      {
LABEL_12:
        *(_BYTE *)(a1 + 568) = 1;
        *(_DWORD *)(a1 + 140) = 0;
        goto LABEL_13;
      }
      v10 = 5;
    }
    (*v9)[v10]();
    goto LABEL_12;
  }
  HVF::PartTransformRenderer::setRenderPart((HVF::PartTransformRenderer *)(a1 + 144));
  if (!*(_BYTE *)(a1 + 568))
    goto LABEL_42;
LABEL_13:
  v11 = *(_QWORD *)(a1 + 408);
  if (!v11)
    goto LABEL_39;
  lock = v7;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v13 = *(__int16 **)(a1 + 96);
  v14 = *(__int16 **)(a1 + 104);
  if (v13 != v14)
  {
    v15 = v12;
    v16 = *(__int16 **)(a1 + 96);
    while (1)
    {
      v17 = *v16;
      if (!*v16)
        goto LABEL_31;
      v26 = ((uint64_t)v13 - *(_QWORD *)(a1 + 96)) >> 1;
      if (v26 >= v15)
        goto LABEL_32;
      v25 = (double)v17 * 0.0000610351562;
      if (!*(_BYTE *)(a1 + 568))
        goto LABEL_42;
      v18 = *(_QWORD *)(a1 + 296);
      if (!v18)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, unint64_t *))(*(_QWORD *)v18 + 48))(&v27, v18, &v26);
      if (!v32)
        std::__throw_bad_function_call[abi:fe180100]();
      (*(void (**)(_BYTE *, double *))(*(_QWORD *)v32 + 48))(v32, &v25);
      v19 = v32;
      if (v32 == v31)
        break;
      if (v32)
      {
        v20 = 5;
LABEL_25:
        (*(void (**)(void))(*v19 + 8 * v20))();
      }
      v21 = v30;
      if (v30 == &v27)
      {
        v21 = &v27;
        v22 = 4;
        goto LABEL_30;
      }
      if (v30)
      {
        v22 = 5;
LABEL_30:
        (*v21)[v22]();
      }
LABEL_31:
      ++v16;
      ++v13;
      if (v16 == v14)
        goto LABEL_32;
    }
    v19 = v31;
    v20 = 4;
    goto LABEL_25;
  }
LABEL_32:
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  LODWORD(v30) = 0;
  if (*(_BYTE *)(a1 + 568))
  {
    HVF::PartTransformRenderer::renderToContext();
    v7 = lock;
    if (a4)
      *a4 = 1;
    v23 = *(_DWORD *)(a1 + 140) + 1;
    *(_DWORD *)(a1 + 140) = v23;
    if (v23 >= 0x11)
    {
      if (*(_BYTE *)(a1 + 568))
      {
        MEMORY[0x1B5E0CC60](a1 + 144);
        *(_BYTE *)(a1 + 568) = 0;
      }
    }
    _Block_object_dispose(&v27, 8);
    goto LABEL_39;
  }
LABEL_42:
  __break(1u);
}

void sub_1B0A04F30()
{
  __cxa_end_catch();
  JUMPOUT(0x1B0A04F38);
}

void sub_1B0A04F48(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B0A04F40);
}

_QWORD *Util::ReadWriteProperty<double,void>::~ReadWriteProperty(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t ___ZNK26THierVariationsFontHandler14GetOutlinePathEjRK18TGlyphOutlineBatchPb_block_invoke(uint64_t a1, int a2, double *a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  switch(a2)
  {
    case 0:
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v6 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v6 + 1;
      if (!v6)
        (***(void (****)(_QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
      break;
    case 2:
      a4.n128_f64[0] = *a3;
      a5.n128_f64[0] = a3[1];
      (*(void (**)(__n128, __n128))(**(_QWORD **)(a1 + 40) + 8))(a4, a5);
      break;
    case 3:
      a4.n128_f64[0] = *a3;
      a5.n128_f64[0] = a3[1];
      (*(void (**)(__n128, __n128))(**(_QWORD **)(a1 + 40) + 16))(a4, a5);
      break;
    case 4:
      (*(void (**)(_QWORD, double, double, double, double))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), *a3, a3[1], a3[2], a3[3]);
      break;
    case 5:
      (*(void (**)(_QWORD, double, double, double, double, double, double))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), *a3, a3[1], a3[2], a3[3], a3[4], a3[5]);
      break;
    case 8:
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v8 = *(_DWORD *)(v7 + 24) - 1;
      *(_DWORD *)(v7 + 24) = v8;
      if (!v8)
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
      break;
    default:
      return 0;
  }
  return 0;
}

const CGPath *THierVariationsFontHandler::CopyGlyphPath(THierVariationsFontHandler *this, uint64_t a2, BOOL *a3)
{
  const CGPath *v4;
  CGPathRef CopyByNormalizing;
  CGPathRef v6;

  v4 = (const CGPath *)TFontHandler::CopyGlyphPath(this, a2, a3);
  if (qword_1ECDE6B38 != -1)
    dispatch_once(&qword_1ECDE6B38, &__block_literal_global_4);
  if (_MergedGlobals_2 == 1)
  {
    if (a3)
      *a3 = 0;
    CopyByNormalizing = CGPathCreateCopyByNormalizing(v4, 0);
    if (CopyByNormalizing)
    {
      v6 = CopyByNormalizing;
      CGPathRelease(v4);
      return v6;
    }
  }
  return v4;
}

uint64_t ___ZNK26THierVariationsFontHandler13CopyGlyphPathEjPb_block_invoke()
{
  uint64_t result;

  result = _os_feature_enabled_impl();
  if ((result & 1) != 0
    || (result = dyld_program_sdk_at_least(), (result & 1) == 0) && (result = _CFAppVersionCheck(), (_DWORD)result))
  {
    _MergedGlobals_2 = 1;
  }
  return result;
}

uint64_t THierVariationsFontHandler::GetVariationValues(THierVariationsFontHandler *this, uint64_t a2)
{
  if (a2 == (uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 1)
    return *((_QWORD *)this + 12);
  else
    return 0;
}

uint64_t THierVariationsFontHandler::CanStreamPostScriptType1(THierVariationsFontHandler *this)
{
  return 1;
}

uint64_t THierVariationsDataForkFont::GetKind(THierVariationsDataForkFont *this)
{
  return 8;
}

uint64_t THierVariationsDataForkFont::GetNumberOfGlyphs(THierVariationsDataForkFont *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 40))(*((_QWORD *)this + 32));
}

uint64_t THierVariationsDataForkFont::GetLoader(THierVariationsDataForkFont *this)
{
  return *((_QWORD *)this + 32);
}

void std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::~__func()
{
  JUMPOUT(0x1B5E0CD38);
}

_QWORD *std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E61CAF60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E61CAF60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), *a2, a3, 0);
}

uint64_t std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::target_type()
{
}

void TVector::~TVector(TVector *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TType1GlyphOutlineBatch::~TType1GlyphOutlineBatch(TType1GlyphOutlineBatch *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1GlyphOutlineBatch::NewPath(TType1GlyphOutlineBatch *this)
{
  return (***((uint64_t (****)(_QWORD))this + 2))(*((_QWORD *)this + 2));
}

uint64_t TType1GlyphOutlineBatch::MoveTo(TType1GlyphOutlineBatch *this, double a2, double a3)
{
  return (*(uint64_t (**)(_QWORD, double, double))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2), *((double *)this + 7) + *((double *)this + 5) * a3 + a2 * *((double *)this + 3), *((double *)this + 8) + *((double *)this + 6) * a3 + a2 * *((double *)this + 4));
}

uint64_t TType1GlyphOutlineBatch::LineTo(TType1GlyphOutlineBatch *this, double a2, double a3)
{
  return (*(uint64_t (**)(_QWORD, double, double))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), *((double *)this + 7) + *((double *)this + 5) * a3 + a2 * *((double *)this + 3), *((double *)this + 8) + *((double *)this + 6) * a3 + a2 * *((double *)this + 4));
}

uint64_t TType1GlyphOutlineBatch::QuadaticCurveTo(TType1GlyphOutlineBatch *this, double a2, double a3, double a4, double a5)
{
  return (*(uint64_t (**)(_QWORD, double, double, double, double))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), *((double *)this + 7) + *((double *)this + 5) * a3 + a2 * *((double *)this + 3), *((double *)this + 8) + *((double *)this + 6) * a3 + a2 * *((double *)this + 4), *((double *)this + 7) + *((double *)this + 5) * a5 + a4 * *((double *)this + 3), *((double *)this + 8) + *((double *)this + 6) * a5 + a4 * *((double *)this + 4));
}

uint64_t TType1GlyphOutlineBatch::CubicCurveTo(TType1GlyphOutlineBatch *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v7 = *((double *)this + 5);
  v8 = *((double *)this + 6);
  v9 = *((double *)this + 3);
  v10 = *((double *)this + 4);
  v11 = *((double *)this + 7);
  return (*(uint64_t (**)(_QWORD, double, double, double, double, double, double))(**((_QWORD **)this + 2)
                                                                                           + 32))(*((_QWORD *)this + 2), v11 + v7 * a3 + a2 * v9, *((double *)this + 8) + v8 * a3 + a2 * v10, v11 + v7 * a5 + a4 * v9, *((double *)this + 8) + v8 * a5 + a4 * v10, v11 + v7 * a7 + a6 * v9, *((double *)this + 8) + v8 * a7 + a6 * v10);
}

uint64_t TType1GlyphOutlineBatch::EndPath(TType1GlyphOutlineBatch *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
}

void TInterpreterContext::~TInterpreterContext(TInterpreterContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61CB270;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8052888210);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61CB270;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8052888210);
  JUMPOUT(0x1B5E0CD38);
}

void *TInterpreterContext::GetBuildChar(TInterpreterContext *this)
{
  uint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;

  v1 = *((unsigned int *)this + 8);
  if (!(_DWORD)v1)
    return 0;
  v3 = (void *)*((_QWORD *)this + 3);
  if (!v3)
  {
    v4 = 4 * v1;
    v3 = (void *)operator new[]();
    bzero(v3, v4);
    v5 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v3;
    if (v5)
    {
      MEMORY[0x1B5E0CD14](v5, 0x1000C8052888210);
      return (void *)*((_QWORD *)this + 3);
    }
  }
  return v3;
}

uint64_t TInterpreterContext::LoadSubroutine(TInterpreterContext *this, unsigned int a2, const unsigned __int8 *a3, unsigned int a4, int a5, const unsigned __int8 *a6, unint64_t a7, const unsigned __int8 **a8)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  const unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  int v14;
  const unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  const unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  const unsigned __int8 *v27;
  uint64_t v28;
  _DWORD *exception;
  int v31;

  if (a4 <= a2)
    goto LABEL_26;
  if (!a3)
    goto LABEL_25;
  if (!a5)
    goto LABEL_25;
  v8 = a5 + a5 * a4;
  v9 = a7 >= v8;
  v10 = a7 - v8;
  if (v10 == 0 || !v9)
    goto LABEL_25;
  v11 = &a3[a5 * a2];
  v12 = -1;
  v13 = 0;
  v14 = 0;
  v15 = v11;
  switch(a5)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      v15 = v11 + 1;
      v13 = *v11 << 8;
LABEL_8:
      v16 = *v15++;
      v14 = (v13 | v16) << 8;
LABEL_9:
      v17 = *v15++;
      v12 = ((v14 | v17) << 8) - 1;
LABEL_10:
      v12 += *v15;
      break;
    default:
      break;
  }
  v18 = -1;
  v19 = 0;
  v20 = 0;
  v21 = &v11[a5];
  switch(a5)
  {
    case 1:
      goto LABEL_15;
    case 2:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 4:
      v22 = *v21++;
      v19 = v22 << 8;
LABEL_13:
      v23 = *v21++;
      v20 = (v19 | v23) << 8;
LABEL_14:
      v24 = *v21++;
      v18 = ((v20 | v24) << 8) - 1;
LABEL_15:
      v18 += *v21;
      break;
    default:
      break;
  }
  if (v12 > v18 || v10 < v18)
  {
LABEL_25:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    v31 = 4;
    goto LABEL_27;
  }
  v25 = (_QWORD *)*((_QWORD *)this + 2);
  if ((unint64_t)(v25 + 6) >= *((_QWORD *)this + 29))
  {
LABEL_26:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    v31 = -21;
LABEL_27:
    exception[2] = v31;
  }
  v25[2] = *a8;
  v26 = v25 + 3;
  *((_QWORD *)this + 2) = v25 + 3;
  if (!a6 || v12 >= v18)
    goto LABEL_23;
  v27 = &a6[v12];
  v25[3] = v27;
  v25[4] = &a6[v18];
  v25[5] = v27;
  *a8 = v27;
  v28 = *((_QWORD *)this + 2);
  if (!v28)
  {
    v26 = 0;
LABEL_23:
    v28 = 0;
    *((_QWORD *)this + 2) = v26 - 3;
  }
  return v28;
}

void TType1RenderingContext::~TType1RenderingContext(TType1RenderingContext *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TType1CubicOutlineContext::~TType1CubicOutlineContext(TType1CubicOutlineContext *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TType1FontHandler::ParseOutline(TType1FontHandler *this, unsigned int a2, TType1RenderingContext *a3)
{
  void *v5[8];

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 488))(v5);
  (*(void (**)(TType1FontHandler *, void **, TType1RenderingContext *))(*(_QWORD *)this + 136))(this, v5, a3);
  TCharString::~TCharString(v5);
}

void sub_1B0A057B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TCharString::~TCharString(&a9);
  _Unwind_Resume(a1);
}

uint64_t TType1FontHandler::DeriveRawMetrics(TType1FontHandler *this, TInterpreterContext *a2, uint64_t a3, double *a4, int a5)
{
  uint64_t result;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _QWORD v19[2];
  uint64_t v20;
  void (**v21)(TVector *__hidden);
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  void (**v25)(TVector *__hidden);
  uint64_t v26;
  void (**v27)(TVector *__hidden);
  uint64_t v28;
  unint64_t v29;
  TInterpreterContext *v30;
  uint64_t v31;

  v24 = 0xAAAAAAAAAAAAAAAALL;
  v29 = 0xAAAAAAAAAAAAAA01;
  v20 = 0;
  v19[0] = &off_1E61CB410;
  v19[1] = &off_1E61CB3A0;
  v21 = &off_1E61CB3A0;
  v22 = xmmword_1B0AAD370;
  v23 = 0x8000000080000000;
  LOBYTE(v24) = a5 ^ 1;
  v26 = 0;
  v25 = &off_1E61CB3A0;
  v28 = 0;
  v27 = &off_1E61CB3A0;
  v30 = a2;
  v31 = 0;
  result = (*(uint64_t (**)(TType1FontHandler *, uint64_t, _QWORD *))(*(_QWORD *)this + 128))(this, a3, v19);
  if (*((_QWORD *)this + 2))
  {
    TType1Font::ApplyFontMatrix(*((_QWORD *)this + 1), (double)(int)v20 * 0.0000152587891, (double)SHIDWORD(v20) * 0.0000152587891, &v18);
    v14 = v18;
    result = TType1Font::ApplyFontMatrix(*((_QWORD *)this + 1), (double)(int)v22 * 0.0000152587891, (double)SDWORD1(v22) * 0.0000152587891, &v18);
    if (!a5)
      goto LABEL_18;
  }
  else
  {
    v10.n128_u64[0] = 0x3EF0000000000000;
    v14 = (double)(int)v20 * 0.0000152587891;
    if (!a5)
      goto LABEL_18;
  }
  v9.n128_u64[0] = 0;
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  if ((int)v23 > SDWORD2(v22))
  {
    v10.n128_u64[0] = 0;
    v9.n128_f64[0] = (double)SDWORD2(v22) * 0.0000152587891;
    v12.n128_f64[0] = (double)SHIDWORD(v22) * 0.0000152587891;
    v13.n128_f64[0] = (double)(int)v23 * 0.0000152587891;
    v11.n128_f64[0] = (double)SHIDWORD(v23) * 0.0000152587891;
    if (SHIDWORD(v23) > SHIDWORD(v22))
    {
      v15 = (double)SHIDWORD(v22) * 0.0000152587891;
    }
    else
    {
      v9.n128_f64[0] = 0.0;
      v15 = 0.0;
    }
    if (SHIDWORD(v23) > SHIDWORD(v22))
      v16 = (double)(int)v23 * 0.0000152587891;
    else
      v16 = 0.0;
    if (SHIDWORD(v23) > SHIDWORD(v22))
      v17 = (double)SHIDWORD(v23) * 0.0000152587891;
    else
      v17 = 0.0;
  }
  if (*((_QWORD *)this + 2))
  {
    TType1Font::ApplyFontMatrix(*((_QWORD *)this + 1), v9.n128_f64[0], v15, &v18);
    TType1Font::ApplyFontMatrix(*((_QWORD *)this + 1), v16, v17, &v18);
  }
  result = (*(uint64_t (**)(_QWORD, __n128, __n128, __n128, __n128, __n128))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1), v9, v10, v11, v12, v13);
  v14 = (double)result * 0.0498046875;
LABEL_18:
  if (a4)
    *a4 = v14;
  return result;
}

double TType1FontHandler::CalculateH2VTranslate(TType1FontHandler *this, const TType1RenderingContext *a2, int *a3)
{
  int v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double result;
  double v12[2];

  v6 = a3[12];
  v7 = 0.0;
  if (v6 <= a3[10])
  {
    v9 = 0.0;
  }
  else
  {
    v8 = a3[13];
    v9 = 0.0;
    if (v8 > a3[11])
    {
      v9 = (double)v8 * 0.0000152587891;
      if (*((_QWORD *)a2 + 2))
      {
        TType1Font::ApplyFontMatrix(*((_QWORD *)a2 + 1), (double)v6 * 0.0000152587891, v9, v12);
        v9 = v12[1];
      }
      v7 = (double)(*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 1) + 72))(*((_QWORD *)a2 + 1))
         * 0.0498046875;
    }
  }
  if (*((_QWORD *)a2 + 2))
  {
    TType1Font::ApplyFontMatrix(*((_QWORD *)a2 + 1), (double)a3[8] * 0.0000152587891, (double)a3[9] * 0.0000152587891, v12);
    v10 = v12[0];
  }
  else
  {
    v10 = (double)a3[8] * 0.0000152587891;
  }
  result = v10 * -0.5;
  *(double *)this = result;
  *((double *)this + 1) = -(v7 + v9);
  return result;
}

void TType1FontHandler::DeriveBounds(TType1FontHandler *this, TInterpreterContext *a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, char a8)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  _QWORD v22[4];
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  void (**v26)(TVector *__hidden);
  uint64_t v27;
  void (**v28)(TVector *__hidden);
  uint64_t v29;
  unint64_t v30;
  TInterpreterContext *v31;
  uint64_t v32;

  v25 = 0xAAAAAAAAAAAAAA00;
  v30 = 0xAAAAAAAAAAAAAA01;
  v22[2] = 0;
  v22[0] = &off_1E61CB410;
  v22[1] = &off_1E61CB3A0;
  v22[3] = &off_1E61CB3A0;
  v23 = xmmword_1B0AAD370;
  v24 = 0x8000000080000000;
  v27 = 0;
  v26 = &off_1E61CB3A0;
  v29 = 0;
  v28 = &off_1E61CB3A0;
  v31 = a2;
  v32 = 0;
  (*(void (**)(TType1FontHandler *, uint64_t, _QWORD *))(*(_QWORD *)this + 128))(this, a3, v22);
  if ((int)v24 <= SDWORD2(v23) || SHIDWORD(v24) <= SHIDWORD(v23))
  {
    *a4 = 0.0;
    *a5 = 0.0;
    *a6 = 0.0;
    *a7 = 0.0;
  }
  else
  {
    v14 = (double)SDWORD2(v23) * 0.0000152587891;
    v15 = (double)SHIDWORD(v23) * 0.0000152587891;
    v16 = (double)(int)v24 * 0.0000152587891;
    v17 = (double)SHIDWORD(v24) * 0.0000152587891;
    if (*((_QWORD *)this + 2))
    {
      TType1Font::ApplyFontMatrix(*((_QWORD *)this + 1), v14, (double)SHIDWORD(v23) * 0.0000152587891, &v20);
      v14 = v20;
      v15 = *(double *)&v21;
      TType1Font::ApplyFontMatrix(*((_QWORD *)this + 1), v16, v17, &v20);
      v16 = v20;
      v17 = *(double *)&v21;
    }
    if ((a8 & 1) != 0)
    {
      v20 = NAN;
      v21 = -1;
      TType1FontHandler::CalculateH2VTranslate((TType1FontHandler *)&v20, this, (int *)v22);
      v18 = v20;
      v19 = *(double *)&v21;
      *a4 = v14 + v20;
      *a5 = v15 + v19;
      *a6 = v16 + v18;
      *a7 = v17 + v19;
    }
    else
    {
      *a4 = v14;
      *a5 = v15;
      *a6 = v16;
      *a7 = v17;
    }
  }
}

double TType1FontHandler::DeriveVerticalTranslate@<D0>(TType1FontHandler *this@<X0>, TInterpreterContext *a2@<X1>, uint64_t a3@<X2>, TType1FontHandler *a4@<X8>)
{
  _QWORD v7[4];
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  void (**v11)(TVector *__hidden);
  uint64_t v12;
  void (**v13)(TVector *__hidden);
  uint64_t v14;
  unint64_t v15;
  TInterpreterContext *v16;
  uint64_t v17;

  v10 = 0xAAAAAAAAAAAAAA00;
  v15 = 0xAAAAAAAAAAAAAA01;
  v7[2] = 0;
  v7[0] = &off_1E61CB410;
  v7[1] = &off_1E61CB3A0;
  v7[3] = &off_1E61CB3A0;
  v8 = xmmword_1B0AAD370;
  v9 = 0x8000000080000000;
  v12 = 0;
  v11 = &off_1E61CB3A0;
  v14 = 0;
  v13 = &off_1E61CB3A0;
  v16 = a2;
  v17 = 0;
  (*(void (**)(TType1FontHandler *, uint64_t, _QWORD *))(*(_QWORD *)this + 128))(this, a3, v7);
  return TType1FontHandler::CalculateH2VTranslate(a4, this, (int *)v7);
}

uint64_t TType1FontHandler::StreamPSDownload(TFontHandler *a1, uint64_t a2, int a3, char *a4, unsigned int *a5, unsigned __int16 *a6, __CFData *a7)
{
  __int16 v11;

  v11 = a3;
  if ((TFontHandler::T1StreamPSDownload((TType1PSFont **)a1, a3, a4, a5, a6, 0, a7) & 1) != 0)
    return 1;
  else
    return TFontHandler::StreamPSDownload(a1, a2, v11, a4, a5, a6, (uint64_t)a7);
}

void TType1InterpreterContext::~TType1InterpreterContext(TType1InterpreterContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61CB270;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8052888210);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61CB270;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8052888210);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1FontType1CharStringHandler::GetOutlinePath(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  int64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  void (**v23)(TType1CubicOutlineContext *__hidden);
  void (**v24)(TVector *__hidden);
  uint64_t v25;
  void (**v26)(TVector *__hidden);
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  void (**v30)(TVector *__hidden);
  uint64_t v31;
  void (**v32)(TVector *__hidden);
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 *v37;
  _QWORD __b[213];

  memset(__b, 170, sizeof(__b));
  v6 = 0;
  v7 = a1[1];
  HIDWORD(__b[4]) = 0;
  LODWORD(__b[5]) = 0;
  memset(&__b[1], 0, 24);
  do
  {
    v8 = &__b[v6];
    v8[6] = &off_1E61CB3A0;
    v8[7] = 0;
    v6 += 2;
  }
  while (v6 != 14);
  memset(&__b[21], 0, 28);
  __b[25] = 256;
  __b[26] = &__b[31];
  __b[27] = &__b[159];
  __b[28] = &__b[159];
  __b[29] = &__b[207];
  __b[30] = v7;
  v9 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 128) + 80);
  __b[0] = &off_1E61CB650;
  LODWORD(__b[4]) = v9;
  HIDWORD(__b[211]) = 0;
  __b[212] = 0;
  bzero(&__b[31], 0x5A0uLL);
  LODWORD(__b[20]) = *(_DWORD *)(v7 + 144);
  __b[23] = *(_QWORD *)(v7 + 120);
  v10 = *(_QWORD *)(v7 + 112) + WORD1(__b[20]) + WORD1(__b[20]) * (unint64_t)LOWORD(__b[20]);
  __b[21] = *(_QWORD *)(v7 + 112);
  __b[22] = v10;
  v11 = (_QWORD *)a1[2];
  if (v11)
  {
    v18 = xmmword_1B0AAD440;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
    *(_QWORD *)&v18 = &off_1E61CB220;
    v19 = a3;
    v13.i64[0] = (int)*v11;
    v13.i64[1] = (int)HIDWORD(*v11);
    v14 = (float64x2_t)vdupq_n_s64(0x3E10000000000000uLL);
    v20 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v13), v14), (double)v12);
    v15 = v11[1];
    v13.i64[0] = (int)v15;
    v13.i64[1] = SHIDWORD(v15);
    v21 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v13), v14), (double)v12);
    v16 = v11[2];
    v13.i64[0] = (int)v16;
    v13.i64[1] = SHIDWORD(v16);
    v22 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v13), v14), (double)v12);
    v29 = 0xAAAAAAAAAAAAAA00;
    v34 = 0xAAAAAAAAAAAAAAAALL;
    v25 = 0;
    v26 = &off_1E61CB3A0;
    v27 = xmmword_1B0AAD370;
    v28 = 0x8000000080000000;
    v31 = 0;
    v30 = &off_1E61CB3A0;
    v33 = 0;
    v32 = &off_1E61CB3A0;
    v35 = __b;
    v36 = 0;
    v23 = &off_1E61CB298;
    v24 = &off_1E61CB3A0;
    v37 = &v18;
    TType1GlyphOutlineBatch::NewPath((TType1GlyphOutlineBatch *)&v18);
    LOBYTE(v34) = 1;
    (*(void (**)(_QWORD *, uint64_t, void (***)(TType1CubicOutlineContext *__hidden)))(*a1 + 128))(a1, a2, &v23);
    (*(void (**)(__int128 *))(*(_QWORD *)v37 + 40))(v37);
  }
  else
  {
    v29 = 0xAAAAAAAAAAAAAA00;
    v34 = 0xAAAAAAAAAAAAAAAALL;
    v25 = 0;
    v26 = &off_1E61CB3A0;
    v27 = xmmword_1B0AAD370;
    v28 = 0x8000000080000000;
    v31 = 0;
    v30 = &off_1E61CB3A0;
    v33 = 0;
    v32 = &off_1E61CB3A0;
    v35 = __b;
    v36 = 0;
    v23 = &off_1E61CB298;
    v24 = &off_1E61CB3A0;
    v37 = a3;
    (**(void (***)(__int128 *, uint64_t))a3)(a3, a2);
    LOBYTE(v34) = 1;
    (*(void (**)(_QWORD *, uint64_t, void (***)(TType1CubicOutlineContext *__hidden)))(*a1 + 128))(a1, a2, &v23);
    (*(void (**)(__int128 *))(*(_QWORD *)v37 + 40))(v37);
  }
  result = __b[3];
  __b[0] = &off_1E61CB270;
  __b[3] = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

void sub_1B0A061C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a37)
    MEMORY[0x1B5E0CD14](a37, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t TType1FontType1CharStringHandler::GetHorizontalAdvances(TType1FontType1CharStringHandler *this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD __b[213];

  memset(__b, 170, sizeof(__b));
  v8 = 0;
  v9 = *((_QWORD *)this + 1);
  HIDWORD(__b[4]) = 0;
  LODWORD(__b[5]) = 0;
  memset(&__b[1], 0, 24);
  do
  {
    v10 = &__b[v8];
    v10[6] = &off_1E61CB3A0;
    v10[7] = 0;
    v8 += 2;
  }
  while (v8 != 14);
  memset(&__b[21], 0, 28);
  __b[25] = 256;
  __b[26] = &__b[31];
  __b[27] = &__b[159];
  __b[28] = &__b[159];
  __b[29] = &__b[207];
  __b[30] = v9;
  v11 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 128) + 80);
  __b[0] = &off_1E61CB650;
  LODWORD(__b[4]) = v11;
  HIDWORD(__b[211]) = 0;
  __b[212] = 0;
  bzero(&__b[31], 0x5A0uLL);
  LODWORD(__b[20]) = *(_DWORD *)(v9 + 144);
  __b[23] = *(_QWORD *)(v9 + 120);
  v12 = *(_QWORD *)(v9 + 112) + WORD1(__b[20]) + WORD1(__b[20]) * (unint64_t)LOWORD(__b[20]);
  __b[21] = *(_QWORD *)(v9 + 112);
  __b[22] = v12;
  if (a4)
  {
    v13 = 0;
    v14 = 8 * a4;
    do
    {
      *a3++ = (*(double (**)(TType1FontType1CharStringHandler *, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 144))(this, __b, a2[v13++], 0, 0);
      v14 -= 8;
    }
    while (a4 != v13);
  }
  result = __b[3];
  __b[0] = &off_1E61CB270;
  __b[3] = 0;
  if (result)
    return MEMORY[0x1B5E0CD14](result, 0x1000C8052888210);
  return result;
}

uint64_t TType1FontType1CharStringHandler::GetRawMetrics(TType1FontType1CharStringHandler *this, uint64_t a2, double *a3, double *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD __b[213];

  memset(__b, 170, sizeof(__b));
  v10 = 0;
  v11 = *((_QWORD *)this + 1);
  HIDWORD(__b[4]) = 0;
  LODWORD(__b[5]) = 0;
  memset(&__b[1], 0, 24);
  do
  {
    v12 = &__b[v10];
    v12[6] = &off_1E61CB3A0;
    v12[7] = 0;
    v10 += 2;
  }
  while (v10 != 14);
  memset(&__b[21], 0, 28);
  __b[25] = 256;
  __b[26] = &__b[31];
  __b[27] = &__b[159];
  __b[28] = &__b[159];
  __b[29] = &__b[207];
  __b[30] = v11;
  v13 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 128) + 80);
  __b[0] = &off_1E61CB650;
  LODWORD(__b[4]) = v13;
  HIDWORD(__b[211]) = 0;
  __b[212] = 0;
  bzero(&__b[31], 0x5A0uLL);
  LODWORD(__b[20]) = *(_DWORD *)(v11 + 144);
  __b[23] = *(_QWORD *)(v11 + 120);
  __b[21] = *(_QWORD *)(v11 + 112);
  __b[22] = __b[21] + WORD1(__b[20]) + WORD1(__b[20]) * (unint64_t)LOWORD(__b[20]);
  *a3 = (*(double (**)(TType1FontType1CharStringHandler *, _QWORD *, uint64_t, double *, uint64_t))(*(_QWORD *)this + 144))(this, __b, a2, a4, a5);
  v14 = __b[3];
  __b[0] = &off_1E61CB270;
  __b[3] = 0;
  if (v14)
    MEMORY[0x1B5E0CD14](v14, 0x1000C8052888210);
  return 1;
}

void sub_1B0A06500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1B5E0CD14](a13, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t TType1FontType1CharStringHandler::GetBounds(TType1FontType1CharStringHandler *this, unsigned int a2, double *a3, double *a4, double *a5, double *a6)
{
  return 0;
}

uint64_t TType1FontType1CharStringHandler::GetHorizontalToVerticalTranslate(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  __int128 v12;
  _QWORD __b[213];

  memset(__b, 170, sizeof(__b));
  v6 = 0;
  v7 = a1[1];
  HIDWORD(__b[4]) = 0;
  LODWORD(__b[5]) = 0;
  memset(&__b[1], 0, 24);
  do
  {
    v8 = &__b[v6];
    v8[6] = &off_1E61CB3A0;
    v8[7] = 0;
    v6 += 2;
  }
  while (v6 != 14);
  memset(&__b[21], 0, 28);
  __b[25] = 256;
  __b[26] = &__b[31];
  __b[27] = &__b[159];
  __b[28] = &__b[159];
  __b[29] = &__b[207];
  __b[30] = v7;
  v9 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 128) + 80);
  __b[0] = &off_1E61CB650;
  LODWORD(__b[4]) = v9;
  HIDWORD(__b[211]) = 0;
  __b[212] = 0;
  bzero(&__b[31], 0x5A0uLL);
  LODWORD(__b[20]) = *(_DWORD *)(v7 + 144);
  __b[23] = *(_QWORD *)(v7 + 120);
  __b[21] = *(_QWORD *)(v7 + 112);
  __b[22] = __b[21] + WORD1(__b[20]) + WORD1(__b[20]) * (unint64_t)LOWORD(__b[20]);
  (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t))(*a1 + 160))(&v12, a1, __b, a2);
  *a3 = v12;
  v10 = __b[3];
  __b[0] = &off_1E61CB270;
  __b[3] = 0;
  if (v10)
    MEMORY[0x1B5E0CD14](v10, 0x1000C8052888210);
  return 1;
}

void sub_1B0A06694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    MEMORY[0x1B5E0CD14](a15, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

float64x2_t TType1FontType1CharStringHandler::GetFontInfo(int **this, FPFontInfo *a2)
{
  double FontInfo;
  float64x2_t result;
  int *v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  int v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  double v23;
  float64x2_t v29;
  CGPoint v30;

  FontInfo = TFontHandler::GetFontInfo((TFontHandler *)this, a2);
  (*((void (**)(int **, int *, int *, int *, _QWORD, double))*this + 4))(this, &a2->var2, &a2->var3, &a2->var4, 0, FontInfo);
  v6 = this[1];
  v7 = *((unsigned __int16 *)v6 + 75);
  if (v7 >= 2)
  {
    v8 = this[4];
    if (v8)
    {
      v9 = *((_QWORD *)v6 + 16);
      v10 = (int *)(v9 + 120);
      v11 = 0uLL;
      v12 = 0.0;
      v13 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
      v14 = 0.0;
      v15 = 0uLL;
      v16 = 0uLL;
      do
      {
        v17 = *v8++;
        v18 = (double)v17 * 0.0000152587891;
        v20 = *((_QWORD *)v10 - 3);
        v19 = *((_QWORD *)v10 - 2);
        v21.i64[0] = (int)v19;
        v21.i64[1] = SHIDWORD(v19);
        v11 = vmlaq_n_f64(v11, vmulq_f64(vcvtq_f64_s64(v21), v13), v18);
        v22 = *((_QWORD *)v10 - 4);
        v21.i64[0] = (int)v22;
        v21.i64[1] = SHIDWORD(v22);
        v15 = vmlaq_n_f64(v15, vmulq_f64(vcvtq_f64_s64(v21), v13), v18);
        v21.i64[0] = (int)v20;
        v21.i64[1] = SHIDWORD(v20);
        v16 = vmlaq_n_f64(v16, vmulq_f64(vcvtq_f64_s64(v21), v13), v18);
        v14 = v14 + v18 * ((double)*v10 * 0.0000152587891);
        v12 = v12 + v18 * ((double)*(v10 - 2) * 0.0000152587891);
        v10 += 90;
        --v7;
      }
      while (v7);
      v23 = (double)*(int *)(v9 + 44) * 0.0000152587891;
      a2->var9 = (int)v12;
      a2->var10 = (int)-v12;
      *(float64x2_t *)&a2->var14 = v11;
      __asm { FMOV            V1.2D, #31.0 }
      v29 = vminnmq_f64(vrndaq_f64(vmulq_n_f64(vsubq_f64(v16, v15), v23)), _Q1);
      v30 = (CGPoint)vsubq_f64(v15, v29);
      result = vsubq_f64(vaddq_f64(v16, v29), (float64x2_t)v30);
      a2->var7 = (int)result.f64[0];
      a2->var8 = (int)v14;
      a2->var18.origin = v30;
      a2->var18.size = (CGSize)result;
    }
  }
  return result;
}

uint64_t TType1FontType1CharStringHandler::GetFontBounds(uint64_t this, double *a2, double *a3, double *a4, double *a5, int a6)
{
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int v28;
  double v29;
  int v30;
  double v31;

  v11 = *(_QWORD *)(this + 8);
  v12 = *(unsigned __int16 *)(v11 + 150);
  if (v12 < 2 || (v13 = *(int **)(this + 32)) == 0)
  {
    this = (*(uint64_t (**)(_QWORD, double *, double *, double *, double *))(*(_QWORD *)v11 + 280))(*(_QWORD *)(this + 8), a2, a3, a4, a5);
    if (!a6)
      return this;
    goto LABEL_9;
  }
  v14 = *(int **)(v11 + 128);
  v15 = v14 + 25;
  v16 = 0.0;
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  do
  {
    v20 = *v13++;
    v21 = (double)v20 * 0.0000152587891;
    v19 = v19 + v21 * ((double)*(v15 - 3) * 0.0000152587891);
    v18 = v18 + v21 * ((double)*(v15 - 2) * 0.0000152587891);
    v17 = v17 + v21 * ((double)*(v15 - 1) * 0.0000152587891);
    v16 = v16 + v21 * ((double)*v15 * 0.0000152587891);
    v15 += 90;
    --v12;
  }
  while (v12);
  v22 = (double)v14[11] * 0.0000152587891;
  v23 = fmin(round((v17 - v19) * v22), 31.0);
  v24 = v19 - v23;
  v25 = fmin(round((v16 - v18) * v22), 31.0);
  v26 = v18 - v25;
  *a2 = v24;
  *a3 = v26;
  *a4 = v17 + v23 - v24;
  *a5 = v16 + v25 - v26;
  if ((a6 & 1) != 0)
  {
    v28 = v14[32];
    v27 = v14[33];
    if (v28 | v27)
    {
      *a2 = *a2 - (double)v28 * 0.0000152587891;
      v29 = (double)v27 * 0.0000152587891 + *a3;
LABEL_13:
      *a3 = v29;
      return this;
    }
LABEL_9:
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 216))(v11);
    if (v30)
      v31 = (double)(unsigned __int16)v30;
    else
      v31 = *a4;
    *a2 = *a2 + v31 * -0.5;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
    v29 = (double)this * 0.0498046875 - *a5;
    goto LABEL_13;
  }
  return this;
}

uint64_t GetArgs(uint64_t result, uint64_t a2)
{
  _DWORD *exception;

  if (((result - a2) & 0x200000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = -22;
  }
  return result;
}

uint64_t GetArgsAndResetOSubrArgs(TType1InterpreterContext *a1, int a2)
{
  uint64_t v2;
  _DWORD *exception;

  if (*((_DWORD *)a1 + 425))
    *((_DWORD *)a1 + 425) = 0;
  v2 = *((_QWORD *)a1 + 1);
  if ((int)((unint64_t)(v2 - *((_QWORD *)a1 + 26)) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = -22;
  }
  return v2 - 4 * a2;
}

uint64_t GetArgs(TType1InterpreterContext *a1, int *a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  _DWORD *exception;

  if (*((_DWORD *)a1 + 425))
    *((_DWORD *)a1 + 425) = 0;
  v3 = *((_QWORD *)a1 + 1);
  v4 = (unint64_t)(v3 - *((_QWORD *)a1 + 26)) >> 2;
  *a2 = v4;
  v5 = __OFSUB__((_DWORD)v4, a3);
  v6 = v4 - a3;
  if (v6 < 0 != v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = -22;
  }
  *a2 = v6;
  return v3 - 4 * a3;
}

uint64_t TCharString::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 28);
  *(_BYTE *)(a1 + 28) = v4;
  if ((_DWORD)v4)
  {
    *(_BYTE *)(a2 + 28) = 0;
  }
  else if (!v3)
  {
    TDataReference::operator=((TDataReference *)(a1 + 32), a2 + 32);
  }
  return a1;
}

void TType1FontType1CharStringHandlerWithVariations::~TType1FontType1CharStringHandlerWithVariations(TType1FontType1CharStringHandlerWithVariations *this)
{
  JUMPOUT(0x1B5E0CD38);
}

_QWORD *TType1Font::MakeHandler(_QWORD *a1, uint64_t *a2)
{
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  std::vector<int>::size_type v23;
  unint64_t v24;
  uint64_t v25;
  std::vector<int>::size_type v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::vector<int>::size_type v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  signed int v41;
  signed int v42;
  std::vector<int>::size_type v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  std::vector<int>::size_type v63;
  unsigned int v66;
  unsigned int v67;
  __int16 *v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t i;
  void *v77;
  int v78;
  _QWORD v79[4];
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  void (**v83)(TVector *__hidden);
  uint64_t v84;
  void (**v85)(TVector *__hidden);
  uint64_t v86;
  unint64_t v87;
  void **v88;
  uint64_t v89;
  void *v90[3];
  uint64_t v91;
  _QWORD v92[209];
  std::vector<int> v93[2];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void (**v97)(TCharString *__hidden);
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void (**v101)(TDataReference *__hidden);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (**v105)(TCharString *__hidden);
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void (**v109)(TDataReference *__hidden);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[16];
  _OWORD __src[4];
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  if (*a2)
    v3 = a2[1] == 0;
  else
    v3 = 1;
  if (v3)
  {
    v4 = operator new();
    v5 = (_QWORD *)v4;
    *(_QWORD *)v4 = off_1E61CB2E8;
    *(_QWORD *)(v4 + 8) = a1;
    *(_DWORD *)(v4 + 24) = 0;
    v6 = a1[16];
    if (v6)
    {
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 52);
      v7 = v6 + 4;
      if (TFractMatrix::IsIdentity((TFractMatrix *)(v6 + 4)))
        v8 = 0;
      else
        v8 = v7;
      v5[2] = v8;
    }
    *v5 = &off_1E61CB4E0;
    v5[4] = 0;
    v9 = a1[21];
    if (v9)
      v5[4] = v9 + 648;
  }
  else
  {
    v11 = operator new();
    v5 = (_QWORD *)v11;
    *(_QWORD *)v11 = off_1E61CB2E8;
    *(_QWORD *)(v11 + 8) = a1;
    *(_DWORD *)(v11 + 24) = 0;
    v12 = a1[16];
    if (v12)
    {
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 52);
      v13 = v12 + 4;
      if (TFractMatrix::IsIdentity((TFractMatrix *)(v12 + 4)))
        v14 = 0;
      else
        v14 = v13;
      v5[2] = v14;
    }
    *v5 = &off_1E61CB4E0;
    v5[4] = 0;
    v15 = a1[21];
    if (v15)
      v5[4] = v15 + 648;
    *v5 = &off_1E61CB598;
    v16 = *a2;
    if (*a2)
    {
      v17 = a2[1];
      if (v17)
      {
        *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v116 = v18;
        v115 = v18;
        (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 480))(&v115, a1);
        if (*((_QWORD *)&v115 + 1))
        {
          v19 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 8);
          if (v19)
          {
            v20 = (unsigned __int16 *)(v19 + v116);
            v21 = v19 + *((_QWORD *)&v116 + 1);
            v22 = v19 + v116 + 14;
            if (v22 <= v21)
            {
              v23 = (__int16)(bswap32(v20[6]) >> 16);
              v24 = v22 + 4 * v23;
              v25 = (((*((_QWORD *)&v116 + 1) - (_QWORD)v116) << 46) - 0x3800000000000) >> 48;
              if ((unint64_t)(v20 + 9) > v21)
                v25 = 0;
              if (v24 < v22 || v24 > v21)
                v27 = v25;
              else
                v27 = v23;
              *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
              *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v114 = v28;
              v113 = v28;
              (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 472))(&v113, a1);
              if (*((_QWORD *)&v113 + 1))
              {
                v29 = *(_QWORD *)(*((_QWORD *)&v113 + 1) + 8);
                if (v29)
                {
                  v30 = a1[21];
                  if (v30)
                  {
                    *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
                    *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
                    __src[2] = v31;
                    __src[3] = v31;
                    __src[0] = v31;
                    __src[1] = v31;
                    v32 = *((unsigned __int16 *)a1 + 74);
                    v33 = ((int)bswap32(v20[2]) >> 16);
                    if ((_DWORD)v33 == (_DWORD)v32 && v27 >= v32)
                    {
                      if (*((_WORD *)a1 + 74))
                      {
                        v34 = 0;
                        v35 = v29 + v114;
                        while (1)
                        {
                          v36 = (char *)v20 + bswap32(*(_DWORD *)&v20[2 * v34 + 7]);
                          if ((unint64_t)(v36 + 7) > v21)
                            break;
                          *((_DWORD *)__src + v34) = bswap32(*(unsigned __int16 *)(v35 + 4)) & 0xFFFF0000;
                          if (v17)
                          {
                            v37 = bswap32(*(_DWORD *)v35);
                            v38 = v17 + 16 * v16;
                            v39 = v16;
                            while (*(_DWORD *)v17 != v37)
                            {
                              v17 += 16;
                              if (!--v39)
                              {
                                v17 = v38;
                                goto LABEL_51;
                              }
                            }
                            v40 = (int)(*(double *)(v17 + 8)
                                      * (double)((int)bswap32(*(unsigned __int16 *)(v35 + 6)) >> 16)) << 16;
                            v41 = bswap32(*((unsigned __int16 *)v36 + 1)) & 0xFFFF0000;
                            if (v40 >= v41)
                            {
                              v42 = bswap32(*((unsigned __int16 *)v36 + 2)) & 0xFFFF0000;
                              if (v40 >= v42)
                                v41 = v42;
                              else
                                v41 = v40;
                            }
                            *((_DWORD *)__src + v34) = v41;
                          }
LABEL_51:
                          ++v34;
                          v35 += 8;
                          if (v34 == v32)
                            goto LABEL_52;
                        }
                      }
                      else
                      {
LABEL_52:
                        v43 = *((unsigned __int16 *)a1 + 75);
                        v44 = ((int)bswap32(v20[3]) >> 16);
                        if ((_DWORD)v44 == (_DWORD)v43)
                        {
                          *(_QWORD *)&v45 = 0xAAAAAAAAAAAAAAAALL;
                          *((_QWORD *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
                          v117[15] = v45;
                          v117[14] = v45;
                          v117[13] = v45;
                          v117[12] = v45;
                          v117[11] = v45;
                          v117[10] = v45;
                          v117[9] = v45;
                          v117[8] = v45;
                          v117[7] = v45;
                          v117[6] = v45;
                          v117[5] = v45;
                          v117[4] = v45;
                          v117[3] = v45;
                          v117[2] = v45;
                          v117[1] = v45;
                          v117[0] = v45;
                          if ((_DWORD)v32)
                          {
                            v46 = 0;
                            v47 = v30 + 264;
                            do
                            {
                              v48 = (unsigned __int8 *)(v47 + 24 * v46);
                              v49 = (unsigned int *)*((_QWORD *)v48 + 2);
                              v50 = *v48;
                              if (*v48)
                              {
                                v51 = 0;
                                v52 = *((_DWORD *)__src + v46);
                                v53 = *((_QWORD *)v48 + 1);
                                v54 = -1;
                                v55 = -1;
                                do
                                {
                                  v56 = *(_DWORD *)(v53 + 4 * v51);
                                  if (v52 == v56)
                                  {
                                    v58 = v49[v51];
                                    goto LABEL_71;
                                  }
                                  if (v52 < v56)
                                    v54 = v51;
                                  else
                                    v55 = v51;
                                  ++v51;
                                }
                                while (v52 >= v56 && v51 < v50);
                                if ((v55 & 0x80000000) != 0)
                                  goto LABEL_69;
                                if ((v54 & 0x80000000) != 0)
                                  v58 = v49[v50 - 1];
                                else
                                  v58 = vcvtd_n_s64_f64((double)(v52 - *(_DWORD *)(v53 + 4 * v55))* 0.0000152587891* ((double)(int)(v49[v54] - v49[v55])* 0.0000152587891)/ ((double)(*(_DWORD *)(v53 + 4 * v54) - *(_DWORD *)(v53 + 4 * v55))* 0.0000152587891), 0x10uLL);
                              }
                              else
                              {
LABEL_69:
                                v58 = *v49;
                              }
LABEL_71:
                              *((_DWORD *)v117 + v46++) = v58;
                            }
                            while (v46 != v33);
                          }
                          v5[4] = v5 + 5;
                          if ((_DWORD)v43)
                          {
                            v59 = 0;
                            do
                            {
                              if ((_DWORD)v32)
                              {
                                v60 = 0;
                                v61 = 0x10000;
                                do
                                {
                                  v62 = *((_DWORD *)v117 + v60) & ~(*((int *)v117 + v60) >> 31);
                                  if (v62 >= 0x10000)
                                    v62 = 0x10000;
                                  if (((v59 >> v60) & 1) == 0)
                                    v62 = 0x10000 - v62;
                                  v61 = vcvtd_n_s64_f64((double)v61 * 0.0000152587891 * ((double)v62 * 0.0000152587891), 0x10uLL);
                                  ++v60;
                                }
                                while (v33 != v60);
                              }
                              else
                              {
                                v61 = 0x10000;
                              }
                              *((_DWORD *)v5 + v59++ + 10) = v61;
                            }
                            while (v59 != v44);
                          }
                          v63 = (v33 + 4);
                          if (bswap32(*v20) >> 16 >= 3 && v27 > v63)
                          {
                            v66 = *(_DWORD *)&v20[2 * v63 + 7];
                            v67 = bswap32(v66);
                            v68 = (__int16 *)((char *)v20 + v67);
                            if (v66 && (unint64_t)(v68 + 9) <= v21)
                            {
                              v70 = v67 + 10;
                              v71 = bswap32((unsigned __int16)v68[1]) >> 16;
                              v108 = 0xAAAAAA0000000000;
                              v107 = 0;
                              v106 = 0;
                              v105 = &off_1E61C8568;
                              v109 = &off_1E6176770;
                              v110 = 0;
                              v112 = 0;
                              v111 = 0;
                              if (*v68 != -1)
                              {
                                v78 = v67 + 10;
                                TDataReference::SubdataFrom(&v115, v70, v71, v79);
                                TCharString::TCharString((TCharString *)v90, 0, (const TDataReference *)v79);
                                TCharString::operator=((uint64_t)&v105, (uint64_t)v90);
                                TCharString::~TCharString(v90);
                                TDataReference::~TDataReference((TDataReference *)v79);
                                v70 = v78;
                              }
                              v100 = 0xAAAAAA0000000000;
                              v99 = 0;
                              v98 = 0;
                              v97 = &off_1E61C8568;
                              v101 = &off_1E6176770;
                              v102 = 0;
                              v104 = 0;
                              v103 = 0;
                              if (v68[2] != -1)
                              {
                                TDataReference::SubdataFrom(&v115, v70 + v71, bswap32((unsigned __int16)v68[3]) >> 16, v79);
                                TCharString::TCharString((TCharString *)v90, 0, (const TDataReference *)v79);
                                TCharString::operator=((uint64_t)&v97, (uint64_t)v90);
                                TCharString::~TCharString(v90);
                                TDataReference::~TDataReference((TDataReference *)v79);
                              }
                              if (v106)
                              {
                                v96 = 0u;
                                v95 = 0u;
                                v94 = 0u;
                                memset(v93, 0, sizeof(v93));
                                std::vector<int>::resize(v93, v43);
                                std::vector<int>::resize(&v93[1], v32);
                                std::vector<int>::__assign_with_size[abi:fe180100]<int *,int *>((char *)&v94, (char *)__src, (uint64_t)__src + 4 * v32, v32);
                                memset(v92, 170, 0x680uLL);
                                v72 = 0;
                                HIDWORD(v92[0]) = 0;
                                LODWORD(v92[1]) = 0;
                                v90[2] = 0;
                                v91 = 0;
                                v90[1] = 0;
                                do
                                {
                                  v73 = &v90[v72];
                                  v73[6] = &off_1E61CB3A0;
                                  v73[7] = 0;
                                  v72 += 2;
                                }
                                while (v72 != 14);
                                LODWORD(v92[20]) = 0;
                                v92[21] = 256;
                                v92[22] = &v92[27];
                                v92[23] = &v92[155];
                                v92[24] = &v92[155];
                                v92[25] = &v92[203];
                                v92[26] = a1;
                                v90[0] = &off_1E61CB650;
                                HIDWORD(v92[207]) = 0;
                                v92[208] = 0;
                                bzero(&v92[27], 0x598uLL);
                                LODWORD(v92[16]) = *((_DWORD *)a1 + 36);
                                v74 = a1[15];
                                v92[17] = a1[14];
                                v92[18] = v92[17] + WORD1(v92[16]) + WORD1(v92[16]) * (unint64_t)LOWORD(v92[16]);
                                v92[19] = v74;
                                v92[206] = v93;
                                LODWORD(v92[0]) = bswap32((unsigned __int16)v68[4]) >> 16;
                                v82 = 0xAAAAAAAAAAAAAA01;
                                v87 = 0xAAAAAAAAAAAAAA01;
                                v79[2] = 0;
                                v79[0] = &off_1E61CB410;
                                v79[1] = &off_1E61CB3A0;
                                v79[3] = &off_1E61CB3A0;
                                v80 = xmmword_1B0AAD370;
                                v81 = 0x8000000080000000;
                                v84 = 0;
                                v83 = &off_1E61CB3A0;
                                v86 = 0;
                                v85 = &off_1E61CB3A0;
                                v88 = v90;
                                v89 = 0;
                                if (v98)
                                  (*(void (**)(_QWORD *, void (***)(TCharString *__hidden), _QWORD *))(*v5 + 136))(v5, &v97, v79);
                                else
                                  std::vector<int>::__assign_with_size[abi:fe180100]<int *,int *>((char *)&v93[1], (char *)__src, (uint64_t)__src + 4 * v32, v32);
                                (*(void (**)(_QWORD *, void (***)(TCharString *__hidden), _QWORD *))(*v5 + 136))(v5, &v105, v79);
                                if ((_DWORD)v43)
                                  memmove(v5 + 5, v93[0].__begin_, 4 * v43);
                                v75 = v91;
                                v90[0] = &off_1E61CB270;
                                v91 = 0;
                                if (v75)
                                  MEMORY[0x1B5E0CD14](v75, 0x1000C8052888210);
                                for (i = 0; i != -96; i -= 24)
                                {
                                  v77 = *(void **)((char *)&v95 + i + 8);
                                  if (v77)
                                  {
                                    *(_QWORD *)((char *)&v96 + i) = v77;
                                    operator delete(v77);
                                  }
                                }
                              }
                              TCharString::~TCharString((void **)&v97);
                              TCharString::~TCharString((void **)&v105);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              *(_QWORD *)&v113 = &off_1E6176770;
              TDataReference::DucRefCount((TDataReference *)&v113);
            }
          }
        }
        *(_QWORD *)&v115 = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)&v115);
      }
    }
  }
  return v5;
}

void sub_1B0A07474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  uint64_t v26;

  TCharString::~TCharString(&a26);
  TDataReference::~TDataReference((TDataReference *)&a11);
  TCharString::~TCharString((void **)&STACK[0x790]);
  TCharString::~TCharString((void **)&STACK[0x7D0]);
  TDataReference::~TDataReference((TDataReference *)&STACK[0x810]);
  TDataReference::~TDataReference((TDataReference *)&STACK[0x830]);
  MEMORY[0x1B5E0CD38](v26, 0x10F1C401EB82410);
  _Unwind_Resume(a1);
}

uint64_t TType1FontType1CharStringHandler::StreamPSDownload(const int **a1, uint64_t a2, int a3, char *a4, unsigned int *a5, unsigned __int16 *a6, __CFData *a7)
{
  __int16 v11;

  v11 = a3;
  if ((TFontHandler::T1StreamPSDownload((TType1PSFont **)a1, a3, a4, a5, a6, a1[4], a7) & 1) != 0)
    return 1;
  else
    return TFontHandler::StreamPSDownload((TFontHandler *)a1, a2, v11, a4, a5, a6, (uint64_t)a7);
}

char *std::vector<int>::__assign_with_size[abi:fe180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:fe180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

void woff2::ConvertWOFF2ToTTF(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __int128 v3;
  unsigned int v6;
  unint64_t v7;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  char *v19;
  unsigned __int32 v20;
  int32x2_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  _BOOL4 v28;
  int v29;
  __int32 v30;
  unsigned int v31;
  __int32 v32;
  int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  size_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  _DWORD *v66;
  unint64_t v67;
  unsigned int begin;
  int v69;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  size_t v77;
  _QWORD *v78;
  unsigned __int16 *v79;
  unint64_t v80;
  unsigned int *v81;
  uint64_t **v82;
  uint64_t **v83;
  unsigned int v84;
  uint64_t *v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  unsigned __int16 v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t **v94;
  unint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int v107;
  char *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  int *v112;
  unsigned __int16 *v113;
  unsigned __int16 *v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  char *v118;
  char *v119;
  void *v120;
  void *v121;
  _BYTE *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  size_t v126;
  uint8_t *v127;
  size_t v128;
  size_t v129;
  void *v130;
  size_t v131;
  int v132;
  char *v133;
  int v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  _DWORD *v148;
  char *v149;
  char *v150;
  unsigned __int16 *v151;
  unsigned __int16 *v152;
  char *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  unint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  _QWORD **v168;
  unint64_t v169;
  unsigned int v170;
  woff2 *v171;
  char *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  unsigned int v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  _QWORD *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unint64_t v184;
  uint64_t *v185;
  unint64_t v186;
  char v187;
  unsigned int v188;
  unint64_t v190;
  char *v191;
  int v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  __int16 v203;
  char *v204;
  char *v205;
  unint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  __int16 v215;
  unint64_t v216;
  unsigned int v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  __int16 v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  unint64_t v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  int v238;
  unsigned int v239;
  int v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  char *v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  int v257;
  int v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  int v263;
  unint64_t v264;
  int v265;
  int v266;
  BOOL v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  signed int *v275;
  unsigned int v276;
  int v277;
  unint64_t v278;
  size_t v279;
  uint64_t v280;
  unint64_t v281;
  size_t v282;
  size_t v283;
  signed int v284;
  signed int v285;
  signed int v286;
  signed int v287;
  unint64_t v288;
  signed int *v289;
  signed int v290;
  signed int v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  signed int v297;
  uint64_t v298;
  size_t v299;
  size_t v300;
  BOOL v301;
  unsigned int v302;
  uint64_t v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int *v308;
  int v309;
  unsigned int v310;
  uint64_t v311;
  int *v312;
  int v313;
  int v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  int v319;
  int v320;
  BOOL v321;
  int v322;
  int v323;
  int v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  int v330;
  unint64_t v331;
  int v332;
  int v333;
  int v334;
  signed int v335;
  int v336;
  signed int v337;
  int v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  size_t v343;
  woff2 *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  int v350;
  unint64_t v351;
  char v352;
  uint64_t v353;
  woff2 *v354;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v356;
  unint64_t v357;
  uint64_t v358;
  unsigned int v359;
  uint64_t v360;
  int v361;
  unsigned int v362;
  uint64_t **v363;
  int v364;
  unint64_t v365;
  unsigned int v366;
  unsigned int v367;
  char *v368;
  _DWORD *v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  __int16 v379;
  uint64_t v380;
  size_t v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  unint64_t v385;
  uint64_t v386;
  unsigned int v387;
  uint64_t v388;
  size_t v389;
  unsigned int v390;
  unint64_t v391;
  _WORD *v392;
  unsigned int v393;
  unint64_t v394;
  char *v395;
  uint64_t v396;
  signed int *v397;
  char *v398;
  _WORD *v399;
  char v400;
  unint64_t v401;
  _QWORD *v402;
  char **v403;
  unint64_t v404;
  _DWORD *v405;
  char *v406;
  _DWORD *v407;
  _BYTE *v408;
  _DWORD *v409;
  unint64_t v410;
  unsigned int v411;
  int v412;
  int v413;
  unsigned int v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unsigned int v420;
  uint64_t v421;
  unsigned int v422;
  int v423;
  int v424;
  BOOL v425;
  woff2 *v426;
  unint64_t v427;
  woff2 *v428;
  char *v429;
  void *v430;
  _QWORD *v431;
  _DWORD *v432;
  char *v433;
  unint64_t v434;
  unint64_t v435;
  unsigned __int16 *v436;
  uint64_t v437;
  unsigned int *v438;
  __int32 v439;
  _QWORD *v440;
  unsigned int *v441;
  unint64_t v442;
  void *v443[3];
  unsigned int v444[4];
  __int128 v445;
  void *v446[2];
  void *__p[2];
  __int128 v448;
  unint64_t v449;
  void *v450;
  _BYTE *v451;
  uint64_t v452;
  uint64_t *v453;
  _QWORD *v454[2];
  uint64_t v455;
  unsigned int v456;
  char *v457;
  char *v458;
  char *v459;
  std::vector<unsigned int> v460;
  uint64_t **v461;
  uint64_t *v462;
  unint64_t v463;
  unsigned int *v464;
  unsigned int *v465;
  uint64_t v466;
  uint64_t v467[3];
  unint64_t v468;
  unsigned int v469;
  uint64_t v470;

  v470 = *MEMORY[0x1E0C80C00];
  v449 = 0xAAAAAAAAAAAAAAAALL;
  v450 = 0;
  v452 = 0;
  v451 = 0;
  v454[1] = 0;
  v454[0] = 0;
  v453 = (uint64_t *)v454;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v444 = v3;
  v445 = v3;
  *(_OWORD *)v446 = 0u;
  *(_OWORD *)__p = 0u;
  v448 = 0u;
  v467[0] = a1;
  v467[1] = a2;
  if (a2 < 4)
    goto LABEL_198;
  if (a2 < 8)
    goto LABEL_198;
  if (*(_DWORD *)a1 != 843468663)
    goto LABEL_198;
  v444[0] = bswap32(*(_DWORD *)(a1 + 4));
  if (a2 < 0xC)
    goto LABEL_198;
  if (bswap32(*(_DWORD *)(a1 + 8)) != a2)
    goto LABEL_198;
  if (a2 < 0xE)
    goto LABEL_198;
  v6 = *(unsigned __int16 *)(a1 + 12);
  v7 = __rev16(v6);
  LOWORD(v444[2]) = v7;
  if (a2 < 0x14)
    goto LABEL_198;
  if (!v6)
    goto LABEL_198;
  if (a2 < 0x18)
    goto LABEL_198;
  DWORD2(v445) = bswap32(*(_DWORD *)(a1 + 20));
  if (a2 < 0x28)
    goto LABEL_198;
  v9 = *(_DWORD *)(a1 + 28);
  v10 = bswap32(v9);
  v11 = bswap32(*(_DWORD *)(a1 + 32));
  v12 = a2 >= 0x2C;
  if (v9)
  {
    if (a2 < 0x2C || a2 <= v10)
      goto LABEL_198;
    v12 = a2 - v10 >= v11;
  }
  if (!v12)
    goto LABEL_198;
  if (a2 < 0x30)
    goto LABEL_198;
  v13 = *(_DWORD *)(a1 + 40);
  v420 = bswap32(v13);
  v418 = bswap32(*(_DWORD *)(a1 + 44));
  v467[2] = 48;
  v414 = v13;
  if (v13)
  {
    if (a2 <= v420 || a2 - v420 < v418)
      goto LABEL_198;
  }
  v422 = v9;
  v424 = v11;
  std::vector<woff2::Table>::resize((char **)v446, v7);
  v15 = v446[0];
  v14 = v446[1];
  v417 = a3;
  v16 = v424;
  v17 = v422;
  v429 = (char *)LOWORD(v444[2]);
  if (!LOWORD(v444[2]))
    goto LABEL_49;
  v409 = v446[1];
  v412 = v10;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v434 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v446[1] - (char *)v446[0]) >> 3);
  v407 = v446[0];
  v21 = (int32x2_t *)((char *)v446[0] + 12);
  while (1)
  {
    if ((char *)v434 == v19)
      goto LABEL_735;
    v22 = v467[2];
    v23 = v467[2] + 1;
    if ((unint64_t)(v467[2] + 1) > v467[1])
    {
LABEL_48:
      v14 = v409;
      LODWORD(v10) = v412;
      v16 = v424;
      v17 = v422;
      v15 = v407;
      if (v18)
        goto LABEL_49;
      goto LABEL_198;
    }
    v24 = *(unsigned __int8 *)(v467[0] + v467[2]++);
    v439 = v20;
    v425 = v18;
    if ((v24 & 0x3F) == 0x3F)
    {
      v25 = v22 + 5;
      if (v25 > v467[1])
        goto LABEL_48;
      v26 = bswap32(*(_DWORD *)(v467[0] + v23));
      v467[2] = v25;
    }
    else
    {
      v26 = *(_DWORD *)&woff2::kKnownTags[4 * (v24 & 0x3F)];
    }
    v27 = v26 == 1819239265 || v26 == 1735162214;
    v28 = v27 ? v24 > 0x3F : v24 < 0x40;
    v29 = v28 ? 0 : 256;
    LODWORD(v464) = -1431655766;
    if ((woff2::ReadBase128(v467, (int *)&v464) & 1) == 0)
      break;
    v30 = (int)v464;
    LODWORD(v461) = (_DWORD)v464;
    v31 = v464;
    v32 = v439;
    if (!v28)
    {
      if (!woff2::ReadBase128(v467, (int *)&v461))
        break;
      v32 = v439;
      v31 = v461;
      if (v26 == 1819239265 && (_DWORD)v461 != 0)
        break;
    }
    if (__CFADD__(v32, v31))
      break;
    v21[-1].i32[0] = v29 | (v24 >> 6);
    v21[-1].i32[1] = v32;
    v20 = v31 + v32;
    v21[-2].i32[1] = v26;
    *v21 = vdup_n_s32(v31);
    v21[1].i32[1] = v30;
    v18 = ++v19 >= v429;
    v21 += 5;
    if (v429 == v19)
      goto LABEL_48;
  }
  v14 = v409;
  LODWORD(v10) = v412;
  v16 = v424;
  v17 = v422;
  v15 = v407;
  if (!v425)
    goto LABEL_198;
LABEL_49:
  if (v15 == v14)
    goto LABEL_735;
  v34 = *(v14 - 8);
  v35 = *(v14 - 7);
  HIDWORD(v445) = v35 + v34;
  if (__CFADD__(v35, v34))
    goto LABEL_198;
  v444[1] = 0;
  v36 = v467[2];
  if (v444[0] == 1953784678)
  {
    if ((unint64_t)(v467[2] + 4) > v467[1])
      goto LABEL_198;
    v37 = *(_DWORD *)(v467[0] + v467[2]);
    v444[1] = bswap32(v37);
    v467[2] += 4;
    if (v37 != 512 && v37 != 256)
      goto LABEL_198;
    LODWORD(v464) = -1431655766;
    if (!woff2::Read255UShort(v467, (unsigned int *)&v464))
      goto LABEL_198;
    v38 = v464;
    if (!(_DWORD)v464)
      goto LABEL_198;
    v39 = (char *)__p[1];
    v40 = (char *)v448;
    v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v448 - (unint64_t)__p[1]) >> 3);
    v42 = v464 - v41;
    v413 = v10;
    if (v464 <= v41)
    {
      if (v464 < v41)
      {
        v55 = (char *)__p[1] + 40 * v464;
        while (v40 != v55)
        {
          v56 = (void *)*((_QWORD *)v40 - 3);
          if (v56)
          {
            *((_QWORD *)v40 - 2) = v56;
            operator delete(v56);
          }
          v40 -= 40;
        }
        *(_QWORD *)&v448 = v55;
      }
    }
    else if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v448 + 1) - v448) >> 3) >= v42)
    {
      bzero((void *)v448, 40 * ((40 * v42 - 40) / 0x28) + 40);
      *(_QWORD *)&v448 = &v40[40 * ((40 * v42 - 40) / 0x28) + 40];
    }
    else
    {
      v43 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v448 + 1) - (unint64_t)__p[1]) >> 3);
      if (v43 <= v464)
        v43 = v464;
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v448 + 1) - (unint64_t)__p[1]) >> 3) >= 0x333333333333333)
        v44 = 0x666666666666666;
      else
        v44 = v43;
      if (v44 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v45 = (char *)operator new(40 * v44);
      v46 = &v45[40 * v41];
      v47 = &v45[40 * v44];
      v48 = 40 * ((40 * v42 - 40) / 0x28) + 40;
      bzero(v46, v48);
      if (v40 == v39)
      {
        __p[1] = v46;
        *(_QWORD *)&v448 = &v46[v48];
        *((_QWORD *)&v448 + 1) = v47;
      }
      else
      {
        v49 = 0;
        do
        {
          v50 = &v46[v49];
          v51 = &v40[v49];
          v52 = *(_QWORD *)&v40[v49 - 40];
          *((_DWORD *)v50 - 8) = *(_DWORD *)&v40[v49 - 32];
          *((_QWORD *)v50 - 5) = v52;
          *(_OWORD *)(v50 - 24) = *(_OWORD *)&v40[v49 - 24];
          *((_QWORD *)v50 - 1) = *(_QWORD *)&v40[v49 - 8];
          *((_QWORD *)v51 - 3) = 0;
          *((_QWORD *)v51 - 2) = 0;
          *((_QWORD *)v51 - 1) = 0;
          v49 -= 40;
        }
        while (&v40[v49] != v39);
        v40 = (char *)__p[1];
        v53 = (char *)v448;
        __p[1] = &v46[v49];
        *(_QWORD *)&v448 = &v46[v48];
        *((_QWORD *)&v448 + 1) = v47;
        while (v53 != v40)
        {
          v54 = (void *)*((_QWORD *)v53 - 3);
          if (v54)
          {
            *((_QWORD *)v53 - 2) = v54;
            operator delete(v54);
          }
          v53 -= 40;
        }
      }
      if (v40)
        operator delete(v40);
    }
    v57 = 0;
    if (v38 <= 1)
      v58 = 1;
    else
      v58 = v38;
    v430 = (void *)v58;
    do
    {
      v59 = __p[1];
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v448 - (unint64_t)__p[1]) >> 3) <= v57)
        goto LABEL_735;
      LODWORD(v461) = -1431655766;
      if (!woff2::Read255UShort(v467, (unsigned int *)&v461))
        goto LABEL_198;
      if (!(_DWORD)v461)
        goto LABEL_198;
      v60 = v461;
      v61 = v467[2] + 4;
      if ((unint64_t)(v467[2] + 4) > v467[1])
        goto LABEL_198;
      v59[10 * v57] = bswap32(*(_DWORD *)(v467[0] + v467[2]));
      v467[2] = v61;
      v62 = (char **)&v59[10 * v57 + 4];
      std::vector<unsigned short>::resize(v62, v60);
      v63 = 0;
      v64 = 0;
      v65 = 0;
      v435 = v57;
      v440 = &v59[10 * v57 + 6];
      v66 = v446[0];
      v67 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v446[1] - (char *)v446[0]) >> 3);
      do
      {
        LODWORD(v460.__begin_) = -1431655766;
        if (!woff2::Read255UShort(v467, (unsigned int *)&v460))
          goto LABEL_198;
        begin = v460.__begin_;
        if (v67 <= LODWORD(v460.__begin_))
          goto LABEL_198;
        if (v63 >= (uint64_t)(*v440 - (_QWORD)*v62) >> 1)
          goto LABEL_735;
        *(_WORD *)&(*v62)[2 * v63] = v460.__begin_;
        v69 = v66[10 * begin];
        if (v69 == 1819239265)
          v64 = begin;
        if (v69 == 1735162214)
          v65 = begin;
        ++v63;
      }
      while (v60 != v63);
      if (v65 | v64)
      {
        if (v64 < v65 || v64 - v65 != 1)
          goto LABEL_198;
      }
      v57 = v435 + 1;
    }
    while ((void *)(v435 + 1) != v430);
    v36 = v467[2];
    LODWORD(v10) = v413;
    v16 = v424;
    v17 = v422;
  }
  *(_QWORD *)&v445 = v36;
  if (HIDWORD(v36))
    goto LABEL_198;
  v71 = (v36 + DWORD2(v445) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v71 > a2)
    goto LABEL_198;
  if (!v17)
    goto LABEL_116;
  if (v71 != v10)
  {
LABEL_198:
    v118 = (char *)__p[1];
    if (__p[1])
    {
      v119 = (char *)v448;
      v120 = __p[1];
      if ((void *)v448 != __p[1])
      {
        do
        {
          v121 = (void *)*((_QWORD *)v119 - 3);
          if (v121)
          {
            *((_QWORD *)v119 - 2) = v121;
            operator delete(v121);
          }
          v119 -= 40;
        }
        while (v119 != v118);
        v120 = __p[1];
      }
      *(_QWORD *)&v448 = v118;
      operator delete(v120);
    }
    if (v446[0])
    {
      v446[1] = v446[0];
      operator delete(v446[0]);
    }
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v454[0]);
    v122 = v450;
    if (v450)
    {
      v123 = (uint64_t)v451;
      v124 = v450;
      if (v451 != v450)
      {
        do
        {
          v123 -= 56;
        }
        while ((_BYTE *)v123 != v122);
        v124 = v450;
      }
      v451 = v122;
      operator delete(v124);
    }
    return;
  }
  LODWORD(v71) = v16 + v10;
  if ((v16 + v10) <= 0xFFFFFFFC)
    v71 = (v16 + (_DWORD)v10 + 3) & 0xFFFFFFFC;
  else
    v71 = v71;
LABEL_116:
  if (v414)
  {
    if (v71 == v420)
    {
      LODWORD(v71) = v418 + v420;
      if (v418 + v420 <= 0xFFFFFFFC)
        v71 = ((_DWORD)v418 + v420 + 3) & 0xFFFFFFFC;
      else
        v71 = v71;
      goto LABEL_121;
    }
    goto LABEL_198;
  }
LABEL_121:
  if (v71 != ((a2 + 3) & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_198;
  memset(v467, 170, sizeof(v467));
  if (v444[1])
  {
    v72 = __p[1];
    v73 = (uint64_t)(v448 - (unint64_t)__p[1]) >> 3;
    v74 = 12;
    if (v444[1] == 0x20000)
    {
      v75 = 1;
    }
    else
    {
      v74 = 0;
      v75 = v444[1] == 0x10000;
    }
    v76 = (858993460 * v73 + 12);
    if (!v75)
      v76 = 0;
    v77 = v74 - 0x6666666666666664 * v73 + v76;
    if ((void *)v448 != __p[1])
    {
      do
      {
        v77 += 8 * (v72[3] - v72[2]);
        v72 += 5;
      }
      while (v72 != (_QWORD *)v448);
    }
  }
  else
  {
    v77 = (16 * LOWORD(v444[2])) | 0xC;
  }
  LOBYTE(v464) = 0;
  std::vector<unsigned char>::vector(v467, v77, &v464);
  v464 = 0;
  v465 = 0;
  v466 = 0;
  std::vector<woff2::Table>::__init_with_size[abi:fe180100]<woff2::Table*,woff2::Table*>(&v464, v446[0], (uint64_t)v446[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v446[1] - (char *)v446[0]) >> 3));
  if (v444[1])
  {
    v78 = __p[1];
    v426 = (woff2 *)v448;
    if (__p[1] != (void *)v448)
    {
      do
      {
        v462 = 0;
        v463 = 0;
        v461 = &v462;
        v79 = (unsigned __int16 *)v78[2];
        v431 = v78;
        v436 = (unsigned __int16 *)v78[3];
        if (v79 != v436)
        {
          do
          {
            v80 = *v79;
            if (0xCCCCCCCCCCCCCCCDLL * (((char *)v446[1] - (char *)v446[0]) >> 3) <= v80)
              goto LABEL_735;
            v81 = (unsigned int *)((char *)v446[0] + 40 * *v79);
            v82 = &v462;
            v83 = &v462;
            if (v462)
            {
              v84 = *v81;
              v85 = v462;
              while (1)
              {
                while (1)
                {
                  v82 = (uint64_t **)v85;
                  v86 = *((_DWORD *)v85 + 7);
                  if (v86 <= v84)
                    break;
                  v85 = *v82;
                  v83 = v82;
                  if (!*v82)
                    goto LABEL_144;
                }
                if (v86 >= v84)
                  break;
                v85 = v82[1];
                if (!v85)
                {
                  v83 = v82 + 1;
                  goto LABEL_144;
                }
              }
              v87 = v82;
            }
            else
            {
LABEL_144:
              v87 = operator new(0x28uLL);
              v87[7] = *v81;
              *((_WORD *)v87 + 16) = 0;
              *(_QWORD *)v87 = 0;
              *((_QWORD *)v87 + 1) = 0;
              *((_QWORD *)v87 + 2) = v82;
              *v83 = (uint64_t *)v87;
              v88 = (uint64_t *)v87;
              if (*v461)
              {
                v461 = (uint64_t **)*v461;
                v88 = *v83;
              }
              std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v462, v88);
              ++v463;
            }
            *((_WORD *)v87 + 16) = v80;
            ++v79;
          }
          while (v79 != v436);
          v89 = (uint64_t)v461;
          if (v461 != &v462)
          {
            v90 = 0;
            v91 = v431[2];
            v92 = (v431[3] - v91) >> 1;
            do
            {
              if (v92 <= v90)
                goto LABEL_735;
              *(_WORD *)(v91 + 2 * v90) = *(_WORD *)(v89 + 32);
              v93 = *(uint64_t **)(v89 + 8);
              if (v93)
              {
                do
                {
                  v94 = (uint64_t **)v93;
                  v93 = (uint64_t *)*v93;
                }
                while (v93);
              }
              else
              {
                do
                {
                  v94 = *(uint64_t ***)(v89 + 16);
                  v27 = *v94 == (uint64_t *)v89;
                  v89 = (uint64_t)v94;
                }
                while (!v27);
              }
              ++v90;
              v89 = (uint64_t)v94;
            }
            while (v94 != &v462);
          }
        }
        std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::destroy((uint64_t)&v461, v462);
        v78 = v431 + 5;
      }
      while (v431 + 5 != (_QWORD *)v426);
    }
  }
  else
  {
    v95 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v465 - (char *)v464) >> 3));
    v96 = v465 == v464 ? 0 : v95;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *,false>((uint64_t)v464, (unint64_t)v465, v96, 1);
  }
  v97 = (_DWORD *)v467[0];
  if (v467[1] == v467[0])
    goto LABEL_735;
  if (v444[1])
  {
    *(_DWORD *)v467[0] = bswap32(v444[0]);
    v97[1] = bswap32(v444[1]);
    v97[2] = bswap32(-858993459 * (((unint64_t)v448 - (unint64_t)__p[1]) >> 3));
    v98 = (void *)v448;
    if ((void *)v448 == __p[1])
    {
      v100 = 12;
      v101 = v448;
    }
    else
    {
      v99 = 0;
      v100 = 12;
      do
      {
        *(_DWORD *)((char *)v97 + v100) = 0;
        v100 += 4;
        ++v99;
        v98 = __p[1];
        v101 = v448;
      }
      while (v99 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v448 - (unint64_t)__p[1]) >> 3));
    }
    if (v444[1] == 0x20000)
    {
      v108 = (char *)v97 + v100;
      *v108 = 0;
      *((_BYTE *)v97 + (v100 | 1)) = 0;
      *((_BYTE *)v97 + (v100 | 2)) = 0;
      *((_BYTE *)v97 + (v100 | 3)) = 0;
      *(_QWORD *)(v108 + 4) = 0;
      v100 += 12;
      v98 = __p[1];
      v101 = v448;
    }
    v109 = (char *)__p[1];
    if ((void *)v448 != __p[1])
    {
      v110 = 0;
      v111 = 12;
      do
      {
        v432 = v109;
        v437 = v111;
        v112 = (int *)&v109[40 * v110];
        *((_BYTE *)v97 + v111) = BYTE3(v100);
        *((_BYTE *)v97 + (v111 | 1)) = BYTE2(v100);
        *((_BYTE *)v97 + (v111 | 2)) = BYTE1(v100);
        *((_BYTE *)v97 + (v111 | 3)) = v100;
        v112[1] = v100;
        v441 = (unsigned int *)(v112 + 1);
        v113 = (unsigned __int16 *)*((_QWORD *)v112 + 2);
        v114 = (unsigned __int16 *)*((_QWORD *)v112 + 3);
        while (v113 != v114)
        {
          if (0xCCCCCCCCCCCCCCCDLL * (((char *)v446[1] - (char *)v446[0]) >> 3) <= *v113)
            goto LABEL_735;
          v115 = *((_DWORD *)v446[0] + 10 * *v113);
          LODWORD(v461) = v115;
          if (0x6DB6DB6DB6DB6DB7 * ((v451 - (_BYTE *)v450) >> 3) <= v110)
            goto LABEL_735;
          *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v450 + 7 * v110 + 4, v115, &v461)+ 8) = v100;
          ++v113;
        }
        v116 = *v441;
        if (v467[1] - v467[0] <= v116)
          goto LABEL_735;
        v111 = v437 + 4;
        v432[10 * v110++ + 2] = woff2::ComputeULongSum((woff2 *)(v467[0] + v116), v100 - v116);
        v109 = (char *)__p[1];
      }
      while (v110 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v448 - (unint64_t)__p[1]) >> 3));
    }
  }
  else
  {
    if (LOWORD(v444[2]))
    {
      v103 = v102;
      v104 = 0;
      v105 = v464;
      v106 = ((char *)v465 - (char *)v464) / 40;
      do
      {
        if (v451 == v450 || v106 == v104)
          goto LABEL_735;
        *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v450 + 4, *v105, v105)+ 8) = (_DWORD)v103;
        v107 = *v105;
        v105 += 10;
        ++v104;
      }
      while (v104 < LOWORD(v444[2]));
    }
  }
  if (v467[1] == v467[0])
    goto LABEL_735;
  v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v417 + 16))(v417, v467[0], v467[1] - v467[0]);
  if (v117)
  {
    if (v467[1] == v467[0])
      goto LABEL_735;
    LODWORD(v449) = woff2::ComputeULongSum((woff2 *)v467[0], v467[1] - v467[0]);
  }
  if (v464)
    operator delete(v464);
  if (v467[0])
  {
    v467[1] = v467[0];
    operator delete((void *)v467[0]);
  }
  if (!v117 || (float)((float)HIDWORD(v445) / (float)a2) > 100.0)
    goto LABEL_198;
  v125 = v445;
  memset(v443, 170, sizeof(v443));
  std::vector<unsigned char>::vector(v443, HIDWORD(v445));
  v126 = HIDWORD(v445);
  if (!HIDWORD(v445))
    goto LABEL_725;
  v127 = (uint8_t *)v443[0];
  if (v443[1] == v443[0])
    goto LABEL_735;
  v128 = DWORD2(v445);
  v129 = compression_decode_scratch_buffer_size(COMPRESSION_BROTLI);
  v130 = v129 ? malloc_type_malloc(v129, 0x4768D495uLL) : 0;
  v131 = compression_decode_buffer(v127, v126, (const uint8_t *)(a1 + v125), v128, v130, COMPRESSION_BROTLI);
  free(v130);
  if (v131 != v126 || v451 == v450)
    goto LABEL_725;
  v442 = 0;
  while (1)
  {
    v408 = v443[0];
    if (v443[1] == v443[0])
      goto LABEL_735;
    v419 = HIDWORD(v445);
    v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 32))(v417);
    v468 = 0xAAAAAAAAAAAAAAAALL;
    v469 = -1431655766;
    v133 = (char *)v450;
    if (0x6DB6DB6DB6DB6DB7 * ((v451 - (_BYTE *)v450) >> 3) <= v442)
      goto LABEL_735;
    v134 = v132;
    if (v444[1])
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v448 - (unint64_t)__p[1]) >> 3) <= v442)
        goto LABEL_735;
      v150 = (char *)__p[1] + 40 * v442;
      v151 = (unsigned __int16 *)*((_QWORD *)v150 + 2);
      v152 = (unsigned __int16 *)*((_QWORD *)v150 + 3);
      if (v151 == v152)
      {
LABEL_281:
        v140 = 0;
        v137 = 0;
        LOBYTE(v148) = 1;
        goto LABEL_282;
      }
      v137 = 0;
      v153 = 0;
      v154 = 0;
      do
      {
        if (0xCCCCCCCCCCCCCCCDLL * (((char *)v446[1] - (char *)v446[0]) >> 3) <= *v151)
          goto LABEL_735;
        v155 = (char *)v446[0] + 40 * *v151;
        if ((unint64_t)v153 >= v154)
        {
          v156 = (v153 - v137) >> 3;
          v157 = v156 + 1;
          if ((unint64_t)(v156 + 1) >> 61)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          if ((uint64_t)(v154 - (_QWORD)v137) >> 2 > v157)
            v157 = (uint64_t)(v154 - (_QWORD)v137) >> 2;
          if (v154 - (unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
            v158 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v158 = v157;
          if (v158)
            v158 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(v158);
          else
            v159 = 0;
          v160 = (char *)(v158 + 8 * v156);
          *(_QWORD *)v160 = v155;
          v140 = v160 + 8;
          while (v153 != v137)
          {
            v161 = *((_QWORD *)v153 - 1);
            v153 -= 8;
            *((_QWORD *)v160 - 1) = v161;
            v160 -= 8;
          }
          v154 = v158 + 8 * v159;
          if (v137)
            operator delete(v137);
          v137 = v160;
        }
        else
        {
          *(_QWORD *)v153 = v155;
          v140 = v153 + 8;
        }
        ++v151;
        v153 = v140;
      }
      while (v151 != v152);
    }
    else
    {
      v135 = (char *)v446[0];
      v136 = (char *)v446[1];
      if (v446[0] == v446[1])
        goto LABEL_281;
      v137 = 0;
      v138 = 0;
      v139 = 0;
      do
      {
        if ((unint64_t)v138 >= v139)
        {
          v141 = (v138 - v137) >> 3;
          v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 61)
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          if ((uint64_t)(v139 - (_QWORD)v137) >> 2 > v142)
            v142 = (uint64_t)(v139 - (_QWORD)v137) >> 2;
          if (v139 - (unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8)
            v143 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v143 = v142;
          if (v143)
            v143 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(v143);
          else
            v144 = 0;
          v145 = (char *)(v143 + 8 * v141);
          *(_QWORD *)v145 = v135;
          v140 = v145 + 8;
          while (v138 != v137)
          {
            v146 = *((_QWORD *)v138 - 1);
            v138 -= 8;
            *((_QWORD *)v145 - 1) = v146;
            v145 -= 8;
          }
          v139 = v143 + 8 * v144;
          if (v137)
            operator delete(v137);
          v137 = v145;
        }
        else
        {
          *(_QWORD *)v138 = v135;
          v140 = v138 + 8;
        }
        v135 += 40;
        v138 = v140;
      }
      while (v135 != v136);
    }
    if (v137 == v140)
    {
      LOBYTE(v148) = 1;
      v140 = v137;
    }
    else
    {
      v147 = v137;
      while (1)
      {
        v148 = *(_DWORD **)v147;
        if (**(_DWORD **)v147 == 1735162214)
          break;
        v147 += 8;
        if (v147 == v140)
        {
          v148 = 0;
          break;
        }
      }
      v149 = v137;
      while (**(_DWORD **)v149 != 1819239265)
      {
        v149 += 8;
        if (v149 == v140)
        {
          if (v148)
            goto LABEL_723;
          goto LABEL_282;
        }
      }
      if (!v148 || ((*(_DWORD *)(*(_QWORD *)v149 + 4) ^ v148[1]) & 0x100) != 0)
        goto LABEL_723;
      LOBYTE(v148) = 0;
    }
LABEL_282:
    if (v444[1])
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v448 - (unint64_t)__p[1]) >> 3) <= v442)
        goto LABEL_735;
      v162 = (unint64_t *)((char *)__p[1] + 40 * v442 + 8);
    }
    else
    {
      v162 = &v449;
    }
    if ((v148 & 1) == 0)
      break;
LABEL_287:
    if (v137)
      operator delete(v137);
    if (++v442 >= 0x6DB6DB6DB6DB6DB7 * ((v451 - (_BYTE *)v450) >> 3))
      goto LABEL_725;
  }
  v163 = 0;
  v393 = 0;
  v398 = &v133[56 * v442];
  v423 = *(_DWORD *)v162;
  v399 = v398 + 4;
  v402 = v398 + 16;
  v403 = (char **)(v398 + 8);
  v392 = v398 + 2;
  v395 = v408 + 8;
  v164 = (v140 - v137) >> 3;
  if (v164 <= 1)
    v164 = 1;
  v404 = v164;
  while (1)
  {
    v421 = v163;
    v165 = *(_QWORD *)&v137[8 * v163];
    v167 = *(unsigned int *)(v165 + 8);
    LODWORD(v455) = *(_DWORD *)v165;
    v166 = v455;
    HIDWORD(v455) = v167;
    v168 = (_QWORD **)std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::find<std::pair<unsigned int,unsigned int>>((uint64_t)&v453, v455, v167);
    if (!v442 && v454 != v168)
      goto LABEL_724;
    v169 = *(unsigned int *)(v165 + 12);
    if (v169 + v167 > v419)
      goto LABEL_724;
    if (v166 == 1751672161)
    {
      if (v169 < 0x24)
        goto LABEL_724;
      *v399 = bswap32(*(unsigned __int16 *)&v408[v167 + 34]) >> 16;
    }
    v438 = (unsigned int *)v165;
    if (v454 == v168)
      break;
    v170 = *((_DWORD *)std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned int,unsigned int> const&>,std::tuple<>>(&v453, v166, v167, &v455)+ 9);
LABEL_704:
    v362 = v438[6];
    v468 = __PAIR64__(bswap32(v438[5]), bswap32(v170));
    v469 = bswap32(v362);
    v363 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v398 + 4, *v438, v438);
    if (!(*(unsigned int (**)(uint64_t, unint64_t *, _QWORD, uint64_t))(*(_QWORD *)v417 + 24))(v417, &v468, (*((_DWORD *)v363 + 8) + 4), 12))goto LABEL_723;
    v364 = 0;
    v365 = 0;
    do
    {
      v364 += bswap32(*(_DWORD *)((char *)&v468 + v365));
      v12 = v365 >= 8;
      v365 += 4;
    }
    while (!v12);
      goto LABEL_723;
    v366 = v438[5];
    v367 = v438[6];
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 32))(v417) < (unint64_t)(v367 + v366))
      goto LABEL_723;
    v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 32))(v417);
    v423 += v170 + v364;
    v163 = v421 + 1;
    if (v421 + 1 == v404)
    {
      if (v137 != v140)
      {
        v368 = v137;
        while (1)
        {
          v369 = *(_DWORD **)v368;
          if (**(_DWORD **)v368 == 1751474532)
            break;
          v368 += 8;
          if (v368 == v140)
            goto LABEL_287;
        }
        if (v369[6] < 0xCu)
          goto LABEL_723;
        LODWORD(v467[0]) = bswap32(-1313820742 - v423);
        if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v417 + 24))(v417, v467, (v369[5] + 8), 4) & 1) == 0)goto LABEL_723;
      }
      goto LABEL_287;
    }
  }
  if ((*(_BYTE *)(v165 + 5) & 1) == 0)
  {
    if (v166 == 1751474532)
    {
      if (v169 < 0xC)
        goto LABEL_724;
      *(_DWORD *)&v395[v167] = 0;
      v169 = *(unsigned int *)(v165 + 12);
    }
    *(_DWORD *)(v165 + 20) = v134;
    v171 = (woff2 *)&v408[*(unsigned int *)(v165 + 8)];
    v170 = woff2::ComputeULongSum(v171, v169);
    if (((*(uint64_t (**)(uint64_t, woff2 *, unint64_t))(*(_QWORD *)v417 + 16))(v417, v171, v169) & 1) != 0)
      goto LABEL_703;
LABEL_724:
    operator delete(v137);
LABEL_725:
    if (v443[0])
    {
      v443[1] = v443[0];
      operator delete(v443[0]);
    }
    goto LABEL_198;
  }
  if (v166 == 1819239265)
  {
    v170 = v393;
    goto LABEL_703;
  }
  if (v166 != 1752003704)
  {
    if (v166 != 1735162214)
      goto LABEL_724;
    *(_DWORD *)(v165 + 20) = v134;
    if (v137 == v140)
    {
LABEL_315:
      v405 = 0;
    }
    else
    {
      v172 = v137;
      while (1)
      {
        v405 = *(_DWORD **)v172;
        if (**(_DWORD **)v172 == 1819239265)
          break;
        v172 += 8;
        if (v172 == v140)
          goto LABEL_315;
      }
    }
    v173 = *(unsigned int *)(v165 + 16);
    v433 = (char *)operator new(0x70uLL);
    *((_OWORD *)v433 + 5) = 0u;
    *((_OWORD *)v433 + 6) = 0u;
    *((_OWORD *)v433 + 3) = 0u;
    *((_OWORD *)v433 + 4) = 0u;
    *((_OWORD *)v433 + 1) = 0u;
    *((_OWORD *)v433 + 2) = 0u;
    *(_OWORD *)v433 = 0u;
    v384 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 32))(v417);
    if (v173 < 6)
      goto LABEL_722;
    v174 = &v408[v167];
    v379 = *(_WORD *)&v408[v167 + 2];
    v175 = bswap32(*(unsigned __int16 *)&v408[v167 + 4]) >> 16;
    *(_WORD *)v398 = v175;
    if (v173 < 8)
      goto LABEL_722;
    v176 = *((unsigned __int16 *)v174 + 3);
    *v392 = __rev16(v176);
    v177 = v176 ? 2 : 1;
    if (v405[6] != ((_DWORD)v175 + 1) << v177)
      goto LABEL_722;
    v178 = *(_DWORD *)(v165 + 16);
    if (v178 < 0x24)
      goto LABEL_722;
    v179 = 0;
    v180 = v433 + 8;
    v181 = 36;
    do
    {
      if (v179 + 12 > v173)
        goto LABEL_722;
      v182 = bswap32(*(_DWORD *)&v395[v167 + v179]);
      if (v182 > v178 - v181)
        goto LABEL_722;
      *(v180 - 1) = &v174[v181];
      *v180 = v182;
      v181 += v182;
      v180 += 2;
      v179 += 4;
    }
    while (v179 != 28);
    v373 = 0;
    v380 = *(_QWORD *)v433;
    v382 = *((_QWORD *)v433 + 1);
    v183 = (unsigned int *)*((_QWORD *)v433 + 3);
    v464 = (unsigned int *)*((_QWORD *)v433 + 2);
    v465 = v183;
    v466 = 0;
    v184 = *((_QWORD *)v433 + 5);
    v370 = *((_QWORD *)v433 + 4);
    v185 = (uint64_t *)*((_QWORD *)v433 + 7);
    v461 = (uint64_t **)*((_QWORD *)v433 + 6);
    v462 = v185;
    v463 = 0;
    v186 = *((_QWORD *)v433 + 9);
    v415 = *((_QWORD *)v433 + 8);
    v386 = *((_QWORD *)v433 + 10);
    v377 = *((_QWORD *)v433 + 11);
    v378 = v184;
    v374 = *((_QWORD *)v433 + 12);
    v381 = *((_QWORD *)v433 + 13);
    if ((v379 & 0x100) != 0)
    {
      if (v178 - v181 >= (v175 + 7) >> 3)
      {
        v373 = &v174[v181];
        goto LABEL_330;
      }
LABEL_722:
      operator delete(v433);
      goto LABEL_723;
    }
LABEL_330:
    memset(&v460, 170, sizeof(v460));
    std::vector<unsigned int>::vector(&v460, v175 + 1);
    v457 = 0;
    v458 = 0;
    v459 = 0;
    v391 = ((*(unsigned __int16 *)v398 + 31) >> 3) & 0x3FFCLL;
    if (v391 > v377)
    {
      v170 = 0;
      v187 = 0;
      goto LABEL_698;
    }
    v428 = (woff2 *)operator new[]();
    std::vector<unsigned short>::resize(v403, *(unsigned __int16 *)v398);
    if (!*(_WORD *)v398)
    {
      v170 = 0;
      v397 = 0;
      goto LABEL_676;
    }
    v170 = 0;
    v394 = 0;
    v397 = 0;
    v389 = 0;
    v385 = 0;
    v401 = 0;
    v226 = 0;
    v371 = 0;
    v372 = v377 - 8;
    v383 = 5120;
    while (2)
    {
      v388 = v226 + 2;
      if (v226 + 2 > v382)
        goto LABEL_693;
      v376 = v394 >> 3;
      v375 = 0x80u >> (v394 & 7);
      v387 = v375 & *(_BYTE *)(v386 + v376);
      v390 = *(unsigned __int16 *)(v380 + v226);
      v411 = __rev16(v390);
      if (!v411)
      {
        if ((v375 & *(_BYTE *)(v386 + v376)) == 0)
        {
          v411 = 0;
          v236 = 0;
          goto LABEL_642;
        }
        goto LABEL_693;
      }
      if (v411 == 0xFFFF)
      {
        LODWORD(v467[0]) = 0;
        if (!v387)
          goto LABEL_693;
        v227 = 0;
        v228 = v385;
        do
        {
          v229 = v228 + 2;
          if (v228 + 2 > v186)
            goto LABEL_693;
          v230 = bswap32(*(unsigned __int16 *)(v415 + v228));
          v231 = 4;
          if ((v230 & 0x10000) != 0)
            v231 = 6;
          v232 = v231 | (v230 >> 20) & 8;
          if ((v230 & 0x400000) != 0)
            v232 = v231 + 4;
          v233 = v231 + 2;
          if ((v230 & 0x80000) == 0)
            v233 = v232;
          v228 = v233 + v229;
          if (v229 > v186 - v233 || v228 > v186)
            goto LABEL_693;
          v227 = (v227 | HIBYTE(v230)) & 1;
        }
        while ((v230 & 0x200000) != 0);
        if (v227)
        {
          if (!woff2::Read255UShort((uint64_t *)&v461, (unsigned int *)v467))
            goto LABEL_693;
          v235 = LODWORD(v467[0]);
        }
        else
        {
          v235 = 0;
        }
        v279 = v228 - v385;
        v280 = v228 - v385 + 12;
        v281 = v280 + v235;
        if (v383 < v280 + v235)
        {
          v340 = operator new[]();
          if (v428)
            MEMORY[0x1B5E0CD14](v428, 0x1000C8077774924);
          v428 = (woff2 *)v340;
          v383 = v281;
        }
        *(_WORD *)v428 = v390;
        if (v391 > v372)
          goto LABEL_693;
        if (v391 + 8 > v377)
          goto LABEL_693;
        *(_QWORD *)((char *)v428 + 2) = *(_QWORD *)(v386 + v391);
        if (v279 > 0x40000000 || v385 > v186 - v279)
          goto LABEL_693;
        memcpy((char *)v428 + 10, (const void *)(v415 + v385), v279);
        v236 = v279 + 10;
        if (v227)
        {
          v282 = LODWORD(v467[0]);
          *(_WORD *)((char *)v428 + v236) = bswap32(v467[0]) >> 16;
          if (v282 > 0x40000000)
            goto LABEL_693;
          v283 = v389 + v282;
          if (v389 + v282 > v381 || v389 > v381 - v282)
            goto LABEL_693;
          memcpy((char *)v428 + v280, (const void *)(v374 + v389), v282);
          v236 = v280 + LODWORD(v467[0]);
          v389 = v283;
        }
        v411 = 0xFFFF;
        v385 = v228;
        v391 += 8;
        goto LABEL_642;
      }
      v237 = v457;
      v458 = v457;
      LODWORD(v467[0]) = -1431655766;
      if (v390)
      {
        v238 = 0;
        v239 = 0;
        do
        {
          if ((woff2::Read255UShort((uint64_t *)&v464, (unsigned int *)v467) & 1) == 0)
            goto LABEL_693;
          if (v237 >= v459)
          {
            v241 = v457;
            v242 = (v237 - v457) >> 2;
            v243 = v242 + 1;
            if ((unint64_t)(v242 + 1) >> 62)
              std::vector<unsigned int>::__throw_length_error[abi:fe180100]();
            v244 = v459 - v457;
            if ((v459 - v457) >> 1 > v243)
              v243 = v244 >> 1;
            if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFFCLL)
              v245 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v245 = v243;
            if (v245)
            {
              v246 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)&v459, v245);
              v241 = v457;
              v237 = v458;
            }
            else
            {
              v246 = 0;
            }
            v247 = &v246[4 * v242];
            *(_DWORD *)v247 = v467[0];
            v248 = v247 + 4;
            while (v237 != v241)
            {
              v249 = *((_DWORD *)v237 - 1);
              v237 -= 4;
              *((_DWORD *)v247 - 1) = v249;
              v247 -= 4;
            }
            v457 = v247;
            v458 = v248;
            v459 = &v246[4 * v245];
            if (v241)
              operator delete(v241);
            v458 = v248;
            v12 = __CFADD__(v467[0], v239);
            v239 += LODWORD(v467[0]);
            if (v12)
              goto LABEL_693;
            v237 = v248;
          }
          else
          {
            v240 = v467[0];
            *(_DWORD *)v237 = v467[0];
            v237 += 4;
            v458 = v237;
            v12 = __CFADD__(v240, v239);
            v239 += v240;
            if (v12)
              goto LABEL_693;
          }
          ++v238;
        }
        while (v238 != v411);
      }
      else
      {
        v239 = 0;
      }
      if (v378 - v401 < v239)
        goto LABEL_693;
      v250 = v239;
      v252 = v462;
      v251 = v463;
      v253 = (uint64_t)v461;
      if (v371 < v250)
      {
        v254 = operator new[]();
        if (v397)
          MEMORY[0x1B5E0CD14](v397, 0x1000C8005A209FELL);
        v397 = (signed int *)v254;
        v371 = v250;
      }
      if ((unint64_t)v252 - v251 < v250)
        goto LABEL_693;
      if (!(_DWORD)v250)
      {
        if (v401 + v250 > v378 || v401 > v378 - v250)
          goto LABEL_693;
        v264 = 0;
        v401 += v250;
        goto LABEL_531;
      }
      v255 = 0;
      v256 = 0;
      v257 = 0;
      v258 = 0;
      v259 = v253 + v251;
      v260 = v370;
LABEL_472:
      v261 = *(unsigned __int8 *)(v260 + v401);
      v262 = v261 & 0x7F;
      if (v262 >= 0x54)
      {
        if (v262 < 0x7C)
          v263 = 3;
        else
          v263 = 4;
        if (v262 < 0x78)
          v263 = 2;
      }
      else
      {
        v263 = 1;
      }
      v12 = __CFADD__(v263, v256);
      v264 = v263 + v256;
      if (v12 || (unint64_t)v252 - v251 < v264)
        goto LABEL_693;
      if (v262 <= 9)
      {
        v265 = 0;
        v266 = *(unsigned __int8 *)(v259 + v256) | (((v262 >> 1) & 7) << 8);
        v267 = (v261 & 1) == 0;
        goto LABEL_483;
      }
      if (v262 > 0x13)
      {
        if (v262 > 0x53)
        {
          if (v262 > 0x77)
          {
            if (v262 > 0x7B)
            {
              v265 = *(unsigned __int8 *)(v259 + v256 + 1) | (*(unsigned __int8 *)(v259 + v256) << 8);
              if ((v261 & 1) == 0)
                v265 = -v265;
              v266 = *(unsigned __int8 *)(v259 + v256 + 3) | (*(unsigned __int8 *)(v259 + v256 + 2) << 8);
            }
            else
            {
              v276 = *(unsigned __int8 *)(v259 + v256 + 1);
              v265 = (v276 >> 4) | (16 * *(unsigned __int8 *)(v259 + v256));
              if ((v261 & 1) == 0)
                v265 = -v265;
              v266 = *(unsigned __int8 *)(v259 + v256 + 2) | ((v276 & 0xF) << 8);
            }
            v267 = (v261 & 2) == 0;
LABEL_483:
            if (v267)
              v268 = -v266;
            else
              v268 = v266;
          }
          else
          {
            v272 = (v262 - 84) / 0xCu;
            v273 = *(unsigned __int8 *)(v259 + v256) | (v272 << 8);
            if ((v261 & 1) != 0)
              v265 = v273 + 1;
            else
              v265 = ~v273;
            v274 = *(unsigned __int8 *)(v259 + v256 + 1) | ((((v262 - 84 + 4 * v272) >> 2) & 3) << 8);
            v268 = ~v274;
            if ((v261 & 2) != 0)
              v268 = v274 + 1;
          }
        }
        else
        {
          v269 = *(unsigned __int8 *)(v259 + v256);
          v270 = (v262 - 20) & 0x30 | (v269 >> 4);
          if ((v261 & 1) != 0)
            v265 = v270 + 1;
          else
            v265 = ~v270;
          v271 = (4 * (v262 - 20)) & 0x30 | v269 & 0xF;
          if ((v261 & 2) != 0)
            v268 = v271 + 1;
          else
            v268 = ~v271;
        }
      }
      else
      {
        v268 = 0;
        v265 = (((_WORD)v262 << 7) + 768) & 0x700 | *(unsigned __int8 *)(v259 + v256);
        if ((v261 & 1) == 0)
          v265 = -v265;
      }
      if (v258 < 1)
      {
        if (v258 && (int)(0x80000000 - v258) > v265)
          goto LABEL_693;
      }
      else if ((v258 ^ 0x7FFFFFFF) < v265)
      {
        goto LABEL_693;
      }
      if (v257 < 1)
      {
        if (v257 && (int)(0x80000000 - v257) > v268)
          goto LABEL_693;
      }
      else if ((v257 ^ 0x7FFFFFFF) < v268)
      {
        goto LABEL_693;
      }
      v275 = &v397[v255];
      ++v260;
      v258 += v265;
      v257 += v268;
      *v275 = v258;
      v275[1] = v257;
      *((_BYTE *)v275 + 8) = (v261 >> 7) ^ 1;
      v255 += 3;
      v256 = v264;
      if (3 * v250 == v255)
      {
        if (v250 > 0x40000000)
          goto LABEL_693;
        if (v401 + v250 > v378)
          goto LABEL_693;
        if (v401 > v378 - v250)
          goto LABEL_693;
        v401 += v250;
        if (v264 > 0x40000000)
          goto LABEL_693;
LABEL_531:
        if (v463 + v264 > (unint64_t)v462)
          goto LABEL_693;
        if (v463 > (unint64_t)v462 - v264)
          goto LABEL_693;
        v463 += v264;
        v456 = -1431655766;
        if (!woff2::Read255UShort((uint64_t *)&v461, &v456) || v250 >> 27 || v456 >> 30)
          goto LABEL_693;
        v277 = 2 * v411 + 12;
        v278 = 5 * (_DWORD)v250 + v277 + v456;
        if (v383 < v278)
        {
          v341 = operator new[]();
          if (v428)
            MEMORY[0x1B5E0CD14](v428, 0x1000C8077774924);
          v428 = (woff2 *)v341;
          v383 = v278;
        }
        *(_WORD *)v428 = v390;
        if (v387)
        {
          if (v391 > v372 || v391 + 8 > v377)
            goto LABEL_693;
          *(_QWORD *)((char *)v428 + 2) = *(_QWORD *)(v386 + v391);
          v391 += 8;
        }
        else
        {
          if ((_DWORD)v250)
          {
            v285 = *v397;
            v284 = v397[1];
            if ((_DWORD)v250 == 1)
            {
              v286 = *v397;
              v287 = v397[1];
            }
            else
            {
              v288 = v250 - 1;
              v289 = v397 + 4;
              v287 = v397[1];
              v286 = *v397;
              do
              {
                v290 = *(v289 - 1);
                v291 = *v289;
                if (v285 >= v290)
                  v285 = *(v289 - 1);
                if (v290 > v286)
                  v286 = *(v289 - 1);
                if (v284 >= v291)
                  v284 = *v289;
                if (v291 > v287)
                  v287 = *v289;
                v289 += 3;
                --v288;
              }
              while (v288);
            }
          }
          else
          {
            v286 = 0;
            v287 = 0;
            v284 = 0;
            v285 = 0;
          }
          *((_WORD *)v428 + 1) = bswap32(v285) >> 16;
          *((_WORD *)v428 + 2) = bswap32(v284) >> 16;
          *((_WORD *)v428 + 3) = bswap32(v286) >> 16;
          *((_WORD *)v428 + 4) = bswap32(v287) >> 16;
        }
        if (v390)
        {
          v292 = 0;
          v293 = v457;
          v294 = (v458 - v457) >> 2;
          v295 = v411;
          if (v411 <= 1)
            v295 = 1;
          v296 = 2 * v295;
          v297 = -1;
          while (v294)
          {
            v297 += *(_DWORD *)v293;
            if (v297 >= 0x10000)
              goto LABEL_693;
            *(_WORD *)((char *)v428 + v292 + 10) = bswap32(v297) >> 16;
            v293 += 4;
            v292 += 2;
            --v294;
            if (v296 == v292)
            {
              v298 = v292 + 10;
              goto LABEL_577;
            }
          }
          goto LABEL_735;
        }
        v298 = 10;
LABEL_577:
        v299 = v456;
        *(_WORD *)((char *)v428 + v298) = bswap32(v456) >> 16;
        if (v299 > 0x40000000)
          goto LABEL_693;
        v300 = v389 + v299;
        if (v389 + v299 > v381 || v389 > v381 - v299)
          goto LABEL_693;
        memcpy((char *)v428 + v298 + 2, (const void *)(v374 + v389), v299);
        v301 = (v379 & 0x100) != 0 && (v375 & v373[v376]) != 0;
        v302 = v456 + v277;
        if (!(_DWORD)v250)
        {
          if (v383 >= v302)
            goto LABEL_641;
          goto LABEL_693;
        }
        v303 = 0;
        v304 = 0;
        v305 = 0;
        v306 = 0;
        v307 = 0;
        v308 = v397 + 1;
        v309 = -1;
        v310 = v456 + v277;
LABEL_585:
        v311 = 0;
        v312 = &v308[3 * v303];
        do
        {
          v313 = *((unsigned __int8 *)v312 + 4);
          if (v301 && v303 + v311 == 0)
            v313 |= 0x40u;
          v314 = *(v312 - 1) - v307;
          if (v314)
          {
            v316 = v314 + 255;
            if (v314 <= 0)
              v317 = 2;
            else
              v317 = 18;
            v315 = v317 | v313;
            if (v316 <= 0x1FE)
              ++v305;
            else
              v305 += 2;
            if (v316 > 0x1FE)
              v315 = v313;
          }
          else
          {
            v315 = v313 | 0x10;
          }
          v318 = *v312 - v306 + 255;
          if (*v312 <= v306)
            v319 = 4;
          else
            v319 = 36;
          v320 = v315 | v319;
          v321 = v318 > 0x1FE;
          if (v318 <= 0x1FE)
            v322 = v304 + 1;
          else
            v322 = v304 + 2;
          if (v321)
            v323 = v315;
          else
            v323 = v320;
          v324 = v315 | 0x20;
          if (*v312 == v306)
          {
            v325 = v324;
          }
          else
          {
            v304 = v322;
            v325 = v323;
          }
          if (v325 != v309 || (_DWORD)v311 == 255)
          {
            if ((_DWORD)v311)
            {
              if (v383 <= v310)
                goto LABEL_693;
              v326 = v310++;
              *((_BYTE *)v428 + v326) = v311;
            }
            if (v383 > v310)
            {
              v327 = v310++;
              *((_BYTE *)v428 + v327) = v325;
              v307 = *(v312 - 1);
              v306 = *v312;
              v328 = ~v303 + v250;
              v303 += v311 + 1;
              v309 = v325;
              if (v328 == v311)
                goto LABEL_622;
              goto LABEL_585;
            }
            goto LABEL_693;
          }
          *((_BYTE *)v428 + v310 - 1) |= 8u;
          v307 = *(v312 - 1);
          v306 = *v312;
          v312 += 3;
          ++v311;
        }
        while (v250 - v303 != v311);
        if (v383 <= v310)
          goto LABEL_693;
        v329 = v310++;
        *((_BYTE *)v428 + v329) = v250 - v303;
LABEL_622:
        v12 = __CFADD__(v304, v305);
        v330 = v304 + v305;
        if (v12)
          goto LABEL_693;
        v331 = v310 + v330;
        if (v331 < v310 || v383 < v331)
          goto LABEL_693;
        v332 = 0;
        v333 = 0;
        v302 = v310 + v305;
        do
        {
          v334 = v333;
          v333 = *(v308 - 1);
          v335 = v333 - v334;
          if (v335)
          {
            if ((v335 + 255) > 0x1FE)
            {
              *(_WORD *)((char *)v428 + (int)v310) = bswap32(v335) >> 16;
              v310 += 2;
            }
            else
            {
              if (v335 < 0)
                v335 = -v335;
              *((_BYTE *)v428 + (int)v310++) = v335;
            }
          }
          v336 = *v308;
          v337 = *v308 - v332;
          if (v337)
          {
            if ((v337 + 255) > 0x1FE)
            {
              *(_WORD *)((char *)v428 + (int)v302) = bswap32(v337) >> 16;
              v302 += 2;
            }
            else
            {
              if (v337 < 0)
                v337 = -v337;
              *((_BYTE *)v428 + (int)v302++) = v337;
            }
          }
          v308 += 3;
          v332 = v336;
          --v250;
        }
        while (v250);
LABEL_641:
        v236 = (int)v302;
        v389 = v300;
LABEL_642:
        v338 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 32))(v417);
        if (v394 >= v460.__end_ - v460.__begin_)
          goto LABEL_735;
        v460.__begin_[v394] = v338 - v384;
        {
          goto LABEL_693;
        }
        v339 = woff2::ComputeULongSum(v428, v236);
        if (!v411)
          goto LABEL_648;
        if (v394 >= (uint64_t)(*v402 - (_QWORD)*v403) >> 1)
          goto LABEL_735;
        *(_WORD *)&(*v403)[2 * v394] = bswap32(*((unsigned __int16 *)v428 + 1)) >> 16;
LABEL_648:
        v170 += v339;
        v226 = v388;
        if (++v394 < *(unsigned __int16 *)v398)
          continue;
LABEL_676:
        v438[6] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 32))(v417) - v438[5];
        v405[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 32))(v417);
        v348 = *(unsigned __int16 *)v398;
        v349 = (char *)v460.__end_ - (char *)v460.__begin_;
        if (v348 >= v460.__end_ - v460.__begin_)
          goto LABEL_735;
        v460.__begin_[v348] = v438[6];
        if ((v349 & 0x8000000000000000) == 0)
        {
          v350 = (unsigned __int16)*v392;
          v351 = v349 >> 2;
          v352 = 1;
          if (*v392)
            v352 = 2;
          memset(v467, 170, sizeof(v467));
          std::vector<unsigned char>::vector(v467, v351 << v352);
          v354 = (woff2 *)v467[0];
          v353 = v467[1];
          if (v467[1] == v467[0])
            goto LABEL_735;
          v356 = v460.__begin_;
          end = v460.__end_;
          if (v460.__end_ != v460.__begin_)
          {
            v357 = 0;
            v358 = 0;
            do
            {
              v359 = v356[v357];
              if (v350)
              {
                *(_DWORD *)((char *)v354 + v358) = bswap32(v359);
                v358 += 4;
                v356 = v460.__begin_;
                end = v460.__end_;
              }
              else
              {
                *(_WORD *)((char *)v354 + v358) = bswap32(v359 >> 1) >> 16;
                v358 += 2;
              }
              ++v357;
            }
            while (v357 < end - v356);
            v354 = (woff2 *)v467[0];
            v353 = v467[1];
          }
          v360 = v353 - (_QWORD)v354;
          if ((woff2 *)v353 == v354)
            goto LABEL_735;
          v393 = woff2::ComputeULongSum(v354, v353 - (_QWORD)v354);
          v361 = (*(uint64_t (**)(uint64_t, woff2 *, uint64_t))(*(_QWORD *)v417 + 16))(v417, v354, v360);
          if (v467[0])
          {
            v467[1] = v467[0];
            operator delete((void *)v467[0]);
          }
          if (v361)
          {
            v405[6] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 32))(v417) - v405[5];
            v187 = 1;
            goto LABEL_694;
          }
        }
LABEL_693:
        v187 = 0;
LABEL_694:
        if (v428)
          MEMORY[0x1B5E0CD14](v428, 0x1000C8077774924);
        if (v397)
          MEMORY[0x1B5E0CD14](v397, 0x1000C8005A209FELL);
LABEL_698:
        if (v457)
        {
          v458 = v457;
          operator delete(v457);
        }
        if (v460.__begin_)
        {
          v460.__end_ = v460.__begin_;
          operator delete(v460.__begin_);
        }
        operator delete(v433);
        if ((v187 & 1) != 0)
        {
LABEL_703:
          *((_DWORD *)std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned int,unsigned int> const&>,std::tuple<>>(&v453, v455, HIDWORD(v455), &v455)+ 9) = v170;
          goto LABEL_704;
        }
LABEL_723:
        if (v137)
          goto LABEL_724;
        goto LABEL_725;
      }
      goto LABEL_472;
    }
  }
  *(_DWORD *)(v165 + 20) = v134;
  if (!(_DWORD)v169)
    goto LABEL_724;
  v406 = &v408[v167];
  v188 = v408[v167];
  v400 = v408[v167];
  if (v188 > 3 || (v188 & 3) == 0)
    goto LABEL_723;
  v416 = (unsigned __int16)*v399;
  v396 = *(unsigned __int16 *)v398;
  if (v396 <= (unsigned __int16)(v416 - 1))
    goto LABEL_723;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v427 = 1;
  v433 = 0;
  do
  {
    v193 = v427;
    v427 += 2;
    if (v427 > v169)
      goto LABEL_721;
    v194 = bswap32(*(unsigned __int16 *)&v406[v193]) >> 16;
    if ((unint64_t)v191 >= v190)
    {
      v195 = v191 - v433;
      if (v191 - v433 <= -3)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v196 = v195 >> 1;
      if (v190 - (unint64_t)v433 <= (v195 >> 1) + 1)
        v197 = v196 + 1;
      else
        v197 = v190 - (_QWORD)v433;
      if (v190 - (unint64_t)v433 >= 0x7FFFFFFFFFFFFFFELL)
        v198 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v198 = v197;
      if (v198)
        v198 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v198);
      else
        v199 = 0;
      v200 = (char *)(v198 + 2 * v196);
      *(_WORD *)v200 = v194;
      v201 = v200 + 2;
      if (v191 == v433)
      {
        v202 = v433;
      }
      else
      {
        v202 = v433;
        do
        {
          v203 = *((_WORD *)v191 - 1);
          v191 -= 2;
          *((_WORD *)v200 - 1) = v203;
          v200 -= 2;
        }
        while (v191 != v433);
      }
      v190 = v198 + 2 * v199;
      if (v202)
        operator delete(v433);
      v433 = v200;
      v191 = v201;
    }
    else
    {
      *(_WORD *)v191 = v194;
      v191 += 2;
    }
    ++v192;
  }
  while (v416 > (unsigned __int16)v192);
  v410 = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  do
  {
    if ((v400 & 1) != 0)
    {
      if (v206 >= (uint64_t)(*v402 - (_QWORD)*v403) >> 1)
        goto LABEL_735;
      LOWORD(v207) = *(_WORD *)&(*v403)[2 * v206];
    }
    else
    {
      if (v427 + 2 > v169)
      {
LABEL_656:
        if (v205)
        {
          v342 = 0;
          v170 = 0;
          goto LABEL_670;
        }
LABEL_721:
        if (!v433)
          goto LABEL_723;
        goto LABEL_722;
      }
      v207 = bswap32(*(unsigned __int16 *)&v406[v427]) >> 16;
      v427 += 2;
    }
    if ((unint64_t)v204 >= v410)
    {
      v208 = v204 - v205;
      if (v204 - v205 <= -3)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v209 = v208 >> 1;
      if (v410 - (unint64_t)v205 <= (v208 >> 1) + 1)
        v210 = v209 + 1;
      else
        v210 = v410 - (_QWORD)v205;
      if (v410 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFFELL)
        v211 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v211 = v210;
      if (v211)
        v211 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v211);
      else
        v212 = 0;
      v213 = (char *)(v211 + 2 * v209);
      *(_WORD *)v213 = v207;
      v214 = v213 + 2;
      while (v204 != v205)
      {
        v215 = *((_WORD *)v204 - 1);
        v204 -= 2;
        *((_WORD *)v213 - 1) = v215;
        v213 -= 2;
      }
      v410 = v211 + 2 * v212;
      if (v205)
        operator delete(v205);
      v205 = v213;
      v204 = v214;
    }
    else
    {
      *(_WORD *)v204 = v207;
      v204 += 2;
    }
    ++v206;
  }
  while (v206 != v416);
  if (v416 >= v396)
  {
    v218 = v204;
  }
  else
  {
    v216 = v416;
    do
    {
      if ((v400 & 2) != 0)
      {
        if (v216 >= (uint64_t)(*v402 - (_QWORD)*v403) >> 1)
          goto LABEL_735;
        LOWORD(v217) = *(_WORD *)&(*v403)[2 * v216];
      }
      else
      {
        if (v427 + 2 > v169)
          goto LABEL_656;
        v217 = bswap32(*(unsigned __int16 *)&v406[v427]) >> 16;
        v427 += 2;
      }
      if ((unint64_t)v204 >= v410)
      {
        v219 = v204 - v205;
        if (v204 - v205 <= -3)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        v220 = v219 >> 1;
        if (v410 - (unint64_t)v205 <= (v219 >> 1) + 1)
          v221 = v220 + 1;
        else
          v221 = v410 - (_QWORD)v205;
        if (v410 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFFELL)
          v222 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v222 = v221;
        if (v222)
          v222 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v222);
        else
          v223 = 0;
        v224 = (char *)(v222 + 2 * v220);
        *(_WORD *)v224 = v217;
        v218 = v224 + 2;
        while (v204 != v205)
        {
          v225 = *((_WORD *)v204 - 1);
          v204 -= 2;
          *((_WORD *)v224 - 1) = v225;
          v224 -= 2;
        }
        v410 = v222 + 2 * v223;
        if (v205)
          operator delete(v205);
        v205 = v224;
      }
      else
      {
        *(_WORD *)v204 = v217;
        v218 = v204 + 2;
      }
      ++v216;
      v204 = v218;
    }
    while (v216 != v396);
  }
  v343 = (2 * (v416 + v396));
  memset(v467, 170, sizeof(v467));
  std::vector<unsigned char>::vector(v467, v343);
  v344 = (woff2 *)v467[0];
  if (v467[1] == v467[0])
    goto LABEL_735;
  v345 = 0;
  v346 = 0;
  if (v396 <= 1)
    v347 = 1;
  else
    v347 = v396;
  while (1)
  {
    if (v345 < v416)
    {
      if ((v191 - v433) >> 1 <= v345)
        break;
      *(_WORD *)((char *)v344 + v346) = bswap32(*(unsigned __int16 *)&v433[2 * v345]) >> 16;
      v346 += 2;
    }
    if ((v218 - v205) >> 1 == v345)
      break;
    *(_WORD *)((char *)v344 + v346) = bswap32(*(unsigned __int16 *)&v205[2 * v345]) >> 16;
    v346 += 2;
    if (v347 == ++v345)
    {
      v170 = woff2::ComputeULongSum(v344, v343);
      v342 = (*(uint64_t (**)(uint64_t, woff2 *, size_t))(*(_QWORD *)v417 + 16))(v417, v344, v343);
      if (v467[0])
      {
        v467[1] = v467[0];
        operator delete((void *)v467[0]);
      }
LABEL_670:
      operator delete(v205);
      if (v433)
      {
        operator delete(v433);
        if ((v342 & 1) != 0)
          goto LABEL_703;
      }
      else if (v342)
      {
        goto LABEL_703;
      }
      goto LABEL_723;
    }
  }
LABEL_735:
  __break(1u);
}

void sub_1B0A0A360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  void *v63;
  uint64_t v64;
  void *v66;
  void *v67;

  if (a56)
    MEMORY[0x1B5E0CD14](a56, 0x1000C8077774924);
  if (a36)
    MEMORY[0x1B5E0CD14](a36, 0x1000C8005A209FELL);
  v66 = *(void **)(v64 - 232);
  if (v66)
  {
    *(_QWORD *)(v64 - 224) = v66;
    operator delete(v66);
  }
  v67 = *(void **)(v64 - 208);
  if (v67)
  {
    *(_QWORD *)(v64 - 200) = v67;
    operator delete(v67);
  }
  operator delete(__p);
  if (v63)
    operator delete(v63);
  if (a60)
    operator delete(a60);
  _Unwind_Resume(a1);
}

void woff2::`anonymous namespace'::WOFF2Header::~WOFF2Header(woff2::_anonymous_namespace_::WOFF2Header *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
}

void woff2::`anonymous namespace'::RebuildMetadata::~RebuildMetadata(woff2::_anonymous_namespace_::RebuildMetadata *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((_QWORD **)this + 5));
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

void std::vector<woff2::Table>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  size_t v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v21 = &v3[40 * a2];
    goto LABEL_17;
  }
  v7 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3) >= v6)
  {
    v22 = 40 * ((40 * v6 - 40) / 0x28) + 40;
    bzero(a1[1], v22);
    v21 = &v4[v22];
LABEL_17:
    a1[1] = v21;
    return;
  }
  if (a2 > 0x666666666666666)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<woff2::Table>>(v10);
  v12 = &v11[40 * v5];
  v14 = &v11[40 * v13];
  v15 = 40 * ((40 * v6 - 40) / 0x28) + 40;
  bzero(v12, v15);
  v16 = &v12[v15];
  v18 = *a1;
  v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      v19 = *(_OWORD *)(v17 - 40);
      v20 = *(_OWORD *)(v17 - 24);
      *((_QWORD *)v12 - 1) = *((_QWORD *)v17 - 1);
      *(_OWORD *)(v12 - 24) = v20;
      *(_OWORD *)(v12 - 40) = v19;
      v12 -= 40;
      v17 -= 40;
    }
    while (v17 != v18);
    v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
    operator delete(v17);
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  v8 = v7 - v3;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[2 * v5];
  v16 = &v11[2 * v15];
  bzero(v14, 2 * v6);
  v17 = &v14[2 * v6];
  while (v13 != v12)
  {
    v18 = *((_WORD *)v13 - 1);
    v13 -= 2;
    *((_WORD *)v14 - 1) = v18;
    v14 -= 2;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<woff2::Table>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(40 * a1);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:fe180100]();
  return operator new(2 * a1);
}

void std::vector<woff2::`anonymous namespace'::WOFF2FontInfo>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v26 = &v5[56 * a2];
      while (v4 != v26)
      {
        v4 -= 56;
      }
      a1[1] = v26;
    }
  }
  else
  {
    v8 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 3) >= v7)
    {
      v27 = &v4[56 * v7];
      do
      {
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *((_QWORD *)v4 + 6) = 0;
        *(_OWORD *)v4 = 0uLL;
        *((_QWORD *)v4 + 4) = v4 + 40;
        v4 += 56;
      }
      while (v4 != v27);
      a1[1] = v27;
    }
    else
    {
      if (a2 > 0x492492492492492)
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x249249249249249)
        v11 = 0x492492492492492;
      else
        v11 = v10;
      if (v11 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v12 = (char *)operator new(56 * v11);
      v13 = &v12[56 * v6];
      v14 = &v12[56 * a2];
      v15 = v13;
      do
      {
        *((_OWORD *)v15 + 1) = 0uLL;
        *((_OWORD *)v15 + 2) = 0uLL;
        *((_QWORD *)v15 + 6) = 0;
        *(_OWORD *)v15 = 0uLL;
        *((_QWORD *)v15 + 4) = v15 + 40;
        v15 += 56;
      }
      while (v15 != v14);
      v16 = &v12[56 * v11];
      if (v4 == v5)
      {
        *a1 = v13;
        a1[1] = v14;
        a1[2] = v16;
      }
      else
      {
        v17 = 0;
        do
        {
          v18 = &v13[v17];
          v19 = &v4[v17];
          v20 = *(_DWORD *)&v4[v17 - 56];
          *((_WORD *)v18 - 26) = *(_WORD *)&v4[v17 - 52];
          *((_DWORD *)v18 - 14) = v20;
          *((_OWORD *)v18 - 3) = *(_OWORD *)&v4[v17 - 48];
          *((_QWORD *)v18 - 4) = *(_QWORD *)&v4[v17 - 32];
          *((_QWORD *)v19 - 6) = 0;
          *((_QWORD *)v19 - 5) = 0;
          *((_QWORD *)v19 - 4) = 0;
          *((_QWORD *)v18 - 3) = *(_QWORD *)&v4[v17 - 24];
          v21 = &v4[v17 - 16];
          v22 = *(_QWORD *)v21;
          *(_QWORD *)&v13[v17 - 16] = *(_QWORD *)v21;
          v23 = (uint64_t)&v13[v17 - 16];
          v24 = *(_QWORD *)&v4[v17 - 8];
          *((_QWORD *)v18 - 1) = v24;
          if (v24)
          {
            *(_QWORD *)(v22 + 16) = v23;
            *((_QWORD *)v19 - 3) = v21;
            *(_QWORD *)v21 = 0;
            *(_QWORD *)&v4[v17 - 8] = 0;
          }
          else
          {
            *((_QWORD *)v18 - 3) = v23;
          }
          v17 -= 56;
        }
        while (&v4[v17] != v5);
        v4 = (char *)*a1;
        v25 = (uint64_t)a1[1];
        *a1 = &v13[v17];
        a1[1] = v14;
        a1[2] = v16;
        while ((char *)v25 != v4)
        {
          v25 -= 56;
        }
      }
      if (v4)
        operator delete(v4);
    }
  }
}

unsigned __int8 *woff2::`anonymous namespace'::StoreOffsetTable(woff2::_anonymous_namespace_ *this, unsigned __int8 *a2, int a3, unsigned int a4)
{
  unsigned __int8 *v4;
  unsigned int v5;
  _WORD *v7;

  v4 = &a2[(_QWORD)this];
  *v4 = HIBYTE(a3);
  v4[1] = BYTE2(a3);
  v4[2] = BYTE1(a3);
  v4[3] = a3;
  *((_WORD *)v4 + 2) = __rev16(a4);
  v5 = -1;
  while (a4 >> (v5++ + 2))
    ;
  v7 = (_WORD *)((char *)this + (_QWORD)a2);
  v7[3] = bswap32(16 << v5) >> 16;
  v7[4] = bswap32(v5) >> 16;
  v7[5] = bswap32(16 * a4 - (16 << v5)) >> 16;
  return a2 + 12;
}

uint64_t woff2::`anonymous namespace'::StoreTableEntry(woff2::_anonymous_namespace_ *this, unsigned __int8 *a2, unsigned int a3)
{
  *(_DWORD *)((char *)this + a2) = bswap32(a3);
  *(_DWORD *)((char *)this + ((_DWORD)a2 + 4)) = 0;
  *(_DWORD *)((char *)this + ((_DWORD)a2 + 8)) = 0;
  *(_DWORD *)((char *)this + ((_DWORD)a2 + 12)) = 0;
  return ((_DWORD)a2 + 16);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:fe180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B0A0AC3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<woff2::Table>::__init_with_size[abi:fe180100]<woff2::Table*,woff2::Table*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x666666666666667)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    result = std::__allocate_at_least[abi:fe180100]<std::allocator<woff2::Table>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[5 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B0A0ACE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  BOOL v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unsigned int v47;
  __int128 v48;
  __int128 v49;
  _DWORD *v50;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  _DWORD *v99;
  __int128 v100;
  unsigned int *v102;
  unsigned int v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int v110;
  int v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  unsigned int v136;

__int128 *std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(__int128 *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v4 < v3)
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((_QWORD *)a2 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      if (*a2 < *(_DWORD *)result)
      {
        v15 = *result;
        v16 = result[1];
        v17 = *((_QWORD *)result + 4);
        v18 = *((_QWORD *)a2 + 4);
        v19 = *((_OWORD *)a2 + 1);
        *result = *(_OWORD *)a2;
        result[1] = v19;
        *((_QWORD *)result + 4) = v18;
        *((_QWORD *)a2 + 4) = v17;
        *(_OWORD *)a2 = v15;
        *((_OWORD *)a2 + 1) = v16;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v20 = *result;
      v21 = result[1];
      v22 = *((_QWORD *)result + 4);
      v23 = *((_QWORD *)a2 + 4);
      v24 = *((_OWORD *)a2 + 1);
      *result = *(_OWORD *)a2;
      result[1] = v24;
      *((_QWORD *)result + 4) = v23;
      *((_QWORD *)a2 + 4) = v22;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      v6 = *((_OWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 4);
      v25 = *((_QWORD *)a3 + 4);
      v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((_QWORD *)a2 + 4) = v25;
    }
    else
    {
      v5 = *result;
      v6 = result[1];
      v7 = *((_QWORD *)result + 4);
      v8 = *((_QWORD *)a3 + 4);
      v9 = *((_OWORD *)a3 + 1);
      *result = *(_OWORD *)a3;
      result[1] = v9;
      *((_QWORD *)result + 4) = v8;
    }
    *((_QWORD *)a3 + 4) = v7;
    *(_OWORD *)a3 = v5;
    *((_OWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 40);
      if (*(_DWORD *)(a2 - 40) < *(_DWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        v8 = *(_OWORD *)(a1 + 16);
        v9 = *(_QWORD *)(a1 + 32);
        v10 = *(_QWORD *)(a2 - 8);
        v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_QWORD *)(a1 + 32) = v10;
        *(_QWORD *)(a2 - 8) = v9;
        *v6 = v7;
        *(_OWORD *)(a2 - 24) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)a1, (unsigned int *)(a1 + 40), (unsigned int *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v12 = (_DWORD *)(a1 + 80);
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)a1, (unsigned int *)(a1 + 40), (unsigned int *)(a1 + 80));
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(_DWORD *)v13;
    if (*(_DWORD *)v13 < *v12)
    {
      v21 = *(_OWORD *)(v13 + 4);
      v22 = *(_OWORD *)(v13 + 20);
      v23 = *(_DWORD *)(v13 + 36);
      v17 = v14;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_QWORD *)(v18 + 152) = *(_QWORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v16 >= *(_DWORD *)(v18 + 40))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *(_DWORD *)v20 = v16;
      *(_OWORD *)(v20 + 4) = v21;
      *(_OWORD *)(v20 + 20) = v22;
      *(_DWORD *)(v20 + 36) = v23;
      if (++v15 == 8)
        return v13 + 40 == a2;
    }
    v12 = (_DWORD *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((__int128 *)a1, (unsigned int *)a2, (unsigned int *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    result = *(__n128 *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 32);
    v11 = *(_QWORD *)(a4 + 32);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      result = *(__n128 *)a2;
      v13 = *(_OWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 32);
      v15 = *(_QWORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 32) = v15;
      *(_QWORD *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        result = *(__n128 *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_QWORD *)(a2 + 32);
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 32) = v19;
        *(_QWORD *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  result.n128_u64[0] = std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    result = *(__n128 *)a4;
    v11 = *(_OWORD *)(a4 + 16);
    v12 = *(_QWORD *)(a4 + 32);
    v13 = *(_QWORD *)(a5 + 32);
    v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(_QWORD *)(a4 + 32) = v13;
    *(_QWORD *)(a5 + 32) = v12;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      result = *(__n128 *)a3;
      v15 = *(_OWORD *)(a3 + 16);
      v16 = *(_QWORD *)(a3 + 32);
      v17 = *(_QWORD *)(a4 + 32);
      v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(_QWORD *)(a3 + 32) = v17;
      *(_QWORD *)(a4 + 32) = v16;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v15;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        result = *(__n128 *)a2;
        v19 = *(_OWORD *)(a2 + 16);
        v20 = *(_QWORD *)(a2 + 32);
        v21 = *(_QWORD *)(a3 + 32);
        v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(_QWORD *)(a2 + 32) = v21;
        *(_QWORD *)(a3 + 32) = v20;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v19;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          result = *(__n128 *)a1;
          v23 = *(_OWORD *)(a1 + 16);
          v24 = *(_QWORD *)(a1 + 32);
          v25 = *(_QWORD *)(a2 + 32);
          v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(_QWORD *)(a1 + 32) = v25;
          *(_QWORD *)(a2 + 32) = v24;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

void std::allocator_traits<std::allocator<woff2::`anonymous namespace'::WOFF2FontInfo>>::destroy[abi:fe180100]<woff2::`anonymous namespace'::WOFF2FontInfo,void,void>(uint64_t a1)
{
  void *v2;

  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(_QWORD **)(a1 + 40));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t woff2::`anonymous namespace'::Pad4(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t result;
  __int16 v7;
  char v8;

  v8 = 0;
  v7 = 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 3;
  if (v2 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
    return 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (v3 <= 0xFFFFFFFFFFFFFFFCLL)
    v5 = (v3 + 3) & 0xFFFFFFFC;
  else
    v5 = v3;
  if (v5 == v4)
    return 1;
  result = (*(uint64_t (**)(uint64_t, __int16 *, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v7, (v5 - v4));
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::find<std::pair<unsigned int,unsigned int>>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;

  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return v3;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 28);
    v8 = v7 == a2;
    if (v7 >= a2)
      v9 = 1;
    else
      v9 = -1;
    if (v8)
    {
      v10 = *(_DWORD *)(v4 + 32);
      v11 = v10 == a3;
      v9 = v10 >= a3 ? 1 : -1;
      if (v11)
        v9 = 0;
    }
    v12 = (v9 & 0x80) == 0;
    if (v9 < 0)
      v13 = (uint64_t *)(v4 + 8);
    else
      v13 = (uint64_t *)v4;
    if (v12)
      v6 = v4;
    v4 = *v13;
  }
  while (*v13);
  if (v3 == v6)
    return v3;
  v14 = *(_DWORD *)(v6 + 28);
  v15 = v14 == a2;
  if (v14 <= a2)
    v16 = 1;
  else
    v16 = -1;
  if (v15)
  {
    v17 = *(_DWORD *)(v6 + 32);
    v18 = v17 == a3;
    v19 = v17 > a3;
    v16 = -1;
    if (!v19)
      v16 = 1;
    if (v18)
      v16 = 0;
  }
  if (v16 < 0)
    return v3;
  return v6;
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned int,unsigned int> const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t *v6;
  uint64_t **v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v8 = a1 + 1;
    goto LABEL_21;
  }
  do
  {
    while (1)
    {
      v8 = v6;
      v9 = *((_DWORD *)v6 + 7);
      if (v9 == a2)
        break;
      if (v9 <= a2)
      {
        if (v9 >= a2)
          v13 = 1;
        else
          v13 = -1;
        if ((v13 & 0x80) == 0)
          return v8;
        goto LABEL_18;
      }
LABEL_12:
      v6 = (uint64_t *)*v8;
      v7 = (uint64_t **)v8;
      if (!*v8)
        goto LABEL_21;
    }
    v10 = *((_DWORD *)v8 + 8);
    v11 = v10 == a3;
    if (v10 > a3)
      goto LABEL_12;
    if (v10 >= a3)
      v12 = 1;
    else
      v12 = -1;
    if (v11)
      v12 = 0;
    if ((v12 & 0x80) == 0)
      return v8;
LABEL_18:
    v6 = (uint64_t *)v8[1];
  }
  while (v6);
  v7 = (uint64_t **)(v8 + 1);
LABEL_21:
  v14 = v8;
  v8 = operator new(0x28uLL);
  *(_QWORD *)((char *)v8 + 28) = *a4;
  *((_DWORD *)v8 + 9) = 0;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = v14;
  *v7 = v8;
  v15 = (uint64_t *)**a1;
  v16 = v8;
  if (v15)
  {
    *a1 = v15;
    v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

void TCFFArray::TCFFArray(TCFFArray *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;

  *(_QWORD *)this = &off_1E61CB6C0;
  *((_WORD *)this + 4) = 0;
  *((_BYTE *)this + 10) = a2;
  std::vector<unsigned char>::vector((_QWORD *)this + 2, a2);
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = AllocateMemory(0x80uLL, 0);
  *((_QWORD *)this + 7) = 128;
  v3 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 3) == v3)
    std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]();
  v4 = *((unsigned __int8 *)this + 10);
  v5 = (char *)(v4 + v3 - 1);
  v6 = 1;
  switch(*((_BYTE *)this + 10))
  {
    case 1:
      goto LABEL_6;
    case 2:
      goto LABEL_5;
    case 3:
      goto LABEL_4;
    case 4:
      v6 = 0;
      *v5-- = 1;
LABEL_4:
      *v5-- = v6;
      v6 = 0;
LABEL_5:
      LOBYTE(v4) = 0;
      *v5-- = v6;
LABEL_6:
      *v5 = v4;
      break;
    default:
      return;
  }
}

void sub_1B0A0BF48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void TCFFArray::TCFFArray(TCFFArray *this, unsigned int a2, const unsigned __int8 *a3)
{
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  int v15;
  _BYTE *v16;

  *(_QWORD *)this = &off_1E61CB6C0;
  *((_WORD *)this + 4) = 256;
  if (a2 < 0xFFFFFF)
    v6 = 3;
  else
    v6 = 4;
  if (a2 >= 0xFFFF)
    v7 = v6;
  else
    v7 = 2;
  if (a2 >= 0xFF)
    v8 = v7;
  else
    v8 = 1;
  *((_BYTE *)this + 10) = v8;
  std::vector<unsigned char>::vector((_QWORD *)this + 2, 2 * (v8 & 0x7F));
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = AllocateMemory(a2, 0);
  *((_QWORD *)this + 7) = a2;
  v9 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 3) == v9)
    goto LABEL_23;
  v10 = *((unsigned __int8 *)this + 10);
  v11 = (_BYTE *)(v10 + v9 - 1);
  v12 = 1;
  switch(*((_BYTE *)this + 10))
  {
    case 1:
      goto LABEL_15;
    case 2:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 4:
      LOBYTE(v12) = 0;
      *v11-- = 1;
LABEL_13:
      *v11-- = v12;
      LOBYTE(v12) = 0;
LABEL_14:
      LOBYTE(v10) = 0;
      *v11-- = v12;
LABEL_15:
      *v11 = v10;
      v10 = *((unsigned __int8 *)this + 10);
      v11 = (_BYTE *)*((_QWORD *)this + 2);
      v12 = *((_QWORD *)this + 3);
      break;
    default:
      break;
  }
  if (v12 - (uint64_t)v11 <= v10)
LABEL_23:
    std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]();
  v13 = v10 - 1;
  v14 = &v11[v10];
  v15 = a2 + 1;
  v16 = &v14[v10 - 1];
  switch(v13)
  {
    case 0:
      goto LABEL_21;
    case 1:
      goto LABEL_20;
    case 2:
      goto LABEL_19;
    case 3:
      *v16-- = v15;
      v15 >>= 8;
LABEL_19:
      *v16-- = v15;
      v15 >>= 8;
LABEL_20:
      *v16-- = v15;
      v15 >>= 8;
LABEL_21:
      *v16 = v15;
      break;
    default:
      break;
  }
  memcpy(*((void **)this + 6), a3, a2);
}

void sub_1B0A0C0E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void TCFFArray::~TCFFArray(void **this)
{
  void *v2;

  *this = &off_1E61CB6C0;
  if (!*((_BYTE *)this + 40))
    free(this[6]);
  v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

{
  TCFFArray::~TCFFArray(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TCFFArray::GetOffset(TCFFArray *this, int a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;

  v5 = *((_QWORD *)this + 2);
  v3 = (char *)this + 16;
  v4 = v5;
  v6 = *(v3 - 6);
  v7 = (v6 * a2);
  if (*((_QWORD *)v3 + 1) - v5 <= v7)
    std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]();
  return BytesToCard((const unsigned __int8 *)(v4 + v7), v6);
}

unint64_t TCFFArray::AppendData(TCFFArray *this, uint64_t a2, unsigned int a3, const unsigned __int8 *a4)
{
  uint64_t v4;
  unint64_t v8;
  size_t v9;
  char *v10;
  _WORD *exception;
  __int16 v13;

  v4 = a2;
  if (a3)
  {
    if (*((_BYTE *)this + 40))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      v13 = 1;
    }
    else
    {
      v8 = a3 + a2;
      if (*((_QWORD *)this + 7) >= v8)
      {
        v10 = (char *)*((_QWORD *)this + 6);
        goto LABEL_7;
      }
      v9 = malloc_good_size(a3 + a2);
      v10 = (char *)reallocf(*((void **)this + 6), v9);
      *((_QWORD *)this + 6) = v10;
      if (v10)
      {
        *((_QWORD *)this + 7) = v9;
LABEL_7:
        memcpy(&v10[v4], a4, a3);
        return v8;
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      v13 = 20;
    }
    exception[4] = v13;
  }
  return v4;
}

uint64_t TCFFArray::AppendOffset(TCFFArray *this, unsigned int a2)
{
  char v4;
  char v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int Offset;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  signed int v21;
  int v22;
  _BYTE *v23;
  unsigned int v25;

  if (a2 < 0xFFFFFF)
    v4 = 3;
  else
    v4 = 4;
  if (a2 >= 0xFFFF)
    v5 = v4;
  else
    v5 = 2;
  v6 = *((_QWORD *)this + 2);
  if (a2 >= 0xFF)
    v7 = v5;
  else
    v7 = 1;
  v8 = bswap32(*((unsigned __int16 *)this + 4));
  v9 = HIWORD(v8);
  v10 = (unsigned __int16)(HIWORD(v8) + 1);
  v11 = v7 * v10 + v7;
  v12 = *((_QWORD *)this + 3) - v6;
  if (v11 <= v12)
  {
    if (v11 < v12)
      *((_QWORD *)this + 3) = v6 + v11;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 2, v11 - v12);
  }
  v13 = *((unsigned __int8 *)this + 10);
  if (v13 < v7)
  {
    v25 = v9;
    if (v10)
    {
      v14 = v10 - 1;
      v15 = (v10 - 1) * v7;
      while (1)
      {
        Offset = TCFFArray::GetOffset(this, v14);
        v17 = *((_QWORD *)this + 2);
        if (*((_QWORD *)this + 3) - v17 <= (unint64_t)v15)
          break;
        v18 = (_BYTE *)(v17 + v15 + v7 - 1);
        switch(v7)
        {
          case 1u:
            goto LABEL_22;
          case 2u:
            goto LABEL_21;
          case 3u:
            goto LABEL_20;
          case 4u:
            *v18-- = Offset;
            Offset >>= 8;
LABEL_20:
            *v18-- = Offset;
            Offset >>= 8;
LABEL_21:
            *v18-- = Offset;
            Offset >>= 8;
LABEL_22:
            *v18 = Offset;
            break;
          default:
            break;
        }
        --v14;
        v15 -= v7;
        if (v14 == -1)
          goto LABEL_24;
      }
LABEL_32:
      std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]();
    }
LABEL_24:
    *((_BYTE *)this + 10) = v7;
    v13 = v7;
    v9 = v25;
  }
  v19 = v13 * v10;
  v20 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 3) - v20 <= v19)
    goto LABEL_32;
  v21 = v13 - 1;
  v22 = a2 + 1;
  v23 = (_BYTE *)(v20 + v19 + v21);
  switch(v21)
  {
    case 0:
      goto LABEL_30;
    case 1:
      goto LABEL_29;
    case 2:
      goto LABEL_28;
    case 3:
      *v23-- = v22;
      v22 >>= 8;
LABEL_28:
      *v23-- = v22;
      v22 >>= 8;
LABEL_29:
      *v23-- = v22;
      v22 >>= 8;
LABEL_30:
      *v23 = v22;
      break;
    default:
      break;
  }
  *((_WORD *)this + 4) = __rev16(v10);
  return v9;
}

uint64_t TCFFArray::Add(TCFFArray *this, unsigned int a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned int appended;

  v6 = TCFFArray::GetOffset(this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  if (a3)
    appended = TCFFArray::AppendData(this, v6, a2, a3);
  else
    appended = v6 + a2;
  return TCFFArray::AppendOffset(this, appended);
}

uint64_t TCFFArray::GetLength(TCFFArray *this)
{
  int v2;
  unint64_t v3;

  if (!*((_WORD *)this + 4))
    return 2;
  v2 = __rev16(*((unsigned __int16 *)this + 4));
  v3 = TCFFArray::GetOffset(this, v2) - 1;
  if (*((_QWORD *)this + 7) < v3)
    LODWORD(v3) = *((_QWORD *)this + 7);
  return *((unsigned __int8 *)this + 10) + *((unsigned __int8 *)this + 10) * v2 + v3 + 3;
}

uint64_t TCFFArray::StreamOut(TCFFArray *this, TBufferedStreamingContext *a2)
{
  unsigned int v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;

  v4 = *((unsigned __int16 *)this + 4);
  result = TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)this + 8, 2uLL);
  if (v4)
  {
    v6 = __rev16(v4);
    v10 = *((_BYTE *)this + 10);
    TBufferedStreamingContext::BufferString((uint64_t)a2, &v10, 1uLL);
    TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 2), *((unsigned __int8 *)this + 10) + *((unsigned __int8 *)this + 10) * v6);
    v7 = TCFFArray::GetOffset(this, v6) - 1;
    v8 = *((_QWORD *)this + 7);
    if (v8 >= v7)
      v9 = v7;
    else
      v9 = v8;
    return TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 6), v9);
  }
  return result;
}

void TCFFStringArray::~TCFFStringArray(void **this)
{
  TCFFArray::~TCFFArray(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TCFFStringArray::AddString(TCFFStringArray *this, uint64_t a2, const char *a3)
{
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;

  v6 = kStdStrs;
  v7 = a2;
  v8 = 3120;
  while (strlen(*(const char **)(v6 + v8)) != v7 || memcmp(a3, *(const void **)(v6 + v8), v7))
  {
    v8 -= 8;
    if (v6 + v8 < v6)
      goto LABEL_7;
  }
  if ((unsigned __int16)(v8 >> 3) == 391)
  {
LABEL_7:
    LOWORD(v9) = (*(uint64_t (**)(TCFFStringArray *, uint64_t, const char *))(*(_QWORD *)this + 24))(this, a2, a3)+ 391;
    return (unsigned __int16)v9;
  }
  return (unsigned __int16)(v8 >> 3);
}

uint64_t TCFFStringArray::AddString(TCFFStringArray *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(TCFFStringArray *, const unsigned __int8 *))(*(_QWORD *)this + 56))(this, a2 + 1);
}

uint64_t TCFFStringArray::AddString(TCFFStringArray *this, const char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return (*(uint64_t (**)(TCFFStringArray *, size_t, const char *))(*(_QWORD *)this + 40))(this, v4, __s);
}

void TCFFDict::TCFFDict(TCFFDict *this)
{
  _QWORD *v2;

  TCFFArray::TCFFArray(this, 1u);
  *v2 = &off_1E61CB748;
  *((_QWORD *)this + 8) = AllocateMemory(0x20uLL, 0);
}

void sub_1B0A0C74C(_Unwind_Exception *a1)
{
  void **v1;

  TCFFArray::~TCFFArray(v1);
  _Unwind_Resume(a1);
}

void TCFFDict::~TCFFDict(void **this)
{
  *this = &off_1E61CB748;
  free(this[8]);
  TCFFArray::~TCFFArray(this);
}

{
  *this = &off_1E61CB748;
  free(this[8]);
  TCFFArray::~TCFFArray(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TCFFDict::EncodeNumber(uint64_t this, int a2, _BYTE *a3, unsigned __int8 *a4)
{
  int v4;
  __int16 v5;
  int v6;

  switch((_DWORD)this)
  {
    case 3:
      a3[3] = 0;
      a3[2] = a2;
      a3[1] = BYTE1(a2);
      LOBYTE(v4) = 28;
      break;
    case 2:
      if ((__int16)a2 < 108)
      {
        if ((__int16)a2 > -108)
          return this;
        v5 = -108 - a2;
        v6 = 251;
      }
      else
      {
        v5 = a2 - 108;
        v6 = 247;
      }
      a3[2] = 0;
      a3[1] = v5;
      v4 = v6 + ((unsigned __int16)(v5 & 0xFF00) >> 8);
      break;
    case 1:
      a3[1] = 0;
      LOBYTE(v4) = a2 - 117;
      break;
    default:
      a3[5] = 0;
      a3[4] = a2;
      a3[3] = BYTE1(a2);
      a3[2] = BYTE2(a2);
      LOBYTE(v4) = 29;
      a3[1] = HIBYTE(a2);
      break;
  }
  *a3 = v4;
  return this;
}

uint64_t TCFFDict::EncodeNumber(TCFFDict *this, _BYTE *a2, unsigned __int8 *a3)
{
  unsigned int v3;
  int v4;
  uint64_t result;
  int v6;

  if (((_DWORD)this + 1131) > 0x8D6)
  {
    v3 = this >> 8;
    if ((_DWORD)this == (__int16)this)
    {
      a2[3] = 0;
      a2[2] = (_BYTE)this;
      result = 3;
      LOBYTE(v4) = 28;
    }
    else
    {
      a2[5] = 0;
      a2[4] = (_BYTE)this;
      a2[3] = BYTE1(this);
      a2[2] = BYTE2(this);
      v3 = this >> 24;
      result = 5;
      LOBYTE(v4) = 29;
    }
  }
  else if ((unsigned __int16)((_WORD)this + 107) > 0xD6u)
  {
    if ((__int16)this > 107)
      LOWORD(v3) = (_WORD)this;
    else
      v3 = -(int)this;
    if ((__int16)this <= 107)
      v6 = -5;
    else
      v6 = -9;
    LOWORD(v3) = v3 - 108;
    a2[2] = 0;
    v4 = v6 + ((unsigned __int16)(v3 & 0xFF00) >> 8);
    result = 2;
  }
  else
  {
    LOBYTE(v3) = 0;
    LOBYTE(v4) = (_BYTE)this - 117;
    result = 1;
  }
  a2[1] = v3;
  *a2 = v4;
  return result;
}

uint64_t TCFFDict::EncodeNumber(TCFFDict *this, double a2, unsigned __int8 *a3)
{
  __int128 v4;
  char v5;
  int v6;
  char v7;
  int v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  int v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  unint64_t v29;
  char v30;
  _WORD *exception;
  char v33[16];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v33 = v4;
  v34 = v4;
  snprintf_l(v33, 0x20uLL, 0, "%-.8g", a2);
  *(_BYTE *)this = 30;
  v5 = v33[0];
  if (v33[0])
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = &v33[1];
    v10 = 2;
    while (1)
    {
      switch(v5)
      {
        case '+':
          if (v7 & 1 | ((v6 & 1) == 0))
          {
            if (v6 & 1 | (v10 != 2))
              goto LABEL_45;
            v6 = 0;
            goto LABEL_33;
          }
          v24 = (unint64_t)v10 >> 1;
          v28 = *((_BYTE *)this + v24);
          v26 = v28 & 0xF | 0xB0;
          v27 = v28 & 0xF0 | 0xB;
          break;
        case ',':
        case '/':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_45;
        case '-':
          if (!(v6 & 1 | (v10 != 2)))
          {
            v6 = 0;
            *((_BYTE *)this + 1) = *((_BYTE *)this + 1) & 0xF | 0xE0;
LABEL_33:
            v10 = 2;
            goto LABEL_14;
          }
          if (v7 & 1 | ((v6 & 1) == 0))
            goto LABEL_45;
          v24 = (unint64_t)v10 >> 1;
          v25 = *((_BYTE *)this + v24);
          v26 = v25 & 0xF | 0xC0;
          v27 = v25 & 0xF0 | 0xC;
          break;
        case '.':
          if (((v8 | v6) & 1) != 0)
            goto LABEL_45;
          v6 = 0;
          v20 = (unint64_t)v10 >> 1;
          v21 = *((_BYTE *)this + v20);
          v22 = v21 & 0xF | 0xA0;
          v23 = v21 & 0xF0 | 0xA;
          if ((v10 & 1) == 0)
            v23 = v22;
          *((_BYTE *)this + v20) = v23;
          v8 = 1;
          goto LABEL_13;
        case '0':
          if (v8 & 1 | ((v6 & 1) == 0))
            goto LABEL_4;
          v8 = 0;
          goto LABEL_13;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
LABEL_4:
          v11 = (unint64_t)v10 >> 1;
          if (v7 & 1 | ((v6 & 1) == 0))
          {
            v12 = v10 & 1;
            v13 = *((_BYTE *)this + v11);
          }
          else
          {
            v12 = v10 & 1;
            v14 = *((_BYTE *)this + v11);
            v13 = v14 & 0xF | 0xB0;
            v15 = v14 & 0xF0 | 0xB;
            if ((v10 & 1) != 0)
              v13 = v15;
            v7 = 1;
          }
          v16 = v13 & 0xF | (16 * v5);
          v17 = v13 & 0xF0 | v5 & 0xF;
          if (v12)
            v18 = v17;
          else
            v18 = v16;
          *((_BYTE *)this + v11) = v18;
          goto LABEL_13;
        case 'E':
          goto LABEL_17;
        default:
          if (v5 != 101)
            goto LABEL_45;
LABEL_17:
          if (v6 & 1 | (v10 == 2) || ((v8 ^ 1) & 1) != 0)
            goto LABEL_45;
          v8 = 0;
          v6 = 1;
          goto LABEL_13;
      }
      if ((v10 & 1) == 0)
        v27 = v26;
      *((_BYTE *)this + v24) = v27;
      v7 = 1;
LABEL_13:
      if (v10 >= 0x10)
      {
LABEL_45:
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E61B2D68;
        exception[4] = 1;
      }
LABEL_14:
      ++v10;
      v19 = *v9++;
      v5 = v19;
      if (!v19)
        goto LABEL_39;
    }
  }
  v10 = 2;
LABEL_39:
  v29 = v10 + 1;
  if ((v10 & 1) != 0)
    v30 = 15;
  else
    v30 = -16;
  *((_BYTE *)this + ((unint64_t)v10 >> 1)) |= v30;
  if ((((_BYTE)v10 + 1) & 1) != 0)
  {
    *((_BYTE *)this + (v29 >> 1)) |= 0xFu;
    LODWORD(v29) = v10 + 2;
  }
  return v29 >> 1;
}

uint64_t TCFFDict::EncodeNumber(TCFFDict *this, unsigned __int8 *a2, TCFFDict *a3, unsigned __int8 *a4)
{
  char v4;

  if (!(_DWORD)a2)
    return TCFFDict::EncodeNumber(this, a3, (unsigned __int8 *)a3);
  if ((this & ~(-1 << (char)a2)) == 0)
  {
    this = (TCFFDict *)((int)this >> (char)a2);
    return TCFFDict::EncodeNumber(this, a3, (unsigned __int8 *)a3);
  }
  if ((this & 1) == 0)
  {
    do
    {
      v4 = (char)this;
      a2 = (unsigned __int8 *)((_DWORD)a2 - 1);
      LODWORD(this) = (int)this >> 1;
    }
    while ((v4 & 2) == 0);
  }
  return TCFFDict::EncodeNumber(a3, (double)(int)this / (double)(1 << (char)a2), a2);
}

void *TCFFDict::AddOpcode(const void **this, __int16 a2)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *result;
  _WORD *exception;

  v4 = bswap32(*((unsigned __int16 *)this + 4)) >> 16;
  v5 = 2 * v4 + 2;
  v6 = malloc_size(this[8]);
  result = (void *)this[8];
  if (v5 > v6)
  {
    result = reallocf(result, v5);
    this[8] = result;
    if (!result)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 20;
    }
  }
  *((_WORD *)result + v4) = a2;
  return result;
}

unint64_t TCFFDict::AddNumberArray(TCFFDict *this, unint64_t appended, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v7;
  int v8;
  unsigned int v10;
  unsigned int v11;
  _QWORD v13[2];
  __int16 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v7 = a4;
    v8 = a3;
    do
    {
      v10 = *(_DWORD *)v7;
      v7 += 4;
      --v8;
      v13[0] = 0;
      v13[1] = 0;
      v14 = 0;
      v11 = TCFFDict::EncodeNumber((TCFFDict *)v10, a5, (TCFFDict *)v13, a4);
      appended = TCFFArray::AppendData(this, appended, v11, (const unsigned __int8 *)v13);
    }
    while (v8);
  }
  return appended;
}

uint64_t TCFFDict::AddEntry(const void **this, __int16 a2)
{
  unsigned int v3;

  TCFFDict::AddOpcode(this, a2);
  v3 = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  return TCFFArray::AppendOffset((TCFFArray *)this, v3);
}

uint64_t TCFFDict::AddEntry(const void **this, __int16 a2, unsigned __int8 a3)
{
  unsigned __int8 v5;

  v5 = a3;
  TCFFDict::AddOpcode(this, a2);
  return TCFFArray::Add((TCFFArray *)this, 1u, &v5);
}

uint64_t TCFFDict::AddEntry(const void **this, __int16 a2, __int16 a3)
{
  unsigned __int8 v5[2];

  *(_WORD *)v5 = a3;
  TCFFDict::AddOpcode(this, a2);
  return TCFFArray::Add((TCFFArray *)this, 2u, v5);
}

uint64_t TCFFDict::AddEntry(const void **this, __int16 a2, unsigned int a3, const unsigned __int8 *a4)
{
  TCFFDict::AddOpcode(this, a2);
  return TCFFArray::Add((TCFFArray *)this, a3, a4);
}

uint64_t TCFFDict::AddNumericEntry(const void **this, __int16 a2, TCFFDict *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int appended;
  _QWORD v10[2];
  __int16 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  TCFFDict::AddOpcode(this, a2);
  v5 = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v7 = TCFFDict::EncodeNumber(a3, v10, v6);
  appended = TCFFArray::AppendData((TCFFArray *)this, v5, v7, (const unsigned __int8 *)v10);
  return TCFFArray::AppendOffset((TCFFArray *)this, appended);
}

uint64_t TCFFDict::AddNumericEntry(const void **this, __int16 a2, TCFFDict *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int appended;
  _QWORD v12[2];
  __int16 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  TCFFDict::AddOpcode(this, a2);
  v7 = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v9 = TCFFDict::EncodeNumber(a3, a4, (TCFFDict *)v12, v8);
  appended = TCFFArray::AppendData((TCFFArray *)this, v7, v9, (const unsigned __int8 *)v12);
  return TCFFArray::AppendOffset((TCFFArray *)this, appended);
}

uint64_t TCFFDict::AddNumericArrayEntry(const void **this, __int16 a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  int Offset;
  unsigned int v10;

  TCFFDict::AddOpcode(this, a2);
  Offset = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16);
  v10 = TCFFDict::AddNumberArray((TCFFDict *)this, (Offset - 1), a3, a4, a5);
  return TCFFArray::AppendOffset((TCFFArray *)this, v10);
}

uint64_t TCFFDict::AddStringIDEntry(uint64_t this, uint64_t a2, const unsigned __int8 *a3, TCFFStringArray *a4)
{
  uint64_t v5;
  TCFFDict *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = this;
    v6 = (TCFFDict *)(*(uint64_t (**)(TCFFStringArray *, const unsigned __int8 *))(*(_QWORD *)a4 + 48))(a4, a3);
    memset(v9, 170, 18);
    v8 = TCFFDict::EncodeNumber(v6, v9, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 64))(v5, a2, v8, v9);
  }
  return this;
}

uint64_t TCFFDict::GetLength(TCFFDict *this)
{
  int v1;
  int v2;
  unsigned __int16 *v3;
  int v4;
  unsigned int v5;

  v1 = __rev16(*((unsigned __int16 *)this + 4));
  v2 = 0;
  if (*((_WORD *)this + 4))
  {
    v3 = (unsigned __int16 *)(*((_QWORD *)this + 8) + 2 * (v1 - 1));
    v4 = v1;
    do
    {
      v5 = *v3--;
      if (v5 > 0x1F)
        ++v2;
      --v4;
    }
    while (v4);
  }
  return v1 + v2 + TCFFArray::GetOffset(this, v1) - 1;
}

uint64_t TCFFDict::StreamOut(TCFFDict *this, TBufferedStreamingContext *a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int Offset;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;

  result = TCFFArray::GetOffset(this, 0);
  if (*((_WORD *)this + 4))
  {
    v5 = result;
    v6 = 0;
    v7 = __rev16(*((unsigned __int16 *)this + 4));
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    do
    {
      v9 = v6 + 1;
      v10 = *(unsigned __int16 *)(*((_QWORD *)this + 8) + 2 * v6);
      Offset = TCFFArray::GetOffset(this, (int)v6 + 1);
      if (Offset > v5)
      {
        v12 = Offset;
        TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)(*((_QWORD *)this + 6) + v5 - 1), Offset - v5);
        v5 = v12;
      }
      v13 = v10 - 32;
      if (v10 < 0x20)
      {
        v13 = v10;
      }
      else
      {
        v14 = 12;
        TBufferedStreamingContext::BufferString((uint64_t)a2, &v14, 1uLL);
      }
      v15 = v13;
      result = TBufferedStreamingContext::BufferString((uint64_t)a2, &v15, 1uLL);
      v6 = v9;
    }
    while (v8 != v9);
  }
  return result;
}

void TCFFDictArray::TCFFDictArray(TCFFDictArray *this, const TCFFDict *a2)
{
  TCFFDictArray *v3;

  TCFFArray::TCFFArray(this, 1u);
  *(_QWORD *)v3 = &off_1E61CB7C0;
  TCFFDictArray::Add(v3, a2);
}

void sub_1B0A0D26C(_Unwind_Exception *a1)
{
  void **v1;

  TCFFArray::~TCFFArray(v1);
  _Unwind_Resume(a1);
}

void TCFFDictArray::~TCFFDictArray(void **this)
{
  TCFFArray::~TCFFArray(this);
  JUMPOUT(0x1B5E0CD38);
}

void TCFFDictArray::Add(TCFFDictArray *this, unsigned int a2, const unsigned __int8 *a3)
{
  _WORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E61B2D68;
  exception[4] = 1;
}

uint64_t TCFFDictArray::Add(TCFFDictArray *this, const TCFFDict *a2)
{
  unsigned int v4;
  int Offset;
  int v6;
  unsigned __int8 v8[8];

  *(_QWORD *)v8 = a2;
  v4 = bswap32(*((unsigned __int16 *)this + 4)) >> 16;
  TCFFArray::AppendData(this, 8 * v4, 8u, v8);
  Offset = TCFFArray::GetOffset(this, v4);
  v6 = (*(uint64_t (**)(const TCFFDict *))(*(_QWORD *)a2 + 16))(a2);
  return TCFFArray::AppendOffset(this, Offset + v6 - 1);
}

uint64_t TCFFDictArray::StreamOut(TCFFDictArray *this, TBufferedStreamingContext *a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 v9;

  result = TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)this + 8, 2uLL);
  if (*((_WORD *)this + 4))
  {
    v5 = __rev16(*((unsigned __int16 *)this + 4));
    v9 = *((_BYTE *)this + 10);
    TBufferedStreamingContext::BufferString((uint64_t)a2, &v9, 1uLL);
    TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 2), *((unsigned __int8 *)this + 10) + *((unsigned __int8 *)this + 10) * v5);
    v6 = 0;
    if (v5 <= 1)
      v7 = 1;
    else
      v7 = v5;
    v8 = 8 * v7;
    do
    {
      result = (*(uint64_t (**)(_QWORD, TBufferedStreamingContext *))(**(_QWORD **)(*((_QWORD *)this + 6) + v6)
                                                                              + 32))(*(_QWORD *)(*((_QWORD *)this + 6) + v6), a2);
      v6 += 8;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t TCFFEncoding::GetStreamOutFormat(TCFFEncoding *this)
{
  return *((unsigned __int8 *)this + 8);
}

void TCFFEncoding0::~TCFFEncoding0(TCFFEncoding0 *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E61CB838;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8077774924);
  *(_QWORD *)this = off_1E61CB800;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    MEMORY[0x1B5E0CD14](v3, 0x1000C8033FC2DF1);
}

{
  TCFFEncoding0::~TCFFEncoding0(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TCFFEncoding0::GetLength(TCFFEncoding0 *this)
{
  int v1;

  if (*((_BYTE *)this + 9))
    v1 = 3 * *((unsigned __int8 *)this + 9) + 1;
  else
    v1 = 0;
  return *((unsigned __int8 *)this + 24) + v1 + 2;
}

uint64_t TCFFEncoding0::StreamOut(TCFFEncoding0 *this, TBufferedStreamingContext *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v9 = *((_BYTE *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, &v9, 1uLL);
  v10 = *((_BYTE *)this + 24);
  TBufferedStreamingContext::BufferString((uint64_t)a2, &v10, 1uLL);
  result = TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 4), *((unsigned __int8 *)this + 24));
  if (*((_BYTE *)this + 9))
  {
    v11 = *((_BYTE *)this + 9);
    result = TBufferedStreamingContext::BufferString((uint64_t)a2, &v11, 1uLL);
    if (*((_BYTE *)this + 9))
    {
      v5 = (unsigned __int8 *)*((_QWORD *)this + 2);
      v6 = (unint64_t)&v5[3 * *((unsigned __int8 *)this + 9)];
      v7 = v5;
      do
      {
        v8 = *v7;
        v7 += 3;
        v12 = v8;
        TBufferedStreamingContext::BufferString((uint64_t)a2, &v12, 1uLL);
        result = TBufferedStreamingContext::BufferString((uint64_t)a2, v5 + 1, 2uLL);
        v5 = v7;
      }
      while ((unint64_t)v7 < v6);
    }
  }
  return result;
}

uint64_t TCFFCharSet::GetStreamOutFormat(TCFFCharSet *this)
{
  return *((unsigned __int8 *)this + 8);
}

void TCFFCharSet0::~TCFFCharSet0(TCFFCharSet0 *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61CB870;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C80BDFB0063);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61CB870;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C80BDFB0063);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TCFFCharSet0::GetLength(TCFFCharSet0 *this)
{
  return (2 * *((unsigned __int16 *)this + 5)) | 1u;
}

uint64_t TCFFCharSet0::StreamOut(TCFFCharSet0 *this, TBufferedStreamingContext *a2)
{
  unsigned __int8 v5;

  v5 = *((_BYTE *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, &v5, 1uLL);
  return TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 2), 2 * *((unsigned __int16 *)this + 5));
}

void TCFFFontSet::TCFFFontSet(TCFFFontSet *this, char a2, char a3, char a4, const char *__s)
{
  TCFFArray *v7;
  unsigned int v8;

  *((_BYTE *)this + 8) = a2;
  *(_QWORD *)this = off_1E61CB8A8;
  *((_BYTE *)this + 9) = a3;
  *((_BYTE *)this + 10) = 4;
  *((_BYTE *)this + 11) = a4;
  v7 = (TCFFFontSet *)((char *)this + 16);
  v8 = strlen(__s);
  TCFFArray::TCFFArray(v7, v8, (const unsigned __int8 *)__s);
  TCFFDict::TCFFDict((TCFFFontSet *)((char *)this + 80));
  TCFFArray::TCFFArray((TCFFFontSet *)((char *)this + 152), 1u);
  *((_QWORD *)this + 19) = &off_1E61CB6F8;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  TCFFArray::TCFFArray((TCFFFontSet *)((char *)this + 240), 1u);
  TCFFDict::TCFFDict((TCFFFontSet *)((char *)this + 304));
  *((_QWORD *)this + 47) = 0;
}

void sub_1B0A0D77C(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  void **v3;
  void **v4;

  TCFFArray::~TCFFArray(v4);
  TCFFArray::~TCFFArray(v3);
  TCFFDict::~TCFFDict(v2);
  TCFFArray::~TCFFArray(v1);
  _Unwind_Resume(a1);
}

void TCFFFontSet::~TCFFFontSet(TCFFFontSet *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E61CB8A8;
  v2 = *((_QWORD *)this + 28);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 29);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 27);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 47);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 38) = &off_1E61CB748;
  free(*((void **)this + 46));
  TCFFArray::~TCFFArray((void **)this + 38);
  TCFFArray::~TCFFArray((void **)this + 30);
  TCFFArray::~TCFFArray((void **)this + 19);
  *((_QWORD *)this + 10) = &off_1E61CB748;
  free(*((void **)this + 18));
  TCFFArray::~TCFFArray((void **)this + 10);
  TCFFArray::~TCFFArray((void **)this + 2);
}

uint64_t TCFFFontSet::AddEncoding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _WORD *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    if (*(_WORD *)(a2 + v4 + 2))
    {
      v7 = *(__int16 *)(a2 + v4);
      if (v7 <= v6)
        v8 = v6;
      else
        v8 = *(__int16 *)(a2 + v4);
      if (v7 > 255)
        ++v5;
      else
        v6 = v8;
    }
    v4 += 4;
  }
  while (v4 != 1024);
  v9 = (char *)operator new[]();
  bzero(v9, v6);
  v10 = (char *)operator new[]();
  v11 = v10;
  if (v5)
    bzero(v10, 3 * ((3 * (unint64_t)v5 - 3) / 3) + 3);
  v12 = 0;
  v13 = (_WORD *)(a2 + 2);
  v14 = v11;
  do
  {
    v15 = (unsigned __int16)*v13;
    if (*v13)
    {
      v16 = (__int16)*(v13 - 1);
      if (v16 > 255)
      {
        *v14 = v12;
        *(_WORD *)(v14 + 1) = __rev16(v15);
        v14 += 3;
      }
      else
      {
        v9[v16 - 1] = v12;
      }
    }
    ++v12;
    v13 += 2;
  }
  while (v12 != 256);
  result = operator new();
  *(_WORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E61CB838;
  *(_BYTE *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = v9;
  *(_QWORD *)(a1 + 224) = result;
  if (!v5)
    JUMPOUT(0x1B5E0CD14);
  *(_BYTE *)(result + 8) = 0x80;
  *(_BYTE *)(result + 9) = v5;
  *(_QWORD *)(result + 16) = v11;
  return result;
}

void sub_1B0A0DA58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1B5E0CD14](v2, 0x1000C8033FC2DF1);
  MEMORY[0x1B5E0CD14](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t TCFFFontSet::AddBlueValuesToDict(__int16 a1, unsigned int a2, uint64_t a3, int a4, int a5, const void **this)
{
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v17;
  int v18;
  unsigned int v19;
  unint64_t appended;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 v25[8];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  TCFFDict::AddOpcode(this, a1);
  v11 = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  if (a2)
  {
    v12 = 0;
    v13 = 0;
    v14 = 8 * a2;
    v15 = 1;
    do
    {
      v17 = (v15 & a4) == 0 || v12 == 0;
      if (v17 != a5)
      {
        v18 = *(_DWORD *)(a3 + v12 + 4);
        *(_QWORD *)v25 = 0;
        v26 = 0;
        v27 = 0;
        v19 = TCFFDict::EncodeNumber((TCFFDict *)(v18 - v13), (unsigned __int8 *)0x10, (TCFFDict *)v25, v10);
        appended = TCFFArray::AppendData((TCFFArray *)this, v11, v19, v25);
        v13 = *(_DWORD *)(a3 + v12);
        *(_QWORD *)v25 = 0;
        v26 = 0;
        v27 = 0;
        v22 = TCFFDict::EncodeNumber((TCFFDict *)(v13 - v18), (unsigned __int8 *)0x10, (TCFFDict *)v25, v21);
        v11 = TCFFArray::AppendData((TCFFArray *)this, appended, v22, v25);
      }
      v15 *= 2;
      v12 += 8;
    }
    while (v14 != v12);
  }
  return TCFFArray::AppendOffset((TCFFArray *)this, v11);
}

uint64_t TCFFFontSet::AddStemSnapToDict(TCFFFontSet *this, int a2, int *a3, const void **a4, TCFFDict *a5)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t appended;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD v14[2];
  __int16 v15;
  uint64_t v16;

  LODWORD(v7) = a2;
  v16 = *MEMORY[0x1E0C80C00];
  TCFFDict::AddOpcode(a4, (__int16)this);
  appended = TCFFArray::GetOffset((TCFFArray *)a4, bswap32(*((unsigned __int16 *)a4 + 4)) >> 16) - 1;
  if ((_DWORD)v7)
  {
    v10 = 0;
    v7 = v7;
    do
    {
      v11 = *a3++;
      v14[0] = 0;
      v14[1] = 0;
      v15 = 0;
      v12 = TCFFDict::EncodeNumber((TCFFDict *)(v11 - v10), (unsigned __int8 *)0x10, (TCFFDict *)v14, v8);
      appended = TCFFArray::AppendData((TCFFArray *)a4, appended, v12, (const unsigned __int8 *)v14);
      v10 = v11;
      --v7;
    }
    while (v7);
  }
  return TCFFArray::AppendOffset((TCFFArray *)a4, appended);
}

uint64_t TCFFFontSet::AddSubrsToDict(TCFFFontSet *this, unsigned int a2, const void *a3, const unsigned __int8 *a4, const unsigned __int8 *a5, uint64_t *a6, TCFFArray **a7, TCFFDict *a8, BOOL a9)
{
  char v9;
  unsigned int v16;
  uint64_t v17;
  size_t v18;
  unsigned int v19;
  unsigned int i;
  int v21;
  int v22;
  unsigned int v23;

  v9 = (char)a8;
  v16 = this;
  v17 = operator new();
  *(_QWORD *)v17 = &off_1E61CB6C0;
  *(_WORD *)(v17 + 8) = __rev16(a2);
  *(_BYTE *)(v17 + 10) = v16;
  v18 = v16 + v16 * (unint64_t)a2;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  std::vector<unsigned char>::__init_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>((_QWORD *)(v17 + 16), a3, (uint64_t)a3 + v18, v18);
  *(_BYTE *)(v17 + 40) = v9;
  *(_QWORD *)(v17 + 48) = a4;
  *(_QWORD *)(v17 + 56) = &a5[-v18];
  *a6 = v17;
  v19 = (*((uint64_t (**)(TCFFArray **))*a7 + 2))(a7) + 2;
  for (i = 1; ; i = v23)
  {
    v21 = v19 == (__int16)v19 ? 3 : 5;
    v22 = (unsigned __int16)(v19 + 107) < 0xD7u ? 1 : 2;
    v23 = v19 + 1131 <= 0x8D6 ? v22 : v21;
    if (v23 <= i)
      break;
    v19 = v19 - i + v23;
  }
  return (*((uint64_t (**)(TCFFArray **, uint64_t))*a7 + 9))(a7, 19);
}

void sub_1B0A0DDFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x1091C4015871C78);
  _Unwind_Resume(a1);
}

uint64_t TCFFFontSet::AddBlueValues(uint64_t a1, __int16 a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  return TCFFFontSet::AddBlueValuesToDict(a2, a3, a4, a5, a6, (const void **)(a1 + 304));
}

uint64_t TCFFFontSet::AddStemSnap(const void **this, TCFFFontSet *a2, int a3, int *a4, TCFFDict *a5)
{
  return TCFFFontSet::AddStemSnapToDict(a2, a3, a4, this + 38, a5);
}

uint64_t TCFFFontSet::AddSubrs(TCFFFontSet *this, TCFFFontSet *a2, unsigned int a3, const unsigned __int8 *a4, const unsigned __int8 *a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, BOOL a9)
{
  return TCFFFontSet::AddSubrsToDict(a2, a3, a4, a5, a6, (uint64_t *)this + 47, (TCFFArray **)this + 38, (TCFFDict *)1, a9);
}

void TCFFFontSet::StreamOut(TCFFFontSet *this, TBufferedStreamingContext *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[4];
  unsigned __int8 v10[2];

  LOBYTE(v9[0]) = *((_BYTE *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v9, 1uLL);
  LOBYTE(v9[0]) = *((_BYTE *)this + 9);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v9, 1uLL);
  LOBYTE(v9[0]) = *((_BYTE *)this + 10);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v9, 1uLL);
  LOBYTE(v9[0]) = *((_BYTE *)this + 11);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v9, 1uLL);
  TCFFArray::StreamOut((TCFFFontSet *)((char *)this + 16), a2);
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[2] = v4;
  v9[3] = v4;
  v9[0] = v4;
  v9[1] = v4;
  TCFFDictArray::TCFFDictArray((TCFFDictArray *)v9, (TCFFFontSet *)((char *)this + 80));
  TCFFDictArray::StreamOut((TCFFDictArray *)v9, a2);
  TCFFArray::StreamOut((TCFFFontSet *)((char *)this + 152), a2);
  v5 = *((_QWORD *)this + 27);
  if (v5)
  {
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(_QWORD *)v5 + 32))(v5, a2);
  }
  else
  {
    *(_WORD *)v10 = 0;
    TBufferedStreamingContext::BufferString((uint64_t)a2, v10, 2uLL);
  }
  v6 = *((_QWORD *)this + 28);
  if (v6)
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(_QWORD *)v6 + 16))(v6, a2);
  v7 = *((_QWORD *)this + 29);
  if (v7)
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(_QWORD *)v7 + 24))(v7, a2);
  TCFFArray::StreamOut((TCFFFontSet *)((char *)this + 240), a2);
  TCFFDict::StreamOut((TCFFFontSet *)((char *)this + 304), a2);
  v8 = *((_QWORD *)this + 47);
  if (v8)
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(_QWORD *)v8 + 32))(v8, a2);
  TCFFArray::~TCFFArray((void **)v9);
}

void sub_1B0A0DFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TCFFArray::~TCFFArray(&a9);
  _Unwind_Resume(a1);
}

void TType1CFFFontSet::~TType1CFFFontSet(TType1CFFFontSet *this)
{
  TCFFFontSet::~TCFFFontSet(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1CFFFontSet::AddCharString(TType1CFFFontSet *this, const TType1PSFont *a2, uint64_t a3)
{
  uint64_t v6;
  void *v8[118];

  v8[117] = *(void **)MEMORY[0x1E0C80C00];
  memset(v8, 170, 0x3A8uLL);
  TType1ToType2CharStringConversionContext::TType1ToType2CharStringConversionContext((TType1ToType2CharStringConversionContext *)v8, a2, a3);
  TCFFArray::Add((TType1CFFFontSet *)((char *)this + 240), v8[36], (const unsigned __int8 *)v8[35]);
  v6 = TCFFStringArray::AddString((TType1CFFFontSet *)((char *)this + 152), LODWORD(v8[34]), (const char *)v8[33]);
  TType1ToType2CharStringConversionContext::~TType1ToType2CharStringConversionContext(v8);
  return v6;
}

void sub_1B0A0E0C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t TType1PSFont::BuildCFFFontSet(TType1PSFont *this, const unsigned int *a2, const unsigned __int16 *a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  const unsigned __int8 *v10;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  const unsigned __int8 *v13;
  const unsigned __int8 *v14;
  unsigned int *v15;
  TCFFDict *v16;
  TCFFDict *v17;
  TCFFDict *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int32x4_t v22;
  int v23;
  int v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  TCFFDict *v30;
  uint64_t v31;
  unsigned int v32;
  int8x8_t v33;
  int v34;
  int v35;
  unsigned int v36;
  const unsigned int *v37;
  int v38;
  size_t v39;
  _WORD *v40;
  _WORD *v41;
  unsigned int v42;
  unsigned __int16 v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  TCFFDict *v48;
  TCFFDict *v49;
  TCFFDict *v50;
  TCFFDict *v51;
  TCFFDict *v52;
  uint64_t v53;
  int Length;
  int v55;
  const void *v56;
  int v57;
  int v58;
  int v59;
  const void *v60;
  int v61;
  int v62;
  const void *v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  TCFFDict *v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  BOOL v82;
  char v83;
  char v84;
  char v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  const void **v96;
  unint64_t v98;
  unint64_t v99;
  __int16 v100;
  _QWORD v101[3];
  _BYTE v102[24];
  unsigned __int8 v103[16];
  _WORD v104[512];
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v9 = (*(uint64_t (**)(TType1PSFont *))(*(_QWORD *)this + 40))(this);
  v10 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(_QWORD *)this + 88))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 0, v10, (TCFFStringArray *)(a4 + 19));
  v11 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(_QWORD *)this + 104))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 1, v11, (TCFFStringArray *)(a4 + 19));
  v12 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(_QWORD *)this + 72))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 2, v12, (TCFFStringArray *)(a4 + 19));
  v13 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(_QWORD *)this + 80))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 3, v13, (TCFFStringArray *)(a4 + 19));
  v14 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(_QWORD *)this + 96))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 4, v14, (TCFFStringArray *)(a4 + 19));
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 312))(*((_QWORD *)this + 4)))
    TCFFDict::AddNumericEntry(a4 + 10, 33, (TCFFDict *)1);
  v15 = (unsigned int *)*((_QWORD *)this + 4);
  v16 = (TCFFDict *)v15[38];
  if ((_DWORD)v16)
  {
    TCFFDict::AddNumericEntry(a4 + 10, 34, v16, (unsigned __int8 *)0x10);
    v15 = (unsigned int *)*((_QWORD *)this + 4);
  }
  v17 = (TCFFDict *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 296))(v15);
  if ((_DWORD)v17 != -100)
    TCFFDict::AddNumericEntry(a4 + 10, 35, v17);
  v18 = (TCFFDict *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 304))(*((_QWORD *)this + 4));
  if ((_DWORD)v18 != 50)
    TCFFDict::AddNumericEntry(a4 + 10, 36, v18);
  if (*(_WORD *)(v9 + 60))
    TCFFDict::AddNumericEntry(a4 + 10, 37, (TCFFDict *)*(unsigned __int16 *)(v9 + 60));
  v96 = a4 + 10;
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4));
  if (v19)
    v20 = v19;
  else
    v20 = 1000;
  *(_OWORD *)v102 = *(_OWORD *)(v9 + 4);
  *(_QWORD *)&v102[16] = *(_QWORD *)(v9 + 20);
  v21 = *(_DWORD *)&v102[16];
  v22.i64[0] = __PAIR64__(*(unsigned int *)&v102[8], *(unsigned int *)v102);
  v22.i64[1] = *(_QWORD *)&v102[12];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v22, (int32x4_t)xmmword_1B0AAB110)))) & 1) != 0
    || *(_DWORD *)&v102[4]
    || *(_DWORD *)&v102[20]
    || v20 != 1000)
  {
    if (*(int *)v102 >= 0)
      v23 = *(_DWORD *)v102;
    else
      v23 = -*(_DWORD *)v102;
    if (*(int *)&v102[12] >= 0)
      v24 = *(_DWORD *)&v102[12];
    else
      v24 = -*(_DWORD *)&v102[12];
    if (v23 == v24)
    {
      v25 = v23 - 0x40000000 / v20;
      if (v25 < 0)
        v25 = -v25;
      if (v25 < 2)
        goto LABEL_31;
      v26 = (double)*(int *)&v102[12];
      v27 = fabs((double)*(int *)&v102[12] * 9.31322575e-10);
      v28 = (double)*(int *)v102;
    }
    else
    {
      v28 = (double)*(int *)v102;
      v26 = (double)*(int *)&v102[12];
      v27 = hypot((double)*(int *)v102 * 9.31322575e-10, (double)*(int *)&v102[12] * 9.31322575e-10);
      v21 = *(_DWORD *)&v102[16];
    }
    v29 = 1.0 / v27 / (double)v20;
    *(_DWORD *)v102 = (int)(v28 * v29);
    *(_DWORD *)&v102[4] = (int)(v29 * (double)*(int *)&v102[4]);
    *(_DWORD *)&v102[8] = (int)(v29 * (double)*(int *)&v102[8]);
    *(_DWORD *)&v102[12] = (int)(v26 * v29);
    *(_DWORD *)&v102[16] = (int)(v29 * (double)v21);
    *(_DWORD *)&v102[20] = (int)(v29 * (double)*(int *)&v102[20]);
LABEL_31:
    TCFFDict::AddNumericArrayEntry(v96, 39, 6, v102, (unsigned __int8 *)0x1E);
  }
  TCFFDict::AddNumericEntry(v96, 13, (TCFFDict *)*(unsigned int *)(v9 + 28));
  TCFFDict::AddNumericArrayEntry(v96, 5, 4, (unsigned __int8 *)(v9 + 88), (unsigned __int8 *)0x10);
  v30 = (TCFFDict *)*(unsigned int *)(v9 + 40);
  if ((_DWORD)v30)
    TCFFDict::AddNumericEntry(v96, 40, v30, (unsigned __int8 *)0x10);
  memset(v101, 170, sizeof(v101));
  v100 = -21846;
  v98 = 0xAAAAAAAAAAAAAAAALL;
  v99 = 0xAAAAAAAAAAAAAAAALL;
  v31 = (*(uint64_t (**)(TType1PSFont *, __int16 *, _QWORD *, unint64_t *, _QWORD *, _QWORD *))(*(_QWORD *)this + 152))(this, &v100, &v101[2], &v99, &v101[1], v101);
  v98 = v31;
  if (v31)
    (*((void (**)(const void **, TType1PSFont *, _QWORD, uint64_t, unint64_t, uint64_t))*a4 + 3))(a4, this, v100, v31, v99, v101[0] - v31);
  v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (v32 >= 0xFFFF)
    v34 = 0xFFFF;
  else
    v34 = v32;
  if (a2)
  {
    v35 = 0;
    if (v34)
    {
      v36 = (v34 + 31) >> 5;
      v37 = a2;
      do
      {
        if (*v37)
        {
          v33.i32[0] = *v37;
          v33 = vcnt_s8(v33);
          v33.i16[0] = vaddlv_u8((uint8x8_t)v33);
          v35 += v33.i32[0];
        }
        ++v37;
        --v36;
      }
      while (v36);
    }
  }
  else
  {
    v35 = v34;
  }
  v38 = v35 - 1;
  v39 = 2 * (v35 - 1);
  v40 = (_WORD *)operator new[]();
  v41 = v40;
  if (v38)
    bzero(v40, v39);
  bzero(v104, 0x400uLL);
  if (v34)
  {
    v42 = 0;
    v43 = 0;
    do
    {
      if (!v42 || ((a2[v42 >> 5] << v42) & 0x80000000) != 0)
      {
        v44 = (*((uint64_t (**)(const void **, TType1PSFont *, _QWORD))*a4 + 2))(a4, this, (unsigned __int16)v42);
        if (v42)
        {
          v41[v43 - 1] = __rev16(v44);
          if (a5 >= 2)
          {
            v45 = 0;
            while (v42 != a3[v45])
            {
              if (++v45 == 256)
                goto LABEL_60;
            }
            v46 = &v104[v45 * 2];
            *v46 = v43;
            v46[1] = v44;
          }
        }
LABEL_60:
        ++v43;
      }
      ++v42;
    }
    while (v42 != v34);
  }
  if (a5 > 1)
    (*((void (**)(const void **, _WORD *))*a4 + 4))(a4, v104);
  v47 = operator new();
  *(_BYTE *)(v47 + 8) = 0;
  *(_QWORD *)v47 = &off_1E61CB870;
  *(_WORD *)(v47 + 10) = v38;
  *(_QWORD *)(v47 + 16) = v41;
  a4[29] = (const void *)v47;
  (*((void (**)(const void **, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))*a4 + 5))(a4, 6, *(unsigned __int16 *)(v9 + 66), v9 + 248, *(unsigned int *)(v9 + 32), 0);
  (*((void (**)(const void **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))*a4 + 5))(a4, 7, *(unsigned __int16 *)(v9 + 66), v9 + 248, *(unsigned int *)(v9 + 32), 1);
  (*((void (**)(const void **, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))*a4 + 5))(a4, 8, *(unsigned __int16 *)(v9 + 68), v9 + 344, *(unsigned int *)(v9 + 36), 0);
  (*((void (**)(const void **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))*a4 + 5))(a4, 9, *(unsigned __int16 *)(v9 + 68), v9 + 344, *(unsigned int *)(v9 + 36), 1);
  TCFFDict::AddNumericEntry(a4 + 38, 41, (TCFFDict *)*(unsigned int *)(v9 + 236), (unsigned __int8 *)0x10);
  v48 = (TCFFDict *)*(unsigned int *)(v9 + 244);
  if ((_DWORD)v48 != 458752)
    TCFFDict::AddNumericEntry(a4 + 38, 42, v48, (unsigned __int8 *)0x10);
  v49 = (TCFFDict *)*(unsigned int *)(v9 + 240);
  if ((_DWORD)v49 != 0x10000)
    TCFFDict::AddNumericEntry(a4 + 38, 43, v49, (unsigned __int8 *)0x10);
  TCFFDict::AddNumericEntry(a4 + 38, 10, (TCFFDict *)*(unsigned int *)(v9 + 104), (unsigned __int8 *)0x10);
  TCFFDict::AddNumericEntry(a4 + 38, 11, (TCFFDict *)*(unsigned int *)(v9 + 108), (unsigned __int8 *)0x10);
  if (*(_WORD *)(v9 + 62))
    (*((void (**)(const void **, uint64_t))*a4 + 6))(a4, 44);
  if (*(_WORD *)(v9 + 64))
    (*((void (**)(const void **, uint64_t))*a4 + 6))(a4, 45);
  if (*(_WORD *)(v9 + 70))
    TCFFDict::AddNumericEntry(a4 + 38, 49, (TCFFDict *)*(unsigned __int16 *)(v9 + 70));
  v50 = (TCFFDict *)*(unsigned int *)(v9 + 52);
  if ((_DWORD)v50)
    TCFFDict::AddNumericEntry(a4 + 38, 51, v50, (unsigned __int8 *)0x10);
  v51 = (TCFFDict *)*(unsigned int *)(v9 + 120);
  if ((_DWORD)v51)
    TCFFDict::AddNumericEntry(a4 + 38, 20, v51, (unsigned __int8 *)0x10);
  v52 = (TCFFDict *)*(unsigned int *)(v9 + 440);
  if ((_DWORD)v52)
    TCFFDict::AddNumericEntry(a4 + 38, 21, v52, (unsigned __int8 *)0x10);
  v53 = (*(uint64_t (**)(TType1PSFont *, unint64_t *, __int16 *, _QWORD *))(*(_QWORD *)this + 136))(this, &v98, &v100, v101);
  v99 = v53;
  if (v53)
    (*((void (**)(const void **, _QWORD, _QWORD, unint64_t, uint64_t, unint64_t))*a4 + 7))(a4, v100, *(unsigned __int16 *)(*((_QWORD *)this + 4) + 144), v98, v53, v101[0] - v98);
  Length = TCFFArray::GetLength((TCFFArray *)(a4 + 2));
  v55 = TCFFArray::GetLength((TCFFArray *)(a4 + 19));
  v56 = a4[27];
  if (v56)
    v57 = (*(uint64_t (**)(const void *))(*(_QWORD *)v56 + 16))(v56);
  else
    v57 = 2;
  v58 = TCFFDict::GetLength((TCFFDict *)v96);
  v59 = Length + v55 + 7 + v57;
  v60 = a4[28];
  if (v60)
  {
    v61 = (*(uint64_t (**)(const void *))(*(_QWORD *)v60 + 24))(v60);
    v59 += v61;
    v62 = 3;
  }
  else
  {
    v61 = 0;
    if (a5 == 1)
      v58 += 2;
    v62 = 2;
  }
  v63 = a4[29];
  if (v63)
  {
    v64 = (*(uint64_t (**)(const void *))(*(_QWORD *)v63 + 32))(v63);
    ++v62;
    v59 += v64;
  }
  else
  {
    v64 = 0;
  }
  v65 = TCFFArray::GetLength((TCFFArray *)(a4 + 30));
  v66 = TCFFDict::GetLength((TCFFDict *)(a4 + 38));
  v68 = (TCFFDict *)v66;
  if ((v66 + 1131) > 0x8D6)
  {
    if ((_DWORD)v66 == (__int16)v66)
      v69 = 3;
    else
      v69 = 5;
  }
  else if ((unsigned __int16)(v66 + 107) < 0xD7u)
  {
    v69 = 1;
  }
  else
  {
    v69 = 2;
  }
  v70 = v69 + v58;
  v71 = v69 + v58 + 2 * v62;
  if (v71 >= 0xFF)
  {
    if (v71 >= 0xFFFF)
    {
      if (v71 < 0xFFFFFF)
        v72 = 3;
      else
        v72 = 4;
    }
    else
    {
      v72 = 2;
    }
  }
  else
  {
    v72 = 1;
  }
  v73 = v65 + v59 + v70 + 2 * (v72 + v62);
  LOBYTE(v74) = 1;
LABEL_108:
  if (v71 < 0xFFFFFF)
    v75 = 3;
  else
    v75 = 4;
  v76 = v74;
  if (v71 >= 0xFFFF)
    v77 = v75;
  else
    v77 = 2;
  if (v71 < 0xFF)
    v78 = 1;
  else
    v78 = v77;
  v79 = v72;
  do
  {
    v80 = 2 * (v78 - v79);
    if (v78 <= v79)
      v80 = 0;
    v73 += v80;
    if (v79 <= v78)
      v72 = v78;
    else
      v72 = v79;
    if (v73 >= 0x8000)
      v74 = 5;
    else
      v74 = 3;
    if (v73 < 0x6C)
      v74 = 1;
    v81 = v74 - v76;
    if (v74 != (_DWORD)v76)
    {
      v71 += v81 * v62;
      v73 += v81 * v62;
      goto LABEL_108;
    }
    v82 = v78 > v79;
    v79 = v72;
  }
  while (v82);
  if (v73 < 0xFFFFFF)
    v83 = 3;
  else
    v83 = 4;
  if (v73 >= 0xFFFF)
    v84 = v83;
  else
    v84 = 2;
  if (v73 >= 0xFF)
    v85 = v84;
  else
    v85 = 1;
  *((_BYTE *)a4 + 11) = v85;
  v86 = v73 - v65;
  memset(v103, 170, sizeof(v103));
  v87 = v86;
  if (a4[29])
  {
    v87 = v86 - v64;
    v88 = TCFFDict::EncodeNumber(v76, v86 - v64, v103, v67);
    TCFFDict::AddOpcode(v96, 15);
    TCFFArray::Add((TCFFArray *)v96, v88, v103);
  }
  if (a4[28])
  {
    v89 = TCFFDict::EncodeNumber(v76, v87 - v61, v103, v67);
    TCFFDict::AddOpcode(v96, 16);
    TCFFArray::Add((TCFFArray *)v96, v89, v103);
  }
  else if (a5 == 1)
  {
    TCFFDict::AddNumericEntry(v96, 16, (TCFFDict *)1);
  }
  v90 = TCFFDict::EncodeNumber(v76, v86, v103, v67);
  TCFFDict::AddOpcode(v96, 17);
  TCFFArray::Add((TCFFArray *)v96, v90, v103);
  v92 = TCFFDict::EncodeNumber(v68, v103, v91);
  v94 = TCFFDict::EncodeNumber(v76, v73, &v103[v92], v93);
  TCFFDict::AddOpcode(v96, 18);
  return TCFFArray::Add((TCFFArray *)v96, v94 + v92, v103);
}

void sub_1B0A0EBC0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]()
{
  std::__throw_out_of_range[abi:fe180100]("vector");
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:fe180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B0A0EC80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void THandlerStreamingContext::THandlerStreamingContext(THandlerStreamingContext *this, const TFontHandler *a2, __CFData *a3)
{
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)this = &off_1E61CBA30;
  v6 = (_QWORD *)operator new();
  *v6 = &off_1E61C8E38;
  v6[2] = 0;
  v6[3] = 0;
  v6[5] = 0x20000;
  v7 = malloc_type_malloc(0x20000uLL, 0x5B1671C3uLL);
  v6[4] = v7;
  *v6 = &off_1E61C8E78;
  v6[1] = v7;
  *((_QWORD *)this + 1) = v6;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E61C8E38;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 40) = 1024;
  v9 = malloc_type_malloc(0x400uLL, 0x5B1671C3uLL);
  *(_QWORD *)(v8 + 32) = v9;
  *(_DWORD *)(v8 + 64) = -646850191;
  *(_QWORD *)v8 = &off_1E61C8EB8;
  *(_QWORD *)(v8 + 8) = v9;
  *((_QWORD *)this + 2) = v8;
  v10 = operator new();
  *(_QWORD *)v10 = &off_1E61C8E38;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 40) = 1024;
  v11 = malloc_type_malloc(0x400uLL, 0x5B1671C3uLL);
  *(_QWORD *)(v10 + 32) = v11;
  *(_DWORD *)(v10 + 64) = 283775210;
  *(_QWORD *)v10 = &off_1E61C8F00;
  *(_QWORD *)(v10 + 8) = v11;
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 69) = a2;
  THandlerStreamingContext::InitStreamingCallbacks(this);
}

void sub_1B0A0EDFC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[2];
  v1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[1];
  v1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(exception_object);
}

uint64_t THandlerStreamingContext::InitStreamingCallbacks(THandlerStreamingContext *this)
{
  (*(void (**)(_QWORD, uint64_t (*)(__CFData *, CFIndex, UInt8 *), _QWORD))(**((_QWORD **)this + 1)
                                                                                               + 16))(*((_QWORD *)this + 1), HandlerFlushStreamCallback, *((_QWORD *)this + 4));
  (*(void (**)(_QWORD, BOOL (*)(THandlerStreamingBuffers *, unsigned int, unsigned __int8 *), _QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), HandlerFlushEExecCallback, *((_QWORD *)this + 1));
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), HandlerFlushCharStringCallback, *((_QWORD *)this + 2));
}

void THandlerStreamingContext::~THandlerStreamingContext(THandlerStreamingContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E61CBA30;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  THandlerStreamingContext::~THandlerStreamingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t HandlerFlushStreamCallback(__CFData *a1, CFIndex length, UInt8 *bytes)
{
  CFDataAppendBytes(a1, bytes, length);
  return 1;
}

BOOL HandlerFlushEExecCallback(THandlerStreamingBuffers *a1, unsigned int a2, unsigned __int8 *a3)
{
  return THandlerStreamingBuffers::WriteBytes(a1, a2, a3) != 0;
}

BOOL HandlerFlushCharStringCallback(THandlerStreamingBuffers *a1, unsigned int a2, unsigned __int8 *a3)
{
  return THandlerStreamingBuffers::WriteBytes(a1, a2, a3) != 0;
}

uint64_t THandlerStreamingContext::StreamT1Font(uint64_t a1, uint64_t a2, char *__s, _DWORD *a4, uint64_t a5, char a6)
{
  uint64_t v8;
  size_t v11;
  unint64_t *v12;
  unint64_t *v13;
  THandlerStreamingBuffers *v14;
  unint64_t *v15;
  unsigned __int8 *ZString;
  THandlerStreamingBuffers *v17;
  unint64_t *v18;
  unsigned __int8 *v19;
  THandlerStreamingBuffers *v20;
  unint64_t *v21;
  unsigned __int8 *v22;
  THandlerStreamingBuffers *v23;
  unint64_t *v24;
  unsigned __int8 *v25;
  THandlerStreamingBuffers *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unint64_t *v29;
  double v30;
  double BoundingBox;
  double v32;
  CGFloat y;
  double v34;
  CGFloat width;
  double v36;
  CGFloat height;
  uint64_t v38;
  THandlerStreamingBuffers *v39;
  double MinX;
  double MinY;
  double MaxX;
  double MaxY;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  THandlerStreamingBuffers *v49;
  uint64_t v50;
  int64x2_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t *v54;
  __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int v59;
  int v60;
  int v61;
  THandlerStreamingBuffers *v62;
  unint64_t *v63;
  unsigned __int8 *v64;
  THandlerStreamingBuffers *v65;
  unint64_t *v66;
  unsigned __int8 *v67;
  __int128 v68;
  unsigned int v69;
  int v70;
  THandlerStreamingBuffers *v71;
  THandlerStreamingBuffers *v72;
  unint64_t *v73;
  unsigned __int8 *v74;
  unint64_t *v75;
  THandlerStreamingBuffers *v76;
  unsigned __int8 *v77;
  THandlerStreamingBuffers *v78;
  unint64_t *v79;
  unsigned __int8 *v80;
  THandlerStreamingBuffers *v81;
  unint64_t *v82;
  unsigned __int8 *v83;
  THandlerStreamingBuffers *v84;
  unint64_t *v85;
  unsigned __int8 *v86;
  THandlerStreamingBuffers *v87;
  unint64_t *v88;
  unsigned __int8 *v89;
  unint64_t *v90;
  unsigned int v91;
  _DWORD *v92;
  unsigned int i;
  int v94;
  unsigned int v95;
  double GlyphIdealAdvanceAndSideBearing;
  const __CFString *v98;
  const __CFString *v99;
  __int128 v100;
  char *CString;
  THandlerStreamingBuffers *v102;
  THandlerStreamingBuffers *v103;
  THandlerStreamingBuffers *v104;
  const CGPath *v105;
  const CGPath *v106;
  const CGPath *CopyByNormalizing;
  THandlerStreamingBuffers *v108;
  THandlerStreamingBuffers *v109;
  unint64_t *v110;
  unsigned __int8 *v111;
  THandlerStreamingBuffers *v112;
  unint64_t *v113;
  unsigned __int8 *v114;
  THandlerStreamingBuffers *v115;
  unsigned __int8 *v116;
  unint64_t *v117;
  int v118;
  THandlerStreamingBuffers *v119;
  unsigned __int8 *v120;
  THandlerStreamingBuffers *v121;
  unsigned __int8 *v122;
  _DWORD *exception;
  int v125;
  CGAffineTransform v127;
  double v128;
  CGAffineTransform v129;
  unint64_t v130;
  _QWORD block[7];
  void **v132[7];
  int64x2_t v133;
  _BYTE v134[24];
  __int128 v135;
  _BYTE *v136;
  uint64_t v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;

  v137 = *MEMORY[0x1E0C80C00];
  if (!__s)
  {
LABEL_56:
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  if ((a6 & 1) != 0)
  {
    v8 = 6;
  }
  else
  {
    v11 = strlen(__s);
    THandlerStreamingBuffers::WriteStringF(*(THandlerStreamingBuffers **)(a1 + 8), (THandlerStreamingBuffers *)0x2F, v12, v11, __s, 0x10000);
    THandlerStreamingBuffers::WriteStringF(*(THandlerStreamingBuffers **)(a1 + 8), (THandlerStreamingBuffers *)2, v13, v11, __s);
    v14 = *(THandlerStreamingBuffers **)(a1 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    ZString = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)3, v133.i64, v15);
    THandlerStreamingBuffers::WriteBytes(v14, v133.u64[0], ZString);
    v17 = *(THandlerStreamingBuffers **)(a1 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v19 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)6, v133.i64, v18);
    THandlerStreamingBuffers::WriteBytes(v17, v133.u64[0], v19);
    v20 = *(THandlerStreamingBuffers **)(a1 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v22 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)7, v133.i64, v21);
    THandlerStreamingBuffers::WriteBytes(v20, v133.u64[0], v22);
    v23 = *(THandlerStreamingBuffers **)(a1 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v25 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x18, v133.i64, v24);
    THandlerStreamingBuffers::WriteBytes(v23, v133.u64[0], v25);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a5);
    v8 = 8;
  }
  v26 = *(THandlerStreamingBuffers **)(a1 + 8);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v27 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)v8, v133.i64, (unint64_t *)__s);
  THandlerStreamingBuffers::WriteBytes(v26, v133.u64[0], v27);
  v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 552) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 552) + 8));
  v30 = 1.0;
  if (v28)
    v30 = 1000.0 / (double)v28;
  THandlerStreamingBuffers::WriteStringF(*(THandlerStreamingBuffers **)(a1 + 8), (THandlerStreamingBuffers *)0xB, v29, 0x3F50624DD2F1A9FCLL, 0x3F50624DD2F1A9FCLL);
  BoundingBox = FPFontGetBoundingBox(a2);
  y = v32;
  width = v34;
  height = v36;
  if (v30 != 1.0)
  {
    CGAffineTransformMakeScale(&v127, v30, v30);
    v138.origin.x = BoundingBox;
    v138.origin.y = y;
    v138.size.width = width;
    v138.size.height = height;
    v139 = CGRectApplyAffineTransform(v138, &v127);
    BoundingBox = v139.origin.x;
    y = v139.origin.y;
    width = v139.size.width;
    height = v139.size.height;
  }
  v38 = a1;
  v39 = *(THandlerStreamingBuffers **)(a1 + 8);
  v140.origin.x = BoundingBox;
  v140.origin.y = y;
  v140.size.width = width;
  v140.size.height = height;
  MinX = CGRectGetMinX(v140);
  v141.origin.x = BoundingBox;
  v141.origin.y = y;
  v141.size.width = width;
  v141.size.height = height;
  MinY = CGRectGetMinY(v141);
  v142.origin.x = BoundingBox;
  v142.origin.y = y;
  v142.size.width = width;
  v142.size.height = height;
  MaxX = CGRectGetMaxX(v142);
  v143.origin.x = BoundingBox;
  v143.origin.y = y;
  v143.size.width = width;
  v143.size.height = height;
  MaxY = CGRectGetMaxY(v143);
  LODWORD(v44) = vcvtmd_s64_f64(MinX);
  LODWORD(v45) = vcvtmd_s64_f64(MinY);
  LODWORD(v46) = vcvtpd_s64_f64(MaxX);
  LODWORD(v47) = vcvtpd_s64_f64(MaxY);
  THandlerStreamingBuffers::WriteStringF(v39, (THandlerStreamingBuffers *)0xC, v48, v44, v45, v46, v47);
  v49 = *(THandlerStreamingBuffers **)(a1 + 8);
  v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 552) + 8) + 432))(*(_QWORD *)(*(_QWORD *)(a1 + 552) + 8));
  if (v50)
  {
    v132[0] = (void **)0xAAAAAAAAAAAAAAAALL;
    v51.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v51.i64[1] = 0xAAAAAAAAAAAAAAAALL;
    v133 = v51;
    *(int64x2_t *)v134 = v51;
    (*(void (**)(int64x2_t *__return_ptr, uint64_t, uint64_t, void ***))(*(_QWORD *)v50 + 480))(&v133, v50, 1751474532, v132);
    if (v132[0] < (void **)0xC)
      v52 = 0;
    else
      v52 = bswap32(*(_DWORD *)(*(_QWORD *)(v133.i64[1] + 8) + *(_QWORD *)v134 + 8));
    v53 = v38;
    v133.i64[0] = (uint64_t)&off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v133);
  }
  else
  {
    v52 = 0;
    v53 = v38;
  }
  *(_QWORD *)v134 = 0;
  v133 = 0uLL;
  (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(*(_QWORD *)(v53 + 552) + 8) + 392))(*(_QWORD *)(*(_QWORD *)(v53 + 552) + 8), &v133);
  v55 = (__int16 *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v53 + 552) + 88))(*(_QWORD *)(v53 + 552), (v133.i64[1] - v133.i64[0]) >> 5);
  if (!v55 || (v56 = v133.i64[1] - v133.i64[0], v133.i64[1] == v133.i64[0]))
  {
    if (!v133.i64[0])
      goto LABEL_23;
    goto LABEL_22;
  }
  if ((unint64_t)v56 < 0x20)
  {
    __break(1u);
    goto LABEL_56;
  }
  v57 = v56 >> 5;
  v58 = (int *)v133.i64[0];
  do
  {
    v59 = *v58;
    v58 += 8;
    v60 = v59 + v52;
    v61 = *v55++;
    v52 = v60 + v61;
    --v57;
  }
  while (v57);
LABEL_22:
  v133.i64[1] = v133.i64[0];
  operator delete((void *)v133.i64[0]);
LABEL_23:
  THandlerStreamingBuffers::WriteStringF(v49, (THandlerStreamingBuffers *)0xD, v54, (v52 & 0x7FFFF) + 4000000);
  v62 = *(THandlerStreamingBuffers **)(v38 + 8);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v64 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x2E, v133.i64, v63);
  THandlerStreamingBuffers::WriteBytes(v62, v133.u64[0], v64);
  v65 = *(THandlerStreamingBuffers **)(v38 + 8);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v67 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1A, v133.i64, v66);
  THandlerStreamingBuffers::WriteBytes(v65, v133.u64[0], v67);
  *(_QWORD *)&v68 = -1;
  *((_QWORD *)&v68 + 1) = -1;
  *(_OWORD *)&v129.c = v68;
  *(_OWORD *)&v129.tx = v68;
  *(_OWORD *)&v129.a = v68;
  v130 = 0xAAAAAAAAAAAAAA00;
  LOBYTE(v129.a) = 0;
  if (v30 != 1.0)
  {
    CGAffineTransformMakeScale(&v129, v30, v30);
    LOBYTE(v130) = 1;
  }
  v69 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v38 + 552) + 8) + 168))(*(_QWORD *)(*(_QWORD *)(v38 + 552) + 8));
  if (v69 >= 0xFFFF)
    v70 = 0xFFFF;
  else
    v70 = v69;
  v125 = v70;
  v71 = *(THandlerStreamingBuffers **)(v38 + 16);
  v133.i32[0] = 1998898061;
  THandlerStreamingBuffers::WriteBytes(v71, 4uLL, (unsigned __int8 *)&v133);
  v72 = *(THandlerStreamingBuffers **)(v38 + 16);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v74 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1D, v133.i64, v73);
  THandlerStreamingBuffers::WriteBytes(v72, v133.u64[0], v74);
  if (v125)
  {
    if (a4)
      *a4 |= 0x80000000;
    v76 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v77 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1E, v133.i64, v75);
    THandlerStreamingBuffers::WriteBytes(v76, v133.u64[0], v77);
    THandlerEExecBuffer::WriteNumber(*(THandlerEExecBuffer **)(v38 + 16), 4);
    v78 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v80 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1F, v133.i64, v79);
    THandlerStreamingBuffers::WriteBytes(v78, v133.u64[0], v80);
    v81 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v83 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x23, v133.i64, v82);
    THandlerStreamingBuffers::WriteBytes(v81, v133.u64[0], v83);
    v84 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v86 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x24, v133.i64, v85);
    THandlerStreamingBuffers::WriteBytes(v84, v133.u64[0], v86);
    THandlerEExecBuffer::WriteNumber(*(THandlerEExecBuffer **)(v38 + 16), v125);
    v87 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v89 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x25, v133.i64, v88);
    THandlerStreamingBuffers::WriteBytes(v87, v133.u64[0], v89);
    v91 = v125;
    if (a4)
    {
      v92 = a4;
      for (i = 0; i < v91; i += 32)
      {
        if (*v92)
        {
          v94 = 0;
          v95 = 0x80000000;
          do
          {
            if ((*v92 & v95) != 0 && i + v94 < v91)
            {
              v128 = NAN;
              GlyphIdealAdvanceAndSideBearing = FPFontGetGlyphIdealAdvanceAndSideBearing(a2);
              v128 = v30 * v128;
              v98 = TFont::CopyGlyphName(*(TFont **)(*(_QWORD *)(v38 + 552) + 8));
              v99 = v98;
              if (v98)
              {
                *(_QWORD *)&v100 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v100 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&v134[8] = v100;
                v135 = v100;
                v133 = 0uLL;
                *(_QWORD *)v134 = 0;
                v136 = &v134[8];
                CString = (char *)GetCStringPtr<TInlineVector<char,30ul>>(v98, &v133, 0x600u);
                if (CString)
                  THandlerEExecBuffer::WriteGlyphName(*(THandlerEExecBuffer **)(v38 + 16), CString);
                CFRelease(v99);
                v132[0] = (void **)&v133;
                std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](v132);
              }
              v102 = *(THandlerStreamingBuffers **)(v38 + 24);
              v133.i32[0] = 1869051240;
              THandlerStreamingBuffers::WriteBytes(v102, 4uLL, (unsigned __int8 *)&v133);
              v103 = *(THandlerStreamingBuffers **)(v38 + 24);
              v133.i64[0] = __PAIR64__(llround(v30 * GlyphIdealAdvanceAndSideBearing), llround(v128));
              THandlerCharStringBuffer::WriteNumbers(v103, v133.i32, (unsigned __int8 *)2);
              v104 = *(THandlerStreamingBuffers **)(v38 + 24);
              v133.i8[0] = 13;
              THandlerStreamingBuffers::WriteBytes(v104, 1uLL, (unsigned __int8 *)&v133);
              v105 = (const CGPath *)FPFontCopyOriginalGlyphPath(a2);
              v106 = v105;
              if (v105)
              {
                if (CGPathIsEmpty(v105))
                {
                  CopyByNormalizing = v106;
                }
                else
                {
                  CopyByNormalizing = CGPathCreateCopyByNormalizing(v106, 0);
                  CGPathRelease(v106);
                  v132[0] = 0;
                  v132[1] = (void **)v132;
                  v132[2] = (void **)0x3802000000;
                  v132[3] = (void **)__Block_byref_object_copy_;
                  v132[4] = (void **)__Block_byref_object_dispose_;
                  v132[5] = *(void ***)&v128;
                  v132[6] = 0;
                  v133.i64[0] = 0;
                  v133.i64[1] = (uint64_t)&v133;
                  *(_QWORD *)v134 = 0x4002000000;
                  *(_QWORD *)&v134[8] = __Block_byref_object_copy__1;
                  *(_QWORD *)&v134[16] = __Block_byref_object_dispose__2;
                  *(_QWORD *)&v135 = -256;
                  *((_QWORD *)&v135 + 1) = -1;
                  v136 = (_BYTE *)0xAAAAAAAAAAAAAA00;
                  block[0] = MEMORY[0x1E0C809B0];
                  block[1] = 0x40000000;
                  block[2] = ___ZNK24THandlerStreamingContext13WriteContoursEPK6CGPathhd_block_invoke;
                  block[3] = &unk_1E61CBA50;
                  block[4] = v132;
                  block[5] = &v133;
                  block[6] = v38;
                  CGPathApplyWithBlock(CopyByNormalizing, block);
                  _Block_object_dispose(&v133, 8);
                  _Block_object_dispose(v132, 8);
                }
                CGPathRelease(CopyByNormalizing);
              }
              v108 = *(THandlerStreamingBuffers **)(v38 + 24);
              v133.i8[0] = 14;
              THandlerStreamingBuffers::WriteBytes(v108, 1uLL, (unsigned __int8 *)&v133);
              THandlerEExecBuffer::WriteSize(*(THandlerEExecBuffer **)(v38 + 16), *(_QWORD *)(*(_QWORD *)(v38 + 24) + 24));
              v109 = *(THandlerStreamingBuffers **)(v38 + 16);
              v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
              v111 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x21, v133.i64, v110);
              THandlerStreamingBuffers::WriteBytes(v109, v133.u64[0], v111);
              (*(void (**)(_QWORD))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24));
              v112 = *(THandlerStreamingBuffers **)(v38 + 16);
              v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
              v114 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x23, v133.i64, v113);
              THandlerStreamingBuffers::WriteBytes(v112, v133.u64[0], v114);
              v91 = v125;
            }
            v95 >>= 1;
            ++v94;
          }
          while (v94 != 32);
        }
        ++v92;
      }
    }
    v115 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v116 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x27, v133.i64, v90);
    THandlerStreamingBuffers::WriteBytes(v115, v133.u64[0], v116);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v38 + 16) + 40))(*(_QWORD *)(v38 + 16));
  v118 = 8;
  do
  {
    v119 = *(THandlerStreamingBuffers **)(v38 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v120 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1B, v133.i64, v117);
    THandlerStreamingBuffers::WriteBytes(v119, v133.u64[0], v120);
    --v118;
  }
  while ((_WORD)v118);
  v121 = *(THandlerStreamingBuffers **)(v38 + 8);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  v122 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1C, v133.i64, v117);
  return THandlerStreamingBuffers::WriteBytes(v121, v133.u64[0], v122);
}

void sub_1B0A0FA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t THandlerStreamingContext::StreamPSEncoding(_QWORD *a1, uint64_t a2, unint64_t *a3)
{
  THandlerStreamingBuffers *v5;
  unsigned __int8 *ZString;
  unint64_t v8;

  v5 = (THandlerStreamingBuffers *)a1[1];
  v8 = 0xAAAAAAAAAAAAAAAALL;
  ZString = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x18, (uint64_t *)&v8, a3);
  THandlerStreamingBuffers::WriteBytes(v5, v8, ZString);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
}

void THandlerStreamingContext::StreamEncodingData(THandlerStreamingContext *this, const unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  const __CFString *v8;
  const __CFString *v9;
  __int128 v10;
  const char *CString;
  const char *v12;
  unint64_t *v13;
  size_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  uint64_t v17;
  _OWORD v18[2];
  _OWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 69) + 8) + 168))(*(_QWORD *)(*((_QWORD *)this + 69) + 8));
  v5 = 0;
  if (v4 >= 0xFFFF)
    v6 = 0xFFFF;
  else
    v6 = v4;
  do
  {
    if (a2[v5])
      v7 = a2[v5] >= v6;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = TFont::CopyGlyphName(*(TFont **)(*((_QWORD *)this + 69) + 8));
      v9 = v8;
      if (v8)
      {
        *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[0] = v10;
        v18[1] = v10;
        v16 = 0uLL;
        v17 = 0;
        v19 = v18;
        CString = GetCStringPtr<TInlineVector<char,30ul>>(v8, &v16, 0x600u);
        v12 = CString;
        if (CString)
        {
          v14 = strlen(CString);
          if (v14 != 7 || strncmp(v12, ".notdef", 7uLL))
            THandlerStreamingBuffers::WriteStringF(*((THandlerStreamingBuffers **)this + 1), (THandlerStreamingBuffers *)0x19, v13, v5, v14, v12);
        }
        CFRelease(v9);
        v15 = &v16;
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v15);
      }
    }
    ++v5;
  }
  while (v5 != 256);
}

void sub_1B0A0FC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14)
{
  a13 = (void **)&a14;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](&a13);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZNK24THandlerStreamingContext13WriteContoursEPK6CGPathhd_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  THandlerStreamingBuffers *v4;
  uint64_t v5;
  double v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v27;
  unsigned int v28;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v40;
  THandlerStreamingBuffers *v41;
  THandlerStreamingBuffers *v42;
  uint64_t v44;
  double *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v54;
  unsigned int v55;
  THandlerStreamingBuffers *v59;
  char v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  BOOL v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  THandlerStreamingBuffers *v72;
  THandlerStreamingBuffers *v73;
  THandlerStreamingBuffers *v74;
  int v75;
  THandlerStreamingBuffers *v76;
  THandlerStreamingBuffers *v77;
  THandlerStreamingBuffers *v78;
  int v79;
  THandlerStreamingBuffers *v80;
  uint64_t v81;
  uint64_t v82;
  THandlerStreamingBuffers *v83;
  THandlerStreamingBuffers **v84;
  THandlerStreamingBuffers *v85;
  THandlerStreamingBuffers *v86;
  THandlerStreamingBuffers *v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v3 = a1[6];
  switch(*(_DWORD *)a2)
  {
    case 0:
      v4 = *(THandlerStreamingBuffers **)(v3 + 24);
      v5 = *(_QWORD *)(a1[4] + 8);
      v7 = *(double *)(v5 + 40);
      v6 = *(double *)(v5 + 48);
      v8 = *(double **)(a2 + 8);
      v9 = *v8;
      v10 = v8[1];
      if (v6 == v10)
      {
        v89 = llround(v9 - v7);
        THandlerCharStringBuffer::WriteNumbers(v4, &v89, (unsigned __int8 *)1);
        v11 = 22;
      }
      else if (v7 == v9)
      {
        v89 = llround(v10 - v6);
        THandlerCharStringBuffer::WriteNumbers(v4, &v89, (unsigned __int8 *)1);
        v11 = 4;
      }
      else
      {
        v89 = llround(v9 - v7);
        v90 = llround(v10 - v6);
        THandlerCharStringBuffer::WriteNumbers(v4, &v89, (unsigned __int8 *)2);
        v11 = 21;
      }
      LOBYTE(v89) = v11;
      THandlerStreamingBuffers::WriteBytes(v4, 1uLL, (unsigned __int8 *)&v89);
      v81 = *(_QWORD *)(a1[4] + 8);
      *(double *)(v81 + 40) = v9;
      *(double *)(v81 + 48) = v10;
      v82 = *(_QWORD *)(a1[5] + 8);
      if (!*(_BYTE *)(v82 + 56))
      {
        *(_OWORD *)(v82 + 40) = *(_OWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
        *(_BYTE *)(v82 + 56) = 1;
      }
      break;
    case 1:
      v12 = WriteDelta<(unsigned char)6,(unsigned char)7,(unsigned char)5>(*(THandlerStreamingBuffers **)(v3 + 24), *(double *)(*(_QWORD *)(a1[4] + 8) + 40), *(double *)(*(_QWORD *)(a1[4] + 8) + 48), **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8));
      v13 = *(_QWORD *)(a1[4] + 8);
      *(double *)(v13 + 40) = v12;
      *(_QWORD *)(v13 + 48) = v14;
      break;
    case 2:
      v15 = *(_QWORD *)(a1[4] + 8);
      v16 = *(double *)(v15 + 48);
      v17 = *(double **)(a2 + 8);
      v18 = v17[2];
      v19 = v17[3];
      v20 = llround(*(double *)(v15 + 40));
      v21 = llround(v16);
      v22 = llround(*v17);
      v23 = llround(v18);
      v24 = llround(v19);
      v25 = v22 - v20;
      if (v22 == v20 && v23 == v22)
      {
        v74 = *(THandlerStreamingBuffers **)(v3 + 24);
        v84 = (THandlerStreamingBuffers **)(v3 + 24);
        v73 = v74;
        v75 = v24 - v21;
        goto LABEL_58;
      }
      v27 = llround(v17[1]);
      v28 = v27 - v21;
      if (v27 == v21 && v24 == v27)
      {
        v78 = *(THandlerStreamingBuffers **)(v3 + 24);
        v84 = (THandlerStreamingBuffers **)(v3 + 24);
        v77 = v78;
        v79 = v23 - v20;
        goto LABEL_63;
      }
      v30 = 2 * v25;
      v31 = (int)((2 * v25) | 1) / 3;
      v32 = v31 + v20;
      v33 = (int)((2 * v28) | 1) / 3 + v21;
      v34 = v23 - v22;
      v35 = (int)((2 * (v23 - v22)) | 1) / 3;
      v36 = v23 - v35;
      v37 = 2 * (v24 - v27);
      v38 = v24 - (v37 | 1) / 3;
      if ((v30 + 3) <= 4 && (v37 + 3) <= 4)
      {
        v85 = *(THandlerStreamingBuffers **)(v3 + 24);
        v84 = (THandlerStreamingBuffers **)(v3 + 24);
        v83 = v85;
        v89 = (int)((2 * v28) | 1) / 3;
        v90 = v36 - v32;
        v91 = v38 - v33;
        v92 = v35;
        goto LABEL_68;
      }
      v40 = 2 * v34 + 3;
      v42 = *(THandlerStreamingBuffers **)(v3 + 24);
      v84 = (THandlerStreamingBuffers **)(v3 + 24);
      v41 = v42;
      if (2 * v28 + 3 <= 4 && v40 <= 4)
      {
        v89 = v31;
        v90 = v36 - v32;
        v91 = v38 - v33;
        v92 = (v37 | 1) / 3;
        goto LABEL_70;
      }
      v89 = v31;
      v90 = (int)((2 * v28) | 1) / 3;
      v91 = v36 - v32;
      v92 = v38 - v33;
      v93 = v35;
      v94 = (v37 | 1) / 3;
      goto LABEL_47;
    case 3:
      v44 = *(_QWORD *)(a1[4] + 8);
      v45 = *(double **)(a2 + 8);
      v18 = v45[4];
      v19 = v45[5];
      v46 = llround(*(double *)(v44 + 40));
      v47 = llround(*(double *)(v44 + 48));
      v48 = llround(*v45);
      v49 = llround(v45[2]);
      v50 = llround(v18);
      v51 = llround(v19);
      if (v48 == v46 && v49 == v48 && v50 == v49)
      {
        v76 = *(THandlerStreamingBuffers **)(v3 + 24);
        v84 = (THandlerStreamingBuffers **)(v3 + 24);
        v73 = v76;
        v75 = v51 - v47;
LABEL_58:
        v89 = v75;
        THandlerCharStringBuffer::WriteNumbers(v73, &v89, (unsigned __int8 *)1);
        v61 = 7;
      }
      else
      {
        v54 = llround(v45[1]);
        v55 = llround(v45[3]);
        if (v54 == v47 && v55 == v54 && v51 == v55)
        {
          v80 = *(THandlerStreamingBuffers **)(v3 + 24);
          v84 = (THandlerStreamingBuffers **)(v3 + 24);
          v77 = v80;
          v79 = v50 - v46;
LABEL_63:
          v89 = v79;
          THandlerCharStringBuffer::WriteNumbers(v77, &v89, (unsigned __int8 *)1);
          v61 = 6;
        }
        else if (v48 == v46 && v51 == v55)
        {
          v86 = *(THandlerStreamingBuffers **)(v3 + 24);
          v84 = (THandlerStreamingBuffers **)(v3 + 24);
          v83 = v86;
          v89 = v54 - v47;
          v90 = v49 - v46;
          v91 = v55 - v54;
          v92 = v50 - v49;
LABEL_68:
          THandlerCharStringBuffer::WriteNumbers(v83, &v89, (unsigned __int8 *)4);
          v61 = 30;
        }
        else
        {
          v59 = *(THandlerStreamingBuffers **)(v3 + 24);
          v84 = (THandlerStreamingBuffers **)(v3 + 24);
          v41 = v59;
          if (v54 == v47 && v50 == v49)
          {
            v89 = v48 - v46;
            v90 = v49 - v48;
            v91 = v55 - v47;
            v92 = v51 - v55;
LABEL_70:
            THandlerCharStringBuffer::WriteNumbers(v41, &v89, (unsigned __int8 *)4);
            v61 = 31;
          }
          else
          {
            v89 = v48 - v46;
            v90 = v54 - v47;
            v91 = v49 - v48;
            v92 = v55 - v54;
            v93 = v50 - v49;
            v94 = v51 - v55;
LABEL_47:
            THandlerCharStringBuffer::WriteNumbers(v41, &v89, (unsigned __int8 *)6);
            v61 = 8;
          }
        }
      }
      v87 = *v84;
      LOBYTE(v89) = v61;
      THandlerStreamingBuffers::WriteBytes(v87, 1uLL, (unsigned __int8 *)&v89);
      v88 = *(_QWORD *)(a1[4] + 8);
      *(double *)(v88 + 40) = v18;
      *(double *)(v88 + 48) = v19;
      break;
    case 4:
      v62 = *(_QWORD *)(a1[5] + 8);
      if (*(_BYTE *)(v62 + 56))
      {
        v63 = *(double *)(v62 + 40);
        v64 = *(double *)(v62 + 48);
        v65 = *(_QWORD *)(a1[4] + 8);
        v66 = *(double *)(v65 + 40);
        v67 = *(double *)(v65 + 48);
        v68 = v63 == v66 && v64 == v67;
        if (v68
          || (v69 = WriteDelta<(unsigned char)6,(unsigned char)7,(unsigned char)5>(*(THandlerStreamingBuffers **)(v3 + 24), v66, v67, v63, v64), v70 = *(_QWORD *)(a1[4] + 8), *(double *)(v70 + 40) = v69, *(_QWORD *)(v70 + 48) = v71, v62 = *(_QWORD *)(a1[5] + 8), *(_BYTE *)(v62 + 56)))
        {
          *(_BYTE *)(v62 + 56) = 0;
        }
      }
      v72 = *(THandlerStreamingBuffers **)(v3 + 24);
      LOBYTE(v89) = 9;
      THandlerStreamingBuffers::WriteBytes(v72, 1uLL, (unsigned __int8 *)&v89);
      break;
    default:
      return;
  }
}

void TType1StreamingContext::~TType1StreamingContext(TType1StreamingContext *this)
{
  THandlerStreamingContext::~THandlerStreamingContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TType1StreamingContext::StreamEncoding(THandlerStreamingContext *this, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t i;
  unint64_t v7;
  unsigned __int16 v9[256];

  v3 = *(_QWORD *)(*((_QWORD *)this + 70) + 8);
  v4 = *(_QWORD *)(v3 + 88);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 96);
    memcpy(v9, a2, sizeof(v9));
    for (i = 0; i != 29; ++i)
    {
      v7 = kComponentCodes[i];
      if ((__int16)v9[v7] == -1 && v5 > v7)
        v9[v7] = *(_WORD *)(v4 + 2 * v7);
    }
    THandlerStreamingContext::StreamEncodingData(this, v9);
  }
  else
  {
    THandlerStreamingContext::StreamEncodingData(this, (const unsigned __int16 *)a2);
  }
}

double WriteDelta<(unsigned char)6,(unsigned char)7,(unsigned char)5>(THandlerStreamingBuffers *a1, double a2, double a3, double a4, double a5)
{
  char v7;
  int v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a3 == a5)
  {
    v9[0] = llround(a4 - a2);
    THandlerCharStringBuffer::WriteNumbers(a1, v9, (unsigned __int8 *)1);
    v7 = 6;
  }
  else if (a2 == a4)
  {
    v9[0] = llround(a5 - a3);
    THandlerCharStringBuffer::WriteNumbers(a1, v9, (unsigned __int8 *)1);
    v7 = 7;
  }
  else
  {
    v9[0] = llround(a4 - a2);
    v9[1] = llround(a5 - a3);
    THandlerCharStringBuffer::WriteNumbers(a1, v9, (unsigned __int8 *)2);
    v7 = 5;
  }
  LOBYTE(v9[0]) = v7;
  THandlerStreamingBuffers::WriteBytes(a1, 1uLL, (unsigned __int8 *)v9);
  return a4;
}

void TType2InterpreterContext::~TType2InterpreterContext(TType2InterpreterContext *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E61CBAD0;
  *((_QWORD *)this + 393) = &off_1E6176770;
  TDataReference::DucRefCount((TType2InterpreterContext *)((char *)this + 3144));
  *((_QWORD *)this + 389) = &off_1E6176770;
  TDataReference::DucRefCount((TType2InterpreterContext *)((char *)this + 3112));
  *(_QWORD *)this = &off_1E61CB270;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    MEMORY[0x1B5E0CD14](v2, 0x1000C8052888210);
}

{
  TType2InterpreterContext::~TType2InterpreterContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TType2CFFInterpreterContext::~TType2CFFInterpreterContext(TType2CFFInterpreterContext *this)
{
  TType2InterpreterContext::~TType2InterpreterContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TType2CFF2InterpreterContext::~TType2CFF2InterpreterContext(TType2CFF2InterpreterContext *this)
{
  TType2InterpreterContext::~TType2InterpreterContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TType2CIDInterpreterContext::~TType2CIDInterpreterContext(TType2CIDInterpreterContext *this)
{
  TType2InterpreterContext::~TType2InterpreterContext(this);
  JUMPOUT(0x1B5E0CD38);
}

void TType1FontType2CharStringHandler::~TType1FontType2CharStringHandler(TType1FontType2CharStringHandler *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TType1FontType2CharStringHandler::ParseOutline(TType1FontType2CharStringHandler *this, unsigned int a2, TType1RenderingContext *a3)
{
  TType1FontHandler::ParseOutline(this, a2, a3);
  *((_DWORD *)a3 + 8) = *(_DWORD *)(*((_QWORD *)a3 + 13) + 3108);
}

void TType1FontType2CharStringHandler::GetOutlinePath(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v6;
  unsigned int v7;
  int64x2_t v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  void (**v17)(TType1CubicOutlineContext *__hidden);
  void (**v18)(TVector *__hidden);
  uint64_t v19;
  void (**v20)(TVector *__hidden);
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  void (**v24)(TVector *__hidden);
  uint64_t v25;
  void (**v26)(TVector *__hidden);
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  __int128 *v31;
  _BYTE __b[3272];

  memset(__b, 170, sizeof(__b));
  TType2CFFInterpreterContext::TType2CFFInterpreterContext((TType2CFFInterpreterContext *)__b, *(const TOpenTypeFont **)(a1 + 8));
  v6 = *(_QWORD **)(a1 + 16);
  if (v6)
  {
    v12 = xmmword_1B0AAD6D0;
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
    *(_QWORD *)&v12 = &off_1E61CB220;
    v13 = a3;
    v8.i64[0] = (int)*v6;
    v8.i64[1] = (int)HIDWORD(*v6);
    v9 = (float64x2_t)vdupq_n_s64(0x3E10000000000000uLL);
    v14 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v8), v9), (double)v7);
    v10 = v6[1];
    v8.i64[0] = (int)v10;
    v8.i64[1] = SHIDWORD(v10);
    v15 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v8), v9), (double)v7);
    v11 = v6[2];
    v8.i64[0] = (int)v11;
    v8.i64[1] = SHIDWORD(v11);
    v16 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v8), v9), (double)v7);
    v23 = 0xAAAAAAAAAAAAAA00;
    v28 = 0xAAAAAAAAAAAAAAAALL;
    v19 = 0;
    v20 = &off_1E61CB3A0;
    v21 = xmmword_1B0AAD370;
    v22 = 0x8000000080000000;
    v25 = 0;
    v24 = &off_1E61CB3A0;
    v27 = 0;
    v26 = &off_1E61CB3A0;
    v29 = __b;
    v30 = 0;
    v17 = &off_1E61CB298;
    v18 = &off_1E61CB3A0;
    v31 = &v12;
    TType1GlyphOutlineBatch::NewPath((TType1GlyphOutlineBatch *)&v12);
    LOBYTE(v28) = 1;
    (*(void (**)(uint64_t, uint64_t, void (***)(TType1CubicOutlineContext *__hidden)))(*(_QWORD *)a1 + 128))(a1, a2, &v17);
    (*(void (**)(__int128 *))(*(_QWORD *)v31 + 40))(v31);
  }
  else
  {
    v23 = 0xAAAAAAAAAAAAAA00;
    v28 = 0xAAAAAAAAAAAAAAAALL;
    v19 = 0;
    v20 = &off_1E61CB3A0;
    v21 = xmmword_1B0AAD370;
    v22 = 0x8000000080000000;
    v25 = 0;
    v24 = &off_1E61CB3A0;
    v27 = 0;
    v26 = &off_1E61CB3A0;
    v29 = __b;
    v30 = 0;
    v17 = &off_1E61CB298;
    v18 = &off_1E61CB3A0;
    v31 = a3;
    (**(void (***)(__int128 *, uint64_t))a3)(a3, a2);
    LOBYTE(v28) = 1;
    (*(void (**)(uint64_t, uint64_t, void (***)(TType1CubicOutlineContext *__hidden)))(*(_QWORD *)a1 + 128))(a1, a2, &v17);
    (*(void (**)(__int128 *))(*(_QWORD *)v31 + 40))(v31);
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
}

void sub_1B0A10720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)&a34);
  _Unwind_Resume(a1);
}

void TType1FontType2CharStringHandler::GetHorizontalAdvances(const TOpenTypeFont **this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE __b[3272];

  memset(__b, 170, sizeof(__b));
  TType2CFFInterpreterContext::TType2CFFInterpreterContext((TType2CFFInterpreterContext *)__b, this[1]);
  if (a4)
  {
    v8 = 0;
    v9 = 8 * a4;
    do
    {
      *a3++ = (*((double (**)(const TOpenTypeFont **, _BYTE *, _QWORD, _QWORD, _QWORD))*this + 18))(this, __b, a2[v8++], 0, 0);
      v9 -= 8;
    }
    while (a4 != v8);
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
}

uint64_t TType1FontType2CharStringHandler::GetRawMetrics(const TOpenTypeFont **this, uint64_t a2, double *a3, double *a4, uint64_t a5)
{
  _BYTE __b[3272];

  memset(__b, 170, sizeof(__b));
  TType2CFFInterpreterContext::TType2CFFInterpreterContext((TType2CFFInterpreterContext *)__b, this[1]);
  *a3 = (*((double (**)(const TOpenTypeFont **, _BYTE *, uint64_t, double *, uint64_t))*this + 18))(this, __b, a2, a4, a5);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
  return 1;
}

void sub_1B0A1089C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)va);
  _Unwind_Resume(a1);
}

uint64_t TType1FontType2CharStringHandler::GetBounds(TType1FontType2CharStringHandler *this, unsigned int a2, double *a3, double *a4, double *a5, double *a6)
{
  return 0;
}

BOOL TType1FontType2CharStringHandler::GetHorizontalToVerticalTranslate(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  const TOpenTypeFont *v6;
  uint64_t v7;
  __int128 v9;
  _BYTE __b[3272];

  v6 = (const TOpenTypeFont *)a1[1];
  v7 = (*(uint64_t (**)(const TOpenTypeFont *))(*(_QWORD *)v6 + 432))(v6);
  if (!v7)
  {
    memset(__b, 170, sizeof(__b));
    TType2CFFInterpreterContext::TType2CFFInterpreterContext((TType2CFFInterpreterContext *)__b, v6);
    (*(void (**)(__int128 *__return_ptr, _QWORD *, _BYTE *, uint64_t))(*a1 + 160))(&v9, a1, __b, a2);
    *a3 = v9;
    TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
  }
  return v7 == 0;
}

void sub_1B0A10960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)va);
  _Unwind_Resume(a1);
}

void std::vector<short,TInlineBufferAllocator<short,30ul>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;
  char *v20;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  v8 = (unint64_t)(a1 + 3);
  v9 = v7 - v3;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  if (v9 >= 0x7FFFFFFFFFFFFFFELL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(a1 + 3), v11);
  v13 = *a1;
  v14 = a1[1];
  v15 = &v12[2 * v5];
  v16 = &v12[2 * v11];
  bzero(v15, 2 * v6);
  v17 = &v15[2 * v6];
  while (v14 != v13)
  {
    v18 = *((_WORD *)v14 - 1);
    v14 -= 2;
    *((_WORD *)v15 - 1) = v18;
    v15 -= 2;
  }
  *a1 = v15;
  a1[1] = v17;
  v20 = a1[2];
  a1[2] = v16;
  if (v13)
  {
    if (v8 > (unint64_t)v13 || (char *)a1 + 84 <= v13)
    {
      operator delete(v13);
    }
    else if (v20 == a1[11])
    {
      a1[11] = v13;
    }
  }
}

void TType1FontType2CFF2CharStringHandler::~TType1FontType2CFF2CharStringHandler(TType1FontType2CFF2CharStringHandler *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &off_1E61CBAF8;
  v1 = (void **)((char *)this + 32);
  v2 = (void **)((char *)this + 128);
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](&v2);
  v2 = v1;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = &off_1E61CBAF8;
  v1 = (void **)((char *)this + 32);
  v2 = (void **)((char *)this + 128);
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](&v2);
  v2 = v1;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](&v2);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TType1FontType2CFF2CharStringHandler::GetRawMetrics(TType1FontType2CFF2CharStringHandler *this, unsigned int a2, double *a3, double *a4)
{
  *a3 = 0.0;
  return 0;
}

void TType1FontType2CFF2CharStringHandler::GetHorizontalAdvances(TType1FontType2CFF2CharStringHandler *this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  const TOpenTypeFont *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[410];

  memset(v11, 170, sizeof(v11));
  v8 = (const TOpenTypeFont *)*((_QWORD *)this + 1);
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)v11, v8, 1);
  v11[0] = &off_1E61CBDA8;
  v11[409] = v8;
  if (a4)
  {
    v9 = 0;
    v10 = 8 * a4;
    do
    {
      TType2CFF2InterpreterContext::SetFontDict((TType2CFF2InterpreterContext *)v11, a2[v9]);
      *a3++ = (*(double (**)(TType1FontType2CFF2CharStringHandler *, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 144))(this, v11, a2[v9++], 0, 0);
      v10 -= 8;
    }
    while (a4 != v9);
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)v11);
}

uint64_t TType2CFF2InterpreterContext::SetFontDict(TType2CFF2InterpreterContext *this, unsigned int a2)
{
  unsigned int FDIndexCFF2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  FDIndexCFF2 = TSFNTOpenTypeCFF2Font::GetFDIndexCFF2(*((TSFNTOpenTypeCFF2Font **)this + 409), a2);
  result = TSFNTOpenTypeCFF2Font::GetLocalSubrOffsetsAndData(*((TSFNTOpenTypeCFF2Font **)this + 409), FDIndexCFF2, (unsigned __int16 *)this + 80, (unsigned __int16 *)this + 81, (unsigned __int16 *)this + 1588, (TType2CFF2InterpreterContext *)((char *)this + 3112), (TType2CFF2InterpreterContext *)((char *)this + 3144));
  *((_QWORD *)this + 23) = result;
  v5 = *((_QWORD *)this + 390);
  if (v5)
  {
    v5 = *(_QWORD *)(v5 + 8);
    if (v5)
      v5 += *((_QWORD *)this + 391);
  }
  *((_QWORD *)this + 21) = v5;
  v6 = *((_QWORD *)this + 394);
  if (v6)
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (v6)
      v6 += *((_QWORD *)this + 395);
  }
  *((_QWORD *)this + 22) = v6;
  v7 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 409) + 608) + 488 * FDIndexCFF2 + 484);
  *((_WORD *)this + 1604) = v7;
  *((_WORD *)this + 1605) = v7;
  return result;
}

void TType1FontType2CFF2CharStringHandler::GetOutlinePath(_QWORD *a1, uint64_t a2, void (***a3)(_QWORD, uint64_t), _BYTE *a4)
{
  const TOpenTypeFont *v8;
  _QWORD v9[4];
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  void (**v13)(TVector *__hidden);
  uint64_t v14;
  void (**v15)(TVector *__hidden);
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (***v20)(_QWORD, _QWORD);
  _QWORD __b[410];

  memset(__b, 170, sizeof(__b));
  v8 = (const TOpenTypeFont *)a1[1];
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)__b, v8, 1);
  __b[0] = &off_1E61CBDA8;
  __b[409] = v8;
  TType2CFF2InterpreterContext::SetFontDict((TType2CFF2InterpreterContext *)__b, a2);
  v12 = 0xAAAAAAAAAAAAAA00;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v9[2] = 0;
  v9[3] = &off_1E61CB3A0;
  v10 = xmmword_1B0AAD370;
  v11 = 0x8000000080000000;
  v14 = 0;
  v13 = &off_1E61CB3A0;
  v16 = 0;
  v15 = &off_1E61CB3A0;
  v18 = __b;
  v19 = 0;
  v9[0] = &off_1E61CB298;
  v9[1] = &off_1E61CB3A0;
  v20 = a3;
  (**a3)(a3, a2);
  LOBYTE(v17) = 1;
  (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v9);
  ((void (*)(void (***)(_QWORD, _QWORD)))(*v20)[5])(v20);
  if (a4 && a1[4] != a1[5])
    *a4 = 1;
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
}

void sub_1B0A10E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)va);
  _Unwind_Resume(a1);
}

void TType1FontType2CIDCharStringHandler::~TType1FontType2CIDCharStringHandler(TType1FontType2CIDCharStringHandler *this)
{
  JUMPOUT(0x1B5E0CD38);
}

void TType1FontType2CIDCharStringHandler::GetOutlinePath(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  const TOpenTypeFont *v6;
  __n128 v7;
  int *v8;
  BOOL v9;
  BOOL v10;
  double v11;
  int *v12;
  int64x2_t v13;
  float64x2_t v14;
  _QWORD v15[3];
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  void (**v19)(TType1CubicOutlineContext *__hidden);
  void (**v20)(TVector *__hidden);
  uint64_t v21;
  void (**v22)(TVector *__hidden);
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  void (**v26)(TVector *__hidden);
  uint64_t v27;
  void (**v28)(TVector *__hidden);
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD __b[410];

  memset(__b, 170, sizeof(__b));
  v6 = (const TOpenTypeFont *)a1[1];
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)__b, v6, 0);
  __b[409] = v6;
  __b[0] = &off_1E61CBDE8;
  memset(v34, 170, sizeof(v34));
  v7 = TType2CIDInterpreterContext::SetFontDict((TType2CIDInterpreterContext *)__b, a2, (TFractMatrix *)v34);
  v8 = (int *)a1[2];
  if (v8
    || ((LODWORD(v34[0]) - 1073741) <= 1 ? (v9 = HIDWORD(v34[0]) == 0) : (v9 = 0),
        v9 ? (v10 = LODWORD(v34[1]) == 0) : (v10 = 0),
        !v10 || (HIDWORD(v34[1]) - 1073741) > 1 || v34[2]))
  {
    v11 = (double)(*(unsigned int (**)(_QWORD, __n128))(*(_QWORD *)a1[1] + 72))(a1[1], v7);
    v12 = (int *)v34;
    if (a1[2])
      v12 = v8;
    else
      v11 = 1.0;
    v15[1] = 0xAAAAAAAAAAAAAAAALL;
    v15[0] = &off_1E61CB220;
    v15[2] = a3;
    v13.i64[0] = *v12;
    v13.i64[1] = v12[1];
    v14 = (float64x2_t)vdupq_n_s64(0x3E10000000000000uLL);
    v16 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v13), v14), v11);
    v13.i64[0] = v12[2];
    v13.i64[1] = v12[3];
    v17 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v13), v14), v11);
    v13.i64[0] = v12[4];
    v13.i64[1] = v12[5];
    v18 = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v13), v14), v11);
    v25 = 0xAAAAAAAAAAAAAA00;
    v30 = 0xAAAAAAAAAAAAAAAALL;
    v21 = 0;
    v22 = &off_1E61CB3A0;
    v23 = xmmword_1B0AAD370;
    v24 = 0x8000000080000000;
    v27 = 0;
    v26 = &off_1E61CB3A0;
    v29 = 0;
    v28 = &off_1E61CB3A0;
    v31 = __b;
    v32 = 0;
    v19 = &off_1E61CB298;
    v20 = &off_1E61CB3A0;
    v33 = v15;
    TType1GlyphOutlineBatch::NewPath((TType1GlyphOutlineBatch *)v15);
    LOBYTE(v30) = 1;
    (*(void (**)(_QWORD *, uint64_t, void (***)(TType1CubicOutlineContext *__hidden)))(*a1 + 128))(a1, a2, &v19);
    (*(void (**)(_QWORD *))(*v33 + 40))(v33);
  }
  else
  {
    v25 = 0xAAAAAAAAAAAAAA00;
    v30 = 0xAAAAAAAAAAAAAAAALL;
    v21 = 0;
    v22 = &off_1E61CB3A0;
    v23 = xmmword_1B0AAD370;
    v24 = 0x8000000080000000;
    v27 = 0;
    v26 = &off_1E61CB3A0;
    v29 = 0;
    v28 = &off_1E61CB3A0;
    v31 = __b;
    v32 = 0;
    v19 = &off_1E61CB298;
    v20 = &off_1E61CB3A0;
    v33 = a3;
    (*(void (**)(_QWORD *, uint64_t))*a3)(a3, a2);
    LOBYTE(v30) = 1;
    (*(void (**)(_QWORD *, uint64_t, void (***)(TType1CubicOutlineContext *__hidden)))(*a1 + 128))(a1, a2, &v19);
    (*(void (**)(_QWORD *))(*v33 + 40))(v33);
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
}

void sub_1B0A1116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)&a37);
  _Unwind_Resume(a1);
}

__n128 TType2CIDInterpreterContext::SetFontDict(TType2CIDInterpreterContext *this, unsigned __int16 a2, TFractMatrix *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t LocalParseData;
  __n128 result;

  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 409) + 552))(*((_QWORD *)this + 409));
  *((_QWORD *)this + 23) = TOpenTypeCIDFont::GetLocalSubrOffsetsAndData(*((TOpenTypeCIDFont **)this + 409), v5, (unsigned __int16 *)this + 80, (unsigned __int16 *)this + 81, (unsigned __int16 *)this + 1588, (TType2CIDInterpreterContext *)((char *)this + 3112), (TType2CIDInterpreterContext *)((char *)this + 3144));
  v6 = *((_QWORD *)this + 390);
  if (v6)
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (v6)
      v6 += *((_QWORD *)this + 391);
  }
  *((_QWORD *)this + 21) = v6;
  v7 = *((_QWORD *)this + 394);
  if (v7)
  {
    v7 = *(_QWORD *)(v7 + 8);
    if (v7)
      v7 += *((_QWORD *)this + 395);
  }
  *((_QWORD *)this + 22) = v7;
  LocalParseData = TOpenTypeCIDFont::GetLocalParseData(*((TOpenTypeCIDFont **)this + 409));
  *((_DWORD *)this + 775) = *(_DWORD *)(LocalParseData + 120);
  *((_DWORD *)this + 776) = *(_DWORD *)(LocalParseData + 440);
  if (a3)
  {
    result = *(__n128 *)(LocalParseData + 4);
    *((_QWORD *)a3 + 2) = *(_QWORD *)(LocalParseData + 20);
    *(__n128 *)a3 = result;
  }
  return result;
}

uint64_t TType1FontType2CIDCharStringHandler::GetRawMetrics(TType1FontType2CIDCharStringHandler *this, uint64_t a2, double *a3, double *a4, uint64_t a5)
{
  const TOpenTypeFont *v10;
  __n128 v11;
  _QWORD v13[410];

  memset(v13, 170, sizeof(v13));
  v10 = (const TOpenTypeFont *)*((_QWORD *)this + 1);
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)v13, v10, 0);
  v13[0] = &off_1E61CBDE8;
  v13[409] = v10;
  v11 = TType2CIDInterpreterContext::SetFontDict((TType2CIDInterpreterContext *)v13, a2, 0);
  *a3 = (*(double (**)(TType1FontType2CIDCharStringHandler *, _QWORD *, uint64_t, double *, uint64_t, __n128))(*(_QWORD *)this + 144))(this, v13, a2, a4, a5, v11);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)v13);
  return 1;
}

void sub_1B0A11314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)&a9);
  _Unwind_Resume(a1);
}

void TType1FontType2CIDCharStringHandler::GetHorizontalAdvances(TType1FontType2CIDCharStringHandler *this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  const TOpenTypeFont *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _QWORD v12[410];

  memset(v12, 170, sizeof(v12));
  v8 = (const TOpenTypeFont *)*((_QWORD *)this + 1);
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)v12, v8, 0);
  v12[0] = &off_1E61CBDE8;
  v12[409] = v8;
  if (a4)
  {
    v9 = 0;
    v10 = 8 * a4;
    do
    {
      v11 = TType2CIDInterpreterContext::SetFontDict((TType2CIDInterpreterContext *)v12, a2[v9], 0);
      *a3++ = (*(double (**)(TType1FontType2CIDCharStringHandler *, _QWORD *, _QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 144))(this, v12, a2[v9++], 0, 0, v11);
      v10 -= 8;
    }
    while (a4 != v9);
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)v12);
}

uint64_t TType1FontType2CIDCharStringHandler::GetBounds(TType1FontType2CIDCharStringHandler *this, unsigned int a2, double *a3, double *a4, double *a5, double *a6)
{
  return 0;
}

BOOL TType1FontType2CIDCharStringHandler::GetHorizontalToVerticalTranslate(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  const TOpenTypeFont *v6;
  uint64_t v7;
  __n128 v8;
  __int128 v10;
  _QWORD __b[410];

  v6 = (const TOpenTypeFont *)a1[1];
  v7 = (*(uint64_t (**)(const TOpenTypeFont *))(*(_QWORD *)v6 + 432))(v6);
  if (!v7)
  {
    memset(__b, 170, sizeof(__b));
    TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)__b, v6, 0);
    __b[0] = &off_1E61CBDE8;
    __b[409] = v6;
    v8 = TType2CIDInterpreterContext::SetFontDict((TType2CIDInterpreterContext *)__b, a2, 0);
    (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD *, uint64_t, __n128))(*a1 + 160))(&v10, a1, __b, a2, v8);
    *a3 = v10;
    TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
  }
  return v7 == 0;
}

void sub_1B0A114F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)va);
  _Unwind_Resume(a1);
}

void TType1FontType2CharStringHandler::throwUnimplemented(TType1FontType2CharStringHandler *this, const unsigned __int8 *a2)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E6176998;
  exception[2] = -24;
}

uint64_t TType1FontType2CharStringHandler::GetStandardEncodingGlyphID(TType1FontType2CharStringHandler *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v2 = *((_QWORD *)this + 37);
  if (!v2)
    goto LABEL_8;
  v3 = *(unsigned __int16 *)(v2 + 2 * (unsigned __int16)FPGetStandardEncodingSID(unsigned char)::gStdSIDs[a2]);
  v4 = (*(uint64_t (**)(TType1FontType2CharStringHandler *))(*(_QWORD *)this + 168))(this);
  if (v4 >= 0xFFFF)
    v5 = 0xFFFF;
  else
    v5 = v4;
  if (v3 >= v5)
  {
    LODWORD(v2) = 0;
LABEL_8:
    v6 = 0;
    v7 = 0;
    return v6 | v2 | v7;
  }
  v6 = v3 & 0xFF00;
  LODWORD(v2) = v3;
  v7 = 0x10000;
  return v6 | v2 | v7;
}

void TType1FontType2CharStringHandler::ProcessSEAC(TType1FontType2CharStringHandler **this, unsigned int a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, TType1RenderingContext *a6)
{
  unsigned int StandardEncodingGlyphID;
  unsigned __int16 v12;
  unsigned int v13;
  unint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *exception;
  void *v19[8];

  StandardEncodingGlyphID = TType1FontType2CharStringHandler::GetStandardEncodingGlyphID(this[1], a4);
  if (StandardEncodingGlyphID < 0x10000
    || (v12 = StandardEncodingGlyphID,
        v13 = TType1FontType2CharStringHandler::GetStandardEncodingGlyphID(this[1], a5),
        v13 < 0x10000)
    || (v14 = *((_QWORD *)a6 + 14) + 1, *((_QWORD *)a6 + 14) = v14, v14 > 0x3F))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = -21;
  }
  v15 = v13;
  (*(void (**)(void **__return_ptr, TType1FontType2CharStringHandler *, _QWORD))(*(_QWORD *)this[1] + 488))(v19, this[1], v12);
  (*((void (**)(TType1FontType2CharStringHandler **, void **, TType1RenderingContext *))*this + 17))(this, v19, a6);
  TCharString::~TCharString(v19);
  v16 = *((_QWORD *)a6 + 2);
  v17 = *((_QWORD *)a6 + 4);
  *((_QWORD *)a6 + 2) = 0;
  *((_QWORD *)a6 + 9) = a2 | (unint64_t)(a3 << 32);
  (*(void (**)(void **__return_ptr, TType1FontType2CharStringHandler *, _QWORD))(*(_QWORD *)this[1] + 488))(v19, this[1], v15);
  (*((void (**)(TType1FontType2CharStringHandler **, void **, TType1RenderingContext *))*this + 17))(this, v19, a6);
  TCharString::~TCharString(v19);
  *((_QWORD *)a6 + 2) = v16;
  *((_QWORD *)a6 + 4) = v17;
  *((_QWORD *)a6 + 9) = 0;
}

void sub_1B0A11714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  TCharString::~TCharString(&a9);
  _Unwind_Resume(a1);
}

uint64_t TType1RenderingContext::xySetY2CurveTo(TType1RenderingContext *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, TVector *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];

  (*(void (**)(TVector *))(*(_QWORD *)a8 + 16))(a8);
  v15 = *(_QWORD *)a8;
  v14 = *((_QWORD *)a8 + 1);
  v20[0] = &off_1E61CB3A0;
  v20[1] = v14;
  (*(void (**)(TVector *, uint64_t, uint64_t))(v15 + 16))(a8, a4, a5);
  v17 = *(_QWORD *)a8;
  v16 = *((_QWORD *)a8 + 1);
  v19[0] = &off_1E61CB3A0;
  v19[1] = v16;
  (*(void (**)(TVector *, uint64_t))(v17 + 24))(a8, a6);
  *((_DWORD *)a8 + 3) = a7;
  return (*(uint64_t (**)(TType1RenderingContext *, _QWORD *, _QWORD *, TVector *))(*(_QWORD *)this + 16))(this, v20, v19, a8);
}

uint64_t TType1RenderingContext::xxSetY1CurveTo(TType1RenderingContext *this, int a2, uint64_t a3, int a4, uint64_t a5, TVector *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];

  (*(void (**)(TVector *))(*(_QWORD *)a6 + 24))(a6);
  v12 = *(_QWORD *)a6;
  v11 = *((_QWORD *)a6 + 1);
  v17[0] = &off_1E61CB3A0;
  v17[1] = v11;
  (*(void (**)(TVector *, uint64_t))(v12 + 24))(a6, a3);
  *((_DWORD *)a6 + 3) = a4;
  v14 = *(_QWORD *)a6;
  v13 = *((_QWORD *)a6 + 1);
  v16[0] = &off_1E61CB3A0;
  v16[1] = v13;
  (*(void (**)(TVector *, uint64_t))(v14 + 24))(a6, a5);
  return (*(uint64_t (**)(TType1RenderingContext *, _QWORD *, _QWORD *, TVector *))(*(_QWORD *)this + 16))(this, v17, v16, a6);
}

uint64_t TType1RenderingContext::xySetX2CurveTo(TType1RenderingContext *this, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, TVector *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];

  (*(void (**)(TVector *))(*(_QWORD *)a8 + 16))(a8);
  v15 = *(_QWORD *)a8;
  v14 = *((_QWORD *)a8 + 1);
  v20[0] = &off_1E61CB3A0;
  v20[1] = v14;
  (*(void (**)(TVector *, uint64_t, uint64_t))(v15 + 16))(a8, a4, a5);
  v17 = *(_QWORD *)a8;
  v16 = *((_QWORD *)a8 + 1);
  v19[0] = &off_1E61CB3A0;
  v19[1] = v16;
  *((_DWORD *)a8 + 2) = a6;
  (*(void (**)(TVector *, uint64_t))(v17 + 32))(a8, a7);
  return (*(uint64_t (**)(TType1RenderingContext *, _QWORD *, _QWORD *, TVector *))(*(_QWORD *)this + 16))(this, v20, v19, a8);
}

uint64_t TOpenTypeFont::MakeHandler(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E61CB2E8;
  *(_QWORD *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 24) = 0;
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
  {
    *(_DWORD *)(v2 + 24) = *(_DWORD *)(v4 + 52);
    v5 = v4 + 4;
    if (TFractMatrix::IsIdentity((TFractMatrix *)(v4 + 4)))
      v6 = 0;
    else
      v6 = v5;
    *(_QWORD *)(v3 + 16) = v6;
  }
  *(_QWORD *)v3 = &off_1E61CBBB0;
  *(_BYTE *)(v3 + 28) = 0;
  return v3;
}

void sub_1B0A119DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10E1C4016C4A6AELL);
  _Unwind_Resume(a1);
}

uint64_t TOpenTypeCIDFont::MakeHandler(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E61CB2E8;
  *(_QWORD *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 24) = 0;
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
  {
    *(_DWORD *)(v2 + 24) = *(_DWORD *)(v4 + 52);
    v5 = v4 + 4;
    if (TFractMatrix::IsIdentity((TFractMatrix *)(v4 + 4)))
      v6 = 0;
    else
      v6 = v5;
    *(_QWORD *)(v3 + 16) = v6;
  }
  *(_BYTE *)(v3 + 28) = 0;
  *(_QWORD *)v3 = &off_1E61CBC80;
  return v3;
}

void sub_1B0A11A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10E1C4016C4A6AELL);
  _Unwind_Resume(a1);
}

uint64_t TSFNTOpenTypeCFF2Font::MakeHandler(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __int16 *v32;
  unint64_t v33;
  uint64_t v34;
  char *v36;
  char **v37;
  void **v38[2];
  char *v39;
  void *__dst;
  uint64_t v41;
  _OWORD v42[4];
  _OWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = off_1E61CB2E8;
  *(_QWORD *)(v4 + 8) = a1;
  *(_DWORD *)(v4 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 128);
  if (v6)
  {
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 52);
    v7 = v6 + 4;
    if (TFractMatrix::IsIdentity((TFractMatrix *)(v6 + 4)))
      v8 = 0;
    else
      v8 = v7;
    *(_QWORD *)(v5 + 16) = v8;
  }
  *(_BYTE *)(v5 + 28) = 1;
  *(_QWORD *)v5 = &off_1E61CBAF8;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 120) = v5 + 56;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 392) = v5 + 152;
  if (*a2 && a2[1])
  {
    std::vector<short,TInlineBufferAllocator<short,30ul>>::resize((char **)(v5 + 32), *a2);
    (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 408))(a1, *a2, a2[1], *(_QWORD *)(v5 + 32));
  }
  v9 = *(_QWORD *)(a1 + 232);
  if (v9)
  {
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v42[2] = v10;
    v42[3] = v10;
    v42[0] = v10;
    v42[1] = v10;
    v12 = *(_BYTE **)(v5 + 32);
    v11 = *(_BYTE **)(v5 + 40);
    __dst = 0;
    v41 = 0;
    v43 = v42;
    v38[1] = (void **)0xAAAAAAAAAAAAAA00;
    v39 = 0;
    v38[0] = (void **)&v39;
    v13 = v11 - v12;
    if (v11 != v12)
    {
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:fe180100](&v39, v13 >> 1);
      v14 = (char *)__dst;
      memmove(__dst, v12, v13);
      __dst = &v14[2 * (v13 >> 1)];
      v9 = *(_QWORD *)(a1 + 232);
    }
    std::vector<short,TInlineBufferAllocator<short,30ul>>::resize(&v39, bswap32(*(unsigned __int16 *)(v9 + bswap32(*(_DWORD *)(v9 + 2)))) >> 16);
    v15 = *(_QWORD *)(a1 + 248);
    v16 = *(_QWORD *)(v5 + 128);
    v17 = *(_QWORD *)(v5 + 136);
    v18 = (v17 - v16) >> 3;
    if (v15 <= v18)
    {
      if (v15 >= v18)
      {
LABEL_27:
        if (*(_QWORD *)(a1 + 248))
        {
          v31 = 0;
          v32 = (const __int16 *)v39;
          v33 = ((_BYTE *)__dst - v39) >> 1;
          v34 = *(_QWORD *)(v5 + 128);
          do
          {
            *(double *)(v34 + 8 * v31) = ItemVariationStore::VariationRegionList::ComputeScalar(*(ItemVariationStore::VariationRegionList **)(a1 + 256), v31, v33, v32);
            ++v31;
          }
          while (v31 != *(_QWORD *)(a1 + 248));
        }
        v38[0] = (void **)&v39;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](v38);
        return v5;
      }
      v30 = v16 + 8 * v15;
    }
    else
    {
      v19 = v15 - v18;
      v20 = *(_QWORD *)(v5 + 144);
      if (v15 - v18 > (v20 - v17) >> 3)
      {
        if (v15 >> 61)
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        v21 = v20 - v16;
        if (v21 >> 2 > v15)
          v15 = v21 >> 2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v15;
        v23 = (char *)TInlineBufferAllocator<double,30ul>::allocate(v5 + 152, v22);
        v24 = *(char **)(v5 + 128);
        v25 = *(char **)(v5 + 136);
        v26 = &v23[8 * v18];
        v27 = &v23[8 * v22];
        bzero(v26, 8 * v19);
        v28 = &v26[8 * v19];
        while (v25 != v24)
        {
          v29 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        *(_QWORD *)(v5 + 128) = v26;
        *(_QWORD *)(v5 + 136) = v28;
        v36 = *(char **)(v5 + 144);
        *(_QWORD *)(v5 + 144) = v27;
        if (v24)
        {
          if (v5 + 152 > (unint64_t)v24 || (v37 = (char **)(v5 + 392), v5 + 392 <= (unint64_t)v24))
          {
            operator delete(v24);
          }
          else if (v36 == *v37)
          {
            *v37 = v24;
          }
        }
        goto LABEL_27;
      }
      bzero(*(void **)(v5 + 136), 8 * v19);
      v30 = v17 + 8 * v19;
    }
    *(_QWORD *)(v5 + 136) = v30;
    goto LABEL_27;
  }
  return v5;
}

void sub_1B0A11DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)va1);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)va1);
  MEMORY[0x1B5E0CD38](v2, 0x10F1C405C1B6C48);
  _Unwind_Resume(a1);
}

uint64_t TType1FontType2CFF2CharStringHandler::GetVariationValues(TType1FontType2CFF2CharStringHandler *this, uint64_t a2)
{
  if (a2 == (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 1)
    return *((_QWORD *)this + 4);
  else
    return 0;
}

uint64_t TType1FontType2CFF2CharStringHandler::CanStreamPostScriptType1(TType1FontType2CFF2CharStringHandler *this)
{
  return 1;
}

void TType2CFFInterpreterContext::TType2CFFInterpreterContext(TType2CFFInterpreterContext *this, const TOpenTypeFont *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  TType2InterpreterContext::TType2InterpreterContext(this, a2, 0);
  *(_QWORD *)v3 = &off_1E61CBD68;
  v4 = *((unsigned __int16 *)a2 + 72);
  *(_WORD *)(v3 + 160) = v4;
  v5 = *((unsigned __int16 *)a2 + 73);
  *(_WORD *)(v3 + 162) = v5;
  if (v4 >= 0x846C)
    v6 = 0x8000;
  else
    v6 = 1131;
  if (v4 < 0x4D8)
    v6 = 107;
  *(_WORD *)(v3 + 3176) = v6;
  v7 = *((_QWORD *)a2 + 14);
  *(_QWORD *)(v3 + 184) = *((_QWORD *)a2 + 15);
  *(_QWORD *)(v3 + 168) = v7;
  if (v7)
    *(_QWORD *)(v3 + 176) = v7 + v5 + v5 * (unint64_t)v4;
  v8 = *((_QWORD *)a2 + 16);
  if (v8)
  {
    *(_DWORD *)(v3 + 3100) = *(_DWORD *)(v8 + 120);
    *(_DWORD *)(v3 + 3104) = *(_DWORD *)(v8 + 440);
  }
}

void TType2InterpreterContext::TType2InterpreterContext(TType2InterpreterContext *this, const TOpenTypeFont *a2, int a3)
{
  char v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  __int128 v13;
  __int128 v14;

  v3 = a3;
  *(_QWORD *)this = &off_1E61CBAD0;
  v5 = (char *)this + 248;
  if (a3)
    v6 = 513;
  else
    v6 = 64;
  v7 = TInterpreterContext::TInterpreterContext((uint64_t)this, (uint64_t)a2, (uint64_t)this + 248, v6, (uint64_t)this + 2304, 32);
  *(_QWORD *)v7 = &off_1E61CBAD0;
  *(_BYTE *)(v7 + 3096) = 0;
  *(_DWORD *)(v7 + 3100) = 0;
  *(_QWORD *)(v7 + 3104) = 0;
  *(_QWORD *)(v7 + 3112) = &off_1E6176770;
  *(_QWORD *)(v7 + 3120) = 0;
  *(_QWORD *)(v7 + 3136) = 0;
  *(_QWORD *)(v7 + 3128) = 0;
  *(_QWORD *)(v7 + 3144) = &off_1E6176770;
  *(_QWORD *)(v7 + 3152) = 0;
  *(_QWORD *)(v7 + 3168) = 0;
  *(_QWORD *)(v7 + 3160) = 0;
  *(_WORD *)(v7 + 3176) = 0;
  v8 = *((unsigned __int16 *)a2 + 159);
  *(_WORD *)(v7 + 3178) = v8;
  v9 = *((unsigned __int8 *)a2 + 317);
  *(_WORD *)(v7 + 3180) = v9;
  if (v8 >= 0x846C)
    v10 = 0x8000;
  else
    v10 = 1131;
  if (v8 < 0x4D8)
    v10 = 107;
  *(_WORD *)(v7 + 3182) = v10;
  v11 = *((_QWORD *)a2 + 40);
  *(_QWORD *)(v7 + 3200) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(v7 + 3184) = v11;
  *(_QWORD *)(v7 + 3192) = v11 + v9 + v9 * (unint64_t)v8;
  v12 = *((_WORD *)a2 + 140);
  *(_WORD *)(v7 + 3208) = v12;
  *(_WORD *)(v7 + 3210) = v12;
  v13 = *(_OWORD *)((char *)a2 + 232);
  v14 = *(_OWORD *)((char *)a2 + 248);
  *(_OWORD *)(v7 + 3248) = *(_OWORD *)((char *)a2 + 264);
  *(_OWORD *)(v7 + 3232) = v14;
  *(_OWORD *)(v7 + 3216) = v13;
  *(_BYTE *)(v7 + 3264) = v3;
  bzero(v5, 0xB20uLL);
}

void TType1PSFont::GetFont(TType1PSFont *this@<X0>, const TFont *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void (**v7)(TType1PDTCFont *__hidden);
  uint64_t v8;
  __int16 v9;

  v5 = 0;
  switch((*(unsigned int (**)(TType1PSFont *, const TFont *))(*(_QWORD *)this + 40))(this, a2))
  {
    case 0xEu:
    case 0x12u:
      v5 = operator new();
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = this;
      *(_QWORD *)v5 = &off_1E61B40F8;
      *(_WORD *)(v5 + 8) = 1024;
      *(_WORD *)(v5 + 16) = *(_WORD *)(*((_QWORD *)this + 16) + 56);
      break;
    case 0xFu:
    case 0x13u:
      v5 = operator new();
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 32) = this;
      *(_WORD *)(v5 + 40) = 0;
      *(_QWORD *)v5 = &off_1E61B5F80;
      *(_WORD *)(v5 + 8) = -31744;
      *(_WORD *)(v5 + 16) = 0;
      break;
    case 0x10u:
      v5 = operator new();
      TType1SFNTFont::TType1SFNTFont((TType1SFNTFont *)v5, this);
      break;
    case 0x11u:
      v5 = operator new();
      TType1CIDFont::TType1CIDFont((TType1CIDFont *)v5, this);
      break;
    case 0x16u:
      v8 = operator new();
      v5 = v8;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = this;
      *(_QWORD *)v8 = &off_1E61B3EE0;
      *(_WORD *)(v8 + 8) = 0;
      *(_WORD *)(v8 + 16) = *(_WORD *)(*((_QWORD *)this + 16) + 56);
      if (*((_WORD *)this + 74))
      {
        *(_WORD *)(v8 + 8) = 1;
        v9 = 16385;
      }
      else
      {
        v9 = 0x4000;
      }
      if (*((_QWORD *)this + 25))
        *(_WORD *)(v8 + 8) = v9;
      break;
    case 0x17u:
    case 0x18u:
      v5 = operator new();
      TType1PDT1Font::TType1PDT1Font((TType1PDT1Font *)v5, this);
      break;
    case 0x19u:
    case 0x1Au:
      v6 = operator new();
      v5 = v6;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = this;
      *(_WORD *)(v6 + 8) = 1024;
      *(_WORD *)(v6 + 16) = *(_WORD *)(*((_QWORD *)this + 16) + 56);
      v7 = &off_1E61B2BB0;
      goto LABEL_7;
    case 0x1Bu:
    case 0x1Cu:
      v6 = operator new();
      v5 = v6;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = this;
      *(_WORD *)(v6 + 40) = 0;
      *(_WORD *)(v6 + 8) = -31744;
      *(_WORD *)(v6 + 16) = 0;
      v7 = &off_1E61B56F0;
LABEL_7:
      *(_QWORD *)v6 = v7;
      break;
    case 0x1Du:
      v5 = operator new();
      TType1PFAFont::TType1PFAFont((TType1PFAFont *)v5, this);
      break;
    default:
      break;
  }
  *a3 = v5;
}

void sub_1B0A12278(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E0CD38](v1, 0x10E1C40C523F46BLL);
  _Unwind_Resume(a1);
}

_QWORD *TType1PSFont::GetFontObject(TType1PSFont *this)
{
  _QWORD *result;
  uint64_t v3;
  _WORD *exception;

  result = (_QWORD *)*((_QWORD *)this + 3);
  if (!result)
  {
    result = operator new(0x10uLL, MEMORY[0x1E0DE4E10]);
    if (!result)
    {
      *((_QWORD *)this + 3) = 0;
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    v3 = *((_QWORD *)this + 4);
    *result = &off_1E61CC1E0;
    result[1] = v3;
    *((_QWORD *)this + 3) = result;
  }
  return result;
}

uint64_t TType1PSFont::GetGlyphNames(uint64_t this, int a2, const unsigned __int16 *a3, uint64_t a4, char *a5, unsigned int *a6)
{
  int v7;
  char *v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _WORD *exception;
  __int16 v15;

  if (!a5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    v15 = 8;
    goto LABEL_12;
  }
  v7 = a2;
  if (a2)
  {
    v8 = a5;
    v11 = this;
    v12 = 0;
    while (1)
    {
      v13 = *a3++;
      this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v11 + 184))(v11, v13, a4, v8);
      if (!(_DWORD)this)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E61B2D68;
        v15 = 22;
        goto LABEL_12;
      }
      v12 += this;
      if (!*v8)
        break;
      v8 += this;
      a4 = (a4 - this);
      if (!--v7)
        goto LABEL_9;
    }
    *a6 = v12;
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    v15 = 19;
LABEL_12:
    exception[4] = v15;
  }
  v12 = 0;
LABEL_9:
  *a6 = v12;
  return this;
}

uint64_t TType1PSFont::GetGlyphIDs(TType1PSFont *this, int a2, const char *__s, unsigned __int16 *a4)
{
  int v6;
  size_t v8;
  uint64_t result;
  _WORD *exception;
  __int16 v12;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    v12 = 8;
    goto LABEL_10;
  }
  v6 = a2;
  do
  {
    v8 = strlen(__s);
    result = (*(uint64_t (**)(TType1PSFont *, const char *, size_t))(*(_QWORD *)this + 192))(this, __s, v8);
    *a4 = result;
    while (*(unsigned __int8 *)__s++)
      ;
    ++a4;
    --v6;
  }
  while (v6);
  if ((_DWORD)result == 0xFFFF)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    v12 = 22;
LABEL_10:
    exception[4] = v12;
  }
  return result;
}

uint64_t TType1PSFont::GetGlyphName(TType1PSFont *this, uint64_t a2, unsigned int a3, char *a4)
{
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  _WORD *exception;
  _OWORD v15[16];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (v8 >= 0xFFFF)
    v9 = 0xFFFF;
  else
    v9 = v8;
  if (v9 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 8;
  }
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[14] = v10;
  v15[15] = v10;
  v15[12] = v10;
  v15[13] = v10;
  v15[10] = v10;
  v15[11] = v10;
  v15[8] = v10;
  v15[9] = v10;
  v15[6] = v10;
  v15[7] = v10;
  v15[4] = v10;
  v15[5] = v10;
  v15[2] = v10;
  v15[3] = v10;
  v15[0] = v10;
  v15[1] = v10;
  if ((_DWORD)a2)
  {
    (*(void (**)(TType1PSFont *, uint64_t, _OWORD *))(*(_QWORD *)this + 232))(this, a2, v15);
    v11 = (char *)v15 + 1;
    v12 = LOBYTE(v15[0]) - 1;
    if (LOBYTE(v15[0]) == 1)
      return v12;
  }
  else
  {
    v12 = 7;
    v11 = "/.notdef";
  }
  if (v12 < a3)
  {
    memcpy(a4, v11 + 1, v12);
    a4[v12] = 0;
  }
  return v12;
}

uint64_t TType1PSFont::GetGlyphID(TType1PSFont *this, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v6;
  int v7;
  unsigned __int16 i;
  __int128 v9;
  int v10;
  char *v11;
  _OWORD v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (v6 >= 0xFFFF)
    v7 = 0xFFFF;
  else
    v7 = v6;
  if (v7)
  {
    for (i = 0; i < (unsigned __int16)v7; ++i)
    {
      *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v13[14] = v9;
      v13[15] = v9;
      v13[12] = v9;
      v13[13] = v9;
      v13[10] = v9;
      v13[11] = v9;
      v13[8] = v9;
      v13[9] = v9;
      v13[6] = v9;
      v13[7] = v9;
      v13[4] = v9;
      v13[5] = v9;
      v13[2] = v9;
      v13[3] = v9;
      v13[0] = v9;
      v13[1] = v9;
      if (i)
      {
        (*(void (**)(TType1PSFont *, _QWORD, _OWORD *))(*(_QWORD *)this + 232))(this, i, v13);
        v10 = LOBYTE(v13[0]);
        v11 = (char *)v13 + 1;
        if (!LOBYTE(v13[0]))
          continue;
      }
      else
      {
        v10 = 8;
        v11 = "/.notdef";
      }
      if (v10 - 1 == a3 && !memcmp(v11 + 1, a2, a3))
        return i;
    }
  }
  return 0;
}

uint64_t TType1PSFont::GetFontDesc(TType1PSFont *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 128);
}

uint64_t TType1PSFont::CreateMMWeightVector(TType1PSFont *this, unsigned int a2, const FontVariation *a3)
{
  _WORD *exception;

  if (*(unsigned __int16 *)(*((_QWORD *)this + 4) + 150) > 1u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 8;
  }
  return 0;
}

void TFontObjectSurrogate::~TFontObjectSurrogate(TFontObjectSurrogate *this)
{
  JUMPOUT(0x1B5E0CD38);
}

TSFNTFont *TFontObjectSurrogate::GetFormat(TFontObjectSurrogate *this)
{
  TSFNTFont *result;
  unsigned int v3;

  result = (TSFNTFont *)*((_QWORD *)this + 1);
  if (result)
  {
    v3 = (*(uint64_t (**)(TSFNTFont *))(*(_QWORD *)result + 40))(result) - 22;
    if (v3 >= 8)
    {
      result = (TSFNTFont *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 432))(*((_QWORD *)this + 1));
      if (result)
        return (TSFNTFont *)TSFNTFont::GetFormat(result);
    }
    else
    {
      return (TSFNTFont *)dword_1B0AADAD0[v3];
    }
  }
  return result;
}

uint64_t TFontObjectSurrogate::GetTableOffset(TFontObjectSurrogate *this, int a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4) - 23 >= 7)
    return TFontSurrogate::GetTableOffset(this, a2, a3);
  if ((*(unsigned int (**)(TFontObjectSurrogate *))(*(_QWORD *)this + 16))(this) != a2)
    return 0xFFFFFFFFLL;
  if (!a3)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  result = 0;
  *a3 = v8;
  return result;
}

uint64_t TFontObjectSurrogate::GetTableIndex(TFontObjectSurrogate *this, int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v7;

  result = *((_QWORD *)this + 1);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 40))(result) - 23 >= 7)
    {
      return TFontSurrogate::GetTableIndex(this, a2, a3);
    }
    else if ((*(unsigned int (**)(TFontObjectSurrogate *))(*(_QWORD *)this + 16))(this) == a2)
    {
      if (a3)
      {
        v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
        *a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TFontObjectSurrogate::GetTablePart@<X0>(TFontObjectSurrogate *this@<X0>, unsigned int *a2@<X4>, unsigned int a3@<W1>, uint64_t a4@<X2>, unsigned int a5@<W3>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;

  v12 = *((_QWORD *)this + 1);
  if (!v12)
    return TFontSurrogate::GetTablePart((uint64_t)this, a2, a3, a4, a5, a6);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  if (a3 != -1)
    return TFontSurrogate::GetTablePart((uint64_t)this, a2, a3, a4, a5, a6);
  if ((v13 - 23) > 6)
    return TFontSurrogate::GetTablePart((uint64_t)this, a2, a3, a4, a5, a6);
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  if (a5 + a4 > v15)
    return TFontSurrogate::GetTablePart((uint64_t)this, a2, a3, a4, a5, a6);
  *a2 = v15;
  if (a5)
    v17 = a5;
  else
    v17 = v15 - a4;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), a4, v17);
}

uint64_t TFontObjectSurrogate::GetFontTableSize(TFontObjectSurrogate *this, uint64_t a2)
{
  int v2;
  uint64_t result;
  _WORD *exception;
  unsigned int v6;

  v6 = 0;
  v2 = (*(uint64_t (**)(TFontObjectSurrogate *, uint64_t, unsigned int *))(*(_QWORD *)this + 24))(this, a2, &v6);
  result = v6;
  if (v2 == -1 || v6 == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 4;
  }
  return result;
}

void TFontObjectTable::TFontObjectTable(TFontObjectTable *this, const TFontObjectSurrogate *a2, uint64_t a3)
{
  TDataReference *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *exception;
  void (**v9)(TDataReference *__hidden);
  uint64_t v10;
  __int128 v11;
  int v12;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = &off_1E6176770;
  v4 = (TFontObjectTable *)((char *)this + 8);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = a2;
  v12 = -1431655766;
  (*(void (**)(void (***__return_ptr)(TDataReference *__hidden), const TFontObjectSurrogate *, uint64_t, _QWORD, int *))(*(_QWORD *)a2 + 40))(&v9, a2, a3, 0, &v12);
  if (v4 != (TDataReference *)&v9)
  {
    TDataReference::DucRefCount(v4);
    v5 = v10;
    v10 = 0;
    *((_QWORD *)this + 2) = v5;
    *(_OWORD *)((char *)this + 24) = v11;
  }
  v9 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v9);
  *(_DWORD *)this = v12;
  v6 = *((_QWORD *)this + 2);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *((_QWORD *)this + 5) = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 4;
  }
  *((_QWORD *)this + 5) = v7 + *((_QWORD *)this + 3);
}

void sub_1B0A12C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  TDataReference *v2;
  va_list va;

  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  TDataReference::~TDataReference(v2);
  _Unwind_Resume(a1);
}

void TFontObjectTable::TFontObjectTable(TFontObjectTable *this, const TFontObjectSurrogate *a2, uint64_t a3, uint64_t a4, int a5)
{
  TDataReference *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *exception;
  void (**v19)(TDataReference *__hidden);
  uint64_t v20;
  __int128 v21;
  int v22;

  *((_QWORD *)this + 1) = &off_1E6176770;
  v6 = (TFontObjectTable *)((char *)this + 8);
  *((_DWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = a2;
  v22 = -1431655766;
  if (!a5)
  {
    (*(void (**)(void (***__return_ptr)(TDataReference *__hidden), const TFontObjectSurrogate *, uint64_t, _QWORD, int *))(*(_QWORD *)a2 + 40))(&v19, a2, a3, 0, &v22);
    if (v6 != (TDataReference *)&v19)
    {
      TDataReference::DucRefCount(v6);
      v15 = v20;
      v20 = 0;
      *((_QWORD *)this + 2) = v15;
      *(_OWORD *)((char *)this + 24) = v21;
    }
    v19 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v19);
    v7 = v22;
    *(_DWORD *)this = v22;
    v16 = *((_QWORD *)this + 2);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        *((_QWORD *)this + 5) = v17 + *((_QWORD *)this + 3);
        goto LABEL_15;
      }
    }
LABEL_16:
    *((_QWORD *)this + 5) = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 4;
  }
  v7 = a5;
  v8 = a4;
  (*(void (**)(void (***__return_ptr)(TDataReference *__hidden), const TFontObjectSurrogate *, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 40))(&v19, a2, a3, a4, &v22);
  if (v6 != (TDataReference *)&v19)
  {
    TDataReference::DucRefCount(v6);
    v9 = v20;
    v20 = 0;
    *((_QWORD *)this + 2) = v9;
    *(_OWORD *)((char *)this + 24) = v21;
  }
  v19 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v19);
  v10 = v22;
  *(_DWORD *)this = v22;
  v11 = *((_QWORD *)this + 2);
  if (!v11)
    goto LABEL_16;
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    goto LABEL_16;
  *((_QWORD *)this + 5) = v12 + *((_QWORD *)this + 3);
  v13 = v7 + v8;
  if (__CFADD__(v7, v8) || v13 < v8 || v13 > v10)
  {
    v14 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v14 = &off_1E61B2D68;
    v14[4] = 5;
  }
LABEL_15:
  *((_DWORD *)this + 1) = v7;
}

void sub_1B0A12E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  TDataReference *v2;
  va_list va;

  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  TDataReference::~TDataReference(v2);
  _Unwind_Resume(a1);
}

void TFontObjectTable::TFontObjectTable(TFontObjectTable *this, const TFontObjectSurrogate *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  unsigned int v6;
  TDataReference *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  _WORD *exception;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  __int128 v23;
  unsigned int v24;
  _WORD *v25;
  __int128 v26;
  __int128 v27;
  int v28;

  v6 = a5;
  *((_QWORD *)this + 1) = &off_1E6176770;
  v10 = (TFontObjectTable *)((char *)this + 8);
  *((_DWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = a2;
  v28 = -1431655766;
  if (!a6)
  {
    (*(void (**)(__int128 *__return_ptr, const TFontObjectSurrogate *, uint64_t, _QWORD, int *))(*(_QWORD *)a2 + 40))(&v26, a2, a3, 0, &v28);
    if (v10 != (TDataReference *)&v26)
    {
      TDataReference::DucRefCount(v10);
      v19 = *((_QWORD *)&v26 + 1);
      *((_QWORD *)&v26 + 1) = 0;
      *((_QWORD *)this + 2) = v19;
      *(_OWORD *)((char *)this + 24) = v27;
    }
    *(_QWORD *)&v26 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v26);
    v13 = v28;
    *(_DWORD *)this = v28;
    v20 = *((_QWORD *)this + 2);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
      {
        v16 = (unsigned int *)(v21 + *((_QWORD *)this + 3));
        *((_QWORD *)this + 5) = v16;
        v11 = v13;
        goto LABEL_15;
      }
    }
LABEL_24:
    *((_QWORD *)this + 5) = 0;
    goto LABEL_25;
  }
  v11 = a6;
  (*(void (**)(__int128 *__return_ptr, const TFontObjectSurrogate *, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 40))(&v26, a2, a3, a5, &v28);
  if (v10 != (TDataReference *)&v26)
  {
    TDataReference::DucRefCount(v10);
    v12 = *((_QWORD *)&v26 + 1);
    *((_QWORD *)&v26 + 1) = 0;
    *((_QWORD *)this + 2) = v12;
    *(_OWORD *)((char *)this + 24) = v27;
  }
  *(_QWORD *)&v26 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v26);
  v13 = v28;
  *(_DWORD *)this = v28;
  v14 = *((_QWORD *)this + 2);
  if (!v14)
    goto LABEL_24;
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
    goto LABEL_24;
  v16 = (unsigned int *)(v15 + *((_QWORD *)this + 3));
  *((_QWORD *)this + 5) = v16;
  v17 = v11 + v6;
  if (__CFADD__(v11, v6) || v17 < v6 || v17 > v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
LABEL_15:
  *((_DWORD *)this + 1) = v11;
  if (v6 || v11 < 4)
  {
    if (v13 < 5)
    {
      v22 = 0;
    }
    else
    {
      *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v26 = v23;
      v27 = v23;
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 6) + 40))(&v26, *((_QWORD *)this + 6), a3, 0, 0);
      v24 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v26 + 1) + 8) + v27);
      *(_QWORD *)&v26 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v26);
      v22 = bswap32(v24);
    }
  }
  else
  {
    v22 = bswap32(*v16);
  }
  if ((v22 ^ a4) >> 16 || (unsigned __int16)v22 < (unsigned __int16)a4)
  {
LABEL_25:
    v25 = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)v25 = &off_1E61B2D68;
    v25[4] = 4;
  }
}

void sub_1B0A1313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference *v9;

  TDataReference::~TDataReference((TDataReference *)&a9);
  TDataReference::~TDataReference(v9);
  _Unwind_Resume(a1);
}

void TFontObjectTable::~TFontObjectTable(TFontObjectTable *this)
{
  *((_QWORD *)this + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TFontObjectTable *)((char *)this + 8));
}

uint64_t TType1PSFont::GetFullName(TType1PSFont *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = *(int *)(v1 + 56);
  if ((_DWORD)v2 == -1)
    return 0;
  else
    return *(_QWORD *)(v1 + 48) + v2;
}

uint64_t TType1PSFont::GetFamilyName(TType1PSFont *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = *(int *)(v1 + 60);
  if ((_DWORD)v2 == -1)
    return 0;
  else
    return *(_QWORD *)(v1 + 48) + v2;
}

uint64_t TType1PSFont::GetVersion(TType1PSFont *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = *(int *)(v1 + 64);
  if ((_DWORD)v2 == -1)
    return 0;
  else
    return *(_QWORD *)(v1 + 48) + v2;
}

uint64_t TType1PSFont::GetWeight(TType1PSFont *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = *(int *)(v1 + 68);
  if ((_DWORD)v2 == -1)
    return 0;
  else
    return *(_QWORD *)(v1 + 48) + v2;
}

uint64_t TType1PSFont::GetNotice(TType1PSFont *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = *(int *)(v1 + 72);
  if ((_DWORD)v2 == -1)
    return 0;
  else
    return *(_QWORD *)(v1 + 48) + v2;
}

uint64_t TType1PSFont::GetFontName(TType1PSFont *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *exception;

  v1 = *((_QWORD *)this + 4);
  v2 = *(int *)(v1 + 76);
  if ((_DWORD)v2 == -1 || (v3 = *(_QWORD *)(v1 + 48)) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  return v3 + v2;
}

uint64_t TType1PSFont::GetOverrideMetrics()
{
  return 0;
}

const __CFAllocator *TFPFontImpl::Retain(TFPFontImpl *this, const __CFAllocator *a2, const void *a3)
{
  (*(void (**)(const __CFAllocator *))(*(_QWORD *)a2 + 24))(a2);
  return a2;
}

void TFPFontImpl::Release(TFPFontImpl *this, const __CFAllocator *a2, const void *a3)
{
  if (a2)
  {
    if (!(*(unsigned int (**)(const __CFAllocator *))(*(_QWORD *)a2 + 32))(a2))
      (*(void (**)(const __CFAllocator *))(*(_QWORD *)a2 + 8))(a2);
  }
}

uint64_t FPFontCreateVariationFromPostScriptNameSuffix(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 0;
  if (a1)
  {
    if (a2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  }
  return result;
}

void sub_1B0A1337C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13374);
}

uint64_t FPFontIsSFNT(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

void sub_1B0A133AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A133A4);
}

uint64_t FPFontCopySFNTData(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

void sub_1B0A133DC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A133D4);
}

uint64_t FPFontCopyMetadata(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

void sub_1B0A1340C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13404);
}

uint64_t FPFontIsSuitcase(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 360))(result);
  return result;
}

void sub_1B0A1343C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13434);
}

uint64_t FPFontCopyNameTablePostScriptName(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

void sub_1B0A1346C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13464);
}

uint64_t FPFontCopyVariationPostScriptNamePrefix(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  return result;
}

void sub_1B0A1349C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13494);
}

uint64_t FPFontCopyAdditionalPostScriptNames(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

void sub_1B0A134CC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A134C4);
}

uint64_t FPFontCopyAllNames(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
  return result;
}

void sub_1B0A134FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A134F4);
}

uint64_t FPFontCopyFullName(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  return result;
}

void sub_1B0A1352C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13524);
}

uint64_t FPFontCopyFamilyName(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
  return result;
}

void sub_1B0A1355C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13554);
}

uint64_t FPFontGetDefaultInstance(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 168))(result);
  return result;
}

void sub_1B0A1358C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13584);
}

uint64_t FPFontIsNamedInstance(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 176))(result);
  return result;
}

void sub_1B0A135BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A135B4);
}

uint64_t FPFontGetInstanceNameID(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 184))(result);
  return result;
}

void sub_1B0A135EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A135E4);
}

uint64_t FPFontHasNamedInstanceWithOpticalSize(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 192))(result);
  return result;
}

void sub_1B0A1361C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13614);
}

uint64_t FPFontGetVariationAxisFlags(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  return result;
}

void sub_1B0A1364C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13644);
}

uint64_t FPFontGetVariationAxisNameID(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 224))(result);
  return result;
}

void sub_1B0A1367C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13674);
}

uint64_t FPFontGetFontInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
      *(_OWORD *)a2 = *(_OWORD *)v5;
      v6 = *(_OWORD *)(v5 + 16);
      v7 = *(_OWORD *)(v5 + 32);
      v8 = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(a2 + 64) = v8;
      *(_OWORD *)(a2 + 16) = v6;
      *(_OWORD *)(a2 + 32) = v7;
      v9 = *(_OWORD *)(v5 + 80);
      v10 = *(_OWORD *)(v5 + 96);
      v11 = *(_OWORD *)(v5 + 112);
      *(_QWORD *)(a2 + 128) = *(_QWORD *)(v5 + 128);
      *(_OWORD *)(a2 + 96) = v10;
      *(_OWORD *)(a2 + 112) = v11;
      *(_OWORD *)(a2 + 80) = v9;
      return 1;
    }
  }
  return result;
}

void sub_1B0A136FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A136F0);
}

uint64_t FPFontGetNumberOfLongGlyphs(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
  return result;
}

void sub_1B0A1372C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13724);
}

uint64_t FPFontShouldAutoHint()
{
  return 1;
}

double FPFontGetStems(uint64_t a1, double *a2, double *a3)
{
  double result;
  double v6;
  double v7;

  v6 = 0.0;
  v7 = 0.0;
  if (a1)
    (*(void (**)(uint64_t, double *, double *))(*(_QWORD *)a1 + 336))(a1, &v6, &v7);
  if (a2)
  {
    result = v6;
    *a2 = v6;
  }
  if (a3)
  {
    result = v7;
    *a3 = v7;
  }
  return result;
}

void sub_1B0A137A0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1)
    JUMPOUT(0x1B0A13784);
  JUMPOUT(0x1B0A1377CLL);
}

uint64_t FPFontGetTypoMetrics(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 280))(result);
  return result;
}

void sub_1B0A137D0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A137C8);
}

uint64_t FPFontGetWinMetrics(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 288))(result);
  return result;
}

void sub_1B0A13800(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A137F8);
}

uint64_t FPFontGetSubscriptX(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 296))(result);
  return result;
}

void sub_1B0A13830(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13828);
}

uint64_t FPFontGetSubscriptY(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 304))(result);
  return result;
}

void sub_1B0A13860(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13858);
}

uint64_t FPFontGetSuperscriptX(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 312))(result);
  return result;
}

void sub_1B0A13890(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13888);
}

uint64_t FPFontGetSuperscriptY(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 320))(result);
  return result;
}

void sub_1B0A138C0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A138B8);
}

uint64_t FPFontGetStrikeout(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 328))(result);
  return result;
}

void sub_1B0A138F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A138E8);
}

__CFString *FPFontCopyURLPerRegistryOrdering(__CFString *result, TFPFontImpl *a2)
{
  const char *v3;
  __CFString *v4;
  uint64_t (*XTCopyFontWithNameSymbolLoc)(__CFString *, _QWORD, _QWORD);

  if (result)
  {
    if (strcmp((const char *)result, "Adobe"))
      return 0;
    result = TFPFontImpl::FindFontNamePerScript(a2, v3);
    if (result)
    {
      v4 = result;
      if (!_MergedGlobals_3)
        _MergedGlobals_3 = _sl_dlopen();
      if (!_MergedGlobals_3)
        return 0;
      result = (__CFString *)getXTCopyFontWithNameSymbolLoc();
      if (result)
      {
        XTCopyFontWithNameSymbolLoc = (uint64_t (*)(__CFString *, _QWORD, _QWORD))getXTCopyFontWithNameSymbolLoc();
        if (!XTCopyFontWithNameSymbolLoc)
        {
          dlerror();
          abort_report_np();
        }
        return (__CFString *)XTCopyFontWithNameSymbolLoc(v4, 0, 0);
      }
    }
  }
  return result;
}

uint64_t FPFontCopyCharacterSet(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 376))(result);
  return result;
}

void sub_1B0A13A10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13A08);
}

uint64_t FPFontGetOS2UnicodeRanges(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
  return result;
}

void sub_1B0A13A40(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t FPFontGetProtectionInfo(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 392))(result);
  return result;
}

void sub_1B0A13A6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13A64);
}

uint64_t FPFontGetType1Encoding(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 400))(result);
  return result;
}

void sub_1B0A13A9C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13A94);
}

uint64_t FPFontGetTrueTypeEncoding(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 408))(result);
  return result;
}

void sub_1B0A13ACC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13AC4);
}

uint64_t FPFontGetGlyphsForText(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 424))(result, a2 & 0xFFFFFFFFFFFFLL);
  return result;
}

void sub_1B0A13B00(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13AF8);
}

uint64_t FPFontGetGlyphsForCharacters(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 432))(result);
  return result;
}

void sub_1B0A13B30(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13B28);
}

uint64_t FPFontGetLongGlyphsForCharacters(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 440))(result);
  return result;
}

void sub_1B0A13B60(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13B58);
}

uint64_t FPFontGetGlyphsForCharacterRange(uint64_t a1, uint64_t a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  _BOOL4 valid;
  uint64_t result;

  length = a3.length;
  location = a3.location;
  valid = IsValidCharacterRange(a3);
  result = 0;
  if (a1)
  {
    if (valid)
      return (*(uint64_t (**)(uint64_t, uint64_t, CFIndex, CFIndex))(*(_QWORD *)a1 + 448))(a1, a2, location, length);
  }
  return result;
}

void sub_1B0A13BD8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13BC8);
}

BOOL IsValidCharacterRange(CFRange a1)
{
  uint64_t v1;
  CFIndex v2;
  CFIndex v3;
  unint64_t v4;
  CFIndex v6;
  CFIndex v7;
  BOOL v8;
  CFIndex location;
  CFIndex v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v1 = 0;
  if ((a1.length & 0x8000000000000000) == 0)
  {
    v2 = a1.location + a1.length;
    v3 = 1114112;
    if (a1.location + a1.length < 1114112)
      v3 = a1.location + a1.length;
    v4 = (unint64_t)a1.location >> 16;
    if (v2 > 0 && a1.location < 1)
      v6 = v3;
    else
      v6 = 0;
    v7 = v3 - a1.location;
    v8 = v4 > 0x10;
    if (v4 <= 0x10)
      location = a1.location;
    else
      location = 0;
    if (v8)
      v7 = v6;
    if (location == a1.location && v7 == a1.length)
    {
      v10 = 57344;
      if (v2 < 57344)
        v10 = a1.location + a1.length;
      v11 = v2 > 55296 && a1.location < 55297;
      v12 = v10 - 55296;
      if (!v11)
        v12 = 0;
      v13 = v10 - a1.location;
      if ((unint64_t)a1.location >> 11 != 27)
        v13 = v12;
      return v13 < 1;
    }
  }
  return v1;
}

uint64_t FPFontGetLongGlyphsForCharacterRange(uint64_t a1, uint64_t a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  _BOOL4 valid;
  uint64_t result;

  length = a3.length;
  location = a3.location;
  valid = IsValidCharacterRange(a3);
  result = 0;
  if (a1)
  {
    if (valid)
      return (*(uint64_t (**)(uint64_t, uint64_t, CFIndex, CFIndex))(*(_QWORD *)a1 + 456))(a1, a2, location, length);
  }
  return result;
}

void sub_1B0A13CE0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13CD0);
}

uint64_t FPFontGetGlyphsXo(uint64_t result, _WORD *a2, _WORD *a3)
{
  int v5;

  v5 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t, char *, int *))(*(_QWORD *)result + 520))(result, (char *)&v5 + 2, &v5);
  if (a2)
    *a2 = HIWORD(v5);
  if (a3)
    *a3 = v5;
  return result;
}

void sub_1B0A13D4C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1)
    JUMPOUT(0x1B0A13D30);
  JUMPOUT(0x1B0A13D28);
}

uint64_t FPFontGetGlyphsForCIDs(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 464))(result);
  return result;
}

void sub_1B0A13D7C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13D74);
}

uint64_t FPFontGetGlyphForGlyphName(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 544))(result);
  return result;
}

void sub_1B0A13DAC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13DA4);
}

uint64_t FPFontGetGlyphNameMaxLength()
{
  return 257;
}

uint64_t FPFontCopyGlyphNameForGlyph(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 536))(result);
  return result;
}

void sub_1B0A13DE4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13DDCLL);
}

double FPFontGetGlyphIdealAdvanceAndSideBearing(uint64_t a1)
{
  double v1;

  v1 = 0.0;
  if (a1)
    return (*(double (**)(uint64_t))(*(_QWORD *)a1 + 560))(a1);
  return v1;
}

void sub_1B0A13E28(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13E18);
}

double FPFontGetGlyphIdealVerticalBounds(uint64_t a1)
{
  double result;

  if (!a1)
    return *MEMORY[0x1E0C9D648];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
  return result;
}

double FPFontGetGlyphDeviceVerticalAdvance(uint64_t a1)
{
  double result;

  if (!a1)
    return *MEMORY[0x1E0C9D820];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 592))(a1);
  return result;
}

double FPFontGetGlyphDeviceBounds(uint64_t a1)
{
  double result;

  if (!a1)
    return *MEMORY[0x1E0C9D648];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 600))(a1);
  return result;
}

double FPFontGetGlyphDeviceVerticalBounds(uint64_t a1)
{
  double result;

  if (!a1)
    return *MEMORY[0x1E0C9D648];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 608))(a1);
  return result;
}

uint64_t FPFontCopyOriginalGlyphPath(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 640))(result);
  return result;
}

void sub_1B0A13F40(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13F38);
}

uint64_t FPFontCopyHintedGlyphPath(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 648))(result);
  return result;
}

void sub_1B0A13F70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13F68);
}

uint64_t FPFontCanCreatePostScriptSubset(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 496))(result);
  return result;
}

void sub_1B0A13FA0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13F98);
}

uint64_t FPFontCreatePostScriptSubset(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 504))(result);
  return result;
}

void sub_1B0A13FD0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13FC8);
}

uint64_t FPFontCreatePostScriptEncoding(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 512))(result);
  return result;
}

void sub_1B0A14000(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A13FF8);
}

void FPFontPurgeCaches(TFPFontImpl *a1, const char *a2)
{
  TFPFontImpl::PurgeCachesCxx(a1, a2);
}

void sub_1B0A14024(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t FPFontPurgeFromCaches(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 656))(result);
  return result;
}

void sub_1B0A14050(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t FPFontCopySplicedStash(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 672))(result);
  return result;
}

void sub_1B0A1407C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A14074);
}

uint64_t FPFontGetFormat(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 664))(result);
  return result;
}

void sub_1B0A140AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A140A4);
}

double FPFontGetVariationScalar(uint64_t a1)
{
  double v1;

  v1 = 0.0;
  if (a1)
    return (*(double (**)(uint64_t))(*(_QWORD *)a1 + 680))(a1);
  return v1;
}

void sub_1B0A140F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A140E0);
}

uint64_t FPFontGetVariationScalars(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 688))(result);
  return result;
}

void sub_1B0A1411C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A14114);
}

uint64_t FPFontGetVariationValues(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = 0;
  if (!a2)
  {
    a2 = &v2;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 232))(result, a2);
  }
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 232))(result, a2);
  return result;
}

void sub_1B0A1416C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A14160);
}

uint64_t FPFontEnumerateNamedInstances(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 240))(result);
  return result;
}

void sub_1B0A1419C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t FPFontGetTupleCount(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 696))(result);
  return result;
}

void sub_1B0A141C8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A141C0);
}

uint64_t FPFontGetControlPoints(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 704))(result);
  return result;
}

void sub_1B0A141F8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B0A141F0);
}

uint64_t getXTCopyFontWithNameSymbolLoc(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = qword_1ECDE6B48;
  v6 = qword_1ECDE6B48;
  if (!qword_1ECDE6B48)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZL30getXTCopyFontWithNameSymbolLocv_block_invoke;
    v2[3] = &unk_1E61CC2A8;
    v2[4] = &v3;
    ___ZL30getXTCopyFontWithNameSymbolLocv_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1B0A142A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void TElement::Parse(TElement *this, _xmlNode *a2)
{
  _xmlNode *children;
  const __CFAllocator *v5;
  CFStringRef v6;
  CFStringRef v7;

  (*(void (**)(TElement *))(*(_QWORD *)this + 16))(this);
  if (*((_BYTE *)this + 8))
  {
    children = a2->children;
    if (children)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        if (!*((_BYTE *)this + 8))
          break;
        if (children->type == XML_ELEMENT_NODE)
        {
          v6 = CFStringCreateWithCString(v5, (const char *)children->name, 0x8000100u);
          if (v6)
          {
            v7 = v6;
            (*(void (**)(TElement *, _xmlNode *, CFStringRef))(*(_QWORD *)this + 32))(this, children, v6);
            CFRelease(v7);
          }
          else
          {
            *((_BYTE *)this + 8) = 0;
          }
        }
        children = children->next;
      }
      while (children);
    }
  }
}

void TElement::ParseAllAttributes(TElement *this, _xmlNode *a2)
{
  _xmlAttr *properties;
  const __CFAllocator *v5;
  void (**v6)(xmlChar *);
  CFStringRef v7;
  CFStringRef v8;
  xmlChar *Prop;
  xmlChar *v10;
  CFStringRef v11;

  if (a2)
  {
    if (*((_BYTE *)this + 8))
    {
      properties = a2->properties;
      if (properties)
      {
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v6 = (void (**)(xmlChar *))MEMORY[0x1E0DE8D30];
        do
        {
          v7 = CFStringCreateWithCString(v5, (const char *)properties->name, 0x8000100u);
          if (v7)
          {
            v8 = v7;
            Prop = xmlGetProp(a2, properties->name);
            if (Prop)
            {
              v10 = Prop;
              v11 = CFStringCreateWithCString(v5, (const char *)Prop, 0x8000100u);
              (*(void (**)(TElement *, CFStringRef, CFStringRef))(*(_QWORD *)this + 24))(this, v8, v11);
              CFRelease(v11);
              (*v6)(v10);
            }
            CFRelease(v8);
          }
          properties = properties->next;
        }
        while (properties);
      }
    }
  }
}

uint64_t TElement::ParseSubElement(uint64_t this, _xmlNode *a2, const __CFString *a3)
{
  *(_BYTE *)(this + 8) = 0;
  return this;
}

void TPosingFont::~TPosingFont(TPosingFont *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC308;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TPosingFont::~TPosingFont(this);
  JUMPOUT(0x1B5E0CD38);
}

CFDictionaryRef TPosingFont::Build(CFDictionaryRef *this, _xmlNode *a2)
{
  CFDictionaryRef result;

  TElement::Parse((TElement *)this, a2);
  if (!*((_BYTE *)this + 8))
    return 0;
  if (!CFDictionaryContainsKey(this[2], CFSTR("Components")))
    *((_BYTE *)this + 8) = 0;
  if (CFDictionaryContainsKey(this[2], CFSTR("name")) && CFDictionaryContainsKey(this[2], CFSTR("version")))
  {
    if (*((_BYTE *)this + 8))
      return this[2];
    return 0;
  }
  result = 0;
  *((_BYTE *)this + 8) = 0;
  return result;
}

void TPosingFont::ParseAttribute(TPosingFont *this, const __CFString *cf1, const __CFString *value)
{
  __CFDictionary *v6;
  const __CFString *v7;

  if (*((_BYTE *)this + 8))
  {
    if (cf1 == CFSTR("name"))
    {
LABEL_5:
      v6 = (__CFDictionary *)*((_QWORD *)this + 2);
      v7 = CFSTR("name");
LABEL_6:
      CFDictionarySetValue(v6, v7, value);
      return;
    }
    if (cf1)
    {
      if (CFEqual(cf1, CFSTR("name")))
        goto LABEL_5;
      if (cf1 == CFSTR("version") || CFEqual(cf1, CFSTR("version")))
      {
        v6 = (__CFDictionary *)*((_QWORD *)this + 2);
        v7 = CFSTR("version");
        goto LABEL_6;
      }
    }
    *((_BYTE *)this + 8) = 0;
  }
}

void TPosingFont::ParseSubElement(TPosingFont *this, _xmlNode *a2, const __CFString *cf1)
{
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  CFTypeRef v10;
  void (**v11)(TComponents *__hidden);
  unint64_t v12;
  CFDictionaryRef theDict;

  if (*((_BYTE *)this + 8))
  {
    if (cf1 == CFSTR("Name"))
      goto LABEL_5;
    if (!cf1)
    {
LABEL_11:
      *((_BYTE *)this + 8) = 0;
      return;
    }
    if (CFEqual(cf1, CFSTR("Name")))
    {
LABEL_5:
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (!*((_QWORD *)this + 3))
      {
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        *((_QWORD *)this + 3) = Mutable;
        if (Mutable)
        {
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), CFSTR("FontNames"), Mutable);
          CFRelease(*((CFTypeRef *)this + 3));
        }
        else
        {
          *((_BYTE *)this + 8) = 0;
        }
      }
      v11 = &off_1E61CC340;
      v12 = 0xAAAAAAAAAAAAAA01;
      theDict = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!theDict)
        LOBYTE(v12) = 0;
      TElement::Parse((TElement *)&v11, a2);
      if ((_BYTE)v12)
      {
        if (CFDictionaryContainsKey(theDict, CFSTR("type")) && CFDictionaryContainsKey(theDict, CFSTR("string")))
        {
          if ((_BYTE)v12)
          {
            v8 = theDict;
            *((_BYTE *)this + 8) = theDict != 0;
            if (v8)
              CFArrayAppendValue(*((CFMutableArrayRef *)this + 3), v8);
            goto LABEL_23;
          }
        }
        else
        {
          LOBYTE(v12) = 0;
        }
      }
      *((_BYTE *)this + 8) = 0;
LABEL_23:
      TName::~TName((TName *)&v11);
      return;
    }
    if (cf1 == CFSTR("FontMetrics") || CFEqual(cf1, CFSTR("FontMetrics")))
    {
      if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("FontMetrics")))
        goto LABEL_11;
      v11 = &off_1E61CC378;
      v12 = 0xAAAAAAAAAAAAAA01;
      theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!theDict)
        LOBYTE(v12) = 0;
      TElement::Parse((TElement *)&v11, a2);
      if (!(_BYTE)v12)
        goto LABEL_41;
      if (!CFDictionaryGetCount(theDict))
      {
        CFRelease(theDict);
        theDict = 0;
      }
      if ((_BYTE)v12)
      {
        v9 = theDict;
        *((_BYTE *)this + 8) = theDict != 0;
        if (v9)
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), CFSTR("FontMetrics"), v9);
      }
      else
      {
LABEL_41:
        *((_BYTE *)this + 8) = 0;
      }
      TFontMetrics::~TFontMetrics((TFontMetrics *)&v11);
    }
    else
    {
      if (cf1 != CFSTR("Components") && !CFEqual(cf1, CFSTR("Components"))
        || CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("Components")))
      {
        goto LABEL_11;
      }
      v11 = &off_1E61CC3B0;
      v12 = 0xAAAAAAAAAAAAAA01;
      theDict = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (!theDict)
        LOBYTE(v12) = 0;
      v10 = TComponents::Build((CFTypeRef *)&v11, a2);
      *((_BYTE *)this + 8) = v10 != 0;
      if (v10)
        CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), CFSTR("Components"), v10);
      TComponents::~TComponents((TComponents *)&v11);
    }
  }
}

void sub_1B0A149F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TComponents::~TComponents((TComponents *)va);
  _Unwind_Resume(a1);
}

CFTypeRef TComponents::Build(CFTypeRef *this, _xmlNode *a2)
{
  TElement::Parse((TElement *)this, a2);
  if (!*((_BYTE *)this + 8))
    return 0;
  if (!CFArrayGetCount((CFArrayRef)this[2]))
  {
    CFRelease(this[2]);
    this[2] = 0;
  }
  if (*((_BYTE *)this + 8))
    return this[2];
  else
    return 0;
}

void TName::~TName(TName *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC340;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TName::~TName(this);
  JUMPOUT(0x1B5E0CD38);
}

void TName::ParseAttribute(TName *this, const __CFString *cf1, const __CFString *value)
{
  __CFDictionary *v6;
  const __CFString *v7;

  if (cf1 == CFSTR("type"))
    goto LABEL_4;
  if (cf1)
  {
    if (CFEqual(cf1, CFSTR("type")))
    {
LABEL_4:
      v6 = (__CFDictionary *)*((_QWORD *)this + 2);
      v7 = CFSTR("type");
LABEL_5:
      CFDictionarySetValue(v6, v7, value);
      return;
    }
    if (cf1 == CFSTR("string") || CFEqual(cf1, CFSTR("string")))
    {
      v6 = (__CFDictionary *)*((_QWORD *)this + 2);
      v7 = CFSTR("string");
      goto LABEL_5;
    }
    if (cf1 == CFSTR("language") || CFEqual(cf1, CFSTR("language")))
    {
      v6 = (__CFDictionary *)*((_QWORD *)this + 2);
      v7 = CFSTR("language");
      goto LABEL_5;
    }
  }
  *((_BYTE *)this + 8) = 0;
}

void TFontMetrics::~TFontMetrics(TFontMetrics *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC378;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TFontMetrics::~TFontMetrics(this);
  JUMPOUT(0x1B5E0CD38);
}

void TFontMetrics::ParseAttribute(CFMutableDictionaryRef *this, const __CFString *cf1, const __CFString *value)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;

  if (cf1 == CFSTR("unitsPerEm"))
    goto LABEL_72;
  if (!cf1)
    goto LABEL_73;
  v6 = CFEqual(cf1, CFSTR("unitsPerEm"));
  if (cf1 == CFSTR("xMin"))
    goto LABEL_72;
  if (v6)
    goto LABEL_72;
  v7 = CFEqual(cf1, CFSTR("xMin"));
  if (cf1 == CFSTR("yMin"))
    goto LABEL_72;
  if (v7)
    goto LABEL_72;
  v8 = CFEqual(cf1, CFSTR("yMin"));
  if (cf1 == CFSTR("xMax"))
    goto LABEL_72;
  if (v8)
    goto LABEL_72;
  v9 = CFEqual(cf1, CFSTR("xMax"));
  if (cf1 == CFSTR("yMax"))
    goto LABEL_72;
  if (v9)
    goto LABEL_72;
  v10 = CFEqual(cf1, CFSTR("yMax"));
  if (cf1 == CFSTR("macStyle"))
    goto LABEL_72;
  if (v10)
    goto LABEL_72;
  v11 = CFEqual(cf1, CFSTR("macStyle"));
  if (cf1 == CFSTR("lowestRecPPEM"))
    goto LABEL_72;
  if (v11)
    goto LABEL_72;
  v12 = CFEqual(cf1, CFSTR("lowestRecPPEM"));
  if (cf1 == CFSTR("ascender"))
    goto LABEL_72;
  if (v12)
    goto LABEL_72;
  v13 = CFEqual(cf1, CFSTR("ascender"));
  if (cf1 == CFSTR("descender"))
    goto LABEL_72;
  if (v13)
    goto LABEL_72;
  v14 = CFEqual(cf1, CFSTR("descender"));
  if (cf1 == CFSTR("lineGap"))
    goto LABEL_72;
  if (v14)
    goto LABEL_72;
  v15 = CFEqual(cf1, CFSTR("lineGap"));
  if (cf1 == CFSTR("vertTypoAscender"))
    goto LABEL_72;
  if (v15)
    goto LABEL_72;
  v16 = CFEqual(cf1, CFSTR("vertTypoAscender"));
  if (cf1 == CFSTR("vertTypoDescender"))
    goto LABEL_72;
  if (v16)
    goto LABEL_72;
  v17 = CFEqual(cf1, CFSTR("vertTypoDescender"));
  if (cf1 == CFSTR("vertTypoLineGap"))
    goto LABEL_72;
  if (v17)
    goto LABEL_72;
  v18 = CFEqual(cf1, CFSTR("vertTypoLineGap"));
  if (cf1 == CFSTR("advanceWidthMax"))
    goto LABEL_72;
  if (v18)
    goto LABEL_72;
  v19 = CFEqual(cf1, CFSTR("advanceWidthMax"));
  if (cf1 == CFSTR("advanceHeightMax"))
    goto LABEL_72;
  if (v19)
    goto LABEL_72;
  v20 = CFEqual(cf1, CFSTR("advanceHeightMax"));
  if (cf1 == CFSTR("minLeftSideBearing"))
    goto LABEL_72;
  if (v20)
    goto LABEL_72;
  v21 = CFEqual(cf1, CFSTR("minLeftSideBearing"));
  if (cf1 == CFSTR("minRightSideBearing"))
    goto LABEL_72;
  if (v21)
    goto LABEL_72;
  v22 = CFEqual(cf1, CFSTR("minRightSideBearing"));
  if (cf1 == CFSTR("minTopSideBearing"))
    goto LABEL_72;
  if (v22)
    goto LABEL_72;
  v23 = CFEqual(cf1, CFSTR("minTopSideBearing"));
  if (cf1 == CFSTR("minBottomSideBearing"))
    goto LABEL_72;
  if (v23)
    goto LABEL_72;
  v24 = CFEqual(cf1, CFSTR("minBottomSideBearing"));
  if (cf1 == CFSTR("xMaxExtent"))
    goto LABEL_72;
  if (v24)
    goto LABEL_72;
  v25 = CFEqual(cf1, CFSTR("xMaxExtent"));
  if (cf1 == CFSTR("yMaxExtent"))
    goto LABEL_72;
  if (v25)
    goto LABEL_72;
  v26 = CFEqual(cf1, CFSTR("yMaxExtent"));
  if (cf1 == CFSTR("caretSlopeRise"))
    goto LABEL_72;
  if (v26)
    goto LABEL_72;
  v27 = CFEqual(cf1, CFSTR("caretSlopeRise"));
  if (cf1 == CFSTR("caretSlopeRun"))
    goto LABEL_72;
  if (v27)
    goto LABEL_72;
  v28 = CFEqual(cf1, CFSTR("caretSlopeRun"));
  if (cf1 == CFSTR("caretOffset"))
    goto LABEL_72;
  if (v28)
    goto LABEL_72;
  v29 = CFEqual(cf1, CFSTR("caretOffset"));
  if (cf1 == CFSTR("vertCaretSlopeRise"))
    goto LABEL_72;
  if (v29)
    goto LABEL_72;
  v30 = CFEqual(cf1, CFSTR("vertCaretSlopeRise"));
  if (cf1 == CFSTR("vertCaretSlopeRun"))
    goto LABEL_72;
  if (v30)
    goto LABEL_72;
  v31 = CFEqual(cf1, CFSTR("vertCaretSlopeRun"));
  if (cf1 == CFSTR("vertCaretOffset"))
    goto LABEL_72;
  if (v31)
    goto LABEL_72;
  v32 = CFEqual(cf1, CFSTR("vertCaretOffset"));
  if (cf1 == CFSTR("italicAngle")
    || v32
    || (v33 = CFEqual(cf1, CFSTR("italicAngle")), cf1 == CFSTR("underlinePosition"))
    || v33
    || (v34 = CFEqual(cf1, CFSTR("underlinePosition")), cf1 == CFSTR("underlineThickness"))
    || v34
    || (v35 = CFEqual(cf1, CFSTR("underlineThickness")), cf1 == CFSTR("isFixedPitch"))
    || v35
    || (v36 = CFEqual(cf1, CFSTR("isFixedPitch")), cf1 == CFSTR("numGlyphs"))
    || v36
    || (v37 = CFEqual(cf1, CFSTR("numGlyphs")), cf1 == CFSTR("weightClass"))
    || v37
    || (v38 = CFEqual(cf1, CFSTR("weightClass")), cf1 == CFSTR("widthClass"))
    || v38
    || (v39 = CFEqual(cf1, CFSTR("widthClass")), cf1 == CFSTR("familyClass"))
    || v39
    || CFEqual(cf1, CFSTR("familyClass")))
  {
LABEL_72:
    CFDictionarySetValue(this[2], cf1, value);
  }
  else
  {
LABEL_73:
    *((_BYTE *)this + 8) = 0;
  }
}

void TComponents::~TComponents(TComponents *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC3B0;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TComponents::~TComponents(this);
  JUMPOUT(0x1B5E0CD38);
}

void TComponents::ParseSubElement(TComponents *this, _xmlNode *a2, const __CFString *cf1)
{
  CFDictionaryRef v6;
  __CFArray *v7;
  unint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  void (**v14)(TComponentDef *__hidden);
  unint64_t v15;
  CFArrayRef theArray;
  _QWORD context[2];
  char v18;
  char **v19;
  char *v20;
  CFRange v21;

  if (!*((_BYTE *)this + 8))
    return;
  if (cf1 != CFSTR("ComponentDef"))
  {
    if (!cf1)
      goto LABEL_29;
    if (CFEqual(cf1, CFSTR("ComponentDef")))
      goto LABEL_5;
    if (cf1 != CFSTR("LanguagePreferedList") && !CFEqual(cf1, CFSTR("LanguagePreferedList")))
    {
LABEL_29:
      *((_BYTE *)this + 8) = 0;
      return;
    }
    v14 = &off_1E61CC420;
    v15 = 0xAAAAAAAAAAAAAA01;
    theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!theArray)
      LOBYTE(v15) = 0;
    TElement::Parse((TElement *)&v14, a2);
    if ((_BYTE)v15)
    {
      if (CFArrayGetCount(theArray))
      {
        if ((_BYTE)v15 && theArray)
        {
          v7 = (__CFArray *)*((_QWORD *)this + 2);
          context[0] = v7;
          context[1] = theArray;
          v8 = atomic_load(&qword_1ECDE6B58);
          if (v8 != -1)
          {
            v20 = &v18;
            v19 = &v20;
            std::__call_once(&qword_1ECDE6B58, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:fe180100]<std::tuple<TLanguagePreferedList::GetSystemPreferredLanguages(void)::$_0 &&>>);
          }
          v9 = (const __CFArray *)_MergedGlobals_4;
          if (_MergedGlobals_4)
          {
            v21.length = CFArrayGetCount((CFArrayRef)_MergedGlobals_4);
            v21.location = 0;
            CFArrayApplyFunction(v9, v21, (CFArrayApplierFunction)ExtractLanguageSpecificComponent, context);
          }
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
              Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("ComponentDef"));
              if (Value)
                CFArrayAppendValue(v7, Value);
            }
          }
          goto LABEL_32;
        }
      }
      else
      {
        CFRelease(theArray);
        theArray = 0;
      }
    }
    *((_BYTE *)this + 8) = 0;
LABEL_32:
    TLanguagePreferedList::~TLanguagePreferedList((TLanguagePreferedList *)&v14);
    return;
  }
LABEL_5:
  v14 = &off_1E61CC3E8;
  v15 = 0xAAAAAAAAAAAAAA01;
  theArray = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!theArray)
    LOBYTE(v15) = 0;
  v6 = TComponentDef::Build((CFDictionaryRef *)&v14, a2);
  if (v6)
    CFArrayAppendValue(*((CFMutableArrayRef *)this + 2), v6);
  else
    *((_BYTE *)this + 8) = 0;
  TComponentDef::~TComponentDef((TComponentDef *)&v14);
}

void sub_1B0A15414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TLanguagePreferedList::~TLanguagePreferedList((TLanguagePreferedList *)&a9);
  _Unwind_Resume(a1);
}

CFDictionaryRef TComponentDef::Build(CFDictionaryRef *this, _xmlNode *a2)
{
  TElement::Parse((TElement *)this, a2);
  if (!*((_BYTE *)this + 8))
    return 0;
  if (!CFDictionaryContainsKey(this[2], CFSTR("name")))
    *((_BYTE *)this + 8) = 0;
  if (!CFDictionaryGetCount(this[2]))
  {
    CFRelease(this[2]);
    this[2] = 0;
  }
  if (*((_BYTE *)this + 8))
    return this[2];
  else
    return 0;
}

void TComponentDef::~TComponentDef(TComponentDef *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC3E8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TComponentDef::~TComponentDef(this);
  JUMPOUT(0x1B5E0CD38);
}

void TComponentDef::ParseAttribute(CFMutableDictionaryRef *this, const __CFString *cf1, const __CFString *value)
{
  if (cf1 == CFSTR("name") || cf1 && CFEqual(cf1, CFSTR("name")))
    CFDictionarySetValue(this[2], CFSTR("name"), value);
  else
    *((_BYTE *)this + 8) = 0;
}

void TComponentDef::ParseSubElement(TComponentDef *this, _xmlNode *a2, const __CFString *cf1)
{
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  __CFDictionary *v8;
  __CFData *CmapOverrideDataStruct;
  __CFDictionary *v10;
  __CFData *v11;
  void (**v12)(TcmapOverride *__hidden);
  unint64_t v13;
  CFDictionaryRef theDict;
  void *value;

  if (!*((_BYTE *)this + 8))
    return;
  if (cf1 != CFSTR("Matrix"))
  {
    if (!cf1)
    {
LABEL_6:
      *((_BYTE *)this + 8) = 0;
      return;
    }
    if (!CFEqual(cf1, CFSTR("Matrix")))
    {
      if (cf1 == CFSTR("UnicodeCharSet") || CFEqual(cf1, CFSTR("UnicodeCharSet")))
      {
        if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("UnicodeCharSet")))
          goto LABEL_6;
        v12 = &off_1E61CC538;
        v13 = 0xAAAAAAAAAAAAAA01;
        theDict = 0;
        TElement::Parse((TElement *)&v12, a2);
        if ((_BYTE)v13)
        {
          if (theDict)
          {
            CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), CFSTR("UnicodeCharSet"), theDict);
LABEL_34:
            TUnicodeCharSet::~TUnicodeCharSet((TUnicodeCharSet *)&v12);
            return;
          }
          LOBYTE(v13) = 0;
        }
        *((_BYTE *)this + 8) = 0;
        goto LABEL_34;
      }
      if (cf1 == CFSTR("cmapOverride") || CFEqual(cf1, CFSTR("cmapOverride")))
      {
        if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("cmapOverride")))
          goto LABEL_6;
        v12 = &off_1E61CC570;
        v13 = 0xAAAAAAAAAAAAAA01;
        theDict = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        value = 0;
        if (!theDict)
          LOBYTE(v13) = 0;
        if (TcmapOverride::Build((CFArrayRef *)&v12, a2))
        {
          v8 = (__CFDictionary *)*((_QWORD *)this + 2);
          CmapOverrideDataStruct = TcmapOverride::GetCmapOverrideDataStruct((CFArrayRef *)&v12);
          CFDictionarySetValue(v8, CFSTR("cmapOverride"), CmapOverrideDataStruct);
        }
        else
        {
          *((_BYTE *)this + 8) = 0;
        }
        TcmapOverride::~TcmapOverride((TcmapOverride *)&v12);
        return;
      }
      if (cf1 != CFSTR("Tracking") && !CFEqual(cf1, CFSTR("Tracking")))
      {
        if (cf1 != CFSTR("ToUnicode") && !CFEqual(cf1, CFSTR("ToUnicode"))
          || CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("ToUnicode")))
        {
          goto LABEL_6;
        }
        v12 = &off_1E61CC5E0;
        v13 = 0xAAAAAAAAAAAAAA01;
        theDict = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        value = 0;
        if (!theDict)
          LOBYTE(v13) = 0;
        if (TcmapOverride::Build((CFArrayRef *)&v12, a2))
        {
          v10 = (__CFDictionary *)*((_QWORD *)this + 2);
          v11 = TToUnicode::GetToUnicodeDataStruct((CFArrayRef *)&v12);
          CFDictionarySetValue(v10, CFSTR("ToUnicode"), v11);
        }
        else
        {
          *((_BYTE *)this + 8) = 0;
        }
        TToUnicode::~TToUnicode((TToUnicode *)&v12);
        return;
      }
      if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("Tracking")))
        goto LABEL_6;
      v12 = &off_1E61CC4C8;
      v13 = 0xAAAAAAAAAAAAAA01;
      theDict = 0;
      TElement::Parse((TElement *)&v12, a2);
      if ((_BYTE)v13)
      {
        if (theDict)
        {
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), CFSTR("Tracking"), theDict);
LABEL_52:
          TTracking::~TTracking((TTracking *)&v12);
          return;
        }
        LOBYTE(v13) = 0;
      }
      *((_BYTE *)this + 8) = 0;
      goto LABEL_52;
    }
  }
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("Matrix")))
    goto LABEL_6;
  v12 = &off_1E61CC500;
  v13 = 0xAAAAAAAAAAAAAA01;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  value = 0;
  if (!theDict)
    LOBYTE(v13) = 0;
  TElement::Parse((TElement *)&v12, a2);
  if (!(_BYTE)v13)
    goto LABEL_16;
  if (CFDictionaryGetCount(theDict) != 6)
  {
    LOBYTE(v13) = 0;
    CFRelease(theDict);
    theDict = 0;
  }
  if (!(_BYTE)v13)
    goto LABEL_16;
  Mutable = CFArrayCreateMutable(v6, 6, MEMORY[0x1E0C9B378]);
  value = Mutable;
  if (!Mutable)
    goto LABEL_16;
  TMatrix::AddStashedElement(theDict, Mutable, CFSTR("xx"));
  TMatrix::AddStashedElement(theDict, (__CFArray *)value, CFSTR("xy"));
  TMatrix::AddStashedElement(theDict, (__CFArray *)value, CFSTR("yx"));
  TMatrix::AddStashedElement(theDict, (__CFArray *)value, CFSTR("yy"));
  TMatrix::AddStashedElement(theDict, (__CFArray *)value, CFSTR("tx"));
  TMatrix::AddStashedElement(theDict, (__CFArray *)value, CFSTR("ty"));
  if (value)
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), CFSTR("Matrix"), value);
  else
LABEL_16:
    *((_BYTE *)this + 8) = 0;
  TMatrix::~TMatrix((TMatrix *)&v12);
}

void sub_1B0A159B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TToUnicode::~TToUnicode((TToUnicode *)&a9);
  _Unwind_Resume(a1);
}

CFIndex TcmapOverride::Build(CFArrayRef *this, _xmlNode *a2)
{
  CFIndex result;

  TElement::Parse((TElement *)this, a2);
  if (!*((_BYTE *)this + 8))
    return 0;
  result = CFArrayGetCount(this[2]);
  if (result)
    return (CFIndex)this[2];
  return result;
}

__CFData *TcmapOverride::GetCmapOverrideDataStruct(CFArrayRef *this)
{
  __CFData *Mutable;
  UInt8 bytes[8];
  CFRange v5;
  CFRange v6;

  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    *(_QWORD *)bytes = CFArrayGetCount(this[2]);
    CFDataAppendBytes(Mutable, bytes, 8);
    v5.length = *(_QWORD *)bytes;
    v5.location = 0;
    CFArraySortValues(this[2], v5, MEMORY[0x1E0C98910], 0);
    v6.length = *(_QWORD *)bytes;
    v6.location = 0;
    CFArrayApplyFunction(this[2], v6, (CFArrayApplierFunction)cmapOverrideApplier, Mutable);
    this[3] = Mutable;
  }
  return Mutable;
}

__CFData *TToUnicode::GetToUnicodeDataStruct(CFArrayRef *this)
{
  __CFData *Mutable;
  UInt8 bytes[8];
  CFRange v5;
  CFRange v6;

  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    *(_QWORD *)bytes = CFArrayGetCount(this[2]);
    CFDataAppendBytes(Mutable, bytes, 8);
    v5.length = *(_QWORD *)bytes;
    v5.location = 0;
    CFArraySortValues(this[2], v5, MEMORY[0x1E0C98910], 0);
    v6.length = *(_QWORD *)bytes;
    v6.location = 0;
    CFArrayApplyFunction(this[2], v6, (CFArrayApplierFunction)toUnicodeApplier, Mutable);
    this[3] = Mutable;
  }
  return Mutable;
}

void TLanguagePreferedList::~TLanguagePreferedList(TLanguagePreferedList *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC420;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TLanguagePreferedList::~TLanguagePreferedList(this);
  JUMPOUT(0x1B5E0CD38);
}

void TLanguagePreferedList::ParseSubElement(CFMutableArrayRef *this, _xmlNode *a2, const __CFString *cf1)
{
  void (**v5)(TLanguagePreferedComponentDef *__hidden);
  unint64_t v6;
  CFDictionaryRef theDict;
  uint64_t v8;

  if (*((_BYTE *)this + 8))
  {
    if (cf1 == CFSTR("LanguagePreferedComponentDef") || cf1 && CFEqual(cf1, CFSTR("LanguagePreferedComponentDef")))
    {
      v5 = &off_1E61CC458;
      v6 = 0xAAAAAAAAAAAAAA01;
      theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v8 = 0;
      if (!theDict)
        LOBYTE(v6) = 0;
      TElement::Parse((TElement *)&v5, a2);
      if (!(_BYTE)v6)
        goto LABEL_16;
      if (!CFDictionaryContainsKey(theDict, CFSTR("ComponentDef"))
        || !CFDictionaryContainsKey(theDict, CFSTR("LanguageList")))
      {
        LOBYTE(v6) = 0;
      }
      if (!CFDictionaryGetCount(theDict))
      {
        CFRelease(theDict);
        theDict = 0;
      }
      if ((_BYTE)v6 && theDict)
        CFArrayAppendValue(this[2], theDict);
      else
LABEL_16:
        *((_BYTE *)this + 8) = 0;
      TLanguagePreferedComponentDef::~TLanguagePreferedComponentDef((TLanguagePreferedComponentDef *)&v5);
    }
    else
    {
      *((_BYTE *)this + 8) = 0;
    }
  }
}

void sub_1B0A15D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TLanguagePreferedComponentDef::~TLanguagePreferedComponentDef((TLanguagePreferedComponentDef *)&a9);
  _Unwind_Resume(a1);
}

void ExtractLanguageSpecificComponent(const void *a1, CFArrayRef *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  const void *v12;
  const void *v13;

  Count = CFArrayGetCount(a2[1]);
  if (Count >= 1)
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2[1], v6);
      Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("LanguageList"));
      v9 = CFArrayGetCount(Value);
      if (v9 >= 1)
        break;
LABEL_11:
      if (++v6 == v5)
        return;
    }
    v10 = v9;
    v11 = 0;
    while (1)
    {
      v12 = CFArrayGetValueAtIndex(Value, v11);
      if (v12 == a1 || a1 && v12 && CFEqual(v12, a1))
      {
        v13 = CFDictionaryGetValue(ValueAtIndex, CFSTR("ComponentDef"));
        if (v13)
          break;
      }
      if (v10 == ++v11)
        goto LABEL_11;
    }
    CFArrayAppendValue(*a2, v13);
    CFArrayRemoveValueAtIndex(a2[1], v6);
  }
}

void TLanguagePreferedComponentDef::~TLanguagePreferedComponentDef(TLanguagePreferedComponentDef *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E61CC458;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
}

{
  TLanguagePreferedComponentDef::~TLanguagePreferedComponentDef(this);
  JUMPOUT(0x1B5E0CD38);
}

void TLanguagePreferedComponentDef::ParseSubElement(TLanguagePreferedComponentDef *this, _xmlNode *a2, const __CFString *cf1)
{
  CFDictionaryRef v6;
  CFMutableArrayRef Mutable;
  void (**v8)(TComponentDef *__hidden);
  unint64_t v9;
  void *value;

  if (!*((_BYTE *)this + 8))
    return;
  if (cf1 != CFSTR("ComponentDef"))
  {
    if (!cf1)
    {
LABEL_6:
      *((_BYTE *)this + 8) = 0;
      return;
    }
    if (!CFEqual(cf1, CFSTR("ComponentDef")))
    {
      if (cf1 != CFSTR("language") && !CFEqual(cf1, CFSTR("language")))
        goto LABEL_6;
      if (!CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("LanguageList")))
      {
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        *((_QWORD *)this + 3) = Mutable;
        if (Mutable)
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), CFSTR("LanguageList"), Mutable);
      }
      v8 = &off_1E61CC490;
      v9 = 0xAAAAAAAAAAAAAA01;
      value = 0;
      TElement::Parse((TElement *)&v8, a2);
      if ((_BYTE)v9)
      {
        if (value)
        {
          CFArrayAppendValue(*((CFMutableArrayRef *)this + 3), value);
LABEL_23:
          TLanguage::~TLanguage((TLanguage *)&v8);
          return;
        }
        LOBYTE(v9) = 0;
      }
      *((_BYTE *)this + 8) = 0;
      goto LABEL_23;
    }
  }
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), CFSTR("ComponentDef")))
    goto LABEL_6;
  v8 = &off_1E61CC3E8;
  v9 = 0xAAAAAAAAAAAAAA01;
  value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!value)
    LOBYTE(v9) = 0;
  v6 = TComponentDef::Build((CFDictionaryRef *)&v8, a2);
  if (v6)
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), CFSTR("ComponentDef"), v6);
  else
    *((_BYTE *)this + 8) = 0;
  TComponentDef::~TComponentDef((TComponentDef *)&v8);
}

void sub_1B0A16074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TLanguage::~TLanguage((TLanguage *)va);
  _Unwind_Resume(a1);
}

void TLanguage::~TLanguage(TLanguage *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC490;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TLanguage::~TLanguage(this);
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TLanguage::ParseAttribute(uint64_t this, const __CFString *cf1, CFTypeRef cf)
{
  uint64_t v4;

  v4 = this;
  if (cf1 == CFSTR("string") || cf1 && (this = CFEqual(cf1, CFSTR("string")), (_DWORD)this))
  {
    *(_QWORD *)(v4 + 16) = cf;
    return (uint64_t)CFRetain(cf);
  }
  else
  {
    *(_BYTE *)(v4 + 8) = 0;
  }
  return this;
}

void TTracking::~TTracking(TTracking *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC4C8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TTracking::~TTracking(this);
  JUMPOUT(0x1B5E0CD38);
}

CFNumberRef TTracking::ParseAttribute(CFNumberRef this, const __CFString *cf1, CFStringRef str)
{
  uint64_t v4;
  double valuePtr;

  v4 = (uint64_t)this;
  if (cf1 == CFSTR("trackingValue") || cf1 && (this = (CFNumberRef)CFEqual(cf1, CFSTR("trackingValue")), (_DWORD)this))
  {
    valuePtr = CFStringGetDoubleValue(str);
    this = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
    *(_QWORD *)(v4 + 16) = this;
  }
  else
  {
    *(_BYTE *)(v4 + 8) = 0;
  }
  return this;
}

void TMatrix::~TMatrix(TMatrix *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E61CC500;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
}

{
  TMatrix::~TMatrix(this);
  JUMPOUT(0x1B5E0CD38);
}

void TMatrix::AddStashedElement(TMatrix *this, __CFArray *a2, const __CFString *key)
{
  const __CFString *Value;
  CFNumberRef v5;
  double valuePtr;

  Value = (const __CFString *)CFDictionaryGetValue(this, key);
  valuePtr = CFStringGetDoubleValue(Value);
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(a2, v5);
  CFRelease(v5);
}

void TMatrix::ParseAttribute(CFMutableDictionaryRef *this, const __CFString *cf1, const __CFString *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  if ((cf1 == CFSTR("xx")
     || cf1
     && ((v6 = CFEqual(cf1, CFSTR("xx")), cf1 == CFSTR("xy"))
      || v6
      || (v7 = CFEqual(cf1, CFSTR("xy")), cf1 == CFSTR("yx"))
      || v7
      || (v8 = CFEqual(cf1, CFSTR("yx")), cf1 == CFSTR("yy"))
      || v8
      || (v9 = CFEqual(cf1, CFSTR("yy")), cf1 == CFSTR("tx"))
      || v9
      || (v10 = CFEqual(cf1, CFSTR("tx")), cf1 == CFSTR("ty"))
      || v10
      || CFEqual(cf1, CFSTR("ty"))))
    && !CFDictionaryContainsKey(this[2], cf1))
  {
    CFDictionarySetValue(this[2], cf1, a3);
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
  }
}

void TUnicodeCharSet::~TUnicodeCharSet(TUnicodeCharSet *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1E61CC538;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  TUnicodeCharSet::~TUnicodeCharSet(this);
  JUMPOUT(0x1B5E0CD38);
}

CFCharacterSetRef TUnicodeCharSet::ParseAttribute(CFCharacterSetRef this, const __CFString *cf1, const __CFString *a3)
{
  uint64_t v4;

  v4 = (uint64_t)this;
  if (cf1 != CFSTR("uset") && (!cf1 || (this = (CFCharacterSetRef)CFEqual(cf1, CFSTR("uset")), !(_DWORD)this))
    || (this = CreateCFCharacterSetFromUSetPattern(a3), (*(_QWORD *)(v4 + 16) = this) == 0))
  {
    *(_BYTE *)(v4 + 8) = 0;
  }
  return this;
}

CFCharacterSetRef CreateCFCharacterSetFromUSetPattern(const __CFString *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  CFIndex Length;
  uint64_t v4;
  char *v5;
  char v6;
  CFCharacterSetRef Copy;
  int ItemCount;
  int v9;
  const UniChar *v10;
  int Item;
  int v12;
  int v13;
  unint64_t v14;
  UniChar *v15;
  UniChar *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const UniChar *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int16 v26;
  uint64_t v28;
  UniChar *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  UniChar *v33;
  char *v34;
  CFAllocatorRef v35;
  CFAllocatorRef v36;
  int v37;
  const __CFString *v38;
  int v39;
  int v40;
  const __CFCharacterSet *Mutable;
  int v42;
  const UniChar *v43;
  UniChar *v44;
  char *v45;
  _BYTE v46[4096];
  _QWORD v47[3];
  CFRange v48;
  CFRange v49;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v47[1] = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(v1);
  MEMORY[0x1E0C80A78](Length);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 1) == 0)
    memset(v5, 170, 2 * Length + 2);
  v48.location = 0;
  v48.length = Length;
  CFStringGetCharacters(v2, v48, (UniChar *)v5);
  *(_WORD *)&v5[2 * Length] = 0;
  v37 = 0;
  if (!uset_openPattern())
    return 0;
  if (v37)
  {
    Copy = 0;
    goto LABEL_56;
  }
  v42 = 0;
  v36 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
  Mutable = CFCharacterSetCreateMutable(v36);
  if (!Mutable)
  {
    Copy = 0;
    goto LABEL_55;
  }
  memset(v46, 170, sizeof(v46));
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v29 = (UniChar *)v46;
  v47[0] = v46;
  ItemCount = uset_getItemCount();
  if (ItemCount < 1)
  {
LABEL_51:
    Copy = CFCharacterSetCreateCopy(v36, Mutable);
    goto LABEL_54;
  }
  v9 = 0;
  v33 = (UniChar *)v47;
  v35 = (CFAllocatorRef)*MEMORY[0x1E0C9AE20];
  while (1)
  {
    v39 = -1431655766;
    v40 = -1431655766;
    if (v44 == v43)
      v10 = 0;
    else
      v10 = v43;
    Item = uset_getItem();
    v12 = Item;
    v13 = v42;
    if (v42 != 15)
      goto LABEL_33;
    v14 = Item + 1;
    v16 = (UniChar *)v43;
    v15 = v44;
    v17 = v44 - v43;
    if (v14 <= v17)
    {
      if (v14 >= v17)
        goto LABEL_30;
      v22 = &v43[v14];
LABEL_29:
      v44 = (UniChar *)v22;
      goto LABEL_30;
    }
    v18 = v14 - v17;
    if (v14 - v17 <= (v45 - (char *)v44) >> 1)
    {
      bzero(v44, 2 * v18);
      v22 = &v15[v18];
      goto LABEL_29;
    }
    if (Item <= -2)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    if (v45 - (char *)v43 <= v14)
      v19 = Item + 1;
    else
      v19 = v45 - (char *)v43;
    v28 = v45 - (char *)v43;
    if ((unint64_t)(v45 - (char *)v43) >= 0x7FFFFFFFFFFFFFFELL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v21 = (char *)v47[0];
    v32 = v20;
    if (v47[0] + 2 * v20 <= (unint64_t)v33)
    {
      v30 = v47[0] + 2 * v20;
      v47[0] = v30;
    }
    else
    {
      v34 = (char *)v47[0];
      if (v20 < 0)
        std::__throw_bad_array_new_length[abi:fe180100]();
      v21 = (char *)operator new(2 * v20);
      v30 = (uint64_t)v34;
    }
    v31 = v14 - v17;
    v34 = v21;
    v23 = &v21[2 * v17];
    bzero(v23, 2 * v18);
    v10 = (const UniChar *)v23;
    if (v15 == v16)
    {
      v24 = v32;
      v25 = (char *)v30;
    }
    else
    {
      v24 = v32;
      v25 = (char *)v30;
      do
      {
        v26 = *--v15;
        *((_WORD *)v10-- - 1) = v26;
      }
      while (v15 != v16);
    }
    v43 = v10;
    v44 = (UniChar *)&v23[2 * v31];
    v45 = &v34[2 * v24];
    if (!v16)
      goto LABEL_31;
    if (v29 > v16 || v33 <= v16)
    {
      operator delete(v16);
    }
    else if ((char *)v16 + v28 == v25)
    {
      v47[0] = v16;
    }
LABEL_30:
    v10 = v43;
LABEL_31:
    if (!v10)
      break;
    v42 = 0;
    uset_getItem();
    v13 = v42;
LABEL_33:
    if (v13 > 0)
      break;
    if (v12 <= 0)
    {
      v49.location = v40;
      v49.length = v39 - v40 + 1;
      CFCharacterSetAddCharactersInRange(Mutable, v49);
    }
    else
    {
      v38 = (const __CFString *)0xAAAAAAAAAAAAAAAALL;
      v38 = CFStringCreateWithCharactersNoCopy(v36, v10, v12, v35);
      CFCharacterSetAddCharactersInString(Mutable, v38);
      TCFString::~TCFString((const void **)&v38);
    }
    if (++v9 == ItemCount)
      goto LABEL_51;
  }
  Copy = 0;
LABEL_54:
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,2048ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v43);
LABEL_55:
  TCFRetained<__CFCharacterSet *>::~TCFRetained((const void **)&Mutable);
LABEL_56:
  uset_close();
  return Copy;
}

void sub_1B0A16928(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,2048ul>>::__destroy_vector::operator()[abi:fe180100](v1 + 112);
  TCFRetained<__CFCharacterSet *>::~TCFRetained((const void **)(v1 + 96));
  _Unwind_Resume(a1);
}

void TcmapOverride::~TcmapOverride(TcmapOverride *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E61CC570;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
}

{
  TcmapOverride::~TcmapOverride(this);
  JUMPOUT(0x1B5E0CD38);
}

void TcmapOverride::ParseSubElement(CFMutableArrayRef *this, _xmlNode *a2, const __CFString *cf1)
{
  CFNumberRef v5;
  uint64_t v6;
  void (**v7)(TMap *__hidden);
  __int128 v8;

  if (*((_BYTE *)this + 8))
  {
    if ((cf1 == CFSTR("map") || cf1 && CFEqual(cf1, CFSTR("map")))
      && (*(_QWORD *)&v8 = 0xAAAAAAAAAAAAAA01,
          *((_QWORD *)&v8 + 1) = 0xAAAA0000AAAAAAAALL,
          v7 = &off_1E61CC5A8,
          TElement::Parse((TElement *)&v7, a2),
          (_BYTE)v8)
      && BYTE12(v8)
      && BYTE13(v8))
    {
      v6 = __ROR8__(*(_QWORD *)((char *)&v8 + 4), 32);
      v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &v6);
      CFArrayAppendValue(this[2], v5);
      CFRelease(v5);
    }
    else
    {
      *((_BYTE *)this + 8) = 0;
    }
  }
}

void cmapOverrideApplier(const __CFNumber *a1, __CFData *a2)
{
  uint64_t v3;
  unint64_t valuePtr;

  valuePtr = 0xAAAAAAAAAAAAAAAALL;
  CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
  v3 = __ROR8__(valuePtr, 32);
  CFDataAppendBytes(a2, (const UInt8 *)&v3, 8);
}

void TMap::~TMap(TMap *this)
{
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TMap::ParseAttribute(uint64_t this, const __CFString *cf1, CFStringRef theString)
{
  uint64_t v4;

  v4 = this;
  if (cf1 != CFSTR("charValue"))
  {
    if (cf1)
    {
      this = CFEqual(cf1, CFSTR("charValue"));
      if ((_DWORD)this)
        goto LABEL_4;
      if (cf1 == CFSTR("glyphRefID") || (this = CFEqual(cf1, CFSTR("glyphRefID")), (_DWORD)this))
      {
        if (!*(_BYTE *)(v4 + 21))
        {
          *(_BYTE *)(v4 + 21) = 1;
          this = CFStringGetIntValue(theString);
          *(_DWORD *)(v4 + 16) = this;
          return this;
        }
        goto LABEL_5;
      }
      if (cf1 == CFSTR("charName"))
        return this;
      this = CFEqual(cf1, CFSTR("charName"));
      if (cf1 == CFSTR("glyphName"))
        return this;
      if ((_DWORD)this)
        return this;
      this = CFEqual(cf1, CFSTR("glyphName"));
      if ((_DWORD)this)
        return this;
    }
LABEL_5:
    *(_BYTE *)(v4 + 8) = 0;
    return this;
  }
LABEL_4:
  if (*(_BYTE *)(v4 + 20))
    goto LABEL_5;
  *(_BYTE *)(v4 + 20) = 1;
  this = TElement::CFStringGetUnicodeHexValue((TElement *)v4, theString);
  *(_DWORD *)(v4 + 12) = this;
  if (!(_DWORD)this)
    goto LABEL_5;
  return this;
}

uint64_t TElement::CFStringGetUnicodeHexValue(TElement *this, CFStringRef theString)
{
  ConstStringPtr PascalStringPtr;
  char *v5;
  unsigned __int8 v6;
  uint64_t result;
  char *v8;
  int v9;
  int v10;
  int v11;
  __int128 v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (CFStringGetLength(theString) < 2 || !CFStringHasPrefix(theString, CFSTR("u")))
    goto LABEL_25;
  PascalStringPtr = CFStringGetPascalStringPtr(theString, 0x600u);
  if (PascalStringPtr)
  {
    v5 = (char *)(PascalStringPtr + 2);
    v6 = *PascalStringPtr - 1;
    if (*PascalStringPtr != 1)
    {
      LODWORD(result) = 0;
      v8 = &v5[v6];
      do
      {
        v10 = *v5++;
        v9 = v10;
        if ((v10 - 48) >= 0xA)
        {
          if ((v9 - 65) >= 6)
          {
            if ((v9 - 97) >= 6)
              goto LABEL_25;
            v11 = -87;
          }
          else
          {
            v11 = -55;
          }
        }
        else
        {
          v11 = -48;
        }
        result = (16 * result + v9 + v11);
      }
      while (v5 < v8);
      return result;
    }
    return 0;
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[2] = v12;
  v17[3] = v12;
  v17[0] = v12;
  v17[1] = v12;
  if (!CFStringGetPascalString(theString, (StringPtr)v17, 64, 0x600u))
  {
LABEL_25:
    result = 0;
    *((_BYTE *)this + 8) = 0;
    return result;
  }
  if (LOBYTE(v17[0]) == 1)
    return 0;
  LODWORD(result) = 0;
  v13 = (char *)v17 + 2;
  do
  {
    v15 = *v13++;
    v14 = v15;
    if ((v15 - 48) >= 0xA)
    {
      if ((v14 - 65) >= 6)
      {
        if ((v14 - 97) >= 6)
          goto LABEL_25;
        v16 = -87;
      }
      else
      {
        v16 = -55;
      }
    }
    else
    {
      v16 = -48;
    }
    result = (16 * result + v14 + v16);
  }
  while (v13 < (char *)v17 + (LOBYTE(v17[0]) - 1) + 2);
  return result;
}

void TToUnicode::~TToUnicode(TToUnicode *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E61CC5E0;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
    CFRelease(v3);
}

{
  TToUnicode::~TToUnicode(this);
  JUMPOUT(0x1B5E0CD38);
}

void TToUnicode::ParseSubElement(CFMutableArrayRef *this, _xmlNode *a2, const __CFString *cf1)
{
  CFNumberRef v5;
  uint64_t v6;
  void (**v7)(TMapChar *__hidden);
  __int128 v8;

  if (*((_BYTE *)this + 8))
  {
    if ((cf1 == CFSTR("mapChar") || cf1 && CFEqual(cf1, CFSTR("mapChar")))
      && (*(_QWORD *)&v8 = 0xAAAAAAAAAAAAAA01,
          *((_QWORD *)&v8 + 1) = 0xAAAA0000AAAAAAAALL,
          v7 = &off_1E61CC618,
          TElement::Parse((TElement *)&v7, a2),
          (_BYTE)v8)
      && BYTE12(v8)
      && BYTE13(v8))
    {
      v6 = __ROR8__(*(_QWORD *)((char *)&v8 + 4), 32);
      v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &v6);
      CFArrayAppendValue(this[2], v5);
      CFRelease(v5);
    }
    else
    {
      *((_BYTE *)this + 8) = 0;
    }
  }
}

void toUnicodeApplier(const __CFNumber *a1, __CFData *a2)
{
  uint64_t v3;
  unint64_t valuePtr;

  valuePtr = 0xAAAAAAAAAAAAAAAALL;
  CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
  v3 = __ROR8__(valuePtr, 32);
  CFDataAppendBytes(a2, (const UInt8 *)&v3, 8);
}

void TMapChar::~TMapChar(TMapChar *this)
{
  JUMPOUT(0x1B5E0CD38);
}

ConstStringPtr TMapChar::ParseAttribute(ConstStringPtr this, const __CFString *cf1, CFStringRef theString)
{
  uint64_t v4;
  unsigned int v6;
  unsigned __int8 v7;
  int v8;
  char *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  _OWORD v19[4];
  uint64_t v20;

  v4 = (uint64_t)this;
  v20 = *MEMORY[0x1E0C80C00];
  if (cf1 == CFSTR("fromCharValue"))
    goto LABEL_46;
  if (!cf1)
    goto LABEL_41;
  this = (ConstStringPtr)CFEqual(cf1, CFSTR("fromCharValue"));
  if ((_DWORD)this)
  {
LABEL_46:
    if (!*(_BYTE *)(v4 + 20))
    {
      *(_BYTE *)(v4 + 20) = 1;
      this = CFStringGetPascalStringPtr(theString, 0x600u);
      if (!this)
      {
        *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v19[2] = v14;
        v19[3] = v14;
        v19[0] = v14;
        v19[1] = v14;
        this = (ConstStringPtr)CFStringGetPascalString(theString, (StringPtr)v19, 64, 0x600u);
        if ((_DWORD)this && LOBYTE(v19[0]) >= 2u && BYTE1(v19[0]) == 48 && (BYTE2(v19[0]) | 0x20) == 0x78)
        {
          if (LOBYTE(v19[0]) == 2)
          {
            v8 = 0;
          }
          else
          {
            v8 = 0;
            v15 = (char *)v19 + 3;
            do
            {
              v17 = *v15++;
              v16 = v17;
              if ((v17 - 48) >= 0xA)
              {
                if ((v16 - 65) >= 6)
                {
                  if ((v16 - 97) > 5)
                    goto LABEL_39;
                  v18 = -87;
                }
                else
                {
                  v18 = -55;
                }
              }
              else
              {
                v18 = -48;
              }
              v8 = 16 * v8 + v16 + v18;
            }
            while (v15 < (char *)v19 + (LOBYTE(v19[0]) - 2) + 3);
          }
        }
        else
        {
LABEL_39:
          v8 = 0;
          *(_BYTE *)(v4 + 8) = 0;
        }
LABEL_40:
        *(_DWORD *)(v4 + 12) = v8;
        if (v8)
          return this;
        goto LABEL_41;
      }
      v6 = *this;
      v7 = v6 - 2;
      if (v6 >= 2 && this[1] == 48 && (this[2] | 0x20) == 0x78 && (_BYTE)v6 != 2)
      {
        v8 = 0;
        v9 = (char *)(this + 3);
        v10 = (unint64_t)&this[v7 + 3];
        do
        {
          v12 = *v9++;
          v11 = v12;
          if ((v12 - 48) >= 0xA)
          {
            if ((v11 - 65) >= 6)
            {
              if ((v11 - 97) > 5)
                goto LABEL_24;
              v13 = -87;
            }
            else
            {
              v13 = -55;
            }
          }
          else
          {
            v13 = -48;
          }
          v8 = 16 * v8 + v11 + v13;
        }
        while ((unint64_t)v9 < v10);
        goto LABEL_40;
      }
LABEL_24:
      *(_DWORD *)(v4 + 12) = 0;
    }
LABEL_41:
    *(_BYTE *)(v4 + 8) = 0;
    return this;
  }
  if (cf1 != CFSTR("toCharValue"))
  {
    this = (ConstStringPtr)CFEqual(cf1, CFSTR("toCharValue"));
    if (!(_DWORD)this)
      goto LABEL_41;
  }
  if (*(_BYTE *)(v4 + 21))
    goto LABEL_41;
  *(_BYTE *)(v4 + 21) = 1;
  this = (ConstStringPtr)TElement::CFStringGetUnicodeHexValue((TElement *)v4, theString);
  *(_DWORD *)(v4 + 16) = (_DWORD)this;
  if (!(_DWORD)this)
    goto LABEL_41;
  return this;
}

CFArrayRef XMLSplicedFontCreateFromData(char *buffer, int size)
{
  xmlDocPtr Memory;
  xmlDoc *v5;
  const __CFAllocator *v6;
  _xmlNode *RootElement;
  CFArrayRef v8;
  void *values;
  void (**v11)(TPosingFont *__hidden);
  unint64_t v12;
  CFMutableDictionaryRef Mutable;
  uint64_t v14;

  if (InitXMLParser(void)::once != -1)
    dispatch_once(&InitXMLParser(void)::once, &__block_literal_global_5);
  Memory = xmlReadMemory(buffer, size, "noname.xml", 0, 0);
  if (!Memory)
    return 0;
  v5 = Memory;
  v11 = &off_1E61CC308;
  v12 = 0xAAAAAAAAAAAAAA01;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v14 = 0;
  if (!Mutable)
    LOBYTE(v12) = 0;
  RootElement = xmlDocGetRootElement(v5);
  values = TPosingFont::Build((CFDictionaryRef *)&v11, RootElement);
  v8 = CFArrayCreate(v6, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  xmlFreeDoc(v5);
  TPosingFont::~TPosingFont((TPosingFont *)&v11);
  return v8;
}

void sub_1B0A17304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TPosingFont::~TPosingFont((TPosingFont *)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,2048ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    v3 = (_QWORD *)(a1 + 4120);
    if (a1 + 24 <= (unint64_t)v2)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 4120))
        *v3 = v2;
    }
    else
    {
      operator delete(v2);
    }
  }
}

const void **TCFRetained<__CFCharacterSet *>::~TCFRetained(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

CFArrayRef std::__call_once_proxy[abi:fe180100]<std::tuple<TLanguagePreferedList::GetSystemPreferredLanguages(void)::$_0 &&>>()
{
  CFArrayRef result;

  result = CFLocaleCopyPreferredLanguages();
  _MergedGlobals_4 = (uint64_t)result;
  return result;
}

uint64_t TextCompare(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned int SortWord;
  unsigned int v20;

  if (a3 >= a4)
    v6 = a4;
  else
    v6 = a3;
  if (a3 < a4)
    v7 = -1;
  else
    v7 = 1;
  if (a3 == a4)
    v8 = 0;
  else
    v8 = v7;
  for (; v6; --v6)
  {
    v14 = *a1++;
    v13 = v14;
    v16 = *a2++;
    v15 = v16;
    if (v13 != v16)
    {
      v17 = v13;
      v18 = v15;
      if (!a6)
      {
        if ((char)v13 <= -40)
          v17 = stripTab[v13 - 128];
        if ((char)v15 <= -40)
          v18 = stripTab[v15 - 128];
      }
      if (!a5)
      {
        if ((v17 - 96) <= 0x6Fu)
          v17 = upperTab[v17 - 96];
        if ((v18 - 96) <= 0x6Fu)
          v18 = upperTab[v18 - 96];
      }
      SortWord = GetSortWord(v17);
      v20 = GetSortWord(v18);
      if (SortWord > v20)
        return 1;
      if (SortWord < v20)
        return -1;
    }
  }
  return v8;
}

uint64_t GetSortWord(unsigned int a1)
{
  if (a1 > 0x5F)
  {
    if (a1 == 96)
      return 24832;
    if (a1 <= 0x7A)
      return (unsigned __int16)(((_WORD)a1 << 8) - 8064);
    if ((a1 & 0x80) != 0 && a1 <= 0xD8)
      return (unsigned __int16)cmpTab[a1 - 128];
  }
  return (unsigned __int16)((_WORD)a1 << 8);
}

int8x8_t GetScalerTransformInfo(uint64_t a1, memoryContext *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int8x8_t result;
  __int128 v11;
  memoryContext *v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  size_t *v16;
  size_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  unsigned __int16 *v39;
  double v40;
  unsigned int v41;
  double v42;
  unsigned int v43;
  _DWORD *v44;
  double v45;
  int v46;
  int32x4_t v47;
  int8x16_t v48;
  void *v49[2];
  __int128 v50;
  _BYTE v51[28];

  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 489))
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v51[12] = v6;
    v50 = v6;
    *(_OWORD *)v51 = v6;
    *(_OWORD *)v49 = v6;
    v7 = *(_QWORD *)(v5 + 80);
    if (v5 + 96 != v7)
    {
      v8 = *(_OWORD *)(v5 + 96);
      v9 = *(_OWORD *)(v5 + 112);
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(v5 + 128);
      *(_OWORD *)v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      v5 = *(_QWORD *)(a1 + 24);
    }
    if (sbit_FontMatch(a2, a1, (uint64_t)v49, *(unsigned __int8 *)(v5 + 484), 1))
      *(_WORD *)(*(_QWORD *)(a1 + 24) + 489) = 514;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)&v51[8];
    result = (int8x8_t)v49[0];
    v11 = v50;
    *(_OWORD *)a3 = *(_OWORD *)v49;
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    v12 = *(memoryContext **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_WORD *)(v13 + 130);
    v15 = *(unsigned __int8 *)(v5 + 484);
    v49[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    if (!*(_BYTE *)(v13 + 159))
      goto LABEL_34;
    v16 = ScalerNewScratch(v12, *(_DWORD *)(v13 + 20) + 2408, 1);
    *(_QWORD *)(a1 + 40) = v16;
    v16[6] = (size_t)(v16 + 301);
    v17 = ScalerNewScratch(*(memoryContext **)a1, *(_DWORD *)(v13 + 24) + 136, 0);
    v17[1] = (size_t)(v17 + 17);
    v16[23] = 0;
    v18 = *(int *)(v13 + 28);
    v19 = *(int *)(v13 + 32);
    v20 = v16[6];
    v21 = (uint64_t)v17 + 4 * v19 + 136;
    v16[24] = (size_t)(v17 + 17);
    v16[25] = v21;
    v22 = v21 + 4 * v19;
    v23 = v22 + 2 * v18;
    v16[26] = v22;
    v16[27] = v23;
    v24 = v23 + 2 * v18;
    v16[28] = v24;
    v16[29] = v24 + v19;
    *((_DWORD *)v16 + 73) = v18;
    *((_DWORD *)v16 + 74) = v19;
    v25 = 1358921729;
    v26 = v20 + 4 * v19;
    v27 = v26 + 4 * v19;
    v28 = v27 + 2 * v19;
    if (v20)
    {
      v25 = v28 + 2 * v19;
    }
    else
    {
      v20 = 1358921729;
      v26 = 1358921729;
      v27 = 1358921729;
      v28 = 1358921729;
    }
    v16[30] = v20;
    v16[31] = v26;
    v16[32] = v27;
    v16[33] = v28;
    v16[38] = v25;
    CreateGlyphElement(a1, *(_DWORD *)(v13 + 84), v15, *(_BYTE *)(*(_QWORD *)(a1 + 24) + 490) == 0);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 488))
    {
      v29 = (unsigned __int8 *)(v13 + 92);
      v30 = (unsigned __int8 *)(v13 + 93);
      v31 = (unsigned __int8 *)(v13 + 94);
      v32 = (unsigned __int8 *)(v13 + 95);
    }
    else
    {
      v29 = (unsigned __int8 *)(v13 + 88);
      v30 = (unsigned __int8 *)(v13 + 89);
      v31 = (unsigned __int8 *)(v13 + 90);
      v32 = (unsigned __int8 *)(v13 + 91);
    }
    v33 = *v29;
    if ((int)v19 > (int)v33
      && (v34 = *v30, (int)v19 > (int)v34)
      && (v35 = *v31, (int)v19 > (int)v35)
      && (v36 = *v32, (int)v19 > (int)v36))
    {
      v37 = v16[24];
      *(_DWORD *)a3 = *(_DWORD *)(v37 + 4 * v33) << 10;
      v38 = v16[25];
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(v38 + 4 * v33) << 10;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v37 + 4 * v34) << 10;
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(v38 + 4 * v34) << 10;
      *(_DWORD *)(a3 + 16) = (*(_DWORD *)(v37 + 4 * v35) - *(_DWORD *)(v37 + 4 * v36)) << 10;
      *(_DWORD *)(a3 + 20) = (*(_DWORD *)(v38 + 4 * v35) - *(_DWORD *)(v38 + 4 * v36)) << 10;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v37 + 4 * v36) << 10;
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(v38 + 4 * v36) << 10;
      ScalerDisposeBlock(*(memoryContext **)a1, (char *)v16, -1);
      ScalerDisposeBlock(*(memoryContext **)a1, (char *)v17, -1);
      *(_QWORD *)(a3 + 32) = 0;
    }
    else
    {
LABEL_34:
      if (*(_BYTE *)(v5 + 488))
      {
        ScalerGetFontTable(v12, 1986553185, 0, v49, 1, 36);
        v39 = (unsigned __int16 *)v49[0];
        if (v49[0])
        {
          v40 = (double)v14 * 0.0000152587891;
          *(_DWORD *)a3 = vcvtd_n_s64_f64((double)((int)bswap32(*((unsigned __int16 *)v49[0] + 2)) >> 16) * 0.0000152587891 / v40, 0x10uLL);
          *(_DWORD *)(a3 + 8) = vcvtd_n_s64_f64((double)(((int)bswap32(v39[3]) >> 16) - ((int)bswap32(v39[4]) >> 16))* 0.0000152587891/ v40, 0x10uLL);
          v41 = vcvtd_n_s64_f64((double)((int)bswap32(v39[4]) >> 16) * 0.0000152587891 / v40, 0x10uLL);
        }
        else
        {
          v41 = 0;
          *(_DWORD *)a3 = 0x8000;
          *(_DWORD *)(a3 + 8) = -32768;
          *(_OWORD *)(a3 + 16) = xmmword_1B0AABB70;
        }
        *(_DWORD *)(a3 + 32) = v41;
        *(_DWORD *)(a3 + 36) = 0;
        v44 = (_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 12) = 0;
      }
      else
      {
        ScalerGetFontTable(v12, 1751672161, 0, v49, 1, 36);
        v39 = (unsigned __int16 *)v49[0];
        if (v49[0])
        {
          v42 = (double)v14 * 0.0000152587891;
          *(_DWORD *)(a3 + 4) = vcvtd_n_s64_f64((double)((int)bswap32(*((unsigned __int16 *)v49[0] + 2)) >> 16)* 0.0000152587891/ v42, 0x10uLL);
          *(_DWORD *)(a3 + 12) = vcvtd_n_s64_f64((double)(((int)bswap32(v39[3]) >> 16) - ((int)bswap32(v39[4]) >> 16))* 0.0000152587891/ v42, 0x10uLL);
          v43 = vcvtd_n_s64_f64((double)((int)bswap32(v39[4]) >> 16) * 0.0000152587891 / v42, 0x10uLL);
        }
        else
        {
          v43 = 0;
          *(_DWORD *)(a3 + 4) = 0x8000;
          *(_OWORD *)(a3 + 12) = xmmword_1B0AADD50;
          *(_DWORD *)(a3 + 28) = 0;
        }
        *(_DWORD *)(a3 + 32) = 0;
        *(_DWORD *)(a3 + 36) = v43;
        v44 = (_DWORD *)a3;
        *(_DWORD *)(a3 + 8) = 0;
      }
      *v44 = 0;
      if (v39)
      {
        v45 = (double)v14 * 0.0000152587891;
        *(_DWORD *)(a3 + 20) = vcvtd_n_s64_f64((double)((int)bswap32(v39[9]) >> 16) * 0.0000152587891 / v45, 0x10uLL);
        *(_DWORD *)(a3 + 16) = vcvtd_n_s64_f64((double)((int)bswap32(v39[10]) >> 16) * 0.0000152587891 / v45, 0x10uLL);
        *(_DWORD *)(a3 + 28) = 0;
        *(_DWORD *)(a3 + 24) = vcvtd_n_s64_f64((double)((int)bswap32(v39[11]) >> 16) * 0.0000152587891 / v45, 0x10uLL);
        ScalerReleaseFontTable(v12, v39);
      }
      v46 = M3x3Flags((_DWORD *)(v5 + 96));
      M3x3Mul((int *)(v5 + 96), v46, (int32x2_t *)a3, (const int *)4);
      if (v15)
      {
        v47.i64[0] = 0x800000008000;
        v47.i64[1] = 0x800000008000;
        v48 = (int8x16_t)vaddq_s32(*(int32x4_t *)a3, v47);
        v47.i64[0] = 0xFFFF0000FFFF0000;
        v47.i64[1] = 0xFFFF0000FFFF0000;
        *(int8x16_t *)a3 = vandq_s8(v48, (int8x16_t)v47);
        result = vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)(a3 + 32), (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        *(int8x8_t *)(a3 + 32) = result;
      }
    }
  }
  return result;
}

_QWORD *CreateScalerTransformBlock(_QWORD *a1, memoryContext *a2, char a3, int a4, __int128 *a5, int *a6, int *a7)
{
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  double v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  char *v30;
  unsigned __int8 *v31;
  __int128 v32;
  __int128 v33;
  _WORD *exception;
  _WORD *v36;
  _OWORD v37[31];
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[29] = v14;
  v37[30] = v14;
  v37[27] = v14;
  v37[28] = v14;
  v37[25] = v14;
  v37[26] = v14;
  v37[23] = v14;
  v37[24] = v14;
  v37[21] = v14;
  v37[22] = v14;
  v37[19] = v14;
  v37[20] = v14;
  v37[17] = v14;
  v37[18] = v14;
  v37[15] = v14;
  v37[16] = v14;
  v37[13] = v14;
  v37[14] = v14;
  v37[11] = v14;
  v37[12] = v14;
  v37[9] = v14;
  v37[10] = v14;
  v37[7] = v14;
  v37[8] = v14;
  v37[5] = v14;
  v37[6] = v14;
  v37[3] = v14;
  v37[4] = v14;
  v37[1] = v14;
  v37[2] = v14;
  v37[0] = v14;
  LODWORD(v37[13]) = 0;
  v15 = a1[1];
  if (*(_BYTE *)(v15 + 153) == 1)
  {
    v16 = sbit_CalculateTransformSpaceNeeded(a2, *(_DWORD *)(v15 + 164));
    v15 = a1[1];
    v17 = 96;
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  BYTE11(v37[30]) = 0;
  LODWORD(v37[0]) = 2019979885;
  DWORD2(v37[0]) = 496;
  DWORD2(v37[1]) = 4 * *(unsigned __int16 *)(v15 + 150) + 496;
  DWORD2(v37[2]) = DWORD2(v37[1]) + *(_DWORD *)(v15 + 12);
  DWORD2(v37[3]) = DWORD2(v37[2]) + *(_DWORD *)(v15 + 16);
  HIDWORD(v37[3]) = v16;
  BYTE4(v37[30]) = a3 & 1;
  BYTE5(v37[30]) = (a3 & 0x10) != 0;
  WORD3(v37[30]) = 0;
  BYTE8(v37[30]) = (a3 & 8) != 0;
  *(_WORD *)((char *)&v37[30] + 9) = 0;
  HIDWORD(v37[30]) = 0;
  v18 = sqrt((double)*a7 * (double)*a7 + (double)a7[1] * (double)a7[1]);
  DWORD2(v37[4]) = DWORD2(v37[3]) + v16;
  DWORD2(v37[5]) = a4;
  HIDWORD(v37[5]) = v18;
  v37[6] = identityMatrix;
  v37[7] = unk_1B0AAC51C;
  LODWORD(v37[8]) = 0x40000000;
  v19 = (int)((double)a4 * (double)a6[1] / 4718592.0);
  LODWORD(v37[6]) = (int)((double)a4 * (double)*a6 / 4718592.0);
  LODWORD(v37[7]) = v19;
  v39 = v37[6];
  v40 = v37[7];
  v41 = 0x40000000;
  if (M3x3Concat(a5, -1, &v37[6], -1))
  {
    v37[6] = v39;
    v37[7] = v40;
    LODWORD(v37[8]) = v41;
  }
  HIDWORD(v37[25]) = 0;
  *((_QWORD *)&v37[13] + 1) = 0;
  DWORD1(v37[13]) = 0;
  v20 = v37[7];
  v21 = SLODWORD(v37[7]) >> 16;
  if (SLODWORD(v37[7]) > 16646144)
    v21 = 255;
  LODWORD(v37[30]) = v21;
  if (!BYTE4(v37[30]))
  {
    v26 = a1[1];
    if (*(_WORD *)(v26 + 130) != 1024)
    {
      BYTE4(v37[30]) = 0;
      goto LABEL_22;
    }
    v27 = *(__int16 *)(v26 + 140);
    BYTE4(v37[30]) = v27 > 18;
    if (v27 < 19)
      goto LABEL_22;
  }
  if (M3x3Flags(&v37[6]) == 6
    || v20 * (uint64_t)SLODWORD(v37[6]) == SHIDWORD(v37[6]) * (uint64_t)SDWORD1(v37[6])
    || DecomposeMapping((uint64_t)&v37[6], (*(unsigned __int8 *)(a1[1] + 128) >> 3) & 1))
  {
    goto LABEL_16;
  }
  v22 = DWORD1(v37[8]);
  v23 = a1[1];
  v24 = *(__int16 *)(v23 + 140);
  v25 = v24 << 16;
  if (v24 >= 9)
    v25 = 589824;
  if (SDWORD1(v37[8]) < v25 || SDWORD1(v37[9]) < v25)
  {
LABEL_16:
    HIDWORD(v37[25]) = 66047;
LABEL_17:
    WORD2(v37[30]) = 0;
    BYTE11(v37[30]) = 1;
LABEL_22:
    DWORD2(v37[3]) = 496;
    HIDWORD(v37[3]) = v16;
    v28 = v16 + 496;
    DWORD2(v37[4]) = v16 + 496;
    if (v16 >= 0xFFFFFE10)
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    v38 = v28 + v17;
    if (__CFADD__(v28, v17))
    {
      v36 = __cxa_allocate_exception(2uLL);
      *v36 = 5;
      __cxa_throw(v36, MEMORY[0x1E0DE4F10], 0);
    }
    v29 = ScalerNewBlock(a2, v28 + v17, 3, 0, 0, 1, 0);
    DWORD2(v37[0]) = 1358921729;
    DWORD2(v37[1]) = 1358921729;
    DWORD2(v37[2]) = 1358921729;
    goto LABEL_25;
  }
  if (DWORD1(v37[8]) != DWORD1(v37[9]))
    LODWORD(v37[30]) |= 0x1000u;
  if (HIDWORD(v37[6]) | DWORD1(v37[6]))
    LODWORD(v37[30]) |= 0x1400u;
  HIDWORD(v37[20]) = *(unsigned __int8 *)(v23 + 160);
  DWORD2(v37[20]) = (DWORD2(v37[5]) + 0x8000) >> 16;
  DWORD1(v37[20]) = *(_DWORD *)(v23 + 72);
  BYTE8(v37[29]) = *(_BYTE *)(a1[2] + 56);
  if (SDWORD1(v37[8]) <= SDWORD1(v37[9]))
    v22 = DWORD1(v37[9]);
  LODWORD(v37[18]) = v22;
  *((_QWORD *)&v37[21] + 1) = 68;
  DWORD1(v37[22]) = 0;
  *((_QWORD *)&v37[22] + 1) = 0x4000000000;
  *(_QWORD *)&v37[23] = fnt_RoundToGrid;
  *((_QWORD *)&v37[26] + 1) = fnt_RoundToGrid;
  *(_DWORD *)((char *)&v37[24] + 6) = 196617;
  WORD5(v37[24]) = 0;
  BYTE12(v37[24]) = 1;
  BYTE9(v37[29]) = 0;
  v38 = 496;
  AddToSizeAndCheck(&v38, 4 * *(unsigned __int16 *)(v23 + 150));
  AddToSizeAndCheck(&v38, *(_DWORD *)(a1[1] + 12));
  AddToSizeAndCheck(&v38, *(_DWORD *)(a1[1] + 16));
  AddToSizeAndCheck(&v38, v16);
  AddToSizeAndCheck(&v38, v17);
  v29 = ScalerNewBlock(a2, v38, 3, 0, 1, 1, 0);
  if (!v29)
    goto LABEL_17;
  if (!BYTE4(v37[30]))
    goto LABEL_22;
  if ((a3 & 0x40) != 0)
    BYTE11(v37[30]) |= 2u;
LABEL_25:
  memcpy(v29, v37, 0x1F0uLL);
  a1[3] = v29;
  v29[2] = (char *)v29 + *((unsigned int *)v29 + 2);
  v29[4] = (char *)v29 + *((unsigned int *)v29 + 6);
  v29[6] = (char *)v29 + *((unsigned int *)v29 + 10);
  v29[8] = (char *)v29 + *((unsigned int *)v29 + 14);
  v30 = (char *)v29 + *((unsigned int *)v29 + 18);
  v29[10] = v30;
  v31 = (unsigned __int8 *)a1[1];
  if (v31[153] != 1)
    return v29;
  if ((a3 & 4) == 0 && !*((_BYTE *)v29 + 484))
  {
    if (v31[152])
      return v29;
    goto LABEL_31;
  }
  if (!*((_BYTE *)v29 + 484))
  {
LABEL_31:
    if (M3x3Flags((_DWORD *)v29 + 24) != 6
      && *((int *)v29 + 28) * (uint64_t)*((int *)v29 + 24) != *((int *)v29 + 27) * (uint64_t)*((int *)v29 + 25))
    {
      DecomposeMapping((uint64_t)(v29 + 12), (v31[128] >> 3) & 1);
    }
  }
  if (v29 + 12 != (_QWORD *)v30)
  {
    v32 = *((_OWORD *)v29 + 6);
    v33 = *((_OWORD *)v29 + 7);
    *((_DWORD *)v30 + 8) = *((_DWORD *)v29 + 32);
    *(_OWORD *)v30 = v32;
    *((_OWORD *)v30 + 1) = v33;
  }
  if (sbit_FontMatch(a2, (uint64_t)a1, 0, 0, 1))
    *(_WORD *)((char *)v29 + 489) = 514;
  return v29;
}

_DWORD *AddToSizeAndCheck(_DWORD *result, int a2)
{
  BOOL v2;
  _WORD *exception;

  v2 = __CFADD__(*result, a2);
  *result += a2;
  if (v2)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  return result;
}

void CleanUpTransformBlock(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  if (a1)
  {
    v1 = a1[1];
    if (v1)
    {
      if (*(_DWORD *)v1 == 2019979885)
      {
        v2 = *(void **)(v1 + 216);
        if (v2)
        {
          free(v2);
          *(_QWORD *)(v1 + 216) = 0;
          *(_DWORD *)(v1 + 212) = 0;
        }
      }
    }
  }
}

void TXMLSplicedFont::CreateSpliceFonts(TXMLSplicedFont *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v5;
  uint64_t v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  CFTypeID v13;
  TXMLSplicedFont *v14;
  _DWORD *exception;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16 = v5;
  v17 = v5;
  (*(void (**)(__int128 *__return_ptr, TXMLSplicedFont *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(&v16, this, 0, 0);
  if (*((_QWORD *)&v16 + 1))
  {
    v6 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8);
    if (v6)
    {
      if ((uint64_t)(*((_QWORD *)&v17 + 1) - v17) >= 1)
      {
        v7 = XMLSplicedFontCreateFromData((char *)(v6 + v17), DWORD2(v17) - (int)v17);
        v8 = v7;
        if (!v7)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(_QWORD *)exception = &off_1E6176998;
          exception[2] = 4;
        }
        Count = CFArrayGetCount(v7);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
            v12 = ValueAtIndex;
            if (ValueAtIndex)
            {
              v13 = CFGetTypeID(ValueAtIndex);
              if (v13 == CFDictionaryGetTypeID())
              {
                v14 = (TXMLSplicedFont *)operator new();
                TXMLSplicedFont::TXMLSplicedFont(v14, this, v12);
                AppendFontWithUniquePostscriptName((void **)a2, (uint64_t)v14);
              }
            }
          }
        }
        CFRelease(v8);
      }
    }
  }
  *(_QWORD *)&v16 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v16);
}

void sub_1B0A1826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  TDataReference::~TDataReference((TDataReference *)&a9);
  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void TXMLSplicedFont::TXMLSplicedFont(TXMLSplicedFont *this, const TFileDataSurrogate *a2, const __CFDictionary *a3)
{
  uint64_t v5;
  CFTypeRef v6;

  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = &off_1E61766C0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = &off_1E61CC808;
  *((_QWORD *)this + 2) = &unk_1E61CC9F0;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 7) = v5;
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 24) + 24))(v5 + 24);
  *((_QWORD *)this + 6) = &off_1E6176630;
  *((_DWORD *)this + 16) = 0;
  if (a3)
    v6 = CFRetain(a3);
  else
    v6 = 0;
  *((_QWORD *)this + 9) = v6;
}

void sub_1B0A18354(_Unwind_Exception *a1)
{
  TFont *v1;
  const TFileFragmentReference **v2;

  TFileDataSurrogate::~TFileDataSurrogate(v2);
  TFont::~TFont(v1);
  _Unwind_Resume(a1);
}

void TXMLSplicedFont::~TXMLSplicedFont(TXMLSplicedFont *this)
{
  *(_QWORD *)this = &off_1E61CC808;
  *((_QWORD *)this + 2) = &unk_1E61CC9F0;
  TCFDictionary::~TCFDictionary((const void **)this + 9);
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 6);
  TFont::~TFont(this);
}

{
  TXMLSplicedFont::~TXMLSplicedFont(this);
  JUMPOUT(0x1B5E0CD38);
}

void `non-virtual thunk to'TXMLSplicedFont::~TXMLSplicedFont(TXMLSplicedFont *this)
{
  TXMLSplicedFont::~TXMLSplicedFont((TXMLSplicedFont *)((char *)this - 16));
}

{
  TXMLSplicedFont::~TXMLSplicedFont((TXMLSplicedFont *)((char *)this - 16));
  JUMPOUT(0x1B5E0CD38);
}

uint64_t TXMLSplicedFont::GetKind(TXMLSplicedFont *this)
{
  return 32;
}

uint64_t TXMLSplicedFont::GetFontRef(TXMLSplicedFont *this)
{
  return (uint64_t)this + 48;
}

uint64_t TXMLSplicedFont::GetUnitsPerEm(TXMLSplicedFont *this)
{
  const __CFDictionary *v1;
  const __CFDictionary *Value;
  const __CFDictionary *v3;
  const __CFString *v4;
  uint64_t result;

  v1 = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (v1
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("FontMetrics"))) != 0
    && (v3 = Value, CFDictionaryGetCount(Value) >= 1)
    && (v4 = (const __CFString *)CFDictionaryGetValue(v3, CFSTR("unitsPerEm"))) != 0)
  {
    LOWORD(result) = CFStringGetIntValue(v4);
  }
  else
  {
    LOWORD(result) = 1;
  }
  return (unsigned __int16)result;
}

void TXMLSplicedFont::GetPostscriptName(TXMLSplicedFont *this@<X0>, TFontNameString *a2@<X8>)
{
  const __CFDictionary *v2;
  const __CFString *Value;
  _DWORD *exception;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (!v2 || (Value = (const __CFString *)CFDictionaryGetValue(v2, CFSTR("name"))) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E6176998;
    exception[2] = 4;
  }
  TFontNameString::TFontNameString(a2, 6, Value, CFSTR("en"), 0);
}

void TXMLSplicedFont::GetName(const __CFDictionary **this@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W4>, uint64_t a5@<X8>)
{
  const __CFDictionary *v6;
  const __CFArray *Value;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v15;
  const __CFString *v16;
  const __CFString *v17;
  CFLocaleIdentifier CanonicalLocaleIdentifierFromScriptManagerCodes;
  int v19;
  const __CFString *v20;
  const __CFAllocator *allocator;
  CFLocaleIdentifier v22;
  CFTypeRef cf1;

  if (a2 == 6)
  {
    (*((void (**)(_QWORD *__return_ptr))*this + 10))((_QWORD *)a5);
    return;
  }
  v6 = this[9];
  if (!v6
    || (Value = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("FontNames"))) == 0
    || (v11 = Value, (Count = CFArrayGetCount(Value)) == 0))
  {
LABEL_26:
    *(_QWORD *)(a5 + 16) = 0;
    *(_BYTE *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = &off_1E6176770;
    *(_QWORD *)(a5 + 40) = 0;
    *(_QWORD *)(a5 + 48) = 0;
    *(_QWORD *)(a5 + 56) = 0;
    *(_QWORD *)a5 = &off_1E61768B8;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 66) = 0;
    *(_QWORD *)(a5 + 80) = 0;
    *(_QWORD *)(a5 + 88) = 0;
    return;
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = Count - 1;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v13);
    if (!ValueAtIndex)
      goto LABEL_23;
    v15 = ValueAtIndex;
    v16 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("type"));
    if (!v16 || CFStringGetIntValue(v16) != a2)
      goto LABEL_23;
    if ((a3 > 3 || a3 == 2) && a3 != 0xFFFF)
      goto LABEL_23;
    if (a4 == 0xFFFF)
    {
      v17 = 0;
    }
    else
    {
      v17 = (const __CFString *)CFDictionaryGetValue(v15, CFSTR("language"));
      if (v17)
      {
        cf1 = CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator, v17);
        CanonicalLocaleIdentifierFromScriptManagerCodes = CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator, a4, -128);
        v22 = CanonicalLocaleIdentifierFromScriptManagerCodes;
        if (cf1 == CanonicalLocaleIdentifierFromScriptManagerCodes)
        {
          TCFString::~TCFString((const void **)&v22);
          TCFString::~TCFString(&cf1);
        }
        else
        {
          if (!CanonicalLocaleIdentifierFromScriptManagerCodes || !cf1)
          {
            TCFString::~TCFString((const void **)&v22);
            TCFString::~TCFString(&cf1);
            goto LABEL_23;
          }
          v19 = CFEqual(cf1, CanonicalLocaleIdentifierFromScriptManagerCodes);
          TCFString::~TCFString((const void **)&v22);
          TCFString::~TCFString(&cf1);
          if (!v19)
            goto LABEL_23;
        }
      }
    }
    v20 = (const __CFString *)CFDictionaryGetValue(v15, CFSTR("string"));
    if (v20)
      break;
LABEL_23:
    if (--v13 == -1)
      goto LABEL_26;
  }
  TFontNameString::TFontNameString((TFontNameString *)a5, a2, v20, v17, 0x8000100u);
}

void sub_1B0A18750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  TCFString::~TCFString((const void **)va);
  TCFString::~TCFString((const void **)va1);
  _Unwind_Resume(a1);
}

void TXMLSplicedFont::GetNames(const __CFDictionary **this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  const __CFDictionary *v12;
  const __CFArray *Value;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  __int16 IntValue;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  TFontNameString *v35;
  TFontNameString *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  TFontNameString *v40;
  TFontNameString *v41;
  char *v42;
  uint64_t v43;

  *(_QWORD *)(a2 + 16) = 0;
  v33 = a2 + 16;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  (*((void (**)(char **__return_ptr))*this + 10))(&v34);
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(_QWORD *)a2) >> 5);
    if (v7 + 1 > 0x2AAAAAAAAAAAAAALL)
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(_QWORD *)a2) >> 5);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x155555555555555)
      v10 = 0x2AAAAAAAAAAAAAALL;
    else
      v10 = v9;
    v43 = v33;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TFontNameString>>(v33, v10);
    else
      v11 = 0;
    v39 = v11;
    v40 = (TFontNameString *)&v11[96 * v7];
    v41 = v40;
    v42 = &v11[96 * v10];
    TFontNameString::TFontNameString(v40, (const TFontNameString *)&v34);
    v41 = (TFontNameString *)((char *)v41 + 96);
    std::vector<TFontNameString>::__swap_out_circular_buffer((uint64_t *)a2, &v39);
    v6 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)&v39);
  }
  else
  {
    TFontNameString::TFontNameString(*(TFontNameString **)(a2 + 8), (const TFontNameString *)&v34);
    v6 = v5 + 96;
    *(_QWORD *)(a2 + 8) = v6;
  }
  *(_QWORD *)(a2 + 8) = v6;
  TFontNameString::~TFontNameString((TFontNameString *)&v34);
  v12 = this[9];
  if (v12)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v12, CFSTR("FontNames"));
    v14 = Value;
    if (Value)
    {
      Count = CFArrayGetCount(Value);
      if (Count)
      {
        v16 = Count - 1;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v16);
          v18 = ValueAtIndex;
          if (ValueAtIndex)
          {
            v19 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("type"));
            v20 = (const __CFString *)CFDictionaryGetValue(v18, CFSTR("language"));
            v21 = (const __CFString *)CFDictionaryGetValue(v18, CFSTR("string"));
            if (v19)
            {
              v22 = v21;
              if (v21)
              {
                IntValue = CFStringGetIntValue(v19);
                v24 = IntValue;
                v26 = *(_QWORD *)(a2 + 8);
                v25 = *(_QWORD *)(a2 + 16);
                if (v26 >= v25)
                {
                  v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a2) >> 5);
                  v29 = v28 + 1;
                  if (v28 + 1 > 0x2AAAAAAAAAAAAAALL)
                    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
                  v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(_QWORD *)a2) >> 5);
                  if (2 * v30 > v29)
                    v29 = 2 * v30;
                  if (v30 >= 0x155555555555555)
                    v31 = 0x2AAAAAAAAAAAAAALL;
                  else
                    v31 = v29;
                  v38 = v33;
                  if (v31)
                    v32 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TFontNameString>>(v33, v31);
                  else
                    v32 = 0;
                  v34 = v32;
                  v35 = (TFontNameString *)&v32[96 * v28];
                  v36 = v35;
                  v37 = &v32[96 * v31];
                  TFontNameString::TFontNameString(v35, v24, v22, v20, 0x8000100u);
                  v36 = (TFontNameString *)((char *)v36 + 96);
                  std::vector<TFontNameString>::__swap_out_circular_buffer((uint64_t *)a2, &v34);
                  v27 = *(_QWORD *)(a2 + 8);
                  std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)&v34);
                }
                else
                {
                  TFontNameString::TFontNameString(*(TFontNameString **)(a2 + 8), IntValue, v22, v20, 0x8000100u);
                  v27 = v26 + 96;
                  *(_QWORD *)(a2 + 8) = v27;
                }
                *(_QWORD *)(a2 + 8) = v27;
              }
            }
          }
          --v16;
        }
        while (v16 != -1);
      }
    }
  }
}

void sub_1B0A18A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t TXMLSplicedFont::GetSomeNames(TXMLSplicedFont *this)
{
  return (*(uint64_t (**)(TXMLSplicedFont *))(*(_QWORD *)this + 104))(this);
}

const __CFDictionary *TXMLSplicedFont::GetAscent(TXMLSplicedFont *this)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;

  result = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
    if (result)
    {
      v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("ascender"));
        if (result)
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetDescent(TXMLSplicedFont *this)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;

  result = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
    if (result)
    {
      v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("descender"));
        if (result)
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetLineGap(TXMLSplicedFont *this)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;

  result = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
    if (result)
    {
      v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("lineGap"));
        if (result)
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetMaxAdvance(TXMLSplicedFont *this)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;

  result = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
    if (result)
    {
      v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("advanceMax"));
        if (result)
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
      }
    }
  }
  return result;
}

uint64_t TXMLSplicedFont::GetAvgAdvance(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetXHeight(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetCapHeight(TXMLSplicedFont *this)
{
  return 0;
}

const __CFDictionary *TXMLSplicedFont::GetMinLeftSideBearing(TXMLSplicedFont *this)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;

  result = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
    if (result)
    {
      v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("sideBearingMin"));
        if (result)
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetMinRightSideBearing(TXMLSplicedFont *this)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;

  result = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
    if (result)
    {
      v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("otherSideBearingMin"));
        if (result)
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
      }
    }
  }
  return result;
}

uint64_t TXMLSplicedFont::GetStemH(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetStemV(TXMLSplicedFont *this)
{
  return 0;
}

void TXMLSplicedFont::GetCaretInfo(TXMLSplicedFont *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  const __CFDictionary *v4;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;

  *a4 = 0;
  *a3 = 0;
  *a2 = 0;
  v4 = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (v4)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("FontMetrics"));
    if (Value)
    {
      v9 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        v10 = (const __CFString *)CFDictionaryGetValue(v9, CFSTR("caretSlopeNumeratorv"));
        if (v10)
          *a2 = (int)CFStringGetDoubleValue(v10);
        v11 = (const __CFString *)CFDictionaryGetValue(v9, CFSTR("caretSlopeDenominator"));
        if (v11)
          *a3 = (int)CFStringGetDoubleValue(v11);
        v12 = (const __CFString *)CFDictionaryGetValue(v9, CFSTR("caretOffset"));
        if (v12)
          *a4 = (int)CFStringGetDoubleValue(v12);
      }
    }
  }
}

void TXMLSplicedFont::GetBounds(TXMLSplicedFont *this, double *a2, double *a3, double *a4, double *a5)
{
  const __CFDictionary *v5;
  const __CFDictionary *Value;
  const __CFDictionary *v11;
  const __CFString *v12;
  double DoubleValue;
  const __CFString *v14;
  double v15;
  const __CFString *v16;
  double v17;
  const __CFString *v18;
  double v19;

  *a5 = 0.0;
  *a4 = 0.0;
  *a3 = 0.0;
  *a2 = 0.0;
  v5 = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (v5)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("FontMetrics"));
    if (Value)
    {
      v11 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        v12 = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("xMin"));
        if (v12)
        {
          DoubleValue = CFStringGetDoubleValue(v12);
          v14 = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("yMin"));
          if (v14)
          {
            v15 = CFStringGetDoubleValue(v14);
            v16 = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("xMax"));
            if (v16)
            {
              v17 = CFStringGetDoubleValue(v16);
              v18 = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("yMax"));
              if (v18)
              {
                v19 = CFStringGetDoubleValue(v18);
                *a2 = DoubleValue;
                *a3 = v15;
                *a4 = v17 - DoubleValue;
                *a5 = v19 - v15;
              }
            }
          }
        }
      }
    }
  }
}

double TXMLSplicedFont::GetItalicAngle(TXMLSplicedFont *this)
{
  const __CFDictionary *v1;
  const __CFDictionary *Value;
  const __CFDictionary *v3;
  const __CFString *v4;

  v1 = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (v1
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(v1, CFSTR("FontMetrics"))) != 0
    && (v3 = Value, CFDictionaryGetCount(Value) >= 1)
    && (v4 = (const __CFString *)CFDictionaryGetValue(v3, CFSTR("italicAngle"))) != 0)
  {
    return CFStringGetDoubleValue(v4);
  }
  else
  {
    return 0.0;
  }
}

const __CFDictionary *TXMLSplicedFont::GetUnderlinePosition(TXMLSplicedFont *this)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;

  result = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
    if (result)
    {
      v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("underlinePosition"));
        if (result)
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetUnderlineThickness(TXMLSplicedFont *this)
{
  const __CFDictionary *result;
  const __CFDictionary *v2;

  result = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("FontMetrics"));
    if (result)
    {
      v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(v2, CFSTR("underlineThickness"));
        if (result)
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
      }
    }
  }
  return result;
}

uint64_t TXMLSplicedFont::IsMonospaced(TXMLSplicedFont *this)
{
  return 0;
}

BOOL TXMLSplicedFont::IsItalic(TXMLSplicedFont *this)
{
  return (*(double (**)(TXMLSplicedFont *))(*(_QWORD *)this + 288))(this) != 0.0;
}

void TXMLSplicedFont::GetHorizontalMetrics(TXMLSplicedFont *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, BOOL *a11, BOOL *a12, double *a13, int *a14, int *a15, double *a16, double *a17, double *a18, double *a19, __int16 *a20,__int16 *a21)
{
  const __CFDictionary *v21;
  const __CFDictionary *Value;
  const __CFDictionary *v27;
  const __CFString *v28;
  double DoubleValue;
  const __CFString *v30;
  double v31;
  const __CFString *v32;
  double v33;
  const __CFString *v34;
  double v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  const __CFString *v40;
  const __CFString *v41;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *v44;
  double v45;

  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a8 = 0;
  *a7 = 0;
  *a9 = 0;
  *a10 = 0;
  *a15 = 0;
  *a14 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0.0;
  *a20 = 0;
  *a21 = 0;
  *a19 = 0.0;
  *a18 = 0.0;
  *a17 = 0.0;
  *a16 = 0.0;
  v21 = (const __CFDictionary *)*((_QWORD *)this + 9);
  if (v21)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v21, CFSTR("FontMetrics"));
    if (Value)
    {
      v27 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        v28 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("xMin"));
        if (v28)
        {
          DoubleValue = CFStringGetDoubleValue(v28);
          v30 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("yMin"));
          if (v30)
          {
            v31 = CFStringGetDoubleValue(v30);
            v32 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("xMax"));
            if (v32)
            {
              v33 = CFStringGetDoubleValue(v32);
              v34 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("yMax"));
              if (v34)
              {
                v35 = CFStringGetDoubleValue(v34);
                *a16 = DoubleValue;
                *a17 = v31;
                *a18 = v33 - DoubleValue;
                *a19 = v35 - v31;
              }
            }
          }
        }
        v36 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("ascender"));
        if (v36)
          *a2 = (int)CFStringGetDoubleValue(v36);
        v37 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("descender"));
        if (v37)
          *a3 = (int)CFStringGetDoubleValue(v37);
        v38 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("lineGap"));
        if (v38)
          *a4 = (int)CFStringGetDoubleValue(v38);
        v39 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("advanceMax"));
        if (v39)
          *a7 = (int)CFStringGetDoubleValue(v39);
        v40 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("sideBearingMin"));
        if (v40)
          *a9 = (int)CFStringGetDoubleValue(v40);
        v41 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("otherSideBearingMin"));
        if (v41)
          *a10 = (int)CFStringGetDoubleValue(v41);
        v42 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("underlinePosition"));
        if (v42)
          *a14 = (int)CFStringGetDoubleValue(v42);
        v43 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("underlineThickness"));
        if (v43)
          *a15 = (int)CFStringGetDoubleValue(v43);
        v44 = (const __CFString *)CFDictionaryGetValue(v27, CFSTR("italicAngle"));
        if (v44)
        {
          v45 = CFStringGetDoubleValue(v44);
          *a13 = v45;
        }
        else
        {
          v45 = *a13;
        }
        *a12 = v45 != 0.0;
      }
    }
  }
}

uint64_t TXMLSplicedFont::GetGlyphsPerCharacters(TXMLSplicedFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, unsigned int *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t TXMLSplicedFont::GetCharactersPerGlyphs(TXMLSplicedFont *this, const unsigned __int16 *a2, unsigned __int16 *a3)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetCharactersForGlyph(TXMLSplicedFont *this, unsigned int a2, unsigned __int16 *a3)
{
  return 0;
}

uint64_t TXMLSplicedFont::CopyCharacterSet(TXMLSplicedFont *this)
{
  return 0;
}

void TXMLSplicedFont::GetOS2UnicodeRanges(TXMLSplicedFont *this, unsigned int a2, unsigned int *a3, float a4)
{
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
}

uint64_t TXMLSplicedFont::GetNumberOfGlyphs(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetVerticalMetrics(TXMLSplicedFont *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, double *a10, double *a11, double *a12, double *a13)
{
  uint64_t result;

  result = (*(uint64_t (**)(TXMLSplicedFont *, double *, double *, double *, double *))(*(_QWORD *)this + 280))(this, a10, a11, a12, a13);
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a9 = 0;
  *a8 = 0;
  return result;
}

void TXMLSplicedFont::GetGlyphName(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E61768F8;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E6176770;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
}

uint64_t TXMLSplicedFont::VerifyGlyphName(TXMLSplicedFont *this, unsigned int a2, const char *a3)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetGlyphID(TXMLSplicedFont *this, const char *a2)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetRefCon(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TType1OTFCIDFont::LookupCIDMap(TType1OTFCIDFont *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 552))(*((_QWORD *)this + 4));
}

void sub_1B0A19488(void *a1)
{
  _WORD *exception;

  __cxa_begin_catch(a1);
  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = &off_1E61B2D68;
  exception[4] = 5;
}

void sub_1B0A194C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t TType1OTFCIDFont::LookupCIDMap(TType1OTFCIDFont *this, unsigned __int16 a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *v4;
  int v5;
  unsigned __int8 *v10;
  unsigned int v11;
  __int128 v12;
  const TFontObjectSurrogate *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  _WORD *exception;
  _OWORD v19[2];
  TType1CIDFont *v20[2];
  unint64_t v21;

  v4 = (unsigned int *)*((_QWORD *)this + 4);
  v5 = v4[89];
  if (v5 >= 5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 5;
  }
  v10 = (unsigned __int8 *)v4[88];
  v11 = v4[94];
  while (1)
  {
    v21 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19[1] = v12;
    *(_OWORD *)v20 = v12;
    v19[0] = v12;
    v13 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 216))(this);
    v14 = (*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 120))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v19, v13, v14, v11 + v5 * a2, 2 * v5);
    TType1CIDFont::GetCIDFDIndex(v20[1], v10, v5, a3, a4, v15);
    if (!a2 || *a4)
      break;
    *((_QWORD *)&v19[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v19 + 8));
    a2 = 0;
  }
  v16 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 4) + 552))(*((_QWORD *)this + 4), a2);
  *((_QWORD *)&v19[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v19 + 8));
  return v16;
}

void sub_1B0A1964C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)va);
  _Unwind_Resume(a1);
}

void TType1OTFCIDFont::GetCIDDecryptedOutline(TType1OTFCIDFont *this@<X0>, int a2@<W2>, unsigned int a3@<W3>, _QWORD *a4@<X8>)
{
  __int128 v8;
  const TFontObjectSurrogate *v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  _OWORD v13[2];
  __int128 v14;
  unint64_t v15;

  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = v8;
  v14 = v8;
  v13[0] = v8;
  v9 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 216))(this);
  v10 = (*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v13, v9, v10, (a2 + *(_DWORD *)(*((_QWORD *)this + 4) + 364) - 1), a3);
  v11 = (const void *)*((_QWORD *)&v14 + 1);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  v12 = (void *)operator new[]();
  *a4 = v12;
  memcpy(v12, v11, a3);
  *((_QWORD *)&v13[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v13 + 8));
}

void sub_1B0A19750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TType1OTFCIDFont::GetOneSubrMap(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  int v7;
  uint64_t v8;
  unint64_t v10;
  const unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  __int128 v17;
  const TFontObjectSurrogate *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  BOOL v23;
  _WORD *exception;
  _WORD *v26;
  _OWORD v27[2];
  unsigned __int8 *v28[2];
  unint64_t v29;

  v7 = *(__int16 *)(a2 + 2);
  v8 = *(__int16 *)(a2 + 2);
  if (atomic_load((unint64_t *)(a2 + 16)))
  {
    v10 = atomic_load((unint64_t *)(a2 + 16));
    v11 = (const unsigned __int8 *)(v10 + (int)v8 * a3);
    v12 = BytesToCard(v11, *(__int16 *)(a2 + 2));
    v13 = BytesToCard(&v11[v7], v8);
    v14 = *(_QWORD *)(a2 + 24);
    if (v14 <= v12 || v14 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    *a4 = v13 - v12;
  }
  else
  {
    v29 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = v17;
    *(_OWORD *)v28 = v17;
    v27[0] = v17;
    v18 = (const TFontObjectSurrogate *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v27, v18, v19, (*(_DWORD *)(a2 + 8) + v7 * a3), 2 * v7);
    v20 = v27[0];
    v21 = v28[1];
    v12 = BytesToCard(v28[1], v7);
    v22 = BytesToCard(&v21[v8], v7);
    if (v12 >= v20 || (v22 <= v20 ? (v23 = v22 >= v12) : (v23 = 0), !v23))
    {
      v26 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v26 = &off_1E61B2D68;
      v26[4] = 5;
    }
    *a4 = v22 - v12;
    *((_QWORD *)&v27[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v27 + 8));
  }
  return v12;
}

void sub_1B0A19920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a9);
  _Unwind_Resume(a1);
}

void TType1OTFCIDFont::GetDecryptedSubrData(TType1OTFCIDFont *this, int a2, unsigned int a3, char *a4, int a5, int a6)
{
  uint64_t v11;
  __int128 v12;
  const TFontObjectSurrogate *v13;
  uint64_t v14;
  _OWORD v15[2];
  void *__src[2];
  unint64_t v17;

  v11 = *(_QWORD *)(*((_QWORD *)this + 4) + 448);
  v17 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = v12;
  *(_OWORD *)__src = v12;
  v15[0] = v12;
  v13 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 216))(this);
  v14 = (*(uint64_t (**)(TType1OTFCIDFont *))(*(_QWORD *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v15, v13, v14, (a2 + *(_DWORD *)(v11 + 4 * a6) - 1), a3);
  memcpy(a4, __src[1], a3);
  *((_QWORD *)&v15[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v15 + 8));
}

const unsigned __int8 *TType1OTFCIDFont::GetSubrData(const void **this, const unsigned __int8 **a2, __int16 *a3, const unsigned __int8 **a4)
{
  const unsigned __int8 *v8;
  const unsigned __int8 *result;

  TType1CIDFont::GetSubrData(this, a2, a3, a4);
  v8 = *a2;
  if (v8 && *a3)
    return &v8[*a3 + *a3 * (uint64_t)(*((int (**)(const void **))*this + 18))(this)];
  result = 0;
  *a4 = 0;
  return result;
}

unsigned __int8 *TType1OTFCIDFont::LoadSubrArrayDataPerFD(TType1OTFCIDFont *this, __int16 a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  _QWORD v6[4];
  __int16 v7;
  __int16 v8;

  v3 = *a3;
  if (!*a3)
  {
    v8 = -21846;
    v7 = -21846;
    memset(v6, 170, sizeof(v6));
    v3 = (unsigned __int8 *)(*(uint64_t (**)(TType1OTFCIDFont *, _QWORD, __int16 *, __int16 *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)this + 368))(this, a2, &v8, &v7, &v6[3], v6, &v6[2], &v6[1]);
    *a3 = v3;
  }
  return v3;
}

uint64_t TType1OTFCIDFont::GetGlobalSubrCount(TType1OTFCIDFont *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 4) + 318);
}

uint64_t TType1OTFCIDFont::GetGlobalSubrArrayAndObjectData(TType1OTFCIDFont *this, __int16 *a2, const unsigned __int8 **a3, const unsigned __int8 **a4, const unsigned __int8 **a5, const unsigned __int8 **a6)
{
  uint64_t v6;
  uint64_t result;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;

  v6 = *((_QWORD *)this + 4);
  result = *(_QWORD *)(v6 + 320);
  if (result
    && (v8 = *(unsigned __int8 *)(v6 + 317),
        v9 = *(_QWORD *)(v6 + 328),
        v10 = *(unsigned __int8 *)(v6 + 317)
            + *(unsigned __int16 *)(v6 + 318) * (unint64_t)*(unsigned __int8 *)(v6 + 317),
        v9 > v10))
  {
    v11 = (const unsigned __int8 *)(result + v10);
    *a2 = v8;
    *a3 = v11;
    *a4 = v11;
    v12 = (const unsigned __int8 *)(result + v9);
  }
  else
  {
    v12 = 0;
    result = 0;
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  *a5 = v12;
  *a6 = v12;
  return result;
}

uint64_t GetSfntGlyph(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4)
{
  memoryContext *v7;
  uint64_t v8;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  void *v15;

  v15 = (void *)0xAAAAAAAAAAAAAAAALL;
  v7 = *(memoryContext **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  if (*(_WORD *)(v8 + 144))
    v10 = 8;
  else
    v10 = 4;
  if (*(_WORD *)(v8 + 144))
    v11 = 2;
  else
    v11 = 1;
  ScalerGetTableParts(v7, *(_DWORD *)(v8 + 96), a2 << v11, v10, &v15, 0);
  if (*(_WORD *)(*(_QWORD *)(a1 + 8) + 144))
  {
    v12 = bswap32(*(_DWORD *)v15);
    v13 = bswap32(*((_DWORD *)v15 + 1));
  }
  else
  {
    v12 = (bswap32(*(unsigned __int16 *)v15) >> 15) & 0x1FFFE;
    v13 = (bswap32(*((unsigned __int16 *)v15 + 1)) >> 15) & 0x1FFFE;
  }
  ScalerReleaseFontTable(*(memoryContext **)a1, v15);
  if (v13 < v12 || v13 > *(_DWORD *)(*(_QWORD *)(a1 + 8) + 108))
    return 0;
  *a3 = v12;
  *a4 = v13 - v12;
  return 1;
}

void T1CIDMetricsTable::~T1CIDMetricsTable(T1CIDMetricsTable *this)
{
  *(_QWORD *)this = &off_1E61CCA28;
  *((_QWORD *)this + 5) = &off_1E6176770;
  TDataReference::DucRefCount((T1CIDMetricsTable *)((char *)this + 40));
}

{
  *(_QWORD *)this = &off_1E61CCA28;
  *((_QWORD *)this + 5) = &off_1E6176770;
  TDataReference::DucRefCount((T1CIDMetricsTable *)((char *)this + 40));
  JUMPOUT(0x1B5E0CD38);
}

void T1CIDMetricsTable::T1CIDMetricsTable(T1CIDMetricsTable *this, const TFontObjectSurrogate *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  int v9;
  __int128 v13;
  unsigned __int16 *v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _WORD *exception;
  _WORD *v23;
  _OWORD v24[2];
  __int128 v25;
  unint64_t v26;

  v9 = a5;
  *(_QWORD *)this = &off_1E61CCA28;
  *((_QWORD *)this + 1) = 0;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[1] = v13;
  v25 = v13;
  v24[0] = v13;
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v24, a2, a3, a4, a5, 2u);
  *((_DWORD *)this + 4) = v24[0];
  *((_WORD *)this + 10) = bswap32((unsigned __int16)**((_WORD **)&v25 + 1)) >> 16;
  *((_DWORD *)this + 6) = v9 + 2;
  *((_QWORD *)&v24[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v24 + 8));
  TFontObjectTable::TFontObjectTable((T1CIDMetricsTable *)((char *)this + 32), a2, a3, *((unsigned int *)this + 6), *((_DWORD *)this + 4) - *((_DWORD *)this + 6));
  v14 = (unsigned __int16 *)*((_QWORD *)this + 9);
  v15 = (char *)v14 + *((unsigned int *)this + 8);
  switch(*((_WORD *)this + 10))
  {
    case 0:
      if (a6 * a7 >= *((_DWORD *)this + 4) - *((_DWORD *)this + 6))
        return;
      v16 = (uint64_t)v14 + a6 * a7;
      break;
    case 2:
      *(_QWORD *)&v24[0] = *((_QWORD *)this + 9);
      *((_QWORD *)&v24[0] + 1) = v15;
      v21 = TBinarySearch::DoBinarySearch((TBinarySearch *)v24, a6);
      if (!v21)
        return;
      v16 = (uint64_t)v21 + 4;
      break;
    case 4:
      *(_QWORD *)&v24[0] = *((_QWORD *)this + 9);
      *((_QWORD *)&v24[0] + 1) = v15;
      v18 = (unsigned __int16 *)TBinarySearch::DoBinarySearch((TBinarySearch *)v24, a6);
      if (!v18)
        return;
      v19 = bswap32(v18[2]) >> 16;
      if (v19 <= 9 || *((_DWORD *)this + 4) - v9 <= v19)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)exception = &off_1E61B2D68;
        exception[4] = 5;
      }
      v16 = (uint64_t)v14 + v19 + (int)(a6 - (bswap32(v18[1]) >> 16)) * (uint64_t)a7 - 2;
      break;
    case 6:
      *(_QWORD *)&v24[0] = *((_QWORD *)this + 9);
      *((_QWORD *)&v24[0] + 1) = v15;
      v20 = TBinarySingleSearch::DoBinarySearch((TBinarySingleSearch *)v24, a6);
      if (!v20)
        return;
      v16 = (uint64_t)v20 + 2;
      break;
    case 8:
      v17 = bswap32(*v14) >> 16;
      if (v17 > a6 || v17 + (bswap32(v14[1]) >> 16) <= a6)
        return;
      v16 = (uint64_t)v14 + (int)(a6 - v17) * (uint64_t)a7 + 4;
      break;
    default:
      v23 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v23 = &off_1E61B2D68;
      v23[4] = 5;
  }
  *((_QWORD *)this + 1) = v16;
}

void sub_1B0A19F3C(_Unwind_Exception *a1)
{
  TFontObjectTable *v1;

  TFontObjectTable::~TFontObjectTable(v1);
  _Unwind_Resume(a1);
}

void TType1CIDFont::GetAltGlyphMetricsParametres(const void **this, unsigned __int16 *a2, int *a3, unsigned int *a4, int *a5, int *a6, unsigned int *a7, unsigned int *a8, int *a9, int *a10, int *a11)
{
  unsigned __int16 *CIDFont;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  char v22;
  __int128 v23;
  const TFontObjectSurrogate *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  _BOOL4 v28;
  __int128 v29;
  const TFontObjectSurrogate *v30;
  uint64_t v31;
  __int128 v32;
  const TFontObjectSurrogate *v33;
  uint64_t v34;
  int *v35;
  int v36;
  int *v37;
  __int128 v38;
  const TFontObjectSurrogate *v39;
  uint64_t v40;
  int *v41;
  int *v42;
  int *v43;
  BOOL v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;

  v45 = *a2 < *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8);
  v41 = a6;
  *a6 = 0;
  *a4 = 0;
  *a11 = 2097152001;
  *a10 = 2097152001;
  *a9 = 2097152001;
  *a8 = 2097152001;
  *a7 = 2097152001;
  v42 = a5;
  v43 = a3;
  *a5 = 2097152001;
  *a3 = 2097152001;
  CIDFont = (unsigned __int16 *)TType1CIDFont::GetCIDFont(this);
  v19 = 0;
  v20 = *a2;
  if (CIDFont[40] > v20)
  {
    v21 = 0;
    v22 = v45;
  }
  else
  {
    v21 = 0;
    v22 = v45;
    if (CIDFont[41] >= v20)
    {
      v51 = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v49 = v23;
      v50 = v23;
      v47 = v23;
      v48 = v23;
      v46 = v23;
      v24 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
      T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v46, v24, 1095519576, 0x10000, 12, *a2, 10);
      v25 = (unsigned __int16 *)*((_QWORD *)&v46 + 1);
      if (*((_QWORD *)&v46 + 1))
      {
        *a2 -= bswap32((unsigned __int16)**((_WORD **)&v46 + 1)) >> 16;
        *v43 = bswap32(v25[1]) & 0xFFFF0000;
        *a4 = bswap32(v25[2]) & 0xFFFF0000;
        *v42 = bswap32(v25[3]) & 0xFFFF0000;
        *v41 = bswap32(v25[4]) & 0xFFFF0000;
        v21 = *v43 < 2097152000;
        v19 = *v42 < 2097152000;
      }
      else
      {
        v19 = 0;
        v21 = 0;
      }
      *(_QWORD *)&v46 = &off_1E61CCA28;
      *((_QWORD *)&v48 + 1) = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)((char *)&v48 + 8));
      v22 = 1;
    }
  }
  v26 = (unsigned __int16 *)TType1CIDFont::GetCIDFont(this);
  v27 = *a2;
  if (v26[42] <= v27 && v26[43] >= v27)
  {
    v51 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v49 = v29;
    v50 = v29;
    v47 = v29;
    v48 = v29;
    v46 = v29;
    v30 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v46, v30, 1380930625, 0x10000, 12, *a2, 6);
    v31 = *((_QWORD *)&v46 + 1);
    v28 = *((_QWORD *)&v46 + 1) != 0;
    if (*((_QWORD *)&v46 + 1))
    {
      *a2 -= bswap32((unsigned __int16)**((_WORD **)&v46 + 1)) >> 16;
      *a10 = bswap32(*(unsigned __int16 *)(v31 + 2)) & 0xFFFF0000;
      *a9 = bswap32(*(unsigned __int16 *)(v31 + 4)) & 0xFFFF0000;
    }
    *(_QWORD *)&v46 = &off_1E61CCA28;
    *((_QWORD *)&v48 + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)&v48 + 8));
  }
  else
  {
    v28 = 0;
    if ((v22 & 1) == 0)
      *a2 = 0;
  }
  v51 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = v32;
  v50 = v32;
  v47 = v32;
  v48 = v32;
  v46 = v32;
  v33 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
  T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v46, v33, 1447447896, 0x20000, 24, *a2, 6);
  v34 = *((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v35 = a11;
    *a11 = bswap32((unsigned __int16)**((_WORD **)&v46 + 1)) & 0xFFFF0000;
    *a7 = bswap32(*(unsigned __int16 *)(v34 + 2)) & 0xFFFF0000;
    *a8 = bswap32(*(unsigned __int16 *)(v34 + 4)) & 0xFFFF0000;
    *(_QWORD *)&v46 = &off_1E61CCA28;
    *((_QWORD *)&v48 + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)&v48 + 8));
    if (v28)
    {
LABEL_17:
      if (v21)
        return;
      v36 = -*v35;
      v37 = v43;
      goto LABEL_22;
    }
  }
  else
  {
    *(_QWORD *)&v46 = &off_1E61CCA28;
    *((_QWORD *)&v48 + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)&v48 + 8));
    *(_QWORD *)&v49 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v38 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v47 = v38;
    v48 = v38;
    v46 = v38;
    v39 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v46, v39, 1447447896, 18, 6);
    v40 = *((_QWORD *)&v48 + 1);
    v35 = a11;
    *a11 = bswap32((unsigned __int16)**((_WORD **)&v48 + 1)) & 0xFFFF0000;
    *a7 = bswap32(*(unsigned __int16 *)(v40 + 2)) & 0xFFFF0000;
    *a8 = bswap32(*(unsigned __int16 *)(v40 + 4)) & 0xFFFF0000;
    *((_QWORD *)&v46 + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)&v46 + 8));
    if (v28)
      goto LABEL_17;
  }
  if (v19)
    return;
  v36 = *v35;
  v37 = v42;
LABEL_22:
  *v37 = v36;
}

uint64_t TType1CIDFont::GetAltGlyphFDIndex(const void **this, unsigned __int16 *a2)
{
  BOOL v4;
  unsigned __int16 *CIDFont;
  unsigned int v6;
  __int128 v8;
  const TFontObjectSurrogate *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  __int128 v13;
  const TFontObjectSurrogate *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v4 = *a2 < *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8);
  CIDFont = (unsigned __int16 *)TType1CIDFont::GetCIDFont(this);
  v6 = *a2;
  if (CIDFont[40] <= v6 && CIDFont[41] >= v6)
  {
    v21 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19 = v8;
    v20 = v8;
    v17 = v8;
    v18 = v8;
    v16 = v8;
    v9 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v16, v9, 1095519576, 0x10000, 12, *a2, 10);
    if (*((_QWORD *)&v16 + 1))
      *a2 -= bswap32((unsigned __int16)**((_WORD **)&v16 + 1)) >> 16;
    *(_QWORD *)&v16 = &off_1E61CCA28;
    *((_QWORD *)&v18 + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)&v18 + 8));
    v4 = 1;
  }
  v10 = (unsigned __int16 *)TType1CIDFont::GetCIDFont(this);
  v11 = *a2;
  if (v10[42] <= v11 && v10[43] >= v11)
  {
    v21 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19 = v13;
    v20 = v13;
    v17 = v13;
    v18 = v13;
    v16 = v13;
    v14 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v16, v14, 1380930625, 0x10000, 12, *a2, 6);
    if (*((_QWORD *)&v16 + 1))
      *a2 -= bswap32((unsigned __int16)**((_WORD **)&v16 + 1)) >> 16;
    *(_QWORD *)&v16 = &off_1E61CCA28;
    *((_QWORD *)&v18 + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)&v18 + 8));
  }
  else if (!v4)
  {
    *a2 = 0;
  }
  return (*((uint64_t (**)(const void **, _QWORD))*this + 43))(this, *a2);
}

uint64_t TType1CIDFont::GetFontDesc(TType1CIDFont *this)
{
  if (TType1CIDRenderingContext::gCIDRendering)
    return (*(uint64_t (**)(TType1CIDFont *, _QWORD))(*(_QWORD *)this + 312))(this, *(__int16 *)(TType1CIDRenderingContext::gCIDRendering + 88));
  else
    return *(_QWORD *)(*((_QWORD *)this + 4) + 128);
}

uint64_t TType1CIDFont::GetFontDesc(const void **this, int a2)
{
  return *((_QWORD *)TType1CIDFont::GetCIDFont(this) + 7) + 488 * a2 + 36;
}

uint64_t TType1CIDFont::GetOverrideMetrics(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v3;

  if (!*(_BYTE *)(TType1CIDRenderingContext::gCIDRendering + 23))
    return 0;
  v3 = *(_DWORD *)(TType1CIDRenderingContext::gCIDRendering + 24);
  result = *(unsigned int *)(TType1CIDRenderingContext::gCIDRendering + 28);
  a2[2] = result;
  *a2 -= v3;
  a2[7] = v3;
  a2[5] -= result;
  return result;
}

uint64_t TType1CIDFont::GetCIDBytes(TType1CIDFont *this, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  uint64_t result;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  switch((int)a2)
  {
    case 1:
      v2 = 0;
      v3 = *(unsigned __int8 **)this;
      goto LABEL_9;
    case 2:
      v5 = 0;
      v6 = *(unsigned __int8 **)this;
      goto LABEL_8;
    case 3:
      v7 = 0;
      v8 = *(unsigned __int8 **)this;
      goto LABEL_7;
    case 4:
      v9 = *(unsigned __int8 **)this;
      v8 = (unsigned __int8 *)(*(_QWORD *)this + 1);
      *(_QWORD *)this = v8;
      v7 = *v9 << 8;
LABEL_7:
      v6 = v8 + 1;
      *(_QWORD *)this = v8 + 1;
      v5 = (v7 | *v8) << 8;
LABEL_8:
      v3 = v6 + 1;
      *(_QWORD *)this = v6 + 1;
      v2 = (v5 | *v6) << 8;
LABEL_9:
      *(_QWORD *)this = v3 + 1;
      result = v2 | *v3;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t TType1CIDFont::GetCIDFDIndex(TType1CIDFont *this, unsigned __int8 *a2, unsigned __int16 a3, _DWORD *a4, unsigned int *a5, unsigned int *a6)
{
  int v9;
  __int16 CIDBytes;
  int v11;
  TType1CIDFont *v13;

  v9 = (int)a2;
  v13 = this;
  CIDBytes = TType1CIDFont::GetCIDBytes((TType1CIDFont *)&v13, (unsigned __int8 **)(unsigned __int16)a2);
  v11 = TType1CIDFont::GetCIDBytes((TType1CIDFont *)&v13, (unsigned __int8 **)a3);
  *a4 = v11;
  v13 = (TType1CIDFont *)((char *)v13 + v9);
  *a5 = (unsigned __int16)(TType1CIDFont::GetCIDBytes((TType1CIDFont *)&v13, (unsigned __int8 **)a3) - v11);
  return CIDBytes;
}

uint64_t TType1CIDFont::LookupCIDMap(const void **this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  const TFontObjectSurrogate *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t CIDFDIndex;
  int v19;
  unsigned int v20;
  _OWORD v22[2];
  TType1CIDFont *v23[2];
  unint64_t v24;

  if (*((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8) <= a2)
    v7 = 0;
  else
    v7 = a2;
  v8 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 2);
  v19 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 3);
  v20 = v8;
  v9 = v19 + v8;
  v10 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 5);
  v11 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 8) + v10;
  do
  {
    v12 = v7;
    v24 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[1] = v13;
    *(_OWORD *)v23 = v13;
    v22[0] = v13;
    v14 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    v15 = (*((uint64_t (**)(const void **))*this + 15))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v22, v14, v15, v11 + v9 * v7, 2 * v9);
    CIDFDIndex = TType1CIDFont::GetCIDFDIndex(v23[1], (unsigned __int8 *)v20, v19, a3, a4, v16);
    v7 = *a4;
    *((_QWORD *)&v22[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v22 + 8));
  }
  while (!v7 && v12);
  return CIDFDIndex;
}

uint64_t TType1CIDFont::LookupCIDMap(TType1CIDFont *this, uint64_t a2)
{
  int v3;
  int v4;

  v4 = -1431655766;
  v3 = -1431655766;
  return (*(uint64_t (**)(TType1CIDFont *, uint64_t, int *, int *))(*(_QWORD *)this + 336))(this, a2, &v4, &v3);
}

void TType1CIDFont::GetCIDDecryptedOutline(const void **this@<X0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, unsigned __int8 **a5@<X8>)
{
  int v10;
  __int128 v11;
  const TFontObjectSurrogate *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  _OWORD v23[2];
  __int128 v24;
  unint64_t v25;

  v10 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 5);
  v25 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[1] = v11;
  v24 = v11;
  v23[0] = v11;
  v12 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
  v13 = (*((uint64_t (**)(const void **))*this + 15))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v23, v12, v13, (v10 + a3), a4);
  v14 = (unsigned __int8 *)*((_QWORD *)&v24 + 1);
  *a5 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  v15 = a4;
  v16 = (unsigned __int8 *)operator new[]();
  *a5 = v16;
  v17 = *((_QWORD *)TType1CIDFont::GetCIDFont(this) + 7) + 488 * a2;
  v18 = *(__int16 *)(v17 + 92);
  if (*(_BYTE *)v17)
  {
    if (a4)
    {
      v19 = 54261;
      v20 = v16;
      do
      {
        v21 = *v14++;
        v22 = v21 ^ (v19 >> 8);
        v19 = 16477 * (v19 + v21) + 21483;
        *v20++ = v22;
        --v15;
      }
      while (v15);
    }
    LenIVDecrypt(v16, v16, a4, v18);
  }
  else if (v18 < 0)
  {
    memcpy(v16, v14, a4);
  }
  else
  {
    LenIVDecrypt(v16, v14, a4, v18);
  }
  *((_QWORD *)&v23[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v23 + 8));
}

void sub_1B0A1AB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  *v9 = 0;
  MEMORY[0x1B5E0CD14](v10, 0x1000C8077774924);
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TType1CIDFont::GetCharOutline(TType1CIDFont *this, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *exception;
  __int16 v12;
  int v13;
  unsigned int v14;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 168))(*((_QWORD *)this + 4));
  if (v6 >= 0xFFFF)
    v7 = 0xFFFF;
  else
    v7 = v6;
  if (v7 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    v12 = 8;
    goto LABEL_9;
  }
  v13 = -1431655766;
  v14 = -1431655766;
  v8 = (*(uint64_t (**)(TType1CIDFont *, uint64_t, unsigned int *, int *))(*(_QWORD *)this + 336))(this, a2, &v14, &v13);
  if ((int)v8 >= *((__int16 *)TType1CIDFont::GetCIDFont((const void **)this) + 9))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    v12 = 5;
LABEL_9:
    exception[4] = v12;
  }
  *(_WORD *)(TType1CIDRenderingContext::gCIDRendering + 88) = v8;
  v9 = v14;
  *a3 = v13;
  return (*(uint64_t (**)(TType1CIDFont *, uint64_t, uint64_t))(*(_QWORD *)this + 352))(this, v8, v9);
}

uint64_t TType1CIDFont::GetOneSubrMap(const void **a1, uint64_t a2, int a3, _DWORD *a4)
{
  int v7;
  uint64_t v8;
  unint64_t v10;
  const unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  __int128 v17;
  const TFontObjectSurrogate *v18;
  uint64_t v19;
  _DWORD *CIDFont;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  _WORD *exception;
  _WORD *v26;
  _OWORD v27[2];
  unsigned __int8 *v28[2];
  unint64_t v29;

  v7 = *(__int16 *)(a2 + 2);
  v8 = *(__int16 *)(a2 + 2);
  if (atomic_load((unint64_t *)(a2 + 16)))
  {
    v10 = atomic_load((unint64_t *)(a2 + 16));
    v11 = (const unsigned __int8 *)(v10 + (int)v8 * a3);
    v12 = BytesToCard(v11, *(__int16 *)(a2 + 2));
    v13 = BytesToCard(&v11[v7], v8);
    v14 = *(_QWORD *)(a2 + 24);
    if (v14 <= v12 || v14 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)exception = &off_1E61B2D68;
      exception[4] = 5;
    }
    *a4 = v13 - v12;
  }
  else
  {
    v29 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = v17;
    *(_OWORD *)v28 = v17;
    v27[0] = v17;
    v18 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*a1 + 27))(a1);
    v19 = (*((uint64_t (**)(const void **))*a1 + 15))(a1);
    CIDFont = TType1CIDFont::GetCIDFont(a1);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v27, v18, v19, (CIDFont[5] + v7 * a3 + *(_DWORD *)(a2 + 8)), 2 * v7);
    v21 = v27[0];
    v22 = v28[1];
    v12 = BytesToCard(v28[1], v7);
    v23 = BytesToCard(&v22[v8], v7);
    if (v12 >= v21 || v23 > v21)
    {
      v26 = __cxa_allocate_exception(0x10uLL);
      *(_QWORD *)v26 = &off_1E61B2D68;
      v26[4] = 5;
    }
    *a4 = v23 - v12;
    *((_QWORD *)&v27[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v27 + 8));
  }
  return v12;
}

void sub_1B0A1AE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a9);
  _Unwind_Resume(a1);
}

std::vector<char>::pointer TType1CIDFont::LoadCIDSubr(const void **a1, uint64_t a2, std::vector<char> *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<char>::pointer begin;
  unint64_t v13;
  unsigned int v15;

  v8 = *((_QWORD *)TType1CIDFont::GetCIDFont(a1) + 7);
  if (*(__int16 *)(v8 + 488 * (int)a2 + 2) < 0)
    return 0;
  v15 = -1431655766;
  v9 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, unsigned int *))*a1 + 48))(a1, v8 + 488 * (int)a2, a4, &v15);
  v10 = *(__int16 *)(v8 + 488 * (int)a2 + 92);
  v11 = v15;
  begin = a3->__begin_;
  v13 = a3->__end_ - a3->__begin_;
  if (v15 <= v13)
  {
    if (v15 < v13)
      a3->__end_ = &begin[v15];
  }
  else
  {
    std::vector<char>::__append(a3, v15 - v13);
    begin = a3->__begin_;
    v11 = v15;
  }
  (*((void (**)(const void **, uint64_t, uint64_t, std::vector<char>::pointer, uint64_t, uint64_t))*a1 + 47))(a1, v9, v11, begin, v10, a2);
  return begin;
}

void TType1CIDFont::GetDecryptedSubrData(const void **this, int a2, int a3, char *a4, int a5)
{
  __int128 v10;
  const TFontObjectSurrogate *v11;
  uint64_t v12;
  _DWORD *CIDFont;
  _OWORD v14[2];
  unsigned __int8 *v15[2];
  unint64_t v16;

  v16 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = v10;
  *(_OWORD *)v15 = v10;
  v14[0] = v10;
  v11 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
  v12 = (*((uint64_t (**)(const void **))*this + 15))(this);
  CIDFont = TType1CIDFont::GetCIDFont(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v14, v11, v12, (CIDFont[5] + a2), a3);
  LenIVDecrypt((unsigned __int8 *)a4, v15[1], a3, a5);
  *((_QWORD *)&v14[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v14 + 8));
}

void sub_1B0A1B05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFontObjectTable::~TFontObjectTable((TFontObjectTable *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TType1CIDFont::LoadSubrArrayDataPerFD(TType1CIDFont *this, int a2, unsigned __int8 **a3)
{
  return 0;
}

uint64_t TType1CIDFont::GetSubrData(const void **this, const unsigned __int8 **a2, __int16 *a3, const unsigned __int8 **a4)
{
  uint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  const unsigned __int8 *v14;
  uint64_t result;
  void *CIDFont;
  const unsigned __int8 *v17;
  unint64_t v18;
  __int16 v19;
  __int16 v20;

  v6 = TType1CIDRenderingContext::gCIDRendering;
  if (!TType1CIDRenderingContext::gCIDRendering)
  {
    *a3 = 0;
LABEL_5:
    result = 0;
    *a2 = 0;
    return result;
  }
  v9 = *((_QWORD *)TType1CIDFont::GetCIDFont(this) + 7);
  v10 = *(__int16 *)(v6 + 88);
  v11 = v9 + 488 * *(__int16 *)(v6 + 88);
  *a3 = *(_WORD *)(v11 + 2);
  v12 = (unint64_t *)(v11 + 16);
  if (atomic_load(v12))
  {
    v14 = (const unsigned __int8 *)atomic_load(v12);
    *a2 = v14;
    *a4 = &v14[*(_QWORD *)(v9 + 488 * v10 + 24)];
    return (uint64_t)*a2;
  }
  if (!*(_WORD *)(v9 + 488 * v10 + 4))
    goto LABEL_5;
  v20 = -21846;
  v19 = -21846;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  CIDFont = TType1CIDFont::GetCIDFont(this);
  v17 = (const unsigned __int8 *)(*(uint64_t (**)(void *, _QWORD, __int16 *, __int16 *, unint64_t *))(*(_QWORD *)CIDFont + 24))(CIDFont, *(unsigned __int16 *)(v6 + 20), &v20, &v19, &v18);
  *a2 = v17;
  *a4 = &v17[v18];
  result = (uint64_t)*a2;
  if (!*a2)
    goto LABEL_5;
  return result;
}

uint64_t TType1CIDFont::GetSubrCount(const void **this)
{
  return *(unsigned __int16 *)(*((_QWORD *)TType1CIDFont::GetCIDFont(this) + 7)
                             + 488 * *(__int16 *)(TType1CIDRenderingContext::gCIDRendering + 88)
                             + 4);
}

double TType1CIDFont::GetORUTransform(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 0x10000;
  *(_OWORD *)a2 = xmmword_1B0AAA880;
  *(_QWORD *)(a2 + 16) = 0;
  if (*(_BYTE *)(TType1CIDRenderingContext::gCIDRendering + 22))
  {
    *(_QWORD *)&result = 0x1000000000000;
    *(_OWORD *)a2 = xmmword_1B0AADDA0;
    *(_DWORD *)(a2 + 20) = 0;
  }
  return result;
}

void TType1CIDFont::~TType1CIDFont(TType1CIDFont *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E61CC0A8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E0CD38);
}

void TType1CIDFont::TType1CIDFont(TType1CIDFont *this, const TType1Font *a2)
{
  __int128 v3;
  const TFontObjectSurrogate *FontObject;
  __int16 v5;
  int v6;
  __int16 v7;
  _WORD *exception;
  _OWORD v9[2];
  __int128 v10;
  unint64_t v11;

  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a2;
  *(_QWORD *)this = &off_1E61CCA60;
  *((_WORD *)this + 20) = 0;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = v3;
  v10 = v3;
  v9[0] = v3;
  FontObject = (const TFontObjectSurrogate *)TType1PSFont::GetFontObject(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v9, FontObject, 1128875040, 0x10000, 0, 0x16u);
  v5 = *(_WORD *)(*((_QWORD *)&v10 + 1) + 4);
  *((_QWORD *)&v9[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v9 + 8));
  if ((v5 & 0x100) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E61B2D68;
    exception[4] = 4;
  }
  *((_WORD *)this + 4) = 0x8000;
  v6 = *(_DWORD *)(*((_QWORD *)this + 4) + 176);
  if ((v6 & 1) != 0 && !*((_WORD *)this + 20))
  {
    if ((v6 & 4) != 0)
    {
      v7 = 1200;
    }
    else
    {
      if ((v6 & 2) == 0)
        return;
      v7 = 600;
    }
    *((_WORD *)this + 20) = v7;
  }
}

void sub_1B0A1B38C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = off_1E61CC0A8;
  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t TType1CIDFont::EncodeCIDGlyph(TType1CIDFont *this, unsigned int a2, char *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v6 = (const char *)((*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)this + 320))(this) + 1);
  v7 = (*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)this + 328))(this);
  v8 = DetermineROS(v6, (const char *)(v7 + 1));
  if ((v8 & 0xFF00000000) != 0)
    v9 = v8;
  else
    v9 = 0xFFFF;
  result = MakeGlyphNameForCIDPerROS(a2, v9, a3 + 1, 0xFFuLL);
  *a3 = result;
  return result;
}

void TType1CIDFont::FindCharName(TType1CIDFont *this, uint64_t a2, unsigned __int8 *a3)
{
  __int128 v6;
  const TFontObjectSurrogate *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _OWORD v12[2];
  __int128 v13;
  unint64_t v14;

  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = v6;
  v13 = v6;
  v12[0] = v6;
  v7 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)this + 216))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v12, v7, 1886352244, 0x40000, 0, 0);
  if ((unint64_t)LODWORD(v12[0]) - 32 <= 2 * (unint64_t)a2)
  {
    *((_QWORD *)&v12[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v12 + 8));
    goto LABEL_10;
  }
  v8 = *(unsigned __int16 *)(*((_QWORD *)&v13 + 1) + 2 * a2 + 32);
  *((_QWORD *)&v12[0] + 1) = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)((char *)v12 + 8));
  if (v8 == 0xFFFF)
  {
LABEL_10:
    (*(void (**)(TType1CIDFont *, uint64_t, unsigned __int8 *))(*(_QWORD *)this + 400))(this, a2, a3 + 1);
    *a3 = a3[1] + 1;
    a3[1] = 47;
    return;
  }
  if (v8 >= 0x100)
    v9 = 4;
  else
    v9 = 2;
  v10 = v9 + 2;
  v11 = v9;
  do
  {
    a3[v10] = kHexChar[v8 & 0xF];
    v8 >>= 4;
    --v10;
    --v11;
  }
  while (v11);
  *a3 = v9 + 2;
  *(_WORD *)(a3 + 1) = 24879;
}

uint64_t TType1CIDFont::GetFontDataTableTag(TType1CIDFont *this)
{
  return 1128875040;
}

uint64_t TType1CIDFont::GetGlyphID(TType1CIDFont *this, const unsigned __int8 *a2, unsigned int a3)
{
  int v3;
  const unsigned __int8 *v5;
  size_t v6;
  size_t v7;
  unsigned __int16 v8;
  __int128 v9;
  const TFontObjectSurrogate *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  const unsigned __int8 *v17;
  const unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  const unsigned __int8 *v21;
  size_t v22;
  size_t v23;
  _BYTE *v24;
  const unsigned __int8 *v25;
  size_t v26;
  size_t v27;
  const unsigned __int8 *v28;
  size_t v29;
  _OWORD v31[2];
  __int128 v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (a3 >= 2 && v3 == 97)
  {
    v5 = a2 + 1;
    v6 = a3 - 1;
    if (v6 <= 0x7F)
      v7 = 128 - v6;
    else
      v7 = 0;
    memset((char *)v31 + v6, 170, v7);
    memcpy(v31, v5, v6);
    *((_BYTE *)v31 + v6) = 0;
    v8 = HexToInt((const char *)v31);
    v33 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v31[1] = v9;
    v32 = v9;
    v31[0] = v9;
    v10 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1CIDFont *))(*(_QWORD *)this + 216))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v31, v10, 1886352244, 0x40000, 0, 0);
    if (LODWORD(v31[0]) >= 0x21)
    {
      v11 = LODWORD(v31[0]) + 131040;
      if (((LODWORD(v31[0]) + 131040) & 0x1FFFE) != 0)
      {
        v12 = 0;
        if (((v11 >> 1) & 0xFFFE) != 0)
          v13 = (unsigned __int16)(v11 >> 1);
        else
          v13 = 1;
        while (*(unsigned __int16 *)(*((_QWORD *)&v32 + 1) + 32 + 2 * v12) != v8)
        {
          if (v13 == ++v12)
            goto LABEL_13;
        }
        *((_QWORD *)&v31[0] + 1) = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)((char *)v31 + 8));
        return (unsigned __int16)v12;
      }
    }
LABEL_13:
    *((_QWORD *)&v31[0] + 1) = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)((char *)v31 + 8));
    goto LABEL_39;
  }
  if (a3 >= 9 && v3 == 117)
  {
    if (a2[1] == 110 && a2[2] == 105)
    {
      v14 = 0;
      while (a3 - 7 != (_DWORD)v14)
      {
        v15 = a2[v14++ + 7];
        if (v15 == 46)
        {
          v16 = a3 - 7 - v14;
          v17 = &a2[v14 + 7];
          if (v16 > 3 && *v17 == 99)
          {
            v18 = &a2[v14];
            if (a2[v14 + 8] == 105)
            {
              v19 = v18[9];
              v20 = a3 - v14 - 10;
              v21 = v18 + 10;
              if (v19 == 100)
              {
                v17 = v21;
                v16 = v20;
              }
            }
          }
          v22 = v16;
          if (v16 <= 0x7F)
            v23 = 128 - v16;
          else
            v23 = 0;
          v24 = (char *)v31 + v16;
          memset(v24, 170, v23);
          v25 = v17;
          v26 = v22;
          goto LABEL_38;
        }
      }
    }
    goto LABEL_39;
  }
  LOWORD(v12) = 0;
  if (a3 < 4 || v3 != 99)
    return (unsigned __int16)v12;
  if (a2[1] != 105 || a2[2] != 100)
  {
LABEL_39:
    LOWORD(v12) = 0;
    return (unsigned __int16)v12;
  }
  v27 = a3 - 3;
  v28 = a2 + 3;
  if (v27 <= 0x7F)
    v29 = 128 - v27;
  else
    v29 = 0;
  v24 = (char *)v31 + v27;
  memset((char *)v31 + v27, 170, v29);
  v25 = v28;
  v26 = v27;
LABEL_38:
  memcpy(v31, v25, v26);
  *v24 = 0;
  LOWORD(v12) = StringToInt((const char *)v31);
  return (unsigned __int16)v12;
}

void sub_1B0A1B8A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t TType1CIDFont::GetRegistry(const void **this)
{
  uint64_t v2;
  void *CIDFont;

  v2 = *((int *)TType1CIDFont::GetCIDFont(this) + 17);
  if ((_DWORD)v2 == -1)
    return 0;
  CIDFont = TType1CIDFont::GetCIDFont(this);
  return (*(uint64_t (**)(void *))(*(_QWORD *)CIDFont + 16))(CIDFont) + v2;
}

uint64_t TType1CIDFont::GetOrdering(const void **this)
{
  uint64_t v2;
  void *CIDFont;

  v2 = *((int *)TType1CIDFont::GetCIDFont(this) + 18);
  if ((_DWORD)v2 == -1)
    return 0;
  CIDFont = TType1CIDFont::GetCIDFont(this);
  return (*(uint64_t (**)(void *))(*(_QWORD *)CIDFont + 16))(CIDFont) + v2;
}

uint64_t TType1CIDFont::GetFontEncoding(TType1CIDFont *this, unsigned __int16 *a2)
{
  return 0;
}

unint64_t memoryContext::GetFreeEntry(memoryContext *this)
{
  memoryContext *v2;
  unsigned int v3;
  unint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  TDataReference *v18;
  _OWORD *v19;
  uint64_t v20;
  _WORD *exception;

  v2 = (memoryContext *)*((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    result = *((_QWORD *)this + 1);
    while (*(_DWORD *)(result + 8) != 1718773093)
    {
      result += 56;
      if (result >= (unint64_t)v2 + 56 * v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = v3 + 8;
    v6 = operator new[](56 * v5 + 16, MEMORY[0x1E0DE4E10]);
    if (!v6)
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = 20;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    v7 = v6;
    *v6 = 56;
    v6[1] = v5;
    if (v3 == -8)
      goto LABEL_10;
    v8 = v6 + 5;
    v9 = 56 * v5;
    do
    {
      *(v8 - 1) = &off_1E6176770;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      v8 += 7;
      v9 -= 56;
    }
    while (v9);
    if (v3)
    {
LABEL_10:
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *((_QWORD *)this + 1) + v10 * 8;
        v13 = &v7[v10];
        v14 = *(_DWORD *)(v12 + 8);
        v13[2] = *(_QWORD *)v12;
        *((_DWORD *)v13 + 6) = v14;
        TDataReference::operator=((TDataReference *)&v7[v10 + 4], v12 + 16);
        *((_DWORD *)v13 + 16) = *(_DWORD *)(v12 + 48);
        ++v11;
        v15 = *((unsigned int *)this + 4);
        v10 += 7;
      }
      while (v11 < v15);
      v2 = (memoryContext *)*((_QWORD *)this + 1);
    }
    else
    {
      LODWORD(v15) = 0;
    }
    if (v2 != (memoryContext *)((char *)this + 24) && v2)
    {
      v16 = *((_QWORD *)v2 - 1);
      if (v16)
      {
        v17 = 56 * v16;
        do
        {
          v18 = (memoryContext *)((char *)v2 + v17 - 40);
          *(_QWORD *)v18 = &off_1E6176770;
          TDataReference::DucRefCount(v18);
          v17 -= 56;
        }
        while (v17);
      }
      MEMORY[0x1B5E0CD14]((char *)v2 - 16, 0x10E0C80781A2FC6);
      LODWORD(v15) = *((_DWORD *)this + 4);
    }
    *((_QWORD *)this + 1) = v7 + 2;
    v19 = &v7[7 * v15 + 2];
    *v19 = 0u;
    v19[1] = 0u;
    v19[2] = 0u;
    v19[3] = 0u;
    v19[4] = 0u;
    v19[5] = 0u;
    v19[6] = 0u;
    v19[7] = 0u;
    v19[8] = 0u;
    v19[9] = 0u;
    v19[10] = 0u;
    v19[11] = 0u;
    v19[12] = 0u;
    v19[13] = 0u;
    v19[14] = 0u;
    v19[15] = 0u;
    v19[16] = 0u;
    v19[17] = 0u;
    v19[18] = 0u;
    v19[19] = 0u;
    v19[20] = 0u;
    v19[21] = 0u;
    v19[22] = 0u;
    v19[23] = 0u;
    v19[24] = 0u;
    v19[25] = 0u;
    v20 = 3;
    v19[26] = 0u;
    v19[27] = 0u;
    do
    {
      LODWORD(v7[7 * v15 + v20]) = 1718773093;
      v20 += 7;
    }
    while (v20 != 59);
    *((_DWORD *)this + 4) = v15 + 8;
    return (unint64_t)v19 + 392;
  }
  return result;
}

void memoryContext::memoryContext(memoryContext *this, cacheCallContext *a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v3 = 0;
  v4 = (char *)this + 24;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = 0x38000000010;
  do
  {
    v5 = (_QWORD *)((char *)this + v3);
    v5[5] = &off_1E6176770;
    v5[6] = 0;
    v5[7] = 0;
    v5[8] = 0;
    v3 += 56;
  }
  while (v3 != 896);
  bzero(v4, 0x380uLL);
  v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = v7 + 56 * v6;
    do
    {
      *(_DWORD *)(v7 + 8) = 1718773093;
      v7 += 56;
    }
    while (v7 < v8);
  }
}

void memoryContext::~memoryContext(memoryContext *this)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  TDataReference *v9;
  uint64_t i;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_DWORD *)this + 4);
    if (v3)
    {
      v4 = v2 + 56 * v3;
      do
      {
        v5 = *(_DWORD *)(v2 + 8);
        if (v5 != 1718773093)
        {
          if (v5 == 1718578804)
            ScalerReleaseFontTable(this, *(const void **)v2);
          else
            ScalerDisposeBlock(this, *(char **)v2, v5);
        }
        v2 += 56;
      }
      while (v2 < v4);
      v2 = *((_QWORD *)this + 1);
    }
    if ((memoryContext *)v2 != (memoryContext *)((char *)this + 24) && v2 != 0)
    {
      v7 = *(_QWORD *)(v2 - 8);
      if (v7)
      {
        v8 = 56 * v7;
        do
        {
          v9 = (TDataReference *)(v2 - 40 + v8);
          *(_QWORD *)v9 = &off_1E6176770;
          TDataReference::DucRefCount(v9);
          v8 -= 56;
        }
        while (v8);
      }
      MEMORY[0x1B5E0CD14](v2 - 16, 0x10E0C80781A2FC6);
    }
  }
  for (i = 880; i != -16; i -= 56)
  {
    *(_QWORD *)((char *)this + i) = &off_1E6176770;
    TDataReference::DucRefCount((memoryContext *)((char *)this + i));
  }
}

void ScalerReleaseFontTable(memoryContext *a1, const void *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void (**v6)(TDataReference *__hidden);
  uint64_t v7;
  __int128 v8;

  if (*(const void **)(*(_QWORD *)a1 + 32) == a2)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 32) = 0;
  }
  else
  {
    v2 = *((_DWORD *)a1 + 4);
    if (v2)
    {
      v3 = *((_QWORD *)a1 + 1);
      v4 = v3 + 56 * v2;
      while (*(const void **)v3 != a2)
      {
        v3 += 56;
        if (v3 >= v4)
          goto LABEL_6;
      }
      if (*(_DWORD *)(v3 + 8) == 1718578804)
      {
        *(_DWORD *)(v3 + 8) = 1718773093;
        v6 = &off_1E6176770;
        v7 = 0;
        v8 = 0uLL;
        if ((void (***)(TDataReference *__hidden))(v3 + 16) != &v6)
        {
          TDataReference::DucRefCount((TDataReference *)(v3 + 16));
          v5 = v7;
          v7 = 0;
          *(_QWORD *)(v3 + 24) = v5;
          *(_OWORD *)(v3 + 32) = v8;
        }
        v6 = &off_1E6176770;
        TDataReference::DucRefCount((TDataReference *)&v6);
        *(_QWORD *)v3 = 1358921729;
        *(_DWORD *)(v3 + 48) = 0;
      }
    }
    else
    {
LABEL_6:
      puts("ScalerMemoryOFA2.c: FindABlock didn't!");
    }
  }
}

void sub_1B0A1BE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

void ScalerDisposeBlock(memoryContext *a1, char *a2, int a3)
{
  unsigned int v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (**v9)(TDataReference *__hidden);
  uint64_t v10;
  __int128 v11;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *((_QWORD *)a1 + 1);
    v7 = v6 + 56 * v3;
    while (*(char **)v6 != a2)
    {
      v6 += 56;
      if (v6 >= v7)
        goto LABEL_5;
    }
    if (*(_DWORD *)(v6 + 8) == a3)
    {
      *(_DWORD *)(v6 + 8) = 1718773093;
      v9 = &off_1E6176770;
      v10 = 0;
      v11 = 0uLL;
      if ((void (***)(TDataReference *__hidden))(v6 + 16) != &v9)
      {
        TDataReference::DucRefCount((TDataReference *)(v6 + 16));
        v8 = v10;
        v10 = 0;
        *(_QWORD *)(v6 + 24) = v8;
        *(_OWORD *)(v6 + 32) = v11;
      }
      v9 = &off_1E6176770;
      TDataReference::DucRefCount((TDataReference *)&v9);
      *(_QWORD *)v6 = 1358921729;
      *(_DWORD *)(v6 + 48) = 0;
      if ((a3 - 5) >= 2)
      {
        if (a2)
          free(a2 - 8);
      }
    }
  }
  else
  {
LABEL_5:
    puts("ScalerMemoryOFA2.c: FindABlock didn't!");
  }
}

void sub_1B0A1BF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ScalerGetFontTable(memoryContext *a1, uint64_t a2, unsigned int a3, _QWORD *a4, int a5, int a6)
{
  _QWORD *v11;
  unint64_t FreeEntry;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _WORD *v19;
  int v20;
  struct type_info *v21;
  _WORD *exception;
  void (**v23)(TDataReference *__hidden);
  uint64_t v24;
  __int128 v25;
  unsigned int v26;

  v26 = 0;
  v11 = (_QWORD *)(*(_QWORD *)a1 + 16);
  FreeEntry = memoryContext::GetFreeEntry(a1);
  TFontSurrogate::GetTable(v11, &v26, a2, a3, &v23);
  if ((void (***)(TDataReference *__hidden))(FreeEntry + 16) != &v23)
  {
    TDataReference::DucRefCount((TDataReference *)(FreeEntry + 16));
    v13 = v24;
    v24 = 0;
    *(_QWORD *)(FreeEntry + 24) = v13;
    *(_OWORD *)(FreeEntry + 32) = v25;
  }
  v23 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v23);
  v14 = *(_QWORD *)(FreeEntry + 24);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(_QWORD *)(FreeEntry + 32);
      v17 = v15 + v16;
      *a4 = v17;
      result = v26;
      if (!a6 || v26 >= a6 + a3)
      {
        *(_QWORD *)FreeEntry = v17;
        *(_DWORD *)(FreeEntry + 8) = 1718578804;
        *(_DWORD *)(FreeEntry + 48) = *(_DWORD *)(FreeEntry + 40) - v16;
        return result;
      }
      exception = __cxa_allocate_exception(2uLL);
      *exception = 3;
      v21 = (struct type_info *)MEMORY[0x1E0DE4F10];
LABEL_16:
      __cxa_throw(exception, v21, 0);
    }
  }
  *a4 = 0;
  if (!a5)
  {
    v19 = __cxa_allocate_exception(2uLL);
    if (v26)
      v20 = 7;
    else
      v20 = 10;
    *v19 = OFAErrors(v20);
    v21 = (struct type_info *)MEMORY[0x1E0DE4F10];
    exception = v19;
    goto LABEL_16;
  }
  return 0;
}

void sub_1B0A1C0B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

uint64_t ScalerGetTableParts(memoryContext *a1, unsigned int a2, unsigned int a3, unsigned int a4, _QWORD *a5, int a6)
{
  uint64_t v11;
  unint64_t FreeEntry;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *exception;
  int v20;
  void (**v21)(TDataReference *__hidden);
  uint64_t v22;
  __int128 v23;
  unsigned int v24;

  v24 = 0;
  v11 = *(_QWORD *)a1 + 16;
  FreeEntry = memoryContext::GetFreeEntry(a1);
  TFontSurrogate::GetTablePart(v11, &v24, a2, a3, a4, &v21);
  if ((void (***)(TDataReference *__hidden))(FreeEntry + 16) != &v21)
  {
    TDataReference::DucRefCount((TDataReference *)(FreeEntry + 16));
    v13 = v22;
    v22 = 0;
    *(_QWORD *)(FreeEntry + 24) = v13;
    *(_OWORD *)(FreeEntry + 32) = v23;
  }
  v21 = &off_1E6176770;
  TDataReference::DucRefCount((TDataReference *)&v21);
  v14 = *(_QWORD *)(FreeEntry + 24);
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    v16 = *(_QWORD *)(FreeEntry + 32);
    v17 = v15 + v16;
    *a5 = v17;
    *(_QWORD *)FreeEntry = v17;
    *(_DWORD *)(FreeEntry + 8) = 1718578804;
    *(_DWORD *)(FreeEntry + 48) = *(_DWORD *)(FreeEntry + 40) - v16;
    return v24;
  }
  else
  {
    *a5 = 0;
    if (!a6)
    {
      exception = __cxa_allocate_exception(2uLL);
      if (v24)
        v20 = 7;
      else
        v20 = 10;
      *exception = OFAErrors(v20);
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    return 0;
  }
}

void sub_1B0A1C210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

_QWORD *ScalerNewBlock(memoryContext *a1, signed int a2, int a3, _QWORD *a4, int a5, int a6, _WORD *a7)
{
  unsigned int v11;
  unint64_t FreeEntry;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v20;
  signed int v21;
  int v22;
  int v23;
  __int16 v24;
  _WORD *exception;

  if ((a3 - 7) > 0xFFFFFFFD)
  {
    if (a3 == 5)
    {
      v14 = *(_QWORD *)a1;
    }
    else
    {
      if (a3 != 6)
        goto LABEL_17;
      v14 = *(_QWORD *)a1;
      if (*(_BYTE *)(*(_QWORD *)a1 + 61))
      {
        v15 = *(unsigned int *)(v14 + 56);
        v16 = *(_DWORD *)(v14 + 48) - v15;
        *(_DWORD *)(v14 + 52) = a2 + 36;
        if (v16 >= a2 + 36)
        {
          v17 = *(_QWORD *)(v14 + 40) + v15;
          *(_DWORD *)(v14 + 56) = v15 + a2 + 36;
        }
        else
        {
          v17 = 0;
        }
        if (v17)
          result = (_QWORD *)(v17 + 36);
        else
          result = 0;
        goto LABEL_18;
      }
    }
    v20 = *(unsigned int *)(v14 + 56);
    v21 = *(_DWORD *)(v14 + 48) - v20;
    *(_DWORD *)(v14 + 52) = a2;
    if (v21 >= a2)
    {
      result = (_QWORD *)(*(_QWORD *)(v14 + 40) + v20);
      *(_DWORD *)(v14 + 56) = v20 + a2;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (a4)
  {
    v11 = *((_DWORD *)a1 + 4);
    if (v11)
    {
      FreeEntry = *((_QWORD *)a1 + 1);
      v13 = FreeEntry + 56 * v11;
      while (*(_QWORD **)FreeEntry != a4)
      {
        FreeEntry += 56;
        if (FreeEntry >= v13)
          goto LABEL_7;
      }
      result = ResizeRawMemory(a4, a2, 0);
      if (result)
        goto LABEL_30;
      goto LABEL_18;
    }
LABEL_7:
    puts("ScalerMemoryOFA2.c: FindABlock didn't!");
LABEL_17:
    result = 0;
    goto LABEL_18;
  }
  FreeEntry = memoryContext::GetFreeEntry(a1);
  result = AllocRawMemory(a2, a6);
  if (result)
  {
LABEL_30:
    *(_DWORD *)(FreeEntry + 8) = a3;
    *(_QWORD *)FreeEntry = result;
    *(_DWORD *)(FreeEntry + 48) = a2;
    return result;
  }
LABEL_18:
  if (!a5 && !result)
  {
    if (a3 == 5)
      v22 = 9;
    else
      v22 = 6;
    if (a3 == 6)
      v23 = 8;
    else
      v23 = v22;
    v24 = OFAErrors(v23);
    if (!a7)
    {
      exception = __cxa_allocate_exception(2uLL);
      *exception = v24;
      __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
    }
    result = 0;
    *a7 = v24;
  }
  return result;
}

uint64_t ScalerGetBlockSize(memoryContext *a1, const void *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *((_QWORD *)a1 + 1);
    v4 = v3 + 56 * v2;
    while (*(const void **)v3 != a2)
    {
      v3 += 56;
      if (v3 >= v4)
        goto LABEL_5;
    }
    return *(unsigned int *)(v3 + 48);
  }
  else
  {
LABEL_5:
    puts("ScalerMemoryOFA2.c: FindABlock didn't!");
    return 0;
  }
}

void ScalerDetachBlock(memoryContext *a1, const void *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void (**v6)(TDataReference *__hidden);
  uint64_t v7;
  __int128 v8;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *((_QWORD *)a1 + 1);
    v4 = v3 + 56 * v2;
    while (*(const void **)v3 != a2)
    {
      v3 += 56;
      if (v3 >= v4)
        goto LABEL_5;
    }
    *(_DWORD *)(v3 + 8) = 1718773093;
    v6 = &off_1E6176770;
    v7 = 0;
    v8 = 0uLL;
    if ((void (***)(TDataReference *__hidden))(v3 + 16) != &v6)
    {
      TDataReference::DucRefCount((TDataReference *)(v3 + 16));
      v5 = v7;
      v7 = 0;
      *(_QWORD *)(v3 + 24) = v5;
      *(_OWORD *)(v3 + 32) = v8;
    }
    v6 = &off_1E6176770;
    TDataReference::DucRefCount((TDataReference *)&v6);
    *(_QWORD *)v3 = 1358921729;
    *(_DWORD *)(v3 + 48) = 0;
  }
  else
  {
LABEL_5:
    puts("ScalerMemoryOFA2.c: FindABlock didn't!");
  }
}

void sub_1B0A1C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  _Unwind_Resume(a1);
}

size_t *ScalerNewScratch(memoryContext *a1, unsigned int a2, int a3)
{
  unint64_t FreeEntry;
  size_t *result;
  _WORD *exception;

  FreeEntry = memoryContext::GetFreeEntry(a1);
  result = AllocRawMemory(a2, a3);
  if (!result)
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 20;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *(_DWORD *)(FreeEntry + 8) = -1;
  *(_QWORD *)FreeEntry = result;
  *(_DWORD *)(FreeEntry + 48) = a2;
  return result;
}

const char *StreamT3Font(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  size_t *v9;
  size_t *v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  const void *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  char *v63;
  unsigned int *v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  char *v75;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _WORD *exception;
  _WORD *v89;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int FontTable;
  unsigned int *v95;
  void *v97;
  int v98[2];
  unint64_t v99;
  _DWORD v100[5];
  unsigned int v101;
  __int128 v102;
  int32x2_t v103[3];
  unsigned __int8 v104;
  memoryContext *v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _OWORD v114[2];
  _OWORD v115[2];
  _QWORD __b[301];
  _OWORD v117[3];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  unint64_t v154;
  int v155[2];
  int v156;
  _OWORD v157[8];
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v155 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v95 = *(unsigned int **)(v4 + 48);
  v154 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v153 = v5;
  v152 = v5;
  v151 = v5;
  v150 = v5;
  v149 = v5;
  v148 = v5;
  v147 = v5;
  v146 = v5;
  v145 = v5;
  v144 = v5;
  v143 = v5;
  v142 = v5;
  v141 = v5;
  v140 = v5;
  v139 = v5;
  v138 = v5;
  v137 = v5;
  v136 = v5;
  v135 = v5;
  v134 = v5;
  v133 = v5;
  v132 = v5;
  v131 = v5;
  v130 = v5;
  v129 = v5;
  v128 = v5;
  v127 = v5;
  v126 = v5;
  v125 = v5;
  v124 = v5;
  v123 = v5;
  v122 = v5;
  v121 = v5;
  v120 = v5;
  v119 = v5;
  v118 = v5;
  v117[2] = v5;
  v117[1] = v5;
  v117[0] = v5;
  LODWORD(v128) = 0;
  memset(__b, 170, sizeof(__b));
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v115 + 12) = v6;
  v114[1] = v6;
  v115[0] = v6;
  v114[0] = v6;
  v157[7] = v6;
  v157[6] = v6;
  v157[5] = v6;
  v157[4] = v6;
  v157[3] = v6;
  v157[2] = v6;
  v157[1] = v6;
  v157[0] = v6;
  if (!*(_QWORD *)(v4 + 56))
  {
    exception = __cxa_allocate_exception(2uLL);
    *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E0DE4F10], 0);
  }
  *((_QWORD *)&v147 + 1) = 0;
  v113 = 0xAAAAAAAAAA000000;
  v111 = 1358921729;
  v112 = 1358921729;
  v7 = *(_QWORD *)(a1 + 8);
  v105 = *(memoryContext **)a1;
  v106 = v7;
  v107 = 1358921729;
  v108 = v117;
  v109 = &v146;
  v110 = __b;
  __b[1] = 0;
  bzero(v117, 0x1F0uLL);
  DWORD1(v123) = 0x10000;
  DWORD1(v124) = 0x10000;
  BYTE8(v145) = 0;
  v8 = sbit_CalculateTransformSpaceNeeded(v105, *(_DWORD *)(v7 + 164));
  DWORD2(v118) = 0;
  HIDWORD(v118) = v8;
  *(_QWORD *)&v119 = ScalerNewScratch(v105, v8, 0);
  DWORD2(v119) = v8;
  v9 = ScalerNewScratch(v105, 0x60u, 0);
  v10 = v9;
  v11 = v117;
  *(_QWORD *)&v120 = v9;
  if (v9 != (size_t *)&identityMatrix)
  {
    *(_OWORD *)v9 = identityMatrix;
    *((_OWORD *)v9 + 1) = unk_1B0AAC51C;
    *((_DWORD *)v9 + 8) = 0x40000000;
    v11 = v108;
  }
  v12 = v11 + 6;
  if (v12 != &identityMatrix)
  {
    *v12 = identityMatrix;
    v12[1] = unk_1B0AAC51C;
    *((_DWORD *)v12 + 8) = 0x40000000;
  }
  *((_BYTE *)v9 + 92) = 0;
  if (!sbit_FontMatch(v105, (uint64_t)&v105, (uint64_t)v114, 0, 1))
  {
    v89 = __cxa_allocate_exception(2uLL);
    *v89 = 5;
    __cxa_throw(v89, MEMORY[0x1E0DE4F10], 0);
  }
  if (v10 != (size_t *)&identityMatrix)
  {
    *(_OWORD *)v10 = identityMatrix;
    *((_OWORD *)v10 + 1) = unk_1B0AAC51C;
    *((_DWORD *)v10 + 8) = 0x40000000;
  }
  v13 = *((unsigned int *)v10 + 11);
  *(_DWORD *)(a2 + 131112) = 0;
  v98[0] = -1431655766;
  v14 = (char *)ZGetString(100, v98);
  StreamBytesThroughBuffer(a2, v98[0], v14);
  v98[0] = -1431655766;
  v15 = (char *)ZGetString(101, v98);
  StreamBytesThroughBuffer(a2, v98[0], v15);
  v98[0] = -1431655766;
  v16 = (char *)ZGetString(102, v98);
  StreamBytesThroughBuffer(a2, v98[0], v16);
  ZWriteStringF(a2, 103, v17, v18, v19, v20, v21, v22, 0);
  v98[0] = -1431655766;
  v23 = (char *)ZGetString(7, v98);
  StreamBytesThroughBuffer(a2, v98[0], v23);
  FontTable = ScalerGetFontTable(v105, 1886352244, 0, v155, 0, 0);
  v24 = *(const void **)v155;
  DumpFontEncoding(v105, a2, *(uint64_t *)v155, FontTable);
  v98[0] = -1431655766;
  v25 = (char *)ZGetString(106, v98);
  StreamBytesThroughBuffer(a2, v98[0], v25);
  v98[0] = -1431655766;
  v26 = (char *)ZGetString(116, v98);
  StreamBytesThroughBuffer(a2, v98[0], v26);
  v98[0] = -1431655766;
  v27 = (char *)ZGetString(117, v98);
  StreamBytesThroughBuffer(a2, v98[0], v27);
  v98[0] = -1431655766;
  v28 = (char *)ZGetString(118, v98);
  StreamBytesThroughBuffer(a2, v98[0], v28);
  ZWriteStringF(a2, 108, v29, v30, v31, v32, v33, v34, v13);
  v41 = *((unsigned __int16 *)v10 + 43);
  v42 = *(unsigned __int16 *)(v106 + 40);
  if (v41 >= v42)
    v41 = v42 - 1;
  v43 = v95;
  v93 = v41;
  if (v95)
  {
    v44 = v41 + 31;
    v45 = (unsigned __int16)((v41 + 31) >> 5);
    if ((unsigned __int16)(v44 >> 5))
    {
      v45 = 0;
      v46 = v44 >> 5;
      do
      {
        v47 = *v43;
        if (*v43)
        {
          v48 = 32;
          do
          {
            v45 = (v47 & 1) + v45;
            if (v47 < 2)
              break;
            v47 >>= 1;
            --v48;
          }
          while ((_WORD)v48);
        }
        ++v43;
        v46 = (__int16)(v46 - 1);
      }
      while (v46 > 0);
    }
  }
  else
  {
    v45 = 256;
  }
  ZWriteStringF(a2, 109, v35, v36, v37, v38, v39, v40, v45);
  v49 = v93;
  if ((v93 & 0x80000000) == 0)
  {
    v50 = 0;
    if (a3)
      v51 = 110;
    else
      v51 = 122;
    if (a3)
      v52 = 111;
    else
      v52 = 123;
    v91 = v52;
    v92 = v51;
    v53 = v95;
    while (1)
    {
      if (v53 && ((v53[v50 >> 5] << v50) & 0x80000000) == 0)
        goto LABEL_43;
      v104 = -86;
      memset(v103, 170, sizeof(v103));
      memset(v100, 170, sizeof(v100));
      v99 = 0xAAAAAAAAAAAAAAAALL;
      v101 = v50;
      *(_QWORD *)v98 = 0;
      v102 = xmmword_1B0AADDD0;
      sbit_IsThereAGlyphImage((uint64_t)&v105, (int *)&v101);
      sbit_GetBitMapInfo(&v105, (uint64_t)&v101, v50, (int32x2_t *)v98, v103, 0);
      ZGetGlyphName(*(uint64_t *)v155, FontTable, *(unsigned __int16 *)(v106 + 40), (unsigned __int16)v50, (char *)&v104, (char *)v157, 0x80uLL);
      v97 = (void *)0xAAAAAAAAAAAAAAAALL;
      sbit_GetBitMapData((uint64_t)&v105, &v101, 0, &v97, 0, -1);
      v60 = (char *)v97;
      v61 = *(_DWORD *)v97;
      *(_WORD *)v97 = bswap32(*(_DWORD *)v97) >> 16;
      if (v61 <= 0)
      {
        ZWriteStringF(a2, v92, v54, v55, v56, v57, v58, v59, v104);
        v65 = 2;
      }
      else
      {
        v62 = 0;
        v63 = v60 + 2;
        v64 = (unsigned int *)(v60 + 4);
        v65 = 2;
        do
        {
          v66 = *v64;
          v67 = *v64 + 31;
          if ((int)*v64 < -31)
            v67 = *v64 + 62;
          v68 = &v64[v67 >> 5];
          *(_WORD *)v63 = bswap32(v66) >> 16;
          v69 = (v68[1] + 0x8000) >> 16;
          v63[2] = (v68[1] + 0x8000) >> 16;
          v70 = (v68[2] + 0x8000) >> 16;
          v71 = v63 + 4;
          v63[3] = (v68[2] + 0x8000) >> 16;
          v64 = v68 + 3;
          v72 = v66 - 1;
          if (v66 != 1)
          {
            do
            {
              v73 = *v64;
              v74 = v64[1];
              v64 += 2;
              v56 = (v73 + 0x8000) >> 16;
              v57 = (v74 + 0x8000) >> 16;
              *v71 = v56 - v69;
              v71[1] = v57 - v70;
              v71 += 2;
              v70 = v57;
              v69 = v56;
              --v72;
            }
            while (v72);
          }
          v65 += 2 * v66 + 2;
          ++v62;
          v63 = v71;
        }
        while (v62 != v61);
        ZWriteStringF(a2, v92, v69, v70, v56, v57, v58, v59, v104);
        if (v65 <= 0)
          goto LABEL_42;
      }
      ZWriteDataHex(a2, v65, (char *)v97, a3);
LABEL_42:
      v156 = -1431655766;
      v75 = (char *)ZGetString(v91, &v156);
      StreamBytesThroughBuffer(a2, v156, v75);
      ScalerDisposeBlock(v105, (char *)v97, -1);
      v53 = v95;
      v49 = v93;
LABEL_43:
      if (v50++ == v49)
      {
        v24 = *(const void **)v155;
        break;
      }
    }
  }
  ScalerDisposeBlock(v105, *((char **)v108 + 8), -1);
  ScalerDisposeBlock(v105, *((char **)v108 + 10), -1);
  ScalerReleaseFontTable(v105, v24);
  v98[0] = -1431655766;
  v77 = (char *)ZGetString(112, v98);
  StreamBytesThroughBuffer(a2, v98[0], v77);
  v84 = *(_BYTE **)(*(_QWORD *)(a2 + 8) + 56);
  v85 = *v84;
  if (*v84)
  {
    v85 = 0;
    while (v84[++v85])
      ;
  }
  return ZWriteStringF(a2, 113, v78, v79, v80, v81, v82, v83, v85);
}

uint64_t sub_1B0A1CE68()
{
  return MEMORY[0x1E0CAE410]();
}

uint64_t sub_1B0A1CE74()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t sub_1B0A1CE80()
{
  return MEMORY[0x1E0CAE450]();
}

uint64_t sub_1B0A1CE8C()
{
  return MEMORY[0x1E0CAE4A8]();
}

uint64_t sub_1B0A1CE98()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_1B0A1CEA4()
{
  return MEMORY[0x1E0CAE8A8]();
}

uint64_t sub_1B0A1CEB0()
{
  return MEMORY[0x1E0CAE8B8]();
}

uint64_t sub_1B0A1CEBC()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1B0A1CEC8()
{
  return MEMORY[0x1E0CAE8D8]();
}

uint64_t sub_1B0A1CED4()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1B0A1CEE0()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1B0A1CEEC()
{
  return MEMORY[0x1E0CAE908]();
}

uint64_t sub_1B0A1CEF8()
{
  return MEMORY[0x1E0CAE910]();
}

uint64_t sub_1B0A1CF04()
{
  return MEMORY[0x1E0CAEE50]();
}

uint64_t sub_1B0A1CF10()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1B0A1CF1C()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1B0A1CF28()
{
  return MEMORY[0x1E0CB0088]();
}

uint64_t sub_1B0A1CF34()
{
  return MEMORY[0x1E0CB00A0]();
}

uint64_t sub_1B0A1CF40()
{
  return MEMORY[0x1E0CB00B0]();
}

uint64_t sub_1B0A1CF4C()
{
  return MEMORY[0x1E0CB00E8]();
}

uint64_t sub_1B0A1CF58()
{
  return MEMORY[0x1E0CB00F0]();
}

uint64_t sub_1B0A1CF64()
{
  return MEMORY[0x1E0CB0130]();
}

uint64_t sub_1B0A1CF70()
{
  return MEMORY[0x1E0CB0140]();
}

uint64_t sub_1B0A1CF7C()
{
  return MEMORY[0x1E0CB0160]();
}

uint64_t sub_1B0A1CF88()
{
  return MEMORY[0x1E0CB0170]();
}

uint64_t sub_1B0A1CF94()
{
  return MEMORY[0x1E0CB0188]();
}

uint64_t sub_1B0A1CFA0()
{
  return MEMORY[0x1E0CB01B0]();
}

uint64_t sub_1B0A1CFAC()
{
  return MEMORY[0x1E0CB01C0]();
}

uint64_t sub_1B0A1CFB8()
{
  return MEMORY[0x1E0CB01D0]();
}

uint64_t sub_1B0A1CFC4()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1B0A1CFD0()
{
  return MEMORY[0x1E0CB0208]();
}

uint64_t sub_1B0A1CFDC()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1B0A1CFE8()
{
  return MEMORY[0x1E0CB0240]();
}

uint64_t sub_1B0A1CFF4()
{
  return MEMORY[0x1E0CB0298]();
}

uint64_t sub_1B0A1D000()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t sub_1B0A1D00C()
{
  return MEMORY[0x1E0CB02D8]();
}

uint64_t sub_1B0A1D018()
{
  return MEMORY[0x1E0CB03A8]();
}

uint64_t sub_1B0A1D024()
{
  return MEMORY[0x1E0CB0C00]();
}

uint64_t sub_1B0A1D030()
{
  return MEMORY[0x1E0CB0C18]();
}

uint64_t sub_1B0A1D03C()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t sub_1B0A1D048()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t sub_1B0A1D054()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t sub_1B0A1D060()
{
  return MEMORY[0x1E0D65B28]();
}

uint64_t sub_1B0A1D06C()
{
  return MEMORY[0x1E0D65B30]();
}

uint64_t sub_1B0A1D078()
{
  return MEMORY[0x1E0D65B38]();
}

uint64_t sub_1B0A1D084()
{
  return MEMORY[0x1E0D65B40]();
}

uint64_t sub_1B0A1D090()
{
  return MEMORY[0x1E0D65B58]();
}

uint64_t sub_1B0A1D09C()
{
  return MEMORY[0x1E0D65B98]();
}

uint64_t sub_1B0A1D0A8()
{
  return MEMORY[0x1E0D65BD0]();
}

uint64_t sub_1B0A1D0B4()
{
  return MEMORY[0x1E0D65BD8]();
}

uint64_t sub_1B0A1D0C0()
{
  return MEMORY[0x1E0D65C10]();
}

uint64_t sub_1B0A1D0CC()
{
  return MEMORY[0x1E0D65C20]();
}

uint64_t sub_1B0A1D0D8()
{
  return MEMORY[0x1E0D65C40]();
}

uint64_t sub_1B0A1D0E4()
{
  return MEMORY[0x1E0D65C50]();
}

uint64_t sub_1B0A1D0F0()
{
  return MEMORY[0x1E0D65C80]();
}

uint64_t sub_1B0A1D0FC()
{
  return MEMORY[0x1E0DE9DD0]();
}

uint64_t sub_1B0A1D108()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1B0A1D114()
{
  return MEMORY[0x1E0DE9E60]();
}

uint64_t sub_1B0A1D120()
{
  return MEMORY[0x1E0DEA150]();
}

uint64_t sub_1B0A1D12C()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1B0A1D138()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1B0A1D144()
{
  return MEMORY[0x1E0DEA260]();
}

uint64_t sub_1B0A1D150()
{
  return MEMORY[0x1E0DEA268]();
}

uint64_t sub_1B0A1D15C()
{
  return MEMORY[0x1E0DEA280]();
}

uint64_t sub_1B0A1D168()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1B0A1D174()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1B0A1D180()
{
  return MEMORY[0x1E0DEA3C8]();
}

uint64_t sub_1B0A1D18C()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_1B0A1D198()
{
  return MEMORY[0x1E0DEA428]();
}

uint64_t sub_1B0A1D1A4()
{
  return MEMORY[0x1E0DEA430]();
}

uint64_t sub_1B0A1D1B0()
{
  return MEMORY[0x1E0DEA438]();
}

uint64_t sub_1B0A1D1BC()
{
  return MEMORY[0x1E0DEA440]();
}

uint64_t sub_1B0A1D1C8()
{
  return MEMORY[0x1E0DEA480]();
}

uint64_t sub_1B0A1D1D4()
{
  return MEMORY[0x1E0DEA4B0]();
}

uint64_t sub_1B0A1D1E0()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1B0A1D1EC()
{
  return MEMORY[0x1E0DEA5B8]();
}

uint64_t sub_1B0A1D1F8()
{
  return MEMORY[0x1E0DEA5C8]();
}

uint64_t sub_1B0A1D204()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1B0A1D210()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1B0A1D21C()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1B0A1D228()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_1B0A1D234()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t sub_1B0A1D240()
{
  return MEMORY[0x1E0CB1998]();
}

uint64_t sub_1B0A1D24C(void)
{
  return MEMORY[0x1E0CB19D0]();
}

uint64_t sub_1B0A1D258()
{
  return MEMORY[0x1E0CB19D8]();
}

uint64_t sub_1B0A1D264()
{
  return MEMORY[0x1E0CB19E0]();
}

uint64_t sub_1B0A1D270()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1B0A1D27C()
{
  return MEMORY[0x1E0CB19F0]();
}

uint64_t sub_1B0A1D288()
{
  return MEMORY[0x1E0CB1A08]();
}

uint64_t sub_1B0A1D294()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1B0A1D2A0()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1B0A1D2AC()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_1B0A1D2B8()
{
  return MEMORY[0x1E0DEA640]();
}

uint64_t sub_1B0A1D2C4()
{
  return MEMORY[0x1E0DEA650]();
}

uint64_t sub_1B0A1D2D0()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t sub_1B0A1D2DC()
{
  return MEMORY[0x1E0DEA6A0]();
}

uint64_t sub_1B0A1D2E8()
{
  return MEMORY[0x1E0DEA6A8]();
}

uint64_t sub_1B0A1D2F4()
{
  return MEMORY[0x1E0DEA6F0]();
}

uint64_t sub_1B0A1D300()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t sub_1B0A1D30C()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1B0A1D318()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t sub_1B0A1D324()
{
  return MEMORY[0x1E0DEA7D0]();
}

uint64_t sub_1B0A1D330()
{
  return MEMORY[0x1E0DEA7F0]();
}

uint64_t sub_1B0A1D33C()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1B0A1D348()
{
  return MEMORY[0x1E0DEA828]();
}

uint64_t sub_1B0A1D354()
{
  return MEMORY[0x1E0DEA840]();
}

uint64_t sub_1B0A1D360()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1B0A1D36C()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1B0A1D378()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1B0A1D384()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_1B0A1D390()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1B0A1D39C()
{
  return MEMORY[0x1E0DEA8D0]();
}

uint64_t sub_1B0A1D3A8()
{
  return MEMORY[0x1E0DEA8E8]();
}

uint64_t sub_1B0A1D3B4()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1B0A1D3C0()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_1B0A1D3CC()
{
  return MEMORY[0x1E0DEA9C0]();
}

uint64_t sub_1B0A1D3D8()
{
  return MEMORY[0x1E0DEAA08]();
}

uint64_t sub_1B0A1D3E4()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1B0A1D3F0()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_1B0A1D3FC()
{
  return MEMORY[0x1E0DEAA80]();
}

uint64_t sub_1B0A1D408()
{
  return MEMORY[0x1E0DEAAB8]();
}

uint64_t sub_1B0A1D414()
{
  return MEMORY[0x1E0DEAAD0]();
}

uint64_t sub_1B0A1D420()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_1B0A1D42C()
{
  return MEMORY[0x1E0DEAB28]();
}

uint64_t sub_1B0A1D438()
{
  return MEMORY[0x1E0DEAC80]();
}

uint64_t sub_1B0A1D444()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t sub_1B0A1D450()
{
  return MEMORY[0x1E0DEAC90]();
}

uint64_t sub_1B0A1D45C()
{
  return MEMORY[0x1E0DEACE8]();
}

uint64_t sub_1B0A1D468()
{
  return MEMORY[0x1E0DEAD60]();
}

uint64_t sub_1B0A1D474()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1B0A1D480()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1B0A1D48C()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1B0A1D498()
{
  return MEMORY[0x1E0DEADC0]();
}

uint64_t sub_1B0A1D4A4()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t sub_1B0A1D4B0()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1B0A1D4BC()
{
  return MEMORY[0x1E0DEAE08]();
}

uint64_t sub_1B0A1D4C8()
{
  return MEMORY[0x1E0DEAE20]();
}

uint64_t sub_1B0A1D4D4()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1B0A1D4E0()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t sub_1B0A1D4EC()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1B0A1D4F8()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t sub_1B0A1D504()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t sub_1B0A1D510()
{
  return MEMORY[0x1E0DEAE98]();
}

uint64_t sub_1B0A1D51C()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1B0A1D528()
{
  return MEMORY[0x1E0DEAF78]();
}

uint64_t sub_1B0A1D534()
{
  return MEMORY[0x1E0DEAFE8]();
}

uint64_t sub_1B0A1D540()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t sub_1B0A1D54C()
{
  return MEMORY[0x1E0DEB130]();
}

uint64_t sub_1B0A1D558()
{
  return MEMORY[0x1E0DEB148]();
}

uint64_t sub_1B0A1D564()
{
  return MEMORY[0x1E0DEB170]();
}

uint64_t sub_1B0A1D570()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1B0A1D57C()
{
  return MEMORY[0x1E0DEB4A0]();
}

uint64_t sub_1B0A1D588()
{
  return MEMORY[0x1E0DEB518]();
}

uint64_t sub_1B0A1D594()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1B0A1D5A0()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_1B0A1D5AC()
{
  return MEMORY[0x1E0DEB570]();
}

uint64_t sub_1B0A1D5B8()
{
  return MEMORY[0x1E0DEB598]();
}

uint64_t sub_1B0A1D5C4()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_1B0A1D5D0()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_1B0A1D5DC()
{
  return MEMORY[0x1E0DEB5D0]();
}

uint64_t sub_1B0A1D5E8()
{
  return MEMORY[0x1E0DEB5E8]();
}

uint64_t sub_1B0A1D5F4()
{
  return MEMORY[0x1E0DEB608]();
}

uint64_t sub_1B0A1D600()
{
  return MEMORY[0x1E0DEB618]();
}

uint64_t sub_1B0A1D60C()
{
  return MEMORY[0x1E0DEB620]();
}

uint64_t sub_1B0A1D618()
{
  return MEMORY[0x1E0DEB628]();
}

uint64_t sub_1B0A1D624()
{
  return MEMORY[0x1E0DEB630]();
}

uint64_t sub_1B0A1D630()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1B0A1D63C()
{
  return MEMORY[0x1E0DEB668]();
}

uint64_t sub_1B0A1D648()
{
  return MEMORY[0x1E0DEB690]();
}

uint64_t sub_1B0A1D654()
{
  return MEMORY[0x1E0DEB6A0]();
}

uint64_t sub_1B0A1D660()
{
  return MEMORY[0x1E0DEB6C0]();
}

uint64_t sub_1B0A1D66C()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_1B0A1D678()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t sub_1B0A1D684()
{
  return MEMORY[0x1E0DEB900]();
}

uint64_t sub_1B0A1D690()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1B0A1D69C()
{
  return MEMORY[0x1E0DEB9A8]();
}

uint64_t sub_1B0A1D6A8()
{
  return MEMORY[0x1E0DEB9B0]();
}

uint64_t sub_1B0A1D6B4()
{
  return MEMORY[0x1E0DEB9B8]();
}

uint64_t sub_1B0A1D6C0()
{
  return MEMORY[0x1E0DEB9C0]();
}

uint64_t sub_1B0A1D6CC()
{
  return MEMORY[0x1E0DEB9D0]();
}

uint64_t sub_1B0A1D6D8()
{
  return MEMORY[0x1E0DEB9F8]();
}

uint64_t sub_1B0A1D6E4()
{
  return MEMORY[0x1E0DEBA70]();
}

uint64_t sub_1B0A1D6F0()
{
  return MEMORY[0x1E0DEBAD8]();
}

uint64_t sub_1B0A1D6FC()
{
  return MEMORY[0x1E0DEBB48]();
}

uint64_t sub_1B0A1D708()
{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t sub_1B0A1D714()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1B0A1D720()
{
  return MEMORY[0x1E0CB23F8]();
}

uint64_t sub_1B0A1D72C()
{
  return MEMORY[0x1E0DEBCB0]();
}

uint64_t sub_1B0A1D738()
{
  return MEMORY[0x1E0DEBCB8]();
}

uint64_t sub_1B0A1D744()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t sub_1B0A1D750()
{
  return MEMORY[0x1E0DEFF58]();
}

uint64_t sub_1B0A1D75C()
{
  return MEMORY[0x1E0DEBD70]();
}

uint64_t sub_1B0A1D768()
{
  return MEMORY[0x1E0DEBD78]();
}

uint64_t sub_1B0A1D774()
{
  return MEMORY[0x1E0DEBD88]();
}

uint64_t sub_1B0A1D780()
{
  return MEMORY[0x1E0DEBDA0]();
}

uint64_t sub_1B0A1D78C()
{
  return MEMORY[0x1E0DEBDB8]();
}

uint64_t sub_1B0A1D798()
{
  return MEMORY[0x1E0DEBDC0]();
}

uint64_t sub_1B0A1D7A4()
{
  return MEMORY[0x1E0DEBDC8]();
}

uint64_t sub_1B0A1D7B0()
{
  return MEMORY[0x1E0DEBDF8]();
}

uint64_t sub_1B0A1D7BC()
{
  return MEMORY[0x1E0DEBE00]();
}

uint64_t sub_1B0A1D7C8()
{
  return MEMORY[0x1E0DEBE10]();
}

uint64_t sub_1B0A1D7D4()
{
  return MEMORY[0x1E0DEBE30]();
}

uint64_t sub_1B0A1D7E0()
{
  return MEMORY[0x1E0DEBE48]();
}

uint64_t sub_1B0A1D7EC()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1B0A1D7F8()
{
  return MEMORY[0x1E0DEBED0]();
}

uint64_t sub_1B0A1D804()
{
  return MEMORY[0x1E0DEBED8]();
}

uint64_t sub_1B0A1D810()
{
  return MEMORY[0x1E0DEBEE8]();
}

uint64_t sub_1B0A1D81C()
{
  return MEMORY[0x1E0DEBF10]();
}

uint64_t sub_1B0A1D828()
{
  return MEMORY[0x1E0DEBF30]();
}

uint64_t sub_1B0A1D834()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1B0A1D840()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1B0A1D84C()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1B0A1D858()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1B0A1D864()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1B0A1D870()
{
  return MEMORY[0x1E0DEC280]();
}

uint64_t sub_1B0A1D87C()
{
  return MEMORY[0x1E0DEC288]();
}

uint64_t sub_1B0A1D888()
{
  return MEMORY[0x1E0DEC290]();
}

uint64_t sub_1B0A1D894()
{
  return MEMORY[0x1E0DEC2A0]();
}

uint64_t sub_1B0A1D8A0()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1B0A1D8AC()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t sub_1B0A1D8B8()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1B0A1D8C4()
{
  return MEMORY[0x1E0DEC590]();
}

uint64_t sub_1B0A1D8D0()
{
  return MEMORY[0x1E0DEC6A0]();
}

uint64_t sub_1B0A1D8DC()
{
  return MEMORY[0x1E0DEC6B0]();
}

uint64_t sub_1B0A1D8E8()
{
  return MEMORY[0x1E0DEC6D0]();
}

uint64_t sub_1B0A1D8F4()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t sub_1B0A1D900()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1B0A1D90C()
{
  return MEMORY[0x1E0DEC8F8]();
}

uint64_t sub_1B0A1D918()
{
  return MEMORY[0x1E0DEC910]();
}

uint64_t sub_1B0A1D924()
{
  return MEMORY[0x1E0DEC930]();
}

uint64_t sub_1B0A1D930()
{
  return MEMORY[0x1E0DEC9F0]();
}

uint64_t sub_1B0A1D93C()
{
  return MEMORY[0x1E0DECA00]();
}

uint64_t sub_1B0A1D948()
{
  return MEMORY[0x1E0DECA08]();
}

uint64_t sub_1B0A1D954()
{
  return MEMORY[0x1E0DECA28]();
}

uint64_t sub_1B0A1D960()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t sub_1B0A1D96C()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t sub_1B0A1D978()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t sub_1B0A1D984()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1B0A1D990()
{
  return MEMORY[0x1E0DECC10]();
}

uint64_t sub_1B0A1D99C()
{
  return MEMORY[0x1E0DECC18]();
}

uint64_t sub_1B0A1D9A8()
{
  return MEMORY[0x1E0DECC30]();
}

uint64_t sub_1B0A1D9B4()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1B0A1D9C0()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1B0A1D9CC()
{
  return MEMORY[0x1E0DECD48]();
}

uint64_t sub_1B0A1D9D8()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1B0A1D9E4()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1B0A1D9F0()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1B0A1D9FC()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_1B0A1DA08()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1B0A1DA14()
{
  return MEMORY[0x1E0DED020]();
}

uint64_t sub_1B0A1DA20()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1B0A1DA2C()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1B0A1DA38()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1B0A1DA44()
{
  return MEMORY[0x1E0DED150]();
}

uint64_t sub_1B0A1DA50()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1B0A1DA5C()
{
  return MEMORY[0x1E0DED1B8]();
}

uint64_t sub_1B0A1DA68()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1B0A1DA74()
{
  return MEMORY[0x1E0DED1E8]();
}

uint64_t sub_1B0A1DA80()
{
  return MEMORY[0x1E0DED5C0]();
}

uint64_t sub_1B0A1DA8C()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1B0A1DA98()
{
  return MEMORY[0x1E0DED770]();
}

uint64_t sub_1B0A1DAA4()
{
  return MEMORY[0x1E0DED980]();
}

uint64_t sub_1B0A1DAB0()
{
  return MEMORY[0x1E0DED9C0]();
}

uint64_t sub_1B0A1DABC()
{
  return MEMORY[0x1E0DED9E8]();
}

uint64_t sub_1B0A1DAC8()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1B0A1DAD4()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1B0A1DAE0()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1B0A1DAEC()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1B0A1DAF8()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1B0A1DB04()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1B0A1DB10()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t sub_1B0A1DB1C()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t sub_1B0A1DB28()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1B0A1DB34()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1B0A1DB40()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1B0A1DB4C()
{
  return MEMORY[0x1E0DEDF20]();
}

uint64_t sub_1B0A1DB58()
{
  return MEMORY[0x1E0DEDF28]();
}

uint64_t sub_1B0A1DB64()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_1B0A1DB70()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1B0A1DB7C()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1B0A1DB88()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1B0A1DB94()
{
  return MEMORY[0x1E0DEE538]();
}

uint64_t sub_1B0A1DBA0()
{
  return MEMORY[0x1E0DEE6B8]();
}

uint64_t sub_1B0A1DBAC()
{
  return MEMORY[0x1E0DEE6E0]();
}

uint64_t sub_1B0A1DBB8()
{
  return MEMORY[0x1E0DEE6F0]();
}

uint64_t sub_1B0A1DBC4()
{
  return MEMORY[0x1E0DEE710]();
}

uint64_t sub_1B0A1DBD0()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1B0A1DBDC()
{
  return MEMORY[0x1E0DEE8E8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
  MEMORY[0x1E0C97DA8](theArray, range.location, range.length, values);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
  MEMORY[0x1E0C97DC8](theArray, range.location, range.length, newValues, newCount);
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
  MEMORY[0x1E0C97DE0](theArray, range.location, range.length, comparator, context);
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
  MEMORY[0x1E0C982A0](theSet, theRange.location, theRange.length);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
  MEMORY[0x1E0C982A8](theSet, theString);
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982B8](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982C8](alloc);
}

void CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
  MEMORY[0x1E0C98338](theSet, theRange.location, theRange.length);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
  MEMORY[0x1E0C98420](theData, extraLength);
}

void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength)
{
  MEMORY[0x1E0C98428](theData, range.location, range.length, newBytes, newLength);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C985F8](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1E0C98768]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1E0C98790]();
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987A0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(CFAllocatorRef allocator, LangCode lcode, RegionCode rcode)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987A8](allocator, lcode, rcode);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(CFAllocatorRef allocator, uint32_t lcid)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D0](allocator, *(_QWORD *)&lcid);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendFormatAndArguments(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  MEMORY[0x1E0C98EF8](theString, formatOptions, format, arguments);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1E0C98F80](alloc, theString, *(_QWORD *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FF8](alloc, chars, numChars, contentsDeallocator);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  double result;

  MEMORY[0x1E0C990D0](str);
  return result;
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C990E0](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1E0C99128](string);
}

Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99148](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

ConstStringPtr CFStringGetPascalStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (ConstStringPtr)MEMORY[0x1E0C99150](theString, *(_QWORD *)&encoding);
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

uint64_t CFStringHashCString()
{
  return MEMORY[0x1E0C99198]();
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1E0C9BAB8](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

uint64_t CGFontIndexMapAddRange()
{
  return MEMORY[0x1E0C9C8A0]();
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D298](path, m, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2C0](path, m, cpx, cpy, x, y);
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
  MEMORY[0x1E0C9D300](path, block);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D320](path);
}

CGPathRef CGPathCreateCopyByNormalizing(CGPathRef path, BOOL evenOddFillRule)
{
  return (CGPathRef)MEMORY[0x1E0C9D340](path, evenOddFillRule);
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D358](path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D3F0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x1E0C9D448](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFAppVersionCheck()
{
  return MEMORY[0x1E0C99ED8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t HVF::PartTransformRenderer::setRenderPart(HVF::PartTransformRenderer *this)
{
  return MEMORY[0x1E0D22770](this);
}

uint64_t HVF::PartTransformRenderer::renderToContext()
{
  return MEMORY[0x1E0D22778]();
}

uint64_t HVF::PartTransformRenderer::PartTransformRenderer()
{
  return MEMORY[0x1E0D22780]();
}

void HVF::PartTransformRenderer::~PartTransformRenderer(HVF::PartTransformRenderer *this)
{
  MEMORY[0x1E0D22788](this);
}

uint64_t HVF::Loader::withTableData(HVF::Loader *this, const void *a2)
{
  return MEMORY[0x1E0D22790](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1E0DE43E0](a1);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

uint64_t std::__sort<std::__less<short,short> &,short *>()
{
  return MEMORY[0x1E0DE4B18]();
}

uint64_t std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>()
{
  return MEMORY[0x1E0DE4B20]();
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C38](this);
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C40](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E6175D58();
}

void operator delete(void *__p)
{
  off_1E6175D60(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_1E6175D68(__p, a2);
}

uint64_t operator delete()
{
  return off_1E6175D70();
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E6175D78(__sz, a2);
}

uint64_t operator new[]()
{
  return off_1E6175D80();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E6175D88(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E6175D90(__sz, a2);
}

uint64_t operator new()
{
  return off_1E6175D98();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x1E0DE5070]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1E0DEE9F8]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x1E0DEEA58]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

double atof_l(const char *a1, locale_t a2)
{
  double result;

  MEMORY[0x1E0C81660](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

int atoi_l(const char *a1, locale_t a2)
{
  return MEMORY[0x1E0C81670](a1, a2);
}

uint64_t atol_l(const char *a1, locale_t a2)
{
  return MEMORY[0x1E0C81680](a1, a2);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1E0C81740](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5270](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

size_t compression_decode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5278](*(_QWORD *)&algorithm);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83860](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1E0C83EB0](size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C85448](a1, a2, a3, a4);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B8](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1E0C855C8](__big, __little, __len);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

uint64_t strtol_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C85660](a1, a2, *(_QWORD *)&a3, a4);
}

unint64_t strtoul_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1E0C856A0](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x1E0DEECE8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x1E0DEED10]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1E0DEED28]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1E0DEED90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1E0DEEE68]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1E0DE5978](*(_QWORD *)&c);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x1E0DE59E0](*(_QWORD *)&c, *(_QWORD *)&which);
}

uint64_t uloc_addLikelySubtags()
{
  return MEMORY[0x1E0DE6388]();
}

uint64_t uloc_getLanguage()
{
  return MEMORY[0x1E0DE6430]();
}

uint64_t uloc_getScript()
{
  return MEMORY[0x1E0DE6448]();
}

uint64_t uloc_minimizeSubtags()
{
  return MEMORY[0x1E0DE6458]();
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x1E0DE93F8](dest, destLen, source, sourceLen);
}

uint64_t uset_close()
{
  return MEMORY[0x1E0DE6988]();
}

uint64_t uset_getItem()
{
  return MEMORY[0x1E0DE69B0]();
}

uint64_t uset_getItemCount()
{
  return MEMORY[0x1E0DE69B8]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1E0DE69E0]();
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1E0DE8D18](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x1E0DE8D38](cur);
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x1E0DE8DA0](node, name);
}

void xmlInitParser(void)
{
  MEMORY[0x1E0DE8DC0]();
}

xmlDocPtr xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x1E0DE8EE0](buffer, *(_QWORD *)&size, URL, encoding, *(_QWORD *)&options);
}

