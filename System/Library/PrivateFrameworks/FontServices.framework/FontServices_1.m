uint64_t sub_1B09091D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1B0A1CEF8();
  swift_allocObject();
  result = sub_1B0A1CEB0();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1B0909258(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_1B0A1CEF8();
      swift_allocObject();
      sub_1B0A1CEC8();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1B0A1CF70();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

_QWORD *sub_1B09092F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1B0908504(a1, a2, *(__int16 **)(v3 + 16), a3);
}

uint64_t sub_1B090930C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1B0908578(a1, a2, *(__int16 **)(v3 + 16), a3);
}

uint64_t sub_1B0909328(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB340);
  v10 = sub_1B08CE2D8(&qword_1EEEBB348, &qword_1EEEBB340, MEMORY[0x1E0CB1B08]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_1B0907BA0(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t MutableContiguousArrayStorage.withMutableCheckedBufferView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a5;
  v6[5] = a1;
  v6[6] = a2;
  return (*(uint64_t (**)(uint64_t (*)(__int128 *), _QWORD *, uint64_t, uint64_t))(a5 + 16))(sub_1B090BE0C, v6, a4, a3);
}

uint64_t ContiguousArrayStorage.withCheckedBufferView<A>(action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[2] = a3;
  v6[3] = a4;
  v6[4] = a5;
  v6[5] = a1;
  v6[6] = a2;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(a5 + 24))(sub_1B090A410, v6, a4, a3);
}

uint64_t sub_1B0909460(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return sub_1B0909598(a1, a2, a3);
}

uint64_t sub_1B0909474(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  _QWORD v15[4];

  type metadata accessor for RefcountCheck();
  v15[0] = swift_allocObject();
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x190))(a4, a5, a6, a7, v15);
  if (swift_isUniquelyReferenced_nonNull_native())
  {

    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();

    result = sub_1B0A1D984();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0909598(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result;

  type metadata accessor for RefcountCheck();
  swift_allocObject();
  a3();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    return swift_release();
  result = sub_1B0A1D984();
  __break(1u);
  return result;
}

uint64_t sub_1B0909680(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  _QWORD v15[4];

  type metadata accessor for RefcountCheck();
  v15[0] = swift_allocObject();
  v15[1] = a1;
  v15[2] = a2;
  v15[3] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x1A0))(a4, a5, a6, a7, v15);
  if (swift_isUniquelyReferenced_nonNull_native())
  {

    swift_release();
    return swift_release();
  }
  else
  {
    swift_release();

    result = sub_1B0A1D984();
    __break(1u);
  }
  return result;
}

uint64_t UnsafeMutableBufferPointer.withMutableCheckedBufferView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v11 = sub_1B0A1D6C0();
  v12 = a6;
  v13 = MEMORY[0x1B5E0D530](&protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v11);
  v14 = a1;
  v15 = a2;
  return (*(uint64_t (**)(uint64_t (*)(__int128 *), _BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 16))(sub_1B090BE0C, v10, a6, v11, v13);
}

uint64_t CheckedBufferView.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  v2 = sub_1B0A1D1F8();
  return a1(v2);
}

uint64_t CheckedBufferView.indices.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = sub_1B0A1D69C();
  if (__OFADD__(a4, result))
  {
    __break(1u);
  }
  else if (a4 + result >= a4)
  {
    return a4;
  }
  __break(1u);
  return result;
}

void (*CheckedBufferView.subscript.modify(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  void (*result)(_QWORD *);
  char *v8;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(v2 + 24);
  result = (void (*)(_QWORD *))sub_1B0A1D69C();
  v8 = (char *)result + v6;
  if (__OFADD__(v6, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((uint64_t)v8 < v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 > a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)v8 <= a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!__OFSUB__(a2, v6))
  {
    v5[4] = sub_1B0A1D6D8();
    return sub_1B090999C;
  }
LABEL_11:
  __break(1u);
  return result;
}

void sub_1B090999C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t CheckedBufferView.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t CheckedBufferView.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  v5 = sub_1B0A1D69C();
  v6 = __OFADD__(a4, v5);
  result = a4 + v5;
  if (v6)
    __break(1u);
  return result;
}

void (*CheckedBufferView.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(_QWORD *a1)
{
  uint64_t v12;
  void *v13;
  void (*result)(_QWORD *);
  char *v15;

  v12 = *(_QWORD *)(a7 - 8);
  *a1 = a7;
  a1[1] = v12;
  v13 = malloc(*(_QWORD *)(v12 + 64));
  a1[2] = v13;
  result = (void (*)(_QWORD *))sub_1B0A1D69C();
  v15 = (char *)result + a6;
  if (__OFADD__(a6, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((uint64_t)v15 < a6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a6 > a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)v15 <= a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!__OFSUB__(a2, a6))
  {
    (*(void (**)(void *, uint64_t, uint64_t))(v12 + 16))(v13, a4 + *(_QWORD *)(v12 + 72) * (a2 - a6), a7);
    return sub_1B08E0EEC;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CheckedBufferView.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v11;

  result = sub_1B0A1D69C();
  v11 = a3 + result;
  if (__OFADD__(a3, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v11 < a3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 > a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v11 <= a1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!__OFSUB__(a1, a3))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a5, a2 + *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * (a1 - a3), a4);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CheckedBufferView.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(a3 + 16);
  result = sub_1B0A1D69C();
  v10 = v7 + result;
  if (__OFADD__(v7, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v10 < v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v7 > a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v10 <= a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!__OFSUB__(a2, v7))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * (a2 - v7), a1, v8);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t CheckedBufferView.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = result - a6;
  if (__OFSUB__(result, a6))
  {
    __break(1u);
    goto LABEL_7;
  }
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (__OFADD__(v6, v7))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 + v7 >= v6)
  {
    swift_retain();
    sub_1B0A1D6CC();
    sub_1B0A1D6B4();
    return a3;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t CheckedBufferView.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1B090B80C(a1, a2, a3, a4, a5, a6, a7);
  return swift_release();
}

uint64_t sub_1B0909CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t result;

  v13 = sub_1B0A1D6B4();
  v15 = sub_1B090AE18(a1, v13, v14, a6, a7, a8);
  v16 = __OFADD__(a2, v15);
  result = a2 + v15;
  if (v16)
    __break(1u);
  return result;
}

void (*CheckedBufferView.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t *v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[6] = a4;
  v9[7] = v4;
  v9[4] = a2;
  v9[5] = a3;
  *v9 = CheckedBufferView.subscript.getter(a2, a3, *v4, v4[1], v4[2], v4[3]);
  v9[1] = v10;
  v9[2] = v11;
  v9[3] = v12;
  return sub_1B0909DF0;
}

void sub_1B0909DF0(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v6 = (*a1)[6];
  v8 = (*a1)[4];
  v7 = (*a1)[5];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    v10 = swift_retain();
    sub_1B090B80C(v10, v3, v4, v5, v8, v7, v6);
    swift_release();
  }
  else
  {
    sub_1B090B80C(v9, v3, v4, v5, v8, v7, v6);
  }
  swift_release();
  free(v2);
}

Swift::Int __swiftcall CheckedBufferView.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t sub_1B0909EAC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void (*v5)(_QWORD *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v5 = CheckedBufferView.subscript.modify(v10, *a2);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v8, a1, v6);
  ((void (*)(_QWORD *, _QWORD))v5)(v10, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

void (*sub_1B0909F24(_QWORD *a1, uint64_t *a2))(_QWORD *)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = CheckedBufferView.subscript.modify(v4, *a2);
  return sub_1B0909F80;
}

uint64_t sub_1B0909F84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_1B090B80C(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a3);
  return swift_release();
}

void (*sub_1B0909FBC(_QWORD *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[4] = v3;
  v7[5] = a3;
  v8 = *a2;
  v9 = a2[1];
  v7[6] = *a2;
  v7[7] = v9;
  *v7 = CheckedBufferView.subscript.getter(v8, v9, *v3, v3[1], v3[2], v3[3]);
  v7[1] = v10;
  v7[2] = v11;
  v7[3] = v12;
  return sub_1B090A030;
}

void sub_1B090A030(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (*a1)[6];
  v6 = (*a1)[7];
  v8 = (*a1)[5];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    v10 = swift_retain();
    sub_1B090B80C(v10, v3, v4, v5, v7, v6, v8);
    swift_release();
  }
  else
  {
    sub_1B090B80C(v9, v3, v4, v5, v7, v6, v8);
  }
  swift_release();
  free(v2);
}

uint64_t sub_1B090A0DC()
{
  return sub_1B0A1D1BC();
}

uint64_t sub_1B090A0F4()
{
  return sub_1B0A1D1A4();
}

uint64_t sub_1B090A114()
{
  return sub_1B0A1D198();
}

void sub_1B090A134(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

uint64_t sub_1B090A140@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = CheckedBufferView.endIndex.getter(a1, v2[1], v2[2], v2[3]);
  *a2 = result;
  return result;
}

void (*sub_1B090A170(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = CheckedBufferView.subscript.read(v7, *a2, v8, v3[1], v3[2], v3[3], *(_QWORD *)(a3 + 16));
  return sub_1B0909F80;
}

uint64_t sub_1B090A1D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = CheckedBufferView.subscript.getter(*a1, a1[1], *v2, v2[1], v2[2], v2[3]);
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t sub_1B090A214@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;

  result = CheckedBufferView.indices.getter(a1, v2[1], v2[2], v2[3]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

void sub_1B090A244(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1B090A254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B090B660(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1B090A278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B090B660(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

_QWORD *sub_1B090A29C(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 sub_1B090A2B4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1B090A2D0(uint64_t a1)
{
  MEMORY[0x1B5E0D530](&protocol conformance descriptor for CheckedBufferView<A>, a1);
  return sub_1B0A1D5E8();
}

uint64_t sub_1B090A304(uint64_t a1)
{
  MEMORY[0x1B5E0D530](&protocol conformance descriptor for CheckedBufferView<A>, a1);
  return sub_1B0A1D5F4();
}

uint64_t sub_1B090A338()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1B090A348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[8];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = sub_1B0A1D1F8();
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a7;
  v16[5] = a3;
  v16[6] = a4;
  return UnsafeMutableBufferPointer.withMutableCheckedBufferView<A>(_:)((uint64_t)sub_1B090BDE0, (uint64_t)v16, v13, v14, AssociatedTypeWitness, a6);
}

uint64_t sub_1B090A410(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1B090A348(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

uint64_t sub_1B090A430(__int128 *a1, void (*a2)(uint64_t *))
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  type metadata accessor for RefcountCheck();
  v5 = swift_allocObject();
  v6 = *a1;
  v7 = 0;
  a2(&v5);
  sub_1B090A4E0();
  return swift_release();
}

uint64_t sub_1B090A4E0()
{
  uint64_t result;

  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result)
  {
    result = sub_1B0A1D984();
    __break(1u);
  }
  return result;
}

uint64_t ContiguousByteStorage.withCheckedBufferView<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[8];

  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a1;
  v7[7] = a2;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a6 + 8))(sub_1B090B930, v7, a5, a3, a6);
}

uint64_t sub_1B090A598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t result;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v15 = sub_1B0A1D1EC();
  v16 = a7;
  v17 = MEMORY[0x1B5E0D530](&protocol conformance descriptor for UnsafeBufferPointer<A>, v15);
  v18 = a3;
  v19 = a4;
  result = (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t), _BYTE *, uint64_t, uint64_t, uint64_t))(v17 + 24))(sub_1B090A410, v14, a7, v15, v17);
  if (v9)
    *a9 = v9;
  return result;
}

uint64_t MutableContiguousByteStorage.withMutableCheckedBufferView<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[8];

  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a1;
  v7[7] = a2;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(a6 + 16))(sub_1B090B954, v7, a5, a3, a6);
}

uint64_t sub_1B090A690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t), uint64_t (*a10)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a3;
  v22 = a4;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7D0);
  return sub_1B090A744(a6, a9, (uint64_t)v16, a1, a2, a6, v14, a7, MEMORY[0x1E0DEDB38], (uint64_t)&v23, a10);
}

uint64_t sub_1B090A744(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v14 = *(_QWORD *)(a7 - 8);
  v15 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v15);
  v23 = (char *)&v26 - v22;
  if (v19)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72);
    if (v24)
    {
      if (v20 - v19 != 0x8000000000000000 || v24 != -1)
      {
        v25 = a11(v19, (v20 - v19) / v24, v21);
        result = a2(v25);
        if (!v11)
          return result;
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a10, v17, a7);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  result = ((uint64_t (*)(_QWORD, _QWORD, char *))a2)(0, 0, (char *)&v26 - v22);
  v17 = v23;
  if (v11)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a10, v17, a7);
  return result;
}

uint64_t UnsafeMutableBufferPointer.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  v2 = sub_1B0A1D1F8();
  return a1(v2);
}

uint64_t CheckedBufferView.withUnsafeMutableBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  sub_1B0A1D6C0();
  return a1(v1 + 8);
}

uint64_t UnsafeMutableBufferPointer.withUnsafeMutableBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t sub_1B090A938(uint64_t (*a1)(uint64_t))
{
  return CheckedBufferView.withUnsafeMutableBufferPointer<A>(_:)(a1);
}

uint64_t sub_1B090A950(uint64_t a1)
{
  MEMORY[0x1B5E0D530](&protocol conformance descriptor for CheckedBufferView<A>, a1);
  return sub_1B0A1D600();
}

uint64_t sub_1B090A984(uint64_t (*a1)(uint64_t))
{
  return CheckedBufferView.withUnsafeBufferPointer<A>(_:)(a1);
}

_QWORD *sub_1B090A9A4(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v15[3] = a3;
  sub_1B0A1D4BC();
  v7 = *v4;
  v8 = *(_QWORD *)(a4 + 16);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v9 = v7;
  v10 = *(_QWORD *)(v9 + 16);
  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = v7;
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v13 = v11 + ((v12 + 32) & ~v12);
  v15[0] = v13;
  v15[1] = v10;
  a1(v15);
  return sub_1B090B0FC(v15, v13, v10);
}

void sub_1B090AA8C()
{
  JUMPOUT(0x1B5E0C030);
}

uint64_t sub_1B090AA9C()
{
  return sub_1B0A1D4C8();
}

_QWORD *sub_1B090AABC(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v11[3] = a3;
  sub_1B0A1D8D0();
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80);
  v11[0] = *(_QWORD *)v4 + ((v8 + 32) & ~v8);
  v9 = v11[0];
  v11[1] = v7;
  a1(v11);
  return sub_1B090B150(v11, v9, v7);
}

uint64_t sub_1B090AB78()
{
  return sub_1B0A1D8E8();
}

uint64_t sub_1B090AB88()
{
  return sub_1B0A1D8DC();
}

_QWORD *sub_1B090ABA8(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v10[3] = a3;
  v6 = *(_QWORD *)(a4 + 16);
  v7 = sub_1B0A1D81C();
  sub_1B0A1D7F8();
  v10[0] = *(_QWORD *)(v4 + 8) + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * *(_QWORD *)(v4 + 16);
  v8 = v10[0];
  v10[1] = v7;
  a1(v10);
  return sub_1B090B184(v10, v8, v7);
}

uint64_t sub_1B090AC6C()
{
  return sub_1B0A1D810();
}

uint64_t sub_1B090AC80()
{
  return sub_1B0A1D804();
}

uint64_t sub_1B090ACA8()
{
  return sub_1B0A1CFD0();
}

uint64_t sub_1B090ACBC()
{
  return sub_1B0A1CFB8();
}

uint64_t sub_1B090ACD8()
{
  return sub_1B0A1D060();
}

uint64_t UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t sub_1B090AD24(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeMutableRawBufferPointer.withUnsafeMutableBytes<A>(_:)(uint64_t (*a1)(_QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(*v1, v1[1]);
}

uint64_t sub_1B090AD68(uint64_t (*a1)(_QWORD, _QWORD))
{
  return UnsafeMutableRawBufferPointer.withUnsafeMutableBytes<A>(_:)(a1);
}

uint64_t sub_1B090AD7C()
{
  return sub_1B0A1D720();
}

uint64_t UnsafeBufferPointer.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t sub_1B090ADC4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1B090ADCC(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t *v2;

  return UnsafeBufferPointer.withUnsafeBufferPointer<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t sub_1B090ADE4(uint64_t (*a1)(uint64_t))
{
  return UnsafeMutableBufferPointer.withUnsafeMutableBufferPointer<A>(_:)(a1);
}

uint64_t sub_1B090ADF8(uint64_t (*a1)(uint64_t))
{
  return UnsafeMutableBufferPointer.withUnsafeBufferPointer<A>(_:)(a1);
}

uint64_t sub_1B090AE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t result;
  uint64_t (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t AssociatedTypeWitness;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v12 = sub_1B0A1D690();
  v30 = *(_QWORD *)(v12 - 8);
  v31 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v19);
  v33 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v34 = a2;
  v35 = (char *)&v27 - v21;
  v37 = a4;
  v38 = a5;
  v28 = a6;
  v39 = a6;
  v40 = a2;
  v41 = a3;
  sub_1B0A1D3FC();
  if (v43 != 1)
    return v42;
  if (!a3)
  {
    result = sub_1B0A1D5B8();
    if ((result & 1) == 0)
      goto LABEL_14;
    return 0;
  }
  v28 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v33, a1, a5);
  sub_1B0A1D3F0();
  swift_getAssociatedConformanceWitness();
  sub_1B0A1D714();
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v22(v14, 1, a4) == 1)
  {
    v23 = 0;
LABEL_11:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v35, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v31);
    return v23;
  }
  v23 = 0;
  v25 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 32);
  v26 = v28 & ~(v28 >> 63);
  while (1)
  {
    result = v25(v18, v14, a4);
    if (v26 == v23)
      break;
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v34 + *(_QWORD *)(v15 + 72) * v23++, v18, a4);
    sub_1B0A1D714();
    if (v22(v14, 1, a4) == 1)
      goto LABEL_11;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

_QWORD *sub_1B090B0FC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
      {
        v3 = sub_1B0A1D51C();
        return (_QWORD *)nullsub_1(v3);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1B090B150(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
        return (_QWORD *)sub_1B0A1D8F4();
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1B090B184(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
        return (_QWORD *)sub_1B0A1D828();
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B090B1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B090B660(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1B090B1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1B0A1D678();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - v9;
  v11 = sub_1B0A1D18C();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v7, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_1B0A1D18C();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1B090B354(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  type metadata accessor for RefcountCheck();
  v8 = swift_allocObject();
  v9 = *a1;
  v10 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x140))(a3, &v8);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    swift_release();
    return v6;
  }
  else
  {

    result = sub_1B0A1D984();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B090B448(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  return sub_1B090B45C(a1, a2, a3);
}

uint64_t sub_1B090B45C(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for RefcountCheck();
  swift_allocObject();
  a2(&v7);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    a3 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_5:
      swift_release();
      return a3;
    }
  }
  result = sub_1B0A1D984();
  __break(1u);
  return result;
}

uint64_t sub_1B090B554(uint64_t a1, void (*a2)(uint64_t *__return_ptr), char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for RefcountCheck();
  swift_allocObject();
  a2(&v7);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    a3 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_5:
      swift_release();
      return a3 & 1;
    }
  }
  result = sub_1B0A1D984();
  __break(1u);
  return result;
}

uint64_t sub_1B090B64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B090B660(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t sub_1B090B660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v22 - v17;
  v19 = sub_1B0A1D18C();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1B090B80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a1;
  v27 = a2;
  v28 = a3;
  v29 = a4;
  MEMORY[0x1B5E0D530](&protocol conformance descriptor for CheckedBufferView<A>, a7);
  result = sub_1B0A1D600();
  if (__OFSUB__(a6, a5))
  {
    __break(1u);
    goto LABEL_8;
  }
  v14 = result;
  if (result != a6 - a5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v15 = *(_QWORD *)(v7 + 24);
  result = a5 - v15;
  if (__OFSUB__(a5, v15))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (__OFADD__(result, v14))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (result + v14 >= result)
  {
    v16 = *(_QWORD *)(a7 + 16);
    v17 = sub_1B0A1D6CC();
    v19 = v18;
    v21 = v20;
    v23 = v22;
    v26 = a2;
    v27 = a3;
    v24 = sub_1B0A1D6C0();
    v25 = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEB9F0], v24);
    return sub_1B0909CF0((uint64_t)&v26, v17, v19, v21, v23, v16, v24, v25);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1B090B930(uint64_t a1, uint64_t a2)
{
  return sub_1B090B978(a1, a2, (uint64_t (*)(uint64_t))sub_1B090BD4C, MEMORY[0x1E0DEA588]);
}

uint64_t sub_1B090B954(uint64_t a1, uint64_t a2)
{
  return sub_1B090B978(a1, a2, (uint64_t (*)(uint64_t))sub_1B090BD10, MEMORY[0x1E0DEB988]);
}

uint64_t sub_1B090B978(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;

  return sub_1B090A690(a1, a2, v4[6], v4[7], v4[2], v4[3], v4[4], v4[5], a3, a4);
}

void sub_1B090B9AC()
{
  JUMPOUT(0x1B5E0D530);
}

void sub_1B090B9BC()
{
  JUMPOUT(0x1B5E0D530);
}

void sub_1B090B9CC()
{
  JUMPOUT(0x1B5E0D530);
}

uint64_t sub_1B090B9DC()
{
  return MEMORY[0x1E0DEB430];
}

unint64_t sub_1B090B9EC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_1EEEBB350;
  if (!qword_1EEEBB350)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEBB358);
    v2 = sub_1B090BA58();
    v3[0] = MEMORY[0x1E0DEB458];
    v3[1] = v2;
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEB8C0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EEEBB350);
  }
  return result;
}

unint64_t sub_1B090BA58()
{
  unint64_t result;

  result = qword_1EEEBB360;
  if (!qword_1EEEBB360)
  {
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EEEBB360);
  }
  return result;
}

uint64_t sub_1B090BA9C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for CheckedBufferView<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B090BAC8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for [A]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B090BAF4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for ContiguousArray<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B090BB20(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for ArraySlice<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B090BB4C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for UnsafeMutableBufferPointer<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for UTF16Iterator()
{
  return swift_release();
}

uint64_t initializeWithCopy for UTF16Sequence(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for UTF16Sequence(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for UTF16Sequence(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTF16Sequence(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UTF16Sequence(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CheckedBufferView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CheckedBufferView);
}

uint64_t type metadata accessor for RefcountCheck()
{
  return objc_opt_self();
}

uint64_t sub_1B090BD10(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  result = UnsafeMutableBufferPointer.withMutableCheckedBufferView<A>(_:)(v3[6], v3[7], a1, a2, v3[3], v3[4]);
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t sub_1B090BD4C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;

  return sub_1B090A598(a1, a2, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5], a3);
}

uint64_t sub_1B090BD7C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  if (!result)
  {
    v5 = 0;
LABEL_6:
    *a3 = v5;
    return result;
  }
  v5 = a2;
  if (*(_QWORD *)(v3 + 48) >= a2)
  {
    if (*(_QWORD *)(v3 + 40))
      result = sub_1B0A1D684();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B090BDE0(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 40))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1B090BE0C(__int128 *a1)
{
  uint64_t v1;

  return sub_1B090A430(a1, *(void (**)(uint64_t *))(v1 + 40));
}

void sub_1B090BE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X11 }
}

void sub_1B090BF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

uint64_t sub_1B090BFD0(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;

  if (result < 0 || BYTE6(a3) < result)
  {
    sub_1B08A385C();
    swift_allocError();
    *v3 = 2;
    return swift_willThrow();
  }
  return result;
}

void sub_1B090C09C()
{
  __asm { BR              X13 }
}

uint64_t sub_1B090C0EC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[14];

  if (__OFADD__(BYTE6(v0), v2))
  {
    __break(1u);
    goto LABEL_12;
  }
  sub_1B0A1CF88();
  sub_1B0A1CEF8();
  swift_allocObject();
  v12[0] = 0x8000000000;
  v12[1] = sub_1B0A1CEC8();
  sub_1B0907FA0((int *)v12, v1);
  v3 = HIDWORD(v12[0]);
  if (__OFSUB__(HIDWORD(v12[0]), v12[0]))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = SLODWORD(v12[0]);
  v5 = HIDWORD(v12[0]) - LODWORD(v12[0]);
  v6 = SLODWORD(v12[0]) - (uint64_t)SHIDWORD(v12[0]);
  while (v2 > v5)
  {
    sub_1B0A1CFF4();
    v7 = __OFSUB__(v2, v5);
    v2 += v6;
    if (v7)
    {
      __break(1u);
      break;
    }
  }
  if (v3 < (int)v4 || v2 < v4)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x1B090C224);
  }
  v8 = sub_1B0A1CFA0();
  v10 = v9;
  sub_1B0A1CFF4();
  swift_release();
  return sub_1B08A3638(v8, v10);
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CompressionError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CompressionError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_1B090C29C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B090C2B8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompressionError()
{
  return &type metadata for CompressionError;
}

uint64_t sub_1B090C2E8(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  BOOL v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  sub_1B08A35B0(a1, a2);
  sub_1B08A35F4();
  result = sub_1B0A1D090();
  v5 = v3 - result;
  v6 = __OFSUB__(v3, result);
  if (__OFSUB__(v3, result))
    goto LABEL_75;
  if (v5 >= 4)
  {
    v8 = result + 4;
    if (result > 0x7FFFFFFFFFFFFFFBLL || v3 < v8)
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    if (result < 0)
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    v10 = *(_QWORD *)(v4 + 16);
    if (v10 < result || v10 < v8)
      goto LABEL_73;
    v5 = v3 - v8;
    v6 = __OFSUB__(v3, v8);
    if (__OFSUB__(v3, v8))
      goto LABEL_74;
    v7 = bswap32(*(_DWORD *)(v4 + 32 + result));
    if (v5 >= 4)
    {
      do
      {
        v12 = result + 4;
        v13 = result + 8;
        if (result + 4 > 0x7FFFFFFFFFFFFFFBLL || v3 < v13)
          goto LABEL_71;
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_72;
        v15 = *(_QWORD *)(v4 + 16);
        if (v15 < v12 || v15 < v13)
          goto LABEL_73;
        v17 = __OFSUB__(v3, v13);
        v5 = v3 - v13;
        v6 = v17;
        if (v17)
          goto LABEL_74;
        v7 = bswap32(*(_DWORD *)(v4 + 36 + result)) + v7;
        result += 4;
      }
      while (v5 > 3);
      result += 4;
    }
    else
    {
      result += 4;
    }
  }
  else
  {
    v7 = 0;
  }
  if (!v6)
  {
    if (v5 < 1)
    {
LABEL_66:
      swift_bridgeObjectRelease();
      return v7;
    }
    if (result != 0x7FFFFFFFFFFFFFFFLL && v3 >= result + 1)
    {
      v18 = -24;
      v19 = 24;
      v20 = result;
      while (1)
      {
        if (result < 0)
          goto LABEL_68;
        v21 = v20 + 1;
        v22 = *(_QWORD *)(v4 + 16);
        if (v22 < v20 || v22 < v21)
          goto LABEL_69;
        if (v19 - 33 < 0xFFFFFFFFFFFFFFBFLL)
          break;
        v26 = *(unsigned __int8 *)(v4 + 32 + v20);
        if ((v19 & 0x8000000000000000) != 0)
        {
          if (v19 <= 0xFFFFFFFFFFFFFFE0)
            break;
          v24 = v26 >> v18;
          v17 = __OFSUB__(v3, v21);
          v25 = v3 - v21;
          if (v17)
          {
LABEL_65:
            __break(1u);
            goto LABEL_66;
          }
        }
        else
        {
          if (v19 >= 0x20)
            break;
          v24 = v26 << v19;
          v17 = __OFSUB__(v3, v21);
          v25 = v3 - v21;
          if (v17)
            goto LABEL_65;
        }
LABEL_57:
        v7 = v24 + v7;
        if (v25 <= 0)
          goto LABEL_66;
        v17 = __OFSUB__(v19, 8);
        v19 -= 8;
        if (v17)
          goto LABEL_70;
        if (v20 != 0x7FFFFFFFFFFFFFFELL)
        {
          v27 = v20 + 2;
          ++v20;
          v18 += 8;
          if (v3 >= v27)
            continue;
        }
        goto LABEL_67;
      }
      v24 = 0;
      v17 = __OFSUB__(v3, v21);
      v25 = v3 - v21;
      if (v17)
        goto LABEL_65;
      goto LABEL_57;
    }
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_76:
  __break(1u);
  return result;
}

void sub_1B090C4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint8_t *sub_1B090C554()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = v0;
  v8 = v3;
  v9 = BYTE2(v3);
  v10 = BYTE3(v3);
  v11 = BYTE4(v3);
  v12 = BYTE5(v3);
  if (!v1)
  {
    __break(1u);
    JUMPOUT(0x1B090C82CLL);
  }
  v4 = sfp_decompress_brotli(v1, v2 - (_QWORD)v1, (const uint8_t *)&v7, BYTE6(v3));
  if (v4)
    return (uint8_t *)v4;
  sub_1B090CE78();
  swift_allocError();
  *(_DWORD *)v5 = 2;
  *(_BYTE *)(v5 + 4) = 1;
  swift_willThrow();
  return v1;
}

void sub_1B090C850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1B090C8AC(int a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uLongf destLen, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  Bytef *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;

  v27 = a2 - (_QWORD)v24;
  if (!v24)
    v27 = 0;
  v39 = v27;
  v33 = v25;
  v34 = v26;
  v35 = BYTE2(v26);
  v36 = BYTE3(v26);
  v37 = BYTE4(v26);
  v38 = BYTE5(v26);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x1B090CB88);
  }
  v28 = uncompress(v24, (uLongf *)&v39, (const Bytef *)&v33, BYTE6(v26));
  v29 = 0;
  v30 = 1;
  switch(v28)
  {
    case -5:
      goto LABEL_8;
    case -4:
      v29 = 1;
      goto LABEL_8;
    case -3:
      v29 = 2;
      goto LABEL_8;
    case 0:
      result = v39;
      if ((v39 & 0x8000000000000000) == 0)
        return result;
      sub_1B08A38A0();
      swift_allocError();
      break;
    default:
      v30 = 0;
      v29 = v28;
LABEL_8:
      sub_1B090CE78();
      swift_allocError();
      *(_DWORD *)v31 = v29;
      *(_BYTE *)(v31 + 4) = v30;
      break;
  }
  return swift_willThrow();
}

void sub_1B090CBD4()
{
  JUMPOUT(0x1B5E0D5F0);
}

uint64_t sub_1B090CBE0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    sub_1B0A1CF70();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)sub_1B0A1CEBC();
    if (!v4)
    {
LABEL_10:
      v5 = sub_1B0A1CED4();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = sub_1B09090A0(v4, v8);
      swift_release();
      return v3;
    }
    result = sub_1B0A1CEE0();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B090CCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v17;

  v7 = sub_1B0A1CF4C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (void (**)())((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = swift_slowAlloc();
  sub_1B090C4F4(v11, v11 + a1, a2, a3);
  if (v3)
  {
    MEMORY[0x1B5E0D5F0](v11, -1, -1);
    swift_willThrow();
  }
  else
  {
    v13 = v12;
    *v10 = sub_1B090CBD4;
    v10[1] = 0;
    (*(void (**)(void (**)(), _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0CB00D8], v7);
    sub_1B0A1CF40();
    if (v13)
    {
      sub_1B0A1CEF8();
      swift_allocObject();
      swift_retain();
      v14 = sub_1B0A1CEA4();
      a3 = sub_1B090CBE0(v14, v13);
      swift_release();
    }
    else
    {
      v15 = (void (*)(uint64_t, _QWORD))sub_1B0A1CF40();
      v15(v11, 0);
      swift_release();
      swift_release();
      a3 = 0;
    }
    (*(void (**)(void (**)(), uint64_t))(v8 + 8))(v10, v7);
  }
  return a3;
}

unint64_t sub_1B090CE78()
{
  unint64_t result;

  result = qword_1EEEBB540;
  if (!qword_1EEEBB540)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for CompressionError, &type metadata for CompressionError);
    atomic_store(result, (unint64_t *)&qword_1EEEBB540);
  }
  return result;
}

uint64_t _s5ErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B090CF08 + 4 * byte_1B0A37F45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B090CF3C + 4 * byte_1B0A37F40[v4]))();
}

uint64_t sub_1B090CF3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B090CF44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B090CF4CLL);
  return result;
}

uint64_t sub_1B090CF58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B090CF60);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B090CF64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B090CF6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

unint64_t sub_1B090CF8C()
{
  unint64_t result;

  result = qword_1EEEBB548;
  if (!qword_1EEEBB548)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A37FE8, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_1EEEBB548);
  }
  return result;
}

uint64_t sub_1B090CFD0()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v4 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_32:
    __break(1u);
    return result;
  }
  v5 = result;
  result = 0x6365686365707974;
  if (BYTE6(v5) == 2)
  {
    if (BYTE6(v4) == 1)
    {
      v7 = (float)(int)v4;
    }
    else
    {
      if (BYTE6(v4) != 2)
        return result;
      v7 = *(float *)&v4;
    }
    v6 = v7 + *(float *)&v5;
    goto LABEL_18;
  }
  if (BYTE6(v5) == 1)
  {
    if (BYTE6(v4) == 1)
    {
      v8 = (int)v5 + (uint64_t)(int)v4;
      if (v8 == (int)v8)
      {
        v10 = *v1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1B08B64C0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v17 = *((_QWORD *)v10 + 2);
        v18 = *((_QWORD *)v10 + 3);
        v19 = v17 + 1;
        if (v17 >= v18 >> 1)
        {
          v28 = v17 + 1;
          v24 = v10;
          v25 = *((_QWORD *)v10 + 2);
          v26 = sub_1B08B64C0((char *)(v18 > 1), v17 + 1, 1, v24);
          v17 = v25;
          v19 = v28;
          v10 = v26;
        }
        *((_QWORD *)v10 + 2) = v19;
        v20 = &v10[8 * v17];
        *((_DWORD *)v20 + 8) = v8;
        v15 = v20 + 32;
        *((_WORD *)v15 + 2) = 0;
        v16 = 1;
LABEL_30:
        result = 0;
        v15[6] = v16;
        *v1 = v10;
        return result;
      }
      v6 = (float)v8;
LABEL_18:
      v9 = v6;
      if ((~LODWORD(v6) & 0x7F800000) == 0)
        return 0x656E696665646E75;
      v10 = *v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_1B08B64C0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v11 = *((_QWORD *)v10 + 2);
      v12 = *((_QWORD *)v10 + 3);
      v13 = v11 + 1;
      if (v11 >= v12 >> 1)
      {
        v27 = v11 + 1;
        v21 = v10;
        v22 = *((_QWORD *)v10 + 2);
        v23 = sub_1B08B64C0((char *)(v12 > 1), v11 + 1, 1, v21);
        v11 = v22;
        v13 = v27;
        v10 = v23;
      }
      *((_QWORD *)v10 + 2) = v13;
      v14 = &v10[8 * v11];
      *((float *)v14 + 8) = v9;
      v15 = v14 + 32;
      *((_WORD *)v15 + 2) = 0;
      v16 = 2;
      goto LABEL_30;
    }
    if (BYTE6(v4) == 2)
    {
      v6 = *(float *)&v4 + (float)(int)v5;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t sub_1B090D258()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v5 = result;
  result = 0x6365686365707974;
  if (BYTE6(v5))
  {
    if (BYTE6(v5) == 1 && BYTE6(v4) == 1)
    {
      v6 = *v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1B08B64C0(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v8 = *((_QWORD *)v6 + 2);
      v7 = *((_QWORD *)v6 + 3);
      v9 = v8 + 1;
      if (v8 >= v7 >> 1)
      {
        v17 = sub_1B08B64C0((char *)(v7 > 1), v8 + 1, 1, v6);
        v9 = v8 + 1;
        v6 = v17;
      }
      *((_QWORD *)v6 + 2) = v9;
      v10 = &v6[8 * v8];
      *((_DWORD *)v10 + 8) = v5 & v4;
      v11 = v10 + 32;
LABEL_20:
      *((_WORD *)v11 + 2) = 0;
      result = 0;
      v11[6] = BYTE6(v5);
      *v1 = v6;
    }
  }
  else if (!BYTE6(v4))
  {
    v12 = v4 & v5 & 1;
    v6 = *v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1B08B64C0(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v13 = *((_QWORD *)v6 + 2);
    v14 = *((_QWORD *)v6 + 3);
    v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      v18 = v6;
      v19 = *((_QWORD *)v6 + 2);
      v20 = sub_1B08B64C0((char *)(v14 > 1), v13 + 1, 1, v18);
      v13 = v19;
      v6 = v20;
    }
    *((_QWORD *)v6 + 2) = v15;
    v16 = &v6[8 * v13];
    *((_DWORD *)v16 + 8) = v12;
    v11 = v16 + 32;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_1B090D440()
{
  uint64_t v0;
  char *v1;
  int64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;
  char *v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;

  v1 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v1 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v5 = *((_QWORD *)v1 + 2);
    if (v5)
      goto LABEL_4;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v1 = sub_1B0953A70((uint64_t)v1);
  v5 = *((_QWORD *)v1 + 2);
  if (!v5)
    goto LABEL_23;
LABEL_4:
  v6 = v5 - 1;
  v7 = &v1[8 * v5 - 8];
  v8 = v7[38];
  v9 = *((_DWORD *)v7 + 8);
  *((_QWORD *)v1 + 2) = v6;
  *(_QWORD *)(v0 + 8) = v1;
  if (v8 == 2)
  {
    v4 = v9 & 0x7FFFFFFF;
    v5 = *((_QWORD *)v1 + 2);
    v3 = *((_QWORD *)v1 + 3);
    v2 = v5 + 1;
    if (v5 < v3 >> 1)
    {
LABEL_12:
      *((_QWORD *)v1 + 2) = v2;
      v16 = &v1[8 * v5];
      *((_DWORD *)v16 + 8) = v4;
      v14 = v16 + 32;
      goto LABEL_13;
    }
LABEL_24:
    v34 = v2;
    v23 = v1;
    v32 = v4;
    v24 = v5;
    v25 = sub_1B08B64C0((char *)(v3 > 1), v2, 1, v23);
    v5 = v24;
    v4 = v32;
    v2 = v34;
    v1 = v25;
    goto LABEL_12;
  }
  if (v8 != 1)
    return 0x6365686365707974;
  if (v9 != 0x80000000)
  {
    if (v9 >= 0)
      v18 = v9;
    else
      v18 = -v9;
    v19 = *((_QWORD *)v1 + 2);
    v20 = *((_QWORD *)v1 + 3);
    v21 = v19 + 1;
    if (v19 >= v20 >> 1)
    {
      v33 = *((_QWORD *)v1 + 2);
      v36 = v19 + 1;
      v29 = v1;
      v30 = v18;
      v31 = sub_1B08B64C0((char *)(v20 > 1), v19 + 1, 1, v29);
      v19 = v33;
      v21 = v36;
      v18 = v30;
      v1 = v31;
    }
    *((_QWORD *)v1 + 2) = v21;
    v22 = &v1[8 * v19];
    *((_DWORD *)v22 + 8) = v18;
    v14 = v22 + 32;
    *((_WORD *)v14 + 2) = 0;
    v17 = 1;
    goto LABEL_21;
  }
  v10 = *((_QWORD *)v1 + 2);
  v11 = *((_QWORD *)v1 + 3);
  v12 = v10 + 1;
  if (v10 >= v11 >> 1)
  {
    v35 = v10 + 1;
    v26 = v1;
    v27 = *((_QWORD *)v1 + 2);
    v28 = sub_1B08B64C0((char *)(v11 > 1), v10 + 1, 1, v26);
    v10 = v27;
    v12 = v35;
    v1 = v28;
  }
  *((_QWORD *)v1 + 2) = v12;
  v13 = &v1[8 * v10];
  *((_DWORD *)v13 + 8) = 1325400064;
  v14 = v13 + 32;
LABEL_13:
  *((_WORD *)v14 + 2) = 0;
  v17 = 2;
LABEL_21:
  result = 0;
  v14[6] = v17;
  *(_QWORD *)(v0 + 8) = v1;
  return result;
}

uint64_t sub_1B090D648()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v4 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v4 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5)
      goto LABEL_4;
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v4 = sub_1B0953A70((uint64_t)v4);
  v5 = *((_QWORD *)v4 + 2);
  if (!v5)
    goto LABEL_22;
LABEL_4:
  v6 = &v4[8 * v5 - 8];
  v7 = *((_DWORD *)v6 + 8);
  LODWORD(v6) = v6[38];
  *((_QWORD *)v4 + 2) = v5 - 1;
  *(_QWORD *)(v0 + 8) = v4;
  if ((_DWORD)v6 != 1)
    return 0x6365686365707974;
  if ((v7 & 0x80000000) != 0)
    return 0x65686365676E6172;
  v8 = v7;
  if (v7)
  {
    v9 = sub_1B0A1D4D4();
    v1 = v9;
    v10 = 0;
    *(_QWORD *)(v9 + 16) = v8;
    do
    {
      v11 = v9 + v10;
      *(_WORD *)(v11 + 36) = 0;
      *(_DWORD *)(v11 + 32) = 0;
      *(_BYTE *)(v11 + 38) = 10;
      v10 += 8;
    }
    while (8 * v8 != v10);
  }
  else
  {
    v1 = MEMORY[0x1E0DEE9D8];
  }
  v2 = *(_QWORD **)(v0 + 32);
  v3 = v2[2];
  if (HIDWORD(v3))
    goto LABEL_23;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_24:
    v2 = sub_1B08B6484(0, v3 + 1, 1, v2);
  v13 = v2[2];
  v14 = v2[3];
  v15 = v13 + 1;
  if (v13 >= v14 >> 1)
  {
    v22 = v13 + 1;
    v19 = v2;
    v20 = v2[2];
    v21 = sub_1B08B6484((_QWORD *)(v14 > 1), v13 + 1, 1, v19);
    v13 = v20;
    v15 = v22;
    v2 = v21;
  }
  v2[2] = v15;
  v2[v13 + 4] = v1;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 32) = v2;
  v17 = *((_QWORD *)v4 + 2);
  v16 = *((_QWORD *)v4 + 3);
  if (v17 >= v16 >> 1)
    v4 = sub_1B08B64C0((char *)(v16 > 1), v17 + 1, 1, v4);
  result = 0;
  *((_QWORD *)v4 + 2) = v17 + 1;
  v18 = &v4[8 * v17];
  *((_DWORD *)v18 + 8) = v3;
  *((_WORD *)v18 + 18) = (v3 | 0x300000000) >> 32;
  v18[38] = 7;
  *(_QWORD *)(v0 + 8) = v4;
  return result;
}

uint64_t sub_1B090D894()
{
  uint64_t v0;
  char *v1;
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  char v18;
  int v19;
  __int16 v20;
  char v21;
  int v22;
  __int16 v23;
  char v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t result;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[64];
  __int128 v39;
  _BYTE v40[23];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[3];

  v3 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v3 + 2))
    return 0x646E756B63617473;
  v4 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_27;
  v5 = *((_QWORD *)v3 + 2);
  if (!v5)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    v2 = sub_1B0953A84(v2);
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v5 - 1;
    v7 = &v3[8 * v5 - 8];
    v8 = *((unsigned __int16 *)v7 + 18);
    v9 = *((unsigned int *)v7 + 8);
    LODWORD(v7) = v7[38];
    *((_QWORD *)v3 + 2) = v6;
    *(_QWORD *)(v4 + 8) = v3;
    if ((_DWORD)v7 != 7)
      return 0x6365686365707974;
    v10 = v9 | (v8 << 32);
    v2 = *(_QWORD **)(v4 + 32);
    if (v2[2] <= (unint64_t)v10)
      goto LABEL_29;
    v34 = v10;
    v35 = v10;
    v1 = (char *)v2[v10 + 4];
    v11 = *((_QWORD *)v1 + 2);
    if (!v11)
      break;
    swift_bridgeObjectRetain();
    v12 = 0;
    v13 = 0;
    while (v13 < *((_QWORD *)v1 + 2))
    {
      v14 = &v1[v12];
      if (v1[v12 + 38] == 4)
      {
        v15 = *(_QWORD *)(v4 + 88);
        v16 = *(_DWORD *)(v4 + 112);
        v17 = *(_WORD *)(v4 + 116);
        v18 = *(_BYTE *)(v4 + 118);
        v19 = *(_DWORD *)(v4 + 120);
        v20 = *(_WORD *)(v4 + 124);
        v21 = *(_BYTE *)(v4 + 126);
        v22 = *(_DWORD *)(v4 + 128);
        v23 = *(_WORD *)(v4 + 132);
        v24 = *(_BYTE *)(v4 + 134);
        *(_QWORD *)&v36 = *(_QWORD *)v4;
        *((_QWORD *)&v36 + 1) = v3;
        v37 = *(_OWORD *)(v4 + 16);
        *(_QWORD *)v38 = v2;
        v25 = *(_OWORD *)(v4 + 56);
        *(_OWORD *)&v38[8] = *(_OWORD *)(v4 + 40);
        *(_OWORD *)&v38[24] = v25;
        *(_OWORD *)&v38[40] = *(_OWORD *)(v4 + 72);
        *(_QWORD *)&v38[56] = v15;
        v39 = *(_OWORD *)(v4 + 96);
        *(_WORD *)&v40[4] = v17;
        *(_DWORD *)v40 = v16;
        v40[6] = v18;
        *(_WORD *)&v40[12] = v20;
        *(_DWORD *)&v40[8] = v19;
        v40[14] = v21;
        *(_WORD *)&v40[20] = v23;
        *(_DWORD *)&v40[16] = v22;
        v40[22] = v24;
        v45 = *(_OWORD *)&v38[32];
        v46 = *(_OWORD *)&v38[48];
        v43 = *(_OWORD *)v38;
        v44 = *(_OWORD *)&v38[16];
        v41 = v36;
        v42 = v37;
        *(_QWORD *)((char *)v48 + 15) = *(_QWORD *)&v40[15];
        v47 = v39;
        v48[0] = *(_OWORD *)v40;
        v26 = *((unsigned int *)v14 + 8) | ((unint64_t)*((unsigned __int16 *)v14 + 18) << 32);
        v27 = v14[38];
        sub_1B08CF028((uint64_t)&v36);
        v28 = sub_1B0969370(v26 | (v27 << 48));
        sub_1B08D70F4((uint64_t)&v36);
        if ((v28 & 0xFF000000000000) == 0x5000000000000)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v1 = sub_1B0953A70((uint64_t)v1);
          if (v13 >= *((_QWORD *)v1 + 2))
            goto LABEL_26;
          v29 = &v1[v12];
          *((_DWORD *)v29 + 8) = v28;
          *((_WORD *)v29 + 18) = WORD2(v28);
          v29[38] = 5;
        }
      }
      ++v13;
      v12 += 8;
      if (v11 == v13)
        goto LABEL_19;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    v3 = sub_1B0953A70((uint64_t)v3);
    v5 = *((_QWORD *)v3 + 2);
    if (!v5)
      goto LABEL_28;
  }
  swift_bridgeObjectRetain();
LABEL_19:
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_30;
LABEL_20:
  if (v2[2] <= v35)
  {
    __break(1u);
    goto LABEL_32;
  }
  v2[v35 + 4] = v1;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 32) = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_32:
    v3 = sub_1B08B64C0(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
  v32 = *((_QWORD *)v3 + 2);
  v31 = *((_QWORD *)v3 + 3);
  if (v32 >= v31 >> 1)
    v3 = sub_1B08B64C0((char *)(v31 > 1), v32 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v32 + 1;
  v33 = &v3[8 * v32];
  *((_DWORD *)v33 + 8) = v34;
  *((_WORD *)v33 + 18) = WORD2(v34);
  v33[38] = 7;
  swift_bridgeObjectRelease();
  result = 0;
  *(_QWORD *)(v4 + 8) = v3;
  return result;
}

uint64_t sub_1B090DC2C()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  v5 = result & 0xFF000000000000;
  if ((result & 0xFF000000000000) != 0xFF000000000000)
  {
    v6 = result;
    v3 = 0x6365686365707974;
    v7 = sub_1B093A268();
    v8 = 0x1000000000000;
    if ((v7 & 0xFF000000000000) != 0x1000000000000)
    {
      v8 = 0xFF000000000000;
      if ((v7 & 0xFF000000000000) != 0xFF000000000000)
        return v3;
      __break(1u);
    }
    if (v5 != v8)
      return v3;
    v9 = v6 << 32;
    if (v6 << 32 <= (uint64_t)0xFFFFFFDFFFFFFFFFLL)
      goto LABEL_9;
    if (v9 > 0x2000000000)
    {
LABEL_12:
      v11 = *v1;
      v10 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_18:
        v12 = *((_QWORD *)v11 + 2);
        v13 = *((_QWORD *)v11 + 3);
        v14 = v12 + 1;
        if (v12 >= v13 >> 1)
        {
          v16 = v12 + 1;
          v17 = v11;
          v18 = *((_QWORD *)v11 + 2);
          v19 = sub_1B08B64C0((char *)(v13 > 1), v12 + 1, 1, v17);
          v12 = v18;
          v14 = v16;
          v11 = v19;
        }
        v3 = 0;
        *((_QWORD *)v11 + 2) = v14;
        v15 = &v11[8 * v12];
        *((_WORD *)v15 + 18) = 0;
        *((_DWORD *)v15 + 8) = v10;
        v15[38] = 1;
        *v1 = v11;
        return v3;
      }
LABEL_13:
      v11 = sub_1B08B64C0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      goto LABEL_18;
    }
    if (v9 < 0)
    {
      if ((unint64_t)v9 <= 0xFFFFFFE000000000)
      {
LABEL_9:
        v10 = (int)v7 >> 31;
        goto LABEL_17;
      }
      v10 = (int)v7 >> -(char)v6;
    }
    else
    {
      if ((unint64_t)v6 >> 5)
        goto LABEL_12;
      v10 = (_DWORD)v7 << v6;
    }
LABEL_17:
    v11 = *v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_18;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B090DDF4()
{
  uint64_t v0;
  int v1;
  char *v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t result;
  float v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  float v24;
  int64_t v25;
  unint64_t v26;

  v2 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v2 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v2 + 2);
    if (v6)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v6 = *((_QWORD *)v2 + 2);
  if (!v6)
    goto LABEL_15;
LABEL_4:
  v7 = v6 - 1;
  v8 = &v2[8 * v6 - 8];
  v1 = v8[38];
  v6 = *((unsigned int *)v8 + 8) | ((unint64_t)*((unsigned __int16 *)v8 + 18) << 32);
  *((_QWORD *)v2 + 2) = v7;
  *(_QWORD *)(v0 + 8) = v2;
  if (v1 == 2)
  {
    v12 = ceilf(*(float *)&v6);
    v13 = *((_QWORD *)v2 + 2);
    v14 = *((_QWORD *)v2 + 3);
    v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      v26 = v13 + 1;
      v20 = v2;
      v24 = v12;
      v21 = *((_QWORD *)v2 + 2);
      v22 = sub_1B08B64C0((char *)(v14 > 1), v13 + 1, 1, v20);
      v13 = v21;
      v12 = v24;
      v15 = v26;
      v2 = v22;
    }
    *((_QWORD *)v2 + 2) = v15;
    v16 = &v2[8 * v13];
    *((float *)v16 + 8) = v12;
    v10 = v16 + 32;
    *((_WORD *)v10 + 2) = 0;
    goto LABEL_12;
  }
  if (v1 == 1)
  {
    v3 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    v4 = v3 + 1;
    if (v3 < v5 >> 1)
    {
LABEL_7:
      *((_QWORD *)v2 + 2) = v4;
      v9 = &v2[8 * v3];
      *((_DWORD *)v9 + 8) = v6;
      v10 = v9 + 32;
      *((_WORD *)v10 + 2) = WORD2(v6);
LABEL_12:
      result = 0;
      v10[6] = v1;
      *(_QWORD *)(v0 + 8) = v2;
      return result;
    }
LABEL_16:
    v23 = v3;
    v25 = v4;
    v17 = v2;
    v18 = v6;
    v19 = sub_1B08B64C0((char *)(v5 > 1), v4, 1, v17);
    v3 = v23;
    v4 = v25;
    v6 = v18;
    v2 = v19;
    goto LABEL_7;
  }
  return 0x6365686365707974;
}

uint64_t sub_1B090DF98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v0;
  v3 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v3 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v4 = *((_QWORD *)v3 + 2);
    if (v4)
      goto LABEL_4;
LABEL_11:
    __break(1u);
LABEL_12:
    result = (uint64_t)sub_1B0953A5C(v1);
    v1 = (_QWORD *)result;
    *(_QWORD *)(v2 + 24) = result;
    goto LABEL_6;
  }
  v3 = sub_1B0953A70((uint64_t)v3);
  v4 = *((_QWORD *)v3 + 2);
  if (!v4)
    goto LABEL_11;
LABEL_4:
  v5 = &v3[8 * v4 - 8];
  v6 = *((_DWORD *)v5 + 8);
  LODWORD(v5) = v5[38];
  *((_QWORD *)v3 + 2) = v4 - 1;
  *(_QWORD *)(v2 + 8) = v3;
  if ((_DWORD)v5 != 6)
    return 0x6365686365707974;
  LODWORD(v3) = v6;
  v1 = *(_QWORD **)(v2 + 24);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 24) = v1;
  if ((result & 1) == 0)
    goto LABEL_12;
LABEL_6:
  if (v1[2] <= (unint64_t)v3)
  {
    __break(1u);
  }
  else
  {
    v8 = &v1[5 * v3];
    v9 = v8[7];
    v10 = v8[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v8 + 4), v9);
    (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    result = 0;
    *(_QWORD *)(v2 + 24) = v1;
  }
  return result;
}

uint64_t sub_1B090E0E4()
{
  uint64_t v0;
  char *v1;
  uint64_t result;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = (char *)v0;
  result = 0x65686374616D6E75;
  v5 = *(_QWORD *)(v0 + 8);
  v3 = (char **)(v0 + 8);
  v4 = v5;
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return result;
  v7 = 0;
  v8 = v4 + 8 * v6 + 30;
  v9 = (unsigned __int8 *)v8;
  while (1)
  {
    v10 = *v9;
    v9 -= 8;
    if (v10 >= 0xA)
    {
      if (*(unsigned int *)(v8 - 6) | ((unint64_t)*(unsigned __int16 *)(v8 - 2) << 32))
        break;
    }
    --v7;
    v8 = (uint64_t)v9;
    if (!(v6 + v7))
      return result;
  }
  v11 = v6 + v7;
  if (v6 < v6 + v7)
  {
    __break(1u);
LABEL_23:
    swift_bridgeObjectRelease();
    sub_1B08E8008(v4, v4 + 32, v6 + v7, (2 * v6) | 1);
    v14 = v25;
    goto LABEL_12;
  }
  sub_1B0A1DA98();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v12 = swift_dynamicCastClass();
  if (!v12)
  {
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x1E0DEE9D8];
  }
  v13 = *(_QWORD *)(v12 + 16);
  swift_release();
  if (v13 + v7)
    goto LABEL_23;
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1E0DEE9D8];
  }
LABEL_12:
  swift_bridgeObjectRelease();
  v15 = (_QWORD *)*((_QWORD *)v1 + 4);
  v16 = v15[2];
  if (HIDWORD(v16))
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_14;
  }
  v15 = sub_1B08B6484(0, v16 + 1, 1, v15);
LABEL_14:
  v17 = v11 - 1;
  v19 = v15[2];
  v18 = v15[3];
  v20 = v19 + 1;
  if (v19 >= v18 >> 1)
  {
    v26 = sub_1B08B6484((_QWORD *)(v18 > 1), v19 + 1, 1, v15);
    v20 = v19 + 1;
    v15 = v26;
  }
  v15[2] = v20;
  v15[v19 + 4] = v14;
  swift_release();
  *((_QWORD *)v1 + 4) = v15;
  v21 = *(_QWORD *)(v4 + 16);
  if (v21 < v17)
  {
    __break(1u);
    goto LABEL_27;
  }
  sub_1B0901BF4(v17, v21);
  v1 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_27:
    v1 = sub_1B08B64C0(0, *((_QWORD *)v1 + 2) + 1, 1, v1);
  v23 = *((_QWORD *)v1 + 2);
  v22 = *((_QWORD *)v1 + 3);
  if (v23 >= v22 >> 1)
    v1 = sub_1B08B64C0((char *)(v22 > 1), v23 + 1, 1, v1);
  result = 0;
  *((_QWORD *)v1 + 2) = v23 + 1;
  v24 = &v1[8 * v23];
  *((_DWORD *)v24 + 8) = v16;
  *((_WORD *)v24 + 18) = (v16 | 0x300000000) >> 32;
  v24[38] = 7;
  *v3 = v1;
  return result;
}

uint64_t sub_1B090E390()
{
  uint64_t v0;
  uint64_t result;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  result = 0x65686374616D6E75;
  v2 = *(char **)(v0 + 8);
  v3 = *((_QWORD *)v2 + 2);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t)&v2[8 * v3 + 30];
    v6 = (unsigned __int8 *)v5;
    while (1)
    {
      v7 = *v6;
      v6 -= 8;
      if (v7 >= 0xA)
      {
        if (*(unsigned int *)(v5 - 6) | ((unint64_t)*(unsigned __int16 *)(v5 - 2) << 32))
          break;
      }
      --v4;
      v5 = (uint64_t)v6;
      if (-v3 == v4)
        return result;
    }
    if (0xFFFFFFFF80000000 - v4 >= 0xFFFFFFFF00000000)
    {
      v8 = -v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v2 = sub_1B08B64C0(0, v3 + 1, 1, v2);
      v10 = *((_QWORD *)v2 + 2);
      v9 = *((_QWORD *)v2 + 3);
      v11 = v10 + 1;
      if (v10 >= v9 >> 1)
      {
        v13 = sub_1B08B64C0((char *)(v9 > 1), v10 + 1, 1, v2);
        v11 = v10 + 1;
        v2 = v13;
      }
      result = 0;
      *((_QWORD *)v2 + 2) = v11;
      v12 = &v2[8 * v10];
      *((_WORD *)v12 + 18) = 0;
      *((_DWORD *)v12 + 8) = v8;
      v12[38] = 1;
      *(_QWORD *)(v0 + 8) = v2;
    }
  }
  return result;
}

uint64_t sub_1B090E4C8()
{
  char *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v2 = *(_DWORD *)(v3 + 4 * v4 + 28);
    v0 = *(char **)(v1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v0 = sub_1B08B64C0(0, *((_QWORD *)v0 + 2) + 1, 1, v0);
LABEL_3:
  v6 = *((_QWORD *)v0 + 2);
  v5 = *((_QWORD *)v0 + 3);
  if (v6 >= v5 >> 1)
    v0 = sub_1B08B64C0((char *)(v5 > 1), v6 + 1, 1, v0);
  *((_QWORD *)v0 + 2) = v6 + 1;
  v7 = &v0[8 * v6];
  *((_WORD *)v7 + 18) = 0;
  *((_DWORD *)v7 + 8) = v2;
  v7[38] = 8;
  *(_QWORD *)(v1 + 8) = v0;
  return 0;
}

uint64_t sub_1B090E590()
{
  int64_t v0;
  unint64_t v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  unint64_t v15;
  char *v16;
  char *v18;
  float v19;

  v3 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v3 + 2))
    return 0x646E756B63617473;
  v4 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v3 + 2);
    if (v6)
      goto LABEL_4;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v3 = sub_1B0953A70((uint64_t)v3);
  v6 = *((_QWORD *)v3 + 2);
  if (!v6)
    goto LABEL_25;
LABEL_4:
  v7 = 0x6365686365707974;
  v8 = v6 - 1;
  v9 = &v3[8 * v6 - 8];
  v10 = *((unsigned __int16 *)v9 + 18);
  v11 = *((unsigned int *)v9 + 8);
  v12 = v9[38];
  v1 = v11 | (v10 << 32);
  *((_QWORD *)v3 + 2) = v8;
  *(_QWORD *)(v0 + 8) = v3;
  switch(v12)
  {
    case 9:
      v15 = *(_QWORD *)(v0 + 48);
      if (*(_QWORD *)(v15 + 16) > (unint64_t)v11)
        __asm { BR              X10 }
      __break(1u);
      goto LABEL_28;
    case 2:
      if (*(float *)&v11 < -2147500000.0 || *(float *)&v11 > 2147500000.0)
        return 0x65686365676E6172;
      v5 = truncf(*(float *)&v11);
      v15 = LODWORD(v5);
      if ((~LODWORD(v5) & 0x7F800000) != 0)
      {
        v15 = 3472883713;
        if (v5 > -2147500000.0)
        {
          if (v5 < 2147500000.0)
          {
            v1 = *((_QWORD *)v3 + 2);
            v15 = *((_QWORD *)v3 + 3);
            v0 = v1 + 1;
            if (v1 < v15 >> 1)
            {
LABEL_22:
              v7 = 0;
              *((_QWORD *)v3 + 2) = v0;
              v16 = &v3[8 * v1];
              *((_WORD *)v16 + 18) = 0;
              *((_DWORD *)v16 + 8) = (int)v5;
              v16[38] = 1;
              *(_QWORD *)(v4 + 8) = v3;
              return v7;
            }
LABEL_31:
            v19 = v5;
            v18 = sub_1B08B64C0((char *)(v15 > 1), v0, 1, v3);
            v5 = v19;
            v3 = v18;
            goto LABEL_22;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    case 1:
      v2 = *((_QWORD *)v3 + 2);
      v6 = *((_QWORD *)v3 + 3);
      v0 = v2 + 1;
      if (v2 < v6 >> 1)
      {
LABEL_8:
        v7 = 0;
        *((_QWORD *)v3 + 2) = v0;
        v13 = &v3[8 * v2];
        *((_DWORD *)v13 + 8) = v1;
        *((_WORD *)v13 + 18) = WORD2(v1);
        v13[38] = 1;
        *(_QWORD *)(v4 + 8) = v3;
        return v7;
      }
LABEL_26:
      v3 = sub_1B08B64C0((char *)(v6 > 1), v0, 1, v3);
      goto LABEL_8;
  }
  return v7;
}

uint64_t sub_1B090EB54()
{
  int64_t v0;
  unint64_t v1;
  int v2;
  char *v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v3 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v3 + 2))
    return 0x646E756B63617473;
  v4 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v5 = *((_QWORD *)v3 + 2);
    if (v5)
      goto LABEL_4;
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v3 = sub_1B0953A70((uint64_t)v3);
  v5 = *((_QWORD *)v3 + 2);
  if (!v5)
    goto LABEL_18;
LABEL_4:
  v6 = 0x6365686365707974;
  v7 = v5 - 1;
  v8 = &v3[8 * v5 - 8];
  v9 = *((unsigned __int16 *)v8 + 18);
  v10 = *((unsigned int *)v8 + 8);
  v11 = v8[38];
  v12 = v10 | (v9 << 32);
  *((_QWORD *)v3 + 2) = v7;
  *(_QWORD *)(v0 + 8) = v3;
  switch(v11)
  {
    case 9:
      v16 = *(_QWORD *)(v0 + 48);
      if (*(_QWORD *)(v16 + 16) > (unint64_t)v10)
        __asm { BR              X10 }
      __break(1u);
      JUMPOUT(0x1B090EF9CLL);
    case 2:
      v15 = *((_QWORD *)v3 + 2);
      v14 = *((_QWORD *)v3 + 3);
      if (v15 >= v14 >> 1)
        v3 = sub_1B08B64C0((char *)(v14 > 1), v15 + 1, 1, v3);
      v6 = 0;
      *((_QWORD *)v3 + 2) = v15 + 1;
      v13 = &v3[8 * v15];
      *((_DWORD *)v13 + 8) = v12;
      *((_WORD *)v13 + 18) = WORD2(v12);
      goto LABEL_13;
    case 1:
      v2 = v10;
      v1 = *((_QWORD *)v3 + 2);
      v5 = *((_QWORD *)v3 + 3);
      v0 = v1 + 1;
      if (v1 < v5 >> 1)
      {
LABEL_8:
        v6 = 0;
        *((_QWORD *)v3 + 2) = v0;
        v13 = &v3[8 * v1];
        *((_WORD *)v13 + 18) = 0;
        *((float *)v13 + 8) = (float)v2;
LABEL_13:
        v13[38] = 2;
        *(_QWORD *)(v4 + 8) = v3;
        return v6;
      }
LABEL_19:
      v3 = sub_1B08B64C0((char *)(v5 > 1), v0, 1, v3);
      goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1B090F02C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  __int16 v12;
  char *v13;
  char *v14;
  char v15;
  char *v16;

  v3 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v3 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v3 + 2);
    if (v6)
      goto LABEL_4;
LABEL_17:
    __break(1u);
LABEL_18:
    v11 = v3;
    v12 = v4;
    v13 = sub_1B08B64C0((char *)(v5 > 1), v6, 1, v11);
    LOWORD(v4) = v12;
    v3 = v13;
    goto LABEL_7;
  }
  v3 = sub_1B0953A70((uint64_t)v3);
  v6 = *((_QWORD *)v3 + 2);
  if (!v6)
    goto LABEL_17;
LABEL_4:
  v2 = 8 * (v6 - 1);
  v1 = *(unsigned int *)&v3[v2 + 32] | ((unint64_t)*(unsigned __int16 *)&v3[v2 + 36] << 32);
  v4 = v3[v2 + 38];
  *((_QWORD *)v3 + 2) = v6 - 1;
  if (v4 == 3)
  {
    v9 = *((_QWORD *)v3 + 3);
    if (v6 > v9 >> 1)
      v3 = sub_1B08B64C0((char *)(v9 > 1), v6, 1, v3);
    *((_QWORD *)v3 + 2) = v6;
    *(_DWORD *)&v3[v2 + 32] = v1;
    v7 = (uint64_t)&v3[v2 + 32];
    *(_WORD *)&v3[v2 + 36] = 0;
    LOBYTE(v4) = 4;
    goto LABEL_15;
  }
  if (v4 != 7)
  {
    v10 = *((_QWORD *)v3 + 3);
    if (v6 > v10 >> 1)
    {
      v14 = v3;
      v15 = v4;
      v16 = sub_1B08B64C0((char *)(v10 > 1), v6, 1, v14);
      LOBYTE(v4) = v15;
      v3 = v16;
    }
    *((_QWORD *)v3 + 2) = v6;
    *(_DWORD *)&v3[v2 + 32] = v1;
    v7 = (uint64_t)&v3[v2 + 32];
    *(_WORD *)&v3[v2 + 36] = WORD2(v1);
    goto LABEL_15;
  }
  LOWORD(v4) = WORD2(v1);
  v5 = *((_QWORD *)v3 + 3);
  if (v6 > v5 >> 1)
    goto LABEL_18;
LABEL_7:
  *((_QWORD *)v3 + 2) = v6;
  *(_DWORD *)&v3[v2 + 32] = v1;
  v7 = (uint64_t)&v3[v2 + 32];
  *(_WORD *)&v3[v2 + 36] = v4 | 4;
  LOBYTE(v4) = 7;
LABEL_15:
  result = 0;
  *(_BYTE *)(v7 + 6) = v4;
  *(_QWORD *)(v0 + 8) = v3;
  return result;
}

uint64_t sub_1B090F1D8()
{
  _QWORD *v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v2 = v0;
  if (*(_QWORD *)(v0[1] + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  v4 = 0xFF000000000000;
  if ((~result & 0xFF000000000000) == 0)
    goto LABEL_18;
  v5 = result;
  result = sub_1B093A268();
  if ((result & 0xFF000000000000) == 0xFF000000000000)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v6 = result;
  if ((result & 0xFF000000000000) == 0x9000000000000)
  {
    v7 = v2[6];
    if ((unint64_t)result >= *(_QWORD *)(v7 + 16))
    {
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v8 = v7 + 16 * result;
    v4 = *(_QWORD *)(v8 + 32);
    v9 = *(_QWORD *)(v8 + 40);
    sub_1B08A35B0(v4, v9);
    LODWORD(v6) = sub_1B093A7AC(v4, v9);
    sub_1B08A3638(v4, v9);
    v6 = v6;
    v10 = 0x3000000000000;
  }
  else
  {
    v10 = result & 0xFFFF000000000000;
  }
  v11 = v2[2];
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v1 = *(unsigned int *)(v11 + 4 * v12 + 28);
    v4 = v2[5];
    result = swift_isUniquelyReferenced_nonNull_native();
    v2[5] = v4;
    if ((result & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    __break(1u);
  }
  result = (uint64_t)sub_1B0953A98((_QWORD *)v4);
  v4 = result;
  v2[5] = result;
LABEL_11:
  if (*(_QWORD *)(v4 + 16) <= v1)
  {
    __break(1u);
    goto LABEL_17;
  }
  v13 = v4 + 8 * v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *(_QWORD *)(v13 + 32);
  *(_QWORD *)(v13 + 32) = 0x8000000000000000;
  sub_1B0900AF4(v5 & 0xFFFFFFFFFFFFFFLL, v10 & 0xFF000000000000 | v6 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v13 + 32) = v15;
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B090F37C()
{
  uint64_t v0;
  char **v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;

  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  v3 = v0;
  result = sub_1B093A268();
  v4 = result & 0xFF000000000000;
  if ((result & 0xFF000000000000) == 0xFF000000000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (v4 != 0x8000000000000)
    return 0x6365686365707974;
  v6 = result;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0x8000000000000000;
  sub_1B0900C10(v5, v6 & 0xFFFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 80) = v16;
  swift_bridgeObjectRelease();
  v8 = *(char **)(v3 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1B08B64C0(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  v9 = *((_QWORD *)v8 + 2);
  v10 = *((_QWORD *)v8 + 3);
  v11 = v9 + 1;
  if (v9 >= v10 >> 1)
  {
    v13 = v8;
    v14 = *((_QWORD *)v8 + 2);
    v15 = sub_1B08B64C0((char *)(v10 > 1), v9 + 1, 1, v13);
    v9 = v14;
    v8 = v15;
  }
  result = 0;
  *((_QWORD *)v8 + 2) = v11;
  v12 = &v8[8 * v9];
  *((_DWORD *)v12 + 8) = v5;
  *((_WORD *)v12 + 18) = WORD2(v5);
  v12[38] = 8;
  *v1 = v8;
  return result;
}

uint64_t sub_1B090F520()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;

  v4 = (char *)v0[1];
  if (!*((_QWORD *)v4 + 2))
    return 0x646E756B63617473;
  v5 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v4 + 2);
    if (v6)
      goto LABEL_4;
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v4 = sub_1B0953A70((uint64_t)v4);
  v6 = *((_QWORD *)v4 + 2);
  if (!v6)
    goto LABEL_15;
LABEL_4:
  v7 = &v4[8 * v6 - 8];
  v8 = *((_DWORD *)v7 + 8);
  LODWORD(v7) = v7[38];
  *((_QWORD *)v4 + 2) = v6 - 1;
  v0[1] = v4;
  if ((_DWORD)v7 != 1)
    return 0x6365686365707974;
  v9 = v8;
  v21 = sub_1B09015DC(MEMORY[0x1E0DEE9D8]);
  v1 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA9F8);
  sub_1B0A1D114();
  v0 = (_QWORD *)v5[5];
  v3 = v0[2];
  v2 = HIDWORD(v3);
  if (HIDWORD(v3))
    goto LABEL_16;
  v1 = v21;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
    v0 = sub_1B08B6498(0, v3 + 1, 1, v0);
  v10 = v0[2];
  v11 = v0[3];
  v12 = v10 + 1;
  if (v10 >= v11 >> 1)
  {
    v20 = v10 + 1;
    v17 = v0;
    v18 = v0[2];
    v19 = sub_1B08B6498((_QWORD *)(v11 > 1), v10 + 1, 1, v17);
    v10 = v18;
    v12 = v20;
    v0 = v19;
  }
  v0[2] = v12;
  v0[v10 + 4] = v1;
  swift_bridgeObjectRelease();
  v5[5] = v0;
  v14 = *((_QWORD *)v4 + 2);
  v13 = *((_QWORD *)v4 + 3);
  if (v14 >= v13 >> 1)
    v4 = sub_1B08B64C0((char *)(v13 > 1), v14 + 1, 1, v4);
  result = 0;
  *((_QWORD *)v4 + 2) = v14 + 1;
  v16 = &v4[8 * v14];
  *((_DWORD *)v16 + 8) = v3;
  *((_WORD *)v16 + 18) = v2;
  v16[38] = 8;
  v5[1] = v4;
  return result;
}

uint64_t sub_1B090F724()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v5 = result;
  result = 0x6365686365707974;
  if (BYTE6(v5) != 2)
  {
    if (BYTE6(v5) != 1)
      return result;
    if (BYTE6(v4) != 1)
    {
      if (BYTE6(v4) != 2)
        return result;
      v6 = (double)(int)v5;
      v7 = *(float *)&v4;
      goto LABEL_17;
    }
    v6 = (double)(int)v5;
    goto LABEL_16;
  }
  if (BYTE6(v4) == 1)
  {
    v6 = *(float *)&v5;
LABEL_16:
    v7 = (double)(int)v4;
    goto LABEL_17;
  }
  if (BYTE6(v4) != 2)
    return result;
  v6 = *(float *)&v5;
  v7 = *(float *)&v4;
LABEL_17:
  v8 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = sub_1B08B64C0(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
  v9 = *((_QWORD *)v8 + 2);
  v10 = *((_QWORD *)v8 + 3);
  v11 = v9 + 1;
  if (v9 >= v10 >> 1)
  {
    v14 = v8;
    v15 = v9 + 1;
    v16 = v9;
    v17 = sub_1B08B64C0((char *)(v10 > 1), v9 + 1, 1, v14);
    v9 = v16;
    v11 = v15;
    v8 = v17;
  }
  result = 0;
  v12 = v6 / v7;
  *((_QWORD *)v8 + 2) = v11;
  v13 = &v8[8 * v9];
  *((_WORD *)v13 + 18) = 0;
  *((float *)v13 + 8) = v12;
  v13[38] = 2;
  *v1 = v8;
  return result;
}

uint64_t sub_1B090F8F0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  char *v9;

  v1 = *(char **)(v0 + 8);
  v2 = *((_QWORD *)v1 + 2);
  if (!v2)
    return 0x646E756B63617473;
  v3 = &v1[8 * v2];
  v4 = *((unsigned int *)v3 + 6) | ((unint64_t)*((unsigned __int16 *)v3 + 14) << 32);
  v5 = v3[30];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v1 = sub_1B08B64C0(0, v2 + 1, 1, v1);
  v7 = *((_QWORD *)v1 + 2);
  v6 = *((_QWORD *)v1 + 3);
  if (v7 >= v6 >> 1)
    v1 = sub_1B08B64C0((char *)(v6 > 1), v7 + 1, 1, v1);
  result = 0;
  *((_QWORD *)v1 + 2) = v7 + 1;
  v9 = &v1[8 * v7];
  *((_DWORD *)v9 + 8) = v4;
  *((_WORD *)v9 + 18) = WORD2(v4);
  v9[38] = v5;
  *(_QWORD *)(v0 + 8) = v1;
  return result;
}

uint64_t sub_1B090F9E0()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  _QWORD *v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE v38[4];
  int v39;
  uint64_t v40;
  uint64_t *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;

  v7 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v7 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v8 = *((_QWORD *)v7 + 2);
    if (v8)
      goto LABEL_4;
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = sub_1B0953A70((uint64_t)v7);
  v8 = *((_QWORD *)v7 + 2);
  if (!v8)
    goto LABEL_21;
LABEL_4:
  v9 = v8 - 1;
  v10 = &v7[8 * v8 - 8];
  v11 = *((unsigned __int16 *)v10 + 18);
  v12 = *((unsigned int *)v10 + 8);
  LODWORD(v10) = v10[38];
  *((_QWORD *)v7 + 2) = v9;
  *(_QWORD *)(v0 + 8) = v7;
  if ((_DWORD)v10 != 6)
    return 0x6365686365707974;
  v2 = *(_QWORD **)(v0 + 24);
  v41 = (uint64_t *)(v0 + 24);
  if (v2[2] <= (unint64_t)v12)
    goto LABEL_22;
  v40 = v12 | (v11 << 32);
  sub_1B08AE338((uint64_t)&v2[5 * v12 + 4], (uint64_t)v48);
  v13 = v49;
  v14 = v50;
  v15 = __swift_project_boxed_opaque_existential_1(v48, v49);
  v17 = type metadata accessor for PSDecryptionFilter(255, v13, v14, v16);
  v18 = sub_1B0A1D690();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = &v38[-v20];
  sub_1B090FDF8((uint64_t)v15, v13, v14, (uint64_t)&v38[-v20]);
  v22 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v17) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v21, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
    return 0x726F7272656F69;
  }
  v43 = v17;
  v44 = MEMORY[0x1B5E0D530](&unk_1B0A36F98, v17);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v21, v17);
  sub_1B08AEF8C(&v42, (uint64_t)v45);
  v1 = *(_DWORD *)(v0 + 4);
  v4 = v46;
  v25 = v47;
  v26 = __swift_project_boxed_opaque_existential_1(v45, v46);
  v43 = v4;
  v5 = *(_QWORD *)(v25 + 8);
  v44 = v5;
  v6 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
  v7 = *(char **)(*(_QWORD *)(v4 - 8) + 16);
  ((void (*)(uint64_t *, _QWORD *, uint64_t))v7)(v6, v26, v4);
  v3 = v2[2];
  if (!HIDWORD(v3))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v41 = (uint64_t)v2;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B08B64AC(0, v3 + 1, 1, v2);
  v2 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  *v41 = isUniquelyReferenced_nonNull_native;
LABEL_12:
  v29 = v2[2];
  v28 = v2[3];
  v39 = v1;
  if (v29 >= v28 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B08B64AC((_QWORD *)(v28 > 1), v29 + 1, 1, v2);
    v2 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    *v41 = isUniquelyReferenced_nonNull_native;
  }
  v30 = MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
  v32 = &v38[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ((void (*)(_BYTE *, uint64_t *, uint64_t, double))v7)(v32, v6, v4, v30);
  sub_1B0901254(v29, (uint64_t)v32, v41, v4, v5);
  *(_QWORD *)(v0 + 24) = v2;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  *(_DWORD *)(v0 + 4) = v3;
  v33 = *(char **)(v0 + 16);
  v34 = *((_QWORD *)v33 + 2);
  if (!v34)
  {
    __break(1u);
    goto LABEL_26;
  }
  LODWORD(v7) = *((_DWORD *)v33 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_26:
    v33 = sub_1B08B6478(0, v34 + 1, 1, v33);
  v36 = *((_QWORD *)v33 + 2);
  v35 = *((_QWORD *)v33 + 3);
  if (v36 >= v35 >> 1)
    v33 = sub_1B08B6478((char *)(v35 > 1), v36 + 1, 1, v33);
  *((_QWORD *)v33 + 2) = v36 + 1;
  *(_DWORD *)&v33[4 * v36 + 32] = (_DWORD)v7;
  *(_QWORD *)(v0 + 16) = v33;
  v23 = sub_1B093A2E4(0, 0);
  sub_1B090FEBC(v0, v40, v3, v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  return v23;
}

void sub_1B090FDF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  PSDecryptionFilter.init(forEExec:)((uint64_t)v9, a2, a3, a4);
}

uint64_t sub_1B090FEBC(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[40];

  v8 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v8 + 16) <= (unint64_t)a3)
  {
    __break(1u);
  }
  else
  {
    v4 = a4;
    v7 = a2;
    v6 = a1;
    sub_1B08AE338(v8 + 40 * a3 + 32, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAA10);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB550);
    swift_dynamicCast();
    v9 = v20;
    v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
    v11(v9, v10);
    v5 = *(_QWORD **)(v6 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 24) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  v5 = sub_1B0953A5C(v5);
  *(_QWORD *)(v6 + 24) = v5;
LABEL_3:
  if (v5[2] <= (unint64_t)v7)
  {
    __break(1u);
    goto LABEL_11;
  }
  v13 = (uint64_t)&v5[5 * v7 + 4];
  __swift_destroy_boxed_opaque_existential_1(v13);
  sub_1B08AEF8C(&v16, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  v5 = *(_QWORD **)(v6 + 16);
  if (!v5[2])
  {
LABEL_11:
    __break(1u);
LABEL_12:
    result = (uint64_t)sub_1B0953AAC((uint64_t)v5);
    v5 = (_QWORD *)result;
    v15 = *(_QWORD *)(result + 16);
    if (v15)
      goto LABEL_7;
    goto LABEL_13;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_12;
  v15 = v5[2];
  if (v15)
  {
LABEL_7:
    v5[2] = v15 - 1;
    *(_QWORD *)(v6 + 16) = v5;
    *(_DWORD *)(v6 + 4) = v4;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1B0910088()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  char *v3;
  char v4;
  _BOOL4 v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v2 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v3 = *(char **)(v0 + 8);
  sub_1B0910208(result & 0xFFFFFFFFFFFFFFLL, v2 & 0xFFFFFFFFFFFFFFLL);
  if (v4 != 3)
  {
    v5 = v4 == 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_7;
LABEL_11:
    v3 = sub_1B08B64C0(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    goto LABEL_7;
  }
  v5 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_11;
LABEL_7:
  v7 = *((_QWORD *)v3 + 2);
  v6 = *((_QWORD *)v3 + 3);
  if (v7 >= v6 >> 1)
    v3 = sub_1B08B64C0((char *)(v6 > 1), v7 + 1, 1, v3);
  result = 0;
  *((_QWORD *)v3 + 2) = v7 + 1;
  v8 = &v3[8 * v7];
  *((_WORD *)v8 + 18) = 0;
  *((_DWORD *)v8 + 8) = v5;
  v8[38] = 0;
  *(_QWORD *)(v0 + 8) = v3;
  return result;
}

void sub_1B0910208(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = HIWORD(a2);
  switch(BYTE6(a1))
  {
    case 1:
      if (BYTE6(a2) == 2)
        sub_1B0915048(a1, *(float *)&a2);
      return;
    case 2:
      if (BYTE6(a2) == 1)
      {
        sub_1B0915048(a2, *(float *)&a1);
      }
      else if (BYTE6(a2) == 2)
      {
        sub_1B09151EC(*(float *)&a1, *(float *)&a2);
      }
      return;
    case 3:
      if (BYTE6(a2) == 3)
      {
        v7 = *(_QWORD *)(v2 + 56);
        v8 = a1;
        v11 = *(_QWORD *)(v7 + 16);
        if (a1 < v11)
        {
          v10 = a2;
          if (a2 < v11)
            goto LABEL_22;
          goto LABEL_30;
        }
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if (BYTE6(a2) != 9)
        return;
      v4 = *(_QWORD *)(v2 + 56);
      v3 = a2;
      if ((unint64_t)a2 >= *(_QWORD *)(v4 + 16))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v5 = *(_QWORD *)(v2 + 48);
      v6 = a1;
      if ((unint64_t)a1 < *(_QWORD *)(v5 + 16))
        goto LABEL_25;
      __break(1u);
LABEL_12:
      if (v3 == 3)
      {
        v4 = *(_QWORD *)(v2 + 48);
        v3 = a1;
        if ((unint64_t)a1 >= *(_QWORD *)(v4 + 16))
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v5 = *(_QWORD *)(v2 + 56);
        v6 = a2;
        if ((unint64_t)a2 >= *(_QWORD *)(v5 + 16))
        {
LABEL_32:
          __break(1u);
          JUMPOUT(0x1B0910440);
        }
LABEL_25:
        v19 = v4 + 16 * v3;
        v15 = *(_QWORD *)(v19 + 32);
        v14 = *(_QWORD *)(v19 + 40);
        v20 = v5 + 16 * v6;
        v17 = *(_QWORD *)(v20 + 32);
        v18 = *(_QWORD *)(v20 + 40);
        goto LABEL_26;
      }
      if (v3 != 9)
        return;
      v7 = *(_QWORD *)(v2 + 48);
      v8 = a1;
      v9 = *(_QWORD *)(v7 + 16);
      if (a1 >= v9)
        goto LABEL_28;
      v10 = a2;
      if (a2 < v9)
      {
LABEL_22:
        v12 = v7 + 32;
        v13 = (uint64_t *)(v12 + 16 * v8);
        v15 = *v13;
        v14 = v13[1];
        v16 = (uint64_t *)(v12 + 16 * v10);
        v17 = *v16;
        v18 = v16[1];
LABEL_26:
        sub_1B08A35B0(v15, v14);
        sub_1B08A35B0(v17, v18);
        sub_1B09487F8(v15, v14);
        return;
      }
      __break(1u);
      return;
    case 9:
      goto LABEL_12;
    default:
      return;
  }
}

uint64_t sub_1B0910464()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v5 = result;
  result = 0x6365686365707974;
  if (BYTE6(v5) != 2)
  {
    if (BYTE6(v5) != 1)
      return result;
    if (BYTE6(v4) != 1)
    {
      if (BYTE6(v4) != 2)
        return result;
      v6 = *(float *)&v4;
      v7 = (float)(int)v5;
      goto LABEL_16;
    }
    v7 = (float)(int)v5;
    goto LABEL_15;
  }
  v7 = *(float *)&v5;
  if (BYTE6(v4) == 1)
  {
LABEL_15:
    v6 = (float)(int)v4;
    goto LABEL_16;
  }
  if (BYTE6(v4) != 2)
    return result;
  v6 = *(float *)&v4;
LABEL_16:
  v8 = powf(v7, v6);
  if ((~LODWORD(v8) & 0x7F800000) == 0)
    return 0x656E696665646E75;
  v9 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = sub_1B08B64C0(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  v10 = *((_QWORD *)v9 + 2);
  v11 = *((_QWORD *)v9 + 3);
  v12 = v10 + 1;
  if (v10 >= v11 >> 1)
  {
    v14 = v9;
    v17 = v10 + 1;
    v15 = *((_QWORD *)v9 + 2);
    v16 = sub_1B08B64C0((char *)(v11 > 1), v10 + 1, 1, v14);
    v10 = v15;
    v12 = v17;
    v9 = v16;
  }
  result = 0;
  *((_QWORD *)v9 + 2) = v12;
  v13 = &v9[8 * v10];
  *((_WORD *)v13 + 18) = 0;
  *((float *)v13 + 8) = v8;
  v13[38] = 2;
  *v1 = v9;
  return result;
}

uint64_t sub_1B0910650()
{
  uint64_t v0;
  int v1;
  char *v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t result;
  float v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  float v24;
  int64_t v25;
  unint64_t v26;

  v2 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v2 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v2 + 2);
    if (v6)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v6 = *((_QWORD *)v2 + 2);
  if (!v6)
    goto LABEL_15;
LABEL_4:
  v7 = v6 - 1;
  v8 = &v2[8 * v6 - 8];
  v1 = v8[38];
  v6 = *((unsigned int *)v8 + 8) | ((unint64_t)*((unsigned __int16 *)v8 + 18) << 32);
  *((_QWORD *)v2 + 2) = v7;
  *(_QWORD *)(v0 + 8) = v2;
  if (v1 == 2)
  {
    v12 = floorf(*(float *)&v6);
    v13 = *((_QWORD *)v2 + 2);
    v14 = *((_QWORD *)v2 + 3);
    v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      v26 = v13 + 1;
      v20 = v2;
      v24 = v12;
      v21 = *((_QWORD *)v2 + 2);
      v22 = sub_1B08B64C0((char *)(v14 > 1), v13 + 1, 1, v20);
      v13 = v21;
      v12 = v24;
      v15 = v26;
      v2 = v22;
    }
    *((_QWORD *)v2 + 2) = v15;
    v16 = &v2[8 * v13];
    *((float *)v16 + 8) = v12;
    v10 = v16 + 32;
    *((_WORD *)v10 + 2) = 0;
    goto LABEL_12;
  }
  if (v1 == 1)
  {
    v3 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    v4 = v3 + 1;
    if (v3 < v5 >> 1)
    {
LABEL_7:
      *((_QWORD *)v2 + 2) = v4;
      v9 = &v2[8 * v3];
      *((_DWORD *)v9 + 8) = v6;
      v10 = v9 + 32;
      *((_WORD *)v10 + 2) = WORD2(v6);
LABEL_12:
      result = 0;
      v10[6] = v1;
      *(_QWORD *)(v0 + 8) = v2;
      return result;
    }
LABEL_16:
    v23 = v3;
    v25 = v4;
    v17 = v2;
    v18 = v6;
    v19 = sub_1B08B64C0((char *)(v5 > 1), v4, 1, v17);
    v3 = v23;
    v4 = v25;
    v6 = v18;
    v2 = v19;
    goto LABEL_7;
  }
  return 0x6365686365707974;
}

uint64_t sub_1B09107F4()
{
  __int128 *v0;
  char **v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  __int128 v35;

  v1 = (char **)v0 + 1;
  if (*(_QWORD *)(*((_QWORD *)v0 + 1) + 16) < 4uLL)
    return 0x646E756B63617473;
  v3 = v0;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v5 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v6 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v7 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_51:
    __break(1u);
    return result;
  }
  v8 = result;
  if ((v5 & 0x400000000) != 0 && BYTE6(v5) == 7)
  {
    if ((unint64_t)v5 < *(_QWORD *)(*((_QWORD *)v0 + 4) + 16))
    {
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    __break(1u);
LABEL_47:
    result = swift_release();
    __break(1u);
    goto LABEL_48;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8A0);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B0A363D0;
  *(_WORD *)(v9 + 36) = WORD2(v5);
  *(_DWORD *)(v9 + 32) = v5;
  *(_BYTE *)(v9 + 38) = BYTE6(v5);
LABEL_12:
  if (BYTE6(v7) != 2 && BYTE6(v7) != 1)
  {
    v2 = 0x6365686365707974;
    goto LABEL_17;
  }
  swift_getKeyPath();
  v35 = *v0;
  v33 = v6 & 0xFFFFFFFFFFFFFFLL;
  sub_1B0910208(v8 & 0xFFFFFFFFFFFFFFLL, v6 & 0xFFFFFFFFFFFFFFLL);
  if (v10 == 3)
  {
LABEL_15:
    v2 = 0x6365686365707974;
    swift_release();
LABEL_17:
    swift_bridgeObjectRelease();
    return v2;
  }
  v11 = HIWORD(v8);
  while (1)
  {
    swift_getAtKeyPath();
    if (v34 != 1)
      goto LABEL_42;
    v12 = (char *)*((_QWORD *)&v35 + 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_1B08B64C0(0, *(_QWORD *)(*((_QWORD *)&v35 + 1) + 16) + 1, 1, *((char **)&v35 + 1));
    v14 = *((_QWORD *)v12 + 2);
    v13 = *((_QWORD *)v12 + 3);
    if (v14 >= v13 >> 1)
      v12 = sub_1B08B64C0((char *)(v13 > 1), v14 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v14 + 1;
    v15 = &v12[8 * v14];
    *((_DWORD *)v15 + 8) = v8;
    *((_WORD *)v15 + 18) = WORD2(v8);
    v15[38] = v11;
    *((_QWORD *)v3 + 1) = v12;
    v16 = swift_bridgeObjectRetain();
    LOBYTE(v17) = sub_1B093A2E4(v16, 0);
    swift_bridgeObjectRelease();
    LODWORD(v18) = v17;
    if ((_BYTE)v17)
      goto LABEL_41;
    v19 = *v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_1B08B64C0(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v17 = *((_QWORD *)v19 + 2);
    v20 = *((_QWORD *)v19 + 3);
    v21 = v20 >> 1;
    v22 = v17 + 1;
    if (v20 >> 1 <= v17)
    {
      v19 = sub_1B08B64C0((char *)(v20 > 1), v17 + 1, 1, v19);
      v20 = *((_QWORD *)v19 + 3);
      v21 = v20 >> 1;
    }
    *((_QWORD *)v19 + 2) = v22;
    v23 = &v19[8 * v17];
    *((_DWORD *)v23 + 8) = v8;
    *((_WORD *)v23 + 18) = WORD2(v8);
    v23[38] = v11;
    if (v21 < (uint64_t)(v17 + 2))
      v19 = sub_1B08B64C0((char *)(v20 > 1), v17 + 2, 1, v19);
    *((_QWORD *)v19 + 2) = v17 + 2;
    v24 = &v19[8 * v22];
    *((_DWORD *)v24 + 8) = v7;
    *((_WORD *)v24 + 18) = WORD2(v7);
    v24[38] = BYTE6(v7);
    *((_QWORD *)v3 + 1) = v19;
    v25 = sub_1B090CFD0();
    v2 = v25;
    if (v26 || (_BYTE)v25)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v2;
    }
    v27 = *v1;
    if (!*((_QWORD *)*v1 + 2))
      goto LABEL_47;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      break;
    v18 = *((_QWORD *)v27 + 2);
    if (!v18)
      goto LABEL_40;
LABEL_37:
    v28 = v18 - 1;
    v29 = &v27[8 * v28];
    v30 = *((unsigned __int16 *)v29 + 18);
    v31 = *((unsigned int *)v29 + 8);
    v11 = v29[38];
    *((_QWORD *)v27 + 2) = v28;
    v8 = v31 | (v30 << 32);
    *((_QWORD *)v3 + 1) = v27;
    v35 = *v3;
    sub_1B0910208(v8 | (v11 << 48), v33);
    if (v32 == 3)
      goto LABEL_15;
  }
  v27 = sub_1B0953A70((uint64_t)v27);
  v18 = *((_QWORD *)v27 + 2);
  if (v18)
    goto LABEL_37;
LABEL_40:
  __break(1u);
LABEL_41:
  if ((_DWORD)v18 == 1)
  {
LABEL_42:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  return v17;
}

uint64_t sub_1B0910D2C()
{
  __int128 *v0;
  char **v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned __int8 v9;
  __int128 v10;

  v1 = (char **)v0 + 1;
  if (*(_QWORD *)(*((_QWORD *)v0 + 1) + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v10 = *v0;
  sub_1B0910208(result & 0xFFFFFFFFFFFFFFLL, v3 & 0xFFFFFFFFFFFFFFLL);
  if (v4 == 3)
    return 0x6365686365707974;
  v5 = (char *)*((_QWORD *)&v10 + 1);
  swift_getAtKeyPath();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_1B08B64C0(0, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 16) + 1, 1, *((char **)&v10 + 1));
  v7 = *((_QWORD *)v5 + 2);
  v6 = *((_QWORD *)v5 + 3);
  if (v7 >= v6 >> 1)
    v5 = sub_1B08B64C0((char *)(v6 > 1), v7 + 1, 1, v5);
  result = 0;
  *((_QWORD *)v5 + 2) = v7 + 1;
  v8 = &v5[8 * v7];
  *((_WORD *)v8 + 18) = 0;
  *((_DWORD *)v8 + 8) = v9;
  v8[38] = 0;
  *v1 = v5;
  return result;
}

uint64_t sub_1B0910ED0()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;

  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  v3 = (char *)v0;
  v4 = sub_1B093A268();
  if ((~v4 & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v5 = v4;
  v6 = sub_1B093A268();
  if ((~v6 & 0xFF000000000000) == 0)
  {
LABEL_33:
    __break(1u);
    JUMPOUT(0x1B091135CLL);
  }
  v2 = 0x6365686365707974;
  if (BYTE6(v6) == 9)
  {
    if (BYTE6(v5) != 1)
      return v2;
    v18 = *((_QWORD *)v3 + 6);
    if ((unint64_t)v6 < *(_QWORD *)(v18 + 16))
      __asm { BR              X10 }
  }
  else
  {
    if (BYTE6(v6) == 8)
    {
      v26 = *((_OWORD *)v3 + 2);
      v25 = *(_OWORD *)v3;
      if ((unint64_t)v6 < *(_QWORD *)(*((_QWORD *)&v26 + 1) + 16))
      {
        v17 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v6 + 32);
        swift_bridgeObjectRetain();
        v5 = sub_1B09698D8(v5 & 0xFFFFFFFFFFFFFFLL, v17);
        swift_bridgeObjectRelease();
        if ((~v5 & 0xFF000000000000) == 0)
          return 0x656E696665646E75;
        v3 = (char *)*((_QWORD *)&v25 + 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_25;
        goto LABEL_31;
      }
      __break(1u);
    }
    else
    {
      if (BYTE6(v6) != 7 || BYTE6(v5) != 1)
        return v2;
      v7 = *((_QWORD *)v3 + 4);
      if ((unint64_t)v6 < *(_QWORD *)(v7 + 16))
      {
        v2 = 0x65686365676E6172;
        if ((uint64_t)(v5 << 32) >= (uint64_t)0xFFFFFFFF00000001)
        {
          v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
          if ((int)v5 < *(_QWORD *)(v8 + 16))
          {
            v9 = v8 + ((8 * v5) & 0x7FFFFFFFFLL);
            v10 = *(unsigned int *)(v9 + 32) | ((unint64_t)*(unsigned __int16 *)(v9 + 36) << 32);
            v11 = *(_BYTE *)(v9 + 38);
            v12 = *v1;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v12 = sub_1B08B64C0(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
            v13 = *((_QWORD *)v12 + 2);
            v14 = *((_QWORD *)v12 + 3);
            v15 = v13 + 1;
            if (v13 >= v14 >> 1)
            {
              v23 = *((_QWORD *)v12 + 2);
              v24 = sub_1B08B64C0((char *)(v14 > 1), v13 + 1, 1, v12);
              v13 = v23;
              v12 = v24;
            }
            v2 = 0;
            *((_QWORD *)v12 + 2) = v15;
            v16 = &v12[8 * v13];
            *((_DWORD *)v16 + 8) = v10;
            *((_WORD *)v16 + 18) = WORD2(v10);
            v16[38] = v11;
            *v1 = v12;
          }
        }
        return v2;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_31:
  v3 = sub_1B08B64C0(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
LABEL_25:
  v21 = *((_QWORD *)v3 + 2);
  v20 = *((_QWORD *)v3 + 3);
  if (v21 >= v20 >> 1)
    v3 = sub_1B08B64C0((char *)(v20 > 1), v21 + 1, 1, v3);
  v2 = 0;
  *((_QWORD *)v3 + 2) = v21 + 1;
  v22 = &v3[8 * v21];
  *((_DWORD *)v22 + 8) = v5;
  *((_WORD *)v22 + 18) = WORD2(v5);
  v22[38] = BYTE6(v5);
  *v1 = v3;
  return v2;
}

uint64_t sub_1B091136C()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  v5 = result & 0xFF000000000000;
  if ((result & 0xFF000000000000) != 0xFF000000000000)
  {
    v6 = result;
    v3 = 0x6365686365707974;
    v7 = sub_1B093A268();
    v8 = 0x1000000000000;
    if ((v7 & 0xFF000000000000) != 0x1000000000000)
    {
      v8 = 0xFF000000000000;
      if ((v7 & 0xFF000000000000) != 0xFF000000000000)
        return v3;
      __break(1u);
    }
    if (v5 == v8)
    {
      v3 = 0x656E696665646E75;
      if (v6)
      {
        v9 = v7;
        if (v6 != -1 || (_DWORD)v7 != 0x80000000)
        {
          v10 = *v1;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = sub_1B08B64C0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
          v11 = *((_QWORD *)v10 + 2);
          v12 = *((_QWORD *)v10 + 3);
          v13 = v11 + 1;
          v14 = v9 / v6;
          if (v11 >= v12 >> 1)
          {
            v16 = v11 + 1;
            v17 = *((_QWORD *)v10 + 2);
            v18 = sub_1B08B64C0((char *)(v12 > 1), v11 + 1, 1, v10);
            v11 = v17;
            v13 = v16;
            v10 = v18;
          }
          v3 = 0;
          *((_QWORD *)v10 + 2) = v13;
          v15 = &v10[8 * v11];
          *((_WORD *)v15 + 18) = 0;
          *((_DWORD *)v15 + 8) = v14;
          v15[38] = 1;
          *v1 = v10;
        }
      }
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B0911514()
{
  uint64_t v0;
  char *v1;
  char v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  int64_t v19;
  char v20;

  v1 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v1 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v7 = *((_QWORD *)v1 + 2);
    if (v7)
      goto LABEL_4;
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v1 = sub_1B0953A70((uint64_t)v1);
  v7 = *((_QWORD *)v1 + 2);
  if (!v7)
    goto LABEL_14;
LABEL_4:
  v8 = (uint64_t)&v1[8 * v7 + 24];
  v9 = *(_DWORD *)v8;
  LODWORD(v8) = *(unsigned __int8 *)(v8 + 6);
  *((_QWORD *)v1 + 2) = v7 - 1;
  *(_QWORD *)(v0 + 8) = v1;
  if ((_DWORD)v8 != 1)
    return 0x6365686365707974;
  v3 = *((_QWORD *)v1 + 2);
  v10 = __OFSUB__(v3 - 1, v9);
  v11 = v3 - 1 - v9;
  v2 = 1;
  result = 0x65686365676E6172;
  if (!v10 && (v11 & 0x8000000000000000) == 0 && v11 < (uint64_t)v3)
  {
    v13 = &v1[8 * v11 + 32];
    v5 = *(unsigned int *)v13 | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 32);
    v4 = v13[6];
    v6 = *((_QWORD *)v1 + 3);
    v7 = v3 + 1;
    if (v3 < v6 >> 1)
    {
LABEL_9:
      result = 0;
      *((_QWORD *)v1 + 2) = v7;
      v14 = &v1[8 * v3];
      *((_DWORD *)v14 + 8) = v5;
      *((_WORD *)v14 + 18) = WORD2(v5);
      v14[38] = v4;
      *(_QWORD *)(v0 + 8) = v1;
      return result;
    }
LABEL_15:
    v15 = v1;
    v19 = v7;
    v16 = v3;
    v20 = v4;
    v18 = v5;
    v17 = sub_1B08B64C0((char *)(v6 > 1), v7, v2, v15);
    v5 = v18;
    v7 = v19;
    v4 = v20;
    v3 = v16;
    v1 = v17;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1B091169C()
{
  uint64_t v0;
  char **v1;
  uint64_t result;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  __int128 v10;

  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  v3 = (char *)v0;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v4 = result;
  v5 = v0 + 8;
  result = sub_1B093A268();
  if ((result & 0xFF000000000000) != 0x8000000000000)
  {
    if ((result & 0xFF000000000000) != 0xFF000000000000)
      return 0x6365686365707974;
    goto LABEL_15;
  }
  v10 = *((_OWORD *)v3 + 2);
  if ((unint64_t)result >= *(_QWORD *)(*((_QWORD *)&v10 + 1) + 16))
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = (char *)*((_QWORD *)v3 + 1);
  v6 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * result + 32);
  swift_bridgeObjectRetain();
  v5 = sub_1B09698D8(v4 & 0xFFFFFFFFFFFFFFLL, v6);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_13:
    v3 = sub_1B08B64C0(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
  v8 = *((_QWORD *)v3 + 2);
  v7 = *((_QWORD *)v3 + 3);
  if (v8 >= v7 >> 1)
    v3 = sub_1B08B64C0((char *)(v7 > 1), v8 + 1, 1, v3);
  result = 0;
  *((_QWORD *)v3 + 2) = v8 + 1;
  v9 = &v3[8 * v8];
  *((_WORD *)v9 + 18) = 0;
  *((_DWORD *)v9 + 8) = (~v5 & 0xFF000000000000) != 0;
  v9[38] = 0;
  *v1 = v3;
  return result;
}

uint64_t sub_1B0911870()
{
  _QWORD *v0;
  char *v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int64_t v17;
  unint64_t v18;

  v1 = (char *)v0[1];
  if (!*((_QWORD *)v1 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v1 + 2);
    if (v6)
    {
LABEL_4:
      v7 = &v1[8 * v6 - 8];
      v8 = *((_DWORD *)v7 + 8);
      LODWORD(v7) = v7[38];
      *((_QWORD *)v1 + 2) = v6 - 1;
      v0[1] = v1;
      v2 = 1;
      result = 0x6365686365707974;
      LODWORD(v6) = v8;
      switch((int)v7)
      {
        case 3:
          v10 = v0[7];
          if (*(_QWORD *)(v10 + 16) > (unint64_t)v8)
            __asm { BR              X13 }
          __break(1u);
          goto LABEL_22;
        case 7:
          v11 = v0[4];
          v6 = v6;
          if (*(_QWORD *)(v11 + 16) > (unint64_t)v6)
            goto LABEL_11;
          __break(1u);
LABEL_10:
          v11 = v0[5];
          v6 = v6;
          if (*(_QWORD *)(v11 + 16) <= (unint64_t)v6)
          {
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            JUMPOUT(0x1B0911AE0);
          }
LABEL_11:
          v3 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * v6 + 32) + 16);
          if (v3 != (int)v3)
            return 0x65686365676E6172;
          v4 = *((_QWORD *)v1 + 2);
          v5 = *((_QWORD *)v1 + 3);
          v6 = v4 + 1;
          if (v4 < v5 >> 1)
            goto LABEL_17;
          goto LABEL_20;
        case 8:
          goto LABEL_10;
        case 9:
          v12 = v0[6];
          if (*(_QWORD *)(v12 + 16) > (unint64_t)v8)
            __asm { BR              X13 }
          goto LABEL_23;
        default:
          return result;
      }
    }
  }
  else
  {
    v1 = sub_1B0953A70((uint64_t)v1);
    v6 = *((_QWORD *)v1 + 2);
    if (v6)
      goto LABEL_4;
  }
  __break(1u);
LABEL_20:
  v14 = v1;
  v17 = v6;
  v18 = v4;
  v15 = v3;
  v16 = sub_1B08B64C0((char *)(v5 > 1), v6, v2, v14);
  v6 = v17;
  v4 = v18;
  LODWORD(v3) = v15;
  v1 = v16;
LABEL_17:
  result = 0;
  *((_QWORD *)v1 + 2) = v6;
  v13 = &v1[8 * v4];
  *((_WORD *)v13 + 18) = 0;
  *((_DWORD *)v13 + 8) = v3;
  v13[38] = 1;
  v0[1] = v1;
  return result;
}

float sub_1B0911B24(long double a1)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  char *v7;
  int v8;
  float v9;
  double v10;
  char *v11;
  char *v12;
  int64_t v13;
  char *v14;
  unint64_t v16;
  double v17;

  v2 = *(char **)(v1 + 8);
  if (!*((_QWORD *)v2 + 2))
    return *(float *)&a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v5 = *((_QWORD *)v2 + 2);
    if (v5)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v5 = *((_QWORD *)v2 + 2);
  if (!v5)
    goto LABEL_15;
LABEL_4:
  v6 = v5 - 1;
  v7 = &v2[8 * v5 - 8];
  v8 = v7[38];
  v9 = *((float *)v7 + 8);
  *((_QWORD *)v2 + 2) = v6;
  *(_QWORD *)(v1 + 8) = v2;
  if (v8 == 2)
  {
    v10 = v9;
  }
  else
  {
    if (v8 != 1)
      return *(float *)&a1;
    v10 = (double)SLODWORD(v9);
  }
  a1 = log(v10);
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0)
  {
    v3 = *((_QWORD *)v2 + 2);
    v4 = *((_QWORD *)v2 + 3);
    v5 = v3 + 1;
    if (v3 < v4 >> 1)
    {
LABEL_13:
      *(float *)&a1 = a1;
      *((_QWORD *)v2 + 2) = v5;
      v11 = &v2[8 * v3];
      *((_WORD *)v11 + 18) = 0;
      *((_DWORD *)v11 + 8) = LODWORD(a1);
      v11[38] = 2;
      *(_QWORD *)(v1 + 8) = v2;
      return *(float *)&a1;
    }
LABEL_16:
    v12 = v2;
    v17 = a1;
    v13 = v5;
    v16 = v3;
    v14 = sub_1B08B64C0((char *)(v4 > 1), v5, 1, v12);
    v3 = v16;
    v5 = v13;
    a1 = v17;
    v2 = v14;
    goto LABEL_13;
  }
  return *(float *)&a1;
}

float sub_1B0911CB8(uint64_t a1, long double a2)
{
  char *v2;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  char *v8;
  int v9;
  float v10;
  double v11;
  char *v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v17;
  double v18;

  v2 = *(char **)(a1 + 8);
  if (!*((_QWORD *)v2 + 2))
    return *(float *)&a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v2 + 2);
    if (v6)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v6 = *((_QWORD *)v2 + 2);
  if (!v6)
    goto LABEL_15;
LABEL_4:
  v7 = v6 - 1;
  v8 = &v2[8 * v6 - 8];
  v9 = v8[38];
  v10 = *((float *)v8 + 8);
  *((_QWORD *)v2 + 2) = v7;
  *(_QWORD *)(a1 + 8) = v2;
  if (v9 == 2)
  {
    v11 = v10;
  }
  else
  {
    if (v9 != 1)
      return *(float *)&a2;
    v11 = (double)SLODWORD(v10);
  }
  a2 = cos(v11 / 180.0 * 3.14159265);
  if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0)
  {
    v4 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    v6 = v4 + 1;
    if (v4 < v5 >> 1)
    {
LABEL_13:
      *(float *)&a2 = a2;
      *((_QWORD *)v2 + 2) = v6;
      v12 = &v2[8 * v4];
      *((_WORD *)v12 + 18) = 0;
      *((_DWORD *)v12 + 8) = LODWORD(a2);
      v12[38] = 2;
      *(_QWORD *)(a1 + 8) = v2;
      return *(float *)&a2;
    }
LABEL_16:
    v13 = v2;
    v18 = a2;
    v14 = v6;
    v17 = v4;
    v15 = sub_1B08B64C0((char *)(v5 > 1), v6, 1, v13);
    v4 = v17;
    v6 = v14;
    a2 = v18;
    v2 = v15;
    goto LABEL_13;
  }
  return *(float *)&a2;
}

float sub_1B0911E6C(uint64_t a1, long double a2)
{
  char *v2;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  char *v8;
  int v9;
  float v10;
  double v11;
  char *v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v17;
  double v18;

  v2 = *(char **)(a1 + 8);
  if (!*((_QWORD *)v2 + 2))
    return *(float *)&a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v2 + 2);
    if (v6)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v6 = *((_QWORD *)v2 + 2);
  if (!v6)
    goto LABEL_15;
LABEL_4:
  v7 = v6 - 1;
  v8 = &v2[8 * v6 - 8];
  v9 = v8[38];
  v10 = *((float *)v8 + 8);
  *((_QWORD *)v2 + 2) = v7;
  *(_QWORD *)(a1 + 8) = v2;
  if (v9 == 2)
  {
    v11 = v10;
  }
  else
  {
    if (v9 != 1)
      return *(float *)&a2;
    v11 = (double)SLODWORD(v10);
  }
  a2 = sin(v11 / 180.0 * 3.14159265);
  if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0)
  {
    v4 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    v6 = v4 + 1;
    if (v4 < v5 >> 1)
    {
LABEL_13:
      *(float *)&a2 = a2;
      *((_QWORD *)v2 + 2) = v6;
      v12 = &v2[8 * v4];
      *((_WORD *)v12 + 18) = 0;
      *((_DWORD *)v12 + 8) = LODWORD(a2);
      v12[38] = 2;
      *(_QWORD *)(a1 + 8) = v2;
      return *(float *)&a2;
    }
LABEL_16:
    v13 = v2;
    v18 = a2;
    v14 = v6;
    v17 = v4;
    v15 = sub_1B08B64C0((char *)(v5 > 1), v6, 1, v13);
    v4 = v17;
    v6 = v14;
    a2 = v18;
    v2 = v15;
    goto LABEL_13;
  }
  return *(float *)&a2;
}

uint64_t sub_1B0912020()
{
  unint64_t v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  char *v13;

  v1 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v1 + 2))
    return 0x646E756B63617473;
  v2 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v3 = *((_QWORD *)v1 + 2);
    if (v3)
      goto LABEL_4;
  }
  else
  {
    v1 = sub_1B0953A70((uint64_t)v1);
    v3 = *((_QWORD *)v1 + 2);
    if (v3)
    {
LABEL_4:
      v4 = v3 - 1;
      v5 = &v1[8 * v4];
      v6 = *((unsigned __int16 *)v5 + 18);
      v7 = *((unsigned int *)v5 + 8);
      v8 = v5[38];
      *((_QWORD *)v1 + 2) = v4;
      *(_QWORD *)(v0 + 8) = v1;
      v9 = sub_1B0969370(v7 | (v6 << 32) | (v8 << 48));
      if ((~v9 & 0xFF000000000000) == 0)
        return 0x656E696665646E75;
      v0 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  v1 = sub_1B08B64C0(0, *((_QWORD *)v1 + 2) + 1, 1, v1);
LABEL_8:
  v12 = *((_QWORD *)v1 + 2);
  v11 = *((_QWORD *)v1 + 3);
  if (v12 >= v11 >> 1)
    v1 = sub_1B08B64C0((char *)(v11 > 1), v12 + 1, 1, v1);
  result = 0;
  *((_QWORD *)v1 + 2) = v12 + 1;
  v13 = &v1[8 * v12];
  *((_DWORD *)v13 + 8) = v0;
  *((_WORD *)v13 + 18) = WORD2(v0);
  v13[38] = BYTE6(v0);
  *(_QWORD *)(v2 + 8) = v1;
  return result;
}

float sub_1B0912210(long double a1)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  char *v7;
  int v8;
  float v9;
  double v10;
  char *v11;
  char *v12;
  int64_t v13;
  char *v14;
  unint64_t v16;
  double v17;

  v2 = *(char **)(v1 + 8);
  if (!*((_QWORD *)v2 + 2))
    return *(float *)&a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v5 = *((_QWORD *)v2 + 2);
    if (v5)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v5 = *((_QWORD *)v2 + 2);
  if (!v5)
    goto LABEL_15;
LABEL_4:
  v6 = v5 - 1;
  v7 = &v2[8 * v5 - 8];
  v8 = v7[38];
  v9 = *((float *)v7 + 8);
  *((_QWORD *)v2 + 2) = v6;
  *(_QWORD *)(v1 + 8) = v2;
  if (v8 == 2)
  {
    v10 = v9;
  }
  else
  {
    if (v8 != 1)
      return *(float *)&a1;
    v10 = (double)SLODWORD(v9);
  }
  a1 = log10(v10);
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0)
  {
    v3 = *((_QWORD *)v2 + 2);
    v4 = *((_QWORD *)v2 + 3);
    v5 = v3 + 1;
    if (v3 < v4 >> 1)
    {
LABEL_13:
      *(float *)&a1 = a1;
      *((_QWORD *)v2 + 2) = v5;
      v11 = &v2[8 * v3];
      *((_WORD *)v11 + 18) = 0;
      *((_DWORD *)v11 + 8) = LODWORD(a1);
      v11[38] = 2;
      *(_QWORD *)(v1 + 8) = v2;
      return *(float *)&a1;
    }
LABEL_16:
    v12 = v2;
    v17 = a1;
    v13 = v5;
    v16 = v3;
    v14 = sub_1B08B64C0((char *)(v4 > 1), v5, 1, v12);
    v3 = v16;
    v5 = v13;
    a1 = v17;
    v2 = v14;
    goto LABEL_13;
  }
  return *(float *)&a1;
}

uint64_t sub_1B09123A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v1 = *(_QWORD *)(v0 + 8);
  if (!*(_QWORD *)(v1 + 16))
    return 0x646E756B63617473;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 16);
    if (v3)
      goto LABEL_4;
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = (uint64_t)sub_1B0953A70(v1);
  v1 = result;
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    goto LABEL_18;
LABEL_4:
  v4 = v3 - 1;
  v5 = v1 + 8 * v4;
  v6 = *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32);
  v7 = *(unsigned __int8 *)(v5 + 38);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v0 + 8) = v1;
  if (v7 == 7 && (v6 & 0x400000000) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16) > (unint64_t)v6)
    {
      swift_bridgeObjectRetain();
      goto LABEL_13;
    }
LABEL_19:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8A0);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B0A363D0;
  *(_WORD *)(v9 + 36) = WORD2(v6);
  *(_DWORD *)(v9 + 32) = v6;
  *(_BYTE *)(v9 + 38) = v7;
  do
  {
LABEL_13:
    v10 = swift_bridgeObjectRetain();
    v11 = sub_1B093A2E4(v10, 0);
    swift_bridgeObjectRelease();
  }
  while (!v11);
  swift_bridgeObjectRelease();
  if (v11 == 1)
    return 0;
  else
    return v11;
}

uint64_t sub_1B091250C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  char *v3;
  char v4;
  _BOOL4 v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v2 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v3 = *(char **)(v0 + 8);
  sub_1B0910208(result & 0xFFFFFFFFFFFFFFLL, v2 & 0xFFFFFFFFFFFFFFLL);
  if (v4 != 3)
  {
    v5 = v4 != 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_7;
LABEL_11:
    v3 = sub_1B08B64C0(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    goto LABEL_7;
  }
  v5 = 1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_11;
LABEL_7:
  v7 = *((_QWORD *)v3 + 2);
  v6 = *((_QWORD *)v3 + 3);
  if (v7 >= v6 >> 1)
    v3 = sub_1B08B64C0((char *)(v6 > 1), v7 + 1, 1, v3);
  result = 0;
  *((_QWORD *)v3 + 2) = v7 + 1;
  v8 = &v3[8 * v7];
  *((_WORD *)v8 + 18) = 0;
  *((_DWORD *)v8 + 8) = v5;
  v8[38] = 0;
  *(_QWORD *)(v0 + 8) = v3;
  return result;
}

uint64_t sub_1B091268C()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  v1 = *(_QWORD **)(v0 + 32);
  v2 = v1[2];
  if (HIDWORD(v2))
  {
    __break(1u);
  }
  else if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    goto LABEL_3;
  }
  v1 = sub_1B08B6484(0, v2 + 1, 1, v1);
LABEL_3:
  v4 = v1[2];
  v3 = v1[3];
  if (v4 >= v3 >> 1)
    v1 = sub_1B08B6484((_QWORD *)(v3 > 1), v4 + 1, 1, v1);
  v1[2] = v4 + 1;
  v1[v4 + 4] = &unk_1E6191AB0;
  *(_QWORD *)(v0 + 32) = v1;
  v5 = *(char **)(v0 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_1B08B64C0(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
  v7 = *((_QWORD *)v5 + 2);
  v6 = *((_QWORD *)v5 + 3);
  if (v7 >= v6 >> 1)
    v5 = sub_1B08B64C0((char *)(v6 > 1), v7 + 1, 1, v5);
  *((_QWORD *)v5 + 2) = v7 + 1;
  v8 = &v5[8 * v7];
  *((_DWORD *)v8 + 8) = v2;
  *((_WORD *)v8 + 18) = (v2 | 0x300000000) >> 32;
  v8[38] = 7;
  *(_QWORD *)(v0 + 8) = v5;
  return 0;
}

uint64_t sub_1B09127C8()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t result;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;

  v1 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v1 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v1 = sub_1B0953A70((uint64_t)v1);
    v5 = *((_QWORD *)v1 + 2);
    if (v5)
      goto LABEL_4;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = *((_QWORD *)v1 + 2);
  if (!v5)
    goto LABEL_13;
LABEL_4:
  v6 = &v1[8 * v5 - 8];
  LODWORD(v2) = *((_DWORD *)v6 + 8);
  v4 = v6[38];
  *((_QWORD *)v1 + 2) = v5 - 1;
  *(_QWORD *)(v0 + 8) = v1;
  if ((_DWORD)v4 == 8)
  {
    v5 = *(_QWORD *)(v0 + 40);
    v2 = v2;
    v3 = *(_QWORD *)(v5 + 16);
    if (v3 > v2)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v2 + 32) + 24);
      v2 = 0x7FFFFFFFLL;
      if (v7 < 0x7FFFFFFF)
        v2 = v7;
      v3 = *((_QWORD *)v1 + 2);
      v4 = *((_QWORD *)v1 + 3);
      v5 = v3 + 1;
      if (v3 < v4 >> 1)
        goto LABEL_9;
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    v10 = v1;
    v13 = v5;
    v14 = v3;
    v11 = v2;
    v12 = sub_1B08B64C0((char *)(v4 > 1), v5, 1, v10);
    v5 = v13;
    v3 = v14;
    v2 = v11;
    v1 = v12;
LABEL_9:
    result = 0;
    *((_QWORD *)v1 + 2) = v5;
    v9 = &v1[8 * v3];
    *((_DWORD *)v9 + 8) = v2;
    *((_WORD *)v9 + 18) = WORD2(v2);
    v9[38] = 1;
    *(_QWORD *)(v0 + 8) = v1;
    return result;
  }
  return 0x6365686365707974;
}

uint64_t sub_1B091292C()
{
  uint64_t v0;
  int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;

  v3 = *(_QWORD *)(v0 + 8);
  v2 = (uint64_t *)(v0 + 8);
  if (*(_QWORD *)(v3 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  v6 = result & 0xFF000000000000;
  if ((result & 0xFF000000000000) != 0xFF000000000000)
  {
    v7 = result;
    v4 = 0x6365686365707974;
    result = sub_1B093A268();
    v8 = 0x1000000000000;
    if ((result & 0xFF000000000000) != 0x1000000000000)
    {
      v8 = 0xFF000000000000;
      if ((result & 0xFF000000000000) != 0xFF000000000000)
        return v4;
      __break(1u);
    }
    if (v6 != v8)
      return v4;
    if (!v7)
    {
      __break(1u);
      goto LABEL_17;
    }
    v1 = result;
    if (v7 != -1 || (_DWORD)result != 0x80000000)
    {
      v6 = *v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_12:
        v9 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)(v6 + 24);
        v11 = v9 + 1;
        if (v9 >= v10 >> 1)
        {
          v13 = v9 + 1;
          v14 = *(_QWORD *)(v6 + 16);
          v15 = sub_1B08B64C0((char *)(v10 > 1), v9 + 1, 1, (char *)v6);
          v9 = v14;
          v11 = v13;
          v6 = (uint64_t)v15;
        }
        v4 = 0;
        *(_QWORD *)(v6 + 16) = v11;
        v12 = v6 + 8 * v9;
        *(_WORD *)(v12 + 36) = 0;
        *(_DWORD *)(v12 + 32) = v1 % v7;
        *(_BYTE *)(v12 + 38) = 1;
        *v2 = v6;
        return v4;
      }
LABEL_17:
      v6 = (uint64_t)sub_1B08B64C0(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
      goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B0912AC0()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v4 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_32:
    __break(1u);
    return result;
  }
  v5 = result;
  result = 0x6365686365707974;
  if (BYTE6(v5) == 2)
  {
    if (BYTE6(v4) == 1)
    {
      v7 = (float)(int)v4;
    }
    else
    {
      if (BYTE6(v4) != 2)
        return result;
      v7 = *(float *)&v4;
    }
    v6 = v7 * *(float *)&v5;
    goto LABEL_18;
  }
  if (BYTE6(v5) == 1)
  {
    if (BYTE6(v4) == 1)
    {
      v8 = (int)v5 * (uint64_t)(int)v4;
      if (v8 == (int)v8)
      {
        v10 = *v1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1B08B64C0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v17 = *((_QWORD *)v10 + 2);
        v18 = *((_QWORD *)v10 + 3);
        v19 = v17 + 1;
        if (v17 >= v18 >> 1)
        {
          v28 = v17 + 1;
          v24 = v10;
          v25 = *((_QWORD *)v10 + 2);
          v26 = sub_1B08B64C0((char *)(v18 > 1), v17 + 1, 1, v24);
          v17 = v25;
          v19 = v28;
          v10 = v26;
        }
        *((_QWORD *)v10 + 2) = v19;
        v20 = &v10[8 * v17];
        *((_DWORD *)v20 + 8) = v8;
        v15 = v20 + 32;
        *((_WORD *)v15 + 2) = 0;
        v16 = 1;
LABEL_30:
        result = 0;
        v15[6] = v16;
        *v1 = v10;
        return result;
      }
      v6 = (float)v8;
LABEL_18:
      v9 = v6;
      if ((~LODWORD(v6) & 0x7F800000) == 0)
        return 0x656E696665646E75;
      v10 = *v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_1B08B64C0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v11 = *((_QWORD *)v10 + 2);
      v12 = *((_QWORD *)v10 + 3);
      v13 = v11 + 1;
      if (v11 >= v12 >> 1)
      {
        v27 = v11 + 1;
        v21 = v10;
        v22 = *((_QWORD *)v10 + 2);
        v23 = sub_1B08B64C0((char *)(v12 > 1), v11 + 1, 1, v21);
        v11 = v22;
        v13 = v27;
        v10 = v23;
      }
      *((_QWORD *)v10 + 2) = v13;
      v14 = &v10[8 * v11];
      *((float *)v14 + 8) = v9;
      v15 = v14 + 32;
      *((_WORD *)v15 + 2) = 0;
      v16 = 2;
      goto LABEL_30;
    }
    if (BYTE6(v4) == 2)
    {
      v6 = *(float *)&v4 * (float)(int)v5;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t sub_1B0912D44()
{
  uint64_t v0;
  char *v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t result;
  unsigned int v14;
  char *v15;
  char v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;

  v1 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v1 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v5 = (char *)*((_QWORD *)v1 + 2);
    if (v5)
      goto LABEL_4;
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v1 = sub_1B0953A70((uint64_t)v1);
  v5 = (char *)*((_QWORD *)v1 + 2);
  if (!v5)
    goto LABEL_20;
LABEL_4:
  v6 = v5 - 1;
  v5 = &v1[8 * (_QWORD)(v5 - 1)];
  v7 = v5[38];
  LODWORD(v5) = *((_DWORD *)v5 + 8);
  *((_QWORD *)v1 + 2) = v6;
  *(_QWORD *)(v0 + 8) = v1;
  if (v7 == 2)
  {
    v2 = *((_QWORD *)v1 + 2);
    v4 = *((_QWORD *)v1 + 3);
    v3 = v2 + 1;
    if (v2 < v4 >> 1)
    {
LABEL_12:
      v14 = v5 ^ 0x80000000;
      *((_QWORD *)v1 + 2) = v3;
      v15 = &v1[8 * v2];
      *((_DWORD *)v15 + 8) = v14;
      v12 = v15 + 32;
      goto LABEL_13;
    }
LABEL_21:
    v31 = v2;
    v33 = v3;
    v22 = v1;
    v23 = (int)v5;
    v24 = sub_1B08B64C0((char *)(v4 > 1), v3, 1, v22);
    v2 = v31;
    v3 = v33;
    LODWORD(v5) = v23;
    v1 = v24;
    goto LABEL_12;
  }
  if (v7 != 1)
    return 0x6365686365707974;
  if ((_DWORD)v5 != 0x80000000)
  {
    v17 = -(int)v5;
    v18 = *((_QWORD *)v1 + 2);
    v19 = *((_QWORD *)v1 + 3);
    v20 = v18 + 1;
    if (v18 >= v19 >> 1)
    {
      v32 = *((_QWORD *)v1 + 2);
      v35 = v18 + 1;
      v28 = v1;
      v29 = v17;
      v30 = sub_1B08B64C0((char *)(v19 > 1), v18 + 1, 1, v28);
      v18 = v32;
      v20 = v35;
      v17 = v29;
      v1 = v30;
    }
    *((_QWORD *)v1 + 2) = v20;
    v21 = &v1[8 * v18];
    *((_DWORD *)v21 + 8) = v17;
    v12 = v21 + 32;
    *((_WORD *)v12 + 2) = 0;
    v16 = 1;
    goto LABEL_18;
  }
  v8 = *((_QWORD *)v1 + 2);
  v9 = *((_QWORD *)v1 + 3);
  v10 = v8 + 1;
  if (v8 >= v9 >> 1)
  {
    v34 = v8 + 1;
    v25 = v1;
    v26 = *((_QWORD *)v1 + 2);
    v27 = sub_1B08B64C0((char *)(v9 > 1), v8 + 1, 1, v25);
    v8 = v26;
    v10 = v34;
    v1 = v27;
  }
  *((_QWORD *)v1 + 2) = v10;
  v11 = &v1[8 * v8];
  *((_DWORD *)v11 + 8) = 1325400064;
  v12 = v11 + 32;
LABEL_13:
  *((_WORD *)v12 + 2) = 0;
  v16 = 2;
LABEL_18:
  result = 0;
  v12[6] = v16;
  *(_QWORD *)(v0 + 8) = v1;
  return result;
}

uint64_t sub_1B0912F3C()
{
  uint64_t v0;
  int v1;
  char *v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t result;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  int v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;

  v2 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v2 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = (char *)*((_QWORD *)v2 + 2);
    if (v6)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v6 = (char *)*((_QWORD *)v2 + 2);
  if (!v6)
    goto LABEL_15;
LABEL_4:
  v7 = v6 - 1;
  v6 = &v2[8 * (_QWORD)(v6 - 1)];
  v1 = v6[38];
  LODWORD(v6) = *((_DWORD *)v6 + 8);
  *((_QWORD *)v2 + 2) = v7;
  *(_QWORD *)(v0 + 8) = v2;
  if (!v1)
  {
    v10 = v6 & 1;
    v3 = *((_QWORD *)v2 + 2);
    v11 = *((_QWORD *)v2 + 3);
    v4 = v3 + 1;
    if (v3 >= v11 >> 1)
    {
      v20 = *((_QWORD *)v2 + 2);
      v22 = v3 + 1;
      v16 = v2;
      v17 = v10;
      v18 = sub_1B08B64C0((char *)(v11 > 1), v3 + 1, 1, v16);
      v3 = v20;
      v4 = v22;
      v10 = v17;
      v2 = v18;
    }
    v8 = v10 ^ 1;
    goto LABEL_12;
  }
  if (v1 == 1)
  {
    v3 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    v4 = v3 + 1;
    if (v3 < v5 >> 1)
    {
LABEL_7:
      v8 = ~(_DWORD)v6;
LABEL_12:
      *((_QWORD *)v2 + 2) = v4;
      v12 = &v2[8 * v3];
      *((_DWORD *)v12 + 8) = v8;
      v12 += 32;
      *((_WORD *)v12 + 2) = 0;
      result = 0;
      v12[6] = v1;
      *(_QWORD *)(v0 + 8) = v2;
      return result;
    }
LABEL_16:
    v19 = v3;
    v21 = v4;
    v13 = v2;
    v14 = (int)v6;
    v15 = sub_1B08B64C0((char *)(v5 > 1), v4, 1, v13);
    v3 = v19;
    v4 = v21;
    LODWORD(v6) = v14;
    v2 = v15;
    goto LABEL_7;
  }
  return 0x6365686365707974;
}

uint64_t sub_1B09130C4()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v5 = result;
  result = 0x6365686365707974;
  if (BYTE6(v5))
  {
    if (BYTE6(v5) == 1 && BYTE6(v4) == 1)
    {
      v6 = *v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1B08B64C0(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v8 = *((_QWORD *)v6 + 2);
      v7 = *((_QWORD *)v6 + 3);
      v9 = v8 + 1;
      if (v8 >= v7 >> 1)
      {
        v17 = sub_1B08B64C0((char *)(v7 > 1), v8 + 1, 1, v6);
        v9 = v8 + 1;
        v6 = v17;
      }
      *((_QWORD *)v6 + 2) = v9;
      v10 = &v6[8 * v8];
      *((_DWORD *)v10 + 8) = v5 | v4;
      v11 = v10 + 32;
LABEL_20:
      *((_WORD *)v11 + 2) = 0;
      result = 0;
      v11[6] = BYTE6(v5);
      *v1 = v6;
    }
  }
  else if (!BYTE6(v4))
  {
    v12 = (v5 | v4) & 1;
    v6 = *v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1B08B64C0(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v13 = *((_QWORD *)v6 + 2);
    v14 = *((_QWORD *)v6 + 3);
    v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      v18 = v6;
      v19 = *((_QWORD *)v6 + 2);
      v20 = sub_1B08B64C0((char *)(v14 > 1), v13 + 1, 1, v18);
      v13 = v19;
      v6 = v20;
    }
    *((_QWORD *)v6 + 2) = v15;
    v16 = &v6[8 * v13];
    *((_DWORD *)v16 + 8) = v12;
    v11 = v16 + 32;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_1B09132AC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 3uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  v2 = result & 0xFF000000000000;
  if ((result & 0xFF000000000000) == 0xFF000000000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  v3 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v4 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v5 = result;
  result = 0x6365686365707974;
  if (BYTE6(v5) == 9)
  {
    if (v2 == 0x1000000000000 && BYTE6(v4) == 1)
    {
      v6 = (void (*)(_BYTE *, _QWORD))sub_1B08A4808((uint64_t)v9, v5);
      sub_1B0913510(v8);
      goto LABEL_16;
    }
  }
  else
  {
    if (BYTE6(v5) == 8)
    {
      sub_1B09694B4(v4 & 0xFFFFFFFFFFFFFFLL, v3 & 0xFFFFFFFFFFFFFFLL, v5);
      return 0;
    }
    if (BYTE6(v5) == 7 && BYTE6(v4) == 1)
    {
      v6 = (void (*)(_BYTE *, _QWORD))sub_1B08A4794((uint64_t)v9, v5);
      sub_1B0913454(v7, v4, v3 & 0xFFFFFFFFFFFFFFLL, (uint64_t)&v10);
LABEL_16:
      v6(v9, 0);
      return v10;
    }
  }
  return result;
}

uint64_t sub_1B0913454@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (a2 < 0 || (v5 = (_QWORD *)result, v6 = *(_QWORD *)result, v7 = a2, *(_QWORD *)(*(_QWORD *)result + 16) <= a2))
  {
    *(_OWORD *)a4 = xmmword_1B0A38050;
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B0953A70(v6);
      v6 = result;
    }
    if (*(_QWORD *)(v6 + 16) <= v7)
    {
      __break(1u);
    }
    else
    {
      v9 = v6 + 8 * v7;
      *(_DWORD *)(v9 + 32) = a3;
      *(_WORD *)(v9 + 36) = WORD2(a3);
      *(_BYTE *)(v9 + 38) = BYTE6(a3);
      *v5 = v6;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 16) = 0;
    }
  }
  return result;
}

void sub_1B0913510(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1B0913554(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  uint64_t result;

  v4 = xmmword_1B0A38050;
  v5 = 1;
  if (a2 >= 0 && BYTE6(v2) > (uint64_t)a2)
  {
    result = sub_1B0A1CFAC();
    v5 = 0;
    v4 = 0uLL;
  }
  *(_OWORD *)v3 = v4;
  *(_BYTE *)(v3 + 16) = v5;
  return result;
}

uint64_t sub_1B09135D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_1B0A1D294();
  MEMORY[0x1E0C80A78](v1);
  v2 = *(_QWORD *)(v0 + 8);
  if (!*(_QWORD *)(v2 + 16))
    return 0x646E756B63617473;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
      goto LABEL_4;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = (uint64_t)sub_1B0953A70(v2);
  v2 = result;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
    goto LABEL_13;
LABEL_4:
  v5 = v2 + 8 * (v4 - 1);
  v6 = *(_DWORD *)(v5 + 32);
  LODWORD(v5) = *(unsigned __int8 *)(v5 + 38);
  *(_QWORD *)(v2 + 16) = v4 - 1;
  *(_QWORD *)(v0 + 8) = v2;
  if ((_DWORD)v5 != 3)
    return 0x6365686365707974;
  v7 = *(_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v7 + 16) > (unint64_t)v6)
  {
    v8 = v7 + 16 * v6;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    sub_1B08A35B0(v9, v10);
    sub_1B0A1D27C();
    v11 = sub_1B0A1D234();
    v13 = v12;
    sub_1B08A3638(v9, v10);
    if (!v13)
      return 3;
    return v11;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1B091374C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  v2 = sub_1B093A268();
  v3 = v2 & 0xFF000000000000;
  if ((v2 & 0xFF000000000000) == 0xFF000000000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  v4 = v2;
  v5 = sub_1B093A268() & 0xFF000000000000;
  if (v5 == 0xFF000000000000)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x1B0913B94);
  }
  result = 0x6365686365707974;
  if (v3 == 0x9000000000000 && v5 == 0x6000000000000)
  {
    v6 = *(_QWORD *)(v0 + 48);
    if ((unint64_t)v4 < *(_QWORD *)(v6 + 16))
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x1B0913AC0);
  }
  return result;
}

void sub_1B0913BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  char *v24;

  v23 = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v24 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v22 - v10;
  v14 = type metadata accessor for PSInputByteStream(0, v12, v13, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v22[2] = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v22 - v19;
  v22[0] = v7;
  v22[1] = a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v11, a1, a3, v18);
  PSInputByteStream.init(input:)((uint64_t)v11, a3, v23, (uint64_t)v20);
  v21 = *(_QWORD *)(a2 + 8) >> 62;
  v23 = v15;
  __asm { BR              X12 }
}

uint64_t sub_1B0913CD8()
{
  unint64_t v0;

  return ((uint64_t (*)())((char *)sub_1B0913D04 + 4 * byte_1B0A3806C[v0 >> 62]))();
}

uint64_t sub_1B0913D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt8_optional v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (v7 < BYTE6(v0))
  {
    v9 = PSInputByteStream.consume()();
    v1 = v10;
    if (v10)
    {
      v11 = *(_QWORD *)(v8 - 88);
      goto LABEL_8;
    }
    if ((*(_WORD *)&v9 & 0x100) == 0)
    {
      sub_1B0A1CFAC();
      JUMPOUT(0x1B0913CF0);
    }
  }
  v11 = *(_QWORD *)(v8 - 88);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 16))(*(_QWORD *)(v8 - 96), v6, v2);
  PSInputByteStream.finish()(v2, v4);
  if (!v1)
  {
    v13 = *(_QWORD *)(v8 - 112);
    v12 = *(_QWORD *)(v8 - 104);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 32))(v12, *(_QWORD *)(v8 - 72), v5);
    __asm { BR              X12 }
  }
LABEL_8:
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v6, v2);
  return v14 & 1;
}

uint64_t sub_1B0913E54()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
    goto LABEL_22;
  v2 = result;
  result = sub_1B093A268();
  if ((result & 0xFF000000000000) != 0x1000000000000)
  {
    if ((result & 0xFF000000000000) != 0xFF000000000000)
      return 0x6365686365707974;
    goto LABEL_23;
  }
  v3 = result;
  if ((v2 & 0x400000000) != 0 && BYTE6(v2) == 7)
  {
    if ((unint64_t)v2 >= *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
    {
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      return result;
    }
    result = swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8A0);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B0A363D0;
    *(_WORD *)(result + 36) = WORD2(v2);
    *(_DWORD *)(result + 32) = v2;
    *(_BYTE *)(result + 38) = BYTE6(v2);
  }
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (!v3)
    goto LABEL_18;
  while (1)
  {
    v4 = swift_bridgeObjectRetain();
    v5 = sub_1B093A2E4(v4, 0);
    swift_bridgeObjectRelease();
    if (v5)
      break;
    if (!--v3)
      goto LABEL_18;
  }
  if (v5 != 1)
  {
    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
}

unint64_t sub_1B091400C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = 0x646E756B63617473;
  v3 = *(_QWORD *)(v0 + 8);
  v2 = (uint64_t *)(v0 + 8);
  if (*(_QWORD *)(v3 + 16) < 2uLL)
    return v1;
  result = sub_1B093A268();
  v5 = result & 0xFF000000000000;
  if ((result & 0xFF000000000000) != 0xFF000000000000)
  {
    v6 = result;
    result = sub_1B093A268();
    v7 = 0x1000000000000;
    if ((result & 0xFF000000000000) != 0x1000000000000)
    {
      v7 = 0xFF000000000000;
      if ((result & 0xFF000000000000) != 0xFF000000000000)
        return 0x6365686365707974;
      __break(1u);
    }
    if (v5 == v7)
    {
      v8 = *v2;
      v9 = *(_QWORD *)(*v2 + 16);
      if (v9 < (int)result)
        return v1;
      if (!v6)
        return 0;
      if (v6 < 0)
      {
        v10 = __OFADD__((_DWORD)result, v6);
        v6 += result;
        if (v10)
          goto LABEL_36;
      }
      v10 = __OFSUB__((_DWORD)result, v6);
      v11 = result - v6;
      if (v10)
      {
        __break(1u);
      }
      else
      {
        v1 = v9 - (int)result;
        if (!__OFSUB__(v9, (int)result))
        {
          v12 = (int)result;
          if (v9 >= (uint64_t)v1)
          {
            if ((v1 & 0x8000000000000000) == 0)
            {
              sub_1B0A1DA98();
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain_n();
              v13 = swift_dynamicCastClass();
              if (!v13)
              {
                swift_bridgeObjectRelease();
                v13 = MEMORY[0x1E0DEE9D8];
              }
              v14 = *(_QWORD *)(v13 + 16);
              swift_release();
              if (v14 == v12)
              {
                v15 = swift_dynamicCastClass();
                if (!v15)
                {
                  swift_bridgeObjectRelease();
                  v15 = MEMORY[0x1E0DEE9D8];
                }
LABEL_21:
                result = swift_bridgeObjectRelease();
                v16 = *(_QWORD *)(v8 + 16);
                if (v16 < v1)
                {
                  __break(1u);
                }
                else
                {
                  v17 = v11;
                  result = sub_1B0901BF4(v1, v16);
                  v18 = *(_QWORD *)(v15 + 16);
                  if (v18 >= v11)
                  {
                    if ((v11 & 0x80000000) == 0)
                    {
                      v19 = (2 * v18) | 1;
                      v20 = swift_retain();
                      sub_1B08ABC6C(v20, v15 + 32, v17, v19);
                      swift_release();
                      sub_1B08ABC6C(v15, v15 + 32, 0, (2 * v17) | 1);
                      swift_release();
                      return 0;
                    }
                    goto LABEL_35;
                  }
                }
                __break(1u);
LABEL_35:
                __break(1u);
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
LABEL_32:
              swift_bridgeObjectRelease();
              sub_1B08E8008(v8, v8 + 32, v1, (2 * v9) | 1);
              v15 = v21;
              goto LABEL_21;
            }
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      __break(1u);
      goto LABEL_30;
    }
    return 0x6365686365707974;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1B0914260()
{
  uint64_t v0;
  int v1;
  char *v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t result;
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float v26;
  int64_t v27;
  unint64_t v28;

  v2 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v2 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v2 + 2);
    if (v6)
      goto LABEL_4;
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v6 = *((_QWORD *)v2 + 2);
  if (!v6)
    goto LABEL_18;
LABEL_4:
  v7 = v6 - 1;
  v8 = &v2[8 * v6 - 8];
  v1 = v8[38];
  v6 = *((unsigned int *)v8 + 8) | ((unint64_t)*((unsigned __int16 *)v8 + 18) << 32);
  *((_QWORD *)v2 + 2) = v7;
  *(_QWORD *)(v0 + 8) = v2;
  if (v1 == 2)
  {
    v12 = floorf(*(float *)&v6 + 0.5);
    v13 = ceilf(*(float *)&v6 + 0.5);
    if (COERCE_INT(*(float *)&v6 + 0.5) >= 0)
      v14 = v13;
    else
      v14 = v12;
    v15 = *((_QWORD *)v2 + 2);
    v16 = *((_QWORD *)v2 + 3);
    v17 = v15 + 1;
    if (v15 >= v16 >> 1)
    {
      v28 = v15 + 1;
      v22 = v2;
      v26 = v14;
      v23 = *((_QWORD *)v2 + 2);
      v24 = sub_1B08B64C0((char *)(v16 > 1), v15 + 1, 1, v22);
      v15 = v23;
      v14 = v26;
      v17 = v28;
      v2 = v24;
    }
    *((_QWORD *)v2 + 2) = v17;
    v18 = &v2[8 * v15];
    *((float *)v18 + 8) = v14;
    v10 = v18 + 32;
    *((_WORD *)v10 + 2) = 0;
    goto LABEL_15;
  }
  if (v1 == 1)
  {
    v3 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    v4 = v3 + 1;
    if (v3 < v5 >> 1)
    {
LABEL_7:
      *((_QWORD *)v2 + 2) = v4;
      v9 = &v2[8 * v3];
      *((_DWORD *)v9 + 8) = v6;
      v10 = v9 + 32;
      *((_WORD *)v10 + 2) = WORD2(v6);
LABEL_15:
      result = 0;
      v10[6] = v1;
      *(_QWORD *)(v0 + 8) = v2;
      return result;
    }
LABEL_19:
    v25 = v3;
    v27 = v4;
    v19 = v2;
    v20 = v6;
    v21 = sub_1B08B64C0((char *)(v5 > 1), v4, 1, v19);
    v3 = v25;
    v4 = v27;
    v6 = v20;
    v2 = v21;
    goto LABEL_7;
  }
  return 0x6365686365707974;
}

float sub_1B091441C(double a1)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  char *v7;
  int v8;
  float v9;
  double v10;
  char *v11;
  char *v12;
  int64_t v13;
  char *v14;
  double v16;
  unint64_t v17;

  v2 = *(char **)(v1 + 8);
  if (!*((_QWORD *)v2 + 2))
    return *(float *)&a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v5 = *((_QWORD *)v2 + 2);
    if (v5)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v5 = *((_QWORD *)v2 + 2);
  if (!v5)
    goto LABEL_15;
LABEL_4:
  v6 = v5 - 1;
  v7 = &v2[8 * v5 - 8];
  v8 = v7[38];
  v9 = *((float *)v7 + 8);
  *((_QWORD *)v2 + 2) = v6;
  *(_QWORD *)(v1 + 8) = v2;
  if (v8 == 2)
  {
    v10 = v9;
  }
  else
  {
    if (v8 != 1)
      return *(float *)&a1;
    v10 = (double)SLODWORD(v9);
  }
  a1 = sqrt(v10);
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0)
  {
    v3 = *((_QWORD *)v2 + 2);
    v4 = *((_QWORD *)v2 + 3);
    v5 = v3 + 1;
    if (v3 < v4 >> 1)
    {
LABEL_13:
      *(float *)&a1 = a1;
      *((_QWORD *)v2 + 2) = v5;
      v11 = &v2[8 * v3];
      *((_WORD *)v11 + 18) = 0;
      *((_DWORD *)v11 + 8) = LODWORD(a1);
      v11[38] = 2;
      *(_QWORD *)(v1 + 8) = v2;
      return *(float *)&a1;
    }
LABEL_16:
    v12 = v2;
    v13 = v5;
    v16 = a1;
    v17 = v3;
    v14 = sub_1B08B64C0((char *)(v4 > 1), v5, 1, v12);
    v3 = v17;
    a1 = v16;
    v5 = v13;
    v2 = v14;
    goto LABEL_13;
  }
  return *(float *)&a1;
}

uint64_t sub_1B09145B0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v2 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v3 = result & 0xFFFFFFFFFFFFFFLL;
  v6 = *(_OWORD *)(v0 + 16);
  result = sub_1B0969620(result & 0xFFFFFFFFFFFFFFLL);
  v4 = result;
  if ((result & 0x100000000) != 0)
  {
    v5 = *(_QWORD *)(v6 + 16);
    if (v5)
    {
      v4 = *(_DWORD *)(v6 + 4 * v5 + 28);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_8:
  sub_1B09694B4(v3, v2 & 0xFFFFFFFFFFFFFFLL, v4);
  return 0;
}

uint64_t sub_1B09146B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t result;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v6 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v7 = *((_QWORD *)v6 + 2);
    if (v7)
      goto LABEL_4;
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = sub_1B0953A70((uint64_t)v6);
  v7 = *((_QWORD *)v6 + 2);
  if (!v7)
    goto LABEL_15;
LABEL_4:
  v8 = &v6[8 * v7 - 8];
  v9 = *((_DWORD *)v8 + 8);
  LODWORD(v8) = v8[38];
  *((_QWORD *)v6 + 2) = v7 - 1;
  *(_QWORD *)(v0 + 8) = v6;
  if ((_DWORD)v8 != 1)
    return 0x6365686365707974;
  v27 = sub_1B0909258(v9);
  v28 = v10;
  v1 = 0;
  sub_1B0907D74((uint64_t)&v27);
  v3 = *(char **)(v0 + 48);
  v5 = *((_QWORD *)v3 + 2);
  v4 = HIDWORD(v5);
  if (HIDWORD(v5))
    goto LABEL_16;
  v1 = v27;
  v2 = v28;
  sub_1B08A35B0(v27, v28);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
    v3 = sub_1B08B6378(0, v5 + 1, 1, v3);
  v11 = *((_QWORD *)v3 + 2);
  v12 = *((_QWORD *)v3 + 3);
  v13 = v11 + 1;
  if (v11 >= v12 >> 1)
  {
    v26 = v11 + 1;
    v20 = v3;
    v21 = *((_QWORD *)v3 + 2);
    v22 = sub_1B08B6378((char *)(v12 > 1), v11 + 1, 1, v20);
    v11 = v21;
    v13 = v26;
    v3 = v22;
  }
  *((_QWORD *)v3 + 2) = v13;
  v14 = &v3[16 * v11];
  *((_QWORD *)v14 + 4) = v1;
  *((_QWORD *)v14 + 5) = v2;
  *(_QWORD *)(v0 + 48) = v3;
  v15 = *((_QWORD *)v6 + 2);
  v16 = *((_QWORD *)v6 + 3);
  v17 = v15 + 1;
  if (v15 >= v16 >> 1)
  {
    v23 = v6;
    v24 = *((_QWORD *)v6 + 2);
    v25 = sub_1B08B64C0((char *)(v16 > 1), v15 + 1, 1, v23);
    v15 = v24;
    v6 = v25;
  }
  *((_QWORD *)v6 + 2) = v17;
  v18 = &v6[8 * v15];
  *((_DWORD *)v18 + 8) = v5;
  *((_WORD *)v18 + 18) = v4;
  v18[38] = 9;
  sub_1B08A3638(v1, v2);
  result = 0;
  *(_QWORD *)(v0 + 8) = v6;
  return result;
}

uint64_t sub_1B09148B4()
{
  uint64_t v0;
  int v1;
  char *v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t result;
  float v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  float v24;
  int64_t v25;
  unint64_t v26;

  v2 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v2 + 2))
    return 0x646E756B63617473;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v6 = *((_QWORD *)v2 + 2);
    if (v6)
      goto LABEL_4;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = sub_1B0953A70((uint64_t)v2);
  v6 = *((_QWORD *)v2 + 2);
  if (!v6)
    goto LABEL_15;
LABEL_4:
  v7 = v6 - 1;
  v8 = &v2[8 * v6 - 8];
  v1 = v8[38];
  v6 = *((unsigned int *)v8 + 8) | ((unint64_t)*((unsigned __int16 *)v8 + 18) << 32);
  *((_QWORD *)v2 + 2) = v7;
  *(_QWORD *)(v0 + 8) = v2;
  if (v1 == 2)
  {
    v12 = truncf(*(float *)&v6);
    v13 = *((_QWORD *)v2 + 2);
    v14 = *((_QWORD *)v2 + 3);
    v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      v26 = v13 + 1;
      v20 = v2;
      v24 = v12;
      v21 = *((_QWORD *)v2 + 2);
      v22 = sub_1B08B64C0((char *)(v14 > 1), v13 + 1, 1, v20);
      v13 = v21;
      v12 = v24;
      v15 = v26;
      v2 = v22;
    }
    *((_QWORD *)v2 + 2) = v15;
    v16 = &v2[8 * v13];
    *((float *)v16 + 8) = v12;
    v10 = v16 + 32;
    *((_WORD *)v10 + 2) = 0;
    goto LABEL_12;
  }
  if (v1 == 1)
  {
    v3 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    v4 = v3 + 1;
    if (v3 < v5 >> 1)
    {
LABEL_7:
      *((_QWORD *)v2 + 2) = v4;
      v9 = &v2[8 * v3];
      *((_DWORD *)v9 + 8) = v6;
      v10 = v9 + 32;
      *((_WORD *)v10 + 2) = WORD2(v6);
LABEL_12:
      result = 0;
      v10[6] = v1;
      *(_QWORD *)(v0 + 8) = v2;
      return result;
    }
LABEL_16:
    v23 = v3;
    v25 = v4;
    v17 = v2;
    v18 = v6;
    v19 = sub_1B08B64C0((char *)(v5 > 1), v4, 1, v17);
    v3 = v23;
    v4 = v25;
    v6 = v18;
    v2 = v19;
    goto LABEL_7;
  }
  return 0x6365686365707974;
}

uint64_t sub_1B0914A58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;

  v1 = v0;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
    goto LABEL_22;
  v3 = result;
  result = sub_1B093A268();
  if ((result & 0xFF000000000000) != 0x8000000000000)
  {
    if ((result & 0xFF000000000000) != 0xFF000000000000)
      return 0x6365686365707974;
    goto LABEL_23;
  }
  v4 = result;
  if (BYTE6(v3) != 9)
  {
    if (BYTE6(v3) == 4)
      v5 = v3;
    else
      v5 = v3;
    if (BYTE6(v3) == 4)
      LOBYTE(v6) = 3;
    else
      v6 = HIWORD(v3);
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v0 + 48);
  if ((unint64_t)v3 < *(_QWORD *)(v7 + 16))
  {
    v8 = v7 + 16 * v3;
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    sub_1B08A35B0(v9, v10);
    v11 = sub_1B093A7AC(v9, v10);
    sub_1B08A3638(v9, v10);
    v5 = v11;
    LOBYTE(v6) = 3;
LABEL_16:
    v12 = *(_QWORD **)(v1 + 40);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B0953A98(v12);
      v12 = (_QWORD *)result;
    }
    if ((unint64_t)v4 < v12[2])
    {
      sub_1B08E1544(v5 & 0xFFFFFFFFFFFFLL | ((unint64_t)v6 << 48));
      result = 0;
      *(_QWORD *)(v1 + 40) = v12;
      return result;
    }
    __break(1u);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1B0914BF0()
{
  unint64_t v0;
  char *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  char *v20;

  v1 = *(char **)(v0 + 8);
  if (!*((_QWORD *)v1 + 2))
    return 0x646E756B63617473;
  v2 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v3 = *((_QWORD *)v1 + 2);
    if (v3)
      goto LABEL_4;
LABEL_19:
    __break(1u);
LABEL_20:
    v1 = sub_1B08B64C0(0, *((_QWORD *)v1 + 2) + 1, 1, v1);
    goto LABEL_6;
  }
  v1 = sub_1B0953A70((uint64_t)v1);
  v3 = *((_QWORD *)v1 + 2);
  if (!v3)
    goto LABEL_19;
LABEL_4:
  v4 = v3 - 1;
  v5 = &v1[8 * v4];
  v6 = *((unsigned __int16 *)v5 + 18);
  v7 = *((unsigned int *)v5 + 8);
  v8 = v5[38];
  *((_QWORD *)v1 + 2) = v4;
  v0 = sub_1B0969620(v7 | (v6 << 32) | (v8 << 48));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((v0 & 0x100000000) != 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v1 = sub_1B08B64C0(0, *((_QWORD *)v1 + 2) + 1, 1, v1);
    v19 = *((_QWORD *)v1 + 2);
    v18 = *((_QWORD *)v1 + 3);
    if (v19 >= v18 >> 1)
      v1 = sub_1B08B64C0((char *)(v18 > 1), v19 + 1, 1, v1);
    *((_QWORD *)v1 + 2) = v19 + 1;
    v20 = &v1[8 * v19];
    *((_DWORD *)v20 + 8) = 0;
    v16 = v20 + 32;
    goto LABEL_17;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_20;
LABEL_6:
  v11 = *((_QWORD *)v1 + 2);
  v10 = *((_QWORD *)v1 + 3);
  v12 = v10 >> 1;
  v13 = v11 + 1;
  if (v10 >> 1 <= v11)
  {
    v1 = sub_1B08B64C0((char *)(v10 > 1), v11 + 1, 1, v1);
    v10 = *((_QWORD *)v1 + 3);
    v12 = v10 >> 1;
  }
  *((_QWORD *)v1 + 2) = v13;
  v14 = &v1[8 * v11];
  *((_WORD *)v14 + 18) = 0;
  *((_DWORD *)v14 + 8) = v0;
  v14[38] = 8;
  if (v12 < (uint64_t)(v11 + 2))
    v1 = sub_1B08B64C0((char *)(v10 > 1), v11 + 2, 1, v1);
  *((_QWORD *)v1 + 2) = v11 + 2;
  v15 = &v1[8 * v13];
  *((_DWORD *)v15 + 8) = 1;
  v16 = v15 + 32;
LABEL_17:
  *((_WORD *)v16 + 2) = 0;
  result = 0;
  v16[6] = 0;
  *(_QWORD *)(v2 + 8) = v1;
  return result;
}

uint64_t sub_1B0914E64()
{
  uint64_t v0;
  char **v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;

  v2 = *(_QWORD *)(v0 + 8);
  v1 = (char **)(v0 + 8);
  if (*(_QWORD *)(v2 + 16) < 2uLL)
    return 0x646E756B63617473;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = result;
  result = sub_1B093A268();
  if ((~result & 0xFF000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v5 = result;
  result = 0x6365686365707974;
  if (BYTE6(v5))
  {
    if (BYTE6(v5) == 1 && BYTE6(v4) == 1)
    {
      v6 = *v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1B08B64C0(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v7 = *((_QWORD *)v6 + 2);
      v8 = *((_QWORD *)v6 + 3);
      v9 = v7 + 1;
      if (v7 >= v8 >> 1)
      {
        v19 = v7 + 1;
        v13 = v6;
        v14 = *((_QWORD *)v6 + 2);
        v15 = sub_1B08B64C0((char *)(v8 > 1), v7 + 1, 1, v13);
        v7 = v14;
        v9 = v19;
        v6 = v15;
      }
      v10 = v5 ^ v4;
LABEL_20:
      *((_QWORD *)v6 + 2) = v9;
      v12 = &v6[8 * v7];
      *((_DWORD *)v12 + 8) = v10;
      v12 += 32;
      *((_WORD *)v12 + 2) = 0;
      result = 0;
      v12[6] = BYTE6(v5);
      *v1 = v6;
    }
  }
  else if (!BYTE6(v4))
  {
    v6 = *v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1B08B64C0(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v7 = *((_QWORD *)v6 + 2);
    v11 = *((_QWORD *)v6 + 3);
    v9 = v7 + 1;
    if (v7 >= v11 >> 1)
    {
      v20 = v7 + 1;
      v16 = v6;
      v17 = *((_QWORD *)v6 + 2);
      v18 = sub_1B08B64C0((char *)(v11 > 1), v7 + 1, 1, v16);
      v7 = v17;
      v9 = v20;
      v6 = v18;
    }
    v10 = (v4 ^ v5) & 1;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_1B0915048(int a1, float a2)
{
  float v5;
  int v6;
  uint64_t result;
  _QWORD v8[2];

  if ((~LODWORD(a2) & 0x7F800000) == 0 && (LODWORD(a2) & 0x7FFFFF) != 0)
    return 2;
  if (a2 >= 2147500000.0)
    return 0;
  if (a2 <= -2147500000.0)
    return 2;
  sub_1B0915254((uint64_t)v8, floorf(a2));
  if ((v8[0] & 0x100000000) != 0
    || (v5 = ceilf(a2), v6 = v8[0], sub_1B0915254((uint64_t)v8, v5), (v8[0] & 0x100000000) != 0))
  {
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    sub_1B0A1D8A0();
    sub_1B0A1D33C();
    sub_1B0A1D33C();
    sub_1B0A1D33C();
    sub_1B0A1D33C();
    result = sub_1B0A1D984();
    __break(1u);
  }
  else
  {
    if (v6 > a1)
      return 0;
    if (SLODWORD(v8[0]) < a1)
      return 2;
    if (v5 == a2 && LODWORD(v8[0]) == a1)
      return 1;
    else
      return 2 * (v6 != a1);
  }
  return result;
}

uint64_t sub_1B09151EC(float a1, float a2)
{
  _BOOL4 v2;
  int v3;
  float v5;
  unsigned int v6;

  v2 = (LODWORD(a1) & 0x7FFFFF) != 0 && (~LODWORD(a1) & 0x7F800000) == 0;
  if ((~LODWORD(a2) & 0x7F800000) != 0)
  {
    if (v2)
      return 0;
  }
  else
  {
    v3 = LODWORD(a2) & 0x7FFFFF;
    if (v2)
      return v3 != 0;
    if (v3)
      return 2;
  }
  v5 = a1 - a2;
  if (v5 == 0.0)
    v6 = 1;
  else
    v6 = 2;
  if (v5 >= 0.0)
    return v6;
  else
    return 0;
}

BOOL sub_1B0915254(uint64_t a1, float a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v4 = (LODWORD(a2) >> 23);
  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    LODWORD(v12) = 0;
    result = 1;
    goto LABEL_25;
  }
  if (v4 == 255)
    goto LABEL_28;
  v7 = sub_1B0A1D564();
  if (v7 > 31)
    goto LABEL_28;
  v8 = v7;
  v9 = sub_1B0A1D558();
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit32(v5));
  v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      LODWORD(v12) = 0x80000000;
      goto LABEL_25;
    }
LABEL_28:
    LODWORD(v12) = 0;
    result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 31)
  {
    if (v12 < -32 || v12 > 32)
      goto LABEL_11;
  }
  else if (v12 < -32 || v12 > 32)
  {
    goto LABEL_11;
  }
  if (v12 < 0)
    goto LABEL_32;
  if ((unint64_t)v12 < 0x20)
  {
    v14 = v5 << v12;
    if (v8 != 31)
      goto LABEL_17;
LABEL_34:
    if (a2 < 0.0 && !v14)
      goto LABEL_36;
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 31)
    goto LABEL_27;
  v13 = 0;
  v14 = 0;
  if (v8 < 0)
    goto LABEL_20;
LABEL_19:
  v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    v12 = v14 | v13;
    if (a2 >= 0.0)
      break;
    if ((v12 & 0x80000000) == 0)
    {
      LOBYTE(v6) = 0;
      LODWORD(v12) = -(int)v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFE0)
      goto LABEL_11;
    v14 = v5 >> -(char)v12;
    if (v8 == 31)
      goto LABEL_34;
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_19;
    v13 = 0;
  }
  if ((v12 & 0x80000000) != 0)
    goto LABEL_31;
  LOBYTE(v6) = 0;
LABEL_25:
  *(_DWORD *)a1 = v12;
  *(_BYTE *)(a1 + 4) = v6;
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

_BYTE *sub_1B0915400@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

_BYTE *sub_1B0915414@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 2;
  return result;
}

uint64_t GlyphRecorder<>.withRenderer(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t GlyphRenderer.asRecorder()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t GlyphRendererAsRecorder.init(renderer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_1B0915508(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t GlyphRendererAsRecorder.withRenderer(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

_UNKNOWN **sub_1B0915570()
{
  return &protocol witness table for NoOpRenderer;
}

_UNKNOWN **sub_1B091557C()
{
  return &protocol witness table for NeverRenderer;
}

uint64_t sub_1B0915588(uint64_t (*a1)(uint64_t))
{
  return GlyphRendererAsRecorder.withRenderer(_:)(a1);
}

ValueMetadata *type metadata accessor for NoOpRenderer()
{
  return &type metadata for NoOpRenderer;
}

ValueMetadata *type metadata accessor for NeverRenderer()
{
  return &type metadata for NeverRenderer;
}

uint64_t sub_1B09155BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B091566C + 4 * byte_1B0A380D0[(v7 - 1)]))();
}

void sub_1B09156BC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for GlyphRendererAsRecorder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GlyphRendererAsRecorder);
}

void sub_1B0915878(double a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if ((*(_BYTE *)(v6 + 32) & 1) != 0)
  {
    v7 = a1;
    v8 = a2;
  }
  else
  {
    v7 = *(double *)(v6 + 16);
    v8 = *(double *)(v6 + 24);
    v10 = *(double *)v6;
    v9 = *(double *)(v6 + 8);
    if (*(double *)v6 >= a1)
      v10 = a1;
    if (v7 < a1)
      v7 = a1;
    if (v9 >= a2)
      v9 = a2;
    if (v8 < a2)
      v8 = a2;
    a1 = v10;
    a2 = v9;
  }
  if (a1 >= a3)
    a1 = a3;
  if (v7 >= a3)
    a3 = v7;
  if (a2 >= a4)
    a2 = a4;
  if (v8 >= a4)
    a4 = v8;
  if (a1 >= a5)
    a1 = a5;
  if (a3 < a5)
    a3 = a5;
  if (a2 >= a6)
    a2 = a6;
  *(double *)v6 = a1;
  *(double *)(v6 + 8) = a2;
  if (a4 < a6)
    v11 = a6;
  else
    v11 = a4;
  *(double *)(v6 + 16) = a3;
  *(double *)(v6 + 24) = v11;
  *(_BYTE *)(v6 + 32) = 0;
}

uint64_t sub_1B0915920(uint64_t (*a1)(uint64_t))
{
  return sub_1B0915508(a1);
}

uint64_t sub_1B0915938(int a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 v20;

  sub_1B08A35B0(a2, a3);
  sub_1B08A35F4();
  result = sub_1B0A1D090();
  v9 = v8;
  if (a4)
  {
    v10 = result;
    v11 = v7;
    while (!__OFSUB__(v11, v10))
    {
      if (v11 - v10 <= 3)
      {
        swift_bridgeObjectRetain_n();
        sub_1B0A1D8A0();
LABEL_24:
        swift_bridgeObjectRelease_n();
        goto LABEL_25;
      }
      if (v10 > 0x7FFFFFFFFFFFFFFBLL || v11 < v10 + 4)
        goto LABEL_29;
      if (v10 < 0)
        goto LABEL_30;
      v12 = *(_QWORD *)(v9 + 16);
      if (v12 < v10)
        goto LABEL_31;
      v13 = v10 + 4;
      if (v12 < v10 + 4)
        goto LABEL_31;
      v14 = *(_DWORD *)(v9 + v10 + 32);
      v15 = __OFSUB__(v11, v13);
      result = swift_bridgeObjectRetain();
      if (v15)
        goto LABEL_32;
      if ((uint64_t)(v11 - v13) <= 3)
      {
        sub_1B0A1D8A0();
        goto LABEL_24;
      }
      v16 = v10 + 8;
      if (v10 + 8 <= v10 + 4 || v11 < v16)
        goto LABEL_33;
      v17 = *(_QWORD *)(v9 + 16);
      if (v17 < v13 || (uint64_t)v17 < v16)
        goto LABEL_34;
      v18 = *(_DWORD *)(v9 + v10 + 36);
      result = swift_bridgeObjectRelease();
      if (bswap32(v14) == a1)
      {
        swift_bridgeObjectRelease();
        v20 = 0;
        v19 = bswap32(v18);
        return v19 | ((unint64_t)v20 << 32);
      }
      v10 = v13 + 4;
      if (!--a4)
        goto LABEL_25;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
  }
  else
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v19 = 0;
    v20 = 1;
    return v19 | ((unint64_t)v20 << 32);
  }
  return result;
}

uint64_t sub_1B0915B24(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t result;

  result = sub_1B0915938(1936486004, a1, a2, a3);
  if ((result & 0x100000000) != 0)
    return 0;
  else
    return result;
}

uint64_t sub_1B0915B54(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = sub_1B08F9E7C(1717859171);
    if ((v3 & 1) != 0)
    {
      v4 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v2);
      v6 = *v4;
      v5 = v4[1];
      sub_1B08A35B0(*v4, v5);
      swift_bridgeObjectRelease();
      sub_1B08A35B0(v6, v5);
      sub_1B08A35F4();
      *(_QWORD *)&v14 = sub_1B0A1D090();
      *((_QWORD *)&v14 + 1) = v7;
      v15 = v8;
      *(_QWORD *)&v12 = v14;
      *((_QWORD *)&v12 + 1) = v7;
      v13 = v8;
      swift_bridgeObjectRetain_n();
      sub_1B08C15D0((uint64_t *)&v12, v9, 1);
      swift_bridgeObjectRelease();
      v14 = v12;
      v15 = v13;
      sub_1B08C1578((uint64_t *)&v14, v10, 1);
      swift_bridgeObjectRelease();
      __asm { BR              X9 }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B0915EB0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _OWORD v17[17];
  _BYTE __dst[272];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(v3 + 16)
    && (v5 = sub_1B08F9E7C(1819239265), (v6 & 1) != 0)
    && *(_QWORD *)(v3 + 16)
    && (v7 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v5),
        v8 = *v7,
        v9 = v7[1],
        v10 = sub_1B08F9E7C(1735162214),
        (v11 & 1) != 0))
  {
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v10);
    v13 = *v12;
    v14 = v12[1];
    LOWORD(v12) = *((_WORD *)v2 + 208);
    *(_QWORD *)&v17[0] = v8;
    *((_QWORD *)&v17[0] + 1) = v9;
    *(_QWORD *)&v17[1] = v13;
    *((_QWORD *)&v17[1] + 1) = v14;
    memset(&v17[2], 0, 72);
    WORD4(v17[6]) = (_WORD)v12;
    *(_QWORD *)&v17[7] = 0;
    *((_QWORD *)&v17[7] + 1) = MEMORY[0x1E0DEE9D8];
    v17[8] = 0uLL;
    LOBYTE(v17[9]) = 1;
    *((_QWORD *)&v17[9] + 1) = 0;
    *(_QWORD *)&v17[10] = 0;
    BYTE8(v17[10]) = 1;
    v17[11] = xmmword_1B0A381C0;
    v17[12] = 0u;
    v17[13] = xmmword_1B0A381D0;
    memset(&v17[14], 0, 32);
    v17[16] = xmmword_1B0A381C0;
    memcpy(__dst, v17, sizeof(__dst));
    sub_1B08A35B0(v8, v9);
    sub_1B08A35B0(v13, v14);
    sub_1B08A35B0(v8, v9);
    sub_1B08A35B0(v13, v14);
    v3 = sub_1B091B970(a1);
    sub_1B091D4DC((uint64_t *)v17);
    sub_1B08A3638(v13, v14);
    sub_1B08A3638(v8, v9);
  }
  else
  {
    sub_1B08ABB40();
    swift_allocError();
    *v15 = 2;
    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1B0916064(uint64_t a1, uint64_t (**a2)(uint64_t, double))
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  uint64_t v26[34];
  _OWORD __src[17];
  char v28;
  _OWORD v29[4];
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  int v34;
  BOOL (*v35)(_DWORD *, _DWORD *);
  uint64_t v36;
  _QWORD v37[2];
  char v38;
  BOOL (*v39)(unsigned __int16 *);
  uint64_t v40;
  char v41;
  BOOL (*v42)(_WORD *);
  uint64_t v43;
  __n128 (*v44)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v45;
  char v46;

  v3 = v2;
  v4 = *v2;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_7;
  v7 = sub_1B08F9E7C(1819239265);
  if ((v8 & 1) == 0)
    goto LABEL_7;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_7;
  v9 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = sub_1B08F9E7C(1735162214);
  if ((v13 & 1) == 0)
    goto LABEL_7;
  v14 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v12);
  v16 = *v14;
  v15 = v14[1];
  v31 = 257;
  v32 = 1;
  v33 = 1;
  v34 = 1594834165;
  v35 = sub_1B08A0EC0;
  v36 = 0;
  v37[0] = 0x101010101010101;
  *(_DWORD *)((char *)v37 + 7) = 16843009;
  v38 = 1;
  v39 = sub_1B0948F10;
  v40 = 0;
  v41 = 1;
  v42 = sub_1B0948F20;
  v43 = 0;
  v44 = sub_1B08B5A2C;
  v45 = 0;
  sub_1B08A35B0(v11, v10);
  sub_1B08A35B0(v16, v15);
  sub_1B08AE97C(1751474532, (uint64_t)__src);
  if ((BYTE10(__src[3]) & 1) != 0)
  {
    sub_1B08A3638(v16, v15);
    sub_1B08A3638(v11, v10);
LABEL_7:
    sub_1B08ABB40();
    swift_allocError();
    *v17 = 2;
    return swift_willThrow();
  }
  v19 = 0uLL;
  if ((__src[1] & 0x20) != 0)
  {
    sub_1B0969B40(0, (uint64_t)v29);
    v19 = 0uLL;
    v21 = v29[0];
    v22 = v29[1];
    v23 = v29[2];
    v24 = v29[3];
    v20 = v30;
  }
  else
  {
    v20 = 0;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
  }
  v25 = *((_WORD *)v3 + 208);
  v28 = 1;
  v46 = 1;
  *(_QWORD *)&__src[0] = v11;
  *((_QWORD *)&__src[0] + 1) = v10;
  *(_QWORD *)&__src[1] = v16;
  *((_QWORD *)&__src[1] + 1) = v15;
  __src[2] = v21;
  __src[3] = v22;
  __src[4] = v23;
  __src[5] = v24;
  *(_QWORD *)&__src[6] = v20;
  WORD4(__src[6]) = v25;
  *(_QWORD *)&__src[7] = 0;
  *((_QWORD *)&__src[7] + 1) = MEMORY[0x1E0DEE9D8];
  __src[8] = 0uLL;
  LOBYTE(__src[9]) = 1;
  *((_QWORD *)&__src[9] + 1) = 0;
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 1;
  __src[11] = xmmword_1B0A381C0;
  __src[12] = v19;
  __src[13] = xmmword_1B0A381D0;
  __src[14] = v19;
  __src[15] = v19;
  __src[16] = xmmword_1B0A381C0;
  sub_1B08A35B0(v11, v10);
  sub_1B08A35B0(v16, v15);
  sub_1B0916A74(a2, a1);
  memcpy(v26, __src, sizeof(v26));
  sub_1B091D4DC(v26);
  sub_1B08A3638(v11, v10);
  return sub_1B08A3638(v16, v15);
}

uint64_t sub_1B09162F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  uint64_t v26[34];
  _OWORD __src[17];
  char v28;
  _OWORD v29[4];
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  int v34;
  BOOL (*v35)(_DWORD *, _DWORD *);
  uint64_t v36;
  _QWORD v37[2];
  char v38;
  BOOL (*v39)(unsigned __int16 *);
  uint64_t v40;
  char v41;
  BOOL (*v42)(_WORD *);
  uint64_t v43;
  __n128 (*v44)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v45;
  char v46;

  v3 = v2;
  v4 = *v2;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_7;
  v7 = sub_1B08F9E7C(1819239265);
  if ((v8 & 1) == 0)
    goto LABEL_7;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_7;
  v9 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = sub_1B08F9E7C(1735162214);
  if ((v13 & 1) == 0)
    goto LABEL_7;
  v14 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v12);
  v16 = *v14;
  v15 = v14[1];
  v31 = 257;
  v32 = 1;
  v33 = 1;
  v34 = 1594834165;
  v35 = sub_1B08A0EC0;
  v36 = 0;
  v37[0] = 0x101010101010101;
  *(_DWORD *)((char *)v37 + 7) = 16843009;
  v38 = 1;
  v39 = sub_1B0948F10;
  v40 = 0;
  v41 = 1;
  v42 = sub_1B0948F20;
  v43 = 0;
  v44 = sub_1B08B5A2C;
  v45 = 0;
  sub_1B08A35B0(v11, v10);
  sub_1B08A35B0(v16, v15);
  sub_1B08AE97C(1751474532, (uint64_t)__src);
  if ((BYTE10(__src[3]) & 1) != 0)
  {
    sub_1B08A3638(v16, v15);
    sub_1B08A3638(v11, v10);
LABEL_7:
    sub_1B08ABB40();
    swift_allocError();
    *v17 = 2;
    return swift_willThrow();
  }
  v19 = 0uLL;
  if ((__src[1] & 0x20) != 0)
  {
    sub_1B0969B40(0, (uint64_t)v29);
    v19 = 0uLL;
    v21 = v29[0];
    v22 = v29[1];
    v23 = v29[2];
    v24 = v29[3];
    v20 = v30;
  }
  else
  {
    v20 = 0;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
  }
  v25 = *((_WORD *)v3 + 208);
  v28 = 1;
  v46 = 1;
  *(_QWORD *)&__src[0] = v11;
  *((_QWORD *)&__src[0] + 1) = v10;
  *(_QWORD *)&__src[1] = v16;
  *((_QWORD *)&__src[1] + 1) = v15;
  __src[2] = v21;
  __src[3] = v22;
  __src[4] = v23;
  __src[5] = v24;
  *(_QWORD *)&__src[6] = v20;
  WORD4(__src[6]) = v25;
  *(_QWORD *)&__src[7] = 0;
  *((_QWORD *)&__src[7] + 1) = MEMORY[0x1E0DEE9D8];
  __src[8] = 0uLL;
  LOBYTE(__src[9]) = 1;
  *((_QWORD *)&__src[9] + 1) = 0;
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 1;
  __src[11] = xmmword_1B0A381C0;
  __src[12] = v19;
  __src[13] = xmmword_1B0A381D0;
  __src[14] = v19;
  __src[15] = v19;
  __src[16] = xmmword_1B0A381C0;
  sub_1B08A35B0(v11, v10);
  sub_1B08A35B0(v16, v15);
  sub_1B0916E04(a2, a1);
  memcpy(v26, __src, sizeof(v26));
  sub_1B091D4DC(v26);
  sub_1B08A3638(v11, v10);
  return sub_1B08A3638(v16, v15);
}

uint64_t sub_1B0916584(uint64_t a1, id *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  uint64_t v26[34];
  _OWORD __src[17];
  char v28;
  _OWORD v29[4];
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  int v34;
  BOOL (*v35)(_DWORD *, _DWORD *);
  uint64_t v36;
  _QWORD v37[2];
  char v38;
  BOOL (*v39)(unsigned __int16 *);
  uint64_t v40;
  char v41;
  BOOL (*v42)(_WORD *);
  uint64_t v43;
  __n128 (*v44)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v45;
  char v46;

  v3 = v2;
  v4 = *v2;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_7;
  v7 = sub_1B08F9E7C(1819239265);
  if ((v8 & 1) == 0)
    goto LABEL_7;
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_7;
  v9 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = sub_1B08F9E7C(1735162214);
  if ((v13 & 1) == 0)
    goto LABEL_7;
  v14 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v12);
  v16 = *v14;
  v15 = v14[1];
  v31 = 257;
  v32 = 1;
  v33 = 1;
  v34 = 1594834165;
  v35 = sub_1B08A0EC0;
  v36 = 0;
  v37[0] = 0x101010101010101;
  *(_DWORD *)((char *)v37 + 7) = 16843009;
  v38 = 1;
  v39 = sub_1B0948F10;
  v40 = 0;
  v41 = 1;
  v42 = sub_1B0948F20;
  v43 = 0;
  v44 = sub_1B08B5A2C;
  v45 = 0;
  sub_1B08A35B0(v11, v10);
  sub_1B08A35B0(v16, v15);
  sub_1B08AE97C(1751474532, (uint64_t)__src);
  if ((BYTE10(__src[3]) & 1) != 0)
  {
    sub_1B08A3638(v16, v15);
    sub_1B08A3638(v11, v10);
LABEL_7:
    sub_1B08ABB40();
    swift_allocError();
    *v17 = 2;
    return swift_willThrow();
  }
  v19 = 0uLL;
  if ((__src[1] & 0x20) != 0)
  {
    sub_1B0969B40(0, (uint64_t)v29);
    v19 = 0uLL;
    v21 = v29[0];
    v22 = v29[1];
    v23 = v29[2];
    v24 = v29[3];
    v20 = v30;
  }
  else
  {
    v20 = 0;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
  }
  v25 = *((_WORD *)v3 + 208);
  v28 = 1;
  v46 = 1;
  *(_QWORD *)&__src[0] = v11;
  *((_QWORD *)&__src[0] + 1) = v10;
  *(_QWORD *)&__src[1] = v16;
  *((_QWORD *)&__src[1] + 1) = v15;
  __src[2] = v21;
  __src[3] = v22;
  __src[4] = v23;
  __src[5] = v24;
  *(_QWORD *)&__src[6] = v20;
  WORD4(__src[6]) = v25;
  *(_QWORD *)&__src[7] = 0;
  *((_QWORD *)&__src[7] + 1) = MEMORY[0x1E0DEE9D8];
  __src[8] = 0uLL;
  LOBYTE(__src[9]) = 1;
  *((_QWORD *)&__src[9] + 1) = 0;
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 1;
  __src[11] = xmmword_1B0A381C0;
  __src[12] = v19;
  __src[13] = xmmword_1B0A381D0;
  __src[14] = v19;
  __src[15] = v19;
  __src[16] = xmmword_1B0A381C0;
  sub_1B08A35B0(v11, v10);
  sub_1B08A35B0(v16, v15);
  sub_1B09171CC(a2, a1);
  memcpy(v26, __src, sizeof(v26));
  sub_1B091D4DC(v26);
  sub_1B08A3638(v11, v10);
  return sub_1B08A3638(v16, v15);
}

void __swiftcall SfntTrueTypeFont.getBoundingBox(glyphID:)(__C::CGRect_optional *__return_ptr retstr, Swift::Int glyphID)
{
  float64_t v4;
  float64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  Swift::Bool v10;
  double v11;
  double v12;
  __C::CGSize v13;
  signed __int16 v14;
  int v15;
  int v16;
  int32x2_t v17;
  int64x2_t v18;
  void *v19;
  _BYTE *v20;
  id v21;
  __int16 v22;
  float64x2_t v23;
  float64x2_t v24;
  char v25;

  sub_1B0915EB0(glyphID);
  sub_1B08A35F4();
  *(_QWORD *)&v23.f64[0] = sub_1B0A1D090();
  v23.f64[1] = v4;
  v24.f64[0] = v5;
  swift_bridgeObjectRetain_n();
  sub_1B08C42C0((unsigned __int16 *)&v22, &v23, v6, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
  v8 = v7;
  v9 = v22;
  v14 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v23, v7, 1);
  swift_bridgeObjectRelease();
  if (v9 < (int)v8 >> 16 || v14 < (int)(v8 >> 16) >> 16)
  {
    sub_1B08ABB40();
    v19 = (void *)swift_allocError();
    *v20 = 6;
    swift_willThrow();
    v21 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B08CD6AC(v19);
    swift_bridgeObjectRelease();

    v23 = 0u;
    v24 = 0u;
    v25 = 1;
    sub_1B09162F4(glyphID, (uint64_t)&v23);
    if ((v25 & 1) != 0)
    {
      v10 = 1;
      v11 = 0.0;
      v12 = 0.0;
      v13 = (__C::CGSize)0;
    }
    else
    {
      v10 = 0;
      v11 = v23.f64[0];
      v13 = (__C::CGSize)vsubq_f64(v24, v23);
      v12 = v23.f64[1];
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v9 - SWORD1(v8);
  if ((__int16)(v9 - WORD1(v8)) == v15)
  {
    v16 = v14 - SWORD2(v8);
    if ((__int16)(v14 - WORD2(v8)) == v16)
    {
      v10 = 0;
      v11 = (double)SWORD1(v8);
      v12 = (double)SWORD2(v8);
      v17 = vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v16, v15), 0x10uLL), 0x10uLL);
      v18.i64[0] = v17.i32[0];
      v18.i64[1] = v17.i32[1];
      v13 = (__C::CGSize)vcvtq_f64_s64(v18);
LABEL_4:
      retstr->value.origin.x = v11;
      retstr->value.origin.y = v12;
      retstr->value.size = v13;
      retstr->is_nil = v10;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t *sub_1B0916A74(uint64_t (**a1)(uint64_t, double), uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  signed __int16 v20;
  int v21;
  int v22;
  float64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  void *v29;
  _BYTE *v30;
  _QWORD *v31;
  id v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t __dst[36];
  __int16 v47;

  v4 = v2;
  memcpy(__dst, v2, 0x110uLL);
  sub_1B091D540(__dst);
  v7 = sub_1B091B970(a2);
  if (v3)
    return sub_1B091D4DC(__dst);
  v40 = v7;
  v41 = v8;
  sub_1B08A35F4();
  v10 = sub_1B0A1D090();
  v12 = v11;
  v14 = v13;
  sub_1B091D4DC(__dst);
  v43 = v10;
  v44 = v12;
  v45 = v14;
  if (v10 == v12)
    return (uint64_t *)swift_bridgeObjectRelease();
  v40 = v10;
  v41 = v12;
  v42 = v14;
  swift_bridgeObjectRetain_n();
  v16 = sub_1B08C42C0((unsigned __int16 *)&v47, &v40, v15, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
  v18 = v17;
  v19 = v47;
  v20 = (unsigned __int16)sub_1B08C16FC(&v40, v17, 1);
  swift_bridgeObjectRelease();
  v38 = v40;
  v39 = v42;
  if (v19 < (int)v18 >> 16 || v20 < (int)(v18 >> 16) >> 16)
  {
    sub_1B08ABB40();
    v29 = (void *)swift_allocError();
    *v30 = 6;
    swift_willThrow();
    sub_1B08A36F0();
    swift_allocError();
    *v31 = v29;
    v31[1] = v38;
    v31[2] = 0x7272652072657355;
    v31[3] = 0xEA0000000000726FLL;
    v31[4] = v29;
    v32 = v29;
    swift_willThrow();
    swift_bridgeObjectRelease();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  v37 = v41;
  result = (uint64_t *)swift_bridgeObjectRelease();
  v43 = v38;
  v44 = v37;
  v45 = v39;
  v21 = (__int16)(v19 - WORD1(v18));
  if (v21 != v19 - SWORD1(v18))
  {
    __break(1u);
    goto LABEL_26;
  }
  v22 = (__int16)(v20 - WORD2(v18));
  if (v22 != v20 - SWORD2(v18))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v23 = sub_1B0917A20((double)SWORD1(v18), (double)SWORD2(v18), (double)v21, (double)v22);
  result = (uint64_t *)(*a1)(a2, v23);
  if ((v18 & 1) == 0 || !v16)
    return (uint64_t *)swift_bridgeObjectRelease();
  if (v16 != 1)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v33 = 13;
    swift_willThrow();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  v24 = __dst[14] + 1;
  if (__OFADD__(__dst[14], 1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v4[14] = v24;
  if (v24 >= 16)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v34 = 4;
    result = (uint64_t *)swift_willThrow();
    v35 = v4[14];
    v26 = __OFSUB__(v35, 1);
    v36 = v35 - 1;
    if (!v26)
    {
      v4[14] = v36;
      return (uint64_t *)swift_bridgeObjectRelease();
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (uint64_t *)sub_1B0917CA8((uint64_t)a1, &v43);
  v25 = v4[14];
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  v28 = v26;
  if ((v28 & 1) == 0)
  {
    v4[14] = v27;
    return (uint64_t *)swift_bridgeObjectRelease();
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1B0916E04(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  signed __int16 v19;
  int v20;
  int v21;
  void *v22;
  _BYTE *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t __dst[36];

  v4 = (uint64_t)v2;
  memcpy(__dst, v2, 0x110uLL);
  sub_1B091D540(__dst);
  v7 = sub_1B091B970(a2);
  if (v3)
  {
    sub_1B091D4DC(__dst);
    return;
  }
  v39 = v7;
  v40 = v8;
  sub_1B08A35F4();
  v9 = sub_1B0A1D090();
  v11 = v10;
  v13 = v12;
  sub_1B091D4DC(__dst);
  v42 = v9;
  v43 = v11;
  v44 = v13;
  if (v9 == v11)
    goto LABEL_5;
  v39 = v9;
  v40 = v11;
  v41 = v13;
  swift_bridgeObjectRetain_n();
  v15 = sub_1B08C42C0((unsigned __int16 *)&v38, &v39, v14, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
  v17 = v16;
  v18 = v38;
  v19 = (unsigned __int16)sub_1B08C16FC(&v39, v16, 1);
  swift_bridgeObjectRelease();
  v36 = v39;
  v37 = v41;
  if (v18 < (int)v17 >> 16 || v19 < (int)(v17 >> 16) >> 16)
  {
    sub_1B08ABB40();
    v22 = (void *)swift_allocError();
    *v23 = 6;
    swift_willThrow();
    sub_1B08A36F0();
    swift_allocError();
    *v24 = v22;
    v24[1] = v36;
    v24[2] = 0x7272652072657355;
    v24[3] = 0xEA0000000000726FLL;
    v24[4] = v22;
    v25 = v22;
    swift_willThrow();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v35 = v40;
  swift_bridgeObjectRelease();
  v42 = v36;
  v43 = v35;
  v44 = v37;
  v20 = (__int16)(v18 - WORD1(v17));
  if (v20 != v18 - SWORD1(v17))
  {
    __break(1u);
    goto LABEL_27;
  }
  v21 = (__int16)(v19 - WORD2(v17));
  if (v21 != v19 - SWORD2(v17))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  sub_1B0917A20((double)SWORD1(v17), (double)SWORD2(v17), (double)v20, (double)v21);
  if ((v17 & 1) == 0)
  {
    sub_1B091D540(__dst);
    sub_1B091E720(a2, (unint64_t *)&v42, v15, (uint64_t)__dst, a1, v4, (double)SWORD1(v17));
    sub_1B091D4DC(__dst);
LABEL_5:
    swift_bridgeObjectRelease();
    return;
  }
  if (!v15)
    goto LABEL_5;
  if (v15 != 1)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v31 = 13;
    swift_willThrow();
    goto LABEL_5;
  }
  v26 = __dst[14] + 1;
  if (__OFADD__(__dst[14], 1))
    goto LABEL_28;
  *(_QWORD *)(v4 + 112) = v26;
  if (v26 >= 16)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v32 = 4;
    swift_willThrow();
    v33 = *(_QWORD *)(v4 + 112);
    v28 = __OFSUB__(v33, 1);
    v34 = v33 - 1;
    if (!v28)
    {
      *(_QWORD *)(v4 + 112) = v34;
      goto LABEL_5;
    }
    goto LABEL_29;
  }
  sub_1B0918794(a1, &v42);
  v27 = *(_QWORD *)(v4 + 112);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  v30 = v28;
  if ((v30 & 1) == 0)
  {
    *(_QWORD *)(v4 + 112) = v29;
    goto LABEL_5;
  }
LABEL_30:
  __break(1u);
}

void sub_1B09171CC(id *a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  signed __int16 v19;
  int v20;
  int v21;
  void *v22;
  _BYTE *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t __dst[36];

  v4 = (uint64_t)v2;
  memcpy(__dst, v2, 0x110uLL);
  sub_1B091D540(__dst);
  v7 = sub_1B091B970(a2);
  if (v3)
  {
    sub_1B091D4DC(__dst);
    return;
  }
  v39 = v7;
  v40 = v8;
  sub_1B08A35F4();
  v9 = sub_1B0A1D090();
  v11 = v10;
  v13 = v12;
  sub_1B091D4DC(__dst);
  v42 = v9;
  v43 = v11;
  v44 = v13;
  if (v9 == v11)
    goto LABEL_5;
  v39 = v9;
  v40 = v11;
  v41 = v13;
  swift_bridgeObjectRetain_n();
  v15 = sub_1B08C42C0((unsigned __int16 *)&v38, &v39, v14, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
  v17 = v16;
  v18 = v38;
  v19 = (unsigned __int16)sub_1B08C16FC(&v39, v16, 1);
  swift_bridgeObjectRelease();
  v36 = v39;
  v37 = v41;
  if (v18 < (int)v17 >> 16 || v19 < (int)(v17 >> 16) >> 16)
  {
    sub_1B08ABB40();
    v22 = (void *)swift_allocError();
    *v23 = 6;
    swift_willThrow();
    sub_1B08A36F0();
    swift_allocError();
    *v24 = v22;
    v24[1] = v36;
    v24[2] = 0x7272652072657355;
    v24[3] = 0xEA0000000000726FLL;
    v24[4] = v22;
    v25 = v22;
    swift_willThrow();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v35 = v40;
  swift_bridgeObjectRelease();
  v42 = v36;
  v43 = v35;
  v44 = v37;
  v20 = (__int16)(v18 - WORD1(v17));
  if (v20 != v18 - SWORD1(v17))
  {
    __break(1u);
    goto LABEL_27;
  }
  v21 = (__int16)(v19 - WORD2(v17));
  if (v21 != v19 - SWORD2(v17))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  sub_1B0917A20((double)SWORD1(v17), (double)SWORD2(v17), (double)v20, (double)v21);
  if ((v17 & 1) == 0)
  {
    sub_1B091D540(__dst);
    sub_1B091F3A4(a2, (unint64_t *)&v42, v15, (uint64_t)__dst, a1, v4, (double)SWORD1(v17));
    sub_1B091D4DC(__dst);
LABEL_5:
    swift_bridgeObjectRelease();
    return;
  }
  if (!v15)
    goto LABEL_5;
  if (v15 != 1)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v31 = 13;
    swift_willThrow();
    goto LABEL_5;
  }
  v26 = __dst[14] + 1;
  if (__OFADD__(__dst[14], 1))
    goto LABEL_28;
  *(_QWORD *)(v4 + 112) = v26;
  if (v26 >= 16)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v32 = 4;
    swift_willThrow();
    v33 = *(_QWORD *)(v4 + 112);
    v28 = __OFSUB__(v33, 1);
    v34 = v33 - 1;
    if (!v28)
    {
      *(_QWORD *)(v4 + 112) = v34;
      goto LABEL_5;
    }
    goto LABEL_29;
  }
  sub_1B0919280((uint64_t)a1, &v42);
  v27 = *(_QWORD *)(v4 + 112);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  v30 = v28;
  if ((v30 & 1) == 0)
  {
    *(_QWORD *)(v4 + 112) = v29;
    goto LABEL_5;
  }
LABEL_30:
  __break(1u);
}

uint64_t *sub_1B0917594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  float64_t v26;
  double v27;
  void *v28;
  _BYTE *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[36];
  unsigned int v52;
  __int16 v53;

  v6 = v4;
  memcpy(v51, v4, 0x110uLL);
  sub_1B091D540(v51);
  v11 = sub_1B091B970(a2);
  if (v5)
    return sub_1B091D4DC(v51);
  v44 = a3;
  v45 = v11;
  v46 = v12;
  sub_1B08A35F4();
  v14 = sub_1B0A1D090();
  v16 = v15;
  v18 = v17;
  sub_1B091D4DC(v51);
  v48 = v14;
  v49 = v16;
  v50 = v18;
  if (v14 == v16)
    return (uint64_t *)swift_bridgeObjectRelease();
  v45 = v14;
  v46 = v16;
  v47 = v18;
  swift_bridgeObjectRetain_n();
  v20 = sub_1B08C42C0((unsigned __int16 *)&v53, &v45, v19, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
  v22 = v21;
  v43 = v20;
  v23 = v53;
  v52 = sub_1B08C16FC(&v45, v21, 1);
  swift_bridgeObjectRelease();
  v41 = v45;
  v42 = v47;
  if (v23 < (int)v22 >> 16 || (v52 = (__int16)v52, (__int16)v52 < (int)(v22 >> 16) >> 16))
  {
    sub_1B08ABB40();
    v28 = (void *)swift_allocError();
    *v29 = 6;
    swift_willThrow();
    sub_1B08A36F0();
    swift_allocError();
    *v30 = v28;
    v30[1] = v41;
    v30[2] = 0x7272652072657355;
    v30[3] = 0xEA0000000000726FLL;
    v30[4] = v28;
    v31 = v28;
    swift_willThrow();
    swift_bridgeObjectRelease();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  v40 = v46;
  result = (uint64_t *)swift_bridgeObjectRelease();
  v48 = v41;
  v49 = v40;
  v50 = v42;
  v24 = (__int16)(v23 - WORD1(v22));
  if (v24 != v23 - SWORD1(v22))
  {
    __break(1u);
    goto LABEL_26;
  }
  v25 = (__int16)(v52 - WORD2(v22));
  if (v25 != v52 - SWORD2(v22))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v26 = sub_1B0917A20((double)SWORD1(v22), (double)SWORD2(v22), (double)v24, (double)v25);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float64_t))(a4 + 24))(a2, v44, a4, v26);
  if ((v22 & 1) == 0)
  {
    v27 = MEMORY[0x1E0C80A78](result);
    (*(void (**)(uint64_t *(*)(uint64_t *), double))(a4 + 40))(sub_1B091FE60, v27);
LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(a4 + 32))(v44, a4);
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  if (!v43)
    goto LABEL_21;
  if (v43 != 1)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v33 = 13;
    swift_willThrow();
    goto LABEL_21;
  }
  v32 = v51[14] + 1;
  if (__OFADD__(v51[14], 1))
    goto LABEL_27;
  v6[14] = v32;
  if (v32 > 15)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v34 = 4;
    result = (uint64_t *)swift_willThrow();
    v35 = v6[14];
    v36 = __OFSUB__(v35, 1);
    v37 = v35 - 1;
    if (!v36)
    {
      v6[14] = v37;
      goto LABEL_21;
    }
    goto LABEL_28;
  }
  result = (uint64_t *)sub_1B0919D6C(a1, &v48, v44, a4);
  v38 = v6[14];
  v36 = __OFSUB__(v38, 1);
  v39 = v38 - 1;
  if (!v36)
  {
    v6[14] = v39;
    goto LABEL_21;
  }
LABEL_29:
  __break(1u);
  return result;
}

float64_t sub_1B0917A20(double a1, double a2, double a3, double a4)
{
  float64x2_t *v4;
  double v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  v5 = a1 + a3;
  v6 = v4[11];
  v7 = v4[13];
  v8 = v4[15];
  v9 = vaddq_f64(v8, vmlaq_n_f64(vmulq_n_f64(v6, a1), v7, a2));
  v10 = vaddq_f64(v8, vmlaq_n_f64(vmulq_n_f64(v6, v5), v7, a2 + a4));
  if ((vmovn_s64(vcltzq_s64(vcgtq_f64(v9, v10))).u8[0] & 1) != 0)
    v9.f64[0] = v10.f64[0];
  return v9.f64[0];
}

uint64_t *sub_1B0917A9C(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, unint64_t *a7, uint64_t a8)
{
  double v8;
  uint64_t v9;

  if ((__int16)(HIWORD(a5) - WORD1(a5)) == (a5 >> 48) - SWORD1(a5))
  {
    if ((__int16)(a6 - WORD2(a5)) == a6 - SWORD2(a5))
    {
      v8 = (double)SWORD1(a5);
      v9 = (uint64_t)result;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      return sub_1B0917BC8(v8, v9, a3, a7, a8);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1B0917BC8(double a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  const void *v5;
  uint64_t __dst[34];

  memcpy(__dst, v5, sizeof(__dst));
  sub_1B091D540(__dst);
  sub_1B091AE14(a3, a4, a5, (uint64_t (*)(double, double, _QWORD))sub_1B091FE20, a1);
  return sub_1B091D4DC(__dst);
}

uint64_t sub_1B0917CA8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  int v38;
  signed __int16 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  unint64_t v50;
  unint64_t v51;
  float64x2_t v52;
  char *v53;
  void *v54;
  _BYTE *v55;
  _QWORD *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float64x2_t v69;
  uint64_t v70;
  int64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float64x2_t v78;
  char v79;
  float64x2_t v80;
  _BYTE *v81;
  _BYTE *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  __int128 v95;
  float64x2_t v96;
  __int128 v97;
  float64x2_t v98;
  __int128 v99;
  float64x2_t v100;
  __int16 v101;
  float64x2_t v102;
  char v103;
  float64x2_t v104;
  float64x2_t v105;
  char *v106;
  float64x2_t v107;
  uint64_t v108;
  float64x2_t v109;
  __int16 v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  unsigned __int16 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD v135[6];
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  char v141;
  __int128 v142;
  char v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  _OWORD v150[9];
  uint64_t v151;
  uint64_t v152;

  v4 = v3;
  v5 = v2;
  v6 = a2;
  v134 = *(_QWORD *)(v2 + 120);
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 120) = MEMORY[0x1E0DEE9D8];
  v8 = v7;
  while (1)
  {
    v9 = v6[1];
    v10 = v6[2];
    *(_QWORD *)&v132 = *v6;
    *((_QWORD *)&v132 + 1) = v9;
    v133 = v10;
    *(_QWORD *)&v121 = v132;
    *((_QWORD *)&v121 + 1) = v9;
    *(_QWORD *)&v122 = v10;
    swift_bridgeObjectRetain_n();
    v12 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v121, v11, 1);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_25:
      swift_bridgeObjectRelease();
LABEL_26:
      swift_bridgeObjectRelease();
      result = sub_1B08A4384(*(_QWORD *)(v5 + 120));
      *(_QWORD *)(v5 + 120) = v134;
      return result;
    }
    v13 = v12;
    v106 = v8;
    swift_bridgeObjectRelease();
    v132 = v121;
    v133 = v122;
    v131 = v13;
    sub_1B091BD28(&v131, (uint64_t)&v121);
    v150[6] = v127;
    v150[7] = v128;
    v150[8] = v129;
    v150[2] = v123;
    v150[3] = v124;
    v151 = v130;
    v150[4] = v125;
    v150[5] = v126;
    v150[0] = v121;
    v150[1] = v122;
    sub_1B08C44B8(v120, (uint64_t)&v132, v14, (uint64_t)&v116);
    v101 = (__int16)v116;
    v15 = v117;
    v103 = v118;
    v99 = v119;
    sub_1B08CE1B4((uint64_t)v150);
    swift_bridgeObjectRelease_n();
    v95 = v120[1];
    v97 = v120[0];
    v16 = v133;
    *(_OWORD *)v6 = v132;
    v6[2] = v16;
    v17 = *(_QWORD *)(v5 + 96);
    v18 = *(_WORD *)(v5 + 104);
    v19 = *(_QWORD *)(v5 + 112);
    v20 = *(_BYTE *)(v5 + 168);
    v21 = *(float64x2_t *)(v5 + 176);
    v22 = *(float64x2_t *)(v5 + 192);
    v23 = *(float64x2_t *)(v5 + 208);
    v24 = *(float64x2_t *)(v5 + 224);
    v25 = *(float64x2_t *)(v5 + 240);
    v26 = *(float64x2_t *)(v5 + 256);
    v115 = *(_BYTE *)(v5 + 144);
    v114 = v20;
    v27 = *(_OWORD *)(v5 + 16);
    v135[0] = *(_OWORD *)v5;
    v135[1] = v27;
    v28 = *(_OWORD *)(v5 + 48);
    v135[2] = *(_OWORD *)(v5 + 32);
    v135[3] = v28;
    v29 = *(_OWORD *)(v5 + 80);
    v135[4] = *(_OWORD *)(v5 + 64);
    v135[5] = v29;
    v136 = v17;
    v137 = v18;
    v138 = v19;
    v139 = MEMORY[0x1E0DEE9D8];
    v140 = *(_OWORD *)(v5 + 128);
    v141 = v115;
    v142 = *(_OWORD *)(v5 + 152);
    v143 = v20;
    v91 = v24;
    v92 = v22;
    v144 = v21;
    v145 = v22;
    v105 = v21;
    v146 = v23;
    v147 = v24;
    v93 = v25;
    v94 = v23;
    v90 = v26;
    v148 = v25;
    v149 = v26;
    v108 = v15;
    v111 = (void *)sub_1B091B970(v15);
    v112 = v30;
    sub_1B08A35F4();
    v116 = (id)sub_1B0A1D090();
    v117 = v31;
    v118 = v32;
    v111 = v116;
    v112 = v31;
    v113 = v32;
    swift_bridgeObjectRetain_n();
    v34 = sub_1B08C42C0((unsigned __int16 *)&v110, &v111, v33, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
    v36 = v35;
    v37 = v7;
    v38 = v110;
    v4 = 0;
    v39 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v111, v35, 1);
    swift_bridgeObjectRelease();
    v40 = v111;
    v41 = v113;
    if (v38 < (int)v36 >> 16 || v39 < (int)(v36 >> 16) >> 16)
    {
      sub_1B08ABB40();
      v54 = (void *)swift_allocError();
      *v55 = 6;
      swift_willThrow();
      sub_1B08A36F0();
      swift_allocError();
      *v56 = v54;
      v56[1] = v40;
      v56[2] = 0x7272652072657355;
      v56[3] = 0xEA0000000000726FLL;
      v56[4] = v54;
      v57 = v54;
      swift_willThrow();
      swift_bridgeObjectRelease();
      v5 = v152;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    v42 = v112;
    swift_bridgeObjectRelease();
    v116 = v40;
    v117 = v42;
    v118 = v41;
    v7 = v37;
    if ((v36 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v5 = v152;
      v43 = v103;
      if ((v103 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_1B08ABB40();
        swift_allocError();
        *v81 = 8;
        swift_willThrow();
        goto LABEL_26;
      }
      v8 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = (char *)sub_1B08B6FAC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v48 = *((_QWORD *)v7 + 2);
      v47 = *((_QWORD *)v7 + 3);
      if (v48 >= v47 >> 1)
        v7 = (char *)sub_1B08B6FAC((_QWORD *)(v47 > 1), v48 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v48 + 1;
      *(_QWORD *)&v7[8 * v48 + 32] = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v111 = (void *)MEMORY[0x1E0DEE9D8];
      sub_1B091DA2C(v108, (unint64_t *)&v116, v34, (uint64_t)v135, (uint64_t *)&v111, (double)SWORD1(v36));
      v5 = v152;
      v43 = v103;
      swift_bridgeObjectRelease();
      v44 = (uint64_t)v111;
      swift_bridgeObjectRetain();
      v8 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = (char *)sub_1B08B6FAC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v46 = *((_QWORD *)v7 + 2);
      v45 = *((_QWORD *)v7 + 3);
      if (v46 >= v45 >> 1)
        v7 = (char *)sub_1B08B6FAC((_QWORD *)(v45 > 1), v46 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v46 + 1;
      *(_QWORD *)&v7[8 * v46 + 32] = v44;
      swift_bridgeObjectRelease();
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B08B6E9C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v8 = (char *)result;
    }
    v51 = *((_QWORD *)v8 + 2);
    v50 = *((_QWORD *)v8 + 3);
    v52 = v105;
    if (v51 >= v50 >> 1)
    {
      result = (uint64_t)sub_1B08B6E9C((char *)(v50 > 1), v51 + 1, 1, v8);
      v52 = v105;
      v8 = (char *)result;
    }
    *((_QWORD *)v8 + 2) = v51 + 1;
    v53 = &v8[80 * v51];
    *((_WORD *)v53 + 16) = v101;
    *((_QWORD *)v53 + 5) = v108;
    v53[48] = v43;
    *(_OWORD *)(v53 + 56) = v99;
    *((_OWORD *)v53 + 5) = v97;
    *((_OWORD *)v53 + 6) = v95;
    if ((v101 & 0x20) == 0)
      break;
    v6 = a2;
  }
  v58 = *((_QWORD *)v8 + 2);
  if (!v58)
    goto LABEL_25;
  v59 = 0;
  v60 = 0;
  v61 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v52.f64[0], 0);
  v107 = (float64x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
  v69 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1);
  v62 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v92.f64[0], 0);
  v63 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v94.f64[0], 0);
  v98 = (float64x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL);
  v64 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v94, 1);
  v65 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v91.f64[0], 0);
  v66 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v93.f64[0], 0);
  v67 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v93, 1);
  v68 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v90.f64[0], 0);
  v61.i64[1] = vextq_s8(v61, v61, 8uLL).u64[0];
  v109 = (float64x2_t)v61;
  *(_QWORD *)&v69.f64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
  v62.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
  v102 = (float64x2_t)v62;
  v104 = v69;
  v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
  v100 = (float64x2_t)v63;
  v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
  v96 = (float64x2_t)v64;
  v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
  v89 = (float64x2_t)v65;
  v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
  v85 = (float64x2_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL);
  v86 = (float64x2_t)v66;
  v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
  v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
  v83 = (float64x2_t)v68;
  v84 = (float64x2_t)v67;
  while (v60 < *((_QWORD *)v7 + 2))
  {
    v70 = *(_QWORD *)&v8[v59 + 40];
    v71 = *(int64x2_t *)&v8[v59 + 56];
    v73 = *(float64x2_t *)&v8[v59 + 80];
    v72 = *(float64x2_t *)&v8[v59 + 96];
    if (v8[v59 + 48])
    {
      v74 = vcvtq_f64_s64(v71);
    }
    else
    {
      if (v71.i64[0] < 0
        || (v75 = *(_QWORD *)(v5 + 120), v71.i64[0] >= *(_QWORD *)(v75 + 16))
        || v71.i64[1] < 0
        || (v76 = *(_QWORD *)&v7[8 * v60 + 32], v71.i64[1] >= *(_QWORD *)(v76 + 16)))
      {
        swift_bridgeObjectRelease();
        sub_1B08ABB40();
        swift_allocError();
        *v82 = 9;
        swift_willThrow();
        goto LABEL_26;
      }
      v74 = vsubq_f64(*(float64x2_t *)(v75 + 16 * v71.i64[0] + 32), *(float64x2_t *)(v76 + 16 * v71.i64[1] + 32));
    }
    v77 = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    v78 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
    if ((*(_WORD *)&v8[v59 + 32] & 0x1800) == 0x800)
      v79 = v8[v59 + 48];
    else
      v79 = 0;
    if ((v79 & 1) != 0)
    {
      v80.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v73, v73)));
      v80.f64[1] = fabs(vaddvq_f64(vmulq_f64(v73, v78))) / v80.f64[0];
      v74 = vmulq_f64(v80, v74);
    }
    *(_QWORD *)&v73.f64[1] = v77;
    v69.f64[0] = 0.0;
    v72.f64[1] = v78.f64[0];
    *(float64x2_t *)(v5 + 176) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v109), v104, v72), v102, v74);
    *(float64x2_t *)(v5 + 192) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v52), v107, v69), v92, (float64x2_t)xmmword_1B0A381C0);
    *(float64x2_t *)(v5 + 208) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v100), v96, v72), v89, v74);
    *(float64x2_t *)(v5 + 224) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v94), v98, v69), v91, (float64x2_t)xmmword_1B0A381C0);
    *(float64x2_t *)(v5 + 240) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v86), v84, v72), v83, v74);
    *(float64x2_t *)(v5 + 256) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v93), v85, v69), v90, (float64x2_t)xmmword_1B0A381C0);
    result = sub_1B0916A74(a1, v70);
    ++v60;
    v52 = v105;
    *(float64x2_t *)(v5 + 176) = v105;
    *(float64x2_t *)(v5 + 192) = v92;
    *(float64x2_t *)(v5 + 208) = v94;
    *(float64x2_t *)(v5 + 224) = v91;
    v59 += 80;
    *(float64x2_t *)(v5 + 240) = v93;
    *(float64x2_t *)(v5 + 256) = v90;
    if (v58 == v60)
      goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B0918794(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  int v38;
  signed __int16 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  unint64_t v50;
  unint64_t v51;
  float64x2_t v52;
  char *v53;
  void *v54;
  _BYTE *v55;
  _QWORD *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float64x2_t v69;
  uint64_t v70;
  int64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float64x2_t v78;
  char v79;
  float64x2_t v80;
  _BYTE *v81;
  _BYTE *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  __int128 v95;
  float64x2_t v96;
  __int128 v97;
  float64x2_t v98;
  __int128 v99;
  float64x2_t v100;
  __int16 v101;
  float64x2_t v102;
  char v103;
  float64x2_t v104;
  float64x2_t v105;
  char *v106;
  float64x2_t v107;
  uint64_t v108;
  float64x2_t v109;
  __int16 v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  unsigned __int16 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD v135[6];
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  char v141;
  __int128 v142;
  char v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  _OWORD v150[9];
  uint64_t v151;
  uint64_t v152;

  v4 = v3;
  v5 = v2;
  v6 = a2;
  v134 = *(_QWORD *)(v2 + 120);
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 120) = MEMORY[0x1E0DEE9D8];
  v8 = v7;
  while (1)
  {
    v9 = v6[1];
    v10 = v6[2];
    *(_QWORD *)&v132 = *v6;
    *((_QWORD *)&v132 + 1) = v9;
    v133 = v10;
    *(_QWORD *)&v121 = v132;
    *((_QWORD *)&v121 + 1) = v9;
    *(_QWORD *)&v122 = v10;
    swift_bridgeObjectRetain_n();
    v12 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v121, v11, 1);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_25:
      swift_bridgeObjectRelease();
LABEL_26:
      swift_bridgeObjectRelease();
      result = sub_1B08A4384(*(_QWORD *)(v5 + 120));
      *(_QWORD *)(v5 + 120) = v134;
      return result;
    }
    v13 = v12;
    v106 = v8;
    swift_bridgeObjectRelease();
    v132 = v121;
    v133 = v122;
    v131 = v13;
    sub_1B091BD28(&v131, (uint64_t)&v121);
    v150[6] = v127;
    v150[7] = v128;
    v150[8] = v129;
    v150[2] = v123;
    v150[3] = v124;
    v151 = v130;
    v150[4] = v125;
    v150[5] = v126;
    v150[0] = v121;
    v150[1] = v122;
    sub_1B08C44B8(v120, (uint64_t)&v132, v14, (uint64_t)&v116);
    v101 = (__int16)v116;
    v15 = v117;
    v103 = v118;
    v99 = v119;
    sub_1B08CE1B4((uint64_t)v150);
    swift_bridgeObjectRelease_n();
    v95 = v120[1];
    v97 = v120[0];
    v16 = v133;
    *(_OWORD *)v6 = v132;
    v6[2] = v16;
    v17 = *(_QWORD *)(v5 + 96);
    v18 = *(_WORD *)(v5 + 104);
    v19 = *(_QWORD *)(v5 + 112);
    v20 = *(_BYTE *)(v5 + 168);
    v21 = *(float64x2_t *)(v5 + 176);
    v22 = *(float64x2_t *)(v5 + 192);
    v23 = *(float64x2_t *)(v5 + 208);
    v24 = *(float64x2_t *)(v5 + 224);
    v25 = *(float64x2_t *)(v5 + 240);
    v26 = *(float64x2_t *)(v5 + 256);
    v115 = *(_BYTE *)(v5 + 144);
    v114 = v20;
    v27 = *(_OWORD *)(v5 + 16);
    v135[0] = *(_OWORD *)v5;
    v135[1] = v27;
    v28 = *(_OWORD *)(v5 + 48);
    v135[2] = *(_OWORD *)(v5 + 32);
    v135[3] = v28;
    v29 = *(_OWORD *)(v5 + 80);
    v135[4] = *(_OWORD *)(v5 + 64);
    v135[5] = v29;
    v136 = v17;
    v137 = v18;
    v138 = v19;
    v139 = MEMORY[0x1E0DEE9D8];
    v140 = *(_OWORD *)(v5 + 128);
    v141 = v115;
    v142 = *(_OWORD *)(v5 + 152);
    v143 = v20;
    v91 = v24;
    v92 = v22;
    v144 = v21;
    v145 = v22;
    v105 = v21;
    v146 = v23;
    v147 = v24;
    v93 = v25;
    v94 = v23;
    v90 = v26;
    v148 = v25;
    v149 = v26;
    v108 = v15;
    v111 = (void *)sub_1B091B970(v15);
    v112 = v30;
    sub_1B08A35F4();
    v116 = (id)sub_1B0A1D090();
    v117 = v31;
    v118 = v32;
    v111 = v116;
    v112 = v31;
    v113 = v32;
    swift_bridgeObjectRetain_n();
    v34 = sub_1B08C42C0((unsigned __int16 *)&v110, &v111, v33, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
    v36 = v35;
    v37 = v7;
    v38 = v110;
    v4 = 0;
    v39 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v111, v35, 1);
    swift_bridgeObjectRelease();
    v40 = v111;
    v41 = v113;
    if (v38 < (int)v36 >> 16 || v39 < (int)(v36 >> 16) >> 16)
    {
      sub_1B08ABB40();
      v54 = (void *)swift_allocError();
      *v55 = 6;
      swift_willThrow();
      sub_1B08A36F0();
      swift_allocError();
      *v56 = v54;
      v56[1] = v40;
      v56[2] = 0x7272652072657355;
      v56[3] = 0xEA0000000000726FLL;
      v56[4] = v54;
      v57 = v54;
      swift_willThrow();
      swift_bridgeObjectRelease();
      v5 = v152;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    v42 = v112;
    swift_bridgeObjectRelease();
    v116 = v40;
    v117 = v42;
    v118 = v41;
    v7 = v37;
    if ((v36 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v5 = v152;
      v43 = v103;
      if ((v103 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_1B08ABB40();
        swift_allocError();
        *v81 = 8;
        swift_willThrow();
        goto LABEL_26;
      }
      v8 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = (char *)sub_1B08B6FAC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v48 = *((_QWORD *)v7 + 2);
      v47 = *((_QWORD *)v7 + 3);
      if (v48 >= v47 >> 1)
        v7 = (char *)sub_1B08B6FAC((_QWORD *)(v47 > 1), v48 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v48 + 1;
      *(_QWORD *)&v7[8 * v48 + 32] = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v111 = (void *)MEMORY[0x1E0DEE9D8];
      sub_1B091DA2C(v108, (unint64_t *)&v116, v34, (uint64_t)v135, (uint64_t *)&v111, (double)SWORD1(v36));
      v5 = v152;
      v43 = v103;
      swift_bridgeObjectRelease();
      v44 = (uint64_t)v111;
      swift_bridgeObjectRetain();
      v8 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = (char *)sub_1B08B6FAC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v46 = *((_QWORD *)v7 + 2);
      v45 = *((_QWORD *)v7 + 3);
      if (v46 >= v45 >> 1)
        v7 = (char *)sub_1B08B6FAC((_QWORD *)(v45 > 1), v46 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v46 + 1;
      *(_QWORD *)&v7[8 * v46 + 32] = v44;
      swift_bridgeObjectRelease();
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B08B6E9C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v8 = (char *)result;
    }
    v51 = *((_QWORD *)v8 + 2);
    v50 = *((_QWORD *)v8 + 3);
    v52 = v105;
    if (v51 >= v50 >> 1)
    {
      result = (uint64_t)sub_1B08B6E9C((char *)(v50 > 1), v51 + 1, 1, v8);
      v52 = v105;
      v8 = (char *)result;
    }
    *((_QWORD *)v8 + 2) = v51 + 1;
    v53 = &v8[80 * v51];
    *((_WORD *)v53 + 16) = v101;
    *((_QWORD *)v53 + 5) = v108;
    v53[48] = v43;
    *(_OWORD *)(v53 + 56) = v99;
    *((_OWORD *)v53 + 5) = v97;
    *((_OWORD *)v53 + 6) = v95;
    if ((v101 & 0x20) == 0)
      break;
    v6 = a2;
  }
  v58 = *((_QWORD *)v8 + 2);
  if (!v58)
    goto LABEL_25;
  v59 = 0;
  v60 = 0;
  v61 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v52.f64[0], 0);
  v107 = (float64x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
  v69 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1);
  v62 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v92.f64[0], 0);
  v63 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v94.f64[0], 0);
  v98 = (float64x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL);
  v64 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v94, 1);
  v65 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v91.f64[0], 0);
  v66 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v93.f64[0], 0);
  v67 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v93, 1);
  v68 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v90.f64[0], 0);
  v61.i64[1] = vextq_s8(v61, v61, 8uLL).u64[0];
  v109 = (float64x2_t)v61;
  *(_QWORD *)&v69.f64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
  v62.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
  v102 = (float64x2_t)v62;
  v104 = v69;
  v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
  v100 = (float64x2_t)v63;
  v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
  v96 = (float64x2_t)v64;
  v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
  v89 = (float64x2_t)v65;
  v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
  v85 = (float64x2_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL);
  v86 = (float64x2_t)v66;
  v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
  v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
  v83 = (float64x2_t)v68;
  v84 = (float64x2_t)v67;
  while (v60 < *((_QWORD *)v7 + 2))
  {
    v70 = *(_QWORD *)&v8[v59 + 40];
    v71 = *(int64x2_t *)&v8[v59 + 56];
    v73 = *(float64x2_t *)&v8[v59 + 80];
    v72 = *(float64x2_t *)&v8[v59 + 96];
    if (v8[v59 + 48])
    {
      v74 = vcvtq_f64_s64(v71);
    }
    else
    {
      if (v71.i64[0] < 0
        || (v75 = *(_QWORD *)(v5 + 120), v71.i64[0] >= *(_QWORD *)(v75 + 16))
        || v71.i64[1] < 0
        || (v76 = *(_QWORD *)&v7[8 * v60 + 32], v71.i64[1] >= *(_QWORD *)(v76 + 16)))
      {
        swift_bridgeObjectRelease();
        sub_1B08ABB40();
        swift_allocError();
        *v82 = 9;
        swift_willThrow();
        goto LABEL_26;
      }
      v74 = vsubq_f64(*(float64x2_t *)(v75 + 16 * v71.i64[0] + 32), *(float64x2_t *)(v76 + 16 * v71.i64[1] + 32));
    }
    v77 = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    v78 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
    if ((*(_WORD *)&v8[v59 + 32] & 0x1800) == 0x800)
      v79 = v8[v59 + 48];
    else
      v79 = 0;
    if ((v79 & 1) != 0)
    {
      v80.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v73, v73)));
      v80.f64[1] = fabs(vaddvq_f64(vmulq_f64(v73, v78))) / v80.f64[0];
      v74 = vmulq_f64(v80, v74);
    }
    *(_QWORD *)&v73.f64[1] = v77;
    v69.f64[0] = 0.0;
    v72.f64[1] = v78.f64[0];
    *(float64x2_t *)(v5 + 176) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v109), v104, v72), v102, v74);
    *(float64x2_t *)(v5 + 192) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v52), v107, v69), v92, (float64x2_t)xmmword_1B0A381C0);
    *(float64x2_t *)(v5 + 208) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v100), v96, v72), v89, v74);
    *(float64x2_t *)(v5 + 224) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v94), v98, v69), v91, (float64x2_t)xmmword_1B0A381C0);
    *(float64x2_t *)(v5 + 240) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v86), v84, v72), v83, v74);
    *(float64x2_t *)(v5 + 256) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v93), v85, v69), v90, (float64x2_t)xmmword_1B0A381C0);
    result = sub_1B0916E04(a1, v70);
    ++v60;
    v52 = v105;
    *(float64x2_t *)(v5 + 176) = v105;
    *(float64x2_t *)(v5 + 192) = v92;
    *(float64x2_t *)(v5 + 208) = v94;
    *(float64x2_t *)(v5 + 224) = v91;
    v59 += 80;
    *(float64x2_t *)(v5 + 240) = v93;
    *(float64x2_t *)(v5 + 256) = v90;
    if (v58 == v60)
      goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B0919280(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  int v38;
  signed __int16 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  unint64_t v50;
  unint64_t v51;
  float64x2_t v52;
  char *v53;
  void *v54;
  _BYTE *v55;
  _QWORD *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float64x2_t v69;
  uint64_t v70;
  int64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float64x2_t v78;
  char v79;
  float64x2_t v80;
  _BYTE *v81;
  _BYTE *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  __int128 v95;
  float64x2_t v96;
  __int128 v97;
  float64x2_t v98;
  __int128 v99;
  float64x2_t v100;
  __int16 v101;
  float64x2_t v102;
  char v103;
  float64x2_t v104;
  float64x2_t v105;
  char *v106;
  float64x2_t v107;
  uint64_t v108;
  float64x2_t v109;
  __int16 v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  unsigned __int16 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD v135[6];
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  char v141;
  __int128 v142;
  char v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  _OWORD v150[9];
  uint64_t v151;
  uint64_t v152;

  v4 = v3;
  v5 = v2;
  v6 = a2;
  v134 = *(_QWORD *)(v2 + 120);
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 120) = MEMORY[0x1E0DEE9D8];
  v8 = v7;
  while (1)
  {
    v9 = v6[1];
    v10 = v6[2];
    *(_QWORD *)&v132 = *v6;
    *((_QWORD *)&v132 + 1) = v9;
    v133 = v10;
    *(_QWORD *)&v121 = v132;
    *((_QWORD *)&v121 + 1) = v9;
    *(_QWORD *)&v122 = v10;
    swift_bridgeObjectRetain_n();
    v12 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v121, v11, 1);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_25:
      swift_bridgeObjectRelease();
LABEL_26:
      swift_bridgeObjectRelease();
      result = sub_1B08A4384(*(_QWORD *)(v5 + 120));
      *(_QWORD *)(v5 + 120) = v134;
      return result;
    }
    v13 = v12;
    v106 = v8;
    swift_bridgeObjectRelease();
    v132 = v121;
    v133 = v122;
    v131 = v13;
    sub_1B091BD28(&v131, (uint64_t)&v121);
    v150[6] = v127;
    v150[7] = v128;
    v150[8] = v129;
    v150[2] = v123;
    v150[3] = v124;
    v151 = v130;
    v150[4] = v125;
    v150[5] = v126;
    v150[0] = v121;
    v150[1] = v122;
    sub_1B08C44B8(v120, (uint64_t)&v132, v14, (uint64_t)&v116);
    v101 = (__int16)v116;
    v15 = v117;
    v103 = v118;
    v99 = v119;
    sub_1B08CE1B4((uint64_t)v150);
    swift_bridgeObjectRelease_n();
    v95 = v120[1];
    v97 = v120[0];
    v16 = v133;
    *(_OWORD *)v6 = v132;
    v6[2] = v16;
    v17 = *(_QWORD *)(v5 + 96);
    v18 = *(_WORD *)(v5 + 104);
    v19 = *(_QWORD *)(v5 + 112);
    v20 = *(_BYTE *)(v5 + 168);
    v21 = *(float64x2_t *)(v5 + 176);
    v22 = *(float64x2_t *)(v5 + 192);
    v23 = *(float64x2_t *)(v5 + 208);
    v24 = *(float64x2_t *)(v5 + 224);
    v25 = *(float64x2_t *)(v5 + 240);
    v26 = *(float64x2_t *)(v5 + 256);
    v115 = *(_BYTE *)(v5 + 144);
    v114 = v20;
    v27 = *(_OWORD *)(v5 + 16);
    v135[0] = *(_OWORD *)v5;
    v135[1] = v27;
    v28 = *(_OWORD *)(v5 + 48);
    v135[2] = *(_OWORD *)(v5 + 32);
    v135[3] = v28;
    v29 = *(_OWORD *)(v5 + 80);
    v135[4] = *(_OWORD *)(v5 + 64);
    v135[5] = v29;
    v136 = v17;
    v137 = v18;
    v138 = v19;
    v139 = MEMORY[0x1E0DEE9D8];
    v140 = *(_OWORD *)(v5 + 128);
    v141 = v115;
    v142 = *(_OWORD *)(v5 + 152);
    v143 = v20;
    v91 = v24;
    v92 = v22;
    v144 = v21;
    v145 = v22;
    v105 = v21;
    v146 = v23;
    v147 = v24;
    v93 = v25;
    v94 = v23;
    v90 = v26;
    v148 = v25;
    v149 = v26;
    v108 = v15;
    v111 = (void *)sub_1B091B970(v15);
    v112 = v30;
    sub_1B08A35F4();
    v116 = (id)sub_1B0A1D090();
    v117 = v31;
    v118 = v32;
    v111 = v116;
    v112 = v31;
    v113 = v32;
    swift_bridgeObjectRetain_n();
    v34 = sub_1B08C42C0((unsigned __int16 *)&v110, &v111, v33, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
    v36 = v35;
    v37 = v7;
    v38 = v110;
    v4 = 0;
    v39 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v111, v35, 1);
    swift_bridgeObjectRelease();
    v40 = v111;
    v41 = v113;
    if (v38 < (int)v36 >> 16 || v39 < (int)(v36 >> 16) >> 16)
    {
      sub_1B08ABB40();
      v54 = (void *)swift_allocError();
      *v55 = 6;
      swift_willThrow();
      sub_1B08A36F0();
      swift_allocError();
      *v56 = v54;
      v56[1] = v40;
      v56[2] = 0x7272652072657355;
      v56[3] = 0xEA0000000000726FLL;
      v56[4] = v54;
      v57 = v54;
      swift_willThrow();
      swift_bridgeObjectRelease();
      v5 = v152;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    v42 = v112;
    swift_bridgeObjectRelease();
    v116 = v40;
    v117 = v42;
    v118 = v41;
    v7 = v37;
    if ((v36 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v5 = v152;
      v43 = v103;
      if ((v103 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_1B08ABB40();
        swift_allocError();
        *v81 = 8;
        swift_willThrow();
        goto LABEL_26;
      }
      v8 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = (char *)sub_1B08B6FAC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v48 = *((_QWORD *)v7 + 2);
      v47 = *((_QWORD *)v7 + 3);
      if (v48 >= v47 >> 1)
        v7 = (char *)sub_1B08B6FAC((_QWORD *)(v47 > 1), v48 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v48 + 1;
      *(_QWORD *)&v7[8 * v48 + 32] = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v111 = (void *)MEMORY[0x1E0DEE9D8];
      sub_1B091DA2C(v108, (unint64_t *)&v116, v34, (uint64_t)v135, (uint64_t *)&v111, (double)SWORD1(v36));
      v5 = v152;
      v43 = v103;
      swift_bridgeObjectRelease();
      v44 = (uint64_t)v111;
      swift_bridgeObjectRetain();
      v8 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = (char *)sub_1B08B6FAC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v46 = *((_QWORD *)v7 + 2);
      v45 = *((_QWORD *)v7 + 3);
      if (v46 >= v45 >> 1)
        v7 = (char *)sub_1B08B6FAC((_QWORD *)(v45 > 1), v46 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v46 + 1;
      *(_QWORD *)&v7[8 * v46 + 32] = v44;
      swift_bridgeObjectRelease();
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B08B6E9C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v8 = (char *)result;
    }
    v51 = *((_QWORD *)v8 + 2);
    v50 = *((_QWORD *)v8 + 3);
    v52 = v105;
    if (v51 >= v50 >> 1)
    {
      result = (uint64_t)sub_1B08B6E9C((char *)(v50 > 1), v51 + 1, 1, v8);
      v52 = v105;
      v8 = (char *)result;
    }
    *((_QWORD *)v8 + 2) = v51 + 1;
    v53 = &v8[80 * v51];
    *((_WORD *)v53 + 16) = v101;
    *((_QWORD *)v53 + 5) = v108;
    v53[48] = v43;
    *(_OWORD *)(v53 + 56) = v99;
    *((_OWORD *)v53 + 5) = v97;
    *((_OWORD *)v53 + 6) = v95;
    if ((v101 & 0x20) == 0)
      break;
    v6 = a2;
  }
  v58 = *((_QWORD *)v8 + 2);
  if (!v58)
    goto LABEL_25;
  v59 = 0;
  v60 = 0;
  v61 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v52.f64[0], 0);
  v107 = (float64x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
  v69 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1);
  v62 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v92.f64[0], 0);
  v63 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v94.f64[0], 0);
  v98 = (float64x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL);
  v64 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v94, 1);
  v65 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v91.f64[0], 0);
  v66 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v93.f64[0], 0);
  v67 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v93, 1);
  v68 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v90.f64[0], 0);
  v61.i64[1] = vextq_s8(v61, v61, 8uLL).u64[0];
  v109 = (float64x2_t)v61;
  *(_QWORD *)&v69.f64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
  v62.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
  v102 = (float64x2_t)v62;
  v104 = v69;
  v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
  v100 = (float64x2_t)v63;
  v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
  v96 = (float64x2_t)v64;
  v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
  v89 = (float64x2_t)v65;
  v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
  v85 = (float64x2_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL);
  v86 = (float64x2_t)v66;
  v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
  v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
  v83 = (float64x2_t)v68;
  v84 = (float64x2_t)v67;
  while (v60 < *((_QWORD *)v7 + 2))
  {
    v70 = *(_QWORD *)&v8[v59 + 40];
    v71 = *(int64x2_t *)&v8[v59 + 56];
    v73 = *(float64x2_t *)&v8[v59 + 80];
    v72 = *(float64x2_t *)&v8[v59 + 96];
    if (v8[v59 + 48])
    {
      v74 = vcvtq_f64_s64(v71);
    }
    else
    {
      if (v71.i64[0] < 0
        || (v75 = *(_QWORD *)(v5 + 120), v71.i64[0] >= *(_QWORD *)(v75 + 16))
        || v71.i64[1] < 0
        || (v76 = *(_QWORD *)&v7[8 * v60 + 32], v71.i64[1] >= *(_QWORD *)(v76 + 16)))
      {
        swift_bridgeObjectRelease();
        sub_1B08ABB40();
        swift_allocError();
        *v82 = 9;
        swift_willThrow();
        goto LABEL_26;
      }
      v74 = vsubq_f64(*(float64x2_t *)(v75 + 16 * v71.i64[0] + 32), *(float64x2_t *)(v76 + 16 * v71.i64[1] + 32));
    }
    v77 = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    v78 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
    if ((*(_WORD *)&v8[v59 + 32] & 0x1800) == 0x800)
      v79 = v8[v59 + 48];
    else
      v79 = 0;
    if ((v79 & 1) != 0)
    {
      v80.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v73, v73)));
      v80.f64[1] = fabs(vaddvq_f64(vmulq_f64(v73, v78))) / v80.f64[0];
      v74 = vmulq_f64(v80, v74);
    }
    *(_QWORD *)&v73.f64[1] = v77;
    v69.f64[0] = 0.0;
    v72.f64[1] = v78.f64[0];
    *(float64x2_t *)(v5 + 176) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v109), v104, v72), v102, v74);
    *(float64x2_t *)(v5 + 192) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v52), v107, v69), v92, (float64x2_t)xmmword_1B0A381C0);
    *(float64x2_t *)(v5 + 208) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v100), v96, v72), v89, v74);
    *(float64x2_t *)(v5 + 224) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v94), v98, v69), v91, (float64x2_t)xmmword_1B0A381C0);
    *(float64x2_t *)(v5 + 240) = vmlaq_f64(vmlaq_f64(vmulq_f64(v73, v86), v84, v72), v83, v74);
    *(float64x2_t *)(v5 + 256) = vmlaq_f64(vmlaq_f64(vmulq_f64(v69, v93), v85, v69), v90, (float64x2_t)xmmword_1B0A381C0);
    result = sub_1B09171CC(a1, v70);
    ++v60;
    v52 = v105;
    *(float64x2_t *)(v5 + 176) = v105;
    *(float64x2_t *)(v5 + 192) = v92;
    *(float64x2_t *)(v5 + 208) = v94;
    *(float64x2_t *)(v5 + 224) = v91;
    v59 += 80;
    *(float64x2_t *)(v5 + 240) = v93;
    *(float64x2_t *)(v5 + 256) = v90;
    if (v58 == v60)
      goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B0919D6C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  char v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int v40;
  signed __int16 v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t result;
  unint64_t v52;
  unint64_t v53;
  float64x2_t v54;
  char *v55;
  void *v56;
  _BYTE *v57;
  _QWORD *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  float64x2_t v71;
  uint64_t v72;
  int64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  float64x2_t v80;
  int v81;
  float64x2_t v82;
  _BYTE *v83;
  _BYTE *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  __int128 v99;
  float64x2_t v100;
  __int128 v101;
  float64x2_t v102;
  __int128 v103;
  float64x2_t v104;
  __int16 v105;
  float64x2_t v106;
  char v107;
  float64x2_t v108;
  float64x2_t v109;
  char *v110;
  float64x2_t v111;
  uint64_t v112;
  float64x2_t v113;
  __int16 v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  _OWORD v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  unsigned __int16 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  _OWORD v139[6];
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  char v145;
  __int128 v146;
  char v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  _OWORD v154[9];
  uint64_t v155;
  uint64_t v156;

  v6 = v5;
  v7 = v4;
  v8 = a2;
  v138 = *(_QWORD *)(v4 + 120);
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 120) = MEMORY[0x1E0DEE9D8];
  v10 = v9;
  while (1)
  {
    v11 = v8[1];
    v12 = v8[2];
    *(_QWORD *)&v136 = *v8;
    *((_QWORD *)&v136 + 1) = v11;
    v137 = v12;
    *(_QWORD *)&v125 = v136;
    *((_QWORD *)&v125 + 1) = v11;
    *(_QWORD *)&v126 = v12;
    swift_bridgeObjectRetain_n();
    v14 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v125, v13, 1);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_25:
      swift_bridgeObjectRelease();
LABEL_26:
      swift_bridgeObjectRelease();
      result = sub_1B08A4384(*(_QWORD *)(v7 + 120));
      *(_QWORD *)(v7 + 120) = v138;
      return result;
    }
    v15 = v14;
    v110 = v10;
    swift_bridgeObjectRelease();
    v136 = v125;
    v137 = v126;
    v135 = v15;
    sub_1B091BD28(&v135, (uint64_t)&v125);
    v154[6] = v131;
    v154[7] = v132;
    v154[8] = v133;
    v154[2] = v127;
    v154[3] = v128;
    v155 = v134;
    v154[4] = v129;
    v154[5] = v130;
    v154[0] = v125;
    v154[1] = v126;
    sub_1B08C44B8(v124, (uint64_t)&v136, v16, (uint64_t)&v120);
    v105 = (__int16)v120;
    v17 = v121;
    v107 = v122;
    v103 = v123;
    sub_1B08CE1B4((uint64_t)v154);
    swift_bridgeObjectRelease_n();
    v99 = v124[1];
    v101 = v124[0];
    v18 = v137;
    *(_OWORD *)v8 = v136;
    v8[2] = v18;
    v19 = *(_QWORD *)(v7 + 96);
    v20 = *(_WORD *)(v7 + 104);
    v21 = *(_QWORD *)(v7 + 112);
    v22 = *(_BYTE *)(v7 + 168);
    v23 = *(float64x2_t *)(v7 + 176);
    v24 = *(float64x2_t *)(v7 + 192);
    v25 = *(float64x2_t *)(v7 + 208);
    v26 = *(float64x2_t *)(v7 + 224);
    v27 = *(float64x2_t *)(v7 + 240);
    v28 = *(float64x2_t *)(v7 + 256);
    v119 = *(_BYTE *)(v7 + 144);
    v118 = v22;
    v29 = *(_OWORD *)(v7 + 16);
    v139[0] = *(_OWORD *)v7;
    v139[1] = v29;
    v30 = *(_OWORD *)(v7 + 48);
    v139[2] = *(_OWORD *)(v7 + 32);
    v139[3] = v30;
    v31 = *(_OWORD *)(v7 + 80);
    v139[4] = *(_OWORD *)(v7 + 64);
    v139[5] = v31;
    v140 = v19;
    v141 = v20;
    v142 = v21;
    v143 = MEMORY[0x1E0DEE9D8];
    v144 = *(_OWORD *)(v7 + 128);
    v145 = v119;
    v146 = *(_OWORD *)(v7 + 152);
    v147 = v22;
    v95 = v26;
    v96 = v24;
    v148 = v23;
    v149 = v24;
    v109 = v23;
    v150 = v25;
    v151 = v26;
    v97 = v27;
    v98 = v25;
    v94 = v28;
    v152 = v27;
    v153 = v28;
    v112 = v17;
    v115 = (void *)sub_1B091B970(v17);
    v116 = v32;
    sub_1B08A35F4();
    v120 = (id)sub_1B0A1D090();
    v121 = v33;
    v122 = v34;
    v115 = v120;
    v116 = v33;
    v117 = v34;
    swift_bridgeObjectRetain_n();
    v36 = sub_1B08C42C0((unsigned __int16 *)&v114, &v115, v35, 1, (void (*)(uint64_t *__return_ptr, unsigned __int16 *))sub_1B091BE30, 0, 65793);
    v38 = v37;
    v39 = v9;
    v40 = v114;
    v6 = 0;
    v41 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v115, v37, 1);
    swift_bridgeObjectRelease();
    v42 = v115;
    v43 = v117;
    if (v40 < (int)v38 >> 16 || v41 < (int)(v38 >> 16) >> 16)
    {
      sub_1B08ABB40();
      v56 = (void *)swift_allocError();
      *v57 = 6;
      swift_willThrow();
      sub_1B08A36F0();
      swift_allocError();
      *v58 = v56;
      v58[1] = v42;
      v58[2] = 0x7272652072657355;
      v58[3] = 0xEA0000000000726FLL;
      v58[4] = v56;
      v59 = v56;
      swift_willThrow();
      swift_bridgeObjectRelease();
      v7 = v156;
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    v44 = v116;
    swift_bridgeObjectRelease();
    v120 = v42;
    v121 = v44;
    v122 = v43;
    v9 = v39;
    if ((v38 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v7 = v156;
      v45 = v107;
      if ((v107 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_1B08ABB40();
        swift_allocError();
        *v83 = 8;
        swift_willThrow();
        goto LABEL_26;
      }
      v10 = v110;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = (char *)sub_1B08B6FAC(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v50 = *((_QWORD *)v9 + 2);
      v49 = *((_QWORD *)v9 + 3);
      if (v50 >= v49 >> 1)
        v9 = (char *)sub_1B08B6FAC((_QWORD *)(v49 > 1), v50 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v50 + 1;
      *(_QWORD *)&v9[8 * v50 + 32] = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v115 = (void *)MEMORY[0x1E0DEE9D8];
      sub_1B091DA2C(v112, (unint64_t *)&v120, v36, (uint64_t)v139, (uint64_t *)&v115, (double)SWORD1(v38));
      v7 = v156;
      v45 = v107;
      swift_bridgeObjectRelease();
      v46 = (uint64_t)v115;
      swift_bridgeObjectRetain();
      v10 = v110;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = (char *)sub_1B08B6FAC(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v48 = *((_QWORD *)v9 + 2);
      v47 = *((_QWORD *)v9 + 3);
      if (v48 >= v47 >> 1)
        v9 = (char *)sub_1B08B6FAC((_QWORD *)(v47 > 1), v48 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v48 + 1;
      *(_QWORD *)&v9[8 * v48 + 32] = v46;
      swift_bridgeObjectRelease();
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B08B6E9C(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v10 = (char *)result;
    }
    v53 = *((_QWORD *)v10 + 2);
    v52 = *((_QWORD *)v10 + 3);
    v54 = v109;
    if (v53 >= v52 >> 1)
    {
      result = (uint64_t)sub_1B08B6E9C((char *)(v52 > 1), v53 + 1, 1, v10);
      v54 = v109;
      v10 = (char *)result;
    }
    *((_QWORD *)v10 + 2) = v53 + 1;
    v55 = &v10[80 * v53];
    *((_WORD *)v55 + 16) = v105;
    *((_QWORD *)v55 + 5) = v112;
    v55[48] = v45;
    *(_OWORD *)(v55 + 56) = v103;
    *((_OWORD *)v55 + 5) = v101;
    *((_OWORD *)v55 + 6) = v99;
    if ((v105 & 0x20) == 0)
      break;
    v8 = a2;
  }
  v60 = *((_QWORD *)v10 + 2);
  if (!v60)
    goto LABEL_25;
  v61 = 0;
  v62 = 0;
  v63 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v54.f64[0], 0);
  v111 = (float64x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL);
  v71 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v54, 1);
  v64 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v96.f64[0], 0);
  v65 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v98.f64[0], 0);
  v102 = (float64x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL);
  v66 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v98, 1);
  v67 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v95.f64[0], 0);
  v68 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v97.f64[0], 0);
  v69 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v97, 1);
  v70 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v94.f64[0], 0);
  v63.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
  v113 = (float64x2_t)v63;
  *(_QWORD *)&v71.f64[1] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
  v64.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
  v106 = (float64x2_t)v64;
  v108 = v71;
  v65.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
  v104 = (float64x2_t)v65;
  v66.i64[1] = vextq_s8(v66, v66, 8uLL).u64[0];
  v100 = (float64x2_t)v66;
  v67.i64[1] = vextq_s8(v67, v67, 8uLL).u64[0];
  v93 = (float64x2_t)v67;
  v68.i64[1] = vextq_s8(v68, v68, 8uLL).u64[0];
  v87 = (float64x2_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL);
  v88 = (float64x2_t)v68;
  v69.i64[1] = vextq_s8(v69, v69, 8uLL).u64[0];
  v70.i64[1] = vextq_s8(v70, v70, 8uLL).u64[0];
  v85 = (float64x2_t)v70;
  v86 = (float64x2_t)v69;
  while (v62 < *((_QWORD *)v9 + 2))
  {
    v72 = *(_QWORD *)&v10[v61 + 40];
    v73 = *(int64x2_t *)&v10[v61 + 56];
    v75 = *(float64x2_t *)&v10[v61 + 80];
    v74 = *(float64x2_t *)&v10[v61 + 96];
    if (v10[v61 + 48])
    {
      v76 = vcvtq_f64_s64(v73);
    }
    else
    {
      if (v73.i64[0] < 0
        || (v77 = *(_QWORD *)(v7 + 120), v73.i64[0] >= *(_QWORD *)(v77 + 16))
        || v73.i64[1] < 0
        || (v78 = *(_QWORD *)&v9[8 * v62 + 32], v73.i64[1] >= *(_QWORD *)(v78 + 16)))
      {
        swift_bridgeObjectRelease();
        sub_1B08ABB40();
        swift_allocError();
        *v84 = 9;
        swift_willThrow();
        goto LABEL_26;
      }
      v76 = vsubq_f64(*(float64x2_t *)(v77 + 16 * v73.i64[0] + 32), *(float64x2_t *)(v78 + 16 * v73.i64[1] + 32));
    }
    v79 = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
    v80 = (float64x2_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL);
    if ((*(_WORD *)&v10[v61 + 32] & 0x1800) == 0x800)
      v81 = v10[v61 + 48];
    else
      v81 = 0;
    if (v81 == 1)
    {
      v82.f64[0] = sqrt(vaddvq_f64(vmulq_f64(v75, v75)));
      v82.f64[1] = fabs(vaddvq_f64(vmulq_f64(v75, v80))) / v82.f64[0];
      v76 = vmulq_f64(v82, v76);
    }
    *(_QWORD *)&v75.f64[1] = v79;
    v71.f64[0] = 0.0;
    v74.f64[1] = v80.f64[0];
    *(float64x2_t *)(v7 + 176) = vmlaq_f64(vmlaq_f64(vmulq_f64(v75, v113), v108, v74), v106, v76);
    *(float64x2_t *)(v7 + 192) = vmlaq_f64(vmlaq_f64(vmulq_f64(v71, v54), v111, v71), v96, (float64x2_t)xmmword_1B0A381C0);
    *(float64x2_t *)(v7 + 208) = vmlaq_f64(vmlaq_f64(vmulq_f64(v75, v104), v100, v74), v93, v76);
    *(float64x2_t *)(v7 + 224) = vmlaq_f64(vmlaq_f64(vmulq_f64(v71, v98), v102, v71), v95, (float64x2_t)xmmword_1B0A381C0);
    *(float64x2_t *)(v7 + 240) = vmlaq_f64(vmlaq_f64(vmulq_f64(v75, v88), v86, v74), v85, v76);
    *(float64x2_t *)(v7 + 256) = vmlaq_f64(vmlaq_f64(vmulq_f64(v71, v97), v87, v71), v94, (float64x2_t)xmmword_1B0A381C0);
    result = sub_1B0917594(a1, v72, a3, a4);
    ++v62;
    v54 = v109;
    *(float64x2_t *)(v7 + 176) = v109;
    *(float64x2_t *)(v7 + 192) = v96;
    *(float64x2_t *)(v7 + 208) = v98;
    *(float64x2_t *)(v7 + 224) = v95;
    v61 += 80;
    *(float64x2_t *)(v7 + 240) = v97;
    *(float64x2_t *)(v7 + 256) = v94;
    if (v60 == v62)
      goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B091A858(unint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float64x2_t v8;

  switch(a3)
  {
    case 2:
      return (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a6, a7);
    case 3:
      *(_QWORD *)(a5 + 128) = 0;
      *(_QWORD *)(a5 + 136) = 0;
      *(_BYTE *)(a5 + 144) = 1;
      *(_QWORD *)(a5 + 152) = 0;
      *(_QWORD *)(a5 + 160) = 0;
      *(_BYTE *)(a5 + 168) = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
    case 4:
      return sub_1B091A924(a4, a6, a7);
    default:
      v8 = vaddq_f64(*(float64x2_t *)(a5 + 240), vmlaq_f64(vmulq_f64((float64x2_t)vdupq_n_s64(a1), *(float64x2_t *)(a5 + 176)), (float64x2_t)vdupq_n_s64(a2), *(float64x2_t *)(a5 + 208)));
      return sub_1B091ACA4((a3 & 1) == 0, v8.f64[0], v8.f64[1], a4, a6, a7);
  }
}

uint64_t sub_1B091A924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((*(_BYTE *)(v3 + 144) & 1) == 0 && (*(_BYTE *)(v3 + 168) & 1) == 0)
    (*(void (**)(uint64_t, uint64_t, double, double, double, double))(a3 + 40))(a2, a3, *(double *)(v3 + 128), *(double *)(v3 + 136), *(double *)(v3 + 152), *(double *)(v3 + 160));
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
}

uint64_t sub_1B091A98C(char a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  _BYTE *v14;
  float64x2_t v15;
  int8x16_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v7 = *(_QWORD *)(v4 + 120);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B08B6DA4(0, *(_QWORD *)(v7 + 16) + 1, 1, (char *)v7);
    v7 = result;
  }
  v10 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v7 + 24);
  v12 = a3;
  v11 = a4;
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)sub_1B08B6DA4((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
    v12 = a3;
    v11 = a4;
    v7 = result;
  }
  *(_QWORD *)(v7 + 16) = v10 + 1;
  v13 = v7 + 16 * v10;
  *(double *)(v13 + 32) = v12;
  *(double *)(v13 + 40) = v11;
  *(_QWORD *)(v4 + 120) = v7;
  if ((*(_BYTE *)(v4 + 144) & 1) != 0)
  {
    *(double *)(v4 + 128) = v12;
    *(double *)(v4 + 136) = v11;
    *(_BYTE *)(v4 + 144) = 0;
  }
  else
  {
    if ((*(_BYTE *)(v4 + 168) & 1) == 0)
    {
      v18 = *(double *)(v4 + 152);
      v17 = *(double *)(v4 + 160);
      v19 = (v17 + v11) * 0.5;
      if ((a1 & 1) != 0)
      {
        v20 = (v18 + v12) * 0.5;
      }
      else
      {
        v19 = v11;
        v20 = v12;
      }
      v14 = (_BYTE *)(a2 + 32);
      if ((*(_BYTE *)(a2 + 32) & 1) != 0)
      {
        v21 = v20;
        v22 = v19;
      }
      else
      {
        v21 = *(double *)(a2 + 16);
        v22 = *(double *)(a2 + 24);
        v24 = *(double *)a2;
        v23 = *(double *)(a2 + 8);
        if (*(double *)a2 >= v20)
          v24 = v20;
        if (v20 > v21)
          v21 = v20;
        if (v23 >= v19)
          v23 = v19;
        if (v19 > v22)
          v22 = v19;
        v20 = v24;
        v19 = v23;
      }
      if (v20 >= v18)
        v20 = *(double *)(v4 + 152);
      if (v18 <= v21)
        v18 = v21;
      if (v19 >= v17)
        v19 = *(double *)(v4 + 160);
      *(double *)a2 = v20;
      *(double *)(a2 + 8) = v19;
      if (v17 <= v22)
        v17 = v22;
      *(double *)(a2 + 16) = v18;
      *(double *)(a2 + 24) = v17;
      goto LABEL_36;
    }
    if ((a1 & 1) != 0)
      goto LABEL_37;
  }
  v14 = (_BYTE *)(a2 + 32);
  v15.f64[0] = v12;
  v15.f64[1] = v11;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    v16 = (int8x16_t)v15;
  }
  else
  {
    v16 = vbslq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)(a2 + 16), v15), *(int8x16_t *)(a2 + 16), (int8x16_t)v15);
    v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v15, *(float64x2_t *)a2), *(int8x16_t *)a2, (int8x16_t)v15);
  }
  *(float64x2_t *)a2 = v15;
  *(int8x16_t *)(a2 + 16) = v16;
LABEL_36:
  *v14 = 0;
LABEL_37:
  v25 = v12;
  v26 = v11;
  if ((a1 & 1) == 0)
  {
    v25 = 0.0;
    v26 = 0.0;
  }
  *(double *)(v4 + 152) = v25;
  *(double *)(v4 + 160) = v26;
  *(_BYTE *)(v4 + 168) = (a1 & 1) == 0;
  return result;
}

uint64_t sub_1B091AB54(char a1, id *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v9 = *(_QWORD *)(v4 + 120);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B08B6DA4(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
    v9 = result;
  }
  v12 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)sub_1B08B6DA4((char *)(v11 > 1), v12 + 1, 1, (char *)v9);
    v9 = result;
  }
  *(_QWORD *)(v9 + 16) = v12 + 1;
  v13 = v9 + 16 * v12;
  *(double *)(v13 + 32) = a3;
  *(double *)(v13 + 40) = a4;
  *(_QWORD *)(v4 + 120) = v9;
  if ((*(_BYTE *)(v4 + 144) & 1) != 0)
  {
    *(double *)(v4 + 128) = a3;
    *(double *)(v4 + 136) = a4;
    *(_BYTE *)(v4 + 144) = 0;
    result = (uint64_t)objc_msgSend(*a2, sel_moveTo_, a3, a4);
  }
  else if ((*(_BYTE *)(v4 + 168) & 1) != 0)
  {
    if ((a1 & 1) == 0)
      result = (uint64_t)objc_msgSend(*a2, sel_lineTo_, a3, a4);
  }
  else
  {
    v14 = (*(double *)(v4 + 152) + a3) * 0.5;
    v15 = (*(double *)(v4 + 160) + a4) * 0.5;
    if ((a1 & 1) == 0)
    {
      v15 = a4;
      v14 = a3;
    }
    result = (uint64_t)objc_msgSend(*a2, sel_quadCurveTo_control_, v14, v15);
  }
  v16 = a3;
  v17 = a4;
  if ((a1 & 1) == 0)
  {
    v16 = 0.0;
    v17 = 0.0;
  }
  *(double *)(v4 + 152) = v16;
  *(double *)(v4 + 160) = v17;
  *(_BYTE *)(v4 + 168) = (a1 & 1) == 0;
  return result;
}

uint64_t sub_1B091ACA4(char a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t result;
  __n128 v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  v12 = *(_QWORD *)(v6 + 120);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B08B6DA4(0, *(_QWORD *)(v12 + 16) + 1, 1, (char *)v12);
    v12 = result;
  }
  v17 = *(_QWORD *)(v12 + 16);
  v16 = *(_QWORD *)(v12 + 24);
  if (v17 >= v16 >> 1)
  {
    result = (uint64_t)sub_1B08B6DA4((char *)(v16 > 1), v17 + 1, 1, (char *)v12);
    v12 = result;
  }
  *(_QWORD *)(v12 + 16) = v17 + 1;
  v18 = v12 + 16 * v17;
  *(double *)(v18 + 32) = a2;
  *(double *)(v18 + 40) = a3;
  *(_QWORD *)(v6 + 120) = v12;
  if ((*(_BYTE *)(v6 + 144) & 1) != 0)
  {
    *(double *)(v6 + 128) = a2;
    *(double *)(v6 + 136) = a3;
    *(_BYTE *)(v6 + 144) = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(a6 + 24))(a5, a6, a2, a3);
    if ((a1 & 1) == 0)
      goto LABEL_15;
  }
  else if ((*(_BYTE *)(v6 + 168) & 1) != 0)
  {
    if ((a1 & 1) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(a6 + 32))(a5, a6, a2, a3);
LABEL_15:
      v19 = 1;
      a2 = 0.0;
      a3 = 0.0;
      goto LABEL_16;
    }
  }
  else
  {
    v14.n128_f64[0] = (*(double *)(v6 + 152) + a2) * 0.5;
    v15.n128_f64[0] = (*(double *)(v6 + 160) + a3) * 0.5;
    if ((a1 & 1) == 0)
    {
      v15.n128_f64[0] = a3;
      v14.n128_f64[0] = a2;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(a6 + 40))(a5, a6, v14, v15);
    if ((a1 & 1) == 0)
      goto LABEL_15;
  }
  v19 = 0;
LABEL_16:
  *(double *)(v6 + 152) = a2;
  *(double *)(v6 + 160) = a3;
  *(_BYTE *)(v6 + 168) = v19;
  return result;
}

uint64_t sub_1B091AE14(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t (*a4)(double, double, _QWORD), double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  signed __int16 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  signed __int16 v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  unsigned __int8 v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unint64_t v82;
  _BYTE v83[72];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _OWORD v89[4];
  uint64_t v90;

  if (a3 < 1)
    return result;
  v7 = v5;
  v11 = result;
  result = sub_1B091C288((uint64_t)a2, (uint64_t)a2, 1, MEMORY[0x1E0DEE9D8], a3);
  if (v6)
    return result;
  v12 = result;
  v82 = a2[2];
  v79 = *(_OWORD *)a2;
  *(_QWORD *)&v80 = v82;
  swift_bridgeObjectRetain_n();
  v14 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v79, v13, 1);
  swift_bridgeObjectRelease();
  v81 = v79;
  v82 = v80;
  sub_1B091D32C((uint64_t *)&v81, v15, v14);
  result = swift_bridgeObjectRelease();
  v16 = v82;
  *(_OWORD *)a2 = v81;
  a2[2] = v16;
  v17 = *(_QWORD *)(v12 + 16);
  if (!v17)
  {
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v18 = *(_QWORD *)(v12 + 32 + 8 * v17 - 8);
  if (__OFADD__(v18, 1))
    goto LABEL_59;
  v19 = sub_1B091D5A4(a2, v18 + 1);
  v21 = v19;
  v22 = v20;
  v75 = v23;
  if ((v24 & 1) != 0)
  {
    v77 = v19;
    ((void (*)(_QWORD, _QWORD, uint64_t))a4)(0, 0, 2);
    v21 = v77;
  }
  v25 = sub_1B091D32C((uint64_t *)a2, v20, v22);
  v70 = v26;
  v71 = v25;
  v27 = sub_1B091D32C((uint64_t *)a2, v26, v75);
  v66 = v28;
  v68 = v27;
  v78 = v21;
  sub_1B08CE970(v7 + 32, (uint64_t)v83, &qword_1EEEBA820);
  result = sub_1B08CE970((uint64_t)v83, (uint64_t)v89, &qword_1EEEBA820);
  if (!v90)
    goto LABEL_17;
  v86 = v89[2];
  v87 = v89[3];
  v88 = v90;
  v84 = v89[0];
  v85 = v89[1];
  result = sub_1B0946AFC(v11);
  if ((~*(_QWORD *)&a5 & 0x7FF0000000000000) == 0)
    goto LABEL_66;
  v29 = v21;
  if (a5 <= -9.22337204e18)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (a5 >= 9.22337204e18)
  {
LABEL_68:
    __break(1u);
    return result;
  }
  v76 = result - (uint64_t)a5;
  if (!__OFSUB__(result, (uint64_t)a5))
    goto LABEL_18;
  __break(1u);
LABEL_17:
  v76 = 0;
  v29 = v21;
LABEL_18:
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v67 = 0;
    v31 = 0;
    v32 = 0;
    v63 = v29 + 32;
    v61 = *(_QWORD *)(v29 + 16);
    v60 = v30 - 1;
LABEL_20:
    v62 = v31;
    v33 = 1;
    while (1)
    {
      if (v32 >= *(_QWORD *)(v29 + 16))
        goto LABEL_60;
      v34 = *(_BYTE *)(v63 + v32);
      if ((v33 & 1) != 0)
        ((void (*)(_QWORD, _QWORD, uint64_t))a4)(0, 0, 3);
      v74 = v34;
      if ((v34 & 2) == 0)
        break;
      v40 = a2[2];
      if ((v34 & 0x10) != 0)
      {
        v36 = v32;
        *(_QWORD *)&v79 = v71;
        *((_QWORD *)&v79 + 1) = v70;
        *(_QWORD *)&v80 = v40;
        swift_bridgeObjectRetain_n();
        v46 = sub_1B08C9FC0((unint64_t *)&v79, v45);
        v64 = v40;
        swift_bridgeObjectRelease();
        v39 = v46;
LABEL_31:
        v73 = v39;
        v44 = *((_QWORD *)&v79 + 1);
        v43 = (uint64_t *)v79;
        result = swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      v36 = v32;
      *(_QWORD *)&v79 = v71;
      *((_QWORD *)&v79 + 1) = v70;
      *(_QWORD *)&v80 = v40;
      swift_bridgeObjectRetain_n();
      sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      swift_bridgeObjectRetain();
      sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      v72 = sub_1B08C9FC0((unint64_t *)&v79, v41);
      swift_bridgeObjectRelease();
      v42 = v40;
      v44 = *((_QWORD *)&v79 + 1);
      v43 = (uint64_t *)v79;
      v64 = v42;
      swift_bridgeObjectRelease();
      v73 = -(uint64_t)v72;
      sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      swift_bridgeObjectRelease();
      result = sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
LABEL_32:
      v34 = v74;
      if (v44 < (uint64_t)v43)
        goto LABEL_62;
      v47 = __OFADD__(v76, v73);
      v76 += v73;
      if (v47)
        goto LABEL_57;
      v70 = v44;
      v71 = v43;
      v35 = v64;
LABEL_36:
      v48 = v36;
      if ((v34 & 4) != 0)
      {
        if ((v34 & 0x20) == 0)
        {
          *(_QWORD *)&v79 = v68;
          *((_QWORD *)&v79 + 1) = v66;
          *(_QWORD *)&v80 = v35;
          swift_bridgeObjectRetain_n();
          sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          swift_bridgeObjectRetain();
          sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          v53 = sub_1B08C9FC0((unint64_t *)&v79, v52);
          swift_bridgeObjectRelease();
          v54 = *((_QWORD *)&v79 + 1);
          v69 = (uint64_t *)v79;
          swift_bridgeObjectRelease();
          v65 = -(uint64_t)v53;
          sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          swift_bridgeObjectRelease();
          result = sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          v55 = v69;
          goto LABEL_44;
        }
        *(_QWORD *)&v79 = v68;
        *((_QWORD *)&v79 + 1) = v66;
        *(_QWORD *)&v80 = v35;
        swift_bridgeObjectRetain_n();
        v57 = sub_1B08C9FC0((unint64_t *)&v79, v56);
        swift_bridgeObjectRelease();
        v51 = v57;
      }
      else
      {
        if ((v34 & 0x20) != 0)
        {
          result = sub_1B091FE10(0, 0, 0, 0, 0);
          if (v66 < (uint64_t)v68)
            goto LABEL_65;
          v58 = v67;
          goto LABEL_50;
        }
        *(_QWORD *)&v79 = v68;
        *((_QWORD *)&v79 + 1) = v66;
        *(_QWORD *)&v80 = v35;
        swift_bridgeObjectRetain_n();
        v50 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v79, v49, 1);
        swift_bridgeObjectRelease();
        v51 = v50;
      }
      v65 = v51;
      v54 = *((_QWORD *)&v79 + 1);
      v55 = (uint64_t *)v79;
      result = swift_bridgeObjectRelease();
LABEL_44:
      v68 = v55;
      v66 = v54;
      if (v54 < (uint64_t)v55)
        goto LABEL_63;
      v58 = v67 + v65;
      v34 = v74;
      if (__OFADD__(v67, v65))
      {
LABEL_57:
        sub_1B08A38A0();
        swift_allocError();
        swift_willThrow();
        goto LABEL_4;
      }
LABEL_50:
      v67 = v58;
      result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))a4)((double)v76, (double)v58, v34 & 1);
      v29 = v78;
      if (v62 >= *(_QWORD *)(v12 + 16))
        goto LABEL_61;
      if (v48 == *(_QWORD *)(v12 + 32 + 8 * v62))
      {
        result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t))a4)(0, 0, 4);
        v31 = v62 + 1;
        v59 = v60 == v48;
        v32 = v48 + 1;
        v29 = v78;
        if (v59)
          goto LABEL_4;
        goto LABEL_20;
      }
      v33 = 0;
      v32 = v48 + 1;
      if (v61 == v32)
        goto LABEL_4;
    }
    v35 = a2[2];
    if ((v34 & 0x10) != 0)
    {
      v36 = v32;
      result = sub_1B091FE10(0, 0, 0, 0, 0);
      if (v70 < (uint64_t)v71)
        goto LABEL_64;
      goto LABEL_36;
    }
    v36 = v32;
    *(_QWORD *)&v79 = v71;
    *((_QWORD *)&v79 + 1) = v70;
    *(_QWORD *)&v80 = v35;
    swift_bridgeObjectRetain_n();
    v38 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v79, v37, 1);
    v64 = v35;
    swift_bridgeObjectRelease();
    v39 = v38;
    goto LABEL_31;
  }
LABEL_4:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B091B970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int16 *)(v1 + 104);
  if (v3 > 1)
  {
    sub_1B08ABB40();
    swift_allocError();
    v10 = 3;
    goto LABEL_9;
  }
  v4 = a1;
  v5 = *(_QWORD *)v1;
  v6 = *(_QWORD *)(v1 + 8);
  if (sub_1B09699D8(*(unsigned __int16 *)(v1 + 104), *(_QWORD *)v1, v6) > a1 || v7 <= v4)
  {
    sub_1B08ABB40();
    swift_allocError();
    v10 = 14;
LABEL_9:
    *v9 = v10;
    return swift_willThrow();
  }
  if ((_DWORD)v3)
  {
    if ((unint64_t)(v4 - 0x2000000000000000) >> 62 != 3)
    {
      __break(1u);
      goto LABEL_18;
    }
    v4 *= 4;
    sub_1B08A35B0(v5, v6);
    v12 = sub_1B08A783C(1, v4, v3, v5, v6);
    if (!v2)
    {
LABEL_16:
      sub_1B090BE34(v12, v13, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
      v14 = sub_1B0A1CFA0();
      sub_1B08A3638(v5, v6);
      return v14;
    }
    swift_unexpectedError();
    __break(1u);
  }
  if (v4 + 0x4000000000000000 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  sub_1B08A35B0(v5, v6);
  v12 = sub_1B08A7600(1, (uint64_t)sub_1B08E5EF4, 0, 2 * v4, 0, v5, v6);
  if (!v2)
    goto LABEL_16;
LABEL_19:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

_QWORD *sub_1B091BB54@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(0, *result))
    __break(1u);
  else
    *a2 = -*result;
  return result;
}

_BYTE *sub_1B091BB6C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1B091BB78(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_1B091BB80@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_1B091BB94@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_1B091BBA8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B091BBBC(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_1B091BBEC@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_1B091BC18@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_1B091BC3C(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_1B091BC50(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_1B091BC64(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_1B091BC78@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B091BC8C(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B091BCA0(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1B091BCB4(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B091BCC8()
{
  _BYTE *v0;

  return *v0 == 0;
}

_BYTE *sub_1B091BCD8(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1B091BCEC@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  v2 = sub_1B092E58C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

__n128 sub_1B091BD28@<Q0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  __int16 v6;
  __int16 v7;
  char v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned __int8 v15[8];
  double (*v16)@<D0>(__int16 *@<X0>, double *@<X8>, int16x4_t@<D0>);
  uint64_t v17;
  double (*v18)@<D0>(double *@<X0>, uint64_t@<X8>);
  uint64_t v19;
  _OWORD v20[6];
  __int16 v21;
  char v22;

  v3 = *a1;
  if ((v3 & 0x2000) != 0)
    v4 = 3;
  else
    v4 = 1;
  v5 = (v3 & 1) == 0;
  if ((v3 & 2) != 0)
    v6 = 1;
  else
    v6 = 257;
  v18 = 0;
  v19 = 0x3FF0000000000000;
  v15[0] = 1;
  v16 = sub_1B091BE70;
  v17 = 0;
  sub_1B091BE94(v3, &v19, &v18, v15, (uint64_t)v20);
  v7 = v21;
  v8 = v22;
  result = (__n128)v20[0];
  v10 = v20[1];
  v11 = v20[2];
  v12 = v20[3];
  v13 = v20[4];
  v14 = v20[5];
  *(_WORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = (unsigned __int16)(v3 & 0x2000) >> 13;
  *(_BYTE *)(a2 + 17) = (v3 & 0x2000) == 0;
  *(_BYTE *)(a2 + 18) = (v3 & 2) >> 1;
  *(_WORD *)(a2 + 19) = v6;
  *(_BYTE *)(a2 + 21) = v5;
  *(_WORD *)(a2 + 22) = v6;
  *(_BYTE *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 80) = v12;
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 112) = v14;
  *(_WORD *)(a2 + 128) = v7;
  *(_BYTE *)(a2 + 130) = v8;
  *(_QWORD *)(a2 + 136) = sub_1B08A0F94;
  *(_QWORD *)(a2 + 144) = 0;
  return result;
}

_WORD *sub_1B091BE30@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  char v7;

  v2 = (unsigned __int16)*result;
  if ((v2 & 0x8000) != 0)
    v3 = 1;
  else
    v3 = (unsigned __int16)*result;
  v4 = (v2 & 0x8000) != 0 || *result == 0;
  v5 = v2 == 65534;
  if (v2 == 65534)
    v6 = 2;
  else
    v6 = v3;
  v7 = v5 || v4;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

double sub_1B091BE70@<D0>(__int16 *a1@<X0>, double *a2@<X8>, int16x4_t a3@<D0>)
{
  double result;

  a3.i16[0] = *a1;
  result = (double)vmovl_s16(a3).i32[0] * 0.0000610351562;
  *a2 = result;
  return result;
}

uint64_t sub_1B091BE94@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, double (**a3)@<D0>(double *a1@<X0>, uint64_t a2@<X8>)@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double (*v9)@<D0>(double *@<X0>, uint64_t@<X8>);
  uint64_t v10;
  double (*v11)@<D0>(double *@<X0>, uint64_t@<X8>);
  double (*v12)@<D0>(double *@<X0>, uint64_t@<X8>);
  __int16 v13;
  char v14;
  uint64_t v15;
  double (*v16)@<D0>(double *@<X0>, uint64_t@<X8>);
  double (*v17)@<D0>(double *@<X0>, uint64_t@<X8>);
  double (*v18)@<D0>(double *@<X0>, uint64_t@<X8>);
  double (*v19)@<D0>(double *@<X0>, uint64_t@<X8>);
  _BYTE *v20;

  if ((result & 8) != 0)
  {
    if ((result & 0xC0) == 0)
    {
      v15 = *a4;
      v16 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))*((_QWORD *)a4 + 1);
      v17 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))*((_QWORD *)a4 + 2);
      v19 = *a3;
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v19;
      result = swift_retain();
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v7 = 1;
      v18 = sub_1B091FE4C;
      goto LABEL_11;
    }
LABEL_9:
    sub_1B08ABB40();
    v15 = swift_allocError();
    *v20 = 7;
    result = (uint64_t)(id)v15;
    v16 = 0;
    v17 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    v18 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))0xE000000000000000;
    v6 = v15;
    goto LABEL_11;
  }
  if ((result & 0x40) != 0)
  {
    if ((result & 0x80) == 0)
    {
      v15 = *a4;
      v16 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))*((_QWORD *)a4 + 1);
      v17 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))*((_QWORD *)a4 + 2);
      v18 = *a3;
      result = swift_retain_n();
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v14 = 0;
      v13 = 256;
      v6 = (uint64_t)v18;
      v7 = v15;
      v8 = (uint64_t)v16;
      v9 = v17;
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if ((result & 0x80) != 0)
  {
    v15 = *a4;
    v16 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))*((_QWORD *)a4 + 1);
    v17 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))*((_QWORD *)a4 + 2);
    result = swift_retain_n();
    v14 = 0;
    v13 = 257;
    v18 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))v15;
    v6 = (uint64_t)v16;
    v7 = (uint64_t)v17;
    v8 = v15;
    v9 = v16;
    v10 = v15;
    v11 = v16;
    v12 = v17;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = *a2;
    v16 = *a3;
    v17 = *a3;
    v18 = (double (*)@<D0>(double *@<X0>, uint64_t@<X8>))*a2;
  }
LABEL_11:
  *(_QWORD *)a5 = v15;
  *(_QWORD *)(a5 + 8) = v16;
  *(_QWORD *)(a5 + 16) = v17;
  *(_QWORD *)(a5 + 24) = v18;
  *(_QWORD *)(a5 + 32) = v6;
  *(_QWORD *)(a5 + 40) = v7;
  *(_QWORD *)(a5 + 48) = v8;
  *(_QWORD *)(a5 + 56) = v9;
  *(_QWORD *)(a5 + 64) = v12;
  *(_QWORD *)(a5 + 72) = v10;
  *(_QWORD *)(a5 + 80) = v11;
  *(_QWORD *)(a5 + 88) = v12;
  *(_WORD *)(a5 + 96) = v13;
  *(_BYTE *)(a5 + 98) = v14;
  return result;
}

uint64_t sub_1B091C07C@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  __C::CGRect_optional v6;
  _BYTE __dst[420];

  memcpy(__dst, v2, sizeof(__dst));
  SfntTrueTypeFont.getBoundingBox(glyphID:)(&v6, a1);
  return sub_1B08CE970((uint64_t)&v6, a2, &qword_1EEEBAC80);
}

char *sub_1B091C0E0(char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(__int128 *__return_ptr, uint64_t *);
  char v21;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;

  v4 = *(_QWORD *)result;
  v5 = *((_QWORD *)result + 1);
  v6 = *((_QWORD *)result + 2);
  v7 = *(char **)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v26 = v7;
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = v3;
    v10 = result;
    if (v8)
    {
      v21 = *(_BYTE *)v2;
      v20 = *(void (**)(__int128 *__return_ptr, uint64_t *))(v2 + 8);
      v18 = result;
      v19 = *(_QWORD *)(v2 + 16);
      sub_1B08AE258((uint64_t)&v26);
      swift_bridgeObjectRetain();
      while (1)
      {
        *(_QWORD *)&v24 = v4;
        *((_QWORD *)&v24 + 1) = v5;
        v25 = v6;
        swift_bridgeObjectRetain();
        v11 = sub_1B096D018(&v24, v21, v20, v19, a2);
        if (v9)
          break;
        v13 = v11;
        v14 = v12;
        swift_bridgeObjectRelease();
        v5 = *((_QWORD *)&v24 + 1);
        v23 = v24;
        v6 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_1B08B5D40(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v16 = *((_QWORD *)v7 + 2);
        v15 = *((_QWORD *)v7 + 3);
        if (v16 >= v15 >> 1)
          v7 = sub_1B08B5D40((char *)(v15 > 1), v16 + 1, 1, v7);
        *((_QWORD *)v7 + 2) = v16 + 1;
        v17 = &v7[16 * v16];
        *((_QWORD *)v17 + 4) = v13;
        v17[40] = v14;
        --v8;
        v4 = v23;
        if (!v8)
        {
          swift_bridgeObjectRelease();
          v10 = v18;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_13:
      *(_QWORD *)v10 = v4;
      *((_QWORD *)v10 + 1) = v5;
      *((_QWORD *)v10 + 2) = v6;
    }
    return v7;
  }
  return result;
}

uint64_t sub_1B091C288(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int16 v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  if (a5 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v5 = a5;
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)result;
  v9 = *(_QWORD *)(result + 8);
  v10 = *(_QWORD *)(result + 16);
  if (a5)
  {
    v19 = (_QWORD *)result;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = v8;
    while (v5)
    {
      if (__OFSUB__(v9, v11))
        goto LABEL_26;
      if (v9 - v11 <= 1)
      {
        swift_bridgeObjectRetain();
        sub_1B0A1D8A0();
        swift_bridgeObjectRelease();
        sub_1B08A36F0();
        swift_allocError();
        *v18 = 0;
        v18[1] = v11;
        v18[2] = 0xD00000000000002BLL;
        v18[3] = 0x80000001B0A25FD0;
        v18[4] = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return a4;
      }
      if (v11 > 0x7FFFFFFFFFFFFFFDLL)
        goto LABEL_27;
      v12 = v11 + 2;
      if (v9 < v11 + 2)
        goto LABEL_27;
      if (v8 < 0)
        goto LABEL_28;
      v13 = *(_QWORD *)(v10 + 16);
      if (v13 < v11 || v13 < v12)
        goto LABEL_29;
      v14 = bswap32(*(unsigned __int16 *)(v10 + v11 + 32)) >> 16;
      if ((a3 & 1) != 0)
        v15 = v14;
      else
        v15 = *(_WORD *)(v10 + v11 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08B5E40(0, *(_QWORD *)(a4 + 16) + 1, 1, (char *)a4);
        a4 = result;
      }
      v17 = *(_QWORD *)(a4 + 16);
      v16 = *(_QWORD *)(a4 + 24);
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_1B08B5E40((char *)(v16 > 1), v17 + 1, 1, (char *)a4);
        a4 = result;
      }
      *(_QWORD *)(a4 + 16) = v17 + 1;
      *(_QWORD *)(a4 + 8 * v17 + 32) = v15;
      v11 += 2;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        v8 = v12;
        v7 = v19;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
LABEL_23:
  *v7 = v8;
  v7[1] = v9;
  v7[2] = v10;
  return a4;
}

uint64_t sub_1B091C4B0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  __int16 v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  if (a5 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v5 = a5;
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)result;
  v9 = *(_QWORD *)(result + 8);
  v10 = *(_QWORD *)(result + 16);
  if (a5)
  {
    v19 = (_QWORD *)result;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = v8;
    while (v5)
    {
      if (__OFSUB__(v9, v11))
        goto LABEL_26;
      if (v9 - v11 <= 1)
      {
        sub_1B0A1D8A0();
        swift_bridgeObjectRelease();
        sub_1B08A36F0();
        swift_allocError();
        *v18 = 0;
        v18[1] = v11;
        v18[2] = 0xD00000000000002BLL;
        v18[3] = 0x80000001B0A25FD0;
        v18[4] = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a4;
      }
      if (v11 > 0x7FFFFFFFFFFFFFFDLL)
        goto LABEL_27;
      v12 = v11 + 2;
      if (v9 < v11 + 2)
        goto LABEL_27;
      if (v8 < 0)
        goto LABEL_28;
      v13 = *(_QWORD *)(v10 + 16);
      if (v13 < v11 || v13 < v12)
        goto LABEL_29;
      v14 = bswap32(*(unsigned __int16 *)(v10 + v11 + 32)) >> 16;
      if ((a3 & 1) != 0)
        v15 = v14;
      else
        v15 = *(_WORD *)(v10 + v11 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08B7B68(0, *(_QWORD *)(a4 + 16) + 1, 1, (char *)a4);
        a4 = result;
      }
      v17 = *(_QWORD *)(a4 + 16);
      v16 = *(_QWORD *)(a4 + 24);
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_1B08B7B68((char *)(v16 > 1), v17 + 1, 1, (char *)a4);
        a4 = result;
      }
      *(_QWORD *)(a4 + 16) = v17 + 1;
      *(_WORD *)(a4 + 2 * v17 + 32) = v15;
      v11 += 2;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        v8 = v12;
        v7 = v19;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
LABEL_23:
  *v7 = v8;
  v7[1] = v9;
  v7[2] = v10;
  return a4;
}

uint64_t sub_1B091C6C8(uint64_t result, uint64_t *a2, void (*a3)(__int128 *__return_ptr, uint64_t *), uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a4;
  if (a6 < 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v7 = v6;
  v8 = a6;
  v10 = (_QWORD *)result;
  v11 = *(_QWORD *)result;
  v12 = *(_QWORD *)(result + 8);
  v13 = *(_QWORD *)(result + 16);
  if (a6)
  {
    v18 = (_QWORD *)result;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    while (v8)
    {
      v21 = v11;
      v22 = v12;
      v23 = v13;
      swift_bridgeObjectRetain();
      v14 = sub_1B0975EE8((uint64_t)&v21, a3, v24, a2);
      if (v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)a5;
      }
      v15 = v14;
      swift_bridgeObjectRelease();
      v11 = v21;
      v12 = v22;
      v13 = v23;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08B7C5C(0, a5[2] + 1, 1, a5);
        a5 = (_QWORD *)result;
      }
      v17 = a5[2];
      v16 = a5[3];
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_1B08B7C5C((_QWORD *)(v16 > 1), v17 + 1, 1, a5);
        a5 = (_QWORD *)result;
      }
      a5[2] = v17 + 1;
      a5[v17 + 4] = v15;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        v10 = v18;
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
LABEL_14:
  *v10 = v11;
  v10[1] = v12;
  v10[2] = v13;
  return (uint64_t)a5;
}

uint64_t sub_1B091C84C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned __int8 v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v36;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  id v41;
  unsigned __int16 v42;

  if (a4 < 0)
  {
LABEL_53:
    __break(1u);
    return result;
  }
  v5 = v4;
  v6 = a4;
  v7 = (_QWORD *)result;
  v9 = *(_QWORD *)result;
  v8 = *(_QWORD *)(result + 8);
  v10 = *(_QWORD *)(result + 16);
  if (a4)
  {
    v33 = (_QWORD *)result;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    while (v6)
    {
      if (__OFSUB__(v8, v9))
        goto LABEL_46;
      if (v8 - v9 <= 0)
      {
        *(_QWORD *)&v38 = 0;
        *((_QWORD *)&v38 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        sub_1B0A1D8A0();
        swift_bridgeObjectRelease();
        sub_1B08A36F0();
        swift_allocError();
        *v26 = 0;
        v26[1] = v9;
        v26[2] = 0xD00000000000002ALL;
        v26[3] = 0x80000001B0A25FA0;
        v26[4] = 0;
        goto LABEL_42;
      }
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_47;
      v11 = v9 + 1;
      if (v8 < v9 + 1)
        goto LABEL_47;
      if (v9 < 0)
        goto LABEL_48;
      v12 = *(_QWORD *)(v10 + 16);
      if (v12 < v9 || v12 < v11)
        goto LABEL_49;
      v13 = v10 + 32;
      result = swift_bridgeObjectRetain();
      v14 = *(unsigned __int8 *)(v10 + 32 + v9);
      switch(v14)
      {
        case 0xFFu:
          *(_QWORD *)&v38 = v9 + 1;
          *((_QWORD *)&v38 + 1) = v8;
          *(_QWORD *)&v39 = v10;
          swift_bridgeObjectRetain();
          sub_1B08CE184(1, (uint64_t)sub_1B0947070, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE194, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE1A4);
          swift_bridgeObjectRetain();
          sub_1B08CE184(1, (uint64_t)sub_1B0947070, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE194, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE1A4);
          v17 = sub_1B08C9FC0((unint64_t *)&v38, a2);
          v18 = v5;
          if (v5)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1B08CE184(1, (uint64_t)sub_1B0947070, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
            sub_1B08CE184(1, (uint64_t)sub_1B0947070, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
            sub_1B08CE174(1, (uint64_t)sub_1B0947070, 0, 0);
            goto LABEL_39;
          }
          v19 = v17;
          swift_bridgeObjectRelease();
          v8 = *((_QWORD *)&v38 + 1);
          v9 = v38;
          v20 = v39;
          v42 = v19;
          sub_1B0947070(&v42, &v41);
          swift_bridgeObjectRelease();
          v10 = v20;
          v5 = 0;
          sub_1B08CE184(1, (uint64_t)sub_1B0947070, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
          sub_1B08CE184(1, (uint64_t)sub_1B0947070, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
          sub_1B08CE174(1, (uint64_t)sub_1B0947070, 0, 0);
          swift_bridgeObjectRelease();
          LOWORD(v14) = (_WORD)v41;
          break;
        case 0xFEu:
          *(_QWORD *)&v38 = v9 + 1;
          *((_QWORD *)&v38 + 1) = v8;
          *(_QWORD *)&v39 = v10;
          swift_bridgeObjectRetain();
          sub_1B08CE184(1, (uint64_t)sub_1B0947040, 0, 1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE194, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE1A4);
          swift_bridgeObjectRetain();
          sub_1B08CE184(1, (uint64_t)sub_1B0947040, 0, 1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE194, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE1A4);
          v21 = sub_1B08C9FC0((unint64_t *)&v38, a2);
          v18 = v5;
          if (v5)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1B08CE184(1, (uint64_t)sub_1B0947040, 0, 1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
            sub_1B08CE184(1, (uint64_t)sub_1B0947040, 0, 1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
            sub_1B08CE164(1, (uint64_t)sub_1B0947040, 0, 1);
LABEL_39:
            v41 = v18;
            v28 = v18;
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7D0);
            if (swift_dynamicCast())
            {

              v34 = v39;
              v36 = v38;
              v29 = v40;
              sub_1B08A36F0();
              swift_allocError();
              *(_OWORD *)v30 = v36;
              *(_OWORD *)(v30 + 16) = v34;
              *(_QWORD *)(v30 + 32) = v29;
              swift_willThrow();

            }
            else
            {

              sub_1B08A36F0();
              swift_allocError();
              *v31 = v18;
              v31[1] = v11;
              v31[2] = 0x7272652072657355;
              v31[3] = 0xEA0000000000726FLL;
              v31[4] = v18;
              v32 = v18;
LABEL_42:
              swift_willThrow();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return a3;
          }
          v22 = v21;
          swift_bridgeObjectRelease();
          v8 = *((_QWORD *)&v38 + 1);
          v9 = v38;
          v23 = v39;
          v42 = v22;
          sub_1B0947040(&v42, &v41);
          v5 = 0;
          swift_bridgeObjectRelease();
          sub_1B08CE184(1, (uint64_t)sub_1B0947040, 0, 1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
          sub_1B08CE184(1, (uint64_t)sub_1B0947040, 0, 1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
          sub_1B08CE164(1, (uint64_t)sub_1B0947040, 0, 1);
          swift_bridgeObjectRelease();
          LOWORD(v14) = (_WORD)v41;
          v10 = v23;
          break;
        case 0xFDu:
          if (__OFSUB__(v8, v11))
            goto LABEL_50;
          if ((uint64_t)(v8 - v11) <= 1)
          {
            *(_QWORD *)&v38 = 0;
            *((_QWORD *)&v38 + 1) = 0xE000000000000000;
            sub_1B0A1D8A0();
            swift_bridgeObjectRelease();
            sub_1B08A36F0();
            v18 = (void *)swift_allocError();
            *v27 = 0;
            v27[1] = v11;
            v27[2] = 0xD00000000000002BLL;
            v27[3] = 0x80000001B0A25FD0;
            v27[4] = 0;
            swift_willThrow();
            sub_1B08CE184(1, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
            goto LABEL_39;
          }
          v9 += 3;
          if (v9 < (uint64_t)v11 || v8 < v9)
            goto LABEL_51;
          v15 = *(_QWORD *)(v10 + 16);
          if (v15 < v11 || (uint64_t)v15 < v9)
            goto LABEL_52;
          v16 = *(unsigned __int16 *)(v13 + v11);
          sub_1B08CE184(1, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
          swift_bridgeObjectRelease();
          v14 = bswap32(v16) >> 16;
          break;
        default:
          sub_1B08CE184(*(unsigned __int8 *)(v13 + v9), 0, 0, 1, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE164, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE174);
          swift_bridgeObjectRelease();
          ++v9;
          break;
      }
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08B7B68(0, *(_QWORD *)(a3 + 16) + 1, 1, (char *)a3);
        a3 = result;
      }
      v25 = *(_QWORD *)(a3 + 16);
      v24 = *(_QWORD *)(a3 + 24);
      if (v25 >= v24 >> 1)
      {
        result = (uint64_t)sub_1B08B7B68((char *)(v24 > 1), v25 + 1, 1, (char *)a3);
        a3 = result;
      }
      *(_QWORD *)(a3 + 16) = v25 + 1;
      *(_WORD *)(a3 + 2 * v25 + 32) = v14;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        v7 = v33;
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
LABEL_35:
  *v7 = v9;
  v7[1] = v8;
  v7[2] = v10;
  return a3;
}

uint64_t sub_1B091D10C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  if (a5 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v5 = a5;
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)result;
  v9 = *(_QWORD *)(result + 8);
  v10 = *(_QWORD *)(result + 16);
  if (a5)
  {
    v19 = (_QWORD *)result;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = v8;
    while (v5)
    {
      if (__OFSUB__(v9, v11))
        goto LABEL_26;
      if (v9 - v11 <= 3)
      {
        swift_bridgeObjectRetain();
        sub_1B0A1D8A0();
        swift_bridgeObjectRelease();
        sub_1B08A36F0();
        swift_allocError();
        *v18 = 0;
        v18[1] = v11;
        v18[2] = 0xD00000000000002ALL;
        v18[3] = 0x80000001B0A26270;
        v18[4] = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        return a4;
      }
      if (v11 > 0x7FFFFFFFFFFFFFFBLL)
        goto LABEL_27;
      v12 = v11 + 4;
      if (v9 < v11 + 4)
        goto LABEL_27;
      if (v8 < 0)
        goto LABEL_28;
      v13 = *(_QWORD *)(v10 + 16);
      if (v13 < v11 || v13 < v12)
        goto LABEL_29;
      v14 = bswap32(*(_DWORD *)(v10 + v11 + 32));
      if ((a3 & 1) != 0)
        v15 = v14;
      else
        v15 = *(_DWORD *)(v10 + v11 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08B85FC(0, *(_QWORD *)(a4 + 16) + 1, 1, (char *)a4);
        a4 = result;
      }
      v17 = *(_QWORD *)(a4 + 16);
      v16 = *(_QWORD *)(a4 + 24);
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_1B08B85FC((char *)(v16 > 1), v17 + 1, 1, (char *)a4);
        a4 = result;
      }
      *(_QWORD *)(a4 + 16) = v17 + 1;
      *(_DWORD *)(a4 + 4 * v17 + 32) = v15;
      v11 += 4;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        v8 = v12;
        v7 = v19;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
LABEL_23:
  *v7 = v8;
  v7[1] = v9;
  v7[2] = v10;
  return a4;
}

uint64_t *sub_1B091D32C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *result;
  if (a3 < 0)
  {
    sub_1B0A1D8A0();
    swift_bridgeObjectRelease();
    sub_1B0A1DA68();
    sub_1B0A1D33C();
    swift_bridgeObjectRelease();
    v5 = 0xD000000000000023;
    v6 = 0x80000001B0A26EC0;
    sub_1B08A36F0();
    swift_allocError();
    *v7 = 2;
    goto LABEL_6;
  }
  v4 = result[1];
  if (__OFSUB__(v4, v3))
  {
    __break(1u);
  }
  else
  {
    if (v4 - v3 < a3)
    {
      sub_1B0A1D8A0();
      swift_bridgeObjectRelease();
      sub_1B0A1DA68();
      sub_1B0A1D33C();
      swift_bridgeObjectRelease();
      v5 = 0xD000000000000024;
      v6 = 0x80000001B0A26E90;
      sub_1B08A36F0();
      swift_allocError();
      *v7 = 0;
LABEL_6:
      v7[1] = v3;
      v7[2] = v5;
      v7[3] = v6;
      v7[4] = 0;
      swift_willThrow();
      return (uint64_t *)v3;
    }
    v8 = v3 + a3;
    if (v3 + a3 >= v3 && v4 >= v8)
    {
      *result = v8;
      return (uint64_t *)v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_1B091D4DC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  sub_1B08A3638(*a1, a1[1]);
  sub_1B08A3638(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_1B091D540(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  sub_1B08A35B0(*a1, a1[1]);
  sub_1B08A35B0(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B091D5A4(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  _QWORD *v31;
  _BYTE *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v3 = a2;
  result = (uint64_t)sub_1B08B6D98(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  v44 = result;
  if (v3 <= 0)
  {
    if (!v3)
      return result;
    goto LABEL_56;
  }
  v6 = *a1;
  v7 = a1[1];
  if (__OFSUB__(v7, *a1))
  {
LABEL_68:
    __break(1u);
    return result;
  }
  v8 = a1[2];
  if ((uint64_t)(v7 - *a1) >= 1)
  {
    v37 = v2;
    v38 = 0;
    LOBYTE(v9) = 0;
    v10 = 0;
    v36 = a1;
    while (1)
    {
      v11 = v6 + 1;
      if (v6 == 0x7FFFFFFFFFFFFFFFLL || v7 < (uint64_t)v11)
      {
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if ((v6 & 0x8000000000000000) != 0)
        goto LABEL_61;
      v13 = *(_QWORD *)(v8 + 16);
      if (v13 < v6 || v13 < v11)
        goto LABEL_62;
      v40 = v10;
      v15 = *(unsigned __int8 *)(v8 + v6 + 32);
      *a1 = v11;
      a1[1] = v7;
      a1[2] = v8;
      if ((v15 & 8) != 0)
      {
        v41 = v6 + 1;
        v42 = v7;
        v43 = v8;
        swift_bridgeObjectRetain_n();
        v21 = sub_1B08C9FC0(&v41, v20);
        if (v37)
        {
          swift_bridgeObjectRelease();
          goto LABEL_54;
        }
        v22 = v21;
        v37 = 0;
        swift_bridgeObjectRelease();
        v11 = v41;
        v23 = v43;
        if (!v22)
        {
          v41 = 0;
          v42 = 0xE000000000000000;
          sub_1B0A1D8A0();
          sub_1B0A1D33C();
          sub_1B0A1D900();
          sub_1B0A1D33C();
          v33 = v41;
          v34 = v42;
          sub_1B08A36F0();
          swift_allocError();
          *v35 = 3;
          v35[1] = v11;
          v35[2] = v33;
          v35[3] = v34;
          v35[4] = 0;
          swift_willThrow();
          goto LABEL_54;
        }
        v24 = v42;
        swift_bridgeObjectRelease();
        *a1 = v11;
        a1[1] = v24;
        v39 = v24;
        a1[2] = v23;
        v19 = v22 + 1;
        v25 = sub_1B0A1D4D4();
        *(_QWORD *)(v25 + 16) = v19;
        *(_BYTE *)(v25 + 32) = v15;
        memset((void *)(v25 + 33), v15, v22);
        result = sub_1B08A42A4(v25);
        v8 = v23;
      }
      else
      {
        v39 = v7;
        v16 = v44;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08B6D98(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
          v16 = result;
        }
        v18 = *(_QWORD *)(v16 + 16);
        v17 = *(_QWORD *)(v16 + 24);
        if (v18 >= v17 >> 1)
        {
          result = (uint64_t)sub_1B08B6D98((char *)(v17 > 1), v18 + 1, 1, (char *)v16);
          v16 = result;
        }
        *(_QWORD *)(v16 + 16) = v18 + 1;
        *(_BYTE *)(v16 + v18 + 32) = v15;
        v44 = v16;
        v19 = 1;
      }
      v26 = 1;
      if ((v15 & 0x10) == 0)
        v26 = 2;
      v27 = 3;
      if ((v15 & 0x10) != 0)
        v27 = 0;
      if ((v15 & 2) == 0)
        v26 = v27;
      v28 = qword_1B0A385F0[v26] * v19;
      v10 = v40 + v28;
      if (__OFADD__(v40, v28))
        goto LABEL_63;
      if ((v15 & 4) != 0)
      {
        v29 = __OFADD__(v38, v19);
        v38 += v19;
        v30 = v29;
        if ((v15 & 0x20) != 0)
        {
          if (v30)
            goto LABEL_67;
        }
        else if (v30)
        {
          goto LABEL_66;
        }
      }
      else if ((v15 & 0x20) == 0)
      {
        v29 = __OFADD__(v38, 2 * v19);
        v38 += 2 * v19;
        if (v29)
          goto LABEL_65;
      }
      if ((v9 & 1) != 0)
        LOBYTE(v9) = 1;
      else
        v9 = (v15 >> 6) & 1;
      v7 = v39;
      v3 -= v19;
      if (v3 < 1)
        break;
      if (__OFSUB__(v39, v11))
        goto LABEL_64;
      v6 = v11;
      a1 = v36;
      if ((uint64_t)(v39 - v11) < 1)
        goto LABEL_53;
    }
    result = v44;
    if (!v3)
      return result;
LABEL_56:
    swift_bridgeObjectRelease();
    sub_1B08ABB40();
    swift_allocError();
    *v32 = 5;
    return swift_willThrow();
  }
  v11 = *a1;
LABEL_53:
  v41 = 0;
  v42 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1B0A1D8A0();
  swift_bridgeObjectRelease();
  sub_1B08A36F0();
  swift_allocError();
  *v31 = 0;
  v31[1] = v11;
  v31[2] = 0xD00000000000002ALL;
  v31[3] = 0x80000001B0A25FA0;
  v31[4] = 0;
  swift_willThrow();
LABEL_54:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B091DA2C(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t i;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  __int128 v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  _BYTE v82[72];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _OWORD v88[4];
  uint64_t v89;

  if (a3 < 1)
    return result;
  v11 = result;
  result = sub_1B091C288((uint64_t)a2, (uint64_t)a2, 1, MEMORY[0x1E0DEE9D8], a3);
  if (v6)
    return result;
  v12 = result;
  v81 = a2[2];
  v78 = *(_OWORD *)a2;
  *(_QWORD *)&v79 = v81;
  swift_bridgeObjectRetain_n();
  v14 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v78, v13, 1);
  swift_bridgeObjectRelease();
  v80 = v78;
  v81 = v79;
  sub_1B091D32C((uint64_t *)&v80, v15, v14);
  result = swift_bridgeObjectRelease();
  v16 = v81;
  *(_OWORD *)a2 = v80;
  a2[2] = v16;
  v17 = *(_QWORD *)(v12 + 16);
  if (!v17)
  {
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v18 = *(_QWORD *)(v12 + 32 + 8 * v17 - 8);
  if (__OFADD__(v18, 1))
    goto LABEL_73;
  v19 = sub_1B091D5A4(a2, v18 + 1);
  v21 = v20;
  v23 = sub_1B091D32C((uint64_t *)a2, v22, v22);
  v72 = v24;
  v74 = v23;
  v25 = (uint64_t)sub_1B091D32C((uint64_t *)a2, v24, v21);
  v71 = v26;
  sub_1B08CE970(a4 + 32, (uint64_t)v82, &qword_1EEEBA820);
  result = sub_1B08CE970((uint64_t)v82, (uint64_t)v88, &qword_1EEEBA820);
  if (!v89)
    goto LABEL_15;
  v85 = v88[2];
  v86 = v88[3];
  v87 = v89;
  v83 = v88[0];
  v84 = v88[1];
  result = sub_1B0946AFC(v11);
  if ((~*(_QWORD *)&a6 & 0x7FF0000000000000) == 0)
    goto LABEL_88;
  if (a6 <= -9.22337204e18)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v27 = (uint64_t)v74;
  if (a6 >= 9.22337204e18)
  {
LABEL_90:
    __break(1u);
    return result;
  }
  v77 = result - (uint64_t)a6;
  if (!__OFSUB__(result, (uint64_t)a6))
    goto LABEL_16;
  __break(1u);
LABEL_15:
  v77 = 0;
  v27 = (uint64_t)v74;
LABEL_16:
  v28 = *(_QWORD *)(v19 + 16);
  if (v28)
  {
    v73 = 0;
    v29 = 0;
    v30 = 0;
    v67 = v19 + 32;
    v65 = *(_QWORD *)(v19 + 16);
    v64 = v28 - 1;
    v70 = v19;
LABEL_18:
    v66 = v29;
    for (i = v30; v65 != i; ++i)
    {
      if (i >= *(_QWORD *)(v19 + 16))
        goto LABEL_74;
      v32 = *(_BYTE *)(v67 + i);
      if ((v32 & 2) != 0)
      {
        v39 = a2[2];
        v69 = v39;
        *(_QWORD *)&v78 = v27;
        *((_QWORD *)&v78 + 1) = v72;
        *(_QWORD *)&v79 = v39;
        swift_bridgeObjectRetain_n();
        if ((v32 & 0x10) != 0)
        {
          v44 = sub_1B08C9FC0((unint64_t *)&v78, v40);
          swift_bridgeObjectRelease();
          v68 = v44;
          v38 = *((_QWORD *)&v78 + 1);
          v45 = v78;
          result = swift_bridgeObjectRelease();
          v37 = v45;
        }
        else
        {
          sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          swift_bridgeObjectRetain();
          sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          v42 = sub_1B08C9FC0((unint64_t *)&v78, v41);
          swift_bridgeObjectRelease();
          v38 = *((_QWORD *)&v78 + 1);
          v75 = v78;
          swift_bridgeObjectRelease();
          v68 = -(uint64_t)v42;
          sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          swift_bridgeObjectRelease();
          result = sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          v37 = v75;
        }
      }
      else
      {
        v33 = a2[2];
        v69 = v33;
        if ((v32 & 0x10) != 0)
        {
          v43 = v27;
          result = sub_1B091FE10(0, 0, 0, 0, 0);
          if (v72 < v43)
            goto LABEL_78;
          v46 = v71;
          v37 = v43;
          goto LABEL_39;
        }
        if (__OFSUB__(v72, v27))
          goto LABEL_80;
        if (v72 - v27 <= 1)
        {
          *(_QWORD *)&v78 = 0;
          *((_QWORD *)&v78 + 1) = 0xE000000000000000;
          v61 = v27;
          swift_bridgeObjectRetain_n();
          sub_1B0A1D8A0();
          swift_bridgeObjectRelease();
          sub_1B08A36F0();
          swift_allocError();
          *v62 = 0;
          v62[1] = v61;
          v62[2] = 0xD00000000000002ALL;
          v62[3] = 0x80000001B0A26360;
          v62[4] = 0;
          swift_willThrow();
          swift_bridgeObjectRelease_n();
          break;
        }
        if (v27 > 0x7FFFFFFFFFFFFFFDLL)
          goto LABEL_81;
        v34 = v27 + 2;
        if (v72 < v27 + 2)
          goto LABEL_81;
        if (v27 < 0)
          goto LABEL_82;
        v35 = v27;
        v36 = *(_QWORD *)(v33 + 16);
        if (v36 < v35 || v36 < v34)
          goto LABEL_83;
        v68 = (__int16)(bswap32(*(unsigned __int16 *)(v33 + v35 + 32)) >> 16);
        v37 = v34;
        v38 = v72;
      }
      v46 = v71;
      if (v38 < v37)
        goto LABEL_76;
      v47 = __OFADD__(v77, v68);
      v77 += v68;
      if (v47)
      {
        sub_1B08A38A0();
        swift_allocError();
        swift_willThrow();
        break;
      }
      v72 = v38;
LABEL_39:
      v76 = v37;
      if ((v32 & 4) != 0)
      {
        *(_QWORD *)&v78 = v25;
        *((_QWORD *)&v78 + 1) = v46;
        *(_QWORD *)&v79 = v69;
        swift_bridgeObjectRetain_n();
        if ((v32 & 0x20) != 0)
        {
          v54 = sub_1B08C9FC0((unint64_t *)&v78, v50);
          swift_bridgeObjectRelease();
          v49 = v54;
          v55 = *((_QWORD *)&v78 + 1);
          v25 = v78;
          result = swift_bridgeObjectRelease();
          v46 = v55;
        }
        else
        {
          sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          swift_bridgeObjectRetain();
          sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          v52 = sub_1B08C9FC0((unint64_t *)&v78, v51);
          swift_bridgeObjectRelease();
          v53 = v78;
          swift_bridgeObjectRelease();
          v49 = -(uint64_t)v52;
          sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          swift_bridgeObjectRelease();
          result = sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          v46 = *((_QWORD *)&v53 + 1);
          v25 = v53;
        }
      }
      else
      {
        if ((v32 & 0x20) != 0)
        {
          result = sub_1B091FE10(0, 0, 0, 0, 0);
          if (v71 < v25)
            goto LABEL_79;
          goto LABEL_57;
        }
        if (__OFSUB__(v46, v25))
          goto LABEL_84;
        if (v46 - v25 <= 1)
        {
          *(_QWORD *)&v78 = 0;
          *((_QWORD *)&v78 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain_n();
          sub_1B0A1D8A0();
          swift_bridgeObjectRelease();
          sub_1B08A36F0();
          swift_allocError();
          *v63 = 0;
          v63[1] = v25;
          v63[2] = 0xD00000000000002ALL;
          v63[3] = 0x80000001B0A26360;
          v63[4] = 0;
          swift_willThrow();
          swift_bridgeObjectRelease_n();
          break;
        }
        if (v25 > 0x7FFFFFFFFFFFFFFDLL || v46 < v25 + 2)
          goto LABEL_85;
        if (v25 < 0)
          goto LABEL_86;
        v48 = *(_QWORD *)(v69 + 16);
        if (v48 < v25 || v48 < v25 + 2)
          goto LABEL_87;
        v49 = (__int16)(bswap32(*(unsigned __int16 *)(v69 + v25 + 32)) >> 16);
        v25 += 2;
      }
      if (v46 < v25)
        goto LABEL_77;
      v47 = __OFADD__(v73, v49);
      v73 += v49;
      if (v47)
      {
        sub_1B08A38A0();
        swift_allocError();
        swift_willThrow();
        break;
      }
      v71 = v46;
LABEL_57:
      v56 = *a5;
      result = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v56;
      v57 = (uint64_t *)v25;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08B6DA4(0, *(_QWORD *)(v56 + 16) + 1, 1, (char *)v56);
        v56 = result;
        *a5 = result;
      }
      v27 = v76;
      v59 = *(_QWORD *)(v56 + 16);
      v58 = *(_QWORD *)(v56 + 24);
      if (v59 >= v58 >> 1)
      {
        result = (uint64_t)sub_1B08B6DA4((char *)(v58 > 1), v59 + 1, 1, (char *)v56);
        v27 = v76;
        v56 = result;
      }
      *(_QWORD *)(v56 + 16) = v59 + 1;
      v60 = v56 + 16 * v59;
      *(double *)(v60 + 32) = (double)v77;
      *(double *)(v60 + 40) = (double)v73;
      *a5 = v56;
      if (v66 >= *(_QWORD *)(v12 + 16))
        goto LABEL_75;
      v25 = (uint64_t)v57;
      if (i == *(_QWORD *)(v12 + 32 + 8 * v66))
      {
        v29 = v66 + 1;
        v30 = i + 1;
        v19 = v70;
        if (v64 != i)
          goto LABEL_18;
        break;
      }
      v19 = v70;
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B091E720(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  __int128 v54;
  uint64_t v55;
  unsigned __int8 v56;
  __int128 v57;
  uint64_t v58;
  float64x2_t v59;
  unint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  int8x16_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  float64x2_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  _BYTE v86[72];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  _OWORD v92[4];
  uint64_t v93;

  if (a3 >= 1)
  {
    v13 = result;
    result = sub_1B091C288((uint64_t)a2, (uint64_t)a2, 1, MEMORY[0x1E0DEE9D8], a3);
    if (!v7)
    {
      v14 = result;
      v85 = a2[2];
      v82 = *(_OWORD *)a2;
      *(_QWORD *)&v83 = v85;
      swift_bridgeObjectRetain_n();
      v16 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v82, v15, 1);
      swift_bridgeObjectRelease();
      v84 = v82;
      v85 = v83;
      sub_1B091D32C((uint64_t *)&v84, v17, v16);
      result = swift_bridgeObjectRelease();
      v18 = v85;
      *(_OWORD *)a2 = v84;
      a2[2] = v18;
      v19 = *(_QWORD *)(v14 + 16);
      if (v19)
      {
        v20 = *(_QWORD *)(v14 + 32 + 8 * v19 - 8);
        if (!__OFADD__(v20, 1))
        {
          v21 = sub_1B091D5A4(a2, v20 + 1);
          v23 = v22;
          v25 = sub_1B091D32C((uint64_t *)a2, v24, v24);
          v78 = v26;
          v80 = (uint64_t)v25;
          v27 = sub_1B091D32C((uint64_t *)a2, v26, v23);
          v75 = v28;
          v76 = v27;
          sub_1B08CE970(a4 + 32, (uint64_t)v86, &qword_1EEEBA820);
          result = sub_1B08CE970((uint64_t)v86, (uint64_t)v92, &qword_1EEEBA820);
          if (!v93)
            goto LABEL_15;
          v89 = v92[2];
          v90 = v92[3];
          v91 = v93;
          v87 = v92[0];
          v88 = v92[1];
          result = sub_1B0946AFC(v13);
          if ((~*(_QWORD *)&a7 & 0x7FF0000000000000) != 0)
          {
            if (a7 > -9.22337204e18)
            {
              if (a7 < 9.22337204e18)
              {
                v79 = result - (uint64_t)a7;
                if (!__OFSUB__(result, (uint64_t)a7))
                  goto LABEL_16;
                __break(1u);
LABEL_15:
                v79 = 0;
LABEL_16:
                v29 = *(_QWORD *)(v21 + 16);
                if (!v29)
                  goto LABEL_4;
                v74 = 0;
                v30 = 0;
                v31 = 0;
                v71 = v21 + 32;
                v67 = (float64x2_t *)(a6 + 152);
                v68 = v21;
                v69 = *(_QWORD *)(v21 + 16);
                v66 = v29 - 1;
                while (1)
                {
                  v70 = v30;
                  v32 = 1;
                  v33 = v31;
                  while (1)
                  {
                    if (v33 >= *(_QWORD *)(v21 + 16))
                      goto LABEL_80;
                    v34 = *(_BYTE *)(v71 + v33);
                    if ((v32 & 1) != 0)
                    {
                      *(_QWORD *)(a6 + 128) = 0;
                      *(_QWORD *)(a6 + 136) = 0;
                      *(_BYTE *)(a6 + 144) = 1;
                      v67->f64[0] = 0.0;
                      *(_QWORD *)(a6 + 160) = 0;
                      *(_BYTE *)(a6 + 168) = 1;
                    }
                    v77 = v34;
                    if ((v34 & 2) != 0)
                    {
                      v41 = a2[2];
                      *(_QWORD *)&v82 = v80;
                      *((_QWORD *)&v82 + 1) = v78;
                      *(_QWORD *)&v83 = v41;
                      if ((v34 & 0x10) != 0)
                      {
                        swift_bridgeObjectRetain_n();
                        v46 = sub_1B08C9FC0((unint64_t *)&v82, v45);
                        v72 = v41;
                        swift_bridgeObjectRelease();
                        v73 = v46;
                        v39 = *((_QWORD *)&v82 + 1);
                        v47 = v82;
                        result = swift_bridgeObjectRelease();
                        v38 = v47;
                      }
                      else
                      {
                        swift_bridgeObjectRetain_n();
                        sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        swift_bridgeObjectRetain();
                        sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        v43 = sub_1B08C9FC0((unint64_t *)&v82, v42);
                        swift_bridgeObjectRelease();
                        v81 = v82;
                        v44 = v41;
                        v39 = *((_QWORD *)&v82 + 1);
                        v72 = v44;
                        swift_bridgeObjectRelease();
                        v73 = -(uint64_t)v43;
                        sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        swift_bridgeObjectRelease();
                        result = sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        v38 = v81;
                        v21 = v68;
                      }
                      v40 = v75;
                      v36 = (uint64_t)v76;
                      v34 = v77;
                    }
                    else
                    {
                      v35 = a2[2];
                      if ((v34 & 0x10) != 0)
                      {
                        result = sub_1B091FE10(0, 0, 0, 0, 0);
                        v38 = v80;
                        if (v78 < v80)
                          goto LABEL_84;
                        v40 = v75;
                        v36 = (uint64_t)v76;
                        v34 = v77;
                        goto LABEL_42;
                      }
                      v36 = (uint64_t)v76;
                      if (__OFSUB__(v78, v80))
                        goto LABEL_86;
                      if (v78 - v80 <= 1)
                      {
                        *(_QWORD *)&v82 = 0;
                        *((_QWORD *)&v82 + 1) = 0xE000000000000000;
                        v64 = v80;
LABEL_77:
                        swift_bridgeObjectRetain_n();
                        sub_1B0A1D8A0();
                        swift_bridgeObjectRelease();
                        sub_1B08A36F0();
                        swift_allocError();
                        *v65 = 0;
                        v65[1] = v64;
                        v65[2] = 0xD00000000000002ALL;
                        v65[3] = 0x80000001B0A26360;
                        v65[4] = 0;
                        swift_willThrow();
                        swift_bridgeObjectRelease_n();
                        goto LABEL_4;
                      }
                      if (v80 > 0x7FFFFFFFFFFFFFFDLL || v78 < v80 + 2)
                        goto LABEL_87;
                      if (v80 < 0)
                        goto LABEL_88;
                      v37 = *(_QWORD *)(v35 + 16);
                      if (v37 < v80 || v37 < v80 + 2)
                        goto LABEL_89;
                      v72 = a2[2];
                      v73 = (__int16)(bswap32(*(unsigned __int16 *)(v35 + v80 + 32)) >> 16);
                      v38 = v80 + 2;
                      v39 = v78;
                      v40 = v75;
                    }
                    if (v39 < v38)
                      goto LABEL_82;
                    v48 = __OFADD__(v79, v73);
                    v79 += v73;
                    if (v48)
                      goto LABEL_74;
                    v78 = v39;
                    v35 = v72;
LABEL_42:
                    v80 = v38;
                    if ((v34 & 4) != 0)
                    {
                      *(_QWORD *)&v82 = v36;
                      *((_QWORD *)&v82 + 1) = v40;
                      *(_QWORD *)&v83 = v35;
                      if ((v34 & 0x20) != 0)
                      {
                        swift_bridgeObjectRetain_n();
                        v56 = sub_1B08C9FC0((unint64_t *)&v82, v55);
                        swift_bridgeObjectRelease();
                        v51 = v56;
                        v57 = v82;
                        result = swift_bridgeObjectRelease();
                        v40 = *((_QWORD *)&v57 + 1);
                        v49 = v57;
                      }
                      else
                      {
                        swift_bridgeObjectRetain_n();
                        sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        swift_bridgeObjectRetain();
                        sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        v53 = sub_1B08C9FC0((unint64_t *)&v82, v52);
                        swift_bridgeObjectRelease();
                        v54 = v82;
                        swift_bridgeObjectRelease();
                        v51 = -(uint64_t)v53;
                        sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        swift_bridgeObjectRelease();
                        result = sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
                        v40 = *((_QWORD *)&v54 + 1);
                        v49 = v54;
                      }
                      v21 = v68;
                      v34 = v77;
                    }
                    else
                    {
                      if ((v34 & 0x20) != 0)
                      {
                        result = sub_1B091FE10(0, 0, 0, 0, 0);
                        if (v75 < (uint64_t)v76)
                          goto LABEL_85;
                        v58 = v74;
                        v34 = v77;
                        goto LABEL_62;
                      }
                      if (__OFSUB__(v40, v36))
                        goto LABEL_90;
                      if (v40 - v36 <= 1)
                      {
                        *(_QWORD *)&v82 = 0;
                        *((_QWORD *)&v82 + 1) = 0xE000000000000000;
                        v64 = v36;
                        goto LABEL_77;
                      }
                      if (v36 > 0x7FFFFFFFFFFFFFFDLL)
                        goto LABEL_91;
                      v49 = v36 + 2;
                      if (v40 < v36 + 2)
                        goto LABEL_91;
                      if (v36 < 0)
                        goto LABEL_92;
                      v50 = *(_QWORD *)(v35 + 16);
                      if (v50 < v36 || v50 < v49)
                        goto LABEL_93;
                      v51 = (__int16)(bswap32(*(unsigned __int16 *)(v35 + v36 + 32)) >> 16);
                    }
                    if (v40 < v49)
                      goto LABEL_83;
                    v58 = v74 + v51;
                    if (__OFADD__(v74, v51))
                    {
LABEL_74:
                      sub_1B08A38A0();
                      swift_allocError();
                      swift_willThrow();
                      goto LABEL_4;
                    }
                    v75 = v40;
                    v76 = (uint64_t *)v49;
LABEL_62:
                    v74 = v58;
                    v59 = vaddq_f64(*(float64x2_t *)(a6 + 240), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a6 + 176), (double)v79), *(float64x2_t *)(a6 + 208), (double)v58));
                    result = sub_1B091A98C((v34 & 1) == 0, a5, v59.f64[0], v59.f64[1]);
                    v60 = v70;
                    if (v70 >= *(_QWORD *)(v14 + 16))
                      goto LABEL_81;
                    if (v33 == *(_QWORD *)(v14 + 32 + 8 * v70))
                      break;
                    v32 = 0;
                    if (v69 == ++v33)
                      goto LABEL_4;
                  }
                  if ((*(_BYTE *)(a6 + 144) & 1) == 0 && *(_BYTE *)(a6 + 168) != 1)
                  {
                    v61 = *(float64x2_t *)(a6 + 128);
                    if ((*(_BYTE *)(a5 + 32) & 1) != 0)
                    {
                      v62 = *(float64x2_t *)(a6 + 128);
                    }
                    else
                    {
                      v62 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)(a5 + 16), v61), *(int8x16_t *)(a5 + 16), (int8x16_t)v61);
                      v61 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v61, *(float64x2_t *)a5), *(int8x16_t *)a5, (int8x16_t)v61);
                    }
                    v21 = v68;
                    v63 = vbslq_s8((int8x16_t)vcgeq_f64(v62, *v67), (int8x16_t)v62, *(int8x16_t *)v67);
                    *(int8x16_t *)a5 = vbslq_s8((int8x16_t)vcgtq_f64(*v67, v61), (int8x16_t)v61, *(int8x16_t *)v67);
                    *(int8x16_t *)(a5 + 16) = v63;
                    *(_BYTE *)(a5 + 32) = 0;
                    v60 = v70;
                  }
                  v31 = v33 + 1;
                  v30 = v60 + 1;
                  if (v66 == v33)
                  {
LABEL_4:
                    swift_bridgeObjectRelease();
                    return swift_bridgeObjectRelease();
                  }
                }
              }
LABEL_96:
              __break(1u);
              return result;
            }
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
  }
  return result;
}

uint64_t sub_1B091F3A4(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, id *a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  signed __int16 v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  BOOL v48;
  uint64_t v49;
  signed __int16 v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  float64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  _BYTE v77[72];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _OWORD v83[4];
  uint64_t v84;

  if (a3 < 1)
    return result;
  v13 = result;
  result = sub_1B091C288((uint64_t)a2, (uint64_t)a2, 1, MEMORY[0x1E0DEE9D8], a3);
  if (v7)
    return result;
  v14 = result;
  v76 = a2[2];
  v73 = *(_OWORD *)a2;
  *(_QWORD *)&v74 = v76;
  swift_bridgeObjectRetain_n();
  v16 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v73, v15, 1);
  swift_bridgeObjectRelease();
  v75 = v73;
  v76 = v74;
  sub_1B091D32C((uint64_t *)&v75, v17, v16);
  result = swift_bridgeObjectRelease();
  v18 = v76;
  *(_OWORD *)a2 = v75;
  a2[2] = v18;
  v19 = *(_QWORD *)(v14 + 16);
  if (!v19)
  {
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v20 = *(_QWORD *)(v14 + 32 + 8 * v19 - 8);
  if (__OFADD__(v20, 1))
    goto LABEL_60;
  v21 = sub_1B091D5A4(a2, v20 + 1);
  v23 = v22;
  v25 = v24;
  v72 = v21;
  if ((v26 & 1) != 0)
    objc_msgSend(*a5, sel_setOverlaps_, 1);
  v27 = sub_1B091D32C((uint64_t *)a2, v22, v23);
  v69 = v28;
  v29 = sub_1B091D32C((uint64_t *)a2, v28, v25);
  v65 = v30;
  v66 = v29;
  sub_1B08CE970(a4 + 32, (uint64_t)v77, &qword_1EEEBA820);
  sub_1B08CE970((uint64_t)v77, (uint64_t)v83, &qword_1EEEBA820);
  if (!v84)
  {
    v71 = 0;
    result = v72;
    v31 = v14 + 32;
    goto LABEL_17;
  }
  v80 = v83[2];
  v81 = v83[3];
  v82 = v84;
  v78 = v83[0];
  v79 = v83[1];
  result = sub_1B0946AFC(v13);
  v31 = v14 + 32;
  if ((~*(_QWORD *)&a7 & 0x7FF0000000000000) == 0)
    goto LABEL_67;
  if (a7 <= -9.22337204e18)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (a7 >= 9.22337204e18)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v71 = result - (uint64_t)a7;
  if (__OFSUB__(result, (uint64_t)a7))
  {
LABEL_70:
    __break(1u);
    return result;
  }
  result = v72;
LABEL_17:
  v32 = *(_QWORD *)(result + 16);
  if (v32)
  {
    v67 = v27;
    v68 = 0;
    v33 = 0;
    v34 = 0;
    v35 = a2[2];
    v61 = *(_QWORD *)(result + 16);
    v60 = v32 - 1;
    v63 = result + 32;
    v64 = v35;
LABEL_19:
    v36 = 1;
    v37 = v34;
    v62 = v33;
    do
    {
      if (v37 >= *(_QWORD *)(result + 16))
        goto LABEL_61;
      v38 = *(_BYTE *)(v63 + v37);
      if ((v36 & 1) != 0)
      {
        *(_QWORD *)(a6 + 128) = 0;
        *(_QWORD *)(a6 + 136) = 0;
        *(_BYTE *)(a6 + 144) = 1;
        *(_QWORD *)(a6 + 152) = 0;
        *(_QWORD *)(a6 + 160) = 0;
        *(_BYTE *)(a6 + 168) = 1;
      }
      v70 = v38;
      if ((v38 & 2) != 0)
      {
        if ((v38 & 0x10) == 0)
        {
          *(_QWORD *)&v73 = v67;
          *((_QWORD *)&v73 + 1) = v69;
          *(_QWORD *)&v74 = v35;
          swift_bridgeObjectRetain_n();
          sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          swift_bridgeObjectRetain();
          sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          v43 = sub_1B08C9FC0((unint64_t *)&v73, v42);
          swift_bridgeObjectRelease();
          v45 = *((_QWORD *)&v73 + 1);
          v44 = (uint64_t *)v73;
          swift_bridgeObjectRelease();
          sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          swift_bridgeObjectRelease();
          v41 = -(uint64_t)v43;
          result = sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
          v31 = v14 + 32;
          goto LABEL_31;
        }
        *(_QWORD *)&v73 = v67;
        *((_QWORD *)&v73 + 1) = v69;
        *(_QWORD *)&v74 = v35;
        swift_bridgeObjectRetain_n();
        v47 = sub_1B08C9FC0((unint64_t *)&v73, v46);
        swift_bridgeObjectRelease();
        v41 = v47;
      }
      else
      {
        if ((v38 & 0x10) != 0)
        {
          result = sub_1B091FE10(0, 0, 0, 0, 0);
          if (v69 < (uint64_t)v67)
            goto LABEL_65;
          goto LABEL_36;
        }
        *(_QWORD *)&v73 = v67;
        *((_QWORD *)&v73 + 1) = v69;
        *(_QWORD *)&v74 = v35;
        swift_bridgeObjectRetain_n();
        v40 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v73, v39, 1);
        swift_bridgeObjectRelease();
        v41 = v40;
      }
      v45 = *((_QWORD *)&v73 + 1);
      v44 = (uint64_t *)v73;
      result = swift_bridgeObjectRelease();
LABEL_31:
      v67 = v44;
      v69 = v45;
      if (v45 < (uint64_t)v44)
        goto LABEL_63;
      v48 = __OFADD__(v71, v41);
      v71 += v41;
      v35 = v64;
      v38 = v70;
      if (v48)
        goto LABEL_58;
LABEL_36:
      if ((v38 & 4) == 0)
      {
        if ((v38 & 0x20) != 0)
        {
          result = sub_1B091FE10(0, 0, 0, 0, 0);
          if (v65 < (uint64_t)v66)
            goto LABEL_66;
          v58 = v68;
          goto LABEL_49;
        }
        *(_QWORD *)&v73 = v66;
        *((_QWORD *)&v73 + 1) = v65;
        *(_QWORD *)&v74 = v35;
        swift_bridgeObjectRetain_n();
        v50 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v73, v49, 1);
        swift_bridgeObjectRelease();
        v51 = v50;
        goto LABEL_43;
      }
      if ((v38 & 0x20) != 0)
      {
        *(_QWORD *)&v73 = v66;
        *((_QWORD *)&v73 + 1) = v65;
        *(_QWORD *)&v74 = v35;
        swift_bridgeObjectRetain_n();
        v57 = sub_1B08C9FC0((unint64_t *)&v73, v56);
        swift_bridgeObjectRelease();
        v51 = v57;
LABEL_43:
        v54 = *((_QWORD *)&v73 + 1);
        v55 = (uint64_t *)v73;
        result = swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      *(_QWORD *)&v73 = v66;
      *((_QWORD *)&v73 + 1) = v65;
      *(_QWORD *)&v74 = v35;
      swift_bridgeObjectRetain_n();
      sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      swift_bridgeObjectRetain();
      sub_1B091FE00(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      v53 = sub_1B08C9FC0((unint64_t *)&v73, v52);
      swift_bridgeObjectRelease();
      v54 = *((_QWORD *)&v73 + 1);
      v55 = (uint64_t *)v73;
      swift_bridgeObjectRelease();
      sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      swift_bridgeObjectRelease();
      v51 = -(uint64_t)v53;
      result = sub_1B091FE10(1, (uint64_t)sub_1B091BB54, 0, 1, 0);
      v31 = v14 + 32;
LABEL_44:
      if (v54 < (uint64_t)v55)
        goto LABEL_64;
      v48 = __OFADD__(v68, v51);
      v58 = v68 + v51;
      v35 = v64;
      if (v48)
      {
LABEL_58:
        sub_1B08A38A0();
        swift_allocError();
        swift_willThrow();
        break;
      }
      v65 = v54;
      v66 = v55;
LABEL_49:
      v68 = v58;
      v59 = vaddq_f64(*(float64x2_t *)(a6 + 240), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a6 + 176), (double)v71), *(float64x2_t *)(a6 + 208), (double)v58));
      result = sub_1B091AB54((v70 & 1) == 0, a5, v59.f64[0], v59.f64[1]);
      if (v62 >= *(_QWORD *)(v14 + 16))
        goto LABEL_62;
      result = v72;
      if (v37 == *(_QWORD *)(v31 + 8 * v62))
      {
        if ((*(_BYTE *)(a6 + 144) & 1) == 0 && *(_BYTE *)(a6 + 168) != 1)
          objc_msgSend(*a5, sel_quadCurveTo_control_, *(double *)(a6 + 128), *(double *)(a6 + 136), *(double *)(a6 + 152), *(double *)(a6 + 160));
        v34 = v37 + 1;
        objc_msgSend(*a5, sel_endPath);
        v33 = v62 + 1;
        result = v72;
        if (v60 != v37)
          goto LABEL_19;
        break;
      }
      v36 = 0;
      ++v37;
    }
    while (v61 != v37);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B091FE00(uint64_t result, uint64_t a2, uint64_t a3, char a4, char a5)
{
  if ((a5 & 1) == 0)
    return sub_1B08CE194(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B091FE10(uint64_t result, uint64_t a2, uint64_t a3, char a4, char a5)
{
  if ((a5 & 1) == 0)
    return sub_1B08CE164(result, a2, a3, a4 & 1);
  return result;
}

uint64_t sub_1B091FE20(unint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;

  return sub_1B091A858(a1, a2, a3, v3[4], v3[5], v3[2], v3[3]);
}

uint64_t sub_1B091FE3C()
{
  return swift_deallocObject();
}

double sub_1B091FE4C@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4;

  result = *a1;
  v4 = *(_QWORD *)(v2 + 16);
  *(double *)a2 = *a1;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v4;
  *(double *)(a2 + 24) = result;
  return result;
}

uint64_t *sub_1B091FE60(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B0917A9C(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), ((unint64_t)*(unsigned __int16 *)(v1 + 58) << 16) | ((unint64_t)*(unsigned int *)(v1 + 60) << 32) | *(unsigned __int8 *)(v1 + 56), *(_WORD *)(v1 + 64), *(unint64_t **)(v1 + 72), *(_QWORD *)(v1 + 80));
}

__n128 __swift_memcpy80_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for CompositeGlyphEntry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompositeGlyphEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompositeGlyphEntry()
{
  return &type metadata for CompositeGlyphEntry;
}

ValueMetadata *type metadata accessor for SimpleGlyphFlags()
{
  return &type metadata for SimpleGlyphFlags;
}

unint64_t sub_1B091FF90()
{
  unint64_t result;

  result = qword_1EEEBB668;
  if (!qword_1EEEBB668)
  {
    result = MEMORY[0x1B5E0D530]("}Ew5", &type metadata for SimpleGlyphFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB668);
  }
  return result;
}

unint64_t sub_1B091FFD8()
{
  unint64_t result;

  result = qword_1EEEBB670;
  if (!qword_1EEEBB670)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38224, &type metadata for SimpleGlyphFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB670);
  }
  return result;
}

unint64_t sub_1B0920020()
{
  unint64_t result;

  result = qword_1EEEBB678;
  if (!qword_1EEEBB678)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3827C, &type metadata for SimpleGlyphFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB678);
  }
  return result;
}

unint64_t sub_1B0920068()
{
  unint64_t result;

  result = qword_1EEEBB680;
  if (!qword_1EEEBB680)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A382B4, &type metadata for SimpleGlyphFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB680);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CompositeGlyphEntry.ArgumentInterpretation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B09200F8 + 4 * byte_1B0A381E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B092012C + 4 * byte_1B0A381E0[v4]))();
}

uint64_t sub_1B092012C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0920134(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B092013CLL);
  return result;
}

uint64_t sub_1B0920148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0920150);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0920154(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B092015C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompositeGlyphEntry.ArgumentInterpretation()
{
  return &type metadata for CompositeGlyphEntry.ArgumentInterpretation;
}

ValueMetadata *type metadata accessor for CompositeGlyphFlags()
{
  return &type metadata for CompositeGlyphFlags;
}

unint64_t sub_1B092018C()
{
  unint64_t result;

  result = qword_1EEEBB688;
  if (!qword_1EEEBB688)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38424, &type metadata for CompositeGlyphFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB688);
  }
  return result;
}

unint64_t sub_1B09201D4()
{
  unint64_t result;

  result = qword_1EEEBB690;
  if (!qword_1EEEBB690)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A383F4, &type metadata for CompositeGlyphFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB690);
  }
  return result;
}

unint64_t sub_1B092021C()
{
  unint64_t result;

  result = qword_1EEEBB698;
  if (!qword_1EEEBB698)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3844C, &type metadata for CompositeGlyphFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB698);
  }
  return result;
}

unint64_t sub_1B0920264()
{
  unint64_t result;

  result = qword_1EEEBB6A0;
  if (!qword_1EEEBB6A0)
  {
    result = MEMORY[0x1B5E0D530]("}Cw5\bk\a", &type metadata for CompositeGlyphFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB6A0);
  }
  return result;
}

unint64_t sub_1B09202AC()
{
  unint64_t result;

  result = qword_1EEEBB6A8;
  if (!qword_1EEEBB6A8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A385C4, &type metadata for CompositeGlyphEntry.ArgumentInterpretation);
    atomic_store(result, (unint64_t *)&qword_1EEEBB6A8);
  }
  return result;
}

uint64_t TTFContainer.init(data:residence:)(uint64_t a1, unint64_t a2, char a3)
{
  return sub_1B0922854(a1, a2, a3);
}

char *sub_1B0920308(uint64_t a1)
{
  uint64_t v1;
  char *result;
  char *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)MEMORY[0x1E0DEE9D8];
  result = (char *)swift_bridgeObjectRetain();
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  for (i = 32; ; i += 16)
  {
    v6 = *(_QWORD *)(a1 + i);
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *((_QWORD *)v4 + 2);
    v9 = v8 + v7;
    if (__OFADD__(v8, v7))
      break;
    swift_bridgeObjectRetain();
    result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
    {
      if (*(_QWORD *)(v6 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v8 <= v9)
        v10 = v8 + v7;
      else
        v10 = v8;
      result = sub_1B08B65CC(result, v10, 1, v4);
      v4 = result;
      if (*(_QWORD *)(v6 + 16))
      {
LABEL_14:
        if ((*((_QWORD *)v4 + 3) >> 1) - *((_QWORD *)v4 + 2) < v7)
          goto LABEL_23;
        result = (char *)swift_arrayInitWithCopy();
        if (v7)
        {
          v11 = *((_QWORD *)v4 + 2);
          v12 = __OFADD__(v11, v7);
          v13 = v11 + v7;
          if (v12)
            goto LABEL_24;
          *((_QWORD *)v4 + 2) = v13;
        }
        goto LABEL_4;
      }
    }
    if (v7)
      goto LABEL_22;
LABEL_4:
    result = (char *)swift_bridgeObjectRelease();
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

FontParser::TTFContainer __swiftcall TTFContainer.init(constructed:)(Swift::OpaquePointer constructed)
{
  FontParser::FontDataResidence v1;
  FontParser::TTFContainer result;

  v1 = FontParser_FontDataResidence_inMemory;
  result.fonts = constructed;
  result.dataResidence = v1;
  return result;
}

uint64_t TTFContainer.encoded()(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v5;
  uint64_t __dst[53];

  v3 = *(_QWORD *)(a1 + 16);
  sub_1B0920684(v3);
  if (v1)
  {
    sub_1B08A3638(0, 0xC000000000000000);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v3)
    {
      swift_bridgeObjectRetain();
      v5 = 32;
      do
      {
        memcpy(__dst, (const void *)(a1 + v5), 0x1A4uLL);
        sub_1B08ABA58(__dst);
        sub_1B0920824(__dst);
        sub_1B08ABB84(__dst);
        v5 += 424;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
    return sub_1B0920F84();
  }
}

uint64_t sub_1B0920578(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B08A8FAC((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1B0922010(v5);
  *a1 = v2;
  return result;
}

BOOL static TTFFileError.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t TTFFileError.hash(into:)()
{
  return sub_1B0A1DB34();
}

uint64_t TTFFileError.hashValue.getter()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

uint64_t TTFContainer.dataResidence.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t TTFContainer.dataResidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*TTFContainer.dataResidence.modify())()
{
  return nullsub_1;
}

uint64_t TTFContainer.containerType.getter()
{
  return 0;
}

uint64_t sub_1B0920684(unint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE *v4;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1 == 1)
  {
    v5 = 256;
    result = sub_1B0A1CF94();
    *(_QWORD *)(v1 + 24) = 0;
    *(_BYTE *)(v1 + 32) = 1;
  }
  else
  {
    sub_1B08E3F8C("ttcf", 4, (int *)&v5);
    v5 = bswap32(v5);
    sub_1B0A1CF94();
    v5 = 256;
    sub_1B0A1CF94();
    if (!HIDWORD(a1))
    {
      v5 = bswap32(a1);
      sub_1B0A1CF94();
      __asm { BR              X13 }
    }
    sub_1B08A385C();
    swift_allocError();
    *v4 = 1;
    return swift_willThrow();
  }
  return result;
}

void sub_1B0920824(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;

  v3 = v1;
  v27 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(v1 + 32) & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + 24);
    if (__OFADD__(v5, 4))
    {
      __break(1u);
    }
    else if (v5 + 4 >= v5)
    {
      __asm { BR              X13 }
    }
    __break(1u);
    goto LABEL_27;
  }
  v24 = *a1;
  v6 = v24;
  sub_1B08ABA58(a1);
  sub_1B08AE258((uint64_t)&v24);
  v7 = sub_1B0922C08(v6, a1);
  sub_1B08ABB84(a1);
  sub_1B08AE280((uint64_t)&v24);
  if (*(_QWORD *)(v7 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAE10);
    v8 = (char *)sub_1B0A1D9D8();
  }
  else
  {
    v8 = (char *)MEMORY[0x1E0DEE9E0];
  }
  v25 = v8;
  v9 = swift_bridgeObjectRetain();
  sub_1B08E7878(v9, 1, &v25);
  if (v2)
  {
    swift_unexpectedError();
    __break(1u);
    swift_release();
    __break(1u);
    JUMPOUT(0x1B0920F54);
  }
  swift_bridgeObjectRelease();
  v10 = v25;
  v11 = *((_QWORD *)v25 + 2);
  if (!v11)
  {
    swift_release();
    sub_1B090C09C();
    return;
  }
  v12 = __clz(v11) ^ 0x3F;
  if (v12 >= 0x3B)
  {
    sub_1B08A38A0();
    swift_allocError();
LABEL_17:
    swift_willThrow();
    swift_release();
    return;
  }
  if (v11 >= 0x10000)
    goto LABEL_16;
  v13 = 16 << v12;
  LOWORD(v25) = bswap32(v11) >> 16;
  sub_1B0A1CF94();
  if ((unint64_t)(16 << v12) >= 0x10000
    || (LOWORD(v25) = bswap32(v13) >> 16,
        sub_1B0A1CF94(),
        LOWORD(v25) = (_WORD)v12 << 8,
        sub_1B0A1CF94(),
        v14 = 16 * v11 - v13,
        v14 >= 0x10000))
  {
LABEL_16:
    sub_1B08A385C();
    swift_allocError();
    *v15 = 1;
    goto LABEL_17;
  }
  LOWORD(v25) = bswap32(v14) >> 16;
  sub_1B0A1CF94();
  swift_retain();
  v16 = swift_bridgeObjectRetain();
  v17 = (char *)sub_1B08E80CC(v16);
  swift_release();
  v25 = v17;
  sub_1B0920578(&v25);
  swift_release();
  if (*((_QWORD *)v25 + 2))
  {
    if (*((_QWORD *)v10 + 2))
    {
      v18 = *((_DWORD *)v25 + 8);
      v19 = sub_1B08F9E7C(v18);
      if ((v20 & 1) != 0)
      {
        v21 = *((_QWORD *)v10 + 7) + 16 * v19;
        v22 = *(char **)v21;
        v23 = *(_QWORD *)(v21 + 8);
        v25 = v22;
        v26 = v23;
        sub_1B08A35B0((uint64_t)v22, v23);
        if (v18 == 1751474532)
        {
          sub_1B08A35B0((uint64_t)v22, v23);
          sub_1B090BE34(8, 12, (uint64_t)v22, v23);
          sub_1B08A3638((uint64_t)v22, v23);
          sub_1B0A1CF7C();
          v23 = v26;
          v22 = v25;
        }
        sub_1B0A1CF94();
        sub_1B08A35B0((uint64_t)v22, v23);
        sub_1B090C2E8((uint64_t)v22, v23);
        sub_1B08A3638((uint64_t)v22, v23);
        sub_1B0A1CF94();
        __asm { BR              X11 }
      }
LABEL_28:
      __break(1u);
      JUMPOUT(0x1B0920F0CLL);
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  swift_release();
  swift_release();
}

uint64_t sub_1B0920F84()
{
  __int128 *v0;
  _QWORD *v2;
  __int128 v3;

  v2 = (_QWORD *)*((_QWORD *)v0 + 2);
  v3 = *v0;
  if (v2[2])
  {
    swift_bridgeObjectRetain();
    sub_1B08A35B0(v2[6], v2[7]);
    __asm { BR              X11 }
  }
  sub_1B08A35B0(v3, *((unint64_t *)&v3 + 1));
  sub_1B08A3638(v3, *((unint64_t *)&v3 + 1));
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B0921630@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v7;

  result = sub_1B0922854(a1, a2, a3);
  if (!v4)
  {
    *(_QWORD *)a4 = result;
    *(_BYTE *)(a4 + 8) = v7;
  }
  return result;
}

uint64_t sub_1B092165C()
{
  uint64_t *v0;

  return TTFContainer.encoded()(*v0);
}

id sub_1B0921674@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  id result;
  unint64_t v11;
  uint64_t (*v12)@<X0>(uint64_t@<X8>);
  char v13;
  char v14;
  void *(*v15)@<X0>(uint64_t@<X8>);
  uint64_t (*v16)@<X0>(uint64_t@<X0>, uint64_t *@<X8>);
  uint64_t v17;
  uint64_t v18;
  __n128 (*v19)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _BYTE *v25;

  if (*((unsigned __int8 *)a1 + 16) - 1 >= 2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_1B0922EA4();
      v20 = swift_allocError();
      v14 = 1;
      *v25 = 1;
      result = (id)v20;
      v21 = 0;
      v22 = 0;
      v12 = 0;
      v18 = 0;
      v6 = 0;
      v17 = 0;
      v5 = 0;
      v16 = 0;
      v15 = 0;
      v8 = 0;
      v13 = 0;
      v11 = 0xE000000000000000;
      v19 = (__n128 (*)@<Q0>(uint64_t@<X0>, uint64_t@<X8>))v20;
    }
    else
    {
      v19 = (__n128 (*)@<Q0>(uint64_t@<X0>, uint64_t@<X8>))a1[1];
      v22 = swift_allocObject();
      v23 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v22 + 16) = *(_OWORD *)a2;
      *(_OWORD *)(v22 + 32) = v23;
      *(_OWORD *)(v22 + 48) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(v22 + 64) = *(_BYTE *)(a2 + 48);
      v18 = swift_allocObject();
      v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v18 + 16) = *(_OWORD *)a2;
      *(_OWORD *)(v18 + 32) = v24;
      *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(v18 + 64) = *(_BYTE *)(a2 + 48);
      sub_1B08ECB18(a2);
      result = (id)sub_1B08ECB18(a2);
      v6 = 0;
      v17 = 0;
      v5 = 0;
      v16 = 0;
      v15 = 0;
      v8 = 0;
      v14 = 0;
      v12 = sub_1B0922F08;
      v20 = 1;
      v11 = MEMORY[0x1E0DEE9D8];
      v13 = 1;
      v21 = (uint64_t)sub_1B0922EEC;
    }
  }
  else
  {
    v5 = *a1;
    v6 = swift_allocObject();
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v6 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v6 + 32) = v7;
    *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(v6 + 64) = *(_BYTE *)(a2 + 48);
    v8 = swift_allocObject();
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v8 + 32) = v9;
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(v8 + 64) = *(_BYTE *)(a2 + 48);
    sub_1B08ECB18(a2);
    result = (id)sub_1B08ECB18(a2);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = sub_1B0922F40;
    v16 = sub_1B0921A0C;
    v17 = MEMORY[0x1E0DEE9D8];
    v18 = (uint64_t)sub_1B0922F24;
    v19 = sub_1B0921FFC;
    v20 = 257;
    v21 = 257;
    v22 = (uint64_t)sub_1B0921F84;
  }
  *(_QWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = v21;
  *(_QWORD *)(a3 + 16) = v22;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v19;
  *(_QWORD *)(a3 + 40) = v12;
  *(_QWORD *)(a3 + 48) = v18;
  *(_QWORD *)(a3 + 56) = v6;
  *(_QWORD *)(a3 + 64) = v17;
  *(_QWORD *)(a3 + 72) = v5;
  *(_QWORD *)(a3 + 80) = v16;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = v15;
  *(_QWORD *)(a3 + 104) = v8;
  *(_BYTE *)(a3 + 112) = v13;
  *(_BYTE *)(a3 + 113) = v14;
  return result;
}

uint64_t sub_1B09218C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v5;

  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v5 = *a1;
    *(_BYTE *)a3 = *(_BYTE *)a2;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a3 + 40) = v5;
    *(_BYTE *)(a3 + 48) = 0;
    return sub_1B08ECB18(a2);
  }
  else
  {
    sub_1B0922EA4();
    swift_allocError();
    *v3 = 0;
    return swift_willThrow();
  }
}

uint64_t sub_1B092194C@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  char *v5;
  uint64_t result;

  v3 = *a1;
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1B0920308(v4);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

void sub_1B09219A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  sub_1B090BE34(v5, v6, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
  if (!v3)
  {
    *(_QWORD *)(a3 + 8) = sub_1B0A1CFA0();
    *(_QWORD *)(a3 + 16) = v7;
  }
}

uint64_t sub_1B0921A0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAE10);
    v4 = sub_1B0A1D9D8();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9E0];
  }
  v7 = v4;
  v5 = swift_bridgeObjectRetain();
  sub_1B0922F58(v5, 1, &v7);
  if (v2)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *a2 = v7;
  }
  return result;
}

void *sub_1B0921ABC@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  _BYTE __src[424];

  v4 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA780);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B0A363D0;
  v6 = swift_bridgeObjectRetain();
  sub_1B0975A90(v6, v4, 0, __src);
  if (v2)
  {
    *(_QWORD *)(v5 + 16) = 0;
    return (void *)swift_release();
  }
  else
  {
    result = memcpy((void *)(v5 + 32), __src, 0x1A4uLL);
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = v4;
  }
  return result;
}

uint64_t sub_1B0921B74@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];
  char v12;

  v3 = v1[2];
  v4 = *v1;
  *(_OWORD *)v11 = v1[1];
  *(_OWORD *)&v11[16] = v3;
  v12 = *((_BYTE *)v1 + 48);
  v9 = *(_OWORD *)&v11[8];
  v10 = v4;
  v5 = *((_QWORD *)&v3 + 1);
  v6 = swift_allocObject();
  v7 = v1[1];
  *(_OWORD *)(v6 + 16) = *v1;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v1[2];
  *(_BYTE *)(v6 + 64) = *((_BYTE *)v1 + 48);
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = sub_1B0921D48;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = sub_1B09235A8;
  *(_QWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = 2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  return sub_1B08ECB18((uint64_t)&v10);
}

uint64_t sub_1B0921C30@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  _OWORD v13[3];
  char v14;

  v4 = v1[2];
  v5 = *v1;
  v13[1] = v1[1];
  v13[2] = v4;
  v13[0] = v5;
  v14 = *((_BYTE *)v1 + 48);
  v6 = swift_allocObject();
  v7 = v1[1];
  *(_OWORD *)(v6 + 16) = *v1;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v1[2];
  *(_BYTE *)(v6 + 64) = *((_BYTE *)v1 + 48);
  sub_1B08ECB18((uint64_t)v13);
  sub_1B08A0FD0();
  v9 = v8;
  v11 = v10;
  result = swift_release();
  if (!v2)
  {
    *(_QWORD *)a1 = v9;
    *(_BYTE *)(a1 + 8) = v11;
  }
  return result;
}

unsigned __int8 *sub_1B0921D48@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int128 v4;
  __int16 v5;
  char v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  int v11;
  int v12;

  v3 = *(_DWORD *)result;
  *((_QWORD *)&v4 + 1) = 0;
  if (*(_DWORD *)result == 1953784678)
  {
    v5 = 0;
    v6 = 0;
    *(_QWORD *)&v4 = sub_1B0921F70;
    v7 = sub_1B0921F34;
    v8 = 257;
  }
  else
  {
    result = sub_1B08E3F8C("OTTO", 4, &v12);
    if (v12 == v3)
    {
      v6 = 0;
      *((_QWORD *)&v4 + 1) = 0;
      *(_QWORD *)&v4 = sub_1B08A0FC4;
      v5 = 1;
      v8 = 16843009;
      v7 = sub_1B0921F48;
    }
    else
    {
      result = sub_1B08E3F8C("typ1", 4, &v11);
      *((_QWORD *)&v4 + 1) = 0;
      *(_QWORD *)&v4 = sub_1B08A0FC4;
      if (v11 == v3)
      {
        v6 = 0;
        v5 = 256;
        v8 = 16843009;
        v7 = sub_1B0921F5C;
      }
      else
      {
        v9 = v4;
        result = sub_1B08E3F8C("true", 4, &v10);
        if (v10 == v3)
        {
          v6 = 0;
          v5 = 257;
          v8 = 16843009;
          v7 = sub_1B0923594;
          v4 = v9;
        }
        else
        {
          switch(v3)
          {
            case -1519689116:
              v5 = 0;
              *((_QWORD *)&v4 + 1) = 0;
              *(_QWORD *)&v4 = sub_1B08A0FC4;
              v6 = 1;
              v7 = sub_1B0923594;
              v8 = 16843009;
              break;
            case 65536:
              *((_QWORD *)&v4 + 1) = 0;
              *(_QWORD *)&v4 = sub_1B08A0FC4;
              v6 = 1;
              v5 = 256;
              v7 = sub_1B0923594;
              v8 = 16843009;
              break;
            case -1519619212:
              *((_QWORD *)&v4 + 1) = 0;
              *(_QWORD *)&v4 = sub_1B08A0FC4;
              v5 = 1;
              v7 = sub_1B0923594;
              v8 = 16843009;
              v6 = 1;
              break;
            default:
              v8 = 0;
              v7 = 0;
              v4 = xmmword_1B0A38610;
              v6 = 1;
              v5 = 257;
              break;
          }
        }
      }
    }
  }
  *(_QWORD *)a2 = v8;
  *(_OWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = 0;
  *(_WORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 42) = v6;
  return result;
}

unsigned int *sub_1B0921F34@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

_QWORD *sub_1B0921F48@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 2;
  return result;
}

_QWORD *sub_1B0921F5C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_1B0921F70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

_QWORD *sub_1B0921F84@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *result;
  v3 = result[1];
  v4 = __OFADD__(*result, v3);
  v5 = *result + v3;
  if (v4)
  {
    sub_1B08A38A0();
LABEL_6:
    swift_allocError();
    return (_QWORD *)swift_willThrow();
  }
  if (v5 < v2)
  {
    sub_1B08A38E4();
    goto LABEL_6;
  }
  *a2 = v2;
  a2[1] = v5;
  return result;
}

__n128 sub_1B0921FFC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1B0922010(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;

  v2 = a1;
  v3 = a1[1];
  result = sub_1B0A1DA50();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v76 = 0;
      v77 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v79 = *(_DWORD *)(v77 + 4 * i);
        v80 = v76;
        do
        {
          v81 = *(_DWORD *)(v77 + v80);
          if (v79 >= v81)
            break;
          if (!v77)
            goto LABEL_142;
          *(_DWORD *)(v77 + v80 + 4) = v81;
          *(_DWORD *)(v77 + v80) = v79;
          v80 -= 4;
        }
        while (v80 != -4);
        v76 += 4;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v93 = result;
    v94 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = sub_1B0A1D4D4();
      *(_QWORD *)(result + 16) = v6;
      v3 = v94;
      v92 = result;
      v96 = (char *)(result + 32);
LABEL_13:
      v8 = 0;
      v9 = *v2;
      v90 = v2;
      v91 = *v2 - 4;
      v10 = MEMORY[0x1E0DEE9D8];
      v95 = *v2;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(_DWORD *)(v9 + 4 * v8);
          v14 = *(_DWORD *)(v9 + 4 * v12);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = v13;
            while (1)
            {
              v16 = *(_DWORD *)(v9 + 4 * v8);
              if (v13 < v14 == v16 >= v15)
                break;
              ++v8;
              v15 = v16;
              if (v3 == v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_139;
            if (v12 < v8)
            {
              v17 = v8 - 1;
              v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9)
                    goto LABEL_145;
                  v19 = *(_DWORD *)(v9 + 4 * v18);
                  *(_DWORD *)(v9 + 4 * v18) = *(_DWORD *)(v9 + 4 * v17);
                  *(_DWORD *)(v9 + 4 * v17) = v19;
                }
                v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_136;
          if (v8 - v12 < v93)
          {
            v20 = v12 + v93;
            if (__OFADD__(v12, v93))
              goto LABEL_140;
            if (v20 >= v3)
              v20 = v3;
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              v21 = (unsigned int *)(v91 + 4 * v8);
              do
              {
                v22 = *(_DWORD *)(v9 + 4 * v8);
                v23 = v12;
                v24 = v21;
                do
                {
                  v25 = *v24;
                  if (v22 >= *v24)
                    break;
                  if (!v9)
                    goto LABEL_143;
                  *v24 = v22;
                  v24[1] = v25;
                  --v24;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              v8 = v20;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08A8EA0(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v27 = *(_QWORD *)(v10 + 16);
        v26 = *(_QWORD *)(v10 + 24);
        v11 = v27 + 1;
        v9 = v95;
        if (v27 >= v26 >> 1)
        {
          result = (uint64_t)sub_1B08A8EA0((char *)(v26 > 1), v27 + 1, 1, (char *)v10);
          v9 = v95;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v11;
        v28 = v10 + 32;
        v29 = (uint64_t *)(v10 + 32 + 16 * v27);
        *v29 = v12;
        v29[1] = v8;
        if (v27)
        {
          while (1)
          {
            v30 = v11 - 1;
            if (v11 >= 4)
            {
              v35 = v28 + 16 * v11;
              v36 = *(_QWORD *)(v35 - 64);
              v37 = *(_QWORD *)(v35 - 56);
              v41 = __OFSUB__(v37, v36);
              v38 = v37 - v36;
              if (v41)
                goto LABEL_120;
              v40 = *(_QWORD *)(v35 - 48);
              v39 = *(_QWORD *)(v35 - 40);
              v41 = __OFSUB__(v39, v40);
              v33 = v39 - v40;
              v34 = v41;
              if (v41)
                goto LABEL_121;
              v42 = v11 - 2;
              v43 = (uint64_t *)(v28 + 16 * (v11 - 2));
              v45 = *v43;
              v44 = v43[1];
              v41 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              if (v41)
                goto LABEL_122;
              v41 = __OFADD__(v33, v46);
              v47 = v33 + v46;
              if (v41)
                goto LABEL_124;
              if (v47 >= v38)
              {
                v65 = (uint64_t *)(v28 + 16 * v30);
                v67 = *v65;
                v66 = v65[1];
                v41 = __OFSUB__(v66, v67);
                v68 = v66 - v67;
                if (v41)
                  goto LABEL_130;
                v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v59 = *(_QWORD *)(v10 + 32);
                v60 = *(_QWORD *)(v10 + 40);
                v41 = __OFSUB__(v60, v59);
                v52 = v60 - v59;
                v53 = v41;
                goto LABEL_78;
              }
              v32 = *(_QWORD *)(v10 + 32);
              v31 = *(_QWORD *)(v10 + 40);
              v41 = __OFSUB__(v31, v32);
              v33 = v31 - v32;
              v34 = v41;
            }
            if ((v34 & 1) != 0)
              goto LABEL_123;
            v42 = v11 - 2;
            v48 = (uint64_t *)(v28 + 16 * (v11 - 2));
            v50 = *v48;
            v49 = v48[1];
            v51 = __OFSUB__(v49, v50);
            v52 = v49 - v50;
            v53 = v51;
            if (v51)
              goto LABEL_125;
            v54 = (uint64_t *)(v28 + 16 * v30);
            v56 = *v54;
            v55 = v54[1];
            v41 = __OFSUB__(v55, v56);
            v57 = v55 - v56;
            if (v41)
              goto LABEL_127;
            if (__OFADD__(v52, v57))
              goto LABEL_129;
            if (v52 + v57 >= v33)
            {
              v58 = v33 < v57;
LABEL_84:
              if (v58)
                v30 = v42;
              goto LABEL_86;
            }
LABEL_78:
            if ((v53 & 1) != 0)
              goto LABEL_126;
            v61 = (uint64_t *)(v28 + 16 * v30);
            v63 = *v61;
            v62 = v61[1];
            v41 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v41)
              goto LABEL_128;
            if (v64 < v52)
              goto LABEL_15;
LABEL_86:
            v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9)
              goto LABEL_144;
            v70 = (uint64_t *)(v28 + 16 * v69);
            v71 = *v70;
            v72 = v28;
            v73 = (_QWORD *)(v28 + 16 * v30);
            v74 = v73[1];
            result = sub_1B0922654((char *)(v9 + 4 * *v70), (char *)(v9 + 4 * *v73), v9 + 4 * v74, v96);
            if (v1)
              goto LABEL_114;
            if (v74 < v71)
              goto LABEL_117;
            if (v30 > *(_QWORD *)(v10 + 16))
              goto LABEL_118;
            *v70 = v71;
            *(_QWORD *)(v72 + 16 * v69 + 8) = v74;
            v75 = *(_QWORD *)(v10 + 16);
            if (v30 >= v75)
              goto LABEL_119;
            v11 = v75 - 1;
            result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            v28 = v72;
            *(_QWORD *)(v10 + 16) = v75 - 1;
            v9 = v95;
            if (v75 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v94;
        if (v8 >= v94)
        {
          v7 = v92;
          v2 = v90;
          goto LABEL_103;
        }
      }
    }
    v7 = MEMORY[0x1E0DEE9D8];
    v96 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v92 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_103:
    v92 = v7;
    if (v11 >= 2)
    {
      v82 = *v2;
      do
      {
        v83 = v11 - 2;
        if (v11 < 2)
          goto LABEL_132;
        if (!v82)
          goto LABEL_146;
        v84 = v10;
        v85 = v10 + 32;
        v86 = *(_QWORD *)(v10 + 32 + 16 * v83);
        v87 = *(_QWORD *)(v10 + 32 + 16 * (v11 - 1) + 8);
        result = sub_1B0922654((char *)(v82 + 4 * v86), (char *)(v82 + 4 * *(_QWORD *)(v85 + 16 * (v11 - 1))), v82 + 4 * v87, v96);
        if (v1)
          break;
        if (v87 < v86)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08A8F98(v84);
          v84 = result;
        }
        if (v83 >= *(_QWORD *)(v84 + 16))
          goto LABEL_134;
        v88 = (_QWORD *)(v84 + 32 + 16 * v83);
        *v88 = v86;
        v88[1] = v87;
        v89 = *(_QWORD *)(v84 + 16);
        if (v11 > v89)
          goto LABEL_135;
        result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        v10 = v84;
        *(_QWORD *)(v84 + 16) = v89 - 1;
        v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v92 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B0922654(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 3;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 3;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 2;
  if (v10 >= v12 >> 2)
  {
    if (a4 != __src || &__src[4 * v13] <= a4)
      memmove(a4, __src, 4 * v13);
    v14 = &v4[4 * v13];
    if (v7 >= v6 || v11 < 4)
      goto LABEL_39;
    v17 = (char *)(a3 - 4);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 4;
      v21 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      v20 = v21;
      if (*((_DWORD *)v14 - 1) < v21)
        break;
      v20 = *((_DWORD *)v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        v14 -= 4;
LABEL_35:
        *(_DWORD *)v17 = v20;
        goto LABEL_36;
      }
      v22 = v17 >= v14;
      v14 -= 4;
      if (v22)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        v17 -= 4;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[4 * v10] <= a4)
    memmove(a4, __dst, 4 * v10);
  v14 = &v4[4 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 4)
  {
    while (1)
    {
      v15 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        break;
      v16 = v7 == v6;
      v6 += 4;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 4;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *(_DWORD *)v4;
    v16 = v7 == v4;
    v4 += 4;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *(_DWORD *)v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = v14 - v4 + (v14 - v4 < 0 ? 3uLL : 0);
  if (v6 != v4 || v6 >= &v4[v23 & 0xFFFFFFFFFFFFFFFCLL])
    memmove(v6, v4, 4 * (v23 >> 2));
  return 1;
}

uint64_t sub_1B0922854(uint64_t a1, unint64_t a2, char a3)
{
  void *v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)&v18 = a1;
  *((_QWORD *)&v18 + 1) = a2;
  sub_1B08A35B0(a1, a2);
  sub_1B08A35B0(a1, a2);
  sub_1B08A35F4();
  result = sub_1B0A1D090();
  v21 = result;
  if (v8 >= result)
  {
    v9 = result;
    v10 = v8;
    v11 = swift_allocObject();
    *(_BYTE *)(v11 + 16) = a3;
    *(_QWORD *)(v11 + 24) = a1;
    *(_QWORD *)(v11 + 32) = a2;
    *(_QWORD *)(v11 + 40) = v9;
    *(_QWORD *)(v11 + 48) = v10;
    *(_QWORD *)(v11 + 56) = 0;
    *(_BYTE *)(v11 + 64) = 1;
    sub_1B08A35B0(a1, a2);
    sub_1B08A35B0(a1, a2);
    sub_1B08A0FD0();
    v13 = v12;
    swift_release();
    sub_1B08A3638(a1, a2);
    if (v3)
    {
      v14 = v3;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7D0);
      if (!swift_dynamicCast())
      {

        sub_1B08A36F0();
        swift_allocError();
        *v16 = v3;
        v16[1] = v21;
        v16[2] = 0x7272652072657355;
        v16[3] = 0xEA0000000000726FLL;
        v16[4] = v3;
        v17 = v3;
        swift_willThrow();
        swift_bridgeObjectRelease();
        sub_1B08A3638(a1, a2);
        sub_1B08A3638(a1, a2);
        return v13;
      }

      sub_1B08A36F0();
      swift_allocError();
      *(_OWORD *)v15 = v18;
      *(_OWORD *)(v15 + 16) = v19;
      *(_QWORD *)(v15 + 32) = v20;
      swift_willThrow();

    }
    swift_bridgeObjectRelease();
    sub_1B08A3638(a1, a2);
    sub_1B08A3638(a1, a2);
    return v13;
  }
  __break(1u);
  return result;
}

unint64_t sub_1B0922AE8()
{
  unint64_t result;

  result = qword_1EEEBB6B0;
  if (!qword_1EEEBB6B0)
  {
    result = MEMORY[0x1B5E0D530]("EGw5|i\a", &type metadata for TTFFileError);
    atomic_store(result, (unint64_t *)&qword_1EEEBB6B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TTFFileError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0922B78 + 4 * byte_1B0A38625[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0922BAC + 4 * byte_1B0A38620[v4]))();
}

uint64_t sub_1B0922BAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0922BB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0922BBCLL);
  return result;
}

uint64_t sub_1B0922BC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0922BD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0922BD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0922BDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TTFFileError()
{
  return &type metadata for TTFFileError;
}

ValueMetadata *type metadata accessor for TTFContainer()
{
  return &type metadata for TTFContainer;
}

uint64_t sub_1B0922C08(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  uint64_t v4;
  uint64_t result;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int64_t v13;
  unsigned int v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = *(_QWORD *)(a1 + 16);
  v35 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v35;
  v4 = a1;
  v36 = MEMORY[0x1E0DEE9D8];
  sub_1B08E8308(0, v2, 0);
  v35 = v36;
  result = sub_1B08AB9A8(v4);
  v7 = result;
  v8 = 0;
  v9 = v4 + 64;
  v10 = *a2;
  v11 = *(_BYTE *)(v4 + 32);
  v28 = v4 + 88;
  v31 = v6;
  v32 = v4;
  v29 = *a2;
  v30 = v2;
  while ((v7 & 0x8000000000000000) == 0 && (uint64_t)v7 < 1 << v11)
  {
    if ((*(_QWORD *)(v9 + 8 * (v7 >> 6)) & (1 << v7)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(v4 + 36) != v6)
      goto LABEL_28;
    if (!*(_QWORD *)(v10 + 16))
      goto LABEL_29;
    v33 = v8;
    v34 = v7 >> 6;
    v14 = *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v7);
    result = sub_1B08F9E7C(v14);
    if ((v15 & 1) == 0)
      goto LABEL_30;
    v16 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 16 * result);
    v17 = *v16;
    v18 = v16[1];
    result = sub_1B08A35B0(*v16, v18);
    v19 = *(_QWORD *)(v36 + 16);
    v20 = *(_QWORD *)(v36 + 24);
    if (v19 >= v20 >> 1)
      result = (uint64_t)sub_1B08E8308((_QWORD *)(v20 > 1), v19 + 1, 1);
    *(_QWORD *)(v36 + 16) = v19 + 1;
    v21 = v36 + 24 * v19;
    *(_DWORD *)(v21 + 32) = v14;
    *(_QWORD *)(v21 + 40) = v17;
    *(_QWORD *)(v21 + 48) = v18;
    v4 = v32;
    v11 = *(_BYTE *)(v32 + 32);
    v12 = 1 << v11;
    if ((uint64_t)v7 >= 1 << v11)
      goto LABEL_31;
    v22 = v7 >> 6;
    v23 = *(_QWORD *)(v9 + 8 * v34);
    if ((v23 & (1 << v7)) == 0)
      goto LABEL_32;
    v6 = v31;
    if (*(_DWORD *)(v32 + 36) != v31)
      goto LABEL_33;
    v24 = v23 & (-2 << (v7 & 0x3F));
    if (v24)
    {
      v12 = __clz(__rbit64(v24)) | v7 & 0xFFFFFFFFFFFFFFC0;
      v13 = v30;
    }
    else
    {
      v25 = v34 + 1;
      v26 = (v12 + 63) >> 6;
      v13 = v30;
      if (v34 + 1 < v26)
      {
        v27 = *(_QWORD *)(v9 + 8 * v25);
        if (!v27)
        {
          v25 = v34 + 2;
          if (v34 + 2 >= v26)
            goto LABEL_4;
          v27 = *(_QWORD *)(v9 + 8 * v25);
          if (!v27)
          {
            while (v26 - 3 != v22)
            {
              v27 = *(_QWORD *)(v28 + 8 * v22++);
              if (v27)
              {
                v25 = v22 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v12 = __clz(__rbit64(v27)) + (v25 << 6);
      }
    }
LABEL_4:
    v10 = v29;
    v8 = v33 + 1;
    v7 = v12;
    if (v33 + 1 == v13)
      return v35;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

id sub_1B0922E8C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B0921674(a1, v2 + 16, a2);
}

unint64_t sub_1B0922EA4()
{
  unint64_t result;

  result = qword_1EEEBB700;
  if (!qword_1EEEBB700)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for TTFFileError, &type metadata for TTFFileError);
    atomic_store(result, (unint64_t *)&qword_1EEEBB700);
  }
  return result;
}

uint64_t sub_1B0922EEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B09218C8(a1, v2 + 16, a2);
}

uint64_t sub_1B0922F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B092194C((char *)(v1 + 16), a1);
}

void sub_1B0922F24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1B09219A8(a1, v2 + 16, a2);
}

void *sub_1B0922F40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B0921ABC((char *)(v1 + 16), a1);
}

unint64_t sub_1B0922F58(uint64_t a1, char a2, _QWORD *a3)
{
  unint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
    return swift_bridgeObjectRelease();
  v7 = *(unsigned int *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  sub_1B08A35B0(v9, v8);
  if (v8 >> 60 == 15)
    return swift_bridgeObjectRelease();
  v10 = (_QWORD *)*a3;
  result = sub_1B08F9E7C(v7);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_1B08FB770(v16, v4 & 1);
    result = sub_1B08F9E7C(v7);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    result = sub_1B0A1DAD4();
    __break(1u);
  }
  if ((v4 & 1) == 0)
  {
    v21 = result;
    sub_1B08FFF48();
    result = v21;
    v19 = (_QWORD *)*a3;
    if ((v17 & 1) != 0)
    {
LABEL_9:
      v20 = v19[7] + 16 * result;
      sub_1B08A3638(*(_QWORD *)v20, *(_QWORD *)(v20 + 8));
      *(_QWORD *)v20 = v9;
      *(_QWORD *)(v20 + 8) = v8;
      if (--v6)
      {
LABEL_15:
        v4 = (unint64_t *)(a1 + 72);
        do
        {
          v7 = *((unsigned int *)v4 - 4);
          v9 = *(v4 - 1);
          v8 = *v4;
          sub_1B08A35B0(v9, *v4);
          if (v8 >> 60 == 15)
            break;
          v26 = (_QWORD *)*a3;
          result = sub_1B08F9E7C(v7);
          v28 = v26[2];
          v29 = (v27 & 1) == 0;
          v15 = __OFADD__(v28, v29);
          v30 = v28 + v29;
          if (v15)
            goto LABEL_25;
          v17 = v27;
          if (v26[3] < v30)
          {
            sub_1B08FB770(v30, 1);
            result = sub_1B08F9E7C(v7);
            if ((v17 & 1) != (v31 & 1))
              goto LABEL_6;
          }
          v32 = (_QWORD *)*a3;
          if ((v17 & 1) != 0)
          {
            v25 = v32[7] + 16 * result;
            sub_1B08A3638(*(_QWORD *)v25, *(_QWORD *)(v25 + 8));
            *(_QWORD *)v25 = v9;
            *(_QWORD *)(v25 + 8) = v8;
          }
          else
          {
            v32[(result >> 6) + 8] |= 1 << result;
            *(_DWORD *)(v32[6] + 4 * result) = v7;
            v33 = (uint64_t *)(v32[7] + 16 * result);
            *v33 = v9;
            v33[1] = v8;
            v34 = v32[2];
            v15 = __OFADD__(v34, 1);
            v35 = v34 + 1;
            if (v15)
              goto LABEL_26;
            v32[2] = v35;
          }
          v4 += 3;
        }
        while (--v6);
      }
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
LABEL_8:
  v19 = (_QWORD *)*a3;
  if ((v17 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  v19[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(v19[6] + 4 * result) = v7;
  v22 = (uint64_t *)(v19[7] + 16 * result);
  *v22 = v9;
  v22[1] = v8;
  v23 = v19[2];
  v15 = __OFADD__(v23, 1);
  v24 = v23 + 1;
  if (!v15)
  {
    v19[2] = v24;
    if (--v6)
      goto LABEL_15;
    return swift_bridgeObjectRelease();
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  sub_1B08A3638(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for TrueTypeHeader.TableDirectory()
{
  return &type metadata for TrueTypeHeader.TableDirectory;
}

uint64_t getEnumTagSinglePayload for TrueTypeHeader(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrueTypeHeader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B0923290(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1B09232A8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TrueTypeHeader()
{
  return &type metadata for TrueTypeHeader;
}

ValueMetadata *type metadata accessor for TrueTypeHeader.CollectionDirectory()
{
  return &type metadata for TrueTypeHeader.CollectionDirectory;
}

uint64_t destroy for TTFParser(uint64_t a1)
{
  return sub_1B08A3638(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for TTFParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_1B08A35B0(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for TTFParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_1B08A35B0(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_1B08A3638(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TTFParser(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1B08A3638(v4, v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for TTFParser(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TTFParser(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TTFParser()
{
  return &type metadata for TTFParser;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FontInfo.Typo(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FontInfo.Typo(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TableDirectoryEntry()
{
  return &type metadata for TableDirectoryEntry;
}

uint64_t sub_1B0923558()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0923568()
{
  return sub_1B08CE2D8(&qword_1EEEBB750, qword_1EEEBB758, MEMORY[0x1E0D65C60]);
}

_QWORD *sub_1B0923594@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0921F5C(a1, a2);
}

id sub_1B09235A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0922E8C(a1, a2);
}

uint64_t PSScanner.init(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t PSScanner.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD v19[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v11 = type metadata accessor for PSInputByteStream(0, v4, v9, v10);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v1, v4, v12);
  PSInputByteStream.init(input:)((uint64_t)v7, v4, v9, (uint64_t)v14);
  result = sub_1B09236C4((uint64_t)v14, a1, v15, v16);
  if (v2)
    return v18;
  return result;
}

uint64_t sub_1B09236C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  Swift::UInt8_optional v9;
  uint64_t v10;
  Swift::UInt8 value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, unint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt8_optional v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt8_optional v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt8_optional v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = v4;
  v8 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v9 = PSInputByteStream.peek()();
  if (v10)
    goto LABEL_2;
  value = v9.value;
  if ((*(_WORD *)&v9 & 0x100) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    return 0;
  }
  if ((sub_1B08F1184(v9.value) & 1) != 0)
    return sub_1B0923CE0(a1, a2, v12, v13);
  if (value - 45 < 2 || value == 43)
    return sub_1B0925C94(a1, a2, v12, v13);
  if (value != 37)
  {
    if (value - 58 < 0xFFFFFFF6)
    {
      switch(value)
      {
        case '(':
          PSInputByteStream.advance(by:)(1);
          if (v21)
            goto LABEL_2;
          return sub_1B09257E0(a1, a2, v19, v20);
        case ')':
          goto LABEL_36;
        case '/':
          PSInputByteStream.advance(by:)(1);
          if (v25)
            goto LABEL_2;
          v26 = PSInputByteStream.peek()();
          if (v27)
            goto LABEL_2;
          if ((*(_WORD *)&v26 & 0x1FF) == 0x2F)
          {
            PSInputByteStream.advance(by:)(1);
            if (v28)
              goto LABEL_2;
            v22 = sub_1B0926C54;
            v24 = 2;
          }
          else
          {
            v22 = sub_1B0926C84;
            v24 = 1;
          }
          v23 = a1;
          return sub_1B0924A5C(v23, (uint64_t)v22, 0, v24, a2);
        case '<':
          PSInputByteStream.advance(by:)(1);
          if (v29)
            goto LABEL_2;
          v30 = PSInputByteStream.peek()();
          if (v31)
            goto LABEL_2;
          if ((*(_WORD *)&v30 & 0x100) != 0)
            goto LABEL_32;
          if (v30.value == 126)
          {
            PSInputByteStream.advance(by:)(1);
            if (v37)
              goto LABEL_2;
            v14 = sub_1B0924E48(a1, a2, v35, v36);
          }
          else if (v30.value == 60)
          {
LABEL_14:
            v14 = sub_1B0924DA4(a1, a2, v12, v13);
          }
          else
          {
LABEL_32:
            v14 = sub_1B0925384(a1, a2, v12, v13);
          }
          break;
        case '>':
          PSInputByteStream.advance(by:)(1);
          if (v32)
            goto LABEL_2;
          v33 = PSInputByteStream.peek()();
          if (v34)
            goto LABEL_2;
          if ((*(_WORD *)&v33 & 0x1FF) == 0x3E)
            goto LABEL_14;
LABEL_36:
          v5 = 0x72657861746E7973;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
          return v5;
        case '[':
        case ']':
        case '{':
        case '}':
          goto LABEL_14;
        default:
          v22 = sub_1B0926E04;
          v23 = a1;
          v24 = 0;
          return sub_1B0924A5C(v23, (uint64_t)v22, 0, v24, a2);
      }
      return v14;
    }
    return sub_1B0925C94(a1, a2, v12, v13);
  }
  PSInputByteStream.advance(by:)(1);
  if (!v17)
    return sub_1B0923DD4(a1, a2, v15, v16);
LABEL_2:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v5;
}

uint64_t sub_1B0923A24(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B0923AD4 + 4 * byte_1B0A387E6[(v7 - 1)]))();
}

void sub_1B0923B24(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PSScanner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PSScanner);
}

uint64_t sub_1B0923CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  Swift::UInt8_optional v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  while (1)
  {
    v7 = PSInputByteStream.peek()();
    if (v8)
    {
LABEL_7:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      return 0;
    }
    if ((*(_WORD *)&v7 & 0x100) != 0 || v7.value > 0x20u || ((1 << v7.value) & 0x100003601) == 0)
      break;
    PSInputByteStream.advance(by:)(1);
    if (v9)
      goto LABEL_7;
  }
  v10 = sub_1B092601C(a1, a2);
  sub_1B08A3638(v10, v11);
  return 0;
}

uint64_t sub_1B0923DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  Swift::UInt8_optional v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  do
  {
    v7 = PSInputByteStream.peek()();
    if (v8)
      break;
    if ((*(_WORD *)&v7 & 0x100) != 0 || v7.value == 13 || v7.value == 10)
    {
      sub_1B092601C(a1, a2);
      __asm { BR              X10 }
    }
    PSInputByteStream.advance(by:)(1);
  }
  while (!v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a2;
}

uint64_t sub_1B0923F48(uint64_t a1, uint64_t a2)
{
  return sub_1B0923F90(a1, a2);
}

uint64_t sub_1B0923F90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v6;
  uint64_t v7;
  __int128 v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 8) >> 60 != 15)
    __asm { BR              X9 }
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  v9 = v7;
  sub_1B08D69A4(v8);
  if (!v2)
    __asm { BR              X10 }
  return a2;
}

uint64_t sub_1B09244C4(uint64_t a1, uint64_t a2)
{
  return sub_1B092450C(a1, a2);
}

uint64_t sub_1B092450C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 8) >> 60 != 15)
    __asm { BR              X9 }
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v9[2] = v7;
  v10 = v8;
  sub_1B08D6B18(v9);
  if (!v2)
    __asm { BR              X10 }
  return a2;
}

uint64_t sub_1B0924A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  Swift::UInt8_optional v8;
  uint64_t v9;
  int value;
  uint64_t v11;

  v7 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a4);
  while (2)
  {
    v8 = PSInputByteStream.peek()();
    if (!v9)
    {
      if ((*(_WORD *)&v8 & 0x100) == 0)
      {
        value = v8.value;
        if ((sub_1B08F1184(v8.value) & 1) == 0)
        {
          switch(value)
          {
            case '%':
            case '(':
            case ')':
            case '/':
            case '<':
            case '=':
            case '[':
            case ']':
            case '{':
            case '}':
              break;
            default:
              PSInputByteStream.advance(by:)(1);
              if (v11)
                goto LABEL_7;
              continue;
          }
        }
      }
      sub_1B092601C(a1, a5);
      __asm { BR              X10 }
    }
    break;
  }
LABEL_7:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  return a1;
}

uint64_t sub_1B0924DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  PSInputByteStream.advance(by:)(1);
  if (v7)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  else
    return sub_1B092601C(a1, a2);
}

uint64_t sub_1B0924E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt8_optional v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  Swift::UInt8_optional v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v5 = v4;
  v34 = *MEMORY[0x1E0C80C00];
  v31 = xmmword_1B0A363C0;
  v32 = 0;
  v33 = 0;
  v8 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v9 = a1;
  v10 = PSInputByteStream.consume()();
  v12 = v11;
  if (v11)
  {
LABEL_2:
    sub_1B08A3638(v31, *((unint64_t *)&v31 + 1));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    return v9;
  }
  while ((*(_WORD *)&v10 & 0x100) == 0)
  {
    if (v10.value == 126)
    {
      v9 = a1;
      v15 = PSInputByteStream.consume()();
      if (v16)
        goto LABEL_2;
      if ((*(_WORD *)&v15 & 0x1FF) == 0x3E)
      {
        v25 = sub_1B092601C(a1, a2);
        sub_1B08A3638(v25, v26);
        v9 = sub_1B0926764();
        goto LABEL_32;
      }
      goto LABEL_5;
    }
    if ((v33 & 1) != 0 || v10.value <= 0x20u && ((1 << v10.value) & 0x100003601) != 0)
      goto LABEL_6;
    if ((v10.value - 118) <= 0xAAu)
    {
      if (v10.value == 122 && !HIDWORD(v32))
      {
        v28 = MEMORY[0x1E0CB0338];
        v29 = MEMORY[0x1E0CB0318];
        v27 = xmmword_1B0A36840;
        v17 = (char *)&loc_1B0925028
            + dword_1B0925374[__swift_project_boxed_opaque_existential_1(&v27, MEMORY[0x1E0CB0338])[1] >> 62];
        __asm { BR              X9 }
      }
LABEL_5:
      v33 = 1;
      goto LABEL_6;
    }
    LODWORD(v18) = (v10.value - 33);
    switch(HIDWORD(v32))
    {
      case 0:
        v18 = 52200625 * (v10.value - 33);
        if ((v18 & 0xFFFFFFFF00000000) != 0)
          goto LABEL_35;
        break;
      case 1:
        v19 = 614125;
        goto LABEL_25;
      case 2:
        v19 = 7225;
        goto LABEL_25;
      case 3:
        v19 = 85;
LABEL_25:
        LODWORD(v18) = v18 * v19;
        break;
      default:
        break;
    }
    v20 = __CFADD__((_DWORD)v32, (_DWORD)v18);
    v21 = v32 + v18;
    if (v20)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      JUMPOUT(0x1B0925350);
    }
    LODWORD(v32) = v21;
    v22 = HIDWORD(v32) + 1;
    if (HIDWORD(v32) == -1)
      goto LABEL_34;
    ++HIDWORD(v32);
    if (v22 == 5)
    {
      v30 = bswap32(v21);
      sub_1B0A1CF94();
      v32 = 0;
    }
LABEL_6:
    v9 = a1;
    v10 = PSInputByteStream.consume()();
    v12 = v14;
    if (v14)
      goto LABEL_2;
  }
  v9 = v5;
  v23 = sub_1B092601C(a1, a2);
  if (!v12)
  {
    sub_1B08A3638(v23, v24);
    v9 = 0x726F7272656F69;
  }
LABEL_32:
  sub_1B08A3638(v31, *((unint64_t *)&v31 + 1));
  return v9;
}

uint64_t sub_1B0925384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt8_optional v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v5 = v4;
  v19 = 0;
  v8 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v9 = a1;
  v10 = PSInputByteStream.consume()();
  v12 = v11;
  if (v11)
  {
LABEL_2:
    sub_1B08A3638(0, 0xC000000000000000);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  }
  else
  {
    while (1)
    {
      if ((*(_WORD *)&v10 & 0x100) != 0)
      {
        v9 = v5;
        v15 = sub_1B092601C(a1, a2);
        if (!v12)
        {
          v9 = 0x726F7272656F69;
          sub_1B08A3638(v15, v16);
          sub_1B08A3638(0, 0xC000000000000000);
          return v9;
        }
        goto LABEL_19;
      }
      if (v10.value == 62)
        break;
      if ((v19 & 1) == 0 && (v10.value > 0x20u || ((1 << v10.value) & 0x100003601) == 0))
      {
        if ((v10.value - 58) > 0xF5u
          || (v10.value - 71) > 0xF9u
          || (v10.value - 103) > 0xF9u)
        {
          JUMPOUT(0x1B0925480);
        }
        v19 = 1;
      }
      v9 = a1;
      v10 = PSInputByteStream.consume()();
      v12 = v14;
      if (v14)
        goto LABEL_2;
    }
    v9 = v5;
    v17 = sub_1B092601C(a1, a2);
    if (v12)
    {
LABEL_19:
      sub_1B08A3638(0, 0xC000000000000000);
      return v9;
    }
    sub_1B08A3638(v17, v18);
    v9 = 0;
    if (v19 == 1)
    {
      sub_1B08A3638(0, 0xC000000000000000);
      return 0x726F7272656F69;
    }
  }
  return v9;
}

uint64_t sub_1B09257E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unsigned int v23;
  char v24;

  v5 = v4;
  v23 = 65024;
  v24 = 0;
  v8 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  LOWORD(v9) = PSInputByteStream.consume()();
  v11 = v10;
  if (!v10)
  {
    v13 = v9;
    v5 = (uint64_t)&qword_1EEEBAA40;
    do
    {
      if ((v13 & 0x100) != 0)
      {
        v19 = sub_1B092601C(a1, a2);
        if (v11)
        {
          sub_1B08A3638(0, 0xC000000000000000);
          return v5;
        }
        v5 = 0x72657861746E7973;
        goto LABEL_36;
      }
      if ((~v23 & 0xFE00) != 0)
      {
        v16 = sub_1B0926A74(v13, v23);
        v17 = (unsigned __int16)v16 >> 14;
        if (v17 == 1)
        {
          v23 = 65024;
          if ((v16 & 0x100) == 0)
            JUMPOUT(0x1B0925A64);
          if ((v16 & 0x1000000) != 0)
            goto LABEL_6;
          if (BYTE2(v16) != 92)
          {
            if (BYTE2(v16) != 41)
            {
              if (BYTE2(v16) != 40 || !__OFADD__(1, 1))
                JUMPOUT(0x1B0925B38);
LABEL_43:
              __break(1u);
              __break(1u);
            }
LABEL_37:
            if ((v24 & 1) != 0)
            {
              v21 = 0xEB00000000726F72;
              v5 = 0x72657861746E7973;
              v22 = 7;
            }
            else
            {
              v21 = 0xC000000000000000;
              v5 = 0;
              sub_1B08A35B0(0, 0xC000000000000000);
              v22 = 4;
            }
            v19 = sub_1B092601C(a1, a2);
            if (v11)
            {
              sub_1B08A3638(0, 0xC000000000000000);
              sub_1B08D73CC(v5, v21, v22);
              return v5;
            }
LABEL_36:
            sub_1B08A3638(v19, v20);
            sub_1B08A3638(0, 0xC000000000000000);
            return v5;
          }
          goto LABEL_5;
        }
        if (v17 != 2 || v16 != 32770)
        {
          v23 = v16;
          goto LABEL_6;
        }
        v24 = 1;
      }
      if (v13 != 92)
      {
        if (v13 != 41)
        {
          if (v13 != 40 || !__OFADD__(1, 1))
            JUMPOUT(0x1B09259F4);
          __break(1u);
          __break(1u);
          goto LABEL_43;
        }
        goto LABEL_37;
      }
LABEL_5:
      v23 = 0x8000;
LABEL_6:
      LOWORD(v14) = PSInputByteStream.consume()();
      v13 = v14;
      v11 = v15;
    }
    while (!v15);
  }
  sub_1B08A3638(0, 0xC000000000000000);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v5;
}

uint64_t sub_1B0925C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  Swift::UInt8_optional v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for PSInputByteStream(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = PSInputByteStream.consume()();
  if (v8)
    goto LABEL_2;
  v31 = a2;
  if ((*(_WORD *)&v7 & 0x100) != 0)
  {
    __break(1u);
    JUMPOUT(0x1B0925EB8);
  }
  v9 = sub_1B0926D50(v7.value);
  v11 = v10;
  v13 = v12;
  while (2)
  {
    LOWORD(v14) = PSInputByteStream.peek()();
    if (v15)
    {
LABEL_14:
      sub_1B08D7524(v9, v11, v13);
LABEL_2:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      return a1;
    }
    v16 = v14;
    if ((v14 & 0x100) != 0 || (v17 = v14, (sub_1B08F1184(v14) & 1) != 0))
    {
LABEL_12:
      v26 = v13;
      v28 = sub_1B092601C(a1, v31);
      v30 = v29;
      a1 = sub_1B09264C4(v28, v29, v9, v11, v26);
      sub_1B08A3638(v28, v30);
      sub_1B08D7524(v9, v11, v26);
    }
    else
    {
      switch(v17)
      {
        case '%':
        case '(':
        case ')':
        case '/':
        case '<':
        case '=':
        case '[':
        case ']':
        case '{':
        case '}':
          goto LABEL_12;
        default:
          PSInputByteStream.advance(by:)(1);
          if (v18)
            goto LABEL_14;
          sub_1B0926150(v16, v9, v11, v13);
          v20 = v19;
          v22 = v21;
          v23 = v13;
          v13 = v24;
          v25 = ~v24;
          sub_1B08D7524(v9, v11, v23);
          v9 = v20;
          v11 = v22;
          if (v25)
            continue;
          a1 = sub_1B0924A5C(a1, (uint64_t)sub_1B0926CB4, 0, 0, v31);
          break;
      }
    }
    return a1;
  }
}

uint64_t sub_1B092601C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt8_optional v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v3 = v2;
  v4 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PSInputByteStream(0, v5, *(_QWORD *)(v9 + 24), v10);
  v12 = PSInputByteStream.peek()();
  v14 = v13;
  if (v13
    || (v16 = sub_1B08F1184(*(_WORD *)&v12 & 0x1FF), (v16 & 1) != 0)
    && (PSInputByteStream.advance(by:)(1), (v14 = v17) != 0))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v4, v11);
  }
  else
  {
    v18 = PSInputByteStream.finishWithData()((uint64_t)v8, v11);
    if (!v14)
    {
      v4 = v18;
      v20 = v19;
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v3, v8, v5);
      if ((v16 & 1) != 0)
      {
        sub_1B08D6CAC(1, v4, v20);
        return v21[1];
      }
    }
  }
  return v4;
}

void sub_1B0926150(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1B092617C(unsigned __int8 a1)
{
  uint64_t v1;
  unint64_t v5;

  if (a1 == 35)
  {
    if (v1 != 2 || (HIDWORD(v1) - 37) < 0xFFFFFFDD)
      return 0;
    else
      return BYTE4(v1);
  }
  else if (a1 == 46)
  {
    return 1;
  }
  else if ((a1 - 58) >= 0xF6u)
  {
    v5 = 10 * HIDWORD(v1) + (a1 - 48);
    if (v5 >= (v1 & 1 | 0x80000000uLL))
      return 0;
    else
      return v1 | (v5 << 32);
  }
  else if ((a1 | 0x20) == 0x65)
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B09264C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  unsigned __int8 *v16;
  int v17;
  _QWORD v18[3];
  char v19;
  unsigned int v20;

  v7 = sub_1B0A1D294();
  MEMORY[0x1E0C80A78](v7);
  switch(a5)
  {
    case 2:
      swift_bridgeObjectRetain();
      return a3;
    case 1:
      a3 >>= 32;
      return a3;
    case 0:
      if ((a3 & 1) == 0)
      {
        if ((a3 & 0x8000000000000000) == 0)
        {
          a3 >>= 32;
          return a3;
        }
        __break(1u);
        goto LABEL_35;
      }
      if (HIDWORD(a3) == 0x80000000)
        return 0x80000000;
      if ((a3 & 0x8000000000000000) == 0)
        return -HIDWORD(a3);
      __break(1u);
      goto LABEL_37;
  }
  sub_1B0A1D258();
  result = sub_1B0A1D234();
  if (v9)
  {
    v10 = v9;
    v20 = 0;
    MEMORY[0x1E0C80A78](result);
    v18[-2] = &v20;
    if ((v12 & 0x1000000000000000) != 0 || !(v10 & 0x2000000000000000 | v11 & 0x1000000000000000))
    {
      sub_1B0A1D870();
      result = swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
        goto LABEL_38;
      goto LABEL_26;
    }
    if ((v10 & 0x2000000000000000) == 0)
    {
      if ((v11 & 0x1000000000000000) != 0)
      {
        v13 = (_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
        goto LABEL_15;
      }
LABEL_35:
      v13 = (_BYTE *)sub_1B0A1D8B8();
LABEL_15:
      sub_1B0926CE4(v13, (BOOL *)v18);
      v14 = v18[0];
      result = swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
        goto LABEL_38;
LABEL_26:
      if ((~v20 & 0x7F800000) != 0)
        return v20;
      else
        return 0x65686374696D696CLL;
    }
    v18[0] = v11;
    v18[1] = v10 & 0xFFFFFFFFFFFFFFLL;
    if (v11 > 0x20u || ((1 << v11) & 0x100003E01) == 0)
    {
      v16 = (unsigned __int8 *)_swift_stdlib_strtof_clocale();
      if (v16)
      {
        v17 = *v16;
        result = swift_bridgeObjectRelease();
        if (!v17)
          goto LABEL_26;
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
LABEL_37:
    result = swift_bridgeObjectRelease();
    goto LABEL_38;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1B0926764()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;

  v1 = 0x726F7272656F69;
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    v2 = *(_DWORD *)(v0 + 20);
    if (v2)
    {
      v3 = 0;
      while (1)
      {
        if ((v2 - 1) >= 3)
          v4 = 84;
        else
          v4 = dword_1B0A3881C[v2 - 1];
        v5 = *(_DWORD *)(v0 + 16);
        v6 = __CFADD__(v5, v4);
        v7 = v5 + v4;
        if (v6)
        {
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x1B0926914);
        }
        *(_DWORD *)(v0 + 16) = v7;
        v6 = __CFADD__(v2++, 1);
        if (v6)
          goto LABEL_22;
        *(_DWORD *)(v0 + 20) = v2;
        if (v2 == 5)
        {
          sub_1B0A1CF94();
          v2 = 0;
          *(_QWORD *)(v0 + 16) = 0;
        }
        v8 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_23;
        if ((*(_BYTE *)(v0 + 24) & 1) != 0)
          break;
        ++v3;
        if (!v2)
        {
          if (!v8)
            goto LABEL_17;
          if (v8 != 4)
            __asm { BR              X11 }
          goto LABEL_19;
        }
      }
      if (v3 != 3)
        return v1;
LABEL_19:
      *(_BYTE *)(v0 + 24) = 1;
    }
    else
    {
LABEL_17:
      v1 = *(_QWORD *)v0;
      sub_1B08A35B0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
    }
  }
  return v1;
}

uint64_t sub_1B0926934(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t, double);
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PSScanner(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(void (**)(char *, char *, uint64_t, double))(v5 + 16);
  v23 = a1;
  v16(v7, a1, a2, v13);
  v17 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v17(v15, v7, a2);
  v18 = PSScanner.next()(v11);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v20 = v23;
  v21 = v18;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v23, a2);
  v17(v20, v15, a2);
  return v21;
}

uint64_t sub_1B0926A74(int a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unint64_t v9;

  if ((unsigned __int16)a2 >> 14)
  {
    if ((unsigned __int16)a2 >> 14 == 1)
    {
      return 32770;
    }
    else if (a2 == 0x8000)
    {
      if (a1 - 40 < 2)
      {
        return a1 | 0x1004000u;
      }
      else if (a1 == 13)
      {
        return 32769;
      }
      else if (a1 == 10)
      {
        return 16793856;
      }
      else if ((a1 - 56) >= 0xF8u)
      {
        return ((a1 - 48) << 16) | 1u;
      }
      else
      {
        HIDWORD(v9) = a1;
        LODWORD(v9) = (a1 << 24) - 1543503872;
        v3 = 16793608;
        switch((v9 >> 25))
        {
          case 0u:
            result = a1 | 0x1004000u;
            break;
          case 3u:
            return v3;
          case 5u:
          case 0xBu:
            result = 16793612;
            break;
          case 9u:
            result = 16793610;
            break;
          case 0xCu:
            result = 16793609;
            break;
          default:
            result = (a1 << 16) | 0x4100u;
            break;
        }
      }
    }
    else
    {
      if (a1 == 10)
        v4 = 0;
      else
        v4 = a1;
      if (a2 == 32769)
        return ((a1 == 10) << 24) | (v4 << 16) | 0x4100u;
      else
        return a2;
    }
  }
  else if ((a1 - 56) >= 0xF8u)
  {
    if (((a2 + 1) & 0x100) != 0)
    {
      __break(1u);
      JUMPOUT(0x1B0926C20);
    }
    v5 = (a2 + 1);
    v6 = (unsigned __int16)((a1 - 48) | (unsigned __int16)(8 * HIWORD(a2)));
    v7 = v6 > 0xFF;
    v8 = v6 | 0x1004000;
    if (v7)
      v8 = 32770;
    if (v5 == 3)
      return v8;
    else
      return v5 | (((a1 - 48) | (8 * HIWORD(a2))) << 16);
  }
  else
  {
    return (a1 << 16) | BYTE2(a2) | 0x4000u;
  }
  return result;
}

uint64_t sub_1B0926C54(uint64_t a1, unint64_t a2)
{
  sub_1B08A35B0(a1, a2);
  return a1;
}

uint64_t sub_1B0926C84(uint64_t a1, unint64_t a2)
{
  sub_1B08A35B0(a1, a2);
  return a1;
}

uint64_t sub_1B0926CB4(uint64_t a1, unint64_t a2)
{
  sub_1B08A35B0(a1, a2);
  return a1;
}

_BYTE *sub_1B0926CE4@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1B0926D50(unsigned __int8 a1)
{
  uint64_t result;

  if (a1 == 43)
    return 0;
  if (a1 == 46 || a1 == 45)
    return 1;
  if (a1 - 58 >= 0xFFFFFFF6)
    return ((unint64_t)a1 << 32) - 0x2FFFFFFFFELL;
  result = sub_1B0A1D984();
  __break(1u);
  return result;
}

unint64_t sub_1B0926E08(unsigned __int16 a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  BOOL v12;

  result = *(_QWORD *)(a2 + 16);
  if (result)
  {
    v4 = __clz(result);
    v5 = v4 ^ 0x3F;
    v6 = 1 << (v4 ^ 0x3Fu);
    if (v6 == result)
    {
      v7 = 0;
      v6 = *(_QWORD *)(a2 + 16);
      if (v5)
        goto LABEL_15;
    }
    else
    {
      if (v6 >= result)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (*(unsigned __int16 *)(a2 + 24 * v6 + 32) >= a1)
      {
        v7 = 0;
        if (v5)
          goto LABEL_15;
      }
      else
      {
        v8 = result + ~v6;
        if (!v8)
          return result;
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_29;
        if (v8 == 1)
        {
          v7 = result - 1;
        }
        else
        {
          if (v8 - 0x4000000000000001 < 0xC000000000000001)
          {
LABEL_30:
            __break(1u);
            return result;
          }
          v9 = __clz(v8 - 1);
          v10 = -v9;
          v6 = 1 << -(char)v9;
          v7 = result - v6;
          if ((v10 & 0x3F) != 0)
          {
LABEL_15:
            while (1)
            {
              v11 = v7 + (v6 >> 1);
              if (__OFADD__(v7, v6 >> 1))
                break;
              if (v11 >= result)
                goto LABEL_26;
              if (*(unsigned __int16 *)(a2 + 32 + 24 * v11) < a1)
                v7 += v6 >> 1;
              v12 = v6 >= 4;
              v6 >>= 1;
              if (!v12)
                goto LABEL_20;
            }
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
        }
      }
    }
LABEL_20:
    if (v7 < result)
    {
      if (*(unsigned __int16 *)(a2 + 24 * v7 + 32) >= a1)
        return v7;
      else
        return v7 + 1;
    }
    goto LABEL_27;
  }
  return result;
}

void sub_1B0926F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X9 }
}

uint64_t sub_1B0926F74()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;

  if ((_WORD)v0)
  {
    if ((unsigned __int16)v0 != 1)
    {
LABEL_70:
      __break(1u);
      JUMPOUT(0x1B0927498);
    }
    v4 = 4;
  }
  else
  {
    v4 = 2;
  }
  v5 = BYTE6(v22) / v4;
  v6 = v5 - 1;
  if (v5 == 1)
    return v6;
  if (v5 < 1)
    goto LABEL_62;
  v7 = __clz(v6) ^ 0x3F;
  v8 = 1 << v7;
  if (1 << v7 == v6)
  {
    if (v7)
    {
      v20 = v2;
      v5 = 0;
      goto LABEL_36;
    }
    goto LABEL_21;
  }
  if ((_WORD)v0)
  {
    v9 = 4;
    if ((unsigned __int16)v0 != 1)
      v9 = 0;
    if ((unsigned __int128)(v8 * (__int128)v9) >> 64 != (v8 * v9) >> 63)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v10 = sub_1B08A783C(1, v8 * v9, v0, v3, v22);
    if (v1)
      goto LABEL_71;
  }
  else
  {
    if (v8 + 0x4000000000000000 < 0)
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    v10 = sub_1B08A7600(1, (uint64_t)sub_1B08E5EF4, 0, 2 << v7, 0, v3, v22);
    if (v1)
    {
LABEL_50:
      swift_unexpectedError();
      __break(1u);
      goto LABEL_51;
    }
  }
  if (v10 <= v21)
  {
    v12 = v6 + ~v8;
    if (!v12)
      return v6;
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_68;
    if (v12 == 1)
    {
      v5 -= 2;
    }
    else
    {
      v20 = v2;
      if (v12 - 0x4000000000000001 < 0xC000000000000001)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      v13 = -(int)__clz(v12 - 1);
      v5 = v6 - (1 << v13);
      v6 = 1 << v13;
      if ((v13 & 0x3F) != 0)
      {
LABEL_36:
        while (1)
        {
          v15 = v5 + (v6 >> 1);
          if (__OFADD__(v5, v6 >> 1))
            break;
          if ((unsigned __int16)v0 == 1)
          {
            v17 = 4;
LABEL_44:
            if ((unsigned __int128)(v15 * (__int128)v17) >> 64 == (v15 * v17) >> 63)
              __asm { BR              X11 }
LABEL_60:
            __break(1u);
            JUMPOUT(0x1B0927464);
          }
          if ((_WORD)v0)
          {
            v17 = 0;
            goto LABEL_44;
          }
          if (v15 + 0x4000000000000000 < 0)
          {
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
            JUMPOUT(0x1B0927478);
          }
          v16 = sub_1B08A7600(1, (uint64_t)sub_1B08E5EF4, 0, 2 * v15, 0, v3, v22);
          if (v1)
            goto LABEL_50;
          if (v16 <= v21)
            v5 += v6 >> 1;
          v14 = v6 >= 4;
          v6 >>= 1;
          if (!v14)
            goto LABEL_46;
        }
        __break(1u);
        goto LABEL_60;
      }
    }
LABEL_46:
    if ((unsigned __int16)v0 == 1)
      goto LABEL_51;
    if ((_WORD)v0)
    {
      v11 = 0;
      goto LABEL_53;
    }
    if (v5 + 0x4000000000000000 >= 0)
      goto LABEL_49;
    __break(1u);
    goto LABEL_66;
  }
  if (v7)
  {
    v20 = v2;
    v5 = 0;
    v6 = 1 << v7;
    goto LABEL_36;
  }
LABEL_21:
  if (!(_WORD)v0)
  {
    v5 = (unsigned __int16)v0;
LABEL_49:
    v18 = sub_1B08A7600(1, (uint64_t)sub_1B08E5EF4, 0, 2 * v5, v0, v3, v22);
    if (!v1)
      goto LABEL_55;
    goto LABEL_50;
  }
  v5 = 0;
  v11 = 0;
  if ((unsigned __int16)v0 == 1)
LABEL_51:
    v11 = 4;
LABEL_53:
  if ((unsigned __int128)(v5 * (__int128)v11) >> 64 != (v5 * v11) >> 63)
    goto LABEL_63;
  v18 = sub_1B08A783C(1, v5 * v11, v0, v3, v22);
  if (v1)
  {
    while (1)
    {
LABEL_71:
      swift_unexpectedError();
      __break(1u);
    }
  }
LABEL_55:
  if (v18 > v21)
    return v5;
  v6 = v5 + 1;
  if (__OFADD__(v5, 1))
    goto LABEL_64;
  return v6;
}

uint64_t sub_1B0927620(unsigned int a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  __int128 v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v42;
  _BYTE v43[24];
  _BYTE v44[32];
  uint64_t v45;
  __int128 v46;
  _BYTE v47[40];
  __int128 v48;
  uint64_t (*v49)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  __int16 v57;
  uint64_t (*v58)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (__OFSUB__(v4, *a2))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
    {
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v7 = 1 << (__clz(v5) ^ 0x3Fu);
    if (v7 == v5)
    {
      v8 = *a2;
      v7 = v4 - *a2;
    }
    else
    {
      v9 = v3 + v7;
      if (__OFADD__(v3, v7))
      {
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      if (v9 < v3 || v9 >= v4)
        goto LABEL_61;
      v11 = *((_OWORD *)a2 + 2);
      *(_OWORD *)v47 = *((_OWORD *)a2 + 1);
      *(_OWORD *)&v47[16] = v11;
      *(_QWORD *)&v47[32] = a2[6];
      v12 = (unsigned __int128)(v9 * (__int128)5) >> 64;
      v13 = 5 * v9;
      if (v12 != v13 >> 63)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      v56 = 3;
      v57 = 257;
      v58 = sub_1B08E32D0;
      v59 = 0;
      v60 = *(_OWORD *)&v47[24];
      v61 = v13;
      v62 = 2;
      v63 = 0;
      v64 = 1;
      v48 = *(_OWORD *)&v47[8];
      sub_1B08ECB18((uint64_t)v47);
      sub_1B08A35F4();
      *(_QWORD *)&v48 = sub_1B0A1D090();
      *((_QWORD *)&v48 + 1) = v14;
      v49 = v15;
      v2 = 0;
      sub_1B08A1200();
      v17 = v16;
      swift_bridgeObjectRelease();
      if (v17 >= a1)
      {
        v8 = v3;
      }
      else
      {
        v18 = v5 + ~v7;
        if (!v18)
          return v4;
        if ((v18 & 0x8000000000000000) != 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        if (v18 == 1)
        {
          v7 = 1;
        }
        else
        {
          if (v18 - 0x4000000000000001 < 0xC000000000000001)
            goto LABEL_65;
          v7 = 1 << -(uint64_t)__clz(v18 - 1);
        }
        v8 = v3 + v5 - v7;
        if (__OFADD__(v3, v5 - v7))
        {
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          sub_1B08A36F0();
          swift_allocError();
          *v37 = 2;
          v37[1] = v2;
          v37[2] = 0xD00000000000001DLL;
          v37[3] = 0x80000001B0A26020;
          v37[4] = 0;
          swift_willThrow();
          while (1)
          {
LABEL_68:
            swift_bridgeObjectRelease();
            swift_unexpectedError();
            __break(1u);
          }
        }
      }
    }
    v39 = a2;
    if (v7 >= 2)
    {
      v19 = *((_OWORD *)a2 + 2);
      *(_OWORD *)v44 = *((_OWORD *)a2 + 1);
      *(_OWORD *)&v44[16] = v19;
      v45 = a2[6];
      v40 = *((_QWORD *)&v19 + 1);
      v46 = *(_OWORD *)&v44[8];
      while (1)
      {
        v20 = v7;
        v21 = v7 >> 1;
        v22 = __OFADD__(v8, v7 >> 1);
        v23 = v8 + (v7 >> 1);
        if (v22)
          break;
        if (v23 < v3 || v23 >= v4)
          goto LABEL_50;
        if ((unsigned __int128)(v23 * (__int128)5) >> 64 != (5 * v23) >> 63)
          goto LABEL_51;
        v48 = v46;
        sub_1B08ECB18((uint64_t)v44);
        sub_1B08A35F4();
        v2 = sub_1B0A1D090();
        if (__OFADD__(v40, 5 * v23))
          goto LABEL_66;
        v25 = v4;
        *(_QWORD *)&v48 = sub_1B0A1D078();
        *((_QWORD *)&v48 + 1) = v26;
        v49 = v27;
        swift_bridgeObjectRetain_n();
        v29 = sub_1B08C75E0((uint64_t *)&v48, v28, 3, 1);
        v2 = v48;
        if (__OFSUB__(*((_QWORD *)&v48 + 1), (_QWORD)v48))
          goto LABEL_52;
        if ((uint64_t)(*((_QWORD *)&v48 + 1) - v48) <= 1)
        {
          *(_QWORD *)&v42 = 0;
          *((_QWORD *)&v42 + 1) = 0xE000000000000000;
          sub_1B0A1D8A0();
          swift_bridgeObjectRelease();
          sub_1B08A36F0();
          swift_allocError();
          *v38 = 0;
          v38[1] = v2;
          v38[2] = 0xD00000000000002BLL;
          v38[3] = 0x80000001B0A25FD0;
          v38[4] = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_68;
        }
        if ((uint64_t)v48 > 0x7FFFFFFFFFFFFFFDLL)
          goto LABEL_53;
        v30 = v48 + 2;
        if (*((uint64_t *)&v48 + 1) < (uint64_t)v48 + 2)
          goto LABEL_53;
        *(_QWORD *)&v48 = v48 + 2;
        if ((v2 & 0x8000000000000000) != 0)
          goto LABEL_54;
        v31 = *((_QWORD *)v49 + 2);
        if (v31 < v2 || v31 < v30)
          goto LABEL_55;
        v32 = v29;
        swift_bridgeObjectRelease_n();
        v2 = (unint64_t)v49;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v32 < a1)
          v8 = v23;
        v7 = v21;
        v4 = v25;
        if (v20 < 4)
          goto LABEL_42;
      }
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
LABEL_42:
    if (v8 < v3 || v8 >= v4)
      goto LABEL_58;
    v33 = *((_OWORD *)v39 + 2);
    v42 = *((_OWORD *)v39 + 1);
    *(_OWORD *)v43 = v33;
    *(_QWORD *)&v43[16] = v39[6];
    if ((unsigned __int128)(v8 * (__int128)5) >> 64 != (5 * v8) >> 63)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    *(_QWORD *)&v48 = 3;
    WORD4(v48) = 257;
    v49 = sub_1B08E32D0;
    v50 = 0;
    v51 = *(_OWORD *)&v43[8];
    v52 = 5 * v8;
    v53 = 2;
    v54 = 0;
    v55 = 1;
    sub_1B08ECB18((uint64_t)&v42);
    sub_1B08A35F4();
    sub_1B0A1D090();
    sub_1B08A1200();
    v35 = v34;
    swift_bridgeObjectRelease();
    if (v35 >= a1)
      return v8;
    else
      return v8 + 1;
  }
  return v4;
}

uint64_t sub_1B0927B90(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unint64_t v10;
  int64_t v11;
  unsigned int v13;
  BOOL v14;
  unsigned int v16;

  v3 = *a2;
  v2 = a2[1];
  v4 = v2 - *a2;
  if (__OFSUB__(v2, *a2))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!v4)
    return v2;
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v5 = result;
  v6 = 1 << (__clz(v4) ^ 0x3Fu);
  if (v6 == v4)
  {
    v7 = *a2;
    v6 = v2 - *a2;
LABEL_20:
    if (v6 >= 2)
    {
      while (1)
      {
        v11 = v7 + (v6 >> 1);
        if (__OFADD__(v7, v6 >> 1))
          break;
        if (v11 < v3 || v11 >= v2)
          goto LABEL_40;
        result = sub_1B0961B28(v7 + (v6 >> 1));
        if (v13 < v5)
          v7 += v6 >> 1;
        v14 = v6 >= 4;
        v6 >>= 1;
        if (!v14)
          goto LABEL_30;
      }
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
LABEL_30:
    if (v7 < v3 || v7 >= v2)
      goto LABEL_43;
    sub_1B0961B28(v7);
    if (v16 >= v5)
      return v7;
    else
      return v7 + 1;
  }
  result = v3 + v6;
  if (__OFADD__(v3, v6))
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (result < v3 || result >= v2)
    goto LABEL_45;
  result = sub_1B0961B28(result);
  v7 = v3;
  if (v9 >= v5)
    goto LABEL_20;
  v10 = v4 + ~v6;
  if (!v10)
    return v2;
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v10 == 1)
  {
    v6 = 1;
    goto LABEL_19;
  }
  if (v10 - 0x4000000000000001 >= 0xC000000000000001)
  {
    v6 = 1 << -(uint64_t)__clz(v10 - 1);
LABEL_19:
    v7 = v3 + v4 - v6;
    if (__OFADD__(v3, v4 - v6))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    goto LABEL_20;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1B0927D84(unsigned int a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  _BYTE v51[32];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[24];
  __int128 v56;
  __int128 v57;
  _BYTE v58[40];
  __int128 v59;
  uint64_t v60;
  char v61;
  double (*v62)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  __int16 v69;
  unsigned int *(*v70)@<X0>(unsigned int *@<X0>, unsigned int *@<X8>);
  uint64_t v71;
  char v72;
  double (*v73)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;

  v2 = *a2;
  v3 = a2[1];
  v4 = v3 - *a2;
  if (__OFSUB__(v3, *a2))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v6 = 1 << (__clz(v4) ^ 0x3Fu);
    if (v6 == v4)
    {
      v7 = *a2;
      v6 = v3 - *a2;
    }
    else
    {
      v8 = v2 + v6;
      if (__OFADD__(v2, v6))
      {
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if (v8 < v2 || v8 >= v3)
        goto LABEL_51;
      v10 = *((_OWORD *)a2 + 2);
      v57 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v58 = v10;
      *(_OWORD *)&v58[16] = *((_OWORD *)a2 + 3);
      *(_QWORD *)&v58[32] = a2[8];
      v11 = (unsigned __int128)(v8 * (__int128)12) >> 64;
      v12 = 12 * v8;
      if (v11 != v12 >> 63)
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      v69 = 257;
      v70 = sub_1B09623DC;
      v71 = 0;
      v72 = 1;
      v73 = sub_1B0962438;
      v74 = 0;
      v75 = *(_OWORD *)&v58[8];
      v76 = v12;
      v77 = 2;
      v78 = 0;
      v79 = 1;
      v59 = *(_OWORD *)&v58[24];
      sub_1B08ECAEC((uint64_t)&v57);
      sub_1B08A35F4();
      *(_QWORD *)&v59 = sub_1B0A1D090();
      *((_QWORD *)&v59 + 1) = v13;
      v60 = v14;
      sub_1B08A16C4();
      v16 = v15;
      swift_bridgeObjectRelease();
      if (v16 >= a1)
      {
        v7 = v2;
      }
      else
      {
        v17 = v4 + ~v6;
        if (!v17)
          return v3;
        if ((v17 & 0x8000000000000000) != 0)
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        if (v17 == 1)
        {
          v6 = 1;
        }
        else
        {
          if (v17 - 0x4000000000000001 < 0xC000000000000001)
          {
LABEL_55:
            __break(1u);
            swift_bridgeObjectRelease();
LABEL_58:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            goto LABEL_59;
          }
          v6 = 1 << -(uint64_t)__clz(v17 - 1);
        }
        v7 = v2 + v4 - v6;
        if (__OFADD__(v2, v4 - v6))
        {
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
      }
    }
    v44 = a2;
    if (v6 >= 2)
    {
      v18 = *((_OWORD *)a2 + 3);
      *(_QWORD *)&v55[16] = a2[8];
      v19 = *((_OWORD *)a2 + 1);
      v54 = *((_OWORD *)a2 + 2);
      *(_OWORD *)v55 = v18;
      v53 = v19;
      v45 = *((_QWORD *)&v54 + 1);
      v46 = v2;
      v56 = *(_OWORD *)&v55[8];
      while (1)
      {
        v20 = v7 + (v6 >> 1);
        if (__OFADD__(v7, v6 >> 1))
          break;
        if (v20 < v2 || v20 >= v3)
          goto LABEL_44;
        if ((unsigned __int128)(v20 * (__int128)12) >> 64 != (12 * v20) >> 63)
          goto LABEL_45;
        v49 = v7;
        v59 = v56;
        sub_1B08ECAEC((uint64_t)&v53);
        sub_1B08A35F4();
        v22 = sub_1B0A1D090();
        if (__OFADD__(v45, 12 * v20))
        {
          sub_1B08A36F0();
          swift_allocError();
          *v40 = 2;
          v40[1] = v22;
          v40[2] = 0xD00000000000001DLL;
          v40[3] = 0x80000001B0A26020;
          v40[4] = 0;
          swift_willThrow();
          while (1)
          {
LABEL_59:
            swift_bridgeObjectRelease();
            swift_unexpectedError();
            __break(1u);
          }
        }
        v48 = v6 >> 1;
        v23 = v6;
        *(_QWORD *)&v59 = sub_1B0A1D078();
        *((_QWORD *)&v59 + 1) = v24;
        v60 = v25;
        *(_QWORD *)&v50 = v59;
        *((_QWORD *)&v50 + 1) = v24;
        *(_QWORD *)v51 = v25;
        swift_bridgeObjectRetain_n();
        v27 = sub_1B08C1578((uint64_t *)&v50, v26, 1);
        v28 = v3;
        v30 = sub_1B08C1578((uint64_t *)&v50, v29, 1);
        swift_bridgeObjectRelease();
        v31 = v50;
        v32 = *(_QWORD *)v51;
        if (v30 < v27)
        {
          sub_1B08A38E4();
          v41 = (void *)swift_allocError();
          swift_willThrow();
          sub_1B08A36F0();
          swift_allocError();
          *v42 = v41;
          v42[1] = v31;
          v42[2] = 0x7272652072657355;
          v42[3] = 0xEA0000000000726FLL;
          v42[4] = v41;
          v43 = v41;
          swift_willThrow();
          goto LABEL_58;
        }
        v33 = *((_QWORD *)&v50 + 1);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v59 = v31;
        *((_QWORD *)&v59 + 1) = v33;
        v60 = v32;
        sub_1B08C1578((uint64_t *)&v59, v34, 1);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v7 = v49;
        if (v30 < a1)
          v7 = v20;
        v6 = v48;
        v3 = v28;
        v2 = v46;
        if (v23 < 4)
          goto LABEL_36;
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
LABEL_36:
    if (v7 < v2 || v7 >= v3)
      goto LABEL_48;
    v35 = *((_OWORD *)v44 + 2);
    v50 = *((_OWORD *)v44 + 1);
    *(_OWORD *)v51 = v35;
    *(_OWORD *)&v51[16] = *((_OWORD *)v44 + 3);
    v52 = v44[8];
    if ((unsigned __int128)(v7 * (__int128)12) >> 64 != (12 * v7) >> 63)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v36 = v7;
    LOWORD(v59) = 257;
    *((_QWORD *)&v59 + 1) = sub_1B09623DC;
    v60 = 0;
    v61 = 1;
    v62 = sub_1B0962438;
    v63 = 0;
    v64 = *(_OWORD *)&v51[8];
    v65 = 12 * v7;
    v66 = 2;
    v67 = 0;
    v68 = 1;
    sub_1B08ECAEC((uint64_t)&v50);
    sub_1B08A35F4();
    sub_1B0A1D090();
    sub_1B08A16C4();
    v38 = v37;
    swift_bridgeObjectRelease();
    if (v38 >= a1)
      return v36;
    else
      return v36 + 1;
  }
  return v3;
}

uint64_t sub_1B092837C(unsigned int a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[5];
  _QWORD v50[6];

  v2 = a2[5];
  if (!v2)
    return v2;
  if ((v2 & 0x8000000000000000) != 0)
    goto LABEL_30;
  v3 = __clz(v2) ^ 0x3F;
  v4 = 1 << v3;
  if (1 << v3 == v2)
  {
    v5 = 0;
    v4 = a2[5];
    if (!v3)
      goto LABEL_22;
  }
  else
  {
    sub_1B0962E14(1 << v3, (uint64_t)&v44);
    v6 = v44;
    v7 = v47;
    v8 = v48;
    sub_1B08A3638(v45, v46);
    sub_1B08A3638(v7, v8);
    if (v6 < a1)
    {
      v9 = v2 + ~v4;
      if (!v9)
        return v2;
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_31;
      if (v9 == 1)
      {
        v5 = v2 - 1;
      }
      else
      {
        if (v9 - 0x4000000000000001 < 0xC000000000000001)
          goto LABEL_32;
        v10 = -(int)__clz(v9 - 1);
        v4 = 1 << v10;
        v5 = v2 - (1 << v10);
        if ((v10 & 0x3F) != 0)
          goto LABEL_15;
      }
LABEL_22:
      sub_1B0962E14(v5, (uint64_t)&v44);
      v29 = v44;
      v30 = v47;
      v31 = v48;
      sub_1B08A3638(v45, v46);
      sub_1B08A3638(v30, v31);
      if (v29 < a1)
      {
        v2 = v5 + 1;
        if (!__OFADD__(v5, 1))
          return v2;
        __break(1u);
      }
      return v5;
    }
    v5 = 0;
    if (!v3)
      goto LABEL_22;
  }
LABEL_15:
  v34 = a2[2];
  v39 = a2[1];
  v40 = *a2;
  while (1)
  {
    v11 = v5 + (v4 >> 1);
    if (__OFADD__(v5, v4 >> 1))
      break;
    if ((unsigned __int128)(v11 * (__int128)11) >> 64 != (11 * v11) >> 63)
      goto LABEL_29;
    *(_QWORD *)&v44 = v40;
    *((_QWORD *)&v44 + 1) = v39;
    sub_1B08ECA58((uint64_t)a2);
    sub_1B08A35B0(v40, v39);
    sub_1B08A35F4();
    v2 = sub_1B0A1D090();
    if (__OFADD__(v34, 11 * v11))
      goto LABEL_33;
    v12 = sub_1B0A1D078();
    v14 = v13;
    v16 = v15;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v44 = v12;
    *((_QWORD *)&v44 + 1) = v14;
    v45 = v16;
    swift_bridgeObjectRetain_n();
    LODWORD(v12) = sub_1B08C75E0((uint64_t *)&v44, v17, 3, 1);
    v36 = v5 + (v4 >> 1);
    v37 = v4 >> 1;
    v42 = v44;
    v43 = v45;
    swift_bridgeObjectRetain();
    v19 = sub_1B08C1578((uint64_t *)&v42, v18, 1);
    v20 = v12;
    v38 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v44 = v42;
    v45 = v43;
    swift_bridgeObjectRetain();
    v22 = sub_1B08C1578((uint64_t *)&v44, v21, 1);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v23 = v19;
    v24 = v22;
    sub_1B08ECA58((uint64_t)a2);
    v2 = v39;
    sub_1B0964A84(v49, v40, v39, v23);
    v25 = v49[1];
    v26 = v49[2];
    sub_1B08ECA58((uint64_t)a2);
    sub_1B0964A84(v50, v40, v39, v24);
    v28 = v50[1];
    v27 = v50[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B092CDFC((uint64_t)a2);
    sub_1B08A3638(v25, v26);
    sub_1B08A3638(v28, v27);
    if (v20 < a1)
      v5 = v36;
    v4 = v37;
    if (v38 < 4)
      goto LABEL_22;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  sub_1B08A36F0();
  swift_allocError();
  *v33 = 2;
  v33[1] = v2;
  v33[2] = 0xD00000000000001DLL;
  v33[3] = 0x80000001B0A26020;
  v33[4] = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_1B092CDFC((uint64_t)a2);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t sub_1B09287E8(unsigned int a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  BOOL v12;

  result = *(_QWORD *)(a2 + 16);
  if (result)
  {
    v4 = __clz(result);
    v5 = v4 ^ 0x3F;
    v6 = 1 << (v4 ^ 0x3Fu);
    if (v6 == result)
    {
      v7 = 0;
      v6 = *(_QWORD *)(a2 + 16);
      if (v5)
        goto LABEL_15;
    }
    else
    {
      if (v6 >= result)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (*(unsigned __int16 *)(a2 + 4 * v6 + 32) >= a1)
      {
        v7 = 0;
        if (v5)
          goto LABEL_15;
      }
      else
      {
        v8 = result + ~v6;
        if (!v8)
          return result;
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_29;
        if (v8 == 1)
        {
          v7 = result - 1;
        }
        else
        {
          if (v8 - 0x4000000000000001 < 0xC000000000000001)
          {
LABEL_30:
            __break(1u);
            return result;
          }
          v9 = __clz(v8 - 1);
          v10 = -v9;
          v6 = 1 << -(char)v9;
          v7 = result - v6;
          if ((v10 & 0x3F) != 0)
          {
LABEL_15:
            while (1)
            {
              v11 = v7 + (v6 >> 1);
              if (__OFADD__(v7, v6 >> 1))
                break;
              if (v11 >= result)
                goto LABEL_26;
              if (*(unsigned __int16 *)(a2 + 32 + 4 * v11) < a1)
                v7 += v6 >> 1;
              v12 = v6 >= 4;
              v6 >>= 1;
              if (!v12)
                goto LABEL_20;
            }
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
        }
      }
    }
LABEL_20:
    if (v7 < result)
    {
      if (*(unsigned __int16 *)(a2 + 4 * v7 + 32) >= a1)
        return v7;
      else
        return v7 + 1;
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1B09288F4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;
  void (*v14)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  void (*v34)(_QWORD *__return_ptr, _QWORD *);
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  _QWORD v47[4];
  __int128 v48;
  __int128 v49;
  char v50;
  _OWORD v51[2];
  uint64_t v52;

  v2 = *(_OWORD *)(a2 + 16);
  v51[0] = *(_OWORD *)a2;
  v51[1] = v2;
  v52 = *(_QWORD *)(a2 + 32);
  v3 = *((_QWORD *)&v51[0] + 1);
  if (!*((_QWORD *)&v51[0] + 1))
    return v3;
  if ((*((_QWORD *)&v51[0] + 1) & 0x8000000000000000) == 0)
  {
    v4 = __clz(*((unint64_t *)&v51[0] + 1)) ^ 0x3F;
    v5 = 1 << v4;
    if (1 << v4 == *((_QWORD *)&v51[0] + 1))
    {
      v6 = 0;
      v5 = *((_QWORD *)&v51[0] + 1);
      if (!v4)
        goto LABEL_21;
    }
    else
    {
      sub_1B095B0F8(1 << v4);
      if (v7 <= a1)
      {
        v8 = *((_QWORD *)&v51[0] + 1) + ~v5;
        if (!v8)
          return v3;
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_28;
        if (v8 == 1)
        {
          v6 = *((_QWORD *)&v51[0] + 1) - 1;
LABEL_21:
          sub_1B095B0F8(v6);
          if (v29 > a1)
            return v6;
          v3 = v6 + 1;
          if (!__OFADD__(v6, 1))
            return v3;
          goto LABEL_27;
        }
        if (v8 - 0x4000000000000001 < 0xC000000000000001)
          goto LABEL_29;
        v9 = -(int)__clz(v8 - 1);
        v5 = 1 << v9;
        v6 = *((_QWORD *)&v51[0] + 1) - (1 << v9);
        if ((v9 & 0x3F) == 0)
          goto LABEL_21;
      }
      else
      {
        v6 = 0;
        if (!v4)
          goto LABEL_21;
      }
    }
    v31 = *(_QWORD *)&v51[0];
    while (1)
    {
      v10 = v6 + (v5 >> 1);
      if (__OFADD__(v6, v5 >> 1))
        break;
      if ((unsigned __int128)(v10 * (__int128)v31) >> 64 != (v10 * v31) >> 63)
        goto LABEL_30;
      v35 = v5 >> 1;
      v36 = v5;
      v37 = v6;
      v34 = *(void (**)(_QWORD *__return_ptr, _QWORD *))(a2 + 80);
      v11 = *(_OWORD *)(a2 + 56);
      v48 = *(_OWORD *)(a2 + 40);
      v49 = v11;
      v50 = *(_BYTE *)(a2 + 72);
      sub_1B092CD34((uint64_t)&v48);
      swift_retain();
      sub_1B092CD5C((uint64_t)v51);
      v12 = sub_1B0A1D084();
      v14 = (void (*)(_QWORD *__return_ptr, _QWORD *))*((_QWORD *)&v48 + 1);
      v13 = v48;
      v43 = v12;
      v44 = v15;
      v45 = v16;
      v38 = v12;
      v39 = v15;
      v40 = v16;
      swift_bridgeObjectRetain_n();
      v18 = (unsigned __int16)sub_1B08C15A4(&v38, v17, v13 & 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v20 = (unsigned __int16)sub_1B08C15A4(&v38, v19, HIBYTE(v13) & 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v18;
      v22 = v38;
      v23 = v39;
      v24 = v40;
      v41[0] = v21;
      v41[1] = v20;
      v14(v42, v41);
      swift_bridgeObjectRelease();
      v25 = v42[0];
      v26 = v42[1];
      v43 = v22;
      v44 = v23;
      v45 = v24;
      v28 = sub_1B08C7B48(&v43, v27, *((uint64_t *)&v49 + 1), v50);
      swift_bridgeObjectRelease();
      v46[0] = v25;
      v46[1] = v26;
      v46[2] = v28;
      v34(v47, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B08AE40C((uint64_t)v51);
      sub_1B092CD84((uint64_t)&v48);
      swift_release();
      v6 = v37;
      if (v47[1] <= a1)
        v6 = v10;
      v5 = v35;
      if (v36 < 4)
        goto LABEL_21;
    }
    __break(1u);
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  sub_1B08A38A0();
  swift_allocError();
  swift_willThrow();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B0928DD0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34[3];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  _OWORD v39[2];
  uint64_t v40;

  v2 = *(_OWORD *)(a2 + 16);
  v39[0] = *(_OWORD *)a2;
  v39[1] = v2;
  v40 = *(_QWORD *)(a2 + 32);
  v3 = *((_QWORD *)&v39[0] + 1);
  if (!*((_QWORD *)&v39[0] + 1))
    return v3;
  if ((*((_QWORD *)&v39[0] + 1) & 0x8000000000000000) != 0)
    goto LABEL_34;
  v4 = __clz(*((unint64_t *)&v39[0] + 1)) ^ 0x3F;
  v5 = 1 << v4;
  if (1 << v4 == *((_QWORD *)&v39[0] + 1))
  {
    v6 = 0;
    v5 = *((_QWORD *)&v39[0] + 1);
    if (!v4)
      goto LABEL_25;
    goto LABEL_17;
  }
  v7 = sub_1B095B2A4(1 << v4);
  v8 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v8 >= v7)
  {
    if (v8 <= a1)
    {
      v9 = *((_QWORD *)&v39[0] + 1) + ~v5;
      if (!v9)
        return v3;
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_40;
      if (v9 == 1)
      {
        v6 = *((_QWORD *)&v39[0] + 1) - 1;
        goto LABEL_25;
      }
      if (v9 - 0x4000000000000001 < 0xC000000000000001)
        goto LABEL_41;
      v10 = -(int)__clz(v9 - 1);
      v5 = 1 << v10;
      v6 = *((_QWORD *)&v39[0] + 1) - (1 << v10);
      if ((v10 & 0x3F) == 0)
      {
LABEL_25:
        v23 = sub_1B095B2A4(v6);
        v24 = v23 + 1;
        if (!__OFADD__(v23, 1))
        {
          if (v24 >= v23)
          {
            if (v24 > a1)
              return v6;
            v3 = v6 + 1;
            if (!__OFADD__(v6, 1))
              return v3;
            goto LABEL_39;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      v6 = 0;
      if (!v4)
        goto LABEL_25;
    }
LABEL_17:
    v27 = *(_QWORD *)&v39[0];
    while (1)
    {
      v11 = v6 + (v5 >> 1);
      if (__OFADD__(v6, v5 >> 1))
        break;
      if ((unsigned __int128)(v11 * (__int128)v27) >> 64 != (v11 * v27) >> 63)
        goto LABEL_42;
      v12 = *(_OWORD *)(a2 + 56);
      v35 = *(_OWORD *)(a2 + 40);
      v36 = v12;
      v37 = *(_QWORD *)(a2 + 72);
      sub_1B092CDAC((uint64_t)&v35);
      sub_1B092CD5C((uint64_t)v39);
      *(_QWORD *)&v29 = sub_1B0A1D084();
      v13 = *((_QWORD *)&v35 + 1);
      v38 = v36;
      v14 = v35 & 1;
      *(_QWORD *)&v31 = v29;
      *((_QWORD *)&v31 + 1) = v15;
      v32 = v16;
      *((_QWORD *)&v29 + 1) = v15;
      v30 = v16;
      swift_bridgeObjectRetain_n();
      v18 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v29, v17, v14);
      v19 = v5;
      swift_bridgeObjectRelease();
      v31 = v29;
      v32 = v30;
      v21 = sub_1B08C7B48((uint64_t *)&v31, v20, v13, v38);
      swift_bridgeObjectRelease();
      v33[0] = v18;
      v33[1] = v21;
      (*((void (**)(uint64_t *__return_ptr, _QWORD *))&v36 + 1))(v34, v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B08AE40C((uint64_t)v39);
      sub_1B092CDD4((uint64_t)&v35);
      v22 = v34[0] + 1;
      if (__OFADD__(v34[0], 1))
        goto LABEL_32;
      if (v22 < v34[0])
        goto LABEL_33;
      v5 >>= 1;
      if (v22 <= a1)
        v6 = v11;
      if (v19 < 4)
        goto LABEL_25;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  sub_1B08A38A0();
  swift_allocError();
  swift_willThrow();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B09291B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t *v15;
  int v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return v3;
  v6 = result;
  v7 = __clz(v3) ^ 0x3F;
  v8 = 1 << v7;
  if (1 << v7 == v3)
  {
    v9 = 0;
    result = 0;
    v8 = *(_QWORD *)(a3 + 16);
    if (!v7)
    {
LABEL_30:
      if (v9 < v3)
      {
        v18 = a3 + 16 * v9;
        if (*(_QWORD *)(v18 + 32) == v6 && *(_QWORD *)(v18 + 40) == a2)
          return v9;
        else
          return v9 + (sub_1B0A1DA8C() & 1);
      }
      goto LABEL_40;
    }
LABEL_16:
    v9 = result;
    while (1)
    {
      v14 = v9 + (v8 >> 1);
      if (__OFADD__(v9, v8 >> 1))
        break;
      if (v14 >= v3)
        goto LABEL_39;
      v15 = (uint64_t *)(a3 + 32 + 16 * v14);
      result = *v15;
      if (*v15 != v6 || v15[1] != a2)
      {
        result = sub_1B0A1DA8C();
        if ((result & 1) != 0)
          v9 += v8 >> 1;
      }
      v13 = v8 >= 4;
      v8 >>= 1;
      if (!v13)
        goto LABEL_30;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (1 << v7 >= v3)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v10 = a3 + 16 * v8;
  v11 = *(_QWORD *)(v10 + 32) == result && *(_QWORD *)(v10 + 40) == a2;
  if (v11 || (result = sub_1B0A1DA8C(), (result & 1) == 0))
  {
    v9 = 0;
    result = 0;
    if (!v7)
      goto LABEL_30;
    goto LABEL_16;
  }
  v12 = v3 + ~v8;
  if (!v12)
    return v3;
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v12 == 1)
  {
    v9 = v3 - 1;
    goto LABEL_30;
  }
  if (v12 - 0x4000000000000001 >= 0xC000000000000001)
  {
    v17 = -(int)__clz(v12 - 1);
    v8 = 1 << v17;
    v9 = v3 - (1 << v17);
    result = v9;
    if ((v17 & 0x3F) == 0)
      goto LABEL_30;
    goto LABEL_16;
  }
LABEL_43:
  __break(1u);
  return result;
}

unint64_t sub_1B0929368(unsigned int a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = *(_QWORD *)(a2 + 16);
  if (result)
  {
    v4 = 1 << (__clz(result) ^ 0x3Fu);
    if (v4 == result)
    {
      v5 = 0;
      v4 = *(_QWORD *)(a2 + 16);
      if (result >= 2)
        goto LABEL_15;
    }
    else
    {
      if (v4 >= result)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (*(_DWORD *)(a2 + 8 * v4 + 32) >= a1)
      {
        v5 = 0;
        if (v4 >= 2)
          goto LABEL_15;
      }
      else
      {
        v4 = result + ~v4;
        if (!v4)
          return result;
        if ((v4 & 0x8000000000000000) != 0)
          goto LABEL_29;
        if (v4 != 1)
        {
          if (v4 - 0x4000000000000001 < 0xC000000000000001)
          {
LABEL_30:
            __break(1u);
            return result;
          }
          v4 = 1 << -(char)__clz(v4 - 1);
        }
        v5 = result - v4;
        if (v4 >= 2)
        {
LABEL_15:
          while (1)
          {
            v6 = v5 + (v4 >> 1);
            if (__OFADD__(v5, v4 >> 1))
              break;
            if (v6 >= result)
              goto LABEL_26;
            if (*(_DWORD *)(a2 + 32 + 8 * v6) < a1)
              v5 += v4 >> 1;
            v7 = v4 >= 4;
            v4 >>= 1;
            if (!v7)
              goto LABEL_20;
          }
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
      }
    }
LABEL_20:
    if (v5 < result)
    {
      if (*(_DWORD *)(a2 + 8 * v5 + 32) >= a1)
        return v5;
      else
        return v5 + 1;
    }
    goto LABEL_27;
  }
  return result;
}

uint64_t Collection<>.lowerBound<A>(of:lessFunc:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char *v84;
  char v85;
  uint64_t v86;
  char *v87;
  char v88;
  char *v89;
  char *v90;
  char v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  char *v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, char *, uint64_t);
  uint64_t v100;
  char *v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t result;
  uint64_t v107;
  char v108;
  _QWORD *v109;
  char *v110;
  char *v111;
  char *v112;
  char v113;
  void (*v114)(char *, uint64_t);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  void (*v132)(char *, uint64_t);
  uint64_t v133;
  char *v134;
  char v135;
  uint64_t v136;
  char *v137;
  char v138;
  char *v139;
  char *v140;
  char *v141;
  void (*v142)(char *, uint64_t);
  char *v143;
  char *v144;
  char v145;
  void (*v146)(char *, uint64_t);
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char v158;
  char *v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  char *v171;
  char *v172;
  char v173;
  char v174;
  void (*v175)(char *, uint64_t);
  char *v176;
  void (*v177)(char *, char *, uint64_t);
  void (*v178)(char *, uint64_t);
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  void (*v183)(char *, uint64_t);
  uint64_t v184;
  char *v185;
  void (*v186)(char *, uint64_t);
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char v192;
  uint64_t v193;
  char *v194;
  char v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char v199;
  char *v200;
  char *v201;
  char v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(char *, uint64_t);
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  void (*v222)(char *, uint64_t);
  uint64_t v223;
  char *v224;
  void (*v225)(char *, char *, uint64_t);
  char *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  void (*v232)(char *, char *, uint64_t);
  void (*v233)(char *, char *, uint64_t);
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  void (*v239)(char *, uint64_t);
  uint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  uint64_t (*v246)(char *, uint64_t);
  uint64_t v247;
  char *v248;
  uint64_t v249;
  void (*v250)(char *, uint64_t);
  void (*v251)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t TupleTypeMetadata2;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t (*v298)(char *, uint64_t);
  char *v299;
  char *v300;
  uint64_t v301;
  char *v302;
  void (*v303)(char *, char *, uint64_t);
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  char *v309;
  char *v310;

  v282 = a7;
  v297 = a3;
  v298 = a2;
  v296 = a1;
  v281 = a8;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v258 = (char *)&v249 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v255 = (char *)&v249 - v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v259 = sub_1B0A1D1D4();
  v257 = *(_QWORD *)(v259 - 8);
  MEMORY[0x1E0C80A78](v259);
  v261 = (char *)&v249 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v256 = (char *)&v249 - v19;
  v292 = swift_getAssociatedTypeWitness();
  v301 = *(_QWORD *)(v292 - 8);
  MEMORY[0x1E0C80A78](v292);
  v291 = (char *)&v249 - v20;
  v286 = AssociatedConformanceWitness;
  v278 = sub_1B0A1D924();
  v275 = *(_QWORD *)(v278 - 8);
  MEMORY[0x1E0C80A78](v278);
  v279 = (char *)&v249 - v21;
  v22 = sub_1B0A1D690();
  MEMORY[0x1E0C80A78](v22);
  v268 = (char *)&v249 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v266 = (char *)&v249 - v25;
  MEMORY[0x1E0C80A78](v26);
  v277 = (char *)&v249 - v27;
  v270 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v304 = *(_QWORD *)(v270 + 16);
  v305 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v305);
  v254 = (char *)&v249 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v306 = (char *)&v249 - v30;
  v283 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v31);
  v285 = (char *)&v249 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v249 - v34;
  MEMORY[0x1E0C80A78](v36);
  v253 = (char *)&v249 - v37;
  MEMORY[0x1E0C80A78](v38);
  v263 = (char *)&v249 - v39;
  MEMORY[0x1E0C80A78](v40);
  v267 = (char *)&v249 - v41;
  MEMORY[0x1E0C80A78](v42);
  v269 = (char *)&v249 - v43;
  MEMORY[0x1E0C80A78](v44);
  v273 = (char *)&v249 - v45;
  MEMORY[0x1E0C80A78](v46);
  v272 = (char *)&v249 - v47;
  MEMORY[0x1E0C80A78](v48);
  v265 = (char *)&v249 - v49;
  MEMORY[0x1E0C80A78](v50);
  v260 = (char *)&v249 - v51;
  MEMORY[0x1E0C80A78](v52);
  v271 = (char *)&v249 - v53;
  MEMORY[0x1E0C80A78](v54);
  v274 = (char *)&v249 - v55;
  MEMORY[0x1E0C80A78](v56);
  v299 = (char *)&v249 - v57;
  MEMORY[0x1E0C80A78](v58);
  v300 = (char *)&v249 - v59;
  MEMORY[0x1E0C80A78](v60);
  v308 = (char *)&v249 - v61;
  MEMORY[0x1E0C80A78](v62);
  v309 = (char *)&v249 - v63;
  MEMORY[0x1E0C80A78](v64);
  v66 = (char *)&v249 - v65;
  v67 = swift_checkMetadataState();
  v307 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v289 = (char *)&v249 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v69);
  v264 = (char *)&v249 - v70;
  MEMORY[0x1E0C80A78](v71);
  v276 = (char *)&v249 - v72;
  MEMORY[0x1E0C80A78](v73);
  v75 = (char *)&v249 - v74;
  MEMORY[0x1E0C80A78](v76);
  v78 = (char *)&v249 - v77;
  sub_1B0A1D594();
  v294 = a5;
  v295 = v8;
  v293 = a4;
  v302 = v78;
  sub_1B0A1D5C4();
  v280 = v75;
  v288 = v67;
  v290 = a6;
  sub_1B0A1D738();
  v79 = sub_1B0A1D7C8();
  v284 = v66;
  if ((v79 & 1) == 0)
  {
    v82 = sub_1B0A1D7C8();
    v83 = sub_1B0A1D7BC();
    if ((v82 & 1) == 0)
    {
      v81 = v286;
      if (v83 >= 64)
      {
        v310 = 0;
        sub_1B089F364();
        v95 = v309;
        sub_1B0A1D75C();
        v66 = v284;
        v96 = sub_1B0A1D1E0();
        v86 = v283;
        (*(void (**)(char *, uint64_t))(v283 + 8))(v95, AssociatedTypeWitness);
        if ((v96 & 1) != 0)
          goto LABEL_19;
        goto LABEL_22;
      }
      v66 = v284;
      v80 = sub_1B0A1D7B0();
      goto LABEL_13;
    }
    v81 = v286;
    if (v83 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_1B0A1DABC();
      v89 = v309;
      sub_1B0A1DA80();
      v90 = v284;
      v91 = sub_1B0A1D180();
      v86 = v283;
      v92 = *(void (**)(char *, uint64_t))(v283 + 8);
      v92(v89, AssociatedTypeWitness);
      v93 = v308;
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v308, v90, AssociatedTypeWitness);
      if ((v91 & 1) != 0)
      {
        v94 = sub_1B0A1D7B0();
        v92(v93, AssociatedTypeWitness);
        v66 = v284;
        if (!v94)
          goto LABEL_19;
      }
      else
      {
        v92(v93, AssociatedTypeWitness);
        v66 = v284;
      }
      goto LABEL_22;
    }
    v310 = 0;
    sub_1B089F364();
    v84 = v309;
    sub_1B0A1D75C();
    v66 = v284;
    v85 = sub_1B0A1D1E0();
    v86 = v283;
    (*(void (**)(char *, uint64_t))(v283 + 8))(v84, AssociatedTypeWitness);
    if ((v85 & 1) == 0)
      goto LABEL_22;
LABEL_19:
    (*(void (**)(char *, uint64_t))(v86 + 8))(v66, AssociatedTypeWitness);
    v97 = v307;
    v98 = v288;
    (*(void (**)(char *, uint64_t))(v307 + 8))(v302, v288);
    v99 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v97 + 32);
LABEL_20:
    v100 = v281;
    v101 = v280;
    return v99(v100, v101, v98);
  }
  if (sub_1B0A1D7BC() >= 64)
  {
    v310 = 0;
    sub_1B089F364();
    v87 = v309;
    sub_1B0A1D75C();
    v81 = v286;
    v88 = sub_1B0A1D1E0();
    v86 = v283;
    (*(void (**)(char *, uint64_t))(v283 + 8))(v87, AssociatedTypeWitness);
    if ((v88 & 1) == 0)
      goto LABEL_22;
    goto LABEL_19;
  }
  v80 = sub_1B0A1D7B0();
  v81 = v286;
LABEL_13:
  v86 = v283;
  if (!v80)
    goto LABEL_19;
LABEL_22:
  v102 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v103 = v299;
  v303 = v102;
  v102(v299, v66, AssociatedTypeWitness);
  v308 = (char *)swift_getAssociatedConformanceWitness();
  sub_1B0A1DABC();
  v104 = v279;
  sub_1B0A1DA80();
  v105 = *(_QWORD *)(v81 + 8);
  result = sub_1B0A1D1E0();
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  v107 = v278;
  v252 = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEC940], v278);
  v108 = sub_1B0A1D438();
  v275 = *(_QWORD *)(v275 + 8);
  ((void (*)(char *, uint64_t))v275)(v104, v107);
  v287 = v105;
  if ((v108 & 1) != 0)
  {
    v109 = (_QWORD *)v283;
    v299 = *(char **)(v283 + 8);
    ((void (*)(char *, uint64_t))v299)(v103, AssociatedTypeWitness);
    v110 = v277;
    v251 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v109[7];
    v251(v277, 1, 1, AssociatedTypeWitness);
    v111 = v300;
    goto LABEL_30;
  }
  sub_1B0A1DABC();
  v112 = v309;
  sub_1B0A1DA80();
  v113 = sub_1B0A1D1E0();
  v109 = (_QWORD *)v283;
  v114 = *(void (**)(char *, uint64_t))(v283 + 8);
  v114(v112, AssociatedTypeWitness);
  v299 = (char *)v114;
  v114(v103, AssociatedTypeWitness);
  v111 = v300;
  if ((v113 & 1) != 0)
  {
    sub_1B0A1DABC();
    v115 = v277;
    sub_1B0A1DA80();
    v110 = v115;
    v251 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v109[7];
    v251(v115, 0, 1, AssociatedTypeWitness);
    goto LABEL_30;
  }
  sub_1B0A1DABC();
  sub_1B0A1DA80();
  v116 = sub_1B0A1D930();
  result = sub_1B0A1D948();
  v117 = v116 - result;
  if (__OFSUB__(v116, result))
    goto LABEL_103;
  v118 = __OFSUB__(v117, 1);
  v119 = (char *)(v117 - 1);
  v109 = (_QWORD *)v283;
  if (v118)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  v310 = v119;
  sub_1B089F364();
  v120 = v309;
  sub_1B0A1D7A4();
  v110 = v277;
  ((void (*)(char *, uint64_t))v299)(v120, AssociatedTypeWitness);
  v251 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v109[7];
  v251(v110, 0, 1, AssociatedTypeWitness);
LABEL_30:
  v277 = (char *)v109[6];
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v277)(v110, 1, AssociatedTypeWitness);
  if ((_DWORD)result == 1)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  v283 = v109[4];
  ((void (*)(char *, char *, uint64_t))v283)(v111, v110, AssociatedTypeWitness);
  if ((sub_1B0A1D1E0() & 1) != 0)
    goto LABEL_69;
  v121 = v276;
  v122 = v288;
  sub_1B0A1D72C();
  v123 = sub_1B0A1D66C();
  v124 = v291;
  v125 = v292;
  (*(void (**)(char *))(v301 + 16))(v291);
  ((void (*)(char **, _QWORD))v123)(&v310, 0);
  v126 = *(void (**)(char *, uint64_t))(v307 + 8);
  v127 = v122;
  v111 = v300;
  v126(v121, v127);
  LOBYTE(v123) = v298(v124, v296);
  (*(void (**)(char *, uint64_t))(v301 + 8))(v124, v125);
  if ((v123 & 1) == 0)
    goto LABEL_69;
  v250 = v126;
  sub_1B0A1DABC();
  v128 = v271;
  sub_1B0A1DA80();
  v129 = *(_QWORD *)(v270 + 8);
  v130 = v309;
  sub_1B0A1D990();
  v131 = v128;
  v132 = (void (*)(char *, uint64_t))v299;
  ((void (*)(char *, uint64_t))v299)(v131, AssociatedTypeWitness);
  sub_1B0A1D99C();
  v132(v130, AssociatedTypeWitness);
  if ((sub_1B0A1D7C8() & 1) != 0)
  {
    if (sub_1B0A1D7BC() < 64)
    {
      v133 = sub_1B0A1D7B0();
      v134 = v279;
      if (!v133)
        goto LABEL_49;
      goto LABEL_51;
    }
  }
  else
  {
    v135 = sub_1B0A1D7C8();
    v136 = sub_1B0A1D7BC();
    if ((v135 & 1) == 0)
    {
      v134 = v279;
      if (v136 < 64)
      {
        if (!sub_1B0A1D7B0())
          goto LABEL_49;
      }
      else
      {
        v310 = 0;
        sub_1B089F364();
        v144 = v309;
        sub_1B0A1D75C();
        v145 = sub_1B0A1D1E0();
        ((void (*)(char *, uint64_t))v299)(v144, AssociatedTypeWitness);
        if ((v145 & 1) != 0)
          goto LABEL_49;
      }
      goto LABEL_51;
    }
    if (v136 <= 64)
    {
      sub_1B0A1DABC();
      v139 = v309;
      sub_1B0A1DA80();
      v140 = v274;
      LODWORD(v270) = sub_1B0A1D180();
      v141 = v139;
      v142 = (void (*)(char *, uint64_t))v299;
      ((void (*)(char *, uint64_t))v299)(v141, AssociatedTypeWitness);
      v143 = v260;
      v303(v260, v140, AssociatedTypeWitness);
      if ((v270 & 1) != 0)
      {
        v270 = sub_1B0A1D7B0();
        v142(v143, AssociatedTypeWitness);
        v134 = v279;
        if (!v270)
          goto LABEL_49;
      }
      else
      {
        v142(v143, AssociatedTypeWitness);
        v134 = v279;
      }
      goto LABEL_51;
    }
  }
  v310 = 0;
  sub_1B089F364();
  v137 = v309;
  sub_1B0A1D75C();
  v138 = sub_1B0A1D1E0();
  ((void (*)(char *, uint64_t))v299)(v137, AssociatedTypeWitness);
  v134 = v279;
  if ((v138 & 1) != 0)
  {
LABEL_49:
    v146 = (void (*)(char *, uint64_t))v299;
    ((void (*)(char *, uint64_t))v299)(v274, AssociatedTypeWitness);
    v146(v111, AssociatedTypeWitness);
    v146(v284, AssociatedTypeWitness);
    v98 = v288;
    v250(v302, v288);
    v99 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v307 + 32);
    goto LABEL_20;
  }
LABEL_51:
  v270 = v129;
  v147 = v273;
  sub_1B0A1D954();
  v148 = v269;
  v303(v269, v147, AssociatedTypeWitness);
  sub_1B0A1DABC();
  sub_1B0A1DA80();
  result = sub_1B0A1D1E0();
  if ((result & 1) == 0)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  v149 = v148;
  v150 = v134;
  v151 = v278;
  v152 = sub_1B0A1D438();
  ((void (*)(char *, uint64_t))v275)(v150, v151);
  if ((v152 & 1) != 0)
  {
    ((void (*)(char *, uint64_t))v299)(v149, AssociatedTypeWitness);
    v153 = 1;
    v154 = v279;
    v155 = v267;
    v156 = v268;
  }
  else
  {
    sub_1B0A1DABC();
    v157 = v309;
    sub_1B0A1DA80();
    v158 = sub_1B0A1D1E0();
    v159 = v149;
    v160 = (void (*)(char *, uint64_t))v299;
    ((void (*)(char *, uint64_t))v299)(v157, AssociatedTypeWitness);
    v160(v159, AssociatedTypeWitness);
    if ((v158 & 1) != 0)
    {
      sub_1B0A1DABC();
      v156 = v268;
      sub_1B0A1DA80();
      v153 = 0;
      v154 = v279;
      v155 = v267;
    }
    else
    {
      sub_1B0A1DABC();
      sub_1B0A1DA80();
      v161 = sub_1B0A1D930();
      result = sub_1B0A1D948();
      v162 = v161 - result;
      v156 = v268;
      if (__OFSUB__(v161, result))
      {
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
      v118 = __OFSUB__(v162, 1);
      v163 = (char *)(v162 - 1);
      v154 = v279;
      v155 = v267;
      if (v118)
      {
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
        goto LABEL_111;
      }
      v310 = v163;
      sub_1B089F364();
      v164 = v309;
      sub_1B0A1D7A4();
      ((void (*)(char *, uint64_t))v299)(v164, AssociatedTypeWitness);
      v153 = 0;
    }
  }
  v251(v156, v153, 1, AssociatedTypeWitness);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v277)(v156, 1, AssociatedTypeWitness);
  if ((_DWORD)result == 1)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  ((void (*)(char *, char *, uint64_t))v283)(v272, v156, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t))v299)(v273, AssociatedTypeWitness);
  v303(v155, v274, AssociatedTypeWitness);
  sub_1B0A1DABC();
  sub_1B0A1DA80();
  result = sub_1B0A1D1E0();
  if ((result & 1) == 0)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  v165 = v155;
  v166 = v154;
  v167 = v278;
  v168 = sub_1B0A1D438();
  ((void (*)(char *, uint64_t))v275)(v166, v167);
  if ((v168 & 1) != 0)
  {
    v169 = (void (*)(char *, uint64_t))v299;
    ((void (*)(char *, uint64_t))v299)(v165, AssociatedTypeWitness);
    v169(v272, AssociatedTypeWitness);
    v170 = 1;
LABEL_63:
    v171 = v266;
    goto LABEL_67;
  }
  sub_1B0A1DABC();
  v172 = v309;
  sub_1B0A1DA80();
  v173 = sub_1B0A1D1E0();
  ((void (*)(char *, uint64_t))v299)(v172, AssociatedTypeWitness);
  if ((v173 & 1) != 0
    || (sub_1B0A1DABC(),
        sub_1B0A1DA80(),
        v174 = sub_1B0A1D1E0(),
        ((void (*)(char *, uint64_t))v299)(v172, AssociatedTypeWitness),
        (v174 & 1) != 0))
  {
    v175 = (void (*)(char *, uint64_t))v299;
    ((void (*)(char *, uint64_t))v299)(v165, AssociatedTypeWitness);
    sub_1B0A1DABC();
    v171 = v266;
    sub_1B0A1DA80();
    v175(v272, AssociatedTypeWitness);
    v170 = 0;
    goto LABEL_67;
  }
  v224 = v165;
  v225 = (void (*)(char *, char *, uint64_t))v283;
  ((void (*)(char *, char *, uint64_t))v283)(v263, v224, AssociatedTypeWitness);
  sub_1B0A1DABC();
  sub_1B0A1DA80();
  v226 = v272;
  result = sub_1B0A1D18C();
  if ((result & 1) == 0)
    goto LABEL_109;
  v227 = v172;
  v228 = TupleTypeMetadata2;
  v229 = v255;
  v230 = &v255[*(int *)(TupleTypeMetadata2 + 48)];
  v225(v255, v227, AssociatedTypeWitness);
  v279 = v230;
  v231 = v226;
  v232 = v225;
  v233 = v303;
  v303(v230, v231, AssociatedTypeWitness);
  v234 = v258;
  v235 = &v258[*(int *)(v228 + 48)];
  v233(v258, v229, AssociatedTypeWitness);
  v233(v235, v230, AssociatedTypeWitness);
  v232(v261, v234, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t))v299)(v235, AssociatedTypeWitness);
  v236 = &v234[*(int *)(TupleTypeMetadata2 + 48)];
  v232(v234, v229, AssociatedTypeWitness);
  v232(v236, v279, AssociatedTypeWitness);
  v237 = v259;
  v238 = v261;
  v232(&v261[*(int *)(v259 + 36)], v236, AssociatedTypeWitness);
  v239 = (void (*)(char *, uint64_t))v299;
  ((void (*)(char *, uint64_t))v299)(v234, AssociatedTypeWitness);
  v240 = v257;
  v241 = v256;
  (*(void (**)(char *, char *, uint64_t))(v257 + 32))(v256, v238, v237);
  MEMORY[0x1B5E0D530](MEMORY[0x1E0DEA4E8], v237);
  v242 = v263;
  LOBYTE(v238) = sub_1B0A1D438();
  (*(void (**)(char *, uint64_t))(v240 + 8))(v241, v237);
  v239(v242, AssociatedTypeWitness);
  if ((v238 & 1) == 0)
  {
    v239(v272, AssociatedTypeWitness);
    v170 = 1;
    goto LABEL_63;
  }
  sub_1B0A1DABC();
  sub_1B0A1DA80();
  v279 = (char *)sub_1B0A1D930();
  sub_1B0A1DABC();
  v243 = v253;
  sub_1B0A1DA80();
  v244 = v271;
  sub_1B0A1D99C();
  v245 = v243;
  v246 = (uint64_t (*)(char *, uint64_t))v299;
  ((void (*)(char *, uint64_t))v299)(v245, AssociatedTypeWitness);
  v247 = sub_1B0A1D948();
  result = v246(v244, AssociatedTypeWitness);
  if (__OFSUB__(v279, v247))
    goto LABEL_110;
  v310 = &v279[-v247];
  sub_1B089F364();
  v171 = v266;
  v248 = v309;
  sub_1B0A1D7A4();
  v246(v248, AssociatedTypeWitness);
  v246(v272, AssociatedTypeWitness);
  v170 = 0;
LABEL_67:
  v251(v171, v170, 1, AssociatedTypeWitness);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v277)(v171, 1, AssociatedTypeWitness);
  if ((_DWORD)result == 1)
  {
LABEL_113:
    __break(1u);
    return result;
  }
  v176 = v265;
  v177 = (void (*)(char *, char *, uint64_t))v283;
  ((void (*)(char *, char *, uint64_t))v283)(v265, v171, AssociatedTypeWitness);
  v178 = (void (*)(char *, uint64_t))v299;
  ((void (*)(char *, uint64_t))v299)(v111, AssociatedTypeWitness);
  v177(v111, v176, AssociatedTypeWitness);
  v179 = v264;
  v180 = v302;
  v181 = v288;
  (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v264, v302, v288);
  v182 = v309;
  sub_1B0A1D99C();
  sub_1B0A1D72C();
  v178(v182, AssociatedTypeWitness);
  v183 = v250;
  v250(v179, v181);
  v178(v274, AssociatedTypeWitness);
  v183(v180, v181);
  v184 = v181;
  v111 = v300;
  (*(void (**)(char *, char *, uint64_t))(v307 + 32))(v180, v276, v184);
LABEL_69:
  sub_1B0A1DABC();
  v185 = v309;
  sub_1B0A1DA80();
  sub_1B0A1D78C();
  v186 = (void (*)(char *, uint64_t))v299;
  ((void (*)(char *, uint64_t))v299)(v185, AssociatedTypeWitness);
  v187 = v288;
  while (1)
  {
    v303(v35, v111, AssociatedTypeWitness);
    if ((sub_1B0A1D7C8() & 1) != 0)
    {
      if (sub_1B0A1D7BC() < 64)
      {
        v190 = sub_1B0A1D7B0();
        v186(v35, AssociatedTypeWitness);
LABEL_74:
        v191 = v289;
        if (!v190)
          goto LABEL_93;
        goto LABEL_91;
      }
      v310 = 0;
      sub_1B089F364();
      v196 = v309;
      sub_1B0A1D75C();
      v195 = sub_1B0A1D1E0();
      v186(v196, AssociatedTypeWitness);
      v186(v35, AssociatedTypeWitness);
LABEL_80:
      v191 = v289;
      if ((v195 & 1) != 0)
        goto LABEL_93;
      goto LABEL_91;
    }
    v192 = sub_1B0A1D7C8();
    v193 = sub_1B0A1D7BC();
    if ((v192 & 1) != 0)
    {
      if (v193 <= 64)
      {
        sub_1B0A1DABC();
        v198 = v309;
        sub_1B0A1DA80();
        v199 = sub_1B0A1D180();
        v186(v198, AssociatedTypeWitness);
        v200 = v285;
        v303(v285, v35, AssociatedTypeWitness);
        if ((v199 & 1) == 0)
        {
          v186(v200, AssociatedTypeWitness);
          v186(v35, AssociatedTypeWitness);
          v187 = v288;
          v191 = v289;
          goto LABEL_91;
        }
        v190 = sub_1B0A1D7B0();
        v186(v200, AssociatedTypeWitness);
        v186(v35, AssociatedTypeWitness);
        v187 = v288;
        goto LABEL_74;
      }
      v310 = 0;
      sub_1B089F364();
      v194 = v309;
      sub_1B0A1D75C();
      v195 = sub_1B0A1D1E0();
      v186(v194, AssociatedTypeWitness);
      v186(v35, AssociatedTypeWitness);
      v187 = v288;
      goto LABEL_80;
    }
    v187 = v288;
    v191 = v289;
    if (v193 >= 64)
      break;
    v197 = sub_1B0A1D7B0();
    v186(v35, AssociatedTypeWitness);
    if (!v197)
      goto LABEL_93;
LABEL_91:
    v203 = v35;
    v204 = v302;
    sub_1B0A1D72C();
    v205 = sub_1B0A1D66C();
    v206 = v301;
    v207 = v191;
    v208 = v291;
    v209 = v292;
    (*(void (**)(char *))(v301 + 16))(v291);
    ((void (*)(char **, _QWORD))v205)(&v310, 0);
    LOBYTE(v205) = v298(v208, v296);
    (*(void (**)(char *, uint64_t))(v206 + 8))(v208, v209);
    if ((v205 & 1) != 0)
    {
      v210 = v307;
      (*(void (**)(char *, uint64_t))(v307 + 8))(v204, v187);
      (*(void (**)(char *, char *, uint64_t))(v210 + 16))(v204, v207, v187);
    }
    sub_1B0A1DABC();
    v188 = v309;
    sub_1B0A1DA80();
    v111 = v300;
    sub_1B0A1D78C();
    v189 = v188;
    v186 = (void (*)(char *, uint64_t))v299;
    ((void (*)(char *, uint64_t))v299)(v189, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v307 + 8))(v207, v187);
    v35 = v203;
  }
  v310 = 0;
  sub_1B089F364();
  v201 = v309;
  sub_1B0A1D75C();
  v202 = sub_1B0A1D1E0();
  v186(v201, AssociatedTypeWitness);
  v186(v35, AssociatedTypeWitness);
  if ((v202 & 1) == 0)
    goto LABEL_91;
LABEL_93:
  v211 = v302;
  v212 = sub_1B0A1D66C();
  v213 = v301;
  v214 = v291;
  v215 = v292;
  (*(void (**)(char *))(v301 + 16))(v291);
  ((void (*)(char **, _QWORD))v212)(&v310, 0);
  LOBYTE(v212) = v298(v214, v296);
  (*(void (**)(char *, uint64_t))(v213 + 8))(v214, v215);
  if ((v212 & 1) != 0)
  {
    v216 = v307;
    v217 = v186;
    v218 = v276;
    v219 = v111;
    v220 = v288;
    (*(void (**)(char *, char *, uint64_t))(v307 + 16))(v276, v211, v288);
    sub_1B0A1DABC();
    v221 = v309;
    sub_1B0A1DA80();
    sub_1B0A1D72C();
    v217(v221, AssociatedTypeWitness);
    v222 = *(void (**)(char *, uint64_t))(v216 + 8);
    v222(v218, v220);
    v217(v219, AssociatedTypeWitness);
    v217(v284, AssociatedTypeWitness);
    v222(v280, v220);
    return ((uint64_t (*)(char *, uint64_t))v222)(v211, v220);
  }
  v186(v111, AssociatedTypeWitness);
  v186(v284, AssociatedTypeWitness);
  v223 = v307;
  v98 = v288;
  (*(void (**)(char *, uint64_t))(v307 + 8))(v280, v288);
  v99 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v223 + 32);
  v100 = v281;
  v101 = v211;
  return v99(v100, v101, v98);
}

uint64_t Collection<>.upperBound<A>(of:lessFunc:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _QWORD v10[10];

  v10[2] = a4;
  v10[3] = a5;
  v10[4] = a6;
  v10[5] = a7;
  v10[6] = a8;
  v10[7] = a2;
  v10[8] = a3;
  return Collection<>.lowerBound<A>(of:lessFunc:)(a1, (uint64_t (*)(char *, uint64_t))sub_1B092B94C, (uint64_t)v10, a4, a6, a7, a8, a9);
}

uint64_t Collection<>.lowerBound(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return Collection<>.lowerBound<A>(of:lessFunc:)(a1, (uint64_t (*)(char *, uint64_t))sub_1B092B980, (uint64_t)&v10, v11, v12, v14, v15, a7);
}

BOOL sub_1B092B94C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(a2, a1) & 1) == 0;
}

uint64_t Collection<>.upperBound(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t *v24;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v20 = v12;
  v21 = v14;
  v22 = v15;
  v23 = sub_1B092B980;
  v24 = &v10;
  return Collection<>.lowerBound<A>(of:lessFunc:)(a1, (uint64_t (*)(char *, uint64_t))sub_1B092B94C, (uint64_t)v17, v11, v12, v14, v15, a7);
}

uint64_t sub_1B092BA48()
{
  swift_getAssociatedTypeWitness();
  return sub_1B0A1D174() & 1;
}

uint64_t IndexRangedSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  return sub_1B092BB34((uint64_t)v7, v4, *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_1B092BB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v17 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v13 + 16))(a4, a1, a2, v10);
  sub_1B0A1D594();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a2);
  v15 = type metadata accessor for IndexRangedIterator(0, a2, a3, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4 + *(int *)(v15 + 36), v12, AssociatedTypeWitness);
}

uint64_t sub_1B092BC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_1B092BC3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  IndexRangedSequence.makeIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t IndexRangedIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t TupleTypeMetadata2;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t, double);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55[32];

  v3 = v2;
  v4 = a1;
  v51 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v47 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v44 = (char *)&v41 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v52 = sub_1B0A1D678();
  v45 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v43 = (char *)&v41 - v12;
  v13 = *(_QWORD **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v41 - v19;
  v21 = v3 + *(int *)(v4 + 36);
  v48 = (void (*)(char *, uint64_t, uint64_t, double))v13[2];
  v48((char *)&v41 - v19, v21, AssociatedTypeWitness, v18);
  v50 = v3;
  v53 = v6;
  v54 = v5;
  sub_1B0A1D5C4();
  v49 = AssociatedConformanceWitness;
  LOBYTE(v4) = sub_1B0A1D1E0();
  v22 = (void (*)(char *, uint64_t))v13[1];
  v22(v16, AssociatedTypeWitness);
  if ((v4 & 1) != 0)
  {
    v22(v20, AssociatedTypeWitness);
    swift_getAssociatedTypeWitness();
    v23 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v51, 1, 1, v23);
  }
  else
  {
    sub_1B0A1D5D0();
    v25 = swift_getAssociatedTypeWitness();
    v26 = swift_getTupleTypeMetadata2();
    v42 = *(int *)(v26 + 48);
    v27 = (void (*)(char *, char *, uint64_t))v48;
    ((void (*)(char *, uint64_t, uint64_t))v48)(v16, v21, AssociatedTypeWitness);
    result = sub_1B0A1D18C();
    if ((result & 1) != 0)
    {
      v41 = v25;
      v42 += v51;
      v28 = TupleTypeMetadata2;
      v29 = *(int *)(TupleTypeMetadata2 + 48);
      v49 = v26;
      v30 = v22;
      v31 = v44;
      v32 = &v44[v29];
      v27(v44, v20, AssociatedTypeWitness);
      v33 = (void (*)(char *, char *, uint64_t))v13[4];
      v33(v32, v16, AssociatedTypeWitness);
      v34 = v47;
      v35 = &v47[*(int *)(v28 + 48)];
      v27(v47, v31, AssociatedTypeWitness);
      v27(v35, v32, AssociatedTypeWitness);
      v36 = v43;
      v33(v43, v34, AssociatedTypeWitness);
      v30(v35, AssociatedTypeWitness);
      v37 = &v34[*(int *)(v28 + 48)];
      v33(v34, v31, AssociatedTypeWitness);
      v33(v37, v32, AssociatedTypeWitness);
      v38 = v52;
      v33(&v36[*(int *)(v52 + 36)], v37, AssociatedTypeWitness);
      v30(v34, AssociatedTypeWitness);
      v39 = v51;
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v51, v36, v38);
      v40 = (void (*)(char *, _QWORD))sub_1B0A1D66C();
      (*(void (**)(uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v42);
      v40(v55, 0);
      v30(v20, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v39, 0, 1, v49);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_1B092C0BC()
{
  JUMPOUT(0x1B5E0D530);
}

uint64_t sub_1B092C0D0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B092C180 + 4 * byte_1B0A38830[(v7 - 1)]))();
}

void sub_1B092C1D0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for IndexRangedSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexRangedSequence);
}

uint64_t sub_1B092C38C()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_1B092C434(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_1B092C528(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t sub_1B092C5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1B092C63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1B092C6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1B092C76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1B092C804(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_1B092C9B0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for IndexRangedIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexRangedIterator);
}

int64_t sub_1B092CBEC(unsigned __int16 a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v17;

  result = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v7 = 1 << (__clz(v6) ^ 0x3Fu);
    v8 = a3;
    v9 = (a4 >> 1) - a3;
    if (v7 != v6)
    {
      v10 = a3 + v7;
      if (__OFADD__(a3, v7))
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if (v10 < a3 || v10 >= result)
        goto LABEL_44;
      v12 = *(unsigned __int16 *)(a2 + 24 * v10);
      v8 = a3;
      v9 = v7;
      if (v12 <= a1)
      {
        v13 = v6 + ~v7;
        if (!v13)
          return result;
        if ((v13 & 0x8000000000000000) != 0)
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        if (v13 == 1)
        {
          v9 = 1;
        }
        else
        {
          if (v13 - 0x4000000000000001 < 0xC000000000000001)
          {
LABEL_47:
            __break(1u);
            return result;
          }
          v9 = 1 << -(char)__clz(v13 - 1);
        }
        v14 = v6 - v9;
        v8 = a3 + v14;
        if (__OFADD__(a3, v14))
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
    }
    if (v9 >= 2)
    {
      while (1)
      {
        v15 = v8 + (v9 >> 1);
        if (__OFADD__(v8, v9 >> 1))
          break;
        if (v15 < a3 || v15 >= result)
          goto LABEL_39;
        if (*(unsigned __int16 *)(a2 + 24 * v15) <= a1)
          v8 += v9 >> 1;
        v17 = v9 >= 4;
        v9 >>= 1;
        if (!v17)
          goto LABEL_29;
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_29:
    if (v8 < a3 || v8 >= result)
      goto LABEL_42;
    if (*(unsigned __int16 *)(a2 + 24 * v8) > a1)
      return v8;
    else
      return v8 + 1;
  }
  return result;
}

uint64_t sub_1B092CD34(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_1B092CD5C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B092CD84(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_1B092CDAC(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_1B092CDD4(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_1B092CDFC(uint64_t a1)
{
  sub_1B08A3638(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

int64_t sub_1B092CE28(unsigned int a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v17;

  result = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v7 = 1 << (__clz(v6) ^ 0x3Fu);
    v8 = a3;
    v9 = (a4 >> 1) - a3;
    if (v7 != v6)
    {
      v10 = a3 + v7;
      if (__OFADD__(a3, v7))
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if (v10 < a3 || v10 >= result)
        goto LABEL_44;
      v12 = *(_DWORD *)(a2 + 8 * v10);
      v8 = a3;
      v9 = v7;
      if (v12 <= a1)
      {
        v13 = v6 + ~v7;
        if (!v13)
          return result;
        if ((v13 & 0x8000000000000000) != 0)
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        if (v13 == 1)
        {
          v9 = 1;
        }
        else
        {
          if (v13 - 0x4000000000000001 < 0xC000000000000001)
          {
LABEL_47:
            __break(1u);
            return result;
          }
          v9 = 1 << -(char)__clz(v13 - 1);
        }
        v14 = v6 - v9;
        v8 = a3 + v14;
        if (__OFADD__(a3, v14))
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
    }
    if (v9 >= 2)
    {
      while (1)
      {
        v15 = v8 + (v9 >> 1);
        if (__OFADD__(v8, v9 >> 1))
          break;
        if (v15 < a3 || v15 >= result)
          goto LABEL_39;
        if (*(_DWORD *)(a2 + 8 * v15) <= a1)
          v8 += v9 >> 1;
        v17 = v9 >= 4;
        v9 >>= 1;
        if (!v17)
          goto LABEL_29;
      }
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_29:
    if (v8 < a3 || v8 >= result)
      goto LABEL_42;
    if (*(_DWORD *)(a2 + 8 * v8) > a1)
      return v8;
    else
      return v8 + 1;
  }
  return result;
}

uint64_t WOFFContainer.init(data:residence:)(uint64_t a1, unint64_t a2, int a3)
{
  return sub_1B092D084(a1, a2, a3);
}

_QWORD *sub_1B092CF74@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *result;
  v3 = result[1];
  v4 = __OFADD__(*result, v3);
  v5 = *result + v3;
  if (v4)
  {
    sub_1B08A38A0();
    swift_allocError();
    return (_QWORD *)swift_willThrow();
  }
  else if (v5 < v2)
  {
    __break(1u);
  }
  else
  {
    *a2 = v2;
    a2[1] = v5;
  }
  return result;
}

uint64_t WOFFContainer.dataResidence.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t WOFFContainer.dataResidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*WOFFContainer.dataResidence.modify())()
{
  return nullsub_1;
}

uint64_t WOFFContainer.containerType.getter()
{
  return 0;
}

FontParser::WOFFContainer __swiftcall WOFFContainer.init(constructed:)(Swift::OpaquePointer constructed)
{
  FontParser::FontDataResidence v1;
  FontParser::WOFFContainer result;

  v1 = FontParser_FontDataResidence_inMemory;
  result.fonts = constructed;
  result.dataResidence = v1;
  return result;
}

uint64_t WOFFContainer.encoded()()
{
  _BYTE *v0;

  sub_1B08ABB40();
  swift_allocError();
  *v0 = 0;
  return swift_willThrow();
}

uint64_t sub_1B092D058@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v7;

  result = sub_1B092D084(a1, a2, a3);
  if (!v4)
  {
    *(_QWORD *)a4 = result;
    *(_BYTE *)(a4 + 8) = v7;
  }
  return result;
}

uint64_t sub_1B092D084(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)();
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (**v46)();
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(uint64_t, _QWORD);
  _BYTE *v55;
  uint64_t v56;
  unsigned int v57;
  void (**v58)();
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned __int128 v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int128 v69;
  char *v70;
  unsigned __int128 v71;
  char *v72;
  _BYTE v73[424];
  char v74;
  int v75;
  BOOL (*v76)(_DWORD *, _DWORD *);
  uint64_t v77;
  int v78;
  __int16 v79;
  __int16 v80;
  _QWORD *(*v81)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v82;
  char v83;
  __int16 v84;
  _QWORD *(*v85)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v86;
  unint64_t v87;

  v61 = a3;
  v6 = sub_1B0A1CF4C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (void (**)())((char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v87 = sub_1B0901914(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v71 = a1;
  *((_QWORD *)&v71 + 1) = a2;
  v68 = a2;
  sub_1B08A35B0(a1, a2);
  sub_1B08A35F4();
  v10 = sub_1B0A1D090();
  v74 = 1;
  v75 = 2001684038;
  v76 = sub_1B08A0EC0;
  v77 = 0;
  v80 = 257;
  v78 = 16843009;
  v79 = 257;
  v81 = sub_1B092CF74;
  v82 = 0;
  v83 = 1;
  v84 = 257;
  v85 = sub_1B092CF74;
  v86 = 0;
  *(_QWORD *)&v71 = v10;
  *((_QWORD *)&v71 + 1) = v11;
  v72 = v12;
  swift_bridgeObjectRetain();
  v13 = &v74;
  sub_1B08C4EF0((uint64_t *)&v69, &v71, v14);
  if (v3)
  {
    swift_bridgeObjectRelease();
    sub_1B08A3638(a1, v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  v17 = v15;
  v18 = v87;
  v58 = v9;
  v59 = v7;
  v60 = v6;
  result = swift_bridgeObjectRelease();
  if ((v17 & 0x8000000000000000) == 0)
  {
    v19 = v72;
    if (!v17)
    {
      v39 = a1;
      v23 = v18;
LABEL_17:
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA780);
      v13 = (char *)swift_allocObject();
      *((_OWORD *)v13 + 1) = xmmword_1B0A363D0;
      sub_1B0975A90(v23, v61, 1, v73);
      memcpy(v13 + 32, v73, 0x1A4uLL);
      sub_1B08A3638(v39, v68);
      return (uint64_t)v13;
    }
    v20 = *((_QWORD *)&v71 + 1);
    v21 = v71;
    v57 = *MEMORY[0x1E0CB00D8];
    v22 = a1;
    v23 = v18;
    v62 = v22;
    while (v17)
    {
      *(_QWORD *)&v71 = v21;
      *((_QWORD *)&v71 + 1) = v20;
      v72 = v19;
      *(_QWORD *)&v69 = v21;
      *((_QWORD *)&v69 + 1) = v20;
      v70 = v19;
      swift_bridgeObjectRetain_n();
      v27 = sub_1B08C1578((uint64_t *)&v69, v26, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      v29 = sub_1B08C1578((uint64_t *)&v69, v28, 1);
      v66 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      LODWORD(v67) = sub_1B08C1578((uint64_t *)&v69, v30, 1);
      v65 = v27;
      v87 = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = *((_QWORD *)&v69 + 1);
      v31 = v69;
      v33 = v70;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v69 = __PAIR128__(v32, v31);
      v70 = v33;
      swift_bridgeObjectRetain();
      v35 = sub_1B08C1578((uint64_t *)&v69, v34, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71 = v69;
      v72 = v70;
      sub_1B08C1578((uint64_t *)&v71, v36, 1);
      v37 = v29;
      v38 = v67;
      swift_bridgeObjectRelease_n();
      v13 = v72;
      v63 = v71;
      v39 = v62;
      sub_1B090BE34(v37, v37 + v38, v62, v68);
      v64 = v13;
      v40 = sub_1B0A1CFA0();
      v42 = v40;
      v43 = v41;
      if (v35 < v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B08EC7E0();
        swift_allocError();
        *v55 = 1;
        swift_willThrow();
        sub_1B08A3638(v39, v68);
        sub_1B08A3638(v42, v43);
        return (uint64_t)v13;
      }
      if (v35 == v38)
      {
        v24 = v87;
      }
      else
      {
        v44 = v35;
        sub_1B08A35B0(v40, v41);
        v45 = swift_slowAlloc();
        sub_1B090C850(v45, v45 + v44, v42, v43);
        v46 = v58;
        v48 = v47;
        *v58 = sub_1B090CBD4;
        v46[1] = 0;
        (*(void (**)(void (**)(), _QWORD, uint64_t))(v59 + 104))(v46, v57, v60);
        sub_1B0A1CF40();
        v67 = v49;
        if (v48)
        {
          sub_1B0A1CEF8();
          swift_allocObject();
          swift_retain();
          v50 = sub_1B0A1CEA4();
          v51 = sub_1B090CBE0(v50, v48);
          v53 = v52;
          swift_release();
        }
        else
        {
          v54 = (void (*)(uint64_t, _QWORD))sub_1B0A1CF40();
          v54(v45, 0);
          swift_release();
          swift_release();
          v51 = 0;
          v53 = 0xC000000000000000;
        }
        (*(void (**)(void (**)(), uint64_t))(v59 + 8))(v46, v60);
        sub_1B08A3638(v42, v43);
        sub_1B08A3638(v42, v43);
        v42 = v51;
        v43 = v53;
        v24 = v87;
        v39 = v62;
      }
      sub_1B08A35B0(v42, v43);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v71 = v24;
      sub_1B0900E2C(v42, v43, v65, isUniquelyReferenced_nonNull_native);
      v23 = v71;
      swift_bridgeObjectRelease();
      result = sub_1B08A3638(v42, v43);
      v17 = v66 - 1;
      v20 = *((_QWORD *)&v63 + 1);
      v19 = v64;
      v21 = v63;
      if (v66 == 1)
        goto LABEL_17;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for WOFFContainer()
{
  return &type metadata for WOFFContainer;
}

uint64_t Variations.axes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Variations.axes.modify())()
{
  return nullsub_1;
}

uint64_t Variations.namedVariations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Variations.namedVariations.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Variations.namedVariations.modify())()
{
  return nullsub_1;
}

uint64_t VariationAxis.tag.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*VariationAxis.tag.modify())()
{
  return nullsub_1;
}

uint64_t VariationAxis.valueRange.getter(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *((_QWORD *)&v3 + 1) = a2;
  *(_QWORD *)&v3 = a1;
  return v3 >> 32;
}

uint64_t VariationAxis.valueRange.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*VariationAxis.valueRange.modify())()
{
  return nullsub_1;
}

unint64_t VariationAxis.defaultValue.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

uint64_t VariationAxis.defaultValue.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*VariationAxis.defaultValue.modify())()
{
  return nullsub_1;
}

uint64_t VariationAxis.axisID.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t VariationAxis.axisID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*VariationAxis.axisID.modify())()
{
  return nullsub_1;
}

BOOL VariationAxis.isUserVisible.getter(uint64_t a1, uint64_t a2, char a3)
{
  return (a3 & 1) == 0;
}

uint64_t VariationAxisTag.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*VariationAxisTag.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t static VariationAxisTag.weight.getter()
{
  return 2003265652;
}

uint64_t static VariationAxisTag.width.getter()
{
  return 2003072104;
}

uint64_t static VariationAxisTag.opticalSize.getter()
{
  return 1869640570;
}

uint64_t static VariationAxisTag.serif.getter()
{
  return 1936028262;
}

uint64_t static VariationAxisTag.style.getter()
{
  return 1937013100;
}

uint64_t static VariationAxisTag.slant.getter()
{
  return 1936486004;
}

uint64_t static VariationAxisTag.grade.getter()
{
  return 1196572996;
}

uint64_t static VariationAxisTag.casual.getter()
{
  return 1128354636;
}

uint64_t static VariationAxisTag.cursive.getter()
{
  return 1129468758;
}

uint64_t static VariationAxisTag.fill.getter()
{
  return 1179208780;
}

uint64_t static VariationAxisTag.italic.getter()
{
  return 1769234796;
}

uint64_t static VariationAxisTag.monospace.getter()
{
  return 1297043023;
}

uint64_t static VariationAxisTag.ascenderHeight.getter()
{
  return 1498693971;
}

uint64_t static VariationAxisTag.counterWidth.getter()
{
  return 1481921089;
}

uint64_t static VariationAxisTag.descenderHeight.getter()
{
  return 1498694725;
}

uint64_t static VariationAxisTag.figureHeight.getter()
{
  return 1498695241;
}

uint64_t static VariationAxisTag.lowercaseHeight.getter()
{
  return 1498696771;
}

uint64_t static VariationAxisTag.thickStroke.getter()
{
  return 1481592913;
}

uint64_t static VariationAxisTag.thinStroke.getter()
{
  return 1498370129;
}

uint64_t static VariationAxisTag.uppercaseHeight.getter()
{
  return 1498699075;
}

uint64_t static VariationAxisTag.softness.getter()
{
  return 1397704276;
}

uint64_t static VariationAxisTag.wonky.getter()
{
  return 1464815179;
}

uint64_t VariationAxisTag.description.getter(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 == 2003265652)
    return 0x746867696557;
  v6 = v1;
  v7 = v2;
  if (a1 == 2003072104)
    return 0x6874646957;
  sub_1B08E3F8C("opsz", 4, &v5);
  if (v5 == a1)
    return 0x206C61636974704FLL;
  sub_1B08E3F8C("serf", 4, &v5);
  if (v5 == a1)
    return 0x6669726553;
  sub_1B08E3F8C("styl", 4, &v5);
  if (v5 == a1)
    return 0x656C797453;
  sub_1B08E3F8C("slnt", 4, &v5);
  if (v5 == a1)
    return 0x746E616C53;
  sub_1B08E3F8C("GRAD", 4, &v5);
  if (v5 == a1)
    return 0x6564617247;
  sub_1B08E3F8C("CASL", 4, &v5);
  if (v5 == a1)
    return 0x6C6175736143;
  sub_1B08E3F8C("CRSV", 4, &v5);
  if (v5 == a1)
    return 0x65766973727543;
  sub_1B08E3F8C("FILL", 4, &v5);
  if (v5 == a1)
    return 1819044166;
  sub_1B08E3F8C("ital", 4, &v5);
  if (v5 == a1)
    return 0x63696C617449;
  sub_1B08E3F8C("MONO", 4, &v5);
  if (v5 == a1)
    return 0x636170736F6E6F4DLL;
  sub_1B08E3F8C("YTAS", 4, &v5);
  if (v5 == a1)
    return 0x7265646E65637341;
  sub_1B08E3F8C("XTRA", 4, &v5);
  if (v5 == a1)
    return 0x207265746E756F43;
  sub_1B08E3F8C("YTDE", 4, &v5);
  if (v5 == a1)
    return 0xD000000000000010;
  sub_1B08E3F8C("YTFI", 4, &v5);
  if (v5 == a1)
    return 0x4820657275676946;
  sub_1B08E3F8C("YTLC", 4, &v5);
  if (v5 == a1)
    return 0xD000000000000010;
  sub_1B08E3F8C("XOPQ", 4, &v5);
  if (v5 == a1)
    return 0x7453206B63696854;
  sub_1B08E3F8C("YOPQ", 4, &v5);
  if (v5 == a1)
    return 0x727453206E696854;
  sub_1B08E3F8C("YTUC", 4, &v5);
  if (v5 == a1)
    return 0xD000000000000010;
  sub_1B08E3F8C("SOFT", 4, &v5);
  if (v5 == a1)
    return 0x7373656E74666F53;
  sub_1B08E3F8C("WONK", 4, &v5);
  if (v5 == a1)
    return 0x796B6E6F57;
  else
    return _s10FontParser7SfntTagV11descriptionSSvg_0(a1);
}

uint64_t sub_1B092DEF0()
{
  unsigned int *v0;

  return VariationAxisTag.description.getter(*v0);
}

uint64_t NamedVariation.familyNameID.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*NamedVariation.familyNameID.modify())()
{
  return nullsub_1;
}

uint64_t NamedVariation.postScriptNameID.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NamedVariation.postScriptNameID.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*NamedVariation.postScriptNameID.modify())()
{
  return nullsub_1;
}

uint64_t NamedVariation.coordinates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NamedVariation.coordinates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*NamedVariation.coordinates.modify())()
{
  return nullsub_1;
}

BOOL sub_1B092DF80(unsigned __int16 *a1)
{
  int v1;

  v1 = *a1;
  return v1 == 2 || v1 == 17 || (__int16)v1 > 255;
}

BOOL sub_1B092DFA4(_QWORD *a1)
{
  return *a1 == 6 || (unint64_t)(*a1 - 256) >> 8 < 0x7F || *a1 == 0xFFFFLL;
}

uint64_t *sub_1B092DFCC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = *result == 0xFFFF;
  if (*result == 0xFFFF)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

unint64_t sub_1B092DFF0()
{
  unint64_t result;

  result = qword_1EEEBB928;
  if (!qword_1EEEBB928)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for VariationAxisTag, &type metadata for VariationAxisTag);
    atomic_store(result, (unint64_t *)&qword_1EEEBB928);
  }
  return result;
}

uint64_t destroy for Variations()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s10FontParser10VariationsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Variations(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Variations(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Variations(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Variations(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Variations()
{
  return &type metadata for Variations;
}

ValueMetadata *type metadata accessor for VariationAxis()
{
  return &type metadata for VariationAxis;
}

ValueMetadata *type metadata accessor for VariationAxisTag()
{
  return &type metadata for VariationAxisTag;
}

uint64_t destroy for Format0()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NamedVariation(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NamedVariation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NamedVariation(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NamedVariation()
{
  return &type metadata for NamedVariation;
}

ValueMetadata *type metadata accessor for FvarInstanceRecordFlags()
{
  return &type metadata for FvarInstanceRecordFlags;
}

ValueMetadata *type metadata accessor for FvarAxisFlags()
{
  return &type metadata for FvarAxisFlags;
}

uint64_t sub_1B092E30C@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3;
  uint64_t result;

  v3 = sub_1B092E5C8(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t sub_1B092E34C()
{
  unint64_t result;

  result = qword_1EEEBB930;
  if (!qword_1EEEBB930)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38B18, &type metadata for FvarAxisFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB930);
  }
  return result;
}

unint64_t sub_1B092E394()
{
  unint64_t result;

  result = qword_1EEEBB938;
  if (!qword_1EEEBB938)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38AE8, &type metadata for FvarAxisFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB938);
  }
  return result;
}

unint64_t sub_1B092E3DC()
{
  unint64_t result;

  result = qword_1EEEBB940;
  if (!qword_1EEEBB940)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38B40, &type metadata for FvarAxisFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB940);
  }
  return result;
}

unint64_t sub_1B092E424()
{
  unint64_t result;

  result = qword_1EEEBB948;
  if (!qword_1EEEBB948)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38B78, &type metadata for FvarAxisFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB948);
  }
  return result;
}

unint64_t sub_1B092E46C()
{
  unint64_t result;

  result = qword_1EEEBB950;
  if (!qword_1EEEBB950)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38CA8, &type metadata for FvarInstanceRecordFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB950);
  }
  return result;
}

unint64_t sub_1B092E4B4()
{
  unint64_t result;

  result = qword_1EEEBB958;
  if (!qword_1EEEBB958)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38C78, &type metadata for FvarInstanceRecordFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB958);
  }
  return result;
}

unint64_t sub_1B092E4FC()
{
  unint64_t result;

  result = qword_1EEEBB960;
  if (!qword_1EEEBB960)
  {
    result = MEMORY[0x1B5E0D530]("1Ew5@e\a", &type metadata for FvarInstanceRecordFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB960);
  }
  return result;
}

unint64_t sub_1B092E544()
{
  unint64_t result;

  result = qword_1EEEBB968;
  if (!qword_1EEEBB968)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A38D08, &type metadata for FvarInstanceRecordFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBB968);
  }
  return result;
}

uint64_t sub_1B092E590(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1B092E5C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int16 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t static NameStringIdentifier.postScriptName.getter()
{
  return 6;
}

uint64_t sub_1B092E654(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B0953AE8((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_1B09308CC(v5);
  *a1 = v2;
  return result;
}

uint64_t NameStringEntry.localeIdentifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B0931A84(a4, WORD2(a4));
}

uint64_t static NameStringIdentifier.fullName.getter()
{
  return 4;
}

uint64_t static NameStringIdentifier.fontFamily.getter()
{
  return 1;
}

uint64_t static NameStringIdentifier.fontSubfamily.getter()
{
  return 2;
}

uint64_t NameStringIdentifier.rawValue.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*NameStringIdentifier.rawValue.modify())()
{
  return nullsub_1;
}

BOOL static NameStringIdentifier.< infix(_:_:)(unsigned __int16 a1, unsigned __int16 a2)
{
  return a1 < a2;
}

unint64_t NameStringIdentifier.description.getter(unsigned __int16 a1)
{
  int v1;
  unint64_t result;

  v1 = a1;
  result = 0xD000000000000010;
  switch(v1)
  {
    case 0:
    case 16:
      return result;
    case 1:
      result = 0x6D614620746E6F46;
      break;
    case 2:
      result = 0x62755320746E6F46;
      break;
    case 3:
      result = 0x4920657571696E55;
      break;
    case 4:
      result = 0x6D614E206C6C7546;
      break;
    case 5:
      result = 0x6E6F6973726556;
      break;
    case 6:
      result = 0x6972635374736F50;
      break;
    case 7:
      result = 0x72616D6564617254;
      break;
    case 8:
      result = 0x74636166756E614DLL;
      break;
    case 9:
    case 12:
      result = 0x72656E6769736544;
      break;
    case 10:
      result = 0x7470697263736544;
      break;
    case 11:
      result = 0x5520726F646E6556;
      break;
    case 13:
      result = 0x65736E6563694CLL;
      break;
    case 14:
      result = 0x2065736E6563694CLL;
      break;
    case 17:
      result = 0xD000000000000013;
      break;
    case 18:
      result = 0xD000000000000018;
      break;
    case 19:
      result = 0x5420656C706D6153;
      break;
    case 20:
      result = 0xD000000000000013;
      break;
    case 25:
      result = 0xD000000000000021;
      break;
    default:
      sub_1B0A1DA68();
      sub_1B0A1D33C();
      swift_bridgeObjectRelease();
      sub_1B0A1D33C();
      result = 40;
      break;
  }
  return result;
}

uint64_t static NameStringIdentifier.copyright.getter()
{
  return 0;
}

uint64_t static NameStringIdentifier.uniqueID.getter()
{
  return 3;
}

uint64_t static NameStringIdentifier.version.getter()
{
  return 5;
}

uint64_t static NameStringIdentifier.trademark.getter()
{
  return 7;
}

uint64_t static NameStringIdentifier.manufacturer.getter()
{
  return 8;
}

uint64_t static NameStringIdentifier.designer.getter()
{
  return 9;
}

uint64_t static NameStringIdentifier.description.getter()
{
  return 10;
}

uint64_t static NameStringIdentifier.vendorURL.getter()
{
  return 11;
}

uint64_t static NameStringIdentifier.designerURL.getter()
{
  return 12;
}

uint64_t static NameStringIdentifier.license.getter()
{
  return 13;
}

uint64_t static NameStringIdentifier.licenseURL.getter()
{
  return 14;
}

uint64_t static NameStringIdentifier.preferredFamily.getter()
{
  return 16;
}

uint64_t static NameStringIdentifier.preferredSubfamily.getter()
{
  return 17;
}

uint64_t static NameStringIdentifier.macCompatibleFullName.getter()
{
  return 18;
}

uint64_t static NameStringIdentifier.sampleText.getter()
{
  return 19;
}

uint64_t static NameStringIdentifier.postScriptCIDName.getter()
{
  return 20;
}

uint64_t static NameStringIdentifier.variationsPostScriptNamePrefix.getter()
{
  return 25;
}

uint64_t sub_1B092EA64()
{
  sub_1B0932808();
  return sub_1B0A1D468();
}

uint64_t sub_1B092EAC0()
{
  sub_1B0932808();
  return sub_1B0A1D45C();
}

BOOL sub_1B092EB0C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1B092EB20(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1B092EB34(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1B092EB48(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a2 < *a1;
}

unint64_t sub_1B092EB5C()
{
  unsigned __int16 *v0;

  return NameStringIdentifier.description.getter(*v0);
}

uint64_t sub_1B092EB64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _s10FontParser20NameStringIdentifierV8allCasesSayACGvgZ_0();
  *a1 = result;
  return result;
}

uint64_t NameStringEntry.name.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*NameStringEntry.name.modify())()
{
  return nullsub_1;
}

uint64_t NameStringEntry.value.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t NameStringEntry.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NameStringEntry.value.modify())()
{
  return nullsub_1;
}

uint64_t NameStringEntry.platform.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

unint64_t NameStringEntry.scriptValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a4 >> 16;
}

unint64_t NameStringEntry.languageValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return HIDWORD(a4);
}

uint64_t NameStringEntry.init(name:value:platform:scriptValue:languageValue:)(unsigned __int16 a1, int a2, int a3, int a4, Swift::UInt16 encoding, unsigned __int16 a6)
{
  int v7;

  v7 = a6;
  if (Platform.interpret(encoding:language:)(encoding, (Swift::UInt16_optional)v7).value != FontParser_Encoding_unknownDefault)
    return a1;
  swift_bridgeObjectRelease();
  return 0;
}

FontParser::Encoding_optional NameStringEntry.encoding.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  FontParser::Encoding_optional result;

  v4 = WORD2(a4);
  result.value = Platform.interpret(encoding:language:)(WORD1(a4), (Swift::UInt16_optional)v4).value;
  if (result.value == FontParser_Encoding_unknownDefault)
    __break(1u);
  return result;
}

FontParser::Language_optional NameStringEntry.language.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Platform.interpret(language:)(WORD2(a4));
}

uint64_t NameStringEntry.region.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;

  if ((unsigned __int16)a4 != 3)
    return 128;
  v4 = WORD2(a4);
  v5 = sub_1B0901838((uint64_t)&unk_1E61929C0);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_1B08F9E4C(v4), (v7 & 1) != 0))
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 56) + v6);
  else
    v8 = 128;
  swift_bridgeObjectRelease();
  return v8;
}

BOOL static NameStringEntry.__derived_struct_equals(_:_:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B09312B4(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL, a5, a6, a7, a8 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1B092ED88()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B092EDB0 + 4 * byte_1B0A38E2A[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1B092EDB0()
{
  return 0x65756C6176;
}

uint64_t sub_1B092EDC4()
{
  return 0x6D726F6674616C70;
}

uint64_t sub_1B092EDDC()
{
  return 0x6156747069726373;
}

uint64_t sub_1B092EDFC()
{
  return 0x65676175676E616CLL;
}

uint64_t sub_1B092EE20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0931D2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B092EE44()
{
  return 0;
}

void sub_1B092EE50(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1B092EE5C()
{
  sub_1B0931C60();
  return sub_1B0A1DBD0();
}

uint64_t sub_1B092EE84()
{
  sub_1B0931C60();
  return sub_1B0A1DBDC();
}

uint64_t NameStringEntry.encode(to:)(_QWORD *a1, __int16 a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[3];
  char v15;
  char v16;
  char v17;
  __int16 v18;
  char v19;
  char v20;
  __int16 v21;

  v14[1] = a3;
  v14[2] = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB970);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0931C60();
  sub_1B0A1DB88();
  v21 = a2;
  v20 = 0;
  sub_1B0931CA4();
  sub_1B0A1DA38();
  if (!v5)
  {
    v19 = 1;
    sub_1B0A1DA20();
    v18 = a5;
    v17 = 2;
    sub_1B0931CE8();
    sub_1B0A1DA38();
    v16 = 3;
    sub_1B0A1DA44();
    v15 = 4;
    sub_1B0A1DA44();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t NameStringEntry.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  unsigned int v3;

  LODWORD(result) = sub_1B0931F6C(a1);
  if (v1)
    return v3;
  else
    return result;
}

uint64_t sub_1B092F09C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1B0931F6C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 24) = v7;
    *(_WORD *)(a2 + 28) = WORD2(v7);
  }
  return result;
}

uint64_t sub_1B092F0DC(_QWORD *a1)
{
  uint64_t v1;

  return NameStringEntry.encode(to:)(a1, *(_WORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_DWORD *)(v1 + 24));
}

BOOL sub_1B092F104(uint64_t a1, uint64_t a2)
{
  return sub_1B09312B4(*(_WORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int16 *)(a1 + 28) << 32), *(_WORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned __int16 *)(a2 + 28) << 32));
}

uint64_t sub_1B092F134()
{
  sub_1B0A1DB28();
  sub_1B0A1DB4C();
  sub_1B0A1DB4C();
  sub_1B0A1DB4C();
  sub_1B0A1DB4C();
  return sub_1B0A1DB70();
}

uint64_t sub_1B092F1B8()
{
  sub_1B0A1DB4C();
  sub_1B0A1DB4C();
  sub_1B0A1DB4C();
  return sub_1B0A1DB4C();
}

uint64_t sub_1B092F214()
{
  sub_1B0A1DB28();
  sub_1B0A1DB4C();
  sub_1B0A1DB4C();
  sub_1B0A1DB4C();
  sub_1B0A1DB4C();
  return sub_1B0A1DB70();
}

BOOL sub_1B092F294(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    return a1[3] < a2[3];
  else
    return v5;
}

BOOL sub_1B092F2BC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == v2;
  v5 = v3 >= v2;
  if (v4)
    return a2[3] >= a1[3];
  else
    return v5;
}

BOOL sub_1B092F2E4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 == v3;
  v5 = v2 >= v3;
  if (v4)
    return a1[3] >= a2[3];
  else
    return v5;
}

BOOL sub_1B092F30C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == v2;
  v5 = v3 < v2;
  if (v4)
    return a2[3] < a1[3];
  else
    return v5;
}

BOOL sub_1B092F334(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

FontParser::Encoding_optional sub_1B092F378(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  FontParser::Encoding_optional result;
  uint64_t v10;
  int v11;

  v5 = a1;
  v6 = HIDWORD(a1);
  v7 = HIWORD(a1);
  v8 = HIWORD(a1);
  result.value = Platform.interpret(encoding:language:)(WORD2(a1), (Swift::UInt16_optional)v8).value;
  if (result.value == FontParser_Encoding_unknownDefault)
  {
    __break(1u);
  }
  else
  {
    sub_1B092F46C(a2, a3, result.value);
    if (!v10)
      return 0;
    v11 = v7;
    result.value = Platform.interpret(encoding:language:)(v6, (Swift::UInt16_optional)v11).value;
    if (result.value != FontParser_Encoding_unknownDefault)
      return (FontParser::Encoding_optional)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B092F46C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if ((sub_1B0930144(a3) & 0x100000000) == 0)
  {
    sub_1B0A1CFA0();
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_1B092F88C(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  int64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unsigned __int8 v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  BOOL v47;
  int v48;
  BOOL v49;
  _BOOL4 v50;
  BOOL v51;
  int v52;
  FontParser::Encoding_optional v53;
  uint64_t v56;
  int v57;
  int v58;
  int64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t language;

  v6 = sub_1B0926E08(a1, a3);
  v62 = a3;
  v7 = *(_QWORD *)(a3 + 16);
  if (v7 < v6)
  {
    __break(1u);
    goto LABEL_92;
  }
  v8 = v6;
  if (v6 < 0)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v9 = v62 + 32;
  v10 = sub_1B092CBEC(a1, v62 + 32, v6, (2 * v7) | 1);
  if (v10 < v8)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v11 = v10;
  if (v7 < v10)
  {
LABEL_94:
    __break(1u);
    JUMPOUT(0x1B093008CLL);
  }
  if (v8 == v10)
    return 0;
  v12 = a2 & 0xFF000000;
  v13 = BYTE3(a2);
  v63 = a2 & 0xFF0000000000;
  v64 = a2 & 0xFF00000000;
  v57 = BYTE5(a2);
  swift_bridgeObjectRetain();
  v60 = a2;
  v58 = BYTE3(a2);
  v59 = v11;
  v56 = v12;
  while (1)
  {
    if (v8 >= v11)
    {
      __break(1u);
      JUMPOUT(0x1B0930000);
    }
    v14 = (unsigned __int16 *)(v9 + 24 * v8);
    v15 = v14[1];
    v16 = v14[2];
    v17 = v14[3];
    if (v14[1])
    {
      if (v15 > 3)
        goto LABEL_96;
      v18 = *(&off_1E61AD5B0 + (__int16)(v15 - 1));
    }
    else
    {
      v18 = &unk_1E6191B28;
    }
    if (v18[2] <= v16)
    {
      swift_bridgeObjectRelease();
LABEL_96:
      __break(1u);
      JUMPOUT(0x1B09300C4);
    }
    v19 = *((unsigned __int8 *)v18 + v16 + 32);
    swift_bridgeObjectRelease();
    language = v17;
    if (v15 == 1)
    {
      if (v19 == 56)
        goto LABEL_96;
      if (v17 >= 151)
      {
LABEL_34:
        v31 = 128;
        v32 = -81;
        goto LABEL_57;
      }
      v20 = *((unsigned __int8 *)&unk_1E6191BF0 + v17 + 32);
      if (v20 == 175)
        goto LABEL_55;
      if (v19 == 21)
      {
        v47 = v20 == 163;
        v48 = 21;
      }
      else
      {
        if (v19 != 17)
        {
          if (v19 == 9)
          {
            if (*((unsigned __int8 *)&unk_1E6191BF0 + v17 + 32) > 0x74u)
            {
              if (v20 == 117)
              {
                v19 = 13;
                goto LABEL_55;
              }
              if (v20 == 160)
              {
                v19 = 10;
                goto LABEL_55;
              }
            }
            else
            {
              if (v20 == 28)
              {
                v19 = 11;
                goto LABEL_55;
              }
              if (v20 == 59)
              {
                v19 = 12;
                goto LABEL_55;
              }
            }
            v19 = 9;
          }
LABEL_55:
          v32 = *((_BYTE *)&unk_1E6191BF0 + v17 + 32);
LABEL_56:
          v31 = 128;
          goto LABEL_57;
        }
        v47 = v20 == 40;
        v48 = 17;
      }
      if (v47)
        v19 = v48 + 1;
      else
        v19 = v48;
      goto LABEL_55;
    }
    if (v19 == 56)
      goto LABEL_96;
    if (!v15)
    {
      if ((_DWORD)v17)
        v32 = -81;
      else
        v32 = 0;
      goto LABEL_56;
    }
    if (v15 != 3)
      goto LABEL_34;
    v21 = 205;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB1D8);
    v22 = (_QWORD *)sub_1B0A1D9D8();
    v23 = &byte_1E6191CD0;
    do
    {
      v24 = *((_QWORD *)v23 - 1);
      v25 = *v23;
      v26 = sub_1B08F9E4C(v24);
      if ((v27 & 1) != 0)
      {
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        JUMPOUT(0x1B092FF20);
      }
      *(_QWORD *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v26;
      *(_QWORD *)(v22[6] + 8 * v26) = v24;
      *(_BYTE *)(v22[7] + v26) = v25;
      v28 = v22[2];
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
        goto LABEL_86;
      v23 += 16;
      v22[2] = v30;
      --v21;
    }
    while (v21);
    if (v30 && (v33 = sub_1B08F9E4C(language), (v34 & 1) != 0))
      v35 = *(_BYTE *)(v22[7] + v33);
    else
      v35 = -81;
    v61 = v35;
    swift_release();
    v36 = 205;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB198);
    v37 = (_QWORD *)sub_1B0A1D9D8();
    v38 = &byte_1E61929E8;
    do
    {
      v39 = *((_QWORD *)v38 - 1);
      v40 = *v38;
      v41 = sub_1B08F9E4C(v39);
      if ((v42 & 1) != 0)
        goto LABEL_87;
      *(_QWORD *)((char *)v37 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v41;
      *(_QWORD *)(v37[6] + 8 * v41) = v39;
      *(_BYTE *)(v37[7] + v41) = v40;
      v43 = v37[2];
      v29 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v29)
        goto LABEL_88;
      v38 += 16;
      v37[2] = v44;
      --v36;
    }
    while (v36);
    v9 = v62 + 32;
    a2 = v60;
    v13 = v58;
    v11 = v59;
    if (v44 && (v45 = sub_1B08F9E4C(language), (v46 & 1) != 0))
    {
      v31 = *(unsigned __int8 *)(v37[7] + v45);
      swift_release();
    }
    else
    {
      swift_release();
      v31 = 128;
    }
    v12 = v56;
    v32 = v61;
LABEL_57:
    v49 = v12 == 939524096 || v19 == v13;
    v50 = v49;
    v51 = v15 != (unsigned __int16)a2 && (a2 & 0x10000) == 0;
    if (!v51
      && v50
      && (v64 == 0xAF00000000 || v32 != 175 && v32 == BYTE4(a2))
      && (v63 == 0x800000000000 || v31 != 128 && v31 == v57))
    {
      break;
    }
    if (++v8 == v11)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  v52 = language;
  v53.value = Platform.interpret(encoding:language:)(v16, (Swift::UInt16_optional)v52).value;
  if (v53.value == FontParser_Encoding_unknownDefault)
  {
    __break(1u);
    JUMPOUT(0x1B0930134);
  }
  if ((sub_1B0930144(v53.value) & 0x100000000) == 0)
  {
    sub_1B0A1CFA0();
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_1B0930144(unsigned __int8 a1)
{
  return ((uint64_t (*)())((char *)sub_1B0930168 + 4 * byte_1B0A38E2F[a1]))();
}

uint64_t sub_1B0930168()
{
  return 268435712;
}

void sub_1B093018C()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930198()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09301A4()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09301B0()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09301BC()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09301C8()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09301D4()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09301E0()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09301EC()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09301F8()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930204()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930210()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B093021C()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930228()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930234()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930240()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B093024C()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930258()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930264()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930270()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B093027C()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930288()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930294()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09302A0()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09302AC()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09302B8()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09302C4()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09302D0()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09302DC()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09302E8()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B09302F4()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930300()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B093030C()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930318()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930324()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930330()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B093033C()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930348()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930354()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930360()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B093036C()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930378()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930384()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B0930390()
{
  JUMPOUT(0x1B0930174);
}

void sub_1B093039C()
{
  JUMPOUT(0x1B0930174);
}

uint64_t sub_1B09303AC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1B0A1D3E4();
  v4 = sub_1B0930428(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B0930428(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1B093056C(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1B0930658(v9, 0);
      v12 = sub_1B09306BC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1B5E0BE38](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1B5E0BE38);
LABEL_9:
      sub_1B0A1D8B8();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1B5E0BE38]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1B093056C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1B08A7A34(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1B08A7A34(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1B0A1D384();
  }
  __break(1u);
  return result;
}

_QWORD *sub_1B0930658(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA978);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t sub_1B09306BC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1B08A7A34(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_1B0A1D390();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_1B0A1D8B8();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1B08A7A34(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_1B0A1D36C();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1B09308CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int16 *v112;

  v3 = a1[1];
  result = sub_1B0A1DA50();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if (v3)
      return sub_1B0930F88(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_136;
  v6 = result;
  v106 = a1;
  if (v3 > 1)
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB9E0);
    result = sub_1B0A1D4D4();
    *(_QWORD *)(result + 16) = v7;
    v108 = result;
    v112 = (unsigned __int16 *)(result + 32);
LABEL_13:
    v9 = 0;
    v10 = *a1;
    v107 = *a1 + 48;
    v105 = *a1 + 8;
    v11 = MEMORY[0x1E0DEE9D8];
    v109 = v6;
    v110 = v3;
    v111 = v10;
    while (1)
    {
      v13 = v9++;
      if (v9 < v3)
      {
        v14 = (unsigned __int16 *)(v10 + 24 * v9);
        v15 = *v14;
        v16 = v14[3];
        v17 = (unsigned __int16 *)(v10 + 24 * v13);
        v18 = *v17;
        v19 = v16 < v17[3];
        v20 = v15 == v18;
        v21 = v15 < v18;
        if (!v20)
          v19 = v21;
        v9 = v13 + 2;
        if (v13 + 2 < v3)
        {
          v22 = (unsigned __int16 *)(v107 + 24 * v13);
          while (1)
          {
            v23 = *v22;
            v24 = v22[3];
            v25 = v24 < v16;
            v20 = v23 == v15;
            v26 = v23 < v15;
            if (v20)
              v26 = v25;
            if (v19 != v26)
              break;
            v22 += 12;
            ++v9;
            v16 = v24;
            v15 = v23;
            if (v3 == v9)
            {
              v9 = v3;
              break;
            }
          }
        }
        if (v19)
        {
          if (v9 < v13)
            goto LABEL_138;
          if (v13 < v9)
          {
            v27 = 24 * v9;
            v28 = 24 * v13;
            v29 = v9;
            v30 = v13;
            do
            {
              if (v30 != --v29)
              {
                if (!v10)
                  goto LABEL_143;
                v31 = v10 + v28;
                v32 = v10 + v27;
                v33 = *(_OWORD *)(v10 + v28 + 8);
                v34 = *(_QWORD *)(v10 + v28);
                v35 = *(_OWORD *)(v10 + v27 - 24);
                *(_QWORD *)(v31 + 16) = *(_QWORD *)(v10 + v27 - 8);
                *(_OWORD *)v31 = v35;
                *(_QWORD *)(v32 - 24) = v34;
                *(_OWORD *)(v32 - 16) = v33;
              }
              ++v30;
              v27 -= 24;
              v28 += 24;
            }
            while (v30 < v29);
          }
        }
      }
      if (v9 < v3)
      {
        if (__OFSUB__(v9, v13))
          goto LABEL_135;
        if (v9 - v13 < v6)
        {
          v36 = v13 + v6;
          if (__OFADD__(v13, v6))
            goto LABEL_139;
          if (v36 >= v3)
            v36 = v3;
          if (v36 < v13)
          {
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            return result;
          }
          if (v9 != v36)
          {
            v37 = v105 + 24 * v9;
            do
            {
              v38 = (unsigned __int16 *)(v10 + 24 * v9);
              v39 = *v38;
              v40 = v38[3];
              v41 = v13;
              v42 = v37;
              do
              {
                v43 = *(unsigned __int16 *)(v42 - 32);
                v20 = v39 == v43;
                v44 = v39 < v43;
                if (v20)
                  v44 = v40 < *(unsigned __int16 *)(v42 - 26);
                if (!v44)
                  break;
                if (!v10)
                  goto LABEL_141;
                v45 = v42 - 8;
                v46 = *(_QWORD *)(v42 - 16);
                v47 = *(_OWORD *)(v42 - 32);
                *(_OWORD *)(v42 - 24) = *(_OWORD *)v42;
                v42 -= 24;
                v48 = *(_DWORD *)(v42 + 18);
                *(_OWORD *)v45 = v47;
                *(_QWORD *)(v45 + 16) = v46;
                *(_WORD *)(v42 - 8) = v39;
                *(_DWORD *)(v42 - 6) = v48;
                *(_WORD *)(v42 - 2) = v40;
                ++v41;
              }
              while (v9 != v41);
              ++v9;
              v37 += 24;
            }
            while (v9 != v36);
            v9 = v36;
          }
        }
      }
      if (v9 < v13)
        goto LABEL_130;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08A8EA0(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
        v11 = result;
      }
      v50 = *(_QWORD *)(v11 + 16);
      v49 = *(_QWORD *)(v11 + 24);
      v12 = v50 + 1;
      v10 = v111;
      if (v50 >= v49 >> 1)
      {
        result = (uint64_t)sub_1B08A8EA0((char *)(v49 > 1), v50 + 1, 1, (char *)v11);
        v10 = v111;
        v11 = result;
      }
      *(_QWORD *)(v11 + 16) = v12;
      v51 = v11 + 32;
      v52 = (uint64_t *)(v11 + 32 + 16 * v50);
      *v52 = v13;
      v52[1] = v9;
      if (v50)
      {
        while (1)
        {
          v53 = v12 - 1;
          if (v12 >= 4)
          {
            v58 = v51 + 16 * v12;
            v59 = *(_QWORD *)(v58 - 64);
            v60 = *(_QWORD *)(v58 - 56);
            v64 = __OFSUB__(v60, v59);
            v61 = v60 - v59;
            if (v64)
              goto LABEL_119;
            v63 = *(_QWORD *)(v58 - 48);
            v62 = *(_QWORD *)(v58 - 40);
            v64 = __OFSUB__(v62, v63);
            v56 = v62 - v63;
            v57 = v64;
            if (v64)
              goto LABEL_120;
            v65 = v12 - 2;
            v66 = (uint64_t *)(v51 + 16 * (v12 - 2));
            v68 = *v66;
            v67 = v66[1];
            v64 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v64)
              goto LABEL_121;
            v64 = __OFADD__(v56, v69);
            v70 = v56 + v69;
            if (v64)
              goto LABEL_123;
            if (v70 >= v61)
            {
              v88 = (uint64_t *)(v51 + 16 * v53);
              v90 = *v88;
              v89 = v88[1];
              v64 = __OFSUB__(v89, v90);
              v91 = v89 - v90;
              if (v64)
                goto LABEL_129;
              v81 = v56 < v91;
              goto LABEL_89;
            }
          }
          else
          {
            if (v12 != 3)
            {
              v82 = *(_QWORD *)(v11 + 32);
              v83 = *(_QWORD *)(v11 + 40);
              v64 = __OFSUB__(v83, v82);
              v75 = v83 - v82;
              v76 = v64;
              goto LABEL_83;
            }
            v55 = *(_QWORD *)(v11 + 32);
            v54 = *(_QWORD *)(v11 + 40);
            v64 = __OFSUB__(v54, v55);
            v56 = v54 - v55;
            v57 = v64;
          }
          if ((v57 & 1) != 0)
            goto LABEL_122;
          v65 = v12 - 2;
          v71 = (uint64_t *)(v51 + 16 * (v12 - 2));
          v73 = *v71;
          v72 = v71[1];
          v74 = __OFSUB__(v72, v73);
          v75 = v72 - v73;
          v76 = v74;
          if (v74)
            goto LABEL_124;
          v77 = (uint64_t *)(v51 + 16 * v53);
          v79 = *v77;
          v78 = v77[1];
          v64 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v64)
            goto LABEL_126;
          if (__OFADD__(v75, v80))
            goto LABEL_128;
          if (v75 + v80 >= v56)
          {
            v81 = v56 < v80;
LABEL_89:
            if (v81)
              v53 = v65;
            goto LABEL_91;
          }
LABEL_83:
          if ((v76 & 1) != 0)
            goto LABEL_125;
          v84 = (uint64_t *)(v51 + 16 * v53);
          v86 = *v84;
          v85 = v84[1];
          v64 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          if (v64)
            goto LABEL_127;
          if (v87 < v75)
            goto LABEL_15;
LABEL_91:
          v92 = v53 - 1;
          if (v53 - 1 >= v12)
          {
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }
          if (!v10)
            goto LABEL_142;
          v93 = (uint64_t *)(v51 + 16 * v92);
          v94 = *v93;
          v95 = (_QWORD *)(v51 + 16 * v53);
          v96 = v95[1];
          result = sub_1B0931038((unsigned __int16 *)(v10 + 24 * *v93), (unsigned __int16 *)(v10 + 24 * *v95), v10 + 24 * v96, v112);
          if (v1)
            goto LABEL_99;
          if (v96 < v94)
            goto LABEL_116;
          if (v53 > *(_QWORD *)(v11 + 16))
            goto LABEL_117;
          *v93 = v94;
          *(_QWORD *)(v51 + 16 * v92 + 8) = v96;
          v97 = *(_QWORD *)(v11 + 16);
          if (v53 >= v97)
            goto LABEL_118;
          v12 = v97 - 1;
          result = (uint64_t)memmove((void *)(v51 + 16 * v53), v95 + 2, 16 * (v97 - 1 - v53));
          *(_QWORD *)(v11 + 16) = v97 - 1;
          v10 = v111;
          if (v97 <= 2)
            goto LABEL_15;
        }
      }
      v12 = 1;
LABEL_15:
      v6 = v109;
      v3 = v110;
      if (v9 >= v110)
      {
        v8 = v108;
        goto LABEL_102;
      }
    }
  }
  v8 = MEMORY[0x1E0DEE9D8];
  v112 = (unsigned __int16 *)(MEMORY[0x1E0DEE9D8] + 32);
  if (v3 == 1)
  {
    v108 = MEMORY[0x1E0DEE9D8];
    goto LABEL_13;
  }
  v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v11 = MEMORY[0x1E0DEE9D8];
LABEL_102:
  result = v11;
  v108 = v8;
  if (v12 >= 2)
  {
    v98 = *v106;
    do
    {
      v99 = v12 - 2;
      if (v12 < 2)
        goto LABEL_131;
      if (!v98)
        goto LABEL_144;
      v100 = result;
      v101 = *(_QWORD *)(result + 32 + 16 * v99);
      v102 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
      result = sub_1B0931038((unsigned __int16 *)(v98 + 24 * v101), (unsigned __int16 *)(v98 + 24 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v98 + 24 * v102, v112);
      if (v1)
        break;
      if (v102 < v101)
        goto LABEL_132;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08A8F98(v100);
        v100 = result;
      }
      if (v99 >= *(_QWORD *)(v100 + 16))
        goto LABEL_133;
      v103 = (_QWORD *)(v100 + 32 + 16 * v99);
      *v103 = v101;
      v103[1] = v102;
      v104 = *(_QWORD *)(v100 + 16);
      if (v12 > v104)
        goto LABEL_134;
      memmove((void *)(v100 + 32 + 16 * (v12 - 1)), (const void *)(v100 + 32 + 16 * v12), 16 * (v104 - v12));
      result = v100;
      *(_QWORD *)(v100 + 16) = v104 - 1;
      v12 = v104 - 1;
    }
    while (v104 > 2);
  }
LABEL_99:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v108 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0930F88(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 24 * a3 + 8;
LABEL_5:
    v6 = (unsigned __int16 *)(v4 + 24 * a3);
    v7 = *v6;
    v8 = v6[3];
    v9 = result;
    v10 = v5;
    while (1)
    {
      v11 = *(unsigned __int16 *)(v10 - 32);
      v12 = v7 == v11;
      v13 = v7 < v11;
      if (v12)
        v13 = v8 < *(unsigned __int16 *)(v10 - 26);
      if (!v13)
      {
LABEL_4:
        ++a3;
        v5 += 24;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      v14 = v10 - 8;
      v15 = *(_QWORD *)(v10 - 16);
      v16 = *(_OWORD *)(v10 - 32);
      *(_OWORD *)(v10 - 24) = *(_OWORD *)v10;
      v10 -= 24;
      v17 = *(_DWORD *)(v10 + 18);
      *(_OWORD *)v14 = v16;
      *(_QWORD *)(v14 + 16) = v15;
      *(_WORD *)(v10 - 8) = v7;
      *(_DWORD *)(v10 - 6) = v17;
      *(_WORD *)(v10 - 2) = v8;
      if (a3 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0931038(unsigned __int16 *__dst, unsigned __int16 *__src, unint64_t a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  _BOOL4 v16;
  unsigned __int16 *v17;
  __int128 v18;
  unint64_t v19;
  unsigned int v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  _BOOL4 v24;
  BOOL v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 24;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[12 * v11] <= a4)
      memmove(a4, __src, 24 * v11);
    v12 = &v4[12 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_40;
    v19 = a3 - 24;
    while (1)
    {
      v20 = *(v12 - 12);
      v21 = (unsigned __int16 *)(v19 + 24);
      v22 = v6 - 12;
      v23 = *(v6 - 12);
      v15 = v20 == v23;
      v24 = v20 < v23;
      if (v15)
        v24 = *(v12 - 9) < *(v6 - 9);
      if (v24)
      {
        if (v21 != v6)
        {
          v6 -= 12;
LABEL_37:
          v26 = *(_OWORD *)v22;
          *(_QWORD *)(v19 + 16) = *((_QWORD *)v22 + 2);
          *(_OWORD *)v19 = v26;
          goto LABEL_38;
        }
        v25 = v19 >= (unint64_t)v6;
        v6 -= 12;
        if (v25)
          goto LABEL_37;
      }
      else
      {
        v22 = v12 - 12;
        if (v21 != v12)
        {
          v12 -= 12;
          goto LABEL_37;
        }
        v25 = v19 >= (unint64_t)v12;
        v12 -= 12;
        if (v25)
          goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        v19 -= 24;
        if (v12 > v4)
          continue;
      }
      goto LABEL_40;
    }
  }
  if (a4 != __dst || &__dst[12 * v9] <= a4)
    memmove(a4, __dst, 24 * v9);
  v12 = &v4[12 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      v13 = *v6;
      v14 = *v4;
      v15 = v13 == v14;
      v16 = v13 < v14;
      if (v15)
        v16 = v6[3] < v4[3];
      if (!v16)
        break;
      v17 = v6;
      v15 = v7 == v6;
      v6 += 12;
      if (!v15)
        goto LABEL_14;
LABEL_15:
      v7 += 12;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v17 = v4;
    v15 = v7 == v4;
    v4 += 12;
    if (v15)
      goto LABEL_15;
LABEL_14:
    v18 = *(_OWORD *)v17;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v17 + 2);
    *(_OWORD *)v7 = v18;
    goto LABEL_15;
  }
LABEL_17:
  v6 = v7;
LABEL_40:
  v27 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v28 = (v27 >> 2) + ((unint64_t)v27 >> 63);
  if (v6 != v4 || v6 >= &v4[12 * v28])
    memmove(v6, v4, 24 * v28);
  return 1;
}

BOOL sub_1B09312B4(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL8 result;
  char v15;

  if (a1 != a5)
    return 0;
  v8 = WORD2(a8);
  v9 = WORD2(a4);
  v10 = (unsigned __int16)a4;
  v11 = WORD1(a4);
  v12 = (unsigned __int16)a8;
  v13 = WORD1(a8);
  if (a2 == a6 && a3 == a7)
  {
    result = 0;
  }
  else
  {
    v15 = sub_1B0A1DA8C();
    result = 0;
    if ((v15 & 1) == 0)
      return result;
  }
  if (v10 == v12 && v11 == v13)
    return v9 == v8;
  return result;
}

uint64_t sub_1B0931364(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int128 v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 16) && (v3 = sub_1B08F9E7C(1851878757), (v4 & 1) != 0))
  {
    v5 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v3);
    v7 = *v5;
    v6 = v5[1];
    sub_1B08A35B0(*v5, v6);
    swift_bridgeObjectRelease();
    v11[0] = v7;
    v11[1] = v6;
    sub_1B08A35B0(v7, v6);
    sub_1B08A35F4();
    *(_QWORD *)&v12 = sub_1B0A1D090();
    *((_QWORD *)&v12 + 1) = v8;
    v13 = v9;
    sub_1B08C3C70(v11, &v12, v9, 65793);
    if (!v1)
      __asm { BR              X9 }
    sub_1B08A3638(v7, v6);

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1B093149C(uint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (BYTE6(v2) < a1)
  {
    swift_bridgeObjectRelease();
    sub_1B08A3638(v3, v2);
    JUMPOUT(0x1B0931444);
  }
  if (!v1)
  {
    v4 = 0;
    v6 = BYTE6(v2);
    goto LABEL_10;
  }
  if (v1 != 1)
  {
    v4 = *(_QWORD *)(v3 + 16);
    v5 = __OFADD__(v4, a1);
    a1 += v4;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 24);
      goto LABEL_10;
    }
LABEL_15:
    __break(1u);
    JUMPOUT(0x1B0931A4CLL);
  }
  v4 = (int)v3;
  v5 = __OFADD__((int)v3, a1);
  a1 += (int)v3;
  if (v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  v6 = v3 >> 32;
LABEL_10:
  if (v6 < v4 || v6 < a1)
  {
    __break(1u);
    JUMPOUT(0x1B0931A28);
  }
  sub_1B0A1CFA0();
  return ((uint64_t (*)(void))((char *)&loc_1B0931568 + dword_1B0931A64[v1]))();
}

uint64_t sub_1B0931A84(__int16 a1, unsigned __int16 a2)
{
  __CFString *CanonicalLocaleIdentifierFromScriptManagerCodes;
  uint64_t v3;

  if (a1 != 3)
  {
    if (a1 == 1)
    {
      CanonicalLocaleIdentifierFromScriptManagerCodes = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, -128);
      if (CanonicalLocaleIdentifierFromScriptManagerCodes)
        goto LABEL_4;
    }
    return 0;
  }
  CanonicalLocaleIdentifierFromScriptManagerCodes = (__CFString *)CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  if (!CanonicalLocaleIdentifierFromScriptManagerCodes)
    return 0;
LABEL_4:
  v3 = sub_1B0A1D21C();

  return v3;
}

uint64_t _s10FontParser20NameStringIdentifierV8allCasesSayACGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = MEMORY[0x1E0DEE9D8];
  v11 = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9D8];
  sub_1B08E843C(0, 15, 0);
  v1 = 0;
  v2 = v11;
  v3 = *(_QWORD *)(v11 + 16);
  do
  {
    v12 = v2;
    v4 = *(_QWORD *)(v2 + 24);
    if (v3 >= v4 >> 1)
    {
      sub_1B08E843C((char *)(v4 > 1), v3 + 1, 1);
      v2 = v12;
    }
    *(_QWORD *)(v2 + 16) = v3 + 1;
    *(_WORD *)(v2 + 2 * v3++ + 32) = v1++;
  }
  while (v1 != 15);
  sub_1B08A463C(v2);
  v13 = v0;
  v5 = 10;
  sub_1B08E843C(0, 10, 0);
  v6 = v13;
  v7 = *(_QWORD *)(v13 + 16);
  v8 = 16;
  do
  {
    v14 = v6;
    v9 = *(_QWORD *)(v6 + 24);
    if (v7 >= v9 >> 1)
    {
      sub_1B08E843C((char *)(v9 > 1), v7 + 1, 1);
      v6 = v14;
    }
    *(_QWORD *)(v6 + 16) = v7 + 1;
    *(_WORD *)(v6 + 2 * v7++ + 32) = v8++;
    --v5;
  }
  while (v5);
  sub_1B08A463C(v6);
  return v15;
}

unint64_t sub_1B0931C60()
{
  unint64_t result;

  result = qword_1EEEBB978;
  if (!qword_1EEEBB978)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39184, &type metadata for NameStringEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBB978);
  }
  return result;
}

unint64_t sub_1B0931CA4()
{
  unint64_t result;

  result = qword_1EEEBB980;
  if (!qword_1EEEBB980)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for NameStringIdentifier, &type metadata for NameStringIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EEEBB980);
  }
  return result;
}

unint64_t sub_1B0931CE8()
{
  unint64_t result;

  result = qword_1EEEBB988;
  if (!qword_1EEEBB988)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Platform, &type metadata for Platform);
    atomic_store(result, (unint64_t *)&qword_1EEEBB988);
  }
  return result;
}

uint64_t sub_1B0931D2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6156747069726373 && a2 == 0xEB0000000065756CLL || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xED000065756C6156)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1B0A1DA8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1B0931F6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  char v11;
  char v12;
  unsigned __int16 v13;
  char v14;
  char v15;
  unsigned __int16 v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB9C8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0931C60();
  sub_1B0A1DB7C();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v15 = 0;
    sub_1B093284C();
    sub_1B0A1DA08();
    v7 = v16;
    v14 = 1;
    sub_1B0A1D9F0();
    v12 = 2;
    sub_1B0932890();
    swift_bridgeObjectRetain();
    sub_1B0A1DA08();
    v9[2] = v13;
    v11 = 3;
    v9[1] = sub_1B0A1DA14();
    v10 = 4;
    sub_1B0A1DA14();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1B09321C8()
{
  unint64_t result;

  result = qword_1EEEBB990;
  if (!qword_1EEEBB990)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for NameStringIdentifier, &type metadata for NameStringIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EEEBB990);
  }
  return result;
}

unint64_t sub_1B0932210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEBB998;
  if (!qword_1EEEBB998)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEBB9A0);
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEBB998);
  }
  return result;
}

ValueMetadata *type metadata accessor for NameStringIdentifier()
{
  return &type metadata for NameStringIdentifier;
}

uint64_t destroy for NameStringEntry()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NameStringEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 26) = *(_DWORD *)(a2 + 26);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NameStringEntry(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  return a1;
}

__n128 __swift_memcpy30_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NameStringEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 26) = *(_DWORD *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for NameStringEntry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 30))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NameStringEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 30) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 30) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NameStringEntry()
{
  return &type metadata for NameStringEntry;
}

uint64_t getEnumTagSinglePayload for NameStringEntry.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NameStringEntry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0932500 + 4 * byte_1B0A38E6C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0932534 + 4 * byte_1B0A38E67[v4]))();
}

uint64_t sub_1B0932534(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B093253C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0932544);
  return result;
}

uint64_t sub_1B0932550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0932558);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B093255C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0932564(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NameStringEntry.CodingKeys()
{
  return &type metadata for NameStringEntry.CodingKeys;
}

uint64_t destroy for NameInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_1B08A3638(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *_s10FontParser8NameInfoVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  swift_bridgeObjectRetain();
  sub_1B08A35B0(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for NameInfo(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[1];
  v4 = a2[2];
  sub_1B08A35B0(v5, v4);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_1B08A3638(v6, v7);
  return a1;
}

_QWORD *assignWithTake for NameInfo(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = a1[1];
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1B08A3638(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for NameInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NameInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NameInfo()
{
  return &type metadata for NameInfo;
}

unint64_t sub_1B0932734()
{
  unint64_t result;

  result = qword_1EEEBB9A8;
  if (!qword_1EEEBB9A8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3915C, &type metadata for NameStringEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBB9A8);
  }
  return result;
}

unint64_t sub_1B093277C()
{
  unint64_t result;

  result = qword_1EEEBB9B0;
  if (!qword_1EEEBB9B0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A390CC, &type metadata for NameStringEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBB9B0);
  }
  return result;
}

unint64_t sub_1B09327C4()
{
  unint64_t result;

  result = qword_1EEEBB9B8;
  if (!qword_1EEEBB9B8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A390F4, &type metadata for NameStringEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBB9B8);
  }
  return result;
}

unint64_t sub_1B0932808()
{
  unint64_t result;

  result = qword_1EEEBB9C0;
  if (!qword_1EEEBB9C0)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for NameStringIdentifier, &type metadata for NameStringIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EEEBB9C0);
  }
  return result;
}

unint64_t sub_1B093284C()
{
  unint64_t result;

  result = qword_1EEEBB9D0;
  if (!qword_1EEEBB9D0)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for NameStringIdentifier, &type metadata for NameStringIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EEEBB9D0);
  }
  return result;
}

unint64_t sub_1B0932890()
{
  unint64_t result;

  result = qword_1EEEBB9D8;
  if (!qword_1EEEBB9D8)
  {
    result = MEMORY[0x1B5E0D530]("\rHw5DE\a", &type metadata for Platform);
    atomic_store(result, (unint64_t *)&qword_1EEEBB9D8);
  }
  return result;
}

_QWORD *__swift_memcpy8_2(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NameInfo.NameKey(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NameInfo.NameKey(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NameInfo.NameKey()
{
  return &type metadata for NameInfo.NameKey;
}

unint64_t sub_1B093293C()
{
  unint64_t result;

  result = qword_1EEEBB9E8;
  if (!qword_1EEEBB9E8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A391DC, &type metadata for NameInfo.NameKey);
    atomic_store(result, (unint64_t *)&qword_1EEEBB9E8);
  }
  return result;
}

void sub_1B0932980(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1B09329BC()
{
  sub_1B0A1D30C();
  return swift_bridgeObjectRelease();
}

void sub_1B0932A78(uint64_t a1, char a2)
{
  sub_1B0A1DB28();
  __asm { BR              X10 }
}

uint64_t sub_1B0932AC0()
{
  sub_1B0A1D30C();
  swift_bridgeObjectRelease();
  return sub_1B0A1DB70();
}

void sub_1B0932B90(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B0932BD8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B0932C9C + 4 * byte_1B0A392A8[a2]))(0x566D657473);
}

uint64_t sub_1B0932C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x566D657473 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1B0A1DA8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t Font.string(name:platform:encoding:language:region:)(uint64_t a1, int a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  char v12;
  unsigned __int16 v14;
  uint64_t result;
  uint64_t v16;

  v12 = BYTE2(a2);
  if ((a2 & 0x10000) != 0)
  {
    v14 = 0;
    if (a3 == 56 && a4 == 175 && a5 == 128)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 56))(a1, 0x802438010000, a6, a7);
      if (v16)
        return result;
      v14 = 0;
    }
  }
  else
  {
    v14 = a2;
  }
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a7 + 56))(a1, ((unint64_t)a4 << 32) | ((unint64_t)a5 << 40) | ((unint64_t)a3 << 24) | ((unint64_t)(v12 & 1) << 16) | v14, a6, a7);
}

_QWORD *Font.findBestCharacterMap()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  result = (*(_QWORD *(**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a2 + 64))(v9, 0x80AF38010000, a1);
  if (!v3)
  {
    if ((_QWORD)v10)
    {
      v6 = v11;
      a3[2] = v10;
      a3[3] = v6;
      v7 = v13;
      a3[4] = v12;
      a3[5] = v7;
      v8 = v9[1];
      *a3 = v9[0];
      a3[1] = v8;
    }
    else
    {
      sub_1B09334A0((uint64_t)v9);
      sub_1B08AE2A8();
      swift_allocError();
      return (_QWORD *)swift_willThrow();
    }
  }
  return result;
}

uint64_t Font.renderGlyph<A>(glyphIndex:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t, double);
  void (*v19)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a1;
  v23 = a3;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for GlyphRendererAsRecorder(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v22 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v24 = a2;
  v18(v10, a2, a4, v15);
  GlyphRendererAsRecorder.init(renderer:)((uint64_t)v10, a4, (uint64_t)v17);
  v19 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96);
  v20 = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphRendererAsRecorder<A>, v13);
  v19(v22, v17, v13, v20, v23, a5);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 24))(v24, v17, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t FontDataResidence.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t FontEncodingType.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t sub_1B09330C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  char v12;
  char v13;
  BOOL v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v13 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = (unsigned __int8 *)(a2 + 48);
      v5 = (unsigned __int8 *)(a1 + 48);
      do
      {
        v7 = *((_QWORD *)v5 - 2);
        v6 = *((_QWORD *)v5 - 1);
        v8 = *((_QWORD *)v4 - 2);
        v9 = *((_QWORD *)v4 - 1);
        v10 = *v5;
        v11 = *v4;
        sub_1B08AE1E0(v7, v6, *v5);
        sub_1B08AE1E0(v8, v9, v11);
        static PSObject.__derived_enum_equals(_:_:)(v7, v6, v10);
        v13 = v12;
        sub_1B08AE21C(v8, v9, v11);
        sub_1B08AE21C(v7, v6, v10);
        v15 = v3-- != 0;
        if ((v13 & 1) == 0)
          break;
        v4 += 24;
        v5 += 24;
      }
      while (v15);
    }
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1B09331BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (_BYTE *)(a2 + 48);
    for (i = (_BYTE *)(a1 + 48); ; i += 24)
    {
      v6 = *((_QWORD *)i - 2);
      v7 = *((_QWORD *)v3 - 2);
      v8 = *v3;
      if (!*i)
        break;
      if (*i == 1)
      {
        if (v8 != 1)
          return 0;
        v9 = v6 == v7 && *((_QWORD *)i - 1) == *((_QWORD *)v3 - 1);
        if (!v9 && (sub_1B0A1DA8C() & 1) == 0)
          return 0;
      }
      else if (v8 != 2 || v6 != v7)
      {
        return 0;
      }
      v3 += 24;
      if (!--v2)
        return 1;
    }
    if (!*v3)
      __asm { BR              X12 }
  }
  return 0;
}

uint64_t sub_1B093337C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1B0A1DA8C(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_1B0A1DA8C() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

FontParser::FontDataResidence_optional __swiftcall FontDataResidence.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3)
    LOBYTE(rawValue) = 3;
  return (FontParser::FontDataResidence_optional)rawValue;
}

uint64_t *sub_1B0933450@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

FontParser::FontEncodingType_optional __swiftcall FontEncodingType.init(rawValue:)(Swift::Int rawValue)
{
  FontParser::FontEncodingType_optional v1;

  if (rawValue == 1)
    v1.value = FontParser_FontEncodingType_type1;
  else
    v1.value = FontParser_FontEncodingType_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

_QWORD *sub_1B0933480@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1B09334A0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FontInfo.Typo.descent.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t FontInfo.Typo.leading.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

BOOL static FontInfo.Typo.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

uint64_t sub_1B0933514()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E6563736564;
  if (*v0 != 1)
    v1 = 0x676E696461656CLL;
  if (*v0)
    return v1;
  else
    return 0x746E65637361;
}

uint64_t sub_1B093356C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B09355D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B0933590(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1B093359C()
{
  sub_1B0933738();
  return sub_1B0A1DBD0();
}

uint64_t sub_1B09335C4()
{
  sub_1B0933738();
  return sub_1B0A1DBDC();
}

uint64_t FontInfo.Typo.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];
  char v11;
  char v12;
  char v13;

  v10[1] = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB9F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0933738();
  sub_1B0A1DB88();
  v13 = 0;
  sub_1B0A1DA2C();
  if (!v3)
  {
    v12 = 1;
    sub_1B0A1DA2C();
    v11 = 2;
    sub_1B0A1DA2C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1B0933738()
{
  unint64_t result;

  result = qword_1EEEBB9F8;
  if (!qword_1EEEBB9F8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39FCC, &type metadata for FontInfo.Typo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBB9F8);
  }
  return result;
}

uint64_t FontInfo.Typo.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1B093571C(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_1B09337A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1B093571C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B09337CC(_QWORD *a1)
{
  uint64_t *v1;

  return FontInfo.Typo.encode(to:)(a1, *v1, v1[1]);
}

BOOL sub_1B09337E8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t FontInfo.Windows.descent.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL static FontInfo.Windows.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t sub_1B0933838()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E6563736564;
  else
    return 0x746E65637361;
}

uint64_t sub_1B0933870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B09358D8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B0933894(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1B09338A0()
{
  sub_1B0935894();
  return sub_1B0A1DBD0();
}

uint64_t sub_1B09338C8()
{
  sub_1B0935894();
  return sub_1B0A1DBDC();
}

uint64_t FontInfo.Windows.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBA00);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0935894();
  sub_1B0A1DB88();
  v10 = 0;
  sub_1B0A1DA2C();
  if (!v1)
  {
    v9 = 1;
    sub_1B0A1DA2C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FontInfo.Windows.init(from:)(_QWORD *a1)
{
  return sub_1B09359C0(a1);
}

uint64_t sub_1B0933A20@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B09359C0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B0933A48(_QWORD *a1)
{
  return FontInfo.Windows.encode(to:)(a1);
}

BOOL sub_1B0933A60(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

double FontInfo.Strikeout.size.getter(double a1, double a2)
{
  return a2;
}

BOOL static FontInfo.Strikeout.__derived_struct_equals(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

uint64_t sub_1B0933A9C()
{
  _BYTE *v0;

  if (*v0)
    return 1702521203;
  else
    return 0x6E6F697469736F70;
}

uint64_t sub_1B0933AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0935B98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0933AF4()
{
  sub_1B0935B10();
  return sub_1B0A1DBD0();
}

uint64_t sub_1B0933B1C()
{
  sub_1B0935B10();
  return sub_1B0A1DBDC();
}

uint64_t FontInfo.Strikeout.encode(to:)(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  double v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBA10);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0935B10();
  sub_1B0A1DB88();
  v14 = a2;
  v13 = 0;
  sub_1B0935B54();
  sub_1B0A1DA38();
  if (!v3)
  {
    v14 = a3;
    v13 = 1;
    sub_1B0A1DA38();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

double FontInfo.Strikeout.init(from:)(_QWORD *a1)
{
  return sub_1B0935C78(a1);
}

void sub_1B0933CA0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = sub_1B0935C78(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

uint64_t sub_1B0933CC8(_QWORD *a1)
{
  double *v1;

  return FontInfo.Strikeout.encode(to:)(a1, *v1, v1[1]);
}

BOOL sub_1B0933CE0(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t FontInfo.RegistryOrderingSupplement.registry.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FontInfo.RegistryOrderingSupplement.registry.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FontInfo.RegistryOrderingSupplement.registry.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.RegistryOrderingSupplement.ordering.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FontInfo.RegistryOrderingSupplement.ordering.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FontInfo.RegistryOrderingSupplement.ordering.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.RegistryOrderingSupplement.supplement.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t FontInfo.RegistryOrderingSupplement.supplement.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*FontInfo.RegistryOrderingSupplement.supplement.modify())()
{
  return nullsub_1;
}

void __swiftcall FontInfo.RegistryOrderingSupplement.init(registry:ordering:supplement:)(FontParser::FontInfo::RegistryOrderingSupplement *__return_ptr retstr, Swift::String registry, Swift::String ordering, Swift::Int supplement)
{
  retstr->registry = registry;
  retstr->ordering = ordering;
  retstr->supplement = supplement;
}

uint64_t sub_1B0933E20()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x676E69726564726FLL;
  if (*v0 != 1)
    v1 = 0x656D656C70707573;
  if (*v0)
    return v1;
  else
    return 0x7972747369676572;
}

uint64_t sub_1B0933E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B0935E44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B0933EA4()
{
  sub_1B0935E00();
  return sub_1B0A1DBD0();
}

uint64_t sub_1B0933ECC()
{
  sub_1B0935E00();
  return sub_1B0A1DBDC();
}

uint64_t FontInfo.RegistryOrderingSupplement.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBA28);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0935E00();
  sub_1B0A1DB88();
  v8[15] = 0;
  sub_1B0A1DA20();
  if (!v1)
  {
    v8[14] = 1;
    sub_1B0A1DA20();
    v8[13] = 2;
    sub_1B0A1DA2C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

double FontInfo.RegistryOrderingSupplement.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1B0935FA4(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

double sub_1B0934074@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1B0935FA4(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B09340B8(_QWORD *a1)
{
  return FontInfo.RegistryOrderingSupplement.encode(to:)(a1);
}

BOOL sub_1B09340CC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return _s10FontParser0A4InfoV26RegistryOrderingSupplementV23__derived_struct_equalsySbAE_AEtFZ_0(v5, v7);
}

uint64_t FontInfo.numberOfGlyphs.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FontInfo.numberOfGlyphs.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FontInfo.numberOfGlyphs.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.unitsPerEm.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FontInfo.unitsPerEm.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*FontInfo.unitsPerEm.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.ascent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t FontInfo.ascent.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*FontInfo.ascent.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.descent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t FontInfo.descent.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*FontInfo.descent.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.leading.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t FontInfo.leading.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*FontInfo.leading.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.typo.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t FontInfo.typo.setter(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = result;
  *(_QWORD *)(v4 + 48) = a2;
  *(_QWORD *)(v4 + 56) = a3;
  *(_BYTE *)(v4 + 64) = a4 & 1;
  return result;
}

uint64_t (*FontInfo.typo.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.windows.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t FontInfo.windows.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 72) = result;
  *(_QWORD *)(v3 + 80) = a2;
  *(_BYTE *)(v3 + 88) = a3 & 1;
  return result;
}

uint64_t (*FontInfo.windows.modify())()
{
  return nullsub_1;
}

__n128 FontInfo.subscript.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 128);
  result = *(__n128 *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 112);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t FontInfo.subscript.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1B09361C4(a1, v1 + 96);
}

uint64_t (*FontInfo.subscript.modify())()
{
  return nullsub_1;
}

__n128 FontInfo.superscript.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 168);
  result = *(__n128 *)(v1 + 136);
  v4 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t FontInfo.superscript.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1B09361C4(a1, v1 + 136);
}

uint64_t (*FontInfo.superscript.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.strikeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t FontInfo.strikeout.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 176) = result;
  *(_QWORD *)(v3 + 184) = a2;
  *(_BYTE *)(v3 + 192) = a3 & 1;
  return result;
}

uint64_t (*FontInfo.strikeout.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.registryOrderingSupplement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B093620C(v1 + 200, a1);
}

uint64_t FontInfo.registryOrderingSupplement.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1B0936254(a1, v1 + 200);
}

uint64_t (*FontInfo.registryOrderingSupplement.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.capHeight.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

uint64_t FontInfo.capHeight.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 240) = result;
  return result;
}

uint64_t (*FontInfo.capHeight.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.xHeight.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 248);
}

uint64_t FontInfo.xHeight.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 248) = result;
  return result;
}

uint64_t (*FontInfo.xHeight.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.maxAdvanceWidth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 256);
}

uint64_t FontInfo.maxAdvanceWidth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 256) = result;
  return result;
}

uint64_t (*FontInfo.maxAdvanceWidth.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.averageWidth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 264);
}

uint64_t FontInfo.averageWidth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 264) = result;
  return result;
}

uint64_t (*FontInfo.averageWidth.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.minLeftSideBearing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

uint64_t FontInfo.minLeftSideBearing.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 272) = result;
  return result;
}

uint64_t (*FontInfo.minLeftSideBearing.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.minRightSideBearing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 280);
}

uint64_t FontInfo.minRightSideBearing.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 280) = result;
  return result;
}

uint64_t (*FontInfo.minRightSideBearing.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.isFixedPitch.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 288);
}

uint64_t FontInfo.isFixedPitch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 288) = result;
  return result;
}

uint64_t (*FontInfo.isFixedPitch.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.italicAngle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 296);
}

uint64_t FontInfo.italicAngle.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 296) = result;
  *(_BYTE *)(v2 + 304) = a2 & 1;
  return result;
}

uint64_t (*FontInfo.italicAngle.modify())()
{
  return nullsub_1;
}

double FontInfo.underlinePosition.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 312);
}

void FontInfo.underlinePosition.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 312) = a1;
}

uint64_t (*FontInfo.underlinePosition.modify())()
{
  return nullsub_1;
}

double FontInfo.underlineThickness.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 320);
}

void FontInfo.underlineThickness.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 320) = a1;
}

uint64_t (*FontInfo.underlineThickness.modify())()
{
  return nullsub_1;
}

double FontInfo.boundingBox.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 328);
}

void FontInfo.boundingBox.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[41] = a1;
  v4[42] = a2;
  v4[43] = a3;
  v4[44] = a4;
}

uint64_t (*FontInfo.boundingBox.modify())()
{
  return nullsub_1;
}

double FontInfo.stemH.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 360);
}

void FontInfo.stemH.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 360) = a1;
}

uint64_t (*FontInfo.stemH.modify())()
{
  return nullsub_1;
}

double FontInfo.stemV.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 368);
}

void FontInfo.stemV.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 368) = a1;
}

uint64_t (*FontInfo.stemV.modify())()
{
  return nullsub_1;
}

uint64_t FontInfo.isAutohintingUsable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 376);
}

uint64_t FontInfo.isAutohintingUsable.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 376) = result;
  return result;
}

uint64_t (*FontInfo.isAutohintingUsable.modify())()
{
  return nullsub_1;
}

double FontInfo.init()@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v2;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_BYTE *)(a1 + 168) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_OWORD *)(a1 + 200) = 0u;
  v2 = a1 + 200;
  *(_OWORD *)(v2 + 73) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 1;
  *(_BYTE *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  return result;
}

uint64_t FontMetadata.Flags.rawValue.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FontMetadata.Flags.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t static FontMetadata.Flags.hasBadVmtx.getter()
{
  return 1;
}

uint64_t static FontMetadata.Flags.hasNormalizedGlyphPaths.getter()
{
  return 2;
}

uint64_t static FontMetadata.Flags.useFontHints.getter()
{
  return 4;
}

uint64_t sub_1B093455C()
{
  sub_1B0936778();
  return sub_1B0A1D468();
}

uint64_t sub_1B09345B8()
{
  sub_1B0936778();
  return sub_1B0A1D45C();
}

uint64_t FontMetadata.stemH.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FontMetadata.stemH.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FontMetadata.stemH.modify())()
{
  return nullsub_1;
}

uint64_t FontMetadata.stemV.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FontMetadata.stemV.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*FontMetadata.stemV.modify())()
{
  return nullsub_1;
}

uint64_t FontMetadata.xGlyph.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t FontMetadata.xGlyph.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*FontMetadata.xGlyph.modify())()
{
  return nullsub_1;
}

uint64_t FontMetadata.oGlyph.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t FontMetadata.oGlyph.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*FontMetadata.oGlyph.modify())()
{
  return nullsub_1;
}

uint64_t FontMetadata.cjkScript.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t FontMetadata.cjkScript.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*FontMetadata.cjkScript.modify())()
{
  return nullsub_1;
}

uint64_t FontMetadata.flags.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 40);
}

uint64_t FontMetadata.flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*FontMetadata.flags.modify())()
{
  return nullsub_1;
}

uint64_t FontMetadata.designLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FontMetadata.designLanguages.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*FontMetadata.designLanguages.modify())()
{
  return nullsub_1;
}

uint64_t FontMetadata.supportedLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FontMetadata.supportedLanguages.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*FontMetadata.supportedLanguages.modify())()
{
  return nullsub_1;
}

uint64_t FontMetadata.additionalInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FontMetadata.additionalInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*FontMetadata.additionalInfo.modify())()
{
  return nullsub_1;
}

double FontMetadata.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  double result;

  v2 = MEMORY[0x1E0DEE9D8];
  sub_1B08F7810(MEMORY[0x1E0DEE9D8]);
  v3 = sub_1B08F7810(v2);
  swift_bridgeObjectRelease();
  result = 0.0;
  *(_OWORD *)(a1 + 26) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t sub_1B09347E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B0934814 + 4 * byte_1B0A392BB[a1]))(0x486D657473, 0xE500000000000000);
}

uint64_t sub_1B0934814()
{
  return 0x566D657473;
}

uint64_t sub_1B0934824()
{
  return 0x6870796C4778;
}

uint64_t sub_1B093483C()
{
  return 0x6870796C476FLL;
}

uint64_t sub_1B0934850()
{
  return 0x70697263536B6A63;
}

uint64_t sub_1B093486C()
{
  return 0x7367616C66;
}

uint64_t sub_1B093487C()
{
  return 0x614C6E6769736564;
}

unint64_t sub_1B09348A0()
{
  return 0xD000000000000012;
}

uint64_t sub_1B09348BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B09348EC + 4 * byte_1B0A392C3[a1]))(0x486D657473, 0xE500000000000000);
}

uint64_t sub_1B09348EC()
{
  return 0x566D657473;
}

uint64_t sub_1B09348FC()
{
  return 0x6870796C4778;
}

uint64_t sub_1B0934914()
{
  return 0x6870796C476FLL;
}

uint64_t sub_1B0934928()
{
  return 0x70697263536B6A63;
}

uint64_t sub_1B0934944()
{
  return 0x7367616C66;
}

uint64_t sub_1B0934954()
{
  return 0x614C6E6769736564;
}

unint64_t sub_1B0934978()
{
  return 0xD000000000000012;
}

void sub_1B0934994(char *a1)
{
  sub_1B0932B90(*a1);
}

void sub_1B09349A0()
{
  char *v0;

  sub_1B0932A78(0, *v0);
}

void sub_1B09349AC(uint64_t a1)
{
  char *v1;

  sub_1B0932980(a1, *v1);
}

void sub_1B09349B4(uint64_t a1)
{
  char *v1;

  sub_1B0932A78(a1, *v1);
}

uint64_t sub_1B09349BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0936324();
  *a1 = result;
  return result;
}

uint64_t sub_1B09349E8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B09347E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B0934A10()
{
  unsigned __int8 *v0;

  return sub_1B09348BC(*v0);
}

uint64_t sub_1B0934A18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B0936324();
  *a1 = result;
  return result;
}

void sub_1B0934A3C(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1B0934A48()
{
  sub_1B093629C();
  return sub_1B0A1DBD0();
}

uint64_t sub_1B0934A70()
{
  sub_1B093629C();
  return sub_1B0A1DBDC();
}

uint64_t sub_1B0934A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = a1 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(63 - v6) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    v17 = v10;
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_27;
      goto LABEL_7;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v18 >= v8)
      goto LABEL_30;
    v19 = *(_QWORD *)(v4 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v17 + 2;
      if (v17 + 2 >= v8)
        goto LABEL_30;
      v19 = *(_QWORD *)(v4 + 8 * v10);
      if (!v19)
      {
        v10 = v17 + 3;
        if (v17 + 3 >= v8)
          goto LABEL_30;
        v19 = *(_QWORD *)(v4 + 8 * v10);
        if (!v19)
        {
          v10 = v17 + 4;
          if (v17 + 4 >= v8)
            goto LABEL_30;
          v19 = *(_QWORD *)(v4 + 8 * v10);
          if (!v19)
          {
            v10 = v17 + 5;
            if (v17 + 5 >= v8)
              goto LABEL_30;
            v19 = *(_QWORD *)(v4 + 8 * v10);
            if (!v19)
              break;
          }
        }
      }
    }
LABEL_26:
    v7 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v10 << 6);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_27:
      v21 = 0;
LABEL_31:
      sub_1B08AE400();
      return v21;
    }
LABEL_7:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v15 = *v13;
    v14 = v13[1];
    swift_bridgeObjectRetain();
    sub_1B08F9E38(v15, v14);
    LOBYTE(v15) = v16;
    result = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
      goto LABEL_27;
  }
  v20 = v17 + 6;
  if (v17 + 6 >= v8)
  {
LABEL_30:
    v21 = 1;
    goto LABEL_31;
  }
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
  {
    v10 = v17 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v8)
      goto LABEL_30;
    v19 = *(_QWORD *)(v4 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t FontMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBA38);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B093629C();
  sub_1B0A1DB88();
  LOBYTE(v10) = 0;
  sub_1B0A1DA2C();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    sub_1B0A1DA2C();
    LOBYTE(v10) = 2;
    sub_1B0A1DA2C();
    LOBYTE(v10) = 3;
    sub_1B0A1DA2C();
    LOBYTE(v10) = 4;
    sub_1B0A1DA2C();
    LOWORD(v10) = *(_WORD *)(v3 + 40);
    v11 = 5;
    sub_1B09362E0();
    sub_1B0A1DA38();
    v10 = *(_QWORD *)(v3 + 48);
    v11 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA788);
    sub_1B0937CFC(&qword_1EEEBBA50, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1B0A1DA38();
    v10 = *(_QWORD *)(v3 + 56);
    v11 = 7;
    sub_1B0A1DA38();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 FontMetadata.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_1B093636C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

__n128 sub_1B0934F64@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_1B093636C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B0934FB4(_QWORD *a1)
{
  return FontMetadata.encode(to:)(a1);
}

uint64_t sub_1B0934FC8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return _s10FontParser0A8MetadataV2eeoiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t sub_1B0935020(char a1)
{
  if ((a1 & 1) != 0)
    return 1986553185;
  else
    return 1751672161;
}

BOOL static GlyphMetrics.Direction.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t GlyphMetrics.Direction.hash(into:)()
{
  return sub_1B0A1DB34();
}

uint64_t GlyphMetrics.Direction.hashValue.getter()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

uint64_t GlyphMetrics.glyphID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GlyphMetrics.glyphID.modify())()
{
  return nullsub_1;
}

uint64_t GlyphMetrics.direction.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t GlyphMetrics.direction.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result & 1;
  return result;
}

uint64_t (*GlyphMetrics.direction.modify())()
{
  return nullsub_1;
}

void GlyphMetrics.advance.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*GlyphMetrics.advance.modify())()
{
  return nullsub_1;
}

double GlyphMetrics.sideBearing.getter(double a1, double a2)
{
  return a2;
}

void GlyphMetrics.sideBearing.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*GlyphMetrics.sideBearing.modify())()
{
  return nullsub_1;
}

uint64_t GlyphMetrics.hash(into:)()
{
  sub_1B0A1DB34();
  sub_1B0A1DB34();
  sub_1B0A1DB64();
  return sub_1B0A1DB64();
}

uint64_t static GlyphMetrics.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  unsigned int v8;

  v8 = (a1 == a3) & (((a2 & 1) == 0) ^ a4);
  if (a5 != a7)
    v8 = 0;
  if (a6 == a8)
    return v8;
  else
    return 0;
}

uint64_t GlyphMetrics.hashValue.getter()
{
  sub_1B0A1DB28();
  GlyphMetrics.hash(into:)();
  return sub_1B0A1DB70();
}

uint64_t sub_1B0935228()
{
  sub_1B0A1DB28();
  GlyphMetrics.hash(into:)();
  return sub_1B0A1DB70();
}

uint64_t sub_1B0935290()
{
  return GlyphMetrics.hash(into:)();
}

uint64_t sub_1B09352A0()
{
  sub_1B0A1DB28();
  GlyphMetrics.hash(into:)();
  return sub_1B0A1DB70();
}

BOOL sub_1B0935304(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
    && *(double *)(a1 + 16) == *(double *)(a2 + 16))
  {
    return *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return result;
}

uint64_t static FontError.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t FontError.hash(into:)()
{
  return sub_1B0A1DB34();
}

uint64_t FontError.hashValue.getter()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

uint64_t sub_1B09353BC()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

uint64_t sub_1B09353FC()
{
  return sub_1B0A1DB34();
}

uint64_t sub_1B0935420()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

BOOL _s10FontParser0A4InfoV26RegistryOrderingSupplementV23__derived_struct_equalsySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  char v8;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_1B0A1DA8C(), result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3])
      return a1[4] == a2[4];
    v8 = sub_1B0A1DA8C();
    result = 0;
    if ((v8 & 1) != 0)
      return a1[4] == a2[4];
  }
  return result;
}

uint64_t _s10FontParser0A8MetadataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && *(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40)
    && (sub_1B093337C(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48)) & 1) != 0
    && (sub_1B093337C(*(_QWORD **)(a1 + 56), *(_QWORD **)(a2 + 56)) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(_QWORD *)(a2 + 64);
    v8 = v5;
    v9 = v4;
    sub_1B08AE258((uint64_t)&v9);
    sub_1B08AE258((uint64_t)&v8);
    v6 = sub_1B0934A9C(v4, v5);
    sub_1B08AE280((uint64_t)&v8);
    sub_1B08AE280((uint64_t)&v9);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_1B09355D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E65637361 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6563736564 && a2 == 0xE700000000000000 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E696461656CLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B0A1DA8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B093571C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBB50);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0933738();
  sub_1B0A1DB7C();
  v8[15] = 0;
  v6 = sub_1B0A1D9FC();
  v8[14] = 1;
  sub_1B0A1D9FC();
  v8[13] = 2;
  sub_1B0A1D9FC();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

unint64_t sub_1B0935894()
{
  unint64_t result;

  result = qword_1EEEBBA08;
  if (!qword_1EEEBBA08)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39F7C, &type metadata for FontInfo.Windows.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA08);
  }
  return result;
}

uint64_t sub_1B09358D8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E65637361 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6563736564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B0A1DA8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B09359C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBB48);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_1B0935894();
  sub_1B0A1DB7C();
  if (!v1)
  {
    v9[15] = 0;
    v7 = sub_1B0A1D9FC();
    v9[14] = 1;
    sub_1B0A1D9FC();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

unint64_t sub_1B0935B10()
{
  unint64_t result;

  result = qword_1EEEBBA18;
  if (!qword_1EEEBBA18)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39F2C, &type metadata for FontInfo.Strikeout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA18);
  }
  return result;
}

unint64_t sub_1B0935B54()
{
  unint64_t result;

  result = qword_1EEEBBA20;
  if (!qword_1EEEBBA20)
  {
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA20);
  }
  return result;
}

uint64_t sub_1B0935B98(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B0A1DA8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_1B0935C78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  uint64_t v8;
  double v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBB38);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0935B10();
  sub_1B0A1DB7C();
  HIBYTE(v8) = 0;
  sub_1B0937D5C();
  sub_1B0A1DA08();
  v6 = v9;
  HIBYTE(v8) = 1;
  sub_1B0A1DA08();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

unint64_t sub_1B0935E00()
{
  unint64_t result;

  result = qword_1EEEBBA30;
  if (!qword_1EEEBBA30)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39EDC, &type metadata for FontInfo.RegistryOrderingSupplement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA30);
  }
  return result;
}

uint64_t sub_1B0935E44(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7972747369676572 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E69726564726FLL && a2 == 0xE800000000000000 || (sub_1B0A1DA8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D656C70707573 && a2 == 0xEA0000000000746ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B0A1DA8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B0935FA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBB30);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B0935E00();
  sub_1B0A1DB7C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = 0;
  v9 = sub_1B0A1D9F0();
  v11 = v10;
  v21 = v9;
  v23 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1B0A1D9F0();
  v14 = v13;
  v19 = v12;
  v22 = 2;
  swift_bridgeObjectRetain();
  v20 = v14;
  v15 = sub_1B0A1D9FC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = v20;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v21;
  a2[1] = v11;
  a2[2] = v19;
  a2[3] = v16;
  a2[4] = v15;
  return result;
}

uint64_t sub_1B09361C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B093620C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAD00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0936254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAD00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B093629C()
{
  unint64_t result;

  result = qword_1EEEBBA40;
  if (!qword_1EEEBBA40)
  {
    result = MEMORY[0x1B5E0D530]("UCw5 V\a", &type metadata for FontMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA40);
  }
  return result;
}

unint64_t sub_1B09362E0()
{
  unint64_t result;

  result = qword_1EEEBBA48;
  if (!qword_1EEEBBA48)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontMetadata.Flags, &type metadata for FontMetadata.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA48);
  }
  return result;
}

uint64_t sub_1B0936324()
{
  unint64_t v0;

  v0 = sub_1B0A1D9E4();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

uint64_t sub_1B093636C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;

  v28 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBB18);
  v4 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B08F7810(MEMORY[0x1E0DEE9D8]);
  v8 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B093629C();
  swift_bridgeObjectRetain();
  v9 = v6;
  sub_1B0A1DB7C();
  if (v2)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v4;
    v12 = v28;
    v11 = v29;
    LOBYTE(v30) = 0;
    v13 = v9;
    v14 = sub_1B0A1D9FC();
    LOBYTE(v30) = 1;
    v15 = (uint64_t)v8;
    v16 = sub_1B0A1D9FC();
    LOBYTE(v30) = 2;
    v27 = sub_1B0A1D9FC();
    LOBYTE(v30) = 3;
    v26 = sub_1B0A1D9FC();
    LOBYTE(v30) = 4;
    v25 = sub_1B0A1D9FC();
    v32 = 5;
    sub_1B0937CB8();
    sub_1B0A1DA08();
    v31 = (unsigned __int16)v30;
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA788);
    v32 = 6;
    v23 = sub_1B0937CFC(&qword_1EEEBBB28, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1B0A1DA08();
    v32 = 7;
    v22 = v30;
    swift_bridgeObjectRetain();
    sub_1B0A1DA08();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v11);
    v17 = v30;
    v18 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v12 = v14;
    *(_QWORD *)(v12 + 8) = v16;
    v20 = v26;
    *(_QWORD *)(v12 + 16) = v27;
    *(_QWORD *)(v12 + 24) = v20;
    *(_QWORD *)(v12 + 32) = v25;
    *(_WORD *)(v12 + 40) = v31;
    *(_QWORD *)(v12 + 48) = v18;
    *(_QWORD *)(v12 + 56) = v17;
    *(_QWORD *)(v12 + 64) = v7;
  }
  return result;
}

unint64_t sub_1B09366E8()
{
  unint64_t result;

  result = qword_1EEEBBA58;
  if (!qword_1EEEBBA58)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontDataResidence, &type metadata for FontDataResidence);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA58);
  }
  return result;
}

unint64_t sub_1B0936730()
{
  unint64_t result;

  result = qword_1EEEBBA60;
  if (!qword_1EEEBBA60)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontEncodingType, &type metadata for FontEncodingType);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA60);
  }
  return result;
}

unint64_t sub_1B0936778()
{
  unint64_t result;

  result = qword_1EEEBBA68;
  if (!qword_1EEEBBA68)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontMetadata.Flags, &type metadata for FontMetadata.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA68);
  }
  return result;
}

unint64_t sub_1B09367C0()
{
  unint64_t result;

  result = qword_1EEEBBA70;
  if (!qword_1EEEBBA70)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontMetadata.Flags, &type metadata for FontMetadata.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA70);
  }
  return result;
}

unint64_t sub_1B0936808()
{
  unint64_t result;

  result = qword_1EEEBBA78;
  if (!qword_1EEEBBA78)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontMetadata.Flags, &type metadata for FontMetadata.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA78);
  }
  return result;
}

unint64_t sub_1B0936850()
{
  unint64_t result;

  result = qword_1EEEBBA80;
  if (!qword_1EEEBBA80)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontMetadata.Flags, &type metadata for FontMetadata.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA80);
  }
  return result;
}

unint64_t sub_1B0936898()
{
  unint64_t result;

  result = qword_1EEEBBA88;
  if (!qword_1EEEBBA88)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphMetrics.Direction, &type metadata for GlyphMetrics.Direction);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA88);
  }
  return result;
}

unint64_t sub_1B09368E0()
{
  unint64_t result;

  result = qword_1EEEBBA90;
  if (!qword_1EEEBBA90)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphMetrics, &type metadata for GlyphMetrics);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA90);
  }
  return result;
}

unint64_t sub_1B0936928()
{
  unint64_t result;

  result = qword_1EEEBBA98;
  if (!qword_1EEEBBA98)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontError, &type metadata for FontError);
    atomic_store(result, (unint64_t *)&qword_1EEEBBA98);
  }
  return result;
}

ValueMetadata *type metadata accessor for FontDataResidence()
{
  return &type metadata for FontDataResidence;
}

ValueMetadata *type metadata accessor for FontEncodingType()
{
  return &type metadata for FontEncodingType;
}

uint64_t destroy for FontInfo(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 208);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FontInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v6 = *(_QWORD *)(a2 + 208);
  if (v6)
  {
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v6;
    v7 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = v7;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v8;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  }
  v9 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v9;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  v10 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v10;
  v11 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v11;
  v12 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v12;
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  return a1;
}

uint64_t assignWithCopy for FontInfo(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = (_BYTE *)(a2 + 288);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v6;
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 136);
  v10 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  v11 = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v11;
  v12 = a1 + 200;
  v13 = (__int128 *)(a2 + 200);
  v14 = *(_QWORD *)(a2 + 208);
  if (*(_QWORD *)(a1 + 208))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    }
    else
    {
      sub_1B08CCF8C(a1 + 200);
      v15 = *((_QWORD *)v13 + 4);
      v16 = v13[1];
      *(_OWORD *)v12 = *v13;
      *(_OWORD *)(v12 + 16) = v16;
      *(_QWORD *)(v12 + 32) = v15;
    }
  }
  else if (v14)
  {
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *v13;
    v18 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)v12 = v17;
    *(_OWORD *)(a1 + 216) = v18;
  }
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *v4;
  v19 = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v19;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = v4[88];
  return a1;
}

void *__swift_memcpy377_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x179uLL);
}

uint64_t assignWithTake for FontInfo(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = (_BYTE *)(a2 + 288);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v7 = a1 + 200;
  v8 = a2 + 200;
  if (!*(_QWORD *)(a1 + 208))
    goto LABEL_5;
  v9 = *(_QWORD *)(a2 + 208);
  if (!v9)
  {
    sub_1B08CCF8C(v7);
LABEL_5:
    v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
LABEL_6:
  v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *v4;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  v13 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = v4[88];
  return a1;
}

uint64_t getEnumTagSinglePayload for FontInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 377))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 208);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FontInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 376) = 0;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 377) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 377) = 0;
    if (a2)
      *(_QWORD *)(result + 208) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FontInfo()
{
  return &type metadata for FontInfo;
}

ValueMetadata *type metadata accessor for FontInfo.Typo()
{
  return &type metadata for FontInfo.Typo;
}

ValueMetadata *type metadata accessor for FontInfo.Windows()
{
  return &type metadata for FontInfo.Windows;
}

ValueMetadata *type metadata accessor for FontInfo.Strikeout()
{
  return &type metadata for FontInfo.Strikeout;
}

uint64_t destroy for FontInfo.RegistryOrderingSupplement()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FontInfo.RegistryOrderingSupplement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FontInfo.RegistryOrderingSupplement(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for FontInfo.RegistryOrderingSupplement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for FontInfo.RegistryOrderingSupplement(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FontInfo.RegistryOrderingSupplement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FontInfo.RegistryOrderingSupplement()
{
  return &type metadata for FontInfo.RegistryOrderingSupplement;
}

uint64_t destroy for FontMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FontMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FontMetadata(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FontMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FontMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FontMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FontMetadata()
{
  return &type metadata for FontMetadata;
}

ValueMetadata *type metadata accessor for FontMetadata.Flags()
{
  return &type metadata for FontMetadata.Flags;
}

uint64_t getEnumTagSinglePayload for GlyphMetrics(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GlyphMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GlyphMetrics()
{
  return &type metadata for GlyphMetrics;
}

ValueMetadata *type metadata accessor for GlyphMetrics.Direction()
{
  return &type metadata for GlyphMetrics.Direction;
}

uint64_t getEnumTagSinglePayload for FontError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for FontError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B0937510 + 4 * byte_1B0A392CB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B0937530 + 4 * byte_1B0A392D0[v4]))();
}

_BYTE *sub_1B0937510(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B0937530(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0937538(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0937540(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0937548(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0937550(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FontError()
{
  return &type metadata for FontError;
}

uint64_t getEnumTagSinglePayload for FontMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FontMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B0937648 + 4 * byte_1B0A392DA[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B093767C + 4 * byte_1B0A392D5[v4]))();
}

uint64_t sub_1B093767C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0937684(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B093768CLL);
  return result;
}

uint64_t sub_1B0937698(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B09376A0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B09376A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B09376AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontMetadata.CodingKeys()
{
  return &type metadata for FontMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for FontInfo.RegistryOrderingSupplement.CodingKeys()
{
  return &type metadata for FontInfo.RegistryOrderingSupplement.CodingKeys;
}

ValueMetadata *type metadata accessor for FontInfo.Strikeout.CodingKeys()
{
  return &type metadata for FontInfo.Strikeout.CodingKeys;
}

uint64_t _s10FontParser16FontEncodingTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B0937734 + 4 * byte_1B0A392E4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0937768 + 4 * byte_1B0A392DF[v4]))();
}

uint64_t sub_1B0937768(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0937770(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0937778);
  return result;
}

uint64_t sub_1B0937784(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B093778CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0937790(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0937798(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontInfo.Windows.CodingKeys()
{
  return &type metadata for FontInfo.Windows.CodingKeys;
}

uint64_t _s10FontParser17FontDataResidenceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0937800 + 4 * byte_1B0A392EE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0937834 + 4 * byte_1B0A392E9[v4]))();
}

uint64_t sub_1B0937834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B093783C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0937844);
  return result;
}

uint64_t sub_1B0937850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0937858);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B093785C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0937864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontInfo.Typo.CodingKeys()
{
  return &type metadata for FontInfo.Typo.CodingKeys;
}

unint64_t sub_1B0937884()
{
  unint64_t result;

  result = qword_1EEEBBAA0;
  if (!qword_1EEEBBAA0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39B4C, &type metadata for FontInfo.Typo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAA0);
  }
  return result;
}

unint64_t sub_1B09378CC()
{
  unint64_t result;

  result = qword_1EEEBBAA8;
  if (!qword_1EEEBBAA8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39C04, &type metadata for FontInfo.Windows.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAA8);
  }
  return result;
}

unint64_t sub_1B0937914()
{
  unint64_t result;

  result = qword_1EEEBBAB0;
  if (!qword_1EEEBBAB0)
  {
    result = MEMORY[0x1B5E0D530]("}Cw58X\a", &type metadata for FontInfo.Strikeout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAB0);
  }
  return result;
}

unint64_t sub_1B093795C()
{
  unint64_t result;

  result = qword_1EEEBBAB8;
  if (!qword_1EEEBBAB8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39D74, &type metadata for FontInfo.RegistryOrderingSupplement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAB8);
  }
  return result;
}

unint64_t sub_1B09379A4()
{
  unint64_t result;

  result = qword_1EEEBBAC0;
  if (!qword_1EEEBBAC0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39E64, &type metadata for FontMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAC0);
  }
  return result;
}

unint64_t sub_1B09379EC()
{
  unint64_t result;

  result = qword_1EEEBBAC8;
  if (!qword_1EEEBBAC8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39D9C, &type metadata for FontMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAC8);
  }
  return result;
}

unint64_t sub_1B0937A34()
{
  unint64_t result;

  result = qword_1EEEBBAD0;
  if (!qword_1EEEBBAD0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39DC4, &type metadata for FontMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAD0);
  }
  return result;
}

unint64_t sub_1B0937A7C()
{
  unint64_t result;

  result = qword_1EEEBBAD8;
  if (!qword_1EEEBBAD8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39CE4, &type metadata for FontInfo.RegistryOrderingSupplement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAD8);
  }
  return result;
}

unint64_t sub_1B0937AC4()
{
  unint64_t result;

  result = qword_1EEEBBAE0;
  if (!qword_1EEEBBAE0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39D0C, &type metadata for FontInfo.RegistryOrderingSupplement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAE0);
  }
  return result;
}

unint64_t sub_1B0937B0C()
{
  unint64_t result;

  result = qword_1EEEBBAE8;
  if (!qword_1EEEBBAE8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39C2C, &type metadata for FontInfo.Strikeout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAE8);
  }
  return result;
}

unint64_t sub_1B0937B54()
{
  unint64_t result;

  result = qword_1EEEBBAF0;
  if (!qword_1EEEBBAF0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39C54, &type metadata for FontInfo.Strikeout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAF0);
  }
  return result;
}

unint64_t sub_1B0937B9C()
{
  unint64_t result;

  result = qword_1EEEBBAF8;
  if (!qword_1EEEBBAF8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39B74, &type metadata for FontInfo.Windows.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBAF8);
  }
  return result;
}

unint64_t sub_1B0937BE4()
{
  unint64_t result;

  result = qword_1EEEBBB00;
  if (!qword_1EEEBBB00)
  {
    result = MEMORY[0x1B5E0D530]("5Fw5|Y\a", &type metadata for FontInfo.Windows.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBB00);
  }
  return result;
}

unint64_t sub_1B0937C2C()
{
  unint64_t result;

  result = qword_1EEEBBB08;
  if (!qword_1EEEBBB08)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39ABC, &type metadata for FontInfo.Typo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBB08);
  }
  return result;
}

unint64_t sub_1B0937C74()
{
  unint64_t result;

  result = qword_1EEEBBB10;
  if (!qword_1EEEBBB10)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A39AE4, &type metadata for FontInfo.Typo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEEBBB10);
  }
  return result;
}

unint64_t sub_1B0937CB8()
{
  unint64_t result;

  result = qword_1EEEBBB20;
  if (!qword_1EEEBBB20)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for FontMetadata.Flags, &type metadata for FontMetadata.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBB20);
  }
  return result;
}

uint64_t sub_1B0937CFC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEBA788);
    v8 = a2;
    result = MEMORY[0x1B5E0D530](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B0937D5C()
{
  unint64_t result;

  result = qword_1EEEBBB40;
  if (!qword_1EEEBBB40)
  {
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EEEBBB40);
  }
  return result;
}

uint64_t initializeWithCopy for UTF16Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for UTF16Iterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for UTF16Iterator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTF16Iterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UTF16Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UTF16Iterator()
{
  return &type metadata for UTF16Iterator;
}

ValueMetadata *type metadata accessor for UTF16Sequence()
{
  return &type metadata for UTF16Sequence;
}

unint64_t sub_1B0937F50()
{
  unint64_t result;

  result = qword_1EEEBBB58;
  if (!qword_1EEEBBB58)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3A0B8, &type metadata for UTF16Iterator);
    atomic_store(result, (unint64_t *)&qword_1EEEBBB58);
  }
  return result;
}

uint64_t sub_1B0937F94()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_1B0938300(*v0, v0[1], v0[2], v0[3]);
  swift_release();
  return v1;
}

_QWORD *sub_1B0937FCC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1B0939758(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

void sub_1B0937FD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v2 + v1;
  if (__OFADD__(v2, v1))
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v3 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v4 = v0[4];
  if (v4 >= v2 && v4 < v3)
  {
    if (!__OFSUB__(v4, v2))
    {
      v6 = v0[1];
      v7 = *(_WORD *)(v6 + 2 * (v4 - v2));
      v8 = v4 + 1;
      v10 = v4 + 1;
      if ((v7 & 0xFC00) == 0xDC00)
        return;
      if ((v7 & 0xFC00) != 0xD800)
      {
LABEL_14:
        v0[4] = v8;
        return;
      }
      v9 = sub_1B0939B44((uint64_t)&v10, v6, v1, v2);
      if ((v9 & 0xFF00000000) != 0x100000000)
        return;
      if ((v9 | ((v7 & 0x3FF) << 10)) < 0xFFFF0000)
      {
        v8 = v10;
        goto LABEL_14;
      }
LABEL_19:
      __break(1u);
      return;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
}

void sub_1B09380B0(uint64_t a1@<X8>)
{
  int v2;
  char v3;

  sub_1B0937FD8();
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = v3 & 1;
}

uint64_t sub_1B09380DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a4 + a3;
  if (__OFADD__(a4, a3))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v4 < a4)
    goto LABEL_35;
  result = swift_retain();
  v8 = 0;
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9D8] + 32;
  v28 = v4;
  v11 = a4;
  v29 = a2;
  while (v11 < v4)
  {
    if (__OFSUB__(v11, a4))
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v12 = *(unsigned __int16 *)(a2 + 2 * (v11 - a4));
    v13 = v11 + 1;
    if ((v12 & 0xFC00) == 0xD800)
    {
      if (v13 >= v4)
        break;
      if (__OFSUB__(v13, a4))
        goto LABEL_32;
      v14 = *(_WORD *)(a2 + 2 * (v13 - a4));
      if ((v14 & 0xFC00) != 0xDC00)
        break;
      v13 = v11 + 2;
      v12 = (v14 & 0x3FF | ((v12 & 0x3FF) << 10)) + 0x10000;
      if (v8)
        goto LABEL_24;
LABEL_14:
      v15 = *((_QWORD *)v9 + 3);
      if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_33;
      v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
      if (v16 <= 1)
        v17 = 1;
      else
        v17 = v16;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBB60);
      v18 = (char *)swift_allocObject();
      v19 = (uint64_t)(_swift_stdlib_malloc_size(v18) - 32) / 24;
      *((_QWORD *)v18 + 2) = v17;
      *((_QWORD *)v18 + 3) = 2 * v19;
      v20 = v18 + 32;
      v21 = *((_QWORD *)v9 + 3) >> 1;
      v22 = 24 * v21;
      if (*((_QWORD *)v9 + 2))
      {
        v23 = v9 + 32;
        if (v18 != v9 || v20 >= &v23[v22])
          memmove(v18 + 32, v23, 24 * v21);
        *((_QWORD *)v9 + 2) = 0;
      }
      v10 = (uint64_t)&v20[v22];
      v8 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
      result = swift_release();
      v9 = v18;
      v4 = v28;
      a2 = v29;
      goto LABEL_24;
    }
    if ((v12 & 0xFC00) == 0xDC00)
      break;
    if (!v8)
      goto LABEL_14;
LABEL_24:
    v24 = __OFSUB__(v8--, 1);
    if (v24)
      goto LABEL_31;
    *(_QWORD *)v10 = v11;
    *(_QWORD *)(v10 + 8) = v13;
    *(_DWORD *)(v10 + 16) = v12;
    v10 += 24;
    v11 = v13;
    if (v13 < a4)
      break;
  }
  result = swift_release();
  v25 = *((_QWORD *)v9 + 3);
  if (v25 >= 2)
  {
    v26 = v25 >> 1;
    v24 = __OFSUB__(v26, v8);
    v27 = v26 - v8;
    if (v24)
      goto LABEL_36;
    *((_QWORD *)v9 + 2) = v27;
  }
  return (uint64_t)v9;
}

uint64_t sub_1B0938300(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int16 v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a4 + a3;
  if (__OFADD__(a4, a3))
    goto LABEL_41;
  if (v4 < a4)
  {
LABEL_42:
    __break(1u);
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v4 > a4)
    {
      result = swift_retain();
      v8 = 0;
      v9 = 0;
      v10 = (int *)(v6 + 4);
      v11 = a4;
      v30 = a2;
      while (1)
      {
        v12 = *(unsigned __int16 *)(a2 + 2 * v8);
        v13 = v11 + 1;
        if ((v12 & 0xFC00) != 0xD800)
          break;
        if (v13 < a4 || v13 >= v4)
          goto LABEL_33;
        v14 = __OFSUB__(v13, a4);
        v15 = v13 - a4;
        if (v14)
          goto LABEL_39;
        v16 = *(_WORD *)(a2 + 2 * v15);
        if ((v16 & 0xFC00) != 0xDC00)
        {
LABEL_33:
          result = swift_release();
          goto LABEL_34;
        }
        v11 += 2;
        v12 = (v16 & 0x3FF | ((v12 & 0x3FF) << 10)) + 0x10000;
        if (!v9)
          goto LABEL_14;
LABEL_26:
        v14 = __OFSUB__(v9--, 1);
        if (v14)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        *v10 = v12;
        if (v11 < a4 || v11 >= v4)
          goto LABEL_33;
        ++v10;
        v8 = v11 - a4;
        if (__OFSUB__(v11, a4))
        {
          __break(1u);
          goto LABEL_32;
        }
      }
      if ((v12 & 0xFC00) == 0xDC00)
        goto LABEL_33;
      ++v11;
      if (v9)
        goto LABEL_26;
LABEL_14:
      v17 = v6[3];
      if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_40;
      v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
      if (v18 <= 1)
        v19 = 1;
      else
        v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA808);
      v20 = (_QWORD *)swift_allocObject();
      v21 = _swift_stdlib_malloc_size(v20);
      v22 = v21 - 32;
      if (v21 < 32)
        v22 = v21 - 29;
      v23 = v22 >> 2;
      v20[2] = v19;
      v20[3] = 2 * (v22 >> 2);
      v24 = (unint64_t)(v20 + 4);
      v25 = v6[3] >> 1;
      if (v6[2])
      {
        v26 = v6 + 4;
        if (v20 != v6 || v24 >= (unint64_t)v26 + 4 * v25)
          memmove(v20 + 4, v26, 4 * v25);
        v6[2] = 0;
      }
      v10 = (int *)(v24 + 4 * v25);
      v9 = (v23 & 0x7FFFFFFFFFFFFFFFLL) - v25;
      result = swift_release();
      v6 = v20;
      a2 = v30;
      goto LABEL_26;
    }
LABEL_32:
    v9 = 0;
LABEL_34:
    v27 = v6[3];
    if (v27 < 2)
      return (uint64_t)v6;
    v28 = v27 >> 1;
    v14 = __OFSUB__(v28, v9);
    v29 = v28 - v9;
    if (!v14)
    {
      v6[2] = v29;
      return (uint64_t)v6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B093851C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  signed __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[9];

  v4 = v3[5];
  v43[4] = v3[4];
  v43[5] = v4;
  v5 = v3[7];
  v43[6] = v3[6];
  v43[7] = v5;
  v6 = v3[1];
  v43[0] = *v3;
  v43[1] = v6;
  v7 = v3[3];
  v43[2] = v3[2];
  v43[3] = v7;
  if (!a2)
  {
    v8 = 0;
LABEL_25:
    v32 = v3[5];
    *(_OWORD *)(a1 + 64) = v3[4];
    *(_OWORD *)(a1 + 80) = v32;
    v33 = v3[7];
    *(_OWORD *)(a1 + 96) = v3[6];
    *(_OWORD *)(a1 + 112) = v33;
    v34 = v3[1];
    *(_OWORD *)a1 = *v3;
    *(_OWORD *)(a1 + 16) = v34;
    v35 = v3[3];
    *(_OWORD *)(a1 + 32) = v3[2];
    *(_OWORD *)(a1 + 48) = v35;
    *(_QWORD *)(a1 + 128) = v8;
    return v8;
  }
  v8 = a3;
  if (!a3)
  {
    v3 = v43;
    goto LABEL_25;
  }
  v9 = *((_QWORD *)v3 + 1);
  v39 = *((_QWORD *)v3 + 2);
  v10 = v39 - v9;
  v11 = __OFSUB__(v39, v9);
  if (v10 >= 0)
    v12 = v39 - v9;
  else
    v12 = v10 + 1;
  if (a3 < 0)
  {
    __break(1u);
  }
  else if (!v11)
  {
    if ((unint64_t)(v10 + 1) >= 3)
    {
      v13 = a2;
      v14 = 0;
      v37 = a1;
      v38 = v12 >> 1;
      v15 = 1;
      while (1)
      {
        v40 = sub_1B0A1D084();
        v41 = v16;
        v42 = v17;
        swift_bridgeObjectRetain();
        v19 = (unsigned __int16)sub_1B08C15A4(&v40, v18, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v40 = sub_1B0A1D084();
        v41 = v20;
        v42 = v21;
        swift_bridgeObjectRetain();
        v23 = (unsigned __int16)sub_1B08C15A4(&v40, v22, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v40 = sub_1B0A1D084();
        v41 = v24;
        v42 = v25;
        swift_bridgeObjectRetain();
        LOWORD(v27) = (unsigned __int16)sub_1B08C15A4(&v40, v26, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((unsigned __int16)v27 <= v23)
          v27 = v23;
        else
          v27 = (unsigned __int16)v27;
        v40 = sub_1B0A1D084();
        v41 = v28;
        v42 = v29;
        swift_bridgeObjectRetain();
        v31 = (unsigned __int16)sub_1B08C15A4(&v40, v30, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v13 = v14;
        *(_DWORD *)(v13 + 8) = v23;
        *(_DWORD *)(v13 + 12) = v27;
        *(_DWORD *)(v13 + 16) = v19;
        *(_QWORD *)(v13 + 24) = v31;
        if (v15 == v8)
          goto LABEL_23;
        if (++v14 == v38)
          break;
        ++v15;
        v13 += 32;
        if (v14 == 0x4000000000000000)
        {
          __break(1u);
LABEL_23:
          v3 = v43;
          a1 = v37;
          goto LABEL_25;
        }
      }
      v3 = v43;
      a1 = v37;
      v8 = v38;
    }
    else
    {
      v8 = 0;
      v3 = v43;
    }
    goto LABEL_25;
  }
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B0938870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;

  v4 = *((_QWORD *)v3 + 2);
  v20 = *(__int128 *)((char *)v3 + 24);
  v21 = *v3;
  if (!a2)
  {
LABEL_11:
    v5 = 0;
    goto LABEL_15;
  }
  v5 = a3;
  if (!a3)
  {
LABEL_15:
    *(_OWORD *)a1 = v21;
    *(_QWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 40) = v5;
    return v5;
  }
  v24 = *(__int128 *)((char *)v3 + 8);
  if ((a3 & 0x8000000000000000) == 0)
  {
    if ((_QWORD)v21)
    {
      v6 = a2;
      v18 = v4;
      v19 = a1;
      v7 = 0;
      v8 = 1;
      while (1)
      {
        v22 = v24;
        sub_1B08ECA58((uint64_t)&v24);
        sub_1B08A35F4();
        v9 = sub_1B0A1D090();
        if (__OFADD__((_QWORD)v20, v7))
          break;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v22 = sub_1B0A1D078();
        *((_QWORD *)&v22 + 1) = v10;
        v23 = v11;
        swift_bridgeObjectRetain_n();
        v13 = sub_1B08C75E0((uint64_t *)&v22, v12, 3, 1);
        v15 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v22, v14, 1);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        a1 = swift_bridgeObjectRelease();
        *(_DWORD *)v6 = v13;
        *(_WORD *)(v6 + 4) = v15;
        if (v5 == v8)
          goto LABEL_14;
        if ((_QWORD)v21 == v8)
        {
          v5 = v21;
LABEL_14:
          v4 = v18;
          a1 = v19;
          goto LABEL_15;
        }
        v7 = 5 * v8;
        v6 += 8;
        ++v8;
        v4 = 0x199999999999999BLL;
        if (v8 == 0x199999999999999BLL)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      sub_1B08A36F0();
      swift_allocError();
      *v17 = 2;
      v17[1] = v9;
      v17[2] = 0xD00000000000001DLL;
      v17[3] = 0x80000001B0A26020;
      v17[4] = 0;
      swift_willThrow();
      goto LABEL_18;
    }
    v5 = 0;
    goto LABEL_15;
  }
  __break(1u);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_18:
  swift_bridgeObjectRelease();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B0938B0C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t result;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;

  v5 = *((_QWORD *)v3 + 2);
  v24 = *(__int128 *)((char *)v3 + 24);
  v25 = *v3;
  if (!a2)
  {
LABEL_12:
    a3 = 0;
    goto LABEL_16;
  }
  if (!a3)
  {
LABEL_16:
    *(_OWORD *)a1 = v25;
    *(_QWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = v24;
    *(_QWORD *)(a1 + 40) = a3;
    return a3;
  }
  v30 = *(__int128 *)((char *)v3 + 8);
  if ((a3 & 0x8000000000000000) == 0)
  {
    if ((_QWORD)v25)
    {
      v6 = a2;
      v22 = v5;
      v23 = a1;
      v7 = 0;
      v21 = a3;
      v8 = a3 - 1;
      v9 = 1;
      while (1)
      {
        v28 = v30;
        sub_1B08ECA58((uint64_t)&v30);
        sub_1B08A35F4();
        v4 = sub_1B0A1D090();
        if (__OFADD__((_QWORD)v24, v7))
          goto LABEL_18;
        swift_bridgeObjectRetain_n();
        *(_QWORD *)&v28 = sub_1B0A1D078();
        *((_QWORD *)&v28 + 1) = v10;
        v29 = v11;
        swift_bridgeObjectRetain();
        v13 = sub_1B08C75E0((uint64_t *)&v28, v12, 3, 1);
        v26 = v28;
        v27 = v29;
        swift_bridgeObjectRetain();
        v15 = sub_1B08C9FC0((unint64_t *)&v26, v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (__CFADD__(v13, v15))
        {
          sub_1B08A38A0();
          v18 = (void *)swift_allocError();
          swift_willThrow();
          sub_1B08A36F0();
          swift_allocError();
          *v19 = v18;
          v19[1] = v4;
          v19[2] = 0x7272652072657355;
          v19[3] = 0xEA0000000000726FLL;
          v19[4] = v18;
          v20 = v18;
          swift_willThrow();
          swift_bridgeObjectRelease_n();
          goto LABEL_20;
        }
        a1 = swift_bridgeObjectRelease_n();
        *v6 = v13;
        v6[1] = v13 + v15;
        if (!v8)
        {
          v5 = v22;
          a1 = v23;
          a3 = v21;
          goto LABEL_16;
        }
        if ((_QWORD)v25 == v9)
        {
          a3 = v25;
          v5 = v22;
          a1 = v23;
          goto LABEL_16;
        }
        ++v9;
        --v8;
        v7 += 4;
        v6 += 2;
        if (v7 == 0x8000000000000000)
        {
          __break(1u);
          goto LABEL_12;
        }
      }
    }
    a3 = 0;
    goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  sub_1B08A36F0();
  swift_allocError();
  *v17 = 2;
  v17[1] = v4;
  v17[2] = 0xD00000000000001DLL;
  v17[3] = 0x80000001B0A26020;
  v17[4] = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
LABEL_20:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B0938E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;

  v34 = *(_QWORD *)(v3 + 8);
  v35 = *(_QWORD *)v3;
  v25 = *(_OWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 32);
  v27 = *(_QWORD *)(v3 + 40);
  if (!a2)
  {
LABEL_11:
    result = 0;
LABEL_16:
    *(_QWORD *)a1 = v35;
    *(_QWORD *)(a1 + 8) = v34;
    *(_OWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v27;
    *(_QWORD *)(a1 + 48) = result;
    return result;
  }
  if (!a3)
  {
    result = 0;
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    result = *(_QWORD *)(v3 + 40);
    if (v27)
    {
      v4 = v3;
      v9 = a2;
      v23 = *(_QWORD *)(v3 + 32);
      v24 = a1;
      v10 = 0;
      v11 = 1;
      while (1)
      {
        *(_QWORD *)&v38 = v35;
        *((_QWORD *)&v38 + 1) = v34;
        sub_1B08A35B0(v35, v34);
        sub_1B08A35B0(v35, v34);
        sub_1B08ECA58(v4);
        sub_1B08A35F4();
        v3 = sub_1B0A1D090();
        if (__OFADD__((_QWORD)v25, v10))
          goto LABEL_18;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v38 = sub_1B0A1D078();
        *((_QWORD *)&v38 + 1) = v12;
        v39 = v13;
        swift_bridgeObjectRetain_n();
        v32 = sub_1B08C75E0((uint64_t *)&v38, v14, 3, 1);
        v33 = v11;
        v36 = v38;
        v37 = v39;
        swift_bridgeObjectRetain();
        v16 = sub_1B08C1578((uint64_t *)&v36, v15, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v38 = v36;
        v39 = v37;
        swift_bridgeObjectRetain();
        v18 = sub_1B08C1578((uint64_t *)&v38, v17, 1);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v19 = v18;
        v4 = v26;
        sub_1B08ECA58(v26);
        sub_1B0964A84(v40, v35, v34, v16);
        v30 = v40[1];
        v31 = v40[0];
        v20 = v41;
        sub_1B0964A84(v42, v35, v34, v19);
        v28 = v42[1];
        v29 = v42[0];
        v21 = v43;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B092CDFC(v26);
        swift_bridgeObjectRelease();
        *(_DWORD *)v9 = v32;
        *(_OWORD *)(v9 + 8) = v31;
        *(_OWORD *)(v9 + 24) = v30;
        *(_QWORD *)(v9 + 40) = v20;
        *(_OWORD *)(v9 + 48) = v29;
        *(_OWORD *)(v9 + 64) = v28;
        *(_QWORD *)(v9 + 80) = v21;
        if (a3 == v11)
          break;
        if (v27 == v11)
        {
          result = v27;
          goto LABEL_15;
        }
        v10 = 11 * v11;
        a1 = v11 + 1;
        v9 += 88;
        ++v11;
        if (v33 == 0xBA2E8BA2E8BA2E9)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      result = a3;
LABEL_15:
      v6 = v23;
      a1 = v24;
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  sub_1B092CDFC(v4);
  sub_1B08A36F0();
  swift_allocError();
  *v22 = 2;
  v22[1] = v3;
  v22[2] = 0xD00000000000001DLL;
  v22[3] = 0x80000001B0A26020;
  v22[4] = 0;
  swift_willThrow();
  sub_1B092CDFC(v26);
  swift_bridgeObjectRelease();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B09392A4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t result;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  id v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;

  v5 = *(_QWORD *)v3;
  v6 = *(_WORD *)(v3 + 8);
  v37 = *(_QWORD *)(v3 + 16);
  v7 = *(_OWORD *)(v3 + 24);
  v9 = *(_OWORD *)(v3 + 40);
  v8 = (__int128 *)(v3 + 40);
  v35 = v9;
  v36 = v7;
  if (!a2)
  {
LABEL_12:
    result = 0;
    goto LABEL_17;
  }
  v10 = a3;
  if (!a3)
  {
    result = 0;
    goto LABEL_17;
  }
  v43 = *v8;
  if ((a3 & 0x8000000000000000) == 0)
  {
    result = v37;
    if (v37)
    {
      v12 = a2;
      v32 = v6;
      v33 = v5;
      v34 = a1;
      v13 = 0;
      v14 = 1;
      while (1)
      {
        v41 = v43;
        sub_1B08ECA58((uint64_t)&v43);
        sub_1B08A35F4();
        v15 = sub_1B0A1D090();
        if (__OFADD__((_QWORD)v36, v13))
        {
          sub_1B08A36F0();
          swift_allocError();
          *v28 = 2;
          v28[1] = v15;
          v28[2] = 0xD00000000000001DLL;
          v28[3] = 0x80000001B0A26020;
          v28[4] = 0;
          swift_willThrow();
          goto LABEL_22;
        }
        swift_bridgeObjectRetain();
        v38 = sub_1B0A1D078();
        *(_QWORD *)&v41 = v38;
        *((_QWORD *)&v41 + 1) = v16;
        v42 = v17;
        v39 = v16;
        v40 = v17;
        swift_bridgeObjectRetain_n();
        v19 = sub_1B08C1578(&v38, v18, 1);
        v20 = v10;
        v22 = sub_1B08C1578(&v38, v21, 1);
        swift_bridgeObjectRelease();
        v23 = v38;
        v24 = v40;
        if (v22 < v19)
          break;
        v25 = v39;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v41 = v23;
        *((_QWORD *)&v41 + 1) = v25;
        v42 = v24;
        v27 = sub_1B08C1578((uint64_t *)&v41, v26, 1);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *v12 = v19;
        v12[1] = v22;
        v12[2] = v27;
        v10 = v20;
        if (v20 == v14)
        {
          result = v20;
LABEL_16:
          v5 = v33;
          a1 = v34;
          v6 = v32;
          goto LABEL_17;
        }
        if (v37 == v14)
        {
          result = v37;
          goto LABEL_16;
        }
        v5 = v14 + 1;
        v13 = 12 * v14;
        v12 += 3;
        v14 = v5;
        a1 = 0xAAAAAAAAAAAAAACLL;
        if (v5 == 0xAAAAAAAAAAAAAACLL)
        {
          __break(1u);
          goto LABEL_12;
        }
      }
      sub_1B08A38E4();
      v29 = (void *)swift_allocError();
      swift_willThrow();
      sub_1B08A36F0();
      swift_allocError();
      *v30 = v29;
      v30[1] = v23;
      v30[2] = 0x7272652072657355;
      v30[3] = 0xEA0000000000726FLL;
      v30[4] = v29;
      v31 = v29;
      swift_willThrow();
      goto LABEL_21;
    }
LABEL_17:
    *(_QWORD *)a1 = v5;
    *(_WORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v37;
    *(_OWORD *)(a1 + 24) = v36;
    *(_OWORD *)(a1 + 40) = v35;
    *(_QWORD *)(a1 + 56) = result;
    return result;
  }
  __break(1u);
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_22:
  swift_bridgeObjectRelease();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

_QWORD *sub_1B0939658(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int16 v14;

  if (!a2)
  {
LABEL_20:
    v8 = 0;
    v11 = a7;
LABEL_24:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = a7;
    result[4] = v11;
    return (_QWORD *)v8;
  }
  if (!a3)
  {
    v11 = a7;
LABEL_22:
    v8 = a3;
    goto LABEL_24;
  }
  v7 = a7 + a6;
  if (!__OFADD__(a7, a6))
  {
    if (a3 < 0 || v7 < a7)
      goto LABEL_28;
    if (v7 > a7)
    {
      v8 = 0;
      v9 = a7;
      while (!__OFSUB__(v9, a7))
      {
        v10 = *(unsigned __int16 *)(a5 + 2 * (v9 - a7));
        v11 = v9 + 1;
        if ((v10 & 0xFC00) == 0xD800)
        {
          if (v11 >= v7)
            goto LABEL_23;
          v12 = __OFSUB__(v11, a7);
          v13 = v11 - a7;
          if (v12)
            goto LABEL_26;
          v14 = *(_WORD *)(a5 + 2 * v13);
          if ((v14 & 0xFC00) != 0xDC00)
          {
LABEL_23:
            v11 = v9;
            goto LABEL_24;
          }
          v11 = v9 + 2;
          v10 = (v14 & 0x3FF | ((v10 & 0x3FF) << 10)) + 0x10000;
        }
        else if ((v10 & 0xFC00) == 0xDC00)
        {
          goto LABEL_23;
        }
        *(_QWORD *)a2 = v9;
        *(_QWORD *)(a2 + 8) = v11;
        *(_DWORD *)(a2 + 16) = v10;
        if (a3 - 1 == v8)
          goto LABEL_22;
        ++v8;
        if (v11 >= a7)
        {
          a2 += 24;
          v9 = v11;
          if (v11 < v7)
            continue;
        }
        goto LABEL_24;
      }
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    goto LABEL_20;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_1B0939758(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int16 v16;

  if (!a2)
  {
LABEL_25:
    v9 = 0;
    v11 = a7;
LABEL_28:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = a7;
    result[4] = v11;
    return (_QWORD *)v9;
  }
  if (!a3)
  {
    v11 = a7;
LABEL_27:
    v9 = a3;
    goto LABEL_28;
  }
  v7 = a7 + a6;
  v8 = __OFADD__(a7, a6);
  if (a3 < 1)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v8)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v7 >= a7)
  {
    if (v7 > a7)
    {
      v9 = 0;
      v10 = 0;
      v11 = a7;
      while (1)
      {
        v12 = *(unsigned __int16 *)(a5 + 2 * v10);
        v13 = v11 + 1;
        if ((v12 & 0xFC00) == 0xD800)
        {
          if (v13 < a7 || v13 >= v7)
            goto LABEL_28;
          v14 = __OFSUB__(v13, a7);
          v15 = v13 - a7;
          if (v14)
          {
            __break(1u);
            goto LABEL_31;
          }
          v16 = *(_WORD *)(a5 + 2 * v15);
          if ((v16 & 0xFC00) != 0xDC00)
            goto LABEL_28;
          v11 += 2;
          v12 = (v16 & 0x3FF | ((v12 & 0x3FF) << 10)) + 0x10000;
        }
        else
        {
          if ((v12 & 0xFC00) == 0xDC00)
            goto LABEL_28;
          ++v11;
        }
        *(_DWORD *)(a2 + 4 * v9) = v12;
        if (a3 - 1 == v9)
          goto LABEL_27;
        if (v11 < a7 || v11 >= v7)
        {
          ++v9;
          goto LABEL_28;
        }
        ++v9;
        v10 = v11 - a7;
        if (__OFSUB__(v11, a7))
        {
          __break(1u);
          goto LABEL_25;
        }
      }
    }
    goto LABEL_25;
  }
LABEL_33:
  __break(1u);
  return result;
}

_QWORD *sub_1B0939860(_QWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_DWORD *)(*(_QWORD *)(a4 + 48) + 4 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1B09399F4(uint64_t result, _WORD *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _WORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  int16x8_t v14;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t v17;
  _WORD *v18;
  unsigned __int16 v19;

  v4 = HIWORD(a4);
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    LOWORD(v5) = a4;
LABEL_7:
    *(_DWORD *)result = a4;
    *(_WORD *)(result + 4) = v5;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if ((unsigned __int16)a4 == HIWORD(a4))
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (v4 < (unsigned __int16)a4)
    goto LABEL_32;
  if ((unsigned __int16)a4 < HIWORD(a4))
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = (unsigned __int16)(~(_WORD)a4 + HIWORD(a4));
    if (a3 - 2 < v7)
      v7 = a3 - 2;
    if (v7 < v6)
      v6 = v7;
    if (v6 > 0xF)
    {
      v10 = v6 + 1;
      v11 = v10 & 0xF;
      if ((v10 & 0xF) == 0)
        v11 = 16;
      v12 = v10 - v11;
      v8 = v10 - v11 + 1;
      v13 = v5 + v12;
      v9 = &a2[v12];
      v14 = vaddq_s16(vdupq_n_s16(v5), (int16x8_t)xmmword_1B0A3A020);
      v15 = (int16x8_t *)(a2 + 9);
      v16.i64[0] = 0x8000800080008;
      v16.i64[1] = 0x8000800080008;
      v17.i64[0] = 0x10001000100010;
      v17.i64[1] = 0x10001000100010;
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s16(v14, v16);
        v14 = vaddq_s16(v14, v17);
        v15 += 2;
        v12 -= 16;
      }
      while (v12);
      LOWORD(v5) = v13;
    }
    else
    {
      v8 = 1;
      v9 = a2;
    }
    v18 = v9 + 1;
    v19 = v5;
    while (a3 != v8)
    {
      if (v4 == v19)
      {
        v5 = HIWORD(a4);
        a3 = (unsigned __int16)(~(_WORD)a4 + HIWORD(a4)) + 1;
        goto LABEL_7;
      }
      if (v19 >= HIWORD(a4))
        goto LABEL_30;
      ++v8;
      LOWORD(v5) = v19 + 1;
      *v18++ = v19++;
      if (a3 == v8)
        goto LABEL_7;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B0939B44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a4 + a3;
  if (__OFADD__(a4, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v4 < a4)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result < a4 || v5 >= v4)
    return 0xFF00000000;
  if (__OFSUB__(v5, a4))
    goto LABEL_16;
  v7 = *(unsigned __int16 *)(a2 + 2 * (v5 - a4));
  *(_QWORD *)result = v5 + 1;
  if ((v7 & 0xFC00) == 0xDC00)
    return v7 & 0x3FF | 0x100000000;
  if ((v7 & 0xFC00) == 0xD800)
    return v7 & 0x3FF;
  return v7 | 0x200000000;
}

uint64_t destroy for PSInterpreter()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PSInterpreter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PSInterpreter(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v4 = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 112) = v4;
  v5 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 120) = v5;
  v6 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 128) = v6;
  return a1;
}

__n128 __swift_memcpy135_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 127) = *(_QWORD *)(a2 + 127);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for PSInterpreter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  return a1;
}

uint64_t getEnumTagSinglePayload for PSInterpreter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 135))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PSInterpreter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 134) = 0;
    *(_WORD *)(result + 132) = 0;
    *(_DWORD *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 135) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 135) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PSInterpreter()
{
  return &type metadata for PSInterpreter;
}

_QWORD *initializeBufferWithCopyOfBuffer for BufferedExecutionContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BufferedExecutionContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for BufferedExecutionContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for BufferedExecutionContext(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BufferedExecutionContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1B093A208(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1B093A220(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for BufferedExecutionContext()
{
  return &type metadata for BufferedExecutionContext;
}

uint64_t type metadata accessor for ReferenceArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReferenceArray);
}

uint64_t type metadata accessor for ReferenceArray.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReferenceArray.Key);
}

uint64_t sub_1B093A268()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *v0;
  if (!*(_QWORD *)(*v0 + 16))
    return 0xFF000000000000;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 16);
    if (v3)
    {
LABEL_4:
      v4 = v3 - 1;
      v5 = v1 + 8 * v4;
      v6 = *(unsigned int *)(v5 + 32) | ((unint64_t)*(unsigned __int16 *)(v5 + 36) << 32);
      v7 = *(unsigned __int8 *)(v5 + 38);
      *(_QWORD *)(v1 + 16) = v4;
      *v0 = v1;
      return v6 | (v7 << 48);
    }
  }
  else
  {
    result = (uint64_t)sub_1B0953A70(v1);
    v1 = result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
      goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B093A2E4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char **v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  _OWORD v44[5];
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];

  v3 = v2;
  v6 = (char **)(v3 + 88);
  v7 = *(char **)(v3 + 88);
  v8 = *((_QWORD *)v7 + 2);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_59:
    v7 = sub_1B08B64CC(0, v8 + 1, 1, v7);
  v10 = *((_QWORD *)v7 + 2);
  v9 = *((_QWORD *)v7 + 3);
  if (v10 >= v9 >> 1)
    v7 = sub_1B08B64CC((char *)(v9 > 1), v10 + 1, 1, v7);
  *((_QWORD *)v7 + 2) = v10 + 1;
  v11 = &v7[16 * v10];
  *((_QWORD *)v11 + 4) = a1;
  *((_QWORD *)v11 + 5) = a2;
  *v6 = v7;
  v12 = *((_QWORD *)v7 + 2);
  if (v8 >= v12)
    return 0;
  while (1)
  {
    v13 = &v7[16 * v12 - 16];
    a2 = *((_QWORD *)v13 + 4);
    if (a2)
    {
      a1 = *((_QWORD *)v13 + 5);
      v14 = *(_QWORD *)(a2 + 16);
      if (a1 == v14)
      {
        v15 = 0xFF000000000000;
      }
      else
      {
        if (a1 >= v14)
          goto LABEL_55;
        v19 = a2 + 8 * a1++;
        v15 = *(unsigned int *)(v19 + 32) | ((unint64_t)*(unsigned __int16 *)(v19 + 36) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 38) << 48);
      }
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_1B0953AD4((uint64_t)v7);
      if (v12 > *((_QWORD *)v7 + 2))
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      v20 = &v7[16 * v12 + 16];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = a1;
      swift_bridgeObjectRelease();
      *v6 = v7;
      v21 = HIWORD(v15);
      if (HIWORD(v15) > 0xFEu)
      {
        v22 = *((_QWORD *)v7 + 2);
        if (!v22)
          goto LABEL_56;
        v18 = v22 - 1;
LABEL_6:
        *((_QWORD *)v7 + 2) = v18;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    else
    {
      a2 = v3;
      v16 = sub_1B093BF08();
      if ((~v16 & 0xFF000000000000) == 0)
      {
        v7 = *v6;
        if (!*((_QWORD *)*v6 + 2))
          goto LABEL_57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v17 = *((_QWORD *)v7 + 2);
          if (!v17)
            goto LABEL_58;
        }
        else
        {
          v7 = sub_1B0953AD4((uint64_t)v7);
          v17 = *((_QWORD *)v7 + 2);
          if (!v17)
            goto LABEL_58;
        }
        v18 = v17 - 1;
        goto LABEL_6;
      }
      v15 = v16 & 0xFFFFFFFFFFFFFFLL;
      v21 = BYTE6(v16);
    }
    result = sub_1B093A914((char **)(v15 & 0xFFFFFFFFFFFFLL | (v21 << 48)));
    v26 = result;
    if (!v25)
      break;
    if (v25 != 1)
    {
      v7 = *v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_1B08B64CC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      a1 = *((_QWORD *)v7 + 2);
      v39 = *((_QWORD *)v7 + 3);
      if (a1 >= v39 >> 1)
        v7 = sub_1B08B64CC((char *)(v39 > 1), a1 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = a1 + 1;
      v40 = &v7[16 * a1];
      *((_QWORD *)v40 + 4) = v26;
      *((_QWORD *)v40 + 5) = 0;
      goto LABEL_7;
    }
    v27 = v24;
    v28 = *(_OWORD *)(v3 + 112);
    v46 = *(_OWORD *)(v3 + 96);
    v47[0] = v28;
    *(_QWORD *)((char *)v47 + 15) = *(_QWORD *)(v3 + 127);
    v29 = *(_OWORD *)(v3 + 48);
    v44[2] = *(_OWORD *)(v3 + 32);
    v44[3] = v29;
    v30 = *(_OWORD *)(v3 + 80);
    v44[4] = *(_OWORD *)(v3 + 64);
    v45 = v30;
    v31 = *(_OWORD *)(v3 + 16);
    v44[0] = *(_OWORD *)v3;
    v44[1] = v31;
    v7 = (char *)*((_QWORD *)&v45 + 1);
    v32 = LODWORD(v47[0]) | ((unint64_t)WORD2(v47[0]) << 32);
    v33 = BYTE6(v47[0]);
    sub_1B08CF028((uint64_t)v44);
    v34 = sub_1B0969370(v32 | (v33 << 48));
    sub_1B08D70F4((uint64_t)v44);
    if ((v34 & 0xFF000000000000) != 0x8000000000000)
    {
      sub_1B093D7F4(v26, v27, 1);
LABEL_43:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_1B08B64CC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      a1 = *((_QWORD *)v7 + 2);
      v41 = *((_QWORD *)v7 + 3);
      if (a1 >= v41 >> 1)
        v7 = sub_1B08B64CC((char *)(v41 > 1), a1 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = a1 + 1;
      v42 = &v7[16 * a1];
      *((_QWORD *)v42 + 4) = &unk_1E6191B00;
      *((_QWORD *)v42 + 5) = 0;
      goto LABEL_7;
    }
    sub_1B08CF028((uint64_t)v44);
    v35 = sub_1B0969764(v26, v27, v34);
    sub_1B093D7F4(v26, v27, 1);
    sub_1B08D70F4((uint64_t)v44);
    if ((~v35 & 0xFF000000000000) == 0)
      goto LABEL_43;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8A0);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1B0A363D0;
    *(_WORD *)(v36 + 36) = WORD2(v35);
    *(_DWORD *)(v36 + 32) = v35;
    *(_BYTE *)(v36 + 38) = BYTE6(v35);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_1B08B64CC(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    a1 = *((_QWORD *)v7 + 2);
    v37 = *((_QWORD *)v7 + 3);
    if (a1 >= v37 >> 1)
      v7 = sub_1B08B64CC((char *)(v37 > 1), a1 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = a1 + 1;
    v38 = &v7[16 * a1];
    *((_QWORD *)v38 + 4) = v36;
    *((_QWORD *)v38 + 5) = 0;
LABEL_7:
    *v6 = v7;
LABEL_8:
    v12 = *((_QWORD *)v7 + 2);
    if (v8 >= v12)
      return 0;
  }
  v7 = *v6;
  if (!(_BYTE)result)
    goto LABEL_8;
  v43 = *((_QWORD *)v7 + 2);
  if (v43 >= v8)
  {
    sub_1B0901D00(v8, v43);
    return v26;
  }
  __break(1u);
  return result;
}

unint64_t sub_1B093A7AC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 72);
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1B08A35B0(a1, a2);
    v7 = sub_1B08F9E80(a1, a2);
    if ((v8 & 1) != 0)
    {
      v9 = *(unsigned int *)(*(_QWORD *)(v6 + 56) + 4 * v7);
      goto LABEL_10;
    }
    sub_1B08A3638(a1, a2);
  }
  v10 = *(char **)(v3 + 56);
  v9 = *((_QWORD *)v10 + 2);
  if (HIDWORD(v9))
  {
    __break(1u);
    goto LABEL_12;
  }
  sub_1B08A35B0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_12:
    v10 = sub_1B08B6378(0, v9 + 1, 1, v10);
  v12 = *((_QWORD *)v10 + 2);
  v11 = *((_QWORD *)v10 + 3);
  if (v12 >= v11 >> 1)
    v10 = sub_1B08B6378((char *)(v11 > 1), v12 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v12 + 1;
  v13 = &v10[16 * v12];
  *((_QWORD *)v13 + 4) = a1;
  *((_QWORD *)v13 + 5) = a2;
  *(_QWORD *)(v3 + 56) = v10;
  sub_1B08A35B0(a1, a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 72) = 0x8000000000000000;
  sub_1B0900980(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 72) = v16;
  swift_bridgeObjectRelease();
LABEL_10:
  sub_1B08A3638(a1, a2);
  return v9;
}

uint64_t sub_1B093A914(char **a1)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;

  v2 = v1;
  v3 = a1;
  v4 = (unint64_t)a1 >> 48;
  v5 = *(unsigned __int8 *)(v2 + 126);
  v6 = (unint64_t)a1 & 0xFFFFFFFFFFFFFFLL;
  v7 = sub_1B08F6C24((unint64_t)a1 & 0xFFFFFFFFFFFFFFLL);
  v8 = *(_QWORD *)(v2 + 104);
  if ((v7 & 1) != 0)
  {
    if (!v8)
    {
      result = 0;
      *(_QWORD *)(v2 + 104) = 1;
      *(_QWORD *)(v2 + 96) = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
      return result;
    }
    if (!__OFADD__(v8, 1))
    {
      *(_QWORD *)(v2 + 104) = v8 + 1;
LABEL_27:
      v20 = *(char **)(v2 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v20 = sub_1B08B64C0(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
      v22 = *((_QWORD *)v20 + 2);
      v21 = *((_QWORD *)v20 + 3);
      if (v22 >= v21 >> 1)
        v20 = sub_1B08B64C0((char *)(v21 > 1), v22 + 1, 1, v20);
      result = 0;
      *((_QWORD *)v20 + 2) = v22 + 1;
      v23 = &v20[8 * v22];
      *((_DWORD *)v23 + 8) = (_DWORD)v3;
      *((_WORD *)v23 + 18) = WORD2(v3);
      v23[38] = v4;
      *(_QWORD *)(v2 + 8) = v20;
      return result;
    }
    __break(1u);
    goto LABEL_33;
  }
  if (v8 < 1)
    __asm { BR              X10 }
  if ((sub_1B08F6C24(v6) & 1) == 0)
    goto LABEL_27;
  *(_QWORD *)(v2 + 104) = v8 - 1;
  if (v8 != 1)
    goto LABEL_27;
  v3 = (char **)(v2 + 8);
  v8 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 96);
  v5 = *(_QWORD *)(v8 + 16);
  if (v5 < (uint64_t)v6)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRelease();
    sub_1B08E8008(v8, v8 + 32, v6, (2 * v5) | 1);
    v11 = v24;
    goto LABEL_15;
  }
  sub_1B0A1DA98();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  swift_release();
  if (v10 != v5 - v6)
    goto LABEL_35;
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
LABEL_15:
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v8 + 16);
  if (v12 < v6)
  {
    __break(1u);
    goto LABEL_37;
  }
  sub_1B0901BF4(v6, v12);
  v6 = *(_QWORD *)(v2 + 32);
  v5 = *(_QWORD *)(v6 + 16);
  if (HIDWORD(v5))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_38:
    v6 = (unint64_t)sub_1B08B6484(0, v5 + 1, 1, (_QWORD *)v6);
  v14 = *(_QWORD *)(v6 + 16);
  v13 = *(_QWORD *)(v6 + 24);
  if (v14 >= v13 >> 1)
    v6 = (unint64_t)sub_1B08B6484((_QWORD *)(v13 > 1), v14 + 1, 1, (_QWORD *)v6);
  *(_QWORD *)(v6 + 16) = v14 + 1;
  *(_QWORD *)(v6 + 8 * v14 + 32) = v11;
  swift_release();
  *(_QWORD *)(v2 + 32) = v6;
  v15 = *(char **)(v2 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v15 = sub_1B08B64C0(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
  v17 = *((_QWORD *)v15 + 2);
  v16 = *((_QWORD *)v15 + 3);
  if (v17 >= v16 >> 1)
    v15 = sub_1B08B64C0((char *)(v16 > 1), v17 + 1, 1, v15);
  result = 0;
  *((_QWORD *)v15 + 2) = v17 + 1;
  v19 = &v15[8 * v17];
  *((_DWORD *)v19 + 8) = v5;
  *((_WORD *)v19 + 18) = (v5 | 0x700000000uLL) >> 32;
  v19[38] = 7;
  *v3 = v15;
  return result;
}

double sub_1B093AEE0()
{
  double result;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[23];

  sub_1B093C100((unint64_t)&v1);
  xmmword_1EEEC70E8 = v7;
  unk_1EEEC70F8 = *(_OWORD *)v8;
  unk_1EEEC7107 = *(_QWORD *)&v8[15];
  xmmword_1EEEC70A8 = v3;
  unk_1EEEC70B8 = v4;
  xmmword_1EEEC70C8 = v5;
  unk_1EEEC70D8 = v6;
  result = *(double *)&v2;
  xmmword_1EEEC7088 = v1;
  unk_1EEEC7098 = v2;
  return result;
}

void sub_1B093AF40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = sub_1B0A1D294();
  MEMORY[0x1E0C80A78](v4);
  __asm { BR              X10 }
}

uint64_t sub_1B093AFC4()
{
  unint64_t v0;
  uint64_t v1;
  unsigned int v2;

  sub_1B08A35B0(v1, v0);
  v2 = sub_1B093A7AC(v1, v0);
  sub_1B08D73CC(v1, v0, 1);
  return v2 | 0x4000000000000;
}

unint64_t sub_1B093B2B0(char a1, long double a2)
{
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;

  v9 = 0;
  switch(a1)
  {
    case 1:
      return sub_1B090F8F0();
    case 2:
      v3 = *(char **)(v2 + 8);
      v11 = *((_QWORD *)v3 + 2);
      if (v11 < 2)
        return 0x646E756B63617473;
      v12 = 8 * v11;
      v6 = v12 - 16;
      v13 = &v3[v12 + 16];
      v5 = v13[6];
      v7 = v12 - 8;
      v14 = &v3[v12 + 24];
      v8 = *(unsigned int *)v14 | ((unint64_t)*((unsigned __int16 *)v14 + 2) << 32);
      LOBYTE(v4) = v14[6];
      v71 = *(unsigned int *)v13 | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_6;
      goto LABEL_148;
    case 3:
      v3 = *(char **)(v2 + 8);
      if (!*((_QWORD *)v3 + 2))
        return 0x646E756B63617473;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v17 = *((_QWORD *)v3 + 2);
        if (v17)
        {
LABEL_10:
          v9 = 0;
          *((_QWORD *)v3 + 2) = v17 - 1;
          *(_QWORD *)(v2 + 8) = v3;
          return v9;
        }
      }
      else
      {
        v3 = sub_1B0953A70((uint64_t)v3);
        v17 = *((_QWORD *)v3 + 2);
        if (v17)
          goto LABEL_10;
      }
      __break(1u);
      goto LABEL_144;
    case 4:
      return sub_1B091400C();
    case 5:
      return sub_1B0911514();
    case 6:
      v18 = *(char **)(v2 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_1B08B64C0(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
      v20 = *((_QWORD *)v18 + 2);
      v19 = *((_QWORD *)v18 + 3);
      v21 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        v67 = sub_1B08B64C0((char *)(v19 > 1), v20 + 1, 1, v18);
        v21 = v20 + 1;
        v18 = v67;
      }
      v9 = 0;
      *((_QWORD *)v18 + 2) = v21;
      v22 = &v18[8 * v20];
      *((_WORD *)v22 + 18) = 0;
      *((_DWORD *)v22 + 8) = 1;
      v23 = 10;
      goto LABEL_107;
    case 7:
      swift_bridgeObjectRelease();
      v9 = 0;
      *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DEE9D8];
      return v9;
    case 8:
      v18 = *(char **)(v2 + 8);
      v4 = *((_QWORD *)v18 + 2);
      if (v4 >> 31)
        return 0x65766F6B63617473;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_122;
      goto LABEL_151;
    case 9:
      return sub_1B090E390();
    case 10:
      v9 = 0x65686374616D6E75;
      v24 = *(_QWORD *)(v2 + 8);
      v25 = *(_QWORD *)(v24 + 16);
      if (!v25)
        return v9;
      v26 = 1 - v25;
      v27 = v24 + 8 * v25 + 30;
      v28 = (unsigned __int8 *)v27;
      while (1)
      {
        v29 = *v28;
        v28 -= 8;
        if (v29 >= 0xA)
        {
          if (*(unsigned int *)(v27 - 6) | ((unint64_t)*(unsigned __int16 *)(v27 - 2) << 32))
            break;
        }
        ++v26;
        v27 = (uint64_t)v28;
        if (v26 == 1)
          return v9;
      }
      sub_1B0901BF4(-v26, v25);
      return 0;
    case 11:
      return sub_1B090CFD0();
    case 13:
      return sub_1B0912AC0();
    case 14:
      return sub_1B090F724();
    case 15:
      return sub_1B091136C();
    case 16:
      return sub_1B091292C();
    case 17:
      return sub_1B090D440();
    case 18:
      return sub_1B0912D44();
    case 19:
      return sub_1B090DDF4();
    case 20:
      return sub_1B0910650();
    case 21:
      return sub_1B0914260();
    case 22:
      return sub_1B09148B4();
    case 23:
      sub_1B091441C(a2);
      return v10;
    case 24:
      return sub_1B0910464();
    case 25:
      sub_1B0911B24(a2);
      return v10;
    case 26:
      sub_1B0912210(a2);
      return v10;
    case 27:
      sub_1B0911E6C(v2, a2);
      return v10;
    case 28:
      sub_1B0911CB8(v2, a2);
      return v10;
    case 30:
      v30 = *(_DWORD *)v2 & 0x7FFFFFFF;
      *(_DWORD *)v2 = 1103515245 * *(_DWORD *)v2 + 12345;
      goto LABEL_47;
    case 32:
      v30 = *(_DWORD *)v2;
LABEL_47:
      v18 = *(char **)(v2 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_1B08B64C0(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
      v32 = *((_QWORD *)v18 + 2);
      v31 = *((_QWORD *)v18 + 3);
      v33 = v32 + 1;
      if (v32 >= v31 >> 1)
      {
        v66 = sub_1B08B64C0((char *)(v31 > 1), v32 + 1, 1, v18);
        v33 = v32 + 1;
        v18 = v66;
      }
      v9 = 0;
      *((_QWORD *)v18 + 2) = v33;
      v22 = &v18[8 * v32];
      *((_WORD *)v22 + 18) = 0;
      *((_DWORD *)v22 + 8) = v30;
      goto LABEL_52;
    case 33:
      return sub_1B090E590();
    case 34:
      return sub_1B090EB54();
    case 35:
      return sub_1B090F02C();
    case 36:
      return sub_1B0910088();
    case 37:
      return sub_1B091250C();
    case 38:
    case 39:
    case 40:
    case 41:
      swift_getKeyPath();
      v9 = sub_1B0910D2C();
      swift_release();
      return v9;
    case 42:
      return sub_1B090D258();
    case 43:
      return sub_1B09130C4();
    case 44:
      return sub_1B0914E64();
    case 45:
      return sub_1B0912F3C();
    case 46:
      return sub_1B090DC2C();
    case 47:
      if (*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) < 2uLL)
        return 0x646E756B63617473;
      v34 = sub_1B093A268();
      if ((~v34 & 0xFF000000000000) == 0)
      {
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
        JUMPOUT(0x1B093BD78);
      }
      v35 = v34;
      v36 = sub_1B093A268();
      if ((v36 & 0xFF000000000000) == 0)
      {
        if ((v36 & 1) == 0)
          return 0;
        v42 = v35 & 0xFFFFFFFFFFFFFFLL;
        return sub_1B093A914(v42);
      }
      if ((v36 & 0xFF000000000000) != 0xFF000000000000)
        return 0x6365686365707974;
      __break(1u);
LABEL_68:
      v9 = *(_QWORD *)(v2 + 8);
      if (!*(_QWORD *)(v9 + 16))
        return 0x646E756B63617473;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v37 = *(_QWORD *)(v9 + 16);
        if (v37)
        {
LABEL_71:
          v38 = v37 - 1;
          v39 = v9 + 8 * v38;
          v40 = *(unsigned int *)(v39 + 32) | ((unint64_t)*(unsigned __int16 *)(v39 + 36) << 32);
          v41 = *(unsigned __int8 *)(v39 + 38);
          *(_QWORD *)(v9 + 16) = v38;
          *(_QWORD *)(v2 + 8) = v9;
          v42 = v40 | (v41 << 48);
          return sub_1B093A914(v42);
        }
      }
      else
      {
LABEL_144:
        v9 = (uint64_t)sub_1B0953A70(v9);
        v37 = *(_QWORD *)(v9 + 16);
        if (v37)
          goto LABEL_71;
      }
      __break(1u);
LABEL_146:
      v9 = (uint64_t)sub_1B0953A70(v9);
      v43 = *(_QWORD *)(v9 + 16);
      if (!v43)
      {
LABEL_147:
        __break(1u);
LABEL_148:
        v3 = sub_1B0953A70((uint64_t)v3);
LABEL_6:
        v9 = 0;
        v15 = &v3[v6 + 32];
        *((_WORD *)v15 + 2) = WORD2(v8);
        *(_DWORD *)v15 = v8;
        v15[6] = v4;
        v16 = &v3[v7 + 32];
        *((_WORD *)v16 + 2) = WORD2(v71);
        *(_DWORD *)v16 = v71;
        v16[6] = v5;
        *(_QWORD *)(v2 + 8) = v3;
        return v9;
      }
LABEL_86:
      v44 = v9 + 8 * (v43 - 1);
      v45 = *(_DWORD *)(v44 + 32);
      LODWORD(v44) = *(unsigned __int8 *)(v44 + 38);
      *(_QWORD *)(v9 + 16) = v43 - 1;
      *(_QWORD *)(v2 + 8) = v9;
      if ((_DWORD)v44 == 8)
      {
        v46 = v45;
        v47 = *(char **)(v2 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v47 = sub_1B08B6478(0, *((_QWORD *)v47 + 2) + 1, 1, v47);
        v49 = *((_QWORD *)v47 + 2);
        v48 = *((_QWORD *)v47 + 3);
        v50 = v49 + 1;
        if (v49 >= v48 >> 1)
        {
          v70 = sub_1B08B6478((char *)(v48 > 1), v49 + 1, 1, v47);
          v50 = v49 + 1;
          v47 = v70;
        }
        v9 = 0;
        *((_QWORD *)v47 + 2) = v50;
        *(_DWORD *)&v47[4 * v49 + 32] = v46;
        *(_QWORD *)(v2 + 16) = v47;
        return v9;
      }
      return 0x6365686365707974;
    case 48:
      if (*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16) < 3uLL)
        return 0x646E756B63617473;
      v59 = sub_1B093A268();
      if ((~v59 & 0xFF000000000000) == 0)
        goto LABEL_153;
      v60 = v59;
      v61 = sub_1B093A268();
      if ((~v61 & 0xFF000000000000) == 0)
        goto LABEL_154;
      v62 = v61;
      v63 = sub_1B093A268();
      if ((v63 & 0xFF000000000000) == 0)
      {
        if ((v63 & 1) != 0)
          v64 = v62;
        else
          v64 = v60;
        v42 = v64 & 0xFFFFFFFFFFFFFFLL;
        return sub_1B093A914(v42);
      }
      if ((v63 & 0xFF000000000000) != 0xFF000000000000)
        return 0x6365686365707974;
      goto LABEL_155;
    case 49:
      goto LABEL_68;
    case 50:
      return sub_1B09107F4();
    case 51:
      return sub_1B0913E54();
    case 52:
      return sub_1B09123A4();
    case 54:
      return 1;
    case 55:
      return 2;
    case 59:
      return sub_1B0910ED0();
    case 60:
      return sub_1B09132AC();
    case 61:
      return sub_1B0911870();
    case 64:
      return sub_1B090D648();
    case 66:
      return sub_1B090F520();
    case 67:
      return sub_1B09146B0();
    case 70:
      return sub_1B090E0E4();
    case 73:
      return sub_1B090D894();
    case 74:
      return sub_1B091268C();
    case 75:
      v9 = *(_QWORD *)(v2 + 8);
      if (!*(_QWORD *)(v9 + 16))
        return 0x646E756B63617473;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_146;
      v43 = *(_QWORD *)(v9 + 16);
      if (v43)
        goto LABEL_86;
      goto LABEL_147;
    case 76:
      return sub_1B090E4C8();
    case 77:
      v18 = *(char **)(v2 + 16);
      if (*((_QWORD *)v18 + 2) < 3uLL)
        return 0xD000000000000012;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v51 = *((_QWORD *)v18 + 2);
        if (v51)
        {
LABEL_96:
          v9 = 0;
          *((_QWORD *)v18 + 2) = v51 - 1;
          *(_QWORD *)(v2 + 16) = v18;
          return v9;
        }
      }
      else
      {
        v18 = sub_1B0953AAC((uint64_t)v18);
        v51 = *((_QWORD *)v18 + 2);
        if (v51)
          goto LABEL_96;
      }
      __break(1u);
LABEL_151:
      v18 = sub_1B08B64C0(0, v4 + 1, 1, v18);
LABEL_122:
      v57 = *((_QWORD *)v18 + 2);
      v56 = *((_QWORD *)v18 + 3);
      v58 = v57 + 1;
      if (v57 >= v56 >> 1)
      {
        v69 = sub_1B08B64C0((char *)(v56 > 1), v57 + 1, 1, v18);
        v58 = v57 + 1;
        v18 = v69;
      }
      v9 = 0;
      *((_QWORD *)v18 + 2) = v58;
      v22 = &v18[8 * v57];
      *((_DWORD *)v22 + 8) = v4;
      *((_WORD *)v22 + 18) = WORD2(v4);
LABEL_52:
      v23 = 1;
LABEL_107:
      v22[38] = v23;
      *(_QWORD *)(v2 + 8) = v18;
      return v9;
    case 78:
      return sub_1B090F1D8();
    case 79:
      return sub_1B09145B0();
    case 80:
      return sub_1B0912020();
    case 81:
      return sub_1B0914BF0();
    case 85:
      return sub_1B091169C();
    case 86:
      return sub_1B09127C8();
    case 87:
      return sub_1B0914A58();
    case 92:
      v52 = *(_DWORD *)(v2 + 4);
      v18 = *(char **)(v2 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_1B08B64C0(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
      v54 = *((_QWORD *)v18 + 2);
      v53 = *((_QWORD *)v18 + 3);
      v55 = v54 + 1;
      if (v54 >= v53 >> 1)
      {
        v68 = sub_1B08B64C0((char *)(v53 > 1), v54 + 1, 1, v18);
        v55 = v54 + 1;
        v18 = v68;
      }
      v9 = 0;
      *((_QWORD *)v18 + 2) = v55;
      v22 = &v18[8 * v54];
      *((_WORD *)v22 + 18) = 0;
      *((_DWORD *)v22 + 8) = v52;
      v23 = 6;
      goto LABEL_107;
    case 93:
      return sub_1B090DF98();
    case 94:
      return sub_1B091374C();
    case 95:
      return sub_1B090F9E0();
    case 96:
    case 97:
    case 98:
      return v9;
    case 99:
      return sub_1B090F37C();
    case 100:
      return sub_1B09135D8();
    default:
      return 0x656E696665646E75;
  }
}

uint64_t sub_1B093BF08()
{
  uint64_t v0;
  void (*v1)(_BYTE *, _QWORD);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[32];

  v1 = (void (*)(_BYTE *, _QWORD))sub_1B08A471C((uint64_t)v14, *(unsigned int *)(v0 + 4));
  v3 = *(_QWORD *)(v2 + 24);
  v4 = (char *)__swift_mutable_project_boxed_opaque_existential_1(v2, v3);
  v6 = sub_1B0926934(v4, v3);
  v8 = v7;
  v10 = v9;
  v1(v14, 0);
  v11 = 0xFF000000000000;
  if (v10 != -1)
  {
    sub_1B093AF40(v6, v8, v10);
    if ((~v12 & 0xFF000000000000) != 0)
    {
      v13 = v12;
      sub_1B08D73B8(v6, v8, v10);
      v11 = v13;
    }
    else
    {
      v11 = sub_1B093BF08();
      sub_1B08D73B8(v6, v8, v10);
    }
  }
  return v11 & 0xFFFFFFFFFFFFFFLL;
}

uint64_t sub_1B093C010()
{
  return sub_1B0A1DB58();
}

BOOL sub_1B093C034(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_1B093C040()
{
  sub_1B0A1DB28();
  sub_1B0A1DB58();
  return sub_1B0A1DB70();
}

uint64_t sub_1B093C084()
{
  return sub_1B093C040();
}

uint64_t sub_1B093C08C()
{
  return sub_1B093C010();
}

uint64_t sub_1B093C094()
{
  sub_1B0A1DB28();
  sub_1B093C010();
  return sub_1B0A1DB70();
}

BOOL sub_1B093C0D0(int *a1, int *a2)
{
  return sub_1B093C034(*a1, *a2);
}

void sub_1B093C0DC()
{
  JUMPOUT(0x1B5E0D530);
}

void sub_1B093C0EC()
{
  off_1EEEBBB68 = &unk_1E61917C0;
}

uint64_t sub_1B093C100@<X0>(unint64_t a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t inited;
  __int16 v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(unint64_t, unint64_t);
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  __int128 *v120;
  char v121;
  char v122;
  uint64_t v123;
  _BOOL8 v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  unint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  __int128 *v157;
  char v158;
  char v159;
  uint64_t v160;
  _BOOL8 v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  unint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _BOOL8 v173;
  uint64_t v174;
  unint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  __int16 v196;
  char v197;
  int v198;
  __int16 v199;
  char v200;
  int v201;
  __int16 v202;
  char v203;
  uint64_t result;
  __int128 v205;
  __int128 v206;
  unint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  __int128 *v213;
  unint64_t v214;
  void (*v215)(unint64_t, unint64_t);
  unint64_t v216;
  __int128 v217;
  ValueMetadata *v218;
  _UNKNOWN **v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  __int128 v223;
  _QWORD *v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  int v229;
  __int16 v230;
  char v231;
  int v232;
  __int16 v233;
  char v234;
  int v235;
  __int16 v236;
  char v237;

  v2 = sub_1B0A1D294();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (unint64_t)&v209 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEE9D8];
  v221 = MEMORY[0x1E0DEE9D8];
  v222 = (char *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v223 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v223 + 1) = MEMORY[0x1E0DEE9D8];
  v224 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v225 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v225 + 1) = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v226 + 1) = sub_1B08F7958(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v227 = sub_1B09014EC(v6);
  *((_QWORD *)&v227 + 1) = v6;
  *(_QWORD *)&v226 = &unk_1E6191A88;
  v220 = 0;
  v233 = 0;
  v232 = 0;
  v228 = 0uLL;
  v234 = 4;
  v236 = 0;
  v235 = 1;
  v237 = 4;
  v230 = 0;
  v229 = 2;
  v231 = 3;
  sub_1B0A1D27C();
  v7 = sub_1B0A1D228();
  v9 = v8;
  v10 = *(_QWORD *)(v3 + 8);
  ((void (*)(unint64_t, unint64_t))v10)(v5, v2);
  if (v9 >> 60 == 15)
    goto LABEL_176;
  sub_1B093A7AC(v7, v9);
  sub_1B08CBB10(v7, v9);
  sub_1B0A1D27C();
  v11 = sub_1B0A1D228();
  v13 = v12;
  ((void (*)(unint64_t, unint64_t))v10)(v5, v2);
  if (v13 >> 60 == 15)
  {
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  sub_1B093A7AC(v11, v13);
  sub_1B08CBB10(v11, v13);
  sub_1B0A1D27C();
  v14 = sub_1B0A1D228();
  v16 = v15;
  ((void (*)(unint64_t, unint64_t))v10)(v5, v2);
  if (v16 >> 60 == 15)
  {
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }
  sub_1B093A7AC(v14, v16);
  sub_1B08CBB10(v14, v16);
  v17 = (__int128 *)v223;
  v18 = *(_QWORD *)(v223 + 16);
  if (HIDWORD(v18))
    goto LABEL_163;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_164:
    v17 = (__int128 *)sub_1B08B64AC(0, v18 + 1, 1, v17);
  v20 = *((_QWORD *)v17 + 2);
  v19 = *((_QWORD *)v17 + 3);
  if (v20 >= v19 >> 1)
    v17 = (__int128 *)sub_1B08B64AC((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
  v218 = &type metadata for SingleBufferInput;
  v219 = &protocol witness table for SingleBufferInput;
  v217 = xmmword_1B0A363C0;
  *((_QWORD *)v17 + 2) = v20 + 1;
  sub_1B08AEF8C(&v217, (uint64_t)v17 + 40 * v20 + 32);
  *(_QWORD *)&v223 = v17;
  v21 = sub_1B09015DC(MEMORY[0x1E0DEE9D8]);
  if (qword_1EEEBA530 != -1)
  {
    v207 = v21;
    swift_once();
    v21 = v207;
  }
  v210 = (_QWORD *)a1;
  v22 = *((_QWORD *)off_1EEEBBB68 + 2);
  v214 = v2;
  v215 = (void (*)(unint64_t, unint64_t))v10;
  v216 = v5;
  if (v22)
  {
    v213 = (__int128 *)v21;
    v211 = swift_bridgeObjectRetain();
    a1 = v211 + 40;
    while (1)
    {
      v18 = *(_QWORD *)(a1 - 8);
      swift_bridgeObjectRetain();
      sub_1B0A1D270();
      v24 = sub_1B0A1D228();
      v10 = v25;
      swift_bridgeObjectRelease();
      v215(v5, v2);
      if (v10 >> 60 == 15)
      {
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
        goto LABEL_177;
      }
      v26 = *((_QWORD *)&v226 + 1);
      v27 = *(_QWORD *)(*((_QWORD *)&v226 + 1) + 16);
      v212 = v22;
      if (v27)
      {
        sub_1B08A35B0(v24, v10);
        v28 = sub_1B08F9E80(v24, v10);
        if ((v29 & 1) != 0)
        {
          v5 = *(unsigned int *)(*(_QWORD *)(v26 + 56) + 4 * v28);
          sub_1B08CBB10(v24, v10);
          sub_1B08CBB10(v24, v10);
          goto LABEL_35;
        }
        sub_1B08CBB10(v24, v10);
      }
      v17 = (__int128 *)*((_QWORD *)&v225 + 1);
      v30 = *(_QWORD *)(*((_QWORD *)&v225 + 1) + 16);
      if (HIDWORD(v30))
        goto LABEL_151;
      sub_1B08A35B0(v24, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = (__int128 *)sub_1B08B6378(0, v30 + 1, 1, (char *)v17);
      v32 = *((_QWORD *)v17 + 2);
      v31 = *((_QWORD *)v17 + 3);
      v18 = v32 + 1;
      if (v32 >= v31 >> 1)
        v17 = (__int128 *)sub_1B08B6378((char *)(v31 > 1), v32 + 1, 1, (char *)v17);
      *((_QWORD *)v17 + 2) = v18;
      v33 = &v17[v32];
      *((_QWORD *)v33 + 4) = v24;
      *((_QWORD *)v33 + 5) = v10;
      *((_QWORD *)&v225 + 1) = v17;
      sub_1B08A35B0(v24, v10);
      v17 = (__int128 *)*((_QWORD *)&v226 + 1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v217 = v17;
      *((_QWORD *)&v226 + 1) = 0x8000000000000000;
      v2 = sub_1B08F9E80(v24, v10);
      v36 = *((_QWORD *)v17 + 2);
      v37 = (v35 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_152;
      v18 = v35;
      if (*((_QWORD *)v17 + 3) >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1B08FF6A4();
      }
      else
      {
        sub_1B08FA47C(v38, isUniquelyReferenced_nonNull_native);
        v39 = sub_1B08F9E80(v24, v10);
        if ((v18 & 1) != (v40 & 1))
          goto LABEL_188;
        v2 = v39;
      }
      v5 = v30;
      v17 = (__int128 *)v217;
      if ((v18 & 1) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(v217 + 56) + 4 * v2) = v30;
      }
      else
      {
        *(_QWORD *)(v217 + 8 * (v2 >> 6) + 64) |= 1 << v2;
        v41 = (uint64_t *)(*((_QWORD *)v17 + 6) + 16 * v2);
        *v41 = v24;
        v41[1] = v10;
        *(_DWORD *)(*((_QWORD *)v17 + 7) + 4 * v2) = v30;
        v42 = *((_QWORD *)v17 + 2);
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (v43)
          goto LABEL_160;
        *((_QWORD *)v17 + 2) = v44;
        sub_1B08A35B0(v24, v10);
      }
      *((_QWORD *)&v226 + 1) = v17;
      swift_bridgeObjectRelease();
      sub_1B08CBB10(v24, v10);
      sub_1B08CBB10(v24, v10);
      v2 = v214;
LABEL_35:
      v17 = v213;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v217 = v17;
      v46 = sub_1B08F9F0C(v5 | 0x3000000000000);
      v47 = *((_QWORD *)v17 + 2);
      v48 = (v45 & 1) == 0;
      v49 = v47 + v48;
      if (__OFADD__(v47, v48))
      {
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }
      v18 = v45;
      if (*((_QWORD *)v17 + 3) >= v49)
      {
        if ((v10 & 1) == 0)
        {
          v17 = &v217;
          sub_1B08FF850();
        }
      }
      else
      {
        sub_1B08FA77C(v49, v10);
        v17 = (__int128 *)v217;
        v50 = sub_1B08F9F0C(v5 | 0x3000000000000);
        if ((v18 & 1) != (v51 & 1))
          goto LABEL_187;
        v46 = v50;
      }
      v52 = (_QWORD *)v217;
      v213 = (__int128 *)v217;
      if ((v18 & 1) != 0)
      {
        v23 = *(_QWORD *)(v217 + 56) + 8 * v46;
        *(_WORD *)(v23 + 4) = 0;
        *(_DWORD *)v23 = 55;
        *(_BYTE *)(v23 + 6) = 5;
      }
      else
      {
        *(_QWORD *)(v217 + 8 * (v46 >> 6) + 64) |= 1 << v46;
        v53 = v52[6] + 8 * v46;
        *(_WORD *)(v53 + 4) = 0;
        *(_DWORD *)v53 = v5;
        *(_BYTE *)(v53 + 6) = 3;
        v54 = v52[7] + 8 * v46;
        *(_WORD *)(v54 + 4) = 0;
        *(_DWORD *)v54 = 55;
        *(_BYTE *)(v54 + 6) = 5;
        v55 = v52[2];
        v43 = __OFADD__(v55, 1);
        v56 = v55 + 1;
        if (v43)
          goto LABEL_157;
        v52[2] = v56;
      }
      a1 += 16;
      swift_bridgeObjectRelease();
      v22 = v212 - 1;
      v5 = v216;
      if (v212 == 1)
      {
        swift_bridgeObjectRelease();
        v10 = (unint64_t)v215;
        v21 = (unint64_t)v213;
        break;
      }
    }
  }
  v57 = v224;
  v58 = v224[2];
  if (HIDWORD(v58))
  {
    __break(1u);
  }
  else
  {
    v213 = (__int128 *)v21;
    swift_bridgeObjectRetain_n();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_47;
  }
  v57 = sub_1B08B6498(0, v58 + 1, 1, v57);
LABEL_47:
  v60 = v57[2];
  v59 = v57[3];
  v61 = v213;
  if (v60 >= v59 >> 1)
  {
    v208 = sub_1B08B6498((_QWORD *)(v59 > 1), v60 + 1, 1, v57);
    v61 = v213;
    v57 = v208;
  }
  v57[2] = v60 + 1;
  v57[v60 + 4] = v61;
  swift_bridgeObjectRelease();
  v224 = v57;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8A0);
  v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_1B0A36A90;
  v63 = v216;
  sub_1B0A1D27C();
  v64 = sub_1B0A1D228();
  v66 = v65;
  ((void (*)(unint64_t, unint64_t))v10)(v63, v2);
  if (v66 >> 60 == 15)
    goto LABEL_179;
  v67 = sub_1B093A7AC(v64, v66);
  sub_1B08CBB10(v64, v66);
  *(_WORD *)(v62 + 36) = 0;
  *(_DWORD *)(v62 + 32) = v67;
  *(_BYTE *)(v62 + 38) = 3;
  *(_WORD *)(v62 + 44) = 0;
  *(_DWORD *)(v62 + 40) = 100;
  *(_BYTE *)(v62 + 46) = 5;
  v68 = (_QWORD *)*((_QWORD *)&v223 + 1);
  v69 = *(_QWORD *)(*((_QWORD *)&v223 + 1) + 16);
  if (HIDWORD(v69))
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_52;
  }
  v68 = sub_1B08B6484(0, v69 + 1, 1, v68);
LABEL_52:
  v71 = v68[2];
  v70 = v68[3];
  if (v71 >= v70 >> 1)
    v68 = sub_1B08B6484((_QWORD *)(v70 > 1), v71 + 1, 1, v68);
  v68[2] = v71 + 1;
  v68[v71 + 4] = v62;
  swift_bridgeObjectRelease();
  *((_QWORD *)&v223 + 1) = v68;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBC70);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B0A36410;
  v73 = v230;
  v74 = v231;
  *(_DWORD *)(inited + 32) = v229;
  *(_WORD *)(inited + 36) = v73;
  *(_BYTE *)(inited + 38) = v74;
  *(_DWORD *)(inited + 40) = v58;
  *(_WORD *)(inited + 44) = WORD2(v58);
  *(_BYTE *)(inited + 46) = 8;
  v75 = v216;
  sub_1B0A1D27C();
  v76 = sub_1B0A1D228();
  v78 = v77;
  v79 = v215;
  v215(v75, v2);
  if (v78 >> 60 == 15)
    goto LABEL_180;
  v80 = sub_1B093A7AC(v76, v78);
  sub_1B08CBB10(v76, v78);
  *(_WORD *)(inited + 52) = 0;
  *(_DWORD *)(inited + 48) = v80;
  *(_BYTE *)(inited + 54) = 3;
  *(_WORD *)(inited + 60) = 0;
  *(_DWORD *)(inited + 56) = 0;
  *(_BYTE *)(inited + 62) = 0;
  sub_1B0A1D27C();
  v81 = sub_1B0A1D228();
  v83 = v82;
  v79(v75, v2);
  if (v83 >> 60 == 15)
  {
LABEL_181:
    __break(1u);
    goto LABEL_182;
  }
  v84 = v69 | 0x400000000;
  v85 = sub_1B093A7AC(v81, v83);
  sub_1B08CBB10(v81, v83);
  *(_WORD *)(inited + 68) = 0;
  *(_DWORD *)(inited + 64) = v85;
  *(_BYTE *)(inited + 70) = 3;
  *(_WORD *)(inited + 76) = WORD2(v84);
  *(_DWORD *)(inited + 72) = v84;
  *(_BYTE *)(inited + 78) = 7;
  sub_1B0A1D27C();
  v86 = sub_1B0A1D228();
  v88 = v87;
  v79(v75, v2);
  if (v88 >> 60 == 15)
  {
LABEL_182:
    __break(1u);
    goto LABEL_183;
  }
  v89 = sub_1B093A7AC(v86, v88);
  sub_1B08CBB10(v86, v88);
  *(_WORD *)(inited + 84) = 0;
  *(_DWORD *)(inited + 80) = v89;
  *(_BYTE *)(inited + 86) = 3;
  *(_WORD *)(inited + 92) = 0;
  *(_DWORD *)(inited + 88) = 1;
  *(_BYTE *)(inited + 94) = 1;
  sub_1B0A1D27C();
  v90 = sub_1B0A1D228();
  v92 = v91;
  v79(v75, v2);
  if (v92 >> 60 == 15)
  {
LABEL_183:
    __break(1u);
    goto LABEL_184;
  }
  v93 = sub_1B093A7AC(v90, v92);
  sub_1B08CBB10(v90, v92);
  *(_WORD *)(inited + 100) = 0;
  *(_DWORD *)(inited + 96) = v93;
  *(_BYTE *)(inited + 102) = 3;
  *(_WORD *)(inited + 108) = 0;
  *(_DWORD *)(inited + 104) = 0;
  *(_BYTE *)(inited + 110) = 10;
  sub_1B0A1D27C();
  v94 = sub_1B0A1D228();
  v96 = v95;
  v79(v75, v2);
  if (v96 >> 60 == 15)
  {
LABEL_184:
    __break(1u);
    goto LABEL_185;
  }
  v97 = sub_1B093A7AC(v94, v96);
  sub_1B08CBB10(v94, v96);
  *(_WORD *)(inited + 116) = 0;
  *(_DWORD *)(inited + 112) = v97;
  *(_BYTE *)(inited + 118) = 3;
  *(_WORD *)(inited + 124) = 0;
  *(_DWORD *)(inited + 120) = 1;
  *(_BYTE *)(inited + 126) = 8;
  sub_1B0A1D27C();
  v98 = sub_1B0A1D228();
  v100 = v99;
  v79(v75, v2);
  if (v100 >> 60 == 15)
  {
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    sub_1B0A1DAD4();
    __break(1u);
LABEL_188:
    result = sub_1B0A1DAD4();
    __break(1u);
    return result;
  }
  v101 = sub_1B093A7AC(v98, v100);
  sub_1B08CBB10(v98, v100);
  *(_WORD *)(inited + 132) = 0;
  *(_DWORD *)(inited + 128) = v101;
  *(_BYTE *)(inited + 134) = 3;
  *(_WORD *)(inited + 140) = 0;
  *(_DWORD *)(inited + 136) = 1;
  *(_BYTE *)(inited + 142) = 0;
  sub_1B0A1D27C();
  v102 = sub_1B0A1D228();
  v104 = v103;
  v79(v75, v2);
  if (v104 >> 60 == 15)
    goto LABEL_186;
  v105 = sub_1B093A7AC(v102, v104);
  sub_1B08CBB10(v102, v104);
  *(_WORD *)(inited + 148) = 0;
  *(_DWORD *)(inited + 144) = v105;
  *(_BYTE *)(inited + 150) = 3;
  *(_WORD *)(inited + 156) = 0;
  *(_DWORD *)(inited + 152) = 2;
  *(_BYTE *)(inited + 158) = 8;
  v5 = sub_1B09015DC(inited);
  swift_setDeallocating();
  v106 = 101;
  v10 = (unint64_t)&byte_1E61919D0;
  do
  {
    v109 = *(unsigned __int8 *)v10++;
    v108 = v109;
    sub_1B0948000(v109);
    v18 = v110;
    v111 = v216;
    sub_1B0A1D27C();
    v2 = sub_1B0A1D228();
    v113 = v112;
    swift_bridgeObjectRelease();
    v215(v111, v214);
    if (v113 >> 60 == 15)
      goto LABEL_174;
    v114 = *((_QWORD *)&v226 + 1);
    v115 = *(_QWORD *)(*((_QWORD *)&v226 + 1) + 16);
    v211 = v108;
    v212 = v106;
    if (v115)
    {
      sub_1B08A35B0(v2, v113);
      v116 = sub_1B08F9E80(v2, v113);
      if ((v117 & 1) != 0)
      {
        a1 = *(unsigned int *)(*(_QWORD *)(v114 + 56) + 4 * v116);
        goto LABEL_85;
      }
      sub_1B08CBB10(v2, v113);
    }
    v17 = (__int128 *)*((_QWORD *)&v225 + 1);
    a1 = *(_QWORD *)(*((_QWORD *)&v225 + 1) + 16);
    if (HIDWORD(a1))
      goto LABEL_153;
    sub_1B08A35B0(v2, v113);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = (__int128 *)sub_1B08B6378(0, a1 + 1, 1, (char *)v17);
    v119 = *((_QWORD *)v17 + 2);
    v118 = *((_QWORD *)v17 + 3);
    if (v119 >= v118 >> 1)
      v17 = (__int128 *)sub_1B08B6378((char *)(v118 > 1), v119 + 1, 1, (char *)v17);
    *((_QWORD *)v17 + 2) = v119 + 1;
    v120 = &v17[v119];
    *((_QWORD *)v120 + 4) = v2;
    *((_QWORD *)v120 + 5) = v113;
    *((_QWORD *)&v225 + 1) = v17;
    sub_1B08A35B0(v2, v113);
    v17 = (__int128 *)*((_QWORD *)&v226 + 1);
    v121 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v217 = v17;
    *((_QWORD *)&v226 + 1) = 0x8000000000000000;
    v18 = sub_1B08F9E80(v2, v113);
    v123 = *((_QWORD *)v17 + 2);
    v124 = (v122 & 1) == 0;
    v125 = v123 + v124;
    if (__OFADD__(v123, v124))
      goto LABEL_154;
    v126 = v122;
    if (*((_QWORD *)v17 + 3) >= v125)
    {
      if ((v121 & 1) == 0)
        sub_1B08FF6A4();
    }
    else
    {
      sub_1B08FA47C(v125, v121);
      v127 = sub_1B08F9E80(v2, v113);
      if ((v126 & 1) != (v128 & 1))
        goto LABEL_188;
      v18 = v127;
    }
    a1 = a1;
    v17 = (__int128 *)v217;
    if ((v126 & 1) != 0)
    {
      *(_DWORD *)(*(_QWORD *)(v217 + 56) + 4 * v18) = a1;
    }
    else
    {
      *(_QWORD *)(v217 + 8 * (v18 >> 6) + 64) |= 1 << v18;
      v129 = (unint64_t *)(*((_QWORD *)v17 + 6) + 16 * v18);
      *v129 = v2;
      v129[1] = v113;
      *(_DWORD *)(*((_QWORD *)v17 + 7) + 4 * v18) = a1;
      v130 = *((_QWORD *)v17 + 2);
      v43 = __OFADD__(v130, 1);
      v131 = v130 + 1;
      if (v43)
        goto LABEL_161;
      *((_QWORD *)v17 + 2) = v131;
      sub_1B08A35B0(v2, v113);
    }
    *((_QWORD *)&v226 + 1) = v17;
    swift_bridgeObjectRelease();
LABEL_85:
    sub_1B08CBB10(v2, v113);
    sub_1B08CBB10(v2, v113);
    v132 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v217 = v5;
    v17 = (__int128 *)v5;
    v134 = sub_1B08F9F0C(a1 | 0x3000000000000);
    v135 = *(_QWORD *)(v5 + 16);
    v136 = (v133 & 1) == 0;
    v137 = v135 + v136;
    if (__OFADD__(v135, v136))
      goto LABEL_149;
    v18 = v133;
    if (*(_QWORD *)(v5 + 24) >= v137)
    {
      v140 = v212;
      if ((v132 & 1) != 0)
      {
        v5 = v217;
        if ((v133 & 1) != 0)
          goto LABEL_62;
      }
      else
      {
        v17 = &v217;
        sub_1B08FF850();
        v5 = v217;
        if ((v18 & 1) != 0)
          goto LABEL_62;
      }
    }
    else
    {
      sub_1B08FA77C(v137, v132);
      v17 = (__int128 *)v217;
      v138 = sub_1B08F9F0C(a1 | 0x3000000000000);
      if ((v18 & 1) != (v139 & 1))
        goto LABEL_187;
      v134 = v138;
      v140 = v212;
      v5 = v217;
      if ((v18 & 1) != 0)
      {
LABEL_62:
        v107 = *(_QWORD *)(v5 + 56) + 8 * v134;
        *(_WORD *)(v107 + 4) = 0;
        *(_DWORD *)v107 = v211;
        *(_BYTE *)(v107 + 6) = 5;
        goto LABEL_63;
      }
    }
    *(_QWORD *)(v5 + 8 * (v134 >> 6) + 64) |= 1 << v134;
    v141 = *(_QWORD *)(v5 + 48) + 8 * v134;
    *(_WORD *)(v141 + 4) = 0;
    *(_DWORD *)v141 = a1;
    *(_BYTE *)(v141 + 6) = 3;
    v142 = *(_QWORD *)(v5 + 56) + 8 * v134;
    *(_WORD *)(v142 + 4) = 0;
    *(_DWORD *)v142 = v211;
    *(_BYTE *)(v142 + 6) = 5;
    v143 = *(_QWORD *)(v5 + 16);
    v43 = __OFADD__(v143, 1);
    v144 = v143 + 1;
    if (v43)
      goto LABEL_158;
    *(_QWORD *)(v5 + 16) = v144;
LABEL_63:
    swift_bridgeObjectRelease();
    v106 = v140 - 1;
  }
  while (v106);
  if (qword_1EEEBA538 != -1)
    swift_once();
  v145 = *(_QWORD *)(qword_1EEEC7110 + 16);
  if (v145)
  {
    v209 = swift_bridgeObjectRetain();
    a1 = v209 + 48;
    while (1)
    {
      v147 = *(unsigned __int8 *)a1;
      v18 = *(_QWORD *)(a1 - 16);
      swift_bridgeObjectRetain();
      v148 = v216;
      sub_1B0A1D27C();
      v2 = sub_1B0A1D228();
      v150 = v149;
      swift_bridgeObjectRelease();
      v215(v148, v214);
      if (v150 >> 60 == 15)
        goto LABEL_175;
      v151 = *((_QWORD *)&v226 + 1);
      v152 = *(_QWORD *)(*((_QWORD *)&v226 + 1) + 16);
      v211 = v147;
      v212 = v145;
      if (v152)
      {
        sub_1B08A35B0(v2, v150);
        v153 = sub_1B08F9E80(v2, v150);
        if ((v154 & 1) != 0)
        {
          v10 = *(unsigned int *)(*(_QWORD *)(v151 + 56) + 4 * v153);
          goto LABEL_123;
        }
        sub_1B08CBB10(v2, v150);
      }
      v17 = (__int128 *)*((_QWORD *)&v225 + 1);
      v10 = *(_QWORD *)(*((_QWORD *)&v225 + 1) + 16);
      if (HIDWORD(v10))
        goto LABEL_155;
      sub_1B08A35B0(v2, v150);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = (__int128 *)sub_1B08B6378(0, v10 + 1, 1, (char *)v17);
      v156 = *((_QWORD *)v17 + 2);
      v155 = *((_QWORD *)v17 + 3);
      if (v156 >= v155 >> 1)
        v17 = (__int128 *)sub_1B08B6378((char *)(v155 > 1), v156 + 1, 1, (char *)v17);
      *((_QWORD *)v17 + 2) = v156 + 1;
      v157 = &v17[v156];
      *((_QWORD *)v157 + 4) = v2;
      *((_QWORD *)v157 + 5) = v150;
      *((_QWORD *)&v225 + 1) = v17;
      sub_1B08A35B0(v2, v150);
      v17 = (__int128 *)*((_QWORD *)&v226 + 1);
      v158 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v217 = v17;
      *((_QWORD *)&v226 + 1) = 0x8000000000000000;
      v18 = sub_1B08F9E80(v2, v150);
      v160 = *((_QWORD *)v17 + 2);
      v161 = (v159 & 1) == 0;
      v162 = v160 + v161;
      if (__OFADD__(v160, v161))
        goto LABEL_156;
      v163 = v159;
      if (*((_QWORD *)v17 + 3) >= v162)
      {
        if ((v158 & 1) == 0)
          sub_1B08FF6A4();
      }
      else
      {
        sub_1B08FA47C(v162, v158);
        v164 = sub_1B08F9E80(v2, v150);
        if ((v163 & 1) != (v165 & 1))
          goto LABEL_188;
        v18 = v164;
      }
      v10 = v10;
      v17 = (__int128 *)v217;
      if ((v163 & 1) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(v217 + 56) + 4 * v18) = v10;
      }
      else
      {
        *(_QWORD *)(v217 + 8 * (v18 >> 6) + 64) |= 1 << v18;
        v166 = (unint64_t *)(*((_QWORD *)v17 + 6) + 16 * v18);
        *v166 = v2;
        v166[1] = v150;
        *(_DWORD *)(*((_QWORD *)v17 + 7) + 4 * v18) = v10;
        v167 = *((_QWORD *)v17 + 2);
        v43 = __OFADD__(v167, 1);
        v168 = v167 + 1;
        if (v43)
          goto LABEL_162;
        *((_QWORD *)v17 + 2) = v168;
        sub_1B08A35B0(v2, v150);
      }
      *((_QWORD *)&v226 + 1) = v17;
      swift_bridgeObjectRelease();
LABEL_123:
      sub_1B08CBB10(v2, v150);
      sub_1B08CBB10(v2, v150);
      v169 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v217 = v5;
      v17 = (__int128 *)v5;
      v171 = sub_1B08F9F0C(v10 | 0x3000000000000);
      v172 = *(_QWORD *)(v5 + 16);
      v173 = (v170 & 1) == 0;
      v174 = v172 + v173;
      if (__OFADD__(v172, v173))
        goto LABEL_150;
      v18 = v170;
      if (*(_QWORD *)(v5 + 24) >= v174)
      {
        v177 = v212;
        if ((v169 & 1) != 0)
        {
          v5 = v217;
          if ((v170 & 1) == 0)
            goto LABEL_130;
        }
        else
        {
          v17 = &v217;
          sub_1B08FF850();
          v5 = v217;
          if ((v18 & 1) == 0)
            goto LABEL_130;
        }
      }
      else
      {
        sub_1B08FA77C(v174, v169);
        v17 = (__int128 *)v217;
        v175 = sub_1B08F9F0C(v10 | 0x3000000000000);
        if ((v18 & 1) != (v176 & 1))
          goto LABEL_187;
        v171 = v175;
        v177 = v212;
        v5 = v217;
        if ((v18 & 1) == 0)
        {
LABEL_130:
          *(_QWORD *)(v5 + 8 * (v171 >> 6) + 64) |= 1 << v171;
          v178 = *(_QWORD *)(v5 + 48) + 8 * v171;
          *(_WORD *)(v178 + 4) = 0;
          *(_DWORD *)v178 = v10;
          *(_BYTE *)(v178 + 6) = 3;
          v179 = *(_QWORD *)(v5 + 56) + 8 * v171;
          *(_WORD *)(v179 + 4) = 0;
          *(_DWORD *)v179 = v211;
          *(_BYTE *)(v179 + 6) = 5;
          v180 = *(_QWORD *)(v5 + 16);
          v43 = __OFADD__(v180, 1);
          v181 = v180 + 1;
          if (v43)
            goto LABEL_159;
          *(_QWORD *)(v5 + 16) = v181;
          goto LABEL_101;
        }
      }
      v146 = *(_QWORD *)(v5 + 56) + 8 * v171;
      *(_WORD *)(v146 + 4) = 0;
      *(_DWORD *)v146 = v211;
      *(_BYTE *)(v146 + 6) = 5;
LABEL_101:
      a1 += 24;
      swift_bridgeObjectRelease();
      v145 = v177 - 1;
      if (!v145)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v182 = v224;
  v183 = v224[2];
  if (HIDWORD(v183))
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_137;
  }
  v182 = sub_1B08B6498(0, v183 + 1, 1, v182);
LABEL_137:
  v185 = v182[2];
  v184 = v182[3];
  if (v185 >= v184 >> 1)
    v182 = sub_1B08B6498((_QWORD *)(v184 > 1), v185 + 1, 1, v182);
  v182[2] = v185 + 1;
  v182[v185 + 4] = v5;
  swift_bridgeObjectRelease();
  v224 = v182;
  v186 = v222;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v186 = sub_1B08B6478(0, *((_QWORD *)v186 + 2) + 1, 1, v186);
  v188 = *((_QWORD *)v186 + 2);
  v187 = *((_QWORD *)v186 + 3);
  v189 = v188 + 1;
  if (v188 >= v187 >> 1)
    v186 = sub_1B08B6478((char *)(v187 > 1), v188 + 1, 1, v186);
  *((_QWORD *)v186 + 2) = v189;
  *(_DWORD *)&v186[4 * v188 + 32] = v183;
  v190 = sub_1B09015DC(MEMORY[0x1E0DEE9D8]);
  v191 = v182[2];
  if (HIDWORD(v191))
  {
    __break(1u);
  }
  else
  {
    v189 = v190;
    v5 = v182[3];
    v183 = v191 + 1;
    swift_bridgeObjectRetain();
    if (v191 < v5 >> 1)
      goto LABEL_145;
  }
  v182 = sub_1B08B6498((_QWORD *)(v5 > 1), v183, 1, v182);
LABEL_145:
  v182[2] = v183;
  v182[v191 + 4] = v189;
  swift_bridgeObjectRelease();
  v193 = *((_QWORD *)v186 + 2);
  v192 = *((_QWORD *)v186 + 3);
  if (v193 >= v192 >> 1)
    v186 = sub_1B08B6478((char *)(v192 > 1), v193 + 1, 1, v186);
  *((_QWORD *)v186 + 2) = v193 + 1;
  *(_DWORD *)&v186[4 * v193 + 32] = v191;
  v194 = v221;
  v195 = v229;
  v196 = v230;
  v197 = v231;
  v198 = v232;
  v199 = v233;
  v200 = v234;
  v201 = v235;
  v202 = v236;
  v203 = v237;
  result = (uint64_t)v210;
  *v210 = v220;
  *(_QWORD *)(result + 8) = v194;
  *(_QWORD *)(result + 16) = v186;
  *(_OWORD *)(result + 24) = v223;
  *(_QWORD *)(result + 40) = v182;
  v205 = v226;
  *(_OWORD *)(result + 48) = v225;
  *(_OWORD *)(result + 64) = v205;
  v206 = v228;
  *(_OWORD *)(result + 80) = v227;
  *(_OWORD *)(result + 96) = v206;
  *(_WORD *)(result + 116) = v196;
  *(_DWORD *)(result + 112) = v195;
  *(_BYTE *)(result + 118) = v197;
  *(_WORD *)(result + 124) = v199;
  *(_DWORD *)(result + 120) = v198;
  *(_BYTE *)(result + 126) = v200;
  *(_WORD *)(result + 132) = v202;
  *(_DWORD *)(result + 128) = v201;
  *(_BYTE *)(result + 134) = v203;
  return result;
}

uint64_t sub_1B093D7F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1 || a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

_BYTE *sub_1B093D818@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 0;
  return result;
}

_BYTE *sub_1B093D82C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 2;
  return result;
}

uint64_t sub_1B093D844(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  int64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v3 = a1;
  v33 = MEMORY[0x1E0DEE9D8];
  sub_1B08E8458(0, v1, 0);
  v2 = v33;
  v5 = sub_1B0943C7C(v3);
  v6 = 0;
  v7 = v3 + 64;
  v8 = *(_BYTE *)(v3 + 32);
  v28 = v3 + 80;
  v29 = v1;
  v30 = v4;
  v31 = v3 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << v8)
  {
    v12 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v4)
      goto LABEL_24;
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v5);
    v14 = v13[1];
    v32 = v6;
    v15 = v3;
    v16 = *(_WORD *)(*(_QWORD *)(v3 + 48) + 2 * v5);
    v17 = *v13;
    swift_bridgeObjectRetain();
    v19 = *(_QWORD *)(v33 + 16);
    v18 = *(_QWORD *)(v33 + 24);
    v20 = v19 + 1;
    if (v19 >= v18 >> 1)
    {
      sub_1B08E8458((char *)(v18 > 1), v19 + 1, 1);
      v20 = v19 + 1;
    }
    *(_QWORD *)(v33 + 16) = v20;
    v21 = v33 + 32 * v19;
    *(_WORD *)(v21 + 32) = v16;
    *(_QWORD *)(v21 + 40) = v17;
    *(_QWORD *)(v21 + 48) = v14;
    *(_DWORD *)(v21 + 56) = 1;
    *(_WORD *)(v21 + 60) = 0;
    v8 = *(_BYTE *)(v15 + 32);
    v9 = 1 << v8;
    if (v5 >= 1 << v8)
      goto LABEL_25;
    v7 = v31;
    v22 = *(_QWORD *)(v31 + 8 * v12);
    if ((v22 & (1 << v5)) == 0)
      goto LABEL_26;
    v3 = v15;
    v4 = v30;
    if (*(_DWORD *)(v15 + 36) != v30)
      goto LABEL_27;
    v23 = v22 & (-2 << (v5 & 0x3F));
    if (v23)
    {
      v9 = __clz(__rbit64(v23)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v10 = v29;
      v11 = v32;
    }
    else
    {
      v24 = v12 + 1;
      v25 = (v9 + 63) >> 6;
      v10 = v29;
      v11 = v32;
      if (v12 + 1 < v25)
      {
        v26 = *(_QWORD *)(v31 + 8 * v24);
        if (v26)
        {
LABEL_20:
          v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v12)
          {
            v26 = *(_QWORD *)(v28 + 8 * v12++);
            if (v26)
            {
              v24 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v6 = v11 + 1;
    v5 = v9;
    if (v6 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  result = swift_bridgeObjectRetain();
  __break(1u);
  return result;
}

uint64_t sub_1B093DAA0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B08A8FE8((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_1B09433D4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1B093DB08@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  uint64_t *v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t result;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  BOOL v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  unsigned __int8 v151;
  BOOL v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  char v157;
  uint64_t v159;
  char v160;
  uint64_t v161;
  unint64_t v162;
  char isUniquelyReferenced_nonNull_native;
  char v164;
  uint64_t v165;
  _BOOL8 v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  unsigned __int8 v170;
  unsigned int v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  char v181;
  uint64_t v182;
  _BOOL8 v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  unsigned __int8 v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t *v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  char v205;
  uint64_t v206;
  _BOOL8 v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  unsigned __int8 v211;
  unsigned int v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  char v222;
  uint64_t v223;
  _BOOL8 v224;
  uint64_t v225;
  unsigned int v226;
  unint64_t v227;
  char v228;
  unsigned __int8 v229;
  unsigned int v230;
  uint64_t *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  uint64_t v247;
  _BOOL8 v248;
  uint64_t v249;
  char v250;
  unint64_t v251;
  char v252;
  unsigned int v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  int v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  int v292;
  unint64_t v293;
  unint64_t v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  _DWORD v301[8];
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  _UNKNOWN **v305;
  char *v306;
  _BYTE v307[7];
  char v308;
  _BYTE v309[7];
  _BYTE v310[7];
  char v311;
  _BYTE v312[7];
  char v313;
  char v314;
  char v315;
  char v316;

  v292 = a4;
  v9 = sub_1B0A1D294();
  v284 = *(_QWORD *)(v9 - 8);
  v285 = v9;
  MEMORY[0x1E0C80A78](v9);
  v283 = (char *)&v266 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v293 = sub_1B0901A14(MEMORY[0x1E0DEE9D8]);
  v316 = 1;
  v315 = 1;
  v314 = 1;
  v313 = 1;
  v311 = 1;
  v308 = 1;
  v11 = *(_QWORD *)(a3 + 16);
  if (!v11)
  {
    v287 = 0;
    v288 = 0;
    LODWORD(v26) = 0;
    v291 = 0;
    v289 = 0;
    v20 = 0.0;
    v13 = 0.0;
    goto LABEL_61;
  }
  v12 = sub_1B08F9DC0(0x6F666E49746E6F46, 0xE800000000000000, 48);
  v13 = 0.0;
  if ((v14 & 1) == 0
    || (v15 = *(_QWORD *)(a3 + 56) + 24 * v12, LODWORD(v16) = *(unsigned __int8 *)(v15 + 16), (v16 & 0xF0) != 0x80))
  {
    LODWORD(v26) = 0;
    v287 = 0;
    v20 = 0.0;
    goto LABEL_50;
  }
  v17 = *(_QWORD *)v15;
  v18 = *(_QWORD *)(v15 + 8);
  v19 = *(_QWORD *)(*(_QWORD *)v15 + 16);
  swift_bridgeObjectRetain();
  v20 = 0.0;
  if (!v19)
  {
    v287 = 0;
    LODWORD(v26) = 0;
    goto LABEL_49;
  }
  v21 = sub_1B08F9DC0(0x5064657869467369, 0xEC00000068637469, 48);
  if ((v22 & 1) != 0)
  {
    v23 = *(_QWORD *)(v17 + 56) + 24 * v21;
    v24 = *(_QWORD *)v23;
    v25 = *(unsigned __int8 *)(v23 + 16) >> 4;
    if (v25 == 1)
    {
      LODWORD(v26) = v24 != 0;
      if (*(_QWORD *)(v17 + 16))
        goto LABEL_13;
LABEL_20:
      v287 = 0;
      goto LABEL_49;
    }
    if (!v25)
    {
      LODWORD(v26) = v24 & 1;
      if (!*(_QWORD *)(v17 + 16))
        goto LABEL_20;
      goto LABEL_13;
    }
  }
  LODWORD(v26) = 0;
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_20;
LABEL_13:
  v27 = sub_1B08F9DC0(0x6E4163696C617449, 0xEB00000000656C67, 48);
  v294 = v18;
  if ((v28 & 1) == 0)
    goto LABEL_28;
  v29 = *(_QWORD *)(v17 + 56) + 24 * v27;
  v30 = *(_QWORD *)v29;
  v31 = *(unsigned __int8 *)(v29 + 16) >> 4;
  if (v31 == 2)
  {
    if ((~v30 & 0x7FF0000000000000) == 0 && (v30 & 0xFFFFFFFFFFFFFLL) != 0)
      goto LABEL_28;
  }
  else
  {
    if (v31 != 1)
      goto LABEL_28;
    v30 = sub_1B0943374(v30);
    if ((v32 & 1) != 0)
      goto LABEL_28;
  }
  if ((v30 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
LABEL_28:
    v34 = a2;
    v287 = 0;
    goto LABEL_29;
  }
  v287 = v30;
  v34 = a2;
  v308 = 0;
LABEL_29:
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_48;
  v35 = sub_1B08F9DC0(0xD000000000000011, 0x80000001B0A27110, 48);
  if ((v36 & 1) != 0)
  {
    v37 = *(_QWORD *)(v17 + 56) + 24 * v35;
    v38 = *(uint64_t *)v37;
    v39 = *(unsigned __int8 *)(v37 + 16) >> 4;
    if (v39 == 2)
    {
      if ((v38 & 0xFFFFFFFFFFFFFLL) != 0 && (~v38 & 0x7FF0000000000000) == 0)
        v13 = 0.0;
      else
        v13 = *(double *)&v38;
    }
    else if (v39 == 1)
    {
      v40 = sub_1B0943374(v38);
      if ((v41 & 1) == 0)
        v13 = *(double *)&v40;
    }
  }
  if (!*(_QWORD *)(v17 + 16))
  {
LABEL_48:
    a2 = v34;
    v18 = v294;
    goto LABEL_49;
  }
  v43 = sub_1B08F9DC0(0xD000000000000012, 0x80000001B0A27130, 48);
  if ((v44 & 1) == 0)
    goto LABEL_141;
  v45 = *(_QWORD *)(v17 + 56) + 24 * v43;
  v46 = *(uint64_t *)v45;
  v47 = *(unsigned __int8 *)(v45 + 16) >> 4;
  if (v47 == 2)
  {
    if ((v46 & 0xFFFFFFFFFFFFFLL) != 0 && (~v46 & 0x7FF0000000000000) == 0)
      v20 = 0.0;
    else
      v20 = *(double *)&v46;
LABEL_141:
    a2 = v34;
    v18 = v294;
LABEL_142:
    if (!*(_QWORD *)(v17 + 16))
      goto LABEL_49;
    goto LABEL_143;
  }
  a2 = v34;
  if (v47 == 1)
  {
    v48 = sub_1B0943374(v46);
    v18 = v294;
    if ((v49 & 1) == 0)
    {
      v20 = *(double *)&v48;
      if (!*(_QWORD *)(v17 + 16))
        goto LABEL_49;
      goto LABEL_143;
    }
    goto LABEL_142;
  }
  v18 = v294;
  if (*(_QWORD *)(v17 + 16))
  {
LABEL_143:
    v159 = sub_1B08F9DC0(0x6867697279706F43, 0xE900000000000074, 48);
    v275 = a2;
    v276 = a1;
    LODWORD(v291) = v16;
    if ((v160 & 1) == 0)
      goto LABEL_166;
    v161 = *(_QWORD *)(v17 + 56) + 24 * v159;
    v119 = *(_QWORD *)(v161 + 8);
    LODWORD(v78) = *(unsigned __int8 *)(v161 + 16);
    v290 = *(_QWORD *)v161;
    sub_1B08AE1E0(v290, v119, v78);
    v162 = v293;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v295 = v162;
    v121 = sub_1B08FA028(0);
    v165 = *(_QWORD *)(v162 + 16);
    v166 = (v164 & 1) == 0;
    v167 = v165 + v166;
    if (__OFADD__(v165, v166))
      goto LABEL_268;
    LOBYTE(a1) = v164;
    if (*(_QWORD *)(v162 + 24) >= v167)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_151;
      goto LABEL_270;
    }
    sub_1B08FB77C(v167, isUniquelyReferenced_nonNull_native);
    v168 = sub_1B08FA028(0);
    if ((a1 & 1) == (v169 & 1))
    {
      v121 = v168;
      goto LABEL_151;
    }
    goto LABEL_282;
  }
LABEL_49:
  sub_1B08AE21C(v17, v18, v16);
LABEL_50:
  v11 = *(_QWORD *)(a3 + 16);
  if (!v11)
  {
    v291 = 0;
    goto LABEL_60;
  }
  v50 = sub_1B08F9DC0(0x786F4242746E6F46, 0xE800000000000000, 48);
  if ((v51 & 1) == 0 || (v52 = (_BYTE *)(*(_QWORD *)(a3 + 56) + 24 * v50), (v52[16] & 0xF0) != 0x70))
  {
    v291 = 0;
    v11 = 0;
LABEL_60:
    v288 = 0;
    v289 = 0;
    goto LABEL_61;
  }
  v53 = (int)v26;
  v54 = a2;
  v55 = *(_QWORD *)v52;
  if (*(_QWORD *)(*(_QWORD *)v52 + 16) == 4)
  {
    v276 = a1;
    v56 = *(_QWORD *)(v55 + 32);
    v57 = *(_QWORD *)(v55 + 40);
    v58 = *(unsigned __int8 *)(v55 + 48);
    if (v58 >> 4 == 2)
    {
      v142 = (~v56 & 0x7FF0000000000000) != 0 || (v56 & 0xFFFFFFFFFFFFFLL) == 0;
      v61 = *(_QWORD *)(v55 + 32);
      if (!v142)
        goto LABEL_122;
    }
    else
    {
      if (v58 >> 4 != 1)
      {
LABEL_160:
        v291 = 0;
        v11 = 0;
        v288 = 0;
        v289 = 0;
        a2 = v54;
        a1 = v276;
        LODWORD(v26) = v53;
        goto LABEL_61;
      }
      v59 = sub_1B0943374(*(_QWORD *)(v55 + 32));
      if ((v60 & 1) != 0)
        goto LABEL_122;
      v61 = v59;
    }
    v144 = *(_QWORD *)(v55 + 56);
    v143 = *(_QWORD *)(v55 + 64);
    LODWORD(v294) = *(unsigned __int8 *)(v55 + 72);
    if (v294 >> 4 == 2)
    {
      v286 = v143;
      v152 = (~v144 & 0x7FF0000000000000) != 0 || (v144 & 0xFFFFFFFFFFFFFLL) == 0;
      v282 = (uint64_t *)v144;
      v145 = v144;
      if (!v152)
      {
LABEL_134:
        sub_1B08AE1E0(v56, v57, v58);
        v147 = (uint64_t)v282;
LABEL_158:
        v148 = v286;
        v149 = v294;
        goto LABEL_159;
      }
LABEL_130:
      v154 = *(_QWORD *)(v55 + 80);
      v153 = *(_QWORD *)(v55 + 88);
      v155 = *(unsigned __int8 *)(v55 + 96);
      if (v155 >> 4 == 2)
      {
        v281 = *(_QWORD *)(v55 + 88);
        v290 = v145;
        v192 = (~v154 & 0x7FF0000000000000) != 0 || (v154 & 0xFFFFFFFFFFFFFLL) == 0;
        v156 = v154;
        if (v192)
        {
LABEL_184:
          v289 = v156;
          v194 = *(_QWORD *)(v55 + 104);
          v193 = *(_QWORD *)(v55 + 112);
          v195 = *(unsigned __int8 *)(v55 + 120);
          v280 = v154;
          if (v195 >> 4 == 2)
          {
            v277 = v193;
            LODWORD(v278) = v195;
            LODWORD(v279) = v155;
            v291 = v61;
            v288 = v194;
            a2 = v54;
            LODWORD(v26) = v53;
            if ((~v194 & 0x7FF0000000000000) != 0)
              goto LABEL_243;
            v288 = v194;
            if ((v194 & 0xFFFFFFFFFFFFFLL) == 0)
              goto LABEL_243;
            v256 = v194;
            sub_1B08AE1E0(v56, v57, v58);
            sub_1B08AE1E0((uint64_t)v282, v286, v294);
            sub_1B08AE1E0(v280, v281, v279);
            v257 = v256;
          }
          else
          {
            LODWORD(v26) = v53;
            if (v195 >> 4 != 1)
            {
              sub_1B08AE1E0(v56, v57, v58);
              sub_1B08AE1E0((uint64_t)v282, v286, v294);
              sub_1B08AE1E0(v280, v281, v155);
              v291 = 0;
              v11 = 0;
              v288 = 0;
              v289 = 0;
              a2 = v54;
LABEL_261:
              a1 = v276;
              goto LABEL_61;
            }
            v277 = v193;
            LODWORD(v278) = v195;
            LODWORD(v279) = v155;
            v291 = v61;
            v196 = v194;
            v197 = sub_1B0943374(v194);
            a2 = v54;
            if ((v198 & 1) == 0)
            {
              v288 = v197;
              v194 = v196;
LABEL_243:
              v258 = v194;
              sub_1B08AE1E0(v56, v57, v58);
              sub_1B08AE1E0((uint64_t)v282, v286, v294);
              sub_1B08AE1E0(v280, v281, v279);
              sub_1B08AE1E0(v258, v277, v278);
              a1 = v276;
              v11 = v290;
              goto LABEL_61;
            }
            sub_1B08AE1E0(v56, v57, v58);
            sub_1B08AE1E0((uint64_t)v282, v286, v294);
            sub_1B08AE1E0(v280, v281, v279);
            v257 = v196;
          }
          sub_1B08AE1E0(v257, v277, v278);
          v291 = 0;
          v11 = 0;
          v288 = 0;
          v289 = 0;
          goto LABEL_261;
        }
        v236 = v58;
        v237 = v154;
        sub_1B08AE1E0(v56, v57, v236);
        sub_1B08AE1E0((uint64_t)v282, v286, v294);
        v147 = v237;
        goto LABEL_227;
      }
      if (v155 >> 4 == 1)
      {
        v290 = v145;
        v291 = v61;
        v280 = v154;
        v281 = v153;
        v156 = sub_1B0943374(v154);
        if ((v157 & 1) == 0)
        {
          v154 = v280;
          v61 = v291;
          goto LABEL_184;
        }
        sub_1B08AE1E0(v56, v57, v58);
        sub_1B08AE1E0((uint64_t)v282, v286, v294);
        v147 = v280;
LABEL_227:
        v148 = v281;
        v149 = v155;
        goto LABEL_159;
      }
      goto LABEL_134;
    }
    if (v294 >> 4 == 1)
    {
      v291 = v61;
      v286 = v143;
      v145 = sub_1B0943374(v144);
      if ((v146 & 1) != 0)
      {
        sub_1B08AE1E0(v56, v57, v58);
        v147 = v144;
        goto LABEL_158;
      }
      v282 = (uint64_t *)v144;
      v61 = v291;
      goto LABEL_130;
    }
LABEL_122:
    v147 = v56;
    v148 = v57;
    v149 = v58;
LABEL_159:
    sub_1B08AE1E0(v147, v148, v149);
    goto LABEL_160;
  }
  v291 = 0;
  v11 = 0;
  v288 = 0;
  v289 = 0;
  LODWORD(v26) = v53;
LABEL_61:
  v290 = v11;
  if (*(_QWORD *)(a3 + 16))
  {
    v62 = sub_1B08F9DC0(0x65746176697250, 0xE700000000000000, 48);
    if ((v63 & 1) != 0)
    {
      v64 = *(_QWORD *)(a3 + 56) + 24 * v62;
      v65 = *(_BYTE *)(v64 + 16);
      if ((v65 & 0xF0) == 0x80)
      {
        LODWORD(v281) = (_DWORD)v26;
        v26 = (unsigned __int8 *)a1;
        v66 = *(_QWORD *)v64;
        if (*(_QWORD *)(*(_QWORD *)v64 + 16))
        {
          v67 = *(_QWORD *)(v64 + 8);
          sub_1B08AE1E0(*(_QWORD *)v64, v67, v65);
          v68 = sub_1B08F9DC0(0x7372627553, 0xE500000000000000, 48);
          if ((v69 & 1) != 0)
          {
            v275 = a2;
            v70 = *(_QWORD *)(v66 + 56) + 24 * v68;
            v71 = *(_QWORD *)v70;
            v72 = *(_QWORD *)(v70 + 8);
            v73 = *(_BYTE *)(v70 + 16);
            sub_1B08AE1E0(*(_QWORD *)v70, v72, v73);
            sub_1B08AE21C(v66, v67, v65);
            if ((v73 & 0xF0) == 0x70)
            {
              v74 = sub_1B0909328((uint64_t)&unk_1E61A98E0);
              v76 = v75;
              sub_1B08A35B0(v74, v75);
              v286 = sub_1B094589C(v71, v74, v76);
              v294 = 0;
              sub_1B08A3638(v74, v76);
              sub_1B08A3638(v74, v76);
              sub_1B08AE21C(v71, v72, v73);
            }
            else
            {
              sub_1B08AE21C(v71, v72, v73);
              v294 = 0;
              v286 = MEMORY[0x1E0DEE9D8];
            }
            a2 = v275;
            goto LABEL_109;
          }
          sub_1B08AE21C(v66, v67, v65);
        }
        v294 = 0;
        v286 = MEMORY[0x1E0DEE9D8];
LABEL_109:
        a1 = (unint64_t)v26;
        LODWORD(v26) = v281;
        goto LABEL_69;
      }
    }
  }
  v294 = 0;
  v286 = MEMORY[0x1E0DEE9D8];
LABEL_69:
  v77 = sub_1B0A1D4D4();
  v78 = v77;
  v79 = 0;
  *(_QWORD *)(v77 + 16) = 256;
  *(_OWORD *)(v77 + 32) = xmmword_1B0A363C0;
  do
  {
    v80 = (_OWORD *)(v77 + v79);
    v80[3] = xmmword_1B0A363C0;
    v80[4] = xmmword_1B0A363C0;
    v80[5] = xmmword_1B0A363C0;
    v80[6] = xmmword_1B0A363C0;
    v79 += 64;
  }
  while (v79 != 4032);
  *(_OWORD *)(v77 + 4080) = xmmword_1B0A363C0;
  *(_OWORD *)(v77 + 4096) = xmmword_1B0A363C0;
  *(_OWORD *)(v77 + 4112) = xmmword_1B0A363C0;
  v81 = (_QWORD *)sub_1B0A1D4D4();
  v82 = (uint64_t)v81;
  v83 = 0;
  v81[2] = 256;
  v81[4] = 0x666564746F6E2ELL;
  v81[5] = 0xE700000000000000;
  do
  {
    v84 = &v81[v83];
    v84[3] = xmmword_1B0A3A240;
    v84[4] = xmmword_1B0A3A240;
    v84[5] = xmmword_1B0A3A240;
    v84[6] = xmmword_1B0A3A240;
    v83 += 8;
  }
  while (v83 != 504);
  v81[510] = 0x666564746F6E2ELL;
  v81[511] = 0xE700000000000000;
  v81[512] = 0x666564746F6E2ELL;
  v81[513] = 0xE700000000000000;
  v81[514] = 0x666564746F6E2ELL;
  v81[515] = 0xE700000000000000;
  if (!*(_QWORD *)(a3 + 16)
    || (v85 = sub_1B08F9DC0(0x676E69646F636E45, 0xE800000000000000, 48), (v86 & 1) == 0)
    || (v87 = *(_QWORD *)(a3 + 56) + 24 * v85, v88 = *(unsigned __int8 *)(v87 + 16), (v88 & 0xF0) != 0x70)
    || !*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRelease();
    v96 = v292;
    goto LABEL_84;
  }
  LODWORD(v281) = (_DWORD)v26;
  v89 = *(_QWORD *)v87;
  v277 = *(_QWORD *)(v87 + 8);
  swift_bridgeObjectRetain();
  v90 = sub_1B08F9DC0(0x6972745372616843, 0xEB0000000073676ELL, 48);
  if ((v91 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v139 = v89;
    goto LABEL_111;
  }
  v274 = v89;
  v92 = *(_QWORD *)(a3 + 56) + 24 * v90;
  v93 = *(_QWORD *)(v92 + 8);
  v94 = *(unsigned __int8 *)(v92 + 16);
  v273 = *(_QWORD *)v92;
  sub_1B08AE1E0(v273, v93, v94);
  swift_bridgeObjectRelease();
  if ((v94 & 0xF0) == 0x80)
  {
    v268 = v93;
    v269 = v94;
    v95 = *(_QWORD *)(v274 + 16);
    if (v95 >= 0x100)
      v95 = 256;
    v96 = v292;
    v97 = v277;
    LOBYTE(v26) = v281;
    v279 = v95;
    if (!v95)
    {
      sub_1B08AE21C(v274, v277, v88);
      sub_1B08AE21C(v273, v268, v269);
      goto LABEL_84;
    }
    HIDWORD(v266) = v88;
    swift_bridgeObjectRetain();
    v98 = v274;
    v99 = 0;
    v26 = (unsigned __int8 *)(v274 + 48);
    v100 = (unint64_t *)(v78 + 40);
    v101 = (uint64_t *)(v82 + 40);
    v275 = a2;
    v276 = a1;
    while (1)
    {
      a3 = *v26;
      if ((a3 & 0xF0) == 0x30)
      {
        v282 = v101;
        v278 = v100;
        a1 = *((_QWORD *)v26 - 2);
        v119 = *((_QWORD *)v26 - 1);
        v17 = v99;
        sub_1B08AE1E0(a1, v119, a3);
        v120 = *(_QWORD *)(v82 + 16);
        swift_bridgeObjectRetain();
        v280 = v17;
        if (v17 >= v120)
        {
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
          while (2)
          {
            __break(1u);
LABEL_270:
            v262 = v121;
            sub_1B08FFF54();
            v121 = v262;
LABEL_151:
            v18 = v294;
            v170 = v78;
            v171 = v78 >> 4;
            if ((a1 & 1) != 0)
            {
              v172 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v121);
              v16 = *v172;
              v173 = v172[1];
            }
            else
            {
              v16 = 0;
              v173 = 0;
            }
            v289 = v121;
            if (v171 == 5 || v171 == 3)
            {
              swift_bridgeObjectRelease();
              LOBYTE(v16) = v291;
              v174 = v290;
LABEL_162:
              v293 = v295;
              if ((a1 & 1) != 0)
              {
                v175 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v289);
                *v175 = v174;
                v175[1] = v119;
              }
              else
              {
                sub_1B08FCA38(v289, 0, v174, v119, (_QWORD *)v295);
              }
            }
            else
            {
              sub_1B08AE21C(v290, v119, v170);
              v174 = v16;
              v119 = v173;
              LOBYTE(v16) = v291;
              if (v173)
                goto LABEL_162;
              v293 = v295;
              if ((a1 & 1) != 0)
                sub_1B08A7F88(v289, v295);
            }
            a2 = v275;
            a1 = v276;
LABEL_166:
            if (!*(_QWORD *)(v17 + 16))
              goto LABEL_49;
            v176 = sub_1B08F9DC0(0x614E796C696D6146, 0xEA0000000000656DLL, 48);
            if ((v177 & 1) == 0)
              goto LABEL_193;
            v178 = *(_QWORD *)(v17 + 56) + 24 * v176;
            v119 = *(_QWORD *)(v178 + 8);
            LODWORD(v78) = *(unsigned __int8 *)(v178 + 16);
            v290 = *(_QWORD *)v178;
            sub_1B08AE1E0(v290, v119, v78);
            v179 = v293;
            v180 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v295 = v179;
            v121 = sub_1B08FA028(1u);
            v182 = *(_QWORD *)(v179 + 16);
            v183 = (v181 & 1) == 0;
            v184 = v182 + v183;
            if (__OFADD__(v182, v183))
              continue;
            break;
          }
          LOBYTE(a1) = v181;
          if (*(_QWORD *)(v179 + 24) < v184)
          {
            sub_1B08FB77C(v184, v180);
            v185 = sub_1B08FA028(1u);
            if ((a1 & 1) != (v186 & 1))
              goto LABEL_282;
            v121 = v185;
            goto LABEL_173;
          }
          if ((v180 & 1) == 0)
            goto LABEL_272;
LABEL_173:
          while (2)
          {
            v18 = v294;
            v187 = v78;
            v188 = v78 >> 4;
            if ((a1 & 1) != 0)
            {
              v189 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v121);
              v16 = *v189;
              v190 = v189[1];
            }
            else
            {
              v16 = 0;
              v190 = 0;
            }
            v289 = v121;
            if (v188 == 5 || v188 == 3)
            {
              swift_bridgeObjectRelease();
              LOBYTE(v16) = v291;
              v191 = v290;
LABEL_189:
              v293 = v295;
              if ((a1 & 1) != 0)
              {
                v199 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v289);
                *v199 = v191;
                v199[1] = v119;
              }
              else
              {
                sub_1B08FCA38(v289, 1, v191, v119, (_QWORD *)v295);
              }
            }
            else
            {
              sub_1B08AE21C(v290, v119, v187);
              v191 = v16;
              v119 = v190;
              LOBYTE(v16) = v291;
              if (v190)
                goto LABEL_189;
              v293 = v295;
              if ((a1 & 1) != 0)
                sub_1B08A7F88(v289, v295);
            }
            a2 = v275;
            a1 = v276;
LABEL_193:
            if (!*(_QWORD *)(v17 + 16))
              goto LABEL_49;
            v200 = sub_1B08F9DC0(0x746867696557, 0xE600000000000000, 48);
            if ((v201 & 1) != 0)
            {
              v202 = *(_QWORD *)(v17 + 56) + 24 * v200;
              v119 = *(_QWORD *)(v202 + 8);
              LODWORD(v78) = *(unsigned __int8 *)(v202 + 16);
              v290 = *(_QWORD *)v202;
              sub_1B08AE1E0(v290, v119, v78);
              v203 = v293;
              v204 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v295 = v203;
              v121 = sub_1B08FA028(2u);
              v206 = *(_QWORD *)(v203 + 16);
              v207 = (v205 & 1) == 0;
              v208 = v206 + v207;
              if (__OFADD__(v206, v207))
              {
                __break(1u);
LABEL_272:
                v263 = v121;
                sub_1B08FFF54();
                v121 = v263;
                continue;
              }
              LOBYTE(a1) = v205;
              if (*(_QWORD *)(v203 + 24) < v208)
              {
                sub_1B08FB77C(v208, v204);
                v209 = sub_1B08FA028(2u);
                if ((a1 & 1) != (v210 & 1))
                  goto LABEL_282;
                v121 = v209;
                goto LABEL_200;
              }
              if ((v204 & 1) == 0)
                goto LABEL_274;
LABEL_200:
              v18 = v294;
              v211 = v78;
              v212 = v78 >> 4;
              if ((a1 & 1) != 0)
              {
                v213 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v121);
                v16 = *v213;
                v214 = v213[1];
              }
              else
              {
                v16 = 0;
                v214 = 0;
              }
              v289 = v121;
              if (v212 == 5 || v212 == 3)
              {
                swift_bridgeObjectRelease();
                LOBYTE(v16) = v291;
                v215 = v290;
LABEL_207:
                v293 = v295;
                if ((a1 & 1) != 0)
                {
                  v216 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v289);
                  *v216 = v215;
                  v216[1] = v119;
                }
                else
                {
                  sub_1B08FCA38(v289, 2, v215, v119, (_QWORD *)v295);
                }
              }
              else
              {
                sub_1B08AE21C(v290, v119, v211);
                v215 = v16;
                v119 = v214;
                LOBYTE(v16) = v291;
                if (v214)
                  goto LABEL_207;
                v293 = v295;
                if ((a1 & 1) != 0)
                  sub_1B08A7F88(v289, v295);
              }
              a2 = v275;
              a1 = v276;
            }
            break;
          }
          if (!*(_QWORD *)(v17 + 16))
            goto LABEL_49;
          v217 = sub_1B08F9DC0(0x656D614E6C6C7546, 0xE800000000000000, 48);
          if ((v218 & 1) == 0)
            goto LABEL_233;
          v219 = *(_QWORD *)(v17 + 56) + 24 * v217;
          v119 = *(_QWORD *)(v219 + 8);
          LODWORD(v78) = *(unsigned __int8 *)(v219 + 16);
          v290 = *(_QWORD *)v219;
          sub_1B08AE1E0(v290, v119, v78);
          v220 = v293;
          v221 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v295 = v220;
          v121 = sub_1B08FA028(4u);
          v223 = *(_QWORD *)(v220 + 16);
          v224 = (v222 & 1) == 0;
          v225 = v223 + v224;
          if (__OFADD__(v223, v224))
          {
            __break(1u);
LABEL_274:
            v264 = v121;
            sub_1B08FFF54();
            v121 = v264;
            goto LABEL_200;
          }
          LOBYTE(v226) = v222;
          if (*(_QWORD *)(v220 + 24) < v225)
          {
            sub_1B08FB77C(v225, v221);
            v227 = sub_1B08FA028(4u);
            if ((v226 & 1) == (v228 & 1))
            {
              v121 = v227;
              goto LABEL_220;
            }
            goto LABEL_282;
          }
          if ((v221 & 1) == 0)
            goto LABEL_276;
LABEL_220:
          while (2)
          {
            v18 = v294;
            v293 = v119;
            v229 = v78;
            v230 = v78 >> 4;
            if ((v226 & 1) != 0)
            {
              v231 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v121);
              v16 = *v231;
              v232 = v231[1];
            }
            else
            {
              v16 = 0;
              v232 = 0;
            }
            v233 = v121;
            if (v230 == 5 || v230 == 3)
            {
              swift_bridgeObjectRelease();
              LOBYTE(v16) = v291;
              v234 = v293;
              v235 = v290;
LABEL_229:
              v293 = v295;
              if ((v226 & 1) != 0)
              {
                v238 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v233);
                *v238 = v235;
                v238[1] = v234;
              }
              else
              {
                sub_1B08FCA38(v233, 4, v235, v234, (_QWORD *)v295);
              }
            }
            else
            {
              sub_1B08AE21C(v290, v293, v229);
              v235 = v16;
              v234 = v232;
              LOBYTE(v16) = v291;
              if (v232)
                goto LABEL_229;
              v293 = v295;
              if ((v226 & 1) != 0)
                sub_1B08A7F88(v233, v295);
            }
            a2 = v275;
            a1 = v276;
LABEL_233:
            if (!*(_QWORD *)(v17 + 16))
              goto LABEL_49;
            v239 = sub_1B08F9DC0(0x6E6F6973726576, 0xE700000000000000, 48);
            if ((v240 & 1) == 0)
              goto LABEL_49;
            v241 = *(_QWORD *)(v17 + 56) + 24 * v239;
            v242 = v18;
            v243 = *(_QWORD *)v241;
            v226 = *(unsigned __int8 *)(v241 + 16);
            v244 = *(_QWORD *)v241;
            v290 = *(_QWORD *)(v241 + 8);
            sub_1B08AE1E0(v244, v290, v226);
            sub_1B08AE21C(v17, v242, v16);
            v245 = v293;
            v119 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v295 = v245;
            v78 = sub_1B08FA028(5u);
            v247 = *(_QWORD *)(v245 + 16);
            v248 = (v246 & 1) == 0;
            v249 = v247 + v248;
            if (__OFADD__(v247, v248))
            {
              __break(1u);
LABEL_276:
              v265 = v121;
              sub_1B08FFF54();
              v121 = v265;
              continue;
            }
            break;
          }
          v250 = v246;
          if (*(_QWORD *)(v245 + 24) >= v249)
          {
            if ((v119 & 1) != 0)
            {
              v253 = v226 >> 4;
              if ((v246 & 1) == 0)
                goto LABEL_239;
            }
            else
            {
              sub_1B08FFF54();
              v253 = v226 >> 4;
              if ((v250 & 1) == 0)
                goto LABEL_239;
            }
LABEL_249:
            v259 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v78);
            v254 = *v259;
            v255 = v259[1];
            goto LABEL_250;
          }
          sub_1B08FB77C(v249, v119);
          v251 = sub_1B08FA028(5u);
          if ((v250 & 1) != (v252 & 1))
            goto LABEL_282;
          v78 = v251;
          v253 = v226 >> 4;
          if ((v250 & 1) != 0)
            goto LABEL_249;
LABEL_239:
          v254 = 0;
          v255 = 0;
LABEL_250:
          if (v253 == 5 || v253 == 3)
          {
            swift_bridgeObjectRelease();
            a2 = v275;
            a1 = v276;
LABEL_254:
            v293 = v295;
            if ((v250 & 1) != 0)
            {
              v260 = (uint64_t *)(*(_QWORD *)(v295 + 56) + 16 * v78);
              v261 = v290;
              *v260 = v243;
              v260[1] = v261;
            }
            else
            {
              sub_1B08FCA38(v78, 5, v243, v290, (_QWORD *)v295);
            }
          }
          else
          {
            sub_1B08AE21C(v243, v290, v226);
            v243 = v254;
            v290 = v255;
            a2 = v275;
            a1 = v276;
            if (v255)
              goto LABEL_254;
            v293 = v295;
            if ((v250 & 1) != 0)
              sub_1B08A7F88(v78, v293);
          }
          goto LABEL_50;
        }
        v101 = v282;
        *(v282 - 1) = a1;
        *v101 = v119;
        swift_bridgeObjectRelease();
        v122 = v273;
        if (*(_QWORD *)(v273 + 16))
        {
          v123 = sub_1B08F9DC0(a1, v119, 48);
          if ((v124 & 1) != 0)
          {
            v125 = *(_QWORD *)(v122 + 56) + 24 * v123;
            v126 = *(_QWORD *)v125;
            v127 = *(unsigned __int8 *)(v125 + 16);
            v271 = *(_QWORD *)(v125 + 8);
            v272 = v126;
            sub_1B08AE1E0(v126, v271, v127);
            sub_1B08AE21C(a1, v119, a3);
            if (v127 >> 4 == 6)
              goto LABEL_96;
            a1 = v276;
            if (v127 >> 4 == 5)
            {
              v128 = v283;
              sub_1B0A1D270();
              v130 = v271;
              v129 = v272;
              v267 = sub_1B0A1D228();
              v270 = v131;
              (*(void (**)(char *, uint64_t))(v284 + 8))(v128, v285);
              sub_1B08AE21C(v129, v130, v127);
              if (v270 >> 60 != 15)
              {
                v271 = v270;
                v272 = v267;
LABEL_96:
                v17 = v294;
                v133 = v271;
                v132 = v272;
                sub_1B08A35B0(v272, v271);
                sub_1B08EFE48(v132, v133, 4);
                if (v17)
                  goto LABEL_281;
                v294 = 0;
                if (*((_QWORD *)&v303 + 1) >> 60 == 11)
                {
                  __break(1u);
                  goto LABEL_280;
                }
                v295 = v303;
                v296 = v304;
                LOWORD(v297) = (_WORD)v305;
                v134 = sub_1B08ED5BC();
                a3 = v135;
                a1 = *((_QWORD *)&v296 + 1);
                v119 = v296;
                sub_1B08CBB10(v295, *((unint64_t *)&v295 + 1));
                sub_1B08CBB10(v119, a1);
                if (v280 >= *(_QWORD *)(v78 + 16))
                  goto LABEL_267;
                v136 = v278;
                v137 = *(v278 - 1);
                v138 = *v278;
                *(v278 - 1) = v134;
                *v136 = a3;
                sub_1B08A3638(v137, v138);
                sub_1B08A3638(v272, v271);
                v100 = v136;
                a2 = v275;
                a1 = v276;
                v97 = v277;
                v98 = v274;
LABEL_102:
                v99 = v280;
                v101 = v282;
                goto LABEL_87;
              }
            }
            else
            {
              sub_1B08AE21C(v272, v271, v127);
            }
            v98 = v274;
            a2 = v275;
            v97 = v277;
            v100 = v278;
            goto LABEL_102;
          }
        }
        sub_1B08AE21C(a1, v119, a3);
        a2 = v275;
        a1 = v276;
        v97 = v277;
        v100 = v278;
        v98 = v274;
        v99 = v280;
      }
LABEL_87:
      ++v99;
      v26 += 24;
      v100 += 2;
      v101 += 2;
      if (v279 == v99)
      {
        v150 = v98;
        v151 = BYTE4(v266);
        sub_1B08AE21C(v98, v97, BYTE4(v266));
        sub_1B08AE21C(v150, v97, v151);
        v139 = v273;
        v140 = v268;
        v141 = v269;
        goto LABEL_112;
      }
    }
  }
  sub_1B08AE21C(v273, v93, v94);
  v139 = v274;
LABEL_111:
  v140 = v277;
  v141 = v88;
LABEL_112:
  sub_1B08AE21C(v139, v140, v141);
  v96 = v292;
  LOBYTE(v26) = v281;
LABEL_84:
  v102 = v294;
  v103 = (char *)sub_1B093F3EC(v82);
  swift_bridgeObjectRelease();
  v306 = v103;
  swift_bridgeObjectRetain();
  sub_1B093DAA0(&v306);
  if (!v102)
  {
    swift_bridgeObjectRelease();
    v104 = v306;
    v105 = sub_1B0906514((uint64_t)v306);
    *((_QWORD *)&v304 + 1) = &type metadata for Type1Encoding;
    v305 = &off_1E61ABFC0;
    *(_QWORD *)&v303 = v104;
    v302 = 0;
    memset(v301, 0, sizeof(v301));
    v298 = 0u;
    v299 = 0u;
    *(_QWORD *)&v300 = 0;
    *((_QWORD *)&v300 + 1) = 2048;
    *(_QWORD *)&v295 = v105;
    sub_1B08AEF8C(&v303, (uint64_t)&v295 + 8);
    result = sub_1B0945E30((uint64_t)v301, (uint64_t)&v298);
    v107 = v296;
    *(_OWORD *)(a5 + 200) = v297;
    v108 = v299;
    *(_OWORD *)(a5 + 216) = v298;
    *(_OWORD *)(a5 + 232) = v108;
    *(_OWORD *)(a5 + 248) = v300;
    *(_OWORD *)(a5 + 168) = v295;
    *(_OWORD *)(a5 + 184) = v107;
    v109 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a5 + 96) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a5 + 112) = v109;
    *(_QWORD *)(a5 + 127) = *(_QWORD *)(a1 + 127);
    v110 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a5 + 48) = v110;
    v111 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a5 + 64) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a5 + 80) = v111;
    v112 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a5 = *(_OWORD *)a1;
    *(_OWORD *)(a5 + 16) = v112;
    *(_WORD *)(a5 + 140) = WORD2(a2);
    *(_DWORD *)(a5 + 136) = a2;
    *(_BYTE *)(a5 + 142) = BYTE6(a2);
    *(_QWORD *)(a5 + 144) = v293;
    *(_QWORD *)(a5 + 152) = v78;
    *(_QWORD *)(a5 + 160) = v286;
    v113 = v316;
    *(_DWORD *)(a5 + 329) = v295;
    *(_DWORD *)(a5 + 332) = *(_DWORD *)((char *)&v295 + 3);
    v114 = v315;
    *(_DWORD *)(a5 + 353) = v303;
    *(_DWORD *)(a5 + 356) = *(_DWORD *)((char *)&v303 + 3);
    v115 = v314;
    *(_DWORD *)(a5 + 393) = v301[0];
    *(_DWORD *)(a5 + 396) = *(_DWORD *)((char *)v301 + 3);
    v116 = v313;
    *(_DWORD *)(a5 + 433) = *(_DWORD *)v312;
    *(_DWORD *)(a5 + 436) = *(_DWORD *)&v312[3];
    v117 = v311;
    *(_DWORD *)(a5 + 457) = *(_DWORD *)v310;
    *(_DWORD *)(a5 + 460) = *(_DWORD *)&v310[3];
    *(_DWORD *)(a5 + 553) = *(_DWORD *)v309;
    *(_DWORD *)(a5 + 556) = *(_DWORD *)&v309[3];
    v118 = v308;
    *(_DWORD *)(a5 + 572) = *(_DWORD *)&v307[3];
    *(_DWORD *)(a5 + 569) = *(_DWORD *)v307;
    *(_QWORD *)(a5 + 264) = 256;
    *(_QWORD *)(a5 + 272) = 1000;
    *(_OWORD *)(a5 + 280) = 0u;
    *(_OWORD *)(a5 + 296) = 0u;
    *(_OWORD *)(a5 + 312) = 0u;
    *(_BYTE *)(a5 + 328) = v113;
    *(_QWORD *)(a5 + 336) = 0;
    *(_QWORD *)(a5 + 344) = 0;
    *(_BYTE *)(a5 + 352) = v114;
    *(_OWORD *)(a5 + 360) = 0u;
    *(_OWORD *)(a5 + 376) = 0u;
    *(_BYTE *)(a5 + 392) = v115;
    *(_OWORD *)(a5 + 400) = 0u;
    *(_OWORD *)(a5 + 416) = 0u;
    *(_BYTE *)(a5 + 432) = v116;
    *(_QWORD *)(a5 + 440) = 0;
    *(_QWORD *)(a5 + 448) = 0;
    *(_BYTE *)(a5 + 456) = v117;
    *(_QWORD *)(a5 + 544) = 0;
    *(_OWORD *)(a5 + 512) = 0u;
    *(_OWORD *)(a5 + 528) = 0u;
    *(_OWORD *)(a5 + 480) = 0u;
    *(_OWORD *)(a5 + 496) = 0u;
    *(_OWORD *)(a5 + 464) = 0u;
    *(_BYTE *)(a5 + 552) = (_BYTE)v26;
    *(_QWORD *)(a5 + 560) = v287;
    *(_BYTE *)(a5 + 568) = v118;
    *(double *)(a5 + 576) = v13;
    *(double *)(a5 + 584) = v20;
    *(_QWORD *)(a5 + 592) = v291;
    *(_QWORD *)(a5 + 600) = v290;
    *(_QWORD *)(a5 + 608) = v289;
    *(_QWORD *)(a5 + 616) = v288;
    *(_QWORD *)(a5 + 632) = 0;
    *(_QWORD *)(a5 + 624) = 0;
    *(_BYTE *)(a5 + 640) = 0;
    *(_BYTE *)(a5 + 641) = v96;
    return result;
  }
LABEL_280:
  swift_release();
  __break(1u);
LABEL_281:
  swift_unexpectedError();
  __break(1u);
LABEL_282:
  result = sub_1B0A1DAD4();
  __break(1u);
  return result;
}

uint64_t sub_1B093F3EC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t result;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = 0;
  v3 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v6 = *(v3 - 1);
    v5 = *v3;
    v7 = qword_1EEEBA510;
    swift_bridgeObjectRetain();
    if (v7 != -1)
      swift_once();
    v8 = off_1EEEBB2F0;
    v9 = sub_1B09291B0(v6, v5, (uint64_t)off_1EEEBB2F0);
    if (v9 < 0
      || (v10 = v9, v9 >= v8[2])
      || ((v11 = (char *)&v8[2 * v9], result = *((_QWORD *)v11 + 4), result == v6)
        ? (v13 = *((_QWORD *)v11 + 5) == v5)
        : (v13 = 0),
          !v13 && (result = sub_1B0A1DA8C(), (result & 1) == 0)))
    {
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if (qword_1EEEBA518 != -1)
      result = swift_once();
    if (v10 >= *((_QWORD *)off_1EEEBB2F8 + 2))
      break;
    v14 = *((unsigned __int16 *)off_1EEEBB2F8 + v10 + 16);
    result = swift_bridgeObjectRelease();
    if (v2 >> 16)
      goto LABEL_27;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_1B08B795C(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v16 = *((_QWORD *)v4 + 2);
    v15 = *((_QWORD *)v4 + 3);
    if (v16 >= v15 >> 1)
      v4 = sub_1B08B795C((char *)(v15 > 1), v16 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v16 + 1;
    v17 = &v4[8 * v16];
    *((_DWORD *)v17 + 8) = v14;
    *((_WORD *)v17 + 18) = v2;
LABEL_4:
    ++v2;
    v3 += 2;
    if (v1 == v2)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1B093F5DC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v11 = v8;
  v12 = a3;
  v13 = a1;
  v14 = a8 >> 1;
  if (a8 >> 1 != a7)
  {
    if ((uint64_t)(a8 >> 1) > a7)
    {
      v10 = a6;
      v17 = *(_QWORD *)(a6 + 8 * a7);
      if (v17 != (int)v17)
        return 4;
      v34 = a2;
      v35 = a4;
      swift_unknownObjectRetain();
      v13 = a7 + 1;
      v18 = (char *)MEMORY[0x1E0DEE9D8];
      v9 = 1;
      while (1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = sub_1B08B64C0(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
        v8 = *((_QWORD *)v18 + 2);
        v19 = *((_QWORD *)v18 + 3);
        if (v8 >= v19 >> 1)
          v18 = sub_1B08B64C0((char *)(v19 > 1), v8 + 1, 1, v18);
        *((_QWORD *)v18 + 2) = v8 + 1;
        v20 = &v18[8 * v8];
        *((_WORD *)v20 + 18) = 0;
        *((_DWORD *)v20 + 8) = v17;
        v20[38] = 1;
        if (v14 == v13)
        {
          swift_unknownObjectRelease();
          a4 = v35;
          v13 = a1;
          v12 = a3;
          a2 = v34;
          goto LABEL_2;
        }
        if (v13 < a7 || v13 >= v14)
          break;
        v17 = *(_QWORD *)(v10 + 8 * v13);
        if (v17 >= (uint64_t)0xFFFFFFFF80000000)
        {
          ++v13;
          if (v17 < 0x80000000)
            continue;
        }
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return 4;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_2:
  v40 = *(_OWORD *)(v11 + 32);
  v41 = *(_OWORD *)(v11 + 80);
  v38 = *(_OWORD *)v11;
  v39 = *(_OWORD *)(v11 + 16);
  v15 = sub_1B08F8C98(v13, a2, v12, a4);
  if ((~v15 & 0xFF000000000000) == 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  v8 = v15;
  if (BYTE6(v15) == 7)
  {
    if ((unint64_t)v15 < *(_QWORD *)(v40 + 16))
    {
      v9 = *(_QWORD *)(v40 + 8 * v15 + 32);
      swift_bridgeObjectRetain();
      goto LABEL_23;
    }
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v14 = HIWORD(v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8A0);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B0A363D0;
  *(_WORD *)(v9 + 36) = WORD2(v8);
  *(_DWORD *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 38) = v14;
LABEL_23:
  v42 = *((_QWORD *)&v38 + 1);
  v22 = swift_bridgeObjectRetain();
  v23 = sub_1B08F8FC8(v22);
  sub_1B08AE280((uint64_t)&v42);
  *(_QWORD *)(v11 + 8) = v23;
  if (v12)
  {
    swift_bridgeObjectRelease();
    v21 = sub_1B093A2E4(v9, 0);
    swift_bridgeObjectRelease();
    return v21;
  }
  v10 = v13;
  v13 = v39;
  v8 = *(_QWORD *)(v39 + 16);
  if (v8)
  {
    LODWORD(v14) = *(_DWORD *)(v39 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_27;
    goto LABEL_41;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  v13 = (uint64_t)sub_1B08B6478(0, v8 + 1, 1, (char *)v13);
LABEL_27:
  v25 = *(_QWORD *)(v13 + 16);
  v24 = *(_QWORD *)(v13 + 24);
  if (v25 >= v24 >> 1)
    v13 = (uint64_t)sub_1B08B6478((char *)(v24 > 1), v25 + 1, 1, (char *)v13);
  *(_QWORD *)(v13 + 16) = v25 + 1;
  *(_DWORD *)(v13 + 4 * v25 + 32) = v14;
  if (*(_QWORD *)(v41 + 16))
  {
    v26 = sub_1B08F9F0C(v10 & 0xFFFFFFFFFFFFFFLL);
    if ((v27 & 1) != 0)
    {
      v28 = *(_DWORD *)(*(_QWORD *)(v41 + 56) + 4 * v26);
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v13 + 16);
      v29 = *(_QWORD *)(v13 + 24);
      if (v30 >= v29 >> 1)
        v13 = (uint64_t)sub_1B08B6478((char *)(v29 > 1), v30 + 1, 1, (char *)v13);
      *(_QWORD *)(v13 + 16) = v30 + 1;
      *(_DWORD *)(v13 + 4 * v30 + 32) = v28;
      *(_QWORD *)(v11 + 16) = v13;
      v31 = v11 + 16;
      v21 = sub_1B093A2E4(v9, 0);
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(*(_QWORD *)v31 + 16);
      if (v32 >= 2)
      {
        sub_1B0902488(v32 - 2, v32);
        return v21;
      }
      __break(1u);
    }
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

BOOL static Type1FontError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t Type1FontError.hash(into:)()
{
  return sub_1B0A1DB34();
}

uint64_t Type1FontError.hashValue.getter()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

uint64_t Type1Font.characterMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B08E1E98(v1 + 168, a1);
}

uint64_t Type1Font.characterMap.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1B093FA34(a1, v1 + 168);
}

uint64_t sub_1B093FA34(uint64_t a1, uint64_t a2)
{
  assignWithTake for CharacterMap(a2, a1);
  return a2;
}

uint64_t (*Type1Font.characterMap.modify())()
{
  return nullsub_1;
}

uint64_t Type1Font.fontInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B093FA8C(v1 + 264, a1);
}

uint64_t sub_1B093FA8C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for FontInfo(a2, a1);
  return a2;
}

uint64_t Type1Font.fontInfo.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1B093FAD0(a1, v1 + 264);
}

uint64_t sub_1B093FAD0(uint64_t a1, uint64_t a2)
{
  assignWithTake for FontInfo(a2, a1);
  return a2;
}

uint64_t (*Type1Font.fontInfo.modify())()
{
  return nullsub_1;
}

uint64_t Type1Font.dataResidence.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 641);
}

uint64_t Type1Font.dataResidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 641) = result;
  return result;
}

uint64_t (*Type1Font.dataResidence.modify())()
{
  return nullsub_1;
}

uint64_t Type1Font.encodingType.getter()
{
  return 1;
}

uint64_t Type1Font.containerType.getter()
{
  return 3;
}

uint64_t sub_1B093FB4C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[1];
  sub_1B08A35B0(*a1, v5);
  sub_1B08EFE48(v4, v5, 4);
  if (!v2)
  {
    if (v11 >> 60 != 11)
    {
      v6 = sub_1B08ED5BC();
      v8 = v7;
      sub_1B08CBB10(v10, v11);
      result = sub_1B08CBB10(v12, v13);
      *a2 = v6;
      a2[1] = v8;
      return result;
    }
    __break(1u);
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t Type1Font.allNames.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1B093D844(v0);
  swift_bridgeObjectRelease();
  return v1;
}

double Type1Font.metadata.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t Type1Font.findCharacterMap(matchingQuery:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B08E1E98(v1 + 168, a1);
}

uint64_t Type1Font.getHorizontalMetrics(glyphID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD v22[7];
  _BYTE v23[23];
  int v24;
  __int16 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  _BYTE v31[40];
  char *v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[23];
  int v41;
  __int16 v42;
  char v43;
  _BYTE v44[40];
  char v45;
  _OWORD v46[3];
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];

  result = 0;
  if ((a1 & 0x8000000000000000) == 0)
  {
    v4 = *(_QWORD *)(v1 + 152);
    if (*(_QWORD *)(v4 + 16) > a1)
    {
      v5 = *(_OWORD *)(v1 + 80);
      v6 = *(_OWORD *)(v1 + 112);
      v52 = *(_OWORD *)(v1 + 96);
      v53[0] = v6;
      v7 = *(_OWORD *)(v1 + 16);
      v8 = *(_OWORD *)(v1 + 48);
      v48 = *(_OWORD *)(v1 + 32);
      v49 = v8;
      v9 = *(_OWORD *)(v1 + 48);
      v10 = *(_OWORD *)(v1 + 80);
      v50 = *(_OWORD *)(v1 + 64);
      v51 = v10;
      v11 = *(_OWORD *)(v1 + 16);
      v47[0] = *(_OWORD *)v1;
      v47[1] = v11;
      v12 = *(_OWORD *)(v1 + 112);
      v39 = v52;
      *(_OWORD *)v40 = v12;
      v35 = v48;
      v36 = v9;
      *(_QWORD *)((char *)v53 + 15) = *(_QWORD *)(v1 + 127);
      v13 = *(_DWORD *)(v1 + 136);
      v14 = *(_WORD *)(v1 + 140);
      v15 = *(_BYTE *)(v1 + 142);
      v16 = *(_QWORD *)(v1 + 160);
      v37 = v50;
      v38 = v5;
      memset(&v44[8], 0, 32);
      v45 = 1;
      *(_QWORD *)&v40[15] = *(_QWORD *)(v1 + 127);
      v33 = v47[0];
      v34 = v7;
      v42 = v14;
      v41 = v13;
      v43 = v15;
      *(_QWORD *)v44 = v16;
      v17 = v4 + 16 * a1;
      memset(v46, 0, 40);
      v18 = *(_QWORD *)(v17 + 40);
      *(_QWORD *)&v22[0] = *(_QWORD *)(v17 + 32);
      *((_QWORD *)&v22[0] + 1) = v18;
      sub_1B08A35B0(*(uint64_t *)&v22[0], v18);
      sub_1B08A35B0(*(uint64_t *)&v22[0], v18);
      sub_1B08CF028((uint64_t)v47);
      sub_1B08A35F4();
      swift_bridgeObjectRetain();
      v19 = sub_1B0A1D090();
      v32[0] = (char *)MEMORY[0x1E0DEE9D8];
      v32[1] = 0;
      sub_1B0941670(v19, v20, v21, v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B08A3638(*(uint64_t *)&v22[0], v18);
      v22[6] = v39;
      *(_OWORD *)v23 = *(_OWORD *)v40;
      *(_QWORD *)&v23[15] = *(_QWORD *)&v40[15];
      v22[2] = v35;
      v22[3] = v36;
      v22[4] = v37;
      v22[5] = v38;
      v22[0] = v33;
      v22[1] = v34;
      v25 = v42;
      v24 = v41;
      v26 = v43;
      v27 = *(_OWORD *)v44;
      v28 = *(_OWORD *)&v44[16];
      v29 = *(_QWORD *)&v44[32];
      if ((v45 & 1) != 0)
      {
        v30 = 1;
        *(_OWORD *)v31 = v46[0];
        *(_OWORD *)&v31[16] = v46[1];
        *(_QWORD *)&v31[32] = *(_QWORD *)&v46[2];
        sub_1B0943D58((uint64_t)v22);
        return 0;
      }
      else
      {
        v30 = 0;
        *(_QWORD *)v31 = *(_QWORD *)&v46[0];
        *(_OWORD *)&v31[8] = *(_OWORD *)((char *)v46 + 8);
        *(_OWORD *)&v31[24] = *(_OWORD *)((char *)&v46[1] + 8);
        sub_1B0943D58((uint64_t)v22);
        return a1;
      }
    }
  }
  return result;
}

uint64_t sub_1B094000C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v4[7];
  v34 = v4[6];
  v35[0] = v11;
  *(_QWORD *)((char *)v35 + 15) = *(_QWORD *)((char *)v4 + 127);
  v12 = v4[3];
  v30 = v4[2];
  v31 = v12;
  v13 = v4[5];
  v32 = v4[4];
  v33 = v13;
  v14 = v4[1];
  v28 = *v4;
  v29 = v14;
  v15 = *((_DWORD *)v4 + 34);
  v16 = *((_WORD *)v4 + 70);
  v17 = *((_BYTE *)v4 + 142);
  v18 = *((_QWORD *)v4 + 20);
  (*(void (**)(char *))(v8 + 16))(v10);
  v19 = v35[0];
  *(_OWORD *)(a4 + 96) = v34;
  *(_OWORD *)(a4 + 112) = v19;
  *(_QWORD *)(a4 + 127) = *(_QWORD *)((char *)v35 + 15);
  v20 = v31;
  *(_OWORD *)(a4 + 32) = v30;
  *(_OWORD *)(a4 + 48) = v20;
  v21 = v33;
  *(_OWORD *)(a4 + 64) = v32;
  *(_OWORD *)(a4 + 80) = v21;
  v22 = v29;
  *(_OWORD *)a4 = v28;
  *(_OWORD *)(a4 + 16) = v22;
  *(_WORD *)(a4 + 140) = v16;
  *(_DWORD *)(a4 + 136) = v15;
  *(_BYTE *)(a4 + 142) = v17;
  *(_QWORD *)(a4 + 144) = v18;
  v24 = (int *)type metadata accessor for Type1CharStringRenderer(0, a2, a3, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4 + v24[11], v10, a2);
  *(_QWORD *)(a4 + v24[12]) = 0;
  v25 = (_QWORD *)(a4 + v24[13]);
  *v25 = 0;
  v25[1] = 0;
  v26 = (_QWORD *)(a4 + v24[14]);
  *v26 = 0;
  v26[1] = 0;
  sub_1B08CF028((uint64_t)&v28);
  return swift_bridgeObjectRetain();
}

Swift::Int Type1Font.getVerticalMetrics(glyphID:)(Swift::Int a1)
{
  __C::CGRect_optional v3;
  _BYTE v4[40];

  Type1Font.getBoundingBox(glyphID:)(&v3, a1);
  sub_1B09361C4((uint64_t)&v3, (uint64_t)v4);
  if (v4[32])
    return 0;
  else
    return a1;
}

void __swiftcall Type1Font.getBoundingBox(glyphID:)(__C::CGRect_optional *__return_ptr retstr, Swift::Int glyphID)
{
  uint64_t v2;
  Swift::Bool v4;
  Swift::Double v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int16 v16;
  char v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  Swift::Double v24;
  double v25;
  double v26;
  _OWORD v27[7];
  _BYTE v28[23];
  int v29;
  __int16 v30;
  char v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[23];
  int v48;
  __int16 v49;
  char v50;
  _BYTE v51[40];
  char v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];

  v4 = 1;
  v5 = 0.0;
  if (glyphID < 0 || (v6 = *(_QWORD *)(v2 + 152), *(_QWORD *)(v6 + 16) <= glyphID))
  {
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
  }
  else
  {
    v7 = *(_OWORD *)(v2 + 80);
    v8 = *(_OWORD *)(v2 + 112);
    v61 = *(_OWORD *)(v2 + 96);
    v62[0] = v8;
    v9 = *(_OWORD *)(v2 + 16);
    v10 = *(_OWORD *)(v2 + 48);
    v57 = *(_OWORD *)(v2 + 32);
    v58 = v10;
    v11 = *(_OWORD *)(v2 + 48);
    v12 = *(_OWORD *)(v2 + 80);
    v59 = *(_OWORD *)(v2 + 64);
    v60 = v12;
    v13 = *(_OWORD *)(v2 + 16);
    v56[0] = *(_OWORD *)v2;
    v56[1] = v13;
    v14 = *(_OWORD *)(v2 + 112);
    v46 = v61;
    *(_OWORD *)v47 = v14;
    v42 = v57;
    v43 = v11;
    *(_QWORD *)((char *)v62 + 15) = *(_QWORD *)(v2 + 127);
    v15 = *(_DWORD *)(v2 + 136);
    v16 = *(_WORD *)(v2 + 140);
    v17 = *(_BYTE *)(v2 + 142);
    v18 = *(_QWORD *)(v2 + 160);
    v44 = v59;
    v45 = v7;
    memset(&v51[8], 0, 32);
    v52 = 1;
    *(_QWORD *)&v47[15] = *(_QWORD *)(v2 + 127);
    v40 = v56[0];
    v41 = v9;
    v49 = v16;
    v48 = v15;
    v50 = v17;
    *(_QWORD *)v51 = v18;
    v19 = v6 + 16 * glyphID;
    v53 = 0u;
    v54 = 0u;
    v55 = 0;
    v20 = *(_QWORD *)(v19 + 40);
    *(_QWORD *)&v27[0] = *(_QWORD *)(v19 + 32);
    *((_QWORD *)&v27[0] + 1) = v20;
    sub_1B08A35B0(*(uint64_t *)&v27[0], v20);
    sub_1B08A35B0(*(uint64_t *)&v27[0], v20);
    sub_1B08CF028((uint64_t)v56);
    sub_1B08A35F4();
    swift_bridgeObjectRetain();
    v21 = sub_1B0A1D090();
    v39[0] = (char *)MEMORY[0x1E0DEE9D8];
    v39[1] = 0;
    sub_1B0941670(v21, v22, v23, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B08A3638(*(uint64_t *)&v27[0], v20);
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
    v4 = v52;
    if ((v52 & 1) == 0)
    {
      v25 = *(double *)&v51[24] - *(double *)&v51[8];
      v26 = *(double *)&v51[32] - *(double *)&v51[16];
      v5 = *(double *)&v51[8];
      v24 = *(double *)&v51[16];
    }
    v27[6] = v46;
    *(_OWORD *)v28 = *(_OWORD *)v47;
    *(_QWORD *)&v28[15] = *(_QWORD *)&v47[15];
    v27[2] = v42;
    v27[3] = v43;
    v27[4] = v44;
    v27[5] = v45;
    v27[0] = v40;
    v27[1] = v41;
    v30 = v49;
    v29 = v48;
    v31 = v50;
    v32 = *(_OWORD *)v51;
    v33 = *(_OWORD *)&v51[16];
    v34 = *(_QWORD *)&v51[32];
    v35 = v52;
    v36 = v53;
    v37 = v54;
    v38 = v55;
    sub_1B0943D58((uint64_t)v27);
  }
  retstr->value.origin.x = v5;
  retstr->value.origin.y = v24;
  retstr->value.size.width = v25;
  retstr->value.size.height = v26;
  retstr->is_nil = v4;
}

uint64_t Type1Font.recordGlyph<A>(glyphIndex:into:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a2;
  v8 = type metadata accessor for Type1CharStringRenderer(0, a3, a4, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - v10;
  if ((a1 & 0x8000000000000000) != 0 || (v12 = *(_QWORD *)(v4 + 152), *(_QWORD *)(v12 + 16) <= (int64_t)a1))
  {
    sub_1B08D7374();
    swift_allocError();
    *v18 = 3;
    return swift_willThrow();
  }
  else
  {
    sub_1B094000C(v20, a3, a4, (uint64_t)v11);
    result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, double, double, double, double))(a4 + 24))(a1, a3, a4, *(double *)(v4 + 592), *(double *)(v4 + 600), *(double *)(v4 + 608), *(double *)(v4 + 616));
    if (*(_QWORD *)(v12 + 16) <= a1)
    {
      __break(1u);
    }
    else
    {
      v14 = v12 + 16 * a1;
      v15 = *(_QWORD *)(v14 + 32);
      v16 = *(_QWORD *)(v14 + 40);
      sub_1B08A35B0(v15, v16);
      sub_1B0977C68(v15, v16, v8, (uint64_t)&off_1E61AE700);
      sub_1B08A3638(v15, v16);
      v17 = &v11[*(int *)(v8 + 44)];
      (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a3 - 8) + 24))(v20, v17, a3);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  return result;
}

uint64_t sub_1B0940628()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 641);
}

uint64_t sub_1B0940630()
{
  return 3;
}

uint64_t sub_1B0940638@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B093FA8C(v1 + 264, a1);
}

double sub_1B0940644@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1B0940658()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1B093D844(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B09406AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B08E1E98(v1 + 168, a1);
}

Swift::Int sub_1B09406DC(Swift::Int a1)
{
  __C::CGRect_optional v3;
  _BYTE v4[40];

  Type1Font.getBoundingBox(glyphID:)(&v3, a1);
  sub_1B09361C4((uint64_t)&v3, (uint64_t)v4);
  if (v4[32])
    return 0;
  else
    return a1;
}

uint64_t sub_1B0940734@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X8>)
{
  __C::CGRect_optional v4;

  Type1Font.getBoundingBox(glyphID:)(&v4, a1);
  return sub_1B09361C4((uint64_t)&v4, a2);
}

uint64_t sub_1B094076C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Type1Font.recordGlyph<A>(glyphIndex:into:)(a1, a2, a3, a4);
}

uint64_t sub_1B0940780(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(a3 + 56));
  *v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_1B0940790(double a1, double a2)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v5)(uint64_t, uint64_t, double, double);
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 32);
  v6 = swift_checkMetadataState();
  return v5(v6, AssociatedConformanceWitness, a1, a2);
}

uint64_t sub_1B0940848(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;

  v4 = (_QWORD *)(v3 + *(int *)(a3 + 56));
  if (__OFADD__(*v4, result))
  {
    __break(1u);
  }
  else
  {
    v5 = v4[1];
    v6 = __OFADD__(v5, a2);
    v7 = v5 + a2;
    if (!v6)
    {
      *v4 += result;
      v4[1] = v7;
      v8 = MEMORY[0x1E0C80A78](result);
      v10 = *(_QWORD *)(v9 + 24);
      v13 = *(_QWORD *)(v9 + 16);
      v14 = v10;
      v15 = v8;
      v16 = v11;
      return (*(uint64_t (**)(uint64_t))(v10 + 40))(v12);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B09408EC(double a1, double a2)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v5)(uint64_t, uint64_t, double, double);
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 24);
  v6 = swift_checkMetadataState();
  return v5(v6, AssociatedConformanceWitness, a1, a2);
}

uint64_t sub_1B09409A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;

  v8 = (_QWORD *)(v7 + *(int *)(a7 + 56));
  if (__OFADD__(*v8, result))
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = v8[1];
  v10 = __OFADD__(v9, a2);
  v11 = v9 + a2;
  if (v10)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *v8 += result;
  v8[1] = v11;
  v12 = (_QWORD *)(v7 + *(int *)(a7 + 56));
  if (__OFADD__(*v12, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v13 = v12[1];
  v10 = __OFADD__(v13, a4);
  v14 = v13 + a4;
  if (v10)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *v12 += a3;
  v12[1] = v14;
  v15 = (_QWORD *)(v7 + *(int *)(a7 + 56));
  if (__OFADD__(*v15, a5))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v16 = v15[1];
  v10 = __OFADD__(v16, a6);
  v17 = v16 + a6;
  if (!v10)
  {
    *v15 += a5;
    v15[1] = v17;
    v18 = MEMORY[0x1E0C80A78](result);
    v20 = *(_QWORD *)(v19 + 24);
    v26 = *(_QWORD *)(v19 + 16);
    v27 = v20;
    v28 = v21;
    v29 = v22;
    v30 = v24;
    v31 = v23;
    v32 = v25;
    v33 = v18;
    return (*(uint64_t (**)(uint64_t (*)()))(v20 + 40))(sub_1B0945BA4);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1B0940AB4(double a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v13)(uint64_t, uint64_t, double, double, double, double, double, double);
  uint64_t v14;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double, double, double))(AssociatedConformanceWitness + 48);
  v14 = swift_checkMetadataState();
  return v13(v14, AssociatedConformanceWitness, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1B0940B9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];

  v1 = *(_QWORD *)(a1 + 24);
  v3[2] = *(_QWORD *)(a1 + 16);
  v3[3] = v1;
  return (*(uint64_t (**)(uint64_t (*)(), _QWORD *))(v1 + 40))(sub_1B0945B8C, v3);
}

uint64_t sub_1B0940BEC()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

void sub_1B0940C8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char v23;

  v6 = *(unsigned __int16 *)(v5 + 140);
  v7 = *(unsigned int *)(v5 + 136);
  v8 = *(unsigned __int8 *)(v5 + 142);
  v9 = sub_1B08B7FA4(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v11 = *((_QWORD *)v9 + 2);
  v10 = *((_QWORD *)v9 + 3);
  if (v11 >= v10 >> 1)
    v9 = sub_1B08B7FA4((char *)(v10 > 1), v11 + 1, 1, v9);
  *((_QWORD *)v9 + 2) = v11 + 1;
  v12 = &v9[24 * v11];
  *((_OWORD *)v12 + 2) = xmmword_1B0A3A250;
  v12[48] = 1;
  swift_bridgeObjectRetain();
  v13 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_1B08B7FA4(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  v14 = v7 | (v6 << 32);
  v16 = *((_QWORD *)v13 + 2);
  v15 = *((_QWORD *)v13 + 3);
  if (v16 >= v15 >> 1)
    v13 = sub_1B08B7FA4((char *)(v15 > 1), v16 + 1, 1, v13);
  v17 = v14 | (v8 << 48);
  *((_QWORD *)v13 + 2) = v16 + 1;
  v18 = &v13[24 * v16];
  *((_OWORD *)v18 + 2) = xmmword_1B0A3A260;
  v18[48] = 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = sub_1B08B7FA4(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
  v21 = *((_QWORD *)v19 + 2);
  v20 = *((_QWORD *)v19 + 3);
  if (v21 >= v20 >> 1)
    v19 = sub_1B08B7FA4((char *)(v20 > 1), v21 + 1, 1, v19);
  *((_QWORD *)v19 + 2) = v21 + 1;
  v22 = &v19[24 * v21];
  *((_QWORD *)v22 + 4) = a5;
  *((_QWORD *)v22 + 5) = 0;
  v22[48] = 2;
  swift_bridgeObjectRelease();
  v23 = sub_1B093F5DC(v17, 0, 0, (uint64_t)v19, a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

void sub_1B0940EEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char v23;

  v6 = *(unsigned __int16 *)(v5 + 140);
  v7 = *(unsigned int *)(v5 + 136);
  v8 = *(unsigned __int8 *)(v5 + 142);
  v9 = sub_1B08B7FA4(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v11 = *((_QWORD *)v9 + 2);
  v10 = *((_QWORD *)v9 + 3);
  if (v11 >= v10 >> 1)
    v9 = sub_1B08B7FA4((char *)(v10 > 1), v11 + 1, 1, v9);
  *((_QWORD *)v9 + 2) = v11 + 1;
  v12 = &v9[24 * v11];
  *((_OWORD *)v12 + 2) = xmmword_1B0A3A250;
  v12[48] = 1;
  swift_bridgeObjectRetain();
  v13 = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_1B08B7FA4(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
  v14 = v7 | (v6 << 32);
  v16 = *((_QWORD *)v13 + 2);
  v15 = *((_QWORD *)v13 + 3);
  if (v16 >= v15 >> 1)
    v13 = sub_1B08B7FA4((char *)(v15 > 1), v16 + 1, 1, v13);
  v17 = v14 | (v8 << 48);
  *((_QWORD *)v13 + 2) = v16 + 1;
  v18 = &v13[24 * v16];
  *((_OWORD *)v18 + 2) = xmmword_1B0A3A260;
  v18[48] = 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v19 = sub_1B08B7FA4(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
  v21 = *((_QWORD *)v19 + 2);
  v20 = *((_QWORD *)v19 + 3);
  if (v21 >= v20 >> 1)
    v19 = sub_1B08B7FA4((char *)(v20 > 1), v21 + 1, 1, v19);
  *((_QWORD *)v19 + 2) = v21 + 1;
  v22 = &v19[24 * v21];
  *((_QWORD *)v22 + 4) = a5;
  *((_QWORD *)v22 + 5) = 0;
  v22[48] = 2;
  swift_bridgeObjectRelease();
  v23 = sub_1B093F5DC(v17, 0, 0, (uint64_t)v19, a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

void sub_1B0941154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  int v8;
  double v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v1 >= (uint64_t)v3)
  {
    sub_1B08D7374();
    swift_allocError();
    *v10 = 6;
    swift_willThrow();
    return;
  }
  v4 = v3 - 1 - v1;
  if (__OFSUB__(v3 - 1, v1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 >= v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1B08F9138(*(unsigned int *)(v2 + 8 * v4 + 32) | ((unint64_t)*(unsigned __int16 *)(v2 + 8 * v4 + 36) << 32) | ((unint64_t)*(unsigned __int8 *)(v2 + 8 * v4 + 38) << 48));
  v8 = v7 >> 4;
  if (v8 == 1)
  {
LABEL_9:
    *(_QWORD *)(v0 + 192) = v1 + 1;
    return;
  }
  if (v8 == 2)
  {
    v9 = round(*(double *)&v5);
    if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
    {
      if (v9 > -9.22337204e18)
      {
        if (v9 < 9.22337204e18)
          goto LABEL_9;
        goto LABEL_17;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1B08AE21C(v5, v6, v7);
  sub_1B08D7374();
  swift_allocError();
  *v11 = 6;
  swift_willThrow();
  v12 = *(_QWORD *)(v0 + 192);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (!v13)
  {
    *(_QWORD *)(v0 + 192) = v14;
    return;
  }
LABEL_18:
  __break(1u);
}

void sub_1B0941338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE *v15;
  double v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 48));
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v3 + 16);
  if (v2 >= (uint64_t)v4)
    goto LABEL_9;
  v6 = __OFSUB__(v4 - 1, v2);
  v7 = v4 - 1 - v2;
  if (v6)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v7 >= v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  sub_1B08F9138(*(unsigned int *)(v3 + 8 * v7 + 32) | ((unint64_t)*(unsigned __int16 *)(v3 + 8 * v7 + 36) << 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 8 * v7 + 38) << 48));
  v12 = v10 >> 4;
  if (v12 == 2)
  {
    v16 = round(*(double *)&v8);
    if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
    {
      if (v16 > -9.22337204e18)
      {
        if (v16 < 9.22337204e18)
        {
          v13 = (uint64_t *)(v1
                          + *(int *)(type metadata accessor for Type1CharStringRenderer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v11)+ 48));
          v14 = *v13 + 1;
          if (!__OFADD__(*v13, 1))
          {
LABEL_14:
            *v13 = v14;
            return;
          }
          goto LABEL_22;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v12 == 1)
  {
    v13 = (uint64_t *)(v1
                    + *(int *)(type metadata accessor for Type1CharStringRenderer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v11)+ 48));
    v14 = *v13 + 1;
    if (!__OFADD__(*v13, 1))
      goto LABEL_14;
    __break(1u);
LABEL_9:
    sub_1B08D7374();
    swift_allocError();
    *v15 = 6;
    swift_willThrow();
    return;
  }
  sub_1B08AE21C(v8, v9, v10);
  sub_1B08D7374();
  swift_allocError();
  *v17 = 6;
  swift_willThrow();
  v19 = *(int *)(type metadata accessor for Type1CharStringRenderer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v18)+ 48);
  v20 = *(_QWORD *)(v1 + v19);
  v6 = __OFADD__(v20, 1);
  v21 = v20 + 1;
  if (!v6)
  {
    *(_QWORD *)(v1 + v19) = v21;
    return;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1B094158C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0945AE4(a1, a3);
}

uint64_t sub_1B0941594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return nullsub_1(a6);
}

uint64_t sub_1B094159C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B0945B00(a1, a2, a5);
}

uint64_t sub_1B09415AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0940848(a1, a2, a3);
}

uint64_t sub_1B09415C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0940848(a1, a2, a3);
}

uint64_t sub_1B09415EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_1(a3);
}

uint64_t sub_1B09415F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return nullsub_1(a7);
}

uint64_t sub_1B09415FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = sub_1B0945B1C(a1);
  v4 = v2;
  if (!v1)
    sub_1B08A35B0(v2, v3);
  return v4;
}

void sub_1B0941648(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  sub_1B0940EEC(a1, a2, a3, a4, a5);
}

void sub_1B094165C(uint64_t a1)
{
  sub_1B0941338(a1);
}

uint64_t sub_1B0941670(uint64_t result, int64_t a2, uint64_t a3, char **a4)
{
  uint64_t v4;
  int64_t v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned int v28;
  signed int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char **v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  _QWORD *v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  id v179;
  char *v180;
  char v181;
  _BYTE *v182;
  uint64_t v183;
  _QWORD *(*v184)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  _QWORD *(*v185)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  char *v189;
  char *v190;
  char v191;
  uint64_t v192;
  char **v193;
  __int128 v194;
  void *v195;
  id v196[2];
  unsigned __int8 v198;
  uint64_t v199;
  id v200;
  char v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;

  if (result == a2)
    return result;
  v6 = a2;
  v7 = result;
  v192 = v4;
  swift_bridgeObjectRetain();
  v8 = sub_1B0945C44;
  v193 = a4;
  while (2)
  {
    if (__OFSUB__(v6, v7))
    {
      __break(1u);
LABEL_243:
      __break(1u);
LABEL_244:
      __break(1u);
LABEL_245:
      __break(1u);
LABEL_246:
      __break(1u);
LABEL_247:
      __break(1u);
LABEL_248:
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __break(1u);
LABEL_261:
      __break(1u);
LABEL_262:
      __break(1u);
LABEL_263:
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
      goto LABEL_279;
    }
    if ((uint64_t)(v6 - v7) <= 0)
    {
      *(_QWORD *)&v202 = 0;
      *((_QWORD *)&v202 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      sub_1B0A1D8A0();
      swift_bridgeObjectRelease();
      sub_1B08A36F0();
      swift_allocError();
      *v174 = 0;
      v174[1] = v7;
      v174[2] = 0xD00000000000002ALL;
      v174[3] = 0x80000001B0A25FA0;
      v174[4] = 0;
      swift_willThrow();
      return swift_bridgeObjectRelease_n();
    }
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_243;
    v9 = v7 + 1;
    if (v6 < (uint64_t)(v7 + 1))
      goto LABEL_243;
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_244;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10 < v7 || v10 < v9)
      goto LABEL_245;
    v11 = *(unsigned __int8 *)(a3 + v7 + 32);
    swift_bridgeObjectRetain();
    if ((_DWORD)v11 == 12)
    {
      sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      *(_QWORD *)&v202 = v7 + 1;
      *((_QWORD *)&v202 + 1) = v6;
      *(_QWORD *)&v203 = a3;
      swift_bridgeObjectRetain();
      sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      swift_bridgeObjectRetain();
      sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      v13 = sub_1B08C9FC0((unint64_t *)&v202, v12);
      v14 = v195;
      if (!v195)
      {
        v15 = v13;
        swift_bridgeObjectRelease();
        v16 = v15;
        v17 = *((_QWORD *)&v202 + 1);
        v7 = v202;
        v18 = v203;
        v205 = v16;
        sub_1B0977D00(&v205, (uint64_t)&v200);
        swift_bridgeObjectRelease();
        v195 = 0;
        sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
        sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
        v11 = (uint64_t)v200;
        v19 = v201;
        sub_1B0945D24(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8);
        v20 = v8;
        sub_1B0945D24(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8);
        v6 = v17;
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945D24(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8);
      sub_1B0945D24(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8);
      goto LABEL_222;
    }
    if (v11 < 0x20)
    {
      sub_1B0945CEC(v11, 0, 0, 1, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945CEC(v11, 0, 0, 1, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      v20 = v8;
      sub_1B0945D24(v11, 0, 0, 1, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8);
      swift_bridgeObjectRelease();
      ++v7;
      goto LABEL_19;
    }
    if (v11 < 0xF7)
    {
      v11 -= 139;
      sub_1B0945CEC(v11, 1, 0, 0, 256, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945CEC(v11, 1, 0, 0, 256, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945D24(v11, 1, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8);
      v18 = a3;
      swift_bridgeObjectRelease();
      ++v7;
LABEL_24:
      v21 = *a4;
      v22 = *((_QWORD *)*a4 + 2);
      if (v22 >= 0x30)
      {
        sub_1B0945C00();
        swift_allocError();
        *v182 = 4;
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = sub_1B08B5E40(0, v22 + 1, 1, v21);
      v24 = *((_QWORD *)v21 + 2);
      v23 = *((_QWORD *)v21 + 3);
      if (v24 >= v23 >> 1)
        v21 = sub_1B08B5E40((char *)(v23 > 1), v24 + 1, 1, v21);
      *((_QWORD *)v21 + 2) = v24 + 1;
      *(_QWORD *)&v21[8 * v24 + 32] = v11;
      a4 = v193;
      *v193 = v21;
      a3 = v18;
LABEL_30:
      v8 = sub_1B0945C44;
      goto LABEL_4;
    }
    if (v11 < 0xFB)
    {
      v25 = swift_allocObject();
      *(_BYTE *)(v25 + 16) = v11;
      *(_QWORD *)&v202 = v7 + 1;
      *((_QWORD *)&v202 + 1) = v6;
      *(_QWORD *)&v203 = a3;
      swift_bridgeObjectRetain_n();
      sub_1B0945CEC((uint64_t)sub_1B0945E18, v25, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      swift_retain();
      v26 = sub_1B097990C((unint64_t *)&v202);
      v14 = v195;
      if (!v195)
      {
        v198 = v26;
        sub_1B0977D14(&v198, *(_BYTE *)(v25 + 16), &v199);
        swift_bridgeObjectRelease();
        v6 = *((_QWORD *)&v202 + 1);
        v7 = v202;
        v18 = v203;
        v205 = v199;
        sub_1B0977D3C(&v205, (uint64_t)&v200);
        swift_bridgeObjectRelease();
        swift_release();
        v195 = 0;
        sub_1B0945CEC((uint64_t)sub_1B0945E18, v25, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
        v11 = (uint64_t)v200;
        v19 = v201;
        v20 = sub_1B0945C44;
        sub_1B0945CEC((uint64_t)sub_1B0945E18, v25, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B0945CEC((uint64_t)sub_1B0945E18, v25, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945CEC((uint64_t)sub_1B0945E18, v25, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
LABEL_222:
      v200 = v14;
      v175 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7D0);
      if (swift_dynamicCast())
      {

        v194 = v203;
        *(_OWORD *)v196 = v202;
        v176 = v204;
        sub_1B08A36F0();
        swift_allocError();
        *(_OWORD *)v177 = *(_OWORD *)v196;
        *(_OWORD *)(v177 + 16) = v194;
        *(_QWORD *)(v177 + 32) = v176;
        swift_willThrow();

      }
      else
      {

        sub_1B08A36F0();
        swift_allocError();
        *v178 = v14;
        v178[1] = v9;
        v178[2] = 0x7272652072657355;
        v178[3] = 0xEA0000000000726FLL;
        v178[4] = v14;
        v179 = v14;
        swift_willThrow();
      }
      return swift_bridgeObjectRelease_n();
    }
    if ((_DWORD)v11 == 255)
    {
      v20 = v8;
      sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      *(_QWORD *)&v202 = v7 + 1;
      *((_QWORD *)&v202 + 1) = v6;
      *(_QWORD *)&v203 = a3;
      swift_bridgeObjectRetain();
      sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      swift_bridgeObjectRetain();
      sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      v28 = sub_1B08C15D0((uint64_t *)&v202, v27, 1);
      v14 = v195;
      if (!v195)
      {
        v29 = v28;
        swift_bridgeObjectRelease();
        v30 = v29;
        v6 = *((_QWORD *)&v202 + 1);
        v7 = v202;
        v18 = v203;
        v205 = v30;
        sub_1B0979B94(&v205, (uint64_t)&v200);
        v195 = 0;
        swift_bridgeObjectRelease();
        sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
        sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
        v11 = (uint64_t)v200;
        v19 = v201;
        sub_1B0945C74((void *)1, (uint64_t)sub_1B0979B94, 0, 0, (void *)1, 0);
        sub_1B0945C74((void *)1, (uint64_t)sub_1B0979B94, 0, 0, (void *)1, 0);
LABEL_15:
        swift_bridgeObjectRelease();
        a3 = v18;
        a4 = v193;
        if ((v19 & 1) != 0)
          goto LABEL_24;
        goto LABEL_19;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945C74((void *)1, (uint64_t)sub_1B0979B94, 0, 0, (void *)1, 0);
      v183 = 1;
      v184 = sub_1B0979B94;
      v185 = 0;
      v186 = 1;
      goto LABEL_235;
    }
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = v11;
    *(_QWORD *)&v202 = v7 + 1;
    *((_QWORD *)&v202 + 1) = v6;
    *(_QWORD *)&v203 = a3;
    swift_bridgeObjectRetain();
    sub_1B0945CEC((uint64_t)sub_1B0945DF0, v31, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
    swift_bridgeObjectRetain();
    sub_1B0945CEC((uint64_t)sub_1B0945DF0, v31, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
    swift_retain();
    v32 = sub_1B097990C((unint64_t *)&v202);
    v14 = v195;
    if (v195)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B0945CEC((uint64_t)sub_1B0945DF0, v31, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945CEC((uint64_t)sub_1B0945DF0, v31, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      v183 = (uint64_t)sub_1B0945DF0;
      v184 = (_QWORD *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>))v31;
      v185 = sub_1B0979B94;
      v186 = 0;
LABEL_235:
      sub_1B0945C74((void *)v183, (uint64_t)v184, (uint64_t)v185, 0, (void *)v186, 0);
      goto LABEL_222;
    }
    v198 = v32;
    sub_1B0977D50(&v198, *(_BYTE *)(v31 + 16), &v199);
    swift_bridgeObjectRelease();
    v6 = *((_QWORD *)&v202 + 1);
    v7 = v202;
    v18 = v203;
    v205 = v199;
    sub_1B0979B94(&v205, (uint64_t)&v200);
    swift_bridgeObjectRelease();
    swift_release();
    v195 = 0;
    sub_1B0945CEC((uint64_t)sub_1B0945DF0, v31, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
    v11 = (uint64_t)v200;
    v191 = v201;
    v20 = sub_1B0945C44;
    sub_1B0945CEC((uint64_t)sub_1B0945DF0, v31, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
    sub_1B0945C74(sub_1B0945DF0, v31, (uint64_t)sub_1B0979B94, 0, 0, 0);
    swift_bridgeObjectRelease();
    a3 = v18;
    a4 = v193;
    if ((v191 & 1) != 0)
      goto LABEL_24;
LABEL_19:
    v8 = v20;
    switch(v11)
    {
      case 1:
      case 3:
        if (*((_QWORD *)*a4 + 2) <= 1uLL)
          goto LABEL_226;
        goto LABEL_3;
      case 2:
      case 12:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
LABEL_236:
        swift_bridgeObjectRelease();
        sub_1B0945C00();
        swift_allocError();
        *v187 = 2;
        return swift_willThrow();
      case 4:
        v33 = *a4;
        if (!*((_QWORD *)*a4 + 2))
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v34 = *((_QWORD *)v33 + 4);
        swift_bridgeObjectRelease();
        v35 = v192;
        v36 = *(_QWORD *)(v192 + 224);
        v37 = __OFADD__(v36, v34);
        v38 = v36 + v34;
        if (!v37)
          goto LABEL_58;
        goto LABEL_246;
      case 5:
        v39 = *a4;
        if (*((_QWORD *)*a4 + 2) <= 1uLL)
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v41 = *((_QWORD *)v39 + 4);
        v40 = *((_QWORD *)v39 + 5);
        swift_bridgeObjectRelease();
        v42 = v192;
        v43 = *(_QWORD *)(v192 + 216);
        v37 = __OFADD__(v43, v41);
        v44 = v43 + v41;
        if (v37)
          goto LABEL_247;
        v45 = *(_QWORD *)(v192 + 224);
        v37 = __OFADD__(v45, v40);
        v46 = v45 + v40;
        if (!v37)
          goto LABEL_90;
        goto LABEL_248;
      case 6:
        v47 = *a4;
        if (!*((_QWORD *)*a4 + 2))
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v48 = *((_QWORD *)v47 + 4);
        swift_bridgeObjectRelease();
        v35 = v192;
        v49 = *(_QWORD *)(v192 + 216);
        v37 = __OFADD__(v49, v48);
        v50 = v49 + v48;
        if (!v37)
          goto LABEL_94;
        goto LABEL_249;
      case 7:
        v51 = *a4;
        if (!*((_QWORD *)*a4 + 2))
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v52 = *((_QWORD *)v51 + 4);
        swift_bridgeObjectRelease();
        v35 = v192;
        v53 = *(_QWORD *)(v192 + 224);
        v37 = __OFADD__(v53, v52);
        v38 = v53 + v52;
        if (v37)
          goto LABEL_250;
LABEL_58:
        *(_QWORD *)(v35 + 224) = v38;
        v54 = (double)*(uint64_t *)(v35 + 216);
        v55 = (double)v38;
        if ((*(_BYTE *)(v35 + 184) & 1) == 0)
          goto LABEL_59;
        goto LABEL_95;
      case 8:
        v60 = *a4;
        if (*((_QWORD *)*a4 + 2) <= 5uLL)
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v61 = *((_QWORD *)v60 + 4);
        v62 = *((_QWORD *)v60 + 5);
        v64 = *((_QWORD *)v60 + 6);
        v63 = *((_QWORD *)v60 + 7);
        v66 = *((_QWORD *)v60 + 8);
        v65 = *((_QWORD *)v60 + 9);
        swift_bridgeObjectRelease();
        v67 = *(_QWORD *)(v192 + 216);
        v37 = __OFADD__(v67, v61);
        v68 = v67 + v61;
        if (v37)
          goto LABEL_251;
        v69 = *(_QWORD *)(v192 + 224);
        v37 = __OFADD__(v69, v62);
        v70 = v69 + v62;
        if (v37)
          goto LABEL_252;
        *(_QWORD *)(v192 + 216) = v68;
        *(_QWORD *)(v192 + 224) = v70;
        v71 = v68 + v64;
        a4 = v193;
        if (__OFADD__(v68, v64))
          goto LABEL_253;
        v72 = v70 + v63;
        v8 = sub_1B0945C44;
        if (__OFADD__(v70, v63))
          goto LABEL_254;
        *(_QWORD *)(v192 + 216) = v71;
        *(_QWORD *)(v192 + 224) = v72;
        v73 = v71 + v66;
        if (__OFADD__(v71, v66))
          goto LABEL_255;
        v74 = v72 + v65;
        if (__OFADD__(v72, v65))
          goto LABEL_256;
        *(_QWORD *)(v192 + 216) = v73;
        *(_QWORD *)(v192 + 224) = v74;
        sub_1B0915878((double)v73, (double)v74, (double)v68, (double)v70, (double)v71, (double)v72);
        goto LABEL_4;
      case 9:
      case 14:
LABEL_3:
        swift_bridgeObjectRelease();
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        goto LABEL_4;
      case 10:
        v75 = *a4;
        if (!*((_QWORD *)*a4 + 2))
          goto LABEL_228;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v76 = *((_QWORD *)v75 + 2);
          if (!v76)
            goto LABEL_268;
        }
        else
        {
          v75 = sub_1B0953AFC((uint64_t)v75);
          v76 = *((_QWORD *)v75 + 2);
          if (!v76)
            goto LABEL_268;
        }
        v77 = v76 - 1;
        v78 = *(_QWORD *)&v75[8 * v76 + 24];
        *((_QWORD *)v75 + 2) = v77;
        *a4 = v75;
        if ((v78 & 0x8000000000000000) == 0)
        {
          v79 = *(_QWORD *)(v192 + 144);
          if (v78 < *(_QWORD *)(v79 + 16))
          {
            v80 = v79 + 16 * v78;
            v82 = *(_QWORD *)(v80 + 32);
            v81 = *(_QWORD *)(v80 + 40);
            v83 = (uint64_t)a4[1];
            if (v83 >= 10)
            {
              sub_1B0945C00();
              swift_allocError();
              *v188 = 5;
              sub_1B08A35B0(v82, v81);
              swift_willThrow();
              swift_bridgeObjectRelease();
              return sub_1B08A3638(v82, v81);
            }
            a4[1] = (char *)(v83 + 1);
            *(_QWORD *)&v202 = v82;
            *((_QWORD *)&v202 + 1) = v81;
            sub_1B08A35B0(v82, v81);
            sub_1B08A35B0(v82, v81);
            sub_1B08A35F4();
            v84 = sub_1B0A1D090();
            sub_1B0941670(v84);
            if (v195)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = sub_1B08A3638(v82, v81);
              v189 = a4[1];
              v37 = __OFSUB__(v189, 1);
              v190 = v189 - 1;
              if (!v37)
              {
                a4[1] = v190;
                return result;
              }
LABEL_279:
              __break(1u);
              JUMPOUT(0x1B0943270);
            }
            swift_bridgeObjectRelease();
            sub_1B08A3638(v82, v81);
            v85 = a4[1];
            v37 = __OFSUB__(v85, 1);
            v86 = v85 - 1;
            if (v37)
              goto LABEL_275;
            a4[1] = v86;
            goto LABEL_30;
          }
        }
        sub_1B08D7374();
        swift_allocError();
        v181 = 3;
        goto LABEL_229;
      case 11:
        return swift_bridgeObjectRelease();
      case 13:
        v87 = *a4;
        if (*((_QWORD *)*a4 + 2) <= 1uLL)
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v88 = *((_QWORD *)v87 + 4);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v192 + 216) = v88;
        *(_QWORD *)(v192 + 224) = 0;
        *(_QWORD *)(v192 + 200) = v88;
        *(_QWORD *)(v192 + 208) = 0;
        goto LABEL_4;
      case 21:
        v89 = *a4;
        if (*((_QWORD *)*a4 + 2) <= 1uLL)
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v91 = *((_QWORD *)v89 + 4);
        v90 = *((_QWORD *)v89 + 5);
        swift_bridgeObjectRelease();
        v42 = v192;
        v92 = *(_QWORD *)(v192 + 216);
        v37 = __OFADD__(v92, v91);
        v44 = v92 + v91;
        if (v37)
          goto LABEL_257;
        v93 = *(_QWORD *)(v192 + 224);
        v37 = __OFADD__(v93, v90);
        v46 = v93 + v90;
        if (v37)
          goto LABEL_258;
LABEL_90:
        *(_QWORD *)(v42 + 216) = v44;
        *(_QWORD *)(v42 + 224) = v46;
        v94 = (double)v44;
        v95 = (double)v46;
        if ((*(_BYTE *)(v42 + 184) & 1) != 0)
        {
          v96 = (double)v44;
          v97 = (double)v46;
        }
        else
        {
          v96 = *(double *)(v42 + 168);
          v97 = *(double *)(v42 + 176);
          v166 = *(double *)(v42 + 152);
          v165 = *(double *)(v42 + 160);
          if (v166 >= v94)
            v166 = (double)v44;
          if (v96 < v94)
            v96 = (double)v44;
          if (v165 >= v95)
            v165 = (double)v46;
          if (v97 < v95)
            v97 = (double)v46;
          v94 = v166;
          v95 = v165;
        }
        *(double *)(v42 + 152) = v94;
        *(double *)(v42 + 160) = v95;
        *(double *)(v42 + 168) = v96;
        *(double *)(v42 + 176) = v97;
        *(_BYTE *)(v42 + 184) = 0;
        goto LABEL_4;
      case 22:
        v98 = *a4;
        if (!*((_QWORD *)*a4 + 2))
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v99 = *((_QWORD *)v98 + 4);
        swift_bridgeObjectRelease();
        v35 = v192;
        v100 = *(_QWORD *)(v192 + 216);
        v37 = __OFADD__(v100, v99);
        v50 = v100 + v99;
        if (v37)
          goto LABEL_259;
LABEL_94:
        *(_QWORD *)(v35 + 216) = v50;
        v54 = (double)v50;
        v55 = (double)*(uint64_t *)(v35 + 224);
        if ((*(_BYTE *)(v35 + 184) & 1) != 0)
        {
LABEL_95:
          v56 = v54;
          v57 = v55;
        }
        else
        {
LABEL_59:
          v56 = *(double *)(v35 + 168);
          v57 = *(double *)(v35 + 176);
          v59 = *(double *)(v35 + 152);
          v58 = *(double *)(v35 + 160);
          if (v59 >= v54)
            v59 = v54;
          if (v56 < v54)
            v56 = v54;
          if (v58 >= v55)
            v58 = v55;
          if (v57 < v55)
            v57 = v55;
          v54 = v59;
          v55 = v58;
        }
        *(double *)(v35 + 152) = v54;
        *(double *)(v35 + 160) = v55;
        *(double *)(v35 + 168) = v56;
        *(double *)(v35 + 176) = v57;
        *(_BYTE *)(v35 + 184) = 0;
        goto LABEL_4;
      case 30:
        v101 = *a4;
        if (*((_QWORD *)*a4 + 2) <= 3uLL)
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v103 = *((_QWORD *)v101 + 4);
        v102 = *((_QWORD *)v101 + 5);
        v105 = *((_QWORD *)v101 + 6);
        v104 = *((_QWORD *)v101 + 7);
        swift_bridgeObjectRelease();
        v106 = *(_QWORD *)(v192 + 224);
        v37 = __OFADD__(v106, v103);
        v107 = v106 + v103;
        if (v37)
          goto LABEL_260;
        v108 = *(_QWORD *)(v192 + 216);
        *(_QWORD *)(v192 + 224) = v107;
        v109 = v108 + v102;
        if (__OFADD__(v108, v102))
          goto LABEL_261;
        v110 = v107 + v105;
        v8 = sub_1B0945C44;
        if (__OFADD__(v107, v105))
          goto LABEL_262;
        *(_QWORD *)(v192 + 216) = v109;
        *(_QWORD *)(v192 + 224) = v110;
        v111 = v109 + v104;
        if (__OFADD__(v109, v104))
          goto LABEL_263;
        v112 = (double)v110;
        *(_QWORD *)(v192 + 216) = v111;
        *(_QWORD *)(v192 + 224) = v110;
        v113 = (double)v111;
        if ((*(_BYTE *)(v192 + 184) & 1) != 0)
        {
          v114 = (double)v110;
          v115 = (double)v111;
          v116 = (double)v110;
        }
        else
        {
          v116 = *(double *)(v192 + 176);
          if (*(double *)(v192 + 152) >= v113)
            v167 = (double)v111;
          else
            v167 = *(double *)(v192 + 152);
          if (*(double *)(v192 + 168) < v113)
            v115 = (double)v111;
          else
            v115 = *(double *)(v192 + 168);
          if (*(double *)(v192 + 160) >= v112)
            v114 = (double)v110;
          else
            v114 = *(double *)(v192 + 160);
          if (v116 < v112)
            v116 = (double)v110;
          v113 = v167;
        }
        v168 = (double)v107;
        v169 = (double)v109;
        if (v113 >= (double)v108)
          v113 = (double)v108;
        if (v115 < (double)v108)
          v115 = (double)v108;
        if (v114 >= v168)
          v114 = (double)v107;
        if (v116 < v168)
          v116 = (double)v107;
        if (v113 >= v169)
          v113 = (double)v109;
        if (v115 < v169)
          v115 = (double)v109;
        if (v114 >= v112)
          v114 = (double)v110;
        *(double *)(v192 + 152) = v113;
        *(double *)(v192 + 160) = v114;
        if (v116 >= v112)
          v112 = v116;
        *(double *)(v192 + 168) = v115;
        *(double *)(v192 + 176) = v112;
        *(_BYTE *)(v192 + 184) = 0;
        goto LABEL_4;
      case 31:
        v117 = *a4;
        if (*((_QWORD *)*a4 + 2) <= 3uLL)
          goto LABEL_226;
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v119 = *((_QWORD *)v117 + 4);
        v118 = *((_QWORD *)v117 + 5);
        v121 = *((_QWORD *)v117 + 6);
        v120 = *((_QWORD *)v117 + 7);
        swift_bridgeObjectRelease();
        v122 = *(_QWORD *)(v192 + 216);
        v37 = __OFADD__(v122, v119);
        v123 = v122 + v119;
        if (v37)
          goto LABEL_264;
        v124 = *(_QWORD *)(v192 + 224);
        *(_QWORD *)(v192 + 216) = v123;
        v125 = v123 + v118;
        if (__OFADD__(v123, v118))
          goto LABEL_265;
        v126 = v124 + v121;
        v8 = sub_1B0945C44;
        if (__OFADD__(v124, v121))
          goto LABEL_266;
        *(_QWORD *)(v192 + 216) = v125;
        *(_QWORD *)(v192 + 224) = v126;
        v127 = v126 + v120;
        if (__OFADD__(v126, v120))
          goto LABEL_267;
        v128 = (double)v125;
        *(_QWORD *)(v192 + 224) = v127;
        v129 = (double)v127;
        if ((*(_BYTE *)(v192 + 184) & 1) != 0)
        {
          v130 = (double)v125;
          v131 = (double)v125;
          v132 = (double)v127;
        }
        else
        {
          v131 = *(double *)(v192 + 168);
          v132 = *(double *)(v192 + 176);
          v130 = *(double *)(v192 + 152);
          v170 = *(double *)(v192 + 160);
          if (v130 >= v128)
            v130 = (double)v125;
          if (v131 < v128)
            v131 = (double)v125;
          if (v170 >= v129)
            v170 = (double)v127;
          if (v132 < v129)
            v132 = (double)v127;
          v129 = v170;
        }
        v171 = (double)v124;
        v172 = (double)v126;
        if (v130 >= (double)v123)
          v130 = (double)v123;
        if (v131 < (double)v123)
          v131 = (double)v123;
        if (v129 >= v171)
          v129 = (double)v124;
        if (v132 < v171)
          v132 = (double)v124;
        if (v130 >= v128)
          v130 = (double)v125;
        if (v131 >= v128)
          v128 = v131;
        if (v129 >= v172)
          v129 = (double)v126;
        *(double *)(v192 + 152) = v130;
        *(double *)(v192 + 160) = v129;
        if (v132 < v172)
          v173 = (double)v126;
        else
          v173 = v132;
        *(double *)(v192 + 168) = v128;
        *(double *)(v192 + 176) = v173;
        *(_BYTE *)(v192 + 184) = 0;
        goto LABEL_4;
      default:
        v8 = v20;
        switch(v11)
        {
          case 256:
            goto LABEL_4;
          case 257:
          case 258:
            if (*((_QWORD *)*a4 + 2) <= 5uLL)
              goto LABEL_226;
            goto LABEL_3;
          case 262:
            if (*((_QWORD *)*a4 + 2) <= 4uLL)
              goto LABEL_226;
            goto LABEL_3;
          case 263:
            v133 = *a4;
            if (*((_QWORD *)*a4 + 2) <= 3uLL)
              goto LABEL_226;
            *a4 = (char *)MEMORY[0x1E0DEE9D8];
            v134 = *((_QWORD *)v133 + 4);
            v135 = *((_QWORD *)v133 + 5);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v192 + 216) = v134;
            *(_QWORD *)(v192 + 224) = v135;
            *(_QWORD *)(v192 + 200) = v134;
            *(_QWORD *)(v192 + 208) = v135;
            goto LABEL_4;
          case 268:
            v136 = *a4;
            if (!*((_QWORD *)*a4 + 2))
              goto LABEL_228;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v137 = *((_QWORD *)v136 + 2);
              if (!v137)
                goto LABEL_269;
            }
            else
            {
              v136 = sub_1B0953AFC((uint64_t)v136);
              v137 = *((_QWORD *)v136 + 2);
              if (!v137)
                goto LABEL_269;
            }
            v138 = v137 - 1;
            v139 = *(_QWORD *)&v136[8 * v137 + 24];
            *((_QWORD *)v136 + 2) = v137 - 1;
            *a4 = v136;
            if (v137 == 1)
              goto LABEL_228;
            v140 = v137 - 2;
            v141 = a4;
            v142 = *(_QWORD *)&v136[8 * v137 + 16];
            *((_QWORD *)v136 + 2) = v137 - 2;
            *v141 = v136;
            if (!v139)
              goto LABEL_271;
            if (v142 == 0x8000000000000000 && v139 == -1)
              goto LABEL_278;
            if (v137 <= 0x31)
            {
              v143 = *((_QWORD *)v136 + 3);
              if (v138 > v143 >> 1)
                v136 = sub_1B08B5E40((char *)(v143 > 1), v138, 1, v136);
              *((_QWORD *)v136 + 2) = v138;
              *(_QWORD *)&v136[8 * v140 + 32] = v142 / v139;
              a4 = v193;
              *v193 = v136;
              goto LABEL_30;
            }
LABEL_226:
            sub_1B0945C00();
            swift_allocError();
            v181 = 4;
            goto LABEL_229;
          case 272:
            v144 = *a4;
            if (!*((_QWORD *)*a4 + 2))
              goto LABEL_228;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v145 = *((_QWORD *)v144 + 2);
              if (!v145)
                goto LABEL_270;
            }
            else
            {
              v144 = sub_1B0953AFC((uint64_t)v144);
              v145 = *((_QWORD *)v144 + 2);
              if (!v145)
                goto LABEL_270;
            }
            v146 = v145 - 1;
            v147 = *(_QWORD *)&v144[8 * v146 + 32];
            *((_QWORD *)v144 + 2) = v146;
            *a4 = v144;
            v148 = *((_QWORD *)v144 + 2);
            if (!v148)
            {
LABEL_228:
              sub_1B0945C00();
              swift_allocError();
              v181 = 1;
LABEL_229:
              *v180 = v181;
              swift_willThrow();
              return swift_bridgeObjectRelease();
            }
            v149 = v148 - 1;
            v150 = *(_QWORD *)&v144[8 * v149 + 32];
            *((_QWORD *)v144 + 2) = v149;
            *a4 = v144;
            v151 = *((_QWORD *)v144 + 2);
            v152 = v151 - v150;
            if (__OFSUB__(v151, v150))
              goto LABEL_272;
            if (v151 < v152)
              goto LABEL_273;
            if (v152 < 0)
              goto LABEL_274;
            v153 = (2 * v151) | 1;
            v154 = swift_bridgeObjectRetain();
            sub_1B0940C8C(v154, (uint64_t)(v144 + 32), v152, v153, v147);
            if (!v195)
            {
              swift_bridgeObjectRelease();
              v8 = sub_1B0945C44;
              if (v150)
              {
                a4 = v193;
                if ((v150 & 0x8000000000000000) != 0)
                  goto LABEL_276;
                v155 = *((_QWORD *)v144 + 2);
                if (v155 < v150)
                  goto LABEL_277;
                sub_1B0902CB4(v155 - v150, v155);
              }
              else
              {
                a4 = v193;
              }
LABEL_4:
              if (v7 == v6)
                return swift_bridgeObjectRelease();
              continue;
            }
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          case 273:
            sub_1B0941154();
            if (v195)
              return swift_bridgeObjectRelease();
            v157 = *a4;
            v158 = *((_QWORD *)*a4 + 2);
            if (v158 >= 0x30)
              goto LABEL_226;
            v159 = v156;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v157 = sub_1B08B5E40(0, v158 + 1, 1, v157);
            v161 = *((_QWORD *)v157 + 2);
            v160 = *((_QWORD *)v157 + 3);
            if (v161 >= v160 >> 1)
              v157 = sub_1B08B5E40((char *)(v160 > 1), v161 + 1, 1, v157);
            *((_QWORD *)v157 + 2) = v161 + 1;
            *(_QWORD *)&v157[8 * v161 + 32] = v159;
            *a4 = v157;
            goto LABEL_30;
          case 289:
            v162 = *a4;
            if (*((_QWORD *)*a4 + 2) < 2uLL)
              goto LABEL_226;
            *a4 = (char *)MEMORY[0x1E0DEE9D8];
            v163 = *((_QWORD *)v162 + 4);
            v164 = *((_QWORD *)v162 + 5);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v192 + 216) = v163;
            *(_QWORD *)(v192 + 224) = v164;
            goto LABEL_4;
          default:
            goto LABEL_236;
        }
    }
  }
}

uint64_t sub_1B0943374(uint64_t result)
{
  double v1;

  v1 = (double)result;
  if ((double)result >= 9.22337204e18)
  {
    *(double *)&result = 0.0;
    return result;
  }
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((uint64_t)v1 == result)
    *(double *)&result = (double)result;
  else
    *(double *)&result = 0.0;
  return result;
}

uint64_t sub_1B09433D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  __int16 v89;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;

  v3 = a1[1];
  result = sub_1B0A1DA50();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_142;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *a1;
      v83 = -1;
      v84 = 1;
      v85 = *a1;
      do
      {
        v86 = v83;
        v87 = v85;
        do
        {
          v88 = *(_DWORD *)(v87 + 8);
          if (v88 >= *(_DWORD *)v87)
            break;
          if (!v82)
            goto LABEL_146;
          v89 = *(_WORD *)(v87 + 12);
          *(_QWORD *)(v87 + 8) = *(_QWORD *)v87;
          *(_DWORD *)v87 = v88;
          *(_WORD *)(v87 + 4) = v89;
          v87 -= 8;
        }
        while (!__CFADD__(v86++, 1));
        ++v84;
        v85 += 8;
        --v83;
      }
      while (v84 != v3);
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_141;
    v6 = result;
    v98 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      result = sub_1B0A1D4D4();
      *(_QWORD *)(result + 16) = v7;
      v100 = result;
      v104 = (char *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v99 = *a1 + 16;
      v11 = MEMORY[0x1E0DEE9D8];
      v101 = v6;
      v102 = v3;
      v103 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(_DWORD *)(v10 + 8 * v9);
          v15 = 8 * v13;
          v16 = *(_DWORD *)(v10 + 8 * v13);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v17 = (_DWORD *)(v99 + 8 * v13);
            while (v14 < v16 != *v17 >= *(v17 - 2))
            {
              v17 += 2;
              if (v3 == ++v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v16)
          {
            if (v9 < v13)
              goto LABEL_143;
            if (v13 < v9)
            {
              v18 = 8 * v9 - 8;
              v19 = v9;
              v20 = v13;
              do
              {
                if (v20 != --v19)
                {
                  if (!v10)
                    goto LABEL_149;
                  v22 = (_QWORD *)(v10 + v15);
                  v23 = (_QWORD *)(v10 + v18);
                  v24 = *(_DWORD *)(v10 + v15);
                  v25 = *(_WORD *)(v10 + v15 + 4);
                  if (v15 != v18 || v22 >= v23 + 1)
                    *v22 = *v23;
                  v21 = v10 + v18;
                  *(_DWORD *)v21 = v24;
                  *(_WORD *)(v21 + 4) = v25;
                }
                ++v20;
                v18 -= 8;
                v15 += 8;
              }
              while (v20 < v19);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_140;
          if (v9 - v13 < v6)
          {
            v26 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_144;
            if (v26 >= v3)
              v26 = v3;
            if (v26 < v13)
            {
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
              return result;
            }
            if (v9 != v26)
            {
              v27 = (int *)(v10 + 8 * v9);
              do
              {
                v28 = v27;
                v29 = v13;
                do
                {
                  v30 = *v28;
                  if (*v28 >= *(v28 - 2))
                    break;
                  if (!v10)
                    goto LABEL_147;
                  v31 = *((_WORD *)v28 + 2);
                  *(_QWORD *)v28 = *((_QWORD *)v28 - 1);
                  *(v28 - 2) = v30;
                  *((_WORD *)v28 - 2) = v31;
                  ++v29;
                  v28 -= 2;
                }
                while (v9 != v29);
                ++v9;
                v27 += 2;
              }
              while (v9 != v26);
              v9 = v26;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_135;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08A8EA0(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v33 = *(_QWORD *)(v11 + 16);
        v32 = *(_QWORD *)(v11 + 24);
        v12 = v33 + 1;
        v10 = v103;
        if (v33 >= v32 >> 1)
        {
          result = (uint64_t)sub_1B08A8EA0((char *)(v32 > 1), v33 + 1, 1, (char *)v11);
          v10 = v103;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v34 = v11 + 32;
        v35 = (uint64_t *)(v11 + 32 + 16 * v33);
        *v35 = v13;
        v35[1] = v9;
        if (v33)
        {
          while (1)
          {
            v36 = v12 - 1;
            if (v12 >= 4)
            {
              v41 = v34 + 16 * v12;
              v42 = *(_QWORD *)(v41 - 64);
              v43 = *(_QWORD *)(v41 - 56);
              v47 = __OFSUB__(v43, v42);
              v44 = v43 - v42;
              if (v47)
                goto LABEL_124;
              v46 = *(_QWORD *)(v41 - 48);
              v45 = *(_QWORD *)(v41 - 40);
              v47 = __OFSUB__(v45, v46);
              v39 = v45 - v46;
              v40 = v47;
              if (v47)
                goto LABEL_125;
              v48 = v12 - 2;
              v49 = (uint64_t *)(v34 + 16 * (v12 - 2));
              v51 = *v49;
              v50 = v49[1];
              v47 = __OFSUB__(v50, v51);
              v52 = v50 - v51;
              if (v47)
                goto LABEL_126;
              v47 = __OFADD__(v39, v52);
              v53 = v39 + v52;
              if (v47)
                goto LABEL_128;
              if (v53 >= v44)
              {
                v71 = (uint64_t *)(v34 + 16 * v36);
                v73 = *v71;
                v72 = v71[1];
                v47 = __OFSUB__(v72, v73);
                v74 = v72 - v73;
                if (v47)
                  goto LABEL_134;
                v64 = v39 < v74;
                goto LABEL_87;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v65 = *(_QWORD *)(v11 + 32);
                v66 = *(_QWORD *)(v11 + 40);
                v47 = __OFSUB__(v66, v65);
                v58 = v66 - v65;
                v59 = v47;
                goto LABEL_81;
              }
              v38 = *(_QWORD *)(v11 + 32);
              v37 = *(_QWORD *)(v11 + 40);
              v47 = __OFSUB__(v37, v38);
              v39 = v37 - v38;
              v40 = v47;
            }
            if ((v40 & 1) != 0)
              goto LABEL_127;
            v48 = v12 - 2;
            v54 = (uint64_t *)(v34 + 16 * (v12 - 2));
            v56 = *v54;
            v55 = v54[1];
            v57 = __OFSUB__(v55, v56);
            v58 = v55 - v56;
            v59 = v57;
            if (v57)
              goto LABEL_129;
            v60 = (uint64_t *)(v34 + 16 * v36);
            v62 = *v60;
            v61 = v60[1];
            v47 = __OFSUB__(v61, v62);
            v63 = v61 - v62;
            if (v47)
              goto LABEL_131;
            if (__OFADD__(v58, v63))
              goto LABEL_133;
            if (v58 + v63 >= v39)
            {
              v64 = v39 < v63;
LABEL_87:
              if (v64)
                v36 = v48;
              goto LABEL_89;
            }
LABEL_81:
            if ((v59 & 1) != 0)
              goto LABEL_130;
            v67 = (uint64_t *)(v34 + 16 * v36);
            v69 = *v67;
            v68 = v67[1];
            v47 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v47)
              goto LABEL_132;
            if (v70 < v58)
              goto LABEL_15;
LABEL_89:
            v75 = v36 - 1;
            if (v36 - 1 >= v12)
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            if (!v10)
              goto LABEL_148;
            v76 = v11;
            v77 = (uint64_t *)(v34 + 16 * v75);
            v78 = *v77;
            v79 = (_QWORD *)(v34 + 16 * v36);
            v80 = v79[1];
            result = sub_1B0943A74((char *)(v10 + 8 * *v77), (char *)(v10 + 8 * *v79), v10 + 8 * v80, v104);
            if (v1)
              goto LABEL_97;
            if (v80 < v78)
              goto LABEL_121;
            if (v36 > *(_QWORD *)(v76 + 16))
              goto LABEL_122;
            *v77 = v78;
            *(_QWORD *)(v34 + 16 * v75 + 8) = v80;
            v81 = *(_QWORD *)(v76 + 16);
            if (v36 >= v81)
              goto LABEL_123;
            v11 = v76;
            v12 = v81 - 1;
            result = (uint64_t)memmove((void *)(v34 + 16 * v36), v79 + 2, 16 * (v81 - 1 - v36));
            *(_QWORD *)(v76 + 16) = v81 - 1;
            v10 = v103;
            if (v81 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v101;
        v3 = v102;
        if (v9 >= v102)
        {
          v8 = v100;
          goto LABEL_107;
        }
      }
    }
    v8 = MEMORY[0x1E0DEE9D8];
    v104 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v100 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_107:
    result = v11;
    v100 = v8;
    if (v12 >= 2)
    {
      v91 = *v98;
      do
      {
        v92 = v12 - 2;
        if (v12 < 2)
          goto LABEL_136;
        if (!v91)
          goto LABEL_150;
        v93 = result;
        v94 = *(_QWORD *)(result + 32 + 16 * v92);
        v95 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_1B0943A74((char *)(v91 + 8 * v94), (char *)(v91 + 8 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v91 + 8 * v95, v104);
        if (v1)
          break;
        if (v95 < v94)
          goto LABEL_137;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08A8F98(v93);
          v93 = result;
        }
        if (v92 >= *(_QWORD *)(v93 + 16))
          goto LABEL_138;
        v96 = (_QWORD *)(v93 + 32 + 16 * v92);
        *v96 = v94;
        v96[1] = v95;
        v97 = *(_QWORD *)(v93 + 16);
        if (v12 > v97)
          goto LABEL_139;
        memmove((void *)(v93 + 32 + 16 * (v12 - 1)), (const void *)(v93 + 32 + 16 * v12), 16 * (v97 - v12));
        result = v93;
        *(_QWORD *)(v93 + 16) = v97 - 1;
        v12 = v97 - 1;
      }
      while (v97 > 2);
    }
LABEL_97:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v100 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B0943A74(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  size_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 7;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  if (v10 >= v13)
  {
    v18 = 8 * v13;
    if (a4 != __src || &__src[v18] <= a4)
      memmove(a4, __src, 8 * v13);
    v15 = &v4[v18];
    if (v7 >= v6 || v11 < 8)
      goto LABEL_40;
    v19 = (char *)(a3 - 8);
    while (1)
    {
      v20 = v19 + 8;
      v21 = v6 - 8;
      if (*((_DWORD *)v15 - 2) >= *((_DWORD *)v6 - 2))
      {
        v21 = v15 - 8;
        if (v20 != v15)
        {
          v15 -= 8;
          goto LABEL_37;
        }
        v22 = v19 >= v15;
        v15 -= 8;
        if (v22)
          goto LABEL_37;
      }
      else
      {
        if (v20 != v6)
        {
          v6 -= 8;
LABEL_37:
          *(_QWORD *)v19 = *(_QWORD *)v21;
          goto LABEL_38;
        }
        v22 = v19 >= v6;
        v6 -= 8;
        if (v22)
          goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        v19 -= 8;
        if (v15 > v4)
          continue;
      }
      goto LABEL_40;
    }
  }
  v14 = 8 * v10;
  if (a4 != __dst || &__dst[v14] <= a4)
    memmove(a4, __dst, v14);
  v15 = &v4[v14];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (*(_DWORD *)v6 < *(_DWORD *)v4)
    {
      v16 = v6;
      v17 = v7 == v6;
      v6 += 8;
      if (!v17)
        goto LABEL_16;
LABEL_17:
      v7 += 8;
      if (v4 >= v15 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v16 = v4;
    v17 = v7 == v4;
    v4 += 8;
    if (v17)
      goto LABEL_17;
LABEL_16:
    *(_QWORD *)v7 = *(_QWORD *)v16;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_40:
  v23 = (v15 - v4 + (v15 - v4 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8;
  if (v6 != v4 || v6 >= &v4[v23])
    memmove(v6, v4, v23);
  return 1;
}

uint64_t sub_1B0943C7C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t _s10FontParser05Type1A0V6string4name13matchingQuerySSSgAA20NameStringIdentifierV_AA04IntlG0VtF_0(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 144);
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v3 = sub_1B08FA028(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1B0943D58(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for Type1CharStringRenderer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Type1CharStringRenderer);
}

unint64_t sub_1B0943E2C()
{
  unint64_t result;

  result = qword_1EEEBBC78;
  if (!qword_1EEEBBC78)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Type1FontError, &type metadata for Type1FontError);
    atomic_store(result, (unint64_t *)&qword_1EEEBBC78);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Type1FontError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B0943EBC + 4 * byte_1B0A3A27F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B0943EF0 + 4 * byte_1B0A3A27A[v4]))();
}

uint64_t sub_1B0943EF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0943EF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0943F00);
  return result;
}

uint64_t sub_1B0943F0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0943F14);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B0943F18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0943F20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Type1FontError()
{
  return &type metadata for Type1FontError;
}

uint64_t destroy for Type1Font(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 176);
  if (*(_QWORD *)(a1 + 240))
    __swift_destroy_boxed_opaque_existential_1(a1 + 216);
  result = *(_QWORD *)(a1 + 472);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Type1Font(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  LODWORD(v8) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 139) = *(_DWORD *)(a2 + 139);
  *(_DWORD *)(a1 + 136) = v8;
  v9 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  v10 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v10;
  v30 = a2 + 176;
  v31 = a1 + 176;
  v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 200) = v11;
  v12 = v11;
  v29 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29(v31, v30, v12);
  v13 = (_OWORD *)(a1 + 216);
  v14 = (_OWORD *)(a2 + 216);
  v15 = *(_QWORD *)(a2 + 240);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v15;
    *(_QWORD *)(a1 + 248) = v16;
    (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 232);
    *v13 = *v14;
    *(_OWORD *)(a1 + 232) = v17;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  }
  v18 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v18;
  v19 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v19;
  *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  v20 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v20;
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  v21 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v21;
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  v22 = *(_QWORD *)(a2 + 472);
  if (v22)
  {
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v22;
    v23 = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = v23;
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v24;
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  }
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v25 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v25;
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  v26 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v26;
  v27 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v27;
  *(_WORD *)(a1 + 640) = *(_WORD *)(a2 + 640);
  return a1;
}

uint64_t assignWithCopy for Type1Font(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v4 = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 112) = v4;
  v5 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 120) = v5;
  v6 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 128) = v6;
  v7 = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 139) = *(_DWORD *)(a2 + 139);
  *(_DWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 176), (uint64_t *)(a2 + 176));
  v8 = *(_QWORD *)(a2 + 240);
  if (*(_QWORD *)(a1 + 240))
  {
    if (v8)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 216), (uint64_t *)(a2 + 216));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 216);
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 240) = v8;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 216, a2 + 216);
    goto LABEL_8;
  }
  v9 = *(_OWORD *)(a2 + 216);
  v10 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 216) = v9;
  *(_OWORD *)(a1 + 232) = v10;
LABEL_8:
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v11 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
  *(_OWORD *)(a1 + 304) = v11;
  v12 = *(_OWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = v12;
  v13 = *(_OWORD *)(a2 + 360);
  v14 = *(_OWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_OWORD *)(a1 + 360) = v13;
  *(_OWORD *)(a1 + 376) = v14;
  v15 = *(_OWORD *)(a2 + 400);
  v16 = *(_OWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v15;
  *(_OWORD *)(a1 + 416) = v16;
  v17 = *(_OWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = v17;
  v18 = (_OWORD *)(a1 + 464);
  v19 = (_OWORD *)(a2 + 464);
  v20 = *(_QWORD *)(a2 + 472);
  if (*(_QWORD *)(a1 + 472))
  {
    if (v20)
    {
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    }
    else
    {
      sub_1B08CCF8C(a1 + 464);
      v21 = *(_QWORD *)(a2 + 496);
      v22 = *(_OWORD *)(a2 + 480);
      *v18 = *v19;
      *(_OWORD *)(a1 + 480) = v22;
      *(_QWORD *)(a1 + 496) = v21;
    }
  }
  else if (v20)
  {
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *v19;
    v24 = *(_OWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *v18 = v23;
    *(_OWORD *)(a1 + 480) = v24;
  }
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  v25 = *(_QWORD *)(a2 + 560);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *(_QWORD *)(a1 + 560) = v25;
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(_BYTE *)(a1 + 641) = *(_BYTE *)(a2 + 641);
  return a1;
}

void *__swift_memcpy642_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x282uLL);
}

uint64_t assignWithTake for Type1Font(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 139) = *(_DWORD *)(a2 + 139);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  __swift_destroy_boxed_opaque_existential_1(a1 + 176);
  v4 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v4;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  if (*(_QWORD *)(a1 + 240))
    __swift_destroy_boxed_opaque_existential_1(a1 + 216);
  v5 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v5;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v6 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v6;
  v7 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v7;
  *(_OWORD *)(a1 + 313) = *(_OWORD *)(a2 + 313);
  v8 = *(_OWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = v8;
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  v9 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v9;
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  v10 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v10;
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  if (!*(_QWORD *)(a1 + 472))
    goto LABEL_7;
  v11 = *(_QWORD *)(a2 + 472);
  if (!v11)
  {
    sub_1B08CCF8C(a1 + 464);
LABEL_7:
    v13 = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = v13;
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
LABEL_8:
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v14 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v14;
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  v15 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = v15;
  v16 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v16;
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(_BYTE *)(a1 + 641) = *(_BYTE *)(a2 + 641);
  return a1;
}

uint64_t getEnumTagSinglePayload for Type1Font(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 642))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Type1Font(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 632) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_WORD *)(result + 640) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 642) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 642) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Type1Font()
{
  return &type metadata for Type1Font;
}

uint64_t sub_1B0944B08()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1B0944BB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((((v7 + ((v6 + 152) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v11 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v11;
    v12 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v12;
    v13 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v13;
    v28 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v28;
    v29 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v29;
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_DWORD *)(a1 + 115) = *(_DWORD *)((char *)a2 + 115);
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    *(_DWORD *)(a1 + 123) = *(_DWORD *)((char *)a2 + 123);
    *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
    *(_DWORD *)(a1 + 131) = *(_DWORD *)((char *)a2 + 131);
    *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
    v14 = (_DWORD *)((a1 + 138) & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (int *)(((unint64_t)a2 + 138) & 0xFFFFFFFFFFFFFFFCLL);
    v16 = *v15;
    *(_DWORD *)((char *)v14 + 3) = *(int *)((char *)v15 + 3);
    *v14 = v16;
    v17 = (_QWORD *)(((unint64_t)v14 + 14) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_QWORD *)(((unint64_t)v15 + 14) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v18;
    v19 = ((unint64_t)v17 + v6 + 8) & ~v6;
    v20 = ((unint64_t)v18 + v6 + 8) & ~v6;
    v26 = v4;
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27(v19, v20, v26);
    v21 = (_QWORD *)((v7 + v19) & 0xFFFFFFFFFFFFF8);
    v22 = (_QWORD *)((v7 + v20) & 0xFFFFFFFFFFFFF8);
    *v21 = *v22;
    v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v24;
    *(_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFF8);
  }
  return v3;
}

uint64_t sub_1B0944DE0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((((a1 + 138) & 0xFFFFFFFFFFFFFFFCLL) + 14) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_1B0944E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  void (*v25)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v9 = (_DWORD *)((a1 + 138) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (int *)((a2 + 138) & 0xFFFFFFFFFFFFFFFCLL);
  v11 = *v10;
  *(_DWORD *)((char *)v9 + 3) = *(int *)((char *)v10 + 3);
  *v9 = v11;
  v12 = (_QWORD *)(((unint64_t)v9 + 14) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v10 + 14) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((unint64_t)v12 + v16 + 8) & ~v16;
  v18 = ((unint64_t)v13 + v16 + 8) & ~v16;
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25(v17, v18, v14);
  v19 = *(_QWORD *)(v15 + 64) + 7;
  v20 = (_QWORD *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  *(_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B0945064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  _DWORD *v9;
  int *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v6 = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 112) = v6;
  v7 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 120) = v7;
  v8 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  *(_DWORD *)(a1 + 128) = v8;
  v9 = (_DWORD *)((a1 + 138) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (int *)((a2 + 138) & 0xFFFFFFFFFFFFFFFCLL);
  v11 = *v10;
  *(_DWORD *)((char *)v9 + 3) = *(int *)((char *)v10 + 3);
  *v9 = v11;
  v12 = (_QWORD *)(((unint64_t)v9 + 14) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v10 + 14) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((unint64_t)v12 + v15 + 8) & ~v15;
  v17 = ((unint64_t)v13 + v15 + 8) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v16, v17);
  v18 = *(_QWORD *)(v14 + 64) + 7;
  v19 = v18 + v16;
  v20 = (_QWORD *)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *v20;
  v21 = (_QWORD *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v21[1] = v22[1];
  v23 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v23[1] = v24[1];
  return a1;
}

uint64_t sub_1B09452BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _DWORD *v8;
  int *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *v21;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 127) = *(_QWORD *)(a2 + 127);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = (_DWORD *)((a1 + 138) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (int *)((a2 + 138) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = *v9;
  *(_DWORD *)((char *)v8 + 3) = *(int *)((char *)v9 + 3);
  *v8 = v10;
  v11 = (_QWORD *)(((unint64_t)v8 + 14) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v9 + 14) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)v11 + v14 + 8) & ~v14;
  v16 = ((unint64_t)v12 + v14 + 8) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v15, v16);
  v17 = *(_QWORD *)(v13 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_OWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  *(_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B09453AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  int *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 123) = *(_DWORD *)(a2 + 123);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 131) = *(_DWORD *)(a2 + 131);
  v6 = (_DWORD *)((a1 + 138) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (int *)((a2 + 138) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = *v7;
  *(_DWORD *)((char *)v6 + 3) = *(int *)((char *)v7 + 3);
  *v6 = v8;
  v9 = (_QWORD *)(((unint64_t)v6 + 14) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v7 + 14) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v9 + v12 + 8) & ~v12;
  v14 = ((unint64_t)v10 + v12 + 8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64) + 7;
  v16 = v15 + v13;
  v17 = (_QWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  v16 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *v17;
  v18 = (_QWORD *)((v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v18[1] = v19[1];
  v20 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v20[1] = v21[1];
  return a1;
}

uint64_t sub_1B0945594(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((a1 + 138) & 0xFFFFFFFFFFFFFFFCLL) + 14) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 8) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((((*(_QWORD *)(v4 + 64) + ((v7 + 152) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B0945630 + 4 * byte_1B0A3A284[v10]))();
  }
}

void sub_1B09456C0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 152) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 152) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + ((v7 + 152) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1B09457D8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1B0945884);
}

void sub_1B09457E0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B09457E8);
  JUMPOUT(0x1B0945884);
}

void sub_1B09457FC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B0945884);
}

void sub_1B0945804()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B0945884);
}

void sub_1B094580C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x1B0945818);
    if (a2 < 0)
      JUMPOUT(0x1B094584CLL);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x1B0945884);
}

uint64_t sub_1B094589C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  uint64_t v33[2];
  uint64_t v34;

  v28 = a2;
  v29 = a3;
  v5 = sub_1B0A1D294();
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  MEMORY[0x1E0C80A78](v5);
  v25 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v30 = v3;
    v34 = MEMORY[0x1E0DEE9D8];
    sub_1B08E8324(0, v7, 0);
    result = v34;
    v9 = (unsigned __int8 *)(a1 + 48);
    do
    {
      v11 = *((_QWORD *)v9 - 2);
      v10 = *((_QWORD *)v9 - 1);
      v12 = *v9;
      v31 = result;
      if (v12 >> 4 == 6)
      {
        sub_1B08A35B0(v11, v10);
        sub_1B08A35B0(v11, v10);
        v14 = v11;
        v16 = v10;
      }
      else
      {
        if (v12 >> 4 != 5)
        {
          sub_1B08AE1E0(v11, v10, v12);
          v14 = 0;
          v16 = 0xF000000000000000;
LABEL_10:
          v18 = v28;
          v20 = v29;
          sub_1B08A35B0(v28, v29);
          sub_1B08CBB10(v14, v16);
          sub_1B08AE21C(v11, v10, v12);
          v19 = v20;
          goto LABEL_11;
        }
        swift_bridgeObjectRetain();
        v13 = v25;
        sub_1B0A1D270();
        v14 = sub_1B0A1D228();
        v16 = v15;
        (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
        if (v16 >> 60 == 15)
          goto LABEL_10;
      }
      v33[0] = v14;
      v33[1] = v16;
      sub_1B08A35B0(v14, v16);
      v17 = v30;
      sub_1B093FB4C(v33, v32);
      v30 = v17;
      sub_1B08CBB10(v14, v16);
      sub_1B08CBB10(v14, v16);
      sub_1B08AE21C(v11, v10, v12);
      v18 = v32[0];
      v19 = v32[1];
LABEL_11:
      result = v31;
      v34 = v31;
      v22 = *(_QWORD *)(v31 + 16);
      v21 = *(_QWORD *)(v31 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1B08E8324((char *)(v21 > 1), v22 + 1, 1);
        result = v34;
      }
      v9 += 24;
      *(_QWORD *)(result + 16) = v22 + 1;
      v23 = result + 16 * v22;
      *(_QWORD *)(v23 + 32) = v18;
      *(_QWORD *)(v23 + 40) = v19;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B0945AE4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)(v2 + *(int *)(a2 + 56));
  *v3 = result;
  v3[1] = 0;
  v4 = (_QWORD *)(v2 + *(int *)(a2 + 52));
  *v4 = result;
  v4[1] = 0;
  return result;
}

uint64_t sub_1B0945B00(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)(v3 + *(int *)(a3 + 56));
  *v4 = result;
  v4[1] = a2;
  v5 = (_QWORD *)(v3 + *(int *)(a3 + 52));
  *v5 = result;
  v5[1] = a2;
  return result;
}

uint64_t sub_1B0945B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v4;

  if ((a1 & 0x8000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 144);
    if (*(_QWORD *)(v2 + 16) > a1)
      return *(_QWORD *)(v2 + 16 * a1 + 32);
  }
  sub_1B08D7374();
  swift_allocError();
  *v4 = 3;
  return swift_willThrow();
}

uint64_t sub_1B0945B8C()
{
  return sub_1B0940BEC();
}

uint64_t sub_1B0945BA4()
{
  double *v0;

  return sub_1B0940AB4(v0[4], v0[5], v0[6], v0[7], v0[8], v0[9]);
}

uint64_t sub_1B0945BC8()
{
  uint64_t v0;

  return sub_1B09408EC(*(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_1B0945BE4()
{
  uint64_t v0;

  return sub_1B0940790(*(double *)(v0 + 32), *(double *)(v0 + 40));
}

unint64_t sub_1B0945C00()
{
  unint64_t result;

  result = qword_1EEEBBD00[0];
  if (!qword_1EEEBBD00[0])
  {
    result = MEMORY[0x1B5E0D530]("\rLw5P7\a", &type metadata for CharStringError);
    atomic_store(result, qword_1EEEBBD00);
  }
  return result;
}

uint64_t sub_1B0945C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1B0945C74(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) != 0)
  {
    sub_1B08CD6AC(a1);
    swift_bridgeObjectRelease();

  }
  else
  {
    sub_1B0945CBC((uint64_t)a1, a2, a3, a4, a5 & 1);
  }
}

uint64_t sub_1B0945CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    swift_release();
  return swift_release();
}

uint64_t sub_1B0945CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  if ((a7 & 1) != 0)
    return a10(a1, a2, a3, a4, a5, a6 & 1);
  else
    return sub_1B0945D24(a1, a2, a3, a4, a5, BYTE1(a5) & 1, a8, a9);
}

uint64_t sub_1B0945D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))
{
  if ((a6 & 1) != 0)
    return a8(a1, a2, a3, a4, a5 & 1);
  else
    return a7(a1, a2, a3, a4 & 1);
}

uint64_t sub_1B0945D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

id sub_1B0945D68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) == 0)
    return (id)sub_1B0945DB0((uint64_t)a1, a2, a3, a4, a5 & 1);
  sub_1B08CD4C0(a1);
  swift_bridgeObjectRetain();
  return a5;
}

uint64_t sub_1B0945DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    swift_retain();
  return swift_retain();
}

uint64_t sub_1B0945DE0()
{
  return swift_deallocObject();
}

unsigned __int8 *sub_1B0945DF0@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B0977D50(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_1B0945E08()
{
  return swift_deallocObject();
}

unsigned __int8 *sub_1B0945E18@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B0977D14(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_1B0945E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void Data.subscript.read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

uint64_t (*sub_1B0945EAC(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  if (a2 < 0)
  {
    __break(1u);
    JUMPOUT(0x1B0945F18);
  }
  *v2 = sub_1B0A1CFA0();
  v2[1] = v3;
  return sub_1B0945F30;
}

uint64_t sub_1B0945F30(uint64_t a1)
{
  return sub_1B08A3638(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t (*sub_1B0945F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t)
{
  uint64_t *v4;
  uint64_t v5;

  if (BYTE6(a4) < a2)
  {
    __break(1u);
    JUMPOUT(0x1B0945FE0);
  }
  *v4 = sub_1B0A1CFA0();
  v4[1] = v5;
  return sub_1B0946954;
}

void Data.subscript.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  __asm { BR              X11 }
}

{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  __asm { BR              X11 }
}

void sub_1B0946030(uint64_t a1@<X1>, int a2@<W2>, int a3@<W8>)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a2 + a1;
  if (!__OFADD__(a2, a1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1B09460BCLL);
}

uint64_t sub_1B09460E0(uint64_t *a1, char a2)
{
  return sub_1B0946374(a1, a2, (void (*)(uint64_t, unint64_t, uint64_t))sub_1B0946824);
}

uint64_t Data.subscript.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, unint64_t))((char *)&loc_1B0946104
                                                                             + *((int *)qword_1B0946168 + (a3 >> 62))))(a1, 0, a2, a3);
}

{
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, unint64_t))((char *)&loc_1B0946408
                                                                             + dword_1B094646C[a3 >> 62]))(0, a1, a2, a3);
}

uint64_t sub_1B0946118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) < a1)
  {
    __break(1u);
    JUMPOUT(0x1B0946160);
  }
  return sub_1B0A1CFA0();
}

void Data.subscript.setter()
{
  __asm { BR              X10 }
}

{
  __asm { BR              X11 }
}

uint64_t sub_1B09461C4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (BYTE6(v3) < v2)
  {
    __break(1u);
    JUMPOUT(0x1B0946268);
  }
  sub_1B08A35B0(v1, v0);
  v4 = sub_1B0A1CFA0();
  sub_1B08A3638(v4, v5);
  sub_1B0946824();
  sub_1B08A3638(v1, v0);
  return sub_1B08A3638(v1, v0);
}

void sub_1B09462B8(uint64_t a1@<X1>, int a2@<W2>, int a3@<W8>)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a2 + a1;
  if (!__OFADD__(a2, a1))
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x1B0946344);
}

uint64_t sub_1B0946368(uint64_t *a1, char a2)
{
  return sub_1B0946374(a1, a2, (void (*)(uint64_t, unint64_t, uint64_t))sub_1B09468BC);
}

uint64_t sub_1B0946374(uint64_t *a1, char a2, void (*a3)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  v7 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_1B08A35B0(v7, v5);
    a3(v4, v5, v6);
    sub_1B08A3638(v4, v5);
  }
  else
  {
    a3(v7, v5, v6);
  }
  return sub_1B08A3638(v4, v5);
}

uint64_t sub_1B094641C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
    JUMPOUT(0x1B0946464);
  }
  return sub_1B0A1CFA0();
}

uint64_t sub_1B09464C8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (v2 < 0)
  {
    __break(1u);
    JUMPOUT(0x1B094656CLL);
  }
  sub_1B08A35B0(v1, v0);
  v3 = sub_1B0A1CFA0();
  sub_1B08A3638(v3, v4);
  sub_1B09468BC();
  sub_1B08A3638(v1, v0);
  return sub_1B08A3638(v1, v0);
}

void sub_1B0946584(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1B09465EC()
{
  return sub_1B0A1CF7C();
}

uint64_t sub_1B0946780(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1B0A1CEBC();
  if (!result || (result = sub_1B0A1CEE0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1B0A1CED4();
      return sub_1B0A1CF7C();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1B0946824()
{
  __asm { BR              X13 }
}

void sub_1B0946860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (BYTE6(v4) < a4)
  {
    __break(1u);
    JUMPOUT(0x1B09468ACLL);
  }
  sub_1B0946584(a1, a2);
}

void sub_1B09468BC()
{
  __asm { BR              X13 }
}

void sub_1B09468F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
  {
    __break(1u);
    JUMPOUT(0x1B0946944);
  }
  sub_1B0946584(a1, a2);
}

uint64_t destroy for MetricsTable()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricsTable(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetricsTable(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MetricsTable(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsTable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsTable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsTable()
{
  return &type metadata for MetricsTable;
}

uint64_t sub_1B0946AFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  signed __int16 v12;
  uint64_t v13[4];

  v2 = *v1;
  if (*v1 > a1)
  {
    sub_1B0946C30(a1);
    return v3;
  }
  v5 = __OFSUB__(a1, v2);
  v6 = a1 - v2;
  if (v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 + 0x4000000000000000 >= 0)
  {
    v8 = v1[4];
    v7 = v1[5];
    v13[0] = sub_1B0A1D084();
    v13[1] = v9;
    v13[2] = v10;
    swift_bridgeObjectRetain();
    v12 = (unsigned __int16)sub_1B08C16FC(v13, v11, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7 >= v8)
      return v12;
    goto LABEL_8;
  }
LABEL_9:
  sub_1B08A38A0();
  swift_allocError();
  swift_willThrow();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B0946C30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if ((unint64_t)(a1 - 0x2000000000000000) >> 62 == 3)
  {
    v2 = *(_QWORD *)(v1 + 16);
    v3 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)&v9 = sub_1B0A1D084();
    *((_QWORD *)&v9 + 1) = v4;
    v10 = v5;
    v6 = sub_1B08C4164(&v8, &v9, v5, 257);
    swift_bridgeObjectRelease();
    if (v3 >= v2)
      return v6;
    __break(1u);
  }
  sub_1B08A38A0();
  swift_allocError();
  swift_willThrow();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B0946D34@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v10;
  void *v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  id v32;

  v7 = a5 - a4;
  if (__OFSUB__(a5, a4))
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    if ((unint64_t)(a4 - 0x2000000000000000) >> 62 == 3 && v7 + 0x4000000000000000 >= 0)
    {
      v12 = v6;
      *(_QWORD *)&v29 = result;
      *((_QWORD *)&v29 + 1) = a2;
      *(_QWORD *)&v30 = a3;
      swift_bridgeObjectRetain_n();
      v15 = sub_1B091D32C((uint64_t *)&v29, v14, 4 * a4);
      if (!v6)
      {
        v17 = v15;
        v18 = v16;
        v28 = sub_1B091D32C((uint64_t *)&v29, v16, 2 * v7);
        v26 = v24;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *a6 = a4;
        a6[1] = v7;
        a6[2] = v17;
        a6[3] = v18;
        a6[4] = v28;
        a6[5] = v26;
        a6[6] = v10;
        a6[7] = a2;
        a6[8] = a3;
        return result;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B08A38A0();
      v12 = (void *)swift_allocError();
      swift_bridgeObjectRetain_n();
      swift_willThrow();
    }
    v32 = v12;
    v19 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7D0);
    if (swift_dynamicCast())
    {

      v25 = v30;
      v27 = v29;
      v20 = v31;
      sub_1B08A36F0();
      swift_allocError();
      *(_OWORD *)v21 = v27;
      *(_OWORD *)(v21 + 16) = v25;
      *(_QWORD *)(v21 + 32) = v20;
      swift_willThrow();

    }
    else
    {

      sub_1B08A36F0();
      swift_allocError();
      *v22 = v12;
      v22[1] = v10;
      v22[2] = 0x7272652072657355;
      v22[3] = 0xEA0000000000726FLL;
      v22[4] = v12;
      v23 = v12;
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B0946FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = a1 + 7;
  if (a1 >= 0)
    v2 = a1;
  if (a1 < -7 || (v3 = v2 >> 3, v3 >= *(_QWORD *)(a2 + 16)))
  {
    sub_1B08EC86C();
    swift_allocError();
    swift_willThrow();
  }
  else if (a1 - 8 * v3 >= 0)
  {
    v4 = ((*(unsigned __int8 *)(a2 + v3 + 32) << (a1 - 8 * v3)) >> 7) & 1;
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4 & 1;
}

_WORD *sub_1B0947040@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  if ((((unsigned __int16)*result + 253) & 0x10000) != 0)
  {
    __break(1u);
  }
  else if ((((unsigned __int16)(*result + 253) + 253) & 0x10000) == 0)
  {
    *a2 = *result + 506;
    return result;
  }
  __break(1u);
  return result;
}

unsigned __int16 *sub_1B0947070@<X0>(unsigned __int16 *result@<X0>, _WORD *a2@<X8>)
{
  int v2;

  v2 = *result + 253;
  if ((v2 & 0x10000) != 0)
    __break(1u);
  else
    *a2 = v2;
  return result;
}

BOOL sub_1B094708C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1B094709C()
{
  return sub_1B0A1DB34();
}

uint64_t sub_1B09470C0()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

BOOL sub_1B0947104(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B094708C(*a1, *a2);
}

uint64_t sub_1B0947110()
{
  return sub_1B09470C0();
}

uint64_t sub_1B0947118()
{
  return sub_1B094709C();
}

uint64_t sub_1B0947120()
{
  sub_1B0A1DB28();
  sub_1B094709C();
  return sub_1B0A1DB70();
}

uint64_t sub_1B094715C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char v31;
  char *v32;
  char v33;
  char *v34;
  int v35;
  char *v36;
  signed __int8 v37;
  int v38;
  char v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  char v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedConformanceWitness;
  char *v58;
  char *v59;
  char *v60;
  uint64_t AssociatedTypeWitness;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;

  v6 = v5;
  v56 = a4;
  v67 = a1;
  v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v60 = (char *)&v55 - v10;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12);
  v58 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v72 = (char *)&v55 - v15;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v55 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v55 - v20;
  MEMORY[0x1E0C80A78](v22);
  v59 = (char *)&v55 - v23;
  MEMORY[0x1E0C80A78](v24);
  v69 = (char *)&v55 - v25;
  sub_1B0A1D954();
  v55 = a3;
  sub_1B0A1D954();
  v73 = 7;
  v66 = sub_1B089F364();
  sub_1B0A1D798();
  v68 = v11;
  v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v65 = v18;
  v26(v18, a2);
  v27 = v59;
  sub_1B0A1D780();
  v64 = v21;
  v28 = v21;
  v29 = v26;
  v30 = v27;
  v29(v28, a2);
  v29(v27, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1B0A1DABC();
  sub_1B0A1DA80();
  v31 = 1;
  v63 = a5;
  while (1)
  {
    v37 = sub_1B097990C(v67);
    if (v6)
      break;
    v38 = v37;
    if ((v31 & (v37 == -128)) != 0)
    {
      v51 = 0;
      goto LABEL_21;
    }
    sub_1B0A1D768();
    v39 = sub_1B0A1D7C8();
    v71 = 0;
    v70 = v38;
    if ((v39 & 1) != 0)
    {
      if (sub_1B0A1D7BC() >= 64)
      {
        v73 = 0;
        sub_1B0A1D75C();
        v48 = v72;
        v49 = sub_1B0A1D1E0();
        v29(v30, a2);
        v29(v48, a2);
        if ((v49 & 1) == 0)
          goto LABEL_19;
        goto LABEL_3;
      }
      v40 = v72;
      v41 = sub_1B0A1D7B0();
      v29(v40, a2);
      goto LABEL_18;
    }
    v42 = sub_1B0A1D7C8();
    v43 = sub_1B0A1D7BC();
    if ((v42 & 1) == 0)
    {
      if (v43 >= 64)
      {
LABEL_2:
        v73 = 0;
        sub_1B0A1D75C();
        v32 = v72;
        v33 = sub_1B0A1D1E0();
        v29(v30, a2);
        v29(v32, a2);
        a5 = v63;
        if ((v33 & 1) == 0)
          goto LABEL_19;
        goto LABEL_3;
      }
      v50 = v72;
      v41 = sub_1B0A1D7B0();
      v29(v50, a2);
      a5 = v63;
LABEL_18:
      if (v41)
      {
LABEL_19:
        v51 = 1;
LABEL_21:
        v52 = type metadata accessor for ParseUleb128.Error(0, a2, v55, v56);
        MEMORY[0x1B5E0D530](&unk_1B0A3A5BC, v52);
        swift_allocError();
        *v53 = v51;
        swift_willThrow();
        a5 = v63;
        break;
      }
      goto LABEL_3;
    }
    if (v43 > 64)
      goto LABEL_2;
    sub_1B0A1DABC();
    sub_1B0A1DA80();
    v44 = v72;
    v45 = sub_1B0A1D180();
    v29(v30, a2);
    v46 = v58;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v58, v44, a2);
    a5 = v63;
    if ((v45 & 1) == 0)
    {
      v29(v46, a2);
      v29(v72, a2);
      v51 = 1;
      goto LABEL_21;
    }
    v47 = sub_1B0A1D7B0();
    v29(v46, a2);
    v29(v72, a2);
    if (v47)
      goto LABEL_19;
LABEL_3:
    v73 = 7;
    v34 = v64;
    sub_1B0A1D7A4();
    v35 = v70;
    LOBYTE(v73) = v70 & 0x7F;
    sub_1B0947D40();
    v36 = v65;
    sub_1B0A1D0FC();
    sub_1B0A1D774();
    v29(v36, a2);
    v29(v34, a2);
    v29(a5, a2);
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(a5, v30, a2);
    v31 = 0;
    v6 = v71;
    if ((v35 & 0x80000000) == 0)
      return ((uint64_t (*)(char *, uint64_t))v29)(v69, a2);
  }
  v29(a5, a2);
  return ((uint64_t (*)(char *, uint64_t))v29)(v69, a2);
}

uint64_t sub_1B09477FC@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X2>, char *a3@<X8>)
{
  return sub_1B094715C(a1, a2[2], a2[3], a2[4], a3);
}

void sub_1B094781C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v4 = sub_1B0A1D294();
  v6.n128_f64[0] = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = a1[1];
  v11 = v10 - *a1;
  if (v10 < *a1)
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  v12 = a1[2];
  v13 = *(_QWORD *)(v12 + 16);
  if (v13 < v9 || (uint64_t)v13 < v10)
    goto LABEL_12;
  v21[0] = v12 + v9 + 32;
  v21[1] = v21[0] + v11;
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))(v8, v1, v6);
  swift_bridgeObjectRetain();
  sub_1B0A1D240();
  swift_bridgeObjectRelease();
  v15 = sub_1B0A1D06C();
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = v15;
    v19 = v16;
    v20 = v17;
    swift_bridgeObjectRelease();
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v20;
  }
}

void sub_1B094796C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  sub_1B094781C(a1);
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
  }
}

ValueMetadata *type metadata accessor for BitBuffer.BoundsError()
{
  return &type metadata for BitBuffer.BoundsError;
}

uint64_t type metadata accessor for ParseUleb128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParseUleb128);
}

uint64_t sub_1B09479B0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B09479FC + 4 * byte_1B0A3A425[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B0947A30 + 4 * asc_1B0A3A420[v4]))();
}

uint64_t sub_1B0947A30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0947A38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0947A40);
  return result;
}

uint64_t sub_1B0947A4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0947A54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B0947A58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0947A60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for ParseUleb128.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParseUleb128.Error);
}

uint64_t sub_1B0947A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B0A1D294();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1B0947AB4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1B0A1D294();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1B0947AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B0A1D294();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B0947B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B0A1D294();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B0947B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B0A1D294();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B0947BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B0A1D294();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B0947BF8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0947C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B0A1D294();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1B0947C40()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B0947C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B0A1D294();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ParseString()
{
  uint64_t result;

  result = qword_1EEEBBE60;
  if (!qword_1EEEBBE60)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B0947CC8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B0A1D294();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1B0947D30()
{
  JUMPOUT(0x1B5E0D530);
}

unint64_t sub_1B0947D40()
{
  unint64_t result;

  result = qword_1EEEBBED8;
  if (!qword_1EEEBBED8)
  {
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEDEA0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1EEEBBED8);
  }
  return result;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for MetricsHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MetricsHeader(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MetricsHeader()
{
  return &type metadata for MetricsHeader;
}

uint64_t Array.modify(atIndex:with:)(unint64_t a1, uint64_t (*a2)(unint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char isClassOrObjCExistentialType;
  uint64_t v11;

  sub_1B0A1D4BC();
  v8 = *v4;
  v9 = *(_QWORD *)(a4 + 16);
  sub_1B0947FB0(a1, v8);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  v11 = v8 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v11 = v8;
  return a2(v11+ ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1);
}

uint64_t Array.subscript.getter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB358);
  v4 = sub_1B0A1D51C();
  MEMORY[0x1B5E0D530](MEMORY[0x1E0DEAF48], v4);
  sub_1B0A1D588();
  MEMORY[0x1B5E0D530](MEMORY[0x1E0DEB8A8], v3);
  if ((sub_1B0A1D438() & 1) != 0)
    return sub_1B0A1D528();
  else
    return a2();
}

uint64_t sub_1B0947FB0(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

uint64_t sub_1B0948000(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B094802C + 4 * word_1B0A3A610[a1]))(7561825, 0xE300000000000000);
}

uint64_t sub_1B094802C()
{
  return 2037411683;
}

uint64_t sub_1B094803C()
{
  return 7370084;
}

uint64_t sub_1B094804C()
{
  return 1751349349;
}

uint64_t sub_1B094805C()
{
  return 7368560;
}

uint64_t sub_1B0948068()
{
  return 1819045746;
}

uint64_t sub_1B0948078()
{
  return 0x7865646E69;
}

uint64_t sub_1B094808C()
{
  return 1802658157;
}

uint64_t sub_1B094809C()
{
  return 0x7261656C63;
}

uint64_t sub_1B09480B0()
{
  return 0x746E756F63;
}

uint64_t sub_1B09480C4()
{
  return 0x6D6F74746E756F63;
}

uint64_t sub_1B09480F4()
{
  return 6579297;
}

uint64_t sub_1B0948100()
{
  return 6452595;
}

uint64_t sub_1B094810C()
{
  return 7107949;
}

uint64_t sub_1B0948118()
{
  return 7760228;
}

uint64_t sub_1B0948124()
{
  return 1986618473;
}

uint64_t sub_1B0948134()
{
  return 6582125;
}

uint64_t sub_1B0948564()
{
  return 6710628;
}

uint64_t sub_1B0948570()
{
  return 0x65726F7473;
}

uint64_t sub_1B0948584()
{
  return 1684107116;
}

uint64_t sub_1B0948594()
{
  return 0x6572656877;
}

uint64_t sub_1B09485A8()
{
  return 0x636964746E756F63;
}

uint64_t sub_1B09485F8()
{
  return 0x6E776F6E6BLL;
}

uint64_t sub_1B094860C()
{
  return 0x74676E656C78616DLL;
}

uint64_t sub_1B094862C()
{
  return 0x6665646E75;
}

uint64_t sub_1B0948640()
{
  return 0x646E65766BLL;
}

uint64_t sub_1B0948654()
{
  return 0x686372616573;
}

uint64_t sub_1B0948668()
{
  return 0x6573726F68636E61;
}

uint64_t sub_1B0948688()
{
  return 0x6E656B6F74;
}

uint64_t sub_1B094869C()
{
  return 0x66746E6572727563;
}

uint64_t sub_1B09486BC()
{
  return 0x6C696665736F6C63;
}

uint64_t sub_1B09486F8()
{
  return 0x6365786565;
}

uint64_t sub_1B094870C()
{
  return 0x796C6E6F64616572;
}

uint64_t sub_1B0948724()
{
  return 0x6F65747563657865;
}

uint64_t sub_1B0948748()
{
  return 0x7373656363616F6ELL;
}

uint64_t sub_1B0948760()
{
  return 0x657369617240;
}

uint64_t sub_1B0948774()
{
  return 0x6F66656E69666564;
}

BOOL sub_1B0948794(char a1)
{
  return a1 != 2;
}

BOOL sub_1B09487A4(char a1)
{
  return a1 != 0;
}

BOOL sub_1B09487B0(char a1)
{
  return a1 == 2;
}

BOOL sub_1B09487C0(char a1)
{
  return a1 == 0;
}

void sub_1B09487CC()
{
  qword_1EEEC7110 = (uint64_t)&unk_1E6191A38;
}

void sub_1B09487E0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E61919B0;
}

uint64_t sub_1B09487F0()
{
  unsigned __int8 *v0;

  return sub_1B0948000(*v0);
}

void sub_1B09487F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBEE0);
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X9 }
}

uint64_t sub_1B0948888()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1B08A35B0(v1, v0);
  sub_1B08A35B0(v1, v0);
  sub_1B08A35B0(v3, v2);
  sub_1B0A1D00C();
  *(_QWORD *)(v4 - 96) = v0;
  v5 = sub_1B08A3638(v1, v0);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1B09488EC + *((int *)qword_1B0948B40 + (v2 >> 62))))(v5);
}

uint64_t sub_1B09488FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  sub_1B08A35B0(v3, v2);
  *(_QWORD *)(v6 - 104) = v5;
  sub_1B0A1D00C();
  sub_1B08A3638(v3, v2);
  v7 = *(int *)(v0 + 56);
  *(_BYTE *)(v4 + v7) = 0;
  sub_1B0A1D000();
  sub_1B08F113C();
  do
  {
    sub_1B0A1D714();
    if ((*(_BYTE *)(v6 - 81) & 1) != 0
      || (v8 = *(unsigned __int8 *)(v6 - 82), sub_1B0A1D714(), *(_BYTE *)(v6 - 83) == 1))
    {
      *(_BYTE *)(v4 + v7) = 1;
      sub_1B0948B70(v4);
      __asm { BR              X10 }
    }
    v9 = *(unsigned __int8 *)(v6 - 84);
  }
  while (v8 == v9);
  sub_1B08A3638(v3, v2);
  sub_1B08A3638(v1, *(_QWORD *)(v6 - 96));
  sub_1B0948B70(v4);
  return 2 * (v8 >= v9);
}

uint64_t sub_1B0948B70(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBEE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for ComparisonResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B0948BFC + 4 * byte_1B0A3A6DF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B0948C30 + 4 * byte_1B0A3A6DA[v4]))();
}

uint64_t sub_1B0948C30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0948C38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0948C40);
  return result;
}

uint64_t sub_1B0948C4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0948C54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B0948C58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0948C60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ComparisonResult()
{
  return &type metadata for ComparisonResult;
}

uint64_t getEnumTagSinglePayload for PSOperator(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x9C)
    goto LABEL_17;
  if (a2 + 100 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 100) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 100;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 100;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 100;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x65;
  v8 = v6 - 101;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PSOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 100 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 100) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x9C)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x9B)
    return ((uint64_t (*)(void))((char *)&loc_1B0948D58 + 4 * byte_1B0A3A6E9[v4]))();
  *a1 = a2 + 100;
  return ((uint64_t (*)(void))((char *)sub_1B0948D8C + 4 * byte_1B0A3A6E4[v4]))();
}

uint64_t sub_1B0948D8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0948D94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0948D9CLL);
  return result;
}

uint64_t sub_1B0948DA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0948DB0);
  *(_BYTE *)result = a2 + 100;
  return result;
}

uint64_t sub_1B0948DB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0948DBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PSOperator()
{
  return &type metadata for PSOperator;
}

unint64_t sub_1B0948DDC()
{
  unint64_t result;

  result = qword_1EEEBBEE8;
  if (!qword_1EEEBBEE8)
  {
    result = MEMORY[0x1B5E0D530]("mDw5\bQ\a", &type metadata for PSOperator);
    atomic_store(result, (unint64_t *)&qword_1EEEBBEE8);
  }
  return result;
}

unint64_t sub_1B0948E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEBBEF0;
  if (!qword_1EEEBBEF0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEBBEF8);
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEBBEF0);
  }
  return result;
}

unint64_t sub_1B0948E74()
{
  unint64_t result;

  result = qword_1EEEBBF00;
  if (!qword_1EEEBBF00)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3A81C, &type metadata for ComparisonResult);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF00);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocaFormat()
{
  return &type metadata for LocaFormat;
}

unint64_t sub_1B0948ECC()
{
  unint64_t result;

  result = qword_1EEEBBF08;
  if (!qword_1EEEBBF08)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3A854, &type metadata for LocaFormat);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF08);
  }
  return result;
}

BOOL sub_1B0948F10(unsigned __int16 *a1)
{
  return *a1 < 2u;
}

BOOL sub_1B0948F20(_WORD *a1)
{
  return *a1 == 0;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HeadTable(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HeadTable(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 58) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HeadTable()
{
  return &type metadata for HeadTable;
}

ValueMetadata *type metadata accessor for HeadTable.Flags()
{
  return &type metadata for HeadTable.Flags;
}

unint64_t sub_1B0948FCC()
{
  unint64_t result;

  result = qword_1EEEBBF10;
  if (!qword_1EEEBBF10)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3A934, &type metadata for HeadTable.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF10);
  }
  return result;
}

unint64_t sub_1B0949014()
{
  unint64_t result;

  result = qword_1EEEBBF18;
  if (!qword_1EEEBBF18)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3A904, &type metadata for HeadTable.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF18);
  }
  return result;
}

unint64_t sub_1B094905C()
{
  unint64_t result;

  result = qword_1EEEBBF20;
  if (!qword_1EEEBBF20)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3A95C, &type metadata for HeadTable.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF20);
  }
  return result;
}

unint64_t sub_1B09490A4()
{
  unint64_t result;

  result = qword_1EEEBBF28;
  if (!qword_1EEEBBF28)
  {
    result = MEMORY[0x1B5E0D530]("EDw5|O\a", &type metadata for HeadTable.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF28);
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadTable.MacStyleFlags()
{
  return &type metadata for HeadTable.MacStyleFlags;
}

unint64_t sub_1B09490FC()
{
  unint64_t result;

  result = qword_1EEEBBF30;
  if (!qword_1EEEBBF30)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3AAD4, &type metadata for HeadTable.MacStyleFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF30);
  }
  return result;
}

unint64_t sub_1B0949144()
{
  unint64_t result;

  result = qword_1EEEBBF38;
  if (!qword_1EEEBBF38)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3AAA4, &type metadata for HeadTable.MacStyleFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF38);
  }
  return result;
}

unint64_t sub_1B094918C()
{
  unint64_t result;

  result = qword_1EEEBBF40;
  if (!qword_1EEEBBF40)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3AAFC, &type metadata for HeadTable.MacStyleFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF40);
  }
  return result;
}

unint64_t sub_1B09491D4()
{
  unint64_t result;

  result = qword_1EEEBBF48;
  if (!qword_1EEEBBF48)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3AB34, &type metadata for HeadTable.MacStyleFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF48);
  }
  return result;
}

uint64_t sub_1B0949218(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    v6 = HIBYTE(a2);
    if (a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAA38);
      v7 = sub_1B0A1D4D4();
      v8 = v7;
      *(_QWORD *)(v7 + 16) = a3;
      *(_QWORD *)(v7 + 32) = v5;
      *(_BYTE *)(v7 + 46) = BYTE6(a2);
      *(_WORD *)(v7 + 44) = WORD2(a2);
      *(_DWORD *)(v7 + 40) = a2;
      *(_BYTE *)(v7 + 47) = v6;
      if (a3 != 1)
      {
        *(_QWORD *)(v7 + 48) = v5;
        *(_DWORD *)(v7 + 56) = a2;
        *(_BYTE *)(v7 + 62) = BYTE6(a2);
        *(_WORD *)(v7 + 60) = WORD2(a2);
        *(_BYTE *)(v7 + 63) = v6;
        v9 = a3 - 2;
        if (v9)
        {
          v10 = (_BYTE *)(v7 + 79);
          do
          {
            sub_1B08CE2B0(v5, a2, v6);
            *(_QWORD *)(v10 - 15) = v5;
            *(_DWORD *)(v10 - 7) = a2;
            *(v10 - 1) = BYTE6(a2);
            *(_WORD *)(v10 - 3) = WORD2(a2);
            *v10 = v6;
            v10 += 16;
            --v9;
          }
          while (v9);
        }
        sub_1B08CE2B0(v5, a2, v6);
      }
    }
    else
    {
      sub_1B08CE2C4(result, a2, SHIBYTE(a2));
      return MEMORY[0x1E0DEE9D8];
    }
    return v8;
  }
  return result;
}

void CharacterMap.query<A>(utf16:output:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[40];
  _BYTE v13[48];

  v8 = *(_QWORD *)(v6 + 88);
  sub_1B08AE338(v6 + 8, (uint64_t)v13);
  sub_1B08CE4D4(v6 + 48, (uint64_t)v12, &qword_1EEEBA7C0);
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBBF50);
  v11 = type metadata accessor for CheckedBufferView(0, a6, v9, v10);
  sub_1B08CE2D8(&qword_1EEEBBF58, &qword_1EEEBBF50, (uint64_t)&protocol conformance descriptor for CheckedBufferView<A>);
  MEMORY[0x1B5E0D530](&protocol conformance descriptor for CheckedBufferView<A>, v11);
  sub_1B094C8A0();
  CharacterMapQuery.init(mapWindowSize:cmap:uvsMap:inputCollection:outputCollection:inputToUVSWithRanges:)(v8);
}

Swift::Void __swiftcall CharacterMapQuery.mapOrZero()()
{
  int value;
  int v1;

  do
    value = CharacterMapQuery.mapPartial()().value;
  while (value == 4);
  if (value)
  {
    do
    {
      if (!CharacterMapQuery.skipCharacter()())
        break;
      do
        v1 = CharacterMapQuery.mapPartial()().value;
      while (v1 == 4);
    }
    while (v1);
  }
}

_QWORD *CharacterMap.computeGlyphLookupTable()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE v49[40];
  _BYTE v50[40];
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = v0;
  v46 = (_QWORD *)sub_1B0949218(0, 0x400000000000000uLL, *v0);
  v2 = v0[4];
  v3 = v0[5];
  v41 = (uint64_t)(v0 + 1);
  __swift_project_boxed_opaque_existential_1(v0 + 1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  v38 = *(_QWORD *)(v4 + 16);
  if (!v38)
    goto LABEL_37;
  v5 = 0;
  v39 = (uint64_t)(v0 + 6);
  v40 = v4 + 32;
  v37 = v0;
LABEL_3:
  v6 = (unsigned int *)(v40 + 8 * v5);
  v7 = *v6;
  v8 = v6[1];
  v9 = (v7 - v8);
  v43 = v7;
  v10 = v8 >= v7;
  v11 = (v8 - v7);
  if (v10)
    v12 = v11;
  else
    v12 = -v9;
  if (v12 < -1)
    goto LABEL_55;
  v45 = v8;
  v13 = v12 + 1;
  if (v12 == -1)
  {
    v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v14 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v14 = sub_1B0A1D4D4();
    *(_QWORD *)(v14 + 16) = v13;
    *(_DWORD *)(v14 + 32) = 0;
    if (v12)
    {
      v15 = v14;
      bzero((void *)(v14 + 36), 4 * v12);
      v14 = v15;
    }
    else
    {
      v13 = 1;
    }
  }
  v44 = v14;
  v16 = v14 + 32;
  type metadata accessor for RefcountCheck();
  v17 = swift_allocObject();
  v18 = v1[11];
  sub_1B08AE338(v41, (uint64_t)v50);
  sub_1B08CE4D4(v39, (uint64_t)v49, &qword_1EEEBA7C0);
  swift_retain();
  sub_1B094C418(v18, (uint64_t)v50, (uint64_t)v49, v43 | (v45 << 32), v17, v16, v13, 0, (uint64_t)v51, (uint64_t)sub_1B08E1C84, 0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    v19 = v46;
  else
    v19 = sub_1B0953B38(v46);
  v42 = v5 + 1;
  v46 = v19;
  v48 = v19 + 4;
LABEL_15:
  v20 = v54;
  do
    v21 = sub_1B094F910();
  while (v21 == 4);
  if (__OFSUB__(v54, v20))
  {
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (__OFADD__(v20, v54 - v20))
    goto LABEL_52;
  if (v54 < v20)
    goto LABEL_53;
  if (__OFADD__(v20, v54 - v20))
    goto LABEL_54;
  v22 = v21;
  v47 = v54;
  swift_retain();
  v23 = v43;
  v24 = (_DWORD)v43 << 16;
  while (1)
  {
    if (v47 == v20)
    {
LABEL_30:
      swift_release();
      if (v22 && (sub_1B094AA20() & 1) != 0)
        goto LABEL_15;
      sub_1B08AE3C4((uint64_t)v51, &qword_1EEEBAC88);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_58;
      swift_bridgeObjectRelease();
      swift_release();
      v1 = v37;
      v5 = v42;
      if (v42 == v38)
        goto LABEL_37;
      goto LABEL_3;
    }
    v25 = *(unsigned int *)(v44 + 4 * v20 + 32);
    if (v46[2] > v25)
      break;
    if ((_DWORD)v45 == v23)
      goto LABEL_30;
    v24 += 0x10000;
    ++v20;
    v10 = __CFADD__(v23++, 1);
    if (v10)
    {
      __break(1u);
      goto LABEL_36;
    }
  }
  if (!HIBYTE(v23))
  {
    v26 = &v48[2 * v25];
    v27 = *((unsigned __int8 *)v26 + 15);
    v50[0] = *((_BYTE *)v26 + 9);
    __asm { BR              X9 }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  swift_bridgeObjectRelease();
  sub_1B08CE4D4((uint64_t)(v1 + 6), (uint64_t)v51, &qword_1EEEBA7C0);
  v28 = v52;
  if (v52)
  {
    v29 = v53;
    __swift_project_boxed_opaque_existential_1(v51, v52);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
    {
      v32 = v30 + 32;
      while (1)
      {
        v33 = *(_QWORD *)(v32 + 8);
        if ((int64_t)v33 < v46[2])
          break;
        v32 += 16;
        if (!--v31)
          goto LABEL_48;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v34 = v46;
        if ((v33 & 0x8000000000000000) == 0)
        {
LABEL_44:
          if (v33 < v34[2])
          {
            v35 = HIBYTE(v34[2 * v33 + 5]);
            LOBYTE(v51[0]) = BYTE1(v34[2 * v33 + 5]);
            __asm { BR              X9 }
          }
LABEL_57:
          __break(1u);
LABEL_58:
          sub_1B0A1D984();
          __break(1u);
          JUMPOUT(0x1B0949EFCLL);
        }
      }
      else
      {
        v34 = sub_1B0953B38(v46);
        if ((v33 & 0x8000000000000000) == 0)
          goto LABEL_44;
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_48:
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B08AE3C4((uint64_t)v51, &qword_1EEEBA7C0);
  }
  return v46;
}

uint64_t UnicodeVariation.variationSelector.getter(unint64_t a1)
{
  uint64_t v1;

  v1 = BYTE3(a1) | 0xFE00;
  if ((a1 & 0xF0000000) != 0)
    v1 = (BYTE3(a1) - 16) | 0xE0100;
  if ((a1 & 0x100000000) != 0)
    v1 = 0;
  return v1 | ((HIDWORD(a1) & 1) << 32);
}

uint64_t UnicodeVariation.codePoint.getter(int a1)
{
  return a1 & 0xFF00 | (a1 << 16) | BYTE2(a1);
}

uint64_t sub_1B0949F78(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B0953B10((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_1B0953BC4(v5);
  *a1 = v2;
  return result;
}

double UnicodeVariation.codePoints.getter(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  double result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = a1;
  if ((a1 & 0x100000000) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA808);
    v6 = swift_allocObject();
    *(_QWORD *)&result = 1;
    *(_OWORD *)(v6 + 16) = xmmword_1B0A363D0;
    HIDWORD(v7) = v1;
    LODWORD(v7) = v1;
    *(_DWORD *)(v6 + 32) = (v7 >> 16) & 0xFF00FF | v1 & 0xFF00;
  }
  else
  {
    if (BYTE3(a1) <= 0xFu)
      v2 = BYTE3(a1) | 0xFE00;
    else
      v2 = (BYTE3(a1) - 16) | 0xE0100;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA808);
    v3 = swift_allocObject();
    *(_QWORD *)&result = 2;
    *(_OWORD *)(v3 + 16) = xmmword_1B0A36A90;
    HIDWORD(v5) = v1;
    LODWORD(v5) = v1;
    *(_DWORD *)(v3 + 32) = (v5 >> 16) & 0xFF00FF | v1 & 0xFF00;
    *(_DWORD *)(v3 + 36) = v2;
  }
  return result;
}

uint64_t CharacterMap.getMappedRanges()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

void CharacterMap.query<A, B>(codePoints:output:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  _BYTE v30[40];
  _BYTE v31[40];

  v27[1] = a7;
  v14 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v7 + 88);
  sub_1B08AE338(v7 + 8, (uint64_t)v31);
  sub_1B08CE4D4(v7 + 48, (uint64_t)v30, &qword_1EEEBA7C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a3);
  v18 = *(_QWORD *)(a2 + 24);
  v27[2] = *(_QWORD *)a2;
  v28 = *(_OWORD *)(a2 + 8);
  v29 = v18;
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a3;
  v19[3] = a4;
  v19[4] = a5;
  v19[5] = a6;
  v22 = type metadata accessor for CheckedBufferView(0, a4, v20, v21);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = type metadata accessor for IndexRangedSequence(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  swift_retain();
  MEMORY[0x1B5E0D530](&protocol conformance descriptor for CheckedBufferView<A>, v22);
  MEMORY[0x1B5E0D530](&protocol conformance descriptor for IndexRangedSequence<A>, v26);
  CharacterMapQuery.init(mapWindowSize:cmap:uvsMap:inputCollection:outputCollection:inputToUVSWithRanges:)(v17);
}

FontParser::CharacterMapQueryStatus __swiftcall CharacterMapQuery.map()()
{
  FontParser::CharacterMapQueryStatus result;

  do
    result = CharacterMapQuery.mapPartial()().value;
  while (result == FontParser_CharacterMapQueryStatus_unknownDefault);
  return result;
}

BOOL static CharacterMapQueryStatus.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void sub_1B094A2E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v4 = v0[9];
  v5 = __OFSUB__(v4, v1);
  v6 = v4 - v1;
  if (v5)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v7 = v3 - v4;
  if (__OFSUB__(v3, v4))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v5 = __OFADD__(v6, v7);
  v8 = v6 + v7;
  if (v5)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v3 < v4 || v8 < v6)
    goto LABEL_31;
  v10 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[11];
  v11 = v0[2];
  if (v11)
    v12 = v11 + 2 * v6;
  else
    v12 = 0;
  v25 = v0[1];
  *(_QWORD *)&v26 = v12;
  *((_QWORD *)&v26 + 1) = v8 - v6;
  v27 = v4;
  swift_retain();
  v10(&v22, &v25);
  swift_release();
  v13 = v24;
  v25 = v22;
  v26 = v23;
  v27 = v24;
  v28 = v24;
  sub_1B0937FD8();
  if ((v14 & 0x100000000) != 0)
    goto LABEL_15;
  v15 = v28;
  if (v28 < v13)
    goto LABEL_32;
  if (v4 == v28)
  {
LABEL_15:
    swift_release();
    return;
  }
  v17 = v0[7];
  v16 = v0[8];
  v5 = __OFADD__(v16, v17);
  v18 = v16 + v17;
  if (v5)
    goto LABEL_33;
  if (v18 < v16)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v4 < v28)
  {
    v19 = v0[10];
    v20 = v0[6];
    v21 = v19;
    while (v19 >= v16 && v21 < v18)
    {
      if (__OFSUB__(v21, v16))
        goto LABEL_26;
      *(_QWORD *)(v20 + 8 * (v21 - v16)) = 0;
      ++v21;
      if (v15 == ++v4)
      {
        swift_release();
        v0[9] = v15;
        v0[10] = v21;
        return;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_35:
  __break(1u);
}

void sub_1B094A468()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v4 = v0[9];
  v5 = __OFSUB__(v4, v1);
  v6 = v4 - v1;
  if (v5)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v7 = v3 - v4;
  if (__OFSUB__(v3, v4))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v5 = __OFADD__(v6, v7);
  v8 = v6 + v7;
  if (v5)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v3 < v4 || v8 < v6)
    goto LABEL_31;
  v10 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[11];
  v11 = v0[2];
  if (v11)
    v12 = v11 + 2 * v6;
  else
    v12 = 0;
  v25 = v0[1];
  *(_QWORD *)&v26 = v12;
  *((_QWORD *)&v26 + 1) = v8 - v6;
  v27 = v4;
  swift_retain();
  v10(&v22, &v25);
  swift_release();
  v13 = v24;
  v25 = v22;
  v26 = v23;
  v27 = v24;
  v28 = v24;
  sub_1B0937FD8();
  if ((v14 & 0x100000000) != 0)
    goto LABEL_15;
  v15 = v28;
  if (v28 < v13)
    goto LABEL_32;
  if (v4 == v28)
  {
LABEL_15:
    swift_release();
    return;
  }
  v17 = v0[7];
  v16 = v0[8];
  v5 = __OFADD__(v16, v17);
  v18 = v16 + v17;
  if (v5)
    goto LABEL_33;
  if (v18 < v16)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v4 < v28)
  {
    v19 = v0[10];
    v20 = v0[6];
    v21 = v19;
    while (v19 >= v16 && v21 < v18)
    {
      if (__OFSUB__(v21, v16))
        goto LABEL_26;
      *(_DWORD *)(v20 + 4 * (v21 - v16)) = 0;
      ++v21;
      if (v15 == ++v4)
      {
        swift_release();
        v0[9] = v15;
        v0[10] = v21;
        return;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_1B094A5E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v7)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t v24;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v2 + v1;
  if (__OFADD__(v2, v1))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v4 = v0;
  v5 = v0[9];
  if (v3 < v5 || v3 < v2)
    goto LABEL_25;
  if (v5 < v2)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[11];
  v9 = v0[1];
  v8 = v0[2];
  v22[0] = v0[9];
  v22[1] = v2 + v1;
  v22[2] = v9;
  v22[3] = v8;
  v22[4] = v1;
  v22[5] = v2;
  swift_retain();
  v7(&v23, v22);
  result = swift_release();
  v11 = v23;
  v12 = v24;
  if (v23 == v24)
    goto LABEL_11;
  v13 = v23 + 1;
  if (__OFADD__(v23, 1))
    goto LABEL_27;
  if (v13 < v23)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = sub_1B09545D0(v23);
  if (v5 != v13)
  {
    v15 = v0[7];
    v14 = v0[8];
    v16 = __OFADD__(v14, v15);
    v17 = v14 + v15;
    if (v16)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v17 < v14)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v5 >= v13)
    {
LABEL_31:
      __break(1u);
      return result;
    }
    v18 = v0[10];
    v19 = v0[6];
    v20 = v11 - v5 + 1;
    v21 = v18;
    while (v18 >= v14 && v21 < v17)
    {
      if (__OFSUB__(v21, v14))
        goto LABEL_23;
      *(_WORD *)(v19 + 2 * (v21 - v14)) = 0;
      ++v21;
      if (!--v20)
      {
        sub_1B092CD84((uint64_t)&v23);
        v4[9] = v13;
        v4[10] = v21;
        return v11 != v12;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_11:
  sub_1B092CD84((uint64_t)&v23);
  return v11 != v12;
}

void sub_1B094A740()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v4 = v0[9];
  v5 = __OFSUB__(v4, v1);
  v6 = v4 - v1;
  if (v5)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v7 = v3 - v4;
  if (__OFSUB__(v3, v4))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v5 = __OFADD__(v6, v7);
  v8 = v6 + v7;
  if (v5)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v3 < v4 || v8 < v6)
    goto LABEL_31;
  v10 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[11];
  v11 = v0[2];
  if (v11)
    v12 = v11 + 2 * v6;
  else
    v12 = 0;
  v25 = v0[1];
  *(_QWORD *)&v26 = v12;
  *((_QWORD *)&v26 + 1) = v8 - v6;
  v27 = v4;
  swift_retain();
  v10(&v22, &v25);
  swift_release();
  v13 = v24;
  v25 = v22;
  v26 = v23;
  v27 = v24;
  v28 = v24;
  sub_1B0937FD8();
  if ((v14 & 0x100000000) != 0)
    goto LABEL_15;
  v15 = v28;
  if (v28 < v13)
    goto LABEL_32;
  if (v4 == v28)
  {
LABEL_15:
    swift_release();
    return;
  }
  v17 = v0[7];
  v16 = v0[8];
  v5 = __OFADD__(v16, v17);
  v18 = v16 + v17;
  if (v5)
    goto LABEL_33;
  if (v18 < v16)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v4 < v28)
  {
    v19 = v0[10];
    v20 = v0[6];
    v21 = v19;
    while (v19 >= v16 && v21 < v18)
    {
      if (__OFSUB__(v21, v16))
        goto LABEL_26;
      *(_WORD *)(v20 + 2 * (v21 - v16)) = 0;
      ++v21;
      if (v15 == ++v4)
      {
        swift_release();
        v0[9] = v15;
        v0[10] = v21;
        return;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_1B094A8C0()
{
  uint64_t v0;
  void (*v1)(uint64_t *__return_ptr, int *);
  int v2;
  char v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  char v19;
  unint64_t v20;
  int v21;
  char v22;
  int v23;
  char v24;
  unint64_t v25;
  int v26;
  char v27;

  v1 = *(void (**)(uint64_t *__return_ptr, int *))(v0 + 64);
  v2 = *(_DWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 52);
  v4 = *(_DWORD *)(v0 + 8);
  v5 = *(_DWORD *)(v0 + 12);
  v21 = v2;
  v22 = v3;
  v23 = 0;
  v24 = 1;
  v25 = __PAIR64__(v5, v4);
  v1(&v17, &v21);
  v21 = v17;
  v22 = BYTE4(v17);
  v23 = v18;
  v24 = v19;
  v25 = v20;
  v26 = v17;
  v27 = BYTE4(v17);
  result = sub_1B08E11EC();
  if ((v8 & 0x100000000) != 0)
    return (v8 & 0x100000000) == 0;
  if ((v3 & 1) == 0)
    goto LABEL_5;
  v9 = 1;
  if ((v7 & 0x100000000) != 0)
    return (v8 & 0x100000000) == 0;
  while (1)
  {
    v11 = *(_QWORD *)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 40);
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      break;
    if (v12 < v10)
      goto LABEL_19;
    v13 = *(_QWORD *)(v0 + 56);
    if (v13 < v10)
      goto LABEL_20;
    if (v13 >= v12)
      goto LABEL_21;
    v14 = __OFSUB__(v13, v10);
    v15 = v13 - v10;
    if (v14)
      goto LABEL_22;
    *(_WORD *)(*(_QWORD *)(v0 + 24) + 2 * v15) = 0;
    *(_QWORD *)(v0 + 56) = v13 + 1;
    if ((v9 & 1) != 0)
      goto LABEL_24;
    if (v2 == v5)
    {
      v2 = 0;
      *(_DWORD *)(v0 + 48) = 0;
      *(_BYTE *)(v0 + 52) = 1;
      v9 = 1;
      if ((v7 & 0x100000000) != 0)
        return (v8 & 0x100000000) == 0;
    }
    else
    {
      if (__CFADD__(v2++, 1))
        goto LABEL_23;
      *(_DWORD *)(v0 + 48) = v2;
      *(_BYTE *)(v0 + 52) = 0;
LABEL_5:
      v9 = 0;
      if ((v7 & 0x100000000) == 0 && v2 == (_DWORD)v7)
        return (v8 & 0x100000000) == 0;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1B094AA20()
{
  uint64_t v0;
  void (*v1)(uint64_t *__return_ptr, int *);
  int v2;
  char v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  char v19;
  unint64_t v20;
  int v21;
  char v22;
  int v23;
  char v24;
  unint64_t v25;
  int v26;
  char v27;

  v1 = *(void (**)(uint64_t *__return_ptr, int *))(v0 + 64);
  v2 = *(_DWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 52);
  v4 = *(_DWORD *)(v0 + 8);
  v5 = *(_DWORD *)(v0 + 12);
  v21 = v2;
  v22 = v3;
  v23 = 0;
  v24 = 1;
  v25 = __PAIR64__(v5, v4);
  v1(&v17, &v21);
  v21 = v17;
  v22 = BYTE4(v17);
  v23 = v18;
  v24 = v19;
  v25 = v20;
  v26 = v17;
  v27 = BYTE4(v17);
  result = sub_1B08E11EC();
  if ((v8 & 0x100000000) != 0)
    return (v8 & 0x100000000) == 0;
  if ((v3 & 1) == 0)
    goto LABEL_5;
  v9 = 1;
  if ((v7 & 0x100000000) != 0)
    return (v8 & 0x100000000) == 0;
  while (1)
  {
    v11 = *(_QWORD *)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 40);
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      break;
    if (v12 < v10)
      goto LABEL_19;
    v13 = *(_QWORD *)(v0 + 56);
    if (v13 < v10)
      goto LABEL_20;
    if (v13 >= v12)
      goto LABEL_21;
    v14 = __OFSUB__(v13, v10);
    v15 = v13 - v10;
    if (v14)
      goto LABEL_22;
    *(_DWORD *)(*(_QWORD *)(v0 + 24) + 4 * v15) = 0;
    *(_QWORD *)(v0 + 56) = v13 + 1;
    if ((v9 & 1) != 0)
      goto LABEL_24;
    if (v2 == v5)
    {
      v2 = 0;
      *(_DWORD *)(v0 + 48) = 0;
      *(_BYTE *)(v0 + 52) = 1;
      v9 = 1;
      if ((v7 & 0x100000000) != 0)
        return (v8 & 0x100000000) == 0;
    }
    else
    {
      if (__CFADD__(v2++, 1))
        goto LABEL_23;
      *(_DWORD *)(v0 + 48) = v2;
      *(_BYTE *)(v0 + 52) = 0;
LABEL_5:
      v9 = 0;
      if ((v7 & 0x100000000) == 0 && v2 == (_DWORD)v7)
        return (v8 & 0x100000000) == 0;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CharacterMapQuery.skipCharacter()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  void (**v31)(char *);
  void (*v32)(char *);
  void (*v33)(char *);
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  Swift::Bool result;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *);
  void (*v61)(char *);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  void (*TupleTypeMetadata2)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v2 = v0;
  v81 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v81 + 8);
  v4 = *(_QWORD *)(v0 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v57 = (char *)&v52 - v6;
  v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 24) + 16);
  v59 = v7;
  v77 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v77);
  v76 = (char *)&v52 - v8;
  v79 = v4;
  v80 = v3;
  v86 = swift_getAssociatedTypeWitness();
  v82 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v58 = (char *)&v52 - v9;
  v10 = *(_QWORD *)(v2 + 40);
  v11 = *(_QWORD *)(v2 + 16);
  v12 = swift_getAssociatedTypeWitness();
  v89 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v85 = (char *)&v52 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = sub_1B0A1D678();
  TupleTypeMetadata2 = (void (*)(char *, uint64_t))swift_getTupleTypeMetadata2();
  v56 = sub_1B0A1D690();
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v74 = (char *)&v52 - v16;
  v70 = *(_QWORD *)(v15 - 8);
  v71 = v15;
  MEMORY[0x1E0C80A78](v17);
  v69 = (char *)&v52 - v18;
  v87 = v11;
  v88 = v10;
  v19 = v12;
  v72 = (void (*)(char *, uint64_t, uint64_t))swift_getAssociatedTypeWitness();
  v67 = *((_QWORD *)v72 - 1);
  MEMORY[0x1E0C80A78](v72);
  v66 = (char *)&v52 - v20;
  v21 = sub_1B0A1D918();
  v63 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v52 - v22;
  MEMORY[0x1E0C80A78](v24);
  v62 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = *(_QWORD *)(v2 + 56);
  v65 = v26;
  v27 = swift_getAssociatedTypeWitness();
  v68 = *(_QWORD *)(v27 - 8);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v52 - v29;
  v31 = (void (**)(char *))(v1 + *(int *)(v2 + 92));
  v33 = *v31;
  v32 = v31[1];
  v61 = v33;
  v60 = v32;
  v34 = *(int *)(v2 + 76);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 16);
  v54 = v1 + *(int *)(v2 + 84);
  v84 = v35;
  ((void (*)(char *, double))v35)(v23, v28);
  v83 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  result = sub_1B0A1D1E0();
  if (result)
  {
    v53 = v2;
    v37 = v1;
    MEMORY[0x1B5E0D530](MEMORY[0x1E0DEC928], v21);
    v38 = v66;
    v75 = v1 + v34;
    sub_1B0A1D648();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v23, v21);
    v61(v38);
    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v67 + 8))(v38, v72);
    sub_1B0A1D3F0();
    swift_getAssociatedConformanceWitness();
    v39 = v74;
    sub_1B0A1D714();
    v40 = (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)TupleTypeMetadata2 - 1) + 48))(v39, 1);
    v41 = v40;
    if (v40 == 1)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v30, v27);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v56);
    }
    else
    {
      LODWORD(v65) = v40;
      v66 = v30;
      v67 = v27;
      v42 = v71;
      v43 = v69;
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v39, v71);
      v44 = &v43[*(int *)(v42 + 36)];
      v45 = v85;
      v46 = v54;
      v84(v85, v54, v19);
      v74 = v44;
      LOBYTE(v44) = sub_1B0A1D1E0();
      TupleTypeMetadata2 = *(void (**)(char *, uint64_t))(v89 + 8);
      TupleTypeMetadata2(v45, v19);
      v47 = v53;
      v48 = v86;
      v49 = v58;
      if ((v44 & 1) == 0)
      {
        v72 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
        v90 = v37;
        do
        {
          v50 = v37 + *(int *)(v47 + 88);
          v72(v49, v50, v48);
          swift_getAssociatedConformanceWitness();
          sub_1B0A1DABC();
          sub_1B0A1DA80();
          sub_1B0A1D1C8();
          v48 = v86;
          sub_1B0A1D5AC();
          (*(void (**)(uint64_t, char *, uint64_t))(v82 + 40))(v50, v49, v48);
          v51 = v85;
          sub_1B0A1D5AC();
          (*(void (**)(uint64_t, char *, uint64_t))(v89 + 40))(v46, v51, v19);
          v84(v51, v46, v19);
          LOBYTE(v50) = sub_1B0A1D1E0();
          TupleTypeMetadata2(v51, v19);
          v37 = v90;
        }
        while ((v50 & 1) == 0);
      }
      (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v71);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
      v41 = v65;
    }
    return v41 != 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CharacterMap.subscript.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  if ((a2 & 0x100000000) == 0)
  {
    sub_1B08CE4D4((uint64_t)(v3 + 6), (uint64_t)v17, &qword_1EEEBA7C0);
    v6 = v18;
    if (v18)
    {
      v7 = v19;
      __swift_project_boxed_opaque_existential_1(v17, v18);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6, v7);
      v10 = v9;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      if ((v10 & 0x101) == 0)
        return v8;
    }
    else
    {
      sub_1B08AE3C4((uint64_t)v17, &qword_1EEEBA7C0);
    }
  }
  v11 = v3 + 1;
  v13 = v3[4];
  v12 = v3[5];
  __swift_project_boxed_opaque_existential_1(v11, v13);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 0, 1, v13, v12);
  if ((v15 & 1) != 0)
    return 0;
  else
    return v14;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  if ((a2 & 0x100000000) == 0)
  {
    sub_1B08CE4D4((uint64_t)(v3 + 6), (uint64_t)v17, &qword_1EEEBA7C0);
    v6 = v18;
    if (v18)
    {
      v7 = v19;
      __swift_project_boxed_opaque_existential_1(v17, v18);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6, v7);
      v10 = v9;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      if ((v10 & 0x101) == 0)
        return v8;
    }
    else
    {
      sub_1B08AE3C4((uint64_t)v17, &qword_1EEEBA7C0);
    }
  }
  v11 = v3 + 1;
  v13 = v3[4];
  v12 = v3[5];
  __swift_project_boxed_opaque_existential_1(v11, v13);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 0, 1, v13, v12);
  if ((v15 & 1) != 0)
    return 0;
  else
    return v14;
}

uint64_t UnicodeVariation.description.getter(unint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  UnicodeVariation.codePoints.getter(a1 | ((HIDWORD(a1) & 1) << 32));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAA50);
  sub_1B08CE2D8((unint64_t *)&qword_1EEEBAA58, &qword_1EEEBAA50, MEMORY[0x1E0DEAF50]);
  sub_1B08CE318();
  result = sub_1B0A1D2C4();
  if (v2)
  {
    v3 = result;
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B094B538(__int128 *a1, void (*a2)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for RefcountCheck();
  v6 = swift_allocObject();
  v7 = *a1;
  v8 = 0;
  a2(&v9, &v6);
  if (v2)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
      return swift_release();
    goto LABEL_7;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_7:
    result = sub_1B0A1D984();
    __break(1u);
    return result;
  }
  swift_release();
  return v9;
}

uint64_t CharacterMap.init(glyphCount:characterMap:unicodeVariationMap:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  *(_OWORD *)(a4 + 64) = 0u;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 2048;
  *(_QWORD *)a4 = a1;
  *(_OWORD *)(a4 + 48) = 0u;
  v5 = a4 + 48;
  sub_1B08AEF8C(a2, a4 + 8);
  return sub_1B0945E30(a3, v5);
}

uint64_t UnicodeVariation.variationSelector.setter(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  char v3;
  char v4;
  BOOL v5;
  char v6;
  char v7;

  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result >> 4;
    v3 = result + 16;
    if ((result - 917760) < 0xF0)
    {
      v4 = 0;
    }
    else
    {
      v3 = 0;
      v4 = 1;
    }
    v5 = v2 == 4064;
    if (v2 == 4064)
      v6 = result;
    else
      v6 = v3;
    if (v5)
      v7 = 0;
    else
      v7 = v4;
    *(_BYTE *)(v1 + 3) = v6;
    *(_BYTE *)(v1 + 4) = v7;
  }
  return result;
}

uint64_t *(*UnicodeVariation.variationSelector.modify(uint64_t a1))(uint64_t *result, char a2)
{
  uint64_t v1;
  unsigned int v2;
  char v3;
  int v4;

  v2 = *(unsigned __int8 *)(v1 + 3);
  v3 = *(_BYTE *)(v1 + 4);
  if (v2 <= 0xF)
    v4 = v2 | 0xFE00;
  else
    v4 = (v2 - 16) | 0xE0100;
  if ((*(_BYTE *)(v1 + 4) & 1) != 0)
    v4 = 0;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = v3;
  *(_QWORD *)a1 = v1;
  return sub_1B094B70C;
}

uint64_t *sub_1B094B70C(uint64_t *result, char a2)
{
  unsigned int v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;

  v2 = *((_DWORD *)result + 2);
  if ((a2 & 1) != 0)
  {
    if ((*((_BYTE *)result + 12) & 1) == 0)
    {
      v3 = v2 + 16;
      if (v2 - 917760 <= 0xEF)
      {
        v4 = 0;
      }
      else
      {
        v3 = 0;
        v4 = 1;
      }
      if (v2 >> 4 == 4064)
      {
        v5 = 0;
      }
      else
      {
        LOBYTE(v2) = v3;
        v5 = v4;
      }
LABEL_16:
      v8 = *result;
      *(_BYTE *)(v8 + 3) = v2;
      *(_BYTE *)(v8 + 4) = v5;
      return result;
    }
    __break(1u);
  }
  else if ((*((_BYTE *)result + 12) & 1) == 0)
  {
    v6 = v2 + 16;
    if (v2 - 917760 <= 0xEF)
    {
      v7 = 0;
    }
    else
    {
      v6 = 0;
      v7 = 1;
    }
    if (v2 >> 4 == 4064)
    {
      v5 = 0;
    }
    else
    {
      LOBYTE(v2) = v6;
      v5 = v7;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t UnicodeVariation.codePoint.setter(uint64_t result)
{
  _BYTE *v1;

  if (BYTE3(result))
  {
    __break(1u);
  }
  else
  {
    *v1 = BYTE2(result);
    v1[1] = BYTE1(result);
    v1[2] = result;
  }
  return result;
}

uint64_t (*UnicodeVariation.codePoint.modify(uint64_t a1))(uint64_t result, char a2)
{
  unsigned __int8 *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = (*v1 << 16) | (v1[1] << 8) | v1[2];
  return sub_1B094B7F4;
}

uint64_t sub_1B094B7F4(uint64_t result, char a2)
{
  unsigned int v2;
  unsigned int v3;
  _BYTE *v4;

  v2 = *(_DWORD *)(result + 8);
  v3 = HIBYTE(v2);
  if ((a2 & 1) != 0)
  {
    if (!v3)
    {
LABEL_5:
      v4 = *(_BYTE **)result;
      *v4 = BYTE2(v2);
      v4[1] = BYTE1(v2);
      v4[2] = v2;
      return result;
    }
    __break(1u);
  }
  if (!v3)
    goto LABEL_5;
  __break(1u);
  return result;
}

unint64_t UnicodeVariation.init(codePoint:)(unint64_t result)
{
  if (!BYTE3(result))
    return (result << 16) | 0x100000000 | (unsigned __int16)result & 0xFF00 | (unint64_t)WORD1(result);
  __break(1u);
  return result;
}

uint64_t UnicodeVariation.init(codePoint:variationSelector:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = sub_1B0954924(a1, a2 | ((HIDWORD(a2) & 1) << 32));
  return v2 & 0xFFFFFFFFFFLL | (((v2 >> 40) & 1) << 40);
}

uint64_t sub_1B094B8A0()
{
  unsigned int *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  UnicodeVariation.codePoints.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAA50);
  sub_1B08CE2D8((unint64_t *)&qword_1EEEBAA58, &qword_1EEEBAA50, MEMORY[0x1E0DEAF50]);
  sub_1B08CE318();
  result = sub_1B0A1D2C4();
  if (v2)
  {
    v3 = result;
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::UInt32_optional __swiftcall CharacterMapRepresentation.findGlyphIndex(for:)(Swift::UInt32 a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v3 = (*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(v1 + 48))(*(_QWORD *)&a1, 0, 1);
  if ((v2 & 1) != 0)
    v3 = 0;
  return (Swift::UInt32_optional)(v3 | ((unint64_t)(v2 & 1) << 32));
}

uint64_t CharacterMap.glyphCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CharacterMap.format.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t CharacterMap.platform.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

FontParser::Encoding_optional CharacterMap.encoding.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  v3 = v0[4];
  v4 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v3);
  LOWORD(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  v6 = v0[4];
  v5 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v6);
  v7 = (*(unsigned __int16 (**)(uint64_t, uint64_t))(v5 + 32))(v6, v5);
  return Platform.interpret(encoding:language:)(v3, (Swift::UInt16_optional)v7);
}

uint64_t CharacterMap.language.getter()
{
  return sub_1B094BB08((uint64_t (*)(uint64_t, uint64_t))Platform.interpret(language:));
}

uint64_t CharacterMap.region.getter()
{
  return sub_1B094BB08((uint64_t (*)(uint64_t, uint64_t))Platform.interpret(region:));
}

uint64_t sub_1B094BB08(uint64_t (*a1)(uint64_t, uint64_t))
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[4];
  v3 = v1[5];
  __swift_project_boxed_opaque_existential_1(v1 + 1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  v6 = v1[4];
  v5 = v1[5];
  __swift_project_boxed_opaque_existential_1(v1 + 1, v6);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v6, v5);
  return a1(v7, v4);
}

uint64_t CharacterMap.subscript.getter(unint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = sub_1B095428C(a1, a2);
  if (v5)
  {
    v6 = v5;
    v7 = sub_1B09548B0(v5, 0);
    v8 = sub_1B0954658(&v20, (uint64_t)(v7 + 4), v6, a1, a2);
    swift_bridgeObjectRetain_n();
    result = swift_bridgeObjectRelease();
    if (v8 != v6)
    {
      __break(1u);
      return result;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v10 = v7[2];
  if (v10 != 2)
  {
    if (v10 == 1)
    {
      v11 = *((unsigned int *)v7 + 8);
      swift_release();
      v12 = v2[4];
      v13 = v2[5];
      __swift_project_boxed_opaque_existential_1(v2 + 1, v12);
      LODWORD(result) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 0, 1, v12, v13);
      if ((v14 & 1) != 0)
        return 0;
      else
        return result;
    }
    swift_release();
    return 0;
  }
  v15 = *((unsigned int *)v7 + 8);
  v16 = *((unsigned int *)v7 + 9);
  swift_release();
  LOBYTE(v20) = 0;
  v17 = sub_1B0954924(v15, v16);
  if ((v17 & 0x10000000000) != 0)
    return 0;
  v18 = BYTE3(v17) | 0xFE00;
  if ((v17 & 0xF0000000) != 0)
    v18 = (BYTE3(v17) - 16) | 0xE0100;
  if ((v17 & 0x100000000) != 0)
    v19 = 0;
  else
    v19 = v18;
  return CharacterMap.subscript.getter(v17 & 0xFF00 | (v17 << 16) | BYTE2(v17), v19 | ((HIDWORD(v17) & 1) << 32));
}

uint64_t CharacterMap.createGlyphSubset<A>(utf16:includeGlyphZero:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[5];
  char v13;
  uint64_t v14;

  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a1;
  v13 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBAA50);
  ContiguousArrayStorage.withCheckedBufferView<A>(action:)((uint64_t)sub_1B09549BC, (uint64_t)v12, a3, v8, a4);
  sub_1B08A002C(v14);
  v10 = v9;
  result = swift_bridgeObjectRelease();
  *a5 = v10;
  return result;
}

unint64_t sub_1B094BEC4@<X0>(uint64_t a1@<X4>, char a2@<W6>, uint64_t a3@<X7>, uint64_t *a4@<X8>, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v17;
  uint64_t v18;

  v7 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a3);
  if (v7 < 0)
  {
    __break(1u);
LABEL_14:
    a1 = (uint64_t)sub_1B0953B4C(a1);
    goto LABEL_6;
  }
  v8 = v7;
  v15 = a4;
  if (v7)
  {
    a1 = sub_1B0A1D4D4();
    *(_QWORD *)(a1 + 16) = v8;
    bzero((void *)(a1 + 32), 4 * v8);
  }
  else
  {
    a1 = MEMORY[0x1E0DEE9D8];
  }
  MEMORY[0x1E0C80A78](v7);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_14;
LABEL_6:
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v17 = a1 + 32;
  *((_QWORD *)&v17 + 1) = v9;
  v10 = sub_1B094B538(&v17, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B0958058);
  v18 = a1;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 < v10)
  {
    __break(1u);
LABEL_16:
    result = (unint64_t)sub_1B08B72E0(0, *(_QWORD *)(a1 + 16) + 1, 1, (char *)a1);
    a1 = result;
    goto LABEL_9;
  }
  result = sub_1B0902DB8(v10, v11);
  a1 = v18;
  if ((a2 & 1) == 0)
    goto LABEL_12;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_16;
LABEL_9:
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  if (v14 >= v13 >> 1)
  {
    result = (unint64_t)sub_1B08B72E0((char *)(v13 > 1), v14 + 1, 1, (char *)a1);
    a1 = result;
  }
  *(_QWORD *)(a1 + 16) = v14 + 1;
  *(_DWORD *)(a1 + 4 * v14 + 32) = 0;
LABEL_12:
  *v15 = a1;
  return result;
}

uint64_t sub_1B094C08C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v21;
  _BYTE v22[40];
  _BYTE v23[40];
  _BYTE v24[80];
  uint64_t v25;

  v14 = *(_QWORD *)(a2 + 88);
  sub_1B08AE338(a2 + 8, (uint64_t)v23);
  sub_1B08CE4D4(a2 + 48, (uint64_t)v22, &qword_1EEEBA7C0);
  v15 = *(_QWORD *)a1;
  v21 = *(_OWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 24);
  swift_retain();
  swift_retain();
  sub_1B094C1F8(v14, (uint64_t)v23, (uint64_t)v22, a3, a4, a5, a6, v15, (uint64_t)v24, v21, *((uint64_t *)&v21 + 1), v16, (uint64_t)sub_1B094C1BC, 0);
  while (1)
  {
    do
      sub_1B094D728();
    while (v17 == 4);
    if (!v17)
      break;
    v18 = v25;
    sub_1B094A468();
    if ((v19 & 1) == 0)
      break;
    v25 = v18;
  }
  *a7 = v25;
  return sub_1B08AE3C4((uint64_t)v24, &qword_1EEEBAAE8);
}

uint64_t sub_1B094C1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = v2;
  return swift_retain();
}

uint64_t sub_1B094C1DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_1B094C1F8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1B094C1F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  char *v28;

  *(_OWORD *)(a9 + 144) = 0u;
  *(_OWORD *)(a9 + 160) = 0u;
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 176) = 0;
  *(_QWORD *)(a9 + 184) = v15;
  v16 = a7 + a6;
  if (__OFADD__(a7, a6))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v16 < a7)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v19 = result;
  if (v16 == a7)
  {
    v20 = 0;
  }
  else
  {
    if (v16 <= a7)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21 = a6 - 1;
    if ((unint64_t)(a6 - 1) >= 0x7FFFFFFFFFFFFFFFLL)
      v21 = 0x7FFFFFFFFFFFFFFFLL;
    if (a6 < 1)
      goto LABEL_36;
    v20 = v21 + 1;
  }
  v22 = a12 + a11;
  if (__OFADD__(a12, a11))
    goto LABEL_32;
  if (v22 < a12)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v22 == a12)
  {
    v23 = 0;
  }
  else
  {
    if (v22 <= a12)
    {
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v24 = a11 - 1;
    if ((unint64_t)(a11 - 1) >= 0x7FFFFFFFFFFFFFFFLL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    if (a11 < 1)
      goto LABEL_38;
    v23 = v24 + 1;
  }
  if (v23 < v20)
    goto LABEL_34;
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = a4;
  *(_QWORD *)(a9 + 16) = a5;
  *(_QWORD *)(a9 + 24) = a6;
  *(_QWORD *)(a9 + 32) = a7;
  *(_QWORD *)(a9 + 40) = a8;
  *(_QWORD *)(a9 + 48) = a10;
  *(_QWORD *)(a9 + 56) = a11;
  *(_QWORD *)(a9 + 64) = a12;
  *(_QWORD *)(a9 + 72) = a7;
  *(_QWORD *)(a9 + 80) = a12;
  *(_QWORD *)(a9 + 88) = a13;
  *(_QWORD *)(a9 + 96) = a14;
  sub_1B08AE338(a2, a9 + 104);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1B09549F4(a3, a9 + 144);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a9 + 192) = a7;
  if (v16 == a7)
  {
    v26 = v19 & (v19 >> 63);
LABEL_29:
    v28 = sub_1B08B6C74(0, v26 & ~(v26 >> 63), 0, MEMORY[0x1E0DEE9D8]);
    swift_release();
    swift_release();
    swift_release();
    *(_QWORD *)(a9 + 184) = v28;
    sub_1B08AE3C4(a3, &qword_1EEEBA7C0);
    return __swift_destroy_boxed_opaque_existential_1(a2);
  }
  if (v16 <= a7)
    goto LABEL_39;
  v27 = a6 - 1;
  if (a6 >= 1)
  {
    if (v27 >= 0x7FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    if ((uint64_t)(v27 + 1) < v19)
      v26 = v27 + 1;
    else
      v26 = v19;
    goto LABEL_29;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1B094C40C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return sub_1B094C418(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1B094C418@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v11 = a4;
  v13 = HIDWORD(a4);
  *(_OWORD *)(a9 + 120) = 0u;
  *(_OWORD *)(a9 + 136) = 0u;
  v14 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 152) = 0;
  *(_QWORD *)(a9 + 160) = v14;
  v15 = (HIDWORD(a4) - a4);
  if (HIDWORD(a4) < a4)
    v15 = -(uint64_t)(a4 - HIDWORD(a4));
  v16 = a8 + a7;
  if (__OFADD__(a8, a7))
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v16 < a8)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v19 = result;
  if (v16 == a8)
  {
    v20 = 0;
  }
  else
  {
    if (v16 <= a8)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
    v21 = a7 - 1;
    if ((unint64_t)(a7 - 1) >= 0x7FFFFFFFFFFFFFFFLL)
      v21 = 0x7FFFFFFFFFFFFFFFLL;
    if (a7 < 1)
      goto LABEL_24;
    v20 = v21 + 1;
  }
  if (v20 <= v15)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = a4;
  *(_QWORD *)(a9 + 16) = a5;
  *(_QWORD *)(a9 + 24) = a6;
  *(_QWORD *)(a9 + 32) = a7;
  *(_QWORD *)(a9 + 40) = a8;
  *(_DWORD *)(a9 + 48) = a4;
  *(_BYTE *)(a9 + 52) = 0;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  sub_1B08AE338(a2, a9 + 80);
  swift_retain();
  swift_retain();
  sub_1B09549F4(a3, a9 + 120);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a9 + 168) = v11;
  *(_BYTE *)(a9 + 172) = 0;
  if (v13 < v11)
    v22 = -(uint64_t)(v11 - v13);
  else
    v22 = v13 - v11;
  if (v22 + 1 < v19)
    v23 = v22 + 1;
  else
    v23 = v19;
  v24 = sub_1B08B6C74(0, v23 & ~(v23 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  swift_release();
  swift_release();
  *(_QWORD *)(a9 + 160) = v24;
  sub_1B08AE3C4(a3, &qword_1EEEBA7C0);
  return __swift_destroy_boxed_opaque_existential_1(a2);
}

void CharacterMapQuery.init(mapWindowSize:cmap:uvsMap:inputCollection:outputCollection:inputToUVSWithRanges:)(uint64_t a1)
{
  uint64_t v1;

  MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for CharacterMapQuery();
}

uint64_t sub_1B094C66C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  v12 = &v7[a1[25]];
  *((_QWORD *)v12 + 4) = 0;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(_QWORD *)(v10 - 232) = v12;
  v13 = a1[26];
  v14 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 - 216) = v13;
  *(_QWORD *)&v7[v13] = v14;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  *(_QWORD *)(v10 - 184) = v2;
  *(_QWORD *)(v10 - 248) = v15;
  v15(v4, v2, v3);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v17 = *(_QWORD *)(v10 - 152);
  *(_QWORD *)(v10 - 240) = v16;
  v16(v6, v17, v8);
  *(_QWORD *)(v10 - 208) = v1;
  v18 = sub_1B0A1D5A0();
  *(_QWORD *)(v10 - 168) = *(_QWORD *)(*(_QWORD *)(v10 - 168) + 8);
  v19 = sub_1B0A1D5A0();
  v20 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v20(v6, v8);
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
  result = v21(v4, v3);
  if (v19 < v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)v7 = 0;
    v23 = *(_QWORD *)(v10 - 184);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 - 248))(&v7[a1[19]], v23, v3);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 - 240))(&v7[a1[20]], *(_QWORD *)(v10 - 152), v8);
    sub_1B0A1D594();
    sub_1B0A1D594();
    v24 = &v7[a1[23]];
    v25 = *(_QWORD *)(v10 - 192);
    *(_QWORD *)v24 = *(_QWORD *)(v10 - 224);
    *((_QWORD *)v24 + 1) = v25;
    sub_1B08AE338(*(_QWORD *)(v10 - 160), (uint64_t)&v7[a1[24]]);
    swift_retain();
    *(_QWORD *)(v10 - 224) = v20;
    v26 = *(_QWORD *)(v10 - 176);
    sub_1B09549F4(v26, *(_QWORD *)(v10 - 232));
    *(_QWORD *)(v10 - 168) = v21;
    v27 = *(_QWORD *)(v10 - 216);
    swift_bridgeObjectRelease();
    sub_1B0A1D594();
    v28 = sub_1B0A1D5A0();
    v29 = *(_QWORD *)(v10 - 200);
    if (v28 < v29)
      v29 = v28;
    v30 = sub_1B08B6C74(0, v29 & ~(v29 >> 63), 0, MEMORY[0x1E0DEE9D8]);
    swift_release();
    *(_QWORD *)&v7[v27] = v30;
    (*(void (**)(_QWORD, uint64_t))(v10 - 224))(*(_QWORD *)(v10 - 152), v8);
    (*(void (**)(uint64_t, uint64_t))(v10 - 168))(v23, v3);
    sub_1B08AE3C4(v26, &qword_1EEEBA7C0);
    return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v10 - 160));
  }
  return result;
}

unint64_t sub_1B094C8A0()
{
  unint64_t result;

  result = qword_1EEEBBF60;
  if (!qword_1EEEBBF60)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for IndexedUTF16Sequence, &type metadata for IndexedUTF16Sequence);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF60);
  }
  return result;
}

uint64_t sub_1B094C8E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v10 - v6, a1, AssociatedTypeWitness, v5);
  swift_getAssociatedConformanceWitness();
  return sub_1B092BC24((uint64_t)v7, AssociatedTypeWitness, a2);
}

uint64_t CharacterMapQueryStatus.hash(into:)()
{
  return sub_1B0A1DB34();
}

uint64_t CharacterMapQueryStatus.hashValue.getter()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

uint64_t CharacterMapQuery.errors.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CharacterMapQuery.errors.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CharacterMapQuery.errors.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.input.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 76));
}

uint64_t CharacterMapQuery.input.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 76), a1);
}

uint64_t (*CharacterMapQuery.input.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 80));
}

uint64_t CharacterMapQuery.output.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 80), a1);
}

uint64_t (*CharacterMapQuery.output.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.inputIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t CharacterMapQuery.inputIndex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*CharacterMapQuery.inputIndex.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.outputIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t CharacterMapQuery.outputIndex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*CharacterMapQuery.outputIndex.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.inputToUVSWithRanges.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 92));
  swift_retain();
  return v2;
}

uint64_t CharacterMapQuery.inputToUVSWithRanges.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 92));
  result = swift_release();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*CharacterMapQuery.inputToUVSWithRanges.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.cmap.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B08AE338(v2 + *(int *)(a1 + 96), a2);
}

uint64_t CharacterMapQuery.cmap.setter(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *(int *)(a2 + 96);
  __swift_destroy_boxed_opaque_existential_1(v4);
  return sub_1B08AEF8C(a1, v4);
}

uint64_t (*CharacterMapQuery.cmap.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.uvsMap.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B08CE4D4(v2 + *(int *)(a1 + 100), a2, &qword_1EEEBA7C0);
}

uint64_t CharacterMapQuery.uvsMap.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B0945E30(a1, v2 + *(int *)(a2 + 100));
}

uint64_t (*CharacterMapQuery.uvsMap.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.codePointMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CharacterMapQuery.codePointMap.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 104);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*CharacterMapQuery.codePointMap.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t CharacterMapQuery.codePointMapsUntil.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 108);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t CharacterMapQuery.codePointMapsUntil.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 108);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*CharacterMapQuery.codePointMapsUntil.modify())(_QWORD)
{
  return nullsub_1;
}

void sub_1B094CECC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91[8];
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned __int8 v95;
  char v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  v1 = v0[3];
  v2 = v0[4];
  v3 = __OFADD__(v2, v1);
  v4 = v2 + v1;
  if (v3)
    goto LABEL_155;
  v5 = v0;
  v6 = v0[9];
  if (v6 < v4)
  {
    v7 = v0[24];
    if (v6 != v7 || (sub_1B0951634(), v6 = v0[9], v7 = v0[24], v6 != v7))
    {
      if (v6 < v7)
      {
        v9 = v0[3];
        v8 = v0[4];
        v3 = __OFADD__(v8, v9);
        v10 = v8 + v9;
        if (v3)
          goto LABEL_168;
        v3 = __OFSUB__(v6, v8);
        v11 = v6 - v8;
        if (v3)
        {
LABEL_169:
          __break(1u);
        }
        else
        {
          v12 = v10 - v6;
          if (!__OFSUB__(v10, v6))
          {
            v3 = __OFADD__(v11, v12);
            v13 = v11 + v12;
            if (!v3)
            {
              if (v10 >= v6)
              {
                v14 = v13 - v11;
                if (v13 >= v11)
                {
                  v15 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[11];
                  v16 = v0[2];
                  v17 = v16 + 2 * v11;
                  if (!v16)
                    v17 = 0;
                  v86 = v0[1];
                  *(_QWORD *)&v87 = v17;
                  *((_QWORD *)&v87 + 1) = v14;
                  v88 = v6;
                  swift_retain();
                  swift_retain();
                  v15(&v105, &v86);
                  swift_release();
                  swift_release();
                  v18 = v107;
                  v86 = v105;
                  v87 = v106;
                  v88 = v107;
                  v89 = v107;
                  sub_1B0937FD8();
                  if ((v19 & 0x100000000) != 0)
                  {
                    v18 = 0;
                    v20 = 0;
                    v21 = 0;
                  }
                  else
                  {
                    if (v89 < v18)
                    {
LABEL_177:
                      __break(1u);
LABEL_178:
                      __break(1u);
LABEL_179:
                      __break(1u);
LABEL_180:
                      __break(1u);
LABEL_181:
                      __break(1u);
LABEL_182:
                      __break(1u);
LABEL_183:
                      __break(1u);
LABEL_184:
                      __break(1u);
LABEL_185:
                      __break(1u);
LABEL_186:
                      __break(1u);
LABEL_187:
                      __break(1u);
LABEL_188:
                      __break(1u);
LABEL_189:
                      __break(1u);
                      return;
                    }
                    v20 = v89;
                    v21 = v19;
                  }
                  v98 = v87;
                  v97 = v86;
                  v99 = v88;
                  v100 = v89;
                  v101 = v18;
                  v102 = v20;
                  v103 = v21;
                  v104 = BYTE4(v19) & 1;
                  swift_retain_n();
                  sub_1B09529A8((uint64_t)v91);
                  if ((v96 & 1) != 0)
                  {
LABEL_20:
                    swift_release();
                    swift_release();
                    swift_release();
                    if (v6 >= v7)
                      return;
LABEL_144:
                    if (!__OFADD__(*v5, 1))
                    {
                      ++*v5;
                      return;
                    }
                    goto LABEL_176;
                  }
                  v23 = v92;
                  v22 = v93;
                  v85 = (uint64_t)(v0 + 18);
                  while (1)
                  {
                    v6 = v22;
                    v24 = v94 | ((unint64_t)v95 << 32);
                    if ((v24 & 0x100000000) != 0)
                      break;
                    if (HIBYTE(v94) <= 0xFu)
                      v25 = HIBYTE(v94) | 0xFE00u;
                    else
                      v25 = (HIBYTE(v94) - 16) | 0xE0100u;
                    if (v5[21])
                    {
                      sub_1B08AE338(v85, (uint64_t)&v86);
                      v26 = v88;
                      v27 = v89;
                      __swift_project_boxed_opaque_existential_1(&v86, v88);
                      HIDWORD(v28) = v24;
                      LODWORD(v28) = v24;
                      v29 = (v28 >> 16) & 0xFF00FF | v24 & 0xFF00;
                      v30 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v25, v26, v27);
                      v32 = v31;
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
                      if ((v32 & 0x100) == 0)
                      {
                        if ((v32 & 1) != 0)
                        {
                          sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBA7C8);
                          v33 = *(_QWORD *)(v90 + 16);
                          if (!v33)
                            goto LABEL_143;
                          v34 = __clz(v33);
                          v35 = v34 ^ 0x3F;
                          v36 = 1 << (v34 ^ 0x3Fu);
                          if (v36 == v33)
                          {
                            v37 = 0;
                            v36 = *(_QWORD *)(v90 + 16);
                            if (v35)
                              goto LABEL_130;
                          }
                          else
                          {
                            if (v36 >= v33)
                              goto LABEL_184;
                            if (*(_DWORD *)(v90 + 8 * v36 + 32) >= v29)
                            {
                              v37 = 0;
                              if (v35)
                                goto LABEL_130;
                            }
                            else
                            {
                              v79 = v33 + ~v36;
                              if (!v79)
                                goto LABEL_143;
                              if ((v79 & 0x8000000000000000) != 0)
                                goto LABEL_185;
                              if (v79 == 1)
                              {
                                v37 = v33 - 1;
                              }
                              else
                              {
                                if (v79 - 0x4000000000000001 < 0xC000000000000001)
                                  goto LABEL_186;
                                v80 = __clz(v79 - 1);
                                v81 = -v80;
                                v36 = 1 << -(char)v80;
                                v37 = v33 - v36;
                                if ((v81 & 0x3F) != 0)
                                {
LABEL_130:
                                  do
                                  {
                                    v82 = v37 + (v36 >> 1);
                                    if (__OFADD__(v37, v36 >> 1))
                                      goto LABEL_156;
                                    if (v82 >= v33)
                                      goto LABEL_157;
                                    if (*(_DWORD *)(v90 + 32 + 8 * v82) < v29)
                                      v37 += v36 >> 1;
                                    v56 = v36 >= 4;
                                    v36 >>= 1;
                                  }
                                  while (v56);
                                }
                              }
                            }
                          }
                          if (v37 >= v33)
                            goto LABEL_181;
                          v83 = v90 + 32;
                          if (*(_DWORD *)(v90 + 32 + 8 * v37) >= v29)
                            v84 = v37;
                          else
                            v84 = v37 + 1;
                          if (v84 == v33)
                            goto LABEL_143;
                          if (v84 >= v33)
                            goto LABEL_189;
                          if (*(_DWORD *)(v83 + 8 * v84) != (_DWORD)v29)
                          {
LABEL_143:
                            sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBA7C8);
                            swift_release_n();
                            swift_release();
                            goto LABEL_144;
                          }
                          v59 = v83 + 8 * v84;
                          goto LABEL_74;
                        }
                        goto LABEL_75;
                      }
                    }
                    else
                    {
                      HIDWORD(v46) = v94;
                      LODWORD(v46) = v94;
                      LODWORD(v29) = (v46 >> 16) & 0xFF00FF | v94 & 0xFF00;
                    }
                    sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBA7C8);
                    v47 = *(_QWORD *)(v90 + 16);
                    if (!v47)
                      goto LABEL_143;
                    v48 = __clz(v47);
                    v49 = v48 ^ 0x3F;
                    v50 = 1 << (v48 ^ 0x3Fu);
                    if (v50 == v47)
                    {
                      v51 = 0;
                      v50 = *(_QWORD *)(v90 + 16);
                      if (v49)
                        goto LABEL_78;
                    }
                    else
                    {
                      if (v50 >= v47)
                        goto LABEL_178;
                      if (*(_DWORD *)(v90 + 8 * v50 + 32) >= v29)
                      {
                        v51 = 0;
                        if (v49)
                          goto LABEL_78;
                      }
                      else
                      {
                        v52 = v47 + ~v50;
                        if (!v52)
                          goto LABEL_143;
                        if ((v52 & 0x8000000000000000) != 0)
                          goto LABEL_180;
                        if (v52 == 1)
                        {
                          v51 = v47 - 1;
                        }
                        else
                        {
                          if (v52 - 0x4000000000000001 < 0xC000000000000001)
                            goto LABEL_183;
                          v61 = __clz(v52 - 1);
                          v62 = -v61;
                          v50 = 1 << -(char)v61;
                          v51 = v47 - v50;
                          if ((v62 & 0x3F) != 0)
                          {
LABEL_78:
                            while (1)
                            {
                              v63 = v51 + (v50 >> 1);
                              if (__OFADD__(v51, v50 >> 1))
                                break;
                              if (v63 >= v47)
                                goto LABEL_154;
                              if (*(_DWORD *)(v90 + 32 + 8 * v63) < v29)
                                v51 += v50 >> 1;
                              v56 = v50 >= 4;
                              v50 >>= 1;
                              if (!v56)
                                goto LABEL_83;
                            }
LABEL_153:
                            __break(1u);
LABEL_154:
                            __break(1u);
LABEL_155:
                            __break(1u);
LABEL_156:
                            __break(1u);
LABEL_157:
                            __break(1u);
LABEL_158:
                            __break(1u);
LABEL_159:
                            __break(1u);
LABEL_160:
                            __break(1u);
LABEL_161:
                            __break(1u);
LABEL_162:
                            __break(1u);
LABEL_163:
                            __break(1u);
LABEL_164:
                            __break(1u);
LABEL_165:
                            __break(1u);
LABEL_166:
                            __break(1u);
LABEL_167:
                            __break(1u);
LABEL_168:
                            __break(1u);
                            goto LABEL_169;
                          }
                        }
                      }
                    }
LABEL_83:
                    if (v51 >= v47)
                      goto LABEL_173;
                    v64 = v90 + 32;
                    if (*(_DWORD *)(v90 + 32 + 8 * v51) >= v29)
                      v65 = v51;
                    else
                      v65 = v51 + 1;
                    if (v65 == v47)
                      goto LABEL_143;
                    if (v65 >= v47)
                      goto LABEL_188;
                    if (*(_DWORD *)(v64 + 8 * v65) != (_DWORD)v29)
                      goto LABEL_143;
                    v30 = *(unsigned int *)(v64 + 8 * v65 + 4);
                    sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBA7C8);
                    v60 = 0;
LABEL_91:
                    v67 = v5[7];
                    v66 = v5[8];
                    v3 = __OFADD__(v66, v67);
                    v68 = v66 + v67;
                    if (v3)
                      goto LABEL_158;
                    if (v68 < v66)
                      goto LABEL_159;
                    v69 = v5[10];
                    if (v69 < v66)
                      goto LABEL_160;
                    if (v69 >= v68)
                      goto LABEL_161;
                    if (__OFSUB__(v69, v66))
                      goto LABEL_162;
                    v70 = v5[6];
                    *(_QWORD *)(v70 + 8 * (v69 - v66)) = v30;
                    v71 = v69 + 1;
                    v5[10] = v69 + 1;
                    v72 = v5[9];
                    v73 = v72 + 1;
                    if (__OFADD__(v72, 1))
                      goto LABEL_163;
                    v5[9] = v73;
                    v74 = v71;
                    if (v73 != v23)
                    {
                      while (v71 >= v66 && v74 < v68)
                      {
                        if (__OFSUB__(v74, v66))
                          goto LABEL_147;
                        *(_QWORD *)(v70 + 8 * (v74 - v66)) = 0;
                        v75 = v73 + 1;
                        if (__OFADD__(v73, 1))
                          goto LABEL_148;
                        ++v74;
                        ++v73;
                        if (v75 == v23)
                        {
                          v5[9] = v23;
                          v5[10] = v74;
                          goto LABEL_104;
                        }
                      }
                      __break(1u);
LABEL_147:
                      __break(1u);
LABEL_148:
                      __break(1u);
                      goto LABEL_149;
                    }
LABEL_104:
                    if (v23 != v6)
                    {
                      if (v74 < v66 || v74 >= v68)
                        goto LABEL_165;
                      if (__OFSUB__(v74, v66))
                        goto LABEL_166;
                      *(_QWORD *)(v70 + 8 * (v74 - v66)) = v60;
                      v76 = v74 + 1;
                      v5[10] = v74 + 1;
                      v77 = v23 + 1;
                      if (__OFADD__(v23, 1))
                        goto LABEL_167;
                      v5[9] = v77;
                      if (v77 != v6)
                      {
                        if (v77 >= v6)
                          goto LABEL_175;
                        v78 = v76;
                        while (v76 >= v66 && v78 < v68)
                        {
                          if (__OFSUB__(v78, v66))
                            goto LABEL_152;
                          *(_QWORD *)(v70 + 8 * (v78 - v66)) = 0;
                          ++v78;
                          if (v6 == ++v77)
                          {
                            v5[9] = v6;
                            v5[10] = v78;
                            goto LABEL_117;
                          }
                        }
                        goto LABEL_151;
                      }
                    }
LABEL_117:
                    v7 = v5[24];
                    if (v6 < v7)
                    {
                      sub_1B09529A8((uint64_t)v91);
                      v23 = v92;
                      v22 = v93;
                      if ((v96 & 1) == 0)
                        continue;
                    }
                    goto LABEL_20;
                  }
                  sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBA7C8);
                  v38 = *(_QWORD *)(v90 + 16);
                  if (!v38)
                    goto LABEL_143;
                  HIDWORD(v39) = v24;
                  LODWORD(v39) = v24;
                  v40 = (v39 >> 16) & 0xFF00FF | v24 & 0xFF00;
                  v41 = __clz(v38);
                  v42 = v41 ^ 0x3F;
                  v43 = 1 << (v41 ^ 0x3Fu);
                  if (v43 == v38)
                  {
                    v44 = 0;
                    v43 = *(_QWORD *)(v90 + 16);
                    if (v42)
                      goto LABEL_61;
                  }
                  else
                  {
                    if (v43 >= v38)
                      goto LABEL_174;
                    if (*(_DWORD *)(v90 + 8 * v43 + 32) >= v40)
                    {
                      v44 = 0;
                      if (v42)
                        goto LABEL_61;
                    }
                    else
                    {
                      v45 = v38 + ~v43;
                      if (!v45)
                        goto LABEL_143;
                      if ((v45 & 0x8000000000000000) != 0)
                        goto LABEL_179;
                      if (v45 == 1)
                      {
                        v44 = v38 - 1;
                      }
                      else
                      {
                        if (v45 - 0x4000000000000001 < 0xC000000000000001)
                          goto LABEL_182;
                        v53 = __clz(v45 - 1);
                        v54 = -v53;
                        v43 = 1 << -(char)v53;
                        v44 = v38 - v43;
                        if ((v54 & 0x3F) != 0)
                        {
LABEL_61:
                          while (1)
                          {
                            v55 = v44 + (v43 >> 1);
                            if (__OFADD__(v44, v43 >> 1))
                              break;
                            if (v55 >= v38)
                              goto LABEL_150;
                            if (*(_DWORD *)(v90 + 32 + 8 * v55) < v40)
                              v44 += v43 >> 1;
                            v56 = v43 >= 4;
                            v43 >>= 1;
                            if (!v56)
                              goto LABEL_66;
                          }
LABEL_149:
                          __break(1u);
LABEL_150:
                          __break(1u);
LABEL_151:
                          __break(1u);
LABEL_152:
                          __break(1u);
                          goto LABEL_153;
                        }
                      }
                    }
                  }
LABEL_66:
                  if (v44 >= v38)
                    goto LABEL_164;
                  v57 = v90 + 32;
                  if (*(_DWORD *)(v90 + 32 + 8 * v44) >= v40)
                    v58 = v44;
                  else
                    v58 = v44 + 1;
                  if (v58 == v38)
                    goto LABEL_143;
                  if (v58 >= v38)
                    goto LABEL_187;
                  if (*(_DWORD *)(v57 + 8 * v58) != v40)
                    goto LABEL_143;
                  v59 = v57 + 8 * v58;
LABEL_74:
                  v30 = *(unsigned int *)(v59 + 4);
                  sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBA7C8);
LABEL_75:
                  v60 = 0xFFFFFFLL;
                  goto LABEL_91;
                }
              }
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
              goto LABEL_177;
            }
LABEL_171:
            __break(1u);
            goto LABEL_172;
          }
        }
        __break(1u);
        goto LABEL_171;
      }
    }
  }
}

void sub_1B094D728()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91[8];
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned __int8 v95;
  char v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  v1 = v0[3];
  v2 = v0[4];
  v3 = __OFADD__(v2, v1);
  v4 = v2 + v1;
  if (v3)
  {
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
    goto LABEL_172;
  }
  v5 = v0;
  v6 = v0[9];
  if (v6 >= v4)
    return;
  v7 = v0[24];
  if (v6 == v7)
  {
    sub_1B0951634();
    v6 = v0[9];
    v7 = v0[24];
    if (v6 == v7)
      return;
  }
  if (v6 >= v7)
    return;
  v9 = v0[3];
  v8 = v0[4];
  v3 = __OFADD__(v8, v9);
  v10 = v8 + v9;
  if (v3)
    goto LABEL_171;
  v3 = __OFSUB__(v6, v8);
  v11 = v6 - v8;
  if (v3)
  {
LABEL_172:
    __break(1u);
    goto LABEL_173;
  }
  v12 = v10 - v6;
  if (__OFSUB__(v10, v6))
  {
LABEL_173:
    __break(1u);
    goto LABEL_174;
  }
  v3 = __OFADD__(v11, v12);
  v13 = v11 + v12;
  if (v3)
  {
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }
  if (v10 < v6)
    goto LABEL_175;
  v14 = v13 - v11;
  if (v13 < v11)
    goto LABEL_175;
  v15 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[11];
  v16 = v0[2];
  v17 = v16 + 2 * v11;
  if (!v16)
    v17 = 0;
  v86 = v0[1];
  *(_QWORD *)&v87 = v17;
  *((_QWORD *)&v87 + 1) = v14;
  v88 = v6;
  swift_retain();
  swift_retain();
  v15(&v105, &v86);
  swift_release();
  swift_release();
  v18 = v107;
  v86 = v105;
  v87 = v106;
  v88 = v107;
  v89 = v107;
  sub_1B0937FD8();
  if ((v19 & 0x100000000) != 0)
  {
    v18 = 0;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    if (v89 < v18)
      goto LABEL_180;
    v20 = v89;
    v21 = v19;
  }
  v98 = v87;
  v97 = v86;
  v99 = v88;
  v100 = v89;
  v101 = v18;
  v102 = v20;
  v103 = v21;
  v104 = BYTE4(v19) & 1;
  swift_retain_n();
  sub_1B09529A8((uint64_t)v91);
  if ((v96 & 1) != 0)
  {
LABEL_20:
    swift_release();
    swift_release();
    swift_release();
    if (v6 < v7)
      goto LABEL_146;
    return;
  }
  v23 = v92;
  v22 = v93;
  v85 = (uint64_t)(v0 + 18);
  while (1)
  {
    v6 = v22;
    v24 = v94 | ((unint64_t)v95 << 32);
    if ((v24 & 0x100000000) != 0)
    {
      sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBAAE8);
      v33 = *(_QWORD *)(v90 + 16);
      if (!v33)
        goto LABEL_145;
      HIDWORD(v34) = v24;
      LODWORD(v34) = v24;
      v35 = (v34 >> 16) & 0xFF00FF | v24 & 0xFF00;
      v36 = __clz(v33);
      v37 = v36 ^ 0x3F;
      v38 = 1 << (v36 ^ 0x3Fu);
      if (v38 == v33)
      {
        v39 = 0;
        v38 = *(_QWORD *)(v90 + 16);
        if (v37)
          goto LABEL_63;
      }
      else
      {
        if (v38 >= v33)
          goto LABEL_177;
        if (*(_DWORD *)(v90 + 8 * v38 + 32) >= v35)
        {
          v39 = 0;
          if (v37)
            goto LABEL_63;
        }
        else
        {
          v40 = v33 + ~v38;
          if (!v40)
            goto LABEL_145;
          if ((v40 & 0x8000000000000000) != 0)
            goto LABEL_182;
          if (v40 == 1)
          {
            v39 = v33 - 1;
          }
          else
          {
            if (v40 - 0x4000000000000001 < 0xC000000000000001)
              goto LABEL_185;
            v53 = __clz(v40 - 1);
            v54 = -v53;
            v38 = 1 << -(char)v53;
            v39 = v33 - v38;
            if ((v54 & 0x3F) != 0)
            {
LABEL_63:
              while (1)
              {
                v55 = v39 + (v38 >> 1);
                if (__OFADD__(v39, v38 >> 1))
                  break;
                if (v55 >= v33)
                  goto LABEL_152;
                if (*(_DWORD *)(v90 + 32 + 8 * v55) < v35)
                  v39 += v38 >> 1;
                v56 = v38 >= 4;
                v38 >>= 1;
                if (!v56)
                  goto LABEL_68;
              }
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
              goto LABEL_155;
            }
          }
        }
      }
LABEL_68:
      if (v39 >= v33)
        goto LABEL_167;
      v57 = v90 + 32;
      if (*(_DWORD *)(v90 + 32 + 8 * v39) >= v35)
        v58 = v39;
      else
        v58 = v39 + 1;
      if (v58 == v33)
        goto LABEL_145;
      if (v58 >= v33)
        goto LABEL_190;
      if (*(_DWORD *)(v57 + 8 * v58) != v35)
        goto LABEL_145;
      v59 = v57 + 8 * v58;
      goto LABEL_76;
    }
    if (HIBYTE(v94) <= 0xFu)
      v25 = HIBYTE(v94) | 0xFE00u;
    else
      v25 = (HIBYTE(v94) - 16) | 0xE0100u;
    if (v5[21])
    {
      sub_1B08AE338(v85, (uint64_t)&v86);
      v26 = v88;
      v27 = v89;
      __swift_project_boxed_opaque_existential_1(&v86, v88);
      HIDWORD(v28) = v24;
      LODWORD(v28) = v24;
      v29 = (v28 >> 16) & 0xFF00FF | v24 & 0xFF00;
      v30 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v25, v26, v27);
      v32 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
      if ((v32 & 0x100) == 0)
      {
        if ((v32 & 1) == 0)
        {
          if (HIDWORD(v30))
            goto LABEL_157;
          goto LABEL_77;
        }
        sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBAAE8);
        v48 = *(_QWORD *)(v90 + 16);
        if (!v48)
          goto LABEL_145;
        v49 = __clz(v48);
        v50 = v49 ^ 0x3F;
        v51 = 1 << (v49 ^ 0x3Fu);
        if (v51 == v48)
        {
          v52 = 0;
          v51 = *(_QWORD *)(v90 + 16);
          if (v50)
            goto LABEL_132;
        }
        else
        {
          if (v51 >= v48)
            goto LABEL_187;
          if (*(_DWORD *)(v90 + 8 * v51 + 32) >= v29)
          {
            v52 = 0;
            if (v50)
              goto LABEL_132;
          }
          else
          {
            v79 = v48 + ~v51;
            if (!v79)
              goto LABEL_145;
            if ((v79 & 0x8000000000000000) != 0)
              goto LABEL_188;
            if (v79 == 1)
            {
              v52 = v48 - 1;
            }
            else
            {
              if (v79 - 0x4000000000000001 < 0xC000000000000001)
                goto LABEL_189;
              v80 = __clz(v79 - 1);
              v81 = -v80;
              v51 = 1 << -(char)v80;
              v52 = v48 - v51;
              if ((v81 & 0x3F) != 0)
              {
LABEL_132:
                do
                {
                  v82 = v52 + (v51 >> 1);
                  if (__OFADD__(v52, v51 >> 1))
                    goto LABEL_159;
                  if (v82 >= v48)
                    goto LABEL_160;
                  if (*(_DWORD *)(v90 + 32 + 8 * v82) < v29)
                    v52 += v51 >> 1;
                  v56 = v51 >= 4;
                  v51 >>= 1;
                }
                while (v56);
              }
            }
          }
        }
        if (v52 >= v48)
          goto LABEL_184;
        v83 = v90 + 32;
        if (*(_DWORD *)(v90 + 32 + 8 * v52) >= v29)
          v84 = v52;
        else
          v84 = v52 + 1;
        if (v84 == v48)
          goto LABEL_145;
        if (v84 >= v48)
          goto LABEL_192;
        if (*(_DWORD *)(v83 + 8 * v84) != (_DWORD)v29)
        {
LABEL_145:
          sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBAAE8);
          swift_release_n();
          swift_release();
          goto LABEL_146;
        }
        v59 = v83 + 8 * v84;
LABEL_76:
        LODWORD(v30) = *(_DWORD *)(v59 + 4);
        sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBAAE8);
LABEL_77:
        v60 = 0xFFFFFF;
        goto LABEL_93;
      }
    }
    else
    {
      HIDWORD(v41) = v94;
      LODWORD(v41) = v94;
      LODWORD(v29) = (v41 >> 16) & 0xFF00FF | v94 & 0xFF00;
    }
    sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBAAE8);
    v42 = *(_QWORD *)(v90 + 16);
    if (!v42)
      goto LABEL_145;
    v43 = __clz(v42);
    v44 = v43 ^ 0x3F;
    v45 = 1 << (v43 ^ 0x3Fu);
    if (v45 == v42)
    {
      v46 = 0;
      v45 = *(_QWORD *)(v90 + 16);
      if (v44)
        break;
      goto LABEL_85;
    }
    if (v45 >= v42)
      goto LABEL_181;
    if (*(_DWORD *)(v90 + 8 * v45 + 32) >= v29)
    {
      v46 = 0;
      if (v44)
        break;
      goto LABEL_85;
    }
    v47 = v42 + ~v45;
    if (!v47)
      goto LABEL_145;
    if ((v47 & 0x8000000000000000) != 0)
      goto LABEL_183;
    if (v47 == 1)
    {
      v46 = v42 - 1;
      goto LABEL_85;
    }
    if (v47 - 0x4000000000000001 < 0xC000000000000001)
      goto LABEL_186;
    v61 = __clz(v47 - 1);
    v62 = -v61;
    v45 = 1 << -(char)v61;
    v46 = v42 - v45;
    if ((v62 & 0x3F) != 0)
      break;
LABEL_85:
    if (v46 >= v42)
      goto LABEL_176;
    v64 = v90 + 32;
    if (*(_DWORD *)(v90 + 32 + 8 * v46) >= v29)
      v65 = v46;
    else
      v65 = v46 + 1;
    if (v65 == v42)
      goto LABEL_145;
    if (v65 >= v42)
      goto LABEL_191;
    if (*(_DWORD *)(v64 + 8 * v65) != (_DWORD)v29)
      goto LABEL_145;
    LODWORD(v30) = *(_DWORD *)(v64 + 8 * v65 + 4);
    sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBAAE8);
    v60 = 0;
LABEL_93:
    v67 = v5[7];
    v66 = v5[8];
    v3 = __OFADD__(v66, v67);
    v68 = v66 + v67;
    if (v3)
      goto LABEL_161;
    if (v68 < v66)
      goto LABEL_162;
    v69 = v5[10];
    if (v69 < v66)
      goto LABEL_163;
    if (v69 >= v68)
      goto LABEL_164;
    if (__OFSUB__(v69, v66))
      goto LABEL_165;
    v70 = v5[6];
    *(_DWORD *)(v70 + 4 * (v69 - v66)) = v30;
    v71 = v69 + 1;
    v5[10] = v69 + 1;
    v72 = v5[9];
    v73 = v72 + 1;
    if (__OFADD__(v72, 1))
      goto LABEL_166;
    v5[9] = v73;
    v74 = v71;
    if (v73 != v23)
    {
      while (v71 >= v66 && v74 < v68)
      {
        if (__OFSUB__(v74, v66))
          goto LABEL_149;
        *(_DWORD *)(v70 + 4 * (v74 - v66)) = 0;
        v75 = v73 + 1;
        if (__OFADD__(v73, 1))
          goto LABEL_150;
        ++v74;
        ++v73;
        if (v75 == v23)
        {
          v5[9] = v23;
          v5[10] = v74;
          goto LABEL_106;
        }
      }
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
LABEL_106:
    if (v23 != v6)
    {
      if (v74 < v66 || v74 >= v68)
        goto LABEL_168;
      if (__OFSUB__(v74, v66))
        goto LABEL_169;
      *(_DWORD *)(v70 + 4 * (v74 - v66)) = v60;
      v76 = v74 + 1;
      v5[10] = v74 + 1;
      v77 = v23 + 1;
      if (__OFADD__(v23, 1))
        goto LABEL_170;
      v5[9] = v77;
      if (v77 != v6)
      {
        if (v77 >= v6)
          goto LABEL_178;
        v78 = v76;
        while (v76 >= v66 && v78 < v68)
        {
          if (__OFSUB__(v78, v66))
            goto LABEL_154;
          *(_DWORD *)(v70 + 4 * (v78 - v66)) = 0;
          ++v78;
          if (v6 == ++v77)
          {
            v5[9] = v6;
            v5[10] = v78;
            goto LABEL_119;
          }
        }
        goto LABEL_153;
      }
    }
LABEL_119:
    v7 = v5[24];
    if (v6 < v7)
    {
      sub_1B09529A8((uint64_t)v91);
      v23 = v92;
      v22 = v93;
      if ((v96 & 1) == 0)
        continue;
    }
    goto LABEL_20;
  }
  while (1)
  {
    v63 = v46 + (v45 >> 1);
    if (__OFADD__(v46, v45 >> 1))
      break;
    if (v63 >= v42)
      goto LABEL_156;
    if (*(_DWORD *)(v90 + 32 + 8 * v63) < v29)
      v46 += v45 >> 1;
    v56 = v45 >= 4;
    v45 >>= 1;
    if (!v56)
      goto LABEL_85;
  }
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  swift_release_n();
  swift_release();
LABEL_146:
  if (!__OFADD__(*v5, 1))
  {
    ++*v5;
    return;
  }
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
}

void sub_1B094DFB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 v33;
  __int16 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[3];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94[8];
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned __int8 v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v1 = v0[3];
  v2 = v0[4];
  v3 = __OFADD__(v2, v1);
  v4 = v2 + v1;
  if (v3)
    goto LABEL_155;
  v5 = v0;
  v6 = v0[9];
  if (v6 < v4)
  {
    v7 = v0[24];
    if (v6 != v7 || (sub_1B0951270(), v6 = v0[9], v7 = v0[24], v6 != v7))
    {
      if (v6 < v7)
      {
        v8 = v0[3];
        v9 = v0[4];
        v10 = v9 + v8;
        if (__OFADD__(v9, v8))
          goto LABEL_165;
        if (v10 < v6 || v10 < v9)
        {
LABEL_166:
          __break(1u);
        }
        else if (v6 >= v9)
        {
          v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[11];
          v13 = v0[1];
          v12 = v0[2];
          v89[0] = v6;
          v89[1] = v9 + v8;
          v89[2] = v13;
          v90 = v12;
          v91 = v8;
          v92 = v9;
          swift_retain();
          swift_retain();
          v11(&v111, v89);
          swift_release();
          swift_release();
          v14 = v111;
          v15 = v112;
          v16 = v113;
          v17 = v114;
          v18 = v115;
          v19 = v116;
          v117 = v111;
          v118 = v112;
          v119 = v113;
          v120 = v114;
          v121 = v115;
          v122 = v116;
          if (v111 == v112)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
            v23 = v111;
          }
          else
          {
            v21 = v111 + 1;
            if (__OFADD__(v111, 1))
            {
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
              return;
            }
            v87 = v113;
            if (v21 < v111)
              goto LABEL_175;
            v22 = sub_1B09545D0(v111);
            v20 = v14;
            v23 = v14 + 1;
            v16 = v87;
          }
          v100 = v14;
          v101 = v15;
          v102 = v16;
          v103 = v17;
          v104 = v18;
          v105 = v19;
          v106 = v23;
          v107 = v20;
          v108 = v21;
          v109 = v22;
          v110 = v14 == v15;
          swift_retain_n();
          sub_1B0952B10((uint64_t)v94);
          if ((v99 & 1) != 0)
          {
LABEL_17:
            swift_release();
            swift_release();
            swift_release();
            if (v6 >= v7)
              return;
LABEL_144:
            if (!__OFADD__(*v5, 1))
            {
              ++*v5;
              return;
            }
            goto LABEL_172;
          }
          v25 = v95;
          v24 = v96;
          v88 = (uint64_t)(v0 + 18);
          while (1)
          {
            v6 = v24;
            v26 = v97 | ((unint64_t)v98 << 32);
            if ((v26 & 0x100000000) != 0)
              break;
            if (HIBYTE(v97) <= 0xFu)
              v27 = HIBYTE(v97) | 0xFE00u;
            else
              v27 = (HIBYTE(v97) - 16) | 0xE0100u;
            if (v5[21])
            {
              sub_1B08AE338(v88, (uint64_t)v89);
              v28 = v90;
              v29 = v91;
              __swift_project_boxed_opaque_existential_1(v89, v90);
              HIDWORD(v30) = v26;
              LODWORD(v30) = v26;
              v31 = (v30 >> 16) & 0xFF00FF | v26 & 0xFF00;
              v32 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v29 + 16))(v31, v27, v28, v29);
              v34 = v33;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
              if ((v34 & 0x100) == 0)
              {
                if ((v34 & 1) != 0)
                {
                  sub_1B08CE4D4((uint64_t)v5, (uint64_t)v89, &qword_1EEEBACA0);
                  v35 = *(_QWORD *)(v93 + 16);
                  if (!v35)
                    goto LABEL_142;
                  v36 = __clz(v35);
                  v37 = v36 ^ 0x3F;
                  v38 = 1 << (v36 ^ 0x3Fu);
                  if (v38 == v35)
                  {
                    v39 = 0;
                    v38 = *(_QWORD *)(v93 + 16);
                    if (v37)
                      goto LABEL_129;
                  }
                  else
                  {
                    if (v38 >= v35)
                      goto LABEL_183;
                    if (*(_DWORD *)(v93 + 8 * v38 + 32) >= v31)
                    {
                      v39 = 0;
                      if (v37)
                        goto LABEL_129;
                    }
                    else
                    {
                      v81 = v35 + ~v38;
                      if (!v81)
                        goto LABEL_142;
                      if ((v81 & 0x8000000000000000) != 0)
                        goto LABEL_184;
                      if (v81 == 1)
                      {
                        v39 = v35 - 1;
                      }
                      else
                      {
                        if (v81 - 0x4000000000000001 < 0xC000000000000001)
                          goto LABEL_185;
                        v82 = __clz(v81 - 1);
                        v83 = -v82;
                        v38 = 1 << -(char)v82;
                        v39 = v35 - v38;
                        if ((v83 & 0x3F) != 0)
                        {
LABEL_129:
                          do
                          {
                            v84 = v39 + (v38 >> 1);
                            if (__OFADD__(v39, v38 >> 1))
                              goto LABEL_156;
                            if (v84 >= v35)
                              goto LABEL_157;
                            if (*(_DWORD *)(v93 + 32 + 8 * v84) < v31)
                              v39 += v38 >> 1;
                            v58 = v38 >= 4;
                            v38 >>= 1;
                          }
                          while (v58);
                        }
                      }
                    }
                  }
                  if (v39 >= v35)
                    goto LABEL_180;
                  v85 = v93 + 32;
                  if (*(_DWORD *)(v93 + 32 + 8 * v39) >= v31)
                    v86 = v39;
                  else
                    v86 = v39 + 1;
                  if (v86 == v35)
                    goto LABEL_142;
                  if (v86 >= v35)
                    goto LABEL_187;
                  if (*(_DWORD *)(v85 + 8 * v86) != (_DWORD)v31)
                  {
LABEL_142:
                    sub_1B08AE3C4((uint64_t)v89, &qword_1EEEBACA0);
                    swift_release_n();
                    swift_release();
                    goto LABEL_144;
                  }
                  v61 = v85 + 8 * v86;
                  goto LABEL_71;
                }
                goto LABEL_72;
              }
            }
            else
            {
              HIDWORD(v48) = v97;
              LODWORD(v48) = v97;
              LODWORD(v31) = (v48 >> 16) & 0xFF00FF | v97 & 0xFF00;
            }
            sub_1B08CE4D4((uint64_t)v5, (uint64_t)v89, &qword_1EEEBACA0);
            v49 = *(_QWORD *)(v93 + 16);
            if (!v49)
              goto LABEL_142;
            v50 = __clz(v49);
            v51 = v50 ^ 0x3F;
            v52 = 1 << (v50 ^ 0x3Fu);
            if (v52 == v49)
            {
              v53 = 0;
              v52 = *(_QWORD *)(v93 + 16);
              if (v51)
                goto LABEL_76;
            }
            else
            {
              if (v52 >= v49)
                goto LABEL_177;
              if (*(_DWORD *)(v93 + 8 * v52 + 32) >= v31)
              {
                v53 = 0;
                if (v51)
                  goto LABEL_76;
              }
              else
              {
                v54 = v49 + ~v52;
                if (!v54)
                  goto LABEL_142;
                if ((v54 & 0x8000000000000000) != 0)
                  goto LABEL_179;
                if (v54 == 1)
                {
                  v53 = v49 - 1;
                }
                else
                {
                  if (v54 - 0x4000000000000001 < 0xC000000000000001)
                    goto LABEL_182;
                  v63 = __clz(v54 - 1);
                  v64 = -v63;
                  v52 = 1 << -(char)v63;
                  v53 = v49 - v52;
                  if ((v64 & 0x3F) != 0)
                  {
LABEL_76:
                    while (1)
                    {
                      v65 = v53 + (v52 >> 1);
                      if (__OFADD__(v53, v52 >> 1))
                        break;
                      if (v65 >= v49)
                        goto LABEL_154;
                      if (*(_DWORD *)(v93 + 32 + 8 * v65) < v31)
                        v53 += v52 >> 1;
                      v58 = v52 >= 4;
                      v52 >>= 1;
                      if (!v58)
                        goto LABEL_81;
                    }
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
LABEL_160:
                    __break(1u);
LABEL_161:
                    __break(1u);
LABEL_162:
                    __break(1u);
LABEL_163:
                    __break(1u);
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
                    goto LABEL_166;
                  }
                }
              }
            }
LABEL_81:
            if (v53 >= v49)
              goto LABEL_171;
            v66 = v93 + 32;
            if (*(_DWORD *)(v93 + 32 + 8 * v53) >= v31)
              v67 = v53;
            else
              v67 = v53 + 1;
            if (v67 == v49)
              goto LABEL_142;
            if (v67 >= v49)
              goto LABEL_188;
            if (*(_DWORD *)(v66 + 8 * v67) != (_DWORD)v31)
              goto LABEL_142;
            LODWORD(v32) = *(_DWORD *)(v66 + 8 * v67 + 4);
            sub_1B08AE3C4((uint64_t)v89, &qword_1EEEBACA0);
            if (WORD1(v32))
            {
LABEL_143:
              swift_release_n();
              swift_release();
              goto LABEL_144;
            }
            v62 = 0;
LABEL_90:
            v69 = v5[7];
            v68 = v5[8];
            v3 = __OFADD__(v68, v69);
            v70 = v68 + v69;
            if (v3)
              goto LABEL_158;
            if (v70 < v68)
              goto LABEL_159;
            v71 = v5[10];
            if (v71 < v68)
              goto LABEL_160;
            if (v71 >= v70)
              goto LABEL_161;
            if (__OFSUB__(v71, v68))
              goto LABEL_162;
            v72 = v5[6];
            *(_WORD *)(v72 + 2 * (v71 - v68)) = v32;
            v73 = v71 + 1;
            v5[10] = v71 + 1;
            v74 = v5[9];
            v75 = v74 + 1;
            if (__OFADD__(v74, 1))
              goto LABEL_163;
            v5[9] = v75;
            v76 = v73;
            if (v75 != v25)
            {
              while (v73 >= v68 && v76 < v70)
              {
                if (__OFSUB__(v76, v68))
                  goto LABEL_147;
                *(_WORD *)(v72 + 2 * (v76 - v68)) = 0;
                v77 = v75 + 1;
                if (__OFADD__(v75, 1))
                  goto LABEL_148;
                ++v76;
                ++v75;
                if (v77 == v25)
                {
                  v5[9] = v25;
                  v5[10] = v76;
                  goto LABEL_103;
                }
              }
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
              goto LABEL_149;
            }
LABEL_103:
            if (v25 != v6)
            {
              if (v76 < v68 || v76 >= v70)
                goto LABEL_168;
              if (__OFSUB__(v76, v68))
                goto LABEL_169;
              *(_WORD *)(v72 + 2 * (v76 - v68)) = v62;
              v78 = v76 + 1;
              v5[10] = v76 + 1;
              v79 = v25 + 1;
              if (__OFADD__(v25, 1))
                goto LABEL_170;
              v5[9] = v79;
              if (v79 != v6)
              {
                if (v79 >= v6)
                  goto LABEL_176;
                v80 = v78;
                while (v78 >= v68 && v80 < v70)
                {
                  if (__OFSUB__(v80, v68))
                    goto LABEL_152;
                  *(_WORD *)(v72 + 2 * (v80 - v68)) = 0;
                  ++v80;
                  if (v6 == ++v79)
                  {
                    v5[9] = v6;
                    v5[10] = v80;
                    goto LABEL_116;
                  }
                }
                goto LABEL_151;
              }
            }
LABEL_116:
            v7 = v5[24];
            if (v6 < v7)
            {
              sub_1B0952B10((uint64_t)v94);
              v25 = v95;
              v24 = v96;
              if ((v99 & 1) == 0)
                continue;
            }
            goto LABEL_17;
          }
          sub_1B08CE4D4((uint64_t)v5, (uint64_t)v89, &qword_1EEEBACA0);
          v40 = *(_QWORD *)(v93 + 16);
          if (!v40)
            goto LABEL_142;
          HIDWORD(v41) = v26;
          LODWORD(v41) = v26;
          v42 = (v41 >> 16) & 0xFF00FF | v26 & 0xFF00;
          v43 = __clz(v40);
          v44 = v43 ^ 0x3F;
          v45 = 1 << (v43 ^ 0x3Fu);
          if (v45 == v40)
          {
            v46 = 0;
            v45 = *(_QWORD *)(v93 + 16);
            if (v44)
              goto LABEL_58;
          }
          else
          {
            if (v45 >= v40)
              goto LABEL_173;
            if (*(_DWORD *)(v93 + 8 * v45 + 32) >= v42)
            {
              v46 = 0;
              if (v44)
                goto LABEL_58;
            }
            else
            {
              v47 = v40 + ~v45;
              if (!v47)
                goto LABEL_142;
              if ((v47 & 0x8000000000000000) != 0)
                goto LABEL_178;
              if (v47 == 1)
              {
                v46 = v40 - 1;
              }
              else
              {
                if (v47 - 0x4000000000000001 < 0xC000000000000001)
                  goto LABEL_181;
                v55 = __clz(v47 - 1);
                v56 = -v55;
                v45 = 1 << -(char)v55;
                v46 = v40 - v45;
                if ((v56 & 0x3F) != 0)
                {
LABEL_58:
                  while (1)
                  {
                    v57 = v46 + (v45 >> 1);
                    if (__OFADD__(v46, v45 >> 1))
                      break;
                    if (v57 >= v40)
                      goto LABEL_150;
                    if (*(_DWORD *)(v93 + 32 + 8 * v57) < v42)
                      v46 += v45 >> 1;
                    v58 = v45 >= 4;
                    v45 >>= 1;
                    if (!v58)
                      goto LABEL_63;
                  }
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
                  goto LABEL_153;
                }
              }
            }
          }
LABEL_63:
          if (v46 >= v40)
            goto LABEL_164;
          v59 = v93 + 32;
          if (*(_DWORD *)(v93 + 32 + 8 * v46) >= v42)
            v60 = v46;
          else
            v60 = v46 + 1;
          if (v60 == v40)
            goto LABEL_142;
          if (v60 >= v40)
            goto LABEL_186;
          if (*(_DWORD *)(v59 + 8 * v60) != v42)
            goto LABEL_142;
          v61 = v59 + 8 * v60;
LABEL_71:
          v32 = *(unsigned int *)(v61 + 4);
          sub_1B08AE3C4((uint64_t)v89, &qword_1EEEBACA0);
LABEL_72:
          if (v32 >> 16)
            goto LABEL_143;
          v62 = -1;
          goto LABEL_90;
        }
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
        goto LABEL_174;
      }
    }
  }
}

void sub_1B094E834()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  __int16 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91[8];
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned __int8 v95;
  char v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  v1 = v0[3];
  v2 = v0[4];
  v3 = __OFADD__(v2, v1);
  v4 = v2 + v1;
  if (v3)
    goto LABEL_158;
  v5 = v0;
  v6 = v0[9];
  if (v6 < v4)
  {
    v7 = v0[24];
    if (v6 != v7 || (sub_1B0951634(), v6 = v0[9], v7 = v0[24], v6 != v7))
    {
      if (v6 < v7)
      {
        v9 = v0[3];
        v8 = v0[4];
        v3 = __OFADD__(v8, v9);
        v10 = v8 + v9;
        if (v3)
          goto LABEL_168;
        v3 = __OFSUB__(v6, v8);
        v11 = v6 - v8;
        if (v3)
        {
LABEL_169:
          __break(1u);
        }
        else
        {
          v12 = v10 - v6;
          if (!__OFSUB__(v10, v6))
          {
            v3 = __OFADD__(v11, v12);
            v13 = v11 + v12;
            if (!v3)
            {
              if (v10 >= v6)
              {
                v14 = v13 - v11;
                if (v13 >= v11)
                {
                  v15 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[11];
                  v16 = v0[2];
                  v17 = v16 + 2 * v11;
                  if (!v16)
                    v17 = 0;
                  v86 = v0[1];
                  *(_QWORD *)&v87 = v17;
                  *((_QWORD *)&v87 + 1) = v14;
                  v88 = v6;
                  swift_retain();
                  swift_retain();
                  v15(&v105, &v86);
                  swift_release();
                  swift_release();
                  v18 = v107;
                  v86 = v105;
                  v87 = v106;
                  v88 = v107;
                  v89 = v107;
                  sub_1B0937FD8();
                  if ((v19 & 0x100000000) != 0)
                  {
                    v18 = 0;
                    v20 = 0;
                    v21 = 0;
                  }
                  else
                  {
                    if (v89 < v18)
                      goto LABEL_179;
                    v20 = v89;
                    v21 = v19;
                  }
                  v98 = v87;
                  v97 = v86;
                  v99 = v88;
                  v100 = v89;
                  v101 = v18;
                  v102 = v20;
                  v103 = v21;
                  v104 = BYTE4(v19) & 1;
                  swift_retain_n();
                  sub_1B09529A8((uint64_t)v91);
                  if ((v96 & 1) != 0)
                  {
LABEL_20:
                    swift_release();
                    swift_release();
                    swift_release();
                    if (v6 >= v7)
                      return;
LABEL_147:
                    if (!__OFADD__(*v5, 1))
                    {
                      ++*v5;
                      return;
                    }
                    goto LABEL_177;
                  }
                  v23 = v92;
                  v22 = v93;
                  v85 = (uint64_t)(v0 + 18);
                  while (1)
                  {
                    v6 = v22;
                    v24 = v94 | ((unint64_t)v95 << 32);
                    if ((v24 & 0x100000000) != 0)
                      break;
                    if (HIBYTE(v94) <= 0xFu)
                      v25 = HIBYTE(v94) | 0xFE00u;
                    else
                      v25 = (HIBYTE(v94) - 16) | 0xE0100u;
                    if (v5[21])
                    {
                      sub_1B08AE338(v85, (uint64_t)&v86);
                      v26 = v88;
                      v27 = v89;
                      __swift_project_boxed_opaque_existential_1(&v86, v88);
                      HIDWORD(v28) = v24;
                      LODWORD(v28) = v24;
                      v29 = (v28 >> 16) & 0xFF00FF | v24 & 0xFF00;
                      v30 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16))(v29, v25, v26, v27);
                      v32 = v31;
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
                      if ((v32 & 0x100) == 0)
                      {
                        if ((v32 & 1) != 0)
                        {
                          sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBAC98);
                          v33 = *(_QWORD *)(v90 + 16);
                          if (!v33)
                            goto LABEL_145;
                          v34 = __clz(v33);
                          v35 = v34 ^ 0x3F;
                          v36 = 1 << (v34 ^ 0x3Fu);
                          if (v36 == v33)
                          {
                            v37 = 0;
                            v36 = *(_QWORD *)(v90 + 16);
                            if (v35)
                              goto LABEL_132;
                          }
                          else
                          {
                            if (v36 >= v33)
                              goto LABEL_187;
                            if (*(_DWORD *)(v90 + 8 * v36 + 32) >= v29)
                            {
                              v37 = 0;
                              if (v35)
                                goto LABEL_132;
                            }
                            else
                            {
                              v79 = v33 + ~v36;
                              if (!v79)
                                goto LABEL_145;
                              if ((v79 & 0x8000000000000000) != 0)
                                goto LABEL_188;
                              if (v79 == 1)
                              {
                                v37 = v33 - 1;
                              }
                              else
                              {
                                if (v79 - 0x4000000000000001 < 0xC000000000000001)
                                  goto LABEL_189;
                                v80 = __clz(v79 - 1);
                                v81 = -v80;
                                v36 = 1 << -(char)v80;
                                v37 = v33 - v36;
                                if ((v81 & 0x3F) != 0)
                                {
LABEL_132:
                                  do
                                  {
                                    v82 = v37 + (v36 >> 1);
                                    if (__OFADD__(v37, v36 >> 1))
                                      goto LABEL_159;
                                    if (v82 >= v33)
                                      goto LABEL_160;
                                    if (*(_DWORD *)(v90 + 32 + 8 * v82) < v29)
                                      v37 += v36 >> 1;
                                    v56 = v36 >= 4;
                                    v36 >>= 1;
                                  }
                                  while (v56);
                                }
                              }
                            }
                          }
                          if (v37 >= v33)
                            goto LABEL_184;
                          v83 = v90 + 32;
                          if (*(_DWORD *)(v90 + 32 + 8 * v37) >= v29)
                            v84 = v37;
                          else
                            v84 = v37 + 1;
                          if (v84 == v33)
                            goto LABEL_145;
                          if (v84 >= v33)
                            goto LABEL_192;
                          if (*(_DWORD *)(v83 + 8 * v84) != (_DWORD)v29)
                          {
LABEL_145:
                            sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBAC98);
                            swift_release_n();
                            swift_release();
                            goto LABEL_147;
                          }
                          v59 = v83 + 8 * v84;
                          goto LABEL_74;
                        }
                        goto LABEL_75;
                      }
                    }
                    else
                    {
                      HIDWORD(v46) = v94;
                      LODWORD(v46) = v94;
                      LODWORD(v29) = (v46 >> 16) & 0xFF00FF | v94 & 0xFF00;
                    }
                    sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBAC98);
                    v47 = *(_QWORD *)(v90 + 16);
                    if (!v47)
                      goto LABEL_145;
                    v48 = __clz(v47);
                    v49 = v48 ^ 0x3F;
                    v50 = 1 << (v48 ^ 0x3Fu);
                    if (v50 == v47)
                    {
                      v51 = 0;
                      v50 = *(_QWORD *)(v90 + 16);
                      if (v49)
                        goto LABEL_79;
                    }
                    else
                    {
                      if (v50 >= v47)
                        goto LABEL_181;
                      if (*(_DWORD *)(v90 + 8 * v50 + 32) >= v29)
                      {
                        v51 = 0;
                        if (v49)
                          goto LABEL_79;
                      }
                      else
                      {
                        v52 = v47 + ~v50;
                        if (!v52)
                          goto LABEL_145;
                        if ((v52 & 0x8000000000000000) != 0)
                          goto LABEL_183;
                        if (v52 == 1)
                        {
                          v51 = v47 - 1;
                        }
                        else
                        {
                          if (v52 - 0x4000000000000001 < 0xC000000000000001)
                            goto LABEL_186;
                          v61 = __clz(v52 - 1);
                          v62 = -v61;
                          v50 = 1 << -(char)v61;
                          v51 = v47 - v50;
                          if ((v62 & 0x3F) != 0)
                          {
LABEL_79:
                            while (1)
                            {
                              v63 = v51 + (v50 >> 1);
                              if (__OFADD__(v51, v50 >> 1))
                                break;
                              if (v63 >= v47)
                                goto LABEL_157;
                              if (*(_DWORD *)(v90 + 32 + 8 * v63) < v29)
                                v51 += v50 >> 1;
                              v56 = v50 >= 4;
                              v50 >>= 1;
                              if (!v56)
                                goto LABEL_84;
                            }
LABEL_156:
                            __break(1u);
LABEL_157:
                            __break(1u);
LABEL_158:
                            __break(1u);
LABEL_159:
                            __break(1u);
LABEL_160:
                            __break(1u);
LABEL_161:
                            __break(1u);
LABEL_162:
                            __break(1u);
LABEL_163:
                            __break(1u);
LABEL_164:
                            __break(1u);
LABEL_165:
                            __break(1u);
LABEL_166:
                            __break(1u);
LABEL_167:
                            __break(1u);
LABEL_168:
                            __break(1u);
                            goto LABEL_169;
                          }
                        }
                      }
                    }
LABEL_84:
                    if (v51 >= v47)
                      goto LABEL_176;
                    v64 = v90 + 32;
                    if (*(_DWORD *)(v90 + 32 + 8 * v51) >= v29)
                      v65 = v51;
                    else
                      v65 = v51 + 1;
                    if (v65 == v47)
                      goto LABEL_145;
                    if (v65 >= v47)
                      goto LABEL_191;
                    if (*(_DWORD *)(v64 + 8 * v65) != (_DWORD)v29)
                      goto LABEL_145;
                    LODWORD(v30) = *(_DWORD *)(v64 + 8 * v65 + 4);
                    sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBAC98);
                    if (WORD1(v30))
                    {
LABEL_146:
                      swift_release_n();
                      swift_release();
                      goto LABEL_147;
                    }
                    v60 = 0;
LABEL_93:
                    v67 = v5[7];
                    v66 = v5[8];
                    v3 = __OFADD__(v66, v67);
                    v68 = v66 + v67;
                    if (v3)
                      goto LABEL_161;
                    if (v68 < v66)
                      goto LABEL_162;
                    v69 = v5[10];
                    if (v69 < v66)
                      goto LABEL_163;
                    if (v69 >= v68)
                      goto LABEL_164;
                    if (__OFSUB__(v69, v66))
                      goto LABEL_165;
                    v70 = v5[6];
                    *(_WORD *)(v70 + 2 * (v69 - v66)) = v30;
                    v71 = v69 + 1;
                    v5[10] = v69 + 1;
                    v72 = v5[9];
                    v73 = v72 + 1;
                    if (__OFADD__(v72, 1))
                      goto LABEL_166;
                    v5[9] = v73;
                    v74 = v71;
                    if (v73 != v23)
                    {
                      while (v71 >= v66 && v74 < v68)
                      {
                        if (__OFSUB__(v74, v66))
                          goto LABEL_150;
                        *(_WORD *)(v70 + 2 * (v74 - v66)) = 0;
                        v75 = v73 + 1;
                        if (__OFADD__(v73, 1))
                          goto LABEL_151;
                        ++v74;
                        ++v73;
                        if (v75 == v23)
                        {
                          v5[9] = v23;
                          v5[10] = v74;
                          goto LABEL_106;
                        }
                      }
                      __break(1u);
LABEL_150:
                      __break(1u);
LABEL_151:
                      __break(1u);
                      goto LABEL_152;
                    }
LABEL_106:
                    if (v23 != v6)
                    {
                      if (v74 < v66 || v74 >= v68)
                        goto LABEL_173;
                      if (__OFSUB__(v74, v66))
                        goto LABEL_174;
                      *(_WORD *)(v70 + 2 * (v74 - v66)) = v60;
                      v76 = v74 + 1;
                      v5[10] = v74 + 1;
                      v77 = v23 + 1;
                      if (__OFADD__(v23, 1))
                        goto LABEL_175;
                      v5[9] = v77;
                      if (v77 != v6)
                      {
                        if (v77 >= v6)
                          goto LABEL_180;
                        v78 = v76;
                        while (v76 >= v66 && v78 < v68)
                        {
                          if (__OFSUB__(v78, v66))
                            goto LABEL_155;
                          *(_WORD *)(v70 + 2 * (v78 - v66)) = 0;
                          ++v78;
                          if (v6 == ++v77)
                          {
                            v5[9] = v6;
                            v5[10] = v78;
                            goto LABEL_119;
                          }
                        }
                        goto LABEL_154;
                      }
                    }
LABEL_119:
                    v7 = v5[24];
                    if (v6 < v7)
                    {
                      sub_1B09529A8((uint64_t)v91);
                      v23 = v92;
                      v22 = v93;
                      if ((v96 & 1) == 0)
                        continue;
                    }
                    goto LABEL_20;
                  }
                  sub_1B08CE4D4((uint64_t)v5, (uint64_t)&v86, &qword_1EEEBAC98);
                  v38 = *(_QWORD *)(v90 + 16);
                  if (!v38)
                    goto LABEL_145;
                  HIDWORD(v39) = v24;
                  LODWORD(v39) = v24;
                  v40 = (v39 >> 16) & 0xFF00FF | v24 & 0xFF00;
                  v41 = __clz(v38);
                  v42 = v41 ^ 0x3F;
                  v43 = 1 << (v41 ^ 0x3Fu);
                  if (v43 == v38)
                  {
                    v44 = 0;
                    v43 = *(_QWORD *)(v90 + 16);
                    if (v42)
                      goto LABEL_61;
                  }
                  else
                  {
                    if (v43 >= v38)
                      goto LABEL_178;
                    if (*(_DWORD *)(v90 + 8 * v43 + 32) >= v40)
                    {
                      v44 = 0;
                      if (v42)
                        goto LABEL_61;
                    }
                    else
                    {
                      v45 = v38 + ~v43;
                      if (!v45)
                        goto LABEL_145;
                      if ((v45 & 0x8000000000000000) != 0)
                        goto LABEL_182;
                      if (v45 == 1)
                      {
                        v44 = v38 - 1;
                      }
                      else
                      {
                        if (v45 - 0x4000000000000001 < 0xC000000000000001)
                          goto LABEL_185;
                        v53 = __clz(v45 - 1);
                        v54 = -v53;
                        v43 = 1 << -(char)v53;
                        v44 = v38 - v43;
                        if ((v54 & 0x3F) != 0)
                        {
LABEL_61:
                          while (1)
                          {
                            v55 = v44 + (v43 >> 1);
                            if (__OFADD__(v44, v43 >> 1))
                              break;
                            if (v55 >= v38)
                              goto LABEL_153;
                            if (*(_DWORD *)(v90 + 32 + 8 * v55) < v40)
                              v44 += v43 >> 1;
                            v56 = v43 >= 4;
                            v43 >>= 1;
                            if (!v56)
                              goto LABEL_66;
                          }
LABEL_152:
                          __break(1u);
LABEL_153:
                          __break(1u);
LABEL_154:
                          __break(1u);
LABEL_155:
                          __break(1u);
                          goto LABEL_156;
                        }
                      }
                    }
                  }
LABEL_66:
                  if (v44 >= v38)
                    goto LABEL_167;
                  v57 = v90 + 32;
                  if (*(_DWORD *)(v90 + 32 + 8 * v44) >= v40)
                    v58 = v44;
                  else
                    v58 = v44 + 1;
                  if (v58 == v38)
                    goto LABEL_145;
                  if (v58 >= v38)
                    goto LABEL_190;
                  if (*(_DWORD *)(v57 + 8 * v58) != v40)
                    goto LABEL_145;
                  v59 = v57 + 8 * v58;
LABEL_74:
                  v30 = *(unsigned int *)(v59 + 4);
                  sub_1B08AE3C4((uint64_t)&v86, &qword_1EEEBAC98);
LABEL_75:
                  if (v30 >> 16)
                    goto LABEL_146;
                  v60 = -1;
                  goto LABEL_93;
                }
              }
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
              return;
            }
LABEL_171:
            __break(1u);
            goto LABEL_172;
          }
        }
        __break(1u);
        goto LABEL_171;
      }
    }
  }
}

uint64_t sub_1B094F0C0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  __int16 v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  __int16 v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[8];
  uint64_t v81;
  unint64_t v82;
  __int16 v83;
  char v84;
  char v85;
  _BYTE v86[56];
  uint64_t v87;
  unsigned int v88;
  unsigned __int8 v89;
  uint64_t v90;

  if ((*(_BYTE *)(v0 + 52) & 1) != 0)
    return 0;
  v2 = v0;
  LODWORD(v3) = *(_DWORD *)(v0 + 48);
  v4 = *(_DWORD *)(v0 + 168);
  if ((*(_BYTE *)(v0 + 172) & 1) != 0)
    goto LABEL_4;
  if ((_DWORD)v3 == v4)
  {
    sub_1B0951BB0();
    if ((*(_BYTE *)(v0 + 52) & 1) != 0)
    {
      if ((*(_BYTE *)(v0 + 172) & 1) == 0)
        return 4;
      return 0;
    }
    LODWORD(v3) = *(_DWORD *)(v0 + 48);
    v4 = *(_DWORD *)(v0 + 168);
    if ((*(_BYTE *)(v0 + 172) & 1) != 0)
    {
LABEL_4:
      v5 = 1;
      goto LABEL_5;
    }
    if ((_DWORD)v3 == v4)
      return 0;
  }
  if (v3 >= v4)
    return 4;
  v5 = 0;
LABEL_5:
  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v0 + 64);
  LODWORD(v73) = v3;
  BYTE4(v73) = 0;
  v74 = 0;
  v75 = 1;
  v76 = *(_QWORD *)(v0 + 8);
  swift_retain();
  v6(&v87, &v73);
  swift_release();
  LOBYTE(v73) = BYTE4(v87);
  v80[0] = v89;
  v85 = BYTE4(v87);
  sub_1B09534F8(v87 | ((unint64_t)BYTE4(v87) << 32), v88 | ((unint64_t)v89 << 32), v90, v87 | ((unint64_t)BYTE4(v87) << 32), (uint64_t)v86);
  sub_1B0952CFC((uint64_t)v80);
  if ((v84 & 1) != 0)
  {
LABEL_6:
    if ((v5 & 1) != 0)
    {
LABEL_8:
      result = 1;
      goto LABEL_9;
    }
LABEL_7:
    if (v3 < v4)
      goto LABEL_8;
    return 4;
  }
  v7 = v0 + 120;
  while (2)
  {
    v3 = v81;
    v8 = v82;
    if ((v83 & 0x100) != 0)
    {
      result = sub_1B08CE4D4(v2, (uint64_t)&v73, &qword_1EEEBAC90);
      v27 = *(_QWORD *)(v79 + 16);
      if (!v27)
        goto LABEL_159;
      v28 = HIBYTE(v8) | (unsigned __int16)(BYTE6(v8) << 8) | (BYTE5(v8) << 16);
      v29 = __clz(v27);
      v30 = v29 ^ 0x3F;
      v31 = 1 << (v29 ^ 0x3Fu);
      if (v31 == v27)
      {
        v32 = 0;
        v31 = *(_QWORD *)(v79 + 16);
        if (v30)
          goto LABEL_54;
      }
      else
      {
        if (v31 >= v27)
        {
LABEL_183:
          __break(1u);
          goto LABEL_184;
        }
        if (*(_DWORD *)(v79 + 8 * v31 + 32) >= v28)
        {
          v32 = 0;
          if (v30)
            goto LABEL_54;
        }
        else
        {
          v33 = v27 + ~v31;
          if (!v33)
            goto LABEL_159;
          if ((v33 & 0x8000000000000000) != 0)
          {
LABEL_185:
            __break(1u);
            goto LABEL_186;
          }
          if (v33 == 1)
          {
            v32 = v27 - 1;
          }
          else
          {
            if (v33 - 0x4000000000000001 < 0xC000000000000001)
            {
LABEL_188:
              __break(1u);
              goto LABEL_189;
            }
            v40 = __clz(v33 - 1);
            v41 = -v40;
            v31 = 1 << -(char)v40;
            v32 = v27 - v31;
            if ((v41 & 0x3F) != 0)
            {
LABEL_54:
              while (1)
              {
                v42 = v32 + (v31 >> 1);
                if (__OFADD__(v32, v31 >> 1))
                  break;
                if (v42 >= v27)
                  goto LABEL_168;
                if (*(_DWORD *)(v79 + 32 + 8 * v42) < v28)
                  v32 += v31 >> 1;
                v43 = v31 >= 4;
                v31 >>= 1;
                if (!v43)
                  goto LABEL_59;
              }
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
              goto LABEL_169;
            }
          }
        }
      }
LABEL_59:
      if (v32 >= v27)
      {
LABEL_181:
        __break(1u);
        goto LABEL_182;
      }
      v44 = v79 + 32;
      if (*(_DWORD *)(v79 + 32 + 8 * v32) >= v28)
        v45 = v32;
      else
        v45 = v32 + 1;
      if (v45 != v27)
      {
        if (v45 >= v27)
          goto LABEL_195;
        if (*(_DWORD *)(v44 + 8 * v45) == v28)
        {
          v19 = *(unsigned int *)(v44 + 8 * v45 + 4);
LABEL_67:
          result = sub_1B08AE3C4((uint64_t)&v73, &qword_1EEEBAC90);
LABEL_68:
          if (!(v19 >> 16))
          {
            v46 = -1;
            goto LABEL_86;
          }
          goto LABEL_160;
        }
      }
LABEL_159:
      sub_1B08AE3C4((uint64_t)&v73, &qword_1EEEBAC90);
      result = 2;
      goto LABEL_9;
    }
    if (v83 <= 0xFu)
      v9 = v83 | 0xFE00u;
    else
      v9 = (v83 - 16) | 0xE0100u;
    if (*(_QWORD *)(v2 + 144))
    {
      v10 = HIBYTE(v82);
      v11 = HIWORD(v82);
      v12 = v82 >> 40;
      sub_1B08AE338(v7, (uint64_t)&v73);
      v13 = v7;
      v14 = v77;
      v15 = v78;
      __swift_project_boxed_opaque_existential_1(&v73, v77);
      v16 = v10 & 0xFF0000FF | (unsigned __int16)(v11 << 8) | (v12 << 16);
      v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16);
      v18 = v15;
      v7 = v13;
      v19 = v17(v16, v9, v14, v18);
      v21 = v20;
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      if ((v21 & 0x100) == 0)
      {
        if ((v21 & 1) == 0)
          goto LABEL_68;
        result = sub_1B08CE4D4(v2, (uint64_t)&v73, &qword_1EEEBAC90);
        v22 = *(_QWORD *)(v79 + 16);
        if (!v22)
          goto LABEL_159;
        v23 = __clz(v22);
        v24 = v23 ^ 0x3F;
        v25 = 1 << (v23 ^ 0x3Fu);
        if (v25 == v22)
        {
          v26 = 0;
          v25 = *(_QWORD *)(v79 + 16);
          if (v24)
            goto LABEL_140;
          goto LABEL_145;
        }
        if (v25 >= v22)
        {
LABEL_191:
          __break(1u);
          goto LABEL_192;
        }
        if (*(_DWORD *)(v79 + 8 * v25 + 32) >= v16)
        {
          v26 = 0;
          if (v24)
            goto LABEL_140;
        }
        else
        {
          v67 = v22 + ~v25;
          if (!v67)
            goto LABEL_159;
          if ((v67 & 0x8000000000000000) != 0)
            goto LABEL_193;
          if (v67 == 1)
          {
            v26 = v22 - 1;
            goto LABEL_145;
          }
          if (v67 - 0x4000000000000001 < 0xC000000000000001)
            goto LABEL_194;
          v68 = __clz(v67 - 1);
          v69 = -v68;
          v25 = 1 << -(char)v68;
          v26 = v22 - v25;
          if ((v69 & 0x3F) != 0)
          {
LABEL_140:
            while (1)
            {
              v70 = v26 + (v25 >> 1);
              if (__OFADD__(v26, v25 >> 1))
                break;
              if (v70 >= v22)
                goto LABEL_172;
              if (*(_DWORD *)(v79 + 32 + 8 * v70) < v16)
                v26 += v25 >> 1;
              v43 = v25 >= 4;
              v25 >>= 1;
              if (!v43)
                goto LABEL_145;
            }
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
            goto LABEL_173;
          }
        }
LABEL_145:
        if (v26 >= v22)
        {
LABEL_187:
          __break(1u);
          goto LABEL_188;
        }
        v71 = v79 + 32;
        if (*(_DWORD *)(v79 + 32 + 8 * v26) >= v16)
          v72 = v26;
        else
          v72 = v26 + 1;
        if (v72 != v22)
        {
          if (v72 >= v22)
            goto LABEL_197;
          if (*(_DWORD *)(v71 + 8 * v72) == (_DWORD)v16)
          {
            v19 = *(unsigned int *)(v71 + 8 * v72 + 4);
            goto LABEL_67;
          }
        }
        goto LABEL_159;
      }
    }
    else
    {
      LODWORD(v16) = HIBYTE(v82) | (unsigned __int16)(BYTE6(v82) << 8) | (BYTE5(v82) << 16);
    }
    result = sub_1B08CE4D4(v2, (uint64_t)&v73, &qword_1EEEBAC90);
    v34 = *(_QWORD *)(v79 + 16);
    if (!v34)
      goto LABEL_159;
    v35 = __clz(v34);
    v36 = v35 ^ 0x3F;
    v37 = 1 << (v35 ^ 0x3Fu);
    if (v37 == v34)
    {
      v38 = 0;
      v37 = *(_QWORD *)(v79 + 16);
      if (v36)
        goto LABEL_72;
      goto LABEL_77;
    }
    if (v37 >= v34)
    {
LABEL_184:
      __break(1u);
      goto LABEL_185;
    }
    if (*(_DWORD *)(v79 + 8 * v37 + 32) >= v16)
    {
      v38 = 0;
      if (v36)
        goto LABEL_72;
    }
    else
    {
      v39 = v34 + ~v37;
      if (!v39)
        goto LABEL_159;
      if ((v39 & 0x8000000000000000) != 0)
      {
LABEL_186:
        __break(1u);
        goto LABEL_187;
      }
      if (v39 == 1)
      {
        v38 = v34 - 1;
        goto LABEL_77;
      }
      if (v39 - 0x4000000000000001 < 0xC000000000000001)
      {
LABEL_190:
        __break(1u);
        goto LABEL_191;
      }
      v47 = __clz(v39 - 1);
      v48 = -v47;
      v37 = 1 << -(char)v47;
      v38 = v34 - v37;
      if ((v48 & 0x3F) != 0)
      {
LABEL_72:
        while (1)
        {
          v49 = v38 + (v37 >> 1);
          if (__OFADD__(v38, v37 >> 1))
            break;
          if (v49 >= v34)
            goto LABEL_170;
          if (*(_DWORD *)(v79 + 32 + 8 * v49) < v16)
            v38 += v37 >> 1;
          v43 = v37 >= 4;
          v37 >>= 1;
          if (!v43)
            goto LABEL_77;
        }
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
        goto LABEL_171;
      }
    }
LABEL_77:
    if (v38 >= v34)
    {
LABEL_182:
      __break(1u);
      goto LABEL_183;
    }
    v50 = v79 + 32;
    if (*(_DWORD *)(v79 + 32 + 8 * v38) >= v16)
      v51 = v38;
    else
      v51 = v38 + 1;
    if (v51 == v34)
      goto LABEL_159;
    if (v51 >= v34)
      goto LABEL_196;
    if (*(_DWORD *)(v50 + 8 * v51) != (_DWORD)v16)
      goto LABEL_159;
    LODWORD(v19) = *(_DWORD *)(v50 + 8 * v51 + 4);
    result = sub_1B08AE3C4((uint64_t)&v73, &qword_1EEEBAC90);
    if (WORD1(v19))
    {
LABEL_160:
      result = 3;
LABEL_9:
      if (!__OFADD__(*(_QWORD *)v2, 1))
      {
        ++*(_QWORD *)v2;
        return result;
      }
LABEL_180:
      __break(1u);
      goto LABEL_181;
    }
    v46 = 0;
LABEL_86:
    v53 = *(_QWORD *)(v2 + 32);
    v52 = *(_QWORD *)(v2 + 40);
    v54 = __OFADD__(v52, v53);
    v55 = v52 + v53;
    if (v54)
    {
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }
    if (v55 < v52)
    {
LABEL_174:
      __break(1u);
      goto LABEL_175;
    }
    v56 = *(_QWORD *)(v2 + 56);
    if (v56 < v52)
    {
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }
    if (v56 >= v55)
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    if (__OFSUB__(v56, v52))
      goto LABEL_177;
    v57 = *(_QWORD *)(v2 + 24);
    *(_WORD *)(v57 + 2 * (v56 - v52)) = v19;
    if ((*(_BYTE *)(v2 + 52) & 1) != 0)
    {
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    v58 = *(_DWORD *)(v2 + 12);
    v59 = *(_DWORD *)(v2 + 48);
    v60 = v56 + 2;
    while (1)
    {
      v61 = v60 - 1;
      if (v59 != v58)
        break;
      if ((v3 & 0x100000000) != 0)
      {
        LODWORD(v3) = 0;
        *(_DWORD *)(v2 + 48) = 0;
        *(_BYTE *)(v2 + 52) = 1;
        *(_QWORD *)(v2 + 56) = v61;
        if ((v8 & 0x100000000) != 0)
          return 4;
        goto LABEL_109;
      }
      v62 = 0;
LABEL_99:
      if (v61 < v52 || v61 >= v55)
      {
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
        goto LABEL_167;
      }
      v54 = __OFSUB__(v61, v52);
      v63 = v61 - v52;
      if (v54)
        goto LABEL_162;
      *(_WORD *)(v57 + 2 * v63) = 0;
      ++v60;
      v64 = v59 == v58;
      v59 = v62;
      if (v64)
        goto LABEL_189;
    }
    v62 = v59 + 1;
    if (v59 == -1)
      goto LABEL_165;
    if ((v3 & 0x100000000) != 0 || v62 != (_DWORD)v3)
      goto LABEL_99;
    *(_DWORD *)(v2 + 48) = v3;
    *(_BYTE *)(v2 + 52) = 0;
    *(_QWORD *)(v2 + 56) = v61;
    if ((v8 & 0x100000000) == 0 && (_DWORD)v3 == (_DWORD)v8)
    {
LABEL_126:
      v5 = *(_BYTE *)(v2 + 172);
      v4 = *(_DWORD *)(v2 + 168);
      if ((v5 & 1) == 0 && v3 >= v4)
        goto LABEL_7;
      sub_1B0952CFC((uint64_t)v80);
      if ((v84 & 1) == 0)
        continue;
      goto LABEL_6;
    }
    break;
  }
LABEL_109:
  if (v61 < v52 || v61 >= v55)
    goto LABEL_178;
  v54 = __OFSUB__(v61, v52);
  v65 = v61 - v52;
  if (v54)
    goto LABEL_179;
  *(_WORD *)(v57 + 2 * v65) = v46;
  if (v59 != v58)
  {
    do
    {
      if ((_DWORD)v3 == v58)
      {
        if ((v8 & 0x100000000) != 0)
        {
          *(_DWORD *)(v2 + 48) = 0;
          *(_BYTE *)(v2 + 52) = 1;
          *(_QWORD *)(v2 + 56) = v60;
          return 4;
        }
        v66 = 0;
      }
      else
      {
        v66 = v3 + 1;
        if ((_DWORD)v3 == -1)
          goto LABEL_166;
        if ((v8 & 0x100000000) == 0 && v66 == (_DWORD)v8)
        {
          *(_DWORD *)(v2 + 48) = v8;
          *(_BYTE *)(v2 + 52) = 0;
          LODWORD(v3) = v8;
          *(_QWORD *)(v2 + 56) = v60;
          goto LABEL_126;
        }
      }
      if (v60 < v52 || v60 >= v55)
        goto LABEL_163;
      if (__OFSUB__(v60, v52))
        goto LABEL_164;
      *(_WORD *)(v57 + 2 * (v60 - v52)) = 0;
      ++v60;
      v64 = (_DWORD)v3 == v58;
      LODWORD(v3) = v66;
    }
    while (!v64);
  }
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
  return result;
}

uint64_t sub_1B094F910()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t *);
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;
  __int16 v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[8];
  uint64_t v79;
  unint64_t v80;
  __int16 v81;
  char v82;
  char v83;
  _BYTE v84[56];
  uint64_t v85;
  unsigned int v86;
  unsigned __int8 v87;
  uint64_t v88;

  if ((*(_BYTE *)(v0 + 52) & 1) != 0)
    return 0;
  v2 = v0;
  LODWORD(v3) = *(_DWORD *)(v0 + 48);
  v4 = *(_DWORD *)(v0 + 168);
  if ((*(_BYTE *)(v0 + 172) & 1) != 0)
    goto LABEL_4;
  if ((_DWORD)v3 == v4)
  {
    sub_1B0951BB0();
    if ((*(_BYTE *)(v0 + 52) & 1) != 0)
    {
      if ((*(_BYTE *)(v0 + 172) & 1) == 0)
        return 4;
      return 0;
    }
    LODWORD(v3) = *(_DWORD *)(v0 + 48);
    v4 = *(_DWORD *)(v0 + 168);
    if ((*(_BYTE *)(v0 + 172) & 1) != 0)
    {
LABEL_4:
      v5 = 1;
      goto LABEL_5;
    }
    if ((_DWORD)v3 == v4)
      return 0;
  }
  if (v3 >= v4)
    return 4;
  v5 = 0;
LABEL_5:
  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v0 + 64);
  LODWORD(v71) = v3;
  BYTE4(v71) = 0;
  v72 = 0;
  v73 = 1;
  v74 = *(_QWORD *)(v0 + 8);
  swift_retain();
  v6(&v85, &v71);
  swift_release();
  LOBYTE(v71) = BYTE4(v85);
  v78[0] = v87;
  v83 = BYTE4(v85);
  sub_1B09534F8(v85 | ((unint64_t)BYTE4(v85) << 32), v86 | ((unint64_t)v87 << 32), v88, v85 | ((unint64_t)BYTE4(v85) << 32), (uint64_t)v84);
  sub_1B0952CFC((uint64_t)v78);
  if ((v82 & 1) != 0)
  {
LABEL_6:
    if ((v5 & 1) != 0)
    {
LABEL_8:
      result = 1;
      goto LABEL_9;
    }
LABEL_7:
    if (v3 < v4)
      goto LABEL_8;
    return 4;
  }
  v70 = v0 + 120;
  while (2)
  {
    v3 = v79;
    v7 = v80;
    if ((v81 & 0x100) != 0)
    {
      result = sub_1B08CE4D4(v2, (uint64_t)&v71, &qword_1EEEBAC88);
      v18 = *(_QWORD *)(v77 + 16);
      if (!v18)
        goto LABEL_159;
      v19 = HIBYTE(v7) | (unsigned __int16)(BYTE6(v7) << 8) | (BYTE5(v7) << 16);
      v20 = __clz(v18);
      v21 = v20 ^ 0x3F;
      v22 = 1 << (v20 ^ 0x3Fu);
      if (v22 == v18)
      {
        v23 = 0;
        v22 = *(_QWORD *)(v77 + 16);
        if (v21)
          goto LABEL_56;
      }
      else
      {
        if (v22 >= v18)
        {
LABEL_183:
          __break(1u);
          goto LABEL_184;
        }
        if (*(_DWORD *)(v77 + 8 * v22 + 32) >= v19)
        {
          v23 = 0;
          if (v21)
            goto LABEL_56;
        }
        else
        {
          v24 = v18 + ~v22;
          if (!v24)
            goto LABEL_159;
          if ((v24 & 0x8000000000000000) != 0)
          {
LABEL_185:
            __break(1u);
            goto LABEL_186;
          }
          if (v24 == 1)
          {
            v23 = v18 - 1;
          }
          else
          {
            if (v24 - 0x4000000000000001 < 0xC000000000000001)
            {
LABEL_188:
              __break(1u);
              goto LABEL_189;
            }
            v36 = __clz(v24 - 1);
            v37 = -v36;
            v22 = 1 << -(char)v36;
            v23 = v18 - v22;
            if ((v37 & 0x3F) != 0)
            {
LABEL_56:
              while (1)
              {
                v38 = v23 + (v22 >> 1);
                if (__OFADD__(v23, v22 >> 1))
                  break;
                if (v38 >= v18)
                  goto LABEL_167;
                if (*(_DWORD *)(v77 + 32 + 8 * v38) < v19)
                  v23 += v22 >> 1;
                v39 = v22 >= 4;
                v22 >>= 1;
                if (!v39)
                  goto LABEL_61;
              }
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
              goto LABEL_168;
            }
          }
        }
      }
LABEL_61:
      if (v23 >= v18)
      {
LABEL_181:
        __break(1u);
        goto LABEL_182;
      }
      v40 = v77 + 32;
      if (*(_DWORD *)(v77 + 32 + 8 * v23) >= v19)
        v41 = v23;
      else
        v41 = v23 + 1;
      if (v41 != v18)
      {
        if (v41 >= v18)
          goto LABEL_195;
        if (*(_DWORD *)(v40 + 8 * v41) == v19)
        {
          v42 = v40 + 8 * v41;
LABEL_69:
          LODWORD(v15) = *(_DWORD *)(v42 + 4);
          result = sub_1B08AE3C4((uint64_t)&v71, &qword_1EEEBAC88);
LABEL_70:
          v43 = 0xFFFFFF;
          goto LABEL_86;
        }
      }
      goto LABEL_159;
    }
    if (v81 <= 0xFu)
      v8 = v81 | 0xFE00u;
    else
      v8 = (v81 - 16) | 0xE0100u;
    if (*(_QWORD *)(v2 + 144))
    {
      v9 = HIBYTE(v80);
      v10 = HIWORD(v80);
      v11 = v80 >> 40;
      sub_1B08AE338(v70, (uint64_t)&v71);
      v12 = v75;
      v13 = v76;
      __swift_project_boxed_opaque_existential_1(&v71, v75);
      v14 = v9 & 0xFF0000FF | (unsigned __int16)(v10 << 8) | (v11 << 16);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v8, v12, v13);
      v17 = v16;
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
      if ((v17 & 0x100) == 0)
      {
        if ((v17 & 1) == 0)
        {
          if (HIDWORD(v15))
          {
LABEL_170:
            result = 3;
LABEL_9:
            if (!__OFADD__(*(_QWORD *)v2, 1))
            {
              ++*(_QWORD *)v2;
              return result;
            }
LABEL_180:
            __break(1u);
            goto LABEL_181;
          }
          goto LABEL_70;
        }
        result = sub_1B08CE4D4(v2, (uint64_t)&v71, &qword_1EEEBAC88);
        v31 = *(_QWORD *)(v77 + 16);
        if (v31)
        {
          v32 = __clz(v31);
          v33 = v32 ^ 0x3F;
          v34 = 1 << (v32 ^ 0x3Fu);
          if (v34 == v31)
          {
            v35 = 0;
            v34 = *(_QWORD *)(v77 + 16);
            if (v33)
              goto LABEL_140;
          }
          else
          {
            if (v34 >= v31)
            {
LABEL_191:
              __break(1u);
              goto LABEL_192;
            }
            if (*(_DWORD *)(v77 + 8 * v34 + 32) >= v14)
            {
              v35 = 0;
              if (v33)
                goto LABEL_140;
            }
            else
            {
              v64 = v31 + ~v34;
              if (!v64)
                goto LABEL_159;
              if ((v64 & 0x8000000000000000) != 0)
                goto LABEL_193;
              if (v64 == 1)
              {
                v35 = v31 - 1;
              }
              else
              {
                if (v64 - 0x4000000000000001 < 0xC000000000000001)
                  goto LABEL_194;
                v65 = __clz(v64 - 1);
                v66 = -v65;
                v34 = 1 << -(char)v65;
                v35 = v31 - v34;
                if ((v66 & 0x3F) != 0)
                {
LABEL_140:
                  while (1)
                  {
                    v67 = v35 + (v34 >> 1);
                    if (__OFADD__(v35, v34 >> 1))
                      break;
                    if (v67 >= v31)
                      goto LABEL_172;
                    if (*(_DWORD *)(v77 + 32 + 8 * v67) < v14)
                      v35 += v34 >> 1;
                    v39 = v34 >= 4;
                    v34 >>= 1;
                    if (!v39)
                      goto LABEL_145;
                  }
                  __break(1u);
LABEL_172:
                  __break(1u);
                  goto LABEL_173;
                }
              }
            }
          }
LABEL_145:
          if (v35 >= v31)
          {
LABEL_187:
            __break(1u);
            goto LABEL_188;
          }
          v68 = v77 + 32;
          if (*(_DWORD *)(v77 + 32 + 8 * v35) >= v14)
            v69 = v35;
          else
            v69 = v35 + 1;
          if (v69 != v31)
          {
            if (v69 >= v31)
              goto LABEL_197;
            if (*(_DWORD *)(v68 + 8 * v69) == (_DWORD)v14)
            {
              v42 = v68 + 8 * v69;
              goto LABEL_69;
            }
          }
        }
LABEL_159:
        sub_1B08AE3C4((uint64_t)&v71, &qword_1EEEBAC88);
        result = 2;
        goto LABEL_9;
      }
    }
    else
    {
      LODWORD(v14) = HIBYTE(v80) | (unsigned __int16)(BYTE6(v80) << 8) | (BYTE5(v80) << 16);
    }
    result = sub_1B08CE4D4(v2, (uint64_t)&v71, &qword_1EEEBAC88);
    v25 = *(_QWORD *)(v77 + 16);
    if (!v25)
      goto LABEL_159;
    v26 = __clz(v25);
    v27 = v26 ^ 0x3F;
    v28 = 1 << (v26 ^ 0x3Fu);
    if (v28 == v25)
    {
      v29 = 0;
      v28 = *(_QWORD *)(v77 + 16);
      if (v27)
        goto LABEL_73;
      goto LABEL_78;
    }
    if (v28 >= v25)
    {
LABEL_184:
      __break(1u);
      goto LABEL_185;
    }
    if (*(_DWORD *)(v77 + 8 * v28 + 32) >= v14)
    {
      v29 = 0;
      if (v27)
        goto LABEL_73;
    }
    else
    {
      v30 = v25 + ~v28;
      if (!v30)
        goto LABEL_159;
      if ((v30 & 0x8000000000000000) != 0)
      {
LABEL_186:
        __break(1u);
        goto LABEL_187;
      }
      if (v30 == 1)
      {
        v29 = v25 - 1;
        goto LABEL_78;
      }
      if (v30 - 0x4000000000000001 < 0xC000000000000001)
      {
LABEL_190:
        __break(1u);
        goto LABEL_191;
      }
      v44 = __clz(v30 - 1);
      v45 = -v44;
      v28 = 1 << -(char)v44;
      v29 = v25 - v28;
      if ((v45 & 0x3F) != 0)
      {
LABEL_73:
        while (1)
        {
          v46 = v29 + (v28 >> 1);
          if (__OFADD__(v29, v28 >> 1))
            break;
          if (v46 >= v25)
            goto LABEL_169;
          if (*(_DWORD *)(v77 + 32 + 8 * v46) < v14)
            v29 += v28 >> 1;
          v39 = v28 >= 4;
          v28 >>= 1;
          if (!v39)
            goto LABEL_78;
        }
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
        goto LABEL_170;
      }
    }
LABEL_78:
    if (v29 >= v25)
    {
LABEL_182:
      __break(1u);
      goto LABEL_183;
    }
    v47 = v77 + 32;
    if (*(_DWORD *)(v77 + 32 + 8 * v29) >= v14)
      v48 = v29;
    else
      v48 = v29 + 1;
    if (v48 == v25)
      goto LABEL_159;
    if (v48 >= v25)
      goto LABEL_196;
    if (*(_DWORD *)(v47 + 8 * v48) != (_DWORD)v14)
      goto LABEL_159;
    LODWORD(v15) = *(_DWORD *)(v47 + 8 * v48 + 4);
    result = sub_1B08AE3C4((uint64_t)&v71, &qword_1EEEBAC88);
    v43 = 0;
LABEL_86:
    v50 = *(_QWORD *)(v2 + 32);
    v49 = *(_QWORD *)(v2 + 40);
    v51 = __OFADD__(v49, v50);
    v52 = v49 + v50;
    if (v51)
    {
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }
    if (v52 < v49)
    {
LABEL_174:
      __break(1u);
      goto LABEL_175;
    }
    v53 = *(_QWORD *)(v2 + 56);
    if (v53 < v49)
    {
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }
    if (v53 >= v52)
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    if (__OFSUB__(v53, v49))
      goto LABEL_177;
    v54 = *(_QWORD *)(v2 + 24);
    *(_DWORD *)(v54 + 4 * (v53 - v49)) = v15;
    if ((*(_BYTE *)(v2 + 52) & 1) != 0)
    {
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    v55 = *(_DWORD *)(v2 + 12);
    v56 = *(_DWORD *)(v2 + 48);
    v57 = v53 + 2;
    while (1)
    {
      v58 = v57 - 1;
      if (v56 != v55)
        break;
      if ((v3 & 0x100000000) != 0)
      {
        LODWORD(v3) = 0;
        *(_DWORD *)(v2 + 48) = 0;
        *(_BYTE *)(v2 + 52) = 1;
        *(_QWORD *)(v2 + 56) = v58;
        if ((v7 & 0x100000000) != 0)
          return 4;
        goto LABEL_109;
      }
      v59 = 0;
LABEL_99:
      if (v58 < v49 || v58 >= v52)
      {
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
        goto LABEL_166;
      }
      v51 = __OFSUB__(v58, v49);
      v60 = v58 - v49;
      if (v51)
        goto LABEL_161;
      *(_DWORD *)(v54 + 4 * v60) = 0;
      ++v57;
      v61 = v56 == v55;
      v56 = v59;
      if (v61)
        goto LABEL_189;
    }
    v59 = v56 + 1;
    if (v56 == -1)
      goto LABEL_164;
    if ((v3 & 0x100000000) != 0 || v59 != (_DWORD)v3)
      goto LABEL_99;
    *(_DWORD *)(v2 + 48) = v3;
    *(_BYTE *)(v2 + 52) = 0;
    *(_QWORD *)(v2 + 56) = v58;
    if ((v7 & 0x100000000) == 0 && (_DWORD)v3 == (_DWORD)v7)
    {
LABEL_126:
      v5 = *(_BYTE *)(v2 + 172);
      v4 = *(_DWORD *)(v2 + 168);
      if ((v5 & 1) == 0 && v3 >= v4)
        goto LABEL_7;
      sub_1B0952CFC((uint64_t)v78);
      if ((v82 & 1) == 0)
        continue;
      goto LABEL_6;
    }
    break;
  }
LABEL_109:
  if (v58 < v49 || v58 >= v52)
    goto LABEL_178;
  v51 = __OFSUB__(v58, v49);
  v62 = v58 - v49;
  if (v51)
    goto LABEL_179;
  *(_DWORD *)(v54 + 4 * v62) = v43;
  if (v56 != v55)
  {
    do
    {
      if ((_DWORD)v3 == v55)
      {
        if ((v7 & 0x100000000) != 0)
        {
          *(_DWORD *)(v2 + 48) = 0;
          *(_BYTE *)(v2 + 52) = 1;
          *(_QWORD *)(v2 + 56) = v57;
          return 4;
        }
        v63 = 0;
      }
      else
      {
        v63 = v3 + 1;
        if ((_DWORD)v3 == -1)
          goto LABEL_165;
        if ((v7 & 0x100000000) == 0 && v63 == (_DWORD)v7)
        {
          *(_DWORD *)(v2 + 48) = v7;
          *(_BYTE *)(v2 + 52) = 0;
          LODWORD(v3) = v7;
          *(_QWORD *)(v2 + 56) = v57;
          goto LABEL_126;
        }
      }
      if (v57 < v49 || v57 >= v52)
        goto LABEL_162;
      if (__OFSUB__(v57, v49))
        goto LABEL_163;
      *(_DWORD *)(v54 + 4 * (v57 - v49)) = 0;
      ++v57;
      v61 = (_DWORD)v3 == v55;
      LODWORD(v3) = v63;
    }
    while (!v61);
  }
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
  return result;
}

FontParser::CharacterMapQueryStatus_optional __swiftcall CharacterMapQuery.mapPartial()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  _QWORD v29[3];
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = v0;
  v33 = *(_QWORD *)(v0 + 64);
  v35 = *(_QWORD *)(v33 + 24);
  v2 = *(_QWORD *)(v35 + 16);
  v50 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v50 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = v2;
  v43 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v43);
  v44 = (char *)v29 - v5;
  v49 = v3;
  v48 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v32 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v47 = (char *)v29 - v8;
  v30 = sub_1B0A1D690();
  v29[2] = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v38 = (char *)v29 - v9;
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10);
  v31 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v46 = (char *)v29 - v13;
  MEMORY[0x1E0C80A78](v14);
  v40 = (char *)v29 - v15;
  v16 = *(_QWORD *)(v1 + 40);
  v51 = *(_QWORD *)(v1 + 16);
  v17 = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for IndexedUnicode(0, v17, v18, v19);
  v36 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v42 = (char *)v29 - v21;
  v41 = v22;
  v23 = sub_1B0A1D690();
  MEMORY[0x1E0C80A78](v23);
  v37 = (char *)v29 - v24;
  v25 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v52 = v16;
  v27 = swift_getAssociatedConformanceWitness();
  v53 = v25;
  v54 = v17;
  v55 = AssociatedConformanceWitness;
  v56 = v27;
  type metadata accessor for UnicodeVariationIterator();
}

void sub_1B0951270()
{
  _QWORD *v0;
  _QWORD *v1;
  char **v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  char *v44;
  char v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char v51;
  char v52[16];
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if (v0[9] != v0[24])
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v1 = v0;
  v2 = (char **)(v0 + 23);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = v0[23];
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_1B0902384(0, *(_QWORD *)(v4 + 16));
  }
  else
  {
    *v2 = (char *)sub_1B0954218(0, *(_QWORD *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v5 = v1[3];
  v6 = v1[4];
  v7 = v6 + v5;
  if (__OFADD__(v6, v5))
    goto LABEL_45;
  v8 = v1[9];
  if (v7 < v8 || v7 < v6)
    goto LABEL_46;
  if (v8 < v6)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v9 = (void (*)(uint64_t *__return_ptr, uint64_t *))v1[11];
  v11 = v1[1];
  v10 = v1[2];
  v56 = v1[9];
  v57 = v6 + v5;
  v58 = v11;
  v59 = v10;
  v60 = v5;
  v61 = v6;
  swift_retain();
  swift_retain();
  v9(&v67, &v56);
  swift_release();
  swift_release();
  v13 = v67;
  v12 = v68;
  v15 = v69;
  v14 = v70;
  v16 = v71;
  v17 = v72;
  v73 = v67;
  v74 = v68;
  v75 = v69;
  v76 = v70;
  v77 = v71;
  v78 = v72;
  if (v67 == v68)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = v67;
  }
  else
  {
    v19 = v67 + 1;
    if (__OFADD__(v67, 1))
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (v19 < v67)
    {
LABEL_49:
      __break(1u);
      return;
    }
    v20 = sub_1B09545D0(v67);
    v18 = v13;
    v21 = v13 + 1;
  }
  v56 = v13;
  v57 = v12;
  v58 = v15;
  v59 = v14;
  v60 = v16;
  v61 = v17;
  v62 = v21;
  v63 = v18;
  v64 = v19;
  v65 = v20;
  v66 = v13 == v12;
  if (*((_QWORD *)*v2 + 2) >= *((_QWORD *)*v2 + 3) >> 1)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    do
    {
      sub_1B0952B10((uint64_t)v52);
      if ((v55 & 1) != 0)
        break;
      v22 = v54;
      v1[24] = v53;
      v23 = (char *)v1[23];
      v24 = swift_isUniquelyReferenced_nonNull_native();
      v1[23] = v23;
      if ((v24 & 1) == 0)
      {
        v23 = sub_1B08B6C74(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
        *v2 = v23;
      }
      v26 = *((_QWORD *)v23 + 2);
      v25 = *((_QWORD *)v23 + 3);
      v27 = v26 + 1;
      if (v26 >= v25 >> 1)
        v23 = sub_1B08B6C74((char *)(v25 > 1), v26 + 1, 1, v23);
      *((_QWORD *)v23 + 2) = v27;
      v28 = &v23[8 * v26];
      *((_DWORD *)v28 + 8) = v22 & 0xFF00 | (v22 << 16) | BYTE2(v22);
      *((_DWORD *)v28 + 9) = 0;
      *v2 = v23;
    }
    while (v27 < *((_QWORD *)v23 + 3) >> 1);
  }
  sub_1B0949F78(v2);
  v29 = *((_QWORD *)*v2 + 2);
  if (v29)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v49 = v1 + 13;
    v50 = v1;
    v33 = 0xFFFFFFFFLL;
    v51 = 1;
    v34 = 32;
    while (v31 < *((_QWORD *)*v2 + 2))
    {
      v35 = *(unsigned int *)&(*v2)[v34];
      if ((_DWORD)v35 == (_DWORD)v33)
      {
        v35 = v33;
      }
      else
      {
        v36 = v2;
        v37 = v50[16];
        v38 = v50[17];
        __swift_project_boxed_opaque_existential_1(v49, v37);
        v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 48))(v35, v30, v51 & 1, v37, v38);
        if ((v41 & 1) != 0)
        {
          v2 = v36;
        }
        else
        {
          v42 = v39;
          v43 = v40;
          v2 = v36;
          v44 = *v36;
          v45 = swift_isUniquelyReferenced_nonNull_native();
          *v36 = v44;
          if ((v45 & 1) != 0)
          {
            if ((v32 & 0x8000000000000000) != 0)
              goto LABEL_37;
          }
          else
          {
            v44 = sub_1B0953B10((uint64_t)v44);
            if ((v32 & 0x8000000000000000) != 0)
            {
LABEL_37:
              __break(1u);
LABEL_38:
              v47 = *((_QWORD *)*v2 + 2);
              v48 = v47 - v32;
              if (!__OFSUB__(v47, v32))
                goto LABEL_39;
              __break(1u);
              break;
            }
          }
          if (v32 >= *((_QWORD *)v44 + 2))
            goto LABEL_43;
          v51 = 0;
          v46 = &v44[8 * v32];
          *((_DWORD *)v46 + 8) = v35;
          *((_DWORD *)v46 + 9) = v42;
          *v36 = v44;
          ++v32;
          v30 = v43;
        }
      }
      ++v31;
      v34 += 8;
      v33 = v35;
      if (v29 == v31)
        goto LABEL_38;
    }
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v48 = 0;
LABEL_39:
  sub_1B09533B8(v48);
  swift_release();
  swift_release();
}

void sub_1B0951634()
{
  _QWORD *v0;
  char **v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  __int16 v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;
  int v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  _QWORD *v62;
  _QWORD *v63;
  char **v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;

  if (v0[9] != v0[24])
  {
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v63 = v0;
  v1 = (char **)(v0 + 23);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3 = v0[23];
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_1B0902384(0, *(_QWORD *)(v3 + 16));
  }
  else
  {
    *v1 = (char *)sub_1B0954218(0, *(_QWORD *)(v3 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  v4 = v63[3];
  v5 = v63[4];
  v6 = v5 + v4;
  if (__OFADD__(v5, v4))
    goto LABEL_87;
  v7 = v63[9];
  v8 = __OFSUB__(v7, v5);
  v9 = v7 - v5;
  if (v8)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v10 = v6 - v7;
  if (__OFSUB__(v6, v7))
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v8 = __OFADD__(v9, v10);
  v11 = v9 + v10;
  if (v8)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v6 < v7 || (v12 = v11 - v9, v11 < v9))
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v13 = (void (*)(uint64_t *__return_ptr, uint64_t *))v63[11];
  v14 = v63[2];
  v15 = v14 + 2 * v9;
  if (!v14)
    v15 = 0;
  v65 = v63[1];
  *(_QWORD *)&v66 = v15;
  *((_QWORD *)&v66 + 1) = v12;
  v67 = v7;
  swift_retain();
  swift_retain();
  v13(&v69, &v65);
  swift_release();
  swift_release();
  v16 = v71;
  v65 = v69;
  v66 = v70;
  v67 = v71;
  v68 = v71;
  sub_1B0937FD8();
  v18 = v68;
  if ((v17 & 0x100000000) != 0)
  {
    v19 = 0;
    v20 = 0;
LABEL_17:
    v64 = v1;
    v21 = *v1;
    if (*((_QWORD *)*v1 + 2) < *((_QWORD *)*v1 + 3) >> 1)
    {
      v22 = HIDWORD(v17) & 1;
      v59 = v66;
      v23 = v67;
      v24 = v67 + *((_QWORD *)&v66 + 1);
      v25 = __OFADD__(v67, *((_QWORD *)&v66 + 1));
      v61 = v25;
      swift_retain();
      v26 = v63;
      v60 = v24;
      while (1)
      {
        if ((v22 & 1) != 0)
          goto LABEL_61;
        if (v61)
          goto LABEL_81;
        if (v24 < v23)
          goto LABEL_82;
        if (v18 < v23 || v18 >= v24)
          goto LABEL_34;
        if (__OFSUB__(v18, v23))
          goto LABEL_84;
        v27 = *(unsigned __int16 *)(v59 + 2 * (v18 - v23));
        if ((v27 & 0xFC00) == 0xDC00)
        {
LABEL_34:
          if (HIBYTE(v20))
            goto LABEL_80;
          v27 = 0;
          LOBYTE(v22) = 1;
          v31 = v19;
          v19 = 0;
          goto LABEL_36;
        }
        v28 = v18 + 1;
        if ((v27 & 0xFC00) == 0xD800)
        {
          if (v28 >= v24)
            goto LABEL_34;
          v8 = __OFSUB__(v28, v23);
          v29 = v28 - v23;
          if (v8)
            goto LABEL_92;
          v30 = *(_WORD *)(v59 + 2 * v29);
          if ((v30 & 0xFC00) != 0xDC00)
            goto LABEL_34;
          v18 += 2;
          v27 = (v30 & 0x3FF | ((v27 & 0x3FF) << 10)) + 0x10000;
        }
        else
        {
          ++v18;
        }
        if (HIBYTE(v20))
          goto LABEL_85;
        if (v27 >> 4 == 4064 || v27 - 917760 <= 0xEF)
        {
          v27 = 0;
          v19 = 0;
          LOBYTE(v22) = 1;
          if (v18 >= v23 && v18 < v24)
          {
            if (__OFSUB__(v18, v23))
              goto LABEL_94;
            v27 = *(unsigned __int16 *)(v59 + 2 * (v18 - v23));
            if ((v27 & 0xFC00) != 0xDC00)
            {
              v19 = v18 + 1;
              if ((v27 & 0xFC00) != 0xD800)
              {
                LOBYTE(v22) = 0;
                goto LABEL_59;
              }
              if (v19 < v24)
              {
                if (__OFSUB__(v19, v23))
                  goto LABEL_95;
                v37 = *(_WORD *)(v59 + 2 * (v19 - v23));
                if ((v37 & 0xFC00) == 0xDC00)
                {
                  LOBYTE(v22) = 0;
                  v19 = v18 + 2;
                  v27 = (v37 & 0x3FF | ((v27 & 0x3FF) << 10)) + 0x10000;
LABEL_59:
                  v31 = v18;
                  v18 = v19;
                  goto LABEL_36;
                }
              }
            }
            v19 = 0;
            v27 = 0;
            LOBYTE(v22) = 1;
          }
          v31 = v18;
        }
        else
        {
          LOBYTE(v22) = 0;
          v31 = v19;
          v19 = v18;
        }
LABEL_36:
        v63[24] = v31;
        v32 = swift_isUniquelyReferenced_nonNull_native();
        v63[23] = v21;
        if ((v32 & 1) == 0)
        {
          v21 = sub_1B08B6C74(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
          *v64 = v21;
        }
        v34 = *((_QWORD *)v21 + 2);
        v33 = *((_QWORD *)v21 + 3);
        v35 = v34 + 1;
        if (v34 >= v33 >> 1)
          v21 = sub_1B08B6C74((char *)(v33 > 1), v34 + 1, 1, v21);
        *((_QWORD *)v21 + 2) = v35;
        v36 = &v21[8 * v34];
        *((_DWORD *)v36 + 8) = v20 & 0xFFFFFF;
        *((_DWORD *)v36 + 9) = 0;
        *v64 = v21;
        v20 = v27;
        v24 = v60;
        if (v35 >= *((_QWORD *)v21 + 3) >> 1)
          goto LABEL_61;
      }
    }
    swift_retain();
    v26 = v63;
LABEL_61:
    v38 = v64;
    sub_1B0949F78(v64);
    v39 = *((_QWORD *)*v64 + 2);
    if (!v39)
    {
      v58 = 0;
LABEL_76:
      sub_1B09533B8(v58);
      swift_release();
      swift_release();
      return;
    }
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v62 = v26 + 13;
    v43 = 0xFFFFFFFFLL;
    v44 = 1;
    v45 = 32;
    while (v41 < *((_QWORD *)*v38 + 2))
    {
      v46 = *(unsigned int *)&(*v38)[v45];
      if ((_DWORD)v46 == (_DWORD)v43)
      {
        v46 = v43;
      }
      else
      {
        v47 = v63[16];
        v48 = v63[17];
        __swift_project_boxed_opaque_existential_1(v62, v47);
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 48))(v46, v40, v44 & 1, v47, v48);
        if ((v51 & 1) != 0)
        {
          v38 = v64;
        }
        else
        {
          v52 = v49;
          v53 = v50;
          v38 = v64;
          v54 = *v64;
          v55 = swift_isUniquelyReferenced_nonNull_native();
          *v64 = v54;
          if ((v55 & 1) != 0)
          {
            if ((v42 & 0x8000000000000000) != 0)
              goto LABEL_74;
          }
          else
          {
            v54 = sub_1B0953B10((uint64_t)v54);
            if ((v42 & 0x8000000000000000) != 0)
            {
LABEL_74:
              __break(1u);
LABEL_75:
              v57 = *((_QWORD *)*v38 + 2);
              v58 = v57 - v42;
              if (!__OFSUB__(v57, v42))
                goto LABEL_76;
              __break(1u);
              break;
            }
          }
          if (v42 >= *((_QWORD *)v54 + 2))
            goto LABEL_83;
          v44 = 0;
          v56 = &v54[8 * v42];
          *((_DWORD *)v56 + 8) = v46;
          *((_DWORD *)v56 + 9) = v52;
          *v64 = v54;
          ++v42;
          v40 = v53;
        }
      }
      ++v41;
      v45 += 8;
      v43 = v46;
      if (v39 == v41)
        goto LABEL_75;
    }
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v68 >= v16)
  {
    v19 = v68;
    v20 = v17;
    goto LABEL_17;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
}

void sub_1B0951BB0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, unsigned int *);
  char v3;
  char *v4;
  char **v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  char *v40;
  char v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char **v47;
  char v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int8 v62;
  uint64_t v63;

  v1 = v0;
  if ((*(_BYTE *)(v0 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 172) & 1) != 0)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_4:
        sub_1B0902384(0, *(_QWORD *)(*(_QWORD *)(v0 + 160) + 16));
LABEL_9:
        v2 = *(void (**)(uint64_t *__return_ptr, unsigned int *))(v0 + 64);
        v3 = *(_BYTE *)(v0 + 52);
        v49 = *(_DWORD *)(v0 + 48);
        v50 = v3;
        v51 = 0;
        v52 = 1;
        v53 = *(_QWORD *)(v0 + 8);
        swift_retain();
        v2(&v60, &v49);
        swift_release();
        LOBYTE(v49) = BYTE4(v60);
        sub_1B09534F8(v60 | ((unint64_t)BYTE4(v60) << 32), v61 | ((unint64_t)v62 << 32), v63, v60 | ((unint64_t)BYTE4(v60) << 32), (uint64_t)&v49);
        v5 = (char **)(v0 + 160);
        v4 = *(char **)(v0 + 160);
        v47 = (char **)(v1 + 160);
        if (*((_QWORD *)v4 + 2) < *((_QWORD *)v4 + 3) >> 1)
        {
          while (1)
          {
            if ((v59 & 1) != 0)
              goto LABEL_56;
            v6 = v57;
            v7 = BYTE4(v57);
            v8 = v58;
            v9 = v52;
            if (v55)
            {
              if ((v52 & 1) == 0)
                goto LABEL_85;
LABEL_20:
              v56 = 0;
              v57 = 0;
              v58 = 0;
              v59 = 1;
              v12 = v6;
              v48 = v7 & 1;
              if (HIBYTE(v8))
                goto LABEL_75;
              goto LABEL_21;
            }
            v10 = v54;
            if (v54 == v51)
              v11 = v52;
            else
              v11 = 1;
            if ((v11 & 1) == 0)
              goto LABEL_20;
            if (v54 == HIDWORD(v53))
            {
              v12 = 0;
              v54 = 0;
              v55 = 1;
            }
            else
            {
              v12 = v54 + 1;
              if (v54 == -1)
                goto LABEL_79;
              ++v54;
              v55 = 0;
            }
            if ((v50 & 1) != 0)
              goto LABEL_86;
            if (v10 < v49)
              goto LABEL_77;
            if (v10 < v51)
              v18 = 1;
            else
              v18 = v52;
            if (v18 != 1)
              goto LABEL_80;
            v19 = v12;
            v56 = v10;
            v57 = v12 | ((unint64_t)((_DWORD)v10 == HIDWORD(v53)) << 32);
            v58 = v10;
            v59 = 0;
            if (HIBYTE(v8))
              goto LABEL_78;
            if (v10 >> 4 == 4064 || (v10 - 917760) < 0xF0)
              break;
            v48 = v7 & 1;
            v12 = v6;
LABEL_21:
            *(_DWORD *)(v1 + 168) = v12;
            *(_BYTE *)(v1 + 172) = v48 & 1;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v1 + 160) = v4;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v4 = sub_1B08B6C74(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
              *v47 = v4;
            }
            v15 = *((_QWORD *)v4 + 2);
            v14 = *((_QWORD *)v4 + 3);
            v16 = v15 + 1;
            if (v15 >= v14 >> 1)
              v4 = sub_1B08B6C74((char *)(v14 > 1), v15 + 1, 1, v4);
            *((_QWORD *)v4 + 2) = v16;
            v17 = &v4[8 * v15];
            *((_DWORD *)v17 + 8) = v8;
            *((_DWORD *)v17 + 9) = 0;
            v5 = (char **)(v1 + 160);
            *v47 = v4;
            if (v16 >= *((_QWORD *)v4 + 3) >> 1)
              goto LABEL_56;
          }
          if ((_DWORD)v10 == HIDWORD(v53))
          {
            if (!v52)
              goto LABEL_88;
          }
          else
          {
            if (v12 == v51)
              v20 = v52;
            else
              v20 = 1;
            if ((v20 & 1) != 0)
            {
              if (v12 == HIDWORD(v53))
              {
                v21 = 0;
              }
              else
              {
                v21 = v12 + 1;
                if (v12 == -1)
                  goto LABEL_83;
              }
              v54 = v21;
              v55 = v12 == HIDWORD(v53);
              if (v12 < v49)
                goto LABEL_82;
              if (v12 < v51)
                v9 = 1;
              if (v9 != 1)
                goto LABEL_84;
              v24 = 0;
              v22 = v21 | ((unint64_t)(v12 == HIDWORD(v53)) << 32);
              v23 = v12;
              goto LABEL_55;
            }
          }
          v19 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 1;
LABEL_55:
          v56 = v19;
          v57 = v22;
          v58 = v23;
          v59 = v24;
          v48 = (_DWORD)v10 == HIDWORD(v53);
          goto LABEL_21;
        }
LABEL_56:
        sub_1B0949F78(v5);
        v25 = *((_QWORD *)*v5 + 2);
        if (!v25)
        {
          v44 = 0;
LABEL_71:
          sub_1B09533B8(v44);
          return;
        }
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v45 = (_QWORD *)(v1 + 80);
        v46 = v1;
        v29 = 0xFFFFFFFFLL;
        v30 = 1;
        v31 = 32;
        while (v27 < *((_QWORD *)*v5 + 2))
        {
          v32 = *(unsigned int *)&(*v5)[v31];
          if ((_DWORD)v32 == (_DWORD)v29)
          {
            v32 = v29;
          }
          else
          {
            v33 = *(_QWORD *)(v46 + 104);
            v34 = *(_QWORD *)(v46 + 112);
            __swift_project_boxed_opaque_existential_1(v45, v33);
            v35 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 48))(v32, v26, v30 & 1, v33, v34);
            if ((v37 & 1) != 0)
            {
              v5 = v47;
            }
            else
            {
              v38 = v35;
              v39 = v36;
              v5 = v47;
              v40 = *v47;
              v41 = swift_isUniquelyReferenced_nonNull_native();
              *v47 = v40;
              if ((v41 & 1) != 0)
              {
                if ((v28 & 0x8000000000000000) != 0)
                  goto LABEL_69;
              }
              else
              {
                v40 = sub_1B0953B10((uint64_t)v40);
                if ((v28 & 0x8000000000000000) != 0)
                {
LABEL_69:
                  __break(1u);
LABEL_70:
                  v43 = *((_QWORD *)*v5 + 2);
                  v44 = v43 - v28;
                  if (!__OFSUB__(v43, v28))
                    goto LABEL_71;
                  __break(1u);
                  break;
                }
              }
              if (v28 >= *((_QWORD *)v40 + 2))
                goto LABEL_76;
              v30 = 0;
              v42 = &v40[8 * v28];
              *((_DWORD *)v42 + 8) = v32;
              *((_DWORD *)v42 + 9) = v38;
              *v47 = v40;
              ++v28;
              v26 = v39;
            }
          }
          ++v27;
          v31 += 8;
          v29 = v32;
          if (v25 == v27)
            goto LABEL_70;
        }
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
LABEL_8:
      *(_QWORD *)(v0 + 160) = sub_1B0954218(0, *(_QWORD *)(*(_QWORD *)(v0 + 160) + 24) >> 1);
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(v0 + 172) & 1) == 0)
  {
    if (*(_DWORD *)(v0 + 48) != *(_DWORD *)(v0 + 168))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_4;
    goto LABEL_8;
  }
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
}

Swift::Void __swiftcall CharacterMapQuery.fillCodePointMap()()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedUnicode(255, AssociatedTypeWitness, v1, v2);
  v4 = sub_1B0A1D690();
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v3);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for UnicodeVariationSequence();
}

uint64_t UnicodeVariationSequence.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

void UnicodeVariationSequence.makeIterator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedTypeWitness;
  double v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v5, v1, v2, v7);
  sub_1B0A1D3F0();
  swift_getAssociatedConformanceWitness();
  UnicodeVariationIterator.init(_:)();
}

void sub_1B09529A8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)(v1 + 40);
  if ((*(_BYTE *)(v1 + 60) & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 21) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 29) = 1;
    return;
  }
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(unsigned int *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 32);
  sub_1B0937FD8();
  if ((v7 & 0x100000000) != 0)
  {
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
    *(_DWORD *)(v1 + 56) = 0;
    *(_BYTE *)(v1 + 60) = 1;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v1 + 32);
  if (v8 < v6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_QWORD *)(v1 + 40) = v6;
  *(_QWORD *)(v1 + 48) = v8;
  *(_DWORD *)(v1 + 56) = v7;
  *(_BYTE *)(v1 + 60) = 0;
  v9 = sub_1B0954924(v5, v7);
  if ((v9 & 0x10000000000) != 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)a1 = v3;
    if (!BYTE3(v5))
    {
      *(_BYTE *)(a1 + 24) = BYTE2(v5);
      *(_BYTE *)(a1 + 25) = BYTE1(v5);
      *(_BYTE *)(a1 + 26) = v5;
      *(_WORD *)(a1 + 27) = 256;
LABEL_14:
      *(_BYTE *)(a1 + 29) = 0;
      return;
    }
    __break(1u);
    goto LABEL_16;
  }
  v10 = v9;
  v11 = *(_QWORD *)(v1 + 32);
  sub_1B0937FD8();
  if ((v12 & 0x100000000) != 0)
  {
    v11 = 0;
    v13 = 0;
    v14 = 0;
LABEL_13:
    *(_QWORD *)(v1 + 40) = v11;
    *(_QWORD *)(v1 + 48) = v13;
    *(_DWORD *)(v1 + 56) = v14;
    *(_BYTE *)(v1 + 60) = BYTE4(v12) & 1;
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v8;
    *(_WORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 26) = BYTE2(v10);
    *(_BYTE *)(a1 + 27) = BYTE3(v10);
    *(_BYTE *)(a1 + 28) = BYTE4(v10) & 1;
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v1 + 32);
  if (v13 >= v11)
  {
    v14 = v12;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
}

void sub_1B0952B10(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)(v1 + 56);
  if ((*(_BYTE *)(v1 + 76) & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 21) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 29) = 1;
    return;
  }
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(unsigned int *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 8);
  if (v6 == v7)
  {
    *(_QWORD *)(v1 + 56) = 0;
    *(_QWORD *)(v1 + 64) = 0;
    *(_DWORD *)(v1 + 72) = 0;
    *(_BYTE *)(v1 + 76) = 1;
  }
  else
  {
    v8 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    *(_QWORD *)(v1 + 48) = v8;
    if (v8 < v6)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v9 = sub_1B09545D0(v6);
    *(_QWORD *)(v1 + 56) = v6;
    *(_QWORD *)(v1 + 64) = v8;
    *(_DWORD *)(v1 + 72) = v9;
    *(_BYTE *)(v1 + 76) = 0;
    v10 = sub_1B0954924(v5, v9);
    if ((v10 & 0x10000000000) == 0)
    {
      v11 = v10;
      if (v8 == v7)
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
      }
      else
      {
        v13 = v6 + 2;
        if (__OFADD__(v8, 1))
        {
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        *(_QWORD *)(v1 + 48) = v13;
        if (v13 < v8)
        {
LABEL_22:
          __break(1u);
          return;
        }
        v14 = sub_1B09545D0(v6 + 1);
        v12 = v6 + 1;
      }
      *(_QWORD *)(v1 + 56) = v12;
      *(_QWORD *)(v1 + 64) = v13;
      *(_DWORD *)(v1 + 72) = v14;
      *(_BYTE *)(v1 + 76) = v8 == v7;
      *(_QWORD *)a1 = v3;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v8;
      *(_WORD *)(a1 + 24) = v11;
      *(_BYTE *)(a1 + 26) = BYTE2(v11);
      *(_BYTE *)(a1 + 27) = BYTE3(v11);
      *(_BYTE *)(a1 + 28) = BYTE4(v11) & 1;
      goto LABEL_16;
    }
  }
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)a1 = v3;
  if (BYTE3(v5))
  {
    __break(1u);
    goto LABEL_19;
  }
  *(_BYTE *)(a1 + 24) = BYTE2(v5);
  *(_BYTE *)(a1 + 25) = BYTE1(v5);
  *(_BYTE *)(a1 + 26) = v5;
  *(_WORD *)(a1 + 27) = 256;
LABEL_16:
  *(_BYTE *)(a1 + 29) = 0;
}

void sub_1B0952CFC(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  char v4;
  int v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  char v20;

  if ((*(_BYTE *)(v1 + 52) & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_WORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 26) = 1;
    return;
  }
  v3 = *(_DWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 36);
  v5 = *(_DWORD *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 44);
  v7 = *(unsigned int *)(v1 + 48);
  v8 = sub_1B08E11EC();
  *(_QWORD *)(v1 + 32) = v8;
  *(_QWORD *)(v1 + 40) = v9;
  *(_DWORD *)(v1 + 48) = v10;
  *(_BYTE *)(v1 + 52) = BYTE4(v10) & 1;
  if ((v10 & 0x100000000) == 0)
  {
    v11 = v8;
    v12 = v9;
    v13 = sub_1B0954924(v7, v10);
    if ((v13 & 0x10000000000) == 0)
    {
      v14 = v13;
      v15 = v13 >> 8;
      v16 = v13 >> 16;
      v17 = v13 >> 24;
      *(_QWORD *)(v1 + 32) = sub_1B08E11EC();
      *(_QWORD *)(v1 + 40) = v18;
      *(_DWORD *)(v1 + 48) = v19;
      *(_BYTE *)(v1 + 52) = v20 & 1;
      *(_DWORD *)a1 = v3;
      *(_BYTE *)(a1 + 4) = v4 & 1;
      *(_DWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 12) = BYTE4(v11) & 1;
      *(_DWORD *)(a1 + 16) = v12;
      *(_BYTE *)(a1 + 20) = BYTE4(v12) & 1;
      *(_BYTE *)(a1 + 21) = v14;
      *(_BYTE *)(a1 + 22) = v15;
      *(_BYTE *)(a1 + 23) = v16;
      *(_BYTE *)(a1 + 24) = v17;
      *(_BYTE *)(a1 + 25) = BYTE4(v14) & 1;
LABEL_8:
      *(_BYTE *)(a1 + 26) = 0;
      return;
    }
  }
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = v4 & 1;
  *(_DWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 20) = v6 & 1;
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = v6 & 1;
  if (!BYTE3(v7))
  {
    *(_BYTE *)(a1 + 21) = BYTE2(v7);
    *(_BYTE *)(a1 + 22) = BYTE1(v7);
    *(_BYTE *)(a1 + 23) = v7;
    *(_WORD *)(a1 + 24) = 256;
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t UnicodeVariationIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, double);
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  void (*v36)(uint64_t, char *, uint64_t);
  char *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  void (*v71)(char *, char *, uint64_t);
  unsigned int v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;

  v3 = v2;
  v85 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  v79 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v75 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v81 = (char *)v70 - v8;
  MEMORY[0x1E0C80A78](v9);
  v80 = (char *)v70 - v10;
  v11 = sub_1B0A1D678();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = sub_1B0A1D690();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v78 = (char *)v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v77 = (char *)v70 - v17;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v70 - v19;
  v83 = *(_QWORD *)(v11 - 8);
  v84 = v11;
  MEMORY[0x1E0C80A78](v21);
  v76 = (char *)v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v70 - v25;
  v27 = *(int *)(a1 + 52);
  v82 = v3;
  v28 = v3 + v27;
  v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16);
  v29(v20, v3 + v27, v13, v24);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
  if (v30(v20, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    v33 = type metadata accessor for IndexedUnicode(0, v5, v31, v32);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v85, 1, 1, v33);
  }
  v73 = v26;
  v74 = v5;
  v72 = *(_DWORD *)&v20[*(int *)(TupleTypeMetadata2 + 48)];
  v71 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
  v71(v26, v20, v84);
  v35 = v77;
  v70[1] = *(_QWORD *)(a1 + 32);
  sub_1B0A1D714();
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 40);
  v36(v28, v35, v13);
  v37 = v78;
  ((void (*)(char *, uint64_t, uint64_t))v29)(v78, v28, v13);
  v38 = v30(v37, 1, TupleTypeMetadata2);
  v39 = v83;
  if (v38 == 1)
  {
    v40 = v72;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v37, v13);
    v42 = v84;
    v41 = v85;
LABEL_8:
    v62 = v74;
    v63 = v73;
    v64 = (uint64_t)v80;
    v65 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
    v65(v80, v73, v74);
    v66 = &v63[*(int *)(v42 + 36)];
    v67 = (uint64_t)v81;
    v65(v81, v66, v62);
    sub_1B09538A4(v64, v67, v40, v62, v41);
    v59 = type metadata accessor for IndexedUnicode(0, v62, v68, v69);
    v60 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
    v61 = v41;
    return v60(v61, 0, 1, v59);
  }
  v43 = *(unsigned int *)&v37[*(int *)(TupleTypeMetadata2 + 48)];
  v44 = v76;
  v42 = v84;
  v71(v76, v37, v84);
  v86 = 0;
  v45 = v72;
  v46 = sub_1B0954924(v72, v43);
  if ((v46 & 0x10000000000) != 0)
  {
    v40 = v45;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v44, v42);
    v41 = v85;
    goto LABEL_8;
  }
  v47 = v46;
  sub_1B0A1D714();
  v36(v28, v35, v13);
  v48 = v79;
  v49 = (uint64_t)v80;
  v51 = v73;
  v50 = v74;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v80, v73, v74);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v51, v42);
  v52 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v53 = (uint64_t)v81;
  v52(v81, v44, v50);
  v54 = &v44[*(int *)(v42 + 36)];
  v55 = (uint64_t)v75;
  v52(v75, v54, v50);
  v56 = v85;
  sub_1B0953968(v49, v53, v55, v47 | ((HIDWORD(v47) & 1) << 32), v50, v85);
  v59 = type metadata accessor for IndexedUnicode(0, v50, v57, v58);
  v60 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
  v61 = v56;
  return v60(v61, 0, 1, v59);
}

unint64_t IndexedUnicode.variationSelector.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;

  v2 = v1 + *(int *)(a1 + 36);
  v3 = *(unsigned __int8 *)(v2 + 3);
  v4 = *(_BYTE *)(v2 + 4);
  if (v3 <= 0xF)
    v5 = v3 | 0xFE00;
  else
    v5 = (v3 - 16) | 0xE0100;
  if ((v4 & 1) != 0)
    v5 = 0;
  return v5 | ((unint64_t)v4 << 32);
}

uint64_t IndexedUnicode.codePoint.getter(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 36)) << 16) | (*(unsigned __int8 *)(v1 + *(int *)(a1 + 36) + 1) << 8) | *(unsigned __int8 *)(v1 + *(int *)(a1 + 36) + 2);
}

Swift::Int_optional __swiftcall CharacterMapQuery.mapCodePoint(_:)(Swift::UInt32 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  Swift::Bool v6;
  unint64_t v7;
  Swift::Int_optional result;

  v4 = *(_QWORD *)(v2 + *(int *)(v1 + 104));
  v5 = sub_1B0929368(a1, v4);
  v7 = *(_QWORD *)(v4 + 16);
  if (v5 == v7)
    goto LABEL_5;
  if (v5 >= v7)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_DWORD *)(v4 + 32 + 8 * v5) != a1)
  {
LABEL_5:
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v5 = *(unsigned int *)(v4 + 32 + 8 * v5 + 4);
  }
LABEL_7:
  result.value = v5;
  result.is_nil = v6;
  return result;
}

unint64_t sub_1B09533B8(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return sub_1B0902384(result, v2);
    }
    __break(1u);
  }
  return result;
}

uint64_t IndexedUTF16Sequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = a4;
  return swift_retain();
}

uint64_t sub_1B09533F0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = sub_1B09380DC(*v0, v0[1], v0[2], v0[3]);
  swift_release();
  return v1;
}

_QWORD *sub_1B0953428(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1B0939658(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

void IndexedUTF16Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1B0937FD8();
  if ((v2 & 0x100000000) == 0 && *(_QWORD *)(v0 + 32) < v1)
    __break(1u);
}

void sub_1B0953494(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(v1 + 32);
  sub_1B0937FD8();
  if ((v4 & 0x100000000) != 0)
  {
    v3 = 0;
    v5 = 0;
    v6 = 0;
LABEL_5:
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 20) = BYTE4(v4) & 1;
    return;
  }
  v5 = *(_QWORD *)(v1 + 32);
  if (v5 >= v3)
  {
    v6 = v4;
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_1B09534F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  char v9;
  unsigned int v10;

  if ((a4 & 0x100000000) != 0)
  {
    if ((a2 & 0x100000000) != 0)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v9 = 1;
      v10 = a4;
      v8 = 1;
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  if ((a2 & 0x100000000) == 0 && (_DWORD)a4 == (_DWORD)a2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 1;
    v10 = a2;
LABEL_15:
    *(_DWORD *)a5 = result;
    *(_BYTE *)(a5 + 4) = BYTE4(result) & 1;
    *(_DWORD *)(a5 + 8) = a2;
    *(_BYTE *)(a5 + 12) = BYTE4(a2) & 1;
    *(_QWORD *)(a5 + 16) = a3;
    *(_DWORD *)(a5 + 24) = v10;
    *(_BYTE *)(a5 + 28) = v8;
    *(_QWORD *)(a5 + 32) = v5;
    *(_QWORD *)(a5 + 40) = v6;
    *(_DWORD *)(a5 + 48) = v7;
    *(_BYTE *)(a5 + 52) = v9;
    return result;
  }
  v8 = (_DWORD)a4 == HIDWORD(a3);
  if ((_DWORD)a4 == HIDWORD(a3))
  {
    v10 = 0;
  }
  else
  {
    v10 = a4 + 1;
    if ((_DWORD)a4 == -1)
      goto LABEL_17;
  }
  if ((result & 0x100000000) == 0)
  {
    if (a4 >= result)
    {
      if ((a2 & 0x100000000) != 0 || a4 < a2)
      {
        v9 = 0;
        v5 = a4;
        v6 = v10 | ((unint64_t)((_DWORD)a4 == HIDWORD(a3)) << 32);
        v7 = a4;
        goto LABEL_15;
      }
      goto LABEL_18;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
  return result;
}

void UnicodeVariationIterator.init(_:)()
{
  uint64_t v0;

  sub_1B0A1D678();
  swift_getTupleTypeMetadata2();
  v0 = sub_1B0A1D690();
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for UnicodeVariationIterator();
}

uint64_t sub_1B0953694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v2 + *(int *)(a1 + 52);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v8, 1, 1, v5);
  v9 = *(_QWORD *)(v1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v3, v1);
  sub_1B0A1D714();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v8, v6, v4);
}

void sub_1B0953724(uint64_t a1)
{
  UnicodeVariationSequence.makeIterator()(a1);
}

uint64_t sub_1B0953738()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t IndexedUnicode.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t IndexedUnicode.startIndex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*IndexedUnicode.startIndex.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t IndexedUnicode.uvsIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t IndexedUnicode.uvsIndex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 28), a1);
}

uint64_t (*IndexedUnicode.uvsIndex.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t IndexedUnicode.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
}

uint64_t IndexedUnicode.endIndex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 32), a1);
}

uint64_t (*IndexedUnicode.endIndex.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t IndexedUnicode.variation.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 36)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 36) + 4) << 32);
}

uint64_t IndexedUnicode.variation.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + *(int *)(a2 + 36);
  *(_WORD *)v3 = result;
  *(_BYTE *)(v3 + 2) = BYTE2(result);
  *(_BYTE *)(v3 + 3) = BYTE3(result);
  *(_BYTE *)(v3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*IndexedUnicode.variation.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1B09538A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t result;
  uint64_t v15;

  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v10(a5, a1, a4);
  v13 = (int *)type metadata accessor for IndexedUnicode(0, a4, v11, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a5 + v13[7], a2, a4);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(a5 + v13[8], a2, a4);
  if (HIBYTE(a3))
  {
    __break(1u);
  }
  else
  {
    v15 = a5 + v13[9];
    *(_BYTE *)v15 = BYTE2(a3);
    *(_BYTE *)(v15 + 1) = BYTE1(a3);
    *(_BYTE *)(v15 + 2) = a3;
    *(_WORD *)(v15 + 3) = 256;
  }
  return result;
}

uint64_t sub_1B0953968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t result;
  _BYTE *v19;

  v11 = a4 >> 8;
  v12 = a4 >> 16;
  v13 = a4 >> 24;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32);
  v14(a6, a1, a5);
  v17 = (int *)type metadata accessor for IndexedUnicode(0, a5, v15, v16);
  v14(a6 + v17[7], a2, a5);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(a6 + v17[8], a3, a5);
  v19 = (_BYTE *)(a6 + v17[9]);
  *v19 = a4;
  v19[1] = v11;
  v19[2] = v12;
  v19[3] = v13;
  v19[4] = BYTE4(a4) & 1;
  return result;
}

char *sub_1B0953A34(uint64_t a1)
{
  return sub_1B08B5F4C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953A48(uint64_t a1)
{
  return sub_1B08B6164(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B0953A5C(_QWORD *a1)
{
  return sub_1B08B64AC(0, a1[2], 0, a1);
}

char *sub_1B0953A70(uint64_t a1)
{
  return sub_1B08B64C0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B0953A84(_QWORD *a1)
{
  return sub_1B08B6484(0, a1[2], 0, a1);
}

_QWORD *sub_1B0953A98(_QWORD *a1)
{
  return sub_1B08B6498(0, a1[2], 0, a1);
}

char *sub_1B0953AAC(uint64_t a1)
{
  return sub_1B08B6478(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953AC0(uint64_t a1)
{
  return sub_1B08B6378(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953AD4(uint64_t a1)
{
  return sub_1B08B64CC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953AE8(uint64_t a1)
{
  return sub_1B08B67E4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953AFC(uint64_t a1)
{
  return sub_1B08B5E40(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953B10(uint64_t a1)
{
  return sub_1B08B6C74(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953B24(uint64_t a1)
{
  return sub_1B08B6FC0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B0953B38(_QWORD *a1)
{
  return sub_1B08B71C0(0, a1[2], 0, a1);
}

char *sub_1B0953B4C(uint64_t a1)
{
  return sub_1B08B72E0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1B0953B60(_QWORD *a1)
{
  return sub_1B08B7510(0, a1[2], 0, a1);
}

char *sub_1B0953B74(uint64_t a1)
{
  return sub_1B08B7630(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953B88(uint64_t a1)
{
  return sub_1B08B7728(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953B9C(uint64_t a1)
{
  return sub_1B08B783C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B0953BB0(uint64_t a1)
{
  return sub_1B08B7848(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B0953BC4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint32x2_t *v33;
  int32x2_t v34;
  uint64_t v35;
  uint32x2_t *v36;
  uint32x2_t v37;
  __int8 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;

  v3 = a1[1];
  result = sub_1B0A1DA50();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if (v3)
      return sub_1B08B9518(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_137;
  v6 = result;
  v95 = a1;
  if (v3 > 1)
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC178);
    result = sub_1B0A1D4D4();
    *(_QWORD *)(result + 16) = v7;
    v98 = result;
    v102 = (char *)(result + 32);
LABEL_13:
    v9 = 0;
    v10 = *a1;
    v96 = *a1 - 8;
    v97 = *a1 + 20;
    v11 = MEMORY[0x1E0DEE9D8];
    v99 = v6;
    v100 = v3;
    v101 = v10;
    while (1)
    {
      v13 = v9++;
      if (v9 < v3)
      {
        v14 = (unsigned int *)(v10 + 8 * v9);
        v15 = *v14;
        v16 = v14[1];
        v17 = (unsigned int *)(v10 + 8 * v13);
        v18 = *v17;
        v19 = v16 < v17[1];
        v20 = v15 == v18;
        v21 = v15 < v18;
        if (!v20)
          v19 = v21;
        v9 = v13 + 2;
        if (v13 + 2 < v3)
        {
          v22 = (unsigned int *)(v97 + 8 * v13);
          while (1)
          {
            v23 = *(v22 - 1);
            v24 = *v22;
            v25 = *v22 < v16;
            v20 = v23 == v15;
            v26 = v23 < v15;
            if (v20)
              v26 = v25;
            if (v19 != v26)
              break;
            v22 += 2;
            ++v9;
            v16 = v24;
            v15 = v23;
            if (v3 == v9)
            {
              v9 = v3;
              break;
            }
          }
        }
        if (v19)
        {
          if (v9 < v13)
            goto LABEL_139;
          if (v13 < v9)
          {
            v27 = (uint64_t *)(v96 + 8 * v9);
            v28 = v9;
            v29 = v13;
            v30 = (uint64_t *)(v10 + 8 * v13);
            do
            {
              if (v29 != --v28)
              {
                if (!v10)
                  goto LABEL_144;
                v31 = *v30;
                *v30 = *v27;
                *v27 = v31;
              }
              ++v29;
              --v27;
              ++v30;
            }
            while (v29 < v28);
          }
        }
      }
      if (v9 < v3)
      {
        if (__OFSUB__(v9, v13))
          goto LABEL_136;
        if (v9 - v13 < v6)
        {
          v32 = v13 + v6;
          if (__OFADD__(v13, v6))
            goto LABEL_140;
          if (v32 >= v3)
            v32 = v3;
          if (v32 < v13)
          {
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
            return result;
          }
          if (v9 != v32)
          {
            v33 = (uint32x2_t *)(v96 + 8 * v9);
            do
            {
              v34 = *(int32x2_t *)(v10 + 8 * v9);
              v35 = v13;
              v36 = v33;
              do
              {
                v37 = vcgt_u32(*v36, (uint32x2_t)v34);
                if ((vceq_s32(v34, (int32x2_t)*v36).u8[0] & 1) != 0)
                  v38 = v37.i8[4];
                else
                  v38 = v37.i8[0];
                if ((v38 & 1) == 0)
                  break;
                if (!v10)
                  goto LABEL_142;
                v36[1] = *v36;
                *v36-- = (uint32x2_t)v34;
                ++v35;
              }
              while (v9 != v35);
              ++v9;
              ++v33;
            }
            while (v9 != v32);
            v9 = v32;
          }
        }
      }
      if (v9 < v13)
        goto LABEL_131;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08A8EA0(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
        v11 = result;
      }
      v40 = *(_QWORD *)(v11 + 16);
      v39 = *(_QWORD *)(v11 + 24);
      v12 = v40 + 1;
      v10 = v101;
      if (v40 >= v39 >> 1)
      {
        result = (uint64_t)sub_1B08A8EA0((char *)(v39 > 1), v40 + 1, 1, (char *)v11);
        v10 = v101;
        v11 = result;
      }
      *(_QWORD *)(v11 + 16) = v12;
      v41 = v11 + 32;
      v42 = (uint64_t *)(v11 + 32 + 16 * v40);
      *v42 = v13;
      v42[1] = v9;
      if (v40)
      {
        while (1)
        {
          v43 = v12 - 1;
          if (v12 >= 4)
          {
            v48 = v41 + 16 * v12;
            v49 = *(_QWORD *)(v48 - 64);
            v50 = *(_QWORD *)(v48 - 56);
            v54 = __OFSUB__(v50, v49);
            v51 = v50 - v49;
            if (v54)
              goto LABEL_120;
            v53 = *(_QWORD *)(v48 - 48);
            v52 = *(_QWORD *)(v48 - 40);
            v54 = __OFSUB__(v52, v53);
            v46 = v52 - v53;
            v47 = v54;
            if (v54)
              goto LABEL_121;
            v55 = v12 - 2;
            v56 = (uint64_t *)(v41 + 16 * (v12 - 2));
            v58 = *v56;
            v57 = v56[1];
            v54 = __OFSUB__(v57, v58);
            v59 = v57 - v58;
            if (v54)
              goto LABEL_122;
            v54 = __OFADD__(v46, v59);
            v60 = v46 + v59;
            if (v54)
              goto LABEL_124;
            if (v60 >= v51)
            {
              v78 = (uint64_t *)(v41 + 16 * v43);
              v80 = *v78;
              v79 = v78[1];
              v54 = __OFSUB__(v79, v80);
              v81 = v79 - v80;
              if (v54)
                goto LABEL_130;
              v71 = v46 < v81;
              goto LABEL_90;
            }
          }
          else
          {
            if (v12 != 3)
            {
              v72 = *(_QWORD *)(v11 + 32);
              v73 = *(_QWORD *)(v11 + 40);
              v54 = __OFSUB__(v73, v72);
              v65 = v73 - v72;
              v66 = v54;
              goto LABEL_84;
            }
            v45 = *(_QWORD *)(v11 + 32);
            v44 = *(_QWORD *)(v11 + 40);
            v54 = __OFSUB__(v44, v45);
            v46 = v44 - v45;
            v47 = v54;
          }
          if ((v47 & 1) != 0)
            goto LABEL_123;
          v55 = v12 - 2;
          v61 = (uint64_t *)(v41 + 16 * (v12 - 2));
          v63 = *v61;
          v62 = v61[1];
          v64 = __OFSUB__(v62, v63);
          v65 = v62 - v63;
          v66 = v64;
          if (v64)
            goto LABEL_125;
          v67 = (uint64_t *)(v41 + 16 * v43);
          v69 = *v67;
          v68 = v67[1];
          v54 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v54)
            goto LABEL_127;
          if (__OFADD__(v65, v70))
            goto LABEL_129;
          if (v65 + v70 >= v46)
          {
            v71 = v46 < v70;
LABEL_90:
            if (v71)
              v43 = v55;
            goto LABEL_92;
          }
LABEL_84:
          if ((v66 & 1) != 0)
            goto LABEL_126;
          v74 = (uint64_t *)(v41 + 16 * v43);
          v76 = *v74;
          v75 = v74[1];
          v54 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v54)
            goto LABEL_128;
          if (v77 < v65)
            goto LABEL_15;
LABEL_92:
          v82 = v43 - 1;
          if (v43 - 1 >= v12)
          {
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
            goto LABEL_141;
          }
          if (!v10)
            goto LABEL_143;
          v83 = (uint64_t *)(v41 + 16 * v82);
          v84 = *v83;
          v85 = (_QWORD *)(v41 + 16 * v43);
          v86 = v85[1];
          result = sub_1B08B9638((char *)(v10 + 8 * *v83), (char *)(v10 + 8 * *v85), v10 + 8 * v86, v102);
          if (v1)
            goto LABEL_100;
          if (v86 < v84)
            goto LABEL_117;
          if (v43 > *(_QWORD *)(v11 + 16))
            goto LABEL_118;
          *v83 = v84;
          *(_QWORD *)(v41 + 16 * v82 + 8) = v86;
          v87 = *(_QWORD *)(v11 + 16);
          if (v43 >= v87)
            goto LABEL_119;
          v12 = v87 - 1;
          result = (uint64_t)memmove((void *)(v41 + 16 * v43), v85 + 2, 16 * (v87 - 1 - v43));
          *(_QWORD *)(v11 + 16) = v87 - 1;
          v10 = v101;
          if (v87 <= 2)
            goto LABEL_15;
        }
      }
      v12 = 1;
LABEL_15:
      v6 = v99;
      v3 = v100;
      if (v9 >= v100)
      {
        v8 = v98;
        goto LABEL_103;
      }
    }
  }
  v8 = MEMORY[0x1E0DEE9D8];
  v102 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if (v3 == 1)
  {
    v98 = MEMORY[0x1E0DEE9D8];
    goto LABEL_13;
  }
  v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v11 = MEMORY[0x1E0DEE9D8];
LABEL_103:
  result = v11;
  v98 = v8;
  if (v12 >= 2)
  {
    v88 = *v95;
    do
    {
      v89 = v12 - 2;
      if (v12 < 2)
        goto LABEL_132;
      if (!v88)
        goto LABEL_145;
      v90 = result;
      v91 = *(_QWORD *)(result + 32 + 16 * v89);
      v92 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
      result = sub_1B08B9638((char *)(v88 + 8 * v91), (char *)(v88 + 8 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v88 + 8 * v92, v102);
      if (v1)
        break;
      if (v92 < v91)
        goto LABEL_133;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08A8F98(v90);
        v90 = result;
      }
      if (v89 >= *(_QWORD *)(v90 + 16))
        goto LABEL_134;
      v93 = (_QWORD *)(v90 + 32 + 16 * v89);
      *v93 = v91;
      v93[1] = v92;
      v94 = *(_QWORD *)(v90 + 16);
      if (v12 > v94)
        goto LABEL_135;
      memmove((void *)(v90 + 32 + 16 * (v12 - 1)), (const void *)(v90 + 32 + 16 * v12), 16 * (v94 - v12));
      result = v90;
      *(_QWORD *)(v90 + 16) = v94 - 1;
      v12 = v94 - 1;
    }
    while (v94 > 2);
  }
LABEL_100:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v98 + 16) = 0;
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B0954218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA888);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 3);
  return v4;
}

unint64_t sub_1B095428C(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = v5 | (v4 << 16);
  v7 = sub_1B09544C8(0xFuLL, a1, a2);
  result = sub_1B09544C8(v6, a1, a2);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a2 & 0x1000000000000000) != 0)
      {
        result = sub_1B0A1D2DC();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          v22 = a1;
          v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            result = sub_1B0A1D8B8();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        result = sub_1B0A1D2E8();
        v7 = result;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v22 = a1;
          v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            result = sub_1B0A1D8B8();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_40;
  }
  return 0;
}

unint64_t sub_1B09544C8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_1B0954564(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1B08A9118(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_1B0954564(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_1B08A7A34(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

uint64_t sub_1B09545D0(uint64_t result)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (*v1 > result || v1[1] <= result)
  {
    __break(1u);
    goto LABEL_13;
  }
  v4 = v1[4];
  v3 = v1[5];
  v5 = __OFADD__(v3, v4);
  v6 = v3 + v4;
  if (v5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v6 < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v3 > result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 <= result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = __OFSUB__(result, v3);
  v7 = result - v3;
  if (v5)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = *(char *)(v1[3] + v7);
  if ((v8 & 0x80000000) == 0)
    return v8;
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B095463C()
{
  return swift_deallocObject();
}

uint64_t sub_1B095464C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B094C8E4(a1, a2);
}

uint64_t sub_1B0954658(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v20[2];

  if ((a5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a5) & 0xF;
  else
    v8 = a4 & 0xFFFFFFFFFFFFLL;
  if (a2)
  {
    v9 = a3;
    if (a3)
    {
      if (a3 < 0)
      {
        __break(1u);
        JUMPOUT(0x1B0954890);
      }
      v11 = 0;
      v12 = 0;
      while (v12 < v8)
      {
        if ((a5 & 0x1000000000000000) != 0)
        {
          v18 = a1;
          v13 = sub_1B0A1D894();
          a1 = v18;
        }
        else
        {
          if ((a5 & 0x2000000000000000) != 0)
          {
            v20[0] = a4;
            v20[1] = a5 & 0xFFFFFFFFFFFFFFLL;
            v13 = *((unsigned __int8 *)v20 + v12);
            if (*((char *)v20 + v12) < 0)
              __asm { BR              X9 }
          }
          else
          {
            v15 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a4 & 0x1000000000000000) == 0)
            {
              v19 = a1;
              v16 = sub_1B0A1D8B8();
              a1 = v19;
              v15 = v16;
            }
            v13 = *(unsigned __int8 *)(v15 + v12);
            if (*(char *)(v15 + v12) < 0)
              __asm { BR              X10 }
          }
          v14 = 1;
        }
        *(_DWORD *)(a2 + 4 * v11) = v13;
        v12 += v14;
        if (v9 == ++v11)
          goto LABEL_22;
      }
      v9 = v11;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v9 = 0;
  }
LABEL_22:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = v12;
  a1[3] = v8;
  return v9;
}

_QWORD *sub_1B09548B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC180);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 29;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 2);
  return v4;
}

unint64_t sub_1B0954924(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned __int8 v4;
  unint64_t v5;

  if (!BYTE3(result))
  {
    if ((a2 & 0x100000000) != 0)
    {
      v3 = 0;
      v2 = 0x100000000;
    }
    else if (a2 >> 4 == 4064)
    {
      v2 = 0;
      v3 = a2 - 65024;
    }
    else
    {
      if ((a2 - 917760) > 0xEF)
      {
        v5 = 0;
        v4 = 1;
        return v5 | ((unint64_t)v4 << 40);
      }
      v2 = 0;
      v3 = a2 - 917744;
    }
    v4 = 0;
    v5 = v2 | result & 0xFF00 | WORD1(result) & 0xFF00FFFF | (result << 16) | (v3 << 24);
    return v5 | ((unint64_t)v4 << 40);
  }
  __break(1u);
  return result;
}

unint64_t sub_1B09549BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1B094BEC4(*(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 48), *(_QWORD *)(v1 + 16), a1, *(_QWORD *)(v1 + 24));
}

void type metadata accessor for CharacterMapQuery()
{
  JUMPOUT(0x1B5E0D4ACLL);
}

uint64_t sub_1B09549F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for IndexedUnicode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexedUnicode);
}

void type metadata accessor for UnicodeVariationIterator()
{
  JUMPOUT(0x1B5E0D4ACLL);
}

void type metadata accessor for UnicodeVariationSequence()
{
  JUMPOUT(0x1B5E0D4ACLL);
}

unint64_t sub_1B0954A64()
{
  unint64_t result;

  result = qword_1EEEBBF68;
  if (!qword_1EEEBBF68)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for CharacterMapQueryStatus, &type metadata for CharacterMapQueryStatus);
    atomic_store(result, (unint64_t *)&qword_1EEEBBF68);
  }
  return result;
}

unint64_t sub_1B0954AAC()
{
  unint64_t result;

  result = qword_1EEEBBF70[0];
  if (!qword_1EEEBBF70[0])
  {
    result = MEMORY[0x1B5E0D530]("yFw58M\a", &type metadata for IndexedUTF16Iterator);
    atomic_store(result, qword_1EEEBBF70);
  }
  return result;
}

void sub_1B0954AF0()
{
  JUMPOUT(0x1B5E0D530);
}

uint64_t __swift_memcpy5_1(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for UnicodeVariation()
{
  return &type metadata for UnicodeVariation;
}

uint64_t getEnumTagSinglePayload for VariationLookupResult(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VariationLookupResult(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1B0954B74(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B0954B90(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for VariationLookupResult()
{
  return &type metadata for VariationLookupResult;
}

uint64_t destroy for CharacterMap(uint64_t a1)
{
  uint64_t result;

  result = __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  if (*(_QWORD *)(a1 + 72))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  return result;
}

uint64_t initializeWithCopy for CharacterMap(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  v5 = (_OWORD *)(a1 + 48);
  v6 = (_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    *v5 = *v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for CharacterMap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 72) = v4;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 48);
    v6 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
LABEL_8:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for CharacterMap(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for CharacterMap(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacterMap(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacterMap()
{
  return &type metadata for CharacterMap;
}

uint64_t storeEnumTagSinglePayload for CharacterMapQueryStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B0954E9C + 4 * byte_1B0A3AC45[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B0954ED0 + 4 * byte_1B0A3AC40[v4]))();
}

uint64_t sub_1B0954ED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0954ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0954EE0);
  return result;
}

uint64_t sub_1B0954EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0954EF4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B0954EF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0954F00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacterMapQueryStatus()
{
  return &type metadata for CharacterMapQueryStatus;
}

uint64_t sub_1B0954F1C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1B0954F24()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v4 <= 0x3F)
      {
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        if (v5 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_1B0955084(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(unint64_t, unint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(unint64_t, unint64_t, uint64_t);
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(unint64_t, unint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t AssociatedTypeWitness;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v56 = v5;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v58 = *(_QWORD *)(v5 + 64) + v8;
  v59 = v7;
  v10 = *(_QWORD *)(v7 + 64);
  v60 = v4;
  v61 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v54 = v10 + v12;
  v55 = v11;
  v13 = *(_QWORD *)(v11 + 64);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = v13 + v16;
  v18 = *(_QWORD *)(v15 + 64) + 7;
  v19 = v8 | (unint64_t)v6 | v12 | v16;
  if (v19 > 7
    || ((v8 | v6 | v12 | *(_DWORD *)(v15 + 80)) & 0x100000) != 0
    || ((v12
       + 8
       + ((((((((v18
               + ((v13
                 + v16
                 + ((v54
                   + ((v58 + ((v6 + 8) & ~(unint64_t)v6)) & ~(unint64_t)v8)) & ~(unint64_t)v12)) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 47) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v12)
     + v13 > 0x18)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = (uint64_t *)(v22 + ((v19 & 0xF8 ^ 0x1F8) & (v19 + 16)));
    swift_retain();
  }
  else
  {
    v53 = v12 + 8;
    v24 = ~(unint64_t)v12;
    v25 = ~v16;
    *a1 = *a2;
    v26 = ((unint64_t)a1 + v6 + 8) & ~(unint64_t)v6;
    v27 = ((unint64_t)a2 + v6 + 8) & ~(unint64_t)v6;
    v28 = *(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 16);
    v57 = v14;
    v29 = v18;
    v28(v26, v27, v60);
    v30 = (v26 + v58) & ~v9;
    v31 = (v27 + v58) & ~v9;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v59 + 16))(v30, v31, v61);
    v32 = (v30 + v54) & v24;
    v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v55 + 16);
    v33(v32, (v31 + v54) & v24, AssociatedTypeWitness);
    v34 = (v32 + v17) & v25;
    v35 = (((v31 + v54) & v24) + v17) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(v34, v35, v57);
    v36 = (_QWORD *)((v29 + v34) & 0xFFFFFFFFFFFFFFF8);
    v37 = (_QWORD *)((v29 + v35) & 0xFFFFFFFFFFFFFFF8);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = ((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8;
    v40 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8;
    v41 = *(_QWORD *)(v40 + 24);
    *(_QWORD *)(v39 + 24) = v41;
    *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
    v42 = **(void (***)(unint64_t, unint64_t, uint64_t))(v41 - 8);
    swift_retain();
    v42(v39, v40, v41);
    v43 = (v39 + 47) & 0xFFFFFFFFFFFFFFF8;
    v44 = (v40 + 47) & 0xFFFFFFFFFFFFFFF8;
    v45 = *(_QWORD *)(v44 + 24);
    v23 = a1;
    if (v45 < 0xFFFFFFFF)
    {
      v46 = *(_OWORD *)v44;
      v47 = *(_OWORD *)(v44 + 16);
      *(_QWORD *)(v43 + 32) = *(_QWORD *)(v44 + 32);
      *(_OWORD *)v43 = v46;
      *(_OWORD *)(v43 + 16) = v47;
    }
    else
    {
      *(_QWORD *)(v43 + 24) = v45;
      *(_QWORD *)(v43 + 32) = *(_QWORD *)(v44 + 32);
      (**(void (***)(unint64_t, unint64_t))(v45 - 8))(v43, v44);
    }
    v48 = (_QWORD *)((v43 + 47) & 0xFFFFFFFFFFFFFFF8);
    v49 = (_QWORD *)((v44 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v48 = *v49;
    v50 = ((unint64_t)v48 + v53) & v24;
    v51 = ((unint64_t)v49 + v53) & v24;
    swift_bridgeObjectRetain();
    v33(v50, v51, AssociatedTypeWitness);
  }
  return v23;
}

uint64_t sub_1B09553F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v20)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t, _QWORD))(v3 + 8))(v4, *(_QWORD *)(a2 + 16));
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, _QWORD))(v5 + 8))(v6, *(_QWORD *)(a2 + 24));
  v7 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v6 + v7 + v10) & ~v10;
  v20 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  v20(v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v9 + 64);
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (v11 + v12 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v15, v13);
  v16 = (*(_QWORD *)(v14 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v17);
  v18 = (v17 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v18 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(v18);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(unint64_t, uint64_t))v20)((v10 + ((v18 + 47) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10, AssociatedTypeWitness);
}

_QWORD *sub_1B0955594(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(unint64_t, unint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v47)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v4 + 16))(v6, v7, *(_QWORD *)(a3 + 16));
  v8 = *(_QWORD *)(v4 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + v6) & ~v10;
  v13 = (v11 + v7) & ~v10;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v12, v13, *(_QWORD *)(a3 + 24));
  v14 = *(_QWORD *)(v9 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v14 + v17;
  v19 = v14 + v17 + v12;
  v20 = ~v17;
  v21 = v19 & ~v17;
  v22 = (v18 + v13) & ~v17;
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v47(v21, v22, AssociatedTypeWitness);
  v23 = *(_QWORD *)(v16 + 64);
  v24 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (v23 + v26 + v21) & ~v26;
  v28 = (v23 + v26 + v22) & ~v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v27, v28, v24);
  v29 = *(_QWORD *)(v25 + 64) + 7;
  v30 = (_QWORD *)((v29 + v27) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v29 + v28) & 0xFFFFFFFFFFFFFFF8);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v33 = ((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_QWORD *)(v34 + 24);
  *(_QWORD *)(v33 + 24) = v35;
  *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
  v36 = **(void (***)(unint64_t, unint64_t, uint64_t))(v35 - 8);
  swift_retain();
  v36(v33, v34, v35);
  v37 = (v33 + 47) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v34 + 47) & 0xFFFFFFFFFFFFFFF8;
  v39 = *(_QWORD *)(v38 + 24);
  if (v39 < 0xFFFFFFFF)
  {
    v40 = *(_OWORD *)v38;
    v41 = *(_OWORD *)(v38 + 16);
    *(_QWORD *)(v37 + 32) = *(_QWORD *)(v38 + 32);
    *(_OWORD *)v37 = v40;
    *(_OWORD *)(v37 + 16) = v41;
  }
  else
  {
    *(_QWORD *)(v37 + 24) = v39;
    *(_QWORD *)(v37 + 32) = *(_QWORD *)(v38 + 32);
    (**(void (***)(unint64_t, unint64_t))(v39 - 8))(v37, v38);
  }
  v42 = (_QWORD *)((v37 + 47) & 0xFFFFFFFFFFFFFFF8);
  v43 = (_QWORD *)((v38 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v42 = *v43;
  v44 = ((unint64_t)v42 + v17 + 8) & v20;
  v45 = ((unint64_t)v43 + v17 + 8) & v20;
  swift_bridgeObjectRetain();
  v47(v44, v45, AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_1B0955800(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  void (*v40)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v4 + 24))(v6, v7, *(_QWORD *)(a3 + 16));
  v8 = *(_QWORD *)(v4 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + v6) & ~v10;
  v13 = (v11 + v7) & ~v10;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 24))(v12, v13, *(_QWORD *)(a3 + 24));
  v14 = *(_QWORD *)(v9 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v14 + v17 + v12) & ~v17;
  v19 = (v14 + v17 + v13) & ~v17;
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v40(v18, v19, AssociatedTypeWitness);
  v20 = *(_QWORD *)(v16 + 64);
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v20 + v23 + v18) & ~v23;
  v25 = (v20 + v23 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 24))(v24, v25, v21);
  v26 = *(_QWORD *)(v22 + 64) + 7;
  v27 = (_QWORD *)((v26 + v24) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v26 + v25) & 0xFFFFFFFFFFFFFFF8);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  swift_retain();
  swift_release();
  v30 = (uint64_t *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8), v30);
  v31 = ((((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v30 + 47) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)(v32 + 24);
  if (*(_QWORD *)(v31 + 24) < 0xFFFFFFFFuLL)
  {
    if (v33 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v31 + 24) = v33;
      *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
      (**(void (***)(unint64_t, unint64_t))(v33 - 8))(((((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8, v32);
      goto LABEL_8;
    }
LABEL_7:
    v35 = *(_OWORD *)v32;
    v36 = *(_OWORD *)(v32 + 16);
    *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
    *(_OWORD *)v31 = v35;
    *(_OWORD *)(v31 + 16) = v36;
    goto LABEL_8;
  }
  v34 = (uint64_t *)(((((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  if (v33 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1(v34, (uint64_t *)v32);
LABEL_8:
  v37 = (_QWORD *)((v31 + 47) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)((v32 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40(((unint64_t)v37 + v17 + 8) & ~v17, ((unint64_t)v38 + v17 + 8) & ~v17, AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_1B0955A90(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v4 + 32))(v6, v7, *(_QWORD *)(a3 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = (v10 + v6) & ~v9;
  v12 = (v10 + v7) & ~v9;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v8 + 32))(v11, v12, *(_QWORD *)(a3 + 24));
  v13 = *(_QWORD *)(v8 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v13 + v16 + v11) & ~v16;
  v18 = (v13 + v16 + v12) & ~v16;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  v19(v17, v18, AssociatedTypeWitness);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v20 + v23 + v17) & ~v23;
  v25 = (v20 + v23 + v18) & ~v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v24, v25, v21);
  v26 = *(_QWORD *)(v22 + 64) + 7;
  v27 = (_OWORD *)((v26 + v24) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_OWORD *)((v26 + v25) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = ((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(_OWORD *)v30;
  v31 = *(_OWORD *)(v30 + 16);
  *(_QWORD *)(v29 + 32) = *(_QWORD *)(v30 + 32);
  *(_OWORD *)v29 = v32;
  *(_OWORD *)(v29 + 16) = v31;
  v33 = (v29 + 47) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v30 + 47) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_OWORD *)v34;
  v35 = *(_OWORD *)(v34 + 16);
  *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
  *(_OWORD *)v33 = v36;
  *(_OWORD *)(v33 + 16) = v35;
  v37 = (_QWORD *)((v33 + 47) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)((v34 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v19(((unint64_t)v37 + v16 + 8) & ~v16, ((unint64_t)v38 + v16 + 8) & ~v16, AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_1B0955C8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD *v39;
  void (*v41)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v4 + 40))(v6, v7, *(_QWORD *)(a3 + 16));
  v8 = *(_QWORD *)(v4 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 + v10;
  v12 = (v11 + v6) & ~v10;
  v13 = (v11 + v7) & ~v10;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 40))(v12, v13, *(_QWORD *)(a3 + 24));
  v14 = *(_QWORD *)(v9 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v14 + v17 + v12) & ~v17;
  v19 = (v14 + v17 + v13) & ~v17;
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40);
  v41(v18, v19, AssociatedTypeWitness);
  v20 = *(_QWORD *)(v16 + 64);
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v20 + v23 + v18) & ~v23;
  v25 = (v20 + v23 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 40))(v24, v25, v21);
  v26 = *(_QWORD *)(v22 + 64) + 7;
  v27 = (_OWORD *)((v26 + v24) & 0xFFFFFFFFFFFFFFF8);
  v28 = v26 + v25;
  v29 = (v28 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v27 = *(_OWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v30 = ((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = v29 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v30);
  v32 = *(_OWORD *)v31;
  v33 = *(_OWORD *)(v31 + 16);
  *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 32);
  *(_OWORD *)v30 = v32;
  *(_OWORD *)(v30 + 16) = v33;
  v34 = (v30 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v34 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(v34);
  v35 = (v31 + 47) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_OWORD *)v35;
  v37 = *(_OWORD *)(v35 + 16);
  *(_QWORD *)(v34 + 32) = *(_QWORD *)(v35 + 32);
  *(_OWORD *)v34 = v36;
  *(_OWORD *)(v34 + 16) = v37;
  v38 = (_QWORD *)((v34 + 47) & 0xFFFFFFFFFFFFFFF8);
  v39 = (_QWORD *)((v35 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v38 = *v39;
  swift_bridgeObjectRelease();
  v41(((unint64_t)v38 + v17 + 8) & ~v17, ((unint64_t)v39 + v17 + 8) & ~v17, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1B0955EC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  uint64_t AssociatedTypeWitness;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_QWORD *)(v6 - 8);
  v38 = *(_DWORD *)(v8 + 84);
  v39 = *(_DWORD *)(v7 + 84);
  if (v38 <= v39)
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = *(_DWORD *)(v8 + 84);
  v37 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 > v9)
    v9 = *(_DWORD *)(v10 + 84);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  if (v14 <= v9)
    v15 = v9;
  else
    v15 = *(_DWORD *)(v13 + 84);
  if (v15 <= v11)
    v15 = v11;
  if (v15 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v16 = v12;
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = *(_QWORD *)(v7 + 64);
  v19 = *(unsigned __int8 *)(v8 + 80);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = *(_QWORD *)(v8 + 64) + v20;
  v22 = *(_QWORD *)(v10 + 64);
  v23 = *(unsigned __int8 *)(v13 + 80);
  v24 = v22 + v23;
  v25 = *(_QWORD *)(v13 + 64) + 7;
  if (a2 <= v15)
    goto LABEL_33;
  v26 = ((v20
        + ((((((((v25 + ((v24 + ((v21 + ((v18 + v19 + ((v17 + 8) & ~v17)) & ~v19)) & ~v20)) & ~v23)) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 47) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~v20)
      + v22;
  v27 = 8 * v26;
  if (v26 > 3)
    goto LABEL_16;
  v30 = ((a2 - v15 + ~(-1 << v27)) >> v27) + 1;
  if (HIWORD(v30))
  {
    v28 = *(_DWORD *)(a1 + v26);
    if (v28)
      goto LABEL_24;
  }
  else
  {
    if (v30 <= 0xFF)
    {
      if (v30 < 2)
        goto LABEL_33;
LABEL_16:
      v28 = *(unsigned __int8 *)(a1 + v26);
      if (!*(_BYTE *)(a1 + v26))
        goto LABEL_33;
LABEL_24:
      v31 = (v28 - 1) << v27;
      if (v26 > 3)
        v31 = 0;
      if ((_DWORD)v26)
      {
        if (v26 <= 3)
          v32 = v26;
        else
          v32 = 4;
        __asm { BR              X12 }
      }
      return v15 + v31 + 1;
    }
    v28 = *(unsigned __int16 *)(a1 + v26);
    if (*(_WORD *)(a1 + v26))
      goto LABEL_24;
  }
LABEL_33:
  v33 = (a1 + v17 + 8) & ~v17;
  if (v39 == v15)
  {
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v14 = v39;
    v16 = v37;
    return v34(v33, v14, v16);
  }
  v33 = (v33 + v18 + v19) & ~v19;
  if (v38 == v15)
  {
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v14 = v38;
    v16 = v6;
    return v34(v33, v14, v16);
  }
  v33 = (v21 + v33) & ~v20;
  if ((_DWORD)v11 == v15)
  {
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v14 = v11;
    v16 = AssociatedTypeWitness;
    return v34(v33, v14, v16);
  }
  v33 = (v24 + v33) & ~v23;
  if ((_DWORD)v14 == v15)
  {
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    return v34(v33, v14, v16);
  }
  v35 = *(_QWORD *)((v25 + v33) & 0xFFFFFFFFFFFFF8);
  if (v35 >= 0xFFFFFFFF)
    LODWORD(v35) = -1;
  return (v35 + 1);
}

void sub_1B09561F4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v10 + 84) <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v9)
    v11 = v9;
  if (v11 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = ((v12
        + ((((((((*(_QWORD *)(v10 + 64)
                + 7
                + ((*(_QWORD *)(v8 + 64)
                  + *(unsigned __int8 *)(v10 + 80)
                  + ((*(_QWORD *)(v6 + 64)
                    + v12
                    + ((*(_QWORD *)(v5 + 64)
                      + *(unsigned __int8 *)(v6 + 80)
                      + ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~v12)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 47) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~v12)
      + *(_QWORD *)(v8 + 64);
  if (a3 <= v11)
  {
    v16 = 0u;
    v14 = a1;
    v15 = a2;
  }
  else
  {
    v14 = a1;
    v15 = a2;
    if (v13 <= 3)
    {
      v18 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v18))
      {
        v16 = 4u;
      }
      else if (v18 >= 0x100)
      {
        v16 = 2;
      }
      else
      {
        v16 = v18 > 1;
      }
    }
    else
    {
      v16 = 1u;
    }
  }
  if (v11 < v15)
  {
    v17 = ~v11 + v15;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v19 = v17 & ~(-1 << (8 * v13));
        bzero(v14, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)v14 = v19;
          v14[2] = BYTE2(v19);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)v14 = v19;
        }
        else
        {
          *v14 = v19;
        }
      }
    }
    else
    {
      bzero(v14, v13);
      *(_DWORD *)v14 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

ValueMetadata *type metadata accessor for IndexedUTF16Sequence()
{
  return &type metadata for IndexedUTF16Sequence;
}

ValueMetadata *type metadata accessor for IndexedUTF16Iterator()
{
  return &type metadata for IndexedUTF16Iterator;
}

uint64_t sub_1B09565C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B0956670 + 4 * byte_1B0A3AC58[(v7 - 1)]))();
}

void sub_1B09566C0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1B0956870()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B09568E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  void (*v14)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v7 + ((v7 + v8 + ((v7 + v8) & ~v8)) & (unint64_t)~v8) + 5 > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v14(a1, a2, *(_QWORD *)(a3 + 16));
    v15 = ((unint64_t)a2 + v10) & v9;
    v14((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v15, v5);
    v16 = (v10 + v15) & v9;
    v14((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)v16, v5);
    v17 = ((v10 + (((unint64_t)v4 + v10) & v9)) & v9) + v7;
    v18 = *(_BYTE *)(v16 + v7 + 4);
    *(_DWORD *)v17 = *(_DWORD *)(v16 + v7);
    *(_BYTE *)(v17 + 4) = v18;
  }
  return v4;
}

uint64_t sub_1B09569F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6 + a1) & ~v6;
  v10(v8, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v7 + v8) & ~v6, v3);
}

uint64_t sub_1B0956A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  v12 = ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9) + v8;
  v13 = *(_BYTE *)(v11 + v8 + 4);
  *(_DWORD *)v12 = *(_DWORD *)(v11 + v8);
  *(_BYTE *)(v12 + 4) = v13;
  return a1;
}

uint64_t sub_1B0956B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  v12 = ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9) + v8;
  *(_BYTE *)v12 = *(_BYTE *)(v11 + v8);
  *(_BYTE *)(v12 + 1) = *(_BYTE *)(v11 + v8 + 1);
  *(_BYTE *)(v12 + 2) = *(_BYTE *)(v11 + v8 + 2);
  *(_WORD *)(v12 + 3) = *(_WORD *)(v11 + v8 + 3);
  return a1;
}

uint64_t sub_1B0956BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  v12 = ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9) + v8;
  v13 = *(_BYTE *)(v11 + v8 + 4);
  *(_DWORD *)v12 = *(_DWORD *)(v11 + v8);
  *(_BYTE *)(v12 + 4) = v13;
  return a1;
}

uint64_t sub_1B0956C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a2) & ~v9;
  v7((v8 + v9 + a1) & ~v9, v10, v5);
  v11 = (v8 + v9 + v10) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  v12 = ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9) + v8;
  *(_BYTE *)v12 = *(_BYTE *)(v11 + v8);
  *(_BYTE *)(v12 + 1) = *(_BYTE *)(v11 + v8 + 1);
  *(_BYTE *)(v12 + 2) = *(_BYTE *)(v11 + v8 + 2);
  *(_WORD *)(v12 + 3) = *(_WORD *)(v11 + v8 + 3);
  return a1;
}

uint64_t sub_1B0956D60(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64)
     + ((*(_QWORD *)(v4 + 64)
       + *(unsigned __int8 *)(v4 + 80)
       + ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + 5;
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B0956E2C + 4 * byte_1B0A3AC66[(v7 - 1)]))();
}

void sub_1B0956E7C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64)
     + ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 5;
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v6 + 64)
           + *(unsigned __int8 *)(v6 + 80)
           + ((*(_DWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & ~*(unsigned __int8 *)(v6 + 80)) != -5)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64)+ ((*(_QWORD *)(v6 + 64)+ *(unsigned __int8 *)(v6 + 80)+ ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 5);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1B0957048()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    sub_1B0A1D678();
    swift_getTupleTypeMetadata2();
    result = sub_1B0A1D690();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1B0957100(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  void (*v30)(unint64_t, unint64_t, uint64_t);
  uint64_t v32;
  size_t v33;
  uint64_t v34;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8 | 3;
  v10 = (v8 | 3) + *(_QWORD *)(v5 + 64);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = v11 + v8;
  v13 = ((v11 + v8) & ~v8) + v11;
  v14 = (v13 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 + 4;
  v16 = v14 + 5;
  if ((_DWORD)v7)
    v17 = v15;
  else
    v17 = v16;
  v18 = v9 | *(_DWORD *)(v5 + 80);
  if (v18 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0 || v17 + (v10 & ~(v8 | 3)) > 0x18)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
    return v4;
  }
  v33 = v15;
  v34 = *(_QWORD *)(a3 + 24);
  v32 = v13;
  v22 = ~v9;
  (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
  v23 = ((unint64_t)v4 + v10) & v22;
  v24 = ((unint64_t)a2 + v10) & v22;
  if (!(_DWORD)v7)
  {
    v25 = v33;
    v26 = v23;
    if (!*(_BYTE *)(v24 + v33))
      goto LABEL_21;
    v27 = *(unsigned __int8 *)(v24 + v33) - 1;
    v28 = v33 & 0xFFFFFFFC;
    if ((v33 & 0xFFFFFFFC) != 0)
    {
      v27 = 0;
      v28 = *(_DWORD *)v24;
    }
    if ((v28 | v27) == 0xFFFFFFFF)
      goto LABEL_21;
LABEL_20:
    memcpy((void *)v26, (const void *)v24, v17);
    return v4;
  }
  v25 = v33;
  v26 = v23;
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v24, v7, v34))
    goto LABEL_20;
LABEL_21:
  v29 = ~v8;
  v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v30(v26, v24, v34);
  v30((v12 + v26) & v29, (v12 + v24) & v29, v34);
  *(_DWORD *)(((v26 | 3) + v32) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((v24 | 3) + v32) & 0xFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v7)
    *(_BYTE *)(v26 + v25) = 0;
  return v4;
}

uint64_t sub_1B09572DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t (*v19)(unint64_t, uint64_t);

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (_DWORD *)((v5 + (v8 | 3)) & ~(v8 | 3));
  v10 = *(unsigned int *)(v7 + 84);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v11 + v8;
  if ((_DWORD)v10)
  {
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(v9, v10, v6);
    if (!(_DWORD)result)
    {
LABEL_13:
      v19 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
      v19((unint64_t)v9, v6);
      return v19(((unint64_t)v9 + v12) & ~v8, v6);
    }
  }
  else
  {
    v14 = ((v11 + (v12 & ~v8) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if (!*((_BYTE *)v9 + v14))
      goto LABEL_13;
    v15 = v14 & 0xFFFFFFFC;
    v16 = (v14 & 0xFFFFFFFC) != 0 ? 0 : *((unsigned __int8 *)v9 + v14) - 1;
    v17 = v15 ? *v9 : 0;
    v18 = v17 | v16;
    result = (v18 + 1);
    if (v18 == -1)
      goto LABEL_13;
  }
  return result;
}

uint64_t sub_1B09573F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  size_t v33;
  void (*v34)(_BYTE *, _DWORD *, uint64_t);
  unint64_t v36;
  unsigned int v37;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 3) + v7;
  v12 = (_BYTE *)((v11 + a1) & ~(v10 | 3));
  v13 = (_DWORD *)((v11 + a2) & ~(v10 | 3));
  v14 = *(_DWORD *)(v9 + 84);
  v15 = *(_QWORD *)(v9 + 64);
  v16 = v15 + v10;
  v17 = ((v15 + v10) & ~v10) + v15 + 3;
  v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  v19 = (v17 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v14)
  {
    v20 = v13;
    v21 = v8;
    v37 = *(_DWORD *)(v9 + 84);
    v22 = v15 + v10;
    v23 = v8;
    v24 = ((v15 + v10) & ~v10) + v15 + 3;
    v25 = a1;
    v26 = v12;
    v27 = v18 + 4;
    v28 = v13;
    v29 = v18;
    v30 = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t))(v9 + 48))(v20, v37, v21);
    v18 = v29;
    v13 = v28;
    v19 = v27;
    v12 = v26;
    a1 = v25;
    v17 = v24;
    v8 = v23;
    v16 = v22;
    v14 = v37;
    if (!v30)
    {
LABEL_12:
      v36 = v19;
      v34 = *(void (**)(_BYTE *, _DWORD *, uint64_t))(v9 + 16);
      v34(v12, v13, v8);
      v34((_BYTE *)((unint64_t)&v12[v16] & ~v10), (_DWORD *)(((unint64_t)v13 + v16) & ~v10), v8);
      *(_DWORD *)((unint64_t)&v12[v17] & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v13 + v17) & 0xFFFFFFFFFFFFFCLL);
      if (!v14)
        v12[v36] = 0;
      return a1;
    }
  }
  else
  {
    if (!*((_BYTE *)v13 + v19))
      goto LABEL_12;
    v31 = *((unsigned __int8 *)v13 + v19) - 1;
    v32 = v19 & 0xFFFFFFFC;
    if ((v19 & 0xFFFFFFFC) != 0)
    {
      v31 = 0;
      v32 = *v13;
    }
    if ((v32 | v31) == 0xFFFFFFFF)
      goto LABEL_12;
  }
  if (v14)
    v33 = v19;
  else
    v33 = v18 + 5;
  memcpy(v12, v13, v33);
  return a1;
}

uint64_t sub_1B09575A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_DWORD *, uint64_t, uint64_t);
  int v21;
  int v22;
  size_t v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  void (*v31)(_DWORD *, uint64_t);
  void (*v32)(_DWORD *, _DWORD *, uint64_t);
  void (*v33)(_DWORD *, _DWORD *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 3) + *(_QWORD *)(v6 + 64);
  v11 = (_DWORD *)((v10 + a1) & ~(v9 | 3));
  v12 = (_DWORD *)((v10 + a2) & ~(v9 | 3));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = v14 + v9;
  v16 = ((v14 + v9) & ~v9) + v14 + 3;
  v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  v18 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  v35 = v16;
  v36 = ~v9;
  v37 = v11;
  if (!(_DWORD)v13)
  {
    if (*((_BYTE *)v11 + v18))
    {
      v25 = *((unsigned __int8 *)v11 + v18) - 1;
      if ((_DWORD)v18)
      {
        v25 = 0;
        v26 = *v11;
      }
      else
      {
        v26 = 0;
      }
      if ((v26 | v25) != 0xFFFFFFFF)
      {
        if (*((_BYTE *)v12 + v18))
        {
          v27 = *((unsigned __int8 *)v12 + v18) - 1;
          if ((_DWORD)v18)
          {
            v27 = 0;
            v28 = *v12;
          }
          else
          {
            v28 = 0;
          }
          if ((v28 | v27) != 0xFFFFFFFF)
            goto LABEL_4;
        }
        goto LABEL_30;
      }
    }
    if (!*((_BYTE *)v12 + v18))
    {
LABEL_27:
      v32 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(v8 + 24);
      v32(v37, v12, v7);
      v32((_DWORD *)(((unint64_t)v37 + v15) & v36), (_DWORD *)(((unint64_t)v12 + v15) & v36), v7);
      *(_DWORD *)(((unint64_t)v37 + v35) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v12 + v35) & 0xFFFFFFFFFFFFFCLL);
      return a1;
    }
    v29 = *((unsigned __int8 *)v12 + v18) - 1;
    if ((_DWORD)v18)
    {
      v29 = 0;
      v30 = *v12;
    }
    else
    {
      v30 = 0;
    }
    v22 = (v30 | v29) + 1;
LABEL_21:
    if (v22)
    {
      v31 = *(void (**)(_DWORD *, uint64_t))(v8 + 8);
      v31(v37, v7);
      v31((_DWORD *)(((unint64_t)v37 + v15) & v36), v7);
      if ((_DWORD)v13)
        v23 = v18;
      else
        v23 = v17 + 5;
      v24 = v37;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  v19 = a1;
  v20 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v8 + 48);
  v21 = v20(v11, v13, v7);
  v22 = v20(v12, v13, v7);
  a1 = v19;
  if (!v21)
    goto LABEL_21;
  v11 = v37;
  if (v22)
  {
LABEL_4:
    if ((_DWORD)v13)
      v23 = v18;
    else
      v23 = v17 + 5;
    v24 = v11;
LABEL_26:
    memcpy(v24, v12, v23);
    return a1;
  }
LABEL_30:
  v33 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(v8 + 16);
  v33(v11, v12, v7);
  v33((_DWORD *)(((unint64_t)v11 + v15) & v36), (_DWORD *)(((unint64_t)v12 + v15) & v36), v7);
  *(_DWORD *)(((unint64_t)v11 + v35) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v12 + v35) & 0xFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v13)
    *((_BYTE *)v11 + v18) = 0;
  return a1;
}

uint64_t sub_1B0957828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  size_t v33;
  void (*v34)(_BYTE *, _DWORD *, uint64_t);
  unint64_t v36;
  unsigned int v37;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 3) + v7;
  v12 = (_BYTE *)((v11 + a1) & ~(v10 | 3));
  v13 = (_DWORD *)((v11 + a2) & ~(v10 | 3));
  v14 = *(_DWORD *)(v9 + 84);
  v15 = *(_QWORD *)(v9 + 64);
  v16 = v15 + v10;
  v17 = ((v15 + v10) & ~v10) + v15 + 3;
  v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  v19 = (v17 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v14)
  {
    v20 = v13;
    v21 = v8;
    v37 = *(_DWORD *)(v9 + 84);
    v22 = v15 + v10;
    v23 = v8;
    v24 = ((v15 + v10) & ~v10) + v15 + 3;
    v25 = a1;
    v26 = v12;
    v27 = v18 + 4;
    v28 = v13;
    v29 = v18;
    v30 = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t))(v9 + 48))(v20, v37, v21);
    v18 = v29;
    v13 = v28;
    v19 = v27;
    v12 = v26;
    a1 = v25;
    v17 = v24;
    v8 = v23;
    v16 = v22;
    v14 = v37;
    if (!v30)
    {
LABEL_12:
      v36 = v19;
      v34 = *(void (**)(_BYTE *, _DWORD *, uint64_t))(v9 + 32);
      v34(v12, v13, v8);
      v34((_BYTE *)((unint64_t)&v12[v16] & ~v10), (_DWORD *)(((unint64_t)v13 + v16) & ~v10), v8);
      *(_DWORD *)((unint64_t)&v12[v17] & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v13 + v17) & 0xFFFFFFFFFFFFFCLL);
      if (!v14)
        v12[v36] = 0;
      return a1;
    }
  }
  else
  {
    if (!*((_BYTE *)v13 + v19))
      goto LABEL_12;
    v31 = *((unsigned __int8 *)v13 + v19) - 1;
    v32 = v19 & 0xFFFFFFFC;
    if ((v19 & 0xFFFFFFFC) != 0)
    {
      v31 = 0;
      v32 = *v13;
    }
    if ((v32 | v31) == 0xFFFFFFFF)
      goto LABEL_12;
  }
  if (v14)
    v33 = v19;
  else
    v33 = v18 + 5;
  memcpy(v12, v13, v33);
  return a1;
}

uint64_t sub_1B09579D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_DWORD *, uint64_t, uint64_t);
  int v21;
  int v22;
  size_t v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  void (*v31)(_DWORD *, uint64_t);
  void (*v32)(_DWORD *, _DWORD *, uint64_t);
  void (*v33)(_DWORD *, _DWORD *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 3) + *(_QWORD *)(v6 + 64);
  v11 = (_DWORD *)((v10 + a1) & ~(v9 | 3));
  v12 = (_DWORD *)((v10 + a2) & ~(v9 | 3));
  v13 = *(unsigned int *)(v8 + 84);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = v14 + v9;
  v16 = ((v14 + v9) & ~v9) + v14 + 3;
  v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  v18 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  v35 = v16;
  v36 = ~v9;
  v37 = v11;
  if (!(_DWORD)v13)
  {
    if (*((_BYTE *)v11 + v18))
    {
      v25 = *((unsigned __int8 *)v11 + v18) - 1;
      if ((_DWORD)v18)
      {
        v25 = 0;
        v26 = *v11;
      }
      else
      {
        v26 = 0;
      }
      if ((v26 | v25) != 0xFFFFFFFF)
      {
        if (*((_BYTE *)v12 + v18))
        {
          v27 = *((unsigned __int8 *)v12 + v18) - 1;
          if ((_DWORD)v18)
          {
            v27 = 0;
            v28 = *v12;
          }
          else
          {
            v28 = 0;
          }
          if ((v28 | v27) != 0xFFFFFFFF)
            goto LABEL_4;
        }
        goto LABEL_30;
      }
    }
    if (!*((_BYTE *)v12 + v18))
    {
LABEL_27:
      v32 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(v8 + 40);
      v32(v37, v12, v7);
      v32((_DWORD *)(((unint64_t)v37 + v15) & v36), (_DWORD *)(((unint64_t)v12 + v15) & v36), v7);
      *(_DWORD *)(((unint64_t)v37 + v35) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v12 + v35) & 0xFFFFFFFFFFFFFCLL);
      return a1;
    }
    v29 = *((unsigned __int8 *)v12 + v18) - 1;
    if ((_DWORD)v18)
    {
      v29 = 0;
      v30 = *v12;
    }
    else
    {
      v30 = 0;
    }
    v22 = (v30 | v29) + 1;
LABEL_21:
    if (v22)
    {
      v31 = *(void (**)(_DWORD *, uint64_t))(v8 + 8);
      v31(v37, v7);
      v31((_DWORD *)(((unint64_t)v37 + v15) & v36), v7);
      if ((_DWORD)v13)
        v23 = v18;
      else
        v23 = v17 + 5;
      v24 = v37;
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  v19 = a1;
  v20 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v8 + 48);
  v21 = v20(v11, v13, v7);
  v22 = v20(v12, v13, v7);
  a1 = v19;
  if (!v21)
    goto LABEL_21;
  v11 = v37;
  if (v22)
  {
LABEL_4:
    if ((_DWORD)v13)
      v23 = v18;
    else
      v23 = v17 + 5;
    v24 = v11;
LABEL_26:
    memcpy(v24, v12, v23);
    return a1;
  }
LABEL_30:
  v33 = *(void (**)(_DWORD *, _DWORD *, uint64_t))(v8 + 32);
  v33(v11, v12, v7);
  v33((_DWORD *)(((unint64_t)v11 + v15) & v36), (_DWORD *)(((unint64_t)v12 + v15) & v36), v7);
  *(_DWORD *)(((unint64_t)v11 + v35) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v12 + v35) & 0xFFFFFFFFFFFFFCLL);
  if (!(_DWORD)v13)
    *((_BYTE *)v11 + v18) = 0;
  return a1;
}

uint64_t sub_1B0957C5C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t result;
  int v21;
  BOOL v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  if (v8 <= v5)
    v9 = *(_DWORD *)(v4 + 84);
  else
    v9 = v8;
  if (v7)
    v10 = 4;
  else
    v10 = 5;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = v11 | 3;
  v13 = (v11 | 3) + *(_QWORD *)(v4 + 64);
  v14 = a2 - v9;
  if (a2 <= v9)
    goto LABEL_27;
  v15 = (v13 & ~v12) + v10 + ((*(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v6 + 64) + v11) & ~v11) + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v16 = 8 * v15;
  if (v15 > 3)
  {
LABEL_16:
    v18 = *((unsigned __int8 *)a1 + v15);
    if (!*((_BYTE *)a1 + v15))
      goto LABEL_27;
LABEL_19:
    v19 = (v18 - 1) << v16;
    if (v15 >= 4)
      v19 = 0;
    if ((_DWORD)v15)
    {
      if ((_DWORD)v15 == 1)
        LODWORD(v15) = *(unsigned __int8 *)a1;
      else
        LODWORD(v15) = *a1;
    }
    return v9 + (v15 | v19) + 1;
  }
  v17 = ((v14 + ~(-1 << v16)) >> v16) + 1;
  if (HIWORD(v17))
  {
    v18 = *(_DWORD *)((char *)a1 + v15);
    if (v18)
      goto LABEL_19;
  }
  else if (v17 > 0xFF)
  {
    v18 = *(unsigned __int16 *)((char *)a1 + v15);
    if (*(_WORD *)((char *)a1 + v15))
      goto LABEL_19;
  }
  else if (v17 >= 2)
  {
    goto LABEL_16;
  }
LABEL_27:
  if (!v9)
    return 0;
  if (v5 >= v8)
    return (*(uint64_t (**)(void))(v4 + 48))();
  if (!v7)
    return 0;
  v21 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)a1 + v13) & ~v12);
  v22 = v21 != 0;
  result = (v21 - 1);
  if ((_DWORD)result == 0 || !v22)
    return 0;
  return result;
}

void sub_1B0957DB8(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= *(_DWORD *)(v7 + 84))
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = ((v12 | 3) + *(_QWORD *)(v7 + 64)) & ~(v12 | 3);
  v14 = (*(_QWORD *)(v8 + 64) + ((*(_QWORD *)(v8 + 64) + v12) & ~v12) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 + 4;
  v16 = v14 + 5;
  if (v9)
    v17 = v15;
  else
    v17 = v16;
  v18 = v17 + v13;
  v19 = a3 >= v11;
  v20 = a3 - v11;
  if (v20 != 0 && v19)
  {
    if (v18 > 3)
    {
      v6 = 1u;
      if (v11 < a2)
        goto LABEL_20;
      goto LABEL_28;
    }
    v21 = ((v20 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v21))
    {
      v6 = 4u;
      if (v11 < a2)
      {
LABEL_20:
        v22 = ~v11 + a2;
        if (v18 < 4)
        {
          if (!(_DWORD)v18)
            goto LABEL_26;
          v22 &= ~(-1 << (8 * v18));
          bzero(a1, v18);
          if ((_DWORD)v18 == 1)
          {
            *a1 = v22;
            goto LABEL_26;
          }
        }
        else
        {
          bzero(a1, v18);
        }
        *(_DWORD *)a1 = v22;
LABEL_26:
        __asm { BR              X10 }
      }
LABEL_28:
      __asm { BR              X0 }
    }
    if (v21 >= 0x100)
      v6 = 2;
    else
      v6 = v21 > 1;
  }
  if (v11 < a2)
    goto LABEL_20;
  goto LABEL_28;
}

void sub_1B0957F4C(int a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  size_t v25;
  _BYTE *v26;
  int v27;
  int v28;
  void (*v29)(_BYTE *);
  _BYTE *v30;

  v23[v24] = 0;
  if (!a2)
    return;
  if (v16 >= v20)
  {
    v29 = *(void (**)(_BYTE *))(v21 + 56);
    v30 = v23;
LABEL_11:
    v29(v30);
    return;
  }
  v26 = (_BYTE *)((unint64_t)&v23[v22] & v18);
  if (v20 < a2)
  {
    if (v25 < 4)
      v27 = ~(-1 << (8 * v25));
    else
      v27 = -1;
    if ((_DWORD)v25)
    {
      v28 = v27 & (~v20 + a2);
      bzero(v26, v25);
      if ((_DWORD)v25 == 1)
      {
        *v26 = v28;
        return;
      }
LABEL_15:
      *(_DWORD *)v26 = v28;
      return;
    }
    return;
  }
  if (a2 + 1 > a3)
  {
    if (!(_DWORD)v17)
      return;
    v28 = a2 - a3;
    bzero(v26, v17);
    goto LABEL_15;
  }
  if (a2 != -1)
  {
    v29 = *(void (**)(_BYTE *))(v19 + 56);
    v30 = v26;
    goto LABEL_11;
  }
}

_UNKNOWN **sub_1B095804C()
{
  return &protocol witness table for CollectionGlyphSubset<A>;
}

uint64_t sub_1B0958058@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_1B094C08C(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

ValueMetadata *type metadata accessor for IntegerNotRepresentableError()
{
  return &type metadata for IntegerNotRepresentableError;
}

void sub_1B0958088()
{
  off_1EEEBC188 = &unk_1E61907A0;
}

ValueMetadata *type metadata accessor for RangeError()
{
  return &type metadata for RangeError;
}

uint64_t sub_1B09580AC(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  void (*v11)(_QWORD *__return_ptr, _QWORD *);
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  __int128 v29;
  void (*v31)(__int128 *__return_ptr, _QWORD *);
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;

  v2 = *(_OWORD *)(a1 + 16);
  v47[0] = *(_OWORD *)a1;
  v47[1] = v2;
  v48 = *(_QWORD *)(a1 + 32);
  v3 = *((_QWORD *)&v47[0] + 1);
  if ((*((_QWORD *)&v47[0] + 1) & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    sub_1B08A38A0();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9D8];
    if (!*((_QWORD *)&v47[0] + 1))
      return v4;
    v49 = MEMORY[0x1E0DEE9D8];
    sub_1B08E8474(0, *((int64_t *)&v47[0] + 1), 0);
    v5 = 0;
    v4 = v49;
    v29 = v47[0];
    while (1)
    {
      if (v3 == v5)
      {
        __break(1u);
        goto LABEL_12;
      }
      if ((unsigned __int128)(v5 * (__int128)(uint64_t)v29) >> 64 != (v5 * (uint64_t)v29) >> 63)
        goto LABEL_13;
      v31 = *(void (**)(__int128 *__return_ptr, _QWORD *))(a1 + 80);
      v6 = *(_OWORD *)(a1 + 56);
      v44 = *(_OWORD *)(a1 + 40);
      v45 = v6;
      v46 = *(_BYTE *)(a1 + 72);
      sub_1B092CD34((uint64_t)&v44);
      swift_retain();
      sub_1B092CD5C((uint64_t)v47);
      v7 = sub_1B0A1D084();
      if (v1)
        break;
      v32 = v4;
      v11 = (void (*)(_QWORD *__return_ptr, _QWORD *))*((_QWORD *)&v44 + 1);
      v10 = v44;
      v39 = v7;
      v40 = v8;
      v41 = v9;
      v34 = v7;
      v35 = v8;
      v36 = v9;
      swift_bridgeObjectRetain_n();
      v13 = (unsigned __int16)sub_1B08C15A4(&v34, v12, v10 & 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v15 = (unsigned __int16)sub_1B08C15A4(&v34, v14, HIBYTE(v10) & 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = v13;
      v17 = v15;
      v18 = v34;
      v19 = v35;
      v20 = v36;
      v37[0] = v16;
      v37[1] = v17;
      v11(v38, v37);
      swift_bridgeObjectRelease();
      v21 = v38[0];
      v22 = v38[1];
      v39 = v18;
      v40 = v19;
      v41 = v20;
      v24 = sub_1B08C7B48(&v39, v23, *((uint64_t *)&v45 + 1), v46);
      swift_bridgeObjectRelease();
      v42[0] = v21;
      v42[1] = v22;
      v42[2] = v24;
      v31(&v43, v42);
      v4 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B08AE40C((uint64_t)v47);
      sub_1B092CD84((uint64_t)&v44);
      swift_release();
      v25 = v43;
      v49 = v32;
      v27 = *(_QWORD *)(v32 + 16);
      v26 = *(_QWORD *)(v32 + 24);
      v3 = *((_QWORD *)&v29 + 1);
      if (v27 >= v26 >> 1)
      {
        v33 = v43;
        sub_1B08E8474((char *)(v26 > 1), v27 + 1, 1);
        v25 = v33;
        v4 = v49;
      }
      ++v5;
      *(_QWORD *)(v4 + 16) = v27 + 1;
      *(_OWORD *)(v4 + 16 * v27 + 32) = v25;
      if (*((_QWORD *)&v29 + 1) == v5)
        return v4;
    }
    sub_1B08AE40C((uint64_t)v47);
    sub_1B092CD84((uint64_t)&v44);
    swift_release();
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B0958534(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  char v37;

  v2 = *(_OWORD *)(a1 + 16);
  v35[0] = *(_OWORD *)a1;
  v35[1] = v2;
  v36 = *(_QWORD *)(a1 + 32);
  v3 = *((_QWORD *)&v35[0] + 1);
  if ((*((_QWORD *)&v35[0] + 1) & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    sub_1B08A38A0();
    swift_allocError();
    swift_willThrow();
LABEL_19:
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v4 = v1;
  result = MEMORY[0x1E0DEE9D8];
  if (*((_QWORD *)&v35[0] + 1))
  {
    v31 = MEMORY[0x1E0DEE9D8];
    sub_1B08E8474(0, *((int64_t *)&v35[0] + 1), 0);
    v7 = 0;
    result = v31;
    v23 = *(_QWORD *)&v35[0];
    while (1)
    {
      if (v3 == v7)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      v24 = result;
      if ((unsigned __int128)(v7 * (__int128)v23) >> 64 != (v7 * v23) >> 63)
        goto LABEL_17;
      v8 = *(_OWORD *)(a1 + 56);
      v32 = *(_OWORD *)(a1 + 40);
      v33 = v8;
      v34 = *(_QWORD *)(a1 + 72);
      sub_1B092CDAC((uint64_t)&v32);
      sub_1B092CD5C((uint64_t)v35);
      v9 = sub_1B0A1D084();
      if (v4)
        break;
      v12 = *((_QWORD *)&v32 + 1);
      v37 = v33;
      v13 = v32 & 1;
      *(_QWORD *)&v27 = v9;
      *((_QWORD *)&v27 + 1) = v10;
      v28 = v11;
      *(_QWORD *)&v25 = v9;
      *((_QWORD *)&v25 + 1) = v10;
      v26 = v11;
      swift_bridgeObjectRetain_n();
      v15 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v25, v14, v13);
      swift_bridgeObjectRelease();
      v27 = v25;
      v28 = v26;
      v17 = sub_1B08C7B48((uint64_t *)&v27, v16, v12, v37);
      swift_bridgeObjectRelease();
      v29[0] = v15;
      v29[1] = v17;
      (*((void (**)(uint64_t *__return_ptr, _QWORD *))&v33 + 1))(&v30, v29);
      v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B08AE40C((uint64_t)v35);
      sub_1B092CDD4((uint64_t)&v32);
      v18 = v30;
      v19 = v30 + 1;
      if (__OFADD__(v30, 1))
        goto LABEL_14;
      if (v19 < v30)
        goto LABEL_15;
      result = v24;
      v31 = v24;
      v21 = *(_QWORD *)(v24 + 16);
      v20 = *(_QWORD *)(v24 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1B08E8474((char *)(v20 > 1), v21 + 1, 1);
        result = v31;
      }
      ++v7;
      *(_QWORD *)(result + 16) = v21 + 1;
      v22 = result + 16 * v21;
      *(_QWORD *)(v22 + 32) = v18;
      *(_QWORD *)(v22 + 40) = v19;
      if (v3 == v7)
        return result;
    }
    sub_1B08AE40C((uint64_t)v35);
    sub_1B092CDD4((uint64_t)&v32);
    goto LABEL_19;
  }
  return result;
}

void GlyphMetadataTable.subscript.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29[8];
  int *(*v30)@<X0>(int *@<X0>, uint64_t@<X8>);
  uint64_t v31;
  unsigned int *(*v32)@<X0>(unsigned int *@<X0>, uint64_t@<X8>);
  uint64_t v33;
  char v34;
  int *(*v35)@<X0>(int *@<X0>, uint64_t@<X8>);
  uint64_t v36;
  unsigned int *(*v37)@<X0>(unsigned int *@<X0>, uint64_t@<X8>);
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *(*v41)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v42;
  char v43;
  unsigned __int8 *(**(*v44)@<X0>(unsigned __int8 *(**)@<X0>(unsigned __int8 *@<X0>, uint64_t@<X8>)@<X0>, unsigned __int8 *(**)@<X0>(unsigned __int8 *@<X0>, uint64_t@<X8>)@<X8>))@<X0>(unsigned __int8 *@<X0>, uint64_t@<X8>);
  uint64_t v45;
  uint64_t (*v46)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;
  char v53;
  int *(*v54)@<X0>(int *@<X0>, uint64_t@<X8>);
  uint64_t v55;
  unsigned int *(*v56)@<X0>(unsigned int *@<X0>, uint64_t@<X8>);
  uint64_t v57;
  char v58;
  int *(*v59)@<X0>(int *@<X0>, uint64_t@<X8>);
  uint64_t v60;
  unsigned int *(*v61)@<X0>(unsigned int *@<X0>, uint64_t@<X8>);
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t *(*v65)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v66;

  v2 = (uint64_t *)v1;
  v4 = *(_OWORD *)(v1 + 72);
  v5 = *(_OWORD *)(v1 + 104);
  v50 = *(_OWORD *)(v1 + 88);
  v51 = v5;
  v52 = *(_BYTE *)(v1 + 120);
  v48 = *(_OWORD *)(v1 + 56);
  v49 = v4;
  sub_1B0958E98();
  v7 = 0;
  if ((v8 & 1) != 0)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    if ((v6 & 0x8000000000000000) == 0)
    {
      v53 = 1;
      v54 = sub_1B0959AC8;
      v55 = 0;
      v56 = sub_1B0959AE4;
      v57 = 0;
      v58 = 1;
      v59 = sub_1B0959AC8;
      v60 = 0;
      v61 = sub_1B0959AE4;
      v62 = 0;
      v63 = *v2;
      v64 = 1;
      v65 = sub_1B0959B00;
      v66 = 0;
      v29[0] = 1;
      v30 = sub_1B0959AC8;
      v31 = 0;
      v32 = sub_1B0959AE4;
      v33 = 0;
      v34 = 1;
      v35 = sub_1B0959AC8;
      v36 = 0;
      v37 = sub_1B0959AE4;
      v38 = 0;
      v39 = v63;
      v40 = 1;
      v41 = sub_1B0959B00;
      v42 = 0;
      v43 = 1;
      v44 = sub_1B0959C0C;
      v45 = 0;
      v46 = sub_1B0959C2C;
      v47 = 0;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v27 = sub_1B0A1D084();
      *((_QWORD *)&v27 + 1) = v15;
      v28 = v16;
      swift_bridgeObjectRetain_n();
      sub_1B08C59B0(&v26, (uint64_t)&v27, v17, (uint64_t)&v21);
      v7 = v21;
      v9 = BYTE8(v21);
      v10 = v22;
      v20 = v23;
      v19 = v24;
      v12 = v25;
      v13 = v26;
      v21 = v27;
      v22 = v28;
      swift_bridgeObjectRetain();
      v14 = sub_1B097054C(&v21, 1, (void (*)(__int128 *__return_ptr, uint64_t *))sub_1B0959C0C, 0, v18);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B08E1F04((uint64_t)v29);
      v11 = v20 | (v19 << 8);
    }
  }
  *a1 = v7;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  a1[4] = v12;
  a1[5] = v13;
  a1[6] = v14;
}

_QWORD *sub_1B0958B20@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = result[1];
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else if (v4 >= *result)
  {
    *a2 = *result;
    a2[1] = v4;
    return result;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1B0958B48@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B0921F84(a1, a2);
}

void GlyphMetadataTable.glyphRanges.getter()
{
  sub_1B0958BA4();
}

void sub_1B0958BA4()
{
  uint64_t v0;
  _BYTE v1[72];
  _BYTE v2[184];

  sub_1B095CC70(v0, (uint64_t)v1);
  sub_1B095CC70((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_1B0958BF4()
{
  uint64_t result;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7E0);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1B0A363D0;
  if (v1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1B0958E74);
  }
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v1;
  return result;
}

void sub_1B0958E98()
{
  uint64_t v0;
  _BYTE v1[176];
  _BYTE v2[120];

  sub_1B095CC70(v0, (uint64_t)v1);
  sub_1B095CC70((uint64_t)v1, (uint64_t)v2);
  __asm { BR              X10 }
}

uint64_t sub_1B0958EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B095CC98(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1B08E049C);
  v2 = sub_1B0959F14(v1);
  sub_1B095CC98(v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1B08CDEBC);
  return v2;
}

uint64_t sub_1B0959364()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC260);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC268);
  sub_1B08CE2D8(&qword_1EEEBC270, &qword_1EEEBC260, MEMORY[0x1E0D65BE8]);
  sub_1B08CE2D8(qword_1EEEBC278, &qword_1EEEBC268, MEMORY[0x1E0D65C60]);
  sub_1B0A1D0C0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B0959458@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(char *, uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  id v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v44 = a6;
  v45 = a7;
  v43 = a5;
  v46 = a4;
  v52 = a2;
  v53 = a3;
  v51 = a1;
  v54 = a8;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC248);
  MEMORY[0x1E0C80A78](v49);
  v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8D0);
  MEMORY[0x1E0C80A78](v47);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8E0);
  v12 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8D8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (void (**)(char *, uint64_t))((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v41 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8C8);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC250);
  MEMORY[0x1E0C80A78](v48);
  v26 = (uint64_t *)((char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = v24;
  if (v24 == 2)
  {
    v33 = (_QWORD *)swift_allocObject();
    v34 = v45;
    v35 = v43;
    v33[2] = v46;
    v33[3] = v35;
    v33[4] = v44;
    v33[5] = v34;
    *v11 = 1;
    *((_QWORD *)v11 + 1) = sub_1B095CE2C;
    *((_QWORD *)v11 + 2) = v33;
    *((_QWORD *)v11 + 3) = sub_1B095A0D4;
    *((_QWORD *)v11 + 4) = 0;
    swift_storeEnumTagMultiPayload();
    sub_1B08CE4D4((uint64_t)v11, (uint64_t)v26, &qword_1EEEBA8D0);
    swift_storeEnumTagMultiPayload();
    v31 = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v24 != 1)
    {
      sub_1B08ABB40();
      v36 = (void *)swift_allocError();
      *v37 = 11;
      *v26 = v36;
      v26[1] = 0;
      v26[2] = 0;
      v26[3] = 0xE000000000000000;
      v26[4] = v36;
      swift_storeEnumTagMultiPayload();
      v31 = v53;
      swift_bridgeObjectRetain();
      v38 = v36;
      goto LABEL_7;
    }
    sub_1B0A1D09C();
    v27 = (char *)v17 + *(int *)(v15 + 52);
    v28 = v12;
    v29 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v30 = v42;
    v29(v27, v14, v42);
    *v17 = v46;
    v46 = *(void (**)(char *, uint64_t))(v28 + 8);
    v31 = v53;
    swift_bridgeObjectRetain();
    v46(v14, v30);
    sub_1B08CE970((uint64_t)v17, (uint64_t)v20, &qword_1EEEBA8D8);
    sub_1B08CE4D4((uint64_t)v20, (uint64_t)v23, &qword_1EEEBA8D8);
    v32 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v23[*(int *)(v21 + 44)];
    *v32 = sub_1B09598A8;
    v32[1] = 0;
    sub_1B08AE3C4((uint64_t)v20, &qword_1EEEBA8D8);
    sub_1B08CE4D4((uint64_t)v23, (uint64_t)v11, &qword_1EEEBA8C8);
    swift_storeEnumTagMultiPayload();
    sub_1B08AE3C4((uint64_t)v23, &qword_1EEEBA8C8);
    sub_1B08CE4D4((uint64_t)v11, (uint64_t)v26, &qword_1EEEBA8D0);
    swift_storeEnumTagMultiPayload();
  }
  sub_1B08AE3C4((uint64_t)v11, &qword_1EEEBA8D0);
LABEL_7:
  sub_1B08CE4D4((uint64_t)v26, (uint64_t)v9 + *(int *)(v49 + 52), &qword_1EEEBC250);
  v39 = v51;
  *v9 = v50;
  v9[1] = v39;
  v9[2] = v52;
  v9[3] = v31;
  sub_1B08AE3C4((uint64_t)v26, &qword_1EEEBC250);
  return sub_1B08CE970((uint64_t)v9, v54, &qword_1EEEBC248);
}

uint64_t sub_1B09598A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v2;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_BYTE *)(a2 + 64) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t GlyphInfo.codePoints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GlyphInfo.codePoints.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*GlyphInfo.codePoints.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t GlyphInfo.glyphIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GlyphInfo.glyphIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*GlyphInfo.glyphIdentifiers.modify())(_QWORD)
{
  return nullsub_1;
}

BOOL GlyphInfo.isCanonical.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  if (*(uint64_t *)(v0 + 32) >= 2)
    return *(char *)(v0 + 25) < 0;
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = (unint64_t *)(v1 + 32);
  while (1)
  {
    v5 = *v3;
    v3 += 3;
    v4 = v5;
    if (v5 >> 61 == 3)
      break;
    if (!--v2)
      return 0;
  }
  return (v4 >> 7) & 1;
}

uint64_t static GlyphInfoFlags.isCanonical.getter()
{
  return 128;
}

uint64_t GlyphInfo.findName(kind:)(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  for (i = v2 + 48; *(_QWORD *)(i - 16) >> 61 || *(_QWORD *)(i - 16) != a1; i += 24)
  {
    if (!--v3)
      return 0;
  }
  v6 = *(_QWORD *)(i - 8);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t GlyphInfo.findCID(kind:)(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  for (i = v2 + 40; *(_QWORD *)(i - 8) >> 61 != 1 || *(_QWORD *)(i - 8) != a1; i += 24)
  {
    if (!--v3)
      return 0;
  }
  return *(_QWORD *)i;
}

uint64_t GlyphInfo.findStringIndex(kind:)(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  for (i = v2 + 40; *(_QWORD *)(i - 8) >> 61 != 2 || *(_QWORD *)(i - 8) != a1; i += 24)
  {
    if (!--v3)
      return 0;
  }
  return *(_QWORD *)i;
}

int *sub_1B0959AC8@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  BOOL v3;

  v2 = *result;
  v3 = *result == -1;
  if (*result == -1)
    v2 = 0;
  *(_DWORD *)a2 = v2;
  *(_BYTE *)(a2 + 4) = v3;
  return result;
}

unsigned int *sub_1B0959AE4@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 4);
  if (v3)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

uint64_t *sub_1B0959B00@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 24) = sub_1B0959B28;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t sub_1B0959B28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)a1 + 32;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  type metadata accessor for RefcountCheck();
  swift_allocObject();
  v5 = swift_retain();
  v6 = sub_1B0938300(v5, v3, v4, 0);
  swift_release();
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    result = swift_release();
    *a2 = v6;
  }
  else
  {
    result = sub_1B0A1D984();
    __break(1u);
  }
  return result;
}

unsigned __int8 *(**sub_1B0959C0C@<X0>(unsigned __int8 *(**result)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)@<X0>, unsigned __int8 *(**a2)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)@<X8>))@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *(*v2)@<X0>(unsigned __int8 *@<X0>, uint64_t@<X8>);

  v2 = *result;
  *a2 = sub_1B095CDF4;
  a2[1] = 0;
  a2[2] = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, uint64_t@<X8>))MEMORY[0x1E0DEE9D8];
  a2[3] = v2;
  return result;
}

uint64_t sub_1B0959C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 25);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 25) = v5;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t GlyphIdentifier.NameKind.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*GlyphIdentifier.NameKind.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t static GlyphIdentifier.NameKind.universalPostScriptName.getter()
{
  return 0;
}

uint64_t static GlyphIdentifier.NameKind.applePostScriptName.getter()
{
  return 1;
}

uint64_t static GlyphIdentifier.NameKind.adobePostScriptName.getter()
{
  return 2;
}

uint64_t static GlyphIdentifier.NameKind.afiiPostScriptName.getter()
{
  return 3;
}

uint64_t static GlyphIdentifier.NameKind.unicodeName.getter()
{
  return 4;
}

uint64_t GlyphIdentifier.CIDKind.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*GlyphIdentifier.CIDKind.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t static GlyphIdentifier.CIDKind.japanese.getter()
{
  return 64;
}

uint64_t static GlyphIdentifier.CIDKind.chineseTraditional.getter()
{
  return 65;
}

uint64_t static GlyphIdentifier.CIDKind.chineseSimplified.getter()
{
  return 66;
}

uint64_t static GlyphIdentifier.CIDKind.korean.getter()
{
  return 67;
}

uint64_t GlyphIdentifier.NameEntryKind.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*GlyphIdentifier.NameEntryKind.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t static GlyphIdentifier.NameEntryKind.history.getter()
{
  return 68;
}

uint64_t static GlyphIdentifier.NameEntryKind.shortName.getter()
{
  return 69;
}

uint64_t static GlyphIdentifier.NameEntryKind.longName.getter()
{
  return 70;
}

uint64_t static GlyphIdentifier.NameEntryKind.usageNotes.getter()
{
  return 71;
}

uint64_t static GlyphIdentifier.NameEntryKind.historicalNotes.getter()
{
  return 72;
}

uint64_t GlyphIdentifier.kind.getter(unint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1B0959D78 + 4 * byte_1B0A3B110[a1 >> 61]))();
}

unsigned __int8 *sub_1B0959D84@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *(*v3)@<X0>(unsigned __int8 *@<X0>, uint64_t *@<X8>);
  __int16 v4;
  char v5;
  __int128 v6;
  _QWORD *(*v7)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v8;

  v2 = *result;
  if (v2 > 0x3F)
  {
    if (v2 > 0x43)
    {
      if (v2 > 0x7E)
      {
        if ((_DWORD)v2 == 127)
        {
          v7 = 0;
          v5 = 0;
          v6 = xmmword_1B0A3B0F0;
          v4 = 256;
          v3 = sub_1B0959EE0;
          v2 = 1;
          v8 = (uint64_t)sub_1B0959ED0;
        }
        else
        {
          v8 = 0;
          v7 = 0;
          v3 = 0;
          v4 = 0;
          v2 |= 0x8000000000000000;
          v6 = 0uLL;
          v5 = 1;
        }
      }
      else
      {
        v7 = 0;
        v3 = 0;
        v5 = 0;
        v2 |= 0x100uLL;
        v6 = 0uLL;
        v4 = 256;
        v8 = (uint64_t)sub_1B0959EB8;
      }
    }
    else
    {
      v7 = 0;
      v3 = 0;
      v5 = 0;
      v2 |= 0x100uLL;
      v6 = 0uLL;
      v4 = 1;
      v8 = (uint64_t)sub_1B0959EA0;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    *((_QWORD *)&v6 + 1) = 0;
    *(_QWORD *)&v6 = sub_1B0959E7C;
    v7 = sub_1B08A0FC4;
    v8 = 1;
  }
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = v6;
  *(_WORD *)(a2 + 48) = v4;
  *(_BYTE *)(a2 + 50) = v5;
  return result;
}

uint64_t sub_1B0959E7C@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  *a2 = v2;
  a2[1] = v4;
  a2[2] = v3;
  return swift_bridgeObjectRetain();
}

unsigned __int8 *sub_1B0959EA0@<X0>(unsigned __int8 *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  *a2 = *result | 0x2000000000000000;
  a2[1] = v2;
  a2[2] = 0;
  return result;
}

unsigned __int8 *sub_1B0959EB8@<X0>(unsigned __int8 *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  *a2 = *result | 0x4000000000000000;
  a2[1] = v2;
  a2[2] = 0;
  return result;
}

uint64_t sub_1B0959ED0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 1) & 0x80;
  return result;
}

unsigned __int8 *sub_1B0959EE0@<X0>(unsigned __int8 *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v2 | 0x6000000000000000;
  return result;
}

uint64_t GlyphInfoFlags.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*GlyphInfoFlags.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1B0959F14(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7[10];

  if ((unint64_t)(result - 0x2000000000000000) >> 62 == 3)
  {
    v7[8] = v1;
    v7[9] = v2;
    v7[0] = sub_1B0A1D084();
    v7[1] = v3;
    v7[2] = v4;
    swift_bridgeObjectRetain();
    v6 = sub_1B08C1578(v7, v5, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B0959FDC(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __n128 (*v21)@<Q0>(__n128 *@<X0>, __n128 *@<X8>);
  uint64_t v22;

  v2 = *v1 - 4;
  if (__OFSUB__(*v1, 4))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v3 = result;
  v4 = v1[3];
  v5 = v1[4];
  v14 = *v1;
  v15 = *(_OWORD *)(v1 + 1);
  v13 = v15;
  v16 = v4;
  v17 = v5;
  v18 = 1;
  v19 = v2;
  v20 = 1;
  v21 = sub_1B095AFA8;
  v22 = 0;
  swift_bridgeObjectRetain();
  v6 = sub_1B0928DD0(v3, (uint64_t)&v14);
  if (v6 == v13)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v7 = v6;
  v8 = sub_1B095B2A8(v6);
  v10 = v9;
  result = swift_bridgeObjectRelease();
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
    goto LABEL_14;
  if (v11 < v8)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  if (v7 < v11)
    v12 = v10;
  else
    v12 = 0;
  if (v7 < v8)
    return 0;
  else
    return v12;
}

uint64_t sub_1B095A0D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v10;
  return sub_1B08E049C(v3, v2, v4, v5, v6, v7, v8, v9, v10);
}

id sub_1B095A130@<X0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t (**v37)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t (**v38)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  _QWORD *v45;
  id result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (**v51)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v52;
  uint64_t (**v53)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v54;
  uint64_t (**v55)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v64;
  uint64_t (**v65)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (**v69)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v70;
  uint64_t (**v71)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (**v77)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v78;
  uint64_t (**v79)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t (**v80)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _WORD *v114;
  _QWORD *v115;

  v98 = a4;
  v99 = a5;
  v97 = a3;
  v87 = a2;
  v114 = a1;
  v115 = a6;
  v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA960);
  MEMORY[0x1E0C80A78](v94);
  v95 = (uint64_t)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA940);
  MEMORY[0x1E0C80A78](v93);
  v96 = (uint64_t)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8E8);
  MEMORY[0x1E0C80A78](v104);
  v105 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA950);
  MEMORY[0x1E0C80A78](v86);
  v91 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA958);
  MEMORY[0x1E0C80A78](v89);
  v90 = (uint64_t)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA948);
  MEMORY[0x1E0C80A78](v88);
  v92 = (uint64_t)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA930);
  MEMORY[0x1E0C80A78](v106);
  v107 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC258);
  MEMORY[0x1E0C80A78](v13);
  v109 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA938);
  MEMORY[0x1E0C80A78](v108);
  v110 = (uint64_t)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA928);
  MEMORY[0x1E0C80A78](v100);
  v102 = (uint64_t)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA910);
  MEMORY[0x1E0C80A78](v84);
  v85 = (uint64_t)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8F0);
  MEMORY[0x1E0C80A78](v101);
  v103 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8F8);
  MEMORY[0x1E0C80A78](v112);
  v113 = (uint64_t)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8E0);
  v20 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8D8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (uint64_t *)((char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v83 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA920);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA918);
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*v114)
  {
    case 0:
      sub_1B0A1D09C();
      v35 = (char *)v25 + *(int *)(v23 + 52);
      v36 = v111;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v35, v22, v111);
      *v25 = v87;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v36);
      sub_1B08CE970((uint64_t)v25, (uint64_t)v28, &qword_1EEEBA8D8);
      sub_1B08CE4D4((uint64_t)v28, (uint64_t)v31, &qword_1EEEBA8D8);
      v37 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v31[*(int *)(v29 + 44)];
      *v37 = sub_1B095AF08;
      v37[1] = 0;
      sub_1B08AE3C4((uint64_t)v28, &qword_1EEEBA8D8);
      sub_1B08CE4D4((uint64_t)v31, (uint64_t)v34, &qword_1EEEBA920);
      v38 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v34[*(int *)(v32 + 44)];
      *v38 = sub_1B09598A8;
      v38[1] = 0;
      sub_1B08AE3C4((uint64_t)v31, &qword_1EEEBA920);
      v39 = v103;
      sub_1B08CE4D4((uint64_t)v34, v103, &qword_1EEEBA918);
      swift_storeEnumTagMultiPayload();
      sub_1B08AE3C4((uint64_t)v34, &qword_1EEEBA918);
      v40 = &qword_1EEEBA8F0;
      v41 = v113;
      sub_1B08CE4D4(v39, v113, &qword_1EEEBA8F0);
      swift_storeEnumTagMultiPayload();
      v42 = v39;
      goto LABEL_9;
    case 2:
      sub_1B0A1D09C();
      v47 = (uint64_t)v107;
      v48 = v111;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(&v107[*(int *)(v106 + 52)], v22, v111);
      *(_BYTE *)v47 = 1;
      *(_QWORD *)(v47 + 8) = sub_1B095B0E8;
      *(_QWORD *)(v47 + 16) = 0;
      *(_DWORD *)(v47 + 24) = 16843009;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v48);
      v49 = v109;
      sub_1B08CE970(v47, v109, &qword_1EEEBA930);
      v50 = v110;
      sub_1B08CE4D4(v49, v110, &qword_1EEEBC258);
      v51 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v50 + *(int *)(v108 + 44));
      *v51 = sub_1B095AFB4;
      v51[1] = 0;
      sub_1B08AE3C4(v49, &qword_1EEEBC258);
      v52 = v102;
      sub_1B08CE4D4(v50, v102, &qword_1EEEBA938);
      v53 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v52 + *(int *)(v100 + 44));
      *v53 = sub_1B095AF44;
      v53[1] = 0;
      sub_1B08AE3C4(v50, &qword_1EEEBA938);
      v54 = v85;
      sub_1B08CE4D4(v52, v85, &qword_1EEEBA928);
      v55 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v54 + *(int *)(v84 + 44));
      *v55 = sub_1B095AE04;
      v55[1] = 0;
      sub_1B08AE3C4(v52, &qword_1EEEBA928);
      v56 = v103;
      sub_1B08CE4D4(v54, v103, &qword_1EEEBA910);
      swift_storeEnumTagMultiPayload();
      sub_1B08AE3C4(v54, &qword_1EEEBA910);
      v40 = &qword_1EEEBA8F0;
      v41 = v113;
      sub_1B08CE4D4(v56, v113, &qword_1EEEBA8F0);
      goto LABEL_8;
    case 4:
      sub_1B0A1D09C();
      v57 = (uint64_t)v107;
      v58 = v111;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(&v107[*(int *)(v106 + 52)], v22, v111);
      *(_BYTE *)v57 = 1;
      *(_QWORD *)(v57 + 8) = sub_1B095B0E8;
      *(_QWORD *)(v57 + 16) = 0;
      *(_DWORD *)(v57 + 24) = 16843009;
      v59 = *(void (**)(char *, uint64_t))(v20 + 8);
      v60 = v99;
      swift_bridgeObjectRetain();
      v59(v22, v58);
      v61 = v109;
      sub_1B08CE970(v57, v109, &qword_1EEEBA930);
      v62 = v110;
      sub_1B08CE4D4(v61, v110, &qword_1EEEBC258);
      v63 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v62 + *(int *)(v108 + 44));
      *v63 = sub_1B095AFB4;
      v63[1] = 0;
      sub_1B08AE3C4(v61, &qword_1EEEBC258);
      v64 = v102;
      sub_1B08CE4D4(v62, v102, &qword_1EEEBA938);
      v65 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v64 + *(int *)(v100 + 44));
      *v65 = sub_1B095AF44;
      v65[1] = 0;
      sub_1B08AE3C4(v62, &qword_1EEEBA938);
      v66 = v91;
      sub_1B08CE4D4(v64, (uint64_t)&v91[*(int *)(v86 + 52)], &qword_1EEEBA928);
      v67 = v98;
      *v66 = v97;
      v66[1] = v67;
      v66[2] = v60;
      sub_1B08AE3C4(v64, &qword_1EEEBA928);
      v68 = v90;
      sub_1B08CE4D4((uint64_t)v66, v90, &qword_1EEEBA950);
      v69 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v68 + *(int *)(v89 + 44));
      *v69 = sub_1B095AF58;
      v69[1] = 0;
      sub_1B08AE3C4((uint64_t)v66, &qword_1EEEBA950);
      v70 = v92;
      sub_1B08CE4D4(v68, v92, &qword_1EEEBA958);
      v71 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v70 + *(int *)(v88 + 44));
      *v71 = sub_1B095AE1C;
      v71[1] = 0;
      sub_1B08AE3C4(v68, &qword_1EEEBA958);
      v72 = &qword_1EEEBA948;
      v56 = v105;
      sub_1B08CE4D4(v70, v105, &qword_1EEEBA948);
      goto LABEL_7;
    case 6:
      sub_1B0A1D09C();
      v73 = (uint64_t)v107;
      v74 = v111;
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(&v107[*(int *)(v106 + 52)], v22, v111);
      *(_BYTE *)v73 = 1;
      *(_QWORD *)(v73 + 8) = sub_1B095B0E8;
      *(_QWORD *)(v73 + 16) = 0;
      *(_DWORD *)(v73 + 24) = 16843009;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v74);
      v75 = v109;
      sub_1B08CE970(v73, v109, &qword_1EEEBA930);
      v76 = v110;
      sub_1B08CE4D4(v75, v110, &qword_1EEEBC258);
      v77 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v76 + *(int *)(v108 + 44));
      *v77 = sub_1B095AFB4;
      v77[1] = 0;
      sub_1B08AE3C4(v75, &qword_1EEEBC258);
      v78 = v95;
      sub_1B08CE4D4(v76, v95, &qword_1EEEBA938);
      v79 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v78 + *(int *)(v94 + 44));
      *v79 = sub_1B095AF44;
      v79[1] = 0;
      sub_1B08AE3C4(v76, &qword_1EEEBA938);
      v70 = v96;
      sub_1B08CE4D4(v78, v96, &qword_1EEEBA960);
      v80 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v70 + *(int *)(v93 + 44));
      *v80 = sub_1B095AE74;
      v80[1] = 0;
      sub_1B08AE3C4(v78, &qword_1EEEBA960);
      v72 = &qword_1EEEBA940;
      v56 = v105;
      sub_1B08CE4D4(v70, v105, &qword_1EEEBA940);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      sub_1B08AE3C4(v70, v72);
      v40 = &qword_1EEEBA8E8;
      v41 = v113;
      sub_1B08CE4D4(v56, v113, &qword_1EEEBA8E8);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      v42 = v56;
LABEL_9:
      sub_1B08AE3C4(v42, v40);
      sub_1B08CE4D4(v41, (uint64_t)v115, &qword_1EEEBA8F8);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA900);
      swift_storeEnumTagMultiPayload();
      return (id)sub_1B08AE3C4(v41, &qword_1EEEBA8F8);
    case 8:
      v81 = v115;
      *v115 = 257;
      v81[1] = sub_1B0958B48;
      v81[2] = 0;
      v81[3] = sub_1B095AFDC;
      v81[4] = 0;
      v81[5] = sub_1B095AFB4;
      v81[6] = 0;
      v81[7] = sub_1B095AE8C;
      v81[8] = 0;
      v81[9] = 0;
      *((_WORD *)v81 + 40) = 0;
      goto LABEL_12;
    case 0xA:
      v82 = v115;
      *(_OWORD *)v115 = xmmword_1B0A3B100;
      v82[2] = sub_1B0958B48;
      v82[3] = 0;
      v82[4] = sub_1B095B050;
      v82[5] = 0;
      v82[6] = sub_1B095B0C0;
      v82[7] = 0;
      v82[8] = sub_1B095AED4;
      v82[9] = 0;
      *((_WORD *)v82 + 40) = 1;
LABEL_12:
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA900);
      result = (id)swift_storeEnumTagMultiPayload();
      break;
    default:
      sub_1B08ABB40();
      v43 = (void *)swift_allocError();
      *v44 = 12;
      v45 = v115;
      *v115 = v43;
      v45[1] = 0;
      v45[2] = 0;
      v45[3] = 0xE000000000000000;
      v45[4] = v43;
      *(_OWORD *)(v45 + 5) = 0u;
      *(_OWORD *)(v45 + 7) = 0u;
      *(_OWORD *)((char *)v45 + 65) = 0u;
      *((_BYTE *)v45 + 81) = 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA900);
      swift_storeEnumTagMultiPayload();
      result = v43;
      break;
  }
  return result;
}

uint64_t sub_1B095AE04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B095AEA4(a1, 1, a2);
}

uint64_t sub_1B095AE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = v3;
  *(_BYTE *)(a2 + 64) = 2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B095AE74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B095AEA4(a1, 3, a2);
}

uint64_t sub_1B095AE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B095AEA4(a1, 4, a2);
}

uint64_t sub_1B095AEA4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v4;
  *(_QWORD *)(a3 + 32) = v3;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B095AED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v2;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B095AF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 sub_1B095AF30@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  __n128 result;

  v2 = a1[1].n128_u64[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  return result;
}

uint64_t sub_1B095AF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B095AFB4(a1, a2);
}

uint64_t sub_1B095AF58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 sub_1B095AFA8@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B095AFB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = v2;
  return swift_bridgeObjectRetain();
}

_QWORD *sub_1B095AFDC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result[1];
  v3 = v2 - *result;
  if (__OFSUB__(v2, *result))
  {
    __break(1u);
  }
  else if (v3 + 0x4000000000000000 < 0)
  {
    sub_1B08A38A0();
    swift_allocError();
    return (_QWORD *)swift_willThrow();
  }
  else
  {
    *a2 = *result;
    a2[1] = v2;
    a2[2] = 2 * v3;
  }
  return result;
}

uint64_t sub_1B095B050@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result + 0x4000000000000000 < 0)
  {
    sub_1B08A38A0();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    *(_QWORD *)a2 = v2;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
    *(_QWORD *)(a2 + 24) = 2 * v2;
  }
  return result;
}

uint64_t sub_1B095B0C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v2;
  return swift_bridgeObjectRetain();
}

BOOL sub_1B095B0E8(_QWORD *a1)
{
  return *a1 > 5;
}

uint64_t sub_1B095B0FC(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[4];
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[2];
  char v13;
  _OWORD v14[2];
  uint64_t v15;

  v2 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  v14[1] = v2;
  v15 = *(_QWORD *)(v1 + 32);
  if ((unsigned __int128)(a1 * (__int128)*(uint64_t *)&v14[0]) >> 64 == (a1 * *(_QWORD *)&v14[0]) >> 63)
  {
    v3 = *(_OWORD *)(v1 + 56);
    v10[0] = *(_OWORD *)(v1 + 40);
    v10[1] = v3;
    v10[2] = *(_OWORD *)(v1 + 72);
    v11 = *(_QWORD *)(v1 + 88);
    v12[0] = v10[0];
    v12[1] = v3;
    v13 = *(_BYTE *)(v1 + 72);
    sub_1B092CD34((uint64_t)v12);
    swift_retain();
    sub_1B092CD5C((uint64_t)v14);
    v9[0] = sub_1B0A1D084();
    v9[1] = v4;
    v9[2] = v5;
    swift_bridgeObjectRetain();
    v7 = sub_1B08BF240((uint64_t)v9, (char *)v10, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B08AE40C((uint64_t)v14);
    sub_1B092CD84((uint64_t)v12);
    swift_release();
    return v7;
  }
  else
  {
    sub_1B08A38A0();
    swift_allocError();
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B095B2A8(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  v2 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v2;
  v14 = *(_QWORD *)(v1 + 32);
  if ((unsigned __int128)(a1 * (__int128)*(uint64_t *)&v13[0]) >> 64 == (a1 * *(_QWORD *)&v13[0]) >> 63)
  {
    v3 = *(_OWORD *)(v1 + 56);
    v11[0] = *(_OWORD *)(v1 + 40);
    v11[1] = v3;
    v12 = *(_QWORD *)(v1 + 72);
    sub_1B092CDAC((uint64_t)v11);
    sub_1B092CD5C((uint64_t)v13);
    *(_QWORD *)&v9 = sub_1B0A1D084();
    *((_QWORD *)&v9 + 1) = v4;
    v10 = v5;
    swift_bridgeObjectRetain();
    v7 = sub_1B08BF3E0(&v9, (uint64_t)v11, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B08AE40C((uint64_t)v13);
    sub_1B092CDD4((uint64_t)v11);
    return v7;
  }
  else
  {
    sub_1B08A38A0();
    swift_allocError();
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B095B414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v23 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  v24 = sub_1B0A1D0E4();
  v22 = *(_QWORD *)(v24 - 8);
  v12 = MEMORY[0x1E0C80A78](v24);
  v14 = (char *)&v20 - v13;
  v15 = (unsigned __int128)(a1 * (__int128)*v4) >> 64;
  v21 = a1 * *v4;
  if (v15 == v21 >> 63)
  {
    (*(void (**)(char *, uint64_t *, uint64_t, double))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2, v12);
    v16 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = (char *)swift_allocObject();
    *((_QWORD *)v17 + 2) = v10;
    *((_QWORD *)v17 + 3) = v11;
    *((_QWORD *)v17 + 4) = *(_QWORD *)(a2 + 32);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v17[v16], (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
    sub_1B0A1D0F0();
    swift_release();
    v18 = v24;
    MEMORY[0x1B5E0D530](MEMORY[0x1E0D65C60], v24);
    sub_1B0A1D0CC();
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v14, v18);
  }
  else
  {
    sub_1B08A38A0();
    swift_allocError();
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B095B630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[2];

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v20 - v10;
  v15 = type metadata accessor for BinarySearchLookup(0, v12, v13, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1 + *(int *)(v15 + 44), a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x1E0DEE9C0] + 8;
  MEMORY[0x1B5E0BBEC](v11, AssociatedTypeWitness, MEMORY[0x1E0DEE9C0] + 8, a2, a3);
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v11, a2);
  MEMORY[0x1B5E0BBE0](v8, AssociatedTypeWitness, v17, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v8, a2);
}

void sub_1B095B770(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1B095B778@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B090ADC4();
  *a1 = result;
  return result;
}

void (*sub_1B095B79C(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1B095B7F8(v6, *a2, a3);
  return sub_1B08E0E54;
}

void (*sub_1B095B7F8(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  sub_1B095B414(a2, a3, (uint64_t)v8);
  return sub_1B08E0EEC;
}

uint64_t sub_1B095B880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  MEMORY[0x1B5E0D530]("!Hw58H\a", a1);
  result = sub_1B0A1D90C();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_1B095B8E0(uint64_t a1)
{
  MEMORY[0x1B5E0D530]("!Hw58H\a", a1);
  return sub_1B0A1D5E8();
}

uint64_t sub_1B095B914(uint64_t a1)
{
  MEMORY[0x1B5E0D530]("!Hw58H\a", a1);
  return sub_1B0A1D5F4();
}

unint64_t sub_1B095B94C()
{
  unint64_t result;

  result = qword_1EEEBC190;
  if (!qword_1EEEBC190)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphIdentifier.NameKind, &type metadata for GlyphIdentifier.NameKind);
    atomic_store(result, (unint64_t *)&qword_1EEEBC190);
  }
  return result;
}

unint64_t sub_1B095B994()
{
  unint64_t result;

  result = qword_1EEEBC198;
  if (!qword_1EEEBC198)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphIdentifier.CIDKind, &type metadata for GlyphIdentifier.CIDKind);
    atomic_store(result, (unint64_t *)&qword_1EEEBC198);
  }
  return result;
}

unint64_t sub_1B095B9DC()
{
  unint64_t result;

  result = qword_1EEEBC1A0;
  if (!qword_1EEEBC1A0)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphIdentifier.NameEntryKind, &type metadata for GlyphIdentifier.NameEntryKind);
    atomic_store(result, (unint64_t *)&qword_1EEEBC1A0);
  }
  return result;
}

unint64_t sub_1B095BA24()
{
  unint64_t result;

  result = qword_1EEEBC1A8;
  if (!qword_1EEEBC1A8)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphInfoFlags, &type metadata for GlyphInfoFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBC1A8);
  }
  return result;
}

unint64_t sub_1B095BA6C()
{
  unint64_t result;

  result = qword_1EEEBC1B0;
  if (!qword_1EEEBC1B0)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphInfoFlags, &type metadata for GlyphInfoFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBC1B0);
  }
  return result;
}

unint64_t sub_1B095BAB4()
{
  unint64_t result;

  result = qword_1EEEBC1B8;
  if (!qword_1EEEBC1B8)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphInfoFlags, &type metadata for GlyphInfoFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBC1B8);
  }
  return result;
}

unint64_t sub_1B095BAFC()
{
  unint64_t result;

  result = qword_1EEEBC1C0;
  if (!qword_1EEEBC1C0)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for GlyphInfoFlags, &type metadata for GlyphInfoFlags);
    atomic_store(result, (unint64_t *)&qword_1EEEBC1C0);
  }
  return result;
}

uint64_t destroy for GlyphMetadataTable(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1B08CDEBC(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
}

uint64_t initializeWithCopy for GlyphMetadataTable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  v11 = *(_BYTE *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B08E049C(v13, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 120) = v11;
  return a1;
}

uint64_t assignWithCopy for GlyphMetadataTable(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v2[4];
  *(_QWORD *)(a1 + 40) = v2[5];
  *(_QWORD *)(a1 + 48) = v2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[7];
  v5 = v2[8];
  v6 = v2[9];
  v7 = v2[10];
  v8 = v2[11];
  v9 = v2[12];
  v10 = v2[13];
  v11 = v2[14];
  LOBYTE(v2) = *((_BYTE *)v2 + 120);
  sub_1B08E049C(v4, v5, v6, v7, v8, v9, v10, v11, (char)v2);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_QWORD *)(a1 + 104);
  v19 = *(_QWORD *)(a1 + 112);
  v20 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = v10;
  *(_QWORD *)(a1 + 112) = v11;
  *(_BYTE *)(a1 + 120) = (_BYTE)v2;
  sub_1B08CDEBC(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for GlyphMetadataTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v5 = *(_BYTE *)(a2 + 120);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_BYTE *)(a1 + 120);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = v5;
  sub_1B08CDEBC(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GlyphMetadataTable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 121))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GlyphMetadataTable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 121) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GlyphMetadataTable()
{
  return &type metadata for GlyphMetadataTable;
}

uint64_t destroy for GlyphInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GlyphInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GlyphInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GlyphInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GlyphInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GlyphInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GlyphInfo()
{
  return &type metadata for GlyphInfo;
}

unint64_t sub_1B095C0FC(unint64_t result)
{
  if (!(result >> 61))
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t destroy for GlyphIdentifier(unint64_t *a1)
{
  return sub_1B08CDE58(*a1);
}

unint64_t *_s10FontParser15GlyphIdentifierOwCP_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_1B095C0FC(*a2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

unint64_t *assignWithCopy for GlyphIdentifier(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_1B095C0FC(*a2);
  v6 = *a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_1B08CDE58(v6);
  return a1;
}

unint64_t *assignWithTake for GlyphIdentifier(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_1B08CDE58(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GlyphIdentifier(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 1);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for GlyphIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = (unint64_t)-a2 << 8;
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1B095C290(_QWORD *a1)
{
  return *a1 >> 61;
}

_QWORD *sub_1B095C29C(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1B095C2AC(unint64_t *result, uint64_t a2)
{
  *result = *(unsigned __int8 *)result | (unint64_t)(a2 << 61);
  return result;
}

ValueMetadata *type metadata accessor for GlyphIdentifier()
{
  return &type metadata for GlyphIdentifier;
}

ValueMetadata *type metadata accessor for GlyphIdentifier.NameKind()
{
  return &type metadata for GlyphIdentifier.NameKind;
}

ValueMetadata *type metadata accessor for GlyphIdentifier.CIDKind()
{
  return &type metadata for GlyphIdentifier.CIDKind;
}

ValueMetadata *type metadata accessor for GlyphIdentifier.NameEntryKind()
{
  return &type metadata for GlyphIdentifier.NameEntryKind;
}

ValueMetadata *type metadata accessor for GlyphInfoFlags()
{
  return &type metadata for GlyphInfoFlags;
}

uint64_t destroy for Format10()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Format10(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Format10(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Format10(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Format10(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Format10(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Format10()
{
  return &type metadata for Format10;
}

uint64_t initializeWithCopy for Format8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for Format8()
{
  return &type metadata for Format8;
}

ValueMetadata *type metadata accessor for Format6()
{
  return &type metadata for Format6;
}

uint64_t destroy for Format4()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Format4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Format4(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Format4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Format4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Format4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Format4()
{
  return &type metadata for Format4;
}

ValueMetadata *type metadata accessor for Format2()
{
  return &type metadata for Format2;
}

uint64_t destroy for LookupTableBody()
{
  return swift_bridgeObjectRelease();
}

_QWORD *_s10FontParser15LookupTableBodyVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10FontParser15LookupTableBodyVwta_0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10FontParser15LookupTableBodyVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1B095C820(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupTableBody()
{
  return &type metadata for LookupTableBody;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B095C8B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_1B095C8BC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LookupTableImpl()
{
  return &type metadata for LookupTableImpl;
}

uint64_t initializeWithCopy for Format0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Format0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Format0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Format0()
{
  return &type metadata for Format0;
}

uint64_t _s10FontParser15LookupTableImplOwxx_0(uint64_t a1)
{
  return sub_1B08CDEBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t _s10FontParser15LookupTableImplOwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_1B08E049C(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t _s10FontParser15LookupTableImplOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_1B08E049C(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  sub_1B08CDEBC(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t _s10FontParser15LookupTableImplOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  sub_1B08CDEBC(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s10FontParser15LookupTableImplOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s10FontParser15LookupTableImplOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupTable()
{
  return &type metadata for LookupTable;
}

uint64_t sub_1B095CC38()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_1B095CC48()
{
  return &off_1E61AFBD0;
}

uint64_t sub_1B095CC54()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_1B095CC64()
{
  return &off_1E61AFC10;
}

uint64_t sub_1B095CC70(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

uint64_t sub_1B095CC98(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
  return a1;
}

uint64_t sub_1B095CCE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = v0[2];
  v2 = type metadata accessor for BinarySearchLookup(0, v1, v0[3], v0[4]);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v4 = (char *)v0 + ((v3 + 40) & ~v3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(&v4[*(int *)(v2 + 44)], v1);
  return swift_deallocObject();
}

uint64_t type metadata accessor for BinarySearchLookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BinarySearchLookup);
}

uint64_t sub_1B095CD7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[3];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BinarySearchLookup(0, v1, v2, v0[4]) - 8) + 80);
  return sub_1B095B630((uint64_t)v0 + ((v3 + 40) & ~v3), v1, v2);
}

unsigned __int8 *sub_1B095CDF4@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0959D84(a1, a2);
}

uint64_t sub_1B095CE08()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_1B095CE2C@<X0>(_WORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_1B095A130(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1B095CE48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1B0A1D09C();
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC268);
  v5 = a1 + *(int *)(result + 40);
  v6 = a1 + *(int *)(result + 36);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 24) = 1;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t sub_1B095CEB0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1B095CF28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 40) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = a2[4];
    v11 = (a1 + v6 + 40) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 40) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return v3;
}

uint64_t sub_1B095CFF4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_1B095D038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 40 + a1) & ~v7;
  v9 = (v7 + 40 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *sub_1B095D0B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_1B095D140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))((*(unsigned __int8 *)(v5 + 80) + 40 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 40 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_1B095D198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 40 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 40 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1B095D208(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 40) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 40) & ~v7);
      v15 = *(_QWORD *)(a1 + 32);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B095D2DC + 4 * byte_1B0A3B138[(v9 - 1)]))();
}

void sub_1B095D34C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for Format6.Entry()
{
  return &type metadata for Format6.Entry;
}

ValueMetadata *type metadata accessor for Format2.Entry()
{
  return &type metadata for Format2.Entry;
}

uint64_t sub_1B095D570()
{
  return sub_1B08CE2D8(&qword_1EEEBC300, &qword_1EEEBC308, MEMORY[0x1E0D65CC0]);
}

uint64_t sub_1B095D59C()
{
  return sub_1B08CE2D8(&qword_1EEEBC310, &qword_1EEEBC318, MEMORY[0x1E0D65CC0]);
}

void sub_1B095D5C8()
{
  JUMPOUT(0x1B5E0D530);
}

uint64_t static Platform.macintosh.getter()
{
  return 1;
}

Swift::UInt16_optional __swiftcall Platform.rawValue(encoding:)(FontParser::Encoding encoding)
{
  __int16 v1;
  int v2;
  FontParser::Encoding v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v9;
  int v10;

  v2 = encoding;
  if (v1 == 1)
  {
    if (encoding - 10 < 4)
    {
      v3 = FontParser_Encoding_roman;
LABEL_27:
      *(Swift::UInt16_optional *)&v10 = Platform.rawValue(encoding:)(v3);
      LOWORD(v6) = v10;
      LODWORD(v9) = BYTE2(v10) & 1;
      return (Swift::UInt16_optional)((unsigned __int16)v6 | ((_DWORD)v9 << 16));
    }
    if (encoding == FontParser_Encoding_farsi)
    {
LABEL_26:
      v3 = FontParser_Encoding_arabic;
      goto LABEL_27;
    }
    if (encoding == FontParser_Encoding_ukrainian)
    {
      v3 = FontParser_Encoding_cyrillic;
      goto LABEL_27;
    }
    v4 = &unk_1E6191B50;
    v5 = 33;
    goto LABEL_16;
  }
  if (v1)
    v4 = &unk_1E6191B50;
  else
    v4 = &unk_1E6191B28;
  if (!v1)
    goto LABEL_15;
  if (v1 == 2)
  {
    v4 = &unk_1E6191BC8;
LABEL_15:
    v5 = v4[2];
    if (v5)
      goto LABEL_16;
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    LOWORD(v6) = 0;
    LODWORD(v9) = 1;
    return (Swift::UInt16_optional)((unsigned __int16)v6 | ((_DWORD)v9 << 16));
  }
  if (v1 != 3)
    goto LABEL_23;
  v4 = &unk_1E6191B98;
  v5 = 11;
LABEL_16:
  v6 = 0;
  while (1)
  {
    v7 = *((unsigned __int8 *)v4 + v6 + 32);
    if (v7 != 56 && v7 == v2)
      break;
    if (v5 == ++v6)
      goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  v9 = v6 >> 16;
  if (v6 >> 16)
  {
    __break(1u);
    goto LABEL_26;
  }
  return (Swift::UInt16_optional)((unsigned __int16)v6 | ((_DWORD)v9 << 16));
}

Swift::UInt16_optional __swiftcall Platform.rawValue(language:)(FontParser::Language language)
{
  __int16 v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int v16;
  uint64_t v18;
  Swift::UInt16_optional result;

  v2 = language;
  if (v1 == 3)
  {
    *(_QWORD *)&language = sub_1B090182C((uint64_t)&unk_1E6191CA8);
    v5 = 0;
    v6 = language + 64;
    v7 = 1 << *(_BYTE *)(language + 32);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(language + 64);
    v10 = (unint64_t)(v7 + 63) >> 6;
    while (1)
    {
      if (v9)
      {
        v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v12 = v11 | (v5 << 6);
      }
      else
      {
        v13 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        if (v13 >= v10)
        {
LABEL_38:
          swift_release();
LABEL_39:
          LODWORD(v3) = 0;
          LODWORD(v4) = 1;
          goto LABEL_41;
        }
        v14 = *(_QWORD *)(v6 + 8 * v13);
        ++v5;
        if (!v14)
        {
          v5 = v13 + 1;
          if (v13 + 1 >= v10)
            goto LABEL_38;
          v14 = *(_QWORD *)(v6 + 8 * v5);
          if (!v14)
          {
            v5 = v13 + 2;
            if (v13 + 2 >= v10)
              goto LABEL_38;
            v14 = *(_QWORD *)(v6 + 8 * v5);
            if (!v14)
            {
              v5 = v13 + 3;
              if (v13 + 3 >= v10)
                goto LABEL_38;
              v14 = *(_QWORD *)(v6 + 8 * v5);
              if (!v14)
              {
                v5 = v13 + 4;
                if (v13 + 4 >= v10)
                  goto LABEL_38;
                v14 = *(_QWORD *)(v6 + 8 * v5);
                if (!v14)
                {
                  v15 = v13 + 5;
                  if (v15 >= v10)
                    goto LABEL_38;
                  v14 = *(_QWORD *)(v6 + 8 * v15);
                  if (!v14)
                  {
                    while (1)
                    {
                      v5 = v15 + 1;
                      if (__OFADD__(v15, 1))
                        break;
                      if (v5 >= v10)
                        goto LABEL_38;
                      v14 = *(_QWORD *)(v6 + 8 * v5);
                      ++v15;
                      if (v14)
                        goto LABEL_29;
                    }
LABEL_44:
                    __break(1u);
                    goto LABEL_45;
                  }
                  v5 = v15;
                }
              }
            }
          }
        }
LABEL_29:
        v9 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v5 << 6);
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(language + 56) + v12) == v2)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(language + 48) + 8 * v12);
        swift_release();
        LODWORD(v4) = 0;
        LODWORD(v3) = v18;
        goto LABEL_41;
      }
    }
  }
  if (v1 == 1)
  {
    v3 = 0;
    while (1)
    {
      v16 = *((unsigned __int8 *)&unk_1E6191BF0 + v3 + 32);
      if (v16 != 175 && v16 == language)
        break;
      if (++v3 == 151)
        goto LABEL_39;
    }
    v4 = v3 >> 16;
    if (v3 >> 16)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
  }
  else
  {
    LODWORD(v3) = 0;
    if (v1)
      LODWORD(v4) = 1;
    else
      LODWORD(v4) = language != FontParser_Language_unicode;
  }
LABEL_41:
  *(_DWORD *)&language = v3 | ((_DWORD)v4 << 16);
LABEL_45:
  LOBYTE(result.value) = language;
  return result;
}

uint64_t static Platform.unicode.getter()
{
  return 0;
}

FontParser::Encoding_optional __swiftcall Platform.interpret(encoding:language:)(Swift::UInt16 encoding, Swift::UInt16_optional language)
{
  unsigned __int16 v2;
  unsigned __int16 v3;
  uint64_t v5;
  int v6;
  int v7;
  int v9;

  if (v2 > 3u)
    goto LABEL_19;
  v3 = v2;
  v5 = (uint64_t)*(&off_1E61B0328 + (__int16)v2);
  if (*(_QWORD *)(v5 + 16) <= (uint64_t)encoding)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    LOBYTE(v7) = 56;
    return (FontParser::Encoding_optional)v7;
  }
  v6 = *(_DWORD *)&language.value;
  v7 = *(unsigned __int8 *)(v5 + encoding + 32);
  swift_bridgeObjectRelease();
  if (v3 == 1 && v7 != 56 && (v6 & 0x10000) == 0 && (unsigned __int16)v6 < 0x97uLL)
  {
    v9 = *((unsigned __int8 *)&unk_1E6191BF0 + (unsigned __int16)v6 + 32);
    if (v9 != 175)
    {
      switch(v7)
      {
        case 21:
          if (v9 == 163)
            LOBYTE(v7) = 22;
          else
            LOBYTE(v7) = 21;
          break;
        case 17:
          if (v9 == 40)
            LOBYTE(v7) = 18;
          else
            LOBYTE(v7) = 17;
          break;
        case 9:
          if (*((unsigned __int8 *)&unk_1E6191BF0 + (unsigned __int16)v6 + 32) > 0x74u)
          {
            if (v9 == 117)
            {
              LOBYTE(v7) = 13;
              return (FontParser::Encoding_optional)v7;
            }
            if (v9 == 160)
            {
              LOBYTE(v7) = 10;
              return (FontParser::Encoding_optional)v7;
            }
          }
          else
          {
            if (v9 == 28)
            {
              LOBYTE(v7) = 11;
              return (FontParser::Encoding_optional)v7;
            }
            if (v9 == 59)
            {
              LOBYTE(v7) = 12;
              return (FontParser::Encoding_optional)v7;
            }
          }
          LOBYTE(v7) = 9;
          break;
      }
    }
  }
  return (FontParser::Encoding_optional)v7;
}

unint64_t IntlQuery.init(platform:encoding:language:region:)(int a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4)
{
  return ((unint64_t)a3 << 32) | ((unint64_t)a4 << 40) | ((unint64_t)a2 << 24) | ((unint64_t)(BYTE2(a1) & 1) << 16) | (unsigned __int16)a1;
}

FontParser::Language_optional __swiftcall Platform.interpret(language:)(Swift::UInt16 language)
{
  __int16 v1;
  FontParser::Language_optional v3;
  FontParser::Language_optional v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  if (v1 == 3)
  {
    v5 = sub_1B090182C((uint64_t)&unk_1E6191CA8);
    if (*(_QWORD *)(v5 + 16))
    {
      v6 = sub_1B08F9E4C(language);
      if ((v7 & 1) != 0)
      {
        v4.value = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v6);
        swift_bridgeObjectRelease();
        return v4;
      }
    }
    swift_bridgeObjectRelease();
    return (FontParser::Language_optional)-81;
  }
  if (v1 == 1)
  {
    if (language < 0x97uLL)
      return (FontParser::Language_optional)*((_BYTE *)&unk_1E6191BF0 + language + 32);
    return (FontParser::Language_optional)-81;
  }
  if (language)
    v3.value = FontParser_Language_unknownDefault;
  else
    v3.value = FontParser_Language_unicode;
  if (v1)
    return (FontParser::Language_optional)-81;
  else
    return v3;
}

FontParser::Region_optional __swiftcall Platform.interpret(region:)(Swift::UInt16 region)
{
  __int16 v1;
  unint64_t v3;
  unint64_t v4;
  char v5;
  FontParser::Region_optional v6;

  if (v1 != 3)
    return (FontParser::Region_optional)0x80;
  v3 = sub_1B0901838((uint64_t)&unk_1E61929C0);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_1B08F9E4C(region), (v5 & 1) != 0))
    v6.value = *(_BYTE *)(*(_QWORD *)(v3 + 56) + v4);
  else
    v6.value = FontParser_Region_unknownDefault;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static Platform.windows.getter()
{
  return 3;
}

uint64_t IntlQuery.matches(platform:encoding:language:region:)(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5)
{
  int v5;
  uint64_t result;
  _BOOL4 v7;

  v5 = HIWORD(a1) & 1;
  if ((unsigned __int16)a5 != (unsigned __int16)a1)
    LOBYTE(v5) = 1;
  if ((a5 & 0x10000) == 0 && (v5 & 1) != 0)
    return 0;
  if ((a5 & 0xFF000000) == 0x38000000 || (result = 0, a2 != 56) && BYTE3(a5) == a2)
  {
    if ((a5 & 0xFF00000000) == 0xAF00000000 || (result = 0, a3 != 175) && BYTE4(a5) == a3)
    {
      v7 = a4 != 128 && a4 == BYTE5(a5);
      return (a5 & 0xFF0000000000) == 0x800000000000 || v7;
    }
  }
  return result;
}

uint64_t static IntlQuery.any.getter()
{
  return 0x80AF38010000;
}

uint64_t Language.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t sub_1B095DCAC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s10FontParser8LanguageO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t Encoding.isUnicode.getter(unsigned __int8 a1)
{
  return (a1 < 0x38u) & (0x8200000000007FuLL >> a1);
}

BOOL static Region.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t Region.hash(into:)()
{
  return sub_1B0A1DB34();
}

BOOL static Region.__derived_enum_less_than(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

uint64_t _s10FontParser8EncodingO9hashValueSivg_0()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

BOOL sub_1B095DD84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1B095DD98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1B095DDAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1B095DDC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t Platform.rawValue.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Platform.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t static Platform.iso.getter()
{
  return 2;
}

BOOL static Platform.< infix(_:_:)(unsigned __int16 a1, unsigned __int16 a2)
{
  return a1 < a2;
}

Swift::UInt16_optional __swiftcall Platform.rawValue(region:)(FontParser::Region region)
{
  __int16 v1;
  int v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (v1 != 3)
  {
LABEL_28:
    v17 = 0;
    v16 = 1;
LABEL_29:
    LODWORD(v3) = v17 | (v16 << 16);
    return (Swift::UInt16_optional)v3;
  }
  v2 = region;
  v3 = sub_1B0901838((uint64_t)&unk_1E61929C0);
  v4 = 0;
  v5 = v3 + 64;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_6:
    if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v11) == v2)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11);
      swift_release();
      v16 = 0;
      v17 = v15 & 0xFF00;
      goto LABEL_29;
    }
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 >= v9)
    goto LABEL_27;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_25;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    goto LABEL_27;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_25;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    goto LABEL_27;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_25;
  v4 = v12 + 3;
  if (v12 + 3 >= v9)
    goto LABEL_27;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_25;
  v4 = v12 + 4;
  if (v12 + 4 >= v9)
    goto LABEL_27;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_25:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_6;
  }
  v14 = v12 + 5;
  if (v14 >= v9)
  {
LABEL_27:
    swift_release();
    goto LABEL_28;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_25;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      goto LABEL_27;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_25;
  }
LABEL_31:
  __break(1u);
  return (Swift::UInt16_optional)v3;
}

uint64_t sub_1B095DF90()
{
  sub_1B095F684();
  return sub_1B0A1D468();
}

uint64_t sub_1B095DFEC()
{
  sub_1B095F684();
  return sub_1B0A1D45C();
}

uint64_t static IntlQuery.Predicate.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata2;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t, double);
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a2;
  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v25 = v7;
  v26 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IntlQuery.Predicate(0, v8, v7, v7);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v27 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v16 = (char *)&v25 - v15;
  v18 = (char *)&v25 + *(int *)(v17 + 48) - v15;
  v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v19((char *)&v25 - v15, a1, v9, v14);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v18, v28, v9);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v20(v16, 1, a3) == 1)
  {
    v21 = 1;
    if (v20(v18, 1, a3) == 1)
      goto LABEL_8;
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v19)(v12, v16, v9);
    if (v20(v18, 1, a3) != 1)
    {
      v22 = v26;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v26, v18, a3);
      v21 = sub_1B0A1D1E0();
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v22, a3);
      v23(v12, a3);
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, a3);
  }
  v21 = 0;
  v10 = v27;
  v9 = TupleTypeMetadata2;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  return v21 & 1;
}

uint64_t IntlQuery.Predicate.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v10, v12, a2, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
    return sub_1B0A1DB34();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
  sub_1B0A1DB34();
  sub_1B0A1D138();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t IntlQuery.Predicate.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  sub_1B0A1DB28();
  IntlQuery.Predicate.hash(into:)((uint64_t)v3, a1);
  return sub_1B0A1DB70();
}

uint64_t sub_1B095E3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static IntlQuery.Predicate.__derived_enum_equals(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t sub_1B095E3B4(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_1B0A1DB28();
  IntlQuery.Predicate.hash(into:)((uint64_t)v4, a2);
  return sub_1B0A1DB70();
}

uint64_t IntlQuery.platform.getter(int a1)
{
  return a1 & 0x1FFFF;
}

uint64_t IntlQuery.platform.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)v1 = result;
  *(_BYTE *)(v1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t (*IntlQuery.platform.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t IntlQuery.encoding.getter(unint64_t a1)
{
  return a1 >> 24;
}

uint64_t IntlQuery.encoding.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*IntlQuery.encoding.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t IntlQuery.language.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t IntlQuery.language.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*IntlQuery.language.modify())(_QWORD)
{
  return nullsub_1;
}

unint64_t IntlQuery.region.getter(unint64_t a1)
{
  return a1 >> 40;
}

uint64_t IntlQuery.region.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*IntlQuery.region.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t _s10FontParser8LanguageO8rawValueACSgSi_tcfC_0(uint64_t a1)
{
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  unsigned int v6;

  v3 = 0;
  result = 79;
  switch(a1)
  {
    case 0:
      goto LABEL_83;
    case 1:
      v3 = 1;
      goto LABEL_83;
    case 2:
      v3 = 2;
      goto LABEL_83;
    case 3:
      v3 = 3;
      goto LABEL_83;
    case 4:
      v3 = 4;
      goto LABEL_83;
    case 5:
      v3 = 5;
      goto LABEL_83;
    case 6:
      v3 = 6;
      goto LABEL_83;
    case 7:
      v3 = 7;
      goto LABEL_83;
    case 8:
      v3 = 8;
      goto LABEL_83;
    case 9:
      v3 = 9;
      goto LABEL_83;
    case 10:
      v3 = 10;
      goto LABEL_83;
    case 11:
      v3 = 11;
      goto LABEL_83;
    case 12:
      v3 = 12;
      goto LABEL_83;
    case 13:
      v3 = 13;
      goto LABEL_83;
    case 14:
      v3 = 14;
      goto LABEL_83;
    case 15:
      v3 = 15;
      goto LABEL_83;
    case 16:
      v3 = 16;
      goto LABEL_83;
    case 17:
      v3 = 17;
      goto LABEL_83;
    case 18:
      v3 = 18;
      goto LABEL_83;
    case 19:
      v3 = 19;
      goto LABEL_83;
    case 20:
      v3 = 20;
      goto LABEL_83;
    case 21:
      v3 = 21;
      goto LABEL_83;
    case 22:
      v3 = 22;
      goto LABEL_83;
    case 23:
      v3 = 23;
      goto LABEL_83;
    case 24:
      v3 = 24;
      goto LABEL_83;
    case 25:
      v3 = 25;
      goto LABEL_83;
    case 26:
      v3 = 26;
      goto LABEL_83;
    case 27:
      v3 = 27;
      goto LABEL_83;
    case 28:
      v3 = 28;
      goto LABEL_83;
    case 29:
      v3 = 29;
      goto LABEL_83;
    case 30:
      v3 = 30;
      goto LABEL_83;
    case 31:
      v3 = 31;
      goto LABEL_83;
    case 32:
      v3 = 32;
      goto LABEL_83;
    case 33:
      v3 = 33;
      goto LABEL_83;
    case 34:
      v3 = 34;
      goto LABEL_83;
    case 35:
      v3 = 35;
      goto LABEL_83;
    case 36:
      v3 = 36;
      goto LABEL_83;
    case 37:
      v3 = 37;
      goto LABEL_83;
    case 38:
      v3 = 38;
      goto LABEL_83;
    case 39:
      v3 = 39;
      goto LABEL_83;
    case 40:
      v3 = 40;
      goto LABEL_83;
    case 41:
      v3 = 41;
      goto LABEL_83;
    case 42:
      v3 = 42;
      goto LABEL_83;
    case 43:
      v3 = 43;
      goto LABEL_83;
    case 44:
      v3 = 44;
      goto LABEL_83;
    case 45:
      v3 = 45;
      goto LABEL_83;
    case 46:
      v3 = 46;
      goto LABEL_83;
    case 47:
      v3 = 47;
      goto LABEL_83;
    case 48:
      v3 = 48;
      goto LABEL_83;
    case 49:
      v3 = 49;
      goto LABEL_83;
    case 50:
      v3 = 50;
      goto LABEL_83;
    case 51:
      v3 = 51;
      goto LABEL_83;
    case 52:
      v3 = 52;
      goto LABEL_83;
    case 53:
      v3 = 53;
      goto LABEL_83;
    case 54:
      v3 = 54;
      goto LABEL_83;
    case 55:
      v3 = 55;
      goto LABEL_83;
    case 56:
      v3 = 56;
      goto LABEL_83;
    case 57:
      v3 = 57;
      goto LABEL_83;
    case 58:
      v3 = 58;
      goto LABEL_83;
    case 59:
      v3 = 59;
      goto LABEL_83;
    case 60:
      v3 = 60;
      goto LABEL_83;
    case 61:
      v3 = 61;
      goto LABEL_83;
    case 62:
      v3 = 62;
      goto LABEL_83;
    case 63:
      v3 = 63;
      goto LABEL_83;
    case 64:
      v3 = 64;
      goto LABEL_83;
    case 65:
      v3 = 65;
      goto LABEL_83;
    case 66:
      v3 = 66;
      goto LABEL_83;
    case 67:
      v3 = 67;
      goto LABEL_83;
    case 68:
      v3 = 68;
      goto LABEL_83;
    case 69:
      v3 = 69;
      goto LABEL_83;
    case 70:
      v3 = 70;
      goto LABEL_83;
    case 71:
      v3 = 71;
      goto LABEL_83;
    case 72:
      v3 = 72;
      goto LABEL_83;
    case 73:
      v3 = 73;
      goto LABEL_83;
    case 74:
      v3 = 74;
      goto LABEL_83;
    case 75:
      v3 = 75;
      goto LABEL_83;
    case 76:
      v3 = 76;
      goto LABEL_83;
    case 77:
      v3 = 77;
      goto LABEL_83;
    case 78:
      v3 = 78;
LABEL_83:
      result = v3;
      break;
    case 79:
      return result;
    case 80:
      result = 80;
      break;
    case 81:
      result = 81;
      break;
    case 82:
      result = 82;
      break;
    case 83:
      result = 83;
      break;
    case 84:
      result = 84;
      break;
    case 85:
      result = 85;
      break;
    case 86:
      result = 86;
      break;
    case 87:
      result = 87;
      break;
    case 88:
      result = 88;
      break;
    case 89:
      result = 89;
      break;
    case 90:
      result = 90;
      break;
    case 91:
      result = 91;
      break;
    case 92:
      result = 92;
      break;
    case 93:
      result = 93;
      break;
    case 94:
      result = 94;
      break;
    case 95:
      result = 95;
      break;
    case 96:
      result = 96;
      break;
    case 97:
      result = 97;
      break;
    case 98:
      result = 98;
      break;
    case 99:
      result = 99;
      break;
    case 100:
      result = 100;
      break;
    case 101:
      result = 101;
      break;
    case 102:
      result = 102;
      break;
    case 103:
      result = 103;
      break;
    case 104:
      result = 104;
      break;
    case 105:
      result = 105;
      break;
    case 106:
      result = 106;
      break;
    case 107:
      result = 107;
      break;
    case 108:
      result = 108;
      break;
    case 109:
      result = 109;
      break;
    case 110:
      result = 110;
      break;
    case 111:
      result = 111;
      break;
    case 112:
      result = 112;
      break;
    case 113:
      result = 113;
      break;
    case 114:
      result = 114;
      break;
    case 115:
      result = 115;
      break;
    case 116:
      result = 116;
      break;
    case 117:
      result = 117;
      break;
    case 118:
      result = 118;
      break;
    case 119:
      result = 119;
      break;
    case 120:
      result = 120;
      break;
    case 121:
      result = 121;
      break;
    case 122:
      result = 122;
      break;
    case 123:
      result = 123;
      break;
    case 124:
      result = 124;
      break;
    case 125:
      result = 125;
      break;
    case 126:
      result = 126;
      break;
    case 127:
      result = 127;
      break;
    default:
      v5 = (unint64_t)(a1 - 128) >= 0x2F;
      v6 = a1 | 0xFFFFFF80;
      if (v5)
        result = 175;
      else
        result = v6;
      break;
  }
  return result;
}

uint64_t type metadata accessor for IntlQuery.Predicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntlQuery.Predicate);
}

unint64_t sub_1B095E8CC()
{
  unint64_t result;

  result = qword_1EEEBC320;
  if (!qword_1EEEBC320)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Language, &type metadata for Language);
    atomic_store(result, (unint64_t *)&qword_1EEEBC320);
  }
  return result;
}

unint64_t sub_1B095E914()
{
  unint64_t result;

  result = qword_1EEEBC328;
  if (!qword_1EEEBC328)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Encoding, &type metadata for Encoding);
    atomic_store(result, (unint64_t *)&qword_1EEEBC328);
  }
  return result;
}

unint64_t sub_1B095E95C()
{
  unint64_t result;

  result = qword_1EEEBC330;
  if (!qword_1EEEBC330)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Region, &type metadata for Region);
    atomic_store(result, (unint64_t *)&qword_1EEEBC330);
  }
  return result;
}

unint64_t sub_1B095E9A4()
{
  unint64_t result;

  result = qword_1EEEBC338[0];
  if (!qword_1EEEBC338[0])
  {
    result = MEMORY[0x1B5E0D530]("uFw54D\a", &type metadata for Platform);
    atomic_store(result, qword_1EEEBC338);
  }
  return result;
}

void sub_1B095E9E8()
{
  JUMPOUT(0x1B5E0D530);
}

uint64_t getEnumTagSinglePayload for Language(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x52)
    goto LABEL_17;
  if (a2 + 174 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 174) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 174;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 174;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 174;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xAF;
  v8 = v6 - 175;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Language(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 174 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 174) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x52)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x51)
    return ((uint64_t (*)(void))((char *)&loc_1B095EAD4 + 4 * byte_1B0A3B955[v4]))();
  *a1 = a2 - 82;
  return ((uint64_t (*)(void))((char *)sub_1B095EB08 + 4 * byte_1B0A3B950[v4]))();
}

uint64_t sub_1B095EB08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B095EB10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B095EB18);
  return result;
}

uint64_t sub_1B095EB24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B095EB2CLL);
  *(_BYTE *)result = a2 - 82;
  return result;
}

uint64_t sub_1B095EB30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B095EB38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Language()
{
  return &type metadata for Language;
}

uint64_t getEnumTagSinglePayload for Encoding(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xC9)
    goto LABEL_17;
  if (a2 + 55 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 55) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 55;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 55;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 55;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x38;
  v8 = v6 - 56;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Encoding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 55 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 55) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xC8)
    return ((uint64_t (*)(void))((char *)&loc_1B095EC30 + 4 * byte_1B0A3B95F[v4]))();
  *a1 = a2 + 55;
  return ((uint64_t (*)(void))((char *)sub_1B095EC64 + 4 * byte_1B0A3B95A[v4]))();
}

uint64_t sub_1B095EC64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B095EC6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B095EC74);
  return result;
}

uint64_t sub_1B095EC80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B095EC88);
  *(_BYTE *)result = a2 + 55;
  return result;
}

uint64_t sub_1B095EC8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B095EC94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Encoding()
{
  return &type metadata for Encoding;
}

uint64_t getEnumTagSinglePayload for Region(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x81)
    goto LABEL_17;
  if (a2 + 127 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 127) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 127;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 127;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 127;
  }
LABEL_17:
  v6 = *a1;
  v7 = (char)v6;
  v8 = v6 - 128;
  if (v7 >= 0)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Region(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 127 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 127) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x81)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x80)
    return ((uint64_t (*)(void))((char *)&loc_1B095ED94 + 4 * byte_1B0A3B969[v4]))();
  *a1 = a2 + 127;
  return ((uint64_t (*)(void))((char *)sub_1B095EDC8 + 4 * byte_1B0A3B964[v4]))();
}

uint64_t sub_1B095EDC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B095EDD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B095EDD8);
  return result;
}

uint64_t sub_1B095EDE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B095EDECLL);
  *(_BYTE *)result = a2 + 127;
  return result;
}

uint64_t sub_1B095EDF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B095EDF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Region()
{
  return &type metadata for Region;
}

ValueMetadata *type metadata accessor for Platform()
{
  return &type metadata for Platform;
}

uint64_t getEnumTagSinglePayload for IntlQuery(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xC8 && *(_BYTE *)(a1 + 6))
    return (*(_DWORD *)a1 + 200);
  if (*(unsigned __int8 *)(a1 + 3) <= 0x38u)
    v3 = 56;
  else
    v3 = *(unsigned __int8 *)(a1 + 3);
  v4 = v3 - 57;
  if (*(unsigned __int8 *)(a1 + 3) < 0x38u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IntlQuery(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC7)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 200;
    if (a3 >= 0xC8)
      *(_BYTE *)(result + 6) = 1;
  }
  else
  {
    if (a3 >= 0xC8)
      *(_BYTE *)(result + 6) = 0;
    if (a2)
      *(_BYTE *)(result + 3) = a2 + 56;
  }
  return result;
}

ValueMetadata *type metadata accessor for IntlQuery()
{
  return &type metadata for IntlQuery;
}

uint64_t sub_1B095EECC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1B095EF24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1B095EFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_1B095F058(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1B095F0F0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_1B095F1D0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1B095F268(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_1B095F348(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1B095F488(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1B095F630()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1B095F638()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_1B095F65C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_1B095F670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

unint64_t sub_1B095F684()
{
  unint64_t result;

  result = qword_1EEEBC3C0;
  if (!qword_1EEEBC3C0)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Platform, &type metadata for Platform);
    atomic_store(result, (unint64_t *)&qword_1EEEBC3C0);
  }
  return result;
}

uint64_t destroy for PostTable()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PostTable(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PostTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PostTable(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PostTable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostTable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PostTable()
{
  return &type metadata for PostTable;
}

uint64_t sub_1B095F8B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = MEMORY[0x1E0DEE9D8];
  sub_1B08E82B4(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  if (!v2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return v15;
  }
  v4 = 0;
  v5 = a1 + 32;
  v6 = &unk_1EEEBA000;
  while (1)
  {
    v7 = *(char *)(v5 + v4);
    v8 = v4 + v7;
    if (__OFADD__(v4, v7))
      break;
    if (v6[169] == -1)
    {
      if (v8 < 0)
        goto LABEL_9;
    }
    else
    {
      swift_once();
      v6 = (_QWORD *)&unk_1EEEBA000;
      if (v8 < 0)
      {
LABEL_9:
        sub_1B0A1DA68();
        sub_1B0A1D33C();
        result = swift_bridgeObjectRelease();
        v6 = (_QWORD *)&unk_1EEEBA000;
        v10 = 0x64696C61766E692ELL;
        v11 = 0xE90000000000005FLL;
        goto LABEL_10;
      }
    }
    if (v8 >= *((_QWORD *)off_1EEEBC3C8 + 2))
      goto LABEL_9;
    v9 = (char *)off_1EEEBC3C8 + 16 * v8;
    v10 = *((_QWORD *)v9 + 4);
    v11 = *((_QWORD *)v9 + 5);
    result = swift_bridgeObjectRetain();
LABEL_10:
    v13 = *(_QWORD *)(v15 + 16);
    v12 = *(_QWORD *)(v15 + 24);
    if (v13 >= v12 >> 1)
    {
      result = (uint64_t)sub_1B08E82B4((char *)(v12 > 1), v13 + 1, 1);
      v6 = (_QWORD *)&unk_1EEEBA000;
    }
    ++v4;
    *(_QWORD *)(v15 + 16) = v13 + 1;
    v14 = v15 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v10;
    *(_QWORD *)(v14 + 40) = v11;
    if (v2 == v4)
      goto LABEL_13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1B095FA58@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  if (v2 >= *result)
  {
    *a2 = *result;
    a2[1] = v2;
  }
  else
  {
    sub_1B08A38E4();
    swift_allocError();
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

uint64_t sub_1B095FAB4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t result;
  void *v5;
  void *v6;
  BOOL v7;
  char v8;

  v3 = *a1;
  if (*a1 == 0x20000)
  {
    v8 = 0;
    v6 = sub_1B095FC24;
    result = 1;
    v7 = 1;
    v5 = sub_1B095FBFC;
  }
  else if (v3 == 0x10000)
  {
    if (qword_1EEEBA548 != -1)
      swift_once();
    result = swift_bridgeObjectRetain();
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = v3 != 163840;
    if (v3 == 163840)
      result = 1;
    else
      result = MEMORY[0x1E0DEE9D8];
    if (v3 == 163840)
      v5 = sub_1B095FC40;
    else
      v5 = 0;
    if (v3 == 163840)
      v6 = sub_1B095FC54;
    else
      v6 = 0;
    v8 = 1;
  }
  *(_DWORD *)a2 = v3;
  *(_WORD *)(a2 + 4) = 257;
  *(_BYTE *)(a2 + 6) = 1;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = sub_1B095FBE8;
  *(_QWORD *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 32) = 257;
  *(_QWORD *)(a2 + 40) = sub_1B095FA58;
  *(_QWORD *)(a2 + 48) = 0;
  *(_WORD *)(a2 + 56) = 257;
  *(_QWORD *)(a2 + 64) = sub_1B095FA58;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = result;
  *(_QWORD *)(a2 + 88) = v5;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v6;
  *(_QWORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = v7;
  *(_BYTE *)(a2 + 121) = v8;
  return result;
}

_DWORD *sub_1B095FBE8@<X0>(_DWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t *sub_1B095FBFC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = sub_1B095FCAC;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 32) = v2;
  return result;
}

uint64_t sub_1B095FC24@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t *sub_1B095FC40@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  *a2 = MEMORY[0x1E0DEE9D8];
  a2[1] = v2;
  return result;
}

uint64_t sub_1B095FC54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_1B095F8B0(v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

unsigned __int16 *sub_1B095FCAC@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  unint64_t v4;
  char v5;
  BOOL v6;

  v3 = *result;
  if (qword_1EEEBA548 != -1)
    result = (unsigned __int16 *)swift_once();
  v4 = *((_QWORD *)off_1EEEBC3C8 + 2);
  if (v4 >> 16)
  {
    __break(1u);
  }
  else
  {
    if (v3 < (unsigned __int16)v4)
    {
      v5 = 0;
LABEL_13:
      *(_DWORD *)a2 = v3;
      *(_BYTE *)(a2 + 4) = v5;
      return result;
    }
    if ((v4 & 0x8000) == 0)
    {
      v6 = v3 > 0x7FFE;
      if (v3 <= 0x7FFE)
        v3 = (unsigned __int16)(v3 - v4) | 0x1010000;
      else
        v3 = (unsigned __int16)(v3 - 0x7FFF) | 0x20000;
      v5 = v6;
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

void sub_1B095FD6C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v5;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned __int16 *v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v29;
  uint64_t v31;
  BOOL v32;
  void *v33;
  _QWORD *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v7 = sub_1B08B5E4C(0, v5, 0, MEMORY[0x1E0DEE9D8]);
  v8 = sub_1B08B6044(0, v5, 0, v6);
  v55 = v5;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v54 = a3 + 32;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    v56 = v9;
    v57 = v7;
    v18 = (unsigned __int16 *)(v54 + 4 * v9);
    v19 = *v18;
    v20 = *((unsigned __int8 *)v18 + 2);
    if (!v20)
    {
      if (qword_1EEEBA548 != -1)
        swift_once();
      if (*((_QWORD *)off_1EEEBC3C8 + 2) <= v19)
        goto LABEL_74;
      v47 = (char *)off_1EEEBC3C8 + 16 * v19;
      v10 = *((_QWORD *)v47 + 4);
      v11 = *((_QWORD *)v47 + 5);
      v13 = *((_QWORD *)v7 + 2);
      v48 = *((_QWORD *)v7 + 3);
      v14 = v13 + 1;
      swift_bridgeObjectRetain();
      if (v13 < v48 >> 1)
        goto LABEL_4;
      v49 = v48 > 1;
      goto LABEL_59;
    }
    if (v20 == 1)
      break;
    sub_1B0A1DA68();
    sub_1B0A1D33C();
    swift_bridgeObjectRelease();
    v10 = 0x657672657365722ELL;
    v11 = 0xEA00000000005F64;
    v13 = *((_QWORD *)v7 + 2);
    v12 = *((_QWORD *)v7 + 3);
    v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      v49 = v12 > 1;
LABEL_59:
      v53 = v49;
      v7 = sub_1B08B5E4C((char *)v53, v14, 1, v7);
    }
LABEL_4:
    v15 = v56;
    *((_QWORD *)v7 + 2) = v14;
    v16 = &v7[16 * v13];
    *((_QWORD *)v16 + 4) = v10;
    v17 = v16 + 32;
LABEL_5:
    v9 = v15 + 1;
    *((_QWORD *)v17 + 1) = v11;
    if (v9 == v55)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  v21 = v8[2];
  if (v21 > v19)
  {
LABEL_9:
    if (v21 <= v19)
      goto LABEL_73;
    v22 = &v8[2 * v19];
    if (v22[5])
    {
      v23 = v22[4];
      v11 = v22[5];
    }
    else
    {
      sub_1B0A1DA68();
      sub_1B0A1D33C();
      swift_bridgeObjectRelease();
      v23 = 0x64696C61766E692ELL;
      v11 = 0xE90000000000005FLL;
    }
    v15 = v56;
    v7 = v57;
    v50 = *((_QWORD *)v57 + 2);
    v51 = *((_QWORD *)v57 + 3);
    swift_bridgeObjectRetain();
    if (v50 >= v51 >> 1)
      v7 = sub_1B08B5E4C((char *)(v51 > 1), v50 + 1, 1, v57);
    *((_QWORD *)v7 + 2) = v50 + 1;
    v52 = &v7[16 * v50];
    *((_QWORD *)v52 + 4) = v23;
    v17 = v52 + 32;
    goto LABEL_5;
  }
  while (2)
  {
    v24 = *a1;
    v25 = a1[1];
    if (!__OFSUB__(v25, *a1))
    {
      v26 = a1[2];
      if ((uint64_t)(v25 - *a1) > 0)
      {
        v27 = v24 + 1;
        if (v24 == 0x7FFFFFFFFFFFFFFFLL || v25 < v27)
          goto LABEL_66;
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_67;
        v29 = *(_QWORD *)(v26 + 16);
        if (v29 < v24 || v29 < v27)
          goto LABEL_68;
        v31 = *(unsigned __int8 *)(v26 + 32 + v24);
        v32 = __OFSUB__(v25, v27);
        swift_bridgeObjectRetain();
        if (v32)
          goto LABEL_69;
        if (v25 - v27 >= v31)
        {
          v37 = v27 + v31;
          if (__OFSUB__(v37, v27))
            goto LABEL_70;
          if (v37 < v27 || v25 < v37 || v37 < v27)
            goto LABEL_71;
          if (__OFADD__(v27, v37 - v27))
            goto LABEL_72;
          swift_bridgeObjectRetain();
          v40 = sub_1B0A1D2F4();
          v42 = v41;
          swift_bridgeObjectRelease_n();
          *a1 = v37;
          a1[1] = v25;
          a1[2] = v26;
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_1B0A1D8A0();
          swift_bridgeObjectRelease();
          sub_1B0A1DA68();
          sub_1B0A1D33C();
          swift_bridgeObjectRelease();
          sub_1B08A36F0();
          v33 = (void *)swift_allocError();
          *v34 = 0;
          v34[1] = v27;
          v34[2] = 0xD000000000000024;
          v34[3] = 0x80000001B0A26E90;
          v34[4] = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          v35 = v33;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7D0);
          if ((swift_dynamicCast() & 1) != 0)
          {

            swift_bridgeObjectRelease();
            sub_1B08CD6AC((id)0xD000000000000024);
            swift_bridgeObjectRelease();
            v36 = v58;
          }
          else
          {

            v43 = v33;
            swift_bridgeObjectRelease();
            sub_1B08CD6AC(v33);
            swift_bridgeObjectRelease();
            v36 = v33;
          }

LABEL_44:
          v40 = 0;
          v42 = 0;
        }
        v45 = v8[2];
        v44 = v8[3];
        v21 = v45 + 1;
        if (v45 >= v44 >> 1)
          v8 = sub_1B08B6044((_QWORD *)(v44 > 1), v45 + 1, 1, v8);
        v8[2] = v21;
        v46 = &v8[2 * v45];
        v46[4] = v40;
        v46[5] = v42;
        if (v45 >= v19)
          goto LABEL_9;
        continue;
      }
      swift_bridgeObjectRetain_n();
      sub_1B0A1D8A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    break;
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
}

void sub_1B096032C(unint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  sub_1B095FD6C(a1, a2, *v3);
  if (!v4)
    *a3 = v6;
}

void sub_1B0960358()
{
  off_1EEEBC3C8 = &unk_1E618F760;
}

ValueMetadata *type metadata accessor for Name20ListParser()
{
  return &type metadata for Name20ListParser;
}

uint64_t __swift_memcpy3_2(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Name20Entry(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 2)
    v5 = -1;
  else
    v5 = v4 ^ 0xFF;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Name20Entry(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554178) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFD)
    v3 = 0;
  if (a2 > 0xFD)
  {
    *(_WORD *)result = a2 - 254;
    *(_BYTE *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = -(char)a2;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

uint64_t sub_1B0960490(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_1B0960498(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Name20Entry()
{
  return &type metadata for Name20Entry;
}

uint64_t sub_1B09604B0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B08A8FD4((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1B0963B38(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1B0960518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t i;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v1 = *(_QWORD *)v0;
  if (*(_QWORD *)v0)
  {
    v22 = *(_OWORD *)(v0 + 8);
    v19 = *(_QWORD *)(v0 + 24);
    sub_1B08ECB18(v0);
    v2 = 0;
    v3 = (char *)MEMORY[0x1E0DEE9D8];
    for (i = 0x199999999999999ALL; ; --i)
    {
      if (!i)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_25;
      }
      v20 = v22;
      sub_1B08ECB18(v0);
      sub_1B08A35F4();
      v6 = sub_1B0A1D090();
      if (__OFADD__(v19, v2))
        break;
      *(_QWORD *)&v20 = sub_1B0A1D078();
      *((_QWORD *)&v20 + 1) = v7;
      v21 = v8;
      swift_bridgeObjectRetain_n();
      v10 = sub_1B08C75E0((uint64_t *)&v20, v9, 3, 1);
      sub_1B08C15A4((uint64_t *)&v20, v11, 1);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = *((_QWORD *)v3 + 2);
      if (v12 && (v13 = &v3[8 * v12 - 8], v10 - *((_DWORD *)v13 + 9) == 1))
      {
        v14 = *((_DWORD *)v13 + 8);
        if (v10 < v14)
          goto LABEL_22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1B0953B24((uint64_t)v3);
        if (v12 > *((_QWORD *)v3 + 2))
          goto LABEL_23;
        v5 = &v3[8 * v12 - 8];
        *((_DWORD *)v5 + 8) = v14;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1B08B6FC0(0, v12 + 1, 1, v3);
        v16 = *((_QWORD *)v3 + 2);
        v15 = *((_QWORD *)v3 + 3);
        if (v16 >= v15 >> 1)
          v3 = sub_1B08B6FC0((char *)(v15 > 1), v16 + 1, 1, v3);
        *((_QWORD *)v3 + 2) = v16 + 1;
        v5 = &v3[8 * v16];
        *((_DWORD *)v5 + 8) = v10;
      }
      *((_DWORD *)v5 + 9) = v10;
      v2 += 5;
      if (!--v1)
      {
        sub_1B0967558(v0);
        return (uint64_t)v3;
      }
    }
    sub_1B08A36F0();
    swift_allocError();
    *v18 = 2;
    v18[1] = v6;
    v18[2] = 0xD00000000000001DLL;
    v18[3] = 0x80000001B0A26020;
    v18[4] = 0;
    swift_willThrow();
LABEL_25:
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

void sub_1B09607FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = __OFSUB__(v2, v1);
  v4 = v2 - v1;
  v5 = v3;
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if ((v5 & 1) != 0)
    goto LABEL_27;
  if ((unint64_t)(v4 + 1) < 3)
    return;
  if (v4 < 2)
    goto LABEL_28;
  v7 = v6 >> 1;
  sub_1B08ECA84(v0);
  v8 = 0;
  v9 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    sub_1B0961B28(v8);
    v12 = v11;
    v13 = HIDWORD(v11);
    v14 = *((_QWORD *)v9 + 2);
    if (!v14 || (v15 = &v9[8 * v14 - 8], (_DWORD)v11 - *((_DWORD *)v15 + 9) != 1))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_1B08B6FC0(0, v14 + 1, 1, v9);
      v18 = *((_QWORD *)v9 + 2);
      v17 = *((_QWORD *)v9 + 3);
      if (v18 >= v17 >> 1)
        v9 = sub_1B08B6FC0((char *)(v17 > 1), v18 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v18 + 1;
      v10 = &v9[8 * v18];
      *((_DWORD *)v10 + 8) = v12;
      goto LABEL_12;
    }
    v16 = *((_DWORD *)v15 + 8);
    if (v16 > HIDWORD(v11))
      break;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = sub_1B0953B24((uint64_t)v9);
    if (v14 > *((_QWORD *)v9 + 2))
      goto LABEL_26;
    v10 = &v9[8 * v14 - 8];
    *((_DWORD *)v10 + 8) = v16;
LABEL_12:
    *((_DWORD *)v10 + 9) = v13;
    if (v7 == ++v8)
    {
      sub_1B08CE0FC(v0);
      return;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_1B0960980(void (*a1)(uint64_t), void (*a2)())
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t i;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[24];
  __int128 v45;

  v3 = *(_OWORD *)(v2 + 24);
  v42 = *(_OWORD *)(v2 + 8);
  v43 = v3;
  *(_OWORD *)v44 = *(_OWORD *)(v2 + 40);
  *(_QWORD *)&v44[16] = *(_QWORD *)(v2 + 56);
  v4 = v3;
  if ((_QWORD)v3)
  {
    v34 = *((_QWORD *)&v43 + 1);
    v45 = *(_OWORD *)&v44[8];
    a1(v2);
    v5 = 0;
    v6 = (char *)MEMORY[0x1E0DEE9D8];
    for (i = 0xAAAAAAAAAAAAAABLL; ; --i)
    {
      if (!i)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      v36 = v4;
      v40 = v45;
      sub_1B08ECAEC((uint64_t)&v42);
      sub_1B08A35F4();
      v9 = sub_1B0A1D090();
      v35 = v5;
      if (__OFADD__(v34, v5))
      {
        sub_1B08A36F0();
        swift_allocError();
        *v29 = 2;
        v29[1] = v9;
        v29[2] = 0xD00000000000001DLL;
        v29[3] = 0x80000001B0A26020;
        v29[4] = 0;
        swift_willThrow();
        goto LABEL_28;
      }
      v10 = sub_1B0A1D078();
      v12 = v11;
      v14 = v13;
      *(_QWORD *)&v40 = v10;
      *((_QWORD *)&v40 + 1) = v11;
      v41 = v13;
      swift_bridgeObjectRetain();
      v37 = v10;
      v38 = v12;
      v39 = v14;
      swift_bridgeObjectRetain_n();
      v16 = sub_1B08C1578(&v37, v15, 1);
      v18 = sub_1B08C1578(&v37, v17, 1);
      swift_bridgeObjectRelease();
      v19 = v37;
      v20 = v39;
      if (v18 < v16)
        break;
      v21 = v38;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v40 = v19;
      *((_QWORD *)&v40 + 1) = v21;
      v41 = v20;
      sub_1B08C1578((uint64_t *)&v40, v22, 1);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = *((_QWORD *)v6 + 2);
      if (v23 && (v24 = &v6[8 * v23 - 8], v16 - *((_DWORD *)v24 + 9) == 1))
      {
        v25 = *((_DWORD *)v24 + 8);
        if (v18 < v25)
          goto LABEL_23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_1B0953B24((uint64_t)v6);
        if (v23 > *((_QWORD *)v6 + 2))
          goto LABEL_24;
        v8 = &v6[8 * v23 - 8];
        *((_DWORD *)v8 + 8) = v25;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_1B08B6FC0(0, v23 + 1, 1, v6);
        v27 = *((_QWORD *)v6 + 2);
        v26 = *((_QWORD *)v6 + 3);
        if (v27 >= v26 >> 1)
          v6 = sub_1B08B6FC0((char *)(v26 > 1), v27 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v27 + 1;
        v8 = &v6[8 * v27];
        *((_DWORD *)v8 + 8) = v16;
      }
      *((_DWORD *)v8 + 9) = v18;
      v5 = v35 + 12;
      v4 = v36 - 1;
      if (v36 == 1)
      {
        a2();
        return (uint64_t)v6;
      }
    }
    sub_1B08A38E4();
    v30 = (void *)swift_allocError();
    swift_willThrow();
    sub_1B08A36F0();
    swift_allocError();
    *v31 = v30;
    v31[1] = v19;
    v31[2] = 0x7272652072657355;
    v31[3] = 0xEA0000000000726FLL;
    v31[4] = v30;
    v32 = v30;
    swift_willThrow();
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_28:
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B0960D84(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((a3 & 1) != 0)
    a2 = 0;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = __OFSUB__(v6, v5);
  v8 = v6 - v5;
  if (v7)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v8 >= 0)
    v9 = v8;
  else
    v9 = v8 + 1;
  v10 = v9 >> 1;
  if (v8 < -1 || v10 < a2)
    goto LABEL_26;
  if (a2 < 0)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v12 = result;
  v13 = *(_OWORD *)(v3 + 80);
  v29 = *(_OWORD *)(v3 + 64);
  v30 = v13;
  v14 = *(_OWORD *)(v3 + 112);
  v31 = *(_OWORD *)(v3 + 96);
  v32 = v14;
  v15 = *(_OWORD *)(v3 + 16);
  v25 = *(_OWORD *)v3;
  v26 = v15;
  v16 = *(_OWORD *)(v3 + 48);
  v27 = *(_OWORD *)(v3 + 32);
  v28 = v16;
  v24[0] = a2;
  v24[1] = v9 >> 1;
  sub_1B08ECA84(v3);
  v17 = sub_1B0927B90(v12, v24);
  if (v17 != v10)
  {
    v18 = sub_1B0961B28(v17);
    if (v19 <= v12 && v20 >= v12)
    {
      v23 = v21;
      if (v22)
      {
        if ((_DWORD)v12 == 0xFFFF)
        {
          sub_1B08CE0FC(v3);
          LOWORD(v12) = -1;
        }
        else
        {
          v12 = sub_1B0961E1C(v12, v18, v19, v21, v22);
          sub_1B08CE0FC(v3);
          if ((v12 & 0x100000000) != 0)
            return 0;
        }
      }
      else
      {
        sub_1B08CE0FC(v3);
      }
      return (unsigned __int16)(v12 + v23);
    }
  }
  sub_1B08CE0FC(v3);
  return 0;
}

uint64_t sub_1B0960ED0(unsigned int a1, uint64_t a2, char a3)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = (uint64_t)v3;
  v5 = *v3;
  if ((a3 & 1) != 0)
    a2 = 0;
  v7 = *(_QWORD *)v3;
  if ((uint64_t)v5 < a2 || (v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a2 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v9 = *(_OWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 32);
  v15[0] = a2;
  v15[1] = v5;
  v16 = v5;
  v17 = v9;
  v18 = v10;
  sub_1B08ECB18(v4);
  v11 = sub_1B0927620(a1, v15);
  if (v11 != v7)
  {
    if ((unsigned __int128)(v11 * (__int128)5) >> 64 == (5 * v11) >> 63)
    {
      sub_1B08ECB18(v4);
      sub_1B08A35F4();
      sub_1B0A1D090();
      sub_1B08A1200();
      v13 = v12;
      swift_bridgeObjectRelease();
      sub_1B0967558(v4);
      if ((_DWORD)v13 == a1)
        return WORD2(v13);
      return 0;
    }
LABEL_16:
    __break(1u);
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  sub_1B0967558(v4);
  return 0;
}

uint64_t sub_1B0961074(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD v20[3];
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD *)(v3 + 24);
  if ((a3 & 1) != 0)
    a2 = 0;
  if (v4 < a2 || v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a2 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v6 = v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_WORD *)(v3 + 16);
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(_QWORD *)(v3 + 40);
  v12 = *(_QWORD *)(v3 + 48);
  v13 = *(_QWORD *)(v6 + 56);
  v20[0] = a2;
  v20[1] = v4;
  v20[2] = v8;
  v21 = v9;
  v22 = v4;
  v23 = v10;
  v24 = v11;
  v25 = v12;
  v26 = v13;
  sub_1B0966DDC(v6);
  v14 = sub_1B0927D80(a1, v20);
  if (v14 == v4)
  {
    sub_1B0966E08(v6);
    return 0;
  }
  if ((unsigned __int128)(v14 * (__int128)12) >> 64 != (12 * v14) >> 63)
    goto LABEL_16;
  sub_1B08A35B0(v12, v13);
  sub_1B08A35F4();
  sub_1B0A1D090();
  sub_1B08A16C4();
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRelease();
  sub_1B0966E08(v6);
  result = 0;
  if (v17 <= a1 && HIDWORD(v17) >= a1)
    return (v19 + a1 - v17);
  return result;
}

uint64_t sub_1B0961260(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[3];
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD *)(v3 + 24);
  if ((a3 & 1) != 0)
    a2 = 0;
  if (v4 < a2 || v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a2 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v6 = v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_WORD *)(v3 + 16);
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(_QWORD *)(v3 + 40);
  v12 = *(_QWORD *)(v3 + 48);
  v13 = *(_QWORD *)(v6 + 56);
  v20[0] = a2;
  v20[1] = v4;
  v20[2] = v8;
  v21 = v9;
  v22 = v4;
  v23 = v10;
  v24 = v11;
  v25 = v12;
  v26 = v13;
  sub_1B0966DDC(v6);
  v14 = sub_1B0927D80(a1, v20);
  if (v14 == v4)
  {
    sub_1B0966E08(v6);
    return 0;
  }
  if ((unsigned __int128)(v14 * (__int128)12) >> 64 != (12 * v14) >> 63)
    goto LABEL_16;
  sub_1B08A35B0(v12, v13);
  sub_1B08A35F4();
  sub_1B0A1D090();
  sub_1B08A16C4();
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRelease();
  sub_1B0966E08(v6);
  result = 0;
  if (v17 <= a1 && HIDWORD(v17) >= a1)
    return v19;
  return result;
}

uint64_t *sub_1B0961448@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *result;
  if (*result >= 262)
    v2 = 262;
  v3 = __OFSUB__(v2, 4);
  v4 = v2 - 4;
  if (v3)
    __break(1u);
  else
    *a2 = v4;
  return result;
}

unint64_t sub_1B096146C(unsigned __int16 a1, uint64_t a2, unsigned __int16 a3, Swift::UInt16 encoding)
{
  uint64_t v4;
  Swift::UInt16 v5;
  unsigned __int16 v8;
  int v9;
  int v10;
  FontParser::Encoding_optional v11;
  _BYTE *v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  Swift::UInt16 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned __int16 v40;

  v5 = encoding;
  v8 = a1;
  v9 = a1 - 1;
  if (!a1)
    v9 = 0;
  v10 = v9 | ((a1 == 0) << 16);
  v11.value = Platform.interpret(encoding:language:)(encoding, (Swift::UInt16_optional)v10).value;
  if (v11.value == FontParser_Encoding_unknownDefault)
  {
    sub_1B08ABB40();
    swift_allocError();
    *v12 = 17;
    return swift_willThrow();
  }
  result = sub_1B08A6A8C(v11.value);
  if (!v4)
  {
    v14 = result;
    v39 = (_QWORD *)sub_1B0901B20(MEMORY[0x1E0DEE9D8]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC3F8);
    sub_1B0A1D114();
    v15 = *(_QWORD *)(v14 + 16);
    if (!v15 || (v38 = *(_QWORD *)(a2 + 16)) == 0)
    {
LABEL_26:
      swift_bridgeObjectRelease();
      return a3 | ((unint64_t)v5 << 16) | ((unint64_t)v8 << 32);
    }
    v35 = a3;
    v40 = v8;
    v36 = v5;
    v16 = *(_DWORD *)(v14 + 32);
    swift_bridgeObjectRetain();
    v17 = 0;
    v37 = v14 + 36;
    while (1)
    {
      v18 = *(unsigned __int8 *)(a2 + v17 + 32);
      if (!*(_BYTE *)(a2 + v17 + 32))
        goto LABEL_22;
      v19 = a2;
      v20 = v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v23 = sub_1B08FA080(v16);
      v24 = v39[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
        goto LABEL_28;
      v27 = v22;
      if (v39[3] >= v26)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v22 & 1) == 0)
            goto LABEL_19;
        }
        else
        {
          sub_1B09007F4();
          if ((v27 & 1) == 0)
            goto LABEL_19;
        }
      }
      else
      {
        sub_1B08FC66C(v26, isUniquelyReferenced_nonNull_native);
        v28 = sub_1B08FA080(v16);
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_30;
        v23 = v28;
        if ((v27 & 1) == 0)
        {
LABEL_19:
          v39[(v23 >> 6) + 8] |= 1 << v23;
          v30 = 4 * v23;
          *(_DWORD *)(v39[6] + v30) = v16;
          *(_DWORD *)(v39[7] + v30) = v18;
          v31 = v39[2];
          v32 = __OFADD__(v31, 1);
          v33 = v31 + 1;
          if (v32)
            goto LABEL_29;
          v39[2] = v33;
          goto LABEL_21;
        }
      }
      *(_DWORD *)(v39[7] + 4 * v23) = v18;
LABEL_21:
      swift_bridgeObjectRelease();
      v14 = v20;
      a2 = v19;
LABEL_22:
      if (v15 - 1 == v17)
        goto LABEL_25;
      v34 = v17 + 1;
      if ((unint64_t)(v17 + 1) >= *(_QWORD *)(v14 + 16))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        result = sub_1B0A1DAD4();
        __break(1u);
        return result;
      }
      v16 = *(_DWORD *)(v37 + 4 * v17++);
      if (v38 == v34)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        a3 = v35;
        v5 = v36;
        v8 = v40;
        goto LABEL_26;
      }
    }
  }
  return result;
}

uint64_t sub_1B096172C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  char *v18;

  swift_bridgeObjectRetain();
  v18 = (char *)sub_1B08E80E0(a2);
  sub_1B09604B0(&v18);
  swift_bridgeObjectRelease();
  v3 = *((_QWORD *)v18 + 2);
  if (!v3)
  {
    v5 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_19:
    swift_release();
    return (uint64_t)v5;
  }
  v4 = v18 + 32;
  v5 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v9 = *(_DWORD *)v4;
    v4 += 4;
    v8 = v9;
    v10 = *((_QWORD *)v5 + 2);
    if (!v10)
    {
LABEL_14:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1B08B6FC0(0, v10 + 1, 1, v5);
      v16 = *((_QWORD *)v5 + 2);
      v15 = *((_QWORD *)v5 + 3);
      if (v16 >= v15 >> 1)
        v5 = sub_1B08B6FC0((char *)(v15 > 1), v16 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v16 + 1;
      v6 = &v5[8 * v16];
      *((_DWORD *)v6 + 8) = v8;
      v7 = v6 + 36;
      goto LABEL_4;
    }
    v11 = v10 - 1;
    v12 = *(_DWORD *)&v5[8 * v10 + 28];
    v13 = v8 >= v12;
    v14 = v8 - v12;
    if (!v13)
      break;
    if (v14 != 1)
      goto LABEL_14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = sub_1B0953B24((uint64_t)v5);
    if (v10 > *((_QWORD *)v5 + 2))
      goto LABEL_20;
    if (v8 < *(_DWORD *)&v5[8 * v11 + 32])
      goto LABEL_21;
    v7 = &v5[8 * v11 + 36];
LABEL_4:
    *(_DWORD *)v7 = v8;
    if (!--v3)
      goto LABEL_19;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1B09618C0()
{
  unsigned __int16 *v0;

  return *v0;
}

uint64_t sub_1B09618C8()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 2);
}

uint64_t sub_1B09618D0()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 4);
}

uint64_t sub_1B09618D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1B096172C(a1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_1B09618E0(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_1B08FA080(a1), (v4 & 1) != 0))
    return *(unsigned int *)(*(_QWORD *)(v2 + 56) + 4 * v3);
  else
    return 0;
}

_QWORD *sub_1B0961928@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 4))
    __break(1u);
  else
    *a2 = *result - 4;
  return result;
}

uint64_t sub_1B0961940@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, __int16 a3@<W2>, __int16 a4@<W3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;

  v20 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC400);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8E0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a5) = *a5;
  sub_1B0A1D09C();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(&v13[*(int *)(v11 + 52)], v17, v14);
  *(_WORD *)v13 = a3;
  *((_WORD *)v13 + 1) = a4;
  *((_WORD *)v13 + 2) = a1;
  v13[6] = (char)a5;
  v13[7] = (char)a5;
  v13[8] = (char)a5;
  *((_QWORD *)v13 + 2) = a2;
  v13[24] = 1;
  *((_QWORD *)v13 + 4) = a2;
  *((_QWORD *)v13 + 5) = a2;
  *((_QWORD *)v13 + 6) = a2;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return sub_1B0966130((uint64_t)v13, v20);
}

uint64_t sub_1B0961A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_WORD *)(a1 + 4);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 120);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_WORD *)(a2 + 4) = v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B0961B28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 + 0x4000000000000000 < 0)
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v15 = sub_1B0A1D084();
    v16 = v2;
    v17 = v3;
    swift_bridgeObjectRetain();
    sub_1B08C15A4(&v15, v4, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = sub_1B0A1D084();
    v16 = v5;
    v17 = v6;
    swift_bridgeObjectRetain();
    sub_1B08C15A4(&v15, v7, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = sub_1B0A1D084();
    v16 = v8;
    v17 = v9;
    swift_bridgeObjectRetain();
    sub_1B08C15A4(&v15, v10, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = sub_1B0A1D084();
    v16 = v11;
    v17 = v12;
    swift_bridgeObjectRetain();
    sub_1B08C15A4(&v15, v13, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
  return result;
}

uint64_t sub_1B0961D7C(uint64_t a1, uint64_t a2, char a3)
{
  _WORD *v3;
  unsigned int v4;
  uint64_t result;
  char v6;
  int v7;
  char v8;

  v4 = a1;
  result = sub_1B0960D84(a1, a2, a3 & 1);
  if ((v6 & 1) != 0)
  {
    if (v4 <= 0xFF
      && *v3 == 3
      && (v7 = (unsigned __int16)v3[2],
          Platform.interpret(encoding:language:)(v3[1], (Swift::UInt16_optional)v7).value == FontParser_Encoding_symbol))
    {
      LODWORD(result) = sub_1B0960D84(v4 + 61440, 0, 1);
      if ((v8 & 1) != 0)
        return 0;
      else
        return result;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B0961E1C(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18[4];

  v6 = result - a3;
  if (result < a3)
  {
    __break(1u);
    goto LABEL_9;
  }
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = __OFSUB__(v8, v7);
  v10 = v8 - v7;
  if (v9)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = v10 / 2;
  v9 = __OFSUB__(v11, a2);
  v12 = v11 - a2;
  if (v9)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v9 = __OFSUB__(v6, v12);
  v13 = v6 - v12;
  if (v9)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v13 + 0x4000000000000000 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = a5 + 2 * v13;
  if (!__OFADD__(a5, 2 * v13))
  {
    v18[0] = sub_1B0A1D084();
    v18[1] = v14;
    v18[2] = v15;
    swift_bridgeObjectRetain();
    v17 = (unsigned __int16)sub_1B08C15A4(v18, v16, 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v18[0]) = 0;
    return v17;
  }
LABEL_13:
  __break(1u);
  return result;
}

void sub_1B0961F28(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (v4)
    __break(1u);
  else
    *a1 = v5 / 2;
}

void (*sub_1B0961F4C(_QWORD *a1, uint64_t *a2))(void **a1)
{
  _OWORD *v2;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  v5 = malloc(0xA0uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = v2[5];
  v5[4] = v2[4];
  v5[5] = v7;
  v8 = v2[7];
  v5[6] = v2[6];
  v5[7] = v8;
  v9 = v2[1];
  *v5 = *v2;
  v5[1] = v9;
  v10 = v2[3];
  v5[2] = v2[2];
  v5[3] = v10;
  *((_QWORD *)v5 + 16) = sub_1B0961B28(v6);
  v5 += 8;
  *((_DWORD *)v5 + 2) = v11;
  *((_DWORD *)v5 + 3) = v12;
  *((_DWORD *)v5 + 4) = v13;
  *((_QWORD *)v5 + 3) = v14;
  return sub_1B0961FD0;
}

void sub_1B0961FD0(void **a1)
{
  free(*a1);
}

uint64_t *sub_1B0961FD8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *result;
  v3 = result[1];
  v5 = v2[1];
  v15 = *v2;
  v16 = v5;
  v6 = v2[5];
  v19 = v2[4];
  v20 = v6;
  v7 = v2[7];
  v21 = v2[6];
  v22 = v7;
  v8 = v2[3];
  v17 = v2[2];
  v18 = v8;
  v9 = v16 - *((_QWORD *)&v15 + 1);
  if (__OFSUB__((_QWORD)v16, *((_QWORD *)&v15 + 1)))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v9 >= 0)
    v10 = v16 - *((_QWORD *)&v15 + 1);
  else
    v10 = v9 + 1;
  if (v9 < -1)
    goto LABEL_10;
  if (v4 < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v10 >> 1 >= v3)
  {
    v11 = v2[5];
    *(_OWORD *)(a2 + 80) = v2[4];
    *(_OWORD *)(a2 + 96) = v11;
    v12 = v2[7];
    *(_OWORD *)(a2 + 112) = v2[6];
    *(_OWORD *)(a2 + 128) = v12;
    v13 = v2[1];
    *(_OWORD *)(a2 + 16) = *v2;
    *(_OWORD *)(a2 + 32) = v13;
    v14 = v2[3];
    *(_OWORD *)(a2 + 48) = v2[2];
    *(_OWORD *)(a2 + 64) = v14;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v3;
    return (uint64_t *)sub_1B08ECA84((uint64_t)&v15);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1B096207C@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = v1[5];
  v14 = v1[4];
  v2 = v14;
  v15 = v3;
  v5 = v1[7];
  v16 = v1[6];
  v4 = v16;
  v17 = v5;
  v6 = v1[1];
  v10 = *v1;
  v11 = v6;
  v8 = v1[3];
  v12 = v1[2];
  v7 = v12;
  v13 = v8;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 128) = 0;
  if (__OFSUB__((_QWORD)v11, *((_QWORD *)&v10 + 1)))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a1 + 136) = ((_QWORD)v11 - *((_QWORD *)&v10 + 1)) / 2;
    return sub_1B08ECA84((uint64_t)&v10);
  }
  return result;
}

BOOL sub_1B09620F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _BOOL8 result;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = __OFSUB__(v2, v1);
  v4 = v2 - v1;
  if (!v3)
    return (unint64_t)(v4 + 1) < 3;
  __break(1u);
  return result;
}

uint64_t *sub_1B0962114@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = *result;
    if (!a2)
    {
LABEL_6:
      *a3 = v3;
      return result;
    }
    v4 = v3 ^ 0x7FFFFFFFFFFFFFFFLL;
    v5 = a2 - 1;
    while (v4 > v5)
    {
      ++v3;
      if (!--a2)
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B096214C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = sub_1B0966E34(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *sub_1B0962180(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v2 = *result;
  v3 = *a2;
  if (*a2 < *result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*a2 == *result)
    return 0;
  v4 = (uint64_t *)(v3 - v2);
  if (v3 > v2)
  {
    result = 0;
    v5 = v3 + ~v2;
    while (v5 <= 0x7FFFFFFFFFFFFFFELL)
    {
      result = (uint64_t *)((char *)result + 1);
      if (v4 == result)
        return result;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_1B09621D8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *sub_1B09621F4(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_1B0962210(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

void sub_1B096222C()
{
  sub_1B09607FC();
}

uint64_t sub_1B0962274(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1B0961D7C(a1, a2, a3 & 1);
}

__n128 sub_1B09622C4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v2;
  v3 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v3;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 32);
  v6 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

uint64_t sub_1B09622EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = __OFSUB__(v2, v1);
  v4 = v2 - v1;
  if (v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 < -1)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (v4 >= 0)
    v5 = v4;
  else
    v5 = v4 + 1;
  v6 = v5 >> 1;
  if ((unint64_t)(v4 + 1) >= 3)
    return v6;
  else
    return 0;
}

uint64_t sub_1B0962324()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[8];

  v1 = v0[5];
  v7[4] = v0[4];
  v7[5] = v1;
  v2 = v0[7];
  v7[6] = v0[6];
  v7[7] = v2;
  v3 = v0[1];
  v7[0] = *v0;
  v7[1] = v3;
  v4 = v0[3];
  v7[2] = v0[2];
  v7[3] = v4;
  v5 = sub_1B08E7C14((uint64_t)v7);
  sub_1B08CE0FC((uint64_t)v7);
  return v5;
}

uint64_t sub_1B096237C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B093851C(a1, a2, a3);
}

_QWORD *sub_1B09623C4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 8))
    __break(1u);
  else
    *a2 = *result - 8;
  return result;
}

unsigned int *sub_1B09623DC@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X8>)
{
  unsigned int v2;

  v2 = result[1];
  if (v2 >= *result)
  {
    *a2 = *result;
    a2[1] = v2;
  }
  else
  {
    sub_1B08A38E4();
    swift_allocError();
    return (unsigned int *)swift_willThrow();
  }
  return result;
}

double sub_1B0962438@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1B096244C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((unsigned __int128)(a1 * (__int128)12) >> 64 == (12 * a1) >> 63)
  {
    sub_1B08ECAEC(v1);
    sub_1B08A35F4();
    sub_1B0A1D090();
    sub_1B08A16C4();
    v3 = v2;
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    __break(1u);
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void sub_1B096255C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void (*sub_1B0962568(_QWORD *a1, uint64_t *a2))(void **a1)
{
  uint64_t v2;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  int v8;

  v5 = malloc(0x44uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = *(_OWORD *)(v2 + 16);
  *v5 = *(_OWORD *)v2;
  v5[1] = v7;
  v5[2] = *(_OWORD *)(v2 + 32);
  *((_QWORD *)v5 + 6) = *(_QWORD *)(v2 + 48);
  *((_QWORD *)v5 + 7) = sub_1B096244C(v6);
  *((_DWORD *)v5 + 16) = v8;
  return sub_1B0961FD0;
}

uint64_t *sub_1B09625DC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *((_OWORD *)v2 + 1);
  v4 = v2[2];
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = result[1];
  if (v4 >= v6)
  {
    v7 = *v2;
    v8 = *((_WORD *)v2 + 4);
    v10 = v2[4];
    v9 = v2[5];
    v11 = v2[6];
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_WORD *)(a2 + 24) = v8;
    *(_OWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 48) = v10;
    *(_QWORD *)(a2 + 56) = v9;
    *(_QWORD *)(a2 + 64) = v11;
    *(_QWORD *)a2 = v5;
    return (uint64_t *)sub_1B08A35B0(v9, v11);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1B0962634@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v2 = *(_WORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_WORD *)(a1 + 8) = v2;
  v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v6;
  return sub_1B08A35B0(v3, v5);
}

BOOL sub_1B0962664()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16) == 0;
}

__n128 sub_1B0962674@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v2 = *(_WORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_WORD *)(a1 + 8) = v2;
  result = *(__n128 *)(v1 + 16);
  v5 = *(_OWORD *)(v1 + 32);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_1B0962698()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (result < 0)
    __break(1u);
  return result;
}

uint64_t sub_1B09626A8()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 16);
  v4[0] = *(_OWORD *)v0;
  v4[1] = v1;
  v4[2] = *(_OWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 48);
  v2 = sub_1B08E7F40((uint64_t)v4);
  sub_1B0966F04((uint64_t)v4);
  return v2;
}

uint64_t sub_1B09626F8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return sub_1B09392A4(a1, a2, a3);
}

uint64_t sub_1B0962738()
{
  return 12;
}

uint64_t sub_1B0962740()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 16);
}

uint64_t sub_1B0962748()
{
  return sub_1B0960980((void (*)(uint64_t))sub_1B0966DDC, (void (*)())sub_1B0966E08);
}

uint64_t sub_1B0962790(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return sub_1B09627F8(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B0961074);
}

uint64_t sub_1B096279C()
{
  return 13;
}

uint64_t sub_1B09627A4()
{
  return sub_1B0960980((void (*)(uint64_t))sub_1B0967604, (void (*)())sub_1B0967608);
}

uint64_t sub_1B09627EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return sub_1B09627F8(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B0961260);
}

uint64_t sub_1B09627F8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, _QWORD))
{
  return a6(a1, a2, a3 & 1);
}

uint64_t sub_1B0962838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = MEMORY[0x1E0DEE9D8];
  v52 = MEMORY[0x1E0DEE9D8];
  v34 = *(_QWORD *)(v0 + 40);
  if (!v34)
    return v1;
  v2 = v0;
  sub_1B08ECA58(v0);
  v3 = 0;
  v33 = v0;
  while (1)
  {
    v4 = (uint64_t *)v2;
    sub_1B0962E14(v3, (uint64_t)&v44);
    if (__OFADD__(v3++, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      sub_1B08A36F0();
      swift_allocError();
      *v28 = 2;
      v28[1] = v4;
      v28[2] = 0xD00000000000001DLL;
      v28[3] = 0x80000001B0A26020;
      v28[4] = 0;
      swift_willThrow();
      goto LABEL_49;
    }
    v6 = v48;
    if (v48 < 0)
      goto LABEL_45;
    v7 = v49;
    v8 = v50;
    if (v48)
      break;
    sub_1B08A3638(v46, v47);
    sub_1B08A3638(v7, v8);
    v23 = v1;
LABEL_3:
    sub_1B08A4464(v23);
    if (v3 == v34)
    {
      sub_1B092CDFC(v2);
      return v52;
    }
  }
  v35 = v47;
  v36 = v46;
  v37 = v3;
  v9 = v44;
  v41 = v51;
  v42 = v49;
  v43 = v1;
  v4 = &v43;
  sub_1B08E8394(0, v48, 0);
  v10 = 0;
  v11 = (v9 & 0xFFFFFFF0) == 65024;
  v12 = v9 + 16;
  if ((v9 & 0xFFFFFFF0) == 0xFE00)
    v12 = v9;
  v38 = v12;
  if ((v9 - 917760) < 0xF0)
    v11 = 1;
  v40 = v11;
  v13 = 0x199999999999999ALL;
  v39 = v8;
  while (1)
  {
    if (!v6)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (!v13)
      goto LABEL_36;
    v44 = v42;
    v45 = v8;
    sub_1B08A35B0(v42, v8);
    sub_1B08A35F4();
    v4 = (uint64_t *)sub_1B0A1D090();
    if (__OFADD__(v41, v10))
      goto LABEL_46;
    v14 = sub_1B0A1D078();
    v17 = v14;
    if (__OFSUB__(v15, v14))
      goto LABEL_37;
    if (v15 - v14 <= 2)
    {
      v44 = 0;
      v45 = 0xE000000000000000;
      swift_bridgeObjectRetain_n();
      sub_1B0A1D8A0();
      swift_bridgeObjectRelease();
      v44 = 0x6974736575716552;
      v45 = 0xEB0000000020676ELL;
      sub_1B0A1DA68();
      sub_1B0A1D33C();
      swift_bridgeObjectRelease();
      sub_1B0A1D33C();
      sub_1B0A1DA68();
      sub_1B0A1D33C();
      swift_bridgeObjectRelease();
      sub_1B0A1D33C();
      v29 = v44;
      v30 = v45;
      sub_1B08A36F0();
      swift_allocError();
      *v31 = 0;
      v31[1] = v17;
      v31[2] = v29;
      v31[3] = v30;
      v31[4] = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_50;
    }
    v44 = v14;
    v45 = v15;
    v46 = v16;
    v18 = sub_1B08C8098((unint64_t)&v44, 3, 1);
    v19 = v44;
    if (__OFSUB__(v45, v44))
      goto LABEL_38;
    if (v45 - v44 < 2)
      break;
    if (v44 > 0x7FFFFFFFFFFFFFFDLL || v45 < v44 + 2)
      goto LABEL_39;
    if (v44 < 0)
      goto LABEL_40;
    v20 = *(_QWORD *)(v46 + 16);
    if (v20 < v44 || v20 < v44 + 2)
      goto LABEL_41;
    v21 = v18;
    v4 = (uint64_t *)(v46 + v44);
    swift_bridgeObjectRetain();
    v22 = *((unsigned __int16 *)v4 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (HIBYTE(v21))
      goto LABEL_42;
    if (!v40)
      goto LABEL_43;
    v23 = v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = &v43;
      sub_1B08E8394(0, *(_QWORD *)(v23 + 16) + 1, 1);
      v23 = v43;
    }
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if (v25 >= v24 >> 1)
    {
      v4 = &v43;
      sub_1B08E8394((char *)(v24 > 1), v25 + 1, 1);
      v23 = v43;
    }
    *(_QWORD *)(v23 + 16) = v25 + 1;
    v26 = v23 + 16 * v25;
    *(_BYTE *)(v26 + 32) = BYTE2(v21);
    *(_BYTE *)(v26 + 33) = BYTE1(v21);
    *(_BYTE *)(v26 + 34) = v21;
    *(_BYTE *)(v26 + 35) = v38;
    *(_BYTE *)(v26 + 36) = 0;
    v10 += 5;
    --v13;
    *(_QWORD *)(v26 + 40) = bswap32(v22) >> 16;
    --v6;
    v8 = v39;
    if (!v6)
    {
      sub_1B08A3638(v36, v35);
      sub_1B08A3638(v42, v39);
      v1 = MEMORY[0x1E0DEE9D8];
      v2 = v33;
      v3 = v37;
      goto LABEL_3;
    }
  }
  v44 = 0;
  v45 = 0xE000000000000000;
  swift_bridgeObjectRetain_n();
  sub_1B0A1D8A0();
  swift_bridgeObjectRelease();
  sub_1B08A36F0();
  swift_allocError();
  *v32 = 0;
  v32[1] = v19;
  v32[2] = 0xD00000000000002BLL;
  v32[3] = 0x80000001B0A25FD0;
  v32[4] = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_49:
  swift_bridgeObjectRelease();
LABEL_50:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B0962E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v5 = 11 * a1;
  if ((unsigned __int128)(a1 * (__int128)11) >> 64 == (11 * a1) >> 63)
  {
    v6 = v2[1];
    v7 = v2[2];
    v8 = *v2;
    *((_QWORD *)&v25 + 1) = v6;
    sub_1B08ECA58((uint64_t)v2);
    sub_1B08A35B0(v8, v6);
    sub_1B08A35F4();
    v3 = sub_1B0A1D090();
    if (!__OFADD__(v7, v5))
    {
      *(_QWORD *)&v25 = sub_1B0A1D078();
      *((_QWORD *)&v25 + 1) = v9;
      *(_QWORD *)&v26 = v10;
      swift_bridgeObjectRetain_n();
      v12 = sub_1B0970D14(&v25, 3, 0x10101u, v11);
      v14 = v13;
      v16 = v15;
      swift_bridgeObjectRelease_n();
      sub_1B08ECA58((uint64_t)v2);
      sub_1B0964A88(v8, v6, v14, &v25);
      v23 = v26;
      v24 = v25;
      v17 = v27;
      sub_1B08ECA58((uint64_t)v2);
      sub_1B0964A88(v8, v6, v16, &v25);
      v21 = v26;
      v22 = v25;
      v18 = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = sub_1B092CDFC((uint64_t)v2);
      *(_DWORD *)a2 = v12;
      *(_OWORD *)(a2 + 8) = v24;
      *(_OWORD *)(a2 + 24) = v23;
      *(_QWORD *)(a2 + 40) = v17;
      *(_OWORD *)(a2 + 48) = v22;
      *(_OWORD *)(a2 + 64) = v21;
      *(_QWORD *)(a2 + 80) = v18;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  sub_1B08A36F0();
  swift_allocError();
  *v20 = 2;
  v20[1] = v3;
  v20[2] = 0xD00000000000001DLL;
  v20[3] = 0x80000001B0A26020;
  v20[4] = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_1B092CDFC((uint64_t)v2);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B096306C(unsigned int a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t (*v19)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[7];

  v5 = sub_1B092837C(a2, v2);
  if (v5 == v2[5])
    return 0;
  sub_1B0962E14(v5, (uint64_t)&v17);
  v7 = v19;
  v6 = v20;
  v9 = v24;
  v8 = v25;
  if ((_DWORD)v17 != a2)
  {
    sub_1B08A3638((uint64_t)v19, v20);
    sub_1B08A3638(v9, v8);
    return 0;
  }
  v10 = v23;
  v11 = v26;
  v12 = v27;
  sub_1B08A35B0((uint64_t)v19, v20);
  sub_1B08A35B0(v9, v8);
  sub_1B08A3638(v9, v8);
  sub_1B08A3638((uint64_t)v7, v6);
  if (v10 < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v28[0] = 0;
  v28[1] = v10;
  v28[2] = v10;
  v28[3] = v9;
  v28[4] = v8;
  v28[5] = v11;
  v28[6] = v12;
  sub_1B08A35B0(v9, v8);
  sub_1B08A35B0(v9, v8);
  v13 = sub_1B0927620(a1, v28);
  sub_1B08A3638(v9, v8);
  if (v13 == v10)
  {
    sub_1B08A3638(v9, v8);
    sub_1B08A3638((uint64_t)v7, v6);
    sub_1B08A3638(v9, v8);
    return 0;
  }
  if ((unsigned __int128)(v13 * (__int128)5) >> 64 != (5 * v13) >> 63)
    goto LABEL_14;
  v17 = 3;
  v18 = 257;
  v19 = sub_1B08E32D0;
  v20 = 0;
  v21 = v11;
  v22 = v12;
  v23 = 5 * v13;
  LOBYTE(v24) = 2;
  v25 = 0;
  LOBYTE(v26) = 1;
  sub_1B08A35B0(v9, v8);
  sub_1B08A35F4();
  sub_1B0A1D090();
  sub_1B08A1200();
  v16 = v15;
  swift_bridgeObjectRelease();
  sub_1B08A3638(v9, v8);
  sub_1B08A3638((uint64_t)v7, v6);
  sub_1B08A3638(v9, v8);
  if ((_DWORD)v16 == a1)
    return WORD2(v16);
  else
    return 0;
}

void sub_1B09632D8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
}

void (*sub_1B09632E4(_QWORD *a1, uint64_t *a2))(uint64_t a1)
{
  _OWORD *v2;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (*result)(uint64_t);
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = (char *)malloc(0x88uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = v2[1];
  *(_OWORD *)(v5 + 88) = *v2;
  *(_OWORD *)(v5 + 104) = v7;
  *(_OWORD *)(v5 + 120) = v2[2];
  sub_1B0962E14(v6, (uint64_t)&v14);
  v8 = v15;
  v9 = v16;
  v10 = v17;
  v11 = v18;
  v12 = v19;
  *(_DWORD *)v5 = v14;
  *(_OWORD *)(v5 + 8) = v8;
  *(_OWORD *)(v5 + 24) = v9;
  *(_OWORD *)(v5 + 40) = v10;
  result = sub_1B0963380;
  *(_OWORD *)(v5 + 56) = v11;
  *(_OWORD *)(v5 + 72) = v12;
  return result;
}

void sub_1B0963380(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  sub_1B08A3638(*(_QWORD *)(*(_QWORD *)a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 24));
  sub_1B08A3638(v2, v3);
  free(v1);
}

uint64_t *sub_1B09633C0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(v2 + 40);
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = result[1];
  if (v3 >= v5)
  {
    v6 = *(_QWORD *)v2;
    v7 = *(_OWORD *)(v2 + 8);
    v8 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 24) = v7;
    *(_OWORD *)(a2 + 40) = v8;
    *(_QWORD *)(a2 + 56) = v3;
    *(_QWORD *)a2 = v4;
    return (uint64_t *)sub_1B08A35B0(v6, v7);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1B0963410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v4 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  return sub_1B08A35B0(v2, v4);
}

BOOL sub_1B096343C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40) == 0;
}

uint64_t sub_1B096344C()
{
  return sub_1B0962838();
}

uint64_t sub_1B0963484(unsigned int a1, unsigned int a2)
{
  return sub_1B096306C(a1, a2);
}

__n128 sub_1B09634C0@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1B09634D8()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 40);
  if (result < 0)
    __break(1u);
  return result;
}

_QWORD *sub_1B09634E8()
{
  _OWORD *v0;
  __int128 v1;
  _QWORD *v2;
  _OWORD v4[3];

  v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  v2 = sub_1B08E7E74(v4);
  sub_1B092CDFC((uint64_t)v4);
  return v2;
}

uint64_t sub_1B0963530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0938E70(a1, a2, a3);
}

unint64_t sub_1B0963568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unint64_t result;
  void *v8;
  _QWORD *v9;
  id v10;

  if ((unint64_t)(a1 - 0x2000000000000000) >> 62 == 3)
  {
    sub_1B08ECB18(v1);
    sub_1B08A35F4();
    v2 = sub_1B0A1D090();
    swift_bridgeObjectRetain_n();
    sub_1B08A144C();
    v4 = v3;
    v6 = v3 + v5;
    if (!__CFADD__(v3, v5))
    {
      swift_bridgeObjectRelease_n();
      return v4 | ((unint64_t)v6 << 32);
    }
    sub_1B08A38A0();
    v8 = (void *)swift_allocError();
    swift_willThrow();
    sub_1B08A36F0();
    swift_allocError();
    *v9 = v8;
    v9[1] = v2;
    v9[2] = 0x7272652072657355;
    v9[3] = 0xEA0000000000726FLL;
    v9[4] = v8;
    v10 = v8;
    swift_willThrow();
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_1B0963714(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void (*sub_1B0963720(_QWORD *a1, uint64_t *a2))(void **a1)
{
  uint64_t v2;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v6 = *a2;
  v7 = *(_OWORD *)(v2 + 16);
  *v5 = *(_OWORD *)v2;
  v5[1] = v7;
  *((_QWORD *)v5 + 4) = *(_QWORD *)(v2 + 32);
  *((_QWORD *)v5 + 5) = sub_1B0963568(v6);
  return sub_1B0961FD0;
}

BOOL sub_1B096378C()
{
  _QWORD *v0;

  return *v0 == 0;
}

__n128 sub_1B09637B4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1B09637C8(uint64_t a1, uint64_t a2)
{
  return sub_1B0963AB4(a1, a2, (uint64_t (*)(_OWORD *))sub_1B08E7DAC, (void (*)(_OWORD *))sub_1B0967558);
}

uint64_t sub_1B09637DC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return sub_1B0938B0C(a1, a2, a3);
}

uint64_t sub_1B0963814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((unsigned __int128)(a1 * (__int128)5) >> 64 == (5 * a1) >> 63)
  {
    sub_1B08ECB18(v1);
    sub_1B08A35F4();
    sub_1B0A1D090();
    sub_1B08A1200();
    v3 = v2;
    swift_bridgeObjectRelease();
    return v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    __break(1u);
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void (*sub_1B0963910(_QWORD *a1, uint64_t *a2))(void **a1)
{
  uint64_t v2;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v5 = malloc(0x2EuLL);
  *a1 = v5;
  v6 = *a2;
  v7 = *(_OWORD *)(v2 + 16);
  *v5 = *(_OWORD *)v2;
  v5[1] = v7;
  *((_QWORD *)v5 + 4) = *(_QWORD *)(v2 + 32);
  v8 = sub_1B0963814(v6);
  *((_DWORD *)v5 + 10) = v8;
  *((_WORD *)v5 + 22) = WORD2(v8);
  return sub_1B0961FD0;
}

uint64_t *sub_1B096397C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = *v2;
  if (*v2 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = result[1];
  if (v3 >= v5)
  {
    v6 = v2[1];
    v7 = *((_OWORD *)v2 + 1);
    v8 = v2[4];
    *(_QWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a2 + 24) = v6;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    return (uint64_t *)sub_1B08A35B0(v6, v7);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1B09639C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[4];
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  v5 = *((_OWORD *)v1 + 1);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v3;
  return sub_1B08A35B0(v2, v5);
}

uint64_t sub_1B09639EC()
{
  return 14;
}

uint64_t sub_1B09639F4()
{
  uint64_t result;

  *(Swift::UInt16_optional *)&result = Platform.rawValue(encoding:)(FontParser_Encoding_unicodeVariationSequences);
  if ((result & 0x10000) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1B0963A18()
{
  return sub_1B0960518();
}

uint64_t sub_1B0963A50(unsigned int a1, uint64_t a2, char a3)
{
  return sub_1B0960ED0(a1, a2, a3 & 1);
}

uint64_t sub_1B0963A90()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (*v0 < 0)
    __break(1u);
  return result;
}

uint64_t sub_1B0963AA0(uint64_t a1, uint64_t a2)
{
  return sub_1B0963AB4(a1, a2, (uint64_t (*)(_OWORD *))sub_1B08E7CF4, (void (*)(_OWORD *))sub_1B096760C);
}

uint64_t sub_1B0963AB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *), void (*a4)(_OWORD *))
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;

  v6 = *(_OWORD *)(v4 + 16);
  v9[0] = *(_OWORD *)v4;
  v9[1] = v6;
  v10 = *(_QWORD *)(v4 + 32);
  v7 = a3(v9);
  a4(v9);
  return v7;
}

uint64_t sub_1B0963B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B0938870(a1, a2, a3);
}

uint64_t sub_1B0963B38(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;

  v2 = a1;
  v3 = a1[1];
  result = sub_1B0A1DA50();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v76 = 0;
      v77 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v79 = *(_DWORD *)(v77 + 4 * i);
        v80 = v76;
        do
        {
          v81 = *(_DWORD *)(v77 + v80);
          if (v79 >= v81)
            break;
          if (!v77)
            goto LABEL_142;
          *(_DWORD *)(v77 + v80 + 4) = v81;
          *(_DWORD *)(v77 + v80) = v79;
          v80 -= 4;
        }
        while (v80 != -4);
        v76 += 4;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v93 = result;
    v94 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = sub_1B0A1D4D4();
      *(_QWORD *)(result + 16) = v6;
      v3 = v94;
      v92 = result;
      v96 = (char *)(result + 32);
LABEL_13:
      v8 = 0;
      v9 = *v2;
      v90 = v2;
      v91 = *v2 - 4;
      v10 = MEMORY[0x1E0DEE9D8];
      v95 = *v2;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(_DWORD *)(v9 + 4 * v8);
          v14 = *(_DWORD *)(v9 + 4 * v12);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = v13;
            while (1)
            {
              v16 = *(_DWORD *)(v9 + 4 * v8);
              if (v13 < v14 == v16 >= v15)
                break;
              ++v8;
              v15 = v16;
              if (v3 == v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_139;
            if (v12 < v8)
            {
              v17 = v8 - 1;
              v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9)
                    goto LABEL_145;
                  v19 = *(_DWORD *)(v9 + 4 * v18);
                  *(_DWORD *)(v9 + 4 * v18) = *(_DWORD *)(v9 + 4 * v17);
                  *(_DWORD *)(v9 + 4 * v17) = v19;
                }
                v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_136;
          if (v8 - v12 < v93)
          {
            v20 = v12 + v93;
            if (__OFADD__(v12, v93))
              goto LABEL_140;
            if (v20 >= v3)
              v20 = v3;
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              v21 = (unsigned int *)(v91 + 4 * v8);
              do
              {
                v22 = *(_DWORD *)(v9 + 4 * v8);
                v23 = v12;
                v24 = v21;
                do
                {
                  v25 = *v24;
                  if (v22 >= *v24)
                    break;
                  if (!v9)
                    goto LABEL_143;
                  *v24 = v22;
                  v24[1] = v25;
                  --v24;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              v8 = v20;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08A8EA0(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v27 = *(_QWORD *)(v10 + 16);
        v26 = *(_QWORD *)(v10 + 24);
        v11 = v27 + 1;
        v9 = v95;
        if (v27 >= v26 >> 1)
        {
          result = (uint64_t)sub_1B08A8EA0((char *)(v26 > 1), v27 + 1, 1, (char *)v10);
          v9 = v95;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v11;
        v28 = v10 + 32;
        v29 = (uint64_t *)(v10 + 32 + 16 * v27);
        *v29 = v12;
        v29[1] = v8;
        if (v27)
        {
          while (1)
          {
            v30 = v11 - 1;
            if (v11 >= 4)
            {
              v35 = v28 + 16 * v11;
              v36 = *(_QWORD *)(v35 - 64);
              v37 = *(_QWORD *)(v35 - 56);
              v41 = __OFSUB__(v37, v36);
              v38 = v37 - v36;
              if (v41)
                goto LABEL_120;
              v40 = *(_QWORD *)(v35 - 48);
              v39 = *(_QWORD *)(v35 - 40);
              v41 = __OFSUB__(v39, v40);
              v33 = v39 - v40;
              v34 = v41;
              if (v41)
                goto LABEL_121;
              v42 = v11 - 2;
              v43 = (uint64_t *)(v28 + 16 * (v11 - 2));
              v45 = *v43;
              v44 = v43[1];
              v41 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              if (v41)
                goto LABEL_122;
              v41 = __OFADD__(v33, v46);
              v47 = v33 + v46;
              if (v41)
                goto LABEL_124;
              if (v47 >= v38)
              {
                v65 = (uint64_t *)(v28 + 16 * v30);
                v67 = *v65;
                v66 = v65[1];
                v41 = __OFSUB__(v66, v67);
                v68 = v66 - v67;
                if (v41)
                  goto LABEL_130;
                v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v59 = *(_QWORD *)(v10 + 32);
                v60 = *(_QWORD *)(v10 + 40);
                v41 = __OFSUB__(v60, v59);
                v52 = v60 - v59;
                v53 = v41;
                goto LABEL_78;
              }
              v32 = *(_QWORD *)(v10 + 32);
              v31 = *(_QWORD *)(v10 + 40);
              v41 = __OFSUB__(v31, v32);
              v33 = v31 - v32;
              v34 = v41;
            }
            if ((v34 & 1) != 0)
              goto LABEL_123;
            v42 = v11 - 2;
            v48 = (uint64_t *)(v28 + 16 * (v11 - 2));
            v50 = *v48;
            v49 = v48[1];
            v51 = __OFSUB__(v49, v50);
            v52 = v49 - v50;
            v53 = v51;
            if (v51)
              goto LABEL_125;
            v54 = (uint64_t *)(v28 + 16 * v30);
            v56 = *v54;
            v55 = v54[1];
            v41 = __OFSUB__(v55, v56);
            v57 = v55 - v56;
            if (v41)
              goto LABEL_127;
            if (__OFADD__(v52, v57))
              goto LABEL_129;
            if (v52 + v57 >= v33)
            {
              v58 = v33 < v57;
LABEL_84:
              if (v58)
                v30 = v42;
              goto LABEL_86;
            }
LABEL_78:
            if ((v53 & 1) != 0)
              goto LABEL_126;
            v61 = (uint64_t *)(v28 + 16 * v30);
            v63 = *v61;
            v62 = v61[1];
            v41 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v41)
              goto LABEL_128;
            if (v64 < v52)
              goto LABEL_15;
LABEL_86:
            v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9)
              goto LABEL_144;
            v70 = (uint64_t *)(v28 + 16 * v69);
            v71 = *v70;
            v72 = v28;
            v73 = (_QWORD *)(v28 + 16 * v30);
            v74 = v73[1];
            result = sub_1B0922654((char *)(v9 + 4 * *v70), (char *)(v9 + 4 * *v73), v9 + 4 * v74, v96);
            if (v1)
              goto LABEL_114;
            if (v74 < v71)
              goto LABEL_117;
            if (v30 > *(_QWORD *)(v10 + 16))
              goto LABEL_118;
            *v70 = v71;
            *(_QWORD *)(v72 + 16 * v69 + 8) = v74;
            v75 = *(_QWORD *)(v10 + 16);
            if (v30 >= v75)
              goto LABEL_119;
            v11 = v75 - 1;
            result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            v28 = v72;
            *(_QWORD *)(v10 + 16) = v75 - 1;
            v9 = v95;
            if (v75 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v94;
        if (v8 >= v94)
        {
          v7 = v92;
          v2 = v90;
          goto LABEL_103;
        }
      }
    }
    v7 = MEMORY[0x1E0DEE9D8];
    v96 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v92 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v10 = MEMORY[0x1E0DEE9D8];
LABEL_103:
    v92 = v7;
    if (v11 >= 2)
    {
      v82 = *v2;
      do
      {
        v83 = v11 - 2;
        if (v11 < 2)
          goto LABEL_132;
        if (!v82)
          goto LABEL_146;
        v84 = v10;
        v85 = v10 + 32;
        v86 = *(_QWORD *)(v10 + 32 + 16 * v83);
        v87 = *(_QWORD *)(v10 + 32 + 16 * (v11 - 1) + 8);
        result = sub_1B0922654((char *)(v82 + 4 * v86), (char *)(v82 + 4 * *(_QWORD *)(v85 + 16 * (v11 - 1))), v82 + 4 * v87, v96);
        if (v1)
          break;
        if (v87 < v86)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08A8F98(v84);
          v84 = result;
        }
        if (v83 >= *(_QWORD *)(v84 + 16))
          goto LABEL_134;
        v88 = (_QWORD *)(v84 + 32 + 16 * v83);
        *v88 = v86;
        v88[1] = v87;
        v89 = *(_QWORD *)(v84 + 16);
        if (v11 > v89)
          goto LABEL_135;
        result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        v10 = v84;
        *(_QWORD *)(v84 + 16) = v89 - 1;
        v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v92 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B096417C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  char v9;
  void (*v10)(__int128 *__return_ptr, uint64_t *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;

  v9 = *(_BYTE *)a2;
  v10 = *(void (**)(__int128 *__return_ptr, uint64_t *))(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *((_QWORD *)a1 + 2);
  v24 = *a1;
  *(_QWORD *)&v25 = v12;
  swift_bridgeObjectRetain();
  sub_1B096F5AC((uint64_t *)&v24, v9, v10, v11, a3);
  if (v4)
    return swift_bridgeObjectRelease();
  v15 = v13;
  v16 = v14;
  swift_bridgeObjectRelease();
  v17 = *(_OWORD *)(a2 + 40);
  v34[0] = *(_OWORD *)(a2 + 24);
  v34[1] = v17;
  v35 = *(_QWORD *)(a2 + 56);
  v18 = v25;
  *a1 = v24;
  *((_QWORD *)a1 + 2) = v18;
  *(_QWORD *)&v32 = v15;
  *((_QWORD *)&v32 + 1) = v16;
  v33 = v18;
  swift_bridgeObjectRetain_n();
  sub_1B08BDAC0(&v32, (unsigned __int8 *)v34, a3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v20 = v29;
  a4[4] = v28;
  a4[5] = v20;
  v21 = v31;
  a4[6] = v30;
  a4[7] = v21;
  v22 = v25;
  *a4 = v24;
  a4[1] = v22;
  v23 = v27;
  a4[2] = v26;
  a4[3] = v23;
  return result;
}

uint64_t sub_1B09642C8(__int128 *a1, uint64_t a2, int a3, uint64_t (*a4)(__int16 *, __int16 *), uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  uint64_t v18;

  v12 = *((_QWORD *)a1 + 2);
  v17 = *a1;
  v18 = v12;
  v13 = a3 & 0xFFFF0001;
  swift_bridgeObjectRetain_n();
  sub_1B0964514((uint64_t *)&v17, v13, a4, a5, a2);
  swift_bridgeObjectRelease();
  if (v6)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v14 = sub_1B08C1578((uint64_t *)&v17, a2, a6 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v18;
  result = v14;
  *a1 = v17;
  *((_QWORD *)a1 + 2) = v15;
  return result;
}

uint64_t *sub_1B09643E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(int *);
  uint64_t v8;
  char v9;
  void (*v10)(__int128 *__return_ptr, uint64_t *);
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t (**)(int *))(v2 + 8);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_BYTE *)v2 & 1;
  v14 = *(_OWORD *)a1;
  v15 = v6;
  swift_bridgeObjectRetain_n();
  sub_1B08C8FA0(&v14, v9, v7, v8, (uint64_t)a2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(void (**)(__int128 *__return_ptr, uint64_t *))(v2 + 24);
    v11 = *(_QWORD *)(v2 + 32);
    swift_bridgeObjectRetain();
    a2 = (uint64_t *)sub_1B0976134((uint64_t)&v14, v10, v11, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v15;
    *(_OWORD *)a1 = v14;
    *(_QWORD *)(a1 + 16) = v13;
  }
  return a2;
}

uint64_t *sub_1B0964514(uint64_t *a1, int a2, uint64_t (*a3)(__int16 *, __int16 *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  __int16 v13;
  __int16 v14;

  v14 = HIWORD(a2);
  v8 = sub_1B08C15A4(a1, a5, a2 & 1);
  v9 = v8;
  if (!v5)
  {
    v13 = (__int16)v8;
    if ((a3(&v13, &v14) & 1) == 0)
    {
      v10 = *a1;
      sub_1B0A1D8A0();
      sub_1B0A1D33C();
      sub_1B0A1D900();
      sub_1B0A1D33C();
      sub_1B0A1D900();
      sub_1B08A36F0();
      swift_allocError();
      *v11 = 3;
      v11[1] = v10;
      v11[2] = 0;
      v11[3] = 0xE000000000000000;
      v11[4] = 0;
      swift_willThrow();
    }
  }
  return v9;
}

uint64_t *sub_1B0964678(uint64_t *a1, uint64_t a2, uint64_t (*a3)(int *, int *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  int v13;
  int v14;

  v14 = HIDWORD(a2);
  v8 = sub_1B08C1578(a1, a5, a2 & 1);
  v9 = v8;
  if (!v5)
  {
    v13 = (int)v8;
    if ((a3(&v13, &v14) & 1) == 0)
    {
      v10 = *a1;
      sub_1B0A1D8A0();
      sub_1B0A1D33C();
      sub_1B0A1D900();
      sub_1B0A1D33C();
      sub_1B0A1D900();
      sub_1B08A36F0();
      swift_allocError();
      *v11 = 3;
      v11[1] = v10;
      v11[2] = 0;
      v11[3] = 0xE000000000000000;
      v11[4] = 0;
      swift_willThrow();
    }
  }
  return v9;
}

char *sub_1B09647DC(_QWORD *a1, unsigned int a2, void (*a3)(uint64_t *__return_ptr, _WORD *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char v24;
  int v27;
  int v28;
  _QWORD *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _WORD v35[3];
  uint64_t v36;

  v6 = v5;
  v7 = *a1;
  v8 = a1[1];
  if (*a1 == v8)
    return (char *)MEMORY[0x1E0DEE9D8];
  v9 = a5;
  v10 = a2;
  v29 = a1;
  v30 = (char *)MEMORY[0x1E0DEE9D8];
  v27 = HIWORD(a2) & 1;
  v28 = (a2 >> 8) & 1;
  v24 = a2;
  while (1)
  {
    v11 = a1[2];
    *(_QWORD *)&v31 = v7;
    *((_QWORD *)&v31 + 1) = v8;
    v32 = v11;
    swift_bridgeObjectRetain_n();
    v12 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v31, v9, v10 & 1);
    if (v6)
      break;
    v13 = v12;
    v6 = 0;
    v14 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v31, v9, v28);
    swift_bridgeObjectRelease();
    v33 = v31;
    v34 = v32;
    v15 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v33, v9, v27);
    swift_bridgeObjectRelease();
    v8 = *((_QWORD *)&v33 + 1);
    v7 = v33;
    v16 = v34;
    v35[0] = v13;
    v35[1] = v14;
    v35[2] = v15;
    a3(&v36, v35);
    swift_bridgeObjectRelease();
    v17 = v36;
    v18 = WORD1(v36);
    v19 = WORD2(v36);
    *v29 = v7;
    v29[1] = v8;
    v29[2] = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = sub_1B08B7A58(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
    v21 = *((_QWORD *)v30 + 2);
    v20 = *((_QWORD *)v30 + 3);
    if (v21 >= v20 >> 1)
      v30 = sub_1B08B7A58((char *)(v20 > 1), v21 + 1, 1, v30);
    a1 = v29;
    *((_QWORD *)v30 + 2) = v21 + 1;
    v22 = &v30[6 * v21];
    *((_WORD *)v22 + 16) = v17;
    *((_WORD *)v22 + 17) = v18;
    *((_WORD *)v22 + 18) = v19;
    v9 = a5;
    v10 = v24;
    if (v7 == v8)
      return v30;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

uint64_t sub_1B0964A88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = a1;
  v18 = a2;
  sub_1B08A35B0(a1, a2);
  sub_1B08A35F4();
  result = sub_1B0A1D090();
  if (v9 < result)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    v11 = v9;
    if (!a3)
    {
      result = swift_bridgeObjectRelease();
      v15 = 0;
LABEL_5:
      *a4 = v15;
      a4[1] = a1;
      a4[2] = a2;
      a4[3] = v10;
      a4[4] = v11;
      return result;
    }
    sub_1B08A35B0(a1, a2);
    v17 = sub_1B0A1D084();
    v18 = v12;
    v19 = v13;
    swift_bridgeObjectRetain_n();
    v16 = sub_1B08C1578(&v17, v14, 1);
    swift_bridgeObjectRelease_n();
    v10 = v17;
    v11 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = sub_1B08A3638(a1, a2);
    if (v11 >= v10)
    {
      v15 = v16;
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B0964BFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  sub_1B08A35B0(a1, a2);
  sub_1B08A35B0(a1, a2);
  sub_1B08A35F4();
  *(_QWORD *)&v15 = sub_1B0A1D090();
  *((_QWORD *)&v15 + 1) = v7;
  v16 = v8;
  swift_bridgeObjectRetain_n();
  sub_1B09642C8(&v15, v9, 917505, (uint64_t (*)(__int16 *, __int16 *))sub_1B08F6994, 0, 1);
  if (!v3)
  {
    v13 = v15;
    v14 = v16;
    swift_bridgeObjectRetain();
    sub_1B08C1578((uint64_t *)&v13, v10, 1);
    v17 = a3;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v12 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((uint64_t *)&v12 + 1) >= (uint64_t)v12)
      __asm { BR              X11 }
    __break(1u);
    JUMPOUT(0x1B0964E20);
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  sub_1B08A3638(a1, a2);
  return sub_1B08A3638(a1, a2);
}

uint64_t sub_1B0964E38(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)result;
  v1 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result == v1)
    return MEMORY[0x1E0DEE9D8];
  if (!__OFSUB__(v1, v2))
  {
    if ((uint64_t)(v1 - v2) < 1)
    {
      v3 = MEMORY[0x1E0DEE9D8];
LABEL_25:
      sub_1B0A1D8A0();
      swift_bridgeObjectRelease();
      sub_1B08A36F0();
      swift_allocError();
      *v13 = 0;
      v13[1] = v2;
      v13[2] = 0xD00000000000002ALL;
      v13[3] = 0x80000001B0A25FA0;
      v13[4] = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return v3;
    }
    v4 = (unint64_t *)result;
    v3 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v5 = v2 + 1;
      if (v2 == 0x7FFFFFFFFFFFFFFFLL || v1 < (uint64_t)v5)
        break;
      v7 = v4[2];
      *v4 = v5;
      v4[1] = v1;
      if ((v2 & 0x8000000000000000) != 0)
        goto LABEL_28;
      v8 = *(_QWORD *)(v7 + 16);
      if (v8 < v2 || v8 < v5)
        goto LABEL_29;
      v10 = *(_BYTE *)(v7 + v2 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08B6A2C(0, *(_QWORD *)(v3 + 16) + 1, 1, (char *)v3);
        v3 = result;
      }
      v12 = *(_QWORD *)(v3 + 16);
      v11 = *(_QWORD *)(v3 + 24);
      if (v12 >= v11 >> 1)
      {
        result = (uint64_t)sub_1B08B6A2C((char *)(v11 > 1), v12 + 1, 1, (char *)v3);
        v3 = result;
      }
      *(_QWORD *)(v3 + 16) = v12 + 1;
      *(_BYTE *)(v3 + v12 + 32) = v10;
      v2 = *v4;
      v1 = v4[1];
      if (*v4 == v1)
        return v3;
      if (__OFSUB__(v1, v2))
        goto LABEL_30;
      if ((uint64_t)(v1 - v2) < 1)
        goto LABEL_25;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_1B0964FFC(__int128 *a1, char a2, void (*a3)(__int128 *__return_ptr, uint64_t *), uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v13 = *((_QWORD *)a1 + 2);
  v22 = *a1;
  v23 = v13;
  swift_bridgeObjectRetain();
  sub_1B096F5AC((uint64_t *)&v22, a2, a3, a4, a6);
  if (v6)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = v14;
    v17 = v15;
    swift_bridgeObjectRelease();
    v18 = v23;
    *a1 = v22;
    *((_QWORD *)a1 + 2) = v18;
    *(_QWORD *)&v22 = v16;
    *((_QWORD *)&v22 + 1) = v17;
    v23 = v18;
    swift_bridgeObjectRetain_n();
    a5 = sub_1B08C15A4((uint64_t *)&v22, a6, a5 & 1);
    v20 = v22;
    v21 = v23;
    swift_bridgeObjectRetain();
    sub_1B0964E38((uint64_t)&v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return a5;
}

uint64_t sub_1B096515C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  BOOL (*v30)(unsigned __int16 *);
  uint64_t v31;
  char v32;
  char v33;
  _QWORD *(*v34)@<X0>(_QWORD *@<X0>, _QWORD *@<X8>);
  uint64_t v35;
  BOOL (*v36)(_QWORD *);
  uint64_t v37;
  char v38;

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  v29 = 1;
  v30 = sub_1B0966188;
  v31 = v9;
  v32 = 1;
  v33 = 1;
  v34 = sub_1B09623C4;
  v35 = 0;
  v36 = sub_1B08A0FB4;
  v37 = 0;
  v38 = 1;
  *(_QWORD *)&v25 = a2;
  *((_QWORD *)&v25 + 1) = a3;
  sub_1B08A35B0(a2, a3);
  sub_1B08A35F4();
  *(_QWORD *)&v27 = sub_1B0A1D090();
  *((_QWORD *)&v27 + 1) = v10;
  v28 = v11;
  swift_bridgeObjectRetain_n();
  v13 = sub_1B08C3E28((unsigned __int16 *)&v25, (uint64_t)&v27, v12);
  if (v4)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_1B08A3638(a2, a3);
    return swift_release();
  }
  else
  {
    v14 = v13;
    v24 = a4;
    v15 = v25;
    v25 = v27;
    *(_QWORD *)&v26 = v28;
    swift_bridgeObjectRetain_n();
    v17 = sub_1B08C1578((uint64_t *)&v25, v16, 1);
    v19 = v17;
    v22 = v15;
    result = swift_bridgeObjectRelease();
    v20 = *((_QWORD *)&v25 + 1);
    if (*((uint64_t *)&v25 + 1) < (uint64_t)v25)
    {
      __break(1u);
    }
    else
    {
      v23 = v25;
      swift_bridgeObjectRetain();
      sub_1B0975248((uint64_t *)&v25, v21, 12 * v19);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_release();
      *(_QWORD *)v24 = v14;
      *(_WORD *)(v24 + 8) = v22;
      *(_QWORD *)(v24 + 16) = v19;
      *(_QWORD *)(v24 + 24) = v23;
      *(_QWORD *)(v24 + 32) = v20;
      *(_QWORD *)(v24 + 40) = a2;
      *(_QWORD *)(v24 + 48) = a3;
    }
  }
  return result;
}

uint64_t sub_1B09654B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt16 v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  sub_1B08A35B0(a1, a2);
  sub_1B08A35F4();
  *(_QWORD *)&v21 = sub_1B0A1D090();
  *((_QWORD *)&v21 + 1) = v4;
  *(_QWORD *)&v22 = v5;
  swift_bridgeObjectRetain_n();
  sub_1B08C15A4((uint64_t *)&v21, v6, 1);
  if (v2)
  {
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v9 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v21, v7, 1);
    swift_bridgeObjectRelease_n();
    v10 = v22;
    if (v9)
    {
      v11 = 0;
      v12 = v21;
      v19 = MEMORY[0x1E0DEE9D8];
      do
      {
        v21 = v12;
        *(_QWORD *)&v22 = v10;
        swift_bridgeObjectRetain_n();
        sub_1B08C15A4((uint64_t *)&v21, v13, 1);
        v15 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v21, v14, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B08C1578((uint64_t *)&v21, v16, 1);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v20 = v21;
        v23 = v22;
        v17 = 0x10000;
        if (Platform.interpret(encoding:language:)(v15, (Swift::UInt16_optional)v17).value != FontParser_Encoding_unknownDefault)
          __asm { BR              X11 }
        v10 = v23;
        ++v11;
        v12 = v20;
      }
      while ((unsigned __int16)v11 != v9);
      swift_bridgeObjectRelease();
      return v19;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1B08ABB40();
      swift_allocError();
      *v18 = 2;
      return swift_willThrow();
    }
  }
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  sub_1B08A3638(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return swift_deallocObject();
}

uint64_t sub_1B0965FDC()
{
  return swift_deallocObject();
}

uint64_t sub_1B0965FEC@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1B0961940(a1, a2, *(_WORD *)(v3 + 16), *(_WORD *)(v3 + 18), (_BYTE *)(v3 + 20), a3);
}

uint64_t sub_1B0965FFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B0966020(unsigned __int16 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, *((_QWORD *)a1 + 1));
}

uint64_t sub_1B0966050()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1B5E0D5F0);
  return result;
}

uint64_t sub_1B09660C8()
{
  uint64_t v0;

  sub_1B08A3638(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

unint64_t sub_1B09660EC()
{
  unint64_t result;

  result = qword_1EEEBC3F0;
  if (!qword_1EEEBC3F0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3C350, &type metadata for CmapError);
    atomic_store(result, (unint64_t *)&qword_1EEEBC3F0);
  }
  return result;
}

uint64_t sub_1B0966130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0966178()
{
  return swift_deallocObject();
}

BOOL sub_1B0966188(unsigned __int16 *a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 16) == *a1;
}

uint64_t storeEnumTagSinglePayload for CmapError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B09661DC + 4 * byte_1B0A3BE00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B09661FC + 4 * byte_1B0A3BE05[v4]))();
}

_BYTE *sub_1B09661DC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B09661FC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B0966204(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B096620C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B0966214(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B096621C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CmapError()
{
  return &type metadata for CmapError;
}

uint64_t destroy for Cmap14Collection(uint64_t a1)
{
  return sub_1B08A3638(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for Cmap14Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_1B08A35B0(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t *assignWithCopy for Cmap14Collection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_1B08A35B0(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1B08A3638(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for Cmap14Collection(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_1B08A3638(v4, v5);
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for Cmap14Collection(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Cmap14Collection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Cmap14Collection()
{
  return &type metadata for Cmap14Collection;
}

uint64_t sub_1B09663F8(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Cmap0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Cmap0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Cmap0()
{
  return &type metadata for Cmap0;
}

uint64_t destroy for Cmap4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Cmap4(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Cmap4(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for Cmap4(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Cmap4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Cmap4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Cmap4()
{
  return &type metadata for Cmap4;
}

uint64_t destroy for Cmap12(uint64_t a1)
{
  return sub_1B08A3638(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

ValueMetadata *type metadata accessor for Cmap12()
{
  return &type metadata for Cmap12;
}

uint64_t _s10FontParser6Cmap12Vwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  sub_1B08A35B0(v3, v4);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  return a1;
}

uint64_t _s10FontParser6Cmap12Vwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  sub_1B08A35B0(v3, v4);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  sub_1B08A3638(v5, v6);
  return a1;
}

uint64_t _s10FontParser6Cmap12Vwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v3;
  sub_1B08A3638(v4, v5);
  return a1;
}

uint64_t _s10FontParser6Cmap12Vwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 56) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 56) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s10FontParser6Cmap12Vwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Cmap13()
{
  return &type metadata for Cmap13;
}

unint64_t sub_1B0966A8C()
{
  unint64_t result;

  result = qword_1EEEBC408;
  if (!qword_1EEEBC408)
  {
    result = MEMORY[0x1B5E0D530]("iPw5@E\a", &type metadata for Cmap12Collection);
    atomic_store(result, (unint64_t *)&qword_1EEEBC408);
  }
  return result;
}

_UNKNOWN **sub_1B0966AD0()
{
  return &off_1E61B09A8;
}

unint64_t sub_1B0966AE0()
{
  unint64_t result;

  result = qword_1EEEBC448;
  if (!qword_1EEEBC448)
  {
    atomic_store(result, (unint64_t *)&qword_1EEEBC448);
  }
  return result;
}

uint64_t sub_1B0966B24()
{
  return sub_1B08CE2D8(&qword_1EEEBC450, &qword_1EEEBC458, MEMORY[0x1E0DEA228]);
}

uint64_t sub_1B0966B50()
{
  return sub_1B08CE2D8(&qword_1EEEBC460, &qword_1EEEBC468, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_1B0966B7C()
{
  return sub_1B08CE2D8(&qword_1EEEBC470, qword_1EEEBC478, MEMORY[0x1E0DEC908]);
}

uint64_t sub_1B0966BA8()
{
  return sub_1B08CE2D8(&qword_1EEEBC4B8, &qword_1EEEBC4C0, MEMORY[0x1E0DEC908]);
}

unint64_t sub_1B0966BD8()
{
  unint64_t result;

  result = qword_1EEEBC4C8;
  if (!qword_1EEEBC4C8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3C02C, &type metadata for Cmap4);
    atomic_store(result, (unint64_t *)&qword_1EEEBC4C8);
  }
  return result;
}

uint64_t sub_1B0966C1C()
{
  return sub_1B08CE2D8(&qword_1EEEBC4D0, &qword_1EEEBC4D8, MEMORY[0x1E0DEA228]);
}

uint64_t sub_1B0966C48()
{
  return sub_1B08CE2D8(&qword_1EEEBC4E0, &qword_1EEEBC4E8, MEMORY[0x1E0DEDE48]);
}

unint64_t sub_1B0966C78()
{
  unint64_t result;

  result = qword_1EEEBC4F0;
  if (!qword_1EEEBC4F0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3C094, &type metadata for Cmap4);
    atomic_store(result, (unint64_t *)&qword_1EEEBC4F0);
  }
  return result;
}

_UNKNOWN **sub_1B0966CBC()
{
  return &off_1E61B09B8;
}

uint64_t sub_1B0966CC8()
{
  return sub_1B08CE2D8(&qword_1EEEBC530, &qword_1EEEBC538, MEMORY[0x1E0DEC908]);
}

unint64_t sub_1B0966CF8()
{
  unint64_t result;

  result = qword_1EEEBC540;
  if (!qword_1EEEBC540)
  {
    result = MEMORY[0x1B5E0D530]("aNw5<A\a", &type metadata for Cmap14Collection);
    atomic_store(result, (unint64_t *)&qword_1EEEBC540);
  }
  return result;
}

uint64_t sub_1B0966D3C()
{
  return sub_1B08CE2D8(&qword_1EEEBC548, &qword_1EEEBC550, MEMORY[0x1E0DEA228]);
}

uint64_t sub_1B0966D68()
{
  return sub_1B08CE2D8(&qword_1EEEBC558, &qword_1EEEBC560, MEMORY[0x1E0DEDE48]);
}

unint64_t sub_1B0966D98()
{
  unint64_t result;

  result = qword_1EEEBC568;
  if (!qword_1EEEBC568)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3C328, &type metadata for CmapError);
    atomic_store(result, (unint64_t *)&qword_1EEEBC568);
  }
  return result;
}

uint64_t sub_1B0966DDC(uint64_t a1)
{
  sub_1B08A35B0(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return a1;
}

uint64_t sub_1B0966E08(uint64_t a1)
{
  sub_1B08A3638(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return a1;
}

uint64_t sub_1B0966E34(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2)
  {
    v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1))
      v3 = a2 - 1;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL))
      v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3 + 1;
    if (v4 >= 5)
    {
      v7 = v4 & 3;
      if ((v4 & 3) == 0)
        v7 = 4;
      v5 = v4 - v7;
      v8 = 0uLL;
      v9 = (int64x2_t)(unint64_t)result;
      v10 = vdupq_n_s64(1uLL);
      v11 = v5;
      do
      {
        v9 = vaddq_s64(v9, v10);
        v8 = vaddq_s64(v8, v10);
        v11 -= 4;
      }
      while (v11);
      v6 = vaddvq_s64(vaddq_s64(v8, v9));
    }
    else
    {
      v5 = 0;
      v6 = result;
    }
    v12 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    v13 = v5 + result - a3;
    v14 = a2 - v5;
    result = v6;
    while (1)
    {
      if (!v13)
        return 0;
      if (!v12)
        break;
      ++result;
      ++v12;
      ++v13;
      if (!--v14)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_1B0966F04(uint64_t a1)
{
  sub_1B08A3638(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return a1;
}

ValueMetadata *type metadata accessor for Cmap14NonDefaultUVSCollection()
{
  return &type metadata for Cmap14NonDefaultUVSCollection;
}

uint64_t _s10FontParser29Cmap14NonDefaultUVSCollectionVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  sub_1B08A35B0(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

_QWORD *_s10FontParser29Cmap14NonDefaultUVSCollectionVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_1B08A35B0(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_1B08A3638(v6, v7);
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t _s10FontParser29Cmap14NonDefaultUVSCollectionVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1B08A3638(v4, v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t _s10FontParser29Cmap14NonDefaultUVSCollectionVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s10FontParser29Cmap14NonDefaultUVSCollectionVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Cmap14DefaultUVSSet()
{
  return &type metadata for Cmap14DefaultUVSSet;
}

ValueMetadata *type metadata accessor for Cmap4.Entry()
{
  return &type metadata for Cmap4.Entry;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Cmap12Collection.Entry(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Cmap12Collection.Entry(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Cmap12Collection.Entry()
{
  return &type metadata for Cmap12Collection.Entry;
}

uint64_t destroy for Cmap12Collection(uint64_t a1)
{
  return sub_1B08A3638(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for Cmap12Collection(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  sub_1B08A35B0(v4, v5);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  return a1;
}

uint64_t assignWithCopy for Cmap12Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  sub_1B08A35B0(v3, v4);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  sub_1B08A3638(v5, v6);
  return a1;
}

uint64_t assignWithTake for Cmap12Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = v3;
  sub_1B08A3638(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Cmap12Collection(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 48) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 48) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Cmap12Collection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Cmap12Collection()
{
  return &type metadata for Cmap12Collection;
}

ValueMetadata *type metadata accessor for Cmap14Collection.Cmap14()
{
  return &type metadata for Cmap14Collection.Cmap14;
}

uint64_t sub_1B096736C()
{
  return sub_1B08CE2D8(&qword_1EEEBC570, &qword_1EEEBC578, MEMORY[0x1E0DEC908]);
}

unint64_t sub_1B096739C()
{
  unint64_t result;

  result = qword_1EEEBC580;
  if (!qword_1EEEBC580)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3C438, &type metadata for Cmap14DefaultUVSSet);
    atomic_store(result, (unint64_t *)&qword_1EEEBC580);
  }
  return result;
}

uint64_t sub_1B09673E0()
{
  return sub_1B08CE2D8(&qword_1EEEBC588, &qword_1EEEBC590, MEMORY[0x1E0DEA228]);
}

uint64_t sub_1B096740C()
{
  return sub_1B08CE2D8(&qword_1EEEBC598, &qword_1EEEBC5A0, MEMORY[0x1E0DEDE48]);
}

uint64_t sub_1B0967438()
{
  return sub_1B08CE2D8(&qword_1EEEBC5A8, &qword_1EEEBC5B0, MEMORY[0x1E0DEC908]);
}

unint64_t sub_1B0967468()
{
  unint64_t result;

  result = qword_1EEEBC5B8;
  if (!qword_1EEEBC5B8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3C580, &type metadata for Cmap14NonDefaultUVSCollection);
    atomic_store(result, (unint64_t *)&qword_1EEEBC5B8);
  }
  return result;
}

uint64_t sub_1B09674AC()
{
  return sub_1B08CE2D8(&qword_1EEEBC5C0, &qword_1EEEBC5C8, MEMORY[0x1E0DEA228]);
}

uint64_t sub_1B09674D8()
{
  return sub_1B08CE2D8(&qword_1EEEBC5D0, &qword_1EEEBC5D8, MEMORY[0x1E0DEDE48]);
}

unint64_t sub_1B0967508()
{
  unint64_t result;

  result = qword_1EEEBC5E0;
  if (!qword_1EEEBC5E0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3C5F8, &type metadata for Cmap14NonDefaultUVSCollection);
    atomic_store(result, (unint64_t *)&qword_1EEEBC5E0);
  }
  return result;
}

_UNKNOWN **sub_1B096754C()
{
  return &off_1E61B0E10;
}

uint64_t sub_1B0967558(uint64_t a1)
{
  sub_1B08A3638(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

ValueMetadata *type metadata accessor for Cmap14NonDefaultUVSMapping()
{
  return &type metadata for Cmap14NonDefaultUVSMapping;
}

uint64_t getEnumTagSinglePayload for Cmap12Collection.Cmap12Header(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Cmap12Collection.Cmap12Header(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Cmap12Collection.Cmap12Header()
{
  return &type metadata for Cmap12Collection.Cmap12Header;
}

uint64_t Fixed.init(floatLiteral:)(double a1)
{
  double v1;
  uint64_t result;

  v1 = round(a1 * 65536.0);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 2147483650.0)
    return (int)v1;
LABEL_7:
  __break(1u);
  return result;
}

Swift::Double __swiftcall Fixed.toFloat()()
{
  int v0;

  return (double)v0 * 0.0000152587891;
}

Swift::Double __swiftcall ShortFrac.toFloat()()
{
  __int16 v0;

  return (double)v0 * 0.0000610351562;
}

uint64_t static FixedPointFraction<>.zero.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = sub_1B0A1D690();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - v6;
  sub_1B0A1D714();
  sub_1B0A1D450();
  v8 = *(_QWORD *)(a1 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v7, a1);
  __break(1u);
  return result;
}

uint64_t static FixedPointFraction<>.+ infix(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return sub_1B09677F8(a1, a2, (void (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DECC10], a3);
}

uint64_t static FixedPointFraction<>.- infix(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return sub_1B09677F8(a1, a2, (void (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DECC18], a3);
}

uint64_t sub_1B09677F8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, void (*a3)(char *, char *, uint64_t, uint64_t)@<X5>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t, uint64_t);

  v21 = a2;
  v22 = a3;
  v20 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - v10;
  MEMORY[0x1E0C80A78](v12);
  v13 = sub_1B0A1D690();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - v14;
  sub_1B0A1D444();
  sub_1B0A1D444();
  v22(v11, v8, AssociatedTypeWitness, v21);
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v8, AssociatedTypeWitness);
  v16(v11, AssociatedTypeWitness);
  sub_1B0A1D450();
  v17 = *(_QWORD *)(a1 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, a1);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v20, v15, a1);
  __break(1u);
  return result;
}

uint64_t FixedPointFraction.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  double v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 48))(a1, a2, v5);
  return sub_1B0A1D2A0();
}

uint64_t Fixed.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Fixed.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

BOOL static Fixed.< infix(_:_:)(int a1, int a2)
{
  return a1 < a2;
}

double sub_1B0967A7C@<D0>(double *a1@<X8>)
{
  int *v1;
  double result;

  result = (double)*v1 * 0.0000152587891;
  *a1 = result;
  return result;
}

BOOL sub_1B0967A9C(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1B0967AB0(_DWORD *a1, _DWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1B0967AC4(_DWORD *a1, _DWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1B0967AD8(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

double *sub_1B0967AEC@<X0>(double *result@<X0>, _DWORD *a2@<X8>)
{
  double v2;

  v2 = round(*result * 65536.0);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 2147483650.0)
  {
    *a2 = (int)v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1B0967B4C()
{
  return sub_1B0A1D2A0();
}

void sub_1B0967B90(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1B0967B98@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (__OFADD__(*result, *a2))
    __break(1u);
  else
    *a3 = *result + *a2;
  return result;
}

_DWORD *sub_1B0967BB4(_DWORD *result, _DWORD *a2)
{
  if (__OFADD__(*result, *a2))
    __break(1u);
  else
    *result += *a2;
  return result;
}

_DWORD *sub_1B0967BD0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (__OFSUB__(*result, *a2))
    __break(1u);
  else
    *a3 = *result - *a2;
  return result;
}

_DWORD *sub_1B0967BEC(_DWORD *result, _DWORD *a2)
{
  if (__OFSUB__(*result, *a2))
    __break(1u);
  else
    *result -= *a2;
  return result;
}

uint64_t static ShortFrac.min.getter()
{
  return 0x8000;
}

uint64_t static ShortFrac.max.getter()
{
  return 0x7FFFLL;
}

uint64_t ShortFrac.rawValue.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ShortFrac.rawValue.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t ShortFrac.init(floatLiteral:)(double a1)
{
  double v1;
  uint64_t result;

  v1 = round(a1 * 16384.0);
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -32769.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 32768.0)
    return (int)v1;
LABEL_7:
  __break(1u);
  return result;
}

BOOL static ShortFrac.< infix(_:_:)(__int16 a1, __int16 a2)
{
  return a1 < a2;
}

unint64_t sub_1B0967CA0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1B0967CE4();
  a1[2] = sub_1B0967D28();
  a1[3] = sub_1B0967D6C();
  a1[4] = sub_1B0967DB0();
  result = sub_1B0967DF4();
  a1[5] = result;
  return result;
}

unint64_t sub_1B0967CE4()
{
  unint64_t result;

  result = qword_1EEEBC620;
  if (!qword_1EEEBC620)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Fixed, &type metadata for Fixed);
    atomic_store(result, (unint64_t *)&qword_1EEEBC620);
  }
  return result;
}

unint64_t sub_1B0967D28()
{
  unint64_t result;

  result = qword_1EEEBC628;
  if (!qword_1EEEBC628)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Fixed, &type metadata for Fixed);
    atomic_store(result, (unint64_t *)&qword_1EEEBC628);
  }
  return result;
}

unint64_t sub_1B0967D6C()
{
  unint64_t result;

  result = qword_1EEEBC630;
  if (!qword_1EEEBC630)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Fixed, &type metadata for Fixed);
    atomic_store(result, (unint64_t *)&qword_1EEEBC630);
  }
  return result;
}

unint64_t sub_1B0967DB0()
{
  unint64_t result;

  result = qword_1EEEBC638;
  if (!qword_1EEEBC638)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Fixed, &type metadata for Fixed);
    atomic_store(result, (unint64_t *)&qword_1EEEBC638);
  }
  return result;
}

unint64_t sub_1B0967DF4()
{
  unint64_t result;

  result = qword_1EEEBC640;
  if (!qword_1EEEBC640)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Fixed, &type metadata for Fixed);
    atomic_store(result, (unint64_t *)&qword_1EEEBC640);
  }
  return result;
}

unint64_t sub_1B0967E3C()
{
  unint64_t result;

  result = qword_1EEEBC648;
  if (!qword_1EEEBC648)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Fixed, &type metadata for Fixed);
    atomic_store(result, (unint64_t *)&qword_1EEEBC648);
  }
  return result;
}

uint64_t sub_1B0967E80()
{
  return MEMORY[0x1E0DEB0F0];
}

double sub_1B0967E8C@<D0>(double *a1@<X8>, int16x4_t a2@<D0>)
{
  __int16 *v2;
  double result;

  a2.i16[0] = *v2;
  result = (double)vmovl_s16(a2).i32[0] * 0.0000610351562;
  *a1 = result;
  return result;
}

unint64_t sub_1B0967EB0(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1B0967EF4();
  a1[2] = sub_1B0967F38();
  a1[3] = sub_1B0967F7C();
  a1[4] = sub_1B0967FC0();
  result = sub_1B0968004();
  a1[5] = result;
  return result;
}

unint64_t sub_1B0967EF4()
{
  unint64_t result;

  result = qword_1EEEBC650;
  if (!qword_1EEEBC650)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for ShortFrac, &type metadata for ShortFrac);
    atomic_store(result, (unint64_t *)&qword_1EEEBC650);
  }
  return result;
}

unint64_t sub_1B0967F38()
{
  unint64_t result;

  result = qword_1EEEBC658;
  if (!qword_1EEEBC658)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for ShortFrac, &type metadata for ShortFrac);
    atomic_store(result, (unint64_t *)&qword_1EEEBC658);
  }
  return result;
}

unint64_t sub_1B0967F7C()
{
  unint64_t result;

  result = qword_1EEEBC660;
  if (!qword_1EEEBC660)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for ShortFrac, &type metadata for ShortFrac);
    atomic_store(result, (unint64_t *)&qword_1EEEBC660);
  }
  return result;
}

unint64_t sub_1B0967FC0()
{
  unint64_t result;

  result = qword_1EEEBC668;
  if (!qword_1EEEBC668)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for ShortFrac, &type metadata for ShortFrac);
    atomic_store(result, (unint64_t *)&qword_1EEEBC668);
  }
  return result;
}

unint64_t sub_1B0968004()
{
  unint64_t result;

  result = qword_1EEEBC670;
  if (!qword_1EEEBC670)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for ShortFrac, &type metadata for ShortFrac);
    atomic_store(result, (unint64_t *)&qword_1EEEBC670);
  }
  return result;
}

unint64_t sub_1B096804C()
{
  unint64_t result;

  result = qword_1EEEBC678;
  if (!qword_1EEEBC678)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for ShortFrac, &type metadata for ShortFrac);
    atomic_store(result, (unint64_t *)&qword_1EEEBC678);
  }
  return result;
}

BOOL sub_1B0968090(__int16 *a1, __int16 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1B09680A4(__int16 *a1, __int16 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1B09680B8(__int16 *a1, __int16 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1B09680CC(__int16 *a1, __int16 *a2)
{
  return *a2 < *a1;
}

double *sub_1B09680E0@<X0>(double *result@<X0>, _WORD *a2@<X8>)
{
  double v2;

  v2 = round(*result * 16384.0);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -32769.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 32768.0)
  {
    *a2 = (int)v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1B0968140()
{
  return sub_1B0A1D2A0();
}

__int16 *sub_1B0968188@<X0>(__int16 *result@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  int v3;

  v3 = *result + *a2;
  if ((__int16)(*result + *a2) == v3)
    *a3 = v3;
  else
    __break(1u);
  return result;
}

__int16 *sub_1B09681AC(__int16 *result, __int16 *a2)
{
  int v2;

  v2 = *result + *a2;
  if ((__int16)(*result + *a2) == v2)
    *result = v2;
  else
    __break(1u);
  return result;
}

__int16 *sub_1B09681D0@<X0>(__int16 *result@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  int v3;

  v3 = *result - *a2;
  if ((__int16)(*result - *a2) == v3)
    *a3 = v3;
  else
    __break(1u);
  return result;
}

__int16 *sub_1B09681F4(__int16 *result, __int16 *a2)
{
  int v2;

  v2 = *result - *a2;
  if ((__int16)(*result - *a2) == v2)
    *result = v2;
  else
    __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Fixed()
{
  return &type metadata for Fixed;
}

ValueMetadata *type metadata accessor for ShortFrac()
{
  return &type metadata for ShortFrac;
}

uint64_t sub_1B0968238(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B08A8FFC((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_1B0968598(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1B09682A0@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;

  v4 = *(_QWORD *)(result + 16);
  if (v4 != a2)
  {
    if (a2 >= v4)
    {
      __break(1u);
    }
    else if (!__OFADD__(a2, 1))
    {
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x1B09683A4);
  }
  *a3 = 0;
  a3[1] = 0xF000000000000000;
  a3[2] = result;
  a3[3] = a2;
  return result;
}

uint64_t LaserWriterContainer.containerType.getter()
{
  return 3;
}

uint64_t LaserWriterContainer.fonts.getter()
{
  return swift_bridgeObjectRetain();
}

FontParser::LaserWriterContainer __swiftcall LaserWriterContainer.init(constructed:)(Swift::OpaquePointer constructed)
{
  FontParser::FontDataResidence v2;
  FontParser::LaserWriterContainer result;

  v2 = FontParser_FontDataResidence_inMemory;
  result.type1.fonts = constructed;
  result.type1.dataResidence = v2;
  return result;
}

uint64_t LaserWriterContainer.init(data:residence:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  sub_1B08A35B0(a1, a2);
  v7 = sub_1B08A1E30(a1, a2);
  if (!v3)
    a3 = sub_1B0968EB4(v7, a3);
  sub_1B08A3638(a1, a2);
  return a3;
}

uint64_t LaserWriterContainer.encoded()()
{
  _BYTE *v0;

  sub_1B08CEC60();
  swift_allocError();
  *v0 = 0;
  return swift_willThrow();
}

uint64_t sub_1B09684B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  sub_1B08A35B0(a1, a2);
  v9 = sub_1B08A1E30(a1, a2);
  if (v4)
    return sub_1B08A3638(a1, a2);
  v10 = sub_1B0968EB4(v9, a3);
  v12 = v11;
  result = sub_1B08A3638(a1, a2);
  *(_BYTE *)a4 = v10;
  *(_QWORD *)(a4 + 8) = v12;
  return result;
}

uint64_t sub_1B0968550()
{
  _BYTE *v0;

  sub_1B08CEC60();
  swift_allocError();
  *v0 = 0;
  return swift_willThrow();
}

uint64_t sub_1B0968598(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;

  v3 = a1[1];
  result = sub_1B0A1DA50();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v91 = 0;
      v92 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v94 = *(_QWORD *)(v92 + 40 * i);
        v95 = v91;
        do
        {
          v96 = v92 + v95;
          if (v94 >= *(_QWORD *)(v92 + v95))
            break;
          if (!v92)
            goto LABEL_141;
          v97 = v92 + v95;
          v98 = *(_OWORD *)(v92 + v95 + 48);
          v99 = *(_OWORD *)(v92 + v95 + 64);
          v100 = *(_OWORD *)(v96 + 16);
          *(_OWORD *)(v92 + v95 + 40) = *(_OWORD *)v96;
          *(_OWORD *)(v92 + v95 + 56) = v100;
          *(_QWORD *)(v92 + v95 + 72) = *(_QWORD *)(v96 + 32);
          *(_QWORD *)v97 = v94;
          *(_OWORD *)(v97 + 8) = v98;
          *(_OWORD *)(v97 + 24) = v99;
          v95 -= 40;
        }
        while (v95 != -40);
        v91 += 40;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_136;
    v6 = result;
    v109 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      result = sub_1B0A1D4D4();
      *(_QWORD *)(result + 16) = v7;
      v111 = result;
      v115 = (char *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v110 = *a1 + 80;
      v108 = *a1 - 40;
      v11 = MEMORY[0x1E0DEE9D8];
      v112 = v6;
      v113 = v3;
      v114 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(_QWORD *)(v10 + 40 * v9);
          v15 = *(_QWORD *)(v10 + 40 * v13);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (uint64_t *)(v110 + 40 * v13);
            v17 = v14;
            while (1)
            {
              v19 = *v16;
              v16 += 5;
              v18 = v19;
              if (v14 < v15 == v19 >= v17)
                break;
              ++v9;
              v17 = v18;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_138;
            if (v13 < v9)
            {
              v20 = 40 * v9;
              v21 = 40 * v13;
              v22 = v9;
              v23 = v13;
              do
              {
                if (v23 != --v22)
                {
                  if (!v10)
                    goto LABEL_144;
                  v24 = v10 + v21;
                  v25 = *(_QWORD *)(v10 + v21 + 32);
                  v26 = v10 + v20;
                  v27 = *(_OWORD *)(v10 + v21);
                  v28 = *(_OWORD *)(v10 + v21 + 16);
                  v29 = *(_QWORD *)(v10 + v20 - 8);
                  v30 = *(_OWORD *)(v10 + v20 - 24);
                  *(_OWORD *)v24 = *(_OWORD *)(v10 + v20 - 40);
                  *(_OWORD *)(v24 + 16) = v30;
                  *(_QWORD *)(v24 + 32) = v29;
                  *(_OWORD *)(v26 - 40) = v27;
                  *(_OWORD *)(v26 - 24) = v28;
                  *(_QWORD *)(v26 - 8) = v25;
                }
                ++v23;
                v20 -= 40;
                v21 += 40;
              }
              while (v23 < v22);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_135;
          if (v9 - v13 < v6)
          {
            v31 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_139;
            if (v31 >= v3)
              v31 = v3;
            if (v31 < v13)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v9 != v31)
            {
              v32 = v108 + 40 * v9;
              do
              {
                v33 = *(_QWORD *)(v10 + 40 * v9);
                v34 = v13;
                v35 = v32;
                do
                {
                  v36 = v35 + 40;
                  if (v33 >= *(_QWORD *)v35)
                    break;
                  if (!v10)
                    goto LABEL_142;
                  v37 = *(_OWORD *)(v35 + 48);
                  v38 = *(_OWORD *)(v35 + 64);
                  v39 = *(_OWORD *)(v35 + 16);
                  *(_OWORD *)v36 = *(_OWORD *)v35;
                  *(_OWORD *)(v35 + 56) = v39;
                  v40 = *(_QWORD *)(v35 + 32);
                  *(_QWORD *)v35 = v33;
                  *(_OWORD *)(v35 + 8) = v37;
                  *(_OWORD *)(v35 + 24) = v38;
                  v35 -= 40;
                  ++v34;
                  *(_QWORD *)(v36 + 32) = v40;
                }
                while (v9 != v34);
                ++v9;
                v32 += 40;
              }
              while (v9 != v31);
              v9 = v31;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_130;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08A8EA0(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v42 = *(_QWORD *)(v11 + 16);
        v41 = *(_QWORD *)(v11 + 24);
        v12 = v42 + 1;
        v10 = v114;
        if (v42 >= v41 >> 1)
        {
          result = (uint64_t)sub_1B08A8EA0((char *)(v41 > 1), v42 + 1, 1, (char *)v11);
          v10 = v114;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v43 = v11 + 32;
        v44 = (uint64_t *)(v11 + 32 + 16 * v42);
        *v44 = v13;
        v44[1] = v9;
        if (v42)
        {
          while (1)
          {
            v45 = v12 - 1;
            if (v12 >= 4)
            {
              v50 = v43 + 16 * v12;
              v51 = *(_QWORD *)(v50 - 64);
              v52 = *(_QWORD *)(v50 - 56);
              v56 = __OFSUB__(v52, v51);
              v53 = v52 - v51;
              if (v56)
                goto LABEL_119;
              v55 = *(_QWORD *)(v50 - 48);
              v54 = *(_QWORD *)(v50 - 40);
              v56 = __OFSUB__(v54, v55);
              v48 = v54 - v55;
              v49 = v56;
              if (v56)
                goto LABEL_120;
              v57 = v12 - 2;
              v58 = (uint64_t *)(v43 + 16 * (v12 - 2));
              v60 = *v58;
              v59 = v58[1];
              v56 = __OFSUB__(v59, v60);
              v61 = v59 - v60;
              if (v56)
                goto LABEL_121;
              v56 = __OFADD__(v48, v61);
              v62 = v48 + v61;
              if (v56)
                goto LABEL_123;
              if (v62 >= v53)
              {
                v80 = (uint64_t *)(v43 + 16 * v45);
                v82 = *v80;
                v81 = v80[1];
                v56 = __OFSUB__(v81, v82);
                v83 = v81 - v82;
                if (v56)
                  goto LABEL_129;
                v73 = v48 < v83;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v74 = *(_QWORD *)(v11 + 32);
                v75 = *(_QWORD *)(v11 + 40);
                v56 = __OFSUB__(v75, v74);
                v67 = v75 - v74;
                v68 = v56;
                goto LABEL_77;
              }
              v47 = *(_QWORD *)(v11 + 32);
              v46 = *(_QWORD *)(v11 + 40);
              v56 = __OFSUB__(v46, v47);
              v48 = v46 - v47;
              v49 = v56;
            }
            if ((v49 & 1) != 0)
              goto LABEL_122;
            v57 = v12 - 2;
            v63 = (uint64_t *)(v43 + 16 * (v12 - 2));
            v65 = *v63;
            v64 = v63[1];
            v66 = __OFSUB__(v64, v65);
            v67 = v64 - v65;
            v68 = v66;
            if (v66)
              goto LABEL_124;
            v69 = (uint64_t *)(v43 + 16 * v45);
            v71 = *v69;
            v70 = v69[1];
            v56 = __OFSUB__(v70, v71);
            v72 = v70 - v71;
            if (v56)
              goto LABEL_126;
            if (__OFADD__(v67, v72))
              goto LABEL_128;
            if (v67 + v72 >= v48)
            {
              v73 = v48 < v72;
LABEL_83:
              if (v73)
                v45 = v57;
              goto LABEL_85;
            }
LABEL_77:
            if ((v68 & 1) != 0)
              goto LABEL_125;
            v76 = (uint64_t *)(v43 + 16 * v45);
            v78 = *v76;
            v77 = v76[1];
            v56 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v56)
              goto LABEL_127;
            if (v79 < v67)
              goto LABEL_15;
LABEL_85:
            v84 = v45 - 1;
            if (v45 - 1 >= v12)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v10)
              goto LABEL_143;
            v85 = v11;
            v86 = (uint64_t *)(v43 + 16 * v84);
            v87 = *v86;
            v88 = (_QWORD *)(v43 + 16 * v45);
            v89 = v88[1];
            result = sub_1B0968C78((char *)(v10 + 40 * *v86), (char *)(v10 + 40 * *v88), v10 + 40 * v89, v115);
            if (v1)
              goto LABEL_93;
            if (v89 < v87)
              goto LABEL_116;
            if (v45 > *(_QWORD *)(v85 + 16))
              goto LABEL_117;
            *v86 = v87;
            *(_QWORD *)(v43 + 16 * v84 + 8) = v89;
            v90 = *(_QWORD *)(v85 + 16);
            if (v45 >= v90)
              goto LABEL_118;
            v11 = v85;
            v12 = v90 - 1;
            result = (uint64_t)memmove((void *)(v43 + 16 * v45), v88 + 2, 16 * (v90 - 1 - v45));
            *(_QWORD *)(v85 + 16) = v90 - 1;
            v10 = v114;
            if (v90 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v112;
        v3 = v113;
        if (v9 >= v113)
        {
          v8 = v111;
          goto LABEL_102;
        }
      }
    }
    v8 = MEMORY[0x1E0DEE9D8];
    v115 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v111 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_102:
    result = v11;
    v111 = v8;
    if (v12 >= 2)
    {
      v101 = *v109;
      do
      {
        v102 = v12 - 2;
        if (v12 < 2)
          goto LABEL_131;
        if (!v101)
          goto LABEL_145;
        v103 = result;
        v104 = *(_QWORD *)(result + 32 + 16 * v102);
        v105 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_1B0968C78((char *)(v101 + 40 * v104), (char *)(v101 + 40 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v101 + 40 * v105, v115);
        if (v1)
          break;
        if (v105 < v104)
          goto LABEL_132;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1B08A8F98(v103);
          v103 = result;
        }
        if (v102 >= *(_QWORD *)(v103 + 16))
          goto LABEL_133;
        v106 = (_QWORD *)(v103 + 32 + 16 * v102);
        *v106 = v104;
        v106[1] = v105;
        v107 = *(_QWORD *)(v103 + 16);
        if (v12 > v107)
          goto LABEL_134;
        memmove((void *)(v103 + 32 + 16 * (v12 - 1)), (const void *)(v103 + 32 + 16 * v12), 16 * (v107 - v12));
        result = v103;
        *(_QWORD *)(v103 + 16) = v107 - 1;
        v12 = v107 - 1;
      }
      while (v107 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v111 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B0968C78(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  char *v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 40;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 40;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[40 * v11] <= a4)
      memmove(a4, __src, 40 * v11);
    v12 = &v4[40 * v11];
    if (v7 >= v6 || v10 < 40)
      goto LABEL_36;
    v17 = a3 - 40;
    while (1)
    {
      v18 = (char *)(v17 + 40);
      v19 = v6 - 40;
      if (*((_QWORD *)v12 - 5) >= *((_QWORD *)v6 - 5))
      {
        v19 = v12 - 40;
        if (v18 != v12)
        {
          v12 -= 40;
          goto LABEL_33;
        }
        v20 = v17 >= (unint64_t)v12;
        v12 -= 40;
        if (v20)
          goto LABEL_33;
      }
      else
      {
        if (v18 != v6)
        {
          v6 -= 40;
LABEL_33:
          v21 = *(_OWORD *)v19;
          v22 = *((_OWORD *)v19 + 1);
          *(_QWORD *)(v17 + 32) = *((_QWORD *)v19 + 4);
          *(_OWORD *)v17 = v21;
          *(_OWORD *)(v17 + 16) = v22;
          goto LABEL_34;
        }
        v20 = v17 >= (unint64_t)v6;
        v6 -= 40;
        if (v20)
          goto LABEL_33;
      }
LABEL_34:
      if (v6 > v7)
      {
        v17 -= 40;
        if (v12 > v4)
          continue;
      }
      goto LABEL_36;
    }
  }
  if (a4 != __dst || &__dst[40 * v9] <= a4)
    memmove(a4, __dst, 40 * v9);
  v12 = &v4[40 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 40)
  {
    while (*(_QWORD *)v6 < *(_QWORD *)v4)
    {
      v13 = v6;
      v14 = v7 == v6;
      v6 += 40;
      if (!v14)
        goto LABEL_12;
LABEL_13:
      v7 += 40;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    v13 = v4;
    v14 = v7 == v4;
    v4 += 40;
    if (v14)
      goto LABEL_13;
LABEL_12:
    v15 = *(_OWORD *)v13;
    v16 = *((_OWORD *)v13 + 1);
    *((_QWORD *)v7 + 4) = *((_QWORD *)v13 + 4);
    *(_OWORD *)v7 = v15;
    *((_OWORD *)v7 + 1) = v16;
    goto LABEL_13;
  }
LABEL_15:
  v6 = v7;
LABEL_36:
  v23 = (unsigned __int128)((v12 - v4) * (__int128)0x6666666666666667) >> 64;
  v24 = (v23 >> 4) + ((unint64_t)v23 >> 63);
  if (v6 != v4 || v6 >= &v4[40 * v24])
    memmove(v6, v4, 40 * v24);
  return 1;
}

uint64_t sub_1B0968EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  char *v7;
  char *v8;
  int64_t v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22[40];

  if (*(_QWORD *)(a1 + 16) && (v3 = a2, v5 = sub_1B08F9E7C(1347375956), (v6 & 1) != 0))
  {
    v7 = *(char **)(*(_QWORD *)(a1 + 56) + 8 * v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v18 = v7;
    swift_bridgeObjectRetain();
    sub_1B0968238(&v18);
    if (v2)
    {
      swift_release();
      __break(1u);
      JUMPOUT(0x1B0969220);
    }
    swift_bridgeObjectRelease();
    v8 = v18;
    v9 = *((_QWORD *)v18 + 2);
    if (v9)
    {
      v22[39] = v3;
      v18 = (char *)MEMORY[0x1E0DEE9D8];
      sub_1B08E8324(0, v9, 0);
      __asm { BR              X9 }
    }
    swift_release();
    sub_1B09682A0(MEMORY[0x1E0DEE9D8], 0, &v18);
    v11 = v18;
    v12 = v19;
    v14 = v20;
    v13 = v21;
    sub_1B08D7360((uint64_t)v18, v19);
    swift_bridgeObjectRetain();
    sub_1B08CF860((uint64_t)v11, v12, v14, v13, v22);
    v16 = PSInterpreter.copyFonts()();
    MEMORY[0x1E0C80A78](v16);
    sub_1B08D6E98(v17, (void (*)(_QWORD *__return_ptr, unint64_t, uint64_t))sub_1B08D0244);
    sub_1B08CBB10((uint64_t)v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B08D70F4((uint64_t)v22);
    sub_1B08CBB10((uint64_t)v11, v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1B08D7374();
    swift_allocError();
    *v10 = 1;
    swift_willThrow();
  }
  return v3;
}

ValueMetadata *type metadata accessor for LaserWriterContainer()
{
  return &type metadata for LaserWriterContainer;
}

uint64_t sub_1B0969240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;

  v1 = sub_1B0A1D294();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B0A1D270();
  v5 = sub_1B0A1D228();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v7 >> 60 != 15)
  {
    v9 = *(_QWORD *)(v0 + 72);
    if (*(_QWORD *)(v9 + 16))
    {
      sub_1B08A35B0(v5, v7);
      v10 = sub_1B08F9E80(v5, v7);
      if ((v11 & 1) != 0)
      {
        v12 = *(unsigned int *)(*(_QWORD *)(v9 + 56) + 4 * v10);
        sub_1B08CBB10(v5, v7);
        v8 = sub_1B0969370(v12 | 0x3000000000000);
LABEL_8:
        sub_1B08CBB10(v5, v7);
        return v8;
      }
      sub_1B08CBB10(v5, v7);
    }
    v8 = 0xFF000000000000;
    goto LABEL_8;
  }
  return 0xFF000000000000;
}

unint64_t sub_1B0969370(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = v1;
  if (BYTE6(result) != 9)
  {
    if (BYTE6(result) == 4)
      v3 = result;
    else
      v3 = result;
    if (BYTE6(result) == 4)
      LOBYTE(v4) = 3;
    else
      v4 = HIWORD(result);
    goto LABEL_8;
  }
  v15 = *(_QWORD *)(v1 + 48);
  if ((unint64_t)result < *(_QWORD *)(v15 + 16))
  {
    v16 = *(_QWORD *)(v1 + 72);
    if (!*(_QWORD *)(v16 + 16))
      return 0xFF000000000000;
    v17 = v15 + 16 * result;
    v18 = *(_QWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 40);
    sub_1B08A35B0(v18, v19);
    v20 = sub_1B08F9E80(v18, v19);
    if ((v21 & 1) == 0)
    {
      sub_1B08A3638(v18, v19);
      return 0xFF000000000000;
    }
    v3 = *(unsigned int *)(*(_QWORD *)(v16 + 56) + 4 * v20);
    result = sub_1B08A3638(v18, v19);
    LOBYTE(v4) = 3;
LABEL_8:
    v5 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(v2 + 40);
      v8 = v7 + 32;
      v9 = *(_QWORD *)(v7 + 16);
      v10 = v3 & 0xFFFFFFFFFFFFLL | ((unint64_t)v4 << 48);
      v11 = v5 + 28;
      while (1)
      {
        v12 = *(unsigned int *)(v11 + 4 * v6);
        if (v9 <= v12)
          break;
        v13 = *(_QWORD *)(v8 + 8 * v12);
        if (*(_QWORD *)(v13 + 16))
        {
          result = sub_1B08F9F0C(v10);
          if ((v14 & 1) != 0)
            return *(unsigned int *)(*(_QWORD *)(v13 + 56) + 8 * result) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v13 + 56) + 8 * result + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v13 + 56) + 8 * result + 6) << 48);
        }
        if (!--v6)
          return 0xFF000000000000;
      }
      __break(1u);
      goto LABEL_22;
    }
    return 0xFF000000000000;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1B09694B4(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  if (BYTE6(result) == 9)
  {
    v8 = *(_QWORD *)(v3 + 48);
    if ((unint64_t)result >= *(_QWORD *)(v8 + 16))
    {
LABEL_17:
      __break(1u);
      return result;
    }
    v9 = v8 + 16 * result;
    v10 = *(_QWORD *)(v9 + 32);
    v11 = *(_QWORD *)(v9 + 40);
    sub_1B08A35B0(v10, v11);
    v12 = sub_1B093A7AC(v10, v11);
    sub_1B08A3638(v10, v11);
    v6 = v12;
    v7 = 3;
  }
  else
  {
    if (BYTE6(result) == 4)
      v6 = result;
    else
      v6 = result;
    if (BYTE6(result) == 4)
      v7 = 3;
    else
      v7 = BYTE6(result);
  }
  v13 = *(_QWORD **)(v3 + 40);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 40) = v13;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B0953A98(v13);
    v13 = (_QWORD *)result;
    *(_QWORD *)(v3 + 40) = result;
  }
  if (v13[2] <= (unint64_t)a3)
  {
    __break(1u);
    goto LABEL_17;
  }
  v14 = &v13[a3 + 4];
  if ((~a2 & 0xFF000000000000) == 0)
    return sub_1B08E1544(v6 & 0xFFFFFFFFFFFFLL | ((unint64_t)v7 << 48));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v14;
  *v14 = 0x8000000000000000;
  sub_1B0900AF4(a2 & 0xFFFFFFFFFFFFFFLL, v6 & 0xFFFFFFFFFFFFLL | ((unint64_t)v7 << 48), isUniquelyReferenced_nonNull_native);
  *v14 = v16;
  return swift_bridgeObjectRelease();
}

unint64_t sub_1B0969620(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = v1;
  if (BYTE6(result) != 9)
  {
    if (BYTE6(result) == 4)
      v3 = result;
    else
      v3 = result;
    if (BYTE6(result) == 4)
      LOBYTE(v4) = 3;
    else
      v4 = HIWORD(result);
LABEL_8:
    v5 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(v2 + 40);
      v8 = v7 + 32;
      v9 = *(_QWORD *)(v7 + 16);
      v10 = v3 & 0xFFFFFFFFFFFFLL | ((unint64_t)v4 << 48);
      v11 = v5 + 28;
      while (1)
      {
        v12 = *(unsigned int *)(v11 + 4 * v6);
        if (v9 <= v12)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v8 + 8 * v12) + 16))
        {
          result = sub_1B08F9F0C(v10);
          if ((v13 & 1) != 0)
          {
            v14 = 0;
            return v12 | ((unint64_t)v14 << 32);
          }
        }
        if (!--v6)
          goto LABEL_20;
      }
      __break(1u);
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(v1 + 48);
  if ((unint64_t)result >= *(_QWORD *)(v15 + 16))
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v16 = *(_QWORD *)(v1 + 72);
  if (*(_QWORD *)(v16 + 16))
  {
    v17 = v15 + 16 * result;
    v18 = *(_QWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 40);
    sub_1B08A35B0(v18, v19);
    v20 = sub_1B08F9E80(v18, v19);
    if ((v21 & 1) == 0)
    {
      sub_1B08A3638(v18, v19);
      goto LABEL_20;
    }
    v3 = *(unsigned int *)(*(_QWORD *)(v16 + 56) + 4 * v20);
    result = sub_1B08A3638(v18, v19);
    LOBYTE(v4) = 3;
    goto LABEL_8;
  }
LABEL_20:
  v12 = 0;
  v14 = 1;
  return v12 | ((unint64_t)v14 << 32);
}

unint64_t sub_1B0969764(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;

  v4 = v3;
  v6 = sub_1B0A1D294();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B0A1D270();
  v10 = sub_1B0A1D228();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v12 >> 60 == 15)
    return 0xFF000000000000;
  v13 = *(_QWORD *)(v3 + 72);
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_9;
  sub_1B08A35B0(v10, v12);
  v14 = sub_1B08F9E80(v10, v12);
  if ((v15 & 1) == 0)
  {
    sub_1B08CBB10(v10, v12);
LABEL_9:
    sub_1B08CBB10(v10, v12);
    return 0xFF000000000000;
  }
  v16 = *(unsigned int *)(*(_QWORD *)(v13 + 56) + 4 * v14);
  sub_1B08CBB10(v10, v12);
  result = sub_1B08CBB10(v10, v12);
  v18 = *(_QWORD *)(v4 + 40);
  if (*(_QWORD *)(v18 + 16) <= (unint64_t)a3)
  {
    __break(1u);
    return result;
  }
  v19 = *(_QWORD *)(v18 + 8 * a3 + 32);
  if (*(_QWORD *)(v19 + 16))
  {
    v20 = sub_1B08F9F0C(v16 | 0x3000000000000);
    if ((v21 & 1) != 0)
      return *(unsigned int *)(*(_QWORD *)(v19 + 56) + 8 * v20) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v19 + 56) + 8 * v20 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v19 + 56) + 8 * v20 + 6) << 48);
  }
  return 0xFF000000000000;
}

unint64_t sub_1B09698D8(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;

  if (BYTE6(result) != 9)
  {
    if (BYTE6(result) == 4)
      v4 = result;
    else
      v4 = result;
    if (BYTE6(result) == 4)
      LOBYTE(v5) = 3;
    else
      v5 = HIWORD(result);
    if (*(_QWORD *)(a2 + 16))
    {
LABEL_9:
      v6 = sub_1B08F9F0C(v4 & 0xFFFFFFFFFFFFLL | ((unint64_t)v5 << 48));
      if ((v7 & 1) != 0)
        return *(unsigned int *)(*(_QWORD *)(a2 + 56) + 8 * v6) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a2 + 56) + 8 * v6 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 8 * v6 + 6) << 48);
      return 0xFF000000000000;
    }
    return 0xFF000000000000;
  }
  v8 = *(_QWORD *)(v2 + 48);
  if ((unint64_t)result < *(_QWORD *)(v8 + 16))
  {
    v9 = *(_QWORD *)(v2 + 72);
    if (*(_QWORD *)(v9 + 16))
    {
      v10 = v8 + 16 * result;
      v11 = *(_QWORD *)(v10 + 32);
      v12 = *(_QWORD *)(v10 + 40);
      sub_1B08A35B0(v11, v12);
      v13 = sub_1B08F9E80(v11, v12);
      if ((v14 & 1) != 0)
      {
        v4 = *(unsigned int *)(*(_QWORD *)(v9 + 56) + 4 * v13);
        sub_1B08A3638(v11, v12);
        LOBYTE(v5) = 3;
        if (*(_QWORD *)(a2 + 16))
          goto LABEL_9;
      }
      else
      {
        sub_1B08A3638(v11, v12);
      }
    }
    return 0xFF000000000000;
  }
  __break(1u);
  return result;
}

uint64_t sub_1B09699D8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return ((uint64_t (*)(void))((char *)&loc_1B09699E4 + dword_1B0969A7C[a3 >> 62]))();
}

uint64_t sub_1B09699F4(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1)
  {
    if (a1 != 1)
    {
      __break(1u);
      JUMPOUT(0x1B0969A7CLL);
    }
    v3 = 4;
  }
  else
  {
    v3 = 2;
  }
  if (BYTE6(a3) / v3 < 1)
  {
    __break(1u);
    JUMPOUT(0x1B0969A70);
  }
  return 0;
}

void *SfntTrueTypeFont.init(tables:residence:containerType:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v4;
  void *result;
  _BYTE __src[424];

  result = sub_1B0975A90(a1, a2, a3, __src);
  if (!v4)
    return memcpy(a4, __src, 0x1A4uLL);
  return result;
}

uint64_t SfntTrueTypeFont.tableTags.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t SfntTrueTypeFont.data(tableTag:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v3 = sub_1B08F9E7C(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(_QWORD *)(v2 + 56) + 16 * v3;
  v6 = *(_QWORD *)v5;
  sub_1B08A35B0(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  return v6;
}

uint64_t sub_1B0969B40@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  int v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[88];
  uint64_t v28;
  char v29;
  _OWORD v30[4];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __n128 (*v35)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v36;

  v3 = v2;
  v5 = a1 & 1;
  v6 = sub_1B0935020(a1 & 1);
  v32 = 0x101010101010101;
  v33 = 0x101010101010101;
  v34 = 1;
  v35 = sub_1B08E12B0;
  v36 = 0;
  result = sub_1B08AEA5C(v6, (uint64_t)v27);
  v8 = 0uLL;
  if ((v29 & 1) != 0 || (v9 = *v2, !*(_QWORD *)(*v3 + 16)))
  {
    v19 = 0;
    v22 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
  }
  else
  {
    v10 = v28;
    if (v5)
      v11 = 1986884728;
    else
      v11 = 1752003704;
    result = sub_1B08F9E7C(v11);
    if ((v12 & 1) != 0)
    {
      v13 = (_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * result);
      v15 = v13[1];
      *(_QWORD *)&v30[0] = *v13;
      v14 = *(_QWORD *)&v30[0];
      *((_QWORD *)&v30[0] + 1) = v15;
      sub_1B08A35B0(*(uint64_t *)&v30[0], v15);
      sub_1B08A35B0(v14, v15);
      sub_1B08A35F4();
      v16 = sub_1B0A1D090();
      sub_1B0946D34(v16, v17, v18, v10, v3[1], v30);
      v25 = v30[1];
      v26 = v30[0];
      v23 = v30[3];
      v24 = v30[2];
      v19 = v31;
      result = sub_1B08A3638(v14, v15);
      v21 = v23;
      v20 = v24;
      v22 = v25;
      v8 = v26;
    }
    else
    {
      v19 = 0;
      v22 = 0uLL;
      v20 = 0uLL;
      v21 = 0uLL;
      v8 = 0uLL;
    }
  }
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v22;
  *(_OWORD *)(a2 + 32) = v20;
  *(_OWORD *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 64) = v19;
  return result;
}

uint64_t SfntTrueTypeFont.recordGlyph<A>(glyphIndex:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t __dst[34];
  _OWORD __src[17];
  char v34;
  _OWORD v35[4];
  uint64_t v36;
  __int16 v37;
  char v38;
  char v39;
  int v40;
  BOOL (*v41)(_DWORD *, _DWORD *);
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  BOOL (*v45)(unsigned __int16 *);
  uint64_t v46;
  char v47;
  BOOL (*v48)(_WORD *);
  uint64_t v49;
  __n128 (*v50)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v51;
  char v52;

  v5 = v4;
  v6 = *v4;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_7;
  v11 = sub_1B08F9E7C(1819239265);
  if ((v12 & 1) == 0)
    goto LABEL_7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_7;
  v13 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v11);
  v14 = *v13;
  v15 = v13[1];
  v16 = sub_1B08F9E7C(1735162214);
  if ((v17 & 1) == 0)
    goto LABEL_7;
  v18 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v16);
  v19 = v14;
  v21 = *v18;
  v20 = v18[1];
  v37 = 257;
  v38 = 1;
  v39 = 1;
  v40 = 1594834165;
  v41 = sub_1B08A0EC0;
  v42 = 0;
  v43[0] = 0x101010101010101;
  *(_DWORD *)((char *)v43 + 7) = 16843009;
  v44 = 1;
  v45 = sub_1B0948F10;
  v46 = 0;
  v47 = 1;
  v48 = sub_1B0948F20;
  v49 = 0;
  v50 = sub_1B08B5A2C;
  v51 = 0;
  v31 = v19;
  sub_1B08A35B0(v19, v15);
  sub_1B08A35B0(v21, v20);
  sub_1B08AE97C(1751474532, (uint64_t)__src);
  if ((BYTE10(__src[3]) & 1) != 0)
  {
    sub_1B08A3638(v21, v20);
    sub_1B08A3638(v31, v15);
LABEL_7:
    sub_1B08ABB40();
    swift_allocError();
    *v22 = 2;
    return swift_willThrow();
  }
  v24 = 0uLL;
  if ((__src[1] & 0x20) != 0)
  {
    sub_1B0969B40(0, (uint64_t)v35);
    v24 = 0uLL;
    v26 = v35[0];
    v27 = v35[1];
    v28 = v35[2];
    v29 = v35[3];
    v25 = v36;
  }
  else
  {
    v25 = 0;
    v26 = 0uLL;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
  }
  v30 = *((_WORD *)v5 + 208);
  v34 = 1;
  v52 = 1;
  *(_QWORD *)&__src[0] = v31;
  *((_QWORD *)&__src[0] + 1) = v15;
  *(_QWORD *)&__src[1] = v21;
  *((_QWORD *)&__src[1] + 1) = v20;
  __src[2] = v26;
  __src[3] = v27;
  __src[4] = v28;
  __src[5] = v29;
  *(_QWORD *)&__src[6] = v25;
  WORD4(__src[6]) = v30;
  *(_QWORD *)&__src[7] = 0;
  *((_QWORD *)&__src[7] + 1) = MEMORY[0x1E0DEE9D8];
  __src[8] = 0uLL;
  LOBYTE(__src[9]) = 1;
  *((_QWORD *)&__src[9] + 1) = 0;
  *(_QWORD *)&__src[10] = 0;
  BYTE8(__src[10]) = 1;
  __src[11] = xmmword_1B0A381C0;
  __src[12] = v24;
  __src[13] = xmmword_1B0A381D0;
  __src[14] = v24;
  __src[15] = v24;
  __src[16] = xmmword_1B0A381C0;
  sub_1B08A35B0(v31, v15);
  sub_1B08A35B0(v21, v20);
  sub_1B0917594(a2, a1, a3, a4);
  memcpy(__dst, __src, sizeof(__dst));
  sub_1B091D4DC(__dst);
  sub_1B08A3638(v31, v15);
  return sub_1B08A3638(v21, v20);
}

void SfntTrueTypeFont.metadata.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int16 v49;
  uint64_t v50;

  v3 = *v1;
  v4 = 0uLL;
  if (!*(_QWORD *)(v3 + 16))
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v20 = 0;
LABEL_22:
    v16 = 0uLL;
    goto LABEL_23;
  }
  v5 = sub_1B08F9E7C(1835365473);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v5);
    v8 = v7[1];
    v45 = *v7;
    sub_1B08A35B0(v45, v8);
    sub_1B08A35F4();
    v45 = sub_1B0A1D090();
    *(_QWORD *)&v46 = v9;
    *((_QWORD *)&v46 + 1) = v10;
    swift_bridgeObjectRetain_n();
    sub_1B09707A4((uint64_t)&v45, 16843009, (void (*)(_BYTE *__return_ptr, _QWORD *))sub_1B096CCF4, 0, v11);
    v18 = v17;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1B08F7810(MEMORY[0x1E0DEE9D8]);
    v20 = sub_1B08F7810(v19);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v18 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB1A8);
      v21 = sub_1B0A1D9D8();
    }
    else
    {
      v21 = MEMORY[0x1E0DEE9E0];
    }
    v45 = v21;
    sub_1B0976534(v18, 1, &v45);
    swift_bridgeObjectRelease();
    v22 = v45;
    sub_1B08E3F8C("dlng", 4, (int *)&v45);
    if (*(_QWORD *)(v22 + 16) && (v23 = sub_1B08F9E7C(v45), (v24 & 1) != 0))
    {
      v25 = (uint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v23);
      v26 = *v25;
      v27 = v25[1];
      sub_1B08A35B0(*v25, v27);
      v14 = sub_1B0979F70();
      *(_QWORD *)&v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA788);
      v45 = v14;
      sub_1B08E2460(&v45, v44);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1B0900F78(v44, 0xD00000000000002ELL, 0x80000001B0A27190, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      sub_1B08A3638(v26, v27);
    }
    else
    {
      v14 = MEMORY[0x1E0DEE9D8];
    }
    sub_1B08E3F8C("slng", 4, (int *)&v45);
    if (*(_QWORD *)(v22 + 16))
    {
      v29 = sub_1B08F9E7C(v45);
      if ((v30 & 1) != 0)
      {
        v31 = (uint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v29);
        v32 = *v31;
        v33 = v31[1];
        sub_1B08A35B0(*v31, v33);
        v15 = sub_1B0979F70();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA788);
        v45 = v15;
        sub_1B08E2460(&v45, v44);
        swift_bridgeObjectRetain();
        v34 = swift_isUniquelyReferenced_nonNull_native();
        sub_1B0900F78(v44, 0xD00000000000002ALL, 0x80000001B0A27160, v34);
        swift_bridgeObjectRelease();
        sub_1B08A3638(v32, v33);
        if (!*(_QWORD *)(v22 + 16))
          goto LABEL_21;
      }
      else
      {
        v15 = MEMORY[0x1E0DEE9D8];
        if (!*(_QWORD *)(v22 + 16))
          goto LABEL_21;
      }
      v35 = sub_1B08F9E7C(1634758764);
      if ((v36 & 1) != 0)
      {
        v37 = (uint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v35);
        v38 = *v37;
        v39 = v37[1];
        sub_1B08A35B0(*v37, v39);
        swift_release();
        sub_1B08A35B0(v38, v39);
        sub_1B097DCF4(v38, v39, (uint64_t)&v45);
        sub_1B08A3638(v38, v39);
        v42 = v47;
        v43 = v46;
        v12 = v48;
        v13 = v49;
        v40 = v50;
        v41 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v44[0] = v20;
        sub_1B08E16E4(v40, (uint64_t)sub_1B096CDB4, 0, v41, (uint64_t)v44);
        v20 = *(_QWORD *)&v44[0];
        swift_bridgeObjectRelease();
        sub_1B08A3638(v38, v39);
        v16 = v42;
        v4 = v43;
        goto LABEL_23;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0DEE9D8];
    }
LABEL_21:
    swift_release();
    v12 = 0;
    v13 = 0;
    v4 = 0uLL;
    goto LABEL_22;
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v20 = 0;
  v16 = 0uLL;
  v4 = 0uLL;
LABEL_23:
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v20;
}

char *SfntTrueTypeFont.allNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BYTE v5[24];
  uint64_t v6;

  sub_1B08CE970(v0 + 392, (uint64_t)v5, &qword_1EEEBC6C8);
  v1 = sub_1B08CE970((uint64_t)v5, (uint64_t)&v6, &qword_1EEEBC6C8);
  if (!v6)
    return (char *)MEMORY[0x1E0DEE9D8];
  MEMORY[0x1E0C80A78](v1);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1B0975DB0(v2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1B08E1FD8);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t SfntTrueTypeFont.findCharacterMap(matchingQuery:)@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt16 v35;
  FontParser::Language_optional v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  char v52;
  int v53;
  BOOL v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD *v64;
  _OWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int16 v69;
  int64_t v70;
  uint64_t v71;
  FontParser::Language value;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[2];
  uint64_t v81;
  __int128 v82[2];
  _BYTE v83[40];
  _OWORD v84[2];
  uint64_t v85;
  uint64_t v86;

  v4 = v2;
  v6 = *v2;
  if (!*(_QWORD *)(v6 + 16) || (v8 = sub_1B08F9E7C(1668112752), (v9 & 1) == 0))
  {
    sub_1B08ABB40();
    swift_allocError();
    *v16 = 2;
    return swift_willThrow();
  }
  v73 = a1;
  v10 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v8);
  v12 = *v10;
  v11 = v10[1];
  sub_1B08A35B0(*v10, v11);
  v13 = sub_1B09654B4(v12, v11);
  if (v3)
    return sub_1B08A3638(v12, v11);
  v17 = v14;
  v85 = 0;
  memset(v84, 0, sizeof(v84));
  v71 = *(_QWORD *)(v13 + 16);
  if (!v71)
  {
    swift_bridgeObjectRelease();
    goto LABEL_78;
  }
  v64 = v4;
  v65 = a2;
  v66 = v12;
  v67 = v11;
  v18 = 0;
  v86 = v13 + 32;
  v70 = 0x8000000000000000;
  v19 = v71;
  v68 = v14;
  do
  {
    sub_1B08AE338(v86 + 40 * v18, (uint64_t)&v74);
    v20 = *((_QWORD *)&v75 + 1);
    v21 = v76;
    __swift_project_boxed_opaque_existential_1(&v74, *((uint64_t *)&v75 + 1));
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    v23 = *((_QWORD *)&v75 + 1);
    v24 = v76;
    __swift_project_boxed_opaque_existential_1(&v74, *((uint64_t *)&v75 + 1));
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
    v26 = *((_QWORD *)&v75 + 1);
    v27 = v76;
    __swift_project_boxed_opaque_existential_1(&v74, *((uint64_t *)&v75 + 1));
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
    if (v22 > 3u)
      goto LABEL_9;
    v29 = v28;
    v30 = (uint64_t)*(&off_1E61B15B0 + (__int16)v22);
    if (*(_QWORD *)(v30 + 16) <= (uint64_t)v25)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    v31 = *(unsigned __int8 *)(v30 + v25 + 32);
    swift_bridgeObjectRelease();
    if (v22 != 1)
    {
      if (v31 == 56)
        goto LABEL_9;
      goto LABEL_24;
    }
    if (v31 == 56)
      goto LABEL_9;
    if (v29 >= 0x97uLL)
      goto LABEL_24;
    v32 = *((unsigned __int8 *)&unk_1E6191BF0 + v29 + 32);
    if (v32 == 175)
      goto LABEL_24;
    switch(v31)
    {
      case 21:
        v57 = v32 == 163;
        v58 = 21;
        goto LABEL_57;
      case 17:
        v57 = v32 == 40;
        v58 = 17;
LABEL_57:
        if (v57)
          v31 = v58 + 1;
        else
          v31 = v58;
        break;
      case 9:
        if (*((unsigned __int8 *)&unk_1E6191BF0 + v29 + 32) > 0x74u)
        {
          if (v32 == 117)
          {
            v31 = 13;
          }
          else
          {
            if (v32 != 160)
            {
LABEL_75:
              v31 = 9;
              break;
            }
            v31 = 10;
          }
        }
        else if (v32 == 28)
        {
          v31 = 11;
        }
        else
        {
          if (v32 != 59)
            goto LABEL_75;
          v31 = 12;
        }
        break;
    }
LABEL_24:
    v33 = *((_QWORD *)&v75 + 1);
    v34 = v76;
    __swift_project_boxed_opaque_existential_1(&v74, *((uint64_t *)&v75 + 1));
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 32))(v33, v34);
    v36.value = Platform.interpret(language:)(v35).value;
    v37 = *((_QWORD *)&v75 + 1);
    v38 = v76;
    __swift_project_boxed_opaque_existential_1(&v74, *((uint64_t *)&v75 + 1));
    v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 32))(v37, v38);
    if (v22 == 3)
    {
      value = v36.value;
      v40 = 205;
      v69 = v39;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBB198);
      v41 = (_QWORD *)sub_1B0A1D9D8();
      v42 = &byte_1E61929E8;
      do
      {
        v43 = *((_QWORD *)v42 - 1);
        v44 = *v42;
        v45 = sub_1B08F9E4C(v43);
        if ((v46 & 1) != 0)
        {
          __break(1u);
LABEL_85:
          __break(1u);
          JUMPOUT(0x1B096ABA0);
        }
        *(_QWORD *)((char *)v41 + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v45;
        *(_QWORD *)(v41[6] + 8 * v45) = v43;
        *(_BYTE *)(v41[7] + v45) = v44;
        v47 = v41[2];
        v48 = __OFADD__(v47, 1);
        v49 = v47 + 1;
        if (v48)
          goto LABEL_85;
        v42 += 16;
        v41[2] = v49;
        --v40;
      }
      while (v40);
      v17 = v68;
      v19 = v71;
      if (v49 && (v51 = sub_1B08F9E4C(v69), (v52 & 1) != 0))
        v50 = *(unsigned __int8 *)(v41[7] + v51);
      else
        v50 = 128;
      v36.value = value;
      swift_release();
    }
    else
    {
      v50 = 128;
    }
    if (v22 == (unsigned __int16)v73)
      v53 = 1;
    else
      v53 = (v73 >> 16) & 1;
    v55 = (v73 & 0xFF000000) == 0x38000000 || v31 == BYTE3(v73);
    if (v53 == 1
      && v55
      && ((v73 & 0xFF00000000) == 0xAF00000000
       || v36.value != FontParser_Language_unknownDefault && v36.value == BYTE4(v73))
      && ((v73 & 0xFF0000000000) == 0x800000000000 || v50 != 128 && v50 == BYTE5(v73)))
    {
      v56 = 8;
      switch(v31)
      {
        case 0:
          v56 = 1;
          break;
        case 1:
          v56 = 2;
          break;
        case 2:
          v56 = 3;
          break;
        case 3:
          v56 = 4;
          break;
        case 4:
          v56 = 6;
          break;
        case 6:
          v56 = 7;
          break;
        case 48:
          v56 = 0;
          break;
        case 49:
          v56 = 5;
          break;
        case 55:
          break;
        default:
          v56 = -1;
          break;
      }
      if (v70 < v56)
      {
        sub_1B08AE3C4((uint64_t)v84, &qword_1EEEBC6D0);
        sub_1B08AE338((uint64_t)&v74, (uint64_t)v84);
        v70 = v56;
      }
    }
LABEL_9:
    ++v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v74);
  }
  while (v18 != v19);
  swift_bridgeObjectRelease();
  v11 = v67;
  a2 = v65;
  v12 = v66;
  v4 = v64;
LABEL_78:
  sub_1B08CE4D4((uint64_t)v84, (uint64_t)&v74, &qword_1EEEBC6D0);
  if (*((_QWORD *)&v75 + 1))
  {
    sub_1B08AEF8C(&v74, (uint64_t)v83);
    sub_1B08AE338((uint64_t)v83, (uint64_t)v82);
    if (*(_QWORD *)(v17 + 16))
    {
      sub_1B08AE338(v17 + 32, (uint64_t)v80);
    }
    else
    {
      v81 = 0;
      memset(v80, 0, sizeof(v80));
    }
    swift_bridgeObjectRelease();
    v60 = v4[1];
    v77 = 0u;
    v78 = 0u;
    *(_QWORD *)&v79 = 0;
    *((_QWORD *)&v79 + 1) = 2048;
    *(_QWORD *)&v74 = v60;
    sub_1B08AEF8C(v82, (uint64_t)&v74 + 8);
    sub_1B0945E30((uint64_t)v80, (uint64_t)&v77);
    v61 = v77;
    a2[2] = v76;
    a2[3] = v61;
    v62 = v79;
    a2[4] = v78;
    a2[5] = v62;
    v63 = v75;
    *a2 = v74;
    a2[1] = v63;
    sub_1B08A3638(v12, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    return sub_1B08AE3C4((uint64_t)v84, &qword_1EEEBC6D0);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1B08AE3C4((uint64_t)&v74, &qword_1EEEBC6D0);
    sub_1B08ABB40();
    swift_allocError();
    *v59 = 10;
    swift_willThrow();
    sub_1B08A3638(v12, v11);
    return sub_1B08AE3C4((uint64_t)v84, &qword_1EEEBC6D0);
  }
}

uint64_t SfntTrueTypeFont.getHorizontalMetrics(glyphID:)(uint64_t a1)
{
  return sub_1B096AC90(a1, 0);
}

uint64_t SfntTrueTypeFont.getVerticalMetrics(glyphID:)(uint64_t a1)
{
  return sub_1B096AC90(a1, 1);
}

uint64_t SfntTrueTypeFont.encodingType.getter()
{
  return 0;
}

uint64_t SfntTrueTypeFont.parseGlyphMetadata()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  int v64;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC6D8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (_QWORD *)((char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1B096C1B4(1516335206);
  if (v9)
  {
    v10 = v7;
    v11 = v8;
    v12 = v9;
    v13 = *(void (**)(char *, uint64_t))(v1 + 8);
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v10;
    v14[3] = v11;
    v14[4] = v12;
    *(_QWORD *)&v62 = v10;
    *((_QWORD *)&v62 + 1) = v11;
    v63 = v12;
    swift_bridgeObjectRetain_n();
    sub_1B08C57F4(&v47, (uint64_t)&v62, v15, 257, 1, (uint64_t)sub_1B09767C8, (uint64_t)v14);
    if (v2)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    else
    {
      v18 = v49;
      sub_1B0959458(v47, v48, v49, v13, v10, v11, v12, (uint64_t)v6);
      v46 = v62;
      v60 = v62;
      v61 = v63;
      swift_bridgeObjectRetain();
      sub_1B09725E0((uint64_t)&v60, v6, v19, (uint64_t)&v47);
      swift_bridgeObjectRelease();
      v34[1] = v61;
      v37 = v48;
      v35 = v47;
      v36 = v49;
      v34[0] = v18;
      v44 = v50;
      v40 = v51;
      v39 = v52;
      v43 = v53;
      v38 = v54;
      v42 = v55;
      v41 = v56;
      *(_QWORD *)&v46 = v57;
      v45 = v58;
      v20 = v59;
      v64 = v59;
      sub_1B08AE3C4((uint64_t)v6, &qword_1EEEBC6D8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v33 = v20;
      v21 = v40;
      v22 = v39;
      v23 = v38;
      sub_1B08E049C(v40, v39, v43, v38, v42, v41, v46, v45, v33);
      swift_bridgeObjectRelease();
      v24 = v21;
      v25 = v22;
      v26 = v43;
      v27 = v23;
      v28 = v42;
      v29 = v41;
      sub_1B08CDEBC(v24, v25, v43, v27, v42, v41, v46, v45, v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      result = swift_release();
      *(_QWORD *)a1 = v35;
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v12;
      v30 = v36;
      *(_QWORD *)(a1 + 32) = v37;
      *(_QWORD *)(a1 + 40) = v30;
      v31 = v40;
      *(_QWORD *)(a1 + 48) = v44;
      *(_QWORD *)(a1 + 56) = v31;
      *(_QWORD *)(a1 + 64) = v39;
      *(_QWORD *)(a1 + 72) = v26;
      *(_QWORD *)(a1 + 80) = v38;
      *(_QWORD *)(a1 + 88) = v28;
      v32 = v46;
      *(_QWORD *)(a1 + 96) = v29;
      *(_QWORD *)(a1 + 104) = v32;
      *(_QWORD *)(a1 + 112) = v45;
      *(_BYTE *)(a1 + 120) = v64;
    }
  }
  else
  {
    sub_1B08ABB40();
    swift_allocError();
    *v17 = 2;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1B096B1BC(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, _WORD *);
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24[5];
  uint64_t v25;
  char v26;

  sub_1B08CE970(v2, (uint64_t)v23, &qword_1EEEBA768);
  v5 = *(unsigned __int8 *)(v2 + 16);
  v6 = *(unsigned __int8 *)(v2 + 17);
  v7 = *(unsigned __int8 *)(v2 + 18);
  v9 = *(void (**)(uint64_t *__return_ptr, _WORD *))(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  sub_1B08CE970((uint64_t)v23, (uint64_t)&v25, &qword_1EEEBA768);
  if ((v26 & 1) != 0)
  {
    v10 = *((_QWORD *)a1 + 2);
    v21 = *a1;
    v22 = v10;
    swift_retain();
    sub_1B092CDAC(v2);
    if (v6)
      v11 = 256;
    else
      v11 = 0;
    v12 = v11 | v5;
    if (v7)
      v13 = 0x10000;
    else
      v13 = 0;
    v14 = v12 | v13;
    swift_bridgeObjectRetain();
    v15 = sub_1B09647DC(&v21, v14, v9, v8, a2);
    if (!v20)
    {
      a2 = (uint64_t)v15;
LABEL_13:
      swift_bridgeObjectRelease();
      sub_1B092CDD4(v2);
      sub_1B092CDD4(v2);
      v18 = v22;
      *a1 = v21;
      *((_QWORD *)a1 + 2) = v18;
      return a2;
    }
  }
  else
  {
    LOBYTE(v24[0]) = v5;
    BYTE1(v24[0]) = v6;
    BYTE2(v24[0]) = v7;
    v24[1] = (uint64_t)v9;
    v24[2] = v8;
    v24[3] = MEMORY[0x1E0DEE9D8];
    v24[4] = v25;
    v16 = *((_QWORD *)a1 + 2);
    v21 = *a1;
    v22 = v16;
    swift_retain();
    sub_1B092CDAC(v2);
    swift_bridgeObjectRetain();
    v17 = sub_1B08C01B0((char *)&v21, v24, a2);
    if (!v20)
    {
      a2 = (uint64_t)v17;
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
  sub_1B092CDD4(v2);
  sub_1B092CDD4(v2);
  return a2;
}

BOOL sub_1B096B36C(_DWORD *a1)
{
  int v1;

  v1 = a1[1];
  return v1 >= *a1 && a1[2] >= v1;
}

_DWORD *sub_1B096B384@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  int v2;
  int v3;

  v2 = result[2];
  if (v2 < *result)
  {
    __break(1u);
  }
  else
  {
    v3 = result[1];
    *a2 = *result;
    a2[1] = v2;
    a2[2] = v3;
  }
  return result;
}

__n128 sub_1B096B3A8@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int16 v2;
  unint64_t v3;
  __n128 result;

  v2 = a1[1].n128_u16[0];
  v3 = a1[1].n128_u64[1];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u16[0] = v2;
  a2[1].n128_u64[1] = v3;
  return result;
}

uint64_t sub_1B096B3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_WORD *)(a1 + 2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  *(_WORD *)a2 = *(_WORD *)a1;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_WORD *)(a2 + 18) = v2;
  *(_QWORD *)(a2 + 24) = v3;
  return swift_bridgeObjectRetain();
}

BOOL static SfntFontError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t SfntFontError.hash(into:)()
{
  return sub_1B0A1DB34();
}

uint64_t SfntFontError.hashValue.getter()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

uint64_t SfntTrueTypeFont.fontInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B093FA8C(v1 + 8, a1);
}

uint64_t SfntTrueTypeFont.fontInfo.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1B093FAD0(a1, v1 + 8);
}

uint64_t (*SfntTrueTypeFont.fontInfo.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t SfntTrueTypeFont.dataResidence.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 418);
}

uint64_t SfntTrueTypeFont.dataResidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 418) = result;
  return result;
}

uint64_t (*SfntTrueTypeFont.dataResidence.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t SfntTrueTypeFont.containerType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 419);
}

uint64_t SfntTrueTypeFont.containerType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 419) = result;
  return result;
}

uint64_t (*SfntTrueTypeFont.containerType.modify())(_QWORD)
{
  return nullsub_1;
}

uint64_t sub_1B096B4DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;

  if (*(_QWORD *)(a2 + 16) && (result = sub_1B08F9E7C(result), (v5 & 1) != 0))
  {
    sub_1B08A35B0(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * result), *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * result + 8));
    sub_1B08A35F4();
    *(_QWORD *)&v9 = sub_1B0A1D090();
    *((_QWORD *)&v9 + 1) = v6;
    v10 = v7;
    sub_1B08AA184(&v9, v6, a3);
    result = swift_bridgeObjectRelease();
    v8 = 0;
  }
  else
  {
    *(_OWORD *)(a3 + 42) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    v8 = 1;
  }
  *(_BYTE *)(a3 + 58) = v8;
  return result;
}

uint64_t sub_1B096B5BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;

  if (*(_QWORD *)(a2 + 16) && (result = sub_1B08F9E7C(result), (v5 & 1) != 0))
  {
    sub_1B08A35B0(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * result), *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * result + 8));
    sub_1B08A35F4();
    *(_QWORD *)&v9 = sub_1B0A1D090();
    *((_QWORD *)&v9 + 1) = v6;
    v10 = v7;
    sub_1B08A9EA8(&v9, v6, a3);
    result = swift_bridgeObjectRelease();
    v8 = 0;
  }
  else
  {
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    v8 = 1;
  }
  *(_BYTE *)(a3 + 96) = v8;
  return result;
}

unint64_t sub_1B096B69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t result;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64x2_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  int v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  float64x2_t v63;
  int8x16_t v64;
  float64x2_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _QWORD v73[7];
  __int128 v74;
  double (*v75)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v76;
  __int128 v77;
  __n128 (*v78)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v79;
  __n128 (*v80)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64x2_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  _BYTE v95[112];
  __n128 (*v96)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v97;
  __int128 v98;
  _BYTE v99[8];
  uint64_t v100;
  unsigned __int8 v101;
  _BYTE v102[7];
  BOOL v103;
  _BYTE v104[7];
  _DWORD v105[2];
  char v106;
  _BYTE v107[7];
  char v108;
  _BYTE v109[7];
  char v110;
  _BYTE v111[7];
  char v112;
  char v113;
  char v114[8];
  uint64_t (*v115)@<X0>(int *@<X0>, uint64_t@<X8>);
  uint64_t v116;
  uint64_t (*v117)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  __n128 (*v130)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v131;
  __int16 v132;
  char v133;
  char v134;
  int v135;
  BOOL (*v136)(_DWORD *, _DWORD *);
  uint64_t v137;
  _QWORD v138[2];
  char v139;
  BOOL (*v140)(unsigned __int16 *);
  uint64_t v141;
  char v142;
  BOOL (*v143)(_WORD *);
  uint64_t v144;
  __n128 (*v145)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v146;
  __int128 v147[9];
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;

  v153 = 1;
  v152 = 1;
  v151 = 1;
  v150 = 1;
  v149 = 1;
  v148 = 1;
  v113 = 1;
  v112 = 1;
  v110 = 1;
  v108 = 1;
  v106 = 1;
  v103 = 1;
  v94 = 1;
  *(_WORD *)v95 = 257;
  memset(&v95[8], 0, 96);
  v95[104] = 1;
  v96 = sub_1B08B5CF4;
  v97 = 0;
  *(_QWORD *)&v98 = sub_1B09773D8;
  *((_QWORD *)&v98 + 1) = swift_getKeyPath();
  v147[3] = *(_OWORD *)&v95[48];
  v147[2] = *(_OWORD *)&v95[32];
  v147[0] = *(_OWORD *)v95;
  v147[1] = *(_OWORD *)&v95[16];
  v147[8] = v98;
  v147[7] = (unint64_t)sub_1B08B5CF4;
  v147[6] = *(_OWORD *)&v95[96];
  v147[4] = *(_OWORD *)&v95[64];
  v147[5] = *(_OWORD *)&v95[80];
  sub_1B096CB24(1835104368, v147, v4, a1, (uint64_t)v99);
  sub_1B08CB414((uint64_t)v95);
  v5 = v101;
  v6 = v100;
  v132 = 257;
  v133 = 1;
  v134 = 1;
  v135 = 1594834165;
  v136 = sub_1B08A0EC0;
  v137 = 0;
  v138[0] = 0x101010101010101;
  *(_DWORD *)((char *)v138 + 7) = 16843009;
  v139 = 1;
  v140 = sub_1B0948F10;
  v141 = 0;
  v142 = 1;
  v143 = sub_1B0948F20;
  v144 = 0;
  v145 = sub_1B08B5A2C;
  v146 = 0;
  sub_1B096B4DC(1751474532, a1, (uint64_t)&v119);
  if ((BYTE10(v122) & 1) != 0)
  {
    v7 = 0;
    v59 = 0;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
  }
  else
  {
    v12 = (uint64_t)(*((_QWORD *)&v121 + 1) << 16) >> 48;
    if (WORD1(v120) - 16385 >= 0xFFFFC00F)
      v7 = WORD1(v120);
    else
      v7 = 0;
    v13 = v12 - SWORD4(v121);
    v8 = 0.0;
    if (v13 == (__int16)(v12 - WORD4(v121)))
    {
      v14 = (__int16)(HIWORD(v121) - WORD5(v121));
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
      if (v14 == (*((uint64_t *)&v121 + 1) >> 48) - (SDWORD2(v121) >> 16))
      {
        v8 = (double)SWORD4(v121);
        v9 = (double)SWORD5(v121);
        v10 = (double)(__int16)v13;
        v11 = (double)v14;
      }
    }
    else
    {
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
    }
    v59 = ((uint64_t)((_QWORD)v122 << 62) >> 63) & 0xC02E000000000000;
    v103 = (v122 & 2) == 0;
  }
  v127 = 0x101010101010101;
  v128 = 0x101010101010101;
  v129 = 1;
  v130 = sub_1B08E12B0;
  v131 = 0;
  *(double *)&result = COERCE_DOUBLE(sub_1B096B5BC(1751672161, a1, (uint64_t)&v119));
  v72 = v5;
  v70 = v7;
  v71 = v6;
  if ((v125 & 1) != 0)
  {
    v16 = v9 + v11;
    if ((~COERCE__INT64(v9 + v11) & 0x7FF0000000000000) != 0)
    {
      if (v16 > -9.22337204e18)
      {
        if (v16 < 9.22337204e18)
        {
          if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
          {
            if (v9 > -9.22337204e18)
            {
              if (v9 < 9.22337204e18)
              {
                if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) != 0)
                {
                  if (v10 > -9.22337204e18)
                  {
                    if (v10 < 9.22337204e18)
                    {
                      *((_QWORD *)&v61 + 1) = 0;
                      v62 = 0;
                      v69 = (uint64_t)v16;
                      v17 = (uint64_t)v9;
                      v60 = 0;
                      *(_QWORD *)&v61 = (uint64_t)v10;
                      goto LABEL_23;
                    }
LABEL_56:
                    __break(1u);
                    goto LABEL_57;
                  }
LABEL_55:
                  __break(1u);
                  goto LABEL_56;
                }
LABEL_54:
                __break(1u);
                goto LABEL_55;
              }
LABEL_53:
              __break(1u);
              goto LABEL_54;
            }
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_50;
  }
  v62 = v122;
  v60 = *((_QWORD *)&v120 + 1);
  v61 = v121;
  v17 = v120;
  v69 = *((_QWORD *)&v119 + 1);
LABEL_23:
  *(_QWORD *)&v74 = 0x101010101010101;
  *((_QWORD *)&v74 + 1) = 0x101010101010101;
  v75 = sub_1B096CC5C;
  v76 = 0;
  *(_QWORD *)&v77 = 0x101010101010101;
  *(_QWORD *)((char *)&v77 + 5) = 0x101010101010101;
  v78 = sub_1B096CC70;
  v79 = 0;
  v80 = sub_1B09777B4;
  v81 = 0;
  *(_QWORD *)&v82 = sub_1B09773F0;
  *((_QWORD *)&v82 + 1) = swift_getKeyPath();
  *(_QWORD *)&v83 = sub_1B0977408;
  *((_QWORD *)&v83 + 1) = swift_getKeyPath();
  *(_QWORD *)&v84 = sub_1B0977420;
  *((_QWORD *)&v84 + 1) = swift_getKeyPath();
  v123 = (unint64_t)sub_1B09777B4;
  v124 = v82;
  v125 = v83;
  v126 = v84;
  v119 = v74;
  v120 = (unint64_t)sub_1B096CC5C;
  v121 = v77;
  v122 = (unint64_t)sub_1B096CC70;
  sub_1B096C9CC(1330851634, (uint64_t)&v119, v18, a1, (uint64_t)&v85);
  sub_1B0977438((uint64_t)&v74);
  if ((v93 & 1) != 0)
  {
    v20 = 0;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    LOBYTE(v25) = 0;
    v63 = 0u;
    v64 = 0u;
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0.0;
    v29 = 0.0;
    v65 = 0u;
  }
  else
  {
    if ((v92 & 1) != 0)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v22 = v91 << 16 >> 48;
      v23 = (uint64_t)(int)v91 >> 16;
    }
    v21 = HIWORD(v90);
    v30.i64[1] = v86.i64[1];
    v24 = (uint64_t)(int)v85 >> 16;
    if (v103)
    {
      v59 = 0;
      v103 = (v89 & 1) == 0;
    }
    LOBYTE(v25) = (v88 & 0xFF000000) == 150994944;
    v20 = v89 >> 48;
    v67 = (uint64_t)(int)v90 >> 16;
    v68 = (__int16)v90;
    v113 = 0;
    v66 = WORD2(v90);
    v112 = 0;
    v65 = vcvtq_f64_s64(vshrq_n_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v87), (uint64x2_t)xmmword_1B0A3CB20), 0x30uLL));
    v106 = 0;
    v26 = (double)(v86.i64[0] >> 48);
    v27 = (double)(v86.i64[0] << 16 >> 48);
    v64 = (int8x16_t)vcvtq_f64_s64(vshrq_n_s64((int64x2_t)vshlq_u64(v86, (uint64x2_t)xmmword_1B0A3CB30), 0x30uLL));
    v28 = (double)(v86.i64[1] >> 48);
    v110 = 0;
    v30.i64[0] = v87;
    v63 = vcvtq_f64_s64(vshrq_n_s64((int64x2_t)vshlq_u64(v30, (uint64x2_t)xmmword_1B0A3CB40), 0x30uLL));
    v29 = (double)(v86.i64[1] << 16 >> 48);
    v108 = 0;
  }
  v114[0] = 1;
  v115 = sub_1B08CBB24;
  v116 = 0;
  v117 = sub_1B08B5A58;
  v118 = 0;
  sub_1B096C8C4(1886352244, (uint64_t)v114, v19, a1, (uint64_t)v73);
  if (!v73[6])
  {
    v58 = v23;
    v36 = swift_bridgeObjectRetain();
    v37 = sub_1B0915B54(v36);
    if (v38 >> 60 == 15)
    {
      result = v59;
      v35 = v69;
    }
    else
    {
      v40 = v37;
      v41 = v38;
      v42 = v25;
      v25 = v20;
      v43 = v17;
      v44 = v21;
      v45 = v24;
      v46 = sub_1B0915B24(v37, v38, v39);
      sub_1B08CBB10(v40, v41);
      v47 = (double)v46;
      v24 = v45;
      v21 = v44;
      v17 = v43;
      v20 = v25;
      LOBYTE(v25) = v42;
      v48 = v47 * 0.0000152587891;
      result = v59;
      v35 = v69;
      if (fabs(v48) > 0.00001)
      {
        result = *(_QWORD *)&v48 ^ 0x8000000000000000;
        v103 = 0;
      }
    }
    if (!__OFSUB__(v17, v35))
    {
      if (v17 >= 0)
        v49 = v17;
      else
        v49 = v17 + 1;
      v33 = v49 >> 1;
      v34 = (v17 - v35) / 2;
      v23 = v58;
      goto LABEL_45;
    }
LABEL_57:
    __break(1u);
    return result;
  }
  v31 = v73[1];
  v32 = SHIDWORD(v73[0]);
  swift_bridgeObjectRelease();
  v33 = (__int16)v31;
  v34 = (uint64_t)(int)v31 >> 16;
  v25 = HIDWORD(v31) & 1;
  if (fabs((double)v32 * 0.0000152587891) <= 0.00001)
  {
    result = v59;
  }
  else
  {
    *(double *)&result = (double)v32 * 0.0000152587891;
    v103 = 0;
  }
  v35 = v69;
LABEL_45:
  v50 = (double)v34;
  v51 = v71;
  if (v72)
    v51 = 0;
  v52 = v113;
  *(_DWORD *)(a2 + 65) = v73[0];
  *(_DWORD *)(a2 + 68) = *(_DWORD *)((char *)v73 + 3);
  v53 = v112;
  *(_DWORD *)(a2 + 89) = *(_DWORD *)v111;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v111[3];
  v54 = v110;
  *(_DWORD *)(a2 + 129) = *(_DWORD *)v109;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v109[3];
  v55 = v108;
  v56 = *(_DWORD *)v107;
  *(_DWORD *)(a2 + 172) = *(_DWORD *)&v107[3];
  *(_DWORD *)(a2 + 169) = v56;
  LOBYTE(v56) = v106;
  *(_DWORD *)(a2 + 289) = *(_DWORD *)v104;
  *(_DWORD *)(a2 + 292) = *(_DWORD *)&v104[3];
  v57 = v103;
  *(_DWORD *)(a2 + 305) = *(_DWORD *)v102;
  *(_DWORD *)(a2 + 308) = *(_DWORD *)&v102[3];
  *(_QWORD *)a2 = v51;
  *(_QWORD *)(a2 + 8) = v70;
  *(_QWORD *)(a2 + 16) = v35;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v60;
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v68;
  *(_QWORD *)(a2 + 56) = v67;
  *(_BYTE *)(a2 + 64) = v52;
  *(_QWORD *)(a2 + 72) = v66;
  *(_QWORD *)(a2 + 80) = v21;
  *(_BYTE *)(a2 + 88) = v53;
  *(double *)(a2 + 96) = v26;
  *(int8x16_t *)(a2 + 104) = vextq_s8(v64, v64, 8uLL);
  *(double *)(a2 + 120) = v27;
  *(_BYTE *)(a2 + 128) = v54;
  *(double *)(a2 + 136) = v28;
  *(float64x2_t *)(a2 + 144) = v63;
  *(double *)(a2 + 160) = v29;
  *(_BYTE *)(a2 + 168) = v55;
  *(float64x2_t *)(a2 + 176) = v65;
  *(_BYTE *)(a2 + 192) = v56;
  *(_DWORD *)(a2 + 193) = v105[0];
  *(_DWORD *)(a2 + 196) = *(_DWORD *)((char *)v105 + 3);
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = v22;
  *(_QWORD *)(a2 + 248) = v23;
  *(_QWORD *)(a2 + 256) = v61;
  *(_QWORD *)(a2 + 264) = v24;
  *(_QWORD *)(a2 + 272) = *((_QWORD *)&v61 + 1);
  *(_QWORD *)(a2 + 280) = v62;
  *(_BYTE *)(a2 + 288) = v25;
  *(double *)(a2 + 296) = *(double *)&result;
  *(_BYTE *)(a2 + 304) = v57;
  *(double *)(a2 + 312) = (double)v33;
  *(double *)(a2 + 320) = v50;
  *(double *)(a2 + 328) = v8;
  *(double *)(a2 + 336) = v9;
  *(double *)(a2 + 344) = v10;
  *(double *)(a2 + 352) = v11;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  *(_BYTE *)(a2 + 376) = 0;
  return result;
}

uint64_t SfntTrueTypeFont.string(name:matchingQuery:)(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];
  uint64_t v7;

  sub_1B08CE970(v2 + 392, (uint64_t)v6, &qword_1EEEBC6C8);
  sub_1B08CE970((uint64_t)v6, (uint64_t)&v7, &qword_1EEEBC6C8);
  if (v7)
    return sub_1B092F88C(a1, a2 & 0xFFFFFF00FFFFLL | ((unint64_t)(BYTE2(a2) & 1) << 16), v7);
  else
    return 0;
}

uint64_t sub_1B096C02C(uint64_t result, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[72];
  __C::CGRect_optional v10;
  _OWORD v11[4];
  uint64_t v12;
  _OWORD v13[2];
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = v2[1];
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = result;
  result = 0;
  if ((v4 & 0x8000000000000000) == 0 && v3 > v4)
  {
    v5 = a2 & 1;
    v6 = v2[3];
    v7 = v2[4];
    sub_1B0969B40(a2 & 1, (uint64_t)v9);
    sub_1B08CE970((uint64_t)v9, (uint64_t)v11, &qword_1EEEBA820);
    if (v12)
    {
      v13[0] = v11[0];
      v13[1] = v11[1];
      v14 = v11[2];
      v15 = v11[3];
      v16 = v12;
      v8 = v4;
      if (*(uint64_t *)&v11[0] <= v4)
      {
        if (*(uint64_t *)&v11[0] <= 0)
          goto LABEL_9;
        v8 = *(_QWORD *)&v11[0] - 1;
      }
      sub_1B0946C30(v8);
LABEL_9:
      sub_1B0946AFC(v4);
      sub_1B08CBB38((uint64_t)v9);
      return v4;
    }
    SfntTrueTypeFont.getBoundingBox(glyphID:)(&v10, v4);
    result = sub_1B08CE970((uint64_t)&v10, (uint64_t)v13, &qword_1EEEBAC80);
    if ((v14 & 1) != 0)
      return 0;
    if (!v5 || !__OFSUB__(v6, v7))
      return v4;
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t sub_1B096C1B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *v1;
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v3 = sub_1B08F9E7C(a1);
  if ((v4 & 1) == 0)
    return 0;
  sub_1B08A35B0(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3), *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3 + 8));
  sub_1B08A35F4();
  return sub_1B0A1D090();
}

FontParser::Variations_optional __swiftcall SfntTrueTypeFont.parseVariations()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unsigned __int16 v23;
  uint64_t v24;
  __int128 v25;
  _BOOL8 v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *(*v30)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  FontParser::Variations_optional result;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  id v42;
  BOOL v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __n128 (*v48)@<Q0>(__n128 *@<X0>, __n128 *@<X8>);
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  BOOL (*v52)(unsigned __int16 *);
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t (*v59)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_5;
  v2 = sub_1B08F9E7C(1719034226);
  if ((v3 & 1) == 0)
    goto LABEL_5;
  v4 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
  v5 = v4[1];
  *(_QWORD *)&v62 = *v4;
  *((_QWORD *)&v62 + 1) = v5;
  sub_1B08A35B0(v62, v5);
  sub_1B08A35F4();
  v6 = (void *)sub_1B0A1D090();
  if ((uint64_t)v7 < (uint64_t)v6)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = v6;
  v10 = v7;
  v11 = v8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v10;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v62 = v9;
  *((_QWORD *)&v62 + 1) = v10;
  *(_QWORD *)&v63 = v11;
  swift_bridgeObjectRetain_n();
  sub_1B08C724C(&v44, &v62, v13, 0x10101010101);
  v15 = v14;
  v17 = v16;
  v38 = v18;
  v19 = v44;
  v44 = v62;
  *(_QWORD *)&v45 = v63;
  swift_bridgeObjectRetain();
  v23 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v44, v20, 1);
  swift_bridgeObjectRelease_n();
  v6 = (void *)swift_bridgeObjectRelease();
  if ((unint64_t)(v15 - 0x2000000000000000) >> 62 != 3)
    goto LABEL_21;
  v24 = v23 - 4 * v15;
  if (__OFSUB__(v23, 4 * v15))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v25 = v44;
  v26 = v24 > 5;
  v27 = v24 < 6;
  v28 = v24 < 6;
  v29 = (uint64_t)sub_1B092DFA4;
  v43 = v28;
  v30 = sub_1B092DFCC;
  if (v28)
    v29 = 1;
  *(_QWORD *)&v44 = v17;
  if (v27)
    v30 = 0;
  BYTE8(v44) = 1;
  LOWORD(v45) = 257;
  BYTE2(v45) = 1;
  *((_QWORD *)&v45 + 1) = sub_1B096B36C;
  *(_QWORD *)&v46 = 0;
  *((_QWORD *)&v46 + 1) = sub_1B096B384;
  *(_QWORD *)&v47 = 0;
  WORD4(v47) = 257;
  v48 = sub_1B096B3A8;
  v49 = 0;
  *(_QWORD *)&v50 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v50 + 1) = v15;
  *(_QWORD *)&v51 = v23;
  BYTE8(v51) = 1;
  v52 = sub_1B092DF80;
  v53 = 0;
  LOBYTE(v54) = 1;
  BYTE8(v54) = 1;
  *(_QWORD *)&v55 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v55 + 1) = v15;
  *(_QWORD *)&v56 = v26;
  *((_QWORD *)&v56 + 1) = v29;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v57 + 1) = v30;
  *(_QWORD *)&v58 = 0;
  BYTE8(v58) = v28;
  v59 = sub_1B096B3C4;
  v60 = 0;
  *(_QWORD *)&v61 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v61 + 1) = v19;
  v62 = v44;
  v63 = v45;
  v66 = (unint64_t)sub_1B096B3A8;
  v67 = v50;
  v64 = v46;
  v65 = v47;
  v75 = (unint64_t)sub_1B096B3C4;
  v76 = v61;
  v73 = v57;
  v74 = v58;
  v71 = v55;
  v72 = v56;
  v69 = (unint64_t)sub_1B092DF80;
  v70 = v54;
  v68 = v51;
  if (!__OFADD__(v9, v38))
  {
    *(_QWORD *)&v39 = sub_1B0A1D078();
    *((_QWORD *)&v39 + 1) = v33;
    v40 = v34;
    v21 = sub_1B08C6F9C((uint64_t *)&v42, &v39, v34);
    v22 = v42;
    swift_bridgeObjectRelease();
    sub_1B09767F4((uint64_t)&v44);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }
  sub_1B08A36F0();
  v31 = (void *)swift_allocError();
  *v32 = 2;
  v32[1] = v25;
  v32[2] = 0xD00000000000001DLL;
  v32[3] = 0x80000001B0A26020;
  v32[4] = 0;
  swift_willThrow();
  sub_1B09767F4((uint64_t)&v44);
  v42 = v31;
  v35 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7D0);
  if ((swift_dynamicCast() & 1) != 0)
  {

    v31 = v41;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B08CD6AC((id)v39);
    swift_bridgeObjectRelease();
  }
  else
  {

    v36 = v31;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

  }
  swift_bridgeObjectRelease();
LABEL_5:
  v21 = 0;
  v22 = 0;
LABEL_6:
  v6 = (void *)v21;
  v7 = v22;
LABEL_23:
  result.value.namedVariations._rawValue = v7;
  result.value.axes._rawValue = v6;
  return result;
}

uint64_t sub_1B096C678()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 418);
}

uint64_t sub_1B096C680()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 419);
}

uint64_t sub_1B096C688@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B093FA8C(v1 + 8, a1);
}

uint64_t sub_1B096C694@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[72];

  SfntTrueTypeFont.metadata.getter((uint64_t)v3);
  return sub_1B08CE970((uint64_t)v3, a1, &qword_1EEEBACC8);
}

char *sub_1B096C6D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;

  if (!*(_QWORD *)(v1 + 392))
    return (char *)MEMORY[0x1E0DEE9D8];
  MEMORY[0x1E0C80A78](a1);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1B0975DB0(v2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1B0977624);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B096C76C(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 392);
  if (v3)
    return sub_1B092F88C(a1, a2 & 0xFFFFFF00FFFFLL | ((unint64_t)(BYTE2(a2) & 1) << 16), v3);
  else
    return 0;
}

uint64_t sub_1B096C7B8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return SfntTrueTypeFont.findCharacterMap(matchingQuery:)(a1 & 0xFFFFFF00FFFFLL | ((unint64_t)(BYTE2(a1) & 1) << 16), a2);
}

uint64_t sub_1B096C7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B096C7FC(a1, a2, a3, 0);
}

uint64_t sub_1B096C7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B096C7FC(a1, a2, a3, 1);
}

uint64_t sub_1B096C7FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  const void *v4;
  _BYTE __dst[420];

  memcpy(__dst, v4, sizeof(__dst));
  return sub_1B096C02C(a1, a4);
}

uint64_t sub_1B096C84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v4;
  _BYTE __dst[420];

  memcpy(__dst, v4, sizeof(__dst));
  return SfntTrueTypeFont.recordGlyph<A>(glyphIndex:into:)(a1, a2, a3, a4);
}

double sub_1B096C8C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (*(_QWORD *)(a4 + 16) && (v9 = sub_1B08F9E7C(a1), (v10 & 1) != 0))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * v9);
    v15 = *v11;
    v16 = v11[1];
    sub_1B08A35B0(*v11, v16);
    sub_1B08A35F4();
    *(_QWORD *)&v20 = sub_1B0A1D090();
    *((_QWORD *)&v20 + 1) = v12;
    v21 = v13;
    swift_bridgeObjectRetain();
    sub_1B08BD1D0(&v20, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)a5 = v15;
    *(_DWORD *)(a5 + 8) = v16;
    *(_BYTE *)(a5 + 12) = BYTE4(v16);
    result = *(double *)&v17;
    *(_OWORD *)(a5 + 16) = v17;
    *(_OWORD *)(a5 + 32) = v18;
    *(_QWORD *)(a5 + 48) = v19;
  }
  else
  {
    *(_QWORD *)(a5 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

double sub_1B096C9CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  int v22;
  unsigned __int8 v23;
  __int128 v24;
  double result;
  _OWORD v26[2];
  uint64_t v27;
  __int16 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  int v37;
  unsigned __int8 v38;
  _QWORD v39[3];

  if (*(_QWORD *)(a4 + 16) && (v9 = sub_1B08F9E7C(a1), (v10 & 1) != 0))
  {
    v11 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v9);
    v12 = v11[1];
    *(_QWORD *)&v26[0] = *v11;
    *((_QWORD *)&v26[0] + 1) = v12;
    sub_1B08A35B0(*(uint64_t *)&v26[0], v12);
    sub_1B08A35F4();
    v39[0] = sub_1B0A1D090();
    v39[1] = v13;
    v39[2] = v14;
    swift_bridgeObjectRetain();
    sub_1B096DD6C((unint64_t)v39, a2, a3, (uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v28;
    v16 = v30;
    v17 = v32;
    v18 = v33;
    v19 = v34;
    v20 = v35;
    v21 = v36;
    v22 = v37;
    v23 = v38;
    v24 = v26[1];
    *(_OWORD *)a5 = v26[0];
    *(_OWORD *)(a5 + 16) = v24;
    *(_QWORD *)(a5 + 32) = v27;
    *(_WORD *)(a5 + 40) = v15;
    *(_OWORD *)(a5 + 44) = v29;
    *(_DWORD *)(a5 + 60) = v16;
    result = *(double *)&v31;
    *(_OWORD *)(a5 + 64) = v31;
    *(_QWORD *)(a5 + 80) = v17;
    *(_BYTE *)(a5 + 88) = v18;
    *(_QWORD *)(a5 + 90) = v19;
    *(_WORD *)(a5 + 98) = v20;
    *(_BYTE *)(a5 + 100) = v21;
    *(_DWORD *)(a5 + 102) = v22;
    *(_WORD *)(a5 + 106) = v23;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a5 + 91) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_BYTE *)(a5 + 107) = 1;
  }
  return result;
}

double sub_1B096CB24@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  double result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unsigned __int8 v26;
  _QWORD v27[3];

  if (*(_QWORD *)(a4 + 16) && (v9 = sub_1B08F9E7C(a1), (v10 & 1) != 0))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * v9);
    v12 = v11[1];
    v18 = *v11;
    *(_QWORD *)&v19 = v12;
    sub_1B08A35B0(v18, v12);
    sub_1B08A35F4();
    v27[0] = sub_1B0A1D090();
    v27[1] = v13;
    v27[2] = v14;
    swift_bridgeObjectRetain();
    sub_1B096EF30((uint64_t)v27, a2, a3, (uint64_t)&v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v25;
    v16 = v26;
    *(_DWORD *)a5 = v18;
    *(_OWORD *)(a5 + 8) = v19;
    *(_OWORD *)(a5 + 24) = v20;
    *(_OWORD *)(a5 + 40) = v21;
    *(_OWORD *)(a5 + 56) = v22;
    *(_OWORD *)(a5 + 72) = v23;
    result = *(double *)&v24;
    *(_OWORD *)(a5 + 88) = v24;
    *(_QWORD *)(a5 + 104) = v15;
    *(_WORD *)(a5 + 112) = v16;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_WORD *)(a5 + 112) = 256;
  }
  return result;
}

double sub_1B096CC5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  double result;

  v2 = *(_WORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_WORD *)(a2 + 8) = v2;
  return result;
}

__n128 sub_1B096CC70@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  int v3;
  __int128 v4;
  __n128 result;

  v2 = *(_WORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 60);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_WORD *)(a2 + 40) = v2;
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(_DWORD *)(a2 + 60) = v3;
  result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

double sub_1B096CCA4@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

_DWORD *sub_1B096CCB0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B096CCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  return sub_1B08A35B0(v3, v2);
}

double sub_1B096CCF4@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 3);
  v7 = swift_allocObject();
  *(double *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  result = a1[2];
  *(double *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  *(_WORD *)(a2 + 16) = 257;
  *(_QWORD *)(a2 + 24) = sub_1B0921F84;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = sub_1B096CDA0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = sub_1B09772C4;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = sub_1B096CCBC;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 96) = v6;
  return result;
}

__n128 sub_1B096CDA0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1B096CDB4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_1B08E24F0((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B096CDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char v7;
  void (*v8)(__int128 *__return_ptr, unsigned int *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(__int128 *__return_ptr, _QWORD *);
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  char v23;
  _BYTE v24[120];

  v5 = a2;
  v7 = *(_BYTE *)a2;
  v8 = *(void (**)(__int128 *__return_ptr, unsigned int *))(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  v20 = *(_OWORD *)a1;
  *(_QWORD *)&v21 = v10;
  swift_bridgeObjectRetain();
  v11 = sub_1B096D2B0((uint64_t *)&v20, v7, v8, v9, a3);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = v11;
    v15 = v12;
    v16 = v13;
    swift_bridgeObjectRelease();
    v17 = *(void (**)(__int128 *__return_ptr, _QWORD *))(v5 + 24);
    v18 = v21;
    *(_OWORD *)a1 = v20;
    *(_QWORD *)(a1 + 16) = v18;
    v22[0] = v14;
    v22[1] = v15;
    v23 = v16;
    v17(&v20, v22);
    sub_1B08CE970((uint64_t)&v20, (uint64_t)v24, &qword_1EEEBAB20);
    v5 = sub_1B08B9AFC(a1, a3);
    sub_1B0977560((uint64_t)v24);
  }
  return v5;
}

uint64_t sub_1B096D018(__int128 *a1, char a2, void (*a3)(__int128 *__return_ptr, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned __int8 *(*v26)@<X0>(unsigned __int8 *@<X0>, uint64_t@<X8>);
  uint64_t v27;
  id (*v28)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  _BYTE v36[32];
  char v37;

  v11 = *((_QWORD *)a1 + 2);
  v20 = *a1;
  *(_QWORD *)&v21 = v11;
  swift_bridgeObjectRetain();
  v12 = sub_1B08C1578((uint64_t *)&v20, a5, a2);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v12;
    swift_bridgeObjectRelease();
    v14 = v21;
    *a1 = v20;
    *((_QWORD *)a1 + 2) = v14;
    v24 = v13;
    a3(&v20, &v24);
    *(_OWORD *)v36 = v21;
    *(_OWORD *)&v36[16] = v22;
    v35 = v20;
    v37 = v23;
    v19 = *(_OWORD *)&v36[8];
    v15 = *((_QWORD *)&v22 + 1);
    v16 = swift_allocObject();
    v17 = v21;
    *(_OWORD *)(v16 + 16) = v20;
    *(_OWORD *)(v16 + 32) = v17;
    *(_OWORD *)(v16 + 48) = v22;
    *(_BYTE *)(v16 + 64) = v23;
    v25 = 1;
    v26 = sub_1B0921D48;
    v27 = 0;
    v28 = sub_1B0922E8C;
    v29 = v16;
    v30 = v19;
    v31 = v15;
    v32 = 2;
    v33 = 0;
    v34 = 1;
    sub_1B08ECB18((uint64_t)&v35);
    a4 = sub_1B08A0FD0(a1, a5);
    swift_release();
    sub_1B0967558((uint64_t)&v35);
  }
  return a4;
}

uint64_t sub_1B096D2B0(uint64_t *a1, char a2, void (*a3)(__int128 *__return_ptr, unsigned int *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v10;
  __int128 v12;
  _BYTE v13[48];
  unsigned int v14;

  v10 = sub_1B08C1578(a1, a5, a2);
  if (!v5)
  {
    v14 = v10;
    a3(&v12, &v14);
    sub_1B08CE970((uint64_t)&v12, (uint64_t)v13, &qword_1EEEBAB30);
    a4 = sub_1B08B9DCC((uint64_t)a1, a5);
    sub_1B09775E4((uint64_t)v13);
  }
  return a4;
}

void sub_1B096D478(uint64_t a1@<X0>, char a2@<W1>, void (*a3)(__int128 *__return_ptr, unsigned int *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[26];
  unsigned int v23;
  _OWORD v24[6];
  _OWORD v25[2];

  v11 = *(_QWORD *)(a1 + 16);
  v16 = *(_OWORD *)a1;
  *(_QWORD *)&v17 = v11;
  swift_bridgeObjectRetain();
  v12 = sub_1B08C15D0((uint64_t *)&v16, a4, a2);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v12;
    swift_bridgeObjectRelease();
    v14 = v17;
    *(_OWORD *)a1 = v16;
    *(_QWORD *)(a1 + 16) = v14;
    v23 = v13;
    a3(&v16, &v23);
    v24[4] = v20;
    v24[5] = v21;
    v25[0] = *(_OWORD *)v22;
    *(_OWORD *)((char *)v25 + 10) = *(_OWORD *)&v22[10];
    v24[0] = v16;
    v24[1] = v17;
    v24[2] = v18;
    v24[3] = v19;
    v15 = sub_1B0974C78((_DWORD *)(a5 + 4), (_WORD *)(a5 + 8), (_WORD *)(a5 + 10), (_BYTE *)(a5 + 12), (uint64_t *)(a5 + 16), (uint64_t *)(a5 + 32), (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))(a5 + 48), a1, a4);
    sub_1B09772EC((uint64_t)v24);
    *(_DWORD *)a5 = v15;
  }
}

uint64_t sub_1B096D6B8(__int128 *a1, char a2, void (*a3)(id *__return_ptr, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  __int128 v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  id v22[2];
  uint64_t v23;

  v11 = *((_QWORD *)a1 + 2);
  v20 = *a1;
  *(_QWORD *)&v21 = v11;
  swift_bridgeObjectRetain();
  v12 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v20, a5, a2);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v12;
    swift_bridgeObjectRelease();
    v14 = v20;
    v15 = v21;
    *a1 = v20;
    *((_QWORD *)a1 + 2) = v15;
    v23 = v13;
    a3(v22, &v23);
    v17 = v22[0];
    v16 = v22[1];
    v20 = v14;
    *(_QWORD *)&v21 = v15;
    swift_bridgeObjectRetain();
    a4 = sub_1B08CA128((uint64_t)&v20, (uint64_t)v17, (uint64_t)v16, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v21;
    *a1 = v20;
    *((_QWORD *)a1 + 2) = v19;
  }
  return a4;
}

uint64_t sub_1B096D8EC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char v7;
  void (*v8)(__int128 *__return_ptr, uint64_t *);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(__int128 *__return_ptr, uint64_t *);
  unint64_t v14;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v5 = a2;
  v7 = *(_BYTE *)a2;
  v8 = *(void (**)(__int128 *__return_ptr, uint64_t *))(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = a1[2];
  v17 = *(_OWORD *)a1;
  *(_QWORD *)&v18 = v10;
  swift_bridgeObjectRetain();
  v11 = sub_1B096DB08(&v17, v7, v8, v9, a3);
  if (!v3)
  {
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = *(void (**)(__int128 *__return_ptr, uint64_t *))(v5 + 24);
    v14 = v18;
    *(_OWORD *)a1 = v17;
    a1[2] = v14;
    v19 = v12;
    v13(&v17, &v19);
    sub_1B095FD6C(a1, a3, v17);
    v5 = v16;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B096DB08(__int128 *a1, char a2, void (*a3)(__int128 *__return_ptr, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v17;
  id v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v11 = *((_QWORD *)a1 + 2);
  v20 = *a1;
  *(_QWORD *)&v21 = v11;
  swift_bridgeObjectRetain();
  v12 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v20, a5, a2);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v12;
    swift_bridgeObjectRelease();
    v14 = v20;
    v15 = v21;
    *a1 = v20;
    *((_QWORD *)a1 + 2) = v15;
    v23 = v13;
    a3(&v20, &v23);
    v24[0] = v20;
    v24[1] = v21;
    v25 = v22;
    v26 = v20;
    v28 = *((_QWORD *)&v21 + 1);
    v27 = v21;
    *(_OWORD *)v18 = v14;
    v19 = v15;
    swift_bridgeObjectRetain();
    a4 = sub_1B08BFE70((uint64_t)v18, (uint64_t *)v24);
    swift_bridgeObjectRelease();
    sub_1B092CD84((uint64_t)&v26);
    sub_1B08AE280((uint64_t)&v28);
    v17 = v19;
    *a1 = *(_OWORD *)v18;
    *((_QWORD *)a1 + 2) = v17;
  }
  return a4;
}

void sub_1B096DD6C(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64x2_t v18;
  int16x8_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64[2];
  uint64_t v65;
  unsigned __int16 v66;
  __int16 v67;
  __int16 v68;
  __int16 v69;
  char v70;
  __int32 v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  __int16 v93;
  char v94;
  int v95;
  char v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;
  _BYTE v100[24];
  __int128 v101;
  uint64_t v102;
  _BYTE v103[18];
  unsigned __int8 v104;
  char v105;
  _OWORD v106[2];
  unint64_t v107;
  __int16 v108;
  __int128 v109;
  int v110;
  __int128 v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  __int16 v115;
  char v116;
  int v117;
  unsigned __int8 v118;
  _OWORD v119[7];
  __int16 v120;
  uint64_t v121;
  __int128 v122;
  unint64_t v123;
  uint64_t v124;

  v7 = a1;
  v9 = *(_OWORD *)(a2 + 80);
  v119[4] = *(_OWORD *)(a2 + 64);
  v119[5] = v9;
  v119[6] = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 16);
  v119[0] = *(_OWORD *)a2;
  v119[1] = v10;
  v11 = *(_OWORD *)(a2 + 48);
  v119[2] = *(_OWORD *)(a2 + 32);
  v119[3] = v11;
  v12 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v64 = *(_OWORD *)a1;
  v65 = v12;
  swift_bridgeObjectRetain();
  sub_1B096E368((unint64_t)v64, (uint64_t)v119, a3, (uint64_t)&v97);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = v65;
    *(_OWORD *)v7 = *(_OWORD *)v64;
    *(_QWORD *)(v7 + 16) = v13;
    v106[0] = v97;
    v106[1] = v98;
    v107 = v99;
    v108 = *(_WORD *)v100;
    v109 = *(_OWORD *)&v100[4];
    v110 = *(_DWORD *)&v100[20];
    v111 = v101;
    v112 = v102;
    v113 = v103[0];
    v114 = *(_QWORD *)&v103[2];
    v115 = *(_WORD *)&v103[10];
    v116 = v103[12];
    v117 = *(_DWORD *)&v103[14];
    v118 = v104;
    (*(void (**)(__int128 *__return_ptr, _OWORD *))(a2 + 112))(&v97, v106);
    v14 = v98;
    v15 = *((_QWORD *)&v101 + 1);
    v16 = v101;
    v61 = v102;
    v62 = *((_QWORD *)&v97 + 1);
    v17 = *(_QWORD *)&v103[8];
    v59 = *(_QWORD *)v103;
    v60 = *(unsigned __int16 *)&v103[16] | (v104 << 16);
    v63 = v97;
    v124 = *((_QWORD *)&v98 + 1);
    if ((v105 & 1) != 0)
    {
      v55 = DWORD1(v97);
      v56 = (unint64_t)v97 >> 16;
      v53 = *((_QWORD *)&v97 + 1) >> 16;
      v54 = WORD3(v97);
      v51 = HIWORD(*((_QWORD *)&v97 + 1));
      v52 = HIDWORD(*((_QWORD *)&v97 + 1));
      v49 = DWORD1(v98);
      v50 = (unint64_t)v98 >> 16;
      v57 = v98;
      v47 = *((_QWORD *)&v98 + 1) >> 16;
      v48 = WORD3(v98);
      v18 = (uint64x2_t)vdupq_n_s64(v99);
      v45 = HIWORD(*((_QWORD *)&v98 + 1));
      v46 = HIDWORD(*((_QWORD *)&v98 + 1));
      v19 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1B0A3CB60), (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1B0A3CB50));
      *(int16x4_t *)v19.i8 = vmovn_s32((int32x4_t)v19);
      v20 = v99 >> 40;
      v21 = HIWORD(v99);
      v22 = v99;
      v23 = HIBYTE(v99);
      v24 = *(_QWORD *)v100 >> 8;
      v25 = v100[0];
      v26 = HIDWORD(*(_QWORD *)v100);
      v27 = *(_DWORD *)&v100[8];
      v28 = HIDWORD(*(_QWORD *)&v100[8]);
      v29 = *(_DWORD *)&v100[16];
      v30 = HIDWORD(*(_QWORD *)&v100[16]);
      v31 = (unint64_t)v101 >> 16;
      a3 = (uint64_t *)DWORD1(v101);
      v32 = v101;
      v7 = WORD3(v101);
      v16 = *((_QWORD *)&v101 + 1) >> 16;
      v33 = HIDWORD(*((_QWORD *)&v101 + 1));
      v34 = WORD4(v101);
      v35 = HIWORD(*((_QWORD *)&v101 + 1));
      v36 = *(__int128 *)v103 >> 16;
      v37 = v103[0] & 1;
      v38 = *(_QWORD *)&v103[8] >> 16;
      v39 = HIDWORD(*(_QWORD *)&v103[8]) & 1;
      v40 = HIWORD(*(_QWORD *)&v103[8]) | (v60 << 16);
      v41 = HIWORD(v60) & 1;
      v42 = v102;
    }
    else
    {
      v120 = v97 & 0x101;
      v121 = *((_QWORD *)&v97 + 1);
      v122 = v98;
      v123 = v99;
      v43 = v99;
      v55 = *(_QWORD *)v100;
      v56 = *(_QWORD *)&v100[8];
      v58 = *(_QWORD *)&v100[16];
      swift_retain();
      swift_retain();
      sub_1B08A949C(v7, (uint64_t)a3, (uint64_t)v64);
      swift_release();
      swift_release();
      sub_1B09774AC(v63, v62, v14, v124, v43, v55, v56, v58, v16, v15, v61, v59, v17, v60, 0);
      LOWORD(v63) = v64[0];
      LOWORD(v56) = WORD1(v64[0]);
      LOWORD(v55) = WORD2(v64[0]);
      LOWORD(v54) = HIWORD(v64[0]);
      LOWORD(v62) = v64[1];
      LOWORD(v53) = WORD1(v64[1]);
      LOWORD(v52) = WORD2(v64[1]);
      LOWORD(v51) = HIWORD(v64[1]);
      v57 = v65;
      LOWORD(v50) = WORD1(v65);
      LOWORD(v49) = WORD2(v65);
      LOWORD(v48) = HIWORD(v65);
      v124 = v66;
      LOWORD(v47) = v67;
      LOWORD(v46) = v68;
      LOWORD(v45) = v69;
      v22 = v70;
      v44.i32[0] = v71;
      v19 = (int16x8_t)vmovl_u8(v44);
      LOBYTE(v20) = v72;
      LOBYTE(v21) = v73;
      LOBYTE(v23) = v74;
      v25 = v75;
      LOBYTE(v24) = v76;
      LODWORD(v26) = v77;
      v27 = v78;
      LODWORD(v28) = v79;
      v29 = v80;
      LODWORD(v30) = v81;
      v32 = v82;
      LOWORD(v31) = v83;
      LOWORD(a3) = v84;
      LOWORD(v7) = v85;
      v34 = v86;
      LOWORD(v16) = v87;
      LOWORD(v33) = v88;
      LOWORD(v35) = v89;
      v42 = v90;
      v37 = v91;
      v36 = v92;
      LOWORD(v38) = v93;
      LOBYTE(v39) = v94;
      v40 = v95;
      LOBYTE(v41) = v96;
    }
    *(_WORD *)a4 = v63;
    *(_WORD *)(a4 + 2) = v56;
    *(_WORD *)(a4 + 4) = v55;
    *(_WORD *)(a4 + 6) = v54;
    *(_WORD *)(a4 + 8) = v62;
    *(_WORD *)(a4 + 10) = v53;
    *(_WORD *)(a4 + 12) = v52;
    *(_WORD *)(a4 + 14) = v51;
    *(_WORD *)(a4 + 16) = v57;
    *(_WORD *)(a4 + 18) = v50;
    *(_WORD *)(a4 + 20) = v49;
    *(_WORD *)(a4 + 22) = v48;
    *(_WORD *)(a4 + 24) = v124;
    *(_WORD *)(a4 + 26) = v47;
    *(_WORD *)(a4 + 28) = v46;
    *(_WORD *)(a4 + 30) = v45;
    *(_BYTE *)(a4 + 32) = v22;
    *(_DWORD *)(a4 + 33) = vmovn_s16(v19).u32[0];
    *(_BYTE *)(a4 + 37) = v20;
    *(_BYTE *)(a4 + 38) = v21;
    *(_BYTE *)(a4 + 39) = v23;
    *(_BYTE *)(a4 + 40) = v25;
    *(_BYTE *)(a4 + 41) = v24;
    *(_DWORD *)(a4 + 44) = v26;
    *(_DWORD *)(a4 + 48) = v27;
    *(_DWORD *)(a4 + 52) = v28;
    *(_DWORD *)(a4 + 56) = v29;
    *(_DWORD *)(a4 + 60) = v30;
    *(_WORD *)(a4 + 64) = v32;
    *(_WORD *)(a4 + 66) = v31;
    *(_WORD *)(a4 + 68) = (_WORD)a3;
    *(_WORD *)(a4 + 70) = v7;
    *(_WORD *)(a4 + 72) = v34;
    *(_WORD *)(a4 + 74) = v16;
    *(_WORD *)(a4 + 76) = v33;
    *(_WORD *)(a4 + 78) = v35;
    *(_QWORD *)(a4 + 80) = v42;
    *(_BYTE *)(a4 + 88) = v37;
    *(_QWORD *)(a4 + 90) = v36;
    *(_WORD *)(a4 + 98) = v38;
    *(_BYTE *)(a4 + 100) = v39;
    *(_DWORD *)(a4 + 102) = v40;
    *(_BYTE *)(a4 + 106) = v41;
  }
}

void sub_1B096E368(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64x2_t v17;
  uint64_t v18;
  int16x8_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64x2_t v40;
  int16x8_t v41;
  uint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63[2];
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  char v69;
  __int32 v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  __int16 v92;
  char v93;
  int v94;
  char v95;
  __int128 v96;
  __int128 v97;
  unint64_t v98;
  _BYTE v99[24];
  __int128 v100;
  unint64_t v101;
  _BYTE v102[18];
  unsigned __int8 v103;
  char v104;
  _OWORD v105[2];
  unint64_t v106;
  __int16 v107;
  __int128 v108;
  int v109;
  __int128 v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  __int16 v114;
  char v115;
  int v116;
  unsigned __int8 v117;
  __int128 v118[6];
  char v119;
  unsigned __int32 v120;
  uint64_t v121;
  __int128 v122;
  unint64_t v123;
  uint64_t v124;

  v7 = a1;
  v9 = *(_OWORD *)(a2 + 48);
  v118[2] = *(_OWORD *)(a2 + 32);
  v118[3] = v9;
  v10 = *(_OWORD *)(a2 + 80);
  v118[4] = *(_OWORD *)(a2 + 64);
  v118[5] = v10;
  v11 = *(_OWORD *)(a2 + 16);
  v118[0] = *(_OWORD *)a2;
  v118[1] = v11;
  v12 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v63 = *(_OWORD *)a1;
  v64 = v12;
  swift_bridgeObjectRetain();
  sub_1B096E9D4((__int128 *)v63, v118, a3, (uint64_t)&v96);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = v64;
    *(_OWORD *)v7 = *(_OWORD *)v63;
    *(_QWORD *)(v7 + 16) = v13;
    v105[0] = v96;
    v105[1] = v97;
    v106 = v98;
    v107 = *(_WORD *)v99;
    v108 = *(_OWORD *)&v99[4];
    v109 = *(_DWORD *)&v99[20];
    v110 = v100;
    v111 = v101;
    v112 = v102[0];
    v113 = *(_QWORD *)&v102[2];
    v114 = *(_WORD *)&v102[10];
    v115 = v102[12];
    v116 = *(_DWORD *)&v102[14];
    v117 = v103;
    (*(void (**)(__int128 *__return_ptr, _OWORD *))(a2 + 96))(&v96, v105);
    v14 = v98;
    v60 = *((_QWORD *)&v100 + 1);
    v15 = v100;
    v61 = *((_QWORD *)&v96 + 1);
    v16 = v101;
    v56 = *(_QWORD *)v102;
    v57 = *(unsigned __int16 *)&v102[16] | (v103 << 16);
    v62 = v96;
    v58 = *((_QWORD *)&v97 + 1);
    v124 = v97;
    v59 = v101;
    if ((v104 & 1) != 0)
    {
      v54 = DWORD1(v96);
      v55 = (unint64_t)v96 >> 16;
      v52 = *((_QWORD *)&v96 + 1) >> 16;
      v53 = WORD3(v96);
      v50 = HIWORD(*((_QWORD *)&v96 + 1));
      v51 = HIDWORD(*((_QWORD *)&v96 + 1));
      v48 = DWORD1(v97);
      v49 = (unint64_t)v97 >> 16;
      v46 = *((_QWORD *)&v97 + 1) >> 16;
      v47 = WORD3(v97);
      v45 = HIDWORD(*((_QWORD *)&v97 + 1));
      v17 = (uint64x2_t)vdupq_n_s64(v98);
      v18 = HIWORD(*((_QWORD *)&v97 + 1));
      v19 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_1B0A3CB60), (int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_1B0A3CB50));
      *(int16x4_t *)v19.i8 = vmovn_s32((int32x4_t)v19);
      v16 = v98 >> 40;
      v20 = HIWORD(v98);
      v21 = v98;
      v22 = HIBYTE(v98);
      v23 = *(_QWORD *)v99 >> 8;
      v24 = v99[0];
      v25 = HIDWORD(*(_QWORD *)v99);
      v26 = *(_DWORD *)&v99[8];
      v27 = HIDWORD(*(_QWORD *)&v99[8]);
      v28 = *(_DWORD *)&v99[16];
      v29 = HIDWORD(*(_QWORD *)&v99[16]);
      v30 = (unint64_t)v100 >> 16;
      a3 = (uint64_t *)DWORD1(v100);
      v31 = v100;
      v7 = WORD3(v100);
      v15 = *((_QWORD *)&v100 + 1) >> 16;
      v32 = HIDWORD(*((_QWORD *)&v100 + 1));
      v33 = HIWORD(*((_QWORD *)&v100 + 1));
      v34 = *(__int128 *)v102 >> 16;
      v35 = v102[0] & 1;
      v36 = *(_QWORD *)&v102[8] >> 16;
      v37 = HIDWORD(*(_QWORD *)&v102[8]) & 1;
      v38 = HIWORD(*(_QWORD *)&v102[8]) | (v57 << 16);
      v39 = HIWORD(v57) & 1;
    }
    else
    {
      v119 = v96 & 1;
      v40 = (uint64x2_t)vdupq_n_s64(v96);
      v41 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v40, (uint64x2_t)xmmword_1B0A3CB60), (int32x4_t)vshlq_u64(v40, (uint64x2_t)xmmword_1B0A3CB50));
      *(int8x8_t *)v41.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v41), (int8x8_t)0x1000100010001);
      v120 = vmovn_s16(v41).u32[0];
      v121 = *((_QWORD *)&v96 + 1);
      v122 = v97;
      v123 = v98;
      v54 = *(_QWORD *)&v99[16];
      v55 = *(_QWORD *)v99;
      v53 = *(_QWORD *)&v99[8];
      v42 = *(_QWORD *)&v102[8];
      v44 = *(_QWORD *)&v102[8];
      swift_retain();
      swift_retain();
      sub_1B08A9674(v7, (uint64_t)a3, (uint64_t)v63);
      sub_1B09774AC(v62, v61, v124, v58, v14, v55, v53, v54, v15, v60, v16, v56, v42, v57, 0);
      sub_1B09774AC(v62, v61, v124, v58, v14, v55, v53, v54, v15, v60, v59, v56, v44, v57, 0);
      LOWORD(v62) = v63[0];
      LOWORD(v55) = WORD1(v63[0]);
      LOWORD(v54) = WORD2(v63[0]);
      LOWORD(v53) = HIWORD(v63[0]);
      LOWORD(v61) = v63[1];
      LOWORD(v52) = WORD1(v63[1]);
      LOWORD(v51) = WORD2(v63[1]);
      LOWORD(v50) = HIWORD(v63[1]);
      v124 = (unsigned __int16)v64;
      LOWORD(v49) = WORD1(v64);
      LOWORD(v48) = WORD2(v64);
      LOWORD(v47) = HIWORD(v64);
      LOWORD(v58) = v65;
      LOWORD(v46) = v66;
      LOWORD(v45) = v67;
      LOWORD(v18) = v68;
      v21 = v69;
      v43.i32[0] = v70;
      v19 = (int16x8_t)vmovl_u8(v43);
      LOBYTE(v16) = v71;
      LOBYTE(v20) = v72;
      LOBYTE(v22) = v73;
      v24 = v74;
      LOBYTE(v23) = v75;
      LODWORD(v25) = v76;
      v26 = v77;
      LODWORD(v27) = v78;
      v28 = v79;
      LODWORD(v29) = v80;
      v31 = v81;
      LOWORD(v30) = v82;
      LOWORD(a3) = v83;
      LOWORD(v7) = v84;
      LOWORD(v60) = v85;
      LOWORD(v15) = v86;
      LOWORD(v32) = v87;
      LOWORD(v33) = v88;
      v59 = v89;
      v35 = v90;
      v34 = v91;
      LOWORD(v36) = v92;
      LOBYTE(v37) = v93;
      v38 = v94;
      LOBYTE(v39) = v95;
    }
    *(_WORD *)a4 = v62;
    *(_WORD *)(a4 + 2) = v55;
    *(_WORD *)(a4 + 4) = v54;
    *(_WORD *)(a4 + 6) = v53;
    *(_WORD *)(a4 + 8) = v61;
    *(_WORD *)(a4 + 10) = v52;
    *(_WORD *)(a4 + 12) = v51;
    *(_WORD *)(a4 + 14) = v50;
    *(_WORD *)(a4 + 16) = v124;
    *(_WORD *)(a4 + 18) = v49;
    *(_WORD *)(a4 + 20) = v48;
    *(_WORD *)(a4 + 22) = v47;
    *(_WORD *)(a4 + 24) = v58;
    *(_WORD *)(a4 + 26) = v46;
    *(_WORD *)(a4 + 28) = v45;
    *(_WORD *)(a4 + 30) = v18;
    *(_BYTE *)(a4 + 32) = v21;
    *(_DWORD *)(a4 + 33) = vmovn_s16(v19).u32[0];
    *(_BYTE *)(a4 + 37) = v16;
    *(_BYTE *)(a4 + 38) = v20;
    *(_BYTE *)(a4 + 39) = v22;
    *(_BYTE *)(a4 + 40) = v24;
    *(_BYTE *)(a4 + 41) = v23;
    *(_DWORD *)(a4 + 44) = v25;
    *(_DWORD *)(a4 + 48) = v26;
    *(_DWORD *)(a4 + 52) = v27;
    *(_DWORD *)(a4 + 56) = v28;
    *(_DWORD *)(a4 + 60) = v29;
    *(_WORD *)(a4 + 64) = v31;
    *(_WORD *)(a4 + 66) = v30;
    *(_WORD *)(a4 + 68) = (_WORD)a3;
    *(_WORD *)(a4 + 70) = v7;
    *(_WORD *)(a4 + 72) = v60;
    *(_WORD *)(a4 + 74) = v15;
    *(_WORD *)(a4 + 76) = v32;
    *(_WORD *)(a4 + 78) = v33;
    *(_QWORD *)(a4 + 80) = v59;
    *(_BYTE *)(a4 + 88) = v35;
    *(_QWORD *)(a4 + 90) = v34;
    *(_WORD *)(a4 + 98) = v36;
    *(_BYTE *)(a4 + 100) = v37;
    *(_DWORD *)(a4 + 102) = v38;
    *(_BYTE *)(a4 + 106) = v39;
  }
}

void sub_1B096E9D4(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64x2_t v15;
  int16x8_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD v61[16];
  char v62;
  __int32 v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  __int16 v77;
  __int16 v78;
  __int16 v79;
  __int16 v80;
  __int16 v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  __int16 v85;
  char v86;
  int v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  __int128 v100;
  unsigned __int16 v101;
  unsigned __int8 v102;
  char v103;
  _BYTE v104[108];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int16 v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;

  v5 = (uint64_t)a3;
  v7 = (uint64_t)a1;
  v9 = a2[3];
  v107 = a2[2];
  v108 = v9;
  v109 = a2[4];
  v10 = a2[1];
  v105 = *a2;
  v106 = v10;
  sub_1B08A9A8C(a1, a3, (uint64_t)v104);
  if (!v4)
  {
    (*((void (**)(unint64_t *__return_ptr, _BYTE *))a2 + 10))(&v89, v104);
    v11 = v91;
    v13 = v97;
    v12 = v98;
    v58 = v99;
    v59 = v90;
    v14 = *((_QWORD *)&v100 + 1);
    v56 = v100;
    v57 = v101 | (v102 << 16);
    v60 = v89;
    v115 = v92;
    if ((v103 & 1) != 0)
    {
      v52 = HIDWORD(v89);
      v53 = v89 >> 16;
      v50 = v90 >> 16;
      v51 = HIWORD(v89);
      v48 = HIWORD(v90);
      v49 = HIDWORD(v90);
      v46 = HIDWORD(v91);
      v47 = v91 >> 16;
      v54 = v91;
      v44 = v92 >> 16;
      v45 = HIWORD(v91);
      v15 = (uint64x2_t)vdupq_n_s64(v93);
      v42 = HIWORD(v92);
      v43 = HIDWORD(v92);
      v16 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_1B0A3CB60), (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_1B0A3CB50));
      *(int16x4_t *)v16.i8 = vmovn_s32((int32x4_t)v16);
      v17 = v93 >> 40;
      v18 = HIWORD(v93);
      v19 = v93;
      v20 = HIBYTE(v93);
      v21 = v94 >> 8;
      v22 = v94;
      v23 = HIDWORD(v94);
      v24 = v95;
      v25 = HIDWORD(v95);
      v26 = v96;
      v27 = HIDWORD(v96);
      v28 = v97 >> 16;
      v5 = HIDWORD(v97);
      v29 = v97;
      v7 = HIWORD(v97);
      v13 = v98 >> 16;
      v30 = HIDWORD(v98);
      v31 = v98;
      v32 = HIWORD(v98);
      v33 = v100 >> 16;
      v34 = v100 & 1;
      v35 = *((_QWORD *)&v100 + 1) >> 16;
      v36 = HIDWORD(*((_QWORD *)&v100 + 1)) & 1;
      v37 = HIWORD(*((_QWORD *)&v100 + 1)) | (v57 << 16);
      v38 = HIWORD(v57) & 1;
      v39 = v99;
    }
    else
    {
      v110 = v89 & 0x101;
      v111 = v90;
      v112 = v91;
      v113 = v92;
      v114 = v93;
      v40 = v93;
      v52 = v94;
      v53 = v95;
      v55 = v96;
      swift_retain();
      swift_retain();
      sub_1B08A98B4(v7, v5, (uint64_t)v61);
      swift_release();
      swift_release();
      sub_1B09774AC(v60, v59, v11, v115, v40, v52, v53, v55, v13, v12, v58, v56, v14, v57, 0);
      LOWORD(v60) = v61[0];
      LOWORD(v53) = v61[1];
      LOWORD(v52) = v61[2];
      LOWORD(v51) = v61[3];
      LOWORD(v59) = v61[4];
      LOWORD(v50) = v61[5];
      LOWORD(v49) = v61[6];
      LOWORD(v48) = v61[7];
      v54 = v61[8];
      LOWORD(v47) = v61[9];
      LOWORD(v46) = v61[10];
      LOWORD(v45) = v61[11];
      v115 = v61[12];
      LOWORD(v44) = v61[13];
      LOWORD(v43) = v61[14];
      LOWORD(v42) = v61[15];
      v19 = v62;
      v41.i32[0] = v63;
      v16 = (int16x8_t)vmovl_u8(v41);
      LOBYTE(v17) = v64;
      LOBYTE(v18) = v65;
      LOBYTE(v20) = v66;
      v22 = v67;
      LOBYTE(v21) = v68;
      LODWORD(v23) = v69;
      v24 = v70;
      LODWORD(v25) = v71;
      v26 = v72;
      LODWORD(v27) = v73;
      v29 = v74;
      LOWORD(v28) = v75;
      LOWORD(v5) = v76;
      LOWORD(v7) = v77;
      v31 = v78;
      LOWORD(v13) = v79;
      LOWORD(v30) = v80;
      LOWORD(v32) = v81;
      v39 = v82;
      v34 = v83;
      v33 = v84;
      LOWORD(v35) = v85;
      LOBYTE(v36) = v86;
      v37 = v87;
      LOBYTE(v38) = v88;
    }
    *(_WORD *)a4 = v60;
    *(_WORD *)(a4 + 2) = v53;
    *(_WORD *)(a4 + 4) = v52;
    *(_WORD *)(a4 + 6) = v51;
    *(_WORD *)(a4 + 8) = v59;
    *(_WORD *)(a4 + 10) = v50;
    *(_WORD *)(a4 + 12) = v49;
    *(_WORD *)(a4 + 14) = v48;
    *(_WORD *)(a4 + 16) = v54;
    *(_WORD *)(a4 + 18) = v47;
    *(_WORD *)(a4 + 20) = v46;
    *(_WORD *)(a4 + 22) = v45;
    *(_WORD *)(a4 + 24) = v115;
    *(_WORD *)(a4 + 26) = v44;
    *(_WORD *)(a4 + 28) = v43;
    *(_WORD *)(a4 + 30) = v42;
    *(_BYTE *)(a4 + 32) = v19;
    *(_DWORD *)(a4 + 33) = vmovn_s16(v16).u32[0];
    *(_BYTE *)(a4 + 37) = v17;
    *(_BYTE *)(a4 + 38) = v18;
    *(_BYTE *)(a4 + 39) = v20;
    *(_BYTE *)(a4 + 40) = v22;
    *(_BYTE *)(a4 + 41) = v21;
    *(_DWORD *)(a4 + 44) = v23;
    *(_DWORD *)(a4 + 48) = v24;
    *(_DWORD *)(a4 + 52) = v25;
    *(_DWORD *)(a4 + 56) = v26;
    *(_DWORD *)(a4 + 60) = v27;
    *(_WORD *)(a4 + 64) = v29;
    *(_WORD *)(a4 + 66) = v28;
    *(_WORD *)(a4 + 68) = v5;
    *(_WORD *)(a4 + 70) = v7;
    *(_WORD *)(a4 + 72) = v31;
    *(_WORD *)(a4 + 74) = v13;
    *(_WORD *)(a4 + 76) = v30;
    *(_WORD *)(a4 + 78) = v32;
    *(_QWORD *)(a4 + 80) = v39;
    *(_BYTE *)(a4 + 88) = v34;
    *(_QWORD *)(a4 + 90) = v33;
    *(_WORD *)(a4 + 98) = v35;
    *(_BYTE *)(a4 + 100) = v36;
    *(_DWORD *)(a4 + 102) = v37;
    *(_BYTE *)(a4 + 106) = v38;
  }
}

void sub_1B096EF30(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  char v27;
  char v28;
  uint64x2_t v29;
  int16x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43[14];
  char v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  char v59;
  char v60;
  _BYTE v61[120];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  unsigned __int32 v71;
  __int16 v72;
  char v73;
  int v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;

  v9 = a2[5];
  v66 = a2[4];
  v67 = v9;
  v10 = a2[7];
  v68 = a2[6];
  v69 = v10;
  v11 = a2[1];
  v62 = *a2;
  v63 = v11;
  v12 = a2[3];
  v64 = a2[2];
  v65 = v12;
  sub_1B08AA768(a1, a3, (uint64_t)v61);
  if (!v4)
  {
    (*((void (**)(unint64_t *__return_ptr, _BYTE *))a2 + 16))(&v45, v61);
    v14 = (id)v46;
    v13 = v45;
    v16 = v47;
    v15 = v48;
    v17 = v49;
    v18 = v50;
    v19 = v51;
    v20 = v52;
    v21 = (id)v53;
    v22 = v54;
    v23 = v55;
    v24 = v56;
    v25 = v57;
    v26 = v58;
    v27 = v59;
    if ((v60 & 1) != 0)
    {
      v28 = v59 & 1;
    }
    else
    {
      v70 = v45 & 1;
      v29 = (uint64x2_t)vdupq_n_s64(v45);
      v30 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v29, (uint64x2_t)xmmword_1B0A3CB60), (int32x4_t)vshlq_u64(v29, (uint64x2_t)xmmword_1B0A3CB50));
      *(int8x8_t *)v30.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v30), (int8x8_t)0x1000100010001);
      v71 = vmovn_s16(v30).u32[0];
      v72 = *(_WORD *)((_BYTE *)&v45 + 5) & 0x101;
      v73 = HIBYTE(v45) & 1;
      v74 = v46 & 0x1010101;
      v75 = v47;
      v76 = v48;
      v77 = v49;
      v78 = v50;
      v41 = (uint64_t)v47;
      v34 = (uint64_t)v50;
      v35 = (uint64_t)v48;
      v42 = (uint64_t)v49;
      v36 = (uint64_t)v51;
      v37 = (uint64_t)v52;
      v79 = v53;
      v39 = v45;
      v40 = (uint64_t)v54;
      v38 = (uint64_t)v55;
      v32 = (uint64_t)v56;
      v33 = v46;
      v31 = (uint64_t)v58;
      swift_retain();
      swift_retain();
      sub_1B08AA37C(a1, a3, (uint64_t)v43);
      sub_1B097739C(v39, v33, v41, v35, v42, v34, v36, v37, v79, v40, v38, (uint64_t)v24, (uint64_t)v25, (uint64_t)v26, v27, 0);
      sub_1B097739C(v39, v33, v41, v35, v42, v34, v36, v37, v79, v40, v38, v32, (uint64_t)v25, v31, v27, 0);
      v13 = (int)v43[0];
      v14 = v43[1];
      v16 = v43[2];
      v15 = v43[3];
      v17 = v43[4];
      v18 = v43[5];
      v19 = v43[6];
      v20 = v43[7];
      v21 = v43[8];
      v22 = v43[9];
      v23 = v43[10];
      v24 = v43[11];
      v25 = v43[12];
      v26 = v43[13];
      v28 = v44;
    }
    *(_DWORD *)a4 = v13;
    *(_QWORD *)(a4 + 8) = v14;
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 24) = v15;
    *(_QWORD *)(a4 + 32) = v17;
    *(_QWORD *)(a4 + 40) = v18;
    *(_QWORD *)(a4 + 48) = v19;
    *(_QWORD *)(a4 + 56) = v20;
    *(_QWORD *)(a4 + 64) = v21;
    *(_QWORD *)(a4 + 72) = v22;
    *(_QWORD *)(a4 + 80) = v23;
    *(_QWORD *)(a4 + 88) = v24;
    *(_QWORD *)(a4 + 96) = v25;
    *(_QWORD *)(a4 + 104) = v26;
    *(_BYTE *)(a4 + 112) = v28;
  }
}

void sub_1B096F2C8(uint64_t a1@<X0>, __int16 a2@<W1>, void (*a3)(unsigned __int16 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _WORD *a6@<X8>)
{
  uint64_t v6;
  char v9;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  _WORD *v31;

  *(_QWORD *)&v24 = a4;
  v9 = HIBYTE(a2);
  v12 = a2 & 1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC700);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  v25 = *(_OWORD *)a1;
  *(_QWORD *)&v26 = v16;
  swift_bridgeObjectRetain();
  v17 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v25, a5, v12);
  if (v6)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = v17;
    *(_QWORD *)&v23 = v15;
    v31 = a6;
    v27 = v25;
    v28 = v26;
    swift_bridgeObjectRetain();
    v19 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v27, a5, v9 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v28;
    *(_OWORD *)a1 = v27;
    *(_QWORD *)(a1 + 16) = v20;
    v29 = v18;
    v30 = v19;
    v21 = v23;
    a3(&v29);
    v22 = v31;
    *v22 = sub_1B0974E90(v31 + 1, v31 + 2, (uint64_t)(v31 + 4), (uint64_t)(v31 + 16), (uint64_t)(v31 + 28), (uint64_t)(v31 + 40), (uint64_t)(v31 + 52), a1, a5);
    sub_1B08AE3C4(v21, &qword_1EEEBC700);
  }
}

void sub_1B096F5AC(uint64_t *a1, char a2, void (*a3)(__int128 *__return_ptr, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v10 = a1[2];
  v14 = *(_OWORD *)a1;
  *(_QWORD *)&v15 = v10;
  swift_bridgeObjectRetain();
  v11 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v14, a5, a2);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = v15;
    *(_OWORD *)a1 = v14;
    a1[2] = v13;
    v16 = v12;
    a3(&v14, &v16);
    sub_1B091D32C(a1, a5, v14);
  }
}

void sub_1B096F788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  _QWORD *(*v8)(uint64_t *__return_ptr, unsigned __int16 *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(__int128 *__return_ptr, uint64_t *);
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v7 = *(_BYTE *)a2;
  v8 = *(_QWORD *(**)(uint64_t *__return_ptr, unsigned __int16 *))(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  v16 = *(_OWORD *)a1;
  *(_QWORD *)&v17 = v10;
  swift_bridgeObjectRetain();
  sub_1B08BDF00(&v16, v7, v8, v9, a3);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = *(void (**)(__int128 *__return_ptr, uint64_t *))(a2 + 24);
    v14 = v16;
    v15 = v17;
    *(_OWORD *)a1 = v16;
    *(_QWORD *)(a1 + 16) = v15;
    v18 = v12;
    v13(&v16, &v18);
    *(_OWORD *)a1 = v14;
    *(_QWORD *)(a1 + 16) = v15;
  }
}

uint64_t sub_1B096F96C(uint64_t a1, char a2, void (*a3)(__int128 *__return_ptr, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v11 = *(_QWORD *)(a1 + 16);
  v16 = *(_OWORD *)a1;
  *(_QWORD *)&v17 = v11;
  swift_bridgeObjectRetain();
  v12 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v16, a5, a2);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v12;
    swift_bridgeObjectRelease();
    v14 = v17;
    *(_OWORD *)a1 = v16;
    *(_QWORD *)(a1 + 16) = v14;
    v21 = v13;
    a3(&v16, &v21);
    v19[0] = v16;
    v19[1] = v17;
    v20 = v18;
    a4 = sub_1B096B1BC((__int128 *)a1, a5);
    sub_1B092CDD4((uint64_t)v19);
  }
  return a4;
}

void sub_1B096FB68(uint64_t *a1@<X0>, char a2@<W1>, void (*a3)(unsigned __int16 *)@<X2>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  __int128 v15;
  unsigned __int16 v16;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA900);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (unsigned __int16)sub_1B08C15A4(a1, a4, a2);
  if (!v5)
  {
    v16 = v14;
    a3(&v16);
    sub_1B08BB368((uint64_t)a1, a4, a5);
    sub_1B08AE3C4((uint64_t)v13, &qword_1EEEBA900);
  }
}

void sub_1B096FD58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(__int128 *__return_ptr, _QWORD *);
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  id v40[2];
  uint64_t v41;
  _QWORD v42[3];
  _OWORD *v43;

  v9 = *(_BYTE *)(a2 + 8);
  v10 = *(_BYTE *)(a2 + 9);
  v35 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(a2 + 16);
  v33 = *(_QWORD *)(a2 + 24);
  v11 = *(_DWORD *)a2 & 1;
  v12 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v40 = *(_OWORD *)a1;
  v41 = v12;
  swift_bridgeObjectRetain_n();
  v13 = (unsigned __int16)sub_1B08C15A4((uint64_t *)v40, a3, v11);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = v13;
    v32 = a4;
    v43 = (_OWORD *)a1;
    swift_bridgeObjectRelease();
    v37 = *(_OWORD *)v40;
    v38 = v41;
    v15 = sub_1B08AAC6C(&v37, a3, v9 & 1 | ((v10 & 1u) << 8), v35, v33);
    v17 = v16;
    swift_bridgeObjectRelease();
    v18 = *(void (**)(__int128 *__return_ptr, _QWORD *))(a2 + 32);
    v19 = v14;
    v20 = v37;
    v21 = v38;
    v22 = v43;
    *v43 = v37;
    *((_QWORD *)v22 + 2) = v21;
    v42[0] = v19;
    v42[1] = v15;
    v42[2] = v17;
    v18(&v37, v42);
    v36 = v37;
    v23 = v38;
    v34 = *((_QWORD *)&v37 + 1);
    v24 = v39;
    *(_OWORD *)v40 = v20;
    v41 = v21;
    swift_bridgeObjectRetain();
    v25 = sub_1B0975248((uint64_t *)v40, a3, v24);
    v27 = v26;
    v29 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v30 = v41;
    v31 = v43;
    *v43 = *(_OWORD *)v40;
    *((_QWORD *)v31 + 2) = v30;
    *v32 = v36;
    v32[1] = v34;
    v32[2] = v23;
    v32[3] = v25;
    v32[4] = v27;
    v32[5] = v29;
  }
}

void sub_1B097004C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(__int128 *__return_ptr, _QWORD *);
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[2];

  if (a2[1])
    v9 = 256;
  else
    v9 = 0;
  v10 = sub_1B08AAC6C((__int128 *)a1, a3, v9 | *a2, *((void (**)(uint64_t *__return_ptr, _QWORD *))a2 + 1), *((_QWORD *)a2 + 2));
  if (!v4)
  {
    v12 = (void (*)(__int128 *__return_ptr, _QWORD *))*((_QWORD *)a2 + 3);
    v26[0] = v10;
    v26[1] = v11;
    v12(&v24, v26);
    v13 = v24;
    v14 = v25;
    v15 = *(_QWORD *)(a1 + 16);
    *(_OWORD *)v22 = *(_OWORD *)a1;
    v23 = v15;
    swift_bridgeObjectRetain();
    v16 = sub_1B0975248((uint64_t *)v22, a3, v14);
    v18 = v17;
    v20 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v21 = v23;
    *(_OWORD *)a1 = *(_OWORD *)v22;
    *(_QWORD *)(a1 + 16) = v21;
    *(_OWORD *)a4 = v13;
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 24) = v18;
    *(_QWORD *)(a4 + 32) = v20;
  }
}

void sub_1B0970264(__int128 *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)&v26 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC6F8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *((_QWORD *)a1 + 2);
  v27 = *a1;
  v28 = v13;
  swift_bridgeObjectRetain();
  v14 = sub_1B08C1578((uint64_t *)&v27, a5, a2);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = v14;
    v23 = v9;
    v24 = a5;
    *(_QWORD *)&v25 = v10;
    swift_bridgeObjectRelease();
    v16 = v28;
    *a1 = v27;
    *((_QWORD *)a1 + 2) = v16;
    v32 = v15;
    ((void (*)(uint64_t *))v26)(&v32);
    v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEBC260);
    v18 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEBC268);
    v19 = sub_1B08CE2D8(&qword_1EEEBC270, &qword_1EEEBC260, MEMORY[0x1E0D65BE8]);
    v20 = sub_1B08CE2D8(qword_1EEEBC278, &qword_1EEEBC268, MEMORY[0x1E0D65C60]);
    *(_QWORD *)&v27 = v17;
    *((_QWORD *)&v27 + 1) = MEMORY[0x1E0D65B50];
    v28 = v18;
    v29 = v19;
    v30 = v20;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v22 = v23;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t))(OpaqueTypeConformance2 + 24))(&v31, a1, v24, v23, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v22);
  }
}

uint64_t sub_1B097054C(__int128 *a1, char a2, void (*a3)(__int128 *__return_ptr, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;
  id v19[2];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v10 = *((_QWORD *)a1 + 2);
  v21 = *a1;
  *(_QWORD *)&v22 = v10;
  swift_bridgeObjectRetain();
  v11 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v21, a5, a2);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = v21;
    v14 = v22;
    *a1 = v21;
    *((_QWORD *)a1 + 2) = v14;
    v23 = v12;
    a3(&v21, &v23);
    v15 = v21;
    v16 = v22;
    *(_OWORD *)v19 = v13;
    v20 = v14;
    swift_bridgeObjectRetain();
    a5 = sub_1B08CD8A4((uint64_t)v19, (void (*)(_QWORD *__return_ptr, _QWORD))v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), a5);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v18 = v20;
    *a1 = *(_OWORD *)v19;
    *((_QWORD *)a1 + 2) = v18;
  }
  return a5;
}

void (*sub_1B09707A4(uint64_t a1, int a2, void (*a3)(_BYTE *__return_ptr, _QWORD *), uint64_t a4, uint64_t a5))(_BYTE *__return_ptr, _QWORD *)
{
  uint64_t v5;
  char v8;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *__return_ptr, _QWORD *);
  _BYTE v24[24];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  id v30[2];
  uint64_t v31;
  _QWORD v32[4];
  _OWORD v33[7];
  _QWORD *v34;

  v8 = HIBYTE(a2);
  v10 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v24 = *(_OWORD *)a1;
  *(_QWORD *)&v24[16] = v10;
  v11 = a2 & 0x10101;
  swift_bridgeObjectRetain();
  v12 = sub_1B0973864(v24, a5, v11);
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = v13;
    v16 = v14;
    v34 = v12;
    v23 = a3;
    *(_OWORD *)v30 = *(_OWORD *)v24;
    v31 = *(_QWORD *)&v24[16];
    swift_bridgeObjectRetain();
    v18 = sub_1B08C1578((uint64_t *)v30, a5, v8 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v30[0];
    v20 = v30[1];
    v21 = v31;
    *(id *)a1 = v30[0];
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 16) = v21;
    v32[0] = v34;
    v32[1] = v15;
    v32[2] = v16;
    v32[3] = v18;
    v23(v24, v32);
    a3 = *(void (**)(_BYTE *__return_ptr, _QWORD *))v24;
    v33[2] = v26;
    v33[3] = v27;
    v33[4] = v28;
    v33[5] = v29;
    v33[0] = *(_OWORD *)&v24[8];
    v33[1] = v25;
    v30[0] = v19;
    v30[1] = v20;
    v31 = v21;
    swift_bridgeObjectRetain_n();
    sub_1B08C04B4(v30, (uint64_t)v33, a5);
    swift_bridgeObjectRelease_n();
    sub_1B0977250((uint64_t)v33);
    v22 = v31;
    *(_OWORD *)a1 = *(_OWORD *)v30;
    *(_QWORD *)(a1 + 16) = v22;
  }
  return a3;
}

void sub_1B0970AA0(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(__int128 *__return_ptr, int *);
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  id v27[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[6];
  char v39;

  v9 = *(_OWORD *)(a2 + 16);
  v38[0] = *(_OWORD *)a2;
  v38[1] = v9;
  v38[2] = *(_OWORD *)(a2 + 32);
  v10 = *((_QWORD *)a1 + 2);
  v29 = *a1;
  v30 = v10;
  swift_bridgeObjectRetain();
  v11 = sub_1B08BF720((uint64_t)&v29, (uint64_t)v38, a3);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = v11;
    v15 = v12;
    v16 = v13;
    swift_bridgeObjectRelease();
    v17 = *(void (**)(__int128 *__return_ptr, int *))(a2 + 48);
    v18 = v29;
    v19 = v30;
    *a1 = v29;
    v25 = v19;
    *((_QWORD *)a1 + 2) = v19;
    v35 = v14;
    v36 = v15;
    v37 = v16;
    v17(&v29, &v35);
    v20 = v29;
    v21 = *((_QWORD *)&v29 + 1);
    v22 = v30;
    v38[3] = v31;
    v38[4] = v32;
    v38[5] = v33;
    v39 = v34;
    *(_OWORD *)v27 = v18;
    v28 = v25;
    swift_bridgeObjectRetain();
    sub_1B08A1CF8((__int128 *)v27, &v26);
    swift_bridgeObjectRelease();
    v23 = v26;
    v24 = v28;
    *a1 = *(_OWORD *)v27;
    *((_QWORD *)a1 + 2) = v24;
    *(_OWORD *)(a4 + 24) = v23;
    *(_DWORD *)a4 = v20;
    *(_QWORD *)(a4 + 8) = v21;
    *(_QWORD *)(a4 + 16) = v22;
  }
}

uint64_t *sub_1B0970D14(__int128 *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v9 = *((_QWORD *)a1 + 2);
  v10 = (uint64_t *)(a3 & 1);
  v19 = *a1;
  v20 = v9;
  swift_bridgeObjectRetain();
  v11 = sub_1B08C75E0((uint64_t *)&v19, a4, a2, (char)v10);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v11;
    v17 = v19;
    v18 = v20;
    swift_bridgeObjectRetain();
    sub_1B08C1578((uint64_t *)&v17, a4, BYTE1(a3) & 1);
    v13 = HIWORD(a3) & 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v17;
    v15 = v18;
    *a1 = v17;
    *((_QWORD *)a1 + 2) = v15;
    v19 = v14;
    v20 = v15;
    swift_bridgeObjectRetain();
    sub_1B08C1578((uint64_t *)&v19, a4, v13);
    swift_bridgeObjectRelease();
    v16 = v20;
    *a1 = v19;
    *((_QWORD *)a1 + 2) = v16;
  }
  return v10;
}

uint64_t sub_1B0970E7C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t (*v16)(uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t *);
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v9 = a2[11];
  v49 = a2[10];
  v50 = v9;
  v51 = *((_QWORD *)a2 + 24);
  v10 = a2[7];
  v45 = a2[6];
  v46 = v10;
  v11 = a2[9];
  v47 = a2[8];
  v48 = v11;
  v12 = a2[3];
  v41 = a2[2];
  v42 = v12;
  v13 = a2[5];
  v43 = a2[4];
  v44 = v13;
  v14 = a2[1];
  v39 = *a2;
  v40 = v14;
  v15 = *((_BYTE *)a2 + 200);
  v16 = (uint64_t (*)(uint64_t *))*((_QWORD *)a2 + 26);
  v17 = *((_QWORD *)a2 + 27);
  v18 = *(_QWORD *)(a1 + 16);
  v37 = *(_OWORD *)a1;
  v38 = v18;
  swift_bridgeObjectRetain();
  v19 = sub_1B0972A58((uint64_t)&v37, a3);
  if (v4)
    return swift_bridgeObjectRelease();
  v32 = v22;
  v33 = v21;
  v34 = v20;
  v52 = v19;
  v35 = v37;
  v36 = v38;
  swift_bridgeObjectRetain();
  v23 = sub_1B08C87D4(&v35, v15 & 1, v16, v17, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = v35;
  v25 = v36;
  *(_OWORD *)a1 = v35;
  *(_QWORD *)(a1 + 16) = v25;
  v26 = *((unsigned __int8 *)a2 + 224);
  v28 = (uint64_t (*)(uint64_t *))*((_QWORD *)a2 + 29);
  v27 = *((_QWORD *)a2 + 30);
  v37 = v24;
  v38 = v25;
  swift_bridgeObjectRetain();
  v29 = sub_1B08C87D4(&v37, v26, v28, v27, a3);
  result = swift_bridgeObjectRelease();
  v31 = v38;
  *(_OWORD *)a1 = v37;
  *(_QWORD *)(a1 + 16) = v31;
  *a4 = v52;
  a4[1] = v34;
  a4[2] = v33;
  a4[3] = v32;
  a4[4] = v23;
  a4[5] = v29;
  return result;
}

_OWORD *sub_1B0971048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *);
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t *);
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[3];
  uint64_t v26;

  v7 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v7;
  v25[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 48);
  v10 = *(uint64_t (**)(uint64_t *))(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 16);
  v23 = *(_OWORD *)a1;
  v24 = v11;
  swift_bridgeObjectRetain();
  v12 = v25;
  v13 = sub_1B08C1AC4((uint64_t *)&v21, &v23, a3);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = (_OWORD *)v13;
    v26 = v21;
    v21 = v23;
    v22 = v24;
    swift_bridgeObjectRetain();
    sub_1B08C8974(&v21, v8 & 1, v10, v9, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v21;
    v16 = v22;
    *(_OWORD *)a1 = v21;
    *(_QWORD *)(a1 + 16) = v16;
    v17 = *(unsigned __int8 *)(a2 + 72);
    v18 = *(uint64_t (**)(uint64_t *))(a2 + 80);
    v19 = *(_QWORD *)(a2 + 88);
    v23 = v15;
    v24 = v16;
    swift_bridgeObjectRetain();
    sub_1B08C8974(&v23, v17, v18, v19, a3);
    swift_bridgeObjectRelease();
    v20 = v24;
    *(_OWORD *)a1 = v23;
    *(_QWORD *)(a1 + 16) = v20;
  }
  return v12;
}

unint64_t sub_1B09711E0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v7 = a1[2];
  v8 = HIDWORD(a2) & 1;
  v14 = *(_OWORD *)a1;
  v15 = v7;
  swift_bridgeObjectRetain_n();
  v9 = sub_1B08C15D0((uint64_t *)&v14, a3, v8);
  if (v3)
  {
    v10 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v9;
    swift_bridgeObjectRelease_n();
    v16 = v14;
    v17 = v15;
    sub_1B08C16FC((uint64_t *)&v16, a3, BYTE5(a2) & 1);
    swift_bridgeObjectRelease();
    v13 = v17;
    *(_OWORD *)a1 = v16;
    a1[2] = v13;
    sub_1B08C16FC(a1, a3, BYTE6(a2) & 1);
    return a2 | ((unint64_t)v11 << 32);
  }
  return v10;
}

uint64_t sub_1B0971318@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v11 = *((_QWORD *)a1 + 2);
  v39 = *a1;
  v40 = v11;
  v12 = a2 & 0x101010101010101;
  v13 = a3 & 0x101010101010101;
  swift_bridgeObjectRetain();
  sub_1B09739D8((uint64_t *)&v39, v12, v13, a5, (uint64_t)&v29);
  if (v6)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v39;
  v15 = v40;
  *a1 = v39;
  *((_QWORD *)a1 + 2) = v15;
  v16 = v29;
  v17 = *((_QWORD *)&v29 + 1);
  v18 = v30;
  v41 = v31;
  v27 = v33;
  v28 = v32;
  v25 = v35;
  v26 = v34;
  v23 = v37;
  v24 = v36;
  v22 = v38;
  v29 = v14;
  v30 = v15;
  swift_bridgeObjectRetain();
  v19 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v29, a5, a4 & 1);
  result = swift_bridgeObjectRelease();
  v21 = v30;
  *a1 = v29;
  *((_QWORD *)a1 + 2) = v21;
  *(_DWORD *)a6 = v16;
  *(_QWORD *)(a6 + 8) = v17;
  *(_QWORD *)(a6 + 16) = v18;
  *(_QWORD *)(a6 + 24) = v41;
  *(_QWORD *)(a6 + 32) = v28;
  *(_QWORD *)(a6 + 40) = v27;
  *(_QWORD *)(a6 + 48) = v26;
  *(_QWORD *)(a6 + 56) = v25;
  *(_QWORD *)(a6 + 64) = v24;
  *(_QWORD *)(a6 + 72) = v23;
  *(_QWORD *)(a6 + 80) = v22;
  *(_QWORD *)(a6 + 88) = v19;
  return result;
}

uint64_t sub_1B097149C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(__int16 *);
  unsigned __int16 v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[4];
  uint64_t v33;
  uint64_t v34;

  v9 = *(_OWORD *)(a2 + 48);
  v32[2] = *(_OWORD *)(a2 + 32);
  v32[3] = v9;
  v33 = *(_QWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v10;
  v11 = *((_QWORD *)a1 + 2);
  v30 = *a1;
  v31 = v11;
  swift_bridgeObjectRetain();
  sub_1B0971610(&v30, (uint64_t)v32, a3, (uint64_t)&v25);
  if (v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v30;
  v13 = v31;
  *a1 = v30;
  *((_QWORD *)a1 + 2) = v13;
  v14 = v25;
  v15 = v26;
  v16 = WORD1(v26);
  v34 = v27;
  v23 = v28;
  v24 = v29;
  v17 = *(unsigned __int8 *)(a2 + 72);
  v19 = *(uint64_t (**)(__int16 *))(a2 + 80);
  v18 = *(_QWORD *)(a2 + 88);
  v25 = v12;
  v26 = v13;
  swift_bridgeObjectRetain();
  v20 = (unsigned __int16)sub_1B08C8B14((uint64_t *)&v25, v17, v19, v18, (uint64_t)a3);
  result = swift_bridgeObjectRelease();
  v22 = v26;
  *a1 = v25;
  *((_QWORD *)a1 + 2) = v22;
  *(_OWORD *)a4 = v14;
  *(_WORD *)(a4 + 16) = v15;
  *(_WORD *)(a4 + 18) = v16;
  *(_QWORD *)(a4 + 24) = v34;
  *(_QWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 40) = v24;
  *(_WORD *)(a4 + 56) = v20;
  return result;
}

uint64_t sub_1B0971610@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(__int16 *);
  unsigned __int16 v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  _OWORD v46[3];

  v9 = *(_OWORD *)(a2 + 16);
  v45 = *(_OWORD *)a2;
  v46[0] = v9;
  *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)(a2 + 25);
  v10 = *(_BYTE *)(a2 + 41);
  v11 = *(_BYTE *)(a2 + 42);
  v12 = a1[1];
  v13 = a1[2];
  *(_QWORD *)&v43 = *a1;
  *((_QWORD *)&v43 + 1) = v12;
  v44 = v13;
  *(_QWORD *)&v39 = v43;
  *((_QWORD *)&v39 + 1) = v12;
  v40 = v13;
  swift_bridgeObjectRetain_n();
  sub_1B0971854(&v39, &v45, a3, (uint64_t)&v33);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v29 = a4;
    swift_bridgeObjectRelease();
    v14 = v10 & 1;
    v41 = v39;
    v42 = v40;
    v32 = v33;
    v30 = v34;
    v31 = WORD1(v34);
    v15 = v35;
    v16 = v36;
    v17 = v37;
    v18 = v38;
    v27 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v41, (uint64_t)a3, v14);
    v28 = v15;
    swift_bridgeObjectRelease();
    v43 = v41;
    v44 = v42;
    LOWORD(v15) = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v43, (uint64_t)a3, v11 & 1);
    swift_bridgeObjectRelease();
    v20 = v43;
    v21 = v44;
    *(_OWORD *)a1 = v43;
    a1[2] = v21;
    v22 = *(unsigned __int8 *)(a2 + 48);
    v24 = *(uint64_t (**)(__int16 *))(a2 + 56);
    v23 = *(_QWORD *)(a2 + 64);
    v33 = v20;
    v34 = v21;
    swift_bridgeObjectRetain();
    v25 = (unsigned __int16)sub_1B08C8B48(&v33, v22, v24, v23, (uint64_t)a3);
    result = swift_bridgeObjectRelease();
    v26 = v34;
    *(_OWORD *)a1 = v33;
    a1[2] = v26;
    *(_OWORD *)v29 = v32;
    *(_WORD *)(v29 + 16) = v30;
    *(_WORD *)(v29 + 18) = v31;
    *(_QWORD *)(v29 + 24) = v28;
    *(_QWORD *)(v29 + 32) = v16;
    *(_QWORD *)(v29 + 40) = v17;
    *(_WORD *)(v29 + 48) = v18;
    *(_WORD *)(v29 + 50) = v27;
    *(_WORD *)(v29 + 52) = v15;
    *(_WORD *)(v29 + 54) = v25;
  }
  return result;
}

uint64_t sub_1B0971854@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  __int16 v15;
  unsigned __int16 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[2];
  unsigned int v38;
  int v39;

  v9 = a2[1];
  v36 = *a2;
  v37[0] = v9;
  *(_QWORD *)((char *)v37 + 14) = *(_QWORD *)((char *)a2 + 30);
  v10 = *((_BYTE *)a2 + 38);
  v11 = *((_BYTE *)a2 + 39);
  v12 = *((_QWORD *)a1 + 2);
  v32 = *a1;
  v33 = v12;
  swift_bridgeObjectRetain_n();
  v13 = (unsigned __int16)sub_1B08C2C04((uint64_t *)&v27, &v32, a3);
  if (v4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v14 = v13;
    v38 = sub_1B08C16FC((uint64_t *)&v32, (uint64_t)a3, v10 & 1);
    swift_bridgeObjectRelease();
    v26 = v27;
    v39 = (unsigned __int16)v28;
    v25 = WORD1(v28);
    v23 = v30;
    v24 = v29;
    v15 = v31;
    v34 = v32;
    v35 = v33;
    v16 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v34, (uint64_t)a3, v11 & 1);
    swift_bridgeObjectRelease();
    v17 = v34;
    v18 = v35;
    *a1 = v34;
    *((_QWORD *)a1 + 2) = v18;
    v19 = *((_BYTE *)a2 + 40) & 1;
    v27 = v17;
    v28 = v18;
    swift_bridgeObjectRetain();
    v20 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v27, (uint64_t)a3, v19);
    result = swift_bridgeObjectRelease();
    v22 = v28;
    *a1 = v27;
    *((_QWORD *)a1 + 2) = v22;
    *(_OWORD *)a4 = v26;
    *(_WORD *)(a4 + 16) = v39;
    *(_WORD *)(a4 + 18) = v25;
    *(_QWORD *)(a4 + 24) = v24;
    *(_QWORD *)(a4 + 32) = v23;
    *(_WORD *)(a4 + 40) = v15;
    *(_WORD *)(a4 + 42) = v14;
    *(_WORD *)(a4 + 44) = v38;
    *(_WORD *)(a4 + 46) = v16;
    *(_WORD *)(a4 + 48) = v20;
  }
  return result;
}

_QWORD *sub_1B0971A58@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  _QWORD *(*v30)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  _QWORD *result;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47[4];
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;

  v7 = a2[1];
  v52 = *a2;
  v53 = v7;
  v8 = *((_QWORD *)a2 + 4);
  v55 = (uint64_t *)*((_QWORD *)a2 + 5);
  v54 = v8;
  v9 = *((_QWORD *)a2 + 6);
  v10 = *((_QWORD *)a1 + 2);
  v48 = *a1;
  v49 = v10;
  swift_bridgeObjectRetain_n();
  v11 = a3;
  v12 = sub_1B08C3F58(v47, &v48, a3);
  if (v4)
  {
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v16 = v13;
    v17 = a1;
    v42 = v14;
    v43 = v15;
    v18 = v9;
    v41 = v12;
    v19 = sub_1B0975248((uint64_t *)&v48, v11, (uint64_t)v55);
    v21 = v20;
    v40 = v22;
    v55 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v23 = v47[2];
    v38 = v47[1];
    v39 = v47[0];
    v50 = v48;
    v51 = v49;
    v24 = sub_1B0975248((uint64_t *)&v50, v11, v18);
    v34 = v25;
    v35 = v24;
    v36 = v23;
    v37 = v21;
    v27 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v28 = v51;
    *v17 = v50;
    *((_QWORD *)v17 + 2) = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC400);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v30 = *(_QWORD *(**)(__int128 *__return_ptr, __int128 *, uint64_t, uint64_t, uint64_t))(OpaqueTypeConformance2
                                                                                                  + 24);
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8E0);
    result = v30(&v45, v17, v11, v31, OpaqueTypeConformance2);
    *(_DWORD *)a4 = v41;
    *(_WORD *)(a4 + 4) = WORD2(v41);
    *(_QWORD *)(a4 + 8) = v16;
    *(_QWORD *)(a4 + 16) = v42;
    *(_QWORD *)(a4 + 24) = v43;
    *(_QWORD *)(a4 + 32) = v39;
    *(_QWORD *)(a4 + 40) = v38;
    *(_QWORD *)(a4 + 48) = v36;
    *(_QWORD *)(a4 + 56) = v55;
    *(_QWORD *)(a4 + 64) = v40;
    *(_QWORD *)(a4 + 72) = v37;
    *(_QWORD *)(a4 + 80) = v35;
    *(_QWORD *)(a4 + 88) = v34;
    *(_QWORD *)(a4 + 96) = v27;
    v33 = v46;
    *(_OWORD *)(a4 + 104) = v45;
    *(_QWORD *)(a4 + 120) = v33;
  }
  return result;
}

double sub_1B0971CF8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  __int128 v8;
  char v9;
  _QWORD *(*v10)(uint64_t *__return_ptr, unsigned __int16 *);
  uint64_t v11;
  uint64_t v12;
  double v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *(*v19)(uint64_t *__return_ptr, unsigned __int16 *);
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v8 = a2[1];
  v25 = *a2;
  v26 = v8;
  v27 = a2[2];
  v9 = *((_BYTE *)a2 + 48);
  v10 = (_QWORD *(*)(uint64_t *__return_ptr, unsigned __int16 *))*((_QWORD *)a2 + 7);
  v11 = *((_QWORD *)a2 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v23 = *(_OWORD *)a1;
  v24 = v12;
  swift_bridgeObjectRetain();
  v13 = sub_1B08C46B4(&v21, (uint64_t)&v23, a3);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = v13;
    v21 = v23;
    v22 = v24;
    swift_bridgeObjectRetain();
    sub_1B08BDF00(&v21, v9 & 1, v10, v11, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v21;
    v16 = v22;
    *(_OWORD *)a1 = v21;
    *(_QWORD *)(a1 + 16) = v16;
    v17 = *((unsigned __int8 *)a2 + 72);
    v19 = (_QWORD *(*)(uint64_t *__return_ptr, unsigned __int16 *))*((_QWORD *)a2 + 10);
    v18 = *((_QWORD *)a2 + 11);
    v23 = v15;
    v24 = v16;
    swift_bridgeObjectRetain();
    sub_1B08BDF00(&v23, v17, v19, v18, a3);
    swift_bridgeObjectRelease();
    v20 = v24;
    *(_OWORD *)a1 = v23;
    *(_QWORD *)(a1 + 16) = v20;
  }
  return v4;
}

double sub_1B0971E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  _QWORD *(*v8)(uint64_t *__return_ptr, unsigned __int16 *);
  uint64_t v9;
  uint64_t v10;
  int v11;
  double v12;
  char v13;
  uint64_t v14;
  _QWORD *(*v15)(uint64_t *__return_ptr, unsigned __int16 *);
  __int128 v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v8 = *(_QWORD *(**)(uint64_t *__return_ptr, unsigned __int16 *))(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_DWORD *)a2 & 1;
  v20 = *(_OWORD *)a1;
  v21 = v10;
  swift_bridgeObjectRetain_n();
  sub_1B08BDF00(&v20, v11, v8, v9, a3);
  if (v3)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = v12;
    swift_bridgeObjectRelease();
    v13 = *(_BYTE *)(a2 + 40);
    v15 = *(_QWORD *(**)(uint64_t *__return_ptr, unsigned __int16 *))(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRelease_n();
    v16 = v20;
    v17 = v21;
    *(_OWORD *)a1 = v20;
    *(_QWORD *)(a1 + 16) = v17;
    v20 = v16;
    v21 = v17;
    swift_bridgeObjectRetain();
    sub_1B08BDF00(&v20, v13, v15, v14, a3);
    swift_bridgeObjectRelease();
    v19 = v21;
    *(_OWORD *)a1 = v20;
    *(_QWORD *)(a1 + 16) = v19;
  }
  return v4;
}

uint64_t sub_1B0971FFC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  char v31;

  v15 = *(_QWORD *)(a1 + 16);
  v28 = *(_OWORD *)a1;
  v29 = v15;
  swift_bridgeObjectRetain_n();
  v16 = sub_1B08BAFC4(&v28, a6, a3, a4 & 0x1FF);
  if (v7)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v17 = v16;
    v30 = a2;
    swift_bridgeObjectRelease_n();
    v18 = v28;
    v19 = v29;
    *(_OWORD *)a1 = v28;
    *(_QWORD *)(a1 + 16) = v19;
    v28 = v18;
    v29 = v19;
    swift_bridgeObjectRetain();
    v31 = BYTE4(a4) & 1;
    if ((a4 & 0x10000000000) != 0)
      v20 = sub_1B08BADA8(&v28, a6, BYTE3(a4) | (unsigned __int16)((BYTE4(a4) & 1) << 8));
    else
      v20 = sub_1B08BAEAC(&v28, a6, BYTE3(a4) | (unsigned __int16)((BYTE4(a4) & 1) << 8));
    v21 = v20;
    v31 = HIBYTE(a4) & 1;
    if ((a5 & 1) != 0)
      v22 = sub_1B08BADA8(&v28, a6, BYTE6(a4) | (unsigned __int16)((HIBYTE(a4) & 1) << 8));
    else
      v22 = sub_1B08BAEAC(&v28, a6, BYTE6(a4) | (unsigned __int16)((HIBYTE(a4) & 1) << 8));
    v24 = v22;
    v25 = v21;
    v26 = v30;
    result = swift_bridgeObjectRelease();
    v27 = v29;
    *(_OWORD *)a1 = v28;
    *(_QWORD *)(a1 + 16) = v27;
    *(_WORD *)a7 = v26;
    *(_QWORD *)(a7 + 8) = v17;
    *(_BYTE *)(a7 + 16) = BYTE2(a4) & 1;
    *(_QWORD *)(a7 + 24) = v25;
    *(_QWORD *)(a7 + 32) = v24;
  }
  return result;
}

uint64_t sub_1B09721D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(__int128 *__return_ptr, uint64_t *);
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v36 = *(_BYTE *)(a2 + 1);
  v35 = *(_BYTE *)(a2 + 2);
  v34 = *(_BYTE *)(a2 + 3);
  v6 = *(_BYTE *)(a2 + 7);
  v7 = *(_BYTE *)(a2 + 8);
  v40 = *(_QWORD *)(a2 + 16);
  v37 = *(_BYTE *)(a2 + 10);
  v38 = *(_BYTE *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 25);
  v32 = *(_BYTE *)(a2 + 26);
  v33 = *(_BYTE *)(a2 + 9);
  v30 = *(_BYTE *)(a2 + 27);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)a2 & 1;
  v11 = *(_BYTE *)(a2 + 4) & 1;
  v12 = *(_BYTE *)(a2 + 5) & 1;
  v13 = *(_BYTE *)(a2 + 6) & 1;
  v49 = *(_OWORD *)a1;
  v14 = v6 & 1;
  v15 = v7 & 1;
  v16 = v8 & 1;
  v50 = v9;
  swift_bridgeObjectRetain();
  v17 = sub_1B08C4800((uint64_t)&v45, &v49, a3, v10 & 0xFFFFFFFFFEFEFEFFLL | ((v36 & 1) << 8) | ((unint64_t)(v35 & 1) << 16) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(v34 & 1) << 24) | (v11 << 32) | (v12 << 40) | (v13 << 48) | (v14 << 56), v15 & 0xFFFEFEFF | ((v33 & 1) << 8) | ((v37 & 1) << 16), v40, (v16 << 8) & 0xFFFEFFFE | ((v32 & 1) << 16) | v38 & 1);
  if (v43)
    return swift_bridgeObjectRelease();
  v18 = v17;
  v19 = a1;
  v20 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v49, (uint64_t)a3, v30 & 1);
  swift_bridgeObjectRelease();
  v41 = v45;
  v21 = v46;
  v39 = v47;
  v44 = v48;
  v22 = v49;
  v23 = v50;
  *(_OWORD *)v19 = v49;
  *(_QWORD *)(v19 + 16) = v23;
  v24 = *(_BYTE *)(a2 + 32);
  v26 = *(void (**)(__int128 *__return_ptr, uint64_t *))(a2 + 40);
  v25 = *(_QWORD *)(a2 + 48);
  v45 = v22;
  v46 = v23;
  swift_bridgeObjectRetain();
  v27 = sub_1B096F96C((uint64_t)&v45, v24, v26, v25, (uint64_t)a3);
  result = swift_bridgeObjectRelease();
  v29 = v46;
  *(_OWORD *)v19 = v45;
  *(_QWORD *)(v19 + 16) = v29;
  *(_OWORD *)a4 = v41;
  *(_QWORD *)(a4 + 16) = v21;
  *(_DWORD *)(a4 + 24) = v39;
  *(_QWORD *)(a4 + 32) = v44;
  *(_DWORD *)(a4 + 40) = v18;
  *(_WORD *)(a4 + 44) = v20;
  *(_QWORD *)(a4 + 48) = v27;
  return result;
}

uint64_t sub_1B0972440@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t *a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _OWORD *v23;
  __int128 v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;

  v31 = a7;
  v13 = a1[2];
  v14 = a3 & 1;
  v27 = *(_OWORD *)a1;
  v28 = v13;
  v15 = a2 & 0x101010101010101;
  swift_bridgeObjectRetain_n();
  v16 = sub_1B08C4978((uint64_t)&v26, &v27, a6, v15, v14);
  if (v7)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v17 = v16;
    v25 = sub_1B08C1578((uint64_t *)&v27, (uint64_t)a6, BYTE1(a3) & 1);
    swift_bridgeObjectRelease();
    v24 = v26;
    v29 = v27;
    v30 = v28;
    v19 = sub_1B08C1578((uint64_t *)&v29, (uint64_t)a6, BYTE2(a3) & 1);
    v20 = v19;
    swift_bridgeObjectRelease();
    v21 = v30;
    *(_OWORD *)a1 = v29;
    a1[2] = v21;
    v22 = (a5 >> 8) & 1;
    if ((a5 & 1) != 0)
      result = sub_1B0975044(a1, (uint64_t)a6, v22);
    else
      result = sub_1B091C4B0((uint64_t)a1, (uint64_t)a6, v22, MEMORY[0x1E0DEE9D8], a4);
    v23 = v31;
    *v31 = v24;
    *((_DWORD *)v23 + 4) = v17;
    *((_DWORD *)v23 + 5) = v25;
    *((_DWORD *)v23 + 6) = v20;
    *((_QWORD *)v23 + 4) = result;
  }
  return result;
}

__n128 sub_1B09725E0@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __n128 result;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[4];
  char v33;
  uint64_t v34;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA8D0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC250);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a2;
  v34 = a2[1];
  v15 = a2[3];
  v29 = a2[2];
  *(_QWORD *)&v30 = v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBC248);
  sub_1B08CE4D4((uint64_t)a2 + *(int *)(v16 + 52), (uint64_t)v13, &qword_1EEEBC250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = *(_OWORD *)v13;
    v30 = *((_OWORD *)v13 + 1);
    v31 = v17;
    v18 = *((_QWORD *)v13 + 4);
    sub_1B08A36F0();
    swift_allocError();
    v19 = v30;
    *(_OWORD *)v20 = v31;
    *(_OWORD *)(v20 + 16) = v19;
    *(_QWORD *)(v20 + 32) = v18;
    swift_willThrow();
  }
  else
  {
    sub_1B08CE970((uint64_t)v13, (uint64_t)v10, &qword_1EEEBA8D0);
    swift_bridgeObjectRetain();
    v22 = v31;
    sub_1B08BB0D0(a1, a3, (uint64_t)v32);
    sub_1B08AE3C4((uint64_t)v10, &qword_1EEEBA8D0);
    if (v22)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = v33;
      result = (__n128)v32[0];
      v24 = v32[1];
      v25 = v32[2];
      v26 = v32[3];
      v27 = v34;
      *(_QWORD *)a4 = v30;
      *(_QWORD *)(a4 + 8) = v27;
      *(_QWORD *)(a4 + 16) = v29;
      *(_QWORD *)(a4 + 24) = v15;
      *(__n128 *)(a4 + 32) = result;
      *(_OWORD *)(a4 + 48) = v24;
      *(_OWORD *)(a4 + 64) = v25;
      *(_OWORD *)(a4 + 80) = v26;
      *(_BYTE *)(a4 + 96) = v23;
    }
  }
  return result;
}

uint64_t (*sub_1B09727C8(uint64_t a1, int a2, uint64_t (*a3)(__int16 *, __int16 *), uint64_t a4, unsigned int a5, uint64_t a6))(__int16 *, __int16 *)
{
  uint64_t v6;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v12 = *(_QWORD *)(a1 + 16);
  v21 = *(_OWORD *)a1;
  v22 = v12;
  v13 = a2 & 0xFFFF0001;
  v14 = (uint64_t *)(a5 & 0x101);
  swift_bridgeObjectRetain();
  v15 = sub_1B08C6AC8(&v23, &v21, a6, v13, a3, a4, v14);
  if (v6)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    a3 = (uint64_t (*)(__int16 *, __int16 *))v15;
    sub_1B08C15A4((uint64_t *)&v21, a6, BYTE2(a5) & 1);
    v16 = HIBYTE(a5) & 1;
    swift_bridgeObjectRelease();
    v17 = v21;
    v18 = v22;
    *(_OWORD *)a1 = v21;
    *(_QWORD *)(a1 + 16) = v18;
    v21 = v17;
    v22 = v18;
    swift_bridgeObjectRetain();
    sub_1B08C1578((uint64_t *)&v21, a6, v16);
    swift_bridgeObjectRelease();
    v20 = v22;
    *(_OWORD *)a1 = v21;
    *(_QWORD *)(a1 + 16) = v20;
  }
  return a3;
}

uint64_t sub_1B0972914(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v7 = a3 & 1;
  v8 = a1[1];
  v9 = a1[2];
  *(_QWORD *)&v18 = *a1;
  *((_QWORD *)&v18 + 1) = v8;
  v19 = v9;
  *(_QWORD *)&v14 = v18;
  *((_QWORD *)&v14 + 1) = v8;
  v15 = v9;
  swift_bridgeObjectRetain_n();
  v10 = (unsigned __int16)sub_1B08C15A4((uint64_t *)&v14, a2, v7);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v10;
    swift_bridgeObjectRelease();
    v16 = v14;
    v17 = v15;
    sub_1B08C15A4((uint64_t *)&v16, a2, BYTE1(a3) & 1);
    swift_bridgeObjectRelease();
    v18 = v16;
    v19 = v17;
    sub_1B08C15A4((uint64_t *)&v18, a2, BYTE2(a3) & 1);
    swift_bridgeObjectRelease();
    result = v11;
    v13 = v19;
    *(_OWORD *)a1 = v18;
    a1[2] = v13;
  }
  return result;
}

uint64_t sub_1B0972A58(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t (*v17)(uint64_t *);
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v2;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v2[7];
  v31 = v2[6];
  v32 = v8;
  v33 = v2[8];
  v34 = *((_QWORD *)v2 + 18);
  v9 = v2[3];
  v27 = v2[2];
  v28 = v9;
  v10 = v2[5];
  v29 = v2[4];
  v30 = v10;
  v11 = v2[1];
  v25 = *v2;
  v26 = v11;
  v12 = *((_BYTE *)v2 + 152);
  v13 = (uint64_t (*)(uint64_t *))*((_QWORD *)v2 + 20);
  v14 = *((_QWORD *)v2 + 21);
  v23 = *(_OWORD *)a1;
  v24 = v7;
  swift_bridgeObjectRetain_n();
  v15 = sub_1B0972C24((uint64_t)&v23, a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v35 = v15;
    v21 = v23;
    v22 = v24;
    swift_bridgeObjectRetain();
    sub_1B08C87D4(&v21, v12 & 1, v13, v14, a2);
    swift_bridgeObjectRelease();
    v16 = *((_BYTE *)v2 + 176);
    v17 = (uint64_t (*)(uint64_t *))*((_QWORD *)v4 + 23);
    v18 = *((_QWORD *)v4 + 24);
    swift_bridgeObjectRelease();
    v23 = v21;
    v24 = v22;
    swift_bridgeObjectRetain();
    sub_1B08C87D4(&v23, v16 & 1, v17, v18, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v24;
    *(_OWORD *)a1 = v23;
    *(_QWORD *)(a1 + 16) = v19;
    return v35;
  }
}

uint64_t sub_1B0972C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *);
  char v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  _OWORD v20[9];
  uint64_t v21;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD *)(v2 + 80);
  v20[4] = *(_OWORD *)(v2 + 64);
  v20[5] = v7;
  v8 = *(_OWORD *)(v2 + 112);
  v20[6] = *(_OWORD *)(v2 + 96);
  v20[7] = v8;
  v9 = *(_OWORD *)(v2 + 16);
  v20[0] = *(_OWORD *)v2;
  v20[1] = v9;
  v10 = *(_OWORD *)(v2 + 48);
  v20[2] = *(_OWORD *)(v2 + 32);
  v20[3] = v10;
  v18 = *(_OWORD *)a1;
  v19 = v6;
  swift_bridgeObjectRetain_n();
  v11 = sub_1B08BCF08((uint64_t)&v18, (uint64_t)v20, a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v11;
    swift_bridgeObjectRelease();
    v12 = *(_BYTE *)(v2 + 128);
    v14 = *(uint64_t (**)(uint64_t *))(v2 + 136);
    v13 = *(_QWORD *)(v2 + 144);
    v15 = v12 & 1;
    swift_bridgeObjectRetain();
    sub_1B08C8974(&v18, v15, v14, v13, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = v19;
    *(_OWORD *)a1 = v18;
    *(_QWORD *)(a1 + 16) = v16;
    return v21;
  }
}

uint64_t sub_1B0972D80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  signed __int16 v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v10 = a1[1];
  v11 = a1[2];
  *(_QWORD *)&v44 = *a1;
  *((_QWORD *)&v44 + 1) = v10;
  v45 = v11;
  *(_QWORD *)&v42 = v44;
  *((_QWORD *)&v42 + 1) = v10;
  *(_QWORD *)&v40 = v44;
  *((_QWORD *)&v40 + 1) = v10;
  v41 = v11;
  v12 = a3 & 0x101010101010101;
  v13 = a4 & 0x101;
  swift_bridgeObjectRetain_n();
  v14 = sub_1B08C22E4((uint64_t)&v31, &v40, a2, v12, v13);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v15 = v14;
    v29 = v40;
    v30 = v41;
    swift_bridgeObjectRetain();
    v27 = (unsigned __int16)sub_1B08C16FC((uint64_t *)&v29, a2, BYTE2(a4) & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = v31;
    v46 = v32;
    v25 = v34;
    v26 = v33;
    v23 = v36;
    v24 = v35;
    v16 = v39;
    v21 = v38;
    v22 = v37;
    v42 = v29;
    v43 = v30;
    sub_1B08C16FC((uint64_t *)&v42, a2, BYTE3(a4) & 1);
    v20 = v16;
    v17 = v46;
    swift_bridgeObjectRelease();
    v44 = v42;
    v45 = v43;
    sub_1B08C16FC((uint64_t *)&v44, a2, BYTE4(a4) & 1);
    result = swift_bridgeObjectRelease();
    v19 = v45;
    *(_OWORD *)a1 = v44;
    a1[2] = v19;
    *(_DWORD *)a5 = v28;
    *(_QWORD *)(a5 + 8) = v17;
    *(_QWORD *)(a5 + 16) = v26;
    *(_QWORD *)(a5 + 24) = v25;
    *(_QWORD *)(a5 + 32) = v24;
    *(_QWORD *)(a5 + 40) = v23;
    *(_QWORD *)(a5 + 48) = v22;
    *(_QWORD *)(a5 + 56) = v21;
    *(_QWORD *)(a5 + 64) = v20;
    *(_QWORD *)(a5 + 72) = v15;
    *(_QWORD *)(a5 + 80) = v27;
  }
  return result;
}

uint64_t sub_1B0972FB8(_QWORD *a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v9 = a1[1];
  v10 = a1[2];
  v11 = HIWORD(a3) & 1;
  *(_QWORD *)&v18 = *a1;
  *((_QWORD *)&v18 + 1) = v9;
  v19 = v10;
  *(_QWORD *)&v14 = v18;
  *((_QWORD *)&v14 + 1) = v9;
  v15 = v10;
  swift_bridgeObjectRetain_n();
  sub_1B08C15A4((uint64_t *)&v14, a2, v11);
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v16 = v14;
    v17 = v15;
    sub_1B08C15A4((uint64_t *)&v16, a2, HIBYTE(a3) & 1);
    swift_bridgeObjectRelease();
    v18 = v16;
    v19 = v17;
    sub_1B08C15A4((uint64_t *)&v18, a2, a4 & 1);
    swift_bridgeObjectRelease();
    v13 = v19;
    *(_OWORD *)a1 = v18;
    a1[2] = v13;
    return a3 & 0xFFFFFFFFFFFFLL;
  }
}

uint64_t sub_1B0973100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(int *, int *), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v7 = WORD2(a6);
  v12 = *(_QWORD *)(a1 + 16);
  v18 = *(_OWORD *)a1;
  v19 = v12;
  v13 = a3 & 0xFFFFFFFF00000001;
  v14 = a6 & 0x1010101;
  swift_bridgeObjectRetain_n();
  v15 = sub_1B0973258(&v18, a2, v13, a4, a5, v14);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B08C1578((uint64_t *)&v18, a2, v7 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B08C15D0((uint64_t *)&v18, a2, HIBYTE(v7) & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v19;
    *(_OWORD *)a1 = v18;
    *(_QWORD *)(a1 + 16) = v17;
  }
  return v15;
}

uint64_t sub_1B0973258(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(int *, int *), uint64_t a5, int a6)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v7 = HIWORD(a6);
  v12 = *((_QWORD *)a1 + 2);
  v20 = *a1;
  v21 = v12;
  v13 = a3 & 0xFFFFFFFF00000001;
  v14 = (uint64_t *)(a6 & 0x101);
  swift_bridgeObjectRetain_n();
  v15 = sub_1B09733D0(&v20, a2, v13, a4, a5, v14);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    a5 = (uint64_t)v15;
    v18 = v20;
    v19 = v21;
    swift_bridgeObjectRetain();
    sub_1B08C15A4((uint64_t *)&v18, a2, v7 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v18;
    v23 = v19;
    sub_1B08C15A4((uint64_t *)&v22, a2, HIBYTE(v7) & 1);
    swift_bridgeObjectRelease();
    v17 = v23;
    *a1 = v22;
    *((_QWORD *)a1 + 2) = v17;
  }
  return a5;
}

uint64_t *sub_1B09733D0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(int *, int *), uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v12 = a1[1];
  v13 = a1[2];
  *(_QWORD *)&v22 = *a1;
  *((_QWORD *)&v22 + 1) = v12;
  v23 = v13;
  *(_QWORD *)&v18 = v22;
  *((_QWORD *)&v18 + 1) = v12;
  v19 = v13;
  v14 = a3 & 0xFFFFFFFF00000001;
  swift_bridgeObjectRetain_n();
  sub_1B0964678((uint64_t *)&v18, v14, a4, a5, a2);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = BYTE1(a6);
    swift_bridgeObjectRelease();
    v20 = v18;
    v21 = v19;
    a6 = sub_1B08C1578((uint64_t *)&v20, a2, a6 & 1);
    swift_bridgeObjectRelease();
    v22 = v20;
    v23 = v21;
    sub_1B08C1578((uint64_t *)&v22, a2, v15 & 1);
    swift_bridgeObjectRelease();
    v17 = v23;
    *(_OWORD *)a1 = v22;
    a1[2] = v17;
  }
  return a6;
}

uint64_t sub_1B0973530(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(int *, int *), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int v27;

  v12 = a1[1];
  v13 = a1[2];
  *(_QWORD *)&v25 = *a1;
  *((_QWORD *)&v25 + 1) = v12;
  v26 = v13;
  *(_QWORD *)&v21 = v25;
  *((_QWORD *)&v21 + 1) = v12;
  v22 = v13;
  v14 = a3 & 0xFFFFFFFF00000001;
  v15 = (uint64_t *)(a6 & 0x101);
  swift_bridgeObjectRetain_n();
  v16 = sub_1B08C5508(&v27, &v21, a2, v14, a4, a5, v15);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v17 = v16;
    v18 = v27;
    sub_1B08C15A4((uint64_t *)&v21, a2, BYTE2(a6) & 1);
    swift_bridgeObjectRelease();
    v23 = v21;
    v24 = v22;
    sub_1B08C15A4((uint64_t *)&v23, a2, BYTE3(a6) & 1);
    swift_bridgeObjectRelease();
    v25 = v23;
    v26 = v24;
    sub_1B08C1578((uint64_t *)&v25, a2, BYTE4(a6) & 1);
    swift_bridgeObjectRelease();
    v19 = v26;
    *(_OWORD *)a1 = v25;
    a1[2] = v19;
    return v17 | (unint64_t)(v18 << 32);
  }
}

uint64_t sub_1B09736D0(_QWORD *a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t *), uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v13 = a1[1];
  v14 = a1[2];
  v15 = a6 & 1;
  *(_QWORD *)&v23 = *a1;
  *((_QWORD *)&v23 + 1) = v13;
  v24 = v14;
  *(_QWORD *)&v19 = v23;
  *((_QWORD *)&v19 + 1) = v13;
  v20 = v14;
  swift_bridgeObjectRetain_n();
  v16 = sub_1B08C56A4(&v25, (uint64_t)&v19, a2, a3, a4, a5, v15);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    a5 = v16;
    sub_1B08C15A4((uint64_t *)&v19, a2, BYTE1(a6) & 1);
    swift_bridgeObjectRelease();
    v21 = v19;
    v22 = v20;
    sub_1B08C15A4((uint64_t *)&v21, a2, BYTE2(a6) & 1);
    swift_bridgeObjectRelease();
    v23 = v21;
    v24 = v22;
    sub_1B08C15A4((uint64_t *)&v23, a2, HIBYTE(a6) & 1);
    swift_bridgeObjectRelease();
    v18 = v24;
    *(_OWORD *)a1 = v23;
    a1[2] = v18;
  }
  return a5;
}

_QWORD *sub_1B0973864(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = *result;
  v5 = result[1];
  v6 = result[2];
  *(_QWORD *)&v16 = v4;
  *((_QWORD *)&v16 + 1) = v5;
  v17 = v6;
  *(_QWORD *)&v12 = v4;
  *((_QWORD *)&v12 + 1) = v5;
  v13 = v6;
  if (v5 < v4)
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    v10 = a3 & 1;
    swift_bridgeObjectRetain_n();
    sub_1B08C1578((uint64_t *)&v12, a2, v10);
    swift_bridgeObjectRelease();
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = v12;
      v15 = v13;
      sub_1B08C1578((uint64_t *)&v14, a2, BYTE1(a3) & 1);
      swift_bridgeObjectRelease();
      v16 = v14;
      v17 = v15;
      sub_1B08C1578((uint64_t *)&v16, a2, BYTE2(a3) & 1);
      swift_bridgeObjectRelease();
      v11 = v17;
      *(_OWORD *)v9 = v16;
      v9[2] = v11;
    }
    return (_QWORD *)v4;
  }
  return result;
}

uint64_t *sub_1B09739D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  int v41;

  v7 = HIDWORD(a3);
  v10 = a1[2];
  v37 = *(_OWORD *)a1;
  v38 = v10;
  v11 = a2 & 0x101010101010101;
  v12 = a3 & 0x101010101;
  swift_bridgeObjectRetain_n();
  sub_1B0972D80(&v37, a4, v11, v12, (uint64_t)&v26);
  if (v5)
  {
    swift_bridgeObjectRelease();
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B08C16FC((uint64_t *)&v37, a4, BYTE1(v7) & 1);
    swift_bridgeObjectRelease();
    v41 = v26;
    v24 = v27;
    v25 = v28;
    v22 = v30;
    v23 = v29;
    v20 = v32;
    v21 = v31;
    v13 = v35;
    v18 = v34;
    v19 = v33;
    v14 = v36;
    v39 = v37;
    v40 = v38;
    sub_1B08C16FC((uint64_t *)&v39, a4, BYTE2(v7) & 1);
    v17 = v14;
    LODWORD(v14) = v41;
    swift_bridgeObjectRelease();
    v15 = v40;
    *(_OWORD *)a1 = v39;
    a1[2] = v15;
    result = sub_1B08C16FC(a1, a4, HIBYTE(v7) & 1);
    *(_DWORD *)a5 = v14;
    *(_QWORD *)(a5 + 8) = v24;
    *(_QWORD *)(a5 + 16) = v25;
    *(_QWORD *)(a5 + 24) = v23;
    *(_QWORD *)(a5 + 32) = v22;
    *(_QWORD *)(a5 + 40) = v21;
    *(_QWORD *)(a5 + 48) = v20;
    *(_QWORD *)(a5 + 56) = v19;
    *(_QWORD *)(a5 + 64) = v18;
    *(_QWORD *)(a5 + 72) = v13;
    *(_QWORD *)(a5 + 80) = v17;
  }
  return result;
}

unint64_t sub_1B0973BA8@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned __int16 v38;
  unsigned __int16 v39;
  unsigned __int16 v40;
  unsigned __int16 v41;
  uint64_t v42;
  __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  int v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  uint64_t v51;
  unsigned __int16 v52;
  uint64_t v53;
  unsigned __int16 v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;

  v4 = *a1;
  v5 = a1[1];
  v71 = a1[2];
  v70 = a1[3];
  v69 = a1[7];
  v65 = a1[8];
  v62 = a1[9];
  v59 = a1[10];
  v57 = a1[11];
  v58 = a1[12];
  v68 = a1[14];
  v67 = a1[15];
  v66 = *((unsigned __int8 *)a1 + 32);
  v64 = *((unsigned __int8 *)a1 + 33);
  v63 = *((unsigned __int8 *)a1 + 34);
  v61 = *((unsigned __int8 *)a1 + 35);
  v60 = *((unsigned __int8 *)a1 + 36);
  v76 = *((unsigned __int8 *)a1 + 37);
  v75 = *((unsigned __int8 *)a1 + 38);
  v74 = *((unsigned __int8 *)a1 + 39);
  v77 = *((unsigned __int8 *)a1 + 40);
  v73 = *((unsigned __int8 *)a1 + 41);
  v72 = *((unsigned int *)a1 + 11);
  v78 = *((unsigned int *)a1 + 14);
  v6 = a1[36];
  v7 = a1[37];
  v8 = a1[38];
  v9 = a1[39];
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((unsigned __int8 *)a1 + 88);
  v12 = *(_QWORD *)(a1 + 45);
  v13 = a1[49];
  v14 = *((unsigned __int8 *)a1 + 100);
  v15 = *(unsigned int *)(a1 + 51);
  v16 = *((unsigned __int8 *)a1 + 106);
  if (v4 > 4)
  {
    v80 = *((_BYTE *)a1 + 88);
    v79 = *((_BYTE *)a1 + 100);
    v81 = *((_BYTE *)a1 + 106);
    v51 = *((_QWORD *)a1 + 10);
    v52 = a1[37];
    v49 = a1[35];
    v50 = a1[39];
    v54 = a1[49];
    v55 = *(_DWORD *)(a1 + 51);
    v48 = *((_DWORD *)a1 + 13);
    v45 = a1[34];
    v46 = a1[33];
    v35 = *a1;
    v53 = *(_QWORD *)(a1 + 45);
    v44 = a1[32];
    v47 = a1[36];
    v36 = *((_DWORD *)a1 + 15);
    v37 = *((_DWORD *)a1 + 12);
    v38 = a1[4];
    v39 = a1[5];
    v40 = a1[6];
    v41 = a1[13];
    v42 = swift_allocObject();
    v43 = v5;
    v21 = v42;
    *(_WORD *)(v42 + 18) = v43;
    *(_WORD *)(v42 + 20) = v71;
    *(_WORD *)(v42 + 22) = v70;
    *(_WORD *)(v42 + 24) = v38;
    *(_WORD *)(v42 + 26) = v39;
    *(_WORD *)(v42 + 28) = v40;
    *(_WORD *)(v42 + 30) = v69;
    *(_WORD *)(v42 + 32) = v65;
    *(_WORD *)(v42 + 34) = v62;
    *(_WORD *)(v42 + 36) = v59;
    *(_WORD *)(v42 + 38) = v57;
    *(_WORD *)(v42 + 40) = v58;
    *(_WORD *)(v42 + 16) = v35;
    *(_WORD *)(v42 + 42) = v41;
    *(_WORD *)(v42 + 44) = v68;
    *(_WORD *)(v42 + 46) = v67;
    *(_BYTE *)(v42 + 48) = v66;
    *(_BYTE *)(v42 + 49) = v64;
    *(_BYTE *)(v42 + 50) = v63;
    *(_BYTE *)(v42 + 51) = v61;
    *(_BYTE *)(v42 + 52) = v60;
    *(_BYTE *)(v42 + 53) = v76;
    *(_BYTE *)(v42 + 54) = v75;
    *(_BYTE *)(v42 + 55) = v74;
    *(_BYTE *)(v42 + 56) = v77;
    *(_BYTE *)(v42 + 57) = v73;
    *(_DWORD *)(v42 + 60) = v72;
    *(_DWORD *)(v42 + 64) = v37;
    *(_DWORD *)(v42 + 68) = v48;
    *(_DWORD *)(v42 + 72) = v78;
    *(_DWORD *)(v42 + 76) = v36;
    *(_WORD *)(v42 + 80) = v44;
    *(_WORD *)(v42 + 82) = v46;
    *(_WORD *)(v42 + 84) = v45;
    *(_WORD *)(v42 + 86) = v49;
    *(_WORD *)(v42 + 88) = v47;
    *(_WORD *)(v42 + 90) = v52;
    *(_WORD *)(v42 + 92) = v8;
    *(_WORD *)(v42 + 94) = v50;
    *(_QWORD *)(v42 + 96) = v51;
    *(_BYTE *)(v42 + 104) = v80;
    *(_QWORD *)(v42 + 106) = v53;
    *(_WORD *)(v42 + 114) = v54;
    *(_BYTE *)(v42 + 116) = v79;
    *(_DWORD *)(v42 + 118) = v55;
    *(_BYTE *)(v42 + 122) = v81;
    *(_QWORD *)(v42 + 128) = a2;
    swift_retain();
    LODWORD(v4) = v35;
    v18 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    result = 0;
    v26 = 0;
    v10 = 0;
    v28 = 0;
    v34 = 0;
    v33 = 0;
    v19 = (unint64_t)sub_1B097750C;
    v20 = 257;
    v17 = (unint64_t)sub_1B096CCB0;
  }
  else
  {
    v17 = a1[4] | ((unint64_t)a1[5] << 16) | ((unint64_t)a1[6] << 32) | (v69 << 48);
    v18 = v65 | (v62 << 16) | (v59 << 32) | (v57 << 48);
    v19 = v58 | ((unint64_t)a1[13] << 16) | (v68 << 32) | (v67 << 48);
    v20 = v4 | (v5 << 16) | (v71 << 32) | (v70 << 48);
    v21 = v66 | (v64 << 8) | (v63 << 16) | (v61 << 24) | (v60 << 32) | (v76 << 40) | (v75 << 48) | (v74 << 56);
    v22 = v77 | (v73 << 8) | (v72 << 32);
    v23 = *((unsigned int *)a1 + 12) | ((unint64_t)*((unsigned int *)a1 + 13) << 32);
    v24 = v78 | ((unint64_t)*((unsigned int *)a1 + 15) << 32);
    result = a1[32] | ((unint64_t)a1[33] << 16) | ((unint64_t)a1[34] << 32) | ((unint64_t)a1[35] << 48);
    v26 = v6 | (v7 << 16) | (v8 << 32) | (v9 << 48);
    v27 = v14 == 0;
    v28 = v11 | (v12 << 16);
    v29 = 0x100000000;
    if (v27)
      v29 = 0;
    *((_QWORD *)&v30 + 1) = v13;
    *(_QWORD *)&v30 = v12;
    v31 = v29 | (v30 >> 48);
    if (v16)
      v32 = 0x10000;
    else
      v32 = 0;
    v33 = v32 & 0xFFFF0000 | WORD1(v15);
    v34 = v31 | (v15 << 48);
  }
  *(_QWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = v17;
  *(_QWORD *)(a3 + 16) = v18;
  *(_QWORD *)(a3 + 24) = v19;
  *(_QWORD *)(a3 + 32) = v21;
  *(_QWORD *)(a3 + 40) = v22;
  *(_QWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 56) = v24;
  *(_QWORD *)(a3 + 64) = result;
  *(_QWORD *)(a3 + 72) = v26;
  *(_QWORD *)(a3 + 80) = v10;
  *(_QWORD *)(a3 + 88) = v28;
  *(_QWORD *)(a3 + 96) = v34;
  *(_WORD *)(a3 + 104) = v33;
  *(_BYTE *)(a3 + 106) = BYTE2(v33);
  *(_BYTE *)(a3 + 107) = v4 < 5;
  return result;
}

__n128 sub_1B0974028@<Q0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  __n128 v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  int v16;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_WORD *)a1 + 20);
  v8 = *(__n128 *)((char *)a1 + 44);
  v9 = *((_DWORD *)a1 + 15);
  v10 = a1[4];
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((_BYTE *)a1 + 88);
  v13 = *(_QWORD *)((char *)a1 + 90);
  v14 = *((_WORD *)a1 + 49);
  v15 = *((_BYTE *)a1 + 100);
  v16 = *(_DWORD *)((char *)a1 + 102);
  v17 = *((_BYTE *)a1 + 106);
  swift_setAtWritableKeyPath();
  result = v8;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_WORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 44) = v8;
  *(_DWORD *)(a2 + 60) = v9;
  *(_OWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 80) = v11;
  *(_BYTE *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 90) = v13;
  *(_WORD *)(a2 + 98) = v14;
  *(_BYTE *)(a2 + 100) = v15;
  *(_DWORD *)(a2 + 102) = v16;
  *(_BYTE *)(a2 + 106) = v17;
  return result;
}

unint64_t sub_1B0974144@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned __int16 v38;
  unsigned __int16 v39;
  unsigned __int16 v40;
  unsigned __int16 v41;
  uint64_t v42;
  __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  int v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  uint64_t v51;
  unsigned __int16 v52;
  uint64_t v53;
  unsigned __int16 v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;

  v4 = *a1;
  v5 = a1[1];
  v71 = a1[2];
  v70 = a1[3];
  v69 = a1[7];
  v65 = a1[8];
  v62 = a1[9];
  v59 = a1[10];
  v57 = a1[11];
  v58 = a1[12];
  v68 = a1[14];
  v67 = a1[15];
  v66 = *((unsigned __int8 *)a1 + 32);
  v64 = *((unsigned __int8 *)a1 + 33);
  v63 = *((unsigned __int8 *)a1 + 34);
  v61 = *((unsigned __int8 *)a1 + 35);
  v60 = *((unsigned __int8 *)a1 + 36);
  v76 = *((unsigned __int8 *)a1 + 37);
  v75 = *((unsigned __int8 *)a1 + 38);
  v74 = *((unsigned __int8 *)a1 + 39);
  v77 = *((unsigned __int8 *)a1 + 40);
  v73 = *((unsigned __int8 *)a1 + 41);
  v72 = *((unsigned int *)a1 + 11);
  v78 = *((unsigned int *)a1 + 14);
  v6 = a1[36];
  v7 = a1[37];
  v8 = a1[38];
  v9 = a1[39];
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((unsigned __int8 *)a1 + 88);
  v12 = *(_QWORD *)(a1 + 45);
  v13 = a1[49];
  v14 = *((unsigned __int8 *)a1 + 100);
  v15 = *(unsigned int *)(a1 + 51);
  v16 = *((unsigned __int8 *)a1 + 106);
  if (v4 > 1)
  {
    v80 = *((_BYTE *)a1 + 88);
    v79 = *((_BYTE *)a1 + 100);
    v81 = *((_BYTE *)a1 + 106);
    v51 = *((_QWORD *)a1 + 10);
    v52 = a1[37];
    v49 = a1[35];
    v50 = a1[39];
    v54 = a1[49];
    v55 = *(_DWORD *)(a1 + 51);
    v48 = *((_DWORD *)a1 + 13);
    v45 = a1[34];
    v46 = a1[33];
    v35 = *a1;
    v53 = *(_QWORD *)(a1 + 45);
    v44 = a1[32];
    v47 = a1[36];
    v36 = *((_DWORD *)a1 + 15);
    v37 = *((_DWORD *)a1 + 12);
    v38 = a1[4];
    v39 = a1[5];
    v40 = a1[6];
    v41 = a1[13];
    v42 = swift_allocObject();
    v43 = v5;
    v21 = v42;
    *(_WORD *)(v42 + 18) = v43;
    *(_WORD *)(v42 + 20) = v71;
    *(_WORD *)(v42 + 22) = v70;
    *(_WORD *)(v42 + 24) = v38;
    *(_WORD *)(v42 + 26) = v39;
    *(_WORD *)(v42 + 28) = v40;
    *(_WORD *)(v42 + 30) = v69;
    *(_WORD *)(v42 + 32) = v65;
    *(_WORD *)(v42 + 34) = v62;
    *(_WORD *)(v42 + 36) = v59;
    *(_WORD *)(v42 + 38) = v57;
    *(_WORD *)(v42 + 40) = v58;
    *(_WORD *)(v42 + 16) = v35;
    *(_WORD *)(v42 + 42) = v41;
    *(_WORD *)(v42 + 44) = v68;
    *(_WORD *)(v42 + 46) = v67;
    *(_BYTE *)(v42 + 48) = v66;
    *(_BYTE *)(v42 + 49) = v64;
    *(_BYTE *)(v42 + 50) = v63;
    *(_BYTE *)(v42 + 51) = v61;
    *(_BYTE *)(v42 + 52) = v60;
    *(_BYTE *)(v42 + 53) = v76;
    *(_BYTE *)(v42 + 54) = v75;
    *(_BYTE *)(v42 + 55) = v74;
    *(_BYTE *)(v42 + 56) = v77;
    *(_BYTE *)(v42 + 57) = v73;
    *(_DWORD *)(v42 + 60) = v72;
    *(_DWORD *)(v42 + 64) = v37;
    *(_DWORD *)(v42 + 68) = v48;
    *(_DWORD *)(v42 + 72) = v78;
    *(_DWORD *)(v42 + 76) = v36;
    *(_WORD *)(v42 + 80) = v44;
    *(_WORD *)(v42 + 82) = v46;
    *(_WORD *)(v42 + 84) = v45;
    *(_WORD *)(v42 + 86) = v49;
    *(_WORD *)(v42 + 88) = v47;
    *(_WORD *)(v42 + 90) = v52;
    *(_WORD *)(v42 + 92) = v8;
    *(_WORD *)(v42 + 94) = v50;
    *(_QWORD *)(v42 + 96) = v51;
    *(_BYTE *)(v42 + 104) = v80;
    *(_QWORD *)(v42 + 106) = v53;
    *(_WORD *)(v42 + 114) = v54;
    *(_BYTE *)(v42 + 116) = v79;
    *(_DWORD *)(v42 + 118) = v55;
    *(_BYTE *)(v42 + 122) = v81;
    *(_QWORD *)(v42 + 128) = a2;
    swift_retain();
    LODWORD(v4) = v35;
    v18 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    result = 0;
    v26 = 0;
    v10 = 0;
    v28 = 0;
    v34 = 0;
    v33 = 0;
    v19 = (unint64_t)sub_1B0977528;
    v20 = 0x101010101;
    v17 = (unint64_t)sub_1B096CC5C;
  }
  else
  {
    v17 = a1[4] | ((unint64_t)a1[5] << 16) | ((unint64_t)a1[6] << 32) | (v69 << 48);
    v18 = v65 | (v62 << 16) | (v59 << 32) | (v57 << 48);
    v19 = v58 | ((unint64_t)a1[13] << 16) | (v68 << 32) | (v67 << 48);
    v20 = v4 | (v5 << 16) | (v71 << 32) | (v70 << 48);
    v21 = v66 | (v64 << 8) | (v63 << 16) | (v61 << 24) | (v60 << 32) | (v76 << 40) | (v75 << 48) | (v74 << 56);
    v22 = v77 | (v73 << 8) | (v72 << 32);
    v23 = *((unsigned int *)a1 + 12) | ((unint64_t)*((unsigned int *)a1 + 13) << 32);
    v24 = v78 | ((unint64_t)*((unsigned int *)a1 + 15) << 32);
    result = a1[32] | ((unint64_t)a1[33] << 16) | ((unint64_t)a1[34] << 32) | ((unint64_t)a1[35] << 48);
    v26 = v6 | (v7 << 16) | (v8 << 32) | (v9 << 48);
    v27 = v14 == 0;
    v28 = v11 | (v12 << 16);
    v29 = 0x100000000;
    if (v27)
      v29 = 0;
    *((_QWORD *)&v30 + 1) = v13;
    *(_QWORD *)&v30 = v12;
    v31 = v29 | (v30 >> 48);
    if (v16)
      v32 = 0x10000;
    else
      v32 = 0;
    v33 = v32 & 0xFFFF0000 | WORD1(v15);
    v34 = v31 | (v15 << 48);
  }
  *(_QWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = v17;
  *(_QWORD *)(a3 + 16) = v18;
  *(_QWORD *)(a3 + 24) = v19;
  *(_QWORD *)(a3 + 32) = v21;
  *(_QWORD *)(a3 + 40) = v22;
  *(_QWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 56) = v24;
  *(_QWORD *)(a3 + 64) = result;
  *(_QWORD *)(a3 + 72) = v26;
  *(_QWORD *)(a3 + 80) = v10;
  *(_QWORD *)(a3 + 88) = v28;
  *(_QWORD *)(a3 + 96) = v34;
  *(_WORD *)(a3 + 104) = v33;
  *(_BYTE *)(a3 + 106) = BYTE2(v33);
  *(_BYTE *)(a3 + 107) = v4 < 2;
  return result;
}

__n128 sub_1B09745C8@<Q0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  __n128 v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  int v16;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_WORD *)a1 + 20);
  v8 = *(__n128 *)((char *)a1 + 44);
  v9 = *((_DWORD *)a1 + 15);
  v10 = a1[4];
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((_BYTE *)a1 + 88);
  v13 = *(_QWORD *)((char *)a1 + 90);
  v14 = *((_WORD *)a1 + 49);
  v15 = *((_BYTE *)a1 + 100);
  v16 = *(_DWORD *)((char *)a1 + 102);
  v17 = *((_BYTE *)a1 + 106);
  swift_setAtWritableKeyPath();
  result = v8;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_WORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 44) = v8;
  *(_DWORD *)(a2 + 60) = v9;
  *(_OWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 80) = v11;
  *(_BYTE *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 90) = v13;
  *(_WORD *)(a2 + 98) = v14;
  *(_BYTE *)(a2 + 100) = v15;
  *(_DWORD *)(a2 + 102) = v16;
  *(_BYTE *)(a2 + 106) = v17;
  return result;
}

unint64_t sub_1B09746EC@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  uint64_t v51;
  unsigned __int16 v52;
  uint64_t v53;
  unsigned __int16 v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;

  v4 = *a1;
  v5 = a1[1];
  v71 = a1[2];
  v70 = a1[3];
  v69 = a1[7];
  v65 = a1[8];
  v62 = a1[9];
  v59 = a1[10];
  v57 = a1[11];
  v58 = a1[12];
  v68 = a1[14];
  v67 = a1[15];
  v66 = *((unsigned __int8 *)a1 + 32);
  v64 = *((unsigned __int8 *)a1 + 33);
  v63 = *((unsigned __int8 *)a1 + 34);
  v61 = *((unsigned __int8 *)a1 + 35);
  v60 = *((unsigned __int8 *)a1 + 36);
  v76 = *((unsigned __int8 *)a1 + 37);
  v75 = *((unsigned __int8 *)a1 + 38);
  v74 = *((unsigned __int8 *)a1 + 39);
  v77 = *((unsigned __int8 *)a1 + 40);
  v73 = *((unsigned __int8 *)a1 + 41);
  v72 = *((unsigned int *)a1 + 11);
  v78 = *((unsigned int *)a1 + 13);
  v6 = *((unsigned int *)a1 + 15);
  v7 = a1[36];
  v8 = a1[37];
  v9 = a1[38];
  v10 = a1[39];
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((unsigned __int8 *)a1 + 88);
  v13 = *(_QWORD *)(a1 + 45);
  v14 = a1[49];
  v15 = *((unsigned __int8 *)a1 + 100);
  v16 = *(unsigned int *)(a1 + 51);
  v17 = *((unsigned __int8 *)a1 + 106);
  if (*a1)
  {
    v80 = *((_BYTE *)a1 + 88);
    v79 = *((_BYTE *)a1 + 100);
    v81 = *((_BYTE *)a1 + 106);
    v51 = *((_QWORD *)a1 + 10);
    v52 = a1[38];
    v49 = a1[37];
    v50 = a1[35];
    v54 = a1[49];
    v55 = *(_DWORD *)(a1 + 51);
    v53 = *(_QWORD *)(a1 + 45);
    v45 = a1[33];
    v46 = a1[34];
    v44 = a1[32];
    v47 = a1[36];
    v48 = a1[39];
    v18 = *((_DWORD *)a1 + 14);
    v19 = *((_DWORD *)a1 + 12);
    v20 = a1[4];
    v21 = a1[5];
    v22 = a1[6];
    v23 = a1[13];
    v24 = swift_allocObject();
    v25 = v5;
    v26 = v24;
    *(_WORD *)(v24 + 18) = v25;
    *(_WORD *)(v24 + 20) = v71;
    *(_WORD *)(v24 + 22) = v70;
    *(_WORD *)(v24 + 24) = v20;
    *(_WORD *)(v24 + 26) = v21;
    *(_WORD *)(v24 + 28) = v22;
    *(_WORD *)(v24 + 30) = v69;
    *(_WORD *)(v24 + 32) = v65;
    *(_WORD *)(v24 + 34) = v62;
    *(_WORD *)(v24 + 36) = v59;
    *(_WORD *)(v24 + 38) = v57;
    *(_WORD *)(v24 + 40) = v58;
    *(_WORD *)(v24 + 16) = v4;
    *(_WORD *)(v24 + 42) = v23;
    *(_WORD *)(v24 + 44) = v68;
    *(_WORD *)(v24 + 46) = v67;
    *(_BYTE *)(v24 + 48) = v66;
    *(_BYTE *)(v24 + 49) = v64;
    *(_BYTE *)(v24 + 50) = v63;
    *(_BYTE *)(v24 + 51) = v61;
    *(_BYTE *)(v24 + 52) = v60;
    *(_BYTE *)(v24 + 53) = v76;
    *(_BYTE *)(v24 + 54) = v75;
    *(_BYTE *)(v24 + 55) = v74;
    *(_BYTE *)(v24 + 56) = v77;
    *(_BYTE *)(v24 + 57) = v73;
    *(_DWORD *)(v24 + 60) = v72;
    *(_DWORD *)(v24 + 64) = v19;
    *(_DWORD *)(v24 + 68) = v78;
    *(_DWORD *)(v24 + 72) = v18;
    *(_DWORD *)(v24 + 76) = v6;
    *(_WORD *)(v24 + 80) = v44;
    *(_WORD *)(v24 + 82) = v45;
    *(_WORD *)(v24 + 84) = v46;
    *(_WORD *)(v24 + 86) = v50;
    *(_WORD *)(v24 + 88) = v47;
    *(_WORD *)(v24 + 90) = v49;
    *(_WORD *)(v24 + 92) = v52;
    *(_WORD *)(v24 + 94) = v48;
    *(_QWORD *)(v24 + 96) = v51;
    *(_BYTE *)(v24 + 104) = v80;
    *(_QWORD *)(v24 + 106) = v53;
    *(_WORD *)(v24 + 114) = v54;
    *(_BYTE *)(v24 + 116) = v79;
    *(_DWORD *)(v24 + 118) = v55;
    *(_BYTE *)(v24 + 122) = v81;
    *(_QWORD *)(v24 + 128) = a2;
    swift_retain();
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    result = 0;
    v32 = 0;
    v11 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = (unint64_t)sub_1B0977544;
    v37 = 257;
    v38 = (unint64_t)sub_1B096CCA4;
  }
  else
  {
    v38 = a1[4] | ((unint64_t)a1[5] << 16) | ((unint64_t)a1[6] << 32) | (v69 << 48);
    v27 = v65 | (v62 << 16) | (v59 << 32) | (v57 << 48);
    v36 = v58 | ((unint64_t)a1[13] << 16) | (v68 << 32) | (v67 << 48);
    v37 = (v5 << 16) | (v71 << 32) | (v70 << 48);
    v26 = v66 | (v64 << 8) | (v63 << 16) | (v61 << 24) | (v60 << 32) | (v76 << 40) | (v75 << 48) | (v74 << 56);
    v28 = v77 | (v73 << 8) | (v72 << 32);
    v29 = *((unsigned int *)a1 + 12) | (unint64_t)(v78 << 32);
    v30 = *((unsigned int *)a1 + 14) | (unint64_t)(v6 << 32);
    result = a1[32] | ((unint64_t)a1[33] << 16) | ((unint64_t)a1[34] << 32) | ((unint64_t)a1[35] << 48);
    v32 = v7 | (v8 << 16) | (v9 << 32) | (v10 << 48);
    v39 = v15 == 0;
    v33 = v12 | (v13 << 16);
    v40 = 0x100000000;
    if (v39)
      v40 = 0;
    *((_QWORD *)&v41 + 1) = v14;
    *(_QWORD *)&v41 = v13;
    v42 = v40 | (v41 >> 48);
    if (v17)
      v43 = 0x10000;
    else
      v43 = 0;
    v35 = v43 & 0xFFFF0000 | WORD1(v16);
    v34 = v42 | (v16 << 48);
  }
  *(_QWORD *)a3 = v37;
  *(_QWORD *)(a3 + 8) = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v36;
  *(_QWORD *)(a3 + 32) = v26;
  *(_QWORD *)(a3 + 40) = v28;
  *(_QWORD *)(a3 + 48) = v29;
  *(_QWORD *)(a3 + 56) = v30;
  *(_QWORD *)(a3 + 64) = result;
  *(_QWORD *)(a3 + 72) = v32;
  *(_QWORD *)(a3 + 80) = v11;
  *(_QWORD *)(a3 + 88) = v33;
  *(_QWORD *)(a3 + 96) = v34;
  *(_WORD *)(a3 + 104) = v35;
  *(_BYTE *)(a3 + 106) = BYTE2(v35);
  *(_BYTE *)(a3 + 107) = v4 == 0;
  return result;
}

__n128 sub_1B0974B5C@<Q0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  __n128 v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  int v16;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_WORD *)a1 + 20);
  v8 = *(__n128 *)((char *)a1 + 44);
  v9 = *((_DWORD *)a1 + 15);
  v10 = a1[4];
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((_BYTE *)a1 + 88);
  v13 = *(_QWORD *)((char *)a1 + 90);
  v14 = *((_WORD *)a1 + 49);
  v15 = *((_BYTE *)a1 + 100);
  v16 = *(_DWORD *)((char *)a1 + 102);
  v17 = *((_BYTE *)a1 + 106);
  swift_setAtWritableKeyPath();
  result = v8;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_WORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 44) = v8;
  *(_DWORD *)(a2 + 60) = v9;
  *(_OWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 80) = v11;
  *(_BYTE *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 90) = v13;
  *(_WORD *)(a2 + 98) = v14;
  *(_BYTE *)(a2 + 100) = v15;
  *(_DWORD *)(a2 + 102) = v16;
  *(_BYTE *)(a2 + 106) = v17;
  return result;
}

unint64_t sub_1B0974C78(_DWORD *a1, _WORD *a2, _WORD *a3, _BYTE *a4, uint64_t *a5, uint64_t *a6, uint64_t (**a7)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6), uint64_t a8, uint64_t a9)
{
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v30;
  uint64_t v31;
  uint64_t v39[2];
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  char v51[48];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t (**v56)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char);

  v56 = a7;
  v11 = v9[5];
  v48 = v9[4];
  v49 = v11;
  v50[0] = v9[6];
  *(_OWORD *)((char *)v50 + 10) = *(_OWORD *)((char *)v9 + 106);
  v12 = v9[1];
  v44 = *v9;
  v45 = v12;
  v13 = v9[3];
  v15 = *v9;
  v14 = v9[1];
  v46 = v9[2];
  v47 = v13;
  v16 = *(_QWORD *)(a8 + 16);
  v55 = *((_QWORD *)v9 + 6);
  v53 = v14;
  v54 = v46;
  v52 = v15;
  v17 = BYTE8(v13);
  v18 = BYTE9(v13);
  v19 = v48;
  v40 = *(_OWORD *)a8;
  v41 = v16;
  swift_bridgeObjectRetain_n();
  v21 = sub_1B08C1C28(v39, &v40, a9);
  if (v10)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = v20;
    v24 = sub_1B08A9364(&v40, a9, v17 & 1 | ((v18 & 1u) << 8), (void (*)(uint64_t *__return_ptr, _QWORD *))v19, *((uint64_t *)&v19 + 1));
    v31 = v25;
    v26 = v22;
    swift_bridgeObjectRelease();
    v27 = v39[0];
    v28 = v39[1];
    v42 = v40;
    v43 = v41;
    sub_1B08CE970((uint64_t)&v49, (uint64_t)v51, &qword_1EEEBAA70);
    v29 = sub_1B08BA788(&v42, a9);
    swift_bridgeObjectRelease();
    v30 = v43;
    *(_OWORD *)a8 = v42;
    *(_QWORD *)(a8 + 16) = v30;
    *a1 = HIDWORD(v21);
    *a2 = v26;
    *a3 = WORD1(v26);
    *a4 = BYTE4(v26) & 1;
    *a5 = v27;
    a5[1] = v28;
    *a6 = v24;
    a6[1] = v31;
    *v56 = v29;
  }
  return v21;
}

uint64_t sub_1B0974E90(_WORD *a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int128 *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v18;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  _WORD v34[4];
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _WORD *v47;

  v11 = v9;
  v47 = a2;
  v18 = *(_QWORD *)(a8 + 16);
  v45 = *(_OWORD *)a8;
  v46 = v18;
  swift_bridgeObjectRetain();
  sub_1B0971A58(&v45, v11, a9, (uint64_t)v34);
  if (v10)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v46;
  *(_OWORD *)a8 = v45;
  *(_QWORD *)(a8 + 16) = v20;
  v32 = v34[0];
  v21 = v34[2];
  v22 = v36;
  v23 = v38;
  v24 = v40;
  v25 = v42;
  v26 = v44;
  v27 = v35;
  v28 = v37;
  v29 = v39;
  v30 = v41;
  v31 = v43;
  *a1 = v34[1];
  *v47 = v21;
  *(_OWORD *)a3 = v27;
  *(_QWORD *)(a3 + 16) = v22;
  *(_OWORD *)a4 = v28;
  *(_QWORD *)(a4 + 16) = v23;
  *(_OWORD *)a5 = v29;
  *(_QWORD *)(a5 + 16) = v24;
  *(_OWORD *)a6 = v30;
  *(_QWORD *)(a6 + 16) = v25;
  *(_OWORD *)a7 = v31;
  *(_QWORD *)(a7 + 16) = v26;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return v32;
}

uint64_t sub_1B0975044(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  if (*a1 == v3)
  {
    v6 = MEMORY[0x1E0DEE9D8];
LABEL_21:
    *a1 = v4;
    a1[1] = v3;
    a1[2] = v5;
    return v6;
  }
  else
  {
    v17 = a1;
    result = swift_bridgeObjectRetain();
    v6 = MEMORY[0x1E0DEE9D8];
    v9 = v4;
    while (!__OFSUB__(v3, v9))
    {
      if (v3 - v9 <= 1)
      {
        sub_1B0A1D8A0();
        swift_bridgeObjectRelease();
        sub_1B08A36F0();
        swift_allocError();
        *v16 = 0;
        v16[1] = v9;
        v16[2] = 0xD00000000000002BLL;
        v16[3] = 0x80000001B0A25FD0;
        v16[4] = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v6;
      }
      if (v9 > 0x7FFFFFFFFFFFFFFDLL)
        goto LABEL_24;
      v10 = v9 + 2;
      if (v3 < v9 + 2)
        goto LABEL_24;
      if (v4 < 0)
        goto LABEL_25;
      v11 = *(_QWORD *)(v5 + 16);
      if (v11 < v9 || v11 < v10)
        goto LABEL_26;
      v12 = bswap32(*(unsigned __int16 *)(v5 + v9 + 32)) >> 16;
      if ((a3 & 1) != 0)
        v13 = v12;
      else
        v13 = *(_WORD *)(v5 + v9 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B08B7B68(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
        v6 = result;
      }
      v15 = *(_QWORD *)(v6 + 16);
      v14 = *(_QWORD *)(v6 + 24);
      if (v15 >= v14 >> 1)
      {
        result = (uint64_t)sub_1B08B7B68((char *)(v14 > 1), v15 + 1, 1, (char *)v6);
        v6 = result;
      }
      *(_QWORD *)(v6 + 16) = v15 + 1;
      *(_WORD *)(v6 + 2 * v15 + 32) = v13;
      v9 += 2;
      if (v3 == v10)
      {
        swift_bridgeObjectRelease();
        v4 = v3;
        a1 = v17;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t *sub_1B0975248(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *result;
  if (a3 < 0)
  {
    sub_1B0A1D8A0();
    swift_bridgeObjectRelease();
    sub_1B0A1DA68();
    sub_1B0A1D33C();
    swift_bridgeObjectRelease();
    v5 = 0xD000000000000023;
    v6 = 0x80000001B0A26EC0;
    sub_1B08A36F0();
    swift_allocError();
    *v7 = 2;
    goto LABEL_6;
  }
  v4 = result[1];
  if (__OFSUB__(v4, v3))
  {
    __break(1u);
  }
  else
  {
    if (v4 - v3 < a3)
    {
      sub_1B0A1D8A0();
      swift_bridgeObjectRelease();
      sub_1B0A1DA68();
      sub_1B0A1D33C();
      swift_bridgeObjectRelease();
      v5 = 0xD000000000000024;
      v6 = 0x80000001B0A26E90;
      sub_1B08A36F0();
      swift_allocError();
      *v7 = 0;
LABEL_6:
      v7[1] = v3;
      v7[2] = v5;
      v7[3] = v6;
      v7[4] = 0;
      swift_willThrow();
      return (uint64_t *)v3;
    }
    v8 = v3 + a3;
    if (v3 + a3 >= v3 && v4 >= v8)
    {
      *result = v8;
      return (uint64_t *)v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_1B09753FC(__int128 *a1, void (*a2)(id *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  __int128 v11;
  uint64_t v12;
  id v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  id v19;
  uint64_t v20;

  v8 = *((_QWORD *)a1 + 2);
  v17 = *a1;
  *(_QWORD *)&v18 = v8;
  swift_bridgeObjectRetain();
  v9 = sub_1B08C9FC0((unint64_t *)&v17, a4);
  if (v4)
  {
    swift_bridgeObjectRelease();
    return (uint64_t *)a4;
  }
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = v17;
  v12 = v18;
  *a1 = v17;
  *((_QWORD *)a1 + 2) = v12;
  v20 = v10;
  a2(&v19, &v20);
  v13 = v19;
  v17 = v11;
  *(_QWORD *)&v18 = v12;
  swift_bridgeObjectRetain();
  result = sub_1B091D32C((uint64_t *)&v17, a4, (uint64_t)v13);
  v16 = v18;
  if (__OFSUB__(v15, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v15 < (uint64_t)result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__OFSUB__(v15, result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (__OFADD__(result, v15 - (_QWORD)result))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v15 >= (uint64_t)result)
  {
    swift_bridgeObjectRetain();
    a4 = sub_1B0A1D2F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *a1 = v17;
    *((_QWORD *)a1 + 2) = v16;
    return (uint64_t *)a4;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t *sub_1B0975684(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, __int16 *);
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, __int16 *);
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v5 = *((_QWORD *)a1 + 2);
  v17 = *a1;
  v18 = v5;
  swift_bridgeObjectRetain();
  v6 = sub_1B097990C((unint64_t *)&v17);
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 1;
    v9 = (void (*)(uint64_t *__return_ptr, __int16 *))sub_1B0947040;
    if (v6 != 253)
      v8 = v6;
    if (v6 == 254)
      v8 = 1;
    else
      v9 = 0;
    v10 = v6 == 254 || v6 != 253;
    v11 = v6 != 254 && v6 != 253;
    if (v6 == 255)
      v12 = 1;
    else
      v12 = v8;
    if (v6 == 255)
      v13 = (void (*)(uint64_t *__return_ptr, __int16 *))sub_1B0947070;
    else
      v13 = v9;
    if (v6 == 255)
      v14 = 0;
    else
      v14 = v10;
    if (v6 == 255)
      v15 = 1;
    else
      v15 = v11;
    a2 = sub_1B08BA408((uint64_t *)&v17, (uint64_t)a2, v12, v13, 0, v14 | (unsigned __int16)(v15 << 8));
    sub_1B09772DC(v12, (uint64_t)v13, 0, v14, v15);
    swift_bridgeObjectRelease();
    v16 = v18;
    *a1 = v17;
    *((_QWORD *)a1 + 2) = v16;
  }
  return a2;
}

void sub_1B09758BC(uint64_t *a1, void (*a2)(__int128 *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v8 = a1[2];
  v12 = *(_OWORD *)a1;
  *(_QWORD *)&v13 = v8;
  swift_bridgeObjectRetain();
  v9 = sub_1B08C9FC0((unint64_t *)&v12, a4);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v9;
    swift_bridgeObjectRelease();
    v11 = v13;
    *(_OWORD *)a1 = v12;
    a1[2] = v11;
    v14 = v10;
    a2(&v12, &v14);
    sub_1B091D32C(a1, a4, v12);
  }
}

void *sub_1B0975A90@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, void *a4@<X8>)
{
  void *v4;
  _BYTE *v9;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[27];
  _BYTE __dst[377];
  _BYTE v20[48];
  uint64_t v21;
  char v22;
  _BYTE v23[7];
  _BYTE v24[7];
  _BYTE v25[7];
  _BYTE v26[7];
  _BYTE v27[7];
  _BYTE v28[7];
  _BYTE v29[7];
  _QWORD __src[48];
  __int16 v31;
  char v32;
  char v33;
  int v34;
  BOOL (*v35)(_DWORD *, _DWORD *);
  uint64_t v36;
  _BYTE v37[24];
  BOOL (*v38)(unsigned __int16 *);
  uint64_t v39;
  char v40;
  BOOL (*v41)(_WORD *);
  uint64_t v42;
  __n128 (*v43)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v50 = 1;
  v49 = 1;
  v48 = 1;
  v47 = 1;
  v46 = 1;
  v45 = 1;
  v31 = 257;
  v32 = 1;
  v33 = 1;
  v34 = 1594834165;
  v35 = sub_1B08A0EC0;
  v36 = 0;
  memset(v37, 1, 11);
  v37[16] = 1;
  v38 = sub_1B0948F10;
  v39 = 0;
  v40 = 1;
  v41 = sub_1B0948F20;
  v42 = 0;
  v43 = sub_1B08B5A2C;
  v44 = 0;
  sub_1B096B4DC(1751474532, a1, (uint64_t)v20);
  if ((v22 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1B08ABB40();
    swift_allocError();
    *v9 = 2;
    swift_willThrow();
    memset(v18, 0, 64);
    LOBYTE(v18[4]) = 1;
    *(_DWORD *)((char *)&v18[4] + 1) = *(_DWORD *)v29;
    DWORD1(v18[4]) = *(_DWORD *)&v29[3];
    *((_QWORD *)&v18[4] + 1) = 0;
    *(_QWORD *)&v18[5] = 0;
    BYTE8(v18[5]) = 1;
    *(_DWORD *)((char *)&v18[5] + 9) = *(_DWORD *)v28;
    HIDWORD(v18[5]) = *(_DWORD *)&v28[3];
    memset(&v18[6], 0, 32);
    LOBYTE(v18[8]) = 1;
    *(_DWORD *)((char *)&v18[8] + 1) = *(_DWORD *)v27;
    DWORD1(v18[8]) = *(_DWORD *)&v27[3];
    *(_OWORD *)((char *)&v18[8] + 8) = 0u;
    *(_OWORD *)((char *)&v18[9] + 8) = 0u;
    BYTE8(v18[10]) = 1;
    *(_DWORD *)((char *)&v18[10] + 9) = *(_DWORD *)v26;
    HIDWORD(v18[10]) = *(_DWORD *)&v26[3];
    v18[11] = 0uLL;
    LOBYTE(v18[12]) = 1;
    *(_DWORD *)((char *)&v18[18] + 1) = *(_DWORD *)v24;
    DWORD1(v18[12]) = *(_DWORD *)&v25[3];
    *(_DWORD *)((char *)&v18[12] + 1) = *(_DWORD *)v25;
    *(_OWORD *)((char *)&v18[17] + 1) = 0u;
    *(_OWORD *)((char *)&v18[16] + 8) = 0u;
    *(_OWORD *)((char *)&v18[15] + 8) = 0u;
    *(_OWORD *)((char *)&v18[14] + 8) = 0u;
    *(_OWORD *)((char *)&v18[13] + 8) = 0u;
    *(_OWORD *)((char *)&v18[12] + 8) = 0u;
    DWORD1(v18[18]) = *(_DWORD *)&v24[3];
    *((_QWORD *)&v18[18] + 1) = 0;
    LOBYTE(v18[19]) = 1;
    *(_DWORD *)((char *)&v18[19] + 1) = *(_DWORD *)v23;
    DWORD1(v18[19]) = *(_DWORD *)&v23[3];
    *(_OWORD *)((char *)&v18[19] + 8) = 0u;
    *(_OWORD *)((char *)&v18[20] + 8) = 0u;
    *(_OWORD *)((char *)&v18[21] + 8) = 0u;
    *(_OWORD *)((char *)&v18[22] + 8) = 0u;
    BYTE8(v18[23]) = 0;
    sub_1B08E252C(v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B08ABC08);
    return (void *)sub_1B08ABC38(0, 0, 0);
  }
  else
  {
    v11 = HIWORD(v21);
    sub_1B096B69C(a1, (uint64_t)__src);
    memcpy(__dst, __src, sizeof(__dst));
    swift_bridgeObjectRetain_n();
    sub_1B08E252C(__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B08ABADC);
    v12 = sub_1B0931364(a1);
    if (v4)
    {

      v15 = 0;
      v16 = 0;
      v17 = 0;
    }
    else
    {
      v15 = v12;
      v16 = v13;
      v17 = v14;
    }
    *(_QWORD *)&v18[0] = a1;
    memcpy((char *)v18 + 8, __dst, 0x179uLL);
    *((_QWORD *)&v18[24] + 1) = v15;
    *(_QWORD *)&v18[25] = v16;
    *((_QWORD *)&v18[25] + 1) = v17;
    LOWORD(v18[26]) = v11;
    BYTE2(v18[26]) = a2;
    BYTE3(v18[26]) = a3;
    sub_1B08ABA58(v18);
    sub_1B08E252C(__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B08ABC08);
    swift_bridgeObjectRelease();
    sub_1B08ABB84(v18);
    return memcpy(a4, v18, 0x1A4uLL);
  }
}

char *sub_1B0975DB0(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (char *)MEMORY[0x1E0DEE9D8];
  v3 = (_QWORD *)(swift_bridgeObjectRetain() + 48);
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v6 = a2(*(v3 - 2), *(v3 - 1), *v3);
    if (v8)
    {
      v10 = v6;
      v11 = v7;
      v12 = v8;
      v13 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_1B08B81F4(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v15 = *((_QWORD *)v4 + 2);
      v14 = *((_QWORD *)v4 + 3);
      if (v15 >= v14 >> 1)
        v4 = sub_1B08B81F4((char *)(v14 > 1), v15 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v15 + 1;
      v5 = &v4[32 * v15];
      *((_WORD *)v5 + 16) = v10;
      *((_QWORD *)v5 + 5) = v11;
      *((_QWORD *)v5 + 6) = v12;
      *((_DWORD *)v5 + 14) = v13;
      *((_WORD *)v5 + 30) = WORD2(v13);
    }
    v3 += 3;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t *sub_1B0975EE8(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t *), uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  id v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v8 = *(_QWORD *)(a1 + 16);
  v20 = *(_OWORD *)a1;
  *(_QWORD *)&v21 = v8;
  swift_bridgeObjectRetain();
  v9 = (unsigned __int16)sub_1B0975684(&v20, a4);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v9;
    swift_bridgeObjectRelease();
    v11 = v20;
    v12 = v21;
    *(_OWORD *)a1 = v20;
    *(_QWORD *)(a1 + 16) = v12;
    v22 = v10;
    a2(&v20, &v22);
    v13 = v20;
    v14 = *((_QWORD *)&v20 + 1);
    v15 = v21;
    *(_OWORD *)v18 = v11;
    v19 = v12;
    swift_bridgeObjectRetain();
    sub_1B08C1578((uint64_t *)v18, (uint64_t)a4, v13);
    a4 = (uint64_t *)sub_1B091C84C((uint64_t)v18, (uint64_t)a4, v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v19;
    *(_OWORD *)a1 = *(_OWORD *)v18;
    *(_QWORD *)(a1 + 16) = v17;
  }
  return a4;
}

uint64_t sub_1B0976134(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t *), uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  _QWORD *v12;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD **)(a1 + 16);
  v14 = *(_OWORD *)a1;
  v15 = v9;
  swift_bridgeObjectRetain();
  v10 = (unsigned __int16)sub_1B0975684(&v14, a4);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v10;
    swift_bridgeObjectRelease();
    v12 = v15;
    *(_OWORD *)a1 = v14;
    *(_QWORD *)(a1 + 16) = v12;
    v17 = v11;
    a2(&v14, &v17);
    a3 = sub_1B091C6C8(a1, a4, (void (*)(__int128 *__return_ptr, uint64_t *))v14, *((uint64_t *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return a3;
}

uint64_t sub_1B097632C(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD *)(a1 + 16);
  v14 = *(_OWORD *)a1;
  *(_QWORD *)&v15 = v9;
  swift_bridgeObjectRetain();
  v10 = sub_1B08C9FC0((unint64_t *)&v14, a4);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v10;
    swift_bridgeObjectRelease();
    v12 = v15;
    *(_OWORD *)a1 = v14;
    *(_QWORD *)(a1 + 16) = v12;
    v22 = v11;
    a2(&v14, &v22);
    v17 = v14;
    v18 = v15;
    v19 = v16;
    v20 = v14;
    v21 = v15;
    a3 = sub_1B08AB19C((__int128 *)a1, a4);
    sub_1B0977228((uint64_t)&v20);
    swift_release();
  }
  return a3;
}

unint64_t sub_1B0976534(uint64_t a1, char a2, _QWORD *a3)
{
  unint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
    return swift_bridgeObjectRelease();
  v7 = *(unsigned int *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  sub_1B08A35B0(v9, v8);
  if (v8 >> 60 == 15)
    return swift_bridgeObjectRelease();
  v10 = (_QWORD *)*a3;
  result = sub_1B08F9E7C(v7);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_1B08FC080(v16, v4 & 1);
    result = sub_1B08F9E7C(v7);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    result = sub_1B0A1DAD4();
    __break(1u);
  }
  if ((v4 & 1) == 0)
  {
    v21 = result;
    sub_1B09004A0();
    result = v21;
    v19 = (_QWORD *)*a3;
    if ((v17 & 1) != 0)
    {
LABEL_9:
      v20 = v19[7] + 16 * result;
      sub_1B08A3638(*(_QWORD *)v20, *(_QWORD *)(v20 + 8));
      *(_QWORD *)v20 = v9;
      *(_QWORD *)(v20 + 8) = v8;
      if (--v6)
      {
LABEL_15:
        v4 = (unint64_t *)(a1 + 72);
        do
        {
          v7 = *((unsigned int *)v4 - 4);
          v9 = *(v4 - 1);
          v8 = *v4;
          sub_1B08A35B0(v9, *v4);
          if (v8 >> 60 == 15)
            break;
          v26 = (_QWORD *)*a3;
          result = sub_1B08F9E7C(v7);
          v28 = v26[2];
          v29 = (v27 & 1) == 0;
          v15 = __OFADD__(v28, v29);
          v30 = v28 + v29;
          if (v15)
            goto LABEL_25;
          v17 = v27;
          if (v26[3] < v30)
          {
            sub_1B08FC080(v30, 1);
            result = sub_1B08F9E7C(v7);
            if ((v17 & 1) != (v31 & 1))
              goto LABEL_6;
          }
          v32 = (_QWORD *)*a3;
          if ((v17 & 1) != 0)
          {
            v25 = v32[7] + 16 * result;
            sub_1B08A3638(*(_QWORD *)v25, *(_QWORD *)(v25 + 8));
            *(_QWORD *)v25 = v9;
            *(_QWORD *)(v25 + 8) = v8;
          }
          else
          {
            v32[(result >> 6) + 8] |= 1 << result;
            *(_DWORD *)(v32[6] + 4 * result) = v7;
            v33 = (uint64_t *)(v32[7] + 16 * result);
            *v33 = v9;
            v33[1] = v8;
            v34 = v32[2];
            v15 = __OFADD__(v34, 1);
            v35 = v34 + 1;
            if (v15)
              goto LABEL_26;
            v32[2] = v35;
          }
          v4 += 3;
        }
        while (--v6);
      }
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
LABEL_8:
  v19 = (_QWORD *)*a3;
  if ((v17 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  v19[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(v19[6] + 4 * result) = v7;
  v22 = (uint64_t *)(v19[7] + 16 * result);
  *v22 = v9;
  v22[1] = v8;
  v23 = v19[2];
  v15 = __OFADD__(v23, 1);
  v24 = v23 + 1;
  if (!v15)
  {
    v19[2] = v24;
    if (--v6)
      goto LABEL_15;
    return swift_bridgeObjectRelease();
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1B09767A4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B09767C8()
{
  return sub_1B0959364();
}

uint64_t sub_1B09767E4()
{
  return swift_deallocObject();
}

uint64_t sub_1B09767F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = *(_QWORD *)(a1 + 192);
  v8 = *(_BYTE *)(a1 + 200);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_1B08CE848(v2, v3, v4, v5, v6, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

unint64_t sub_1B09768D0()
{
  unint64_t result;

  result = qword_1EEEBC6E0;
  if (!qword_1EEEBC6E0)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for SfntFontError, &type metadata for SfntFontError);
    atomic_store(result, (unint64_t *)&qword_1EEEBC6E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SfntFontError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SfntFontError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1B09769F0 + 4 * byte_1B0A3CB81[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1B0976A24 + 4 * byte_1B0A3CB7C[v4]))();
}

uint64_t sub_1B0976A24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0976A2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0976A34);
  return result;
}

uint64_t sub_1B0976A40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0976A48);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1B0976A4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0976A54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SfntFontError()
{
  return &type metadata for SfntFontError;
}

uint64_t destroy for SfntTrueTypeFont(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  if (a1[27])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = a1[49];
  if (result)
  {
    swift_bridgeObjectRelease();
    return sub_1B08A3638(a1[50], a1[51]);
  }
  return result;
}

uint64_t initializeWithCopy for SfntTrueTypeFont(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v6 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = v7;
    v8 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = v8;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v9;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  v10 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v10;
  v11 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v11;
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  v12 = *(_QWORD *)(a2 + 392);
  if (v12)
  {
    *(_QWORD *)(a1 + 392) = v12;
    v13 = *(_QWORD *)(a2 + 400);
    v14 = *(_QWORD *)(a2 + 408);
    swift_bridgeObjectRetain();
    sub_1B08A35B0(v13, v14);
    *(_QWORD *)(a1 + 400) = v13;
    *(_QWORD *)(a1 + 408) = v14;
  }
  else
  {
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  }
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  return a1;
}

uint64_t assignWithCopy for SfntTrueTypeFont(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;

  v4 = (_BYTE *)(a2 + 296);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 104);
  v8 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  v9 = *(_OWORD *)(a2 + 144);
  v10 = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  v11 = *(_OWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v11;
  v12 = (_OWORD *)(a1 + 208);
  v13 = (_OWORD *)(a2 + 208);
  v14 = *(_QWORD *)(a2 + 216);
  if (*(_QWORD *)(a1 + 216))
  {
    if (v14)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    }
    else
    {
      sub_1B08CCF8C(a1 + 208);
      v15 = *(_QWORD *)(a2 + 240);
      v16 = *(_OWORD *)(a2 + 224);
      *v12 = *v13;
      *(_OWORD *)(a1 + 224) = v16;
      *(_QWORD *)(a1 + 240) = v15;
    }
  }
  else if (v14)
  {
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *v13;
    v18 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *v12 = v17;
    *(_OWORD *)(a1 + 224) = v18;
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *v4;
  v19 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v19;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = v4[88];
  v20 = (_OWORD *)(a1 + 392);
  v21 = (_OWORD *)(a2 + 392);
  v22 = *(_QWORD *)(a2 + 392);
  if (*(_QWORD *)(a1 + 392))
  {
    if (v22)
    {
      *(_QWORD *)(a1 + 392) = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(a2 + 400);
      v24 = *(_QWORD *)(a2 + 408);
      sub_1B08A35B0(v23, v24);
      v25 = *(_QWORD *)(a1 + 400);
      v26 = *(_QWORD *)(a1 + 408);
      *(_QWORD *)(a1 + 400) = v23;
      *(_QWORD *)(a1 + 408) = v24;
      sub_1B08A3638(v25, v26);
    }
    else
    {
      sub_1B08CCFC0(a1 + 392);
      v29 = *(_QWORD *)(a2 + 408);
      *v20 = *v21;
      *(_QWORD *)(a1 + 408) = v29;
    }
  }
  else if (v22)
  {
    *(_QWORD *)(a1 + 392) = v22;
    v27 = *(_QWORD *)(a2 + 400);
    v28 = *(_QWORD *)(a2 + 408);
    swift_bridgeObjectRetain();
    sub_1B08A35B0(v27, v28);
    *(_QWORD *)(a1 + 400) = v27;
    *(_QWORD *)(a1 + 408) = v28;
  }
  else
  {
    v30 = *v21;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *v20 = v30;
  }
  *(_WORD *)(a1 + 416) = *(_WORD *)(a2 + 416);
  *(_BYTE *)(a1 + 418) = *(_BYTE *)(a2 + 418);
  *(_BYTE *)(a1 + 419) = *(_BYTE *)(a2 + 419);
  return a1;
}

void *__swift_memcpy420_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1A4uLL);
}

uint64_t assignWithTake for SfntTrueTypeFont(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = (_BYTE *)(a2 + 296);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v5 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v5;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  if (*(_QWORD *)(a1 + 216))
  {
    v6 = *(_QWORD *)(a2 + 216);
    if (v6)
    {
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v6;
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      goto LABEL_6;
    }
    sub_1B08CCF8C(a1 + 208);
  }
  v8 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v8;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
LABEL_6:
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *v4;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  v9 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v9;
  v10 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v10;
  *(_BYTE *)(a1 + 384) = v4[88];
  if (!*(_QWORD *)(a1 + 392))
  {
LABEL_10:
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 392);
  if (!v11)
  {
    sub_1B08CCFC0(a1 + 392);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 392) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a1 + 400);
  v13 = *(_QWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  sub_1B08A3638(v12, v13);
LABEL_11:
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  return a1;
}

uint64_t getEnumTagSinglePayload for SfntTrueTypeFont(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 420))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SfntTrueTypeFont(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 408) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_DWORD *)(result + 416) = 0;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 420) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 420) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SfntTrueTypeFont()
{
  return &type metadata for SfntTrueTypeFont;
}

uint64_t sub_1B09771EC()
{
  return sub_1B08CE2D8(&qword_1EEEBC6E8, &qword_1EEEBC6F0, MEMORY[0x1E0DE9ED8]);
}

ValueMetadata *type metadata accessor for SfntTableLookup()
{
  return &type metadata for SfntTableLookup;
}

uint64_t sub_1B0977228(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B0977250(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1B09772B4()
{
  return swift_deallocObject();
}

uint64_t sub_1B09772C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B097A960(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1B09772DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  char v5;

  v5 = a4 & 1;
  if ((a5 & 1) != 0)
    return sub_1B08CE174(a1, a2, a3, v5);
  else
    return sub_1B08CE164(a1, a2, a3, v5);
}

uint64_t sub_1B09772EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_BYTE *)(a1 + 121);
  v8 = *(_BYTE *)(a1 + 120);
  swift_release();
  swift_release();
  swift_release();
  sub_1B08CE408(v2, v3, v4, v5, v6, v8, v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE41C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B08CE44C);
  return a1;
}

uint64_t sub_1B097739C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16)
{
  uint64_t result;

  if ((a16 & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

unsigned int *sub_1B09773D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B08C9508(a1, v2, a2);
}

unint64_t sub_1B09773F0@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B09746EC(a1, v2, a2);
}

unint64_t sub_1B0977408@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B0974144(a1, v2, a2);
}

unint64_t sub_1B0977420@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B0973BA8(a1, v2, a2);
}

uint64_t sub_1B0977438(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1B09774AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  uint64_t result;

  if ((a15 & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B09774E8()
{
  swift_release();
  return swift_deallocObject();
}

double sub_1B097750C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1B0974028((__int128 *)(v1 + 16), a1).n128_u64[0];
  return result;
}

double sub_1B0977528@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1B09745C8((__int128 *)(v1 + 16), a1).n128_u64[0];
  return result;
}

double sub_1B0977544@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1B0974B5C((__int128 *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_1B0977560(uint64_t a1)
{
  sub_1B08CE6D0(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112), *(_BYTE *)(a1 + 113));
  return a1;
}

uint64_t sub_1B09775C0()
{
  uint64_t v0;

  sub_1B08A3638(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_1B09775E4(uint64_t a1)
{
  sub_1B08CE7CC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_WORD *)(a1 + 40), *(_BYTE *)(a1 + 42));
  return a1;
}

BOOL static CFFError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t CFFError.hash(into:)()
{
  return sub_1B0A1DB34();
}

uint64_t CFFError.hashValue.getter()
{
  sub_1B0A1DB28();
  sub_1B0A1DB34();
  return sub_1B0A1DB70();
}

unint64_t sub_1B09776A4()
{
  unint64_t result;

  result = qword_1EEEBC708;
  if (!qword_1EEEBC708)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for CFFError, &type metadata for CFFError);
    atomic_store(result, (unint64_t *)&qword_1EEEBC708);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CFFError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B0977734 + 4 * byte_1B0A3CD09[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B0977768 + 4 * byte_1B0A3CD04[v4]))();
}

uint64_t sub_1B0977768(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0977770(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0977778);
  return result;
}

uint64_t sub_1B0977784(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B097778CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B0977790(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0977798(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CFFError()
{
  return &type metadata for CFFError;
}

__n128 sub_1B09777B4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  int v3;
  __int128 v4;
  __n128 result;

  v2 = *(_WORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 60);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_WORD *)(a2 + 40) = v2;
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(_DWORD *)(a2 + 60) = v3;
  result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 1;
  *(_QWORD *)(a2 + 90) = 0;
  *(_WORD *)(a2 + 98) = 0;
  *(_BYTE *)(a2 + 100) = 1;
  *(_DWORD *)(a2 + 102) = 0;
  *(_BYTE *)(a2 + 106) = 1;
  return result;
}

ValueMetadata *type metadata accessor for OS2Table.Selection()
{
  return &type metadata for OS2Table.Selection;
}

uint64_t __swift_memcpy10_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for OS2Table.PanoseClassification(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OS2Table.PanoseClassification(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OS2Table.PanoseClassification()
{
  return &type metadata for OS2Table.PanoseClassification;
}

ValueMetadata *type metadata accessor for OS2Table.PanoseClassification.Proportion()
{
  return &type metadata for OS2Table.PanoseClassification.Proportion;
}

_DWORD *__swift_memcpy4_2(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for OS2Table.V5Fields()
{
  return &type metadata for OS2Table.V5Fields;
}

uint64_t __swift_memcpy10_2(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for OS2Table.V2Fields()
{
  return &type metadata for OS2Table.V2Fields;
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for OS2Table.V1Fields()
{
  return &type metadata for OS2Table.V1Fields;
}

__n128 __swift_memcpy107_4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 91) = *(__int128 *)((char *)a2 + 91);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OS2Table(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 107))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OS2Table(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 106) = 0;
    *(_WORD *)(result + 104) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 107) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OS2Table()
{
  return &type metadata for OS2Table;
}

uint64_t sub_1B097799C()
{
  return MEMORY[0x1E0DEE080];
}

uint64_t sub_1B09779A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B09779B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B09779C8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B09779DC()
{
  unint64_t result;

  result = qword_1EEEBC7E0;
  if (!qword_1EEEBC7E0)
  {
    result = MEMORY[0x1B5E0D530]("uLw5", &type metadata for OS2Table.Selection);
    atomic_store(result, (unint64_t *)&qword_1EEEBC7E0);
  }
  return result;
}

unint64_t sub_1B0977A24()
{
  unint64_t result;

  result = qword_1EEEBC7E8;
  if (!qword_1EEEBC7E8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3CECC, &type metadata for OS2Table.Selection);
    atomic_store(result, (unint64_t *)&qword_1EEEBC7E8);
  }
  return result;
}

unint64_t sub_1B0977A6C()
{
  unint64_t result;

  result = qword_1EEEBC7F0;
  if (!qword_1EEEBC7F0)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3CF24, &type metadata for OS2Table.Selection);
    atomic_store(result, (unint64_t *)&qword_1EEEBC7F0);
  }
  return result;
}

unint64_t sub_1B0977AB4()
{
  unint64_t result;

  result = qword_1EEEBC7F8;
  if (!qword_1EEEBC7F8)
  {
    result = MEMORY[0x1B5E0D530](&unk_1B0A3CF5C, &type metadata for OS2Table.Selection);
    atomic_store(result, (unint64_t *)&qword_1EEEBC7F8);
  }
  return result;
}

__n128 __swift_memcpy80_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for OS2Table.V0Fields(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OS2Table.V0Fields(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OS2Table.V0Fields()
{
  return &type metadata for OS2Table.V0Fields;
}

uint64_t sub_1B0977B84()
{
  return sub_1B0977C24(&qword_1EEEBC800, &qword_1EEEBC808);
}

uint64_t sub_1B0977BA8()
{
  return sub_1B0977C24(&qword_1EEEBC810, &qword_1EEEBC818);
}

uint64_t sub_1B0977BCC()
{
  return sub_1B0977C24(&qword_1EEEBC820, qword_1EEEBC828);
}

uint64_t sub_1B0977BF0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1B0977C00()
{
  return sub_1B0977C24(&qword_1EEEBC868, &qword_1EEEBC870);
}

uint64_t sub_1B0977C24(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0D65CC0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0977C68(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  char *v10[2];

  sub_1B08A35B0(a1, a2);
  sub_1B08A35F4();
  v6 = sub_1B0A1D090();
  v10[0] = (char *)MEMORY[0x1E0DEE9D8];
  v10[1] = 0;
  sub_1B0977D7C(v6, v7, v8, v10, a3, a4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B0977D00@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result | 0x100;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

unsigned __int8 *sub_1B0977D14@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  if (((a2 - 247) & 0xFFFFFF00) != 0)
    __break(1u);
  else
    *a3 = (*result | ((unint64_t)(a2 + 9) << 8)) + 108;
  return result;
}

_QWORD *sub_1B0977D3C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

unsigned __int8 *sub_1B0977D50@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  if (((a2 - 251) & 0xFFFFFF00) != 0)
    __break(1u);
  else
    *a3 = -108 - (*result | ((unint64_t)(a2 + 5) << 8));
  return result;
}

uint64_t sub_1B0977D7C(uint64_t result, int64_t a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6)
{
  int64_t v8;
  unint64_t v9;
  void (*v10)(void *, uint64_t, uint64_t, uint64_t, void *, char);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(void *, uint64_t, uint64_t, uint64_t, void *, char);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  void (*v27)(uint64_t);
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  BOOL v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  _QWORD *v141;
  char *v142;
  char v143;
  id v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  id v148;
  _BYTE *v149;
  _BYTE *v150;
  uint64_t v151;
  _QWORD *(*v152)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  _QWORD *(*v153)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t v154;
  _BYTE *v155;
  void (*v156)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  char **v160;
  int64_t v161;
  uint64_t v162;
  __int128 v163;
  void *v164;
  id v165[2];
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  id v169;

  if (result == a2)
    return result;
  v8 = a2;
  v9 = result;
  swift_bridgeObjectRetain();
  v10 = sub_1B0945C74;
  v160 = a4;
  while (1)
  {
    if (__OFSUB__(v8, v9))
    {
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      __break(1u);
      JUMPOUT(0x1B0979770);
    }
    if ((uint64_t)(v8 - v9) <= 0)
    {
      *(_QWORD *)&v166 = 0;
      *((_QWORD *)&v166 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      sub_1B0A1D8A0();
      swift_bridgeObjectRelease();
      sub_1B08A36F0();
      swift_allocError();
      *v141 = 0;
      v141[1] = v9;
      v141[2] = 0xD00000000000002ALL;
      v141[3] = 0x80000001B0A25FA0;
      v141[4] = 0;
      swift_willThrow();
      return swift_bridgeObjectRelease_n();
    }
    if (v9 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_149;
    v13 = v9 + 1;
    if (v8 < (uint64_t)(v9 + 1))
      goto LABEL_149;
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_150;
    v14 = *(_QWORD *)(a3 + 16);
    if (v14 < v9 || v14 < v13)
      goto LABEL_151;
    v15 = *(unsigned __int8 *)(a3 + v9 + 32);
    swift_bridgeObjectRetain();
    if ((_DWORD)v15 == 12)
      break;
    if (v15 < 0x20)
    {
      v161 = v8;
      sub_1B0945CEC(v15, 0, 0, 1, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
      v21 = v10;
      sub_1B0945CEC(v15, 0, 0, 1, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
      sub_1B0945D24(v15, 0, 0, 1, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44);
      ++v9;
      v22 = a3;
      goto LABEL_19;
    }
    if (v15 < 0xF7)
    {
      v28 = v15 - 139;
      sub_1B0945CEC(v15 - 139, 1, 0, 0, 256, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
      sub_1B0945CEC(v15 - 139, 1, 0, 0, 256, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
      sub_1B0945D24(v15 - 139, 1, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44);
      ++v9;
      v162 = a3;
      goto LABEL_37;
    }
    if (v15 < 0xFB)
    {
      v29 = swift_allocObject();
      *(_BYTE *)(v29 + 16) = v15;
      *(_QWORD *)&v166 = v9 + 1;
      *((_QWORD *)&v166 + 1) = v8;
      *(_QWORD *)&v167 = a3;
      swift_bridgeObjectRetain_n();
      sub_1B0945CEC((uint64_t)sub_1B0979A54, v29, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      swift_retain();
      v30 = sub_1B097990C((unint64_t *)&v166);
      if (v164)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B0945CEC((uint64_t)sub_1B0979A54, v29, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
        sub_1B0945CEC((uint64_t)sub_1B0979A54, v29, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
        goto LABEL_130;
      }
      v31 = *(unsigned __int8 *)(v29 + 16) - 247;
      if ((*(_BYTE *)(v29 + 16) + 9) != v31)
        goto LABEL_152;
      v32 = v30;
      swift_bridgeObjectRelease();
      v9 = v166;
      v162 = v167;
      v8 = *((_QWORD *)&v166 + 1);
      swift_bridgeObjectRelease();
      swift_release();
      v28 = (v32 | ((unint64_t)v31 << 8)) + 108;
      sub_1B0945CEC((uint64_t)sub_1B0979A54, v29, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945CEC((uint64_t)sub_1B0979A54, v29, (uint64_t)sub_1B0977D3C, 0, 257, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
LABEL_36:
      a4 = v160;
      goto LABEL_37;
    }
    if ((_DWORD)v15 != 255)
    {
      v35 = swift_allocObject();
      *(_BYTE *)(v35 + 16) = v15;
      *(_QWORD *)&v166 = v9 + 1;
      *((_QWORD *)&v166 + 1) = v8;
      *(_QWORD *)&v167 = a3;
      swift_bridgeObjectRetain();
      sub_1B0945CEC((uint64_t)sub_1B0979A14, v35, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      swift_bridgeObjectRetain();
      sub_1B0945CEC((uint64_t)sub_1B0979A14, v35, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
      swift_retain();
      v36 = sub_1B097990C((unint64_t *)&v166);
      if (v164)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B0945CEC((uint64_t)sub_1B0979A14, v35, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
        sub_1B0945CEC((uint64_t)sub_1B0979A14, v35, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
        v151 = (uint64_t)sub_1B0979A14;
        v152 = (_QWORD *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>))v35;
        v153 = sub_1B0979B94;
        v154 = 0;
LABEL_142:
        sub_1B0945C74((void *)v151, (uint64_t)v152, (uint64_t)v153, 0, (void *)v154, 0);
LABEL_130:
        v169 = v164;
        v144 = v164;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EEEBA7D0);
        if (!swift_dynamicCast())
        {

          sub_1B08A36F0();
          swift_allocError();
          *v147 = v164;
          v147[1] = v13;
          v147[2] = 0x7272652072657355;
          v147[3] = 0xEA0000000000726FLL;
          v147[4] = v164;
          v148 = v164;
          swift_willThrow();
          return swift_bridgeObjectRelease_n();
        }

        v163 = v167;
        *(_OWORD *)v165 = v166;
        v145 = v168;
        sub_1B08A36F0();
        swift_allocError();
        *(_OWORD *)v146 = *(_OWORD *)v165;
        *(_OWORD *)(v146 + 16) = v163;
        *(_QWORD *)(v146 + 32) = v145;
        swift_willThrow();

        return swift_bridgeObjectRelease_n();
      }
      v37 = *(unsigned __int8 *)(v35 + 16) - 251;
      if ((*(_BYTE *)(v35 + 16) + 5) != v37)
        goto LABEL_153;
      v38 = v36;
      swift_bridgeObjectRelease();
      v9 = v166;
      v162 = v167;
      v8 = *((_QWORD *)&v166 + 1);
      swift_bridgeObjectRelease();
      swift_release();
      v28 = -108 - (v38 | ((unint64_t)v37 << 8));
      sub_1B0945CEC((uint64_t)sub_1B0979A14, v35, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945CEC((uint64_t)sub_1B0979A14, v35, (uint64_t)sub_1B0979B94, 0, 0, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C74);
      sub_1B0945C74(sub_1B0979A14, v35, (uint64_t)sub_1B0979B94, 0, 0, 0);
      goto LABEL_36;
    }
    sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
    *(_QWORD *)&v166 = v9 + 1;
    *((_QWORD *)&v166 + 1) = v8;
    *(_QWORD *)&v167 = a3;
    swift_bridgeObjectRetain();
    sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
    swift_bridgeObjectRetain();
    sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
    v34 = sub_1B08C15D0((uint64_t *)&v166, v33, 1);
    if (v164)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
      sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
      sub_1B0945C74((void *)1, (uint64_t)sub_1B0979B94, 0, 0, (void *)1, 0);
      v151 = 1;
      v152 = sub_1B0979B94;
      v153 = 0;
      v154 = 1;
      goto LABEL_142;
    }
    LODWORD(v28) = v34;
    swift_bridgeObjectRelease();
    v9 = v166;
    v162 = v167;
    v8 = *((_QWORD *)&v166 + 1);
    swift_bridgeObjectRelease();
    v28 = (int)v28;
    sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
    sub_1B0945CEC(1, (uint64_t)sub_1B0979B94, 0, 0, 1, 0, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
    sub_1B0945C74((void *)1, (uint64_t)sub_1B0979B94, 0, 0, (void *)1, 0);
    sub_1B0945C74((void *)1, (uint64_t)sub_1B0979B94, 0, 0, (void *)1, 0);
LABEL_37:
    swift_bridgeObjectRelease();
    v39 = *a4;
    v40 = *((_QWORD *)*a4 + 2);
    if (v40 > 0x2F)
      goto LABEL_134;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v39 = sub_1B08B5E40(0, v40 + 1, 1, v39);
    v42 = *((_QWORD *)v39 + 2);
    v41 = *((_QWORD *)v39 + 3);
    if (v42 >= v41 >> 1)
      v39 = sub_1B08B5E40((char *)(v41 > 1), v42 + 1, 1, v39);
    *((_QWORD *)v39 + 2) = v42 + 1;
    *(_QWORD *)&v39[8 * v42 + 32] = v28;
    a4 = v160;
    *v160 = v39;
    a3 = v162;
LABEL_43:
    v10 = sub_1B0945C74;
LABEL_6:
    if (v9 == v8)
      return swift_bridgeObjectRelease();
  }
  sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
  *(_QWORD *)&v166 = v9 + 1;
  *((_QWORD *)&v166 + 1) = v8;
  *(_QWORD *)&v167 = a3;
  swift_bridgeObjectRetain();
  sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
  swift_bridgeObjectRetain();
  sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE1A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D38, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945D68);
  v17 = sub_1B08C9FC0((unint64_t *)&v166, v16);
  if (v164)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
    sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
    sub_1B0945D24(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44);
    sub_1B0945D24(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44);
    goto LABEL_130;
  }
  v18 = v17;
  swift_bridgeObjectRelease();
  v19 = v166;
  v20 = v167;
  v161 = *((_QWORD *)&v166 + 1);
  swift_bridgeObjectRelease();
  v15 = v18 | 0x100;
  sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
  v21 = v10;
  sub_1B0945CEC(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))v10);
  sub_1B0945D24(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44);
  v9 = v19;
  sub_1B0945D24(1, (uint64_t)sub_1B0977D00, 0, 0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B08CE174, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1B0945C44);
  a4 = v160;
  v22 = v20;
LABEL_19:
  swift_bridgeObjectRelease();
  v10 = v21;
  v8 = v161;
  switch(v15)
  {
    case 1:
      v23 = *a4;
      if (*((_QWORD *)*a4 + 2) <= 1uLL)
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v24 = *((_QWORD *)v23 + 4);
      v25 = *((_QWORD *)v23 + 5);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 88);
      goto LABEL_3;
    case 2:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
LABEL_141:
      swift_bridgeObjectRelease();
      sub_1B0945C00();
      swift_allocError();
      *v150 = 2;
      return swift_willThrow();
    case 3:
      v43 = *a4;
      if (*((_QWORD *)*a4 + 2) <= 1uLL)
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v24 = *((_QWORD *)v43 + 4);
      v25 = *((_QWORD *)v43 + 5);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 104);
      goto LABEL_3;
    case 4:
      v44 = *a4;
      if (!*((_QWORD *)*a4 + 2))
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v45 = *((_QWORD *)v44 + 4);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 56);
      goto LABEL_54;
    case 5:
      v46 = *a4;
      if (*((_QWORD *)*a4 + 2) <= 1uLL)
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v24 = *((_QWORD *)v46 + 4);
      v25 = *((_QWORD *)v46 + 5);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48);
      goto LABEL_3;
    case 6:
      v47 = *a4;
      if (!*((_QWORD *)*a4 + 2))
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v48 = *((_QWORD *)v47 + 4);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48);
      goto LABEL_73;
    case 7:
      v49 = *a4;
      if (!*((_QWORD *)*a4 + 2))
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v45 = *((_QWORD *)v49 + 4);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48);
LABEL_54:
      v11 = 0;
      v12 = v45;
      goto LABEL_4;
    case 8:
      v50 = *a4;
      if (*((_QWORD *)*a4 + 2) <= 5uLL)
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v51 = *((_QWORD *)v50 + 4);
      v52 = *((_QWORD *)v50 + 5);
      v53 = v22;
      v54 = *((_QWORD *)v50 + 6);
      v55 = *((_QWORD *)v50 + 7);
      v57 = *((_QWORD *)v50 + 8);
      v56 = *((_QWORD *)v50 + 9);
      swift_bridgeObjectRelease();
      v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64);
      v59 = v51;
      v60 = v52;
      v10 = sub_1B0945C74;
      v61 = v54;
      v62 = v55;
      v63 = v57;
      a4 = v160;
      v64 = v56;
      goto LABEL_83;
    case 9:
      swift_bridgeObjectRelease();
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v27 = *(void (**)(uint64_t))(a6 + 72);
      goto LABEL_68;
    case 10:
      v65 = *a4;
      if (!*((_QWORD *)*a4 + 2))
        goto LABEL_135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v66 = *((_QWORD *)v65 + 2);
        if (!v66)
          goto LABEL_154;
      }
      else
      {
        v65 = sub_1B0953AFC((uint64_t)v65);
        v66 = *((_QWORD *)v65 + 2);
        if (!v66)
          goto LABEL_154;
      }
      v67 = v66 - 1;
      v68 = *(_QWORD *)&v65[8 * v67 + 32];
      *((_QWORD *)v65 + 2) = v67;
      *a4 = v65;
      v69 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 120))(v68, a5);
      if (v164)
        return swift_bridgeObjectRelease();
      v71 = v69;
      v72 = v70;
      v73 = (uint64_t)a4[1];
      if (v73 > 9)
      {
        sub_1B0945C00();
        swift_allocError();
        *v155 = 5;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return sub_1B08A3638(v71, v72);
      }
      a4[1] = (char *)(v73 + 1);
      sub_1B0979874((uint64_t)a4, v159, v69, v70);
      sub_1B08A3638(v71, v72);
      v74 = a4[1];
      v75 = __OFSUB__(v74, 1);
      v76 = v74 - 1;
      if (v75)
        goto LABEL_161;
      a4[1] = v76;
LABEL_5:
      a3 = v22;
      goto LABEL_6;
    case 11:
      return swift_bridgeObjectRelease();
    case 13:
      v77 = *a4;
      if (*((_QWORD *)*a4 + 2) <= 1uLL)
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v78 = *((_QWORD *)v77 + 4);
      v79 = *((_QWORD *)v77 + 5);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 8))(v78, v79, a5);
      goto LABEL_5;
    case 14:
      swift_bridgeObjectRelease();
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v27 = *(void (**)(uint64_t))(a6 + 32);
LABEL_68:
      v27(a5);
      goto LABEL_5;
    case 21:
      v80 = *a4;
      if (*((_QWORD *)*a4 + 2) <= 1uLL)
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v24 = *((_QWORD *)v80 + 4);
      v25 = *((_QWORD *)v80 + 5);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 56);
LABEL_3:
      v11 = v24;
      v12 = v25;
      v10 = sub_1B0945C74;
      goto LABEL_4;
    case 22:
      v81 = *a4;
      if (!*((_QWORD *)*a4 + 2))
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v48 = *((_QWORD *)v81 + 4);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 56);
LABEL_73:
      v11 = v48;
      v12 = 0;
LABEL_4:
      v26(v11, v12, a5);
      goto LABEL_5;
    case 30:
      v82 = *a4;
      if (*((_QWORD *)*a4 + 2) <= 3uLL)
        goto LABEL_128;
      *a4 = (char *)MEMORY[0x1E0DEE9D8];
      v83 = *((_QWORD *)v82 + 4);
      v84 = *((_QWORD *)v82 + 5);
      v85 = *((_QWORD *)v82 + 6);
      v86 = *((_QWORD *)v82 + 7);
      swift_bridgeObjectRelease();
      v87 = v84;
      v10 = sub_1B0945C74;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a6 + 64))(0, v83, v87, v85, v86, 0, a5);
      goto LABEL_5;
    case 31:
      v88 = *a4;
      if (*((_QWORD *)*a4 + 2) > 3uLL)
      {
        *a4 = (char *)MEMORY[0x1E0DEE9D8];
        v89 = *((_QWORD *)v88 + 4);
        v90 = *((_QWORD *)v88 + 5);
        v53 = v22;
        v91 = *((_QWORD *)v88 + 6);
        v92 = *((_QWORD *)v88 + 7);
        swift_bridgeObjectRelease();
        v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64);
        v59 = v89;
        v60 = 0;
        v61 = v90;
        v10 = sub_1B0945C74;
        v62 = v91;
        v63 = 0;
        v64 = v92;
LABEL_83:
        v58(v59, v60, v61, v62, v63, v64, a5);
        a3 = v53;
        goto LABEL_6;
      }
LABEL_128:
      sub_1B0945C00();
      swift_allocError();
      v143 = 4;
LABEL_136:
      *v142 = v143;
      swift_willThrow();
      return swift_bridgeObjectRelease();
    default:
      v8 = v161;
      switch(v15)
      {
        case 256:
          v10 = v21;
          v27 = *(void (**)(uint64_t))(a6 + 80);
          goto LABEL_68;
        case 257:
          v93 = *a4;
          if (*((_QWORD *)*a4 + 2) <= 5uLL)
            goto LABEL_128;
          *a4 = (char *)MEMORY[0x1E0DEE9D8];
          v94 = *((_QWORD *)v93 + 4);
          v95 = *((_QWORD *)v93 + 5);
          v96 = *((_QWORD *)v93 + 6);
          v97 = *((_QWORD *)v93 + 7);
          v53 = v22;
          v98 = *((_QWORD *)v93 + 8);
          v99 = *((_QWORD *)v93 + 9);
          swift_bridgeObjectRelease();
          v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 112);
          goto LABEL_82;
        case 258:
          v100 = *a4;
          if (*((_QWORD *)*a4 + 2) <= 5uLL)
            goto LABEL_128;
          *a4 = (char *)MEMORY[0x1E0DEE9D8];
          v94 = *((_QWORD *)v100 + 4);
          v95 = *((_QWORD *)v100 + 5);
          v96 = *((_QWORD *)v100 + 6);
          v97 = *((_QWORD *)v100 + 7);
          v53 = v22;
          v98 = *((_QWORD *)v100 + 8);
          v99 = *((_QWORD *)v100 + 9);
          swift_bridgeObjectRelease();
          v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96);
LABEL_82:
          v59 = v94;
          v60 = v95;
          v10 = sub_1B0945C74;
          v61 = v96;
          v62 = v97;
          v63 = v98;
          v64 = v99;
          a4 = v160;
          goto LABEL_83;
        case 262:
          v101 = *a4;
          if (*((_QWORD *)*a4 + 2) <= 4uLL)
            goto LABEL_128;
          *a4 = (char *)MEMORY[0x1E0DEE9D8];
          v102 = *((_QWORD *)v101 + 4);
          v103 = *((_QWORD *)v101 + 5);
          v104 = v22;
          v106 = *((_QWORD *)v101 + 6);
          v105 = *((_QWORD *)v101 + 7);
          v107 = *((_QWORD *)v101 + 8);
          swift_bridgeObjectRelease();
          v108 = v106;
          a4 = v160;
          v109 = v107;
          v10 = sub_1B0945C74;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 16))(v102, v103, v108, v105, v109, a5);
          a3 = v104;
          goto LABEL_6;
        case 263:
          v110 = *a4;
          if (*((_QWORD *)*a4 + 2) <= 3uLL)
            goto LABEL_128;
          *a4 = (char *)MEMORY[0x1E0DEE9D8];
          v111 = *((_QWORD *)v110 + 4);
          v112 = *((_QWORD *)v110 + 5);
          v113 = v22;
          v114 = *((_QWORD *)v110 + 6);
          v115 = *((_QWORD *)v110 + 7);
          swift_bridgeObjectRelease();
          v116 = v112;
          v10 = sub_1B0945C74;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 24))(v111, v116, v114, v115, a5);
          a3 = v113;
          goto LABEL_6;
        case 268:
          v117 = *a4;
          if (!*((_QWORD *)*a4 + 2))
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v118 = *((_QWORD *)v117 + 2);
            if (!v118)
              goto LABEL_155;
          }
          else
          {
            v117 = sub_1B0953AFC((uint64_t)v117);
            v118 = *((_QWORD *)v117 + 2);
            if (!v118)
              goto LABEL_155;
          }
          v119 = v118 - 1;
          v120 = *(_QWORD *)&v117[8 * v118 + 24];
          *((_QWORD *)v117 + 2) = v118 - 1;
          *a4 = v117;
          if (v118 == 1)
            goto LABEL_135;
          v121 = v22;
          v122 = v118 - 2;
          v123 = *(_QWORD *)&v117[8 * v118 + 16];
          *((_QWORD *)v117 + 2) = v118 - 2;
          *a4 = v117;
          if (!v120)
            goto LABEL_157;
          if (v123 == 0x8000000000000000 && v120 == -1)
            goto LABEL_164;
          if (v118 >= 0x32)
          {
LABEL_134:
            sub_1B0945C00();
            swift_allocError();
            *v149 = 4;
            swift_willThrow();
            return swift_bridgeObjectRelease();
          }
          v124 = *((_QWORD *)v117 + 3);
          if (v119 > v124 >> 1)
            v117 = sub_1B08B5E40((char *)(v124 > 1), v119, 1, v117);
          *((_QWORD *)v117 + 2) = v119;
          *(_QWORD *)&v117[8 * v122 + 32] = v123 / v120;
          *a4 = v117;
          a3 = v121;
          goto LABEL_43;
        case 272:
          v125 = *a4;
          if (!*((_QWORD *)*a4 + 2))
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v126 = *((_QWORD *)v125 + 2);
            if (!v126)
              goto LABEL_156;
          }
          else
          {
            v125 = sub_1B0953AFC((uint64_t)v125);
            v126 = *((_QWORD *)v125 + 2);
            if (!v126)
              goto LABEL_156;
          }
          v127 = *(_QWORD *)&v125[8 * v126 + 24];
          *((_QWORD *)v125 + 2) = v126 - 1;
          *a4 = v125;
          if (v126 == 1)
          {
LABEL_135:
            sub_1B0945C00();
            swift_allocError();
            v143 = 1;
            goto LABEL_136;
          }
          v128 = v126 - 2;
          v129 = *(_QWORD *)&v125[8 * v128 + 32];
          *((_QWORD *)v125 + 2) = v128;
          *a4 = v125;
          v130 = v128 - v129;
          if (__OFSUB__(v128, v129))
            goto LABEL_158;
          if (v128 < v130)
            goto LABEL_159;
          if (v130 < 0)
            goto LABEL_160;
          v131 = (2 * v128) | 1;
          v156 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 128);
          v132 = swift_bridgeObjectRetain();
          v156(v132, v125 + 32, v130, v131, v127, a5, a6);
          if (v164)
          {
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          if (v129)
          {
            v10 = sub_1B0945C74;
            a4 = v160;
            if ((v129 & 0x8000000000000000) != 0)
              goto LABEL_162;
            v133 = *((_QWORD *)v125 + 2);
            if (v133 < v129)
              goto LABEL_163;
            sub_1B0902CB4(v133 - v129, v133);
            a3 = v22;
          }
          else
          {
            a3 = v22;
            v10 = sub_1B0945C74;
            a4 = v160;
          }
          break;
        case 273:
          v134 = (*(uint64_t (**)(uint64_t))(a6 + 136))(a5);
          if (v164)
            return swift_bridgeObjectRelease();
          v135 = *a4;
          v136 = *((_QWORD *)*a4 + 2);
          if (v136 > 0x2F)
            goto LABEL_128;
          v137 = v134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v135 = sub_1B08B5E40(0, v136 + 1, 1, v135);
          v139 = *((_QWORD *)v135 + 2);
          v138 = *((_QWORD *)v135 + 3);
          if (v139 >= v138 >> 1)
            v135 = sub_1B08B5E40((char *)(v138 > 1), v139 + 1, 1, v135);
          *((_QWORD *)v135 + 2) = v139 + 1;
          *(_QWORD *)&v135[8 * v139 + 32] = v137;
          a4 = v160;
          *v160 = v135;
          a3 = v22;
          goto LABEL_43;
        case 289:
          v140 = *a4;
          if (*((_QWORD *)*a4 + 2) <= 1uLL)
            goto LABEL_128;
          *a4 = (char *)MEMORY[0x1E0DEE9D8];
          v24 = *((_QWORD *)v140 + 4);
          v25 = *((_QWORD *)v140 + 5);
          swift_bridgeObjectRelease();
          v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 40);
          goto LABEL_3;
        default:
          goto LABEL_141;
      }
      goto LABEL_6;
  }
}

uint64_t sub_1B0979874(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  sub_1B08A35B0(a3, a4);
  sub_1B08A35F4();
  v4 = sub_1B0A1D090();
  sub_1B0977D7C(v4);
  return swift_bridgeObjectRelease();
}

unint64_t *sub_1B097990C(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v8;

  v2 = *result;
  v1 = result[1];
  if (__OFSUB__(v1, *result))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((uint64_t)(v1 - *result) < 1)
  {
    sub_1B0A1D8A0();
    swift_bridgeObjectRelease();
    sub_1B08A36F0();
    swift_allocError();
    *v8 = 0;
    v8[1] = v2;
    v8[2] = 0xD00000000000002ALL;
    v8[3] = 0x80000001B0A25FA0;
    v8[4] = 0;
    return (unint64_t *)swift_willThrow();
  }
  v3 = v2 + 1;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL || v1 < (uint64_t)v3)
    goto LABEL_16;
  v5 = result[2];
  *result = v3;
  if ((v2 & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(v5 + 16);
    if (v6 >= v2 && v6 >= v3)
      return (unint64_t *)*(unsigned __int8 *)(v5 + v2 + 32);
    goto LABEL_18;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B0979A04()
{
  return swift_deallocObject();
}

unsigned __int8 *sub_1B0979A14@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if ((*(_BYTE *)(v2 + 16) + 5) == *(unsigned __int8 *)(v2 + 16) - 251)
    *a2 = -108 - (*result | ((unint64_t)(*(_BYTE *)(v2 + 16) + 5) << 8));
  else
    __break(1u);
  return result;
}

uint64_t sub_1B0979A44()
{
  return swift_deallocObject();
}

unsigned __int8 *sub_1B0979A54@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  if ((*(_BYTE *)(v2 + 16) + 9) == *(unsigned __int8 *)(v2 + 16) - 247)
    *a2 = (*result | ((unint64_t)(*(_BYTE *)(v2 + 16) + 9) << 8)) + 108;
  else
    __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for CharStringError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B0979ACC + 4 * byte_1B0A3D095[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B0979B00 + 4 * byte_1B0A3D090[v4]))();
}

uint64_t sub_1B0979B00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0979B08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B0979B10);
  return result;
}

uint64_t sub_1B0979B1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B0979B24);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B0979B28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B0979B30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharStringError()
{
  return &type metadata for CharStringError;
}

unint64_t sub_1B0979B50()
{
  unint64_t result;

  result = qword_1EEEBC878;
  if (!qword_1EEEBC878)
  {
    result = MEMORY[0x1B5E0D530]("eLw5x7\a", &type metadata for CharStringError);
    atomic_store(result, (unint64_t *)&qword_1EEEBC878);
  }
  return result;
}

_QWORD *sub_1B0979B94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0977D3C(a1, a2);
}

ValueMetadata *type metadata accessor for MaxpTable.V1Fields()
{
  return &type metadata for MaxpTable.V1Fields;
}

__n128 __swift_memcpy113_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MaxpTable(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MaxpTable(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 113) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MaxpTable()
{
  return &type metadata for MaxpTable;
}

unint64_t sub_1B0979C64()
{
  unint64_t result;

  result = qword_1EEEBC880;
  if (!qword_1EEEBC880)
  {
    result = MEMORY[0x1B5E0D530](&protocol conformance descriptor for Fixed, &type metadata for Fixed);
    atomic_store(result, (unint64_t *)&qword_1EEEBC880);
  }
  return result;
}

uint64_t sub_1B0979CA8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1B0979CBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEEBC8E8;
  if (!qword_1EEEBC8E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EEEBC8F0);
    result = MEMORY[0x1B5E0D530](MEMORY[0x1E0D65CC0], v1);
    atomic_store(result, (unint64_t *)&qword_1EEEBC8E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetadataKey()
{
  return &type metadata for MetadataKey;
}

char *sub_1B0979D18(unint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;

  v3 = a1;
  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_37;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
LABEL_5:
  v6 = MEMORY[0x1E0DEE9D8];
  if (!v5)
    return (char *)v6;
  v20 = MEMORY[0x1E0DEE9D8];
  result = sub_1B08E8298(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v8 = (v3 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0)
      LOBYTE(v8) = 1;
    v9 = 4 << v8;
    v10 = v3 & 0xFFFFFFFFFFFFLL;
    if ((a2 & 0x2000000000000000) != 0)
      v10 = v4;
    v17 = v3;
    v18 = v10;
    v11 = 15;
    while (1)
    {
      v12 = v11;
      if ((v11 & 0xC) == v9)
        v12 = sub_1B08A7A34(v11, v3, a2);
      v13 = v12 >> 16;
      if (v12 >> 16 >= v18)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        v5 = sub_1B0A1D360();
        goto LABEL_5;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v15 = sub_1B0A1D390();
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v19[0] = v3;
        v19[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v15 = *((_BYTE *)v19 + v13);
      }
      else
      {
        v14 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v3 & 0x1000000000000000) == 0)
          v14 = sub_1B0A1D8B8();
        v15 = *(_BYTE *)(v14 + v13);
      }
      v6 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B08E8298(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v20;
      }
      v4 = *(_QWORD *)(v6 + 16);
      v16 = *(_QWORD *)(v6 + 24);
      if (v4 >= v16 >> 1)
      {
        sub_1B08E8298((char *)(v16 > 1), v4 + 1, 1);
        v6 = v20;
      }
      *(_QWORD *)(v6 + 16) = v4 + 1;
      *(_BYTE *)(v6 + v4 + 32) = v15;
      if ((v11 & 0xC) == v9)
      {
        v3 = v17;
        v11 = sub_1B08A7A34(v11, v17, a2);
        if ((a2 & 0x1000000000000000) == 0)
          goto LABEL_12;
LABEL_29:
        if (v18 <= v11 >> 16)
          goto LABEL_36;
        v11 = sub_1B0A1D36C();
        if (!--v5)
          return (char *)v6;
      }
      else
      {
        v3 = v17;
        if ((a2 & 0x1000000000000000) != 0)
          goto LABEL_29;
LABEL_12:
        v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        if (!--v5)
          return (char *)v6;
      }
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1B0979F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char v32;
  char *v33;
  char v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  char *v72;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v0 = sub_1B0A1DBAC();
  v93 = *(_QWORD *)(v0 - 8);
  v94 = v0;
  MEMORY[0x1E0C80A78](v0);
  v92 = (char *)&v90 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1B0A1CE98();
  v101 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v100 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1B0A1D294();
  MEMORY[0x1E0C80A78](v4);
  sub_1B0A1D27C();
  v5 = sub_1B0A1D234();
  if (!v6)
    return MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v104 = v5;
  *((_QWORD *)&v104 + 1) = v6;
  v7 = sub_1B097AB68();
  v8 = MEMORY[0x1B5E0C288](44, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E0DEA968], v7);
  result = swift_bridgeObjectRelease();
  v99 = *(_QWORD *)(v8 + 16);
  if (!v99)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v10 = 0;
  v91 = 0;
  v98 = v8 + 32;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v96 = v8;
  v97 = v2;
  while (1)
  {
    if (v10 >= *(_QWORD *)(v8 + 16))
    {
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    v103 = v11;
    v12 = v98 + 32 * v10;
    v13 = *(_QWORD *)(v12 + 16);
    v14 = *(_QWORD *)(v12 + 24);
    v104 = *(_OWORD *)v12;
    v105 = v13;
    v106 = v14;
    swift_bridgeObjectRetain();
    v15 = v100;
    sub_1B0A1CE74();
    sub_1B097ABAC();
    v16 = sub_1B0A1D744();
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v15, v2);
    swift_bridgeObjectRelease();
    if ((v18 & 0x2000000000000000) != 0)
      v19 = HIBYTE(v18) & 0xF;
    else
      v19 = v16 & 0xFFFFFFFFFFFFLL;
    if (!v19)
      goto LABEL_4;
    swift_bridgeObjectRetain();
    sub_1B0A1D324();
    v20 = sub_1B0A1D3E4();
    v22 = v21;
    v24 = v23;
    v26 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v27 = sub_1B0A1D6F0();
    result = swift_bridgeObjectRelease();
    v102 = v10;
    if (v27 != 4)
      goto LABEL_34;
    if ((v20 ^ v22) < 0x4000)
      goto LABEL_129;
    swift_bridgeObjectRetain();
    v95 = v24;
    v28 = sub_1B0A1D6FC();
    v30 = v29;
    swift_bridgeObjectRelease();
    if ((sub_1B0A1D15C() & 1) != 0)
    {
      result = sub_1B097D9B0(v28, v30);
      if ((result & 0x100000000) != 0)
        goto LABEL_131;
      v31 = v92;
      sub_1B0A1DBB8();
      v32 = sub_1B0A1DB94();
      (*(void (**)(char *, uint64_t))(v93 + 8))(v31, v94);
      if ((v32 & 1) != 0)
        goto LABEL_24;
    }
    if ((sub_1B0A1D150() & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      v2 = v97;
LABEL_34:
      swift_bridgeObjectRelease();
      v42 = sub_1B0A1D030();
      v44 = v43;
      swift_bridgeObjectRelease();
      v11 = v103;
      v45 = *((_QWORD *)v103 + 2);
      v8 = v96;
      if (v45)
      {
        if (*((_QWORD *)v103 + 4) == v42 && *((_QWORD *)v103 + 5) == v44)
          goto LABEL_37;
        result = sub_1B0A1DA8C();
        v10 = v102;
        if ((result & 1) != 0)
          goto LABEL_54;
        if (v45 != 1)
        {
          v46 = v11 + 56;
          v47 = 1;
          do
          {
            v48 = v47 + 1;
            if (__OFADD__(v47, 1))
              goto LABEL_128;
            if (*(v46 - 1) == v42 && *v46 == v44)
              goto LABEL_37;
            result = sub_1B0A1DA8C();
            if ((result & 1) != 0)
              goto LABEL_37;
            v46 += 2;
            ++v47;
          }
          while (v48 != v45);
        }
      }
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1B08B5E4C(0, v45 + 1, 1, v11);
      v10 = v102;
      v51 = *((_QWORD *)v11 + 2);
      v50 = *((_QWORD *)v11 + 3);
      if (v51 >= v50 >> 1)
        v11 = sub_1B08B5E4C((char *)(v50 > 1), v51 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v51 + 1;
      v52 = &v11[16 * v51];
      *((_QWORD *)v52 + 4) = v42;
      *((_QWORD *)v52 + 5) = v44;
LABEL_54:
      result = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if ((sub_1B0A1D15C() & 1) != 0)
    {
      result = sub_1B097D9B0(v28, v30);
      if ((result & 0x100000000) != 0)
        goto LABEL_132;
      v33 = v92;
      sub_1B0A1DBB8();
      v34 = sub_1B0A1DBA0();
      (*(void (**)(char *, uint64_t))(v93 + 8))(v33, v94);
      if ((v34 & 1) != 0)
        goto LABEL_24;
    }
    if ((sub_1B0A1D150() & 1) == 0)
    {
LABEL_24:
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = sub_1B0A1D144();
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
        goto LABEL_33;
    }
    v2 = v97;
    if (qword_1EEEBA550 != -1)
      swift_once();
    v36 = off_1EEEBC8F8;
    v10 = v102;
    v37 = v95;
    if (*((_QWORD *)off_1EEEBC8F8 + 2))
      break;
LABEL_56:
    if (v16 == v37 && v18 == v26 && !(v20 >> 16) && v19 == v22 >> 16)
    {
      swift_bridgeObjectRelease();
      v8 = v96;
LABEL_62:
      v54 = sub_1B097ABF0();
      v11 = v103;
      if (v55)
      {
        v56 = v54;
        v57 = v55;
        swift_bridgeObjectRelease();
        v16 = v56;
        v18 = v57;
      }
      v58 = *((_QWORD *)v11 + 2);
      if (v58)
      {
        v59 = v11 + 40;
        v60 = *((_QWORD *)v11 + 2);
        while (1)
        {
          v61 = *(v59 - 1) == v16 && *v59 == v18;
          if (v61 || (sub_1B0A1DA8C() & 1) != 0)
            break;
          v59 += 2;
          if (!--v60)
            goto LABEL_72;
        }
      }
      else
      {
LABEL_72:
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_1B08B5E4C(0, v58 + 1, 1, v11);
        v63 = *((_QWORD *)v11 + 2);
        v62 = *((_QWORD *)v11 + 3);
        if (v63 >= v62 >> 1)
          v11 = sub_1B08B5E4C((char *)(v62 > 1), v63 + 1, 1, v11);
        *((_QWORD *)v11 + 2) = v63 + 1;
        v64 = &v11[16 * v63];
        *((_QWORD *)v64 + 4) = v16;
        *((_QWORD *)v64 + 5) = v18;
      }
      goto LABEL_54;
    }
    v53 = sub_1B0A1DA5C();
    swift_bridgeObjectRelease();
    v8 = v96;
    if ((v53 & 1) != 0)
      goto LABEL_62;
LABEL_4:
    result = swift_bridgeObjectRelease();
    v11 = v103;
LABEL_5:
    if (++v10 == v99)
    {
      swift_bridgeObjectRelease();
      return (unint64_t)v11;
    }
  }
  swift_bridgeObjectRetain();
  v38 = sub_1B08FA0B4(v20, v22, v37, v26);
  if ((v39 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  v40 = *(_QWORD *)(v36[7] + 8 * v38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  if (sub_1B0A1D3D8() == 45 && v41 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    v8 = v96;
    v11 = v103;
    goto LABEL_79;
  }
  v65 = sub_1B0A1DA8C();
  swift_bridgeObjectRelease();
  v8 = v96;
  v11 = v103;
  if ((v65 & 1) != 0)
  {
LABEL_79:
    swift_bridgeObjectRetain();
    v66 = v91;
    v67 = sub_1B097DB60(v40);
    v91 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v68 = (char *)v67;
  }
  else
  {
    v68 = (char *)v40;
  }
  swift_bridgeObjectRelease();
  v69 = *((_QWORD *)v11 + 2);
  v70 = *((_QWORD *)v68 + 2);
  v71 = v69 + v70;
  v72 = v68;
  if (!__OFADD__(v69, v70))
  {
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || v71 > *((_QWORD *)v11 + 3) >> 1)
    {
      if (v69 <= v71)
        v74 = v69 + v70;
      else
        v74 = v69;
      v11 = sub_1B08B5E4C(isUniquelyReferenced_nonNull_native, v74, 0, v11);
    }
    v70 = *((_QWORD *)v68 + 2);
  }
  if (!v70)
  {
LABEL_37:
    result = swift_bridgeObjectRelease();
LABEL_38:
    v10 = v102;
    goto LABEL_5;
  }
  v75 = v68 + 32;
  result = swift_bridgeObjectRetain();
  v76 = 0;
  v103 = v68;
  while (2)
  {
    if (v76 >= *((_QWORD *)v72 + 2))
    {
      __break(1u);
      goto LABEL_127;
    }
    v77 = &v75[2 * v76];
    v79 = *v77;
    v78 = v77[1];
    v80 = *((_QWORD *)v11 + 2);
    if (!v80)
    {
LABEL_102:
      v82 = v11;
LABEL_103:
      swift_bridgeObjectRetain_n();
      v11 = v82;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_1B08B5E4C(0, v80 + 1, 1, v82);
      v2 = v97;
      v84 = *((_QWORD *)v11 + 2);
      v83 = *((_QWORD *)v11 + 3);
      v72 = v103;
      if (v84 >= v83 >> 1)
        v11 = sub_1B08B5E4C((char *)(v83 > 1), v84 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v84 + 1;
      v85 = &v11[16 * v84];
      *((_QWORD *)v85 + 4) = v79;
      *((_QWORD *)v85 + 5) = v78;
      result = swift_bridgeObjectRelease();
      goto LABEL_93;
    }
    result = *((_QWORD *)v11 + 4);
    if (result == v79 && *((_QWORD *)v11 + 5) == v78)
      goto LABEL_93;
    result = sub_1B0A1DA8C();
    if ((result & 1) != 0)
      goto LABEL_93;
    if (v80 == 1)
      goto LABEL_102;
    if ((result = *((_QWORD *)v11 + 6), result == v79) && *((_QWORD *)v11 + 7) == v78
      || (result = sub_1B0A1DA8C(), (result & 1) != 0))
    {
LABEL_93:
      if (++v76 == v70)
      {
        result = swift_bridgeObjectRelease_n();
        v8 = v96;
        goto LABEL_38;
      }
      continue;
    }
    break;
  }
  if (v80 == 2)
    goto LABEL_102;
  v82 = v11;
  v86 = v11 + 72;
  v87 = 2;
  while (1)
  {
    v88 = v87 + 1;
    if (__OFADD__(v87, 1))
      break;
    result = *(v86 - 1);
    v89 = result == v79 && *v86 == v78;
    if (v89 || (result = sub_1B0A1DA8C(), (result & 1) != 0))
    {
      v11 = v82;
      v2 = v97;
      v72 = v103;
      goto LABEL_93;
    }
    v86 += 2;
    ++v87;
    if (v88 == v80)
      goto LABEL_103;
  }
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
  return result;
}

