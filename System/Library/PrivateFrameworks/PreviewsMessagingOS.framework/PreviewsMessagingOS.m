PreviewsMessagingOS::DynamicLoadablePreviewProduct::Location_optional __swiftcall DynamicLoadablePreviewProduct.Location.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (PreviewsMessagingOS::DynamicLoadablePreviewProduct::Location_optional)sub_244925874(v1);
}

uint64_t DynamicLoadablePreviewProduct.Location.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x6574756C6F736261;
}

uint64_t sub_244922854(char *a1, char *a2)
{
  return sub_24499E7E4(*a1, *a2);
}

PreviewsMessagingOS::DynamicLoadablePreviewProduct::Location_optional sub_244922860(Swift::String *a1)
{
  return DynamicLoadablePreviewProduct.Location.init(rawValue:)(*a1);
}

uint64_t sub_24492286C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DynamicLoadablePreviewProduct.Location.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_244922890()
{
  sub_2449276C0();
  return sub_2449CF670();
}

uint64_t sub_2449228D8()
{
  sub_2449276C0();
  return sub_2449CF67C();
}

uint64_t sub_24492293C()
{
  return sub_2449C51F4();
}

uint64_t sub_244922944()
{
  return sub_244923028();
}

uint64_t sub_24492294C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922978()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449229B8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449229F8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922A38()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922A8C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922ADC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244922B38(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244922B7C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922BDC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922C4C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922CB4()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922D2C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922DB0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922E18()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922E64()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244922EC4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244922F08()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922F8C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244922FE8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923028()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244923084(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2449230C8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492318C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449231E0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923234()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923288()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449232C8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923330()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449233A0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923428()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923494()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449234F0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923530()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449235B0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449235F0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923630()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923664()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_2449236CC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244923710()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492377C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449237C0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923828()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923868()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449238CC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492390C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923968()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_2449239A8(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_2449239F0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244923A44(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244923A88()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244923B24(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244923B6C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244923BF0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244923C34()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244923CAC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244923CF0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923D78()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923DB8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244923E1C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244923E60()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244923EC4()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244923F2C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244923F70()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244924028(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24492406C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924120()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924160()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449241B8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924218()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924270()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_2449242D8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24492431C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924400()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492446C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449244AC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449244F0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244924530(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244924574()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449245EC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_24492462C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244924670()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924730()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449247BC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244924800(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244924844()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924920()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449249A8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_2449249EC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244924A30()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924AAC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924AFC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924B84()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924BC4()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924C04()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924C68()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924CC0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244924D20(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244924D64()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924DD8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924E40()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244924E90()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244924EF0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244924F34()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244924FD8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24492501C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_244925090(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2449250D4()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492512C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492516C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449251AC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244925208()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492526C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449252AC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449252EC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492532C()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244925368()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449253CC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244925434()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449254A0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449254E0()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_24492551C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_244925564()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449255D8()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244925634()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244925674()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449256D0()
{
  return sub_2449CBB88();
}

PreviewsMessagingOS::DynamicLoadablePreviewProduct::LoadingStrategy_optional __swiftcall DynamicLoadablePreviewProduct.LoadingStrategy.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  PreviewsMessagingOS::DynamicLoadablePreviewProduct::LoadingStrategy_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2449CFC10();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t DynamicLoadablePreviewProduct.LoadingStrategy.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aBundle_4[8 * *v0];
}

uint64_t sub_244925754(char *a1, char *a2)
{
  return sub_24499E888(*a1, *a2);
}

PreviewsMessagingOS::DynamicLoadablePreviewProduct::LoadingStrategy_optional sub_244925760(Swift::String *a1)
{
  return DynamicLoadablePreviewProduct.LoadingStrategy.init(rawValue:)(*a1);
}

uint64_t sub_24492576C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DynamicLoadablePreviewProduct.LoadingStrategy.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_244925790()
{
  sub_24492767C();
  return sub_2449CF670();
}

uint64_t sub_2449257D8()
{
  sub_24492767C();
  return sub_2449CF67C();
}

uint64_t sub_24492583C()
{
  return sub_2449C5278();
}

uint64_t sub_244925844()
{
  return sub_244922FE8();
}

uint64_t sub_24492584C()
{
  return sub_2449CB97C();
}

uint64_t DynamicLoadablePreviewProduct.ExternalFunctionBinding.dlopenMode.getter()
{
  _BYTE *v0;

  if (*v0)
    return 2;
  else
    return 0;
}

PreviewsMessagingOS::DynamicLoadablePreviewProduct::ExternalFunctionBinding_optional __swiftcall DynamicLoadablePreviewProduct.ExternalFunctionBinding.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (PreviewsMessagingOS::DynamicLoadablePreviewProduct::ExternalFunctionBinding_optional)sub_244925874(v1);
}

uint64_t sub_244925874@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t DynamicLoadablePreviewProduct.ExternalFunctionBinding.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x74616964656D6D69;
  else
    return 0x746C7561666564;
}

uint64_t sub_244925910(char *a1, char *a2)
{
  return sub_24499E90C(*a1, *a2);
}

PreviewsMessagingOS::DynamicLoadablePreviewProduct::ExternalFunctionBinding_optional sub_24492591C(Swift::String *a1)
{
  return DynamicLoadablePreviewProduct.ExternalFunctionBinding.init(rawValue:)(*a1);
}

uint64_t sub_244925928@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DynamicLoadablePreviewProduct.ExternalFunctionBinding.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24492594C()
{
  sub_244927638();
  return sub_2449CF670();
}

uint64_t sub_244925994()
{
  sub_244927638();
  return sub_2449CF67C();
}

uint64_t sub_2449259F8()
{
  return sub_2449C52E0();
}

uint64_t sub_244925A00()
{
  return sub_244922F8C();
}

uint64_t sub_244925A08()
{
  return sub_2449CB9E0();
}

uint64_t DynamicLoadablePreviewProduct.path.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DynamicLoadablePreviewProduct.path.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DynamicLoadablePreviewProduct.path.modify())()
{
  return nullsub_1;
}

uint64_t DynamicLoadablePreviewProduct.executablePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DynamicLoadablePreviewProduct.executablePath.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*DynamicLoadablePreviewProduct.executablePath.modify())()
{
  return nullsub_1;
}

void DynamicLoadablePreviewProduct.location.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *DynamicLoadablePreviewProduct.location.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*DynamicLoadablePreviewProduct.location.modify())()
{
  return nullsub_1;
}

void DynamicLoadablePreviewProduct.loadingStrategy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

_BYTE *DynamicLoadablePreviewProduct.loadingStrategy.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = *result;
  return result;
}

uint64_t (*DynamicLoadablePreviewProduct.loadingStrategy.modify())()
{
  return nullsub_1;
}

uint64_t DynamicLoadablePreviewProduct.moduleName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DynamicLoadablePreviewProduct.moduleName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*DynamicLoadablePreviewProduct.moduleName.modify())()
{
  return nullsub_1;
}

void DynamicLoadablePreviewProduct.externalFunctionBinding.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

_BYTE *DynamicLoadablePreviewProduct.externalFunctionBinding.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = *result;
  return result;
}

uint64_t (*DynamicLoadablePreviewProduct.externalFunctionBinding.modify())()
{
  return nullsub_1;
}

uint64_t DynamicLoadablePreviewProduct.isRequired.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t DynamicLoadablePreviewProduct.isRequired.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = result;
  return result;
}

uint64_t (*DynamicLoadablePreviewProduct.isRequired.modify())()
{
  return nullsub_1;
}

void __swiftcall DynamicLoadablePreviewProduct.init(path:executablePath:location:loadingStrategy:moduleName:externalFunctionBinding:isRequired:)(PreviewsMessagingOS::DynamicLoadablePreviewProduct *__return_ptr retstr, Swift::String path, Swift::String executablePath, PreviewsMessagingOS::DynamicLoadablePreviewProduct::Location location, PreviewsMessagingOS::DynamicLoadablePreviewProduct::LoadingStrategy loadingStrategy, Swift::String moduleName, PreviewsMessagingOS::DynamicLoadablePreviewProduct::ExternalFunctionBinding externalFunctionBinding, Swift::Bool isRequired)
{
  PreviewsMessagingOS::DynamicLoadablePreviewProduct::Location v8;
  PreviewsMessagingOS::DynamicLoadablePreviewProduct::LoadingStrategy v9;
  PreviewsMessagingOS::DynamicLoadablePreviewProduct::ExternalFunctionBinding v10;
  Swift::Bool v11;

  v8 = *(_BYTE *)location;
  v9 = *(_BYTE *)loadingStrategy;
  v10 = *(_BYTE *)externalFunctionBinding;
  retstr->path = path;
  retstr->executablePath = executablePath;
  retstr->location = v8;
  retstr->loadingStrategy = v9;
  retstr->moduleName = moduleName;
  retstr->externalFunctionBinding = v10;
  retstr->isRequired = v11;
}

uint64_t DynamicLoadablePreviewProduct.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD60();
}

uint64_t DynamicLoadablePreviewProduct.hashValue.getter()
{
  sub_2449CFD48();
  DynamicLoadablePreviewProduct.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_244925E48()
{
  sub_2449CFD48();
  DynamicLoadablePreviewProduct.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_244925EC4()
{
  sub_2449CFD48();
  DynamicLoadablePreviewProduct.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_244925F38(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_244925F70 + 4 * byte_2449D0459[a1]))(0xD000000000000017, 0x80000002449E1C30);
}

uint64_t sub_244925F70()
{
  return 1752457584;
}

uint64_t sub_244925F80()
{
  return 0x6261747563657865;
}

uint64_t sub_244925FA4()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_244925FBC()
{
  return 0x53676E6964616F6CLL;
}

uint64_t sub_244925FE0()
{
  return 0x614E656C75646F6DLL;
}

uint64_t sub_244926004()
{
  return 0x7269757165527369;
}

void sub_244926024(char *a1)
{
  sub_24499E9B0(*a1);
}

void sub_244926030()
{
  char *v0;

  sub_2449CBA60(0, *v0);
}

void sub_24492603C(uint64_t a1)
{
  char *v1;

  sub_244923084(a1, *v1);
}

void sub_244926044(uint64_t a1)
{
  char *v1;

  sub_2449CBA60(a1, *v1);
}

uint64_t sub_24492604C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449275F0();
  *a1 = result;
  return result;
}

uint64_t sub_244926078@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244925F38(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449260A0()
{
  unsigned __int8 *v0;

  return sub_244925F38(*v0);
}

uint64_t DynamicLoadablePreviewProduct.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449260F0()
{
  sub_244926960();
  sub_2449269C4();
  sub_244926A08();
  sub_244926A4C();
  return sub_2449CF5C8();
}

uint64_t DynamicLoadablePreviewProduct.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  ValueMetadata *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  char v29;

  v22 = &type metadata for DynamicLoadablePreviewProduct.Key;
  v5 = sub_244926960();
  v23 = v5;
  v21[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v8 = v24;
    v7 = v25;
    v22 = &type metadata for DynamicLoadablePreviewProduct.Key;
    v23 = v5;
    v21[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v22 = &type metadata for DynamicLoadablePreviewProduct.Key;
    v23 = v5;
    v21[0] = 2;
    sub_2449269C4();
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v22 = &type metadata for DynamicLoadablePreviewProduct.Key;
    v23 = v5;
    v21[0] = 3;
    sub_244926A08();
    sub_2449CF37C();
    v26 = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v9 = v29;
    v22 = &type metadata for DynamicLoadablePreviewProduct.Key;
    v23 = v5;
    v21[0] = 4;
    sub_2449CF37C();
    v16 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v22 = &type metadata for DynamicLoadablePreviewProduct.Key;
    v23 = v5;
    v21[0] = 5;
    sub_244926A4C();
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v11 = v28;
    v22 = &type metadata for DynamicLoadablePreviewProduct.Key;
    v23 = v5;
    v21[0] = 6;
    sub_2449CF3B8();
    v12 = v26 & 1;
    v13 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v14 = v27;
    v15 = v27 == 2;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 24) = v20;
    *(_BYTE *)(a2 + 32) = v12;
    *(_BYTE *)(a2 + 33) = v16;
    *(_QWORD *)(a2 + 40) = v17;
    *(_QWORD *)(a2 + 48) = v18;
    *(_BYTE *)(a2 + 56) = v11;
    *(_BYTE *)(a2 + 57) = (v15 | v14) & 1;
  }
  return result;
}

uint64_t sub_244926594()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449265DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DynamicLoadablePreviewProduct.init(propertyListValue:)(a1, a2);
}

_DWORD *sub_2449265F0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_2449265FC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_244926604@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_244926618(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_24492662C(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_244926640(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_244926654(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

_QWORD *sub_244926668@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_244926674(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t _s19PreviewsMessagingOS29DynamicLoadablePreviewProductV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(char *)(a1 + 33);
  v6 = *(_QWORD *)(a1 + 40);
  v28 = *(unsigned __int8 *)(a1 + 57);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  v10 = *(char *)(a2 + 33);
  v11 = *(_QWORD *)(a2 + 40);
  v31 = *(_QWORD *)(a2 + 48);
  v32 = *(_QWORD *)(a1 + 48);
  v29 = *(unsigned __int8 *)(a2 + 56);
  v30 = *(unsigned __int8 *)(a1 + 56);
  v27 = *(unsigned __int8 *)(a2 + 57);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_2449CFCD0(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v3 == v8 || (v14 = sub_2449CFCD0(), result = 0, (v14 & 1) != 0))
    {
      v15 = v4 ? 0xD000000000000012 : 0x6574756C6F736261;
      v16 = v4 ? 0x80000002449E1BB0 : 0xE800000000000000;
      v17 = v9 ? 0xD000000000000012 : 0x6574756C6F736261;
      v18 = v9 ? 0x80000002449E1BB0 : 0xE800000000000000;
      if (v15 == v17 && v16 == v18)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = sub_2449CFCD0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = 0;
        if ((v19 & 1) == 0)
          return result;
      }
      if (*(_QWORD *)&aBundle_4[8 * v5] == *(_QWORD *)&aBundle_4[8 * v10]
        && qword_2449D0FD8[v5] == qword_2449D0FD8[v10])
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = sub_2449CFCD0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = 0;
        if ((v20 & 1) == 0)
          return result;
      }
      if (v6 == v11 && v32 == v31 || (v21 = sub_2449CFCD0(), result = 0, (v21 & 1) != 0))
      {
        if (v30)
          v22 = 0x74616964656D6D69;
        else
          v22 = 0x746C7561666564;
        if (v30)
          v23 = 0xE900000000000065;
        else
          v23 = 0xE700000000000000;
        if (v29)
          v24 = 0x74616964656D6D69;
        else
          v24 = 0x746C7561666564;
        if (v29)
          v25 = 0xE900000000000065;
        else
          v25 = 0xE700000000000000;
        if (v22 == v24 && v23 == v25)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v26 = sub_2449CFCD0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = 0;
          if ((v26 & 1) == 0)
            return result;
        }
        return v28 ^ v27 ^ 1u;
      }
    }
  }
  return result;
}

uint64_t sub_244926958()
{
  return sub_2449260F0();
}

unint64_t sub_244926960()
{
  unint64_t result;

  result = qword_25739EDB8;
  if (!qword_25739EDB8)
  {
    result = MEMORY[0x24951C158](&unk_2449D0978, &type metadata for DynamicLoadablePreviewProduct.Key);
    atomic_store(result, (unint64_t *)&qword_25739EDB8);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_2449269C4()
{
  unint64_t result;

  result = qword_25739EDC0;
  if (!qword_25739EDC0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.Location, &type metadata for DynamicLoadablePreviewProduct.Location);
    atomic_store(result, (unint64_t *)&qword_25739EDC0);
  }
  return result;
}

unint64_t sub_244926A08()
{
  unint64_t result;

  result = qword_25739EDC8;
  if (!qword_25739EDC8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.LoadingStrategy, &type metadata for DynamicLoadablePreviewProduct.LoadingStrategy);
    atomic_store(result, (unint64_t *)&qword_25739EDC8);
  }
  return result;
}

unint64_t sub_244926A4C()
{
  unint64_t result;

  result = qword_25739EDD0;
  if (!qword_25739EDD0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.ExternalFunctionBinding, &type metadata for DynamicLoadablePreviewProduct.ExternalFunctionBinding);
    atomic_store(result, (unint64_t *)&qword_25739EDD0);
  }
  return result;
}

uint64_t sub_244926A90()
{
  return MEMORY[0x24BE76CB8];
}

unint64_t sub_244926AA0()
{
  unint64_t result;

  result = qword_25739EDD8;
  if (!qword_25739EDD8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.Location, &type metadata for DynamicLoadablePreviewProduct.Location);
    atomic_store(result, (unint64_t *)&qword_25739EDD8);
  }
  return result;
}

unint64_t sub_244926AE8()
{
  unint64_t result;

  result = qword_25739EDE0;
  if (!qword_25739EDE0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.LoadingStrategy, &type metadata for DynamicLoadablePreviewProduct.LoadingStrategy);
    atomic_store(result, (unint64_t *)&qword_25739EDE0);
  }
  return result;
}

unint64_t sub_244926B30()
{
  unint64_t result;

  result = qword_25739EDE8;
  if (!qword_25739EDE8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.ExternalFunctionBinding, &type metadata for DynamicLoadablePreviewProduct.ExternalFunctionBinding);
    atomic_store(result, (unint64_t *)&qword_25739EDE8);
  }
  return result;
}

unint64_t sub_244926B78()
{
  unint64_t result;

  result = qword_25739EDF0;
  if (!qword_25739EDF0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct, &type metadata for DynamicLoadablePreviewProduct);
    atomic_store(result, (unint64_t *)&qword_25739EDF0);
  }
  return result;
}

uint64_t sub_244926BBC()
{
  return MEMORY[0x24BE76520];
}

uint64_t initializeBufferWithCopyOfBuffer for DynamicLoadablePreviewProduct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for DynamicLoadablePreviewProduct()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DynamicLoadablePreviewProduct(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DynamicLoadablePreviewProduct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DynamicLoadablePreviewProduct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicLoadablePreviewProduct(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicLoadablePreviewProduct(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DynamicLoadablePreviewProduct()
{
  return &type metadata for DynamicLoadablePreviewProduct;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for DynamicLoadablePreviewProduct.Location()
{
  return &type metadata for DynamicLoadablePreviewProduct.Location;
}

uint64_t getEnumTagSinglePayload for DynamicLoadablePreviewProduct.LoadingStrategy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicLoadablePreviewProduct.LoadingStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_244926F84 + 4 * byte_2449D0465[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_244926FB8 + 4 * byte_2449D0460[v4]))();
}

uint64_t sub_244926FB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244926FC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244926FC8);
  return result;
}

uint64_t sub_244926FD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244926FDCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_244926FE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244926FE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244926FF4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_244926FFC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DynamicLoadablePreviewProduct.LoadingStrategy()
{
  return &type metadata for DynamicLoadablePreviewProduct.LoadingStrategy;
}

uint64_t getEnumTagSinglePayload for BuiltStaticArchiveDescription.Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s19PreviewsMessagingOS29DynamicLoadablePreviewProductV8LocationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2449270F0 + 4 * byte_2449D046F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244927124 + 4 * byte_2449D046A[v4]))();
}

uint64_t sub_244927124(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24492712C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244927134);
  return result;
}

uint64_t sub_244927140(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244927148);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24492714C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244927154(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_244927160(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicLoadablePreviewProduct.ExternalFunctionBinding()
{
  return &type metadata for DynamicLoadablePreviewProduct.ExternalFunctionBinding;
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LayerHostPayload(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LayerHostPayload(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
  sub_244927718(a1, &qword_25739EDF8);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_244927718(a1, &qword_25739EE00);
}

void type metadata accessor for OSLogType(uint64_t a1)
{
  sub_244927718(a1, &qword_25739EE08);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GridIndex(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GridIndex(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_244927718(a1, &qword_25739EE10);
}

uint64_t getEnumTagSinglePayload for DynamicLoadablePreviewProduct.Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicLoadablePreviewProduct.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_244927360 + 4 * byte_2449D0479[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_244927394 + 4 * byte_2449D0474[v4]))();
}

uint64_t sub_244927394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24492739C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2449273A4);
  return result;
}

uint64_t sub_2449273B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2449273B8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2449273BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449273C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicLoadablePreviewProduct.Key()
{
  return &type metadata for DynamicLoadablePreviewProduct.Key;
}

unint64_t sub_2449273E4()
{
  unint64_t result;

  result = qword_25739EE18;
  if (!qword_25739EE18)
  {
    result = MEMORY[0x24951C158](&unk_2449D0950, &type metadata for DynamicLoadablePreviewProduct.Key);
    atomic_store(result, (unint64_t *)&qword_25739EE18);
  }
  return result;
}

uint64_t sub_244927428()
{
  return sub_2449CF88C();
}

uint64_t sub_244927444()
{
  return sub_2449CF88C();
}

uint64_t sub_244927454()
{
  return sub_2449CF88C();
}

uint64_t sub_244927460()
{
  return sub_2449CF88C();
}

uint64_t sub_244927474()
{
  return sub_2449CF88C();
}

uint64_t sub_244927490()
{
  return sub_2449CF88C();
}

uint64_t sub_2449274AC()
{
  return sub_2449CF88C();
}

uint64_t sub_2449274CC()
{
  return sub_2449CF88C();
}

uint64_t sub_2449274EC()
{
  return sub_2449CF88C();
}

uint64_t sub_24492750C()
{
  return sub_2449CF88C();
}

uint64_t sub_24492752C()
{
  return sub_2449CF88C();
}

uint64_t sub_244927550()
{
  return sub_2449CF88C();
}

uint64_t sub_244927574()
{
  return sub_2449CF88C();
}

uint64_t sub_244927588()
{
  return sub_2449CF88C();
}

uint64_t sub_2449275A0()
{
  return sub_2449CF88C();
}

uint64_t sub_2449275B8()
{
  return sub_2449CF88C();
}

uint64_t sub_2449275CC()
{
  return sub_2449CF88C();
}

uint64_t sub_2449275F0()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

unint64_t sub_244927638()
{
  unint64_t result;

  result = qword_25739EE20;
  if (!qword_25739EE20)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.ExternalFunctionBinding, &type metadata for DynamicLoadablePreviewProduct.ExternalFunctionBinding);
    atomic_store(result, (unint64_t *)&qword_25739EE20);
  }
  return result;
}

unint64_t sub_24492767C()
{
  unint64_t result;

  result = qword_25739EE28;
  if (!qword_25739EE28)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.LoadingStrategy, &type metadata for DynamicLoadablePreviewProduct.LoadingStrategy);
    atomic_store(result, (unint64_t *)&qword_25739EE28);
  }
  return result;
}

unint64_t sub_2449276C0()
{
  unint64_t result;

  result = qword_25739EE30;
  if (!qword_25739EE30)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct.Location, &type metadata for DynamicLoadablePreviewProduct.Location);
    atomic_store(result, (unint64_t *)&qword_25739EE30);
  }
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_244927718(a1, &qword_25739EE38);
}

void sub_244927718(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

ValueMetadata *type metadata accessor for HostToProcessExitService()
{
  return &type metadata for HostToProcessExitService;
}

ValueMetadata *type metadata accessor for ProcessExitServiceToHost()
{
  return &type metadata for ProcessExitServiceToHost;
}

uint64_t AsyncMessageStream.invalidationHandle.getter()
{
  return swift_retain();
}

uint64_t AsyncMessageStream.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2449277D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;

  v26 = a2;
  v27 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  v7 = *(_QWORD *)(v6 - 8);
  v30 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v29 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AsyncMessageStream(0);
  MEMORY[0x24BDAC7A8](v9);
  v28 = (uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AsyncMessageStream.Event(0);
  MEMORY[0x24BDAC7A8](v24);
  v12 = (uint64_t (**)())((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE80);
  v13 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF6D0();
  swift_allocObject();
  *a4 = sub_2449CF6C4();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16((char *)a4 + *(int *)(v9 + 24), a1, v6);
  v17 = v27;
  a4[1] = v26;
  a4[2] = v17;
  v31 = 0;
  v18 = sub_2449CF73C();
  *(uint64_t *)((char *)a4 + *(int *)(v9 + 28)) = v18;
  *v12 = sub_2449298F4;
  v12[1] = (uint64_t (*)())v18;
  swift_storeEnumTagMultiPayload();
  swift_retain_n();
  sub_2449CFA24();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v25);
  v19 = v28;
  sub_2449298FC((uint64_t)a4, v28);
  v20 = v29;
  v16(v29, a1, v6);
  v21 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v22 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v22 + v21, v20, v6);
  sub_244928A44(&qword_25739EEC0, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  sub_2449CF64C();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return sub_2449299E4(v19, type metadata accessor for AsyncMessageStream);
}

uint64_t sub_244927AC4()
{
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE70);
  sub_244927D34();
  sub_2449CF6A0();
  return swift_release();
}

uint64_t sub_244927B40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = type metadata accessor for AsyncMessageStream.Event(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2449CF4D8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v4, a1, v9);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  sub_2449CFA24();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_2449CFA30();
}

uint64_t AsyncMessageStream.wasInterrupted.getter()
{
  unsigned __int8 v1;

  type metadata accessor for AsyncMessageStream(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE70);
  sub_244927D34();
  sub_2449CF6B8();
  return v1;
}

uint64_t type metadata accessor for AsyncMessageStream(uint64_t a1)
{
  return sub_24492813C(a1, (uint64_t *)&unk_25739EF28);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24951C140]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_244927D34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25739EE78;
  if (!qword_25739EE78)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25739EE70);
    result = MEMORY[0x24951C158](MEMORY[0x24BE76C78], v1);
    atomic_store(result, (unint64_t *)&qword_25739EE78);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24951C14C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_244927DC4(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  char v17;

  v3 = v2;
  v6 = type metadata accessor for AsyncMessageStream.Event(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t (**)(uint64_t))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE80);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AsyncMessageStream(0);
  *v8 = a1;
  v8[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  sub_2449CFA24();
  v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v12, v9);
  LODWORD(v8) = *MEMORY[0x24BEE69D0];
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v14 == (_DWORD)v8)
  {
    v16 = *(_QWORD *)(v3 + *(int *)(v13 + 28));
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE70);
    sub_244927D34();
    result = sub_2449CF6B8();
    if (v17 == 1)
      return a1(result);
  }
  return result;
}

uint64_t sub_244927F7C()
{
  return swift_retain();
}

uint64_t sub_244927F84()
{
  sub_244928A44(&qword_25739EEC0, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  return sub_2449CF640();
}

uint64_t AsyncMessageStream.activate(receiver:interruptionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v8 = type metadata accessor for AsyncMessageStream.Event(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE80);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AsyncMessageStream(0);
  *v10 = a3;
  v10[1] = a4;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  sub_2449CFA24();
  v15 = *(void (**)(char *, uint64_t))(v12 + 8);
  v15(v14, v11);
  *v10 = a1;
  v10[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  sub_2449CFA24();
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, v11);
}

uint64_t type metadata accessor for AsyncMessageStream.Event(uint64_t a1)
{
  return sub_24492813C(a1, (uint64_t *)&unk_25739F068);
}

uint64_t sub_24492813C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AsyncMessageStream.sender.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch();
}

uint64_t sub_244928188()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[4];
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE98);
  *v3 = v0;
  v3[1] = sub_244928230;
  return sub_2449CFCF4();
}

uint64_t sub_244928230()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24492829C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  return (*(uint64_t (**)(uint64_t (*)(), uint64_t))(v0 + 8))(sub_244928544, v1);
}

uint64_t sub_2449282F0()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244928324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  void (*v14)(char *, uint64_t);
  char *v15;
  _QWORD v17[2];

  v2 = type metadata accessor for AsyncMessageStream.Event(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE80);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v17 - v10;
  type metadata accessor for AsyncMessageStream(0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v4, a1, v12);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  sub_2449CFA24();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  if (v13 == *MEMORY[0x24BEE69D0])
  {
    v14(v9, v5);
    sub_244929A20();
    v17[1] = swift_allocError();
    sub_2449CF9C4();
    v15 = v11;
  }
  else
  {
    v14(v11, v5);
    v15 = v9;
  }
  return ((uint64_t (*)(char *, uint64_t))v14)(v15, v5);
}

uint64_t sub_2449284F8(uint64_t a1)
{
  return sub_244928324(a1);
}

uint64_t sub_244928500(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_244928520()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244928544()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t AsyncMessageStream.legacyMessageKey.getter()
{
  return 0x64616F6C796170;
}

uint64_t sub_244928590()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_2449285EC;
  v2[4] = v0;
  return swift_task_switch();
}

uint64_t sub_2449285EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t sub_244928650()
{
  return AsyncMessageStream.legacyMessageKey.getter();
}

uint64_t sub_244928664()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AsyncMessageStream.activate<A>(forReceiving:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for AsyncMessageStream(0);
  v6 = sub_244928A44(&qword_25739EEA0, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  return Transport.activate<A>(forReceivingMessages:)(a2, v5, a2, v6, a3);
}

__n128 sub_2449286FC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t AsyncMessageStream.sender<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 + 64) = a1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 72) = v5;
  v6 = type metadata accessor for AsyncMessageStream(0);
  v7 = sub_244928A44(&qword_25739EEA0, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  *v5 = v3;
  v5[1] = sub_2449287C4;
  return Transport.transportSender<A>(for:)(v3 + 16, a3, v6, a3, v7);
}

uint64_t sub_2449287C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244928828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_OWORD *)(v0 + 24);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 24) = v2;
  *(_OWORD *)(v1 + 32) = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244928858()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncMessageStream.Sender<>.send(oneWay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TransportSender(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = MEMORY[0x24951C158](&protocol conformance descriptor for TransportSender<A>, v6);
  return TransportSenderProtocol<>.send(oneWay:)(a1, v6, v7, a3);
}

uint64_t AsyncMessageStream.Sender<>.send(message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TransportSender(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = MEMORY[0x24951C158](&protocol conformance descriptor for TransportSender<A>, v6);
  return TransportSenderProtocol<>.send(message:)(a1, v6, v7, a3);
}

uint64_t AsyncMessageStream.Sender<>.send<A>(message:expecting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for TransportSender(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v11 = MEMORY[0x24951C158](&protocol conformance descriptor for TransportSender<A>, v10);
  return TransportSenderProtocol<>.send<A>(message:expecting:)(a1, a4, v10, a4, v11, a5, a6);
}

uint64_t sub_244928A20()
{
  return sub_244928A44((unint64_t *)&unk_25739EEB0, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
}

uint64_t sub_244928A44(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AsyncMessageStream(255);
    result = MEMORY[0x24951C158](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_244928A84(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_244928A44(&qword_25739EEC0, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  result = sub_244928A44(&qword_25739EEC8, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncMessageStream(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    swift_retain();
    swift_bridgeObjectRetain();
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncMessageStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release();
}

_QWORD *initializeWithCopy for AsyncMessageStream(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AsyncMessageStream(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncMessageStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *assignWithTake for AsyncMessageStream(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  swift_release();
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncMessageStream()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244928E68(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AsyncMessageStream()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_244928EF4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_244928F6C()
{
  unint64_t v0;

  sub_244928FEC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_244928FEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25739EF38[0])
  {
    type metadata accessor for AsyncMessageStream.Event(255);
    v0 = sub_2449CFA3C();
    if (!v1)
      atomic_store(v0, qword_25739EF38);
  }
}

uint64_t sub_244929040()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_244929048()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244929078(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_2449290D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_244929170(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltTargetDescription.PlatformVersion(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltTargetDescription.PlatformVersion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AsyncMessageStream.Sender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncMessageStream.Sender);
}

uint64_t sub_24492926C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_2449292BC + 4 * byte_2449D1070[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_24492938C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      result = swift_release();
      break;
    case 2:
      v3 = __swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0);
      goto LABEL_5;
    case 3:
      v3 = sub_2449CF4D8();
LABEL_5:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_244929414()
{
  char *v0;

  v0 = (char *)sub_244929458 + 4 * byte_2449D1078[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_244929458()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_244929508(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_2449299E4(result, type metadata accessor for AsyncMessageStream.Event);
    v2 = (char *)&loc_244929564 + 4 * byte_2449D107C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void *sub_244929614(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v8 = sub_2449CF4D8();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_2449296E0(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for AsyncMessageStream.Event);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v8 = sub_2449CF4D8();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for LazyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_2449297E0()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_2449297F0()
{
  unint64_t v0;
  unint64_t v1;

  sub_244929880();
  if (v0 <= 0x3F)
  {
    sub_2449CF4D8();
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

void sub_244929880()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25739F078)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25739EE98);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
    v0 = sub_2449CF9DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25739F078);
  }
}

uint64_t sub_2449298F4()
{
  return sub_244927AC4();
}

uint64_t sub_2449298FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AsyncMessageStream(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_244929940()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_2449299A4(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  return sub_244927B40(a1);
}

uint64_t sub_2449299E4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_244929A20()
{
  unint64_t result;

  result = qword_25739F0B0;
  if (!qword_25739F0B0)
  {
    result = MEMORY[0x24951C158](&unk_2449D11DC, &type metadata for AsyncMessageStream.Invalidated);
    atomic_store(result, (unint64_t *)&qword_25739F0B0);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24951C0C8](a1, v6, a5);
}

ValueMetadata *type metadata accessor for AsyncMessageStream.Invalidated()
{
  return &type metadata for AsyncMessageStream.Invalidated;
}

uint64_t static BuiltTargetDescription.writeBuiltTargetDescriptionDiagnosticsToSeparateFiles.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE v6[8];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0D0);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_25739ED90 != -1)
    swift_once();
  v4 = __swift_project_value_buffer(v0, (uint64_t)qword_25739F0B8);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  sub_2449CF268();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  return v6[7];
}

uint64_t static BuiltTargetDescription.writeBuiltTargetDescriptionDiagnosticsToSeparateFiles.setter()
{
  uint64_t v0;

  if (qword_25739ED90 != -1)
    swift_once();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0D0);
  __swift_project_value_buffer(v0, (uint64_t)qword_25739F0B8);
  swift_beginAccess();
  sub_2449CF274();
  return swift_endAccess();
}

void (*static BuiltTargetDescription.writeBuiltTargetDescriptionDiagnosticsToSeparateFiles.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  if (qword_25739ED90 != -1)
    swift_once();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0D0);
  __swift_project_value_buffer(v3, (uint64_t)qword_25739F0B8);
  swift_beginAccess();
  v2[7] = sub_2449CF25C();
  return sub_244929CD4;
}

void sub_244929CD4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  swift_endAccess();
  free(v1);
}

uint64_t sub_244929D10()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0D0);
  __swift_allocate_value_buffer(v0, qword_25739F0B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_25739F0B8);
  return sub_2449CF28C();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_244929DC0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static BuiltTargetDescription.$writeBuiltTargetDescriptionDiagnosticsToSeparateFiles.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0D0);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25739ED90 != -1)
    swift_once();
  v4 = __swift_project_value_buffer(v0, (uint64_t)qword_25739F0B8);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  sub_2449CF280();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t BuiltTargetDescription.installName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltTargetDescription.installName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*BuiltTargetDescription.installName.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.isExecutable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t BuiltTargetDescription.isExecutable.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*BuiltTargetDescription.isExecutable.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.buildableName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltTargetDescription.buildableName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*BuiltTargetDescription.buildableName.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.platformVersion.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[5];
  v3 = v1[6];
  v4 = v1[7];
  v5 = v1[8];
  v6 = v1[9];
  v7 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_244929FD8(v2, v3);
}

uint64_t sub_244929FD8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 BuiltTargetDescription.platformVersion.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  sub_24492A070(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  *(_OWORD *)(v1 + 40) = v6;
  result = v5;
  *(__n128 *)(v1 + 56) = v5;
  *(_QWORD *)(v1 + 72) = v2;
  *(_QWORD *)(v1 + 80) = v3;
  return result;
}

uint64_t sub_24492A070(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*BuiltTargetDescription.platformVersion.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.objectFiles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltTargetDescription.objectFiles.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t (*BuiltTargetDescription.objectFiles.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.staticArchives.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltTargetDescription.staticArchives.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*BuiltTargetDescription.staticArchives.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.rpaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltTargetDescription.rpaths.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*BuiltTargetDescription.rpaths.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.loadCommands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltTargetDescription.loadCommands.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 112) = a1;
  return result;
}

uint64_t (*BuiltTargetDescription.loadCommands.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.architectures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltTargetDescription.architectures.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 120) = a1;
  return result;
}

uint64_t (*BuiltTargetDescription.architectures.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.output.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltTargetDescription.output.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return result;
}

uint64_t (*BuiltTargetDescription.output.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.diagnosticInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltTargetDescription.diagnosticInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 144) = a1;
  return result;
}

uint64_t (*BuiltTargetDescription.diagnosticInfo.modify())()
{
  return nullsub_1;
}

void __swiftcall BuiltTargetDescription.init(installName:isExecutable:buildableName:platformVersion:objectFiles:staticArchives:rpaths:loadCommands:architectures:output:diagnosticInfo:)(PreviewsMessagingOS::BuiltTargetDescription *__return_ptr retstr, Swift::String installName, Swift::Bool isExecutable, Swift::String_optional buildableName, PreviewsMessagingOS::BuiltTargetDescription::PlatformVersion_optional *platformVersion, Swift::OpaquePointer objectFiles, Swift::OpaquePointer staticArchives, Swift::OpaquePointer rpaths, Swift::OpaquePointer loadCommands, Swift::OpaquePointer architectures, Swift::String_optional output, Swift::OpaquePointer diagnosticInfo)
{
  Swift::String minVersion;

  minVersion = platformVersion->value.minVersion;
  retstr->platformVersion.value.name = platformVersion->value.name;
  retstr->installName = installName;
  retstr->isExecutable = isExecutable;
  retstr->buildableName = buildableName;
  retstr->platformVersion.value.minVersion = minVersion;
  retstr->platformVersion.value.sdkVersion = platformVersion->value.sdkVersion;
  retstr->objectFiles = objectFiles;
  retstr->staticArchives = staticArchives;
  *(_OWORD *)&retstr->rpaths._rawValue = *(_OWORD *)&rpaths._rawValue;
  *(_OWORD *)&retstr->architectures._rawValue = *(_OWORD *)&architectures._rawValue;
  retstr->output.value._object = output.value._object;
  retstr->diagnosticInfo = diagnosticInfo;
}

void __swiftcall BuiltTargetDescription.remappedTransferredPathsForDestination(_:)(PreviewsMessagingOS::BuiltTargetDescription *__return_ptr retstr, Swift::OpaquePointer a2)
{
  uint64_t v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::Bool v14;
  Swift::String v15;
  void *v16;
  void *v17;
  __int128 v18;
  Swift::String_optional v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  __int128 v23;
  void *v24;
  void *v25;
  Swift::String v26;
  _BYTE v27[64];
  __int128 v28;
  _BYTE v29[48];
  void *v30;

  v6 = *(_OWORD *)(v2 + 96);
  v5 = *(_OWORD *)(v2 + 112);
  v7 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)&v27[16] = *(_OWORD *)(v2 + 32);
  *(_OWORD *)&v27[32] = v7;
  v8 = *(_OWORD *)(v2 + 128);
  *(_OWORD *)&v29[16] = v5;
  *(_OWORD *)&v29[32] = v8;
  v30 = *(void **)(v2 + 144);
  v9 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)&v27[48] = *(_OWORD *)(v2 + 64);
  v28 = v9;
  *(_OWORD *)v29 = v6;
  v10 = *(_OWORD *)(v2 + 16);
  v26 = *(Swift::String *)v2;
  *(_OWORD *)v27 = v10;
  v11 = *((_QWORD *)&v28 + 1);
  v12 = v6;
  v24 = (void *)*((_QWORD *)&v8 + 1);
  v25 = v30;
  v22 = *(Swift::String *)&v27[24];
  v23 = *(_OWORD *)&v29[24];
  v21 = *(Swift::String *)&v27[40];
  v13 = (void *)v28;
  v20 = *(_QWORD *)&v27[56];
  v19 = *(Swift::String_optional *)&v27[8];
  v14 = v10;
  v15 = v26;
  swift_bridgeObjectRetain();
  v18 = *(_OWORD *)&v29[8];
  sub_244931150((uint64_t)&v26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = (void *)sub_244930FDC(v11, (uint64_t)a2._rawValue);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17 = (void *)sub_244931230(v12, (uint64_t)a2._rawValue);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  retstr->installName = v15;
  retstr->isExecutable = v14;
  retstr->buildableName = v19;
  retstr->platformVersion.value.name = v22;
  retstr->platformVersion.value.minVersion = v21;
  retstr->platformVersion.value.sdkVersion._countAndFlagsBits = v20;
  retstr->platformVersion.value.sdkVersion._object = v13;
  retstr->objectFiles._rawValue = v16;
  retstr->staticArchives._rawValue = v17;
  *(_OWORD *)&retstr->rpaths._rawValue = v18;
  *(_OWORD *)&retstr->architectures._rawValue = v23;
  retstr->output.value._object = v24;
  retstr->diagnosticInfo._rawValue = v25;
}

Swift::Void __swiftcall BuiltTargetDescription.mergeChild(_:)(PreviewsMessagingOS::BuiltTargetDescription *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  void *rawValue;
  char *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0D8);
  MEMORY[0x24BDAC7A8](v2);
  v44 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0E0);
  MEMORY[0x24BDAC7A8](v43);
  v42 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0E8);
  MEMORY[0x24BDAC7A8](v40);
  v38 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0F0);
  MEMORY[0x24BDAC7A8](v36);
  v35[2] = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[1] = a1->objectFiles._rawValue;
  rawValue = a1->staticArchives._rawValue;
  v41 = a1->rpaths._rawValue;
  v39 = a1->loadCommands._rawValue;
  object = a1->output.value._object;
  if (!object)
    goto LABEL_32;
  v35[0] = v2;
  countAndFlagsBits = a1->output.value._countAndFlagsBits;
  v9 = (_QWORD *)v45[11];
  v10 = v9[2];
  if (v10)
  {
    v11 = -v10;
    v12 = (48 * v10) | 8;
    while (v10 <= v9[2])
    {
      v15 = *(_QWORD *)((char *)v9 + v12 - 8) == countAndFlagsBits && object == *(void **)((char *)v9 + v12);
      if (v15 || (sub_2449CFCD0() & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_24492F878(v9);
        v16 = v9[2];
        if (v10 > v16)
          goto LABEL_34;
        if (v11 + v16 < 0)
          goto LABEL_37;
        v13 = v16 - 1;
        memmove((char *)v9 + v12 - 24, (char *)v9 + v12 + 24, 48 * (v11 + v16));
        v9[2] = v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45[11] = v9;
      }
      v12 -= 48;
      --v10;
      v14 = __CFADD__(v11++, 1);
      if (v14)
        goto LABEL_17;
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_17:
  v17 = (_QWORD *)v45[12];
  v18 = v17[2];
  if (!v18)
  {
LABEL_32:
    v24 = v45;
    v46 = v45[11];
    swift_bridgeObjectRetain();
    v25 = swift_bridgeObjectRetain();
    sub_24492C0A4(v25, &qword_25739F278);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0F8);
    sub_244931380();
    v26 = MEMORY[0x24BEE12C8];
    sub_2449320D0(&qword_25739F108, &qword_25739F0F8, MEMORY[0x24BEE12C8]);
    sub_2449CF0E8();
    v27 = MEMORY[0x24BE76230];
    sub_2449320D0(&qword_25739F110, &qword_25739F0F0, MEMORY[0x24BE76230]);
    v28 = sub_2449CF8B0();
    swift_bridgeObjectRelease();
    v24[11] = v28;
    v46 = v24[12];
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRetain();
    sub_24492BC28(v29);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F118);
    sub_2449313C4();
    sub_2449320D0(&qword_25739F128, &qword_25739F118, v26);
    sub_2449CF0E8();
    sub_2449320D0(&qword_25739F130, &qword_25739F0E8, v27);
    v30 = sub_2449CF8B0();
    swift_bridgeObjectRelease();
    v24[12] = v30;
    v46 = v24[14];
    swift_bridgeObjectRetain();
    v31 = swift_bridgeObjectRetain();
    sub_24492BAD0(v31);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F138);
    sub_244931408();
    sub_2449320D0(&qword_25739F148, &qword_25739F138, v26);
    sub_2449CF0E8();
    sub_2449320D0(&qword_25739F150, &qword_25739F0E0, v27);
    v32 = sub_2449CF8B0();
    swift_bridgeObjectRelease();
    v24[14] = v32;
    v46 = v24[13];
    swift_bridgeObjectRetain();
    v33 = swift_bridgeObjectRetain();
    sub_24492B980(v33);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
    sub_2449320D0(&qword_25739F160, &qword_25739F158, v26);
    sub_2449CF0E8();
    sub_2449320D0(&qword_25739F168, &qword_25739F0D8, v27);
    v34 = sub_2449CF8B0();
    swift_bridgeObjectRelease();
    v24[13] = v34;
    return;
  }
  v19 = 32 * v18 + 32;
  v20 = -v18;
  while (v18 <= v17[2])
  {
    v22 = *(_QWORD *)((char *)v17 + v19 - 16) == countAndFlagsBits && object == *(void **)((char *)v17 + v19 - 8);
    if (v22 || (sub_2449CFCD0() & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = sub_24492F864(v17);
      v23 = v17[2];
      if (v18 > v23)
        goto LABEL_36;
      if (v20 + v23 < 0)
        goto LABEL_37;
      v21 = v23 - 1;
      memmove((char *)v17 + v19 - 32, (char *)v17 + v19, 32 * (v20 + v23));
      v17[2] = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v45[12] = v17;
    }
    v19 -= 32;
    --v18;
    v14 = __CFADD__(v20++, 1);
    if (v14)
      goto LABEL_32;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  sub_2449CFC04();
  __break(1u);
}

uint64_t sub_24492AAB4(char a1)
{
  return *(_QWORD *)&aInstallnisexec[8 * a1];
}

uint64_t sub_24492AAD4(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_24492AAB4(*a1);
  v5 = v4;
  if (v3 == sub_24492AAB4(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24492AB5C()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  sub_24492AAB4(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24492ABBC()
{
  char *v0;

  sub_24492AAB4(*v0);
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492ABFC()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  sub_24492AAB4(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24492AC58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449319E4();
  *a1 = result;
  return result;
}

uint64_t sub_24492AC84@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24492AAB4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24492ACAC()
{
  char *v0;

  return sub_24492AAB4(*v0);
}

uint64_t BuiltTargetDescription.propertyListValue.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  uint64_t result;
  _QWORD v7[5];
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[3];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[16];
  _BYTE v21[48];
  _BYTE v22[16];
  _BYTE v23[8];
  uint64_t v24;
  char v25[8];
  uint64_t v26;
  ValueMetadata *v27;
  unint64_t v28;

  v1 = v0[7];
  v16 = v0[6];
  v17 = v1;
  v18 = v0[8];
  v19 = *((_QWORD *)v0 + 18);
  v2 = v0[3];
  v14[0] = v0[2];
  v14[1] = v2;
  v3 = v0[5];
  v14[2] = v0[4];
  v15 = v3;
  v4 = v0[1];
  v12 = *v0;
  v13 = v4;
  v5 = sub_244931460();
  sub_2449CF3E8();
  sub_2449314A4((uint64_t)&v13 + 8, (uint64_t)v22, &qword_25739F178);
  sub_2449314A4((uint64_t)v22, (uint64_t)v23, &qword_25739F178);
  if (v24)
  {
    sub_2449314A4((uint64_t)v22, (uint64_t)v21, &qword_25739F178);
    v27 = &type metadata for BuiltTargetDescription.Key;
    v28 = v5;
    v25[0] = 2;
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  sub_2449314A4((uint64_t)v14 + 8, (uint64_t)v21, &qword_25739F180);
  sub_2449314A4((uint64_t)v21, (uint64_t)v25, &qword_25739F180);
  if (v26)
  {
    sub_2449314A4((uint64_t)v21, (uint64_t)v8, &qword_25739F180);
    v7[3] = &type metadata for BuiltTargetDescription.Key;
    v7[4] = v5;
    LOBYTE(v7[0]) = 3;
    sub_244931618();
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  if (*(_QWORD *)(*((_QWORD *)&v15 + 1) + 16))
  {
    v7[0] = *((_QWORD *)&v15 + 1);
    v9 = &type metadata for BuiltTargetDescription.Key;
    v10 = v5;
    v8[0] = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0F8);
    sub_244931570(&qword_25739F188, &qword_25739F0F8, (uint64_t (*)(void))sub_2449314E8);
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  if (*(_QWORD *)(v16 + 16))
  {
    v7[0] = v16;
    v9 = &type metadata for BuiltTargetDescription.Key;
    v10 = v5;
    v8[0] = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F118);
    sub_244931570(&qword_25739F198, &qword_25739F118, (uint64_t (*)(void))sub_24493152C);
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  if (*(_QWORD *)(*((_QWORD *)&v16 + 1) + 16))
  {
    v7[0] = *((_QWORD *)&v16 + 1);
    v9 = &type metadata for BuiltTargetDescription.Key;
    v10 = v5;
    v8[0] = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
    sub_2449316B8((unint64_t *)&qword_25739F1A8, &qword_25739F158, MEMORY[0x24BE76D10]);
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  if (*(_QWORD *)(v17 + 16))
  {
    v7[0] = v17;
    v9 = &type metadata for BuiltTargetDescription.Key;
    v10 = v5;
    v8[0] = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F138);
    sub_244931570(&qword_25739F1B0, &qword_25739F138, (uint64_t (*)(void))sub_2449315D4);
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  if (*(_QWORD *)(*((_QWORD *)&v17 + 1) + 16))
  {
    v7[0] = *((_QWORD *)&v17 + 1);
    v9 = &type metadata for BuiltTargetDescription.Key;
    v10 = v5;
    v8[0] = 8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
    sub_2449316B8((unint64_t *)&qword_25739F1A8, &qword_25739F158, MEMORY[0x24BE76D10]);
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  sub_2449314A4((uint64_t)&v18, (uint64_t)v20, &qword_25739F178);
  result = sub_2449314A4((uint64_t)v20, (uint64_t)v7, &qword_25739F178);
  if (v7[1])
  {
    sub_2449314A4((uint64_t)v20, (uint64_t)&v11, &qword_25739F178);
    v9 = &type metadata for BuiltTargetDescription.Key;
    v10 = v5;
    v8[0] = 9;
    sub_2449CF370();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  if (*(_QWORD *)(v19 + 16))
  {
    v11 = v19;
    v9 = &type metadata for BuiltTargetDescription.Key;
    v10 = v5;
    v8[0] = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
    sub_2449316B8((unint64_t *)&qword_25739F1A8, &qword_25739F158, MEMORY[0x24BE76D10]);
    sub_2449CF370();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  if (v13 == 1)
  {
    LOBYTE(v11) = v13;
    v9 = &type metadata for BuiltTargetDescription.Key;
    v10 = v5;
    v8[0] = v13;
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  return result;
}

uint64_t BuiltTargetDescription.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  ValueMetadata *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[21];
  ValueMetadata *v34;
  unint64_t v35;
  _QWORD v36[3];
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v37 = &type metadata for BuiltTargetDescription.Key;
  v5 = sub_244931460();
  v38 = v5;
  LOBYTE(v36[0]) = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    v7 = v42;
    v8 = v43;
    v37 = &type metadata for BuiltTargetDescription.Key;
    v38 = v5;
    LOBYTE(v36[0]) = 1;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    v37 = &type metadata for BuiltTargetDescription.Key;
    v38 = v5;
    LOBYTE(v36[0]) = 2;
    sub_2449CF3B8();
    v29 = v33[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    v11 = v40;
    v10 = v41;
    v34 = &type metadata for BuiltTargetDescription.Key;
    v35 = v5;
    v33[0] = 3;
    sub_244931618();
    sub_2449CF3B8();
    v21 = v11;
    v22 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    v23 = v36[0];
    v24 = v36[1];
    v27 = v37;
    v28 = v38;
    v25 = v36[2];
    v26 = v39;
    v34 = &type metadata for BuiltTargetDescription.Key;
    v35 = v5;
    v33[0] = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F0F8);
    sub_244931570(&qword_25739F188, &qword_25739F0F8, (uint64_t (*)(void))sub_2449314E8);
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    v20 = v44;
    v34 = &type metadata for BuiltTargetDescription.Key;
    v35 = v5;
    v33[0] = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F118);
    sub_244931570(&qword_25739F198, &qword_25739F118, (uint64_t (*)(void))sub_24493152C);
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    v12 = v31;
    if (!v31)
      v12 = MEMORY[0x24BEE4AF8];
    v19 = v12;
    v34 = &type metadata for BuiltTargetDescription.Key;
    v35 = v5;
    v33[0] = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
    sub_2449316B8((unint64_t *)&qword_25739F1A8, &qword_25739F158, MEMORY[0x24BE76D10]);
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    v13 = v31;
    if (!v31)
      v13 = MEMORY[0x24BEE4AF8];
    v18 = v13;
    v34 = &type metadata for BuiltTargetDescription.Key;
    v35 = v5;
    v33[0] = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F138);
    sub_244931570(&qword_25739F1B0, &qword_25739F138, (uint64_t (*)(void))sub_2449315D4);
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    if (v31)
      v14 = v31;
    else
      v14 = MEMORY[0x24BEE4AF8];
    v34 = &type metadata for BuiltTargetDescription.Key;
    v35 = v5;
    v33[0] = 8;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    if (v31)
      v15 = v31;
    else
      v15 = MEMORY[0x24BEE4AF8];
    v34 = &type metadata for BuiltTargetDescription.Key;
    v35 = v5;
    v33[0] = 9;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    v34 = &type metadata for BuiltTargetDescription.Key;
    v35 = v5;
    v33[0] = 10;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    if (v30)
      v16 = v30;
    else
      v16 = MEMORY[0x24BEE4AF8];
    v17 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v29 & 1;
    *(_DWORD *)(a2 + 17) = *(_DWORD *)v33;
    *(_DWORD *)(a2 + 20) = *(_DWORD *)&v33[3];
    *(_QWORD *)(a2 + 24) = v21;
    *(_QWORD *)(a2 + 32) = v22;
    *(_QWORD *)(a2 + 40) = v23;
    *(_QWORD *)(a2 + 48) = v24;
    *(_QWORD *)(a2 + 56) = v25;
    *(_QWORD *)(a2 + 64) = v27;
    *(_QWORD *)(a2 + 72) = v28;
    *(_QWORD *)(a2 + 80) = v26;
    *(_QWORD *)(a2 + 88) = v20;
    *(_QWORD *)(a2 + 96) = v19;
    *(_QWORD *)(a2 + 104) = v18;
    *(_QWORD *)(a2 + 112) = v14;
    *(_QWORD *)(a2 + 120) = v15;
    *(_QWORD *)(a2 + 128) = v31;
    *(_QWORD *)(a2 + 136) = v32;
    *(_QWORD *)(a2 + 144) = v16;
  }
  return result;
}

uint64_t sub_24492B824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BuiltTargetDescription.init(propertyListValue:)(a1, a2);
}

_QWORD *BuiltTargetDescription.buildProductPathsForDiagnostics.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v13;

  v3 = *(_QWORD *)(v1[12] + 16);
  v4 = *(_QWORD *)(v1[11] + 16);
  v5 = __OFADD__(v3, v4);
  v6 = v3 + v4;
  if (v5)
  {
    __break(1u);
LABEL_9:
    v1 = sub_24492F2BC(0, v1[2] + 1, 1, v1);
    goto LABEL_4;
  }
  v2 = v1[16];
  v0 = v1[17];
  v13 = sub_24492F2BC(0, v6 & ~(v6 >> 63), 0, MEMORY[0x24BEE4AF8]);
  v7 = swift_bridgeObjectRetain();
  sub_24492BD78(v7, (uint64_t)sub_24492B974, 0, (uint64_t)sub_2449409B8, sub_244930880);
  v8 = swift_bridgeObjectRetain();
  sub_24492BD78(v8, (uint64_t)sub_24492B974, 0, (uint64_t)sub_24494087C, sub_2449307B0);
  v1 = v13;
  if (!v0)
    return v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_9;
LABEL_4:
  v10 = v1[2];
  v9 = v1[3];
  if (v10 >= v9 >> 1)
    v1 = sub_24492F2BC((_QWORD *)(v9 > 1), v10 + 1, 1, v1);
  v1[2] = v10 + 1;
  v11 = &v1[2 * v10];
  v11[4] = v2;
  v11[5] = v0;
  return v1;
}

uint64_t sub_24492B974@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24492B980(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24492F2BC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_24492BAD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24492F3C8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_24492BC28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24492F4E8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_24492BD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  _QWORD *v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34[3];

  v7 = v5;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)*v5;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = a5;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v17 = v9[3] >> 1, v17 < v11))
  {
    if (v10 <= v11)
      v18 = v10 + v8;
    else
      v18 = v10;
    v9 = sub_24492F2BC(isUniquelyReferenced_nonNull_native, v18, 1, v9);
    v17 = v9[3] >> 1;
  }
  v19 = v9[2];
  v20 = v17 - v19;
  v21 = ((uint64_t (*)(uint64_t *, _QWORD *, int64_t, uint64_t, uint64_t, uint64_t))a4)(v34, &v9[2 * v19 + 4], v17 - v19, a1, a2, a3);
  if (v21 < v8)
    goto LABEL_15;
  if (v21)
  {
    v22 = v9[2];
    v23 = __OFADD__(v22, v21);
    v24 = v22 + v21;
    if (v23)
    {
      __break(1u);
      goto LABEL_28;
    }
    v9[2] = v24;
  }
  if (v21 == v20)
  {
LABEL_16:
    a4 = v9[2];
    v26 = v6();
    if (!v27)
      goto LABEL_13;
    while (1)
    {
      v28 = v9[3];
      v29 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v28 >> 1);
      if ((uint64_t)(v28 >> 1) < a4 + 1)
      {
        v31 = v26;
        v32 = v27;
        v33 = sub_24492F2BC((_QWORD *)(v28 > 1), a4 + 1, 1, v9);
        v27 = v32;
        v9 = v33;
        v26 = v31;
        v29 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v9[3] >> 1);
        if (a4 < (uint64_t)v29)
        {
LABEL_21:
          v30 = &v9[2 * a4 + 5];
          while (1)
          {
            *(v30 - 1) = v26;
            *v30 = v27;
            ++a4;
            v26 = v6();
            if (!v27)
              break;
            v30 += 2;
            if (v29 == (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a4)
            {
              a4 = (uint64_t)v29;
              goto LABEL_18;
            }
          }
LABEL_28:
          v9[2] = a4;
          break;
        }
      }
      else if (a4 < (uint64_t)v29)
      {
        goto LABEL_21;
      }
LABEL_18:
      v9[2] = a4;
    }
  }
LABEL_13:
  swift_bridgeObjectRelease();
  result = swift_release();
  *v7 = v9;
  return result;
}

uint64_t sub_24492BF3C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_24492F5F4(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_24492C090(uint64_t a1)
{
  return sub_24492C0A4(a1, &qword_25739F250);
}

uint64_t sub_24492C0A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v6 <= v4[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v5 <= v6)
    v16 = v5 + v3;
  else
    v16 = v5;
  v4 = sub_24492F700(isUniquelyReferenced_nonNull_native, v16, 1, v4, a2);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v3)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v10 = v4[2];
  if ((v4[3] >> 1) - v10 < v3)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = (unint64_t)&v4[6 * v10 + 4];
  if (a1 + 32 < v11 + 48 * v3 && v11 < a1 + 32 + 48 * v3)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v2 = v4;
    return result;
  }
  v13 = v4[2];
  v14 = __OFADD__(v13, v3);
  v15 = v13 + v3;
  if (!v14)
  {
    v4[2] = v15;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t BuiltTargetDescription.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v1[4];
  v4 = v1[6];
  v5 = v1[11];
  v16 = v1[12];
  v17 = v1[13];
  v6 = v1[15];
  v7 = v1[18];
  v18 = v1[14];
  v19 = v1[17];
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CFD60();
  sub_2449CFD60();
  if (v3)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  v8 = v7;
  sub_2449CFD60();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_2449304FC(a1, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_244930428(a1, v16);
  swift_bridgeObjectRelease();
  sub_2449CFD54();
  v9 = *(_QWORD *)(v17 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = v17 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_2449CF88C();
      swift_bridgeObjectRelease();
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_244930360(a1, v18);
  swift_bridgeObjectRelease();
  sub_2449CFD54();
  v11 = *(_QWORD *)(v6 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    v12 = v6 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_2449CF88C();
      swift_bridgeObjectRelease();
      v12 += 16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  sub_2449CFD60();
  if (v19)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  result = sub_2449CFD54();
  v14 = *(_QWORD *)(v8 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    v15 = v8 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_2449CF88C();
      swift_bridgeObjectRelease();
      v15 += 16;
      --v14;
    }
    while (v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t BuiltTargetDescription.hashValue.getter()
{
  _BYTE v1[72];

  sub_2449CFD48();
  BuiltTargetDescription.hash(into:)((uint64_t)v1);
  return sub_2449CFD84();
}

uint64_t sub_24492C5A4()
{
  _BYTE v1[72];

  sub_2449CFD48();
  BuiltTargetDescription.hash(into:)((uint64_t)v1);
  return sub_2449CFD84();
}

uint64_t sub_24492C5E4()
{
  _BYTE v1[72];

  sub_2449CFD48();
  BuiltTargetDescription.hash(into:)((uint64_t)v1);
  return sub_2449CFD84();
}

uint64_t BuiltObjectFileDescription.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltObjectFileDescription.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*BuiltObjectFileDescription.identifier.modify())()
{
  return nullsub_1;
}

uint64_t BuiltObjectFileDescription.path.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltObjectFileDescription.path.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*BuiltObjectFileDescription.path.modify())()
{
  return nullsub_1;
}

uint64_t BuiltObjectFileDescription.sourceFilePaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BuiltObjectFileDescription.sourceFilePaths.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*BuiltObjectFileDescription.sourceFilePaths.modify())()
{
  return nullsub_1;
}

uint64_t BuiltObjectFileDescription.forReplacement.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t BuiltObjectFileDescription.forReplacement.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*BuiltObjectFileDescription.forReplacement.modify())()
{
  return nullsub_1;
}

uint64_t BuiltObjectFileDescription.init(identifier:builtPath:sourceFilePaths:forReplacement:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_BYTE *)(a7 + 40) = a6;
  return result;
}

uint64_t sub_24492C774(char a1)
{
  return *(_QWORD *)&aIdentifipath_0[8 * a1];
}

uint64_t sub_24492C794(char *a1, char *a2)
{
  return sub_24499EF10(*a1, *a2);
}

uint64_t sub_24492C7A0()
{
  return sub_2449C5364();
}

uint64_t sub_24492C7A8()
{
  return sub_244923288();
}

uint64_t sub_24492C7B0()
{
  return sub_2449CB7B0();
}

uint64_t sub_24492C7B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244931C0C();
  *a1 = result;
  return result;
}

uint64_t sub_24492C7E4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24492C774(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24492C80C()
{
  char *v0;

  return sub_24492C774(*v0);
}

uint64_t BuiltObjectFileDescription.propertyListValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];
  ValueMetadata *v5;
  unint64_t v6;
  _BYTE v7[16];
  _BYTE v8[8];
  uint64_t v9;

  v1 = sub_244931674();
  sub_2449CF3E8();
  sub_2449314A4(v0, (uint64_t)v7, &qword_25739F178);
  result = sub_2449314A4((uint64_t)v7, (uint64_t)v8, &qword_25739F178);
  if (v9)
  {
    sub_2449314A4((uint64_t)v7, (uint64_t)&v3, &qword_25739F178);
    v5 = &type metadata for BuiltObjectFileDescription.Key;
    v6 = v1;
    v4[0] = 0;
    sub_2449CF370();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
  {
    v3 = *(_QWORD *)(v0 + 32);
    v5 = &type metadata for BuiltObjectFileDescription.Key;
    v6 = v1;
    v4[0] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F1D0);
    sub_2449316B8(&qword_25739F1D8, &qword_25739F1D0, MEMORY[0x24BE76DA0]);
    sub_2449CF370();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
  {
    LOBYTE(v3) = 0;
    v5 = &type metadata for BuiltObjectFileDescription.Key;
    v6 = v1;
    v4[0] = 3;
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  return result;
}

double BuiltObjectFileDescription.init(propertyListValue:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_244931C54(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_24492C9DC()
{
  return BuiltObjectFileDescription.propertyListValue.getter();
}

double sub_24492CA14@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_244931C54(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t BuiltObjectFileDescription.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  if (*(_QWORD *)(v2 + 8))
  {
    sub_2449CFD60();
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2449CFD60();
  }
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRetain();
  sub_24493061C(a1, v4);
  swift_bridgeObjectRelease();
  return sub_2449CFD60();
}

uint64_t BuiltObjectFileDescription.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  sub_2449CFD48();
  if (*(_QWORD *)(v0 + 8))
  {
    sub_2449CFD60();
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2449CFD60();
  }
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  sub_24493061C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  sub_2449CFD60();
  return sub_2449CFD84();
}

uint64_t sub_24492CBF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 32);
  sub_2449CFD48();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24493061C((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  sub_2449CFD60();
  return sub_2449CFD84();
}

uint64_t sub_24492CCD0(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return _s19PreviewsMessagingOS26BuiltObjectFileDescriptionV2eeoiySbAC_ACtFZ_0((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t BuiltStaticArchiveDescription.identifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t BuiltStaticArchiveDescription.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*BuiltStaticArchiveDescription.identifier.modify())()
{
  return nullsub_1;
}

uint64_t BuiltStaticArchiveDescription.path.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  return a3;
}

uint64_t BuiltStaticArchiveDescription.path.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*BuiltStaticArchiveDescription.path.modify())()
{
  return nullsub_1;
}

uint64_t sub_24492CE04(char a1)
{
  if ((a1 & 1) != 0)
    return 1752457584;
  else
    return 0x696669746E656469;
}

uint64_t sub_24492CE38(char *a1, char *a2)
{
  return sub_24499EBE8(*a1, *a2);
}

uint64_t sub_24492CE44()
{
  return sub_2449C53CC();
}

uint64_t sub_24492CE4C()
{
  return sub_24492318C();
}

uint64_t sub_24492CE54()
{
  return sub_2449CB904();
}

uint64_t sub_24492CE5C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24492CEB8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24492CE04(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24492CEE0()
{
  char *v0;

  return sub_24492CE04(*v0);
}

uint64_t BuiltStaticArchiveDescription.propertyListValue.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_244931ED8();
  result = sub_2449CF3E8();
  if (a2)
  {
    v9 = a1;
    v10 = a2;
    v7 = &type metadata for BuiltStaticArchiveDescription.Key;
    v8 = v4;
    v6[0] = 0;
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  return result;
}

uint64_t BuiltStaticArchiveDescription.init(propertyListValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_244931F1C(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_24492CFC4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  __int128 v4;
  _BYTE v5[24];
  ValueMetadata *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  v4 = *(_OWORD *)(v0 + 1);
  v2 = sub_244931ED8();
  result = sub_2449CF3E8();
  if ((_QWORD)v4)
  {
    v8 = v1;
    v9 = v4;
    v6 = &type metadata for BuiltStaticArchiveDescription.Key;
    v7 = v2;
    v5[0] = 0;
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

uint64_t sub_24492D090@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_244931F1C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t BuiltStaticArchiveDescription.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_2449CFD60();
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2449CFD60();
  }
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t BuiltStaticArchiveDescription.hashValue.getter(uint64_t a1, uint64_t a2)
{
  sub_2449CFD48();
  sub_2449CFD60();
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24492D200()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_2449CFD48();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24492D2A8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    sub_2449CFD60();
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2449CFD60();
  }
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492D33C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_2449CFD48();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24492D3E0(uint64_t *a1, uint64_t *a2)
{
  return _s19PreviewsMessagingOS29BuiltStaticArchiveDescriptionV2eeoiySbAC_ACtFZ_0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t BuiltTargetDescription.PlatformVersion.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltTargetDescription.PlatformVersion.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*BuiltTargetDescription.PlatformVersion.name.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.PlatformVersion.minVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltTargetDescription.PlatformVersion.minVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*BuiltTargetDescription.PlatformVersion.minVersion.modify())()
{
  return nullsub_1;
}

uint64_t BuiltTargetDescription.PlatformVersion.sdkVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BuiltTargetDescription.PlatformVersion.sdkVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*BuiltTargetDescription.PlatformVersion.sdkVersion.modify())()
{
  return nullsub_1;
}

void __swiftcall BuiltTargetDescription.PlatformVersion.init(name:minVersion:sdkVersion:)(PreviewsMessagingOS::BuiltTargetDescription::PlatformVersion *__return_ptr retstr, Swift::String name, Swift::String minVersion, Swift::String sdkVersion)
{
  retstr->name = name;
  retstr->minVersion = minVersion;
  retstr->sdkVersion = sdkVersion;
}

uint64_t BuiltTargetDescription.PlatformVersion.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t BuiltTargetDescription.PlatformVersion.hashValue.getter()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24492D6AC(char a1)
{
  return *(_QWORD *)&aName_5[8 * a1];
}

uint64_t sub_24492D6CC()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24492D77C()
{
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492D818()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24492D8C8(char *a1, char *a2)
{
  return sub_24499FAA4(*a1, *a2);
}

uint64_t sub_24492D8D4()
{
  return sub_2449C5448();
}

uint64_t sub_24492D8DC()
{
  return sub_244923828();
}

uint64_t sub_24492D8E4()
{
  return sub_2449CAEE4();
}

uint64_t sub_24492D8EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449334D8();
  *a1 = result;
  return result;
}

uint64_t sub_24492D918@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24492D6AC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24492D940()
{
  char *v0;

  return sub_24492D6AC(*v0);
}

uint64_t BuiltTargetDescription.PlatformVersion.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24492D988()
{
  sub_24493206C();
  return sub_2449CF5F8();
}

uint64_t BuiltTargetDescription.PlatformVersion.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  ValueMetadata *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = &type metadata for BuiltTargetDescription.PlatformVersion.Key;
  v5 = sub_24493206C();
  v17 = v5;
  v15[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    v8 = v18;
    v7 = v19;
    v16 = &type metadata for BuiltTargetDescription.PlatformVersion.Key;
    v17 = v5;
    v15[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    v16 = &type metadata for BuiltTargetDescription.PlatformVersion.Key;
    v17 = v5;
    v15[0] = 2;
    sub_2449CF37C();
    v10 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v13;
    a2[3] = v14;
    a2[4] = v11;
    a2[5] = v12;
  }
  return result;
}

uint64_t sub_24492DBD4()
{
  return sub_2449CF3D0();
}

uint64_t sub_24492DC14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return BuiltTargetDescription.PlatformVersion.init(propertyListValue:)(a1, a2);
}

Swift::Void __swiftcall BuiltTargetDescription.describe(with:)(Swift::OpaquePointer *with)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void (*v18)(_QWORD);
  char *rawValue;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _BYTE *, uint64_t);
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  void (*v27)(char *, _BYTE *, uint64_t);
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE v43[12];
  unsigned int v44;
  _BYTE *v45;
  _QWORD *v46;
  unint64_t v47;
  void (*v48)(_BYTE *, _QWORD, uint64_t);
  _OWORD v49[3];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[5];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[16];
  uint64_t v58;
  _BYTE v59[48];
  _BYTE v60[16];
  _BYTE v61[8];
  uint64_t v62;
  _OWORD v63[3];

  v3 = sub_2449CF6DC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v46 = &v43[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x24BDAC7A8](v5);
  v45 = &v43[-v8];
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = &v43[-v10];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v43[-v12];
  v14 = v1[7];
  v53[4] = v1[6];
  v54 = v14;
  v55 = v1[8];
  v56 = *((_QWORD *)v1 + 18);
  v15 = v1[3];
  v53[0] = v1[2];
  v53[1] = v15;
  v16 = v1[5];
  v53[2] = v1[4];
  v53[3] = v16;
  v17 = v1[1];
  v51 = *v1;
  v52 = v17;
  *v13 = 123;
  v13[1] = 0xE100000000000000;
  v18 = *(void (**)(_QWORD))(v4 + 104);
  v44 = *MEMORY[0x24BE76A70];
  v48 = (void (*)(_BYTE *, _QWORD, uint64_t))v18;
  v18(&v43[-v12]);
  rawValue = (char *)with->_rawValue;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    rawValue = (char *)sub_24492F0B4(0, *((_QWORD *)rawValue + 2) + 1, 1, (unint64_t)rawValue);
  v21 = *((_QWORD *)rawValue + 2);
  v20 = *((_QWORD *)rawValue + 3);
  if (v21 >= v20 >> 1)
    rawValue = (char *)sub_24492F0B4(v20 > 1, v21 + 1, 1, (unint64_t)rawValue);
  *((_QWORD *)rawValue + 2) = v21 + 1;
  v47 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v22 = *(_QWORD *)(v4 + 72);
  v23 = *(void (**)(char *, _BYTE *, uint64_t))(v4 + 32);
  v23(&rawValue[v47 + v22 * v21], v13, v3);
  v48(v11, *MEMORY[0x24BE76A78], v3);
  v25 = *((_QWORD *)rawValue + 2);
  v24 = *((_QWORD *)rawValue + 3);
  if (v25 >= v24 >> 1)
    rawValue = (char *)sub_24492F0B4(v24 > 1, v25 + 1, 1, (unint64_t)rawValue);
  *((_QWORD *)rawValue + 2) = v25 + 1;
  v26 = v11;
  v27 = v23;
  v23(&rawValue[v47 + v25 * v22], v26, v3);
  with->_rawValue = rawValue;
  v63[0] = v51;
  swift_bridgeObjectRetain();
  sub_2449CF934();
  swift_bridgeObjectRelease();
  sub_2449314A4((uint64_t)&v52 + 8, (uint64_t)v60, &qword_25739F178);
  sub_2449314A4((uint64_t)v60, (uint64_t)v61, &qword_25739F178);
  if (v62)
  {
    sub_2449314A4((uint64_t)v60, (uint64_t)v63, &qword_25739F178);
    sub_244932118((uint64_t)v60);
    sub_2449CF934();
    sub_244932140((uint64_t)v60);
  }
  sub_2449314A4((uint64_t)v53 + 8, (uint64_t)v59, &qword_25739F180);
  v28 = sub_2449314A4((uint64_t)v59, (uint64_t)v63, &qword_25739F180);
  if (*((_QWORD *)&v63[0] + 1))
  {
    v49[0] = v63[0];
    v49[1] = v63[1];
    v49[2] = v63[2];
    sub_244932168();
    v28 = sub_2449CF94C();
  }
  v29 = v45;
  if (v52 == 1)
  {
    LOBYTE(v49[0]) = 1;
    v28 = sub_2449CF934();
  }
  MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)&v43[-16] = &v51;
  v30 = sub_2449CF928();
  MEMORY[0x24BDAC7A8](v30);
  *(_QWORD *)&v43[-16] = &v51;
  v31 = sub_2449CF928();
  MEMORY[0x24BDAC7A8](v31);
  *(_QWORD *)&v43[-16] = &v51;
  v32 = sub_2449CF928();
  MEMORY[0x24BDAC7A8](v32);
  *(_QWORD *)&v43[-16] = &v51;
  sub_2449CF928();
  v58 = *((_QWORD *)&v54 + 1);
  if (*(_QWORD *)(*((_QWORD *)&v54 + 1) + 16))
  {
    *(_QWORD *)&v49[0] = *((_QWORD *)&v54 + 1);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
    sub_2449320D0(&qword_25739F1F0, &qword_25739F158, MEMORY[0x24BEE12B0]);
    v33 = sub_2449CF844();
    v35 = v34;
    sub_244933580((uint64_t)&v58);
    *(_QWORD *)&v49[0] = v33;
    *((_QWORD *)&v49[0] + 1) = v35;
    sub_2449CF958();
    swift_bridgeObjectRelease();
  }
  sub_2449314A4((uint64_t)&v55, (uint64_t)v57, &qword_25739F178);
  v36 = sub_2449314A4((uint64_t)v57, (uint64_t)v49, &qword_25739F178);
  if (*((_QWORD *)&v49[0] + 1))
  {
    sub_2449314A4((uint64_t)v57, (uint64_t)&v50, &qword_25739F178);
    sub_244932118((uint64_t)v57);
    sub_2449CF934();
    v36 = sub_244932140((uint64_t)v57);
  }
  MEMORY[0x24BDAC7A8](v36);
  *(_QWORD *)&v43[-16] = &v51;
  sub_2449CF928();
  v48(v29, *MEMORY[0x24BE76A80], v3);
  v37 = (char *)with->_rawValue;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v37 = (char *)sub_24492F0B4(0, *((_QWORD *)v37 + 2) + 1, 1, (unint64_t)v37);
  v39 = *((_QWORD *)v37 + 2);
  v38 = *((_QWORD *)v37 + 3);
  if (v39 >= v38 >> 1)
    v37 = (char *)sub_24492F0B4(v38 > 1, v39 + 1, 1, (unint64_t)v37);
  *((_QWORD *)v37 + 2) = v39 + 1;
  v27(&v37[v47 + v39 * v22], v29, v3);
  v40 = v46;
  *v46 = 125;
  v40[1] = 0xE100000000000000;
  v48(v40, v44, v3);
  v42 = *((_QWORD *)v37 + 2);
  v41 = *((_QWORD *)v37 + 3);
  if (v42 >= v41 >> 1)
    v37 = (char *)sub_24492F0B4(v41 > 1, v42 + 1, 1, (unint64_t)v37);
  *((_QWORD *)v37 + 2) = v42 + 1;
  v27(&v37[v47 + v42 * v22], v40, v3);
  with->_rawValue = v37;
}

uint64_t sub_24492E3C8(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t (*v35)(unint64_t, char *, uint64_t);
  void (*v36)(char *, _QWORD, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  char v45;

  v4 = sub_2449CF6DC();
  v40 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v28 - v8;
  result = *(_QWORD *)(a2 + 88);
  v43 = result;
  v10 = *(_QWORD *)(result + 16);
  if (v10)
  {
    v30 = *MEMORY[0x24BE76A78];
    v29 = *MEMORY[0x24BE76A80];
    v11 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 72);
    v31 = v7;
    v32 = v4;
    do
    {
      v12 = *((_QWORD *)v11 - 5);
      v13 = *((_QWORD *)v11 - 4);
      v14 = *((_QWORD *)v11 - 3);
      v15 = *((_QWORD *)v11 - 2);
      v16 = *((_QWORD *)v11 - 1);
      v17 = *v11;
      v44[0] = v12;
      v44[1] = v13;
      v44[2] = v14;
      v44[3] = v15;
      v44[4] = v16;
      v45 = v17;
      v41 = v14;
      v42 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = v16;
      swift_bridgeObjectRetain();
      sub_2449CF958();
      v36 = *(void (**)(char *, _QWORD, uint64_t))(v40 + 104);
      v36(v39, v30, v4);
      v18 = *a1;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v38 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v18 = sub_24492F0B4(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
      v21 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      if (v21 >= v20 >> 1)
        v18 = sub_24492F0B4(v20 > 1, v21 + 1, 1, v18);
      *(_QWORD *)(v18 + 16) = v21 + 1;
      v34 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      v33 = *(_QWORD *)(v40 + 72);
      v22 = v18 + v34 + v33 * v21;
      v4 = v32;
      v35 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v40 + 32);
      v23 = v35(v22, v39, v32);
      *a1 = v18;
      if (v13 && (v12 != v14 || v13 != v15))
      {
        v23 = sub_2449CFCD0();
        if ((v23 & 1) == 0)
        {
          v41 = v12;
          v42 = v13;
          swift_bridgeObjectRetain();
          sub_2449CF934();
          v23 = swift_bridgeObjectRelease();
        }
      }
      v24 = v31;
      if (v17)
      {
        LOBYTE(v41) = v17;
        v23 = sub_2449CF934();
      }
      MEMORY[0x24BDAC7A8](v23);
      *(&v28 - 2) = (uint64_t)v44;
      sub_2449CF928();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36(v24, v29, v4);
      v25 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = sub_24492F0B4(0, *(_QWORD *)(v25 + 16) + 1, 1, v25);
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(_QWORD *)(v25 + 24);
      if (v27 >= v26 >> 1)
        v25 = sub_24492F0B4(v26 > 1, v27 + 1, 1, v25);
      *(_QWORD *)(v25 + 16) = v27 + 1;
      v35(v25 + v34 + v27 * v33, v24, v4);
      *a1 = v25;
      v11 += 48;
      v10 = v38 - 1;
    }
    while (v38 != 1);
    return sub_244933580((uint64_t)&v43);
  }
  return result;
}

uint64_t sub_24492E798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8[3];

  v2 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain_n();
  v3 = sub_24493D9C8(v2);
  swift_bridgeObjectRelease();
  v8[0] = (uint64_t)v3;
  sub_24492F8AC(v8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v8[0] + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v8[0] + 40);
    do
    {
      v6 = *v5;
      v8[0] = *(v5 - 1);
      v8[1] = v6;
      sub_2449CF958();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return swift_release();
}

uint64_t sub_24492E880(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  uint64_t v22;
  char *v23;
  void (*v24)(unint64_t, char *, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = sub_2449CF6DC();
  v39 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v38 = (char *)&v30 - v8;
  result = *(_QWORD *)(a2 + 96);
  v42 = result;
  v10 = *(_QWORD *)(result + 16);
  if (v10)
  {
    v33 = *MEMORY[0x24BE76A78];
    v32 = *MEMORY[0x24BE76A80];
    v11 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    v37 = v4;
    v31 = v7;
    do
    {
      v12 = *(v11 - 2);
      v34 = *(v11 - 3);
      v13 = *(v11 - 1);
      v14 = *v11;
      v40 = v13;
      v41 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      sub_2449CF934();
      swift_bridgeObjectRelease();
      v36 = *(void (**)(char *, _QWORD, uint64_t))(v39 + 104);
      v36(v38, v33, v4);
      v15 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_24492F0B4(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
        v15 = sub_24492F0B4(v16 > 1, v17 + 1, 1, v15);
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v18 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      v35 = *(_QWORD *)(v39 + 72);
      v19 = v15 + v18 + v35 * v17;
      v20 = v37;
      v21 = *(void (**)(unint64_t, char *, uint64_t))(v39 + 32);
      v21(v19, v38, v37);
      *a1 = v15;
      if (v12)
      {
        v22 = v34;
        if (v34 == v13 && v12 == v14 || (sub_2449CFCD0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v40 = v22;
          v41 = v12;
          swift_bridgeObjectRetain();
          sub_2449CF934();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v23 = v31;
      v24 = v21;
      v25 = v35;
      v36(v31, v32, v20);
      v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v26 = sub_24492F0B4(0, *(_QWORD *)(v26 + 16) + 1, 1, v26);
      v28 = *(_QWORD *)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      if (v28 >= v27 >> 1)
        v26 = sub_24492F0B4(v27 > 1, v28 + 1, 1, v26);
      v11 += 4;
      *(_QWORD *)(v26 + 16) = v28 + 1;
      v29 = v26 + v18 + v28 * v25;
      v4 = v37;
      v24(v29, v23, v37);
      *a1 = v26;
      --v10;
    }
    while (v10);
    return sub_244933580((uint64_t)&v42);
  }
  return result;
}

uint64_t sub_24492EBC4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)(a2 + 104);
  v5 = result;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = swift_bridgeObjectRetain() + 40;
    do
    {
      sub_2449CF958();
      v4 += 16;
      --v3;
    }
    while (v3);
    return sub_244933580((uint64_t)&v5);
  }
  return result;
}

uint64_t sub_24492EC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 112);
  v6 = v2;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    sub_24493353C();
    swift_bridgeObjectRetain();
    v4 = v2 + 48;
    do
    {
      v4 += 24;
      sub_2449CF94C();
      --v3;
    }
    while (v3);
    return sub_244933580((uint64_t)&v6);
  }
  return result;
}

uint64_t sub_24492ECDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)(a2 + 144);
  v5 = result;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = swift_bridgeObjectRetain() + 40;
    do
    {
      sub_2449CF958();
      v4 += 16;
      --v3;
    }
    while (v3);
    return sub_244933580((uint64_t)&v5);
  }
  return result;
}

uint64_t BuiltTargetDescription.summary.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  Swift::OpaquePointer with;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  with._rawValue = (void *)MEMORY[0x24BEE4AF8];
  sub_244931150((uint64_t)v8);
  BuiltTargetDescription.describe(with:)(&with);
  v5 = sub_2449CF91C();
  swift_bridgeObjectRelease();
  sub_2449321AC((uint64_t)v8);
  return v5;
}

uint64_t sub_24492EE04()
{
  uint64_t v0;

  sub_2449CF940();
  v0 = sub_2449CF91C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24492EEA0()
{
  uint64_t v0;
  Swift::OpaquePointer with;

  with._rawValue = (void *)MEMORY[0x24BEE4AF8];
  BuiltTargetDescription.describe(with:)(&with);
  v0 = sub_2449CF91C();
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Void __swiftcall BuiltTargetDescription.PlatformVersion.describe(with:)(Swift::OpaquePointer *with)
{
  sub_2449CF940();
}

uint64_t sub_24492EF7C()
{
  swift_bridgeObjectRetain();
  sub_2449CF934();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF934();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF934();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24492F07C()
{
  return sub_24492EE04();
}

uint64_t sub_24492F0B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F268);
  v10 = *(_QWORD *)(sub_2449CF6DC() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_2449CFBEC();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_2449CF6DC() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_244930EC4(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_24492F2BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739F270);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2449318F4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24492F3C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739F288);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_244931800(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24492F4E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739F280);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_244931710(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24492F5F4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739F258);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_244931A2C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24492F700(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
          memmove(v13, a4 + 4, 48 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_244931B1C(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_24492F82C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2449AF480(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24492F848(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2449AF5E8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

_QWORD *sub_24492F864(_QWORD *a1)
{
  return sub_24492F4E8(0, a1[2], 0, a1);
}

_QWORD *sub_24492F878(_QWORD *a1)
{
  return sub_24492F700(0, a1[2], 0, a1, &qword_25739F278);
}

uint64_t sub_24492F8AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2449B0718(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_24492F914(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24492F914(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_2449CFC7C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_24492FFFC(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_2449300C8((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_2449B06F0((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_2449CF970();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_2449CFCD0();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_2449CFCD0()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2449B04C0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_2449B04C0((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_2449300C8((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_2449CFCD0() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_2449CFBEC();
  __break(1u);
  return result;
}

uint64_t sub_24492FFFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_2449CFCD0(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2449300C8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_2449CFCD0() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_2449CFCD0() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_2449B0648((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_244930360(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_2449CFD54();
  if (v3)
  {
    v5 = a2 + 48;
    do
    {
      v5 += 24;
      sub_2449CFD54();
      swift_bridgeObjectRetain();
      sub_2449CF88C();
      sub_2449CF88C();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_244930428(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_2449CFD54();
  if (v3)
  {
    v5 = a2 + 56;
    do
    {
      if (*(_QWORD *)(v5 - 16))
      {
        sub_2449CFD60();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_2449CF88C();
      }
      else
      {
        sub_2449CFD60();
        swift_bridgeObjectRetain();
      }
      v5 += 32;
      swift_bridgeObjectRetain();
      sub_2449CF88C();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2449304FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_2449CFD54();
  if (v4)
  {
    v6 = a2 + 72;
    do
    {
      v7 = *(_QWORD *)(v6 - 8);
      if (*(_QWORD *)(v6 - 32))
      {
        sub_2449CFD60();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_2449CF88C();
      }
      else
      {
        sub_2449CFD60();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      sub_2449CF88C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_24493061C(a1, v7);
      swift_bridgeObjectRelease();
      sub_2449CFD60();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v6 += 48;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_24493061C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_2449CFD84();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_2449CFD54();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_2449CFD48();
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    v11 = sub_2449CFD84();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_2449307B0()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t *);
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v1 = v0[1];
  v2 = *(_QWORD *)(*v0 + 16);
  if (v1 == v2)
    return 0;
  if (v1 >= v2)
  {
    __break(1u);
  }
  else
  {
    v4 = *v0 + 48 * v1;
    v5 = *(_BYTE *)(v4 + 72);
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(_QWORD *)(v4 + 64);
    v8 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[2];
    v11 = *(_QWORD *)(v4 + 32);
    v9 = *(_OWORD *)(v4 + 40);
    v0[1] = v1 + 1;
    v12 = v9;
    v13 = v7;
    v14 = v6;
    v15 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(&v10, &v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t sub_244930880()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v1 = v0[1];
  v2 = *(_QWORD *)(*v0 + 16);
  if (v1 == v2)
    return 0;
  if (v1 >= v2)
  {
    __break(1u);
  }
  else
  {
    v4 = v1 + 1;
    v5 = *v0 + 32 * v1;
    v6 = *(_QWORD *)(v5 + 56);
    v7 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[2];
    v10 = *(_QWORD *)(v5 + 32);
    v8 = *(_OWORD *)(v5 + 40);
    v0[1] = v4;
    v11 = v8;
    v12 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7(&v9, &v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

uint64_t _s19PreviewsMessagingOS22BuiltTargetDescriptionV15PlatformVersionV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char v12;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_2449CFCD0(), result = 0, (v10 & 1) != 0))
  {
    if (v2 == v6 && v4 == v7 || (v12 = sub_2449CFCD0(), result = 0, (v12 & 1) != 0))
    {
      if (v3 == v8 && v5 == v9)
        return 1;
      else
        return sub_2449CFCD0();
    }
  }
  return result;
}

uint64_t _s19PreviewsMessagingOS22BuiltTargetDescriptionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v33 = *(_QWORD *)(a1 + 56);
  v35 = *(_QWORD *)(a1 + 40);
  v36 = *(_QWORD *)(a1 + 64);
  v31 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 88);
  v26 = *(_QWORD *)(a1 + 96);
  v24 = *(_QWORD **)(a1 + 104);
  v22 = *(_QWORD *)(a1 + 112);
  v20 = *(_QWORD **)(a1 + 120);
  v16 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 136);
  v14 = *(_QWORD **)(a1 + 144);
  v6 = *(unsigned __int8 *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v32 = *(_QWORD *)(a2 + 64);
  v29 = *(_QWORD *)(a2 + 80);
  v30 = *(_QWORD *)(a2 + 72);
  v27 = *(_QWORD *)(a2 + 88);
  v25 = *(_QWORD *)(a2 + 96);
  v23 = *(_QWORD **)(a2 + 104);
  v21 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD **)(a2 + 120);
  v15 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 136);
  v13 = *(_QWORD **)(a2 + 144);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v6)
      return 0;
  }
  else if ((sub_2449CFCD0() & 1) == 0 || ((v2 ^ v6) & 1) != 0)
  {
    return 0;
  }
  if (v3)
  {
    if (!v7 || (v4 != v8 || v3 != v7) && (sub_2449CFCD0() & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (!v5)
  {
    if (!v9)
      goto LABEL_27;
LABEL_39:
    sub_244929FD8(v10, v9);
    sub_24492A070(v35, v5);
    sub_24492A070(v10, v9);
    return 0;
  }
  if (!v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_39;
  }
  if ((v35 != v10 || v5 != v9) && (sub_2449CFCD0() & 1) == 0
    || (v33 != v11 || v36 != v32) && (sub_2449CFCD0() & 1) == 0
    || (v31 != v30 || v34 != v29) && (sub_2449CFCD0() & 1) == 0)
  {
    return 0;
  }
LABEL_27:
  if ((sub_244938AFC(v28, v27) & 1) == 0
    || (sub_244938C88(v26, v25) & 1) == 0
    || (sub_244938D64(v24, v23) & 1) == 0
    || (sub_244938E28(v22, v21) & 1) == 0
    || (sub_244938D64(v20, v19) & 1) == 0)
  {
    return 0;
  }
  if (!v18)
  {
    if (!v17)
      return sub_244938D64(v14, v13);
    return 0;
  }
  if (!v17 || (v16 != v15 || v18 != v17) && (sub_2449CFCD0() & 1) == 0)
    return 0;
  return sub_244938D64(v14, v13);
}

uint64_t _s19PreviewsMessagingOS26BuiltObjectFileDescriptionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;
  char v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (v5)
      goto LABEL_17;
    goto LABEL_10;
  }
  if (!v5)
    goto LABEL_17;
  v6 = *(_QWORD *)a1 == *(_QWORD *)a2 && v4 == v5;
  if (v6 || (v7 = sub_2449CFCD0(), v8 = 0, (v7 & 1) != 0))
  {
LABEL_10:
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16) || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    {
      v10 = sub_2449CFCD0();
      v8 = 0;
      if ((v10 & 1) == 0)
        return v8 & 1;
    }
    if ((sub_2449B5690(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) != 0)
    {
      v8 = ((*(_BYTE *)(a1 + 40) & 1) == 0) ^ *(_BYTE *)(a2 + 40);
      return v8 & 1;
    }
LABEL_17:
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t _s19PreviewsMessagingOS29BuiltStaticArchiveDescriptionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  if (!a2)
  {
    if (!a6)
    {
LABEL_9:
      if (a3 == a7 && a4 == a8)
        return 1;
      else
        return sub_2449CFCD0();
    }
    return 0;
  }
  if (!a6)
    return 0;
  if (a1 == a5 && a2 == a6)
    goto LABEL_9;
  v12 = sub_2449CFCD0();
  result = 0;
  if ((v12 & 1) != 0)
    goto LABEL_9;
  return result;
}

uint64_t sub_244930EC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_2449CF6DC() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_244930FDC(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_24492F848(0, v2, 0);
    v5 = a2;
    v3 = v23;
    v6 = (_BYTE *)(a1 + 72);
    do
    {
      v21 = *((_QWORD *)v6 - 5);
      v22 = *((_QWORD *)v6 - 4);
      v7 = *((_QWORD *)v6 - 3);
      v8 = *((_QWORD *)v6 - 2);
      v9 = *((_QWORD *)v6 - 1);
      v20 = *v6;
      v10 = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v10)
      {
        swift_bridgeObjectRetain();
        v11 = sub_24493D884(v7, v8);
        v12 = v8;
        if ((v13 & 1) != 0)
        {
          v14 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v11);
          v7 = *v14;
          v12 = v14[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v8 = v12;
        v5 = a2;
      }
      v16 = *(_QWORD *)(v23 + 16);
      v15 = *(_QWORD *)(v23 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_24492F848(v15 > 1, v16 + 1, 1);
        v5 = a2;
      }
      *(_QWORD *)(v23 + 16) = v16 + 1;
      v17 = v23 + 48 * v16;
      *(_QWORD *)(v17 + 32) = v21;
      *(_QWORD *)(v17 + 40) = v22;
      *(_QWORD *)(v17 + 48) = v7;
      *(_QWORD *)(v17 + 56) = v8;
      *(_QWORD *)(v17 + 64) = v9;
      *(_BYTE *)(v17 + 72) = v20;
      v6 += 48;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_244931150(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_244929FD8(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_244931230(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_24492F82C(0, v2, 0);
    v5 = a2;
    v3 = v21;
    v6 = (uint64_t *)(a1 + 56);
    do
    {
      v7 = *(v6 - 2);
      v20 = *(v6 - 3);
      v8 = *(v6 - 1);
      v9 = *v6;
      v10 = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v10)
      {
        swift_bridgeObjectRetain();
        v11 = sub_24493D884(v8, v9);
        v12 = v9;
        if ((v13 & 1) != 0)
        {
          v14 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v11);
          v8 = *v14;
          v12 = v14[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v9 = v12;
        v5 = a2;
      }
      v16 = *(_QWORD *)(v21 + 16);
      v15 = *(_QWORD *)(v21 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_24492F82C(v15 > 1, v16 + 1, 1);
        v5 = a2;
      }
      v6 += 4;
      *(_QWORD *)(v21 + 16) = v16 + 1;
      v17 = (_QWORD *)(v21 + 32 * v16);
      v17[4] = v20;
      v17[5] = v7;
      v17[6] = v8;
      v17[7] = v9;
      --v2;
    }
    while (v2);
  }
  return v3;
}

unint64_t sub_244931380()
{
  unint64_t result;

  result = qword_25739F100;
  if (!qword_25739F100)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltObjectFileDescription, &type metadata for BuiltObjectFileDescription);
    atomic_store(result, (unint64_t *)&qword_25739F100);
  }
  return result;
}

unint64_t sub_2449313C4()
{
  unint64_t result;

  result = qword_25739F120;
  if (!qword_25739F120)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltStaticArchiveDescription, &type metadata for BuiltStaticArchiveDescription);
    atomic_store(result, (unint64_t *)&qword_25739F120);
  }
  return result;
}

unint64_t sub_244931408()
{
  unint64_t result;

  result = qword_25739F140;
  if (!qword_25739F140)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand, &type metadata for JITLoadCommand);
    atomic_store(result, (unint64_t *)&qword_25739F140);
  }
  return result;
}

uint64_t sub_24493144C(_BYTE *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v2 + 16);
  *a1 = 0;
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

unint64_t sub_244931460()
{
  unint64_t result;

  result = qword_25739F170;
  if (!qword_25739F170)
  {
    result = MEMORY[0x24951C158](&unk_2449D197C, &type metadata for BuiltTargetDescription.Key);
    atomic_store(result, (unint64_t *)&qword_25739F170);
  }
  return result;
}

uint64_t sub_2449314A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_2449314E8()
{
  unint64_t result;

  result = qword_25739F190;
  if (!qword_25739F190)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltObjectFileDescription, &type metadata for BuiltObjectFileDescription);
    atomic_store(result, (unint64_t *)&qword_25739F190);
  }
  return result;
}

unint64_t sub_24493152C()
{
  unint64_t result;

  result = qword_25739F1A0;
  if (!qword_25739F1A0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltStaticArchiveDescription, &type metadata for BuiltStaticArchiveDescription);
    atomic_store(result, (unint64_t *)&qword_25739F1A0);
  }
  return result;
}

uint64_t sub_244931570(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D10], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2449315D4()
{
  unint64_t result;

  result = qword_25739F1B8;
  if (!qword_25739F1B8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand, &type metadata for JITLoadCommand);
    atomic_store(result, (unint64_t *)&qword_25739F1B8);
  }
  return result;
}

unint64_t sub_244931618()
{
  unint64_t result;

  result = qword_25739F1C0;
  if (!qword_25739F1C0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltTargetDescription.PlatformVersion, &type metadata for BuiltTargetDescription.PlatformVersion);
    atomic_store(result, (unint64_t *)&qword_25739F1C0);
  }
  return result;
}

uint64_t sub_24493165C(_BYTE *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  *a1 = 1;
  v4 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

unint64_t sub_244931674()
{
  unint64_t result;

  result = qword_25739F1C8;
  if (!qword_25739F1C8)
  {
    result = MEMORY[0x24951C158](&unk_2449D1954, &type metadata for BuiltObjectFileDescription.Key);
    atomic_store(result, (unint64_t *)&qword_25739F1C8);
  }
  return result;
}

uint64_t sub_2449316B8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = MEMORY[0x24BE76CC0];
    result = MEMORY[0x24951C158](a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_244931710(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_244931800(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_2449318F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_2449319E4()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB)
    return 11;
  else
    return v0;
}

uint64_t sub_244931A2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_244931B1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t sub_244931C0C()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_244931C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  ValueMetadata *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = &type metadata for BuiltObjectFileDescription.Key;
  v5 = sub_244931674();
  v18 = v5;
  v16[0] = 0;
  sub_2449CF3B8();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v8 = v19;
    v7 = v20;
    v17 = &type metadata for BuiltObjectFileDescription.Key;
    v18 = v5;
    v16[0] = 1;
    sub_2449CF37C();
    v13 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v17 = &type metadata for BuiltObjectFileDescription.Key;
    v18 = v5;
    v16[0] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F1D0);
    sub_2449316B8(&qword_25739F1D8, &qword_25739F1D0, MEMORY[0x24BE76DA0]);
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    if (v21)
      v9 = v21;
    else
      v9 = MEMORY[0x24BEE4B08];
    v17 = &type metadata for BuiltObjectFileDescription.Key;
    v18 = v5;
    v16[0] = 3;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v11 = (v21 == 2) | v21;
    v12 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v9;
    *(_BYTE *)(a2 + 40) = v11 & 1;
  }
  return result;
}

unint64_t sub_244931ED8()
{
  unint64_t result;

  result = qword_25739F1E0;
  if (!qword_25739F1E0)
  {
    result = MEMORY[0x24951C158](&unk_2449D192C, &type metadata for BuiltStaticArchiveDescription.Key);
    atomic_store(result, (unint64_t *)&qword_25739F1E0);
  }
  return result;
}

uint64_t sub_244931F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;

  v9 = &type metadata for BuiltStaticArchiveDescription.Key;
  v4 = sub_244931ED8();
  v10 = v4;
  v8[0] = 0;
  sub_2449CF3B8();
  if (v1)
  {
    v5 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    v2 = v11;
    v9 = &type metadata for BuiltStaticArchiveDescription.Key;
    v10 = v4;
    v8[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  }
  return v2;
}

uint64_t sub_244932064()
{
  return sub_24492D988();
}

unint64_t sub_24493206C()
{
  unint64_t result;

  result = qword_25739F1E8;
  if (!qword_25739F1E8)
  {
    result = MEMORY[0x24951C158](&unk_2449D1904, &type metadata for BuiltTargetDescription.PlatformVersion.Key);
    atomic_store(result, (unint64_t *)&qword_25739F1E8);
  }
  return result;
}

uint64_t sub_2449320B0(unint64_t *a1)
{
  uint64_t v1;

  return sub_24492E3C8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2449320B8(unint64_t *a1)
{
  uint64_t v1;

  return sub_24492E880(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2449320C0(uint64_t a1)
{
  uint64_t v1;

  return sub_24492EBC4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2449320C8(uint64_t a1)
{
  uint64_t v1;

  return sub_24492EC4C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2449320D0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24951C158](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_244932110(uint64_t a1)
{
  uint64_t v1;

  return sub_24492ECDC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_244932118(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_244932140(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_244932168()
{
  unint64_t result;

  result = qword_25739F1F8;
  if (!qword_25739F1F8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltTargetDescription.PlatformVersion, &type metadata for BuiltTargetDescription.PlatformVersion);
    atomic_store(result, (unint64_t *)&qword_25739F1F8);
  }
  return result;
}

uint64_t sub_2449321AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24492A070(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_244932284()
{
  return sub_24492EF7C();
}

unint64_t sub_244932290()
{
  unint64_t result;

  result = qword_25739F200;
  if (!qword_25739F200)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltTargetDescription, &type metadata for BuiltTargetDescription);
    atomic_store(result, (unint64_t *)&qword_25739F200);
  }
  return result;
}

unint64_t sub_2449322D8()
{
  unint64_t result;

  result = qword_25739F208;
  if (!qword_25739F208)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltObjectFileDescription, &type metadata for BuiltObjectFileDescription);
    atomic_store(result, (unint64_t *)&qword_25739F208);
  }
  return result;
}

unint64_t sub_244932320()
{
  unint64_t result;

  result = qword_25739F210;
  if (!qword_25739F210)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltStaticArchiveDescription, &type metadata for BuiltStaticArchiveDescription);
    atomic_store(result, (unint64_t *)&qword_25739F210);
  }
  return result;
}

unint64_t sub_244932368()
{
  unint64_t result;

  result = qword_25739F218;
  if (!qword_25739F218)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltTargetDescription.PlatformVersion, &type metadata for BuiltTargetDescription.PlatformVersion);
    atomic_store(result, (unint64_t *)&qword_25739F218);
  }
  return result;
}

unint64_t sub_2449323B0()
{
  unint64_t result;

  result = qword_25739F220;
  if (!qword_25739F220)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltTargetDescription, &type metadata for BuiltTargetDescription);
    atomic_store(result, (unint64_t *)&qword_25739F220);
  }
  return result;
}

unint64_t sub_2449323F8()
{
  unint64_t result;

  result = qword_25739F228;
  if (!qword_25739F228)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltTargetDescription.PlatformVersion, &type metadata for BuiltTargetDescription.PlatformVersion);
    atomic_store(result, (unint64_t *)&qword_25739F228);
  }
  return result;
}

uint64_t destroy for BuiltTargetDescription(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BuiltTargetDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v6;
    v7 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v7;
    v8 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  v14 = *(_QWORD *)(a2 + 136);
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v14;
  *(_QWORD *)(a1 + 144) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BuiltTargetDescription(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2449327DC(a1 + 40);
      v8 = *(_OWORD *)(a2 + 56);
      v7 = *(_OWORD *)(a2 + 72);
      *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v8;
      *(_OWORD *)(a1 + 72) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v10;
    *v4 = v9;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2449327DC(uint64_t a1)
{
  destroy for BuiltTargetDescription.PlatformVersion();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for BuiltTargetDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 48);
  if (!v6)
  {
    sub_2449327DC(a1 + 40);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltTargetDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltTargetDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltTargetDescription()
{
  return &type metadata for BuiltTargetDescription;
}

uint64_t destroy for BuiltObjectFileDescription()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BuiltObjectFileDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BuiltObjectFileDescription(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for BuiltObjectFileDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltObjectFileDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltObjectFileDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltObjectFileDescription()
{
  return &type metadata for BuiltObjectFileDescription;
}

uint64_t destroy for BuiltStaticArchiveDescription()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for BuiltStaticArchiveDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BuiltStaticArchiveDescription(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for BuiltStaticArchiveDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltStaticArchiveDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltStaticArchiveDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltStaticArchiveDescription()
{
  return &type metadata for BuiltStaticArchiveDescription;
}

uint64_t destroy for BuiltTargetDescription.PlatformVersion()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for BuiltTargetDescription.PlatformVersion(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BuiltTargetDescription.PlatformVersion(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for BuiltTargetDescription.PlatformVersion(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BuiltTargetDescription.PlatformVersion()
{
  return &type metadata for BuiltTargetDescription.PlatformVersion;
}

uint64_t storeEnumTagSinglePayload for BuiltTargetDescription.PlatformVersion.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_244932FB4 + 4 * byte_2449D1225[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_244932FE8 + 4 * byte_2449D1220[v4]))();
}

uint64_t sub_244932FE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244932FF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244932FF8);
  return result;
}

uint64_t sub_244933004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24493300CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_244933010(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244933018(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuiltTargetDescription.PlatformVersion.Key()
{
  return &type metadata for BuiltTargetDescription.PlatformVersion.Key;
}

uint64_t storeEnumTagSinglePayload for BuiltStaticArchiveDescription.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244933080 + 4 * byte_2449D122F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2449330B4 + 4 * byte_2449D122A[v4]))();
}

uint64_t sub_2449330B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449330BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2449330C4);
  return result;
}

uint64_t sub_2449330D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2449330D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2449330DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449330E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuiltStaticArchiveDescription.Key()
{
  return &type metadata for BuiltStaticArchiveDescription.Key;
}

uint64_t getEnumTagSinglePayload for BuiltObjectFileDescription.Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltObjectFileDescription.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2449331DC + 4 * byte_2449D1239[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_244933210 + 4 * byte_2449D1234[v4]))();
}

uint64_t sub_244933210(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244933218(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244933220);
  return result;
}

uint64_t sub_24493322C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244933234);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_244933238(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244933240(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuiltObjectFileDescription.Key()
{
  return &type metadata for BuiltObjectFileDescription.Key;
}

uint64_t getEnumTagSinglePayload for BuiltTargetDescription.Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltTargetDescription.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_244933338 + 4 * byte_2449D1243[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_24493336C + 4 * byte_2449D123E[v4]))();
}

uint64_t sub_24493336C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244933374(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24493337CLL);
  return result;
}

uint64_t sub_244933388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244933390);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_244933394(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24493339C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuiltTargetDescription.Key()
{
  return &type metadata for BuiltTargetDescription.Key;
}

unint64_t sub_2449333BC()
{
  unint64_t result;

  result = qword_25739F230;
  if (!qword_25739F230)
  {
    result = MEMORY[0x24951C158](&unk_2449D16FC, &type metadata for BuiltTargetDescription.Key);
    atomic_store(result, (unint64_t *)&qword_25739F230);
  }
  return result;
}

unint64_t sub_244933404()
{
  unint64_t result;

  result = qword_25739F238;
  if (!qword_25739F238)
  {
    result = MEMORY[0x24951C158](&unk_2449D179C, &type metadata for BuiltObjectFileDescription.Key);
    atomic_store(result, (unint64_t *)&qword_25739F238);
  }
  return result;
}

unint64_t sub_24493344C()
{
  unint64_t result;

  result = qword_25739F240;
  if (!qword_25739F240)
  {
    result = MEMORY[0x24951C158](&unk_2449D183C, &type metadata for BuiltStaticArchiveDescription.Key);
    atomic_store(result, (unint64_t *)&qword_25739F240);
  }
  return result;
}

unint64_t sub_244933494()
{
  unint64_t result;

  result = qword_25739F248;
  if (!qword_25739F248)
  {
    result = MEMORY[0x24951C158](&unk_2449D18DC, &type metadata for BuiltTargetDescription.PlatformVersion.Key);
    atomic_store(result, (unint64_t *)&qword_25739F248);
  }
  return result;
}

uint64_t sub_2449334D8()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_244933520(_BYTE *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 32);
  v3 = *(_QWORD *)(v2 + 40);
  *a1 = 1;
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

unint64_t sub_24493353C()
{
  unint64_t result;

  result = qword_25739F260;
  if (!qword_25739F260)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand, &type metadata for JITLoadCommand);
    atomic_store(result, (unint64_t *)&qword_25739F260);
  }
  return result;
}

uint64_t sub_244933580(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2449335A8(uint64_t a1)
{
  uint64_t v1;

  return sub_24492E798(a1, *(_QWORD *)(v1 + 16));
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t *sub_2449335F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return sub_244933648(a1, a2, a3);
}

uint64_t *sub_244933648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = *v3;
  v3[2] = a1;
  v3[3] = a3;
  v8 = *(_QWORD *)(v7 + 80);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v8;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a1;
  v3[4] = (uint64_t)&unk_25739F658;
  v3[5] = (uint64_t)v9;
  swift_unknownObjectRetain();
  return v3;
}

uint64_t sub_2449336BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;

  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v15;
  *v15 = v8;
  v15[1] = sub_244933754;
  return sub_24493379C(a1, a2, a3, a4, a7, a8);
}

uint64_t sub_244933754()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24493379C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v7[9] = *(_QWORD *)(a6 + 8);
  v7[10] = sub_2449CF9AC();
  v7[11] = v8;
  return swift_task_switch();
}

uint64_t sub_2449337F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[3];
  v1 = v0[4];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Outlet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  v6 = sub_24495DBBC(v2, v1);
  v8 = v7;
  v0[12] = v6;
  v0[13] = v7;
  v9 = (_QWORD *)swift_task_alloc();
  v0[14] = v9;
  *v9 = v0;
  v9[1] = sub_244933914;
  return sub_244934680(v8, v0[6], v0[7]);
}

uint64_t sub_244933914()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  _QWORD *v4;

  v2 = *v1;
  v2[15] = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  v2[16] = (uint64_t)v4;
  *v4 = v2;
  v4[1] = sub_2449339AC;
  return sub_24495DDFC(v2[2], v2[8], v2[9], v2[5]);
}

uint64_t sub_2449339AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244933A0C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244933A48()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244933A84()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *MessagePipe.__allocating_init(makeRightTransport:)(uint64_t a1, uint64_t a2)
{
  return sub_244933C2C(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for StraightBridgeBuilder, (uint64_t)&unk_2449D1D30);
}

uint64_t type metadata accessor for StraightBridgeBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StraightBridgeBuilder);
}

void MessagePipe.__allocating_init<A>(branchingFunction:makeRightTransport:)()
{
  type metadata accessor for BranchingBridgeBuilder();
}

uint64_t *sub_244933B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  swift_allocObject();
  v6 = sub_244935808(v4, v3, v2, v1);
  v7 = MEMORY[0x24951C158](&unk_2449D1D14, a1);
  swift_allocObject();
  return sub_244933648((uint64_t)v6, a1, v7);
}

void type metadata accessor for BranchingBridgeBuilder()
{
  JUMPOUT(0x24951C0C8);
}

_QWORD *sub_244933BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return sub_244935808(a1, a2, a3, a4);
}

uint64_t *MessagePipe.__allocating_init(streamHandler:)(uint64_t a1, uint64_t a2)
{
  return sub_244933C2C(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for BranchingOutletBuilder, (uint64_t)&unk_2449D1CF8);
}

uint64_t *sub_244933C2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = v4;
  v9 = a3(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88));
  swift_allocObject();
  v10 = sub_244936408(a1, a2);
  v11 = MEMORY[0x24951C158](a4, v9);
  swift_allocObject();
  return sub_244933648((uint64_t)v10, v9, v11);
}

uint64_t type metadata accessor for BranchingOutletBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BranchingOutletBuilder);
}

_QWORD *sub_244933CE0(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return sub_244936408(a1, a2);
}

uint64_t MessagePipe.addMessageStream(origin:destination:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_244933D48()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD, _QWORD);

  v3 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v0[6] + 32) + *(_QWORD *)(v0[6] + 32));
  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = v1;
  *v1 = v0;
  v1[1] = sub_244933DAC;
  return v3(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_244933DAC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t MessagePipe.addLeftTransport(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_244933E0C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t ObjectType;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0[3] + 24);
  ObjectType = swift_getObjectType();
  v3 = (_QWORD *)swift_task_alloc();
  v0[4] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = sub_244933E7C;
  return sub_244933EC4(v0[2], ObjectType, v1);
}

uint64_t sub_244933E7C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244933EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4[3] = a3;
  v4[4] = v3;
  v4[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  v4[5] = swift_task_alloc();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Bridge(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v10 = *(_QWORD *)(a3 + 8);
  v4[6] = v10;
  v11 = (_QWORD *)swift_task_alloc();
  v4[7] = v11;
  *v11 = v4;
  v11[1] = sub_244934010;
  return sub_24498C6C4(v3, v10, a1);
}

uint64_t sub_244934010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  _QWORD *v7;

  v5 = *v3;
  *(_QWORD *)(v5 + 64) = a1;
  *(_QWORD *)(v5 + 72) = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v5 + 80) = v7;
    *v7 = v5;
    v7[1] = sub_2449340B8;
    return sub_244934680(a2, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
  }
}

uint64_t sub_2449340B8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  sub_2449CF9AC();
  return swift_task_switch();
}

uint64_t sub_244934144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = sub_2449CF9F4();
  v8 = *(_OWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 1, 1, v5);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v3;
  *(_OWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 48) = v1;
  *(_QWORD *)(v6 + 56) = v4;
  swift_unknownObjectRetain_n();
  sub_2449BD140(v2, (uint64_t)&unk_25739F648, v6);
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24493421C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MessagePipe.teardown(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 56) = a7;
  *(_QWORD *)(v9 + 64) = v8;
  *(_BYTE *)(v9 + 121) = a8;
  *(_QWORD *)(v9 + 40) = a5;
  *(_QWORD *)(v9 + 48) = a6;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a4;
  *(_BYTE *)(v9 + 120) = a3;
  *(_QWORD *)(v9 + 16) = a1;
  v10 = sub_2449CF724();
  *(_QWORD *)(v9 + 72) = v10;
  *(_QWORD *)(v9 + 80) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 88) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2449342D4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[12] = *(_QWORD *)(v1 + 16);
  v0[13] = *(_QWORD *)(v1 + 24);
  v0[14] = swift_getObjectType();
  sub_2449CF730();
  sub_2449CF9AC();
  return swift_task_switch();
}

uint64_t sub_2449343A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  sub_244934404(v1, *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244934404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[2];

  v18[1] = a1;
  v5 = sub_2449CF4D8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  MEMORY[0x24951C158](&unk_2449DAD50, v12);
  v13 = sub_2449CF4C0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v18 - v15;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  sub_2449CF4CC();
  sub_2449CF49C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t MessagePipe.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t MessagePipe.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_244934618()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MessagePipe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessagePipe);
}

uint64_t method lookup function for MessagePipe()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_244934680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  MEMORY[0x24951C158](&unk_2449DAD50, v9);
  v10 = sub_2449CF4C0();
  v4[7] = v10;
  v4[8] = *(_QWORD *)(v10 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = *(_QWORD *)(a3 + 8);
  v4[11] = sub_2449CF9AC();
  v4[12] = v11;
  return swift_task_switch();
}

uint64_t sub_2449347D4()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD))(v0[5] + 32))(v0[4]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[13] = v1;
  *v1 = v0;
  v1[1] = sub_244934844;
  return sub_2449CF4B4();
}

uint64_t sub_244934844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t sub_2449348CC()
{
  uint64_t v0;

  sub_244993D20(*(_QWORD **)(v0 + 24));
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244934914()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244934948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;

  v9 = *(_QWORD *)(a7 + 8);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v10;
  *v10 = v7;
  v10[1] = sub_2449382FC;
  return sub_24498CBE0(a5, v9);
}

uint64_t sub_2449349AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = sub_2449CF9AC();
  v3[6] = v4;
  return swift_task_switch();
}

uint64_t sub_2449349F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD, _QWORD);

  v1 = v0[3];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v0[7] = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[8] = AssociatedConformanceWitness;
  type metadata accessor for MergingFork(0, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  v0[9] = sub_244993F60();
  v0[10] = v5;
  v8 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v1 + 40) + *(_QWORD *)(v1 + 40));
  v6 = (_QWORD *)swift_task_alloc();
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_244934B1C;
  return v8(v0[2], v0[3]);
}

uint64_t sub_244934B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

uint64_t sub_244934B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Junction(0, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  sub_2449774A8(v2, v1);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72));
}

uint64_t sub_244934C50()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244934C8C@<X0>(uint64_t a1@<X8>)
{
  return sub_244936140((uint64_t)&unk_251596FE8, (uint64_t)&unk_25739F630, (uint64_t)&unk_25739F620, a1);
}

uint64_t sub_244934CA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  v5 = type metadata accessor for StraightBridgeBuilder(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v4);
  v6 = MEMORY[0x24951C158](&unk_2449D1D30, v5);
  *v3 = v1;
  v3[1] = sub_244934D28;
  return sub_2449349AC(v5, v6);
}

uint64_t sub_244934D28(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_244934D7C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_24493830C;
  return v5();
}

uint64_t sub_244934DD4()
{
  _QWORD *v0;
  _QWORD *v1;

  v1[7] = v0;
  v1[8] = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  v1[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244934E38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)(v0 + 56) + 112)
                                       + *(_QWORD *)(*(_QWORD *)(v0 + 56) + 112));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v1;
  *v1 = v0;
  v1[1] = sub_244934EA0;
  return v3(v0 + 16);
}

uint64_t sub_244934EA0()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *v1;
  v2[11] = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = v2[8];
  v6 = *(_QWORD *)(v4 + 80);
  v5 = *(_QWORD *)(v4 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Bridge(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v11 = type metadata accessor for StraightBridgeBuilder(255, v6, v5, v10);
  v12 = MEMORY[0x24951C158](&unk_2449D1CD0, v11);
  v2[12] = v12;
  v13 = (_QWORD *)swift_task_alloc();
  v2[13] = (uint64_t)v13;
  *v13 = v2;
  v13[1] = sub_244935034;
  return sub_24498C6C4(v2[7], v12, (uint64_t)(v2 + 2));
}

uint64_t sub_244935034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 112) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 120) = a2;
    *(_QWORD *)(v6 + 128) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_2449350AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = sub_2449CF9F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v4;
  v6[3] = v2;
  v6[4] = v1;
  v6[5] = v4;
  swift_retain_n();
  swift_retain();
  sub_2449BD140(v3, (uint64_t)&unk_25739F618, (uint64_t)v6);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

uint64_t sub_244935190()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2449351C4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244935200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v7 = type metadata accessor for StraightBridgeBuilder(255, *(_QWORD *)(*(_QWORD *)a5 + 80), *(_QWORD *)(*(_QWORD *)a5 + 88), a4);
  v8 = MEMORY[0x24951C158](&unk_2449D1CD0, v7);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = sub_2449382FC;
  return sub_24498CBE0(a5, v8);
}

uint64_t sub_244935284()
{
  sub_244937130();
  return swift_defaultActor_deallocate();
}

uint64_t sub_244935298()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  MEMORY[0x24951C158](&unk_2449DAD50, v3);
  sub_2449CF4C0();
  result = sub_2449CFB2C();
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_2449353B4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_2449353C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_244938308;
  return sub_244934DD4();
}

uint64_t sub_24493540C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = v4;
  v25 = v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v23 = MEMORY[0x24951C158](&unk_2449DAD50, v8);
  v9 = sub_2449CF4C0();
  v10 = sub_2449CFB2C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - v15;
  v17 = v1 + v2[17];
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v17, v10);
  v18 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v26, v16, v9);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v24;
  v20 = v25;
  v19[3] = v2[11];
  v19[4] = v20;
  v19[5] = v2[13];
  v19[6] = &unk_25739F608;
  v19[7] = v1;
  swift_retain();
  v21 = v26;
  sub_2449CF4A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v14, v21, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v9);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v17, v14, v10);
  return swift_endAccess();
}

void sub_244935674(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *a1;
  *(_QWORD *)(v1 + 48) = swift_task_alloc();
  v3 = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v1 + 32) = v3;
  type metadata accessor for BranchingBridgeBuilder();
}

uint64_t sub_2449356C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = MEMORY[0x24951C158](&unk_2449D1D14, a1);
  *v1 = v2;
  v1[1] = sub_244935700;
  return sub_2449349AC(a1, v4);
}

uint64_t sub_244935700(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_244935754(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_2449357AC;
  return v5();
}

uint64_t sub_2449357AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

_QWORD *sub_244935808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_defaultActor_initialize();
  v9 = (char *)v4 + *(_QWORD *)(*v4 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  MEMORY[0x24951C158](&unk_2449DAD50, v13);
  v14 = sub_2449CF4C0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = a3;
  v4[17] = a4;
  return v4;
}

uint64_t sub_244935910()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  *(_QWORD *)(v1 + 56) = *v0;
  return swift_task_switch();
}

void sub_244935930()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  v1 = v0[7];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(v1 + 88);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = *(_QWORD *)(v1 + 104);
  v0[2] = AssociatedTypeWitness;
  v0[3] = v3;
  v0[4] = AssociatedConformanceWitness;
  v0[5] = v5;
  type metadata accessor for BranchingFork();
}

uint64_t sub_244935A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  swift_retain();
  sub_244993FB8(v2, v3, (uint64_t)sub_244937824, v0);
  v5 = v4;
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v5);
}

void sub_244935A70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  _QWORD v11[14];

  v11[8] = a3;
  v11[9] = a4;
  v11[5] = a2;
  v11[3] = a1;
  v4 = *(_QWORD **)a3;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 88);
  v11[7] = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  MEMORY[0x24BDAC7A8](a1);
  v11[1] = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v4[12];
  v8 = v4[10];
  v11[4] = swift_getAssociatedTypeWitness();
  v11[6] = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = v4[13];
  v11[10] = v8;
  v11[11] = v5;
  v11[12] = v7;
  v11[13] = v10;
  type metadata accessor for BranchingBridgeBuilder();
}

uint64_t sub_244935B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;

  *(_QWORD *)(v11 - 176) = MEMORY[0x24951C158](&unk_2449D1CA8, a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v10, *(_QWORD *)(v11 - 168), v1);
  *(_QWORD *)(v11 - 192) = v2;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v8, *(_QWORD *)(v11 - 152), v3);
  v12 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v13 = (v7 + *(unsigned __int8 *)(v2 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v9;
  *((_QWORD *)v14 + 3) = v3;
  *((_QWORD *)v14 + 4) = v6;
  *((_QWORD *)v14 + 5) = v5;
  *((_QWORD *)v14 + 6) = *(_QWORD *)(v11 - 128);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v14[v12], v10, v1);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 192) + 32))(&v14[v13], *(_QWORD *)(v11 - 184), v3);
  type metadata accessor for Junction(0, *(_QWORD *)(v11 - 160), *(_QWORD *)(v11 - 144), v15);
  swift_retain_n();
  return sub_2449CF334();
}

uint64_t sub_244935CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;

  v4[2] = a1;
  v4[3] = a2;
  v6 = (_QWORD *)swift_task_alloc();
  v4[4] = v6;
  *v6 = v4;
  v6[1] = sub_244935D34;
  return sub_244937A68(a4);
}

uint64_t sub_244935D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_244935DB0()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_244935DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v6;

  v6 = *(_OWORD *)(*(_QWORD *)a5 + 96);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(*(_QWORD *)a5 + 80);
  *(_OWORD *)(v5 + 32) = v6;
  type metadata accessor for BranchingBridgeBuilder();
}

uint64_t sub_244935E04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = MEMORY[0x24951C158](&unk_2449D1CA8, a1);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 48) = v4;
  *v4 = v2;
  v4[1] = sub_244935E58;
  return sub_24498CBE0(v1, v3);
}

uint64_t sub_244935E58()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_244935EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  MEMORY[0x24951C158](&unk_2449DAD50, v5);
  sub_2449CF4C0();
  v6 = sub_2449CFB2C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v1, v6);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_244935F94()
{
  sub_244935EA0();
  return swift_defaultActor_deallocate();
}

uint64_t sub_244935FA8()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  MEMORY[0x24951C158](&unk_2449DAD50, v3);
  sub_2449CF4C0();
  result = sub_2449CFB2C();
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_2449360C0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_244938308;
  v2[6] = v0;
  v2[7] = *v0;
  return swift_task_switch();
}

uint64_t sub_244936124@<X0>(uint64_t a1@<X8>)
{
  return sub_244936140((uint64_t)&unk_251596F20, (uint64_t)&unk_25739F5B8, (uint64_t)&unk_25739F5A8, a1);
}

uint64_t sub_244936140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v29 = a3;
  v26[1] = a1;
  v30 = a4;
  v5 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v6 = *(_QWORD *)(*v4 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v26[0] = MEMORY[0x24951C158](&unk_2449DAD50, v11);
  v12 = sub_2449CF4C0();
  v13 = sub_2449CFB2C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v26 - v18;
  v20 = (uint64_t)v4 + *(_QWORD *)(v5 + 112);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v20, v13);
  v21 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v12) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v30, v19, v12);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  v22 = (_QWORD *)swift_allocObject();
  v23 = v27;
  v22[2] = v7;
  v22[3] = v23;
  v22[4] = v28;
  v22[5] = v4;
  swift_retain();
  v24 = v30;
  sub_2449CF4A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v17, v24, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v12);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 40))(v20, v17, v13);
  return swift_endAccess();
}

uint64_t sub_244936388(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  v5 = type metadata accessor for BranchingOutletBuilder(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v4);
  v6 = MEMORY[0x24951C158](&unk_2449D1CF8, v5);
  *v3 = v1;
  v3[1] = sub_244938308;
  return sub_2449349AC(v5, v6);
}

_QWORD *sub_244936408(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_defaultActor_initialize();
  v5 = (char *)v2 + *(_QWORD *)(*v2 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  MEMORY[0x24951C158](&unk_2449DAD50, v9);
  v10 = sub_2449CF4C0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  v2[14] = a1;
  v2[15] = a2;
  return v2;
}

uint64_t sub_2449364F8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  *(_QWORD *)(v1 + 56) = *v0;
  return swift_task_switch();
}

void sub_244936518()
{
  _QWORD *v0;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = swift_getAssociatedTypeWitness();
  v4 = swift_getAssociatedConformanceWitness();
  v0[2] = AssociatedTypeWitness;
  v0[3] = v3;
  v0[4] = AssociatedConformanceWitness;
  v0[5] = v4;
  type metadata accessor for BranchingFork();
}

uint64_t sub_244936624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  swift_retain();
  sub_244993FB8((uint64_t)sub_24493741C, v4, (uint64_t)sub_244937424, v0);
  v6 = v5;
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v3 + 8))(v6);
}

uint64_t sub_2449366B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_2449367A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  v33 = a3;
  v31 = a1;
  v34 = a4;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)a3 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = v5;
  v26 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v29 = AssociatedTypeWitness;
  v30 = AssociatedConformanceWitness;
  swift_getAssociatedConformanceWitness();
  v27 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v10 = (char *)&v25 - v9;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v25 - v14;
  v17 = type metadata accessor for BranchingOutletBuilder(255, v5, v4, v16);
  v28 = MEMORY[0x24951C158](&unk_2449D1C80, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v31, v11);
  v18 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v32, v27);
  v19 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v20 = (v13 + *(unsigned __int8 *)(v8 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v21 = (char *)swift_allocObject();
  v22 = v26;
  *((_QWORD *)v21 + 2) = v25;
  *((_QWORD *)v21 + 3) = v22;
  *((_QWORD *)v21 + 4) = v33;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v21[v19], v15, v11);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v21[v20], v10, v18);
  type metadata accessor for Junction(0, v29, v30, v23);
  swift_retain_n();
  return sub_2449CF334();
}

uint64_t sub_244936A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;

  v4[2] = a1;
  v4[3] = a2;
  v7 = (_QWORD *)swift_task_alloc();
  v4[4] = v7;
  *v7 = v4;
  v7[1] = sub_244936AC0;
  return sub_244936B3C(a3, a4);
}

uint64_t sub_244936AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_244936B3C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244936BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v19 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Outlet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v10 = sub_24495DBBC(v19, v4);
  v12 = v11;
  v13 = sub_2449CF9F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v2, 1, 1, v13);
  v15 = type metadata accessor for BranchingOutletBuilder(255, v6, v5, v14);
  v16 = MEMORY[0x24951C158](&unk_2449D1C80, v15);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v3;
  v17[3] = v16;
  v17[4] = v10;
  v17[5] = v3;
  swift_retain_n();
  sub_244937004(v2, (uint64_t)&unk_25739F588, (uint64_t)v17);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
}

uint64_t sub_244936D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5[2] = a5;
  v7 = *a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v5[4] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = swift_task_alloc();
  v5[5] = v9;
  type metadata accessor for AsyncMessageStream(0);
  v10 = swift_task_alloc();
  v5[6] = v10;
  v12 = type metadata accessor for BranchingOutletBuilder(255, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v11);
  v13 = MEMORY[0x24951C158](&unk_2449D1C80, v12);
  v14 = (_QWORD *)swift_task_alloc();
  v5[7] = v14;
  *v14 = v5;
  v14[1] = sub_244936E50;
  return sub_24495E530(v10, v9, (uint64_t)a5, v13);
}

uint64_t sub_244936E50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244936EB8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD);

  v3 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0[2] + 112) + *(_QWORD *)(v0[2] + 112));
  v1 = (_QWORD *)swift_task_alloc();
  v0[9] = v1;
  *v1 = v0;
  v1[1] = sub_244936F18;
  return v3(v0[6], v0[5]);
}

uint64_t sub_244936F18()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244936F70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
  sub_2449373D0(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244936FC8()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244937004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_2449CF9F4();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_2449CF9E8();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_244937390(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2449CF9AC();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_244937130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for MergingFork(255, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  MEMORY[0x24951C158](&unk_2449DAD50, v5);
  sub_2449CF4C0();
  v6 = sub_2449CFB2C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v1, v6);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_24493721C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_244938308;
  v2[6] = v0;
  v2[7] = *v0;
  return swift_task_switch();
}

uint64_t sub_244937280(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449D1C80);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2449372AC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

uint64_t sub_2449372B4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449D1CA8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2449372E0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_2449372E8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449D1CD0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_244937318(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = (uint64_t *)v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2449382FC;
  return sub_244936D50(a1, v4, v5, v7, v6);
}

uint64_t sub_244937390(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2449373D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AsyncMessageStream(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24493740C()
{
  return swift_deallocObject();
}

uint64_t sub_24493741C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2449366B4(a1, a2);
}

uint64_t sub_244937424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2449367A8(a1, a2, v3, a3);
}

uint64_t sub_24493742C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_2449375A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = v1 + v5;
  v10 = v1 + ((v6 + v7) & ~v7);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_2449382FC;
  v11[2] = a1;
  v11[3] = v8;
  v12 = (_QWORD *)swift_task_alloc();
  v11[4] = v12;
  *v12 = v11;
  v12[1] = sub_244936AC0;
  return sub_244936B3C(v9, v10);
}

uint64_t sub_244937734()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244937758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2449382FC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25739F5A0 + dword_25739F5A0))(a1, v4);
}

uint64_t sub_2449377DC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_244938318;
  return sub_244936388(v0);
}

void sub_244937824(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_244935A70(a1, a2, v3, a3);
}

uint64_t sub_24493782C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v1);
  return swift_deallocObject();
}

uint64_t sub_244937940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = v1
     + ((((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
       + v6) & ~v6);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_2449382FC;
  v9[2] = a1;
  v9[3] = v7;
  v10 = (_QWORD *)swift_task_alloc();
  v9[4] = v10;
  *v10 = v9;
  v10[1] = sub_244935D34;
  return sub_244937A68(v8);
}

uint64_t sub_244937A68(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[11] = a1;
  v2[12] = v1;
  v2[13] = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  v2[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_244937ACC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD *, _QWORD);

  v3 = (uint64_t (*)(_QWORD *, _QWORD))(**(int **)(v0[12] + 128) + *(_QWORD *)(v0[12] + 128));
  v1 = (_QWORD *)swift_task_alloc();
  v0[15] = v1;
  *v1 = v0;
  v1[1] = sub_244937B38;
  return v3(v0 + 2, v0[11]);
}

uint64_t sub_244937B38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *v1;
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD **)(v2 + 104);
    v5 = v4[12];
    v6 = v4[10];
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for Bridge(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
    *(_QWORD *)(v2 + 56) = v6;
    v10 = (_QWORD *)(v2 + 56);
    v11 = v4[13];
    v10[1] = v4[11];
    v10[2] = v5;
    v10[3] = v11;
    type metadata accessor for BranchingBridgeBuilder();
  }
  return swift_task_switch();
}

uint64_t sub_244937C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v4 = MEMORY[0x24951C158](&unk_2449D1CA8, a1);
  v2[10] = v4;
  v5 = (_QWORD *)swift_task_alloc();
  v2[11] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = sub_244937CE0;
  return sub_24498C6C4(v2[5], v4, v1);
}

uint64_t sub_244937CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 152) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 160) = a2;
    *(_QWORD *)(v6 + 168) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_244937D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = sub_2449CF9F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v4;
  v6[3] = v2;
  v6[4] = v1;
  v6[5] = v4;
  swift_retain_n();
  swift_retain();
  sub_2449BD140(v3, (uint64_t)&unk_25739F5E8, (uint64_t)v6);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

uint64_t sub_244937E3C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244937E70()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_244937EB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2449382FC;
  sub_244935DC8(a1, v4, v5, v7, v6);
}

uint64_t sub_244937F28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244937F4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 48);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_244933754;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25739F5F0 + dword_25739F5F0))(a1, v4);
}

void sub_244937FE4()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_244938318;
  sub_244935674(v0);
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244938064(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_244933754;
  return sub_244935200(a1, v4, v5, v7, v6);
}

uint64_t sub_2449380DC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_244938124;
  return sub_244934CA8(v0);
}

uint64_t sub_244938124(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_244938174()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2449381A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_2449382FC;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = (_QWORD *)swift_task_alloc();
  v4[2] = v6;
  *v6 = v4;
  v6[1] = sub_2449382FC;
  return sub_24498CBE0(v3, v5);
}

uint64_t sub_24493822C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_244938250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(v4 + 32);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = sub_2449382FC;
  v13 = (_QWORD *)swift_task_alloc();
  v12[2] = v13;
  *v13 = v12;
  v13[1] = sub_244933754;
  return sub_24493379C(a1, a2, a3, a4, v10, v11);
}

uint64_t sub_24493831C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v23 = a2 + 32;
    v24 = a1 + 32;
    while (1)
    {
      v5 = v24 + 48 * v3;
      v6 = *(_QWORD *)(v5 + 16);
      v7 = *(_QWORD *)(v5 + 24);
      v8 = *(_QWORD *)(v5 + 32);
      v9 = *(unsigned __int8 *)(v5 + 40);
      v10 = v23 + 48 * v3;
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      v13 = *(_QWORD *)(v10 + 32);
      v14 = *(unsigned __int8 *)(v10 + 40);
      v15 = *(_QWORD *)v5 == *(_QWORD *)v10 && *(_QWORD *)(v5 + 8) == *(_QWORD *)(v10 + 8);
      if (!v15 && (sub_2449CFCD0() & 1) == 0)
        return 0;
      v16 = v6 == v11 && v7 == v12;
      if (!v16 && (sub_2449CFCD0() & 1) == 0)
        return 0;
      v17 = *(_QWORD *)(v8 + 16);
      if (v17 != *(_QWORD *)(v13 + 16))
        return 0;
      if (v17)
        v18 = v8 == v13;
      else
        v18 = 1;
      if (!v18)
      {
        v20 = (_QWORD *)(v8 + 40);
        v21 = (_QWORD *)(v13 + 40);
        do
        {
          v22 = *(v20 - 1) == *(v21 - 1) && *v20 == *v21;
          if (!v22 && (sub_2449CFCD0() & 1) == 0)
            return 0;
          v20 += 2;
          v21 += 2;
        }
        while (--v17);
      }
      if (v9 == 4)
      {
        if (v14 != 4)
          return 0;
      }
      else
      {
        if (v14 == 4)
          return 0;
        sub_24499EC84(v9);
        if ((v19 & 1) == 0)
          return 0;
      }
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
  }
  return 1;
}

uint64_t sub_2449384A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v17[9];
  uint64_t v18;
  _OWORD v19[9];
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = *(_OWORD *)(v3 + 112);
        v19[6] = *(_OWORD *)(v3 + 96);
        v19[7] = v7;
        v19[8] = *(_OWORD *)(v3 + 128);
        v20 = *(_QWORD *)(v3 + 144);
        v8 = *(_OWORD *)(v3 + 48);
        v19[2] = *(_OWORD *)(v3 + 32);
        v19[3] = v8;
        v9 = *(_OWORD *)(v3 + 80);
        v19[4] = *(_OWORD *)(v3 + 64);
        v19[5] = v9;
        v10 = *(_OWORD *)(v3 + 16);
        v19[0] = *(_OWORD *)v3;
        v19[1] = v10;
        v11 = *(_OWORD *)(v4 + 112);
        v17[6] = *(_OWORD *)(v4 + 96);
        v17[7] = v11;
        v17[8] = *(_OWORD *)(v4 + 128);
        v18 = *(_QWORD *)(v4 + 144);
        v12 = *(_OWORD *)(v4 + 48);
        v17[2] = *(_OWORD *)(v4 + 32);
        v17[3] = v12;
        v13 = *(_OWORD *)(v4 + 80);
        v17[4] = *(_OWORD *)(v4 + 64);
        v17[5] = v13;
        v14 = *(_OWORD *)(v4 + 16);
        v17[0] = *(_OWORD *)v4;
        v17[1] = v14;
        v15 = _s19PreviewsMessagingOS22BuiltTargetDescriptionV2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v17);
        if ((v15 & 1) == 0)
          break;
        v5 = v6 - 1;
        v4 += 152;
        v3 += 152;
      }
      while (v6);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_24493858C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    while (1)
    {
      v6 = (_QWORD *)(v4 + 24 * v3);
      v8 = v6[1];
      v7 = v6[2];
      v9 = (_QWORD *)(v5 + 24 * v3);
      v10 = v9[1];
      v11 = v9[2];
      if (v8)
      {
        if (!v10)
          return 0;
        if (*v6 != *v9 || v8 != v10)
        {
          v13 = v6[2];
          v14 = v3;
          v15 = v4;
          v16 = v5;
          v17 = sub_2449CFCD0();
          v7 = v13;
          v5 = v16;
          v4 = v15;
          v3 = v14;
          if ((v17 & 1) == 0)
            return 0;
        }
      }
      else if (v10)
      {
        return 0;
      }
      v18 = *(_QWORD *)(v7 + 16);
      if (v18 != *(_QWORD *)(v11 + 16))
        return 0;
      if (v18 && v7 != v11)
        break;
LABEL_20:
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
    v42 = v5;
    v43 = v4;
    v44 = v3;
    v45 = v2;
    v48 = v11 + 32;
    v49 = v7 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = 0;
    v47 = v11;
    v46 = v18;
    while (1)
    {
      if (v21 >= *(_QWORD *)(v11 + 16))
      {
        __break(1u);
        JUMPOUT(0x244938A58);
      }
      v22 = (uint64_t *)(v49 + 48 * v21);
      v23 = *v22;
      v24 = v22[1];
      v25 = v22[2];
      v26 = v22[3];
      v27 = v22[4];
      v28 = *((unsigned __int8 *)v22 + 40);
      v29 = v48 + 48 * v21;
      v31 = *(_QWORD *)(v29 + 16);
      v30 = *(_QWORD *)(v29 + 24);
      v32 = *(_QWORD *)(v29 + 32);
      v33 = *(unsigned __int8 *)(v29 + 40);
      v34 = v23 == *(_QWORD *)v29 && v24 == *(_QWORD *)(v29 + 8);
      v50 = *(_QWORD *)(v29 + 24);
      if (!v34)
      {
        v35 = sub_2449CFCD0();
        v30 = v50;
        if ((v35 & 1) == 0)
          break;
      }
      v36 = v25 == v31 && v26 == v30;
      if (!v36 && (sub_2449CFCD0() & 1) == 0)
        break;
      v37 = *(_QWORD *)(v27 + 16);
      if (v37 != *(_QWORD *)(v32 + 16))
        break;
      if (v37)
        v38 = v27 == v32;
      else
        v38 = 1;
      if (!v38)
      {
        v39 = (_QWORD *)(v27 + 40);
        v40 = (_QWORD *)(v32 + 40);
        do
        {
          v41 = *(v39 - 1) == *(v40 - 1) && *v39 == *v40;
          if (!v41 && (sub_2449CFCD0() & 1) == 0)
            goto LABEL_53;
          v39 += 2;
          v40 += 2;
        }
        while (--v37);
      }
      if ((_DWORD)v28 != 4)
      {
        if (v33 != 4)
          __asm { BR              X8 }
        break;
      }
      if (v33 != 4)
        break;
      ++v21;
      v11 = v47;
      if (v21 == v46)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = v44;
        v2 = v45;
        v5 = v42;
        v4 = v43;
        goto LABEL_20;
      }
    }
LABEL_53:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_244938A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_QWORD *)(a1 + 40);
    for (i = (_QWORD *)(a2 + 40); ; i += 2)
    {
      v5 = *(v3 - 1) == *(i - 1) && *v3 == *i;
      if (!v5 && (sub_2449CFCD0() & 1) == 0)
        break;
      v3 += 2;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_244938AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  char v14;
  uint64_t result;
  int v18;
  int v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + v3 + 40);
      v5 = *(_QWORD *)(a1 + v3 + 48);
      v6 = *(_QWORD *)(a1 + v3 + 56);
      v7 = *(_QWORD *)(a1 + v3 + 64);
      v8 = *(_QWORD *)(a2 + v3 + 40);
      v9 = *(_QWORD *)(a2 + v3 + 48);
      v10 = *(_QWORD *)(a2 + v3 + 56);
      v11 = *(_QWORD *)(a2 + v3 + 64);
      v18 = *(unsigned __int8 *)(a2 + v3 + 72);
      v19 = *(unsigned __int8 *)(a1 + v3 + 72);
      if (v4)
      {
        if (!v8)
          return 0;
        v12 = *(_QWORD *)(a1 + v3 + 32) == *(_QWORD *)(a2 + v3 + 32) && v4 == v8;
        if (!v12 && (sub_2449CFCD0() & 1) == 0)
          return 0;
      }
      else if (v8)
      {
        return 0;
      }
      v13 = v5 == v9 && v6 == v10;
      if (!v13 && (sub_2449CFCD0() & 1) == 0)
        return 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = sub_2449B5690(v7, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v14 & 1) == 0 || ((v19 ^ v18) & 1) != 0)
        return result;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_244938C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 56);
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v8 = *(v3 - 2);
      v9 = *(v3 - 1);
      v10 = *v3;
      if (v5)
      {
        if (!v8)
          return 0;
        v11 = *(v4 - 3) == *(v3 - 3) && v5 == v8;
        if (!v11 && (sub_2449CFCD0() & 1) == 0)
          return 0;
      }
      else if (v8)
      {
        return 0;
      }
      v12 = v6 == v9 && v7 == v10;
      if (!v12 && (sub_2449CFCD0() & 1) == 0)
        return 0;
      v3 += 4;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_244938D64(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_2449CFCD0(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_2449CFCD0() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_244938E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  char v6;
  BOOL v7;
  char v8;
  uint64_t result;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
  if (v7 || (v8 = sub_2449CFCD0(), result = 0, (v8 & 1) != 0))
  {
    v10 = (_BYTE *)(a2 + 72);
    v11 = (_BYTE *)(a1 + 72);
    for (i = v2 - 1; ; --i)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = (v5 & 1) != 0 ? 1801545079 : 0x676E6F727473;
      v14 = (v5 & 1) != 0 ? 0xE400000000000000 : 0xE600000000000000;
      v15 = (v6 & 1) != 0 ? 1801545079 : 0x676E6F727473;
      v16 = (v6 & 1) != 0 ? 0xE400000000000000 : 0xE600000000000000;
      if (v13 == v15 && v14 == v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = sub_2449CFCD0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
          return 0;
      }
      if (!i)
        break;
      v5 = *v11;
      v6 = *v10;
      if ((*((_QWORD *)v11 - 2) != *((_QWORD *)v10 - 2) || *((_QWORD *)v11 - 1) != *((_QWORD *)v10 - 1))
        && (sub_2449CFCD0() & 1) == 0)
      {
        return 0;
      }
      v10 += 24;
      v11 += 24;
    }
    return 1;
  }
  return result;
}

uint64_t StaticLinkablePreviewProduct.builtTargetDescriptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StaticLinkablePreviewProduct.builtTargetDescriptions.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*StaticLinkablePreviewProduct.builtTargetDescriptions.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::StaticLinkablePreviewProduct __swiftcall StaticLinkablePreviewProduct.init(builtTargetDescriptions:)(PreviewsMessagingOS::StaticLinkablePreviewProduct builtTargetDescriptions)
{
  PreviewsMessagingOS::StaticLinkablePreviewProduct *v1;

  v1->builtTargetDescriptions._rawValue = builtTargetDescriptions.builtTargetDescriptions._rawValue;
  return builtTargetDescriptions;
}

uint64_t StaticLinkablePreviewProduct.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  result = sub_2449CFD54();
  if (v4)
  {
    swift_bridgeObjectRetain();
    BuiltTargetDescription.hash(into:)(a1);
    v6 = v4 - 1;
    if (v6)
    {
      v7 = v3 + 184;
      do
      {
        BuiltTargetDescription.hash(into:)(a1);
        v7 += 152;
        --v6;
      }
      while (v6);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static StaticLinkablePreviewProduct.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_2449384A4(*a1, *a2);
}

uint64_t StaticLinkablePreviewProduct.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[72];

  v1 = *v0;
  sub_2449CFD48();
  v2 = *(_QWORD *)(v1 + 16);
  sub_2449CFD54();
  if (v2)
  {
    swift_bridgeObjectRetain();
    BuiltTargetDescription.hash(into:)((uint64_t)v6);
    v3 = v2 - 1;
    if (v3)
    {
      v4 = v1 + 184;
      do
      {
        BuiltTargetDescription.hash(into:)((uint64_t)v6);
        v4 += 152;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

uint64_t sub_244939228()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[72];

  v1 = *v0;
  sub_2449CFD48();
  v2 = *(_QWORD *)(v1 + 16);
  sub_2449CFD54();
  if (v2)
  {
    swift_bridgeObjectRetain();
    BuiltTargetDescription.hash(into:)((uint64_t)v6);
    v3 = v2 - 1;
    if (v3)
    {
      v4 = v1 + 184;
      do
      {
        BuiltTargetDescription.hash(into:)((uint64_t)v6);
        v4 += 152;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

uint64_t sub_244939320(uint64_t *a1, uint64_t *a2)
{
  return sub_2449384A4(*a1, *a2);
}

uint64_t sub_24493932C()
{
  return 1;
}

uint64_t sub_244939334()
{
  sub_2449CFD48();
  sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t sub_244939388()
{
  return sub_2449CF88C();
}

uint64_t sub_2449393A4()
{
  sub_2449CFD48();
  sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t sub_2449393F4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_244939444(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000002449E1D30;
}

unint64_t sub_244939464()
{
  return 0xD000000000000017;
}

uint64_t StaticLinkablePreviewProduct.propertyListValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  _QWORD v3[6];

  v1 = *v0;
  result = sub_2449CF3F4();
  if (*(_QWORD *)(v1 + 16))
  {
    v3[5] = v1;
    v3[3] = &type metadata for StaticLinkablePreviewProduct.Key;
    v3[4] = sub_244939500();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F670);
    sub_244939544();
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  return result;
}

unint64_t sub_244939500()
{
  unint64_t result;

  result = qword_25739F668;
  if (!qword_25739F668)
  {
    result = MEMORY[0x24951C158](&unk_2449D1EF4, &type metadata for StaticLinkablePreviewProduct.Key);
    atomic_store(result, (unint64_t *)&qword_25739F668);
  }
  return result;
}

unint64_t sub_244939544()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_25739F678;
  if (!qword_25739F678)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25739F670);
    v2 = sub_2449395A8();
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25739F678);
  }
  return result;
}

unint64_t sub_2449395A8()
{
  unint64_t result;

  result = qword_25739F680;
  if (!qword_25739F680)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BuiltTargetDescription, &type metadata for BuiltTargetDescription);
    atomic_store(result, (unint64_t *)&qword_25739F680);
  }
  return result;
}

uint64_t StaticLinkablePreviewProduct.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  v9[3] = &type metadata for StaticLinkablePreviewProduct.Key;
  v9[4] = sub_244939500();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F670);
  sub_244939544();
  sub_2449CF3B8();
  if (v2)
  {
    v5 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    if (v10)
      v7 = v10;
    else
      v7 = MEMORY[0x24BEE4AF8];
    v8 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    *a2 = v7;
  }
  return result;
}

unint64_t sub_2449396D4()
{
  unint64_t result;

  result = qword_25739F688;
  if (!qword_25739F688)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for StaticLinkablePreviewProduct, &type metadata for StaticLinkablePreviewProduct);
    atomic_store(result, (unint64_t *)&qword_25739F688);
  }
  return result;
}

uint64_t sub_24493971C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return StaticLinkablePreviewProduct.init(propertyListValue:)(a1, a2);
}

ValueMetadata *type metadata accessor for StaticLinkablePreviewProduct()
{
  return &type metadata for StaticLinkablePreviewProduct;
}

uint64_t getEnumTagSinglePayload for StaticLinkablePreviewProduct.Key(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for StaticLinkablePreviewProduct.Key(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2449397D4 + 4 * byte_2449D1D50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2449397F4 + 4 * byte_2449D1D55[v4]))();
}

_BYTE *sub_2449397D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2449397F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2449397FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244939804(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24493980C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244939814(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_244939820()
{
  return 0;
}

ValueMetadata *type metadata accessor for StaticLinkablePreviewProduct.Key()
{
  return &type metadata for StaticLinkablePreviewProduct.Key;
}

unint64_t sub_24493983C()
{
  unint64_t result;

  result = qword_25739F690;
  if (!qword_25739F690)
  {
    result = MEMORY[0x24951C158](&unk_2449D1ECC, &type metadata for StaticLinkablePreviewProduct.Key);
    atomic_store(result, (unint64_t *)&qword_25739F690);
  }
  return result;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.id.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.id.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.name.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.sfSymbolName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.sfSymbolName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.sfSymbolName.modify())()
{
  return nullsub_1;
}

void __swiftcall CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.init(id:name:sfSymbolName:)(PreviewsMessagingOS::CanvasControlDescription::ControlType::TimelineConfiguration::TimelineStop *__return_ptr retstr, Swift::Int id, Swift::String name, Swift::String_optional sfSymbolName)
{
  retstr->id = id;
  retstr->name = name;
  retstr->sfSymbolName = sfSymbolName;
}

void sub_244939990(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.stops.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.stops.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.TimelineConfiguration.stops.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.allowShuffle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.allowShuffle.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.TimelineConfiguration.allowShuffle.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::CanvasControlDescription::ControlType::TimelineConfiguration __swiftcall CanvasControlDescription.ControlType.TimelineConfiguration.init(stops:allowShuffle:)(Swift::OpaquePointer stops, Swift::Bool allowShuffle)
{
  uint64_t v2;
  PreviewsMessagingOS::CanvasControlDescription::ControlType::TimelineConfiguration result;

  *(Swift::OpaquePointer *)v2 = stops;
  *(_BYTE *)(v2 + 8) = allowShuffle;
  result.stops = stops;
  result.allowShuffle = allowShuffle;
  return result;
}

uint64_t CanvasControlDescription.ControlType.ToggleConfiguration.sfSymbolName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CanvasControlDescription.ControlType.ToggleConfiguration.sfSymbolName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.ToggleConfiguration.sfSymbolName.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlDescription.ControlType.ToggleConfiguration.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CanvasControlDescription.ControlType.ToggleConfiguration.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.ToggleConfiguration.title.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlDescription.ControlType.ToggleConfiguration.supportsInteractionEvents.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t CanvasControlDescription.ControlType.ToggleConfiguration.supportsInteractionEvents.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.ToggleConfiguration.supportsInteractionEvents.modify())()
{
  return nullsub_1;
}

void __swiftcall CanvasControlDescription.ControlType.ToggleConfiguration.init(sfSymbolName:title:supportsInteractionEvents:)(PreviewsMessagingOS::CanvasControlDescription::ControlType::ToggleConfiguration *__return_ptr retstr, Swift::String sfSymbolName, Swift::String title, Swift::Bool supportsInteractionEvents)
{
  retstr->sfSymbolName = sfSymbolName;
  retstr->title = title;
  retstr->supportsInteractionEvents = supportsInteractionEvents;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Item.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Item.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.GridConfiguration.Item.title.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration::Item __swiftcall CanvasControlDescription.ControlType.GridConfiguration.Item.init(title:)(PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration::Item title)
{
  PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration::Item *v1;

  *v1 = title;
  return title;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.GridConfiguration.Section.title.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.firstItem.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.firstItem.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.GridConfiguration.Section.firstItem.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.moreItems.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.moreItems.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.GridConfiguration.Section.moreItems.modify())()
{
  return nullsub_1;
}

void __swiftcall CanvasControlDescription.ControlType.GridConfiguration.Section.init(title:firstItem:moreItems:)(PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration::Section *__return_ptr retstr, Swift::String_optional title, PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration::Item firstItem, Swift::OpaquePointer moreItems)
{
  retstr->title = title;
  retstr->firstItem = *(PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration::Item *)firstItem.title.value._countAndFlagsBits;
  retstr->moreItems._rawValue = firstItem.title.value._object;
}

void __swiftcall CanvasControlDescription.ControlType.GridConfiguration.Section.init(title:items:)(PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration::Section_optional *__return_ptr retstr, Swift::String_optional title, Swift::OpaquePointer items)
{
  void *object;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  object = title.value._object;
  v6 = *((_QWORD *)items._rawValue + 2);
  if (v6)
  {
    countAndFlagsBits = title.value._countAndFlagsBits;
    v8 = *((_QWORD *)items._rawValue + 4);
    v9 = (void *)*((_QWORD *)items._rawValue + 5);
    sub_2449CFCDC();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v10 = swift_dynamicCastClass();
    if (!v10)
    {
      swift_bridgeObjectRelease();
      v10 = MEMORY[0x24BEE4AF8];
    }
    v11 = *(_QWORD *)(v10 + 16);
    swift_release();
    if (v11 == v6 - 1)
    {
      v12 = (void *)swift_dynamicCastClass();
      if (!v12)
      {
        swift_bridgeObjectRelease();
        v12 = (void *)MEMORY[0x24BEE4AF8];
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v12 = (void *)sub_24493D9DC((uint64_t)items._rawValue, (uint64_t)items._rawValue + 32, 1, (2 * v6) | 1);
    }
    swift_bridgeObjectRelease();
    retstr->value.title.value._countAndFlagsBits = countAndFlagsBits;
    retstr->value.title.value._object = object;
    retstr->value.firstItem.title.value._countAndFlagsBits = v8;
    retstr->value.firstItem.title.value._object = v9;
    retstr->value.moreItems._rawValue = v12;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    retstr->value.moreItems._rawValue = 0;
    retstr->value.title = 0u;
    retstr->value.firstItem = 0u;
  }
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.items.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F258);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2449D1F20;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v6 = v3;
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  sub_24492BF3C(v4);
  return v6;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.sections.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.sections.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CanvasControlDescription.ControlType.GridConfiguration.sections.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration __swiftcall CanvasControlDescription.ControlType.GridConfiguration.init(sections:)(PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration sections)
{
  PreviewsMessagingOS::CanvasControlDescription::ControlType::GridConfiguration *v1;

  v1->sections._rawValue = sections.sections._rawValue;
  return sections;
}

uint64_t CanvasControlDescription.controlType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24493DCE8(v1, a1, type metadata accessor for CanvasControlDescription.ControlType);
}

uint64_t CanvasControlDescription.controlType.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_24493DD40(a1, v1, type metadata accessor for CanvasControlDescription.ControlType);
}

uint64_t (*CanvasControlDescription.controlType.modify())()
{
  return nullsub_1;
}

uint64_t (*CanvasControlDescription.modifiers.modify())()
{
  return nullsub_1;
}

__n128 CanvasControlDescription.thumbnailGeometry.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 *v3;
  unint64_t v4;
  unsigned __int8 v5;
  __n128 result;

  v3 = (__n128 *)(v1 + *(int *)(type metadata accessor for CanvasControlDescription(0) + 24));
  v4 = v3[1].n128_u64[0];
  v5 = v3[1].n128_u8[8];
  result = *v3;
  *a1 = *v3;
  a1[1].n128_u64[0] = v4;
  a1[1].n128_u8[8] = v5;
  return result;
}

__n128 CanvasControlDescription.thumbnailGeometry.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 *v4;
  __n128 result;
  __n128 v6;

  v6 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u8[8];
  v4 = (__n128 *)(v1 + *(int *)(type metadata accessor for CanvasControlDescription(0) + 24));
  result = v6;
  *v4 = v6;
  v4[1].n128_u64[0] = v2;
  v4[1].n128_u8[8] = v3;
  return result;
}

uint64_t (*CanvasControlDescription.thumbnailGeometry.modify())()
{
  type metadata accessor for CanvasControlDescription(0);
  return nullsub_1;
}

__n128 CanvasControlDescription.init(controlType:modifiers:thumbnailGeometry:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unsigned __int8 v6;
  __n128 *v7;
  __n128 result;
  __n128 v9;

  v9 = *a2;
  v5 = a2[1].n128_u64[0];
  v6 = a2[1].n128_u8[8];
  v7 = (__n128 *)(a3 + *(int *)(type metadata accessor for CanvasControlDescription(0) + 24));
  sub_24493DD84(a1, a3, type metadata accessor for CanvasControlDescription.ControlType);
  result = v9;
  *v7 = v9;
  v7[1].n128_u64[0] = v5;
  v7[1].n128_u8[8] = v6;
  return result;
}

uint64_t static CanvasControlDescription.disabled.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for CanvasControlDescription.ControlType(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for CanvasControlDescription(0);
  v3 = a1 + *(int *)(result + 24);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 1;
  return result;
}

uint64_t sub_24493A09C(char a1)
{
  if (!a1)
    return 0x546C6F72746E6F63;
  if (a1 == 1)
    return 0x7265696669646F6DLL;
  return 0xD000000000000011;
}

uint64_t sub_24493A104(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24499F1A4(*a1, *a2);
}

uint64_t sub_24493A110()
{
  return sub_2449C54B0();
}

uint64_t sub_24493A118()
{
  return sub_2449233A0();
}

uint64_t sub_24493A120()
{
  return sub_2449CB564();
}

uint64_t sub_24493A128@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24493A15C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493A09C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493A184()
{
  char *v0;

  return sub_24493A09C(*v0);
}

uint64_t CanvasControlDescription.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[6];
  char v16;
  _BYTE v17[24];
  ValueMetadata *v18;
  unint64_t v19;

  v5 = type metadata accessor for CanvasControlDescription.ControlType(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &type metadata for CanvasControlDescription.Key;
  v8 = sub_24493DB74();
  v19 = v8;
  v17[0] = 0;
  sub_24493DED4(&qword_25739F6A0, type metadata accessor for CanvasControlDescription.ControlType, (uint64_t)&protocol conformance descriptor for CanvasControlDescription.ControlType);
  sub_2449CF37C();
  if (v2)
  {
    v9 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v18 = &type metadata for CanvasControlDescription.Key;
    v19 = v8;
    v17[0] = 1;
    sub_24493DBB8();
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v18 = &type metadata for CanvasControlDescription.Key;
    v19 = v8;
    v17[0] = 2;
    sub_24493DC38();
    sub_2449CF3B8();
    v11 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    *(_OWORD *)v15 = *(_OWORD *)&v15[3];
    v12 = v15[5];
    v13 = v16;
    v14 = a2 + *(int *)(type metadata accessor for CanvasControlDescription(0) + 24);
    result = sub_24493DD84((uint64_t)v7, a2, type metadata accessor for CanvasControlDescription.ControlType);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_QWORD *)(v14 + 16) = v12;
    *(_BYTE *)(v14 + 24) = v13;
  }
  return result;
}

uint64_t CanvasControlDescription.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493A3C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[2];
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FA88);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FA90);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v20 - v10;
  v12 = (char *)v20 + *(int *)(v9 + 48) - v10;
  *((_BYTE *)v20 - v10) = 0;
  sub_24493DCE8(a1, (uint64_t)v12, type metadata accessor for CanvasControlDescription.ControlType);
  v13 = a1 + *(int *)(type metadata accessor for CanvasControlDescription(0) + 24);
  v20[0] = *(_OWORD *)v13;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_BYTE *)(v13 + 24);
  v16 = (uint64_t)&v8[*(int *)(v5 + 48)];
  *v8 = 0;
  sub_24493DCE8((uint64_t)v12, v16, type metadata accessor for CanvasControlDescription.ControlType);
  sub_24493DD84(v16, (uint64_t)v4, type metadata accessor for CanvasControlDescription.ControlType);
  v17 = type metadata accessor for CanvasControlDescription.ControlType(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 0, 1, v17);
  v26 = 0;
  v25 = 1;
  v24 = 0;
  v23 = 2;
  v20[1] = v20[0];
  v21 = v14;
  v22 = v15;
  sub_24493DB74();
  sub_24493DED4(&qword_25739F6A0, type metadata accessor for CanvasControlDescription.ControlType, (uint64_t)&protocol conformance descriptor for CanvasControlDescription.ControlType);
  sub_24493DBB8();
  sub_24493DC38();
  v18 = sub_2449CF5F8();
  sub_244940E8C((uint64_t)v4, &qword_25739FA88);
  sub_244940E8C((uint64_t)v11, &qword_25739FA90);
  return v18;
}

uint64_t sub_24493A600()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493A62C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CanvasControlDescription.init(propertyListValue:)(a1, a2);
}

double ThumbnailGeometry.size.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ThumbnailGeometry.size.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*ThumbnailGeometry.size.modify())()
{
  return nullsub_1;
}

double ThumbnailGeometry.cornerRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ThumbnailGeometry.cornerRadius.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*ThumbnailGeometry.cornerRadius.modify())()
{
  return nullsub_1;
}

void ThumbnailGeometry.init(size:cornerRadius:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

uint64_t sub_24493A68C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x615272656E726F63;
  else
    return 1702521203;
}

uint64_t sub_24493A6C4(char *a1, char *a2)
{
  return sub_2449A0C2C(*a1, *a2);
}

uint64_t sub_24493A6D0()
{
  return sub_2449C5560();
}

uint64_t sub_24493A6D8()
{
  return sub_244924160();
}

uint64_t sub_24493A6E0()
{
  return sub_2449CA408();
}

uint64_t sub_24493A6E8@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24493A6F4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493A68C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493A71C()
{
  char *v0;

  return sub_24493A68C(*v0);
}

uint64_t ThumbnailGeometry.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = &type metadata for ThumbnailGeometry.Key;
  v5 = sub_24493DC84();
  v14 = v5;
  v12[0] = 0;
  type metadata accessor for CGSize(0);
  sub_2449CF37C();
  if (v2)
  {
    v8 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v6 = v15;
    v7 = v16;
    v13 = &type metadata for ThumbnailGeometry.Key;
    v14 = v5;
    v12[0] = 1;
    sub_2449CF37C();
    v9 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v11 = v17;
    *a2 = v6;
    a2[1] = v7;
    a2[2] = v11;
  }
  return result;
}

uint64_t ThumbnailGeometry.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493A884()
{
  type metadata accessor for CGSize(0);
  sub_24493DC84();
  return sub_2449CF604();
}

uint64_t sub_24493A914()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493A94C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return ThumbnailGeometry.init(propertyListValue:)(a1, a2);
}

PreviewsMessagingOS::CanvasControlEvent::Event_optional __swiftcall CanvasControlEvent.Event.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  PreviewsMessagingOS::CanvasControlEvent::Event_optional v2;

  v1 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = PreviewsMessagingOS_CanvasControlEvent_Event_thumbnailRequest;
  else
    v2.value = PreviewsMessagingOS_CanvasControlEvent_Event_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t CanvasControlEvent.Event.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0x7463617265746E69;
}

uint64_t sub_24493A9F4(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = CanvasControlEvent.Event.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == CanvasControlEvent.Event.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24493AA7C()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  CanvasControlEvent.Event.rawValue.getter(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24493AADC()
{
  char *v0;

  CanvasControlEvent.Event.rawValue.getter(*v0);
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24493AB1C()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  CanvasControlEvent.Event.rawValue.getter(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24493AB78@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24493AB84@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = CanvasControlEvent.Event.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493ABAC()
{
  sub_244940DF8();
  return sub_2449CF670();
}

uint64_t sub_24493ABF4()
{
  sub_244940DF8();
  return sub_2449CF67C();
}

uint64_t CanvasControlEvent.event.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CanvasControlEvent.event.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

uint64_t (*CanvasControlEvent.event.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlEvent.controlIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t CanvasControlEvent.controlIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*CanvasControlEvent.controlIndex.modify())()
{
  return nullsub_1;
}

uint64_t CanvasControlEvent.stateBox.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CanvasControlEvent(0);
  return sub_24493DCE8(v1 + *(int *)(v3 + 24), a1, type metadata accessor for PlistValueBox);
}

uint64_t CanvasControlEvent.stateBox.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CanvasControlEvent(0);
  return sub_24493DD40(a1, v1 + *(int *)(v3 + 24), type metadata accessor for PlistValueBox);
}

uint64_t (*CanvasControlEvent.stateBox.modify())()
{
  type metadata accessor for CanvasControlEvent(0);
  return nullsub_1;
}

uint64_t CanvasControlEvent.init<A>(event:controlIndex:state:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v11 = a1 & 1;
  v12 = sub_2449CFB2C();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - v13;
  v15 = type metadata accessor for PlistValueBox(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v14, a3, a4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, a4);
  PlistValueBox.init<A>(value:)((uint64_t)v14, a4, a5, (uint64_t)v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, a4);
  *(_BYTE *)a6 = v11;
  *(_QWORD *)(a6 + 8) = a2;
  v19 = type metadata accessor for CanvasControlEvent(0);
  return sub_24493DD84((uint64_t)v17, a6 + *(int *)(v19 + 24), type metadata accessor for PlistValueBox);
}

uint64_t PlistValueBox.init<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_2449CF400();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = a2;
  v16 = a3;
  v17 = a1;
  sub_24493DE08();
  sub_2449CF3E8();
  v12 = sub_2449CFB2C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(a4, v11, v8);
}

uint64_t sub_24493AF60(char a1)
{
  return *(_QWORD *)&aEvent_4[8 * a1];
}

uint64_t sub_24493AF80(char *a1, char *a2)
{
  return sub_2449A0BA8(*a1, *a2);
}

uint64_t sub_24493AF8C()
{
  return sub_2449C55E0();
}

uint64_t sub_24493AF94()
{
  return sub_244924120();
}

uint64_t sub_24493AF9C()
{
  return sub_2449CA484();
}

uint64_t sub_24493AFA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24493AFD8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493AF60(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493B000()
{
  char *v0;

  return sub_24493AF60(*v0);
}

uint64_t CanvasControlEvent.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[24];
  ValueMetadata *v17;
  unint64_t v18;
  char v19;

  v5 = type metadata accessor for PlistValueBox(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = &type metadata for CanvasControlEvent.Key;
  v8 = sub_24493DE4C();
  v18 = v8;
  v16[0] = 0;
  sub_24493DE90();
  sub_2449CF37C();
  if (v2)
  {
    v11 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v9 = v19;
    v17 = &type metadata for CanvasControlEvent.Key;
    v18 = v8;
    v16[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v10 = v15;
    v17 = &type metadata for CanvasControlEvent.Key;
    v18 = v8;
    v16[0] = 2;
    sub_24493DED4((unint64_t *)&qword_25739F6D8, type metadata accessor for PlistValueBox, (uint64_t)&protocol conformance descriptor for PlistValueBox);
    sub_2449CF37C();
    v12 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    *(_BYTE *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    v13 = type metadata accessor for CanvasControlEvent(0);
    return sub_24493DD84((uint64_t)v7, a2 + *(int *)(v13 + 24), type metadata accessor for PlistValueBox);
  }
}

uint64_t CanvasControlEvent.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493B208(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FA78);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FA80);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = &v20[-v10];
  v12 = *a1;
  v13 = *((_QWORD *)a1 + 1);
  v14 = &v20[*(int *)(v9 + 48) - v10];
  v20[-v10] = 2;
  v15 = type metadata accessor for CanvasControlEvent(0);
  sub_24493DCE8((uint64_t)&a1[*(int *)(v15 + 24)], (uint64_t)v14, type metadata accessor for PlistValueBox);
  v25 = 0;
  v24 = v12;
  v23 = 1;
  v21 = v13;
  v22 = 0;
  v16 = (uint64_t)&v8[*(int *)(v5 + 48)];
  *v8 = 2;
  sub_24493DCE8((uint64_t)v14, v16, type metadata accessor for PlistValueBox);
  sub_24493DD84(v16, (uint64_t)v4, type metadata accessor for PlistValueBox);
  v17 = type metadata accessor for PlistValueBox(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 0, 1, v17);
  v20[15] = 2;
  sub_24493DE4C();
  sub_24493DE90();
  sub_24493DED4((unint64_t *)&qword_25739F6D8, type metadata accessor for PlistValueBox, (uint64_t)&protocol conformance descriptor for PlistValueBox);
  v18 = sub_2449CF5F8();
  sub_244940E8C((uint64_t)v4, &qword_25739FA78);
  sub_244940E8C((uint64_t)v11, &qword_25739FA80);
  return v18;
}

uint64_t CanvasControlEvent.description.getter()
{
  sub_2449CFB98();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  sub_2449CF898();
  sub_2449CFC88();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  sub_2449CF898();
  type metadata accessor for CanvasControlEvent(0);
  PlistValueBox.description.getter();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24493B568()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493B594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CanvasControlEvent.init(propertyListValue:)(a1, a2);
}

void static MessageStreamInstanceIdentifier.canvasControlEvents.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x80000002449E32A0;
}

uint64_t sub_24493B5DC@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_24493B5E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_244940CDC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t PlistValueBox.getValue<A>()(uint64_t a1, uint64_t a2)
{
  return sub_24493B648(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BE764C8]);
}

uint64_t PlistValueBox.getOptionalValue<A>()(uint64_t a1, uint64_t a2)
{
  return sub_24493B648(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BE764F0]);
}

uint64_t sub_24493B648(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t))
{
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  v8 = &type metadata for PlistValueBox.Key;
  v9 = sub_24493DE08();
  a3(v7, a1, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t PlistValueBox.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t PlistValueBox.propertyListValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PlistValueBox.description.getter()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];

  v0 = sub_2449CF3AC();
  if (*(_QWORD *)(v0 + 16) && (v1 = sub_24493D884(0x65756C6176, 0xE500000000000000), (v2 & 1) != 0))
    sub_24493DF74(*(_QWORD *)(v0 + 56) + 32 * v1, (uint64_t)v8);
  else
    memset(v8, 0, sizeof(v8));
  swift_bridgeObjectRelease();
  sub_24493DF1C((uint64_t)v8, (uint64_t)&v6);
  if (v7)
  {
    sub_24493DF64(&v6, v5);
    sub_2449CFBE0();
    v3 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    sub_244940E8C((uint64_t)v8, &qword_25739F6E0);
  }
  else
  {
    sub_244940E8C((uint64_t)v8, &qword_25739F6E0);
    return 7104878;
  }
  return v3;
}

uint64_t sub_24493B850(char a1)
{
  return *(_QWORD *)&aTimelinetoggle_0[8 * a1];
}

uint64_t sub_24493B870@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_24493B8A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_24493B8FC(char *a1, char *a2)
{
  return sub_24499F63C(*a1, *a2);
}

uint64_t sub_24493B908()
{
  return sub_2449C5648();
}

uint64_t sub_24493B910()
{
  return sub_2449235F0();
}

uint64_t sub_24493B918()
{
  return sub_2449CB284();
}

uint64_t sub_24493B920@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940D60();
  *a1 = result;
  return result;
}

uint64_t sub_24493B94C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493B850(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493B974()
{
  sub_244940CF0();
  return sub_2449CF670();
}

uint64_t sub_24493B9BC()
{
  sub_244940CF0();
  return sub_2449CF67C();
}

uint64_t sub_24493BA20(char a1)
{
  if ((a1 & 1) != 0)
    return 0x72756769666E6F63;
  else
    return 0x696D697263736964;
}

uint64_t sub_24493BA6C(char *a1, char *a2)
{
  return sub_24499F2C8(*a1, *a2);
}

uint64_t sub_24493BA78()
{
  return sub_2449C56B0();
}

uint64_t sub_24493BA80()
{
  return sub_244923428();
}

uint64_t sub_24493BA88()
{
  return sub_2449CB4D4();
}

uint64_t sub_24493BA90@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24493BA9C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493BA20(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493BAC4()
{
  char *v0;

  return sub_24493BA20(*v0);
}

uint64_t CanvasControlDescription.ControlType.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _BYTE v14[24];
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v17 = a2;
  v4 = type metadata accessor for CanvasControlDescription.ControlType(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v12 - v7;
  v9 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v9);
  v15 = &type metadata for CanvasControlDescription.ControlType.Key;
  v16 = sub_24493DFB0();
  v14[0] = 0;
  sub_24493DFF4();
  sub_2449CF37C();
  if (!v2)
  {
    v12[1] = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    __asm { BR              X10 }
  }
  v10 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

void sub_24493BC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v4;
  *(_BYTE *)(v5 - 120) = 1;
  sub_24493E0C0();
  sub_2449CF37C();
  if (!v0)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v1, v6);
    __swift_destroy_boxed_opaque_existential_1(v5 - 120);
    v7 = *(_BYTE *)(v5 - 152);
    *(_QWORD *)v3 = *(_QWORD *)(v5 - 160);
    *(_BYTE *)(v3 + 8) = v7;
    swift_storeEnumTagMultiPayload();
    sub_24493DD84(v3, *(_QWORD *)(v5 - 72), type metadata accessor for CanvasControlDescription.ControlType);
    JUMPOUT(0x24493BBECLL);
  }
  JUMPOUT(0x24493BBC8);
}

void CanvasControlDescription.ControlType.propertyListValue.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD v10[16];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2449CF400();
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for CanvasControlDescription.ControlType(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[4] = v2;
  sub_24493DFB0();
  sub_24493DFF4();
  v10[1] = a1;
  sub_2449CF3E8();
  sub_24493DCE8(v2, (uint64_t)v8, type metadata accessor for CanvasControlDescription.ControlType);
  v9 = (char *)sub_24493BFF0 + 4 * byte_2449D1F35[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_24493BFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v4 = *(_BYTE *)(v2 + 8);
  *(_QWORD *)(v3 - 160) = *(_QWORD *)v2;
  *(_BYTE *)(v3 - 152) = v4;
  *(_QWORD *)(v3 - 96) = v0;
  *(_QWORD *)(v3 - 88) = v1;
  *(_BYTE *)(v3 - 120) = 1;
  sub_24493E0C0();
  sub_2449CF370();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v3 - 120);
}

void sub_24493C160(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v5 = type metadata accessor for CanvasControlDescription.ControlType(0);
  MEMORY[0x24BDAC7A8](v5);
  *a1 = 0;
  sub_24493DCE8(a3, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = (char *)sub_24493C1FC + 4 * byte_2449D1F3A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X11 }
}

uint64_t sub_24493C1FC()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t result;

  result = sub_24493DBFC(v1);
  *v0 = 0;
  return result;
}

uint64_t sub_24493C268(char a1)
{
  if ((a1 & 1) != 0)
    return 0x756853776F6C6C61;
  else
    return 0x73706F7473;
}

uint64_t sub_24493C2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CanvasControlDescription.ControlType.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24493C2BC(char *a1, char *a2)
{
  return sub_24499F37C(*a1, *a2);
}

uint64_t sub_24493C2C8()
{
  return sub_2449C5744();
}

uint64_t sub_24493C2D0()
{
  return sub_244923494();
}

uint64_t sub_24493C2D8()
{
  return sub_2449CB454();
}

uint64_t sub_24493C2E0@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24493C2EC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24493C344@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493C268(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493C36C()
{
  char *v0;

  return sub_24493C268(*v0);
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  _BYTE v11[24];
  ValueMetadata *v12;
  unint64_t v13;
  uint64_t v14;

  v12 = &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.Key;
  v5 = sub_24493E10C();
  v13 = v5;
  v11[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F720);
  sub_244931570(&qword_25739F728, &qword_25739F720, (uint64_t (*)(void))sub_24493E150);
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    v7 = v14;
    v12 = &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.Key;
    v13 = v5;
    v11[0] = 1;
    sub_2449CF37C();
    v9 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = v10;
  }
  return result;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493C518()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F720);
  sub_24493E10C();
  sub_244931570(&qword_25739F728, &qword_25739F720, (uint64_t (*)(void))sub_24493E150);
  return sub_2449CF604();
}

uint64_t sub_24493C5C4(char a1)
{
  return qword_2449D2FF8[a1];
}

uint64_t sub_24493C5E4()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493C61C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CanvasControlDescription.ControlType.TimelineConfiguration.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24493C630(char *a1, char *a2)
{
  return sub_24499F420(*a1, *a2);
}

uint64_t sub_24493C63C()
{
  return sub_2449C57C8();
}

uint64_t sub_24493C644()
{
  return sub_2449234F0();
}

uint64_t sub_24493C64C()
{
  return sub_2449CB3F0();
}

uint64_t sub_24493C654@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24493C688@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493C5C4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493C6B0()
{
  char *v0;

  return sub_24493C5C4(*v0);
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;

  v15 = &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.Key;
  v5 = sub_24493E1A0();
  v16 = v5;
  v14[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v6 = v17;
    v15 = &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.Key;
    v16 = v5;
    v14[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v15 = &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.Key;
    v16 = v5;
    v14[0] = 2;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v8 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    *a2 = v6;
    a2[1] = v12;
    a2[2] = v13;
    a2[3] = v10;
    a2[4] = v11;
  }
  return result;
}

uint64_t CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493C888(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  _BYTE v12[16];

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  sub_244940E44((uint64_t)(a1 + 3), (uint64_t)v12);
  v11 = 0;
  v9 = v1;
  v10 = 0;
  v8 = 1;
  v6 = v2;
  v7 = v3;
  v5[23] = 2;
  sub_244940E44((uint64_t)v12, (uint64_t)v5);
  sub_24493E1A0();
  return sub_2449CF5F8();
}

uint64_t sub_24493C94C(char a1)
{
  if (!a1)
    return 0x6C6F626D79536673;
  if (a1 == 1)
    return 0x656C746974;
  return 0xD000000000000019;
}

uint64_t sub_24493C9AC()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493C9EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24493CA00(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24499F4A4(*a1, *a2);
}

uint64_t sub_24493CA0C()
{
  return sub_2449C5830();
}

uint64_t sub_24493CA14()
{
  return sub_244923530();
}

uint64_t sub_24493CA1C()
{
  return sub_2449CB34C();
}

uint64_t sub_24493CA24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24493CA58@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493C94C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493CA80()
{
  char *v0;

  return sub_24493C94C(*v0);
}

uint64_t CanvasControlDescription.ControlType.ToggleConfiguration.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v15 = &type metadata for CanvasControlDescription.ControlType.ToggleConfiguration.Key;
  v5 = sub_24493E1EC();
  v16 = v5;
  v14[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v8 = v17;
    v7 = v18;
    v15 = &type metadata for CanvasControlDescription.ControlType.ToggleConfiguration.Key;
    v16 = v5;
    v14[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v15 = &type metadata for CanvasControlDescription.ControlType.ToggleConfiguration.Key;
    v16 = v5;
    v14[0] = 2;
    sub_2449CF37C();
    v10 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v11 = v19;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v13;
    *(_BYTE *)(a2 + 32) = v11;
  }
  return result;
}

uint64_t CanvasControlDescription.ControlType.ToggleConfiguration.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493CC84()
{
  sub_24493E1EC();
  return sub_2449CF5F8();
}

uint64_t sub_24493CD24()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493CD64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CanvasControlDescription.ControlType.ToggleConfiguration.init(propertyListValue:)(a1, a2);
}

uint64_t CanvasControlDescription.Modifiers.init(propertyListValue:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_24493CDC0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_24493CE0C@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_24493CE18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_244940D34();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.propertyListValue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F748);
  sub_24493E244();
  sub_244931570(&qword_25739F758, &qword_25739F748, (uint64_t (*)(void))sub_24493E288);
  return sub_2449CF3E8();
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;

  v8 = &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Key;
  v9 = sub_24493E244();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F748);
  sub_244931570(&qword_25739F758, &qword_25739F748, (uint64_t (*)(void))sub_24493E288);
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
    *a2 = v10;
  return result;
}

uint64_t sub_24493CFC0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F748);
  sub_24493E244();
  sub_244931570(&qword_25739F758, &qword_25739F748, (uint64_t (*)(void))sub_24493E288);
  return sub_2449CF3E8();
}

uint64_t sub_24493D050@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;

  v8 = &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Key;
  v9 = sub_24493E244();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F748);
  sub_244931570(&qword_25739F758, &qword_25739F748, (uint64_t (*)(void))sub_24493E288);
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
    *a2 = v10;
  return result;
}

uint64_t sub_24493D14C@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_24493D158@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_24493D1A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_244940D4C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Item.propertyListValue.getter()
{
  sub_24493E2D0();
  return sub_2449CF3E8();
}

double CanvasControlDescription.ControlType.GridConfiguration.Item.init(propertyListValue:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  __int128 v10;

  v8 = &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Item.Key;
  v9 = sub_24493E2D0();
  sub_2449CF3B8();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
  {
    result = *(double *)&v10;
    *a2 = v10;
  }
  return result;
}

uint64_t sub_24493D2F0(char a1)
{
  return *(_QWORD *)&aTitle_4[8 * a1];
}

uint64_t sub_24493D310()
{
  sub_24493E2D0();
  return sub_2449CF3E8();
}

double sub_24493D370@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  __int128 v10;

  v8 = &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Item.Key;
  v9 = sub_24493E2D0();
  sub_2449CF3B8();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
  {
    result = *(double *)&v10;
    *a2 = v10;
  }
  return result;
}

uint64_t sub_24493D434(char *a1, char *a2)
{
  return sub_24499F5B8(*a1, *a2);
}

uint64_t sub_24493D440()
{
  return sub_2449C58D8();
}

uint64_t sub_24493D448()
{
  return sub_2449235B0();
}

uint64_t sub_24493D450()
{
  return sub_2449CB2E8();
}

uint64_t sub_24493D458@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24493D48C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24493D2F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24493D4B4()
{
  char *v0;

  return sub_24493D2F0(*v0);
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493D4FC(uint64_t a1)
{
  _BYTE v2[24];
  _BYTE v3[16];

  sub_244940E44(a1, (uint64_t)v3);
  v2[23] = 0;
  sub_244940E44((uint64_t)v3, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F780);
  sub_24493E31C();
  sub_24493E360();
  sub_244931570(&qword_25739F788, &qword_25739F780, (uint64_t (*)(void))sub_24493E360);
  return sub_2449CF5F8();
}

uint64_t CanvasControlDescription.ControlType.GridConfiguration.Section.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Section.Key;
  v5 = sub_24493E31C();
  v16 = v5;
  v14[0] = 0;
  sub_2449CF3B8();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v8 = v17;
    v7 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v15 = &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Section.Key;
    v16 = v5;
    v14[0] = 1;
    sub_24493E360();
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v10 = v17;
    v9 = v18;
    v15 = &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Section.Key;
    v16 = v5;
    v14[0] = 2;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739F780);
    sub_244931570(&qword_25739F788, &qword_25739F780, (uint64_t (*)(void))sub_24493E360);
    sub_2449CF37C();
    v11 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v12 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v10;
    a2[3] = v9;
    a2[4] = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_24493D830()
{
  return sub_2449CF3D0();
}

uint64_t sub_24493D870@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CanvasControlDescription.ControlType.GridConfiguration.Section.init(propertyListValue:)(a1, a2);
}

unint64_t sub_24493D884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2449CFD48();
  sub_2449CF88C();
  v4 = sub_2449CFD84();
  return sub_24493D8E8(a1, a2, v4);
}

unint64_t sub_24493D8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2449CFCD0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2449CFCD0() & 1) == 0);
    }
  }
  return v6;
}

_QWORD *sub_24493D9C8(uint64_t a1)
{
  return sub_244940798(a1, &qword_25739F270, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_244940AE0);
}

uint64_t sub_24493D9DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 2 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739F258);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CanvasControlDescription.ControlType(uint64_t a1)
{
  return sub_24492813C(a1, qword_25739F8A0);
}

uint64_t type metadata accessor for CanvasControlDescription(uint64_t a1)
{
  return sub_24492813C(a1, qword_25739F7F0);
}

unint64_t sub_24493DB74()
{
  unint64_t result;

  result = qword_25739F698;
  if (!qword_25739F698)
  {
    result = MEMORY[0x24951C158](&unk_2449D2F48, &type metadata for CanvasControlDescription.Key);
    atomic_store(result, (unint64_t *)&qword_25739F698);
  }
  return result;
}

unint64_t sub_24493DBB8()
{
  unint64_t result;

  result = qword_25739F6A8;
  if (!qword_25739F6A8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlDescription.Modifiers, &type metadata for CanvasControlDescription.Modifiers);
    atomic_store(result, (unint64_t *)&qword_25739F6A8);
  }
  return result;
}

uint64_t sub_24493DBFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CanvasControlDescription.ControlType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24493DC38()
{
  unint64_t result;

  result = qword_25739F6B0;
  if (!qword_25739F6B0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ThumbnailGeometry, &type metadata for ThumbnailGeometry);
    atomic_store(result, (unint64_t *)&qword_25739F6B0);
  }
  return result;
}

uint64_t sub_24493DC7C()
{
  uint64_t v0;

  return sub_24493A3C0(*(_QWORD *)(v0 + 16));
}

unint64_t sub_24493DC84()
{
  unint64_t result;

  result = qword_25739F6B8;
  if (!qword_25739F6B8)
  {
    result = MEMORY[0x24951C158](&unk_2449D2F20, &type metadata for ThumbnailGeometry.Key);
    atomic_store(result, (unint64_t *)&qword_25739F6B8);
  }
  return result;
}

uint64_t sub_24493DCC8()
{
  return sub_24493A884();
}

uint64_t type metadata accessor for CanvasControlEvent(uint64_t a1)
{
  return sub_24492813C(a1, qword_25739F930);
}

uint64_t sub_24493DCE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PlistValueBox(uint64_t a1)
{
  return sub_24492813C(a1, qword_25739F9C8);
}

uint64_t sub_24493DD40(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_24493DD84(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24493DDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 32);
  v5 = sub_2449CFB2C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

unint64_t sub_24493DE08()
{
  unint64_t result;

  result = qword_25739F6C0;
  if (!qword_25739F6C0)
  {
    result = MEMORY[0x24951C158](&unk_2449D2EF8, &type metadata for PlistValueBox.Key);
    atomic_store(result, (unint64_t *)&qword_25739F6C0);
  }
  return result;
}

unint64_t sub_24493DE4C()
{
  unint64_t result;

  result = qword_25739F6C8;
  if (!qword_25739F6C8)
  {
    result = MEMORY[0x24951C158](&unk_2449D2ED0, &type metadata for CanvasControlEvent.Key);
    atomic_store(result, (unint64_t *)&qword_25739F6C8);
  }
  return result;
}

unint64_t sub_24493DE90()
{
  unint64_t result;

  result = qword_25739F6D0;
  if (!qword_25739F6D0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlEvent.Event, &type metadata for CanvasControlEvent.Event);
    atomic_store(result, (unint64_t *)&qword_25739F6D0);
  }
  return result;
}

uint64_t sub_24493DED4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24951C158](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24493DF14()
{
  uint64_t v0;

  return sub_24493B208(*(char **)(v0 + 16));
}

uint64_t sub_24493DF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F6E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_24493DF64(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_24493DF74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_24493DFB0()
{
  unint64_t result;

  result = qword_25739F6E8;
  if (!qword_25739F6E8)
  {
    result = MEMORY[0x24951C158](&unk_2449D2EA8, &type metadata for CanvasControlDescription.ControlType.Key);
    atomic_store(result, (unint64_t *)&qword_25739F6E8);
  }
  return result;
}

unint64_t sub_24493DFF4()
{
  unint64_t result;

  result = qword_25739F6F0;
  if (!qword_25739F6F0)
  {
    result = MEMORY[0x24951C158](&unk_2449D2E68, &type metadata for CanvasControlDescription.ControlType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739F6F0);
  }
  return result;
}

unint64_t sub_24493E038()
{
  unint64_t result;

  result = qword_25739F6F8;
  if (!qword_25739F6F8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlDescription.ControlType.GridConfiguration, &type metadata for CanvasControlDescription.ControlType.GridConfiguration);
    atomic_store(result, (unint64_t *)&qword_25739F6F8);
  }
  return result;
}

unint64_t sub_24493E07C()
{
  unint64_t result;

  result = qword_25739F700;
  if (!qword_25739F700)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlDescription.ControlType.ToggleConfiguration, &type metadata for CanvasControlDescription.ControlType.ToggleConfiguration);
    atomic_store(result, (unint64_t *)&qword_25739F700);
  }
  return result;
}

unint64_t sub_24493E0C0()
{
  unint64_t result;

  result = qword_25739F708;
  if (!qword_25739F708)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlDescription.ControlType.TimelineConfiguration, &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration);
    atomic_store(result, (unint64_t *)&qword_25739F708);
  }
  return result;
}

void sub_24493E104(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;

  sub_24493C160(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_24493E10C()
{
  unint64_t result;

  result = qword_25739F718;
  if (!qword_25739F718)
  {
    result = MEMORY[0x24951C158](&unk_2449D2E40, &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.Key);
    atomic_store(result, (unint64_t *)&qword_25739F718);
  }
  return result;
}

unint64_t sub_24493E150()
{
  unint64_t result;

  result = qword_25739F730;
  if (!qword_25739F730)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop, &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop);
    atomic_store(result, (unint64_t *)&qword_25739F730);
  }
  return result;
}

uint64_t sub_24493E194()
{
  return sub_24493C518();
}

unint64_t sub_24493E1A0()
{
  unint64_t result;

  result = qword_25739F738;
  if (!qword_25739F738)
  {
    result = MEMORY[0x24951C158](&unk_2449D2E18, &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.Key);
    atomic_store(result, (unint64_t *)&qword_25739F738);
  }
  return result;
}

uint64_t sub_24493E1E4()
{
  uint64_t v0;

  return sub_24493C888(*(uint64_t **)(v0 + 16));
}

unint64_t sub_24493E1EC()
{
  unint64_t result;

  result = qword_25739F740;
  if (!qword_25739F740)
  {
    result = MEMORY[0x24951C158](&unk_2449D2DF0, &type metadata for CanvasControlDescription.ControlType.ToggleConfiguration.Key);
    atomic_store(result, (unint64_t *)&qword_25739F740);
  }
  return result;
}

uint64_t sub_24493E230()
{
  return sub_24493CC84();
}

uint64_t sub_24493E238(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + 16);
  return swift_bridgeObjectRetain();
}

unint64_t sub_24493E244()
{
  unint64_t result;

  result = qword_25739F750;
  if (!qword_25739F750)
  {
    result = MEMORY[0x24951C158](&unk_2449D2DC8, &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Key);
    atomic_store(result, (unint64_t *)&qword_25739F750);
  }
  return result;
}

unint64_t sub_24493E288()
{
  unint64_t result;

  result = qword_25739F760;
  if (!qword_25739F760)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlDescription.ControlType.GridConfiguration.Section, &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Section);
    atomic_store(result, (unint64_t *)&qword_25739F760);
  }
  return result;
}

unint64_t sub_24493E2D0()
{
  unint64_t result;

  result = qword_25739F768;
  if (!qword_25739F768)
  {
    result = MEMORY[0x24951C158](&unk_2449D2DA0, &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Item.Key);
    atomic_store(result, (unint64_t *)&qword_25739F768);
  }
  return result;
}

uint64_t sub_24493E314()
{
  uint64_t v0;

  return sub_24493D4FC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_24493E31C()
{
  unint64_t result;

  result = qword_25739F770;
  if (!qword_25739F770)
  {
    result = MEMORY[0x24951C158](&unk_2449D2D78, &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Section.Key);
    atomic_store(result, (unint64_t *)&qword_25739F770);
  }
  return result;
}

unint64_t sub_24493E360()
{
  unint64_t result;

  result = qword_25739F778;
  if (!qword_25739F778)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlDescription.ControlType.GridConfiguration.Item, &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Item);
    atomic_store(result, (unint64_t *)&qword_25739F778);
  }
  return result;
}

uint64_t sub_24493E3A4()
{
  return MEMORY[0x24BEE1778];
}

unint64_t sub_24493E3B4()
{
  unint64_t result;

  result = qword_25739F790;
  if (!qword_25739F790)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlEvent.Event, &type metadata for CanvasControlEvent.Event);
    atomic_store(result, (unint64_t *)&qword_25739F790);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for CanvasControlDescription(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CanvasControlDescription.ControlType(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 1u:
        v9 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v9;
        v10 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = v10;
        a1[32] = a2[32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 3u:
        v11 = sub_2449CF400();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v12 = *(int *)(a3 + 24);
    v13 = &a1[v12];
    v14 = &a2[v12];
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 9) = *(_OWORD *)(v14 + 9);
  }
  return a1;
}

uint64_t destroy for CanvasControlDescription(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for CanvasControlDescription.ControlType(0);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
      goto LABEL_3;
    case 1:
      swift_bridgeObjectRelease();
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      v3 = sub_2449CF400();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

char *initializeWithCopy for CanvasControlDescription(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v6 = type metadata accessor for CanvasControlDescription.ControlType(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 1u:
      v7 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v7;
      v8 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v8;
      a1[32] = a2[32];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 2u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      v9 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 9) = *(_OWORD *)(v12 + 9);
  return a1;
}

char *assignWithCopy for CanvasControlDescription(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (a1 != a2)
  {
    sub_24493DBFC((uint64_t)a1);
    v6 = type metadata accessor for CanvasControlDescription.ControlType(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v7 = sub_2449CF400();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 9) = *(_OWORD *)(v10 + 9);
  *(_OWORD *)v9 = v11;
  return a1;
}

char *initializeWithTake for CanvasControlDescription(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = type metadata accessor for CanvasControlDescription.ControlType(0);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v7 = sub_2449CF400();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 9) = *(_OWORD *)(v10 + 9);
  return a1;
}

char *assignWithTake for CanvasControlDescription(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (a1 != a2)
  {
    sub_24493DBFC((uint64_t)a1);
    v6 = type metadata accessor for CanvasControlDescription.ControlType(0);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v7 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 9) = *(_OWORD *)(v10 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasControlDescription()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24493EA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for CanvasControlDescription.ControlType);
}

uint64_t storeEnumTagSinglePayload for CanvasControlDescription()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24493EA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for CanvasControlDescription.ControlType);
}

uint64_t sub_24493EA68()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CanvasControlDescription.ControlType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for CanvasControlDescription.ControlType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (_BYTE *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v9 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v9;
        v10 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = v10;
        a1[32] = a2[32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v11 = sub_2449CF400();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for CanvasControlDescription.ControlType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
      goto LABEL_3;
    case 1:
      swift_bridgeObjectRelease();
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      v3 = sub_2449CF400();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *initializeWithCopy for CanvasControlDescription.ControlType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 1u:
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v6;
      v7 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v7;
      a1[32] = a2[32];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 2u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      v8 = sub_2449CF400();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_BYTE *assignWithCopy for CanvasControlDescription.ControlType(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_24493DBFC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v6 = sub_2449CF400();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for CanvasControlDescription.ControlType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v6 = sub_2449CF400();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for CanvasControlDescription.ControlType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_24493DBFC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v6 = sub_2449CF400();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24493F040()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CanvasControlDescription.ControlType.TimelineConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CanvasControlDescription.ControlType.TimelineConfiguration()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for CanvasControlDescription.ControlType.TimelineConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for CanvasControlDescription.ControlType.TimelineConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasControlDescription.ControlType.TimelineConfiguration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasControlDescription.ControlType.TimelineConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.TimelineConfiguration()
{
  return &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration;
}

uint64_t destroy for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop()
{
  return &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop;
}

uint64_t initializeWithCopy for CanvasControlDescription.ControlType.ToggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CanvasControlDescription.ControlType.ToggleConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CanvasControlDescription.ControlType.ToggleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasControlDescription.ControlType.ToggleConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasControlDescription.ControlType.ToggleConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.ToggleConfiguration()
{
  return &type metadata for CanvasControlDescription.ControlType.ToggleConfiguration;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.GridConfiguration()
{
  return &type metadata for CanvasControlDescription.ControlType.GridConfiguration;
}

_QWORD *initializeBufferWithCopyOfBuffer for CanvasControlDescription.ControlType.GridConfiguration.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for JITLoadCommand.LoadDylib()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for CanvasControlDescription.ControlType.GridConfiguration.Item(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for CanvasControlDescription.ControlType.GridConfiguration.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasControlDescription.ControlType.GridConfiguration.Item(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasControlDescription.ControlType.GridConfiguration.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.GridConfiguration.Item()
{
  return &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Item;
}

_QWORD *initializeWithCopy for CanvasControlDescription.ControlType.GridConfiguration.Section(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CanvasControlDescription.ControlType.GridConfiguration.Section(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CanvasControlDescription.ControlType.GridConfiguration.Section(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasControlDescription.ControlType.GridConfiguration.Section(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasControlDescription.ControlType.GridConfiguration.Section(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.GridConfiguration.Section()
{
  return &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Section;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.Modifiers()
{
  return &type metadata for CanvasControlDescription.Modifiers;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ThumbnailGeometry(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ThumbnailGeometry(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ThumbnailGeometry()
{
  return &type metadata for ThumbnailGeometry;
}

uint64_t *initializeBufferWithCopyOfBuffer for CanvasControlEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_2449CF400();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for CanvasControlEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for CanvasControlEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for CanvasControlEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for CanvasControlEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CanvasControlEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasControlEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24493FBEC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PlistValueBox(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CanvasControlEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_24493FC6C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for PlistValueBox(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_24493FCDC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlEvent.Event()
{
  return &type metadata for CanvasControlEvent.Event;
}

uint64_t initializeBufferWithCopyOfBuffer for PlistValueBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF400();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PlistValueBox(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PlistValueBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PlistValueBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PlistValueBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PlistValueBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlistValueBox()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24493FEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE76530]);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for PlistValueBox()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24493FF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BE76530]);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t sub_24493FF9C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.GridConfiguration.Section.Key()
{
  return &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Section.Key;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.GridConfiguration.Item.Key()
{
  return &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Item.Key;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.GridConfiguration.Key()
{
  return &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Key;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.ToggleConfiguration.Key()
{
  return &type metadata for CanvasControlDescription.ControlType.ToggleConfiguration.Key;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.Key()
{
  return &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.Key;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.TimelineConfiguration.Key()
{
  return &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.Key;
}

uint64_t getEnumTagSinglePayload for CanvasControlDescription.ControlType.Discriminant(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasControlDescription.ControlType.Discriminant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_244940150 + 4 * byte_2449D1F64[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_244940184 + 4 * byte_2449D1F5F[v4]))();
}

uint64_t sub_244940184(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24494018C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244940194);
  return result;
}

uint64_t sub_2449401A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2449401A8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2449401AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449401B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.Discriminant()
{
  return &type metadata for CanvasControlDescription.ControlType.Discriminant;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.ControlType.Key()
{
  return &type metadata for CanvasControlDescription.ControlType.Key;
}

ValueMetadata *type metadata accessor for CanvasControlEvent.Key()
{
  return &type metadata for CanvasControlEvent.Key;
}

uint64_t _s19PreviewsMessagingOS24CanvasControlDescriptionV11ControlTypeO17GridConfigurationV4ItemV3KeyOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_244940230 + 4 * byte_2449D1F69[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_244940250 + 4 * byte_2449D1F6E[v4]))();
}

_BYTE *sub_244940230(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_244940250(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244940258(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244940260(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244940268(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244940270(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PlistValueBox.Key()
{
  return &type metadata for PlistValueBox.Key;
}

uint64_t _s19PreviewsMessagingOS18CanvasControlEventV5EventOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2449402D8 + 4 * byte_2449D1F78[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24494030C + 4 * byte_2449D1F73[v4]))();
}

uint64_t sub_24494030C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244940314(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24494031CLL);
  return result;
}

uint64_t sub_244940328(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244940330);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244940334(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24494033C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThumbnailGeometry.Key()
{
  return &type metadata for ThumbnailGeometry.Key;
}

uint64_t _s19PreviewsMessagingOS24CanvasControlDescriptionV11ControlTypeO17GridConfigurationV7SectionV3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2449403A4 + 4 * byte_2449D1F82[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2449403D8 + 4 * byte_2449D1F7D[v4]))();
}

uint64_t sub_2449403D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449403E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2449403E8);
  return result;
}

uint64_t sub_2449403F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2449403FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_244940400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244940408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasControlDescription.Key()
{
  return &type metadata for CanvasControlDescription.Key;
}

unint64_t sub_244940428()
{
  unint64_t result;

  result = qword_25739FA00;
  if (!qword_25739FA00)
  {
    result = MEMORY[0x24951C158](&unk_2449D2670, &type metadata for CanvasControlDescription.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA00);
  }
  return result;
}

unint64_t sub_244940470()
{
  unint64_t result;

  result = qword_25739FA08;
  if (!qword_25739FA08)
  {
    result = MEMORY[0x24951C158](&unk_2449D2710, &type metadata for ThumbnailGeometry.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA08);
  }
  return result;
}

unint64_t sub_2449404B8()
{
  unint64_t result;

  result = qword_25739FA10;
  if (!qword_25739FA10)
  {
    result = MEMORY[0x24951C158](&unk_2449D27B0, &type metadata for PlistValueBox.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA10);
  }
  return result;
}

unint64_t sub_244940500()
{
  unint64_t result;

  result = qword_25739FA18;
  if (!qword_25739FA18)
  {
    result = MEMORY[0x24951C158](&unk_2449D2850, &type metadata for CanvasControlEvent.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA18);
  }
  return result;
}

unint64_t sub_244940548()
{
  unint64_t result;

  result = qword_25739FA20;
  if (!qword_25739FA20)
  {
    result = MEMORY[0x24951C158](&unk_2449D28F0, &type metadata for CanvasControlDescription.ControlType.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA20);
  }
  return result;
}

unint64_t sub_244940590()
{
  unint64_t result;

  result = qword_25739FA28;
  if (!qword_25739FA28)
  {
    result = MEMORY[0x24951C158](&unk_2449D2990, &type metadata for CanvasControlDescription.ControlType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739FA28);
  }
  return result;
}

unint64_t sub_2449405D8()
{
  unint64_t result;

  result = qword_25739FA30;
  if (!qword_25739FA30)
  {
    result = MEMORY[0x24951C158](&unk_2449D2A30, &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA30);
  }
  return result;
}

unint64_t sub_244940620()
{
  unint64_t result;

  result = qword_25739FA38;
  if (!qword_25739FA38)
  {
    result = MEMORY[0x24951C158](&unk_2449D2AD0, &type metadata for CanvasControlDescription.ControlType.TimelineConfiguration.TimelineStop.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA38);
  }
  return result;
}

unint64_t sub_244940668()
{
  unint64_t result;

  result = qword_25739FA40;
  if (!qword_25739FA40)
  {
    result = MEMORY[0x24951C158](&unk_2449D2B70, &type metadata for CanvasControlDescription.ControlType.ToggleConfiguration.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA40);
  }
  return result;
}

unint64_t sub_2449406B0()
{
  unint64_t result;

  result = qword_25739FA48;
  if (!qword_25739FA48)
  {
    result = MEMORY[0x24951C158](&unk_2449D2C10, &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA48);
  }
  return result;
}

unint64_t sub_2449406F8()
{
  unint64_t result;

  result = qword_25739FA50;
  if (!qword_25739FA50)
  {
    result = MEMORY[0x24951C158](&unk_2449D2CB0, &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Item.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA50);
  }
  return result;
}

unint64_t sub_244940740()
{
  unint64_t result;

  result = qword_25739FA58;
  if (!qword_25739FA58)
  {
    result = MEMORY[0x24951C158](&unk_2449D2D50, &type metadata for CanvasControlDescription.ControlType.GridConfiguration.Section.Key);
    atomic_store(result, (unint64_t *)&qword_25739FA58);
  }
  return result;
}

_QWORD *sub_244940784(uint64_t a1)
{
  return sub_244940798(a1, &qword_25739FA70, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_244940AE0);
}

_QWORD *sub_244940798(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 17;
  v6[2] = v3;
  v6[3] = 2 * (v8 >> 4);
  v9 = a3(&v11, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  sub_244940E3C();
  if (v9 != v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v6;
}

_QWORD *sub_24494087C(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t *), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD v20[2];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  if (!a2)
  {
LABEL_11:
    v8 = 0;
    goto LABEL_15;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_15:
    *result = a4;
    result[1] = v8;
    result[2] = a5;
    result[3] = a6;
    return (_QWORD *)v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = a2;
      v18 = result;
      v11 = (__int128 *)(a4 + 40);
      v12 = 1;
      while (1)
      {
        v13 = *((_QWORD *)v11 + 2);
        v14 = *((_QWORD *)v11 + 3);
        v15 = *((_BYTE *)v11 + 32);
        v21 = *((_QWORD *)v11 - 1);
        v22 = *v11;
        v23 = v13;
        v24 = v14;
        v25 = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a5(v20, &v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v16 = v20[1];
        *v10 = v20[0];
        v10[1] = v16;
        if (v8 == v12)
          break;
        if (v9 == v12)
        {
          v8 = v9;
          break;
        }
        v11 += 3;
        v10 += 2;
        if (v12++ >= *(_QWORD *)(a4 + 16))
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      result = v18;
    }
    else
    {
      v8 = 0;
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2449409B8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t *), uint64_t a6)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  if (!a2)
  {
LABEL_10:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *result = a4;
    result[1] = a3;
    result[2] = a5;
    result[3] = a6;
    return (_QWORD *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = a2;
      v18 = a3;
      v19 = result;
      v11 = 0;
      v12 = (_QWORD *)(a4 + 56);
      v13 = a3 - 1;
      v17 = *(_QWORD *)(a4 + 16);
      v14 = v9 - 1;
      while (1)
      {
        v15 = *v12;
        v21 = *(v12 - 3);
        v22 = *((_OWORD *)v12 - 1);
        v23 = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a5(v20, &v21);
        swift_bridgeObjectRelease();
        result = (_QWORD *)swift_bridgeObjectRelease();
        v16 = v20[1];
        *v10 = v20[0];
        v10[1] = v16;
        if (v13 == v11)
        {
          a3 = v18;
          result = v19;
          goto LABEL_14;
        }
        if (v14 == v11)
          break;
        ++v11;
        v12 += 4;
        v10 += 2;
        if (v11 >= *(_QWORD *)(a4 + 16))
        {
          __break(1u);
          goto LABEL_10;
        }
      }
      a3 = v17;
      result = v19;
    }
    else
    {
      a3 = 0;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_244940AE0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_244940CDC()
{
  return 0x65756C6176;
}

unint64_t sub_244940CF0()
{
  unint64_t result;

  result = qword_25739FA60;
  if (!qword_25739FA60)
  {
    result = MEMORY[0x24951C158](&unk_2449D2918, &type metadata for CanvasControlDescription.ControlType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739FA60);
  }
  return result;
}

uint64_t sub_244940D34()
{
  return 0x736E6F6974636573;
}

uint64_t sub_244940D4C()
{
  return 0x656C746974;
}

uint64_t sub_244940D60()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_244940DA8()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_244940DEC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 24);
  *a2 = *(_QWORD *)(v2 + 16);
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

unint64_t sub_244940DF8()
{
  unint64_t result;

  result = qword_25739FA68;
  if (!qword_25739FA68)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CanvasControlEvent.Event, &type metadata for CanvasControlEvent.Event);
    atomic_store(result, (unint64_t *)&qword_25739FA68);
  }
  return result;
}

uint64_t sub_244940E3C()
{
  return swift_release();
}

uint64_t sub_244940E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_244940E8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ShellUpdatePayload.pid.getter()
{
  unsigned int *v0;

  return *v0;
}

void ShellUpdatePayload.hostUpdateSeed.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t ShellUpdatePayload.previewType.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  *a1 = v2;
  a1[1] = v3;
  return sub_244940F18(v2, v3);
}

uint64_t sub_244940F18(uint64_t a1, unint64_t a2)
{
  if (a2 != 4)
    return sub_244940F28(a1, a2);
  return a1;
}

uint64_t sub_244940F28(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t ShellUpdatePayload.contentIdentifier.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 48);
  *a1 = *(_QWORD *)(v1 + 40);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ShellUpdatePayload.contentCategory.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 64);
  *a1 = *(_QWORD *)(v1 + 56);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ShellUpdatePayload.contentOverride.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 80);
  *a1 = *(_QWORD *)(v1 + 72);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ShellUpdatePayload.contentPayload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShellUpdatePayload() + 40);
  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShellUpdatePayload()
{
  uint64_t result;

  result = qword_25739FBE0;
  if (!qword_25739FBE0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ShellUpdatePayload.staticProducts.getter()
{
  type metadata accessor for ShellUpdatePayload();
  return swift_bridgeObjectRetain();
}

uint64_t ShellUpdatePayload.setupPayload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1 + *(int *)(type metadata accessor for ShellUpdatePayload() + 48);
  v4 = *(_BYTE *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ShellUpdatePayload.controlStates.getter()
{
  type metadata accessor for ShellUpdatePayload();
  return swift_bridgeObjectRetain();
}

__n128 ShellUpdatePayload.init(pid:hostUpdateSeed:previewType:contentIdentifier:contentCategory:contentOverride:contentPayload:staticProducts:setupPayload:controlStates:)@<Q0>(int a1@<W0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 *a10, uint64_t a11)
{
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  unint64_t v23;
  int *updated;
  uint64_t v25;
  uint64_t v26;
  __n128 *v27;
  __n128 result;
  __n128 v29;

  v14 = *a2;
  v15 = *((_BYTE *)a2 + 8);
  v16 = *a4;
  v17 = a4[1];
  v18 = *a5;
  v19 = a5[1];
  v20 = a10->n128_u64[0];
  v21 = a10->n128_u8[8];
  v29 = a10[1];
  v22 = a10[2].n128_u64[0];
  v23 = a10[2].n128_u64[1];
  *(_DWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = v14;
  *(_BYTE *)(a9 + 16) = v15;
  *(_OWORD *)(a9 + 24) = *a3;
  *(_QWORD *)(a9 + 40) = v16;
  *(_QWORD *)(a9 + 48) = v17;
  *(_QWORD *)(a9 + 56) = v18;
  *(_QWORD *)(a9 + 64) = v19;
  *(_OWORD *)(a9 + 72) = *a6;
  updated = (int *)type metadata accessor for ShellUpdatePayload();
  v25 = a9 + updated[10];
  v26 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25, a7, v26);
  *(_QWORD *)(a9 + updated[11]) = a8;
  v27 = (__n128 *)(a9 + updated[12]);
  v27->n128_u64[0] = v20;
  v27->n128_u8[8] = v21;
  result = v29;
  v27[1] = v29;
  v27[2].n128_u64[0] = v22;
  v27[2].n128_u64[1] = v23;
  *(_QWORD *)(a9 + updated[13]) = a11;
  return result;
}

uint64_t sub_244941188(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449411C0 + 4 * byte_2449D3060[a1]))(0xD000000000000011, 0x80000002449E1E90);
}

uint64_t sub_2449411C0()
{
  return 6580592;
}

uint64_t sub_2449411D0()
{
  return 0x6164705574736F68;
}

uint64_t sub_2449411F4()
{
  return 0x5477656976657270;
}

uint64_t sub_244941214()
{
  return 0x43746E65746E6F63;
}

uint64_t sub_244941238()
{
  return 0x4F746E65746E6F63;
}

uint64_t sub_24494125C()
{
  return 0x50746E65746E6F63;
}

uint64_t sub_244941280()
{
  return 0x7250636974617473;
}

uint64_t sub_2449412A4()
{
  return 0x7961507075746573;
}

uint64_t sub_2449412C4()
{
  return 0x536C6F72746E6F63;
}

uint64_t sub_2449412E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_244941188(*a1);
  v5 = v4;
  if (v3 == sub_244941188(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_244941370()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_2449CFD48();
  sub_244941188(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_2449413D0()
{
  unsigned __int8 *v0;

  sub_244941188(*v0);
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244941410()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_2449CFD48();
  sub_244941188(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24494146C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244945418();
  *a1 = result;
  return result;
}

uint64_t sub_244941498@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244941188(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449414C0()
{
  unsigned __int8 *v0;

  return sub_244941188(*v0);
}

uint64_t ShellUpdatePayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449414F4(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  int *updated;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[12];
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  char v72;
  int v73;
  char v74;
  char v75;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v2);
  v46 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FC78);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x24BDAC7A8](v5);
  v44 = &v27[-v9];
  v10 = *a1;
  v29 = *((_QWORD *)a1 + 1);
  v28 = *((unsigned __int8 *)a1 + 16);
  v31 = *((_QWORD *)a1 + 3);
  v30 = *((_QWORD *)a1 + 4);
  v33 = *((_QWORD *)a1 + 5);
  v32 = *((_QWORD *)a1 + 6);
  v35 = *((_QWORD *)a1 + 7);
  v34 = *((_QWORD *)a1 + 8);
  v11 = *((_QWORD *)a1 + 10);
  v40 = *((_QWORD *)a1 + 9);
  v12 = &v27[*(int *)(v8 + 48) - v9];
  v27[-v9] = 6;
  updated = (int *)type metadata accessor for ShellUpdatePayload();
  v14 = (uint64_t)a1 + updated[10];
  v45 = sub_2449CF400();
  v15 = *(_QWORD *)(v45 - 8);
  v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
  v16(v12, v14, v45);
  v17 = updated[12];
  v36 = *(_QWORD *)((char *)a1 + updated[11]);
  v43 = *(_QWORD *)((char *)a1 + v17);
  v42 = *((unsigned __int8 *)a1 + v17 + 8);
  v39 = *(_OWORD *)((char *)a1 + v17 + 16);
  v18 = *(_QWORD *)((char *)a1 + v17 + 40);
  v38 = *(_QWORD *)((char *)a1 + v17 + 32);
  v37 = v18;
  v41 = *(_QWORD *)((char *)a1 + updated[13]);
  v75 = 0;
  v73 = v10;
  v74 = 0;
  v72 = 1;
  v70 = v29;
  v71 = v28;
  v69 = 2;
  v19 = v31;
  v20 = v30;
  v67 = v31;
  v68 = v30;
  v66 = 3;
  v64 = v33;
  v65 = v32;
  v63 = 4;
  v61 = v35;
  v62 = v34;
  v60 = 5;
  v58 = v40;
  v59 = v11;
  v21 = &v7[*(int *)(v4 + 48)];
  *v7 = 6;
  v22 = v45;
  v16(v21, (uint64_t)v12, v45);
  v23 = v46;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v46, v21, v22);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v23, 0, 1, v22);
  v57 = 6;
  v56 = 7;
  v55 = v36;
  v54 = 8;
  v49 = v43;
  v50 = v42;
  v51 = v39;
  v52 = v38;
  v53 = v37;
  v48 = 9;
  v47 = v41;
  sub_244940F18(v19, v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAD8);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAF0);
  sub_244942360();
  sub_2449423E8();
  sub_24494242C();
  sub_244942470();
  sub_2449424D8();
  sub_24494251C();
  sub_244931570(&qword_25739FAE0, &qword_25739FAD8, (uint64_t (*)(void))sub_244942560);
  sub_2449423A4();
  sub_244931570((unint64_t *)&qword_25739FAF8, &qword_25739FAF0, (uint64_t (*)(void))sub_2449425A4);
  v24 = (uint64_t)v46;
  v25 = sub_2449CF5B0();
  sub_244940E8C(v24, &qword_25739F710);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2449454D0(v67, v68);
  sub_244940E8C((uint64_t)v44, &qword_25739FC78);
  return v25;
}

uint64_t sub_244941A94()
{
  uint64_t v0;

  return sub_2449414F4(*(int **)(v0 + 16));
}

uint64_t ShellUpdatePayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  ValueMetadata *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *updated;
  char *v35;
  ValueMetadata *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  ValueMetadata *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 v67;
  _QWORD v68[5];
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  ValueMetadata *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68[3] = &type metadata for ShellUpdatePayload.Key;
  v9 = sub_244942360();
  v68[4] = v9;
  LOBYTE(v68[0]) = 8;
  sub_2449423A4();
  sub_2449CF37C();
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  }
  else
  {
    v57 = v6;
    v58 = v5;
    v56 = v8;
    v55 = a2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    v10 = v69;
    v11 = v70;
    v13 = v71;
    v12 = v72;
    v14 = v73;
    v15 = v74;
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 0;
    sub_2449CF37C();
    v51 = v12;
    v75 = v11;
    v54 = v15;
    v52 = v13;
    v53 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    LODWORD(v12) = v76;
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 1;
    sub_2449423E8();
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    v16 = v66;
    v17 = v67;
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 2;
    sub_24494242C();
    sub_2449CF37C();
    v18 = v10;
    v20 = v58;
    v49 = v17;
    v50 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    v22 = v68[0];
    v21 = v68[1];
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 3;
    sub_244942470();
    sub_2449CF37C();
    v48 = v22;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    v23 = v64;
    v47 = v65;
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 4;
    sub_2449424D8();
    sub_2449CF37C();
    v45 = v23;
    v46 = (int)v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    v25 = v62;
    v24 = v63;
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 5;
    sub_24494251C();
    sub_2449CF3B8();
    v41 = v25;
    v43 = v21;
    v44 = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    v40 = v60;
    v42 = v61;
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 6;
    v26 = v56;
    sub_2449CF37C();
    v27 = v48;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAD8);
    sub_244931570(&qword_25739FAE0, &qword_25739FAD8, (uint64_t (*)(void))sub_244942560);
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    if (v59)
      v39 = v59;
    else
      v39 = swift_bridgeObjectRetain();
    v72 = &type metadata for ShellUpdatePayload.Key;
    v73 = v9;
    LOBYTE(v69) = 9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAF0);
    sub_244931570((unint64_t *)&qword_25739FAF8, &qword_25739FAF0, (uint64_t (*)(void))sub_2449425A4);
    sub_2449CF3B8();
    v28 = v57;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(a1, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    v38 = v59;
    v29 = v55;
    *v55 = v46;
    *((_QWORD *)v29 + 1) = v50;
    *((_BYTE *)v29 + 16) = v49;
    v30 = v43;
    *((_QWORD *)v29 + 3) = v27;
    *((_QWORD *)v29 + 4) = v30;
    v31 = v47;
    *((_QWORD *)v29 + 5) = v45;
    *((_QWORD *)v29 + 6) = v31;
    v32 = v44;
    *((_QWORD *)v29 + 7) = v41;
    *((_QWORD *)v29 + 8) = v32;
    v33 = v42;
    *((_QWORD *)v29 + 9) = v40;
    *((_QWORD *)v29 + 10) = v33;
    updated = (int *)type metadata accessor for ShellUpdatePayload();
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v28 + 32))((char *)v29 + updated[10], v26, v20);
    *(_QWORD *)((char *)v29 + updated[11]) = v39;
    v35 = (char *)v29 + updated[12];
    *(_QWORD *)v35 = v18;
    v35[8] = v75;
    v36 = v51;
    *((_QWORD *)v35 + 2) = v52;
    *((_QWORD *)v35 + 3) = v36;
    v37 = v54;
    *((_QWORD *)v35 + 4) = v53;
    *((_QWORD *)v35 + 5) = v37;
    *(_QWORD *)((char *)v29 + updated[13]) = v38;
  }
  return result;
}

unint64_t sub_244942360()
{
  unint64_t result;

  result = qword_25739FAA0;
  if (!qword_25739FAA0)
  {
    result = MEMORY[0x24951C158](&unk_2449D38B0, &type metadata for ShellUpdatePayload.Key);
    atomic_store(result, (unint64_t *)&qword_25739FAA0);
  }
  return result;
}

unint64_t sub_2449423A4()
{
  unint64_t result;

  result = qword_25739FAA8;
  if (!qword_25739FAA8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for UpdateSetupPayload, &type metadata for UpdateSetupPayload);
    atomic_store(result, (unint64_t *)&qword_25739FAA8);
  }
  return result;
}

unint64_t sub_2449423E8()
{
  unint64_t result;

  result = qword_25739FAB0;
  if (!qword_25739FAB0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for HostUpdateSeed, &type metadata for HostUpdateSeed);
    atomic_store(result, (unint64_t *)&qword_25739FAB0);
  }
  return result;
}

unint64_t sub_24494242C()
{
  unint64_t result;

  result = qword_25739FAB8;
  if (!qword_25739FAB8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewType, &type metadata for PreviewType);
    atomic_store(result, (unint64_t *)&qword_25739FAB8);
  }
  return result;
}

unint64_t sub_244942470()
{
  unint64_t result;

  result = qword_25739FAC0;
  if (!qword_25739FAC0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentIdentifier, &type metadata for ContentIdentifier);
    atomic_store(result, (unint64_t *)&qword_25739FAC0);
  }
  return result;
}

uint64_t sub_2449424B4(uint64_t a1, unint64_t a2)
{
  if (a2 != 4)
    return sub_2449424C4(a1, a2);
  return a1;
}

uint64_t sub_2449424C4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_2449424D8()
{
  unint64_t result;

  result = qword_25739FAC8;
  if (!qword_25739FAC8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentCategory, &type metadata for ContentCategory);
    atomic_store(result, (unint64_t *)&qword_25739FAC8);
  }
  return result;
}

unint64_t sub_24494251C()
{
  unint64_t result;

  result = qword_25739FAD0;
  if (!qword_25739FAD0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentOverride, &type metadata for ContentOverride);
    atomic_store(result, (unint64_t *)&qword_25739FAD0);
  }
  return result;
}

unint64_t sub_244942560()
{
  unint64_t result;

  result = qword_25739FAE8;
  if (!qword_25739FAE8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for StaticLinkablePreviewProduct, &type metadata for StaticLinkablePreviewProduct);
    atomic_store(result, (unint64_t *)&qword_25739FAE8);
  }
  return result;
}

unint64_t sub_2449425A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25739F6D8;
  if (!qword_25739F6D8)
  {
    v1 = type metadata accessor for PlistValueBox(255);
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PlistValueBox, v1);
    atomic_store(result, (unint64_t *)&qword_25739F6D8);
  }
  return result;
}

uint64_t sub_2449425EC()
{
  return sub_2449CF3D0();
}

uint64_t sub_244942618@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return ShellUpdatePayload.init(propertyListValue:)(a1, a2);
}

uint64_t UpdateSetupPayload.dynamicProducts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UpdateSetupPayload.shellDidLoadStaticProducts.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t UpdateSetupPayload.shellDidLoadStaticProducts.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*UpdateSetupPayload.shellDidLoadStaticProducts.modify())()
{
  return nullsub_1;
}

uint64_t UpdateSetupPayload.updates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UpdateSetupPayload.loggingOutputPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UpdateSetupPayload.staticProducts.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall UpdateSetupPayload.init(dynamicProducts:staticProducts:shellDidLoadStaticProducts:updates:loggingOutputPath:)(PreviewsMessagingOS::UpdateSetupPayload *__return_ptr retstr, Swift::OpaquePointer dynamicProducts, Swift::OpaquePointer staticProducts, Swift::Bool shellDidLoadStaticProducts, Swift::OpaquePointer updates, Swift::String_optional loggingOutputPath)
{
  retstr->dynamicProducts = dynamicProducts;
  retstr->shellDidLoadStaticProducts = shellDidLoadStaticProducts;
  retstr->updates = updates;
  retstr->loggingOutputPath = loggingOutputPath;
  retstr->staticProducts = staticProducts;
}

uint64_t static HostUpdateSeed.next.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  if (qword_25739ED98 != -1)
    swift_once();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB00);
  sub_244942818();
  sub_2449CF6AC();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t *sub_244942790@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *result + 1;
  *result = v2;
  *a2 = v2;
  return result;
}

uint64_t HostUpdateSeed.description.getter()
{
  return sub_2449CFC88();
}

uint64_t sub_2449427E4()
{
  uint64_t result;

  result = sub_2449CF73C();
  qword_25739FA98 = result;
  return result;
}

unint64_t sub_244942818()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25739FB08;
  if (!qword_25739FB08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25739FB00);
    result = MEMORY[0x24951C158](MEMORY[0x24BE76C78], v1);
    atomic_store(result, (unint64_t *)&qword_25739FB08);
  }
  return result;
}

uint64_t HostUpdateSeed.hash(into:)()
{
  return sub_2449CFD78();
}

BOOL static HostUpdateSeed.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t HostUpdateSeed.hashValue.getter()
{
  sub_2449CFD48();
  sub_2449CFD78();
  return sub_2449CFD84();
}

uint64_t sub_2449428E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_244942920 + 4 * byte_2449D306A[a1]))(0xD00000000000001ALL, 0x80000002449E1F10);
}

uint64_t sub_244942920()
{
  return 0x73746375646F7270;
}

uint64_t sub_244942938()
{
  return 0x7250636974617473;
}

uint64_t sub_24494295C()
{
  return 0x73657461647075;
}

unint64_t sub_244942974()
{
  return 0xD000000000000011;
}

uint64_t sub_244942990()
{
  sub_2449CFD48();
  sub_2449CFD78();
  return sub_2449CFD84();
}

uint64_t sub_2449429D4()
{
  return sub_2449CFD78();
}

uint64_t sub_2449429FC()
{
  sub_2449CFD48();
  sub_2449CFD78();
  return sub_2449CFD84();
}

uint64_t sub_244942A3C()
{
  return sub_2449CFC88();
}

BOOL sub_244942A7C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_244942A90(char *a1)
{
  sub_2449A00A8(*a1);
}

void sub_244942A9C()
{
  char *v0;

  sub_2449C5940(*v0);
}

void sub_244942AA4(uint64_t a1)
{
  char *v1;

  sub_244923B24(a1, *v1);
}

void sub_244942AAC(uint64_t a1)
{
  char *v1;

  sub_2449CAA5C(a1, *v1);
}

uint64_t sub_244942AB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244945460();
  *a1 = result;
  return result;
}

uint64_t sub_244942AE8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449428E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244942B10()
{
  unsigned __int8 *v0;

  return sub_2449428E4(*v0);
}

uint64_t UpdateSetupPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_244942B58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _BYTE v6[24];
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  _BYTE v15[16];

  v1 = *a1;
  v2 = a1[5];
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  sub_244940E44((uint64_t)(a1 + 3), (uint64_t)v15);
  v14 = 0;
  v13 = v1;
  v12 = 1;
  v11 = v2;
  v10 = 2;
  v9 = v3;
  v8 = 3;
  v7 = v4;
  v6[23] = 4;
  sub_244940E44((uint64_t)v15, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAD8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB30);
  sub_244943024();
  sub_244931570(&qword_25739FB20, &qword_25739FB18, (uint64_t (*)(void))sub_244943068);
  sub_244931570(&qword_25739FAE0, &qword_25739FAD8, (uint64_t (*)(void))sub_244942560);
  sub_244931570(&qword_25739FB38, &qword_25739FB30, (uint64_t (*)(void))sub_2449430AC);
  return sub_2449CF5E0();
}

uint64_t sub_244942D08()
{
  uint64_t v0;

  return sub_244942B58(*(uint64_t **)(v0 + 16));
}

uint64_t UpdateSetupPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  ValueMetadata *v16;
  unint64_t v17;
  uint64_t v18;

  v16 = &type metadata for UpdateSetupPayload.Key;
  v5 = sub_244943024();
  v17 = v5;
  v15[0] = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAD8);
  sub_244931570(&qword_25739FAE0, &qword_25739FAD8, (uint64_t (*)(void))sub_244942560);
  sub_2449CF3B8();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    if ((_QWORD)v13)
      v7 = v13;
    else
      v7 = MEMORY[0x24BEE4AF8];
    v16 = &type metadata for UpdateSetupPayload.Key;
    v17 = v5;
    v15[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB18);
    sub_244931570(&qword_25739FB20, &qword_25739FB18, (uint64_t (*)(void))sub_244943068);
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    v8 = v18;
    v16 = &type metadata for UpdateSetupPayload.Key;
    v17 = v5;
    v15[0] = 2;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    if (v13 == 2)
      v9 = *(_QWORD *)(v7 + 16) != 0;
    else
      v9 = v13 & 1;
    v12 = v9;
    v16 = &type metadata for UpdateSetupPayload.Key;
    v17 = v5;
    v15[0] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB30);
    sub_244931570(&qword_25739FB38, &qword_25739FB30, (uint64_t (*)(void))sub_2449430AC);
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    v16 = &type metadata for UpdateSetupPayload.Key;
    v17 = v5;
    v15[0] = 4;
    sub_2449CF3B8();
    v11 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v14;
    *(_OWORD *)(a2 + 24) = v13;
    *(_QWORD *)(a2 + 40) = v7;
  }
  return result;
}

unint64_t sub_244943024()
{
  unint64_t result;

  result = qword_25739FB10;
  if (!qword_25739FB10)
  {
    result = MEMORY[0x24951C158](&unk_2449D3888, &type metadata for UpdateSetupPayload.Key);
    atomic_store(result, (unint64_t *)&qword_25739FB10);
  }
  return result;
}

unint64_t sub_244943068()
{
  unint64_t result;

  result = qword_25739FB28;
  if (!qword_25739FB28)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DynamicLoadablePreviewProduct, &type metadata for DynamicLoadablePreviewProduct);
    atomic_store(result, (unint64_t *)&qword_25739FB28);
  }
  return result;
}

unint64_t sub_2449430AC()
{
  unint64_t result;

  result = qword_25739FB40;
  if (!qword_25739FB40)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewIncrementalUpdate, &type metadata for PreviewIncrementalUpdate);
    atomic_store(result, (unint64_t *)&qword_25739FB40);
  }
  return result;
}

uint64_t sub_2449430F0(char a1)
{
  return *(_QWORD *)&aMainscensimdis_0[8 * a1];
}

uint64_t sub_244943110()
{
  return sub_2449CF3D0();
}

uint64_t sub_244943150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return UpdateSetupPayload.init(propertyListValue:)(a1, a2);
}

uint64_t sub_244943164(char *a1, char *a2)
{
  return sub_2449A32F8(*a1, *a2);
}

uint64_t sub_244943170()
{
  return sub_2449C5A30();
}

uint64_t sub_244943178()
{
  return sub_2449254A0();
}

uint64_t sub_244943180()
{
  return sub_2449C8D24();
}

uint64_t sub_244943188@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244945460();
  *a1 = result;
  return result;
}

uint64_t sub_2449431BC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449430F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449431E4()
{
  sub_244945390();
  return sub_2449CF670();
}

uint64_t sub_24494322C()
{
  sub_244945390();
  return sub_2449CF67C();
}

uint64_t sub_244943290(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656449656E656373;
  else
    return 0x696D697263736964;
}

uint64_t sub_2449432DC(char *a1, char *a2)
{
  return sub_2449A3244(*a1, *a2);
}

uint64_t sub_2449432E8()
{
  return sub_2449C5A98();
}

uint64_t sub_2449432F0()
{
  return sub_244925434();
}

uint64_t sub_2449432F8()
{
  return sub_2449C8D88();
}

uint64_t sub_244943300@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24494330C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244943290(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244943334()
{
  char *v0;

  return sub_244943290(*v0);
}

uint64_t PreviewType.HostLocation.propertyListValue.getter()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char v5[24];
  ValueMetadata *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *v0;
  v1 = v0[1];
  v3 = sub_2449433F8();
  sub_24494343C();
  result = sub_2449CF3E8();
  if (v1 >= 4)
  {
    v8 = v2;
    v9 = v1;
    v6 = &type metadata for PreviewType.HostLocation.Key;
    v7 = v3;
    v5[0] = 1;
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

unint64_t sub_2449433F8()
{
  unint64_t result;

  result = qword_25739FB48;
  if (!qword_25739FB48)
  {
    result = MEMORY[0x24951C158](&unk_2449D3860, &type metadata for PreviewType.HostLocation.Key);
    atomic_store(result, (unint64_t *)&qword_25739FB48);
  }
  return result;
}

unint64_t sub_24494343C()
{
  unint64_t result;

  result = qword_25739FB50;
  if (!qword_25739FB50)
  {
    result = MEMORY[0x24951C158](&unk_2449D3820, &type metadata for PreviewType.HostLocation.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739FB50);
  }
  return result;
}

uint64_t PreviewType.HostLocation.init(propertyListValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v7 = &type metadata for PreviewType.HostLocation.Key;
  v8 = sub_2449433F8();
  v6[0] = 0;
  sub_24494343C();
  sub_2449CF37C();
  if (!v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    __asm { BR              X10 }
  }
  v3 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t sub_244943650(char a1)
{
  if ((a1 & 1) != 0)
    return 0x646574736F68;
  else
    return 0x636974617473;
}

uint64_t sub_244943678()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char v5[24];
  ValueMetadata *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *v0;
  v1 = v0[1];
  v3 = sub_2449433F8();
  sub_24494343C();
  result = sub_2449CF3E8();
  if (v1 >= 4)
  {
    v8 = v2;
    v9 = v1;
    v6 = &type metadata for PreviewType.HostLocation.Key;
    v7 = v3;
    v5[0] = 1;
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

uint64_t sub_244943730(uint64_t a1)
{
  return PreviewType.HostLocation.init(propertyListValue:)(a1);
}

uint64_t sub_244943744(char *a1, char *a2)
{
  return sub_2449A337C(*a1, *a2);
}

uint64_t sub_244943750()
{
  return sub_2449C5B2C();
}

uint64_t sub_244943758()
{
  return sub_2449254E0();
}

uint64_t sub_244943760()
{
  return sub_2449C8CBC();
}

uint64_t sub_244943768@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244943774@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244943650(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24494379C()
{
  sub_2449453D4();
  return sub_2449CF670();
}

uint64_t sub_2449437E4()
{
  sub_2449453D4();
  return sub_2449CF67C();
}

uint64_t sub_244943848(char a1)
{
  if ((a1 & 1) != 0)
    return 0x61636F4C74736F68;
  else
    return 0x696D697263736964;
}

uint64_t sub_244943890(char *a1, char *a2)
{
  return sub_2449A3194(*a1, *a2);
}

uint64_t sub_24494389C()
{
  return sub_2449C5B98();
}

uint64_t sub_2449438A4()
{
  return sub_2449253CC();
}

uint64_t sub_2449438AC()
{
  return sub_2449C8E18();
}

uint64_t sub_2449438B4@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_2449438C0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244943848(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449438E8()
{
  char *v0;

  return sub_244943848(*v0);
}

uint64_t PreviewType.propertyListValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char v5[24];
  ValueMetadata *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v0;
  v1 = v0[1];
  v3 = sub_2449439C0();
  sub_244943A04();
  result = sub_2449CF3E8();
  if (v1 != 4)
  {
    v8 = v2;
    v9 = v1;
    v6 = &type metadata for PreviewType.Key;
    v7 = v3;
    v5[0] = 1;
    sub_244943A48();
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

_BYTE *sub_2449439A8(_BYTE *result, BOOL *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 24);
  *result = 0;
  *a2 = v3 != 4;
  return result;
}

unint64_t sub_2449439C0()
{
  unint64_t result;

  result = qword_25739FB58;
  if (!qword_25739FB58)
  {
    result = MEMORY[0x24951C158](&unk_2449D37F8, &type metadata for PreviewType.Key);
    atomic_store(result, (unint64_t *)&qword_25739FB58);
  }
  return result;
}

unint64_t sub_244943A04()
{
  unint64_t result;

  result = qword_25739FB60;
  if (!qword_25739FB60)
  {
    result = MEMORY[0x24951C158](&unk_2449D37B8, &type metadata for PreviewType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739FB60);
  }
  return result;
}

unint64_t sub_244943A48()
{
  unint64_t result;

  result = qword_25739FB68;
  if (!qword_25739FB68)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewType.HostLocation, &type metadata for PreviewType.HostLocation);
    atomic_store(result, (unint64_t *)&qword_25739FB68);
  }
  return result;
}

uint64_t PreviewType.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;

  v13 = &type metadata for PreviewType.Key;
  v5 = sub_2449439C0();
  v14 = v5;
  v12[0] = 0;
  sub_244943A04();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if ((v11 & 1) != 0)
    {
      v13 = &type metadata for PreviewType.Key;
      v14 = v5;
      v12[0] = 1;
      sub_244943A48();
      sub_2449CF37C();
      v8 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v9 = v11;
    }
    else
    {
      v10 = sub_2449CF400();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
      v9 = xmmword_2449D3930;
    }
    *a2 = v9;
  }
  return result;
}

uint64_t sub_244943BD0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char v5[24];
  ValueMetadata *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v0;
  v1 = v0[1];
  v3 = sub_2449439C0();
  sub_244943A04();
  result = sub_2449CF3E8();
  if (v1 != 4)
  {
    v8 = v2;
    v9 = v1;
    v6 = &type metadata for PreviewType.Key;
    v7 = v3;
    v5[0] = 1;
    sub_244943A48();
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return result;
}

uint64_t sub_244943C88@<X0>(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  return PreviewType.init(propertyListValue:)(a1, a2);
}

uint64_t HostUpdateSeed.propertyListValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t HostUpdateSeed.init(propertyListValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

unint64_t sub_244943CB0()
{
  unint64_t result;

  result = qword_25739FB70;
  if (!qword_25739FB70)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for HostUpdateSeed, &type metadata for HostUpdateSeed);
    atomic_store(result, (unint64_t *)&qword_25739FB70);
  }
  return result;
}

uint64_t sub_244943CF4()
{
  return MEMORY[0x24BE76E58];
}

_QWORD *initializeBufferWithCopyOfBuffer for ShellUpdatePayload(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = a2 + 3;
    v8 = a2[4];
    if (v8 > 4)
    {
      v4[3] = *v7;
      v4[4] = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v4 + 3) = *(_OWORD *)v7;
    }
    v9 = a2[6];
    v4[5] = a2[5];
    v4[6] = v9;
    v10 = a2[8];
    v4[7] = a2[7];
    v4[8] = v10;
    v11 = a2[10];
    v12 = a3[10];
    v13 = (char *)v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v4[9] = a2[9];
    v4[10] = v11;
    v15 = sub_2449CF400();
    v16 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    v17 = a3[12];
    *(_QWORD *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = *(_BYTE *)(v19 + 8);
    v20 = *(_QWORD *)(v19 + 24);
    *((_QWORD *)v18 + 2) = *(_QWORD *)(v19 + 16);
    *((_QWORD *)v18 + 3) = v20;
    v21 = *(_QWORD *)(v19 + 40);
    *((_QWORD *)v18 + 4) = *(_QWORD *)(v19 + 32);
    *((_QWORD *)v18 + 5) = v21;
    *(_QWORD *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ShellUpdatePayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 32) >= 5uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShellUpdatePayload(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (_OWORD *)(a1 + 24);
  v7 = (_OWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 <= 4)
  {
    *v6 = *v7;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v7;
    *(_QWORD *)(a1 + 32) = v8;
    swift_bridgeObjectRetain();
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *(_QWORD *)(a2 + 80);
  v12 = a3[10];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  v15 = sub_2449CF400();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  v17 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = *(_QWORD *)(v19 + 24);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v18 + 24) = v20;
  v21 = *(_QWORD *)(v19 + 40);
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
  *(_QWORD *)(v18 + 40) = v21;
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShellUpdatePayload(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (_OWORD *)(a1 + 24);
  v8 = (_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  if (v9 == 4)
  {
    if (v10 > 4)
      goto LABEL_8;
LABEL_12:
    *v7 = *v8;
    goto LABEL_13;
  }
  if (v10 == 4)
  {
    v11 = (uint64_t *)&unk_25739FB80;
LABEL_11:
    sub_244940E8C(a1 + 24, v11);
    goto LABEL_12;
  }
  if (v9 >= 4)
  {
    if (v10 >= 4)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v11 = (uint64_t *)&unk_25739FB78;
    goto LABEL_11;
  }
  if (v10 < 4)
    goto LABEL_12;
LABEL_8:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
LABEL_13:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[10];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[12];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ShellUpdatePayload(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = a3[10];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v11 = (_OWORD *)(a1 + v10);
  v12 = (_OWORD *)(a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v11[2] = v12[2];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for ShellUpdatePayload(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (_OWORD *)(a1 + 24);
  v7 = (_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  if (v8 == 4)
    goto LABEL_8;
  v9 = *(_QWORD *)(a2 + 32);
  if (v9 == 4)
  {
    v10 = (uint64_t *)&unk_25739FB80;
LABEL_7:
    sub_244940E8C((uint64_t)v6, v10);
    goto LABEL_8;
  }
  if (v8 >= 4)
  {
    if (v9 >= 4)
    {
      *(_QWORD *)(a1 + 24) = *v7;
      *(_QWORD *)(a1 + 32) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    v10 = (uint64_t *)&unk_25739FB78;
    goto LABEL_7;
  }
LABEL_8:
  *v6 = *(_OWORD *)v7;
LABEL_9:
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRelease();
  v14 = a3[10];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v20 + 32);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 32) = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v20 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShellUpdatePayload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24494452C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2449CF400();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ShellUpdatePayload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2449445B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 48) = (a2 - 1);
  }
  else
  {
    v7 = sub_2449CF400();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t sub_244944628()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for UpdateSetupPayload()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UpdateSetupPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UpdateSetupPayload(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UpdateSetupPayload(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateSetupPayload(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateSetupPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateSetupPayload()
{
  return &type metadata for UpdateSetupPayload;
}

unint64_t destroy for PreviewType(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 4 < 0 && result >= 4)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *_s19PreviewsMessagingOS11PreviewTypeOwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = a2[1];
  if ((int)v4 - 4 < 0 && v3 >= 4)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for PreviewType(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;

  v4 = a1[1];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = a1[1];
  v7 = v6 - 4;
  v8 = a2[1];
  if (v8 < 0xFFFFFFFF)
    v5 = a2[1];
  v9 = v5 - 4;
  if (v7 < 0)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if (v4 >= 4)
        swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    if (v4 >= 4)
    {
      if (v8 >= 4)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_244940E8C((uint64_t)a1, &qword_25739FB78);
      goto LABEL_17;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
LABEL_17:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v8 < 4)
    goto LABEL_17;
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithTake for PreviewType(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 4 < 0)
  {
    v7 = a2[1];
    LODWORD(v8) = -1;
    if (v7 < 0xFFFFFFFF)
      v8 = a2[1];
    if ((int)v8 - 4 < 0)
    {
      if (v4 >= 4)
      {
        if (v7 >= 4)
        {
          *a1 = *a2;
          a1[1] = v7;
          swift_bridgeObjectRelease();
          return a1;
        }
        sub_244940E8C((uint64_t)a1, &qword_25739FB78);
      }
    }
    else if (v4 >= 4)
    {
      swift_bridgeObjectRelease();
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 4;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PreviewType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 4;
  }
  return result;
}

uint64_t sub_244944BDC(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 4;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_244944C00(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFB)
  {
    *result = a2 - 2147483644;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PreviewType()
{
  return &type metadata for PreviewType;
}

unint64_t destroy for PreviewType.HostLocation(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s19PreviewsMessagingOS11PreviewTypeO12HostLocationOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for PreviewType.HostLocation(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PreviewType.HostLocation(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewType.HostLocation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PreviewType.HostLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_244944E58(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_244944E70(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PreviewType.HostLocation()
{
  return &type metadata for PreviewType.HostLocation;
}

ValueMetadata *type metadata accessor for HostUpdateSeed()
{
  return &type metadata for HostUpdateSeed;
}

ValueMetadata *type metadata accessor for PreviewType.Discriminant()
{
  return &type metadata for PreviewType.Discriminant;
}

ValueMetadata *type metadata accessor for PreviewType.Key()
{
  return &type metadata for PreviewType.Key;
}

ValueMetadata *type metadata accessor for PreviewType.HostLocation.Discriminant()
{
  return &type metadata for PreviewType.HostLocation.Discriminant;
}

uint64_t _s19PreviewsMessagingOS11PreviewTypeO12DiscriminantOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244944F38 + 4 * byte_2449D3079[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244944F6C + 4 * byte_2449D3074[v4]))();
}

uint64_t sub_244944F6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244944F74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244944F7CLL);
  return result;
}

uint64_t sub_244944F88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244944F90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244944F94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244944F9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreviewType.HostLocation.Key()
{
  return &type metadata for PreviewType.HostLocation.Key;
}

uint64_t _s19PreviewsMessagingOS11PreviewTypeO12HostLocationO12DiscriminantOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_244945004 + 4 * byte_2449D3083[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_244945038 + 4 * byte_2449D307E[v4]))();
}

uint64_t sub_244945038(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244945040(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244945048);
  return result;
}

uint64_t sub_244945054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24494505CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_244945060(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244945068(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UpdateSetupPayload.Key()
{
  return &type metadata for UpdateSetupPayload.Key;
}

uint64_t getEnumTagSinglePayload for ShellUpdatePayload.Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ShellUpdatePayload.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_244945160 + 4 * byte_2449D308D[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_244945194 + 4 * byte_2449D3088[v4]))();
}

uint64_t sub_244945194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24494519C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2449451A4);
  return result;
}

uint64_t sub_2449451B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2449451B8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_2449451BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449451C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShellUpdatePayload.Key()
{
  return &type metadata for ShellUpdatePayload.Key;
}

unint64_t sub_2449451E4()
{
  unint64_t result;

  result = qword_25739FC38;
  if (!qword_25739FC38)
  {
    result = MEMORY[0x24951C158](&unk_2449D3470, &type metadata for ShellUpdatePayload.Key);
    atomic_store(result, (unint64_t *)&qword_25739FC38);
  }
  return result;
}

unint64_t sub_24494522C()
{
  unint64_t result;

  result = qword_25739FC40;
  if (!qword_25739FC40)
  {
    result = MEMORY[0x24951C158](&unk_2449D3510, &type metadata for UpdateSetupPayload.Key);
    atomic_store(result, (unint64_t *)&qword_25739FC40);
  }
  return result;
}

unint64_t sub_244945274()
{
  unint64_t result;

  result = qword_25739FC48;
  if (!qword_25739FC48)
  {
    result = MEMORY[0x24951C158](&unk_2449D35B0, &type metadata for PreviewType.HostLocation.Key);
    atomic_store(result, (unint64_t *)&qword_25739FC48);
  }
  return result;
}

unint64_t sub_2449452BC()
{
  unint64_t result;

  result = qword_25739FC50;
  if (!qword_25739FC50)
  {
    result = MEMORY[0x24951C158](&unk_2449D3650, &type metadata for PreviewType.HostLocation.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739FC50);
  }
  return result;
}

unint64_t sub_244945304()
{
  unint64_t result;

  result = qword_25739FC58;
  if (!qword_25739FC58)
  {
    result = MEMORY[0x24951C158](&unk_2449D36F0, &type metadata for PreviewType.Key);
    atomic_store(result, (unint64_t *)&qword_25739FC58);
  }
  return result;
}

unint64_t sub_24494534C()
{
  unint64_t result;

  result = qword_25739FC60;
  if (!qword_25739FC60)
  {
    result = MEMORY[0x24951C158](&unk_2449D3790, &type metadata for PreviewType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739FC60);
  }
  return result;
}

unint64_t sub_244945390()
{
  unint64_t result;

  result = qword_25739FC68;
  if (!qword_25739FC68)
  {
    result = MEMORY[0x24951C158](&unk_2449D35D8, &type metadata for PreviewType.HostLocation.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739FC68);
  }
  return result;
}

unint64_t sub_2449453D4()
{
  unint64_t result;

  result = qword_25739FC70;
  if (!qword_25739FC70)
  {
    result = MEMORY[0x24951C158](&unk_2449D3718, &type metadata for PreviewType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_25739FC70);
  }
  return result;
}

uint64_t sub_244945418()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 0xA)
    return 10;
  else
    return v0;
}

uint64_t sub_244945460()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

_BYTE *sub_2449454A4(_BYTE *result, char *a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;

  v3 = *(_QWORD *)(v2 + 24);
  *result = 0;
  if (v3 >= 4)
    v4 = 2;
  else
    v4 = 0x4030100u >> (8 * v3);
  *a2 = v4;
  return result;
}

uint64_t sub_2449454D0(uint64_t a1, unint64_t a2)
{
  if (a2 != 5)
    return sub_2449424B4(a1, a2);
  return a1;
}

uint64_t sub_2449454EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  result = type metadata accessor for PipeEvent.Content(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_24494559C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD *, _QWORD *, uint64_t);
  _BYTE *v42;
  _BYTE *v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  size_t v49;
  size_t __n;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t AssociatedTypeWitness;
  uint64_t v59;
  uint64_t v60;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v54 = v3 + v6;
  v56 = v5;
  v57 = v4;
  v7 = *(_QWORD *)(v5 + 64);
  v60 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v8 = *(_QWORD *)(v60 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v55 = v7;
  v11 = (v7 + v10 + (v54 & ~(unint64_t)v6)) & ~v10;
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v11 + v12;
  v14 = sub_2449CF400();
  v15 = *(_QWORD *)(v14 - 8);
  v51 = v14;
  v52 = *(_QWORD *)(v15 + 64) + v9;
  v59 = v8;
  v16 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v16)
    v17 = v12;
  else
    v17 = v12 + 1;
  v49 = v12;
  __n = v17;
  if (v17 + (v52 & ~(unint64_t)v9) > v13)
    v13 = v17 + (v52 & ~(unint64_t)v9);
  if (v13 > 3
    || ((v18 = ((1 << (8 * v13)) | 2u) >> (8 * v13), v18 <= 0xFFFD) ? (v19 = 2) : (v19 = 4), v18 <= 0xFD))
  {
    v19 = 1;
  }
  v20 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80);
  v23 = (*(_BYTE *)(v2 + 80) | *(_BYTE *)(v15 + 80) | v6 | v9 | *(_BYTE *)(v21 + 80));
  v24 = v23 > 7 || ((v19 + v13 + v22) & ~v22) + *(_QWORD *)(v21 + 64) > 0x18;
  if (!v24 && ((*(_DWORD *)(v2 + 80) | *(_DWORD *)(v15 + 80) | v6 | v9 | *(_DWORD *)(v21 + 80)) & 0x100000) == 0)
  {
    v28 = v2;
    v29 = a2;
    if (v13 > 3)
    {
LABEL_21:
      v30 = *((unsigned __int8 *)a2 + v13);
      goto LABEL_26;
    }
    v31 = ((1 << (8 * v13)) | 2u) >> (8 * v13);
    if (v31 > 0xFFFD)
    {
      v30 = *(_DWORD *)((char *)a2 + v13);
    }
    else
    {
      if (v31 <= 0xFD)
        goto LABEL_21;
      v30 = *(unsigned __int16 *)((char *)a2 + v13);
    }
LABEL_26:
    if (v30 >= 2)
    {
      if (v13 <= 3)
        v32 = v13;
      else
        v32 = 4;
      __asm { BR              X12 }
    }
    v33 = ~(unint64_t)v9;
    if (v30 != 1)
    {
      v34 = ~(unint64_t)v6;
      v27 = a1;
      v53 = v20;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v28 + 16))(a1, a2, AssociatedTypeWitness);
      v35 = ((unint64_t)a1 + v54) & v34;
      v36 = ((unint64_t)a2 + v54) & v34;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v56 + 16))(v35, v36, v57);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v59 + 16))((v35 + v55 + v10) & v33, (v36 + v55 + v10) & v33, v60);
      v37 = v53;
      if (v13 > 3)
        goto LABEL_35;
      v38 = ((1 << (8 * v13)) | 2u) >> (8 * v13);
      if (v38 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v13) = 0;
      }
      else
      {
        if (v38 <= 0xFD)
        {
LABEL_35:
          *((_BYTE *)a1 + v13) = 0;
          v39 = ~v22;
          if (v13 > 3)
            goto LABEL_61;
          goto LABEL_58;
        }
        *(_WORD *)((char *)a1 + v13) = 0;
      }
      v39 = ~v22;
      goto LABEL_64;
    }
    v40 = v20;
    v41 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16);
    v27 = a1;
    v41(a1, a2, v51);
    v42 = (_BYTE *)(((unint64_t)a1 + v52) & v33);
    v43 = (_BYTE *)(((unint64_t)a2 + v52) & v33);
    if ((_DWORD)v16)
    {
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v59 + 48))(v43, v16, v60))
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v42, v43, v60);
        goto LABEL_54;
      }
    }
    else
    {
      if (!v43[v49])
        goto LABEL_53;
      v44 = (v43[v49] - 1) << (8 * v49);
      if (v49 > 3)
        v44 = 0;
      if ((_DWORD)v49)
      {
        if (v49 <= 3)
          v45 = v49;
        else
          v45 = 4;
        __asm { BR              X11 }
      }
      if (v44 == -1)
      {
LABEL_53:
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v42, v43, v60);
        v42[v49] = 0;
LABEL_54:
        v29 = a2;
        v37 = v40;
        v39 = ~v22;
        if (v13 > 3)
          goto LABEL_57;
        v38 = ((1 << (8 * v13)) | 2u) >> (8 * v13);
        if (v38 > 0xFFFD)
        {
          *(_DWORD *)((char *)a1 + v13) = 1;
          goto LABEL_64;
        }
        if (v38 <= 0xFD)
        {
LABEL_57:
          *((_BYTE *)a1 + v13) = 1;
          if (v13 > 3)
          {
LABEL_61:
            v47 = 1;
LABEL_66:
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v21 + 16))(((unint64_t)v27 + v22 + v47 + v13) & v39, ((unint64_t)v29 + v22 + v47 + v13) & v39, v37);
            return v27;
          }
LABEL_58:
          v46 = ((1 << (8 * v13)) | 2u) >> (8 * v13);
          v47 = 2;
          if (v46 > 0xFFFD)
            v47 = 4;
          if (v46 > 0xFD)
            goto LABEL_66;
          goto LABEL_61;
        }
        *(_WORD *)((char *)a1 + v13) = 1;
LABEL_64:
        v24 = v38 > 0xFFFD;
        v47 = 2;
        if (v24)
          v47 = 4;
        goto LABEL_66;
      }
    }
    memcpy(v42, v43, __n);
    goto LABEL_54;
  }
  v26 = *a2;
  *a1 = *a2;
  v27 = (_QWORD *)(v26 + ((v23 + 16) & ~v23));
  swift_retain();
  return v27;
}

uint64_t sub_244945BD8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(v32 + 64);
  v31 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v31 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v29 = v3 + v5;
  v6 = *(_QWORD *)(v4 + 64);
  v34 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v7 = *(_QWORD *)(v34 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v30 = v6;
  v9 = *(_QWORD *)(v7 + 64);
  v10 = ((v6 + v8 + ((v3 + v5) & ~v5)) & ~v8) + v9;
  v11 = sub_2449CF400();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64) + v8;
  v14 = *(unsigned int *)(v7 + 84);
  v15 = (v13 & ~v8) + v9;
  if (!(_DWORD)v14)
    ++v15;
  if (v15 <= v10)
    v16 = v10;
  else
    v16 = v15;
  if (v16 > 3)
    goto LABEL_7;
  v18 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
  if (v18 > 0xFFFD)
  {
    v17 = *(_DWORD *)(a1 + v16);
  }
  else
  {
    if (v18 <= 0xFD)
    {
LABEL_7:
      v17 = *(unsigned __int8 *)(a1 + v16);
      goto LABEL_12;
    }
    v17 = *(unsigned __int16 *)(a1 + v16);
  }
LABEL_12:
  if (v17 >= 2)
  {
    if (v16 <= 3)
      v19 = v16;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  v20 = ~v8;
  if (v17 != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a1, v33);
    v21 = (v29 + a1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v21, v31);
    v22 = (v21 + v30 + v8) & v20;
    goto LABEL_33;
  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  v22 = (v13 + a1) & v20;
  if ((_DWORD)v14)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v22, v14, v34))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v22 + v9))
  {
    v23 = (*(unsigned __int8 *)(v22 + v9) - 1) << (8 * v9);
    if (v9 > 3)
      v23 = 0;
    if ((_DWORD)v9)
    {
      if (v9 <= 3)
        v24 = v9;
      else
        v24 = 4;
      __asm { BR              X11 }
    }
    if (v23 != -1)
    {
LABEL_21:
      if (v16 <= 3)
        goto LABEL_34;
LABEL_38:
      v26 = 1;
      goto LABEL_39;
    }
  }
LABEL_33:
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v22, v34);
  if (v16 > 3)
    goto LABEL_38;
LABEL_34:
  v25 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
  if (v25 <= 0xFFFD)
    v26 = 2;
  else
    v26 = 4;
  if (v25 <= 0xFD)
    goto LABEL_38;
LABEL_39:
  v27 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))((v16 + a1 + v26 + *(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80), v27);
}

uint64_t sub_244945FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  size_t __n;
  size_t __na;
  uint64_t v43;
  uint64_t v45;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  __n = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(__n - 8);
  v3 = *(_QWORD *)(v38 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v37 = v3 + v5;
  v6 = *(_QWORD *)(v4 + 64);
  v43 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v7 = *(_QWORD *)(v43 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v39 = v6;
  v9 = (v6 + v8 + ((v3 + v5) & ~v5)) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v9 + v10;
  v12 = sub_2449CF400();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64) + v8;
  v15 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v15)
    v16 = v10;
  else
    v16 = v10 + 1;
  if (v16 + (v14 & ~v8) <= v11)
    v17 = v11;
  else
    v17 = v16 + (v14 & ~v8);
  v45 = a2;
  if (v17 > 3)
    goto LABEL_8;
  v19 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v19 > 0xFFFD)
  {
    v18 = *(_DWORD *)(a2 + v17);
  }
  else
  {
    if (v19 <= 0xFD)
    {
LABEL_8:
      v18 = *(unsigned __int8 *)(a2 + v17);
      goto LABEL_13;
    }
    v18 = *(unsigned __int16 *)(a2 + v17);
  }
LABEL_13:
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v20 = v17;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  v21 = ~v8;
  if (v18 == 1)
  {
    __na = v16;
    v27 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a1, a2, v12);
    v28 = (_BYTE *)((v14 + a1) & v21);
    v29 = (_BYTE *)((v14 + v45) & v21);
    if ((_DWORD)v15)
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v14 + v45) & v21, v15, v43))
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v28, v29, v43);
        goto LABEL_40;
      }
    }
    else
    {
      if (!v29[v10])
        goto LABEL_39;
      v30 = (v29[v10] - 1) << (8 * v10);
      if (v10 > 3)
        v30 = 0;
      if ((_DWORD)v10)
      {
        if (v10 <= 3)
          v31 = v10;
        else
          v31 = 4;
        __asm { BR              X11 }
      }
      if (v30 == -1)
      {
LABEL_39:
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v28, v29, v43);
        v28[v10] = 0;
LABEL_40:
        if (v17 > 3)
          goto LABEL_43;
        v26 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
        if (v26 > 0xFFFD)
        {
          *(_DWORD *)(a1 + v17) = 1;
        }
        else
        {
          if (v26 <= 0xFD)
          {
LABEL_43:
            *(_BYTE *)(a1 + v17) = 1;
            if (v17 > 3)
            {
LABEL_48:
              v33 = 1;
              goto LABEL_54;
            }
            goto LABEL_44;
          }
          *(_WORD *)(a1 + v17) = 1;
        }
LABEL_51:
        if (v26 <= 0xFFFD)
          v33 = 2;
        else
          v33 = 4;
        goto LABEL_54;
      }
    }
    memcpy(v28, v29, __na);
    goto LABEL_40;
  }
  v22 = ~v5;
  v23 = a1;
  (*(void (**)(uint64_t, uint64_t, size_t))(v38 + 16))(a1, a2, __n);
  v24 = (v37 + a1) & ~v5;
  v25 = (v37 + a2) & v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v24, v25, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v24 + v39 + v8) & v21, (v25 + v39 + v8) & v21, v43);
  if (v17 > 3)
    goto LABEL_22;
  v26 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v26 > 0xFFFD)
  {
    v27 = a1;
    *(_DWORD *)(a1 + v17) = 0;
    goto LABEL_51;
  }
  v23 = a1;
  if (v26 > 0xFD)
  {
    *(_WORD *)(a1 + v17) = 0;
    v27 = a1;
    goto LABEL_51;
  }
LABEL_22:
  *(_BYTE *)(v23 + v17) = 0;
  v27 = v23;
  if (v17 > 3)
    goto LABEL_48;
LABEL_44:
  v32 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v32 <= 0xFFFD)
    v33 = 2;
  else
    v33 = 4;
  if (v32 <= 0xFD)
    goto LABEL_48;
LABEL_54:
  v34 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(size_t, size_t, uint64_t))(v35 + 16))((v33 + v17 + *(unsigned __int8 *)(v35 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80), (v33 + v17 + *(unsigned __int8 *)(v35 + 80) + v45) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80), v34);
  return v27;
}

uint64_t sub_244946534(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  void *v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t __n;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = AssociatedTypeWitness;
  if (a1 == a2)
  {
    v21 = swift_getAssociatedTypeWitness();
    goto LABEL_74;
  }
  v68 = AssociatedTypeWitness;
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v65 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v62 = v6 + v9;
  v63 = v8;
  v10 = (v6 + v9) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v66 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v12 = *(_QWORD *)(v66 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v64 = v11;
  v14 = (v11 + v13 + v10) & ~v13;
  v15 = *(_QWORD *)(v12 + 64);
  v16 = v14 + v15;
  v17 = sub_2449CF400();
  v18 = *(_QWORD *)(v17 - 8);
  v60 = *(_QWORD *)(v18 + 64) + v13;
  v57 = v15;
  if (*(_DWORD *)(v12 + 84))
    v19 = v15;
  else
    v19 = v15 + 1;
  if (v19 + (v60 & ~v13) > v16)
    v16 = v19 + (v60 & ~v13);
  if (v16 > 3)
    goto LABEL_8;
  v22 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
  if (v22 > 0xFFFD)
  {
    v20 = *(_DWORD *)(a1 + v16);
  }
  else
  {
    if (v22 <= 0xFD)
    {
LABEL_8:
      v20 = *(unsigned __int8 *)(a1 + v16);
      goto LABEL_14;
    }
    v20 = *(unsigned __int16 *)(a1 + v16);
  }
LABEL_14:
  if (v20 >= 2)
  {
    if (v16 <= 3)
      v23 = v16;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  v59 = ~v9;
  v24 = ~v13;
  v67 = v7;
  __n = v19;
  v61 = *(_DWORD *)(v12 + 84);
  if (v20 != 1)
  {
    v58 = *(_QWORD *)(v17 - 8);
    v25 = v17;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(a1, v68);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))((v62 + a1) & v59, v7);
    v27 = (((v62 + a1) & v59) + v64 + v13) & v24;
    goto LABEL_34;
  }
  v58 = *(_QWORD *)(v17 - 8);
  v25 = v17;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
  v27 = (v60 + a1) & v24;
  if (v61)
  {
    v28 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v60 + a1) & v24);
    v26 = v25;
    v29 = v58;
    if (v28)
      goto LABEL_23;
LABEL_34:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 8))(v27, v66, v26);
    v26 = v25;
    v29 = v58;
    if (v16 > 3)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (!*(_BYTE *)(v27 + v57))
    goto LABEL_34;
  v30 = (*(unsigned __int8 *)(v27 + v57) - 1) << (8 * v57);
  if (v57 > 3)
    v30 = 0;
  if ((_DWORD)v57)
  {
    if (v57 <= 3)
      v31 = v57;
    else
      v31 = 4;
    __asm { BR              X11 }
  }
  v26 = v25;
  v29 = v58;
  if (v30 == -1)
    goto LABEL_34;
LABEL_23:
  if (v16 > 3)
    goto LABEL_37;
LABEL_35:
  v32 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
  if (v32 <= 0xFFFD)
  {
    if (v32 > 0xFD)
    {
      v33 = *(unsigned __int16 *)(a2 + v16);
      if (v33 < 2)
        goto LABEL_46;
      goto LABEL_42;
    }
LABEL_37:
    v33 = *(unsigned __int8 *)(a2 + v16);
    if (v33 < 2)
      goto LABEL_46;
LABEL_42:
    if (v16 <= 3)
      v34 = v16;
    else
      v34 = 4;
    __asm { BR              X12 }
  }
  v33 = *(_DWORD *)(a2 + v16);
  if (v33 >= 2)
    goto LABEL_42;
LABEL_46:
  if (v33 != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(a1, a2, v68);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))((v62 + a1) & v59, (v62 + a2) & v59, v67);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))((((v62 + a1) & v59) + v64 + v13) & v24, (((v62 + a2) & v59) + v64 + v13) & v24, v66);
    if (v16 <= 3)
    {
      v35 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
      if (v35 > 0xFFFD)
      {
        *(_DWORD *)(a1 + v16) = 0;
        goto LABEL_64;
      }
      if (v35 > 0xFD)
      {
        *(_WORD *)(a1 + v16) = 0;
        goto LABEL_64;
      }
    }
    *(_BYTE *)(a1 + v16) = 0;
LABEL_64:
    v5 = v68;
    v21 = v67;
    goto LABEL_74;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(a1, a2, v26);
  v36 = (void *)((v60 + a1) & v24);
  v37 = (unsigned __int8 *)((v60 + a2) & v24);
  if (v61)
  {
    if (!(*(unsigned int (**)(uint64_t))(v12 + 48))((v60 + a2) & v24))
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v12 + 16))(v36, v37, v66);
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  if (v37[v57])
  {
    v38 = (v37[v57] - 1) << (8 * v57);
    if (v57 > 3)
      v38 = 0;
    if ((_DWORD)v57)
    {
      if (v57 <= 3)
        v39 = v57;
      else
        v39 = 4;
      __asm { BR              X11 }
    }
    if (v38 != -1)
    {
LABEL_66:
      memcpy(v36, v37, __n);
      goto LABEL_68;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))((v60 + a1) & v24, (v60 + a2) & v24, v66);
  *((_BYTE *)v36 + v57) = 0;
LABEL_68:
  v5 = v68;
  v21 = v67;
  if (v16 > 3)
  {
LABEL_71:
    *(_BYTE *)(a1 + v16) = 1;
    goto LABEL_74;
  }
  v40 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
  if (v40 > 0xFFFD)
  {
    *(_DWORD *)(a1 + v16) = 1;
  }
  else
  {
    if (v40 <= 0xFD)
      goto LABEL_71;
    *(_WORD *)(a1 + v16) = 1;
  }
LABEL_74:
  v41 = *(_QWORD *)(v21 - 8);
  v42 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + *(unsigned __int8 *)(v41 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v43 = *(_QWORD *)(v41 + 64);
  v44 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739FC80) - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = (v42 + v43 + v45) & ~v45;
  v47 = *(_QWORD *)(v44 + 64);
  v48 = v46 + v47;
  v49 = ((*(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64) + v45) & ~v45) + v47;
  if (!*(_DWORD *)(v44 + 84))
    ++v49;
  if (v49 <= v48)
    v50 = v48;
  else
    v50 = v49;
  if (v50 > 3
    || ((v51 = ((1 << (8 * v50)) | 2u) >> (8 * v50), v51 <= 0xFFFD) ? (v52 = 2) : (v52 = 4), v51 <= 0xFD))
  {
    v52 = 1;
  }
  v53 = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(v53 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v54 + 24))((v52 + v50 + *(unsigned __int8 *)(v54 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80), (v52 + v50 + *(unsigned __int8 *)(v54 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80), v53);
  return a1;
}

uint64_t sub_244946D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  size_t __n;
  size_t __na;
  uint64_t v43;
  uint64_t v45;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  __n = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(__n - 8);
  v3 = *(_QWORD *)(v38 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v37 = v3 + v5;
  v6 = *(_QWORD *)(v4 + 64);
  v43 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v7 = *(_QWORD *)(v43 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v39 = v6;
  v9 = (v6 + v8 + ((v3 + v5) & ~v5)) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v9 + v10;
  v12 = sub_2449CF400();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64) + v8;
  v15 = *(unsigned int *)(v7 + 84);
  if ((_DWORD)v15)
    v16 = v10;
  else
    v16 = v10 + 1;
  if (v16 + (v14 & ~v8) <= v11)
    v17 = v11;
  else
    v17 = v16 + (v14 & ~v8);
  v45 = a2;
  if (v17 > 3)
    goto LABEL_8;
  v19 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v19 > 0xFFFD)
  {
    v18 = *(_DWORD *)(a2 + v17);
  }
  else
  {
    if (v19 <= 0xFD)
    {
LABEL_8:
      v18 = *(unsigned __int8 *)(a2 + v17);
      goto LABEL_13;
    }
    v18 = *(unsigned __int16 *)(a2 + v17);
  }
LABEL_13:
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v20 = v17;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  v21 = ~v8;
  if (v18 == 1)
  {
    __na = v16;
    v27 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(a1, a2, v12);
    v28 = (_BYTE *)((v14 + a1) & v21);
    v29 = (_BYTE *)((v14 + v45) & v21);
    if ((_DWORD)v15)
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v14 + v45) & v21, v15, v43))
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v28, v29, v43);
        goto LABEL_40;
      }
    }
    else
    {
      if (!v29[v10])
        goto LABEL_39;
      v30 = (v29[v10] - 1) << (8 * v10);
      if (v10 > 3)
        v30 = 0;
      if ((_DWORD)v10)
      {
        if (v10 <= 3)
          v31 = v10;
        else
          v31 = 4;
        __asm { BR              X11 }
      }
      if (v30 == -1)
      {
LABEL_39:
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v28, v29, v43);
        v28[v10] = 0;
LABEL_40:
        if (v17 > 3)
          goto LABEL_43;
        v26 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
        if (v26 > 0xFFFD)
        {
          *(_DWORD *)(a1 + v17) = 1;
        }
        else
        {
          if (v26 <= 0xFD)
          {
LABEL_43:
            *(_BYTE *)(a1 + v17) = 1;
            if (v17 > 3)
            {
LABEL_48:
              v33 = 1;
              goto LABEL_54;
            }
            goto LABEL_44;
          }
          *(_WORD *)(a1 + v17) = 1;
        }
LABEL_51:
        if (v26 <= 0xFFFD)
          v33 = 2;
        else
          v33 = 4;
        goto LABEL_54;
      }
    }
    memcpy(v28, v29, __na);
    goto LABEL_40;
  }
  v22 = ~v5;
  v23 = a1;
  (*(void (**)(uint64_t, uint64_t, size_t))(v38 + 32))(a1, a2, __n);
  v24 = (v37 + a1) & ~v5;
  v25 = (v37 + a2) & v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v24, v25, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))((v24 + v39 + v8) & v21, (v25 + v39 + v8) & v21, v43);
  if (v17 > 3)
    goto LABEL_22;
  v26 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v26 > 0xFFFD)
  {
    v27 = a1;
    *(_DWORD *)(a1 + v17) = 0;
    goto LABEL_51;
  }
  v23 = a1;
  if (v26 > 0xFD)
  {
    *(_WORD *)(a1 + v17) = 0;
    v27 = a1;
    goto LABEL_51;
  }
LABEL_22:
  *(_BYTE *)(v23 + v17) = 0;
  v27 = v23;
  if (v17 > 3)
    goto LABEL_48;
LABEL_44:
  v32 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v32 <= 0xFFFD)
    v33 = 2;
  else
    v33 = 4;
  if (v32 <= 0xFD)
    goto LABEL_48;
LABEL_54:
  v34 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(size_t, size_t, uint64_t))(v35 + 32))((v33 + v17 + *(unsigned __int8 *)(v35 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80), (v33 + v17 + *(unsigned __int8 *)(v35 + 80) + v45) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80), v34);
  return v27;
}

uint64_t sub_2449472D4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  void *v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t __n;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = AssociatedTypeWitness;
  if (a1 == a2)
  {
    v21 = swift_getAssociatedTypeWitness();
    goto LABEL_74;
  }
  v68 = AssociatedTypeWitness;
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v65 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v62 = v6 + v9;
  v63 = v8;
  v10 = (v6 + v9) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v66 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v12 = *(_QWORD *)(v66 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v64 = v11;
  v14 = (v11 + v13 + v10) & ~v13;
  v15 = *(_QWORD *)(v12 + 64);
  v16 = v14 + v15;
  v17 = sub_2449CF400();
  v18 = *(_QWORD *)(v17 - 8);
  v60 = *(_QWORD *)(v18 + 64) + v13;
  v57 = v15;
  if (*(_DWORD *)(v12 + 84))
    v19 = v15;
  else
    v19 = v15 + 1;
  if (v19 + (v60 & ~v13) > v16)
    v16 = v19 + (v60 & ~v13);
  if (v16 > 3)
    goto LABEL_8;
  v22 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
  if (v22 > 0xFFFD)
  {
    v20 = *(_DWORD *)(a1 + v16);
  }
  else
  {
    if (v22 <= 0xFD)
    {
LABEL_8:
      v20 = *(unsigned __int8 *)(a1 + v16);
      goto LABEL_14;
    }
    v20 = *(unsigned __int16 *)(a1 + v16);
  }
LABEL_14:
  if (v20 >= 2)
  {
    if (v16 <= 3)
      v23 = v16;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  v59 = ~v9;
  v24 = ~v13;
  v67 = v7;
  __n = v19;
  v61 = *(_DWORD *)(v12 + 84);
  if (v20 != 1)
  {
    v58 = *(_QWORD *)(v17 - 8);
    v25 = v17;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(a1, v68);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))((v62 + a1) & v59, v7);
    v27 = (((v62 + a1) & v59) + v64 + v13) & v24;
    goto LABEL_34;
  }
  v58 = *(_QWORD *)(v17 - 8);
  v25 = v17;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
  v27 = (v60 + a1) & v24;
  if (v61)
  {
    v28 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v60 + a1) & v24);
    v26 = v25;
    v29 = v58;
    if (v28)
      goto LABEL_23;
LABEL_34:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 8))(v27, v66, v26);
    v26 = v25;
    v29 = v58;
    if (v16 > 3)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (!*(_BYTE *)(v27 + v57))
    goto LABEL_34;
  v30 = (*(unsigned __int8 *)(v27 + v57) - 1) << (8 * v57);
  if (v57 > 3)
    v30 = 0;
  if ((_DWORD)v57)
  {
    if (v57 <= 3)
      v31 = v57;
    else
      v31 = 4;
    __asm { BR              X11 }
  }
  v26 = v25;
  v29 = v58;
  if (v30 == -1)
    goto LABEL_34;
LABEL_23:
  if (v16 > 3)
    goto LABEL_37;
LABEL_35:
  v32 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
  if (v32 <= 0xFFFD)
  {
    if (v32 > 0xFD)
    {
      v33 = *(unsigned __int16 *)(a2 + v16);
      if (v33 < 2)
        goto LABEL_46;
      goto LABEL_42;
    }
LABEL_37:
    v33 = *(unsigned __int8 *)(a2 + v16);
    if (v33 < 2)
      goto LABEL_46;
LABEL_42:
    if (v16 <= 3)
      v34 = v16;
    else
      v34 = 4;
    __asm { BR              X12 }
  }
  v33 = *(_DWORD *)(a2 + v16);
  if (v33 >= 2)
    goto LABEL_42;
LABEL_46:
  if (v33 != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(a1, a2, v68);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))((v62 + a1) & v59, (v62 + a2) & v59, v67);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))((((v62 + a1) & v59) + v64 + v13) & v24, (((v62 + a2) & v59) + v64 + v13) & v24, v66);
    if (v16 <= 3)
    {
      v35 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
      if (v35 > 0xFFFD)
      {
        *(_DWORD *)(a1 + v16) = 0;
        goto LABEL_64;
      }
      if (v35 > 0xFD)
      {
        *(_WORD *)(a1 + v16) = 0;
        goto LABEL_64;
      }
    }
    *(_BYTE *)(a1 + v16) = 0;
LABEL_64:
    v5 = v68;
    v21 = v67;
    goto LABEL_74;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(a1, a2, v26);
  v36 = (void *)((v60 + a1) & v24);
  v37 = (unsigned __int8 *)((v60 + a2) & v24);
  if (v61)
  {
    if (!(*(unsigned int (**)(uint64_t))(v12 + 48))((v60 + a2) & v24))
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v12 + 32))(v36, v37, v66);
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  if (v37[v57])
  {
    v38 = (v37[v57] - 1) << (8 * v57);
    if (v57 > 3)
      v38 = 0;
    if ((_DWORD)v57)
    {
      if (v57 <= 3)
        v39 = v57;
      else
        v39 = 4;
      __asm { BR              X11 }
    }
    if (v38 != -1)
    {
LABEL_66:
      memcpy(v36, v37, __n);
      goto LABEL_68;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))((v60 + a1) & v24, (v60 + a2) & v24, v66);
  *((_BYTE *)v36 + v57) = 0;
LABEL_68:
  v5 = v68;
  v21 = v67;
  if (v16 > 3)
  {
LABEL_71:
    *(_BYTE *)(a1 + v16) = 1;
    goto LABEL_74;
  }
  v40 = ((1 << (8 * v16)) | 2u) >> (8 * v16);
  if (v40 > 0xFFFD)
  {
    *(_DWORD *)(a1 + v16) = 1;
  }
  else
  {
    if (v40 <= 0xFD)
      goto LABEL_71;
    *(_WORD *)(a1 + v16) = 1;
  }
LABEL_74:
  v41 = *(_QWORD *)(v21 - 8);
  v42 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + *(unsigned __int8 *)(v41 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v43 = *(_QWORD *)(v41 + 64);
  v44 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739FC80) - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = (v42 + v43 + v45) & ~v45;
  v47 = *(_QWORD *)(v44 + 64);
  v48 = v46 + v47;
  v49 = ((*(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64) + v45) & ~v45) + v47;
  if (!*(_DWORD *)(v44 + 84))
    ++v49;
  if (v49 <= v48)
    v50 = v48;
  else
    v50 = v49;
  if (v50 > 3
    || ((v51 = ((1 << (8 * v50)) | 2u) >> (8 * v50), v51 <= 0xFFFD) ? (v52 = 2) : (v52 = 4), v51 <= 0xFD))
  {
    v52 = 1;
  }
  v53 = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(v53 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v54 + 40))((v52 + v50 + *(unsigned __int8 *)(v54 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80), (v52 + v50 + *(unsigned __int8 *)(v54 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80), v53);
  return a1;
}

uint64_t sub_244947B00(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  char v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739FC80) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v7 + v9) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v10 + v11;
  v13 = ((*(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64) + v9) & ~v9) + v11;
  if (!*(_DWORD *)(v8 + 84))
    ++v13;
  if (v13 <= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = 8 * v14;
  if (v14 > 3)
  {
    v16 = 3;
    goto LABEL_10;
  }
  v17 = ((1 << v15) | 2u) >> v15;
  if (v17 <= 0xFFFD)
  {
    v16 = v17 + 2;
    if (v17 > 0xFD)
    {
      v18 = 16;
LABEL_11:
      v19 = (1 << v18) - v16;
      if ((v19 & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
LABEL_10:
    v18 = 8;
    goto LABEL_11;
  }
LABEL_12:
  v19 = 0x7FFFFFFF;
LABEL_13:
  v20 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v21 = *(_DWORD *)(v20 + 84);
  if (v21 <= v19)
    v22 = v19;
  else
    v22 = *(_DWORD *)(v20 + 84);
  if (v14 > 3)
    goto LABEL_20;
  v23 = ((1 << v15) | 2u) >> v15;
  v24 = 2;
  if (v23 > 0xFFFD)
    v24 = 4;
  if (v23 <= 0xFD)
LABEL_20:
    v24 = 1;
  if (!a2)
    return 0;
  v25 = *(unsigned __int8 *)(v20 + 80);
  if (a2 > v22)
  {
    v26 = ((v14 + v25 + v24) & ~v25) + *(_QWORD *)(v20 + 64);
    v27 = 8 * v26;
    if (v26 > 3)
      goto LABEL_24;
    v29 = ((a2 - v22 + ~(-1 << v27)) >> v27) + 1;
    if (HIWORD(v29))
    {
      v28 = *(_DWORD *)(a1 + v26);
      if (!v28)
        goto LABEL_41;
      goto LABEL_32;
    }
    if (v29 > 0xFF)
    {
      v28 = *(unsigned __int16 *)(a1 + v26);
      if (!*(_WORD *)(a1 + v26))
        goto LABEL_41;
      goto LABEL_32;
    }
    if (v29 >= 2)
    {
LABEL_24:
      v28 = *(unsigned __int8 *)(a1 + v26);
      if (!*(_BYTE *)(a1 + v26))
        goto LABEL_41;
LABEL_32:
      v30 = (v28 - 1) << v27;
      if (v26 > 3)
        v30 = 0;
      if ((_DWORD)v26)
      {
        if (v26 <= 3)
          v31 = v26;
        else
          v31 = 4;
        __asm { BR              X12 }
      }
      v53 = v22 + v30;
      return v53 + 1;
    }
  }
LABEL_41:
  if (!v22)
    return 0;
  if (v14 > 3)
  {
    v32 = 3;
    goto LABEL_46;
  }
  v33 = ((1 << v15) | 2u) >> v15;
  if (v33 <= 0xFFFD)
  {
    v32 = v33 + 2;
    if (v33 > 0xFD)
    {
      v34 = 16;
LABEL_47:
      v35 = (1 << v34) - v32;
      if ((v35 & 0x80000000) == 0)
        goto LABEL_49;
      goto LABEL_48;
    }
LABEL_46:
    v34 = 8;
    goto LABEL_47;
  }
LABEL_48:
  v35 = 0x7FFFFFFF;
LABEL_49:
  if (v21 > v35)
    v35 = *(_DWORD *)(v20 + 84);
  if (v14 > 3)
  {
    v36 = 3;
LABEL_55:
    v38 = 8;
    goto LABEL_56;
  }
  v37 = ((1 << v15) | 2u) >> v15;
  if (v37 > 0xFFFD)
    goto LABEL_60;
  v36 = v37 + 2;
  if (v37 <= 0xFD)
    goto LABEL_55;
  v38 = 16;
LABEL_56:
  v39 = (1 << v38) - v36;
  if ((v39 & 0x80000000) == 0)
  {
    if (v39 == v35)
      goto LABEL_58;
    goto LABEL_61;
  }
LABEL_60:
  if (v35 == 0x7FFFFFFF)
  {
LABEL_58:
    if (v14 <= 3)
    {
      v44 = ((1 << v15) | 2u) >> v15;
      if (v44 > 0xFFFD)
        goto LABEL_73;
      v40 = v44 + 2;
      if (v44 > 0xFD)
      {
        v45 = 16;
LABEL_70:
        v46 = (1 << v45) - v40;
        if ((v46 & 0x80000000) == 0)
        {
          if (v14 > 3)
            goto LABEL_77;
LABEL_74:
          v47 = ((1 << v15) | 2u) >> v15;
          v48 = 2;
          if (v47 > 0xFFFD)
            v48 = 4;
          if (v47 > 0xFD)
          {
LABEL_78:
            if (!v35)
              return 0;
            v49 = v35 - v46;
            if (v35 <= v46)
              goto LABEL_99;
            v50 = v48 + v14;
            v51 = 8 * v50;
            if (v50 > 3)
            {
LABEL_81:
              v52 = *(unsigned __int8 *)(a1 + v50);
              goto LABEL_92;
            }
            v54 = ((v49 + ~(-1 << v51)) >> v51) + 1;
            if (HIWORD(v54))
            {
              v52 = *(_DWORD *)(a1 + v50);
            }
            else
            {
              if (v54 <= 0xFF)
              {
                if (v54 < 2)
                  goto LABEL_99;
                goto LABEL_81;
              }
              v52 = *(unsigned __int16 *)(a1 + v50);
            }
LABEL_92:
            if (v52)
            {
              v55 = (v52 - 1) << v51;
              if (v50 > 3)
                v55 = 0;
              if ((_DWORD)v50)
              {
                if (v50 > 3)
                  LODWORD(v50) = 4;
                __asm { BR              X12 }
              }
              v53 = v46 + v55;
              return v53 + 1;
            }
LABEL_99:
            if (v46)
            {
              if (v14 <= 3)
              {
                v61 = ((1 << v15) | 2u) >> v15;
                if (v61 > 0xFFFD)
                {
                  v57 = *(_DWORD *)(a1 + v14);
                  v58 = ~v57;
LABEL_109:
                  v64 = 0x7FFFFFFF;
LABEL_110:
                  if (v64 > v58)
                    return -v57;
                  else
                    return 0;
                }
                v60 = v61 + 2;
                if (v61 > 0xFD)
                {
                  v63 = *(unsigned __int16 *)(a1 + v14);
                  v57 = v63 | 0xFFFF0000;
                  v58 = v63 ^ 0xFFFF;
                  v59 = 16;
                }
                else
                {
                  v62 = *(unsigned __int8 *)(a1 + v14);
                  v57 = v62 | 0xFFFFFF00;
                  v58 = v62 ^ 0xFF;
                  v59 = 8;
                }
              }
              else
              {
                v56 = *(unsigned __int8 *)(a1 + v14);
                v57 = v56 | 0xFFFFFF00;
                v58 = v56 ^ 0xFF;
                v59 = 8;
                v60 = 3;
              }
              v64 = (1 << v59) - v60;
              if ((v64 & 0x80000000) == 0)
                goto LABEL_110;
              goto LABEL_109;
            }
            return 0;
          }
LABEL_77:
          v48 = 1;
          goto LABEL_78;
        }
LABEL_73:
        v46 = 0x7FFFFFFF;
        if (v14 > 3)
          goto LABEL_77;
        goto LABEL_74;
      }
    }
    else
    {
      v40 = 3;
    }
    v45 = 8;
    goto LABEL_70;
  }
LABEL_61:
  if (v14 > 3)
    goto LABEL_65;
  v41 = ((1 << v15) | 2u) >> v15;
  v42 = 2;
  if (v41 > 0xFFFD)
    v42 = 4;
  if (v41 <= 0xFD)
LABEL_65:
    v42 = 1;
  return (*(uint64_t (**)(unint64_t))(v20 + 48))((v14 + a1 + v25 + v42) & ~v25);
}

void sub_244948130(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739FC80) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v9 + v11) & ~v11;
  v13 = *(_QWORD *)(v10 + 64);
  v14 = v12 + v13;
  v15 = ((*(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64) + v11) & ~v11) + v13;
  if (!*(_DWORD *)(v10 + 84))
    ++v15;
  if (v15 <= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v21 = ((1 << v17) | 2u) >> v17;
    if (v21 > 0xFFFD)
      goto LABEL_14;
    v18 = v21 + 2;
    if (v21 > 0xFD)
    {
      v19 = 16;
LABEL_9:
      v20 = (1 << v19) - v18;
      if ((v20 & 0x80000000) == 0)
      {
LABEL_15:
        v22 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
        if (*(_DWORD *)(v22 + 84) <= v20)
          v23 = v20;
        else
          v23 = *(_DWORD *)(v22 + 84);
        if (v16 > 3)
          goto LABEL_22;
        v24 = ((1 << v17) | 2u) >> v17;
        v25 = 2;
        if (v24 > 0xFFFD)
          v25 = 4;
        if (v24 <= 0xFD)
LABEL_22:
          v25 = 1;
        v26 = ((v16 + *(unsigned __int8 *)(v22 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
            + *(_QWORD *)(v22 + 64);
        if (a3 <= v23)
        {
          v27 = 0;
        }
        else if (v26 <= 3)
        {
          v29 = ((a3 - v23 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
          if (HIWORD(v29))
          {
            v27 = 4u;
          }
          else if (v29 >= 0x100)
          {
            v27 = 2;
          }
          else
          {
            v27 = v29 > 1;
          }
        }
        else
        {
          v27 = 1u;
        }
        if (v23 < a2)
        {
          v28 = ~v23 + a2;
          if (v26 < 4)
          {
            if ((_DWORD)v26)
            {
              v30 = v28 & ~(-1 << (8 * v26));
              bzero(a1, v26);
              if ((_DWORD)v26 == 3)
              {
                *(_WORD *)a1 = v30;
                a1[2] = BYTE2(v30);
              }
              else if ((_DWORD)v26 == 2)
              {
                *(_WORD *)a1 = v30;
              }
              else
              {
                *a1 = v30;
              }
            }
          }
          else
          {
            bzero(a1, v26);
            *(_DWORD *)a1 = v28;
          }
          __asm { BR              X10 }
        }
        __asm { BR              X13 }
      }
LABEL_14:
      v20 = 0x7FFFFFFF;
      goto LABEL_15;
    }
  }
  else
  {
    v18 = 3;
  }
  v19 = 8;
  goto LABEL_9;
}

void sub_2449486A8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_2449486B0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_2449486B8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
}

void sub_24494873C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  unsigned int v6;

  *(_WORD *)(v0 + v2) = 0;
  v5 = -v1;
  if (v3 > 3)
    goto LABEL_4;
  v6 = ((1 << v4) | 2u) >> v4;
  if (v6 > 0xFFFD)
  {
    *(_DWORD *)(v0 + v3) = v5;
  }
  else
  {
    if (v6 <= 0xFD)
    {
LABEL_4:
      *(_BYTE *)(v0 + v3) = v5;
      goto LABEL_7;
    }
    *(_WORD *)(v0 + v3) = v5;
  }
LABEL_7:
  JUMPOUT(0x2449487DCLL);
}

void sub_2449487C8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_2449487D0()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

uint64_t type metadata accessor for PipeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeEvent);
}

uint64_t type metadata accessor for PipeEvent.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeEvent.Content);
}

uint64_t sub_244948814()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char v9;
  char *v10;
  uint64_t *v11;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      sub_24494B410();
      if (v4 > 0x3F)
        return v3;
      swift_getTupleTypeLayout3();
      v10 = &v9;
      AssociatedTypeWitness = sub_2449CF400();
      if (v5 <= 0x3F)
      {
        sub_24494B480();
        if (v6 <= 0x3F)
        {
          swift_getTupleTypeLayout2();
          v11 = &v8;
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
        return v3;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_244948994(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  int v36;
  unsigned int v37;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedTypeWitness;
  uint64_t v44;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v42 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v42 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  v40 = v3 + v5;
  v7 = *(_QWORD *)(v4 + 64);
  v44 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v8 = *(_QWORD *)(v44 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v41 = v7;
  v10 = *(_QWORD *)(v8 + 64);
  v11 = ((v7 + v9 + ((v3 + v6) & ~v6)) & ~(unint64_t)v9) + v10;
  v12 = sub_2449CF400();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64) + v9;
  v39 = v10;
  if (!*(_DWORD *)(v8 + 84))
    ++v10;
  if (v10 + (v14 & ~(unint64_t)v9) > v11)
    v11 = v10 + (v14 & ~(unint64_t)v9);
  if (v11 > 3)
    goto LABEL_9;
  v15 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
  v16 = 2;
  if (v15 > 0xFFFD)
    v16 = 4;
  if (v15 <= 0xFD)
LABEL_9:
    v16 = 1;
  v17 = v16 + v11;
  v18 = (*(_BYTE *)(v2 + 80) | *(_BYTE *)(v13 + 80) | v5 | v9);
  if (v18 > 7 || v17 > 0x18 || ((*(_DWORD *)(v2 + 80) | *(_DWORD *)(v13 + 80) | v5 | v9) & 0x100000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    v22 = (uint64_t *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
    return v22;
  }
  if (v11 > 3)
    goto LABEL_19;
  v24 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
  if (v24 > 0xFFFD)
  {
    v23 = *(_DWORD *)((char *)a2 + v11);
  }
  else
  {
    if (v24 <= 0xFD)
    {
LABEL_19:
      v23 = *((unsigned __int8 *)a2 + v11);
      goto LABEL_24;
    }
    v23 = *(unsigned __int16 *)((char *)a2 + v11);
  }
LABEL_24:
  if (v23 >= 2)
  {
    if (v11 <= 3)
      v25 = v11;
    else
      v25 = 4;
    __asm { BR              X13 }
  }
  v26 = ~(unint64_t)v9;
  if (v23 == 1)
  {
    v22 = a1;
    v32 = *(unsigned int *)(v8 + 84);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
    v33 = (_BYTE *)(((unint64_t)a1 + v14) & v26);
    v34 = (_BYTE *)(((unint64_t)a2 + v14) & v26);
    if ((_DWORD)v32)
    {
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v34, v32, v44))
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v33, v34, v44);
        if (v11 > 3)
          goto LABEL_54;
        goto LABEL_52;
      }
    }
    else
    {
      if (!v34[v39])
        goto LABEL_51;
      v35 = (v34[v39] - 1) << (8 * v39);
      if (v39 > 3)
        v35 = 0;
      if ((_DWORD)v39)
      {
        if (v39 <= 3)
          v36 = v39;
        else
          v36 = 4;
        __asm { BR              X11 }
      }
      if (v35 == -1)
      {
LABEL_51:
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v33, v34, v44);
        v33[v39] = 0;
        if (v11 > 3)
        {
LABEL_54:
          *((_BYTE *)a1 + v11) = 1;
          return v22;
        }
LABEL_52:
        v37 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (v37 > 0xFFFD)
        {
          *(_DWORD *)((char *)a1 + v11) = 1;
          return v22;
        }
        if (v37 > 0xFD)
        {
          *(_WORD *)((char *)a1 + v11) = 1;
          return v22;
        }
        goto LABEL_54;
      }
    }
    memcpy(v33, v34, v10);
    if (v11 > 3)
      goto LABEL_54;
    goto LABEL_52;
  }
  v27 = ~v6;
  v28 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 + 16);
  v22 = a1;
  v28(a1, a2, AssociatedTypeWitness);
  v29 = ((unint64_t)a1 + v40) & ~v6;
  v30 = ((unint64_t)a2 + v40) & v27;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v29, v30, v42);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v29 + v41 + v9) & v26, (v30 + v41 + v9) & v26, v44);
  if (v11 <= 3)
  {
    v31 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
    if (v31 > 0xFFFD)
    {
      *(_DWORD *)((char *)a1 + v11) = 0;
      return v22;
    }
    if (v31 > 0xFD)
    {
      *(_WORD *)((char *)a1 + v11) = 0;
      return v22;
    }
  }
  *((_BYTE *)a1 + v11) = 0;
  return v22;
}

uint64_t sub_244948EC8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(v29 + 64);
  v28 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v28 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = v3 + v5;
  v7 = (v3 + v5) & ~v5;
  v8 = *(_QWORD *)(v4 + 64);
  v31 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = *(_QWORD *)(v31 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v27 = v8;
  v11 = *(_QWORD *)(v9 + 64);
  v12 = ((v8 + v10 + v7) & ~v10) + v11;
  v13 = sub_2449CF400();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64) + v10;
  v16 = *(unsigned int *)(v9 + 84);
  v17 = (v15 & ~v10) + v11;
  if (!(_DWORD)v16)
    ++v17;
  if (v17 <= v12)
    v17 = v12;
  if (v17 > 3)
    goto LABEL_6;
  v19 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v19 > 0xFFFD)
  {
    v18 = *(_DWORD *)(a1 + v17);
  }
  else
  {
    if (v19 <= 0xFD)
    {
LABEL_6:
      v18 = *(unsigned __int8 *)(a1 + v17);
      goto LABEL_11;
    }
    v18 = *(unsigned __int16 *)(a1 + v17);
  }
LABEL_11:
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v20 = v17;
    else
      v20 = 4;
    __asm { BR              X14 }
  }
  v21 = ~v10;
  if (v18 != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(a1, v30);
    v22 = (v6 + a1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v22, v28);
    v23 = (v22 + v27 + v10) & v21;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v23, v31);
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  v23 = (v15 + a1) & v21;
  if ((_DWORD)v16)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v23, v16, v31);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v23, v31);
  }
  else
  {
    if (!*(_BYTE *)(v23 + v11))
      return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v23, v31);
    v25 = (*(unsigned __int8 *)(v23 + v11) - 1) << (8 * v11);
    if (v11 > 3)
      v25 = 0;
    if ((_DWORD)v11)
    {
      if (v11 <= 3)
        v26 = v11;
      else
        v26 = 4;
      __asm { BR              X11 }
    }
    result = (v25 + 1);
    if (v25 == -1)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v23, v31);
  }
  return result;
}

uint64_t sub_24494920C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t AssociatedTypeWitness;
  size_t __n;
  size_t __na;
  uint64_t v39;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  __n = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(__n - 8);
  v3 = *(_QWORD *)(v34 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v33 = v3 + v5;
  v6 = (v3 + v5) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v39 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v8 = *(_QWORD *)(v39 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v35 = v7;
  v10 = *(_QWORD *)(v8 + 64);
  v11 = ((v7 + v9 + v6) & ~v9) + v10;
  v12 = sub_2449CF400();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64) + v9;
  v15 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v15)
    v16 = v10;
  else
    v16 = v10 + 1;
  if (v16 + (v14 & ~v9) <= v11)
    v17 = v11;
  else
    v17 = v16 + (v14 & ~v9);
  if (v17 > 3)
    goto LABEL_8;
  v19 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v19 > 0xFFFD)
  {
    v18 = *(_DWORD *)(a2 + v17);
  }
  else
  {
    if (v19 <= 0xFD)
    {
LABEL_8:
      v18 = *(unsigned __int8 *)(a2 + v17);
      goto LABEL_13;
    }
    v18 = *(unsigned __int16 *)(a2 + v17);
  }
LABEL_13:
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v20 = v17;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  v21 = ~v9;
  if (v18 == 1)
  {
    __na = v16;
    v27 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a1, a2, v12);
    v28 = (_BYTE *)((v14 + a2) & v21);
    if ((_DWORD)v15)
    {
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v28, v15, v39))
      {
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 16))((v14 + a1) & v21, v28, v39);
        if (v17 > 3)
          goto LABEL_43;
        goto LABEL_41;
      }
    }
    else
    {
      if (!v28[v10])
        goto LABEL_40;
      v29 = (v28[v10] - 1) << (8 * v10);
      if (v10 > 3)
        v29 = 0;
      if ((_DWORD)v10)
      {
        if (v10 <= 3)
          v30 = v10;
        else
          v30 = 4;
        __asm { BR              X11 }
      }
      if (v29 == -1)
      {
LABEL_40:
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 16))((v14 + a1) & v21, v28, v39);
        *(_BYTE *)(((v14 + a1) & v21) + v10) = 0;
        if (v17 > 3)
        {
LABEL_43:
          *(_BYTE *)(a1 + v17) = 1;
          return v27;
        }
LABEL_41:
        v31 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
        if (v31 > 0xFFFD)
        {
          *(_DWORD *)(a1 + v17) = 1;
          return v27;
        }
        if (v31 > 0xFD)
        {
          *(_WORD *)(a1 + v17) = 1;
          return v27;
        }
        goto LABEL_43;
      }
    }
    memcpy((void *)((v14 + a1) & v21), v28, __na);
    if (v17 > 3)
      goto LABEL_43;
    goto LABEL_41;
  }
  v22 = ~v5;
  v23 = a1;
  (*(void (**)(uint64_t, uint64_t, size_t))(v34 + 16))(a1, a2, __n);
  v24 = (v33 + a1) & ~v5;
  v25 = (v33 + a2) & v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v24, v25, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v24 + v35 + v9) & v21, (v25 + v35 + v9) & v21, v39);
  if (v17 <= 3)
  {
    v26 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
    if (v26 > 0xFFFD)
    {
      v27 = a1;
      *(_DWORD *)(a1 + v17) = 0;
      return v27;
    }
    v23 = a1;
    if (v26 > 0xFD)
    {
      *(_WORD *)(a1 + v17) = 0;
      return a1;
    }
  }
  *(_BYTE *)(v23 + v17) = 0;
  return v23;
}

uint64_t sub_2449496B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  int v37;
  int v38;
  unsigned int v39;
  size_t __n;
  size_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedTypeWitness;
  uint64_t v51;

  if (a1 == a2)
    return a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v47 + 64);
  v49 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v49 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v46 = v4 + v6;
  v7 = (v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v51 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = *(_QWORD *)(v51 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v48 = v8;
  v11 = (v8 + v10 + v7) & ~v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = v11 + v12;
  v14 = sub_2449CF400();
  v15 = *(_QWORD *)(v14 - 8);
  v45 = *(_QWORD *)(v15 + 64) + v10;
  v42 = v12;
  if (*(_DWORD *)(v9 + 84))
    v16 = v12;
  else
    v16 = v12 + 1;
  if (v16 + (v45 & ~v10) <= v13)
    v17 = v13;
  else
    v17 = v16 + (v45 & ~v10);
  if (v17 > 3)
    goto LABEL_9;
  v19 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v19 > 0xFFFD)
  {
    v18 = *(_DWORD *)(a1 + v17);
  }
  else
  {
    if (v19 <= 0xFD)
    {
LABEL_9:
      v18 = *(unsigned __int8 *)(a1 + v17);
      goto LABEL_14;
    }
    v18 = *(unsigned __int16 *)(a1 + v17);
  }
LABEL_14:
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v20 = v17;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  v43 = ~v6;
  v21 = ~v10;
  __n = v16;
  v44 = *(_DWORD *)(v9 + 84);
  if (v18 != 1)
  {
    v22 = *(_QWORD *)(v14 - 8);
    v23 = v14;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v46 + a1) & v43, v49);
    v25 = (((v46 + a1) & v43) + v48 + v10) & v21;
    goto LABEL_34;
  }
  v22 = *(_QWORD *)(v14 - 8);
  v23 = v14;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  v25 = (v45 + a1) & v21;
  if (v44)
  {
    v26 = (*(uint64_t (**)(uint64_t))(v9 + 48))((v45 + a1) & v21);
    v24 = v23;
    v27 = v22;
    if (v26)
      goto LABEL_23;
LABEL_34:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v25, v51, v24);
    v24 = v23;
    v27 = v22;
    if (v17 > 3)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (!*(_BYTE *)(v25 + v42))
    goto LABEL_34;
  v28 = (*(unsigned __int8 *)(v25 + v42) - 1) << (8 * v42);
  if (v42 > 3)
    v28 = 0;
  if ((_DWORD)v42)
  {
    if (v42 <= 3)
      v29 = v42;
    else
      v29 = 4;
    __asm { BR              X11 }
  }
  v24 = v23;
  v27 = v22;
  if (v28 == -1)
    goto LABEL_34;
LABEL_23:
  if (v17 > 3)
    goto LABEL_37;
LABEL_35:
  v30 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v30 <= 0xFFFD)
  {
    if (v30 > 0xFD)
    {
      v31 = *(unsigned __int16 *)(a2 + v17);
      if (v31 < 2)
        goto LABEL_46;
      goto LABEL_42;
    }
LABEL_37:
    v31 = *(unsigned __int8 *)(a2 + v17);
    if (v31 < 2)
      goto LABEL_46;
LABEL_42:
    if (v17 <= 3)
      v32 = v17;
    else
      v32 = 4;
    __asm { BR              X12 }
  }
  v31 = *(_DWORD *)(a2 + v17);
  if (v31 >= 2)
    goto LABEL_42;
LABEL_46:
  if (v31 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(a1, a2, v24);
    v35 = (_BYTE *)((v45 + a1) & v21);
    v36 = (_BYTE *)((v45 + a2) & v21);
    if (v44)
    {
      if (!(*(unsigned int (**)(_BYTE *))(v9 + 48))(v36))
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v35, v36, v51);
        if (v17 > 3)
          goto LABEL_71;
        goto LABEL_69;
      }
    }
    else
    {
      if (!v36[v42])
        goto LABEL_68;
      v37 = (v36[v42] - 1) << (8 * v42);
      if (v42 > 3)
        v37 = 0;
      if ((_DWORD)v42)
      {
        if (v42 <= 3)
          v38 = v42;
        else
          v38 = 4;
        __asm { BR              X11 }
      }
      if (v37 == -1)
      {
LABEL_68:
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 16))((v45 + a1) & v21, v36, v51);
        v35[v42] = 0;
        if (v17 > 3)
        {
LABEL_71:
          *(_BYTE *)(a1 + v17) = 1;
          return a1;
        }
LABEL_69:
        v39 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
        if (v39 > 0xFFFD)
        {
          *(_DWORD *)(a1 + v17) = 1;
          return a1;
        }
        if (v39 > 0xFD)
        {
          *(_WORD *)(a1 + v17) = 1;
          return a1;
        }
        goto LABEL_71;
      }
    }
    memcpy(v35, v36, __n);
    if (v17 > 3)
      goto LABEL_71;
    goto LABEL_69;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(a1, a2, AssociatedTypeWitness);
  v33 = (v46 + a2) & v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))((v46 + a1) & v43, v33, v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))((((v46 + a1) & v43) + v48 + v10) & v21, (v33 + v48 + v10) & v21, v51);
  if (v17 <= 3)
  {
    v34 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
    if (v34 > 0xFFFD)
    {
      *(_DWORD *)(a1 + v17) = 0;
      return a1;
    }
    if (v34 > 0xFD)
    {
      *(_WORD *)(a1 + v17) = 0;
      return a1;
    }
  }
  *(_BYTE *)(a1 + v17) = 0;
  return a1;
}

uint64_t sub_244949DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t AssociatedTypeWitness;
  size_t __n;
  size_t __na;
  uint64_t v39;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  __n = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(__n - 8);
  v3 = *(_QWORD *)(v34 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v33 = v3 + v5;
  v6 = (v3 + v5) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v39 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v8 = *(_QWORD *)(v39 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v35 = v7;
  v10 = *(_QWORD *)(v8 + 64);
  v11 = ((v7 + v9 + v6) & ~v9) + v10;
  v12 = sub_2449CF400();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64) + v9;
  v15 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v15)
    v16 = v10;
  else
    v16 = v10 + 1;
  if (v16 + (v14 & ~v9) <= v11)
    v17 = v11;
  else
    v17 = v16 + (v14 & ~v9);
  if (v17 > 3)
    goto LABEL_8;
  v19 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v19 > 0xFFFD)
  {
    v18 = *(_DWORD *)(a2 + v17);
  }
  else
  {
    if (v19 <= 0xFD)
    {
LABEL_8:
      v18 = *(unsigned __int8 *)(a2 + v17);
      goto LABEL_13;
    }
    v18 = *(unsigned __int16 *)(a2 + v17);
  }
LABEL_13:
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v20 = v17;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  v21 = ~v9;
  if (v18 == 1)
  {
    __na = v16;
    v27 = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(a1, a2, v12);
    v28 = (_BYTE *)((v14 + a2) & v21);
    if ((_DWORD)v15)
    {
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v28, v15, v39))
      {
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))((v14 + a1) & v21, v28, v39);
        if (v17 > 3)
          goto LABEL_43;
        goto LABEL_41;
      }
    }
    else
    {
      if (!v28[v10])
        goto LABEL_40;
      v29 = (v28[v10] - 1) << (8 * v10);
      if (v10 > 3)
        v29 = 0;
      if ((_DWORD)v10)
      {
        if (v10 <= 3)
          v30 = v10;
        else
          v30 = 4;
        __asm { BR              X11 }
      }
      if (v29 == -1)
      {
LABEL_40:
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))((v14 + a1) & v21, v28, v39);
        *(_BYTE *)(((v14 + a1) & v21) + v10) = 0;
        if (v17 > 3)
        {
LABEL_43:
          *(_BYTE *)(a1 + v17) = 1;
          return v27;
        }
LABEL_41:
        v31 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
        if (v31 > 0xFFFD)
        {
          *(_DWORD *)(a1 + v17) = 1;
          return v27;
        }
        if (v31 > 0xFD)
        {
          *(_WORD *)(a1 + v17) = 1;
          return v27;
        }
        goto LABEL_43;
      }
    }
    memcpy((void *)((v14 + a1) & v21), v28, __na);
    if (v17 > 3)
      goto LABEL_43;
    goto LABEL_41;
  }
  v22 = ~v5;
  v23 = a1;
  (*(void (**)(uint64_t, uint64_t, size_t))(v34 + 32))(a1, a2, __n);
  v24 = (v33 + a1) & ~v5;
  v25 = (v33 + a2) & v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v24, v25, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v24 + v35 + v9) & v21, (v25 + v35 + v9) & v21, v39);
  if (v17 <= 3)
  {
    v26 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
    if (v26 > 0xFFFD)
    {
      v27 = a1;
      *(_DWORD *)(a1 + v17) = 0;
      return v27;
    }
    v23 = a1;
    if (v26 > 0xFD)
    {
      *(_WORD *)(a1 + v17) = 0;
      return a1;
    }
  }
  *(_BYTE *)(v23 + v17) = 0;
  return v23;
}

uint64_t sub_24494A250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  int v37;
  int v38;
  unsigned int v39;
  size_t __n;
  size_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedTypeWitness;
  uint64_t v51;

  if (a1 == a2)
    return a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v47 + 64);
  v49 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v49 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v46 = v4 + v6;
  v7 = (v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v51 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = *(_QWORD *)(v51 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v48 = v8;
  v11 = (v8 + v10 + v7) & ~v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = v11 + v12;
  v14 = sub_2449CF400();
  v15 = *(_QWORD *)(v14 - 8);
  v45 = *(_QWORD *)(v15 + 64) + v10;
  v42 = v12;
  if (*(_DWORD *)(v9 + 84))
    v16 = v12;
  else
    v16 = v12 + 1;
  if (v16 + (v45 & ~v10) <= v13)
    v17 = v13;
  else
    v17 = v16 + (v45 & ~v10);
  if (v17 > 3)
    goto LABEL_9;
  v19 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v19 > 0xFFFD)
  {
    v18 = *(_DWORD *)(a1 + v17);
  }
  else
  {
    if (v19 <= 0xFD)
    {
LABEL_9:
      v18 = *(unsigned __int8 *)(a1 + v17);
      goto LABEL_14;
    }
    v18 = *(unsigned __int16 *)(a1 + v17);
  }
LABEL_14:
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v20 = v17;
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  v43 = ~v6;
  v21 = ~v10;
  __n = v16;
  v44 = *(_DWORD *)(v9 + 84);
  if (v18 != 1)
  {
    v22 = *(_QWORD *)(v14 - 8);
    v23 = v14;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v46 + a1) & v43, v49);
    v25 = (((v46 + a1) & v43) + v48 + v10) & v21;
    goto LABEL_34;
  }
  v22 = *(_QWORD *)(v14 - 8);
  v23 = v14;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  v25 = (v45 + a1) & v21;
  if (v44)
  {
    v26 = (*(uint64_t (**)(uint64_t))(v9 + 48))((v45 + a1) & v21);
    v24 = v23;
    v27 = v22;
    if (v26)
      goto LABEL_23;
LABEL_34:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v25, v51, v24);
    v24 = v23;
    v27 = v22;
    if (v17 > 3)
      goto LABEL_37;
    goto LABEL_35;
  }
  if (!*(_BYTE *)(v25 + v42))
    goto LABEL_34;
  v28 = (*(unsigned __int8 *)(v25 + v42) - 1) << (8 * v42);
  if (v42 > 3)
    v28 = 0;
  if ((_DWORD)v42)
  {
    if (v42 <= 3)
      v29 = v42;
    else
      v29 = 4;
    __asm { BR              X11 }
  }
  v24 = v23;
  v27 = v22;
  if (v28 == -1)
    goto LABEL_34;
LABEL_23:
  if (v17 > 3)
    goto LABEL_37;
LABEL_35:
  v30 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  if (v30 <= 0xFFFD)
  {
    if (v30 > 0xFD)
    {
      v31 = *(unsigned __int16 *)(a2 + v17);
      if (v31 < 2)
        goto LABEL_46;
      goto LABEL_42;
    }
LABEL_37:
    v31 = *(unsigned __int8 *)(a2 + v17);
    if (v31 < 2)
      goto LABEL_46;
LABEL_42:
    if (v17 <= 3)
      v32 = v17;
    else
      v32 = 4;
    __asm { BR              X12 }
  }
  v31 = *(_DWORD *)(a2 + v17);
  if (v31 >= 2)
    goto LABEL_42;
LABEL_46:
  if (v31 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(a1, a2, v24);
    v35 = (_BYTE *)((v45 + a1) & v21);
    v36 = (_BYTE *)((v45 + a2) & v21);
    if (v44)
    {
      if (!(*(unsigned int (**)(_BYTE *))(v9 + 48))(v36))
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v35, v36, v51);
        if (v17 > 3)
          goto LABEL_71;
        goto LABEL_69;
      }
    }
    else
    {
      if (!v36[v42])
        goto LABEL_68;
      v37 = (v36[v42] - 1) << (8 * v42);
      if (v42 > 3)
        v37 = 0;
      if ((_DWORD)v42)
      {
        if (v42 <= 3)
          v38 = v42;
        else
          v38 = 4;
        __asm { BR              X11 }
      }
      if (v37 == -1)
      {
LABEL_68:
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))((v45 + a1) & v21, v36, v51);
        v35[v42] = 0;
        if (v17 > 3)
        {
LABEL_71:
          *(_BYTE *)(a1 + v17) = 1;
          return a1;
        }
LABEL_69:
        v39 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
        if (v39 > 0xFFFD)
        {
          *(_DWORD *)(a1 + v17) = 1;
          return a1;
        }
        if (v39 > 0xFD)
        {
          *(_WORD *)(a1 + v17) = 1;
          return a1;
        }
        goto LABEL_71;
      }
    }
    memcpy(v35, v36, __n);
    if (v17 > 3)
      goto LABEL_71;
    goto LABEL_69;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(a1, a2, AssociatedTypeWitness);
  v33 = (v46 + a2) & v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))((v46 + a1) & v43, v33, v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))((((v46 + a1) & v43) + v48 + v10) & v21, (v33 + v48 + v10) & v21, v51);
  if (v17 <= 3)
  {
    v34 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
    if (v34 > 0xFFFD)
    {
      *(_DWORD *)(a1 + v17) = 0;
      return a1;
    }
    if (v34 > 0xFD)
    {
      *(_WORD *)(a1 + v17) = 0;
      return a1;
    }
  }
  *(_BYTE *)(a1 + v17) = 0;
  return a1;
}

uint64_t sub_24494A93C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  int v29;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739FC80) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v7 + v9) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v10 + v11;
  v13 = ((*(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64) + v9) & ~v9) + v11;
  if (!*(_DWORD *)(v8 + 84))
    ++v13;
  if (v13 <= v12)
    v13 = v12;
  if (v13 > 3)
  {
    v14 = 3;
LABEL_9:
    v16 = 8;
    goto LABEL_10;
  }
  v15 = ((1 << (8 * v13)) | 2u) >> (8 * v13);
  if (v15 > 0xFFFD)
    goto LABEL_13;
  v14 = v15 + 2;
  if (v15 <= 0xFD)
    goto LABEL_9;
  v16 = 16;
LABEL_10:
  v17 = (1 << v16) - v14;
  if ((v17 & 0x80000000) == 0)
  {
    if (v13 > 3)
      goto LABEL_17;
LABEL_14:
    v18 = ((1 << (8 * v13)) | 2u) >> (8 * v13);
    v19 = 2;
    if (v18 > 0xFFFD)
      v19 = 4;
    if (v18 > 0xFD)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_13:
  v17 = 0x7FFFFFFF;
  if (v13 <= 3)
    goto LABEL_14;
LABEL_17:
  v19 = 1;
LABEL_18:
  if (!a2)
    return 0;
  if (a2 <= v17)
    goto LABEL_36;
  v20 = v19 + v13;
  v21 = 8 * v20;
  if (v20 <= 3)
  {
    v23 = ((a2 - v17 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      v22 = *(_DWORD *)(a1 + v20);
      if (!v22)
        goto LABEL_36;
      goto LABEL_29;
    }
    if (v23 > 0xFF)
    {
      v22 = *(unsigned __int16 *)(a1 + v20);
      if (!*(_WORD *)(a1 + v20))
        goto LABEL_36;
      goto LABEL_29;
    }
    if (v23 < 2)
    {
LABEL_36:
      if (v17)
      {
        if (v13 <= 3)
        {
          v31 = ((1 << (8 * v13)) | 2u) >> (8 * v13);
          if (v31 > 0xFFFD)
          {
            v26 = *(_DWORD *)(a1 + v13);
            v27 = ~v26;
LABEL_46:
            v34 = 0x7FFFFFFF;
LABEL_47:
            if (v34 > v27)
              return -v26;
            else
              return 0;
          }
          v29 = v31 + 2;
          if (v31 > 0xFD)
          {
            v33 = *(unsigned __int16 *)(a1 + v13);
            v26 = v33 | 0xFFFF0000;
            v27 = v33 ^ 0xFFFF;
            v28 = 16;
          }
          else
          {
            v32 = *(unsigned __int8 *)(a1 + v13);
            v26 = v32 | 0xFFFFFF00;
            v27 = v32 ^ 0xFF;
            v28 = 8;
          }
        }
        else
        {
          v25 = *(unsigned __int8 *)(a1 + v13);
          v26 = v25 | 0xFFFFFF00;
          v27 = v25 ^ 0xFF;
          v28 = 8;
          v29 = 3;
        }
        v34 = (1 << v28) - v29;
        if ((v34 & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_46;
      }
      return 0;
    }
  }
  v22 = *(unsigned __int8 *)(a1 + v20);
  if (!*(_BYTE *)(a1 + v20))
    goto LABEL_36;
LABEL_29:
  v24 = (v22 - 1) << v21;
  if (v20 > 3)
    v24 = 0;
  if ((_DWORD)v20)
  {
    if (v20 > 3)
      LODWORD(v20) = 4;
    __asm { BR              X12 }
  }
  return v17 + v24 + 1;
}

void sub_24494AC84(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739FC80) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v9 + v11) & ~v11;
  v13 = *(_QWORD *)(v10 + 64);
  v14 = v12 + v13;
  v15 = ((*(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64) + v11) & ~v11) + v13;
  if (!*(_DWORD *)(v10 + 84))
    ++v15;
  if (v15 <= v14)
    v15 = v14;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v20 = ((1 << v16) | 2u) >> v16;
    if (v20 > 0xFFFD)
      goto LABEL_14;
    v17 = v20 + 2;
    if (v20 > 0xFD)
    {
      v18 = 16;
LABEL_8:
      v19 = (1 << v18) - v17;
      if ((v19 & 0x80000000) == 0)
      {
        if (v15 > 3)
          goto LABEL_18;
LABEL_15:
        v21 = ((1 << v16) | 2u) >> v16;
        v22 = 2;
        if (v21 > 0xFFFD)
          v22 = 4;
        if (v21 > 0xFD)
        {
LABEL_19:
          v23 = v22 + v15;
          if (a3 <= v19)
          {
            v24 = 0;
          }
          else if (v23 <= 3)
          {
            v26 = ((a3 - v19 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
            if (HIWORD(v26))
            {
              v24 = 4u;
            }
            else if (v26 >= 0x100)
            {
              v24 = 2;
            }
            else
            {
              v24 = v26 > 1;
            }
          }
          else
          {
            v24 = 1u;
          }
          if (v19 < a2)
          {
            v25 = ~v19 + a2;
            if (v23 < 4)
            {
              if ((_DWORD)v23)
              {
                v27 = v25 & ~(-1 << (8 * v23));
                bzero(a1, v23);
                if ((_DWORD)v23 == 3)
                {
                  *(_WORD *)a1 = v27;
                  a1[2] = BYTE2(v27);
                }
                else if ((_DWORD)v23 == 2)
                {
                  *(_WORD *)a1 = v27;
                }
                else
                {
                  *a1 = v27;
                }
              }
            }
            else
            {
              bzero(a1, v23);
              *(_DWORD *)a1 = v25;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X12 }
        }
LABEL_18:
        v22 = 1;
        goto LABEL_19;
      }
LABEL_14:
      v19 = 0x7FFFFFFF;
      if (v15 > 3)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else
  {
    v17 = 3;
  }
  v18 = 8;
  goto LABEL_8;
}

uint64_t sub_24494AFF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  uint64_t v14;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (v2 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739FC80) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v5 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = v8 + v9;
  v11 = ((*(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64) + v7) & ~v7) + v9;
  if (!*(_DWORD *)(v6 + 84))
    ++v11;
  if (v11 <= v10)
    v11 = v10;
  if (v11 > 3)
    goto LABEL_6;
  v13 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
  if (v13 > 0xFFFD)
  {
    result = *(unsigned int *)(a1 + v11);
  }
  else
  {
    if (v13 <= 0xFD)
    {
LABEL_6:
      result = *(unsigned __int8 *)(a1 + v11);
      goto LABEL_11;
    }
    result = *(unsigned __int16 *)(a1 + v11);
  }
LABEL_11:
  if (result >= 2)
  {
    if (v11 <= 3)
      v14 = v11;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_24494B1D8(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t result;
  size_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int *v19;
  unsigned int v20;
  int v21;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739FC80) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v7 + v9) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v10 + v11;
  result = sub_2449CF400();
  v14 = ((*(_QWORD *)(*(_QWORD *)(result - 8) + 64) + v9) & ~v9) + v11;
  if (!*(_DWORD *)(v8 + 84))
    ++v14;
  if (v14 <= v12)
    v15 = v12;
  else
    v15 = v14;
  if (a2 > 1)
  {
    v16 = a2 - 2;
    if (v15 < 4)
    {
      v18 = (v16 >> (8 * v15)) + 2;
      v19 = (int *)&a1[v15];
      v20 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
      if (v20 > 0xFFFD)
      {
        *v19 = v18;
      }
      else if (v20 > 0xFD)
      {
        *(_WORD *)v19 = v18;
      }
      else
      {
        *(_BYTE *)v19 = v18;
      }
    }
    else
    {
      a1[v15] = 2;
    }
    if (v15 >= 4)
      v21 = 4;
    else
      v21 = v15;
    bzero(a1, v15);
    __asm { BR              X10 }
  }
  if (v15 > 3)
    goto LABEL_8;
  v17 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
  if (v17 > 0xFFFD)
  {
    *(_DWORD *)&a1[v15] = a2;
  }
  else
  {
    if (v17 <= 0xFD)
    {
LABEL_8:
      a1[v15] = a2;
      return result;
    }
    *(_WORD *)&a1[v15] = a2;
  }
  return result;
}

void sub_24494B410()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25739FD88)
  {
    type metadata accessor for LazyPropertyList();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
    v0 = sub_2449CF310();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25739FD88);
  }
}

void sub_24494B480()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25739FD90)
  {
    type metadata accessor for TransportReply();
    v0 = sub_2449CFB2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25739FD90);
  }
}

void sub_24494B4D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v9[4];

  v3 = sub_2449CF400();
  v9[1] = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  v8 = (char *)sub_24494B608 + 4 * byte_2449D3A08[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_24494B608()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TransportReply();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v3, v2 + *(int *)(TupleTypeMetadata3 + 48), v1);
  *(_QWORD *)(v4 - 96) = 0;
  *(_QWORD *)(v4 - 88) = 0xE000000000000000;
  sub_2449CFB98();
  v7 = *(_QWORD *)(v4 - 88);
  *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 96);
  *(_QWORD *)(v4 - 88) = v7;
  sub_2449CF898();
  sub_2449CFCAC();
  v8 = v2 + *(int *)(TupleTypeMetadata3 + 64);
  sub_2449CF898();
  v9 = *(_QWORD *)(v4 - 96);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v1);
  sub_24494C208(v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  return v9;
}

uint64_t sub_24494B844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;

  v10 = type metadata accessor for PipeEvent.Content(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v12 = a5 + *(int *)(type metadata accessor for PipeEvent(0, a3, a4, v11) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v12, a2, AssociatedTypeWitness);
}

uint64_t sub_24494B8F8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t result;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t AssociatedTypeWitness;
  uint64_t v56;
  uint64_t TupleTypeMetadata3;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  id v89;
  void (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;

  v3 = v2;
  v89 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v81 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v80 = (uint64_t)&v71 - v8;
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v82);
  v85 = (uint64_t *)((char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v86 = sub_2449CF724();
  v84 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v83 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for TransportReply();
  v78 = *(_QWORD *)(v87 - 8);
  v11 = MEMORY[0x24BDAC7A8](v87);
  v79 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2449CF76C();
  v91 = *(_QWORD *)(v16 - 8);
  v92 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v93 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 + 16);
  v76 = *(_QWORD *)(a2 + 24);
  v77 = v18;
  v20 = type metadata accessor for PipeEvent.Content(0, v18, v76, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v71 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v71 - v28;
  v30 = v3;
  v90 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v90((char *)&v71 - v28, v3, v20);
  LODWORD(v3) = swift_getEnumCaseMultiPayload();
  v31 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  result = v31(v29, v20);
  if ((_DWORD)v3 != 4)
  {
    v88 = v24;
    sub_2449CF748();
    v33 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v30, a2);
    v34 = v89;
    v35 = v89;
    v36 = v34;
    v37 = sub_2449CF760();
    v38 = sub_2449CFAF0();
    v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      v40 = swift_slowAlloc();
      v75 = v33;
      v41 = v40;
      v73 = (_QWORD *)swift_slowAlloc();
      v74 = swift_slowAlloc();
      v95 = v74;
      *(_DWORD *)v41 = 136446466;
      v71 = v41 + 4;
      v72 = v39;
      v42 = v90;
      v90(v27, (uint64_t)v15, v20);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a2);
      v43 = v37;
      sub_24494B4D4(v20);
      v45 = v44;
      v47 = v46;
      v31(v27, v20);
      v94 = sub_244950C54(v45, v47, &v95);
      sub_2449CFB38();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2114;
      v48 = v34;
      v49 = _swift_stdlib_bridgeErrorToNSError();
      v94 = v49;
      sub_2449CFB38();
      v50 = v73;
      *v73 = v49;

      v51 = v34;
      _os_log_impl(&dword_244921000, v43, (os_log_type_t)v72, "Failed to deliver pipe event: %{public}s\nError: %{public}@", (uint8_t *)v41, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDB0);
      swift_arrayDestroy();
      MEMORY[0x24951C224](v50, -1, -1);
      v52 = v74;
      swift_arrayDestroy();
      MEMORY[0x24951C224](v52, -1, -1);
      v53 = v41;
      v33 = v75;
      MEMORY[0x24951C224](v53, -1, -1);

      (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v92);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a2);

      v51 = v34;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v92);
      v42 = v90;
    }
    v42(v88, v33, v20);
    result = swift_getEnumCaseMultiPayload();
    if ((result - 2) >= 3)
    {
      v54 = v51;
      if ((_DWORD)result)
      {
        v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA8);
        v58 = v88;
        v66 = v80;
        sub_24494C178((uint64_t)&v88[*(int *)(v65 + 48)], v80);
        v67 = v81;
        sub_24494C1C0(v66, v81);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v67, 1, v87) == 1)
        {
          sub_244940E8C(v66, &qword_25739FD98);
          sub_244940E8C(v67, &qword_25739FD98);
        }
        else
        {
          v68 = v83;
          sub_2449CF730();
          v69 = (uint64_t)v85;
          *v85 = v51;
          swift_storeEnumTagMultiPayload();
          v70 = v51;
          __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
          sub_2449CF2E0();
          sub_244940E8C(v69, &qword_25739FDA0);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v68, v86);
          sub_244940E8C(v66, &qword_25739FD98);
          sub_24494C208(v67);
        }
        AssociatedTypeWitness = sub_2449CF400();
      }
      else
      {
        swift_getAssociatedTypeWitness();
        swift_getAssociatedConformanceWitness();
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v56 = swift_getAssociatedTypeWitness();
        TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
        v58 = v88;
        v59 = &v88[*(int *)(TupleTypeMetadata3 + 48)];
        v60 = v79;
        sub_24494C244((uint64_t)&v88[*(int *)(TupleTypeMetadata3 + 64)], v79);
        v61 = v83;
        sub_2449CF730();
        v62 = v54;
        v63 = (uint64_t)v85;
        *v85 = v62;
        swift_storeEnumTagMultiPayload();
        v64 = v62;
        __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
        sub_2449CF2E0();
        sub_244940E8C(v63, &qword_25739FDA0);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v61, v86);
        sub_24494C208(v60);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v59, v56);
      }
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v58, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t sub_24494C108(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;

  return a1(v1);
}

uint64_t sub_24494C178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24494C1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24494C208(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TransportReply();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24494C244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TransportReply();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24494C288()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25739FDB8;
  if (!qword_25739FDB8)
  {
    v1 = sub_2449CF400();
    result = MEMORY[0x24951C158](MEMORY[0x24BE76540], v1);
    atomic_store(result, (unint64_t *)&qword_25739FDB8);
  }
  return result;
}

uint64_t static EndpointProtocol<>.encode(context:)()
{
  swift_getAssociatedTypeWitness();
  return sub_2449CF658();
}

uint64_t static EndpointProtocol<>.decode(context:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_2449CF400();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  return sub_2449CF664();
}

uint64_t static EndpointProtocol<>.decode(context:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  __int128 v5;
  uint64_t MetatypeMetadata;

  MetatypeMetadata = swift_getMetatypeMetadata();
  *(_QWORD *)&v5 = a2;
  sub_24494C478();
  swift_allocError();
  sub_24493DF64(&v5, v3);
  return swift_willThrow();
}

unint64_t sub_24494C478()
{
  unint64_t result;

  result = qword_25739FDC0;
  if (!qword_25739FDC0)
  {
    result = MEMORY[0x24951C158](&unk_2449D3C1C, &type metadata for NeverCreatesStreams);
    atomic_store(result, (unint64_t *)&qword_25739FDC0);
  }
  return result;
}

uint64_t dispatch thunk of static EndpointProtocol.encode(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of static EndpointProtocol.decode(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t initializeWithCopy for NeverCreatesStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for NeverCreatesStreams(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

_OWORD *assignWithTake for NeverCreatesStreams(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for NeverCreatesStreams()
{
  return &type metadata for NeverCreatesStreams;
}

uint64_t sub_24494C6D8()
{
  sub_2449CFB98();
  sub_2449CF898();
  sub_2449CFBE0();
  sub_2449CF898();
  return 0;
}

unint64_t sub_24494C788()
{
  return 0xD000000000000017;
}

uint64_t sub_24494C7A8()
{
  return 0;
}

uint64_t sub_24494C7D4()
{
  sub_24494C8DC();
  return sub_2449CF52C();
}

uint64_t sub_24494C808()
{
  sub_24494C8DC();
  return sub_2449CF508();
}

unint64_t sub_24494C838()
{
  unint64_t result;

  result = qword_25739FDC8;
  if (!qword_25739FDC8)
  {
    result = MEMORY[0x24951C158](&unk_2449D3B3C, &type metadata for NeverCreatesStreams);
    atomic_store(result, (unint64_t *)&qword_25739FDC8);
  }
  return result;
}

unint64_t sub_24494C880()
{
  unint64_t result;

  result = qword_25739FDD0;
  if (!qword_25739FDD0)
  {
    result = MEMORY[0x24951C158](&unk_2449D3B14, &type metadata for NeverCreatesStreams);
    atomic_store(result, (unint64_t *)&qword_25739FDD0);
  }
  return result;
}

uint64_t sub_24494C8C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

unint64_t sub_24494C8DC()
{
  unint64_t result;

  result = qword_25739FDD8;
  if (!qword_25739FDD8)
  {
    result = MEMORY[0x24951C158](&unk_2449D3B84, &type metadata for NeverCreatesStreams);
    atomic_store(result, (unint64_t *)&qword_25739FDD8);
  }
  return result;
}

uint64_t sub_24494C920()
{
  sub_2449CFB98();
  sub_2449CF898();
  sub_2449CFCAC();
  sub_2449CF898();
  return 0;
}

uint64_t sub_24494C9CC(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449D3CF8, a1);
  return sub_2449CF52C();
}

uint64_t sub_24494CA00(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449D3CF8, a1);
  return sub_2449CF508();
}

uint64_t sub_24494CA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24494CB70(a1, a2, a3, qword_25739FDF8);
}

uint64_t sub_24494CA54()
{
  type metadata accessor for HostAgentSystem.AgentEndpoint.StreamContext(0);
  sub_24494CD0C();
  return sub_2449CF658();
}

uint64_t sub_24494CA9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_2449CF400();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HostAgentSystem.AgentEndpoint.StreamContext(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  sub_24494CD0C();
  return sub_2449CF664();
}

uint64_t sub_24494CB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24494CB70(a1, a2, a3, &qword_25739FDE8);
}

uint64_t sub_24494CB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v7;
  uint64_t v8;

  v8 = __swift_instantiateConcreteTypeFromMangledName(a4);
  *(_QWORD *)&v7 = v4;
  sub_24494C478();
  swift_allocError();
  sub_24493DF64(&v7, v5);
  return swift_willThrow();
}

uint64_t sub_24494CBD4()
{
  sub_24494CCC8();
  return sub_2449CF658();
}

uint64_t sub_24494CC2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_2449CF400();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_24494CCC8();
  return sub_2449CF664();
}

unint64_t sub_24494CCC8()
{
  unint64_t result;

  result = qword_25739FDE0;
  if (!qword_25739FDE0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for HostShellSystem.ShellEndpoint.StreamContext, &type metadata for HostShellSystem.ShellEndpoint.StreamContext);
    atomic_store(result, (unint64_t *)&qword_25739FDE0);
  }
  return result;
}

unint64_t sub_24494CD0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25739FDF0;
  if (!qword_25739FDF0)
  {
    v1 = type metadata accessor for HostAgentSystem.AgentEndpoint.StreamContext(255);
    result = MEMORY[0x24951C158](&protocol conformance descriptor for HostAgentSystem.AgentEndpoint.StreamContext, v1);
    atomic_store(result, (unint64_t *)&qword_25739FDF0);
  }
  return result;
}

uint64_t sub_24494CD54()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_24494CD5C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24494CDC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_24494CE38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_24494CE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_24494CE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_24494CEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_24494CED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_24494CF08(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_24494CFB8 + 4 * byte_2449D3A90[(v7 - 1)]))();
}

void sub_24494D008(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for EndpointInvalidated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EndpointInvalidated);
}

void sub_24494D1C4()
{
  JUMPOUT(0x24951C158);
}

void sub_24494D1D4()
{
  JUMPOUT(0x24951C158);
}

void sub_24494D1E4()
{
  JUMPOUT(0x24951C158);
}

uint64_t Transport.activate<A>(forReceivingMessages:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  type metadata accessor for TransportEvent(255, a3, a5, a4);
  v9 = sub_2449CFA78();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - v12;
  Transport.activate<A>(forReceivingEvents:)(v11, a2, a3, a4, a5);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  type metadata accessor for TransportMessage(0, a3, a5, v15);
  sub_2449CFA54();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t type metadata accessor for TransportEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransportEvent);
}

uint64_t Transport.transportSender<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = v5;
  v6[2] = a1;
  v6[3] = a3;
  return swift_task_switch();
}

uint64_t sub_24494D334()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD);

  v1 = v0[4];
  sub_2449CFCB8();
  v0[6] = 0;
  v0[7] = 0xE000000000000000;
  v4 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v1 + 32) + *(_QWORD *)(v1 + 32));
  v2 = (_QWORD *)swift_task_alloc();
  v0[8] = v2;
  *v2 = v0;
  v2[1] = sub_24494D3C0;
  return v4(v0[3], v0[4]);
}

uint64_t sub_24494D3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 72) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 80) = a2;
    *(_QWORD *)(v6 + 88) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_24494D438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int8x16_t *v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v7;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(int8x16_t **)(v0 + 16);
  v7 = *(int8x16_t *)(v0 + 80);
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 32) + 40))(*(_QWORD *)(v0 + 24));
  v3->i64[0] = v2;
  v3->i64[1] = v1;
  v3[1] = vextq_s8(v7, v7, 8uLL);
  v3[2].i64[0] = v4;
  v3[2].i64[1] = v5;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24494D4A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TransportSenderProtocol<>.send(oneWay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t, uint64_t);
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  os_log_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  os_log_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  v5 = v4;
  v55 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v9);
  v58 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v11);
  v57 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v49 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v45 - v18;
  v20 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_2449CF76C();
  v51 = *(_QWORD *)(v23 - 8);
  v52 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF754();
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v56 = v5;
  v26(v22, v5, a2);
  v50 = v14;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v53 = AssociatedTypeWitness;
  v54 = a1;
  v27(v19, a1, AssociatedTypeWitness);
  v28 = sub_2449CF760();
  v29 = sub_2449CFAE4();
  v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    v31 = swift_slowAlloc();
    v47 = v30;
    v32 = v31;
    v48 = swift_slowAlloc();
    v60 = v48;
    *(_DWORD *)v32 = 136446466;
    v45 = v32 + 4;
    v46 = v28;
    v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    v59 = sub_244950C54(v33, v34, &v60);
    sub_2449CFB38();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, a2);
    *(_WORD *)(v32 + 12) = 2082;
    v35 = v53;
    v27(v49, (uint64_t)v19, v53);
    v36 = sub_2449CF874();
    v59 = sub_244950C54(v36, v37, &v60);
    sub_2449CFB38();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v35);
    v38 = v46;
    _os_log_impl(&dword_244921000, v46, (os_log_type_t)v47, "%{public}s sending one-way message: %{public}s", (uint8_t *)v32, 0x16u);
    v39 = v48;
    swift_arrayDestroy();
    MEMORY[0x24951C224](v39, -1, -1);
    MEMORY[0x24951C224](v32, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, a2);
    v35 = v53;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v53);

  }
  (*(void (**)(char *, uint64_t))(v51 + 8))(v25, v52);
  v40 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  v41 = (uint64_t)v57;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 40))(v54, v35, v55, a2, a3);
  v42 = type metadata accessor for TransportReply();
  v43 = (uint64_t)v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v58, 1, 1, v42);
  v40(v41, v43);
  swift_release();
  sub_244940E8C(v43, &qword_25739FD98);
  return sub_2449299E4(v41, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
}

uint64_t TransportSenderProtocol<>.send(message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a4;
  v23 = a2;
  v24 = a3;
  v22 = a1;
  v4 = type metadata accessor for TransportReply();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE88);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (uint64_t *)((char *)&v21 - v12);
  v14 = (char *)&v21 + *(int *)(v11 + 48) - v12;
  *v13 = sub_2449CFA90();
  v15 = (uint64_t)v10 + *(int *)(v7 + 48);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE90);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v15, v14, v16);
  TransportReply.init(file:line:column:function:fulfilling:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsMessaging/Sources/PreviewsMessaging/Transport+Interface.swift", 129, 2, 128, 34, (uint64_t)"send(message:)", 14, 2, (uint64_t)v6, v15);
  TransportSenderProtocol<>.send(message:reply:)(v22, (uint64_t)v6, v23, v24, v25);
  sub_2449299E4((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  v18 = (char *)v10 + *(int *)(v7 + 48);
  v19 = *v13;
  *v10 = *v13;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v18, v14, v16);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v16);
  return v19;
}

uint64_t TransportSenderProtocol<>.send<A>(message:expecting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a7;
  v25 = a6;
  v26 = a1;
  v27 = a3;
  v28 = a5;
  v8 = type metadata accessor for TransportReply();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  sub_2449CFAC0();
  v11 = sub_2449CFA9C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v15 = (uint64_t *)((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (uint64_t *)((char *)&v25 - v17);
  v19 = (char *)&v25 + *(int *)(v16 + 48) - v17;
  *v18 = sub_2449CFA90();
  v20 = (uint64_t)v15 + *(int *)(TupleTypeMetadata2 + 48);
  v21 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v20, v19, v11);
  TransportReply.init<A>(file:line:column:function:fulfilling:)(129, 2, 138, 34, (uint64_t)"send(message:expecting:)", 24, 2, (uint64_t)v10, v20, a4, v25);
  TransportSenderProtocol<>.send(message:reply:)(v26, (uint64_t)v10, v27, v28, v29);
  sub_2449299E4((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  v22 = (char *)v15 + *(int *)(TupleTypeMetadata2 + 48);
  v23 = *v18;
  *v15 = *v18;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v22, v19, v11);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v11);
  return v23;
}

uint64_t TransportMessage<>.reply.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for TransportReply();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    sub_24494C244((uint64_t)&v4[*(int *)(TupleTypeMetadata2 + 48)], a2);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v4, AssociatedTypeWitness);
  }
  else
  {
    result = sub_2449CFCC4();
    __break(1u);
  }
  return result;
}

uint64_t TransportMessage<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for TransportReply();
    v7 = (uint64_t)&v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, v4, AssociatedTypeWitness);
    return sub_2449299E4(v7, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  }
  else
  {
    result = sub_2449CFCC4();
    __break(1u);
  }
  return result;
}

{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v8;

  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    result = sub_2449CFCC4();
    __break(1u);
  }
  else
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, v4, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_24494E048@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t TransportSender.transportDescription.getter()
{
  uint64_t v0;

  v0 = sub_244951354();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t TransportSender.messageRelay.getter()
{
  uint64_t v0;

  v0 = sub_24495135C();
  swift_retain();
  return v0;
}

uint64_t TransportSender.legacyMessageKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TransportSender.encode<A>(message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v11 = sub_2449CF400();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v5 + 40))
  {
    MEMORY[0x24BDAC7A8](v13);
    v16 = *(_QWORD *)(a2 + 24);
    *(&v20 - 8) = *(_QWORD *)(a2 + 16);
    *(&v20 - 7) = a3;
    *(&v20 - 6) = v16;
    *(&v20 - 5) = a4;
    *(&v20 - 4) = v18;
    *(&v20 - 3) = v17;
    *(&v20 - 2) = a1;
    sub_2449CF3E8();
  }
  else
  {
    sub_2449CF658();
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(a5, v15, v11);
  type metadata accessor for LazyPropertyList();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_24494E234()
{
  uint64_t v0;

  v0 = sub_244951354();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_24494E268()
{
  uint64_t v0;

  v0 = sub_24495135C();
  swift_retain();
  return v0;
}

uint64_t sub_24494E29C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return TransportSender.encode<A>(message:)(a1, a4, a2, a3, a5);
}

uint64_t sub_24494E2B0@<X0>(uint64_t a1@<X8>)
{
  return TransportSenderProtocol.encode<A>(message:)(a1);
}

uint64_t TransportSenderProtocol.encode<A>(message:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_2449CF400();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF658();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
  type metadata accessor for LazyPropertyList();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t TransportSenderProtocol<>.send(message:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t);
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *);
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  int v47;
  os_log_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = v5;
  v56 = a5;
  v58 = a2;
  v60 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v12);
  v59 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v51 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v46 - v19;
  v21 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_2449CF76C();
  v53 = *(_QWORD *)(v24 - 8);
  v54 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF754();
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v57 = v6;
  v27(v23, v6, a3);
  v52 = v15;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v55 = AssociatedTypeWitness;
  v28(v20, v60, AssociatedTypeWitness);
  v29 = sub_2449CF760();
  v30 = sub_2449CFAE4();
  v31 = v30;
  if (os_log_type_enabled(v29, v30))
  {
    v32 = swift_slowAlloc();
    v48 = v29;
    v33 = v32;
    v49 = swift_slowAlloc();
    v62 = v49;
    *(_DWORD *)v33 = 136446466;
    v46[1] = v33 + 4;
    v34 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
    v47 = v31;
    v35 = v34(a3, a4);
    v61 = sub_244950C54(v35, v36, &v62);
    v50 = v11;
    sub_2449CFB38();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, a3);
    *(_WORD *)(v33 + 12) = 2082;
    v37 = v55;
    v28(v51, (uint64_t)v20, v55);
    v38 = sub_2449CF874();
    v61 = sub_244950C54(v38, v39, &v62);
    v11 = v50;
    sub_2449CFB38();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v37);
    v40 = v48;
    _os_log_impl(&dword_244921000, v48, (os_log_type_t)v47, "%{public}s sending two-way message: %{public}s", (uint8_t *)v33, 0x16u);
    v41 = v49;
    swift_arrayDestroy();
    MEMORY[0x24951C224](v41, -1, -1);
    MEMORY[0x24951C224](v33, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, a3);
    v37 = v55;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v55);

  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v26, v54);
  v42 = (void (*)(uint64_t, char *))(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v43 = (uint64_t)v59;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(v60, v37, v56, a3, a4);
  sub_2449513C8(v58, (uint64_t)v11);
  v44 = type metadata accessor for TransportReply();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v11, 0, 1, v44);
  v42(v43, v11);
  swift_release();
  sub_244940E8C((uint64_t)v11, &qword_25739FD98);
  return sub_2449299E4(v43, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
}

uint64_t Transport.activate<A>(forReceivingEvents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  type metadata accessor for TransportEvent(255, a3, a5, a4);
  v10 = sub_2449CFA18();
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v16[-v11];
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = v5;
  swift_checkMetadataState();
  v13 = *MEMORY[0x24BEE6A10];
  v14 = sub_2449CFA18();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return sub_2449CFA84();
}

uint64_t sub_24494E928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v9 = type metadata accessor for TransportEvent(0, a2, a4, a3);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v18 - v10, a1);
  v14 = type metadata accessor for TransportMessage(0, a2, a4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a5, v11, v14);
    v16 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a5, v16, 1, v14);
}

uint64_t sub_24494EA18()
{
  return swift_deallocObject();
}

uint64_t sub_24494EA28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_24494E928(a1, v2[3], v2[4], v2[5], a2);
}

uint64_t type metadata accessor for TransportMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransportMessage);
}

uint64_t sub_24494EA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t (*v32)(uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), char *, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v61 = a6;
  v53 = a1;
  type metadata accessor for TransportEvent(255, a4, a6, a4);
  v11 = sub_2449CFA3C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v45 - v14;
  v63 = 0;
  v64 = 0xE000000000000000;
  v56 = a2;
  sub_2449CFCB8();
  v51 = v63;
  v57 = v64;
  v65 = a3;
  v66 = a5;
  v16 = __swift_allocate_boxed_opaque_existential_1(&v63);
  v49 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v49)(v16, a2, a3);
  v60 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v60(v15, a1, v11);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v58 = ((v17 + 48) & ~v17) + v13;
  v59 = (v17 + 48) & ~v17;
  v18 = v59;
  v52 = v17 | 7;
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = a3;
  *((_QWORD *)v19 + 3) = a4;
  v20 = v61;
  *((_QWORD *)v19 + 4) = a5;
  *((_QWORD *)v19 + 5) = v20;
  v62 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v62(&v19[v18], v15, v11);
  v54 = static TransportInterface.makeOneWayMessageRelay(for:using:)((uint64_t)&v63, (uint64_t)sub_2449531E8, (uint64_t)v19, a4, v20);
  v50 = v21;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  v65 = a3;
  v66 = a5;
  v48 = a5;
  v22 = __swift_allocate_boxed_opaque_existential_1(&v63);
  v47 = a3;
  ((void (*)(uint64_t *, uint64_t, uint64_t))v49)(v22, v56, a3);
  v23 = v53;
  v60(v15, v53, v11);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = a3;
  *((_QWORD *)v24 + 3) = a4;
  *((_QWORD *)v24 + 4) = a5;
  *((_QWORD *)v24 + 5) = v20;
  v25 = v15;
  v62(&v24[v59], v15, v11);
  v55 = a4;
  v26 = static TransportInterface.makeTwoWayMessageRelay(for:using:)((uint64_t)&v63, (uint64_t)sub_2449531E8, (uint64_t)v24, a4, v20);
  v28 = v27;
  v45 = v27;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  v29 = (_QWORD *)swift_allocObject();
  v30 = v50;
  v31 = v57;
  v29[2] = v51;
  v29[3] = v31;
  v32 = v54;
  v29[4] = v54;
  v29[5] = v30;
  v29[6] = v26;
  v29[7] = v28;
  v49 = v26;
  v33 = v25;
  v46 = v11;
  v60(v25, v23, v11);
  v34 = (char *)swift_allocObject();
  v35 = v47;
  v36 = v48;
  v37 = v55;
  *((_QWORD *)v34 + 2) = v47;
  *((_QWORD *)v34 + 3) = v37;
  v38 = v61;
  *((_QWORD *)v34 + 4) = v36;
  *((_QWORD *)v34 + 5) = v38;
  v62(&v34[v59], v33, v11);
  v39 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), char *, uint64_t, uint64_t))(v36 + 24);
  swift_bridgeObjectRetain();
  sub_2449531D4((uint64_t)v32);
  sub_2449531D4((uint64_t)v26);
  v39(sub_2449532CC, v29, sub_2449532F0, v34, v35, v36);
  swift_release();
  swift_release();
  v40 = v46;
  v60(v33, v53, v46);
  v41 = (char *)swift_allocObject();
  v42 = v55;
  *((_QWORD *)v41 + 2) = v35;
  *((_QWORD *)v41 + 3) = v42;
  v43 = v61;
  *((_QWORD *)v41 + 4) = v36;
  *((_QWORD *)v41 + 5) = v43;
  v62(&v41[v59], v33, v40);
  sub_2449CF64C();
  swift_bridgeObjectRelease();
  sub_2449514D4((uint64_t)v54);
  sub_2449514D4((uint64_t)v49);
  return swift_release();
}

uint64_t (*static TransportInterface.makeOneWayMessageRelay(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v5;
  _QWORD *v11;
  __int128 v13[2];

  if (swift_getAssociatedTypeWitness() == MEMORY[0x24BEE4078])
    return 0;
  sub_24495141C(a1, (uint64_t)v13);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = a2;
  v11[5] = a3;
  v11[6] = v5;
  sub_244951464(v13, (uint64_t)(v11 + 7));
  swift_retain();
  return sub_24495147C;
}

uint64_t sub_24494EF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v32 = a2;
  v9 = type metadata accessor for TransportMessage(0, a4, a6, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v30 = a6;
  v31 = (char *)&v27 - v11;
  v29 = a4;
  v13 = type metadata accessor for TransportEvent(0, a4, a6, v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v27 - v14;
  v16 = sub_2449CFA0C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v28 = a1;
  v20(v15, a1, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  sub_2449CFA3C();
  sub_2449CFA24();
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v19, v16);
  v21 = *MEMORY[0x24BEE69D0];
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((_DWORD)a1 == v21)
  {
    v23 = v31;
    v20(v31, v28, v9);
    v25 = type metadata accessor for TransportInvalidated(0, v29, v30, v24);
    MEMORY[0x24951C158](&unk_2449D4250, v25);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v26, v23, v9);
    return swift_willThrow();
  }
  return result;
}

uint64_t (*static TransportInterface.makeTwoWayMessageRelay(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  _QWORD *v11;
  __int128 v13[2];

  if (swift_getAssociatedTypeWitness() == MEMORY[0x24BEE4078])
    return 0;
  sub_24495141C(a1, (uint64_t)v13);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = a2;
  v11[5] = a3;
  v11[6] = v5;
  sub_244951464(v13, (uint64_t)(v11 + 7));
  swift_retain();
  return sub_2449514C0;
}

uint64_t sub_24494F1D8(uint64_t a1, uint64_t a2)
{
  return sub_24494F1F8(a1, a2);
}

uint64_t sub_24494F1F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t);
  void (*v17)(uint64_t, char *);
  uint64_t v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  v11 = type metadata accessor for TransportReply();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24494C1C0(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_244940E8C((uint64_t)v10, &qword_25739FD98);
    v15 = (void (*)(uint64_t))v2[2];
    if (v15)
    {
      swift_retain();
      v15(a1);
      return sub_2449514D4((uint64_t)v15);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v11);
      sub_244952CF4(0xD000000000000010, (char *)0x80000002449E35D0, (uint64_t)v8, *v2, v2[1]);
      return sub_244940E8C((uint64_t)v8, &qword_25739FD98);
    }
  }
  else
  {
    sub_24494C244((uint64_t)v10, (uint64_t)v14);
    v17 = (void (*)(uint64_t, char *))v2[4];
    if (v17)
    {
      swift_retain();
      v17(a1, v14);
      sub_2449514D4((uint64_t)v17);
    }
    else
    {
      sub_2449513C8((uint64_t)v14, (uint64_t)v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      sub_244952CF4(0xD000000000000010, (char *)0x80000002449E35F0, (uint64_t)v8, *v2, v2[1]);
      sub_244940E8C((uint64_t)v8, &qword_25739FD98);
    }
    return sub_2449299E4((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  }
}

uint64_t TransportReceiverProtocol.handleMessage@Sendable (_:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  void (*v21)(uint64_t, char *);
  uint64_t v22;
  uint64_t v23;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v23 - v12;
  v14 = type metadata accessor for TransportReply();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24494C1C0(a2, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_244940E8C((uint64_t)v13, &qword_25739FD98);
    v18 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
    if (v18)
    {
      v19 = (uint64_t)v18;
      v18(a1);
      return sub_2449514D4(v19);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, 1, 1, v14);
      TransportReceiverProtocol.informNotHandled(_:reply:)((void (*)(uint64_t, char *, uint64_t))0xD000000000000010, (char *)0x80000002449E35D0, (uint64_t)v11, a3, a4);
      return sub_244940E8C((uint64_t)v11, &qword_25739FD98);
    }
  }
  else
  {
    sub_24494C244((uint64_t)v13, (uint64_t)v17);
    v21 = (void (*)(uint64_t, char *))(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
    if (v21)
    {
      v22 = (uint64_t)v21;
      v21(a1, v17);
      sub_2449514D4(v22);
    }
    else
    {
      sub_2449513C8((uint64_t)v17, (uint64_t)v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      TransportReceiverProtocol.informNotHandled(_:reply:)((void (*)(uint64_t, char *, uint64_t))0xD000000000000010, (char *)0x80000002449E35F0, (uint64_t)v11, a3, a4);
      sub_244940E8C((uint64_t)v11, &qword_25739FD98);
    }
    return sub_2449299E4((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  }
}

uint64_t sub_24494F668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = type metadata accessor for TransportEvent(0, a3, a5, a4);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - v8;
  v10 = sub_2449CFA0C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - v12;
  v15 = type metadata accessor for TransportMessage(0, a3, a5, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 1, 1, v15);
  sub_2449CFA3C();
  sub_2449CFA24();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Transport.activate(interruptionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void (*v9)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_2449CFCB8();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0xE000000000000000;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  v9 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24);
  swift_bridgeObjectRetain();
  v9(sub_244954488, v8, a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t TransportReceiverProtocol.informNotHandled(_:reply:)(void (*a1)(uint64_t, char *, uint64_t), char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  id v45;
  _QWORD v46[2];
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  v56 = a3;
  v57 = a2;
  v53 = a1;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v48);
  v52 = (_QWORD *)((char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_2449CF724();
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v49 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v10);
  v58 = (uint64_t)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2449CF76C();
  v54 = *(_QWORD *)(v12 - 8);
  v55 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2449CF424();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v46 - v20;
  v59 = 0;
  v60 = 0xE000000000000000;
  sub_2449CFB98();
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  v24 = v23;
  swift_bridgeObjectRelease();
  v59 = v22;
  v60 = v24;
  sub_2449CF898();
  sub_2449CF898();
  sub_2449CF430();
  sub_2449CF748();
  v25 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v57 = v21;
  v25(v19, v21, v15);
  v26 = sub_2449CF760();
  v27 = sub_2449CFAF0();
  v28 = os_log_type_enabled(v26, v27);
  v53 = (void (*)(uint64_t, char *, uint64_t))v25;
  if (v28)
  {
    v29 = swift_slowAlloc();
    v47 = v14;
    v30 = v15;
    v31 = (uint8_t *)v29;
    v32 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v31 = 138543362;
    v46[1] = v31 + 4;
    sub_2449515C0(&qword_25739FE98, MEMORY[0x24BE765F0]);
    swift_allocError();
    v25(v33, v19, v30);
    v34 = _swift_stdlib_bridgeErrorToNSError();
    v59 = v34;
    sub_2449CFB38();
    *v32 = v34;
    v35 = *(void (**)(char *, uint64_t))(v16 + 8);
    v35(v19, v30);
    _os_log_impl(&dword_244921000, v26, v27, "%{public}@", v31, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDB0);
    swift_arrayDestroy();
    MEMORY[0x24951C224](v32, -1, -1);
    v36 = v31;
    v15 = v30;
    v14 = v47;
    MEMORY[0x24951C224](v36, -1, -1);
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t))(v16 + 8);
    v35(v19, v15);
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v55);
  v37 = v58;
  sub_24494C1C0(v56, v58);
  v38 = type metadata accessor for TransportReply();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38) == 1)
  {
    v35(v57, v15);
    return sub_244940E8C(v37, &qword_25739FD98);
  }
  else
  {
    sub_2449515C0(&qword_25739FE98, MEMORY[0x24BE765F0]);
    v40 = (void *)swift_allocError();
    v41 = v57;
    v53(v42, v57, v15);
    v43 = v49;
    sub_2449CF730();
    v44 = (uint64_t)v52;
    *v52 = v40;
    swift_storeEnumTagMultiPayload();
    v45 = v40;
    __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    sub_2449CF2E0();
    sub_244940E8C(v44, &qword_25739FDA0);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    v35(v41, v15);

    return sub_2449299E4(v37, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  }
}

uint64_t sub_24494FD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[5];

  v6[3] = MEMORY[0x24BEE0D00];
  v6[4] = MEMORY[0x24BE76CB0];
  v6[0] = a1;
  v6[1] = a2;
  sub_2449CF37C();
  v4 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a3, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t static TransportInterface.unarchive<A>(_:for:)@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t MetatypeMetadata;
  uint64_t v43;
  uint64_t v44;

  v44 = a4;
  v38 = a5;
  v9 = sub_2449CF400();
  v39 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v36 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v36 - v16;
  v18 = swift_conformsToProtocol2();
  if (v18)
    v19 = v18;
  else
    v19 = 0;
  if (v18)
    v20 = a3;
  else
    v20 = 0;
  if (!v20)
  {
    MetatypeMetadata = swift_getMetatypeMetadata();
    *(_QWORD *)&v41 = a3;
    sub_2449514E8();
    swift_allocError();
    v31 = v44;
    *(_QWORD *)v32 = a2;
    *(_QWORD *)(v32 + 8) = v31;
    sub_24493DF64(&v41, (_OWORD *)(v32 + 16));
    return swift_willThrow();
  }
  v44 = v19;
  result = LazyPropertyList.propertyList.getter((uint64_t)v17);
  if (v5)
    return result;
  v37 = 0;
  v23 = a1[3];
  v22 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 40))(v23, v22);
  if (v25)
  {
    v26 = v24;
    v27 = v25;
    v29 = v39;
    v28 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v15, v17, v40);
    MetatypeMetadata = v20;
    v43 = v44;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v41);
    v30 = v37;
    sub_24494FD40(v26, v27, (uint64_t)v15);
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v28);
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v41);
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v28);
  }
  else
  {
    v34 = v39;
    v33 = v40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v12, v17, v40);
    MetatypeMetadata = v20;
    v43 = v44;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v41);
    v35 = v37;
    sub_2449CF664();
    if (v35)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v33);
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)&v41);
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v33);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FEA8);
  return swift_dynamicCast();
}

uint64_t static TransportInterface.invalidatedError.getter@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = sub_2449CF424();
  a1[4] = sub_2449515C0((unint64_t *)&qword_25739FEB0, MEMORY[0x24BE765D8]);
  __swift_allocate_boxed_opaque_existential_1(a1);
  return sub_2449CF430();
}

uint64_t sub_2449500AC(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  _QWORD v19[2];

  v11 = sub_2449CF76C();
  v19[0] = *(_QWORD *)(v11 - 8);
  v19[1] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = type metadata accessor for TransportMessage(0, a6, a7, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v19 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  static TransportInterface.unarchive<A>(_:for:)(a5, a6, AssociatedTypeWitness, a7, (uint64_t)v16);
  swift_storeEnumTagMultiPayload();
  a2(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_24495034C(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  _QWORD v22[2];
  void (*v23)(char *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22[1] = a4;
  v23 = a3;
  v30 = a2;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v26);
  v11 = sub_2449CF724();
  v28 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v27 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2449CF76C();
  v24 = *(_QWORD *)(v13 - 8);
  v25 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = type metadata accessor for TransportMessage(0, a7, a8, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v22 - v17;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  static TransportInterface.unarchive<A>(_:for:)(a6, a7, AssociatedTypeWitness, a8, (uint64_t)v18);
  type metadata accessor for TransportReply();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_2449513C8(v30, (uint64_t)&v18[*(int *)(TupleTypeMetadata2 + 48)]);
  swift_storeEnumTagMultiPayload();
  v23(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_244950728()
{
  _QWORD v1[2];

  strcpy((char *)v1, "Interface = ");
  sub_2449CFDCC();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  return v1[0];
}

uint64_t sub_24495078C()
{
  sub_2449CFB98();
  sub_2449CFBE0();
  sub_2449CF898();
  return 0;
}

uint64_t sub_24495081C()
{
  sub_244952CB0();
  return sub_2449CF52C();
}

uint64_t sub_244950844()
{
  sub_244952CB0();
  return sub_2449CF508();
}

uint64_t sub_24495086C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v19 - v6;
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  v13 = type metadata accessor for TransportMessage(0, v3, v2, v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, v1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, AssociatedTypeWitness);
    v19 = 0;
    v20 = 0xE000000000000000;
    type metadata accessor for TransportReply();
    v17 = (uint64_t)&v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    sub_2449CF898();
    sub_2449CFCAC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    sub_2449299E4(v17, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
    v19 = 0;
    v20 = 0xE000000000000000;
    sub_2449CF898();
    sub_2449CFCAC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v19 = 0;
  v20 = 0xE000000000000000;
  sub_2449CFB98();
  sub_2449CF898();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_244950AF8(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449D41B8, a1);
  return sub_2449CF52C();
}

uint64_t sub_244950B2C(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449D41B8, a1);
  return sub_2449CF508();
}

uint64_t sub_244950B60(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_244950B70(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_244950BA4(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_244950BC4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_244950BE4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_244950C54(v6, v7, a3);
  v8 = *a1 + 8;
  sub_2449CFB38();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_244950C54(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_244950D24(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_24493DF74((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_24493DF74((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_244950D24(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2449CFB44();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_244950EDC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_2449CFBD4();
  if (!v8)
  {
    sub_2449CFBEC();
    __break(1u);
LABEL_17:
    result = sub_2449CFC04();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_244950EDC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_244950F70(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_244951148(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_244951148(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_244950F70(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_2449510E4(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_2449CFBA4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2449CFBEC();
      __break(1u);
LABEL_10:
      v2 = sub_2449CF8A4();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2449CFC04();
    __break(1u);
LABEL_14:
    result = sub_2449CFBEC();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_2449510E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(qword_2573A0098);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_244951148(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_2573A0098);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2449CFC04();
  __break(1u);
  return result;
}

_BYTE **sub_244951294(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void sub_2449512A4(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  sub_2449CFB38();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t sub_244951354()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_24495135C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_244951364(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v2[3];
  v5 = v2[7];
  v6 = v2[8];
  *a1 = v2[6];
  a1[1] = v5;
  v7 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, v6, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v4);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2449513C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TransportReply();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24495140C(uint64_t a1)
{
  uint64_t *v1;

  return sub_24494EA40(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_24495141C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_244951464(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_24495147C(uint64_t a1)
{
  uint64_t v1;

  return sub_2449500AC(a1, *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), (_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t objectdestroy_4Tm()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

uint64_t sub_2449514C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24495034C(a1, a2, *(void (**)(char *))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), (_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_2449514D4(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

unint64_t sub_2449514E8()
{
  unint64_t result;

  result = qword_25739FEA0;
  if (!qword_25739FEA0)
  {
    result = MEMORY[0x24951C158](&unk_2449D40DC, &type metadata for InvalidInterfaceType);
    atomic_store(result, (unint64_t *)&qword_25739FEA0);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x24951C224);
  return result;
}

uint64_t sub_2449515C0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_2449CF424();
    result = MEMORY[0x24951C158](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_244951600(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_244951608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for TransportMessage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_244951660(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *, uint64_t *, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11;
  v13 = v8 + v11;
  v14 = *(_QWORD *)(v10 + 64);
  if (((v8 + v12) & (unint64_t)~v12) + v14 <= v5)
    v15 = v5;
  else
    v15 = ((v8 + v11) & ~(unint64_t)v11) + v14;
  v16 = v15 + 1;
  v17 = *(_DWORD *)(v7 + 80);
  v18 = *(_DWORD *)(v4 + 80) | v17 | v11;
  v19 = (*(_BYTE *)(v4 + 80) | v17 | v11);
  v20 = v18 & 0x100000;
  if (v19 > 7 || v20 != 0 || v16 > 0x18)
  {
    v23 = *a2;
    *a1 = *a2;
    v24 = (uint64_t *)(v23 + ((v19 + 16) & ~v19));
    swift_retain();
  }
  else
  {
    v25 = *((unsigned __int8 *)a2 + v15);
    if (v25 > 1)
    {
      v24 = a1;
      memcpy(a1, a2, v16);
    }
    else if (v25 == 1)
    {
      v26 = v9;
      v27 = ~v12;
      v24 = a1;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v13) & v27, ((unint64_t)a2 + v13) & v27, v26);
      *((_BYTE *)a1 + v15) = 1;
    }
    else
    {
      v28 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
      v24 = a1;
      v28(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v15) = 0;
    }
  }
  return v24;
}

uint64_t sub_244951810(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  result = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = *(_QWORD *)(result - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v11 & ~v10) + *(_QWORD *)(v9 + 64);
  if (v12 <= v4)
    v12 = v4;
  v13 = *(unsigned __int8 *)(a1 + v12);
  if (v13 <= 1)
  {
    if (v13 == 1)
    {
      v14 = result;
      v15 = ~v10;
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
      v17 = (v11 + a1) & v15;
      v16 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
      v18 = v14;
    }
    else
    {
      v16 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      v17 = a1;
      v18 = AssociatedTypeWitness;
    }
    return v16(v17, v18);
  }
  return result;
}

void *sub_244951938(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void *, unsigned __int8 *, uint64_t);
  void *v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = *(_QWORD *)(v10 + 64);
  if (((v8 + v11) & (unint64_t)~v11) + v13 <= v5)
    v14 = v5;
  else
    v14 = ((v8 + v11) & ~v11) + v13;
  v15 = a2[v14];
  if (v15 > 1)
  {
    v19 = a1;
    memcpy(a1, a2, v14 + 1);
  }
  else if (v15 == 1)
  {
    v16 = v9;
    v17 = ~v11;
    v19 = a1;
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v17, (unint64_t)&a2[v12] & v17, v16);
    *((_BYTE *)a1 + v14) = 1;
  }
  else
  {
    v18 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16);
    v19 = a1;
    v18(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v14) = 0;
  }
  return v19;
}

unsigned __int8 *sub_244951A9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  void (*v19)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unsigned __int8 *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = v8[8];
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ~v12;
  v14 = v9 + v12;
  v15 = ((v9 + v12) & ~v12) + *(_QWORD *)(v11 + 64);
  if (v15 > v6)
    v6 = v15;
  v16 = a1[v6];
  v17 = a2[v6];
  if (v16 > 1)
  {
    if (v17 <= 1)
    {
      if (v17 == 1)
      {
        v19 = (void (*)(unsigned __int8 *, unsigned __int8 *, uint64_t))v8[2];
        v20 = v10;
        v21 = v13;
        v19(a1, a2, v7);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((unint64_t)&a1[v14] & v21, (unint64_t)&a2[v14] & v21, v20);
LABEL_23:
        a1[v6] = 1;
        return a1;
      }
LABEL_24:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v6] = 0;
      return a1;
    }
    goto LABEL_14;
  }
  if (v17 > 1)
  {
    if (v16 == 1)
    {
      v22 = (void (*)(unsigned __int8 *, uint64_t))v8[1];
      v23 = v10;
      v24 = v13;
      v22(a1, v7);
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&a1[v14] & v24, v23);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
LABEL_14:
    memcpy(a1, a2, v6 + 1);
    return a1;
  }
  if (a1 != a2)
  {
    v18 = v13;
    v28 = v10;
    if (v16 == 1)
    {
      ((void (*)(unsigned __int8 *, uint64_t))v8[1])(a1, v7);
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&a1[v14] & v18, v28);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    v25 = a2[v6];
    if (v25 >= 2)
    {
      if (v6 <= 3)
        v26 = v6;
      else
        v26 = 4;
      __asm { BR              X12 }
    }
    if (v25 == 1)
    {
      ((void (*)(unsigned __int8 *, unsigned __int8 *, uint64_t))v8[2])(a1, a2, v7);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((unint64_t)&a1[v14] & v18, (unint64_t)&a2[v14] & v18, v28);
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  return a1;
}

void *sub_244951D4C(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void *, unsigned __int8 *, uint64_t);
  void *v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = *(_QWORD *)(v10 + 64);
  if (((v8 + v11) & (unint64_t)~v11) + v13 <= v5)
    v14 = v5;
  else
    v14 = ((v8 + v11) & ~v11) + v13;
  v15 = a2[v14];
  if (v15 > 1)
  {
    v19 = a1;
    memcpy(a1, a2, v14 + 1);
  }
  else if (v15 == 1)
  {
    v16 = v9;
    v17 = ~v11;
    v19 = a1;
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)a1 + v12) & v17, (unint64_t)&a2[v12] & v17, v16);
    *((_BYTE *)a1 + v14) = 1;
  }
  else
  {
    v18 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 32);
    v19 = a1;
    v18(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v14) = 0;
  }
  return v19;
}

unsigned __int8 *sub_244951EB0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  void (*v19)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unsigned __int8 *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = v8[8];
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ~v12;
  v14 = v9 + v12;
  v15 = ((v9 + v12) & ~v12) + *(_QWORD *)(v11 + 64);
  if (v15 > v6)
    v6 = v15;
  v16 = a1[v6];
  v17 = a2[v6];
  if (v16 > 1)
  {
    if (v17 <= 1)
    {
      if (v17 == 1)
      {
        v19 = (void (*)(unsigned __int8 *, unsigned __int8 *, uint64_t))v8[4];
        v20 = v10;
        v21 = v13;
        v19(a1, a2, v7);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((unint64_t)&a1[v14] & v21, (unint64_t)&a2[v14] & v21, v20);
LABEL_23:
        a1[v6] = 1;
        return a1;
      }
LABEL_24:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v6] = 0;
      return a1;
    }
    goto LABEL_14;
  }
  if (v17 > 1)
  {
    if (v16 == 1)
    {
      v22 = (void (*)(unsigned __int8 *, uint64_t))v8[1];
      v23 = v10;
      v24 = v13;
      v22(a1, v7);
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&a1[v14] & v24, v23);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
LABEL_14:
    memcpy(a1, a2, v6 + 1);
    return a1;
  }
  if (a1 != a2)
  {
    v18 = v13;
    v28 = v10;
    if (v16 == 1)
    {
      ((void (*)(unsigned __int8 *, uint64_t))v8[1])(a1, v7);
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&a1[v14] & v18, v28);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    v25 = a2[v6];
    if (v25 >= 2)
    {
      if (v6 <= 3)
        v26 = v6;
      else
        v26 = 4;
      __asm { BR              X12 }
    }
    if (v25 == 1)
    {
      ((void (*)(unsigned __int8 *, unsigned __int8 *, uint64_t))v8[4])(a1, a2, v7);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((unint64_t)&a1[v14] & v18, (unint64_t)&a2[v14] & v18, v28);
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  return a1;
}

uint64_t sub_244952160(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  if (((v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= v4)
    v7 = v4;
  else
    v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_22;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
  if (HIWORD(v12))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_15;
LABEL_22:
    v14 = *(unsigned __int8 *)(a1 + v7);
    if (v14 >= 2)
      v15 = (v14 ^ 0xFF) + 1;
    else
      v15 = 0;
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
  if (v12 > 0xFF)
  {
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_15;
    goto LABEL_22;
  }
  if (v12 < 2)
    goto LABEL_22;
LABEL_7:
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_22;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 254);
}

void sub_244952310(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = ((v7 + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (v9 <= v6)
    v9 = v6;
  v10 = v9 + 1;
  if (a3 < 0xFE)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 253) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v12 = a2 - 254;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_244952530(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v5 = ((v3 + *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (v5 <= v2)
    v5 = v2;
  v6 = *(unsigned __int8 *)(a1 + v5);
  if (v6 >= 2)
    return (v6 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_2449525EC(void *a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  size_t v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  result = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v7 <= v4)
    v7 = v4;
  if (a2 > 0xFE)
  {
    v8 = (v7 + 1);
    if ((_DWORD)v7 != -1)
    {
      if (v8 <= 3)
        v9 = v7 + 1;
      else
        v9 = 4;
      bzero(a1, v8);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *((_BYTE *)a1 + v7) = -(char)a2;
  }
  return result;
}

uint64_t sub_24495272C()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[6];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = AssociatedTypeWitness;
  if (v2 <= 0x3F)
  {
    v7[4] = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
    v1 = swift_getAssociatedTypeWitness();
    if (v3 <= 0x3F)
    {
      sub_24494B410();
      if (v5 > 0x3F)
      {
        return v4;
      }
      else
      {
        swift_getTupleTypeLayout2();
        v7[5] = v7;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return v1;
}

uint64_t sub_244952844(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v5 = ((v3 + *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (v5 <= v2)
    v5 = v2;
  result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_244952960(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  if (a2 > 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v9 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v10 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    if (((v9 + *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) <= v8)
      v11 = v8;
    else
      v11 = ((v9 + *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
    v12 = a2 - 2;
    if (v11 < 4)
    {
      v13 = v12 >> (8 * v11);
      v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 2;
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 2;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v5 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    v6 = ((v4 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v6 > v7)
      v7 = v6;
    a1[v7] = a2;
  }
}

uint64_t sub_244952B10()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for TransportSender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransportSender);
}

uint64_t dispatch thunk of TransportSenderProtocol.transportDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TransportSenderProtocol.messageRelay.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TransportSenderProtocol.encode<A>(message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of TransportReceiverProtocol.transportDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TransportReceiverProtocol.oneWayMessageRelay.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t destroy for InvalidInterfaceType(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for InvalidInterfaceType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 16, a2 + 16);
  return a1;
}

uint64_t assignWithCopy for InvalidInterfaceType(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

_OWORD *assignWithTake for InvalidInterfaceType(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  *a1 = *a2;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for InvalidInterfaceType()
{
  return &type metadata for InvalidInterfaceType;
}

unint64_t sub_244952C24()
{
  unint64_t result;

  result = qword_2573A0080;
  if (!qword_2573A0080)
  {
    result = MEMORY[0x24951C158](&unk_2449D3FFC, &type metadata for InvalidInterfaceType);
    atomic_store(result, (unint64_t *)&qword_2573A0080);
  }
  return result;
}

unint64_t sub_244952C6C()
{
  unint64_t result;

  result = qword_2573A0088;
  if (!qword_2573A0088)
  {
    result = MEMORY[0x24951C158](&unk_2449D3FD4, &type metadata for InvalidInterfaceType);
    atomic_store(result, (unint64_t *)&qword_2573A0088);
  }
  return result;
}

unint64_t sub_244952CB0()
{
  unint64_t result;

  result = qword_2573A0090;
  if (!qword_2573A0090)
  {
    result = MEMORY[0x24951C158](&unk_2449D4044, &type metadata for InvalidInterfaceType);
    atomic_store(result, (unint64_t *)&qword_2573A0090);
  }
  return result;
}

uint64_t sub_244952CF4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  id v42;
  _QWORD v43[2];
  char *v44;
  _QWORD *v45;
  void (*v46)(uint64_t, char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v53 = a3;
  v54 = a2;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v47);
  v8 = (_QWORD *)((char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_2449CF724();
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v11);
  v55 = (uint64_t)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2449CF76C();
  v51 = *(_QWORD *)(v13 - 8);
  v52 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2449CF424();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v43 - v21;
  v56 = 0;
  v57 = 0xE000000000000000;
  sub_2449CFB98();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = a4;
  v57 = a5;
  sub_2449CF898();
  sub_2449CF898();
  sub_2449CF430();
  sub_2449CF748();
  v23 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v54 = v22;
  v23(v20, v22, v16);
  v24 = sub_2449CF760();
  v25 = sub_2449CFAF0();
  v26 = os_log_type_enabled(v24, v25);
  v46 = (void (*)(uint64_t, char *, uint64_t))v23;
  if (v26)
  {
    v45 = v8;
    v27 = swift_slowAlloc();
    v44 = v15;
    v28 = v16;
    v29 = (uint8_t *)v27;
    v30 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v29 = 138543362;
    v43[1] = v29 + 4;
    sub_2449515C0(&qword_25739FE98, MEMORY[0x24BE765F0]);
    swift_allocError();
    v23(v31, v20, v28);
    v32 = _swift_stdlib_bridgeErrorToNSError();
    v56 = v32;
    sub_2449CFB38();
    *v30 = v32;
    v8 = v45;
    v33 = *(void (**)(char *, uint64_t))(v17 + 8);
    v33(v20, v28);
    _os_log_impl(&dword_244921000, v24, v25, "%{public}@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDB0);
    swift_arrayDestroy();
    MEMORY[0x24951C224](v30, -1, -1);
    v34 = v29;
    v16 = v28;
    v15 = v44;
    MEMORY[0x24951C224](v34, -1, -1);
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t))(v17 + 8);
    v33(v20, v16);
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v15, v52);
  v35 = v55;
  sub_24494C1C0(v53, v55);
  v36 = type metadata accessor for TransportReply();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36) == 1)
  {
    v33(v54, v16);
    return sub_244940E8C(v35, &qword_25739FD98);
  }
  else
  {
    sub_2449515C0(&qword_25739FE98, MEMORY[0x24BE765F0]);
    v38 = (void *)swift_allocError();
    v39 = v54;
    v46(v40, v54, v16);
    v41 = v48;
    sub_2449CF730();
    *v8 = v38;
    swift_storeEnumTagMultiPayload();
    v42 = v38;
    __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    sub_2449CF2E0();
    sub_244940E8C((uint64_t)v8, &qword_25739FDA0);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v41, v50);
    v33(v39, v16);

    return sub_2449299E4(v35, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  }
}

uint64_t sub_2449531D4(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_2449531E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244953200(a1, a2, a3, a4);
}

uint64_t sub_244953200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = v4[2];
  v7 = v4[3];
  v8 = v4[4];
  v9 = v4[5];
  type metadata accessor for TransportEvent(255, v7, v9, a4);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_2449CFA3C() - 8) + 80);
  return sub_24494EF08(a1, (uint64_t)v4 + ((v10 + 48) & ~v10), v6, v7, v8, v9);
}

uint64_t objectdestroy_10Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_2449532CC(uint64_t a1, uint64_t a2)
{
  return sub_24494F1F8(a1, a2);
}

uint64_t sub_2449532F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = v4[5];
  type metadata accessor for TransportEvent(255, v6, v8, a4);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_2449CFA3C() - 8) + 80);
  return sub_24494F668((uint64_t)v4 + ((v9 + 48) & ~v9), v5, v6, v7, v8);
}

uint64_t objectdestroy_13Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for TransportEvent(255, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 40), a4);
  v5 = sub_2449CFA3C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
  return swift_deallocObject();
}

uint64_t sub_2449533D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for TransportEvent(255, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 40), a4);
  sub_2449CFA3C();
  return sub_2449CFA30();
}

uint64_t type metadata accessor for TransportInvalidated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TransportInvalidated);
}

uint64_t sub_244953430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for TransportMessage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24495349C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11;
  v13 = v8 + v11;
  v14 = *(_QWORD *)(v10 + 64);
  if (((v8 + v12) & (unint64_t)~v12) + v14 <= v5)
    v15 = v5;
  else
    v15 = ((v8 + v11) & ~(unint64_t)v11) + v14;
  v16 = *(_DWORD *)(v7 + 80);
  v17 = *(_DWORD *)(v4 + 80) | v16 | v11;
  v18 = (*(_BYTE *)(v4 + 80) | v16 | v11);
  v19 = v17 & 0x100000;
  if (v18 > 7 || v19 != 0 || v15 + 1 > 0x18)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v18 + 16) & ~v18));
    swift_retain();
  }
  else
  {
    v23 = v9;
    v24 = *((unsigned __int8 *)a2 + v15);
    if (v24 >= 2)
    {
      if (v15 <= 3)
        v25 = v15;
      else
        v25 = 4;
      __asm { BR              X13 }
    }
    if (v24 == 1)
    {
      v26 = ~v12;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v13) & v26, ((unint64_t)a2 + v13) & v26, v23);
      *((_BYTE *)a1 + v15) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v15) = 0;
    }
  }
  return a1;
}

uint64_t sub_2449536AC(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v11 & ~v10) + *(_QWORD *)(v9 + 64);
  if (v12 <= v4)
    v12 = v4;
  v13 = *(unsigned __int8 *)(a1 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 1)
  {
    v15 = ~v10;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v16 = (v11 + a1) & v15;
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    v18 = v8;
  }
  else
  {
    v17 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    v16 = a1;
    v18 = AssociatedTypeWitness;
  }
  return v17(v16, v18);
}

uint64_t sub_244953820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = *(_QWORD *)(v10 + 64);
  if (((v8 + v11) & (unint64_t)~v11) + v13 <= v5)
    v14 = v5;
  else
    v14 = ((v8 + v11) & ~v11) + v13;
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
  {
    v17 = ~v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))((v12 + a1) & v17, (v12 + a2) & v17, v9);
    v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
    v18 = 0;
  }
  *(_BYTE *)(a1 + v14) = v18;
  return a1;
}

uint64_t sub_2449539C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v6 = swift_getAssociatedTypeWitness();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v12 = v8 + v11;
    v13 = *(_QWORD *)(v10 + 64);
    if (((v8 + v11) & (unint64_t)~v11) + v13 <= v5)
      v14 = v5;
    else
      v14 = ((v8 + v11) & ~v11) + v13;
    v15 = *(unsigned __int8 *)(a1 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X13 }
    }
    v17 = ~v11;
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v12 + a1) & v17, v9);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, AssociatedTypeWitness);
    }
    v18 = *(unsigned __int8 *)(a2 + v14);
    if (v18 >= 2)
    {
      if (v14 <= 3)
        v19 = v14;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))((v12 + a1) & v17, (v12 + a2) & v17, v9);
      v20 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
      v20 = 0;
    }
    *(_BYTE *)(a1 + v14) = v20;
  }
  return a1;
}

uint64_t sub_244953C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = *(_QWORD *)(v10 + 64);
  if (((v8 + v11) & (unint64_t)~v11) + v13 <= v5)
    v14 = v5;
  else
    v14 = ((v8 + v11) & ~v11) + v13;
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
  {
    v17 = ~v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v12 + a1) & v17, (v12 + a2) & v17, v9);
    v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, a2, AssociatedTypeWitness);
    v18 = 0;
  }
  *(_BYTE *)(a1 + v14) = v18;
  return a1;
}

uint64_t sub_244953E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v6 = swift_getAssociatedTypeWitness();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v12 = v8 + v11;
    v13 = *(_QWORD *)(v10 + 64);
    if (((v8 + v11) & (unint64_t)~v11) + v13 <= v5)
      v14 = v5;
    else
      v14 = ((v8 + v11) & ~v11) + v13;
    v15 = *(unsigned __int8 *)(a1 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X13 }
    }
    v17 = ~v11;
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v12 + a1) & v17, v9);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, AssociatedTypeWitness);
    }
    v18 = *(unsigned __int8 *)(a2 + v14);
    if (v18 >= 2)
    {
      if (v14 <= 3)
        v19 = v14;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v12 + a1) & v17, (v12 + a2) & v17, v9);
      v20 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, a2, AssociatedTypeWitness);
      v20 = 0;
    }
    *(_BYTE *)(a1 + v14) = v20;
  }
  return a1;
}

uint64_t sub_244954090(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  if (((v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= v4)
    v7 = v4;
  else
    v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_22:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 2)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_22;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 255);
}

void sub_244954234(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = ((v7 + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (v9 <= v6)
    v9 = v6;
  v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_244954454()
{
  JUMPOUT(0x24951C158);
}

void sub_244954464()
{
  JUMPOUT(0x24951C158);
}

void sub_244954474()
{
  JUMPOUT(0x24951C158);
}

PreviewsMessagingOS::ContentCategory __swiftcall ContentCategory.init(rawValue:)(PreviewsMessagingOS::ContentCategory rawValue)
{
  PreviewsMessagingOS::ContentCategory *v1;

  *v1 = rawValue;
  return rawValue;
}

PreviewsMessagingOS::ContentCategory __swiftcall ContentCategory.init(stringLiteral:)(PreviewsMessagingOS::ContentCategory stringLiteral)
{
  PreviewsMessagingOS::ContentCategory *v1;

  *v1 = stringLiteral;
  return stringLiteral;
}

_QWORD *sub_24495449C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_2449544A8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2449544C4()
{
  sub_244954CE4();
  return sub_2449CF670();
}

uint64_t sub_24495450C()
{
  sub_244954CE4();
  return sub_2449CF67C();
}

uint64_t ContentCategory.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24495459C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void static ContentCategory.applicationPreviewInstance.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000026;
  a1[1] = 0x80000002449E3990;
}

void static ContentCategory.widgetPreviewInstance.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000021;
  a1[1] = 0x80000002449E39C0;
}

void static ContentCategory.complicationPreviewInstance.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000027;
  a1[1] = 0x80000002449E39F0;
}

void static ContentCategory.applicationMainPreview.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000022;
  a1[1] = 0x80000002449E3A20;
}

void static ContentCategory.runningAppPreview.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x80000002449E3A50;
}

void static ContentCategory.previewProvider.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x80000002449E3A70;
}

void static ContentCategory.previewPreflight.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x80000002449E3A90;
}

void static ContentCategory.registryPreflight.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x80000002449E3AB0;
}

void static ContentCategory.registryExecution.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x80000002449E3AD0;
}

void static ContentCategory.cFunction.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000002449E3AF0;
}

uint64_t sub_244954708()
{
  sub_244954CA0();
  return sub_2449CF670();
}

uint64_t sub_244954750()
{
  sub_244954CA0();
  return sub_2449CF67C();
}

uint64_t sub_2449547B4()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24495480C()
{
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244954850()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_2449548A4(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2449CFCD0();
}

uint64_t sub_2449548D4()
{
  sub_244954C5C();
  return sub_2449CF670();
}

uint64_t sub_24495491C()
{
  sub_244954C5C();
  return sub_2449CF67C();
}

unint64_t sub_244954984()
{
  unint64_t result;

  result = qword_2573A0120;
  if (!qword_2573A0120)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentCategory, &type metadata for ContentCategory);
    atomic_store(result, (unint64_t *)&qword_2573A0120);
  }
  return result;
}

uint64_t sub_2449549C8()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_2449549D8()
{
  unint64_t result;

  result = qword_2573A0128;
  if (!qword_2573A0128)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentCategory, &type metadata for ContentCategory);
    atomic_store(result, (unint64_t *)&qword_2573A0128);
  }
  return result;
}

unint64_t sub_244954A20()
{
  unint64_t result;

  result = qword_2573A0130;
  if (!qword_2573A0130)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentCategory, &type metadata for ContentCategory);
    atomic_store(result, (unint64_t *)&qword_2573A0130);
  }
  return result;
}

uint64_t sub_244954A64()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_244954A70()
{
  return MEMORY[0x24BEE0D88];
}

unint64_t sub_244954A80()
{
  unint64_t result;

  result = qword_2573A0138;
  if (!qword_2573A0138)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentIdentifier, &type metadata for ContentIdentifier);
    atomic_store(result, (unint64_t *)&qword_2573A0138);
  }
  return result;
}

unint64_t sub_244954AC8()
{
  unint64_t result;

  result = qword_2573A0140;
  if (!qword_2573A0140)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentOverride, &type metadata for ContentOverride);
    atomic_store(result, (unint64_t *)&qword_2573A0140);
  }
  return result;
}

unint64_t sub_244954B10()
{
  unint64_t result;

  result = qword_2573A0148;
  if (!qword_2573A0148)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentOverride, &type metadata for ContentOverride);
    atomic_store(result, (unint64_t *)&qword_2573A0148);
  }
  return result;
}

unint64_t sub_244954B58()
{
  unint64_t result;

  result = qword_2573A0150;
  if (!qword_2573A0150)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentOverride, &type metadata for ContentOverride);
    atomic_store(result, (unint64_t *)&qword_2573A0150);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentCategory()
{
  return &type metadata for ContentCategory;
}

ValueMetadata *type metadata accessor for ContentIdentifier()
{
  return &type metadata for ContentIdentifier;
}

uint64_t getEnumTagSinglePayload for AgentDescriptor.Bundle.MissingPathError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AgentDescriptor.Bundle.MissingPathError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentOverride()
{
  return &type metadata for ContentOverride;
}

unint64_t sub_244954C5C()
{
  unint64_t result;

  result = qword_2573A0158;
  if (!qword_2573A0158)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentOverride, &type metadata for ContentOverride);
    atomic_store(result, (unint64_t *)&qword_2573A0158);
  }
  return result;
}

unint64_t sub_244954CA0()
{
  unint64_t result;

  result = qword_2573A0160;
  if (!qword_2573A0160)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentIdentifier, &type metadata for ContentIdentifier);
    atomic_store(result, (unint64_t *)&qword_2573A0160);
  }
  return result;
}

unint64_t sub_244954CE4()
{
  unint64_t result;

  result = qword_2573A0168;
  if (!qword_2573A0168)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ContentCategory, &type metadata for ContentCategory);
    atomic_store(result, (unint64_t *)&qword_2573A0168);
  }
  return result;
}

uint64_t sub_244954D5C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x736172437478656ELL;
  else
    return 0xD000000000000016;
}

uint64_t sub_244954DA4(char *a1, char *a2)
{
  return sub_24499F9F0(*a1, *a2);
}

uint64_t sub_244954DB0()
{
  return sub_2449C5C28();
}

uint64_t sub_244954DB8()
{
  return sub_2449237C0();
}

uint64_t sub_244954DC0()
{
  return sub_2449CAF48();
}

uint64_t sub_244954DC8@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244954DD4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244954D5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244954DFC()
{
  sub_2449592A8();
  return sub_2449CF670();
}

uint64_t sub_244954E44()
{
  sub_2449592A8();
  return sub_2449CF67C();
}

uint64_t sub_244954EA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24499F9EC(*a1, *a2);
}

uint64_t sub_244954EB4()
{
  unsigned __int8 *v0;

  return sub_2449C5CB8(*v0);
}

uint64_t sub_244954EBC(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_2449237BC(a1, *v1);
}

uint64_t sub_244954EC4(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_2449CA404(a1, *v1);
}

uint64_t sub_244954ECC@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t CrashListenerInterface.TwoWayMessage.propertyListValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  char v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = sub_244954FB0();
  sub_244954FF4();
  result = sub_2449CF3E8();
  if ((_BYTE)v4 != 0xFF)
  {
    v10 = v1;
    v11 = v2;
    v12 = v4 & 1;
    v13 = v3;
    v8 = &type metadata for CrashListenerInterface.TwoWayMessage.Key;
    v9 = v5;
    v7[0] = 1;
    sub_244955038();
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

unint64_t sub_244954FB0()
{
  unint64_t result;

  result = qword_2573A0170;
  if (!qword_2573A0170)
  {
    result = MEMORY[0x24951C158](&unk_2449D5254, &type metadata for CrashListenerInterface.TwoWayMessage.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0170);
  }
  return result;
}

unint64_t sub_244954FF4()
{
  unint64_t result;

  result = qword_2573A0178;
  if (!qword_2573A0178)
  {
    result = MEMORY[0x24951C158](&unk_2449D5214, &type metadata for CrashListenerInterface.TwoWayMessage.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0178);
  }
  return result;
}

unint64_t sub_244955038()
{
  unint64_t result;

  result = qword_2573A0180;
  if (!qword_2573A0180)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for NextCrashRequest, &type metadata for NextCrashRequest);
    atomic_store(result, (unint64_t *)&qword_2573A0180);
  }
  return result;
}

uint64_t CrashListenerInterface.TwoWayMessage.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 v14;
  uint64_t v15;
  _BYTE v16[24];
  ValueMetadata *v17;
  unint64_t v18;

  v17 = &type metadata for CrashListenerInterface.TwoWayMessage.Key;
  v5 = sub_244954FB0();
  v18 = v5;
  v16[0] = 0;
  sub_244954FF4();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    if ((v13 & 1) != 0)
    {
      v17 = &type metadata for CrashListenerInterface.TwoWayMessage.Key;
      v18 = v5;
      v16[0] = 1;
      sub_244955038();
      sub_2449CF37C();
      v8 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      v9 = v13;
      v10 = v14;
      v11 = v15;
    }
    else
    {
      v12 = sub_2449CF400();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
      v11 = 0;
      v9 = 0uLL;
      v10 = 255;
    }
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v11;
  }
  return result;
}

uint64_t sub_2449551D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  char v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = sub_244954FB0();
  sub_244954FF4();
  result = sub_2449CF3E8();
  if ((_BYTE)v4 != 0xFF)
  {
    v10 = v1;
    v11 = v2;
    v12 = v4 & 1;
    v13 = v3;
    v8 = &type metadata for CrashListenerInterface.TwoWayMessage.Key;
    v9 = v5;
    v7[0] = 1;
    sub_244955038();
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t sub_2449552A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CrashListenerInterface.TwoWayMessage.init(propertyListValue:)(a1, a2);
}

uint64_t NextCrashRequest.process.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_2449552FC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
  return v1;
}

uint64_t sub_2449552FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

double NextCrashRequest.timeout.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t NextCrashRequest.init(process:timeout:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3 & 1;
  *(double *)(a4 + 24) = a5;
  return result;
}

uint64_t sub_244955328(char a1)
{
  if ((a1 & 1) != 0)
    return 0x74756F656D6974;
  else
    return 0x737365636F7270;
}

uint64_t sub_244955358(char *a1, char *a2)
{
  return sub_2449A12C0(*a1, *a2);
}

uint64_t sub_244955364()
{
  return sub_2449C5CBC();
}

uint64_t sub_24495536C()
{
  return sub_2449244AC();
}

uint64_t sub_244955374()
{
  return sub_2449CA198();
}

uint64_t sub_24495537C@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244955388@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244955328(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449553B0()
{
  char *v0;

  return sub_244955328(*v0);
}

uint64_t NextCrashRequest.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449553F8()
{
  sub_24495560C();
  sub_244955650();
  return sub_2449CF604();
}

uint64_t NextCrashRequest.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v14 = &type metadata for NextCrashRequest.Key;
  v5 = sub_24495560C();
  v15 = v5;
  v13[0] = 0;
  sub_244955650();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v19 = v18;
    v14 = &type metadata for NextCrashRequest.Key;
    v15 = v5;
    v13[0] = 1;
    sub_2449552FC(v16, v17, v18);
    sub_2449CF37C();
    v11 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v12 = v16;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v9;
    *(_BYTE *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v12;
    return sub_244955694(v8, v9, v19);
  }
}

unint64_t sub_24495560C()
{
  unint64_t result;

  result = qword_2573A0188;
  if (!qword_2573A0188)
  {
    result = MEMORY[0x24951C158](&unk_2449D51EC, &type metadata for NextCrashRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0188);
  }
  return result;
}

unint64_t sub_244955650()
{
  unint64_t result;

  result = qword_2573A0190;
  if (!qword_2573A0190)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ProcessIdentifier, &type metadata for ProcessIdentifier);
    atomic_store(result, (unint64_t *)&qword_2573A0190);
  }
  return result;
}

uint64_t sub_244955694(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2449556A4()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449556E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NextCrashRequest.init(propertyListValue:)(a1, a2);
}

uint64_t NextCrashResponse.crashReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2449CF238();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t NextCrashResponse.init(crashReport:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2449CF238();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_244955778@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_2449557C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_244957CD4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t NextCrashResponse.propertyListValue.getter()
{
  uint64_t (*v0)(uint64_t);

  sub_2449CF238();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE76340];
  sub_244955880();
  sub_24493DED4((unint64_t *)&qword_2573A01A0, v0, (uint64_t)&protocol conformance descriptor for CrashReport);
  return sub_2449CF3E8();
}

unint64_t sub_244955880()
{
  unint64_t result;

  result = qword_2573A0198;
  if (!qword_2573A0198)
  {
    result = MEMORY[0x24951C158](&unk_2449D51C4, &type metadata for NextCrashResponse.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0198);
  }
  return result;
}

uint64_t NextCrashResponse.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;

  v5 = sub_2449CF238();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BE76340];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = &type metadata for NextCrashResponse.Key;
  v15 = sub_244955880();
  sub_24493DED4((unint64_t *)&qword_2573A01A0, v6, (uint64_t)&protocol conformance descriptor for CrashReport);
  sub_2449CF37C();
  v10 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v5);
}

uint64_t sub_2449559F4()
{
  uint64_t (*v0)(uint64_t);

  sub_2449CF238();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BE76340];
  sub_244955880();
  sub_24493DED4((unint64_t *)&qword_2573A01A0, v0, (uint64_t)&protocol conformance descriptor for CrashReport);
  return sub_2449CF3E8();
}

uint64_t sub_244955A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;

  v5 = sub_2449CF238();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BE76340];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = &type metadata for NextCrashResponse.Key;
  v15 = sub_244955880();
  sub_24493DED4((unint64_t *)&qword_2573A01A0, v6, (uint64_t)&protocol conformance descriptor for CrashReport);
  sub_2449CF37C();
  v10 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v5);
}

uint64_t ProcessIdentifier.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v4[2];

  if ((a3 & 1) != 0)
  {
    sub_2449CFB98();
    swift_bridgeObjectRelease();
    strcpy((char *)v4, "process name: ");
    HIBYTE(v4[1]) = -18;
    sub_2449CF898();
  }
  else
  {
    v4[0] = 0x203A646970;
    v4[1] = 0xE500000000000000;
    sub_2449CFC88();
    sub_2449CF898();
    swift_bridgeObjectRelease();
  }
  return v4[0];
}

uint64_t ProcessIdentifier.name.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  if ((a3 & 1) == 0)
    return 0;
  v3 = a1;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t ProcessIdentifier.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    sub_2449CFD54();
    return sub_2449CF88C();
  }
  else
  {
    sub_2449CFD54();
    return sub_2449CFD6C();
  }
}

uint64_t static ProcessIdentifier.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0)
    {
      if (a1 == a4 && a2 == a5)
        return 1;
      else
        return sub_2449CFCD0();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return (a6 & 1) == 0 && (_DWORD)a1 == (_DWORD)a4;
  }
}

uint64_t ProcessIdentifier.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  sub_2449CFD48();
  sub_2449CFD54();
  if ((a3 & 1) != 0)
    sub_2449CF88C();
  else
    sub_2449CFD6C();
  return sub_2449CFD84();
}

uint64_t sub_244955DF4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4E737365636F7270;
  else
    return 6580592;
}

uint64_t sub_244955E2C()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 16);
  sub_2449CFD48();
  sub_2449CFD54();
  if ((v1 & 1) != 0)
    sub_2449CF88C();
  else
    sub_2449CFD6C();
  return sub_2449CFD84();
}

uint64_t sub_244955EAC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    sub_2449CFD54();
    return sub_2449CF88C();
  }
  else
  {
    sub_2449CFD54();
    return sub_2449CFD6C();
  }
}

uint64_t sub_244955F1C()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 16);
  sub_2449CFD48();
  sub_2449CFD54();
  if ((v1 & 1) != 0)
    sub_2449CF88C();
  else
    sub_2449CFD6C();
  return sub_2449CFD84();
}

uint64_t sub_244955F98()
{
  uint64_t v0;

  return ProcessIdentifier.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_244955FA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if ((a1[2] & 1) != 0)
  {
    if ((a2[2] & 1) != 0)
    {
      v5 = a1[1];
      if (v3 == v4 && v5 == a2[1])
        return 1;
      else
        return sub_2449CFCD0();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return (a2[2] & 1) == 0 && (_DWORD)v3 == (_DWORD)v4;
  }
}

uint64_t sub_244956004(char *a1, char *a2)
{
  return sub_2449A0D74(*a1, *a2);
}

uint64_t sub_244956010()
{
  return sub_2449C5D30();
}

uint64_t sub_244956018()
{
  return sub_244924218();
}

uint64_t sub_244956020()
{
  return sub_2449CA388();
}

uint64_t sub_244956028@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244956034@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244955DF4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24495605C()
{
  sub_2449592EC();
  return sub_2449CF670();
}

uint64_t sub_2449560A4()
{
  sub_2449592EC();
  return sub_2449CF67C();
}

uint64_t sub_244956108(char a1)
{
  if ((a1 & 1) != 0)
    return 0x64616F6C796170;
  else
    return 0x696D697263736964;
}

uint64_t sub_244956148@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244956154@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244956108(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24495617C()
{
  char *v0;

  return sub_244956108(*v0);
}

uint64_t ProcessIdentifier.init(propertyListValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_244957CF4(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t ProcessIdentifier.propertyListValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  char v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_244957E80();
  sub_244957EC4();
  sub_2449CF3E8();
  if ((a3 & 1) != 0)
  {
    v11 = a1;
    v12 = a2;
  }
  else
  {
    LODWORD(v11) = a1;
    BYTE4(v11) = 0;
  }
  v9 = &type metadata for ProcessIdentifier.Key;
  v10 = v6;
  v8[0] = 1;
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t sub_244956290(char a1)
{
  return qword_2449D5280[a1];
}

uint64_t sub_2449562B0()
{
  uint64_t v0;

  return ProcessIdentifier.propertyListValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_2449562BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_244957CF4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_2449562EC(char *a1, char *a2)
{
  return sub_24499DCA8(*a1, *a2);
}

uint64_t sub_2449562F8()
{
  sub_2449CFD48();
  sub_2449229B8();
  return sub_2449CFD84();
}

uint64_t sub_24495633C()
{
  return sub_2449229B8();
}

uint64_t sub_244956344()
{
  sub_2449CFD48();
  sub_2449229B8();
  return sub_2449CFD84();
}

uint64_t sub_244956384@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244959330();
  *a1 = result;
  return result;
}

uint64_t sub_2449563B0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244956290(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449563D8()
{
  char *v0;

  return sub_244956290(*v0);
}

uint64_t CrashReport.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[8];
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  ValueMetadata *v41;
  unint64_t v42;
  int v43;
  int v44;

  v32 = a2;
  v3 = sub_2449CF058();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A01B8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2449CF118();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = &_s3KeyON_1;
  v14 = sub_244957F08();
  v42 = v14;
  v40[0] = 0;
  sub_24493DED4(&qword_2573A01C8, (uint64_t (*)(uint64_t))MEMORY[0x24BE76258], (uint64_t)&protocol conformance descriptor for CrashReport.ID);
  v15 = v33;
  sub_2449CF3B8();
  if (v15)
  {
    v16 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
  }
  else
  {
    v29 = v14;
    v30 = 0;
    v28[6] = v4;
    v28[7] = v3;
    v31 = v13;
    v33 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      v17 = v31;
      sub_2449CF10C();
      sub_244940E8C((uint64_t)v9, &qword_2573A01B8);
    }
    else
    {
      v17 = v31;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v31, v9, v10);
    }
    v19 = v29;
    v18 = v30;
    v41 = &_s3KeyON_1;
    v42 = v29;
    v40[0] = 1;
    sub_2449CF37C();
    if (!v18)
    {
      v28[5] = v11;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      v21 = v38;
      v22 = v39;
      v41 = &_s3KeyON_1;
      v42 = v19;
      v40[0] = 2;
      sub_2449CF37C();
      v28[4] = v21;
      v30 = v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      v23 = v36;
      v24 = v37;
      v41 = &_s3KeyON_1;
      v42 = v19;
      v40[0] = 3;
      sub_2449CF37C();
      v28[3] = v24;
      v28[2] = v23;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      LODWORD(v23) = v44;
      v41 = &_s3KeyON_1;
      v42 = v19;
      v40[0] = 4;
      sub_2449CF37C();
      v43 = v23;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      v41 = &_s3KeyON_1;
      v42 = v19;
      v40[0] = 5;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573A01D0);
      sub_244957F4C();
      sub_2449CF3B8();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      v25 = v35;
      v41 = &_s3KeyON_1;
      v42 = v19;
      v40[0] = 6;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573A01E0);
      sub_244958020();
      sub_2449CF37C();
      v28[1] = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      v41 = &_s3KeyON_1;
      v42 = v19;
      v40[0] = 7;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573A01F8);
      sub_24495809C();
      sub_2449CF37C();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      v28[0] = v34;
      v41 = &_s3KeyON_1;
      v42 = v19;
      v40[0] = 8;
      sub_2449CF3B8();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      sub_2449CF130();
      v26 = sub_2449CF400();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
    }
    v20 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
}

uint64_t CrashReport.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_244956AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v38[12];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  int v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0328);
  MEMORY[0x24BDAC7A8](v0);
  v52 = &v38[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A01B8);
  MEMORY[0x24BDAC7A8](v2);
  v51 = &v38[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0330);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v38[-v8];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0338);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x24BDAC7A8](v11);
  v50 = &v38[-v15];
  v16 = &v38[*(int *)(v14 + 48) - v15];
  v38[-v15] = 0;
  sub_2449CF13C();
  v43 = sub_2449CF160();
  v42 = v17;
  v41 = sub_2449CF22C();
  v40 = v18;
  v39 = sub_2449CF154();
  v19 = *(int *)(v4 + 48);
  v20 = v9;
  v49 = v9;
  v21 = &v9[v19];
  *v20 = 4;
  sub_2449CF16C();
  v22 = sub_2449CF148();
  v48 = v22;
  v23 = sub_2449CF220();
  v46 = v23;
  v24 = sub_2449CF214();
  v47 = v24;
  v45 = sub_2449CF0F4();
  v44 = v25;
  v26 = &v13[*(int *)(v10 + 48)];
  *v13 = 0;
  v27 = sub_2449CF118();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 16))(v26, v16, v27);
  v29 = v51;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 32))(v51, v26, v27);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v27);
  v72 = 0;
  v71 = 1;
  v69 = v43;
  v70 = v42;
  v68 = 2;
  v66 = v41;
  v67 = v40;
  v65 = 3;
  v63 = v39;
  v64 = 0;
  v30 = &v7[*(int *)(v4 + 48)];
  *v7 = 4;
  v31 = sub_2449CF058();
  v32 = *(_QWORD *)(v31 - 8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 16))(v30, v21, v31);
  v33 = v52;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32))(v52, v30, v31);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v31);
  v62 = 4;
  v61 = 5;
  v60 = v22;
  v59 = 6;
  v58 = v23;
  v57 = 7;
  v56 = v24;
  v55 = 8;
  v53 = v45;
  v54 = v44;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A01D0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A01E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A01F8);
  sub_244957F08();
  sub_24493DED4(&qword_2573A01C8, (uint64_t (*)(uint64_t))MEMORY[0x24BE76258], (uint64_t)&protocol conformance descriptor for CrashReport.ID);
  sub_244957F4C();
  sub_244958020();
  sub_24495809C();
  v34 = (uint64_t)v52;
  v35 = (uint64_t)v51;
  v36 = sub_2449CF5BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_244940E8C(v34, &qword_2573A0328);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_244940E8C(v35, &qword_2573A01B8);
  sub_244940E8C((uint64_t)v49, &qword_2573A0330);
  sub_244940E8C((uint64_t)v50, &qword_2573A0338);
  return v36;
}

uint64_t sub_244956FF4()
{
  return sub_2449CF3D0();
}

uint64_t sub_244957020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CrashReport.init(propertyListValue:)(a1, a2);
}

uint64_t CrashReport.ID.propertyListValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_2449CF07C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF100();
  v4 = sub_2449CF070();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t CrashReport.ID.init(propertyListValue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = sub_2449CF07C();
  MEMORY[0x24BDAC7A8](v1);
  result = sub_2449CF064();
  if (!v0)
    return sub_2449CF124();
  return result;
}

uint64_t sub_244957164(char a1)
{
  return *(_QWORD *)&aImageindimageo_0[8 * a1];
}

uint64_t sub_244957184@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = sub_2449CF07C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF100();
  v6 = sub_2449CF070();
  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

uint64_t sub_244957218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = sub_2449CF07C();
  MEMORY[0x24BDAC7A8](v1);
  result = sub_2449CF064();
  if (!v0)
    return sub_2449CF124();
  return result;
}

uint64_t sub_2449572A4(char *a1, char *a2)
{
  return sub_24499DC24(*a1, *a2);
}

uint64_t sub_2449572B0()
{
  return sub_2449C5DB0();
}

uint64_t sub_2449572B8()
{
  return sub_244922978();
}

uint64_t sub_2449572C0()
{
  return sub_2449CC448();
}

uint64_t sub_2449572C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244959378();
  *a1 = result;
  return result;
}

uint64_t sub_2449572F4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244957164(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24495731C()
{
  char *v0;

  return sub_244957164(*v0);
}

uint64_t CrashReport.Frame.init(propertyListValue:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  v8 = &_s3KeyON_0;
  v3 = sub_244958120();
  v9 = v3;
  v7[0] = 0;
  sub_2449CF37C();
  if (v1)
  {
    v4 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON_0;
    v9 = v3;
    v7[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON_0;
    v9 = v3;
    v7[0] = 2;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON_0;
    v9 = v3;
    v7[0] = 3;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON_0;
    v9 = v3;
    v7[0] = 4;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON_0;
    v9 = v3;
    v7[0] = 5;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    sub_2449CF178();
    v5 = sub_2449CF400();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
}

uint64_t CrashReport.Frame.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24495760C()
{
  uint64_t v0;

  sub_2449CF184();
  sub_2449CF1A8();
  sub_2449CF1C0();
  sub_2449CF1B4();
  sub_2449CF190();
  sub_2449CF19C();
  sub_244958120();
  v0 = sub_2449CF5D4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_244957794(char a1)
{
  return *(_QWORD *)&aUuid_2[8 * a1];
}

uint64_t sub_2449577AC()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449577D8(uint64_t a1)
{
  return CrashReport.Frame.init(propertyListValue:)(a1);
}

uint64_t sub_2449577EC(char *a1, char *a2)
{
  return sub_24499DBC0(*a1, *a2);
}

uint64_t sub_2449577F8()
{
  return sub_2449C5E18();
}

uint64_t sub_244957800()
{
  return sub_24492294C();
}

uint64_t sub_244957808()
{
  return sub_2449CC4AC();
}

uint64_t sub_244957810@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449593C0();
  *a1 = result;
  return result;
}

uint64_t sub_24495783C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244957794(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244957864()
{
  char *v0;

  return sub_244957794(*v0);
}

uint64_t CrashReport.Image.init(propertyListValue:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  v8 = &_s3KeyON;
  v3 = sub_24495816C();
  v9 = v3;
  v7[0] = 0;
  sub_2449CF37C();
  if (v1)
  {
    v4 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON;
    v9 = v3;
    v7[0] = 1;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON;
    v9 = v3;
    v7[0] = 2;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON;
    v9 = v3;
    v7[0] = 3;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v8 = &_s3KeyON;
    v9 = v3;
    v7[0] = 4;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    sub_2449CF1FC();
    v6 = sub_2449CF400();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
}

uint64_t CrashReport.Image.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_244957B34()
{
  uint64_t v0;

  sub_2449CF208();
  sub_2449CF1CC();
  sub_2449CF1D8();
  sub_2449CF1F0();
  sub_2449CF1E4();
  sub_24495816C();
  v0 = sub_2449CF5E0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_244957C94()
{
  return sub_2449CF3D0();
}

uint64_t sub_244957CC0(uint64_t a1)
{
  return CrashReport.Image.init(propertyListValue:)(a1);
}

uint64_t sub_244957CD4()
{
  return 0x7065526873617263;
}

uint64_t sub_244957CF4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;

  v9 = &type metadata for ProcessIdentifier.Key;
  v3 = sub_244957E80();
  v10 = v3;
  v8[0] = 0;
  sub_244957EC4();
  sub_2449CF37C();
  if (v1)
  {
    v4 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    v9 = &type metadata for ProcessIdentifier.Key;
    v10 = v3;
    v8[0] = 1;
    sub_2449CF37C();
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    if ((v7 & 1) != 0)
      return v7;
    else
      return v7;
  }
}

_BYTE *sub_244957E70(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;
  char v3;

  v3 = *(_BYTE *)(v2 + 32);
  *result = 0;
  *a2 = v3;
  return result;
}

unint64_t sub_244957E80()
{
  unint64_t result;

  result = qword_2573A01A8;
  if (!qword_2573A01A8)
  {
    result = MEMORY[0x24951C158](&unk_2449D519C, &type metadata for ProcessIdentifier.Key);
    atomic_store(result, (unint64_t *)&qword_2573A01A8);
  }
  return result;
}

unint64_t sub_244957EC4()
{
  unint64_t result;

  result = qword_2573A01B0;
  if (!qword_2573A01B0)
  {
    result = MEMORY[0x24951C158](&unk_2449D515C, &type metadata for ProcessIdentifier.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A01B0);
  }
  return result;
}

unint64_t sub_244957F08()
{
  unint64_t result;

  result = qword_2573A01C0;
  if (!qword_2573A01C0)
  {
    result = MEMORY[0x24951C158](&unk_2449D5134, &_s3KeyON_1);
    atomic_store(result, (unint64_t *)&qword_2573A01C0);
  }
  return result;
}

unint64_t sub_244957F4C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[3];

  result = qword_2573A01D8;
  if (!qword_2573A01D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573A01D0);
    v2 = sub_244957FC4();
    v3[0] = MEMORY[0x24BE76CC0];
    v3[1] = v2;
    v3[2] = MEMORY[0x24BEE0D10];
    result = MEMORY[0x24951C158](MEMORY[0x24BE76CA8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_2573A01D8);
  }
  return result;
}

unint64_t sub_244957FC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25739F1A8;
  if (!qword_25739F1A8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25739F158);
    v2 = MEMORY[0x24BE76CC0];
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25739F1A8);
  }
  return result;
}

unint64_t sub_244958020()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2573A01E8;
  if (!qword_2573A01E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573A01E0);
    v2 = sub_24493DED4(&qword_2573A01F0, MEMORY[0x24BE76318], (uint64_t)&protocol conformance descriptor for CrashReport.Image);
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2573A01E8);
  }
  return result;
}

unint64_t sub_24495809C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2573A0200;
  if (!qword_2573A0200)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573A01F8);
    v2 = sub_24493DED4(&qword_2573A0208, MEMORY[0x24BE762D8], (uint64_t)&protocol conformance descriptor for CrashReport.Frame);
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2573A0200);
  }
  return result;
}

uint64_t sub_244958118()
{
  return sub_244956AB0();
}

unint64_t sub_244958120()
{
  unint64_t result;

  result = qword_2573A0210;
  if (!qword_2573A0210)
  {
    result = MEMORY[0x24951C158](&unk_2449D510C, &_s3KeyON_0);
    atomic_store(result, (unint64_t *)&qword_2573A0210);
  }
  return result;
}

uint64_t sub_244958164()
{
  return sub_24495760C();
}

unint64_t sub_24495816C()
{
  unint64_t result;

  result = qword_2573A0218;
  if (!qword_2573A0218)
  {
    result = MEMORY[0x24951C158](&unk_2449D50E4, &_s3KeyON);
    atomic_store(result, (unint64_t *)&qword_2573A0218);
  }
  return result;
}

uint64_t sub_2449581B0()
{
  return sub_244957B34();
}

unint64_t sub_2449581BC()
{
  unint64_t result;

  result = qword_2573A0238;
  if (!qword_2573A0238)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ProcessIdentifier, &type metadata for ProcessIdentifier);
    atomic_store(result, (unint64_t *)&qword_2573A0238);
  }
  return result;
}

ValueMetadata *type metadata accessor for CrashListenerInterface()
{
  return &type metadata for CrashListenerInterface;
}

uint64_t destroy for CrashListenerInterface.TwoWayMessage(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 <= 1)
    return sub_244955694(*(_QWORD *)result, *(_QWORD *)(result + 8), v1 != 0);
  return result;
}

uint64_t initializeWithCopy for CrashListenerInterface.TwoWayMessage(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 1)
  {
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  else
  {
    v5 = v4 != 0;
    v6 = *a2;
    v7 = a2[1];
    sub_2449552FC(*a2, v7, v4 != 0);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = a2[3];
  }
  return a1;
}

uint64_t assignWithCopy for CrashListenerInterface.TwoWayMessage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      v12 = v5 != 0;
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      sub_2449552FC(*(_QWORD *)a2, v14, v5 != 0);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      return a1;
    }
LABEL_7:
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    return a1;
  }
  if (v5 > 1)
  {
    sub_244955694(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4 & 1);
    goto LABEL_7;
  }
  v6 = v5 != 0;
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  sub_2449552FC(*(_QWORD *)a2, v8, v5 != 0);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v6;
  sub_244955694(v9, v10, v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for CrashListenerInterface.TwoWayMessage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 > 1)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 16);
  v6 = v4 & 1;
  if (v5 > 1)
  {
    sub_244955694(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v6);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5 != 0;
  sub_244955694(v7, v8, v6);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CrashListenerInterface.TwoWayMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  if (v4 + 1 >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CrashListenerInterface.TwoWayMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = ~(_BYTE)a2;
  }
  return result;
}

uint64_t sub_244958488(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

_QWORD *sub_24495849C(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 - 255;
    result[1] = 0;
  }
  else if (a2)
  {
    *((_BYTE *)result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CrashListenerInterface.TwoWayMessage()
{
  return &type metadata for CrashListenerInterface.TwoWayMessage;
}

uint64_t destroy for NextCrashRequest(uint64_t a1)
{
  return sub_244955694(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for NextCrashRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2449552FC(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for NextCrashRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2449552FC(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_244955694(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for NextCrashRequest(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_244955694(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NextCrashRequest(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NextCrashRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NextCrashRequest()
{
  return &type metadata for NextCrashRequest;
}

uint64_t initializeBufferWithCopyOfBuffer for NextCrashResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF238();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for NextCrashResponse(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2449CF238();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for NextCrashResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF238();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for NextCrashResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF238();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for NextCrashResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF238();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for NextCrashResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF238();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NextCrashResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24495881C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF238();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NextCrashResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244958864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2449CF238();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for NextCrashResponse()
{
  uint64_t result;

  result = qword_2573A0298;
  if (!qword_2573A0298)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2449588E0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF238();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24495894C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2449552FC(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ProcessIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2449552FC(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_244955694(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ProcessIdentifier(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_244955694(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProcessIdentifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProcessIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_244958ACC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_244958AD4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ProcessIdentifier()
{
  return &type metadata for ProcessIdentifier;
}

uint64_t _s3KeyOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_244958B3C + 4 * byte_2449D4795[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_244958B70 + 4 * asc_2449D4790[v4]))();
}

uint64_t sub_244958B70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244958B78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244958B80);
  return result;
}

uint64_t sub_244958B8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244958B94);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_244958B98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244958BA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3KeyOMa()
{
  return &_s3KeyON;
}

uint64_t _s3KeyOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_244958C98 + 4 * byte_2449D479F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_244958CCC + 4 * byte_2449D479A[v4]))();
}

uint64_t sub_244958CCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244958CD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244958CDCLL);
  return result;
}

uint64_t sub_244958CE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244958CF0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_244958CF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244958CFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3KeyOMa_0()
{
  return &_s3KeyON_0;
}

uint64_t _s3KeyOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s3KeyOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_244958DF4 + 4 * byte_2449D47A9[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_244958E28 + 4 * byte_2449D47A4[v4]))();
}

uint64_t sub_244958E28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244958E30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244958E38);
  return result;
}

uint64_t sub_244958E44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244958E4CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_244958E50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244958E58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s3KeyOMa_1()
{
  return &_s3KeyON_1;
}

ValueMetadata *type metadata accessor for ProcessIdentifier.Discriminant()
{
  return &type metadata for ProcessIdentifier.Discriminant;
}

ValueMetadata *type metadata accessor for ProcessIdentifier.Key()
{
  return &type metadata for ProcessIdentifier.Key;
}

uint64_t storeEnumTagSinglePayload for NextCrashResponse.Key(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_244958ED8 + 4 * byte_2449D47AE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_244958EF8 + 4 * byte_2449D47B3[v4]))();
}

_BYTE *sub_244958ED8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_244958EF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244958F00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244958F08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244958F10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244958F18(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NextCrashResponse.Key()
{
  return &type metadata for NextCrashResponse.Key;
}

ValueMetadata *type metadata accessor for NextCrashRequest.Key()
{
  return &type metadata for NextCrashRequest.Key;
}

ValueMetadata *type metadata accessor for CrashListenerInterface.TwoWayMessage.Discriminant()
{
  return &type metadata for CrashListenerInterface.TwoWayMessage.Discriminant;
}

uint64_t _s19PreviewsMessagingOS17ProcessIdentifierO12DiscriminantOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244958FA0 + 4 * byte_2449D47BD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244958FD4 + 4 * byte_2449D47B8[v4]))();
}

uint64_t sub_244958FD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244958FDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244958FE4);
  return result;
}

uint64_t sub_244958FF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244958FF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244958FFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244959004(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CrashListenerInterface.TwoWayMessage.Key()
{
  return &type metadata for CrashListenerInterface.TwoWayMessage.Key;
}

unint64_t sub_244959024()
{
  unint64_t result;

  result = qword_2573A02D0;
  if (!qword_2573A02D0)
  {
    result = MEMORY[0x24951C158](&unk_2449D4BBC, &type metadata for CrashListenerInterface.TwoWayMessage.Key);
    atomic_store(result, (unint64_t *)&qword_2573A02D0);
  }
  return result;
}

unint64_t sub_24495906C()
{
  unint64_t result;

  result = qword_2573A02D8;
  if (!qword_2573A02D8)
  {
    result = MEMORY[0x24951C158](&unk_2449D4C5C, &type metadata for CrashListenerInterface.TwoWayMessage.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A02D8);
  }
  return result;
}

unint64_t sub_2449590B4()
{
  unint64_t result;

  result = qword_2573A02E0;
  if (!qword_2573A02E0)
  {
    result = MEMORY[0x24951C158](&unk_2449D4CFC, &type metadata for NextCrashRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A02E0);
  }
  return result;
}

unint64_t sub_2449590FC()
{
  unint64_t result;

  result = qword_2573A02E8;
  if (!qword_2573A02E8)
  {
    result = MEMORY[0x24951C158](&unk_2449D4D9C, &type metadata for NextCrashResponse.Key);
    atomic_store(result, (unint64_t *)&qword_2573A02E8);
  }
  return result;
}

unint64_t sub_244959144()
{
  unint64_t result;

  result = qword_2573A02F0;
  if (!qword_2573A02F0)
  {
    result = MEMORY[0x24951C158](&unk_2449D4E3C, &type metadata for ProcessIdentifier.Key);
    atomic_store(result, (unint64_t *)&qword_2573A02F0);
  }
  return result;
}

unint64_t sub_24495918C()
{
  unint64_t result;

  result = qword_2573A02F8;
  if (!qword_2573A02F8)
  {
    result = MEMORY[0x24951C158](&unk_2449D4EDC, &type metadata for ProcessIdentifier.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A02F8);
  }
  return result;
}

unint64_t sub_2449591D4()
{
  unint64_t result;

  result = qword_2573A0300;
  if (!qword_2573A0300)
  {
    result = MEMORY[0x24951C158](&unk_2449D4F7C, &_s3KeyON_1);
    atomic_store(result, (unint64_t *)&qword_2573A0300);
  }
  return result;
}

unint64_t sub_24495921C()
{
  unint64_t result;

  result = qword_2573A0308;
  if (!qword_2573A0308)
  {
    result = MEMORY[0x24951C158](&unk_2449D501C, &_s3KeyON_0);
    atomic_store(result, (unint64_t *)&qword_2573A0308);
  }
  return result;
}

unint64_t sub_244959264()
{
  unint64_t result;

  result = qword_2573A0310;
  if (!qword_2573A0310)
  {
    result = MEMORY[0x24951C158](&unk_2449D50BC, &_s3KeyON);
    atomic_store(result, (unint64_t *)&qword_2573A0310);
  }
  return result;
}

unint64_t sub_2449592A8()
{
  unint64_t result;

  result = qword_2573A0318;
  if (!qword_2573A0318)
  {
    result = MEMORY[0x24951C158](&unk_2449D4BE4, &type metadata for CrashListenerInterface.TwoWayMessage.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0318);
  }
  return result;
}

unint64_t sub_2449592EC()
{
  unint64_t result;

  result = qword_2573A0320;
  if (!qword_2573A0320)
  {
    result = MEMORY[0x24951C158](&unk_2449D4E64, &type metadata for ProcessIdentifier.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0320);
  }
  return result;
}

uint64_t sub_244959330()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_244959378()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_2449593C0()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_244959408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = sub_2449CF238();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v4, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
}

uint64_t sub_244959468()
{
  return sub_2449553F8();
}

_BYTE *sub_244959480(_BYTE *result, BOOL *a2)
{
  uint64_t v2;
  int v3;

  v3 = ~*(_DWORD *)(v2 + 32);
  *result = 0;
  *a2 = v3 != 0;
  return result;
}

uint64_t TransportReply.send(error:file:line:column:function:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  _QWORD v18[5];

  v18[4] = a8;
  v18[2] = a6;
  v18[3] = a7;
  v18[1] = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (_QWORD *)((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_2449CF724();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF730();
  *v11 = a1;
  swift_storeEnumTagMultiPayload();
  v16 = a1;
  __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  sub_2449CF2E0();
  sub_244940E8C((uint64_t)v11, &qword_25739FDA0);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t TransportReply.init(file:line:column:function:fulfilling:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  return sub_24495B7F4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &qword_25739FE90, (uint64_t)&unk_251599418, (uint64_t)sub_24495BC74);
}

uint64_t TransportReply.init<A>(file:line:column:function:fulfilling:)@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_24495B390(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BE76D78], (uint64_t)&unk_251599440, (uint64_t)sub_24495BC94);
}

uint64_t TransportReply.continuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TransportReply.init(wrapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t TransportReply.send<A>(_:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v26[2];
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v26[1] = a3;
  v33 = a7;
  v34 = a8;
  v29 = a5;
  v30 = a6;
  v35 = a1;
  v31 = a11;
  v32 = a10;
  v27 = a9;
  v28 = a4;
  v11 = sub_2449CF400();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_2449CF724();
  v36 = *(_QWORD *)(v18 - 8);
  v37 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 16))(v24, v26[0], v21);
  sub_2449CF730();
  sub_2449CF658();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v14, v11);
  type metadata accessor for LazyPropertyList();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_storeEnumTagMultiPayload();
  sub_2449CF2E0();
  sub_244940E8C((uint64_t)v17, &qword_25739FDA0);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
}

uint64_t TransportReply.send<A>(result:file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v30 = a7;
  v31 = a8;
  v28 = a5;
  v29 = a6;
  v25 = a3;
  v33 = a1;
  v26 = a9;
  v27 = a4;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_2449CF724();
  v15 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v11, v18);
  sub_2449CF730();
  v36 = a10;
  v37 = a11;
  KeyPath = swift_getKeyPath();
  v34 = a11;
  v35 = KeyPath;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v23 = sub_2449CFD90();
  type metadata accessor for LazyPropertyList();
  sub_244959B78((void (*)(char *))sub_24495BD0C, v23, (uint64_t)v14);
  swift_release();
  sub_2449CF2E0();
  sub_244940E8C((uint64_t)v14, &qword_25739FDA0);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t sub_244959B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  type metadata accessor for LazyPropertyList();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_244959B78@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 32))(a3, v12, *(_QWORD *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_2449CFD90();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TransportReply.send(file:line:column:function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v16[2];
  int v17;

  v17 = a8;
  v16[0] = a6;
  v16[1] = a7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2449CF724();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF730();
  _s19PreviewsMessagingOS24CanvasControlDescriptionV9ModifiersV17propertyListValue0a10FoundationC008PropertyI0Vvg_0();
  type metadata accessor for LazyPropertyList();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  sub_2449CF2E0();
  sub_244940E8C((uint64_t)v10, &qword_25739FDA0);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t TransportReply.send(result:file:line:column:function:)(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = a8;
  v31 = a6;
  v32 = a7;
  v30 = a5;
  v26 = a1;
  v27 = a4;
  v33 = a2;
  v29 = a9;
  v28 = a10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_2449CF724();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v10, v18);
  sub_2449CF730();
  if ((v33 & 1) != 0)
  {
    v22 = v26;
    *v13 = v26;
    swift_storeEnumTagMultiPayload();
    v23 = v22;
  }
  else
  {
    _s19PreviewsMessagingOS24CanvasControlDescriptionV9ModifiersV17propertyListValue0a10FoundationC008PropertyI0Vvg_0();
    type metadata accessor for LazyPropertyList();
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  sub_2449CF2E0();
  sub_244940E8C((uint64_t)v13, &qword_25739FDA0);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
}

uint64_t TransportReply.track<A, B>(task:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD v20[2];

  v6 = v5;
  v20[0] = a4;
  v20[1] = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v14 = sub_2449CF310();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v6, v10);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = v20[0];
  v18[5] = a5;
  sub_2449CF2F8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_2449CF2D4();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_24495A1C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_2449CF400();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF658();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
  type metadata accessor for LazyPropertyList();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t TransportReply.track<A>(task:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0340);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  sub_2449CF2F8();
  sub_2449CF2D4();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_24495A398()
{
  _s19PreviewsMessagingOS24CanvasControlDescriptionV9ModifiersV17propertyListValue0a10FoundationC008PropertyI0Vvg_0();
  type metadata accessor for LazyPropertyList();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TransportReply.wrappingError(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  sub_2449CF298();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v14, v8);
}

uint64_t TransportReply.loggingResult(logger:level:for:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = v5;
  v28 = a3;
  v29 = a4;
  v27 = a2;
  v30 = a5;
  v8 = sub_2449CF76C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v26 = (char *)&v25 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v6, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v18 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v19 = v18 + v10;
  v20 = swift_allocObject();
  v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v20 + v18, v11, v8);
  *(_BYTE *)(v20 + v19) = v27;
  v22 = v29;
  *(_QWORD *)(v21 + 8) = v28;
  *(_QWORD *)(v21 + 16) = v22;
  type metadata accessor for LazyPropertyList();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  v23 = v26;
  sub_2449CF2A4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v30, v23, v12);
}

uint64_t sub_24495A734@<X0>(uint64_t a1@<X0>, os_log_type_t a2@<W2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (void **)((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24495D8E4(a1, (uint64_t)v12, &qword_25739FDA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = *v12;
    swift_bridgeObjectRetain();
    v14 = v13;
    swift_bridgeObjectRetain();
    v15 = v13;
    v16 = sub_2449CF760();
    v17 = sub_2449CFAF0();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v31 = v20;
      *(_DWORD *)v18 = 136446466;
      v29 = a5;
      swift_bridgeObjectRetain();
      v30 = sub_244950C54(a3, a4, &v31);
      sub_2449CFB38();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2114;
      v21 = v13;
      v22 = _swift_stdlib_bridgeErrorToNSError();
      v30 = v22;
      a5 = v29;
      sub_2449CFB38();
      *v19 = v22;

      _os_log_impl(&dword_244921000, v16, v17, "Sending reply 'Failure' for %{public}s\nError: %{public}@", (uint8_t *)v18, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDB0);
      swift_arrayDestroy();
      MEMORY[0x24951C224](v19, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24951C224](v20, -1, -1);
      MEMORY[0x24951C224](v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    v23 = sub_2449CF760();
    v24 = a2;
    if (os_log_type_enabled(v23, a2))
    {
      v29 = a1;
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v31 = v26;
      *(_DWORD *)v25 = 136446210;
      swift_bridgeObjectRetain();
      v30 = sub_244950C54(a3, a4, &v31);
      a1 = v29;
      sub_2449CFB38();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_244921000, v23, v24, "Sending reply 'Success' for %{public}s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24951C224](v26, -1, -1);
      MEMORY[0x24951C224](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_244940E8C((uint64_t)v12, &qword_25739FDA0);
  }
  return sub_24495D8E4(a1, a5, &qword_25739FDA0);
}

uint64_t TransportReply.init<A>(file:line:column:function:handler:)@<X0>(int a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, int a6@<W7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v28 = a6;
  v26 = a4;
  v27 = a5;
  v24 = a2;
  v25 = a3;
  v23[3] = a1;
  v31 = a7;
  v29 = a11;
  v30 = a8;
  v11 = sub_2449CF634();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2449CF724();
  MEMORY[0x24BDAC7A8](v15);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v16 = sub_2449CF310();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v23 - v17;
  sub_2449CF730();
  v19 = (_QWORD *)swift_allocObject();
  v21 = v29;
  v20 = v30;
  v19[2] = a10;
  v19[3] = v21;
  v19[4] = v20;
  v19[5] = a9;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BE768C0], v11);
  swift_retain();
  sub_2449CF2EC();
  TransportReply.init<A>(resuming:)((uint64_t)v18, a10, v21, v31);
  return swift_release();
}

uint64_t TransportReply.init<A>(resuming:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v14 = sub_2449CF310();
  type metadata accessor for LazyPropertyList();
  sub_2449CF304();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
}

uint64_t TransportReply.init(file:line:column:function:handler:)@<X0>(int a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, int a6@<W7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v29 = a6;
  v27 = a4;
  v28 = a5;
  v25 = a2;
  v26 = a3;
  v24[3] = a1;
  v34 = a7;
  v30 = a8;
  v31 = a9;
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2449CF634();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2449CF724();
  MEMORY[0x24BDAC7A8](v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0340);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF730();
  v21 = swift_allocObject();
  v22 = v31;
  *(_QWORD *)(v21 + 16) = v30;
  *(_QWORD *)(v21 + 24) = v22;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BE768C0], v12);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  sub_2449CF2EC();
  type metadata accessor for LazyPropertyList();
  sub_2449CF2F8();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v34, v11, v33);
  return swift_release();
}

uint64_t TransportReply.init(resuming:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0340);
  type metadata accessor for LazyPropertyList();
  sub_2449CF2F8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t static TransportReply.ignored.getter()
{
  type metadata accessor for LazyPropertyList();
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  return sub_2449CF2C8();
}

uint64_t sub_24495B210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = sub_2449CF400();
  MEMORY[0x24BDAC7A8](v1);
  result = LazyPropertyList.propertyList.getter((uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v0)
    return sub_2449CF664();
  return result;
}

uint64_t sub_24495B2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = sub_2449CF400();
  MEMORY[0x24BDAC7A8](v1);
  result = LazyPropertyList.propertyList.getter((uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v0)
    return sub_2449CF664();
  return result;
}

uint64_t TransportReply.init<A>(file:line:column:function:resuming:)@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_24495B390(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6830], (uint64_t)&unk_251599558, (uint64_t)sub_24495BF80);
}

uint64_t sub_24495B390@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(_QWORD, uint64_t, uint64_t, _QWORD), uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v35 = a7;
  v33 = a5;
  v34 = a6;
  v31 = a3;
  v32 = a4;
  v30 = a2;
  v42 = a8;
  v41 = a14;
  v29[0] = a9;
  v29[1] = a1;
  v37 = a13;
  v38 = a11;
  v14 = sub_2449CF634();
  v39 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v36 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v17 = a12(0, a10, v16, MEMORY[0x24BEE3F20]);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v29 - v19;
  v21 = sub_2449CF724();
  MEMORY[0x24BDAC7A8](v21);
  v22 = sub_2449CF310();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v29 - v23;
  sub_2449CF730();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a9, v17);
  v25 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v26 = swift_allocObject();
  v27 = v38;
  *(_QWORD *)(v26 + 16) = a10;
  *(_QWORD *)(v26 + 24) = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v26 + v25, v20, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v36, *MEMORY[0x24BE768C0], v40);
  sub_2449CF2EC();
  TransportReply.init<A>(resuming:)((uint64_t)v24, a10, v27, v42);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v18 + 8))(v29[0], v17);
}

uint64_t sub_24495B5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v3 = sub_2449CF9DC();
  return sub_24495B654(a2, v3);
}

uint64_t sub_24495B654(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2449CFD90();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    return sub_2449CF9C4();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v15, v3);
    return sub_2449CF9D0();
  }
}

uint64_t TransportReply.init(file:line:column:function:resuming:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  return sub_24495B7F4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &qword_2573A0348, (uint64_t)&unk_251599580, (uint64_t)sub_24495C08C);
}

uint64_t sub_24495B7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v35 = a8;
  v33 = a6;
  v34 = a7;
  v31 = a4;
  v32 = a5;
  v30 = a3;
  v29[0] = a1;
  v29[1] = a2;
  v44 = a9;
  v40 = a13;
  v37 = a10;
  v38 = a12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v42 = *(_QWORD *)(v13 - 8);
  v43 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v41 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_2449CF634();
  v15 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(a11);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v21 = sub_2449CF724();
  MEMORY[0x24BDAC7A8](v21);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0340);
  v39 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF730();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a10, v18);
  v25 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v26 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v26 + v25, (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BE768C0], v36);
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  sub_2449CF2EC();
  type metadata accessor for LazyPropertyList();
  v27 = v41;
  sub_2449CF2F8();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v44, v27, v43);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v37, v18);
}

uint64_t sub_24495BAE0(uint64_t a1, uint64_t a2)
{
  id v2;

  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    v2 = *(id *)a2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0348);
    return sub_2449CF9C4();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0348);
    return sub_2449CF9D0();
  }
}

uint64_t sub_24495BB48()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v1 = sub_2449CFA9C();
  MEMORY[0x24951C158](MEMORY[0x24BE76D88], v1);
  return sub_2449CF460();
}

uint64_t sub_24495BBE8()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE90);
  sub_24495D96C();
  return sub_2449CF460();
}

uint64_t sub_24495BC68()
{
  return objectdestroyTm_0(&qword_25739FE90);
}

uint64_t sub_24495BC74(uint64_t a1, uint64_t a2)
{
  return sub_24495C0A0(a1, a2, &qword_25739FE90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24495BBE8);
}

uint64_t sub_24495BC88()
{
  return objectdestroy_2Tm((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BE76D78]);
}

uint64_t sub_24495BC94(uint64_t a1, uint64_t a2)
{
  return sub_24495BF94(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BE76D78], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24495BB48);
}

uint64_t sub_24495BCA8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_24495BCB0()
{
  return sub_2449CF658();
}

uint64_t sub_24495BCD8()
{
  return 16;
}

__n128 sub_24495BCE4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_24495BCF4()
{
  return 16;
}

__n128 sub_24495BD00(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_24495BD0C()
{
  return swift_getAtKeyPath();
}

uint64_t sub_24495BD14()
{
  return swift_deallocObject();
}

uint64_t sub_24495BD24@<X0>(uint64_t a1@<X8>)
{
  return sub_24495A1C8(a1);
}

uint64_t sub_24495BD30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24495BD54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_24495BD80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2449CF76C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24495BDF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = sub_2449CF76C();
  v6 = ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  return sub_24495A734(a1, (os_log_type_t)*(_BYTE *)(v2 + v6), *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + v2 + 8), *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + v2 + 16), a2);
}

uint64_t sub_24495BE58()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24495BE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 32))(a2);
}

uint64_t sub_24495BEA0()
{
  return swift_deallocObject();
}

uint64_t sub_24495BEB0()
{
  return sub_24495B2AC();
}

uint64_t sub_24495BEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t sub_24495BEF0()
{
  return objectdestroy_2Tm((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6830]);
}

uint64_t objectdestroy_2Tm(uint64_t (*a1)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v5 = a1(0, v3, v4, MEMORY[0x24BEE3F20]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
  return swift_deallocObject();
}

uint64_t sub_24495BF80(uint64_t a1, uint64_t a2)
{
  return sub_24495BF94(a1, a2, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6830], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24495B5F8);
}

uint64_t sub_24495BF94(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t, _QWORD), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a3(0, v8, v10, MEMORY[0x24BEE3F20]) - 8) + 80);
  return a4(a1, a2, v4 + ((v11 + 32) & ~v11), v8, v9);
}

uint64_t sub_24495C024()
{
  return objectdestroyTm_0(&qword_2573A0348);
}

uint64_t objectdestroyTm_0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_24495C08C(uint64_t a1, uint64_t a2)
{
  return sub_24495C0A0(a1, a2, &qword_2573A0348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_24495BAE0);
}

uint64_t sub_24495C0A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a3) - 8) + 80);
  return a4(a1, a2, v4 + ((v7 + 16) & ~v7));
}

uint64_t TransportReply.init<A>(file:line:column:function:fulfilling:)@<X0>(int a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, int a6@<W7>, uint64_t a7@<X8>, uint64_t *a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a6;
  v25 = a4;
  v26 = a5;
  v23 = a2;
  v24 = a3;
  v22[1] = a1;
  v29 = a7;
  v28 = a9;
  v9 = *a8;
  v10 = sub_2449CF634();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2449CF724();
  MEMORY[0x24BDAC7A8](v14);
  v15 = *(_QWORD *)(v9 + *MEMORY[0x24BE76BF8]);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v16 = sub_2449CF310();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v22 - v17;
  sub_2449CF730();
  v19 = swift_allocObject();
  v20 = v28;
  *(_QWORD *)(v19 + 16) = v28;
  *(_QWORD *)(v19 + 24) = a8;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BE768C0], v10);
  swift_retain();
  sub_2449CF2EC();
  TransportReply.init<A>(resuming:)((uint64_t)v18, v15, v20, v29);
  return swift_release();
}

uint64_t sub_24495C2EC()
{
  return sub_2449CF718();
}

uint64_t (*TransportReply.makeEncodedReplyHandler(file:line:column:function:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8))(void *a1, void *a2)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v28 = a8;
  v26 = a6;
  v27 = a7;
  v24 = a4;
  v25 = a5;
  v23[3] = a3;
  v8 = type metadata accessor for TransportReply();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = sub_2449CF724();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v23 - v16;
  sub_2449CF730();
  sub_2449513C8(v29, (uint64_t)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v18(v15, v17, v11);
  v19 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v20 = (v10 + *(unsigned __int8 *)(v12 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v21 = swift_allocObject();
  sub_24493DD84((uint64_t)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v19, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  v18((char *)(v21 + v20), v15, v11);
  return sub_24495C914;
}

uint64_t type metadata accessor for TransportReply()
{
  uint64_t result;

  result = qword_2573A03B0;
  if (!qword_2573A03B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24495C4D8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;

  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v38 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (_QWORD *)((char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (_QWORD *)((char *)v38 - v20);
  if (a1)
  {
    v22 = a1;
    v23 = objc_msgSend(v22, sel_data);
    v24 = sub_2449CF04C();
    v26 = v25;

    *v21 = v24;
    v21[1] = v26;
    type metadata accessor for LazyPropertyList();
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    sub_2449CF2E0();

    return sub_244940E8C((uint64_t)v21, &qword_25739FDA0);
  }
  else
  {
    v41 = v9;
    if (a2)
    {
      v38[1] = v19;
      v40 = a4;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v12, a3, v8);
      swift_getErrorValue();
      v39 = a2;
      v28 = a2;
      sub_2449CFD0C();
      v29 = v43;
      v30 = __swift_project_boxed_opaque_existential_1(v42, v43);
      v31 = *(_QWORD *)(v29 - 8);
      MEMORY[0x24BDAC7A8](v30);
      v33 = (char *)v38 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v31 + 16))(v33);
      v34 = sub_2449CFCA0();
      if (v34)
      {
        v35 = v34;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v29);
      }
      else
      {
        v35 = swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v37, v33, v29);
      }
      *v18 = v35;
      swift_storeEnumTagMultiPayload();
      sub_2449CF2E0();

      sub_244940E8C((uint64_t)v18, &qword_25739FDA0);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v8);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    }
    else
    {
      v36 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v14, a3, v8);
      sub_24495D928();
      *v21 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      sub_2449CF2E0();
      sub_244940E8C((uint64_t)v21, &qword_25739FDA0);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v14, v8);
    }
  }
}

uint64_t sub_24495C858()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for TransportReply() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = sub_2449CF724();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v2, v7);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t sub_24495C914(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for TransportReply() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_2449CF724() - 8) + 80);
  return sub_24495C4D8(a1, a2, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8));
}

uint64_t TransportReply.init(encodedReplyHandler:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = sub_2449CF634();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(swift_allocObject() + 16) = a3;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE768C8], v6);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  type metadata accessor for LazyPropertyList();
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  return sub_2449CF2B0();
}

unint64_t sub_24495CAD4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v2 = sub_2449CF400();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - v13;
  v15 = objc_msgSend(a1, sel_data);
  v16 = sub_2449CF04C();
  v18 = v17;

  *v8 = v16;
  v8[1] = v18;
  swift_storeEnumTagMultiPayload();
  LazyPropertyList.propertyList.getter((uint64_t)v14);
  sub_24495D8A8((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  sub_24495D8E4((uint64_t)v14, (uint64_t)v12, &qword_25739F710);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v12, v2);
    sub_24494C288();
    sub_2449CFC88();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_244940E8C((uint64_t)v14, &qword_25739F710);
  v21 = 0;
  v22 = 0xE000000000000000;
  sub_2449CFB98();
  swift_bridgeObjectRelease();
  v21 = 0xD000000000000013;
  v22 = 0x80000002449E3C40;
  sub_2449CF898();
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_24495CD50()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t sub_24495CD74()
{
  uint64_t v0;

  return sub_24495CAD4(*(void **)(v0 + 16));
}

uint64_t sub_24495CD7C(uint64_t a1, void (*a2)(id, void *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  id v13;
  _QWORD v15[4];

  v4 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void **)((char *)&v15[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24495D8E4(a1, (uint64_t)v9, &qword_25739FDA0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *v9;
    swift_getErrorValue();
    sub_2449CFD0C();
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    v11 = (void *)sub_2449CF55C();
    a2(0, v11);

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    sub_24493DD84((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
    v13 = LazyPropertyList.encoded.getter();
    a2(v13, 0);

    return sub_24495D8A8((uint64_t)v6);
  }
}

uint64_t sub_24495CF04(uint64_t a1)
{
  uint64_t v1;

  return sub_24495CD7C(a1, *(void (**)(id, void *))(v1 + 16));
}

uint64_t (*TransportReply.makeEagerReplyHandler(file:line:column:function:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8))(uint64_t a1)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*result)(uint64_t);
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v9 = v8;
  v30 = a8;
  v28 = a6;
  v29 = a7;
  v26 = a4;
  v27 = a5;
  v13 = type metadata accessor for TransportReply();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  sub_2449513C8(v9, (uint64_t)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  sub_24493DD84((uint64_t)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v16, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  v20 = v19 + ((v16 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v20 = a1;
  *(_QWORD *)(v20 + 8) = a2;
  *(_BYTE *)(v20 + 16) = a3;
  *(_QWORD *)(v19 + v17) = v26;
  v21 = v28;
  *(_QWORD *)(v19 + v18) = v27;
  result = sub_24495D36C;
  v23 = v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = v29;
  *(_QWORD *)v23 = v21;
  *(_QWORD *)(v23 + 8) = v24;
  *(_BYTE *)(v23 + 16) = v30;
  return result;
}

uint64_t sub_24495D040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a1;
  v36 = a8;
  v33 = a6;
  v34 = a7;
  v32 = a5;
  v28 = a3;
  v29 = a4;
  v27 = a2;
  v31 = a9;
  v30 = a10;
  v10 = sub_2449CF400();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A03E8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v38);
  v18 = (uint64_t *)((char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = sub_2449CF724();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v27, v21);
  sub_2449CF730();
  sub_24495D8E4(v35, (uint64_t)v16, &qword_2573A03E8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *v18 = *v16;
  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 32))(v13, v16, v10);
    (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 16))(v18, v13, v10);
    type metadata accessor for LazyPropertyList();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  swift_storeEnumTagMultiPayload();
  sub_2449CF2E0();
  sub_244940E8C((uint64_t)v18, &qword_25739FDA0);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
}

uint64_t sub_24495D2DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TransportReply() - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocObject();
}

uint64_t sub_24495D36C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for TransportReply() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v5 + 31) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_24495D040(a1, v1 + v4, *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v6 + 8), *(unsigned __int8 *)(v1 + v6 + 16), *(_QWORD *)(v1 + v7), *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16));
}

uint64_t TransportReply.init(eagerReplyHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v14[1] = a1;
  v16 = a2;
  v15 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v2 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2449CF634();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0350);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BE768C0], v5);
  sub_2449CF400();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  sub_2449CF2B0();
  type metadata accessor for LazyPropertyList();
  sub_2449CF304();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v16, v4, v15);
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for TransportReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for TransportReply(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for TransportReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for TransportReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for TransportReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for TransportReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransportReply()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24495D7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TransportReply()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24495D7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_24495D840()
{
  unint64_t v0;

  sub_24494B410();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_24495D8A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LazyPropertyList();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24495D8E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_24495D928()
{
  unint64_t result;

  result = qword_2573A03F0;
  if (!qword_2573A03F0)
  {
    result = MEMORY[0x24951C158](&unk_2449D5440, &type metadata for TransportReply.EmptyReply);
    atomic_store(result, (unint64_t *)&qword_2573A03F0);
  }
  return result;
}

unint64_t sub_24495D96C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2573A03F8[0];
  if (!qword_2573A03F8[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25739FE90);
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D88], v1);
    atomic_store(result, qword_2573A03F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TransportReply.EmptyReply()
{
  return &type metadata for TransportReply.EmptyReply;
}

void sub_24495D9D4()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  const char *v15;
  void *v16;

  v9 = MEMORY[0x24BEE0190] + 64;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v2 = swift_getAssociatedTypeWitness();
    if (v3 <= 0x3F)
    {
      v11 = *(_QWORD *)(v2 - 8) + 64;
      sub_244961E90();
      if (v4 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        v12 = &v8;
        swift_getTupleTypeLayout2();
        v13 = &v7;
        swift_getAssociatedTypeWitness();
        __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
        sub_2449CF364();
        if (v5 <= 0x3F)
        {
          swift_getTupleTypeLayout2();
          v14 = &v6;
          v15 = "\b";
          v16 = &unk_2449D54E8;
          swift_initClassMetadata2();
        }
      }
    }
  }
}

uint64_t sub_24495DBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v20 = a1;
  v21 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - v8;
  v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - v11;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)&v19 - v11, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v21, v6);
  swift_allocObject();
  v14 = sub_24495EFA8((uint64_t)v12, (uint64_t)v9);
  type metadata accessor for Junction(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  v16 = MEMORY[0x24951C158](&unk_2449D5580, v3);
  v17 = swift_retain();
  *(_QWORD *)(v14 + *(_QWORD *)(*(_QWORD *)v14 + 144)) = sub_244977694(v17, v16, 0, 0, (uint64_t)sub_24496260C, v14, (uint64_t)sub_2449625B0, v14);
  swift_retain_n();
  swift_retain();
  swift_release();
  v22 = v14;
  swift_retain();
  MEMORY[0x24951C158](&unk_2449D5550, v3);
  sub_2449CF61C();
  swift_release();
  return v14;
}

uint64_t sub_24495DDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = *v4;
  v5[9] = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  v5[10] = swift_task_alloc();
  v6 = type metadata accessor for AsyncMessageStream(0);
  v5[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[12] = v7;
  v5[13] = *(_QWORD *)(v7 + 64);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0498);
  v5[16] = v8;
  v5[17] = *(_QWORD *)(v8 - 8);
  v5[18] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04A0);
  v5[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[20] = v10;
  v5[21] = *(_QWORD *)(v10 + 64);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  swift_getObjectType();
  v5[25] = sub_2449CF9AC();
  v5[26] = v11;
  return swift_task_switch();
}

uint64_t sub_24495DF50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0[23];
  v2 = v0[24];
  v36 = v0[22];
  v40 = v0[21];
  v3 = v0[19];
  v38 = v0[20];
  v5 = v0[17];
  v4 = v0[18];
  v6 = v0[16];
  v29 = v0[14];
  v30 = v0[12];
  v7 = v0[9];
  v34 = v0[8];
  v35 = v0[10];
  v25 = v0[7];
  v26 = (uint64_t *)v0[15];
  v41 = v0[6];
  v8 = v2 + *(int *)(v3 + 48);
  v39 = v0[5];
  v37 = v0[4];
  type metadata accessor for AsyncMessageStream.Event(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v4, *MEMORY[0x24BEE6A10], v6);
  sub_2449CFA00();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v9 = v1;
  v24 = v1;
  v10 = v1 + *(int *)(v3 + 48);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04A8);
  v12 = *(_QWORD *)(v11 - 8);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v33(v9, v2, v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v32 = v13;
  v31(v10, v8, v13);
  sub_2449CFB98();
  sub_2449CF898();
  v27 = *(_QWORD *)(v7 + 80);
  v28 = *(_QWORD *)(v7 + 88);
  swift_getAssociatedTypeWitness();
  sub_2449CFCAC();
  sub_2449277D0(v10, 0, 0xE000000000000000, v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v24, v11);
  v0[2] = v25;
  sub_24493DCE8((uint64_t)v26, v29, type metadata accessor for AsyncMessageStream);
  v14 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v15 = swift_allocObject();
  sub_24493DD84(v29, v15 + v14, type metadata accessor for AsyncMessageStream);
  MEMORY[0x24951C158](&unk_2449D5550, v34);
  sub_2449CF61C();
  swift_release();
  v16 = sub_2449CF9F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v35, 1, 1, v16);
  v17 = v36 + *(int *)(v3 + 48);
  v33(v36, v2, v11);
  v31(v17, v8, v32);
  v18 = (*(unsigned __int8 *)(v38 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v37;
  v19[3] = v39;
  v19[4] = v27;
  v19[5] = v28;
  v19[6] = v25;
  sub_2449314A4(v36, (uint64_t)v19 + v18, &qword_2573A04A0);
  v20 = (_QWORD *)((char *)v19 + ((v40 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v20 = v37;
  v20[1] = v39;
  swift_unknownObjectRetain_n();
  swift_retain();
  sub_2449BD140(v35, (uint64_t)&unk_2573A0580, (uint64_t)v19);
  swift_release();
  v21 = (_QWORD *)swift_task_alloc();
  v0[27] = v21;
  v21[2] = v25;
  v21[3] = v41;
  v21[4] = v26;
  v22 = (_QWORD *)swift_task_alloc();
  v0[28] = v22;
  *v22 = v0;
  v22[1] = sub_24495E360;
  return sub_2449CFCF4();
}

uint64_t sub_24495E360()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24495E3D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  sub_244940E8C(*(_QWORD *)(v0 + 192), &qword_2573A04A0);
  sub_2449299E4(v1, type metadata accessor for AsyncMessageStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24495E480()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  sub_244940E8C(*(_QWORD *)(v0 + 192), &qword_2573A04A0);
  sub_2449299E4(v1, type metadata accessor for AsyncMessageStream);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24495E530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  v5[7] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0498);
  v5[8] = v7;
  v5[9] = *(_QWORD *)(v7 - 8);
  v5[10] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04A0);
  v5[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[12] = v9;
  v5[13] = *(_QWORD *)(v9 + 64);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  v5[17] = *(_QWORD *)(v6 + 88);
  v5[18] = *(_QWORD *)(v6 + 80);
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v5[19] = sub_2449CF364();
  sub_2449CF34C();
  v5[20] = swift_getTupleTypeMetadata2();
  v5[21] = swift_task_alloc();
  swift_getObjectType();
  v5[22] = sub_2449CF9AC();
  v5[23] = v10;
  return swift_task_switch();
}

uint64_t sub_24495E6F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[21];
  v2 = v0[6] + *(_QWORD *)(*(_QWORD *)v0[6] + 136);
  v3 = *(int *)(v0[20] + 48);
  v4 = *(_QWORD *)(v0[19] - 8);
  v0[24] = v4;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v1, v2);
  *(_QWORD *)(v1 + v3) = *(_QWORD *)(v2 + v3);
  v5 = (_QWORD *)swift_task_alloc();
  v0[25] = v5;
  *v5 = v0;
  v5[1] = sub_24495E790;
  return sub_2449CF358();
}

uint64_t sub_24495E790()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[24] + 8))(v2[21], v2[19]);
  return swift_task_switch();
}

uint64_t sub_24495E808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v21 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 128);
  v30 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 120);
  v26 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 112);
  v25 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 48);
  v27 = *(_QWORD *)(v0 + 32);
  v28 = *(_QWORD *)(v0 + 40);
  v22 = *(uint64_t **)(v0 + 16);
  v7 = v1 + *(int *)(v3 + 48);
  type metadata accessor for AsyncMessageStream.Event(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v5, *MEMORY[0x24BEE6A10], v6);
  v19 = v1;
  sub_2449CFA00();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  v8 = v2 + *(int *)(v3 + 48);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04A8);
  v10 = *(_QWORD *)(v9 - 8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v20(v2, v1, v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v18(v8, v7, v11);
  sub_2449CFB98();
  sub_2449CF898();
  swift_getAssociatedTypeWitness();
  sub_2449CFCAC();
  sub_2449277D0(v8, 0, 0xE000000000000000, v22);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
  v12 = sub_2449CF9F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v23, 1, 1, v12);
  v13 = v24 + *(int *)(v3 + 48);
  v20(v24, v19, v9);
  v18(v13, v7, v11);
  v14 = (*(unsigned __int8 *)(v25 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v27;
  v15[3] = v28;
  v15[4] = v21;
  v15[5] = v30;
  v15[6] = v29;
  sub_2449314A4(v24, (uint64_t)v15 + v14, &qword_2573A04A0);
  v16 = (_QWORD *)((char *)v15 + ((v26 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v16 = v27;
  v16[1] = v28;
  swift_unknownObjectRetain_n();
  swift_retain();
  sub_2449BD140(v23, (uint64_t)&unk_2573A04B8, (uint64_t)v15);
  swift_release();
  sub_244940E8C(v19, &qword_2573A04A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24495EB3C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24495EBD0(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return sub_24495EFA8(a1, a2);
}

uint64_t sub_24495EC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  swift_getObjectType();
  MEMORY[0x24951C158](&unk_2449D5550, v4);
  return sub_2449CF628();
}

uint64_t sub_24495ECB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *a2;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v26 = sub_2449CF364();
  v27 = sub_2449CF34C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v5 = (char *)&TupleTypeMetadata2 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&TupleTypeMetadata2 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(uint64_t *)((char *)a2 + *(_QWORD *)(v3 + 144)) = 0;
  swift_release();
  v9 = (uint64_t)a2 + *(_QWORD *)(*a2 + 120);
  v10 = *(int *)(v6 + 48);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04E0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13(v8, v9, v11);
  v14 = *(_QWORD *)(v9 + v10);
  *(_QWORD *)&v8[v10] = v14;
  v28 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0558);
  sub_2449625C0();
  sub_2449CF454();
  v15 = *(void (**)(char *, uint64_t))(v12 + 8);
  v15(v8, v11);
  v16 = (uint64_t)a2 + *(_QWORD *)(*a2 + 128);
  v17 = *(int *)(v6 + 48);
  v13(v8, v16, v11);
  v18 = *(_QWORD *)(v16 + v17);
  *(_QWORD *)&v8[v17] = v18;
  v28 = v18;
  sub_2449CF454();
  v15(v8, v11);
  v19 = (uint64_t)a2 + *(_QWORD *)(*a2 + 136);
  v20 = v26;
  v21 = *(int *)(TupleTypeMetadata2 + 48);
  v22 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v5, v19, v26);
  v23 = *(_QWORD *)(v19 + v21);
  *(_QWORD *)&v5[v21] = v23;
  v28 = v23;
  MEMORY[0x24951C158](MEMORY[0x24BE76490], v27);
  sub_2449CF454();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v5, v20);
}

uint64_t sub_24495EFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  sub_2449CF694();
  swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_2449CF688();
  v4 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 120);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488);
  v6 = *(int *)(v5 + 48);
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  *(_QWORD *)(v4 + v6) = sub_2449CF340();
  v7 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 128);
  v8 = *(int *)(v5 + 48);
  *(_QWORD *)(v7 + v8) = sub_2449CF340();
  v9 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 136);
  swift_getAssociatedTypeWitness();
  sub_2449CF364();
  sub_2449CF34C();
  v10 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  *(_QWORD *)(v9 + v10) = sub_2449CF340();
  *(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 144)) = 0;
  v11 = (_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 152));
  *v11 = 0;
  v11[1] = 0;
  v12 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v12, a1, AssociatedTypeWitness);
  v14 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 112);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v15 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a2, v15);
  return v3;
}

uint64_t sub_24495F2D0()
{
  type metadata accessor for AsyncMessageStream(0);
  sub_24493DED4((unint64_t *)&unk_25739EEB0, type metadata accessor for AsyncMessageStream, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  return sub_2449CF484();
}

uint64_t sub_24495F35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v11;
  *v11 = v7;
  v11[1] = sub_2449382FC;
  return sub_24495F3C8(a5, a6, a7);
}

uint64_t sub_24495F3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = *v3;
  v5 = sub_2449CF4D8();
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0);
  v4[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[13] = v7;
  v4[14] = *(_QWORD *)(v7 + 64);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488);
  v4[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04C8);
  v4[19] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for PipeEvent.Content(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v4[20] = v11;
  v4[21] = *(_QWORD *)(v11 - 8);
  v4[22] = swift_task_alloc();
  v12 = type metadata accessor for AsyncMessageStream.Event(0);
  v4[23] = v12;
  v4[24] = *(_QWORD *)(v12 - 8);
  v4[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04D0);
  v4[26] = swift_task_alloc();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04D8);
  v4[27] = v13;
  v4[28] = *(_QWORD *)(v13 - 8);
  v4[29] = swift_task_alloc();
  swift_getObjectType();
  v4[30] = sub_2449CF9AC();
  v4[31] = v14;
  return swift_task_switch();
}

uint64_t sub_24495F5E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(uint64_t **)(v0 + 56);
  swift_getObjectType();
  sub_2449CF9B8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04A8);
  sub_2449CFA48();
  v2 = *v1;
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(*v1 + 120);
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v2 + 152);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 280) = v3;
  *v3 = v0;
  v3[1] = sub_24495F6C8;
  return sub_2449CFA60();
}

uint64_t sub_24495F6C8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24495F714()
{
  uint64_t v0;
  uint64_t v1;
  char *v3;

  v1 = *(_QWORD *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 48))(v1, 1, *(_QWORD *)(v0 + 184)) != 1)
  {
    sub_24493DD84(v1, *(_QWORD *)(v0 + 200), type metadata accessor for AsyncMessageStream.Event);
    v3 = (char *)sub_24495F838 + 4 * byte_2449D5480[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24495F838()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (uint64_t *)v0[25];
  v3 = v0[21];
  v2 = v0[22];
  v4 = v0[20];
  v5 = (uint64_t *)(v0[7] + v0[34]);
  v6 = v1[1];
  v7 = *v5;
  *v5 = *v1;
  v5[1] = v6;
  swift_retain();
  sub_2449514D4(v7);
  swift_storeEnumTagMultiPayload();
  sub_244960144(v2);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = (_QWORD *)swift_task_alloc();
  v0[35] = v8;
  *v8 = v0;
  v8[1] = sub_24495F6C8;
  return sub_2449CFA60();
}

uint64_t sub_24495FBE4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata3;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t AssociatedConformanceWitness;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  v53 = a4;
  v51 = a3;
  v49 = a2;
  v44 = a1;
  v4 = *(_QWORD *)a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v58 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for AsyncMessageStream(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
  v47 = *(_QWORD *)(v43 - 8);
  v48 = v7;
  MEMORY[0x24BDAC7A8](v43);
  v46 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0340);
  v57 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v52 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(v4 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v54 = type metadata accessor for PipeEvent.Content(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v56 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v13 = (char *)&v40 - v12;
  v14 = sub_2449CF634();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0588);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(qword_2573A0590);
  v50 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v44, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BE768C0], v14);
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  v24 = v23;
  sub_2449CF2BC();
  v25 = swift_getAssociatedTypeWitness();
  v26 = swift_getAssociatedTypeWitness();
  type metadata accessor for TransportReply();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v28 = &v13[*(int *)(TupleTypeMetadata3 + 48)];
  v29 = &v13[*(int *)(TupleTypeMetadata3 + 64)];
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v13, &v49[*(_QWORD *)(*(_QWORD *)v49 + 104)], v25);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v28, v51, v26);
  v30 = v46;
  sub_24493DCE8(v53, v46, type metadata accessor for AsyncMessageStream);
  v31 = (*(unsigned __int8 *)(v47 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  v32 = swift_allocObject();
  sub_24493DD84(v30, v32 + v31, type metadata accessor for AsyncMessageStream);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = sub_24496371C;
  *(_QWORD *)(v33 + 24) = v32;
  v34 = v45;
  v35 = v52;
  sub_2449CF2F8();
  swift_release();
  type metadata accessor for LazyPropertyList();
  v36 = v55;
  v37 = v58;
  sub_2449CF2F8();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v36);
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v29, v37, v60);
  v38 = v54;
  swift_storeEnumTagMultiPayload();
  sub_244960144((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v24, v34);
}

uint64_t sub_244960144(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v5 = (char *)&v17 - v4;
  v7 = type metadata accessor for PipeEvent.Content(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v17 - v9;
  v12 = type metadata accessor for PipeEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v19, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v20 + *(_QWORD *)(*(_QWORD *)v20 + 112), v18);
  sub_24494B844((uint64_t)v10, (uint64_t)v5, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v15);
  sub_24494C108(sub_244962170);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t (*sub_24496030C(uint64_t a1, uint64_t a2))(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v62)(char *, char *, uint64_t);
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v72 = a1;
  v73 = a2;
  v70 = *v2;
  v3 = *(_QWORD *)(v70 + 80);
  v84 = *(_QWORD *)(v70 + 88);
  v85 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v76 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v74 = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v75 = (char *)&v62 - v5;
  v9 = type metadata accessor for EndpointInvalidated(0, v6, v7, v8);
  v78 = *(_QWORD *)(v9 - 8);
  v79 = *(_QWORD *)(v78 + 64);
  v80 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v77 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v71 = (uint64_t)&v62 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  MEMORY[0x24BDAC7A8](v13);
  v68 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F8);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v22;
  v25 = MEMORY[0x24BDAC7A8](v21);
  v27 = (char *)&v62 - v26;
  v28 = *(int *)(v25 + 48);
  v82 = v25;
  v29 = (char *)&v62 + v28 - v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0500);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BEE6A10], v15);
  sub_2449CFA00();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v86 = v83;
  v30 = &v23[*(int *)(v19 + 48)];
  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0508);
  v69 = *(_QWORD *)(v81 - 8);
  v63 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
  v63(v23, v27, v81);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0510);
  v67 = *(_QWORD *)(v31 - 8);
  v62 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v65 = v29;
  v64 = v31;
  v62(v30, v29, v31);
  v32 = *(unsigned __int8 *)(v20 + 80);
  v33 = v24;
  v66 = v24;
  v34 = swift_allocObject();
  sub_2449314A4((uint64_t)v23, v34 + ((v32 + 16) & ~v32), &qword_2573A04F8);
  MEMORY[0x24951C158](&unk_2449D5550, v70);
  sub_2449CF61C();
  swift_release();
  v35 = sub_2449CF9F4();
  v36 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v68, 1, 1, v35);
  v37 = &v23[*(int *)(v82 + 48)];
  v63(v23, v27, v81);
  v62(v37, v29, v31);
  v38 = (v32 + 56) & ~v32;
  v39 = (v33 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = (_QWORD *)swift_allocObject();
  v41 = v72;
  v42 = v73;
  v40[2] = v72;
  v40[3] = v42;
  v43 = v84;
  v40[4] = v85;
  v40[5] = v43;
  v44 = (uint64_t)v40 + v38;
  v45 = v83;
  v40[6] = v83;
  sub_2449314A4((uint64_t)v23, v44, &qword_2573A04F8);
  v46 = (_QWORD *)((char *)v40 + v39);
  *v46 = v41;
  v46[1] = v42;
  swift_unknownObjectRetain_n();
  swift_retain();
  sub_2449BD140(v36, (uint64_t)&unk_2573A0520, (uint64_t)v40);
  swift_release();
  v47 = v45 + *(_QWORD *)(*(_QWORD *)v45 + 104);
  v48 = (uint64_t)v75;
  v49 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v47, v74);
  v50 = v71;
  sub_24494C8C4(v48, v49, v71);
  v51 = &v23[*(int *)(v82 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v23, v27, v81);
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v51, v65, v64);
  v53 = v77;
  v52 = v78;
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 32);
  v55 = v50;
  v56 = v80;
  v54(v77, v55, v80);
  v57 = (v32 + 32) & ~v32;
  v58 = (v57 + v66 + *(unsigned __int8 *)(v52 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  v59 = swift_allocObject();
  v60 = v84;
  *(_QWORD *)(v59 + 16) = v85;
  *(_QWORD *)(v59 + 24) = v60;
  sub_2449314A4((uint64_t)v23, v59 + v57, &qword_2573A04F8);
  v54((char *)(v59 + v58), (uint64_t)v53, v56);
  return sub_244962474;
}

uint64_t sub_244960848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    sub_244962188(*(id *)a1, 1);
    __swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0);
    return sub_2449CF9C4();
  }
  else
  {
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a3;
    *(_QWORD *)(v7 + 24) = a4;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0);
    return sub_2449CF9D0();
  }
}

uint64_t sub_2449608F4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0510);
  return sub_2449CFA30();
}

uint64_t sub_244960934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v11;
  *v11 = v7;
  v11[1] = sub_2449382FC;
  return sub_2449609A0(a5, a6, a7);
}

uint64_t sub_2449609A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  v4[20] = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  v4[21] = swift_task_alloc();
  v5 = sub_2449CF724();
  v4[22] = v5;
  v4[23] = *(_QWORD *)(v5 - 8);
  v4[24] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for PipeEvent.Content(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v4[25] = v9;
  v4[26] = *(_QWORD *)(v9 - 8);
  v4[27] = swift_task_alloc();
  v10 = sub_2449CF400();
  v4[28] = v10;
  v4[29] = *(_QWORD *)(v10 - 8);
  v4[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = type metadata accessor for LazyPropertyList();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0538);
  v4[36] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0540);
  v4[37] = v11;
  v4[38] = *(_QWORD *)(v11 - 8);
  v4[39] = swift_task_alloc();
  swift_getObjectType();
  v4[40] = sub_2449CF9AC();
  v4[41] = v12;
  return swift_task_switch();
}

uint64_t sub_244960BF0()
{
  uint64_t v0;
  _QWORD *v1;

  swift_getObjectType();
  sub_2449CF9B8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0508);
  sub_2449CFA48();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 336) = v1;
  *v1 = v0;
  v1[1] = sub_244960CE8;
  return sub_2449CFA60();
}

uint64_t sub_244960CE8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244960D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  void *v26;
  void *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0500);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 296));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 256);
  v7 = v1 + *(int *)(v2 + 48);
  sub_24493DD84(v1, v4, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
  sub_2449314A4(v7, v6, &qword_25739FD98);
  sub_24493DCE8(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v9 = *(uint64_t **)(v0 + 272);
  if (EnumCaseMultiPayload != 1)
  {
    (*(void (**)(_QWORD, uint64_t *, _QWORD))(*(_QWORD *)(v0 + 232) + 32))(*(_QWORD *)(v0 + 240), v9, *(_QWORD *)(v0 + 224));
    goto LABEL_8;
  }
  v10 = *v9;
  v11 = v9[1];
  v12 = (void *)objc_opt_self();
  v13 = (void *)sub_2449CF040();
  *(_QWORD *)(v0 + 112) = 0;
  v14 = objc_msgSend(v12, sel_propertyListWithData_options_format_error_, v13, 0, 0, v0 + 112);

  v15 = *(id *)(v0 + 112);
  if (v14)
  {
    sub_2449CFB5C();
    swift_unknownObjectRelease();
    sub_24493DF74(v0 + 16, v0 + 48);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0548);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_2449CF3A0();
      sub_244962528(v10, v11);
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
LABEL_8:
      v41 = *(_QWORD *)(v0 + 280);
      v16 = *(_QWORD *)(v0 + 256);
      v18 = *(_QWORD *)(v0 + 232);
      v17 = *(_QWORD *)(v0 + 240);
      v20 = *(_QWORD *)(v0 + 216);
      v19 = *(_QWORD *)(v0 + 224);
      v22 = *(_QWORD *)(v0 + 200);
      v21 = *(_QWORD *)(v0 + 208);
      v23 = v20 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA8) + 48);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v20, v17, v19);
      sub_24494C1C0(v16, v23);
      swift_storeEnumTagMultiPayload();
      sub_244960144(v20);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      sub_244940E8C(v16, &qword_25739FD98);
      v24 = type metadata accessor for LazyPropertyList;
      v25 = v41;
LABEL_14:
      sub_2449299E4(v25, (uint64_t (*)(_QWORD))v24);
      goto LABEL_15;
    }
    sub_24493DF74(v0 + 16, v0 + 80);
    sub_24496256C();
    v27 = (void *)swift_allocError();
    sub_24493DF64((_OWORD *)(v0 + 80), v28);
    swift_willThrow();
    sub_244962528(v10, v11);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  else
  {
    v26 = v15;
    v27 = (void *)sub_2449CEFE0();

    swift_willThrow();
    sub_244962528(v10, v11);
  }
  v29 = *(_QWORD *)(v0 + 248);
  sub_24494C1C0(*(_QWORD *)(v0 + 256), v29);
  v30 = type metadata accessor for TransportReply();
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30);
  v32 = *(_QWORD *)(v0 + 280);
  v33 = *(_QWORD *)(v0 + 248);
  v34 = *(_QWORD *)(v0 + 256);
  if (v31 != 1)
  {
    v36 = *(_QWORD *)(v0 + 184);
    v35 = *(_QWORD *)(v0 + 192);
    v38 = *(_QWORD **)(v0 + 168);
    v37 = *(_QWORD *)(v0 + 176);
    sub_2449CF730();
    *v38 = v27;
    swift_storeEnumTagMultiPayload();
    v39 = v27;
    __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    sub_2449CF2E0();
    sub_244940E8C((uint64_t)v38, &qword_25739FDA0);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);

    sub_244940E8C(v34, &qword_25739FD98);
    sub_2449299E4(v32, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
    v24 = type metadata accessor for TransportReply;
    v25 = v33;
    goto LABEL_14;
  }

  sub_244940E8C(v34, &qword_25739FD98);
  sub_2449299E4(v32, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
  sub_244940E8C(v33, &qword_25739FD98);
LABEL_15:
  v40 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 336) = v40;
  *v40 = v0;
  v40[1] = sub_244960CE8;
  return sub_2449CFA60();
}

uint64_t sub_2449612C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  id v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v34[0] = a6;
  v34[1] = a5;
  v35 = a4;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v36);
  v40 = (_QWORD *)((char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_2449CF724();
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v37 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0500);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0528);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F8);
  v21 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_24493DCE8(a1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
  sub_24494C1C0(a2, v21);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0510);
  sub_2449CFA24();
  v22 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  LODWORD(v16) = *MEMORY[0x24BEE69D0];
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (v22 == (_DWORD)v16)
  {
    sub_24494C1C0(a2, (uint64_t)v13);
    v24 = type metadata accessor for TransportReply();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v13, 1, v24) == 1)
    {
      return sub_244940E8C((uint64_t)v13, &qword_25739FD98);
    }
    else
    {
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v28 = type metadata accessor for EndpointInvalidated(0, AssociatedTypeWitness, v26, v27);
      MEMORY[0x24951C158](&unk_2449D3D90, v28);
      v29 = (void *)swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v30, v35, v28);
      v31 = v37;
      sub_2449CF730();
      v32 = (uint64_t)v40;
      *v40 = v29;
      swift_storeEnumTagMultiPayload();
      v33 = v29;
      __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
      sub_2449CF2E0();
      sub_244940E8C(v32, &qword_25739FDA0);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v31, v39);

      return sub_2449299E4((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
    }
  }
  return result;
}

uint64_t sub_244961630(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v14 - v7;
  if (*(_QWORD *)&a2[*(_QWORD *)(v4 + 144)])
  {
    swift_retain();
    sub_244977710(a1);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)&v14 - v7, &a2[*(_QWORD *)(v4 + 112)], AssociatedTypeWitness);
    v12 = type metadata accessor for EndpointInvalidated(0, AssociatedTypeWitness, v10, v11);
    MEMORY[0x24951C158](&unk_2449D3D90, v12);
    swift_allocError();
    sub_24494C8C4((uint64_t)v8, AssociatedTypeWitness, v13);
    return swift_willThrow();
  }
}

uint64_t sub_2449617A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  v14 = a6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v18(v14, a2, v13);
  v16 = a6 + *(int *)(type metadata accessor for Outlet.EndpointCollision(0, a4, a5, v15) + 36);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v16, a3, v13);
}

uint64_t sub_2449618FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  void (*v16)(char *, uint64_t);
  char *v17;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v2 = v1;
  v22 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v7 = (char *)&v19 - v6;
  v23 = 0;
  v24 = 0xE000000000000000;
  sub_2449CFB98();
  sub_2449CF898();
  v8 = *(int *)(TupleTypeMetadata2 + 48);
  v9 = &v7[v8];
  v10 = v1 + v8;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20 = v10;
  v21 = v12;
  v12(v7, v2, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v4 - 8);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v14(v9, v10, v4);
  sub_2449CFCAC();
  v15 = *(void (**)(char *, uint64_t))(v13 + 8);
  v15(v9, v4);
  v16 = *(void (**)(char *, uint64_t))(v11 + 8);
  v16(v7, AssociatedTypeWitness);
  sub_2449CF898();
  sub_2449CFCAC();
  sub_2449CF898();
  v22 = v23;
  v23 = 0;
  v19 = v24;
  v24 = 0xE000000000000000;
  sub_2449CFB98();
  sub_2449CF898();
  v17 = &v7[*(int *)(TupleTypeMetadata2 + 48)];
  v21(v7, v2, AssociatedTypeWitness);
  v14(v17, v20, v4);
  sub_2449CFCAC();
  v15(v17, v4);
  v16(v7, AssociatedTypeWitness);
  sub_2449CF898();
  v23 = v22;
  v24 = v19;
  sub_2449CF898();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  return v23;
}

unint64_t sub_244961BE4()
{
  return 0xD00000000000002BLL;
}

uint64_t sub_244961C04(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449D5638, a1);
  return sub_2449CF52C();
}

uint64_t sub_244961C38(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449D5638, a1);
  return sub_2449CF508();
}

uint64_t sub_244961C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;

  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_244940E8C(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120), &qword_2573A0488);
  sub_244940E8C(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128), &qword_2573A0488);
  v5 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  sub_2449CF364();
  sub_2449CF34C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 8))(v5, TupleTypeMetadata2);
  swift_release();
  sub_2449514D4(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152)));
  return v0;
}

uint64_t sub_244961E60()
{
  sub_244961C6C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Outlet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Outlet);
}

void sub_244961E90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2573A0480)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
    v0 = sub_2449CF364();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2573A0480);
  }
}

uint64_t sub_244961EFC()
{
  return swift_retain();
}

uint64_t sub_244961F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449D5550, a3);
  return sub_2449CF610();
}

void sub_244961F54()
{
  JUMPOUT(0x24951C158);
}

uint64_t sub_244961F64(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449D5550);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_244961F90()
{
  return objectdestroyTm_1(&qword_2573A04A0, &qword_2573A04A8, &qword_25739EE88);
}

uint64_t sub_244961FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A04A0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = *v5;
  v7 = v5[1];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_2449382FC;
  v9 = (_QWORD *)swift_task_alloc();
  v8[2] = v9;
  *v9 = v8;
  v9[1] = sub_2449382FC;
  return sub_24495F3C8(v4, v6, v7);
}

uint64_t sub_24496206C()
{
  return 0;
}

uint64_t sub_244962078()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2449620F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(qword_25739EFF0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_244960848(a1, v1 + v4, *v5, v5[1]);
}

uint64_t sub_24496214C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244962170(uint64_t a1)
{
  char *v1;

  return sub_244961630(a1, v1);
}

id sub_244962188(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t sub_244962194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F8);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0508);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v3 + *(int *)(v1 + 48);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0510);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocObject();
}

uint64_t sub_244962240()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F8);
  return sub_2449608F4();
}

uint64_t sub_244962280()
{
  return objectdestroyTm_1(&qword_2573A04F8, &qword_2573A0508, &qword_2573A0510);
}

uint64_t sub_24496229C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F8) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = *v5;
  v7 = v5[1];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_244933754;
  v9 = (_QWORD *)swift_task_alloc();
  v8[2] = v9;
  *v9 = v8;
  v9[1] = sub_2449382FC;
  return sub_2449609A0(v4, v6, v7);
}

uint64_t sub_24496235C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EndpointInvalidated(0, AssociatedTypeWitness, v6, v7)- 8)+ 80);
  v9 = (v4 + v8) & ~v8;
  v10 = v0 + v3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0508);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v10 + *(int *)(v1 + 48);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0510);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0 + v9, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_244962474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A04F8) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EndpointInvalidated(0, AssociatedTypeWitness, v11, v12)- 8)+ 80);
  return sub_2449612C0(a1, a2, v2 + v8, v2 + ((v9 + v13) & ~v13), v5, v6);
}

uint64_t sub_244962528(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_24496256C()
{
  unint64_t result;

  result = qword_2573A0550;
  if (!qword_2573A0550)
  {
    result = MEMORY[0x24951C158](&unk_2449D97E0, &type metadata for LazyPropertyList.InvalidDeserialization);
    atomic_store(result, (unint64_t *)&qword_2573A0550);
  }
  return result;
}

uint64_t sub_2449625B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_24495EC18(a1, a2, a3, v3);
}

uint64_t sub_2449625B8(uint64_t a1)
{
  uint64_t *v1;

  return sub_24495ECB8(a1, v1);
}

unint64_t sub_2449625C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2573A0560;
  if (!qword_2573A0560)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573A0558);
    result = MEMORY[0x24951C158](MEMORY[0x24BE76490], v1);
    atomic_store(result, (unint64_t *)&qword_2573A0560);
  }
  return result;
}

uint64_t sub_24496260C(uint64_t a1)
{
  return sub_244962620(a1);
}

uint64_t sub_244962620(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t TupleTypeMetadata2;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t AssociatedConformanceWitness;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t AssociatedTypeWitness;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;

  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v52 = (char *)v40 - v6;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v41);
  v44 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_2449CF724();
  v42 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v40[2] = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v10 = sub_2449CF364();
  v11 = sub_2449CF34C();
  v51 = v10;
  v48 = v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v49 = (char *)v40 - v12;
  v62 = type metadata accessor for TransportReply();
  v13 = MEMORY[0x24BDAC7A8](v62);
  v75 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = v9;
  v76 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v69 = (char *)v40 - v15;
  v16 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v63 = v16;
  v74 = swift_getAssociatedTypeWitness();
  v73 = *(_QWORD *)(v74 - 8);
  v17 = MEMORY[0x24BDAC7A8](v74);
  v46 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v45 = (char *)v40 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v70 = (char *)v40 - v21;
  v55 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v55);
  v54 = (char *)v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v23);
  v66 = (char *)v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_2449CF400();
  v65 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v64 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_2449CF4D8();
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v57 = (char *)v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488);
  v27 = MEMORY[0x24BDAC7A8](v71);
  v58 = (char *)v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v56 = (char *)v40 - v29;
  v31 = type metadata accessor for PipeEvent.Content(0, v3, v4, v30);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)v40 - v33;
  type metadata accessor for PipeEvent(0, v3, v4, v35);
  v36 = a1;
  v68 = v5;
  v37 = v80 + *(_QWORD *)(v5 + 104);
  v53 = v4;
  swift_getAssociatedConformanceWitness();
  if ((sub_2449CF850() & 1) != 0)
  {
    v40[1] = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v36, v31);
    v38 = (char *)&loc_244962BD8 + 4 * word_2449D5484[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v78 = 0;
  v79 = 0xE000000000000000;
  sub_2449CFB98();
  sub_2449CF898();
  sub_2449CFCAC();
  sub_2449CF898();
  sub_2449CFCAC();
  sub_2449CF898();
  sub_2449CF244();
  sub_24493DED4(&qword_2573A0568, (uint64_t (*)(uint64_t))MEMORY[0x24BE763B0], MEMORY[0x24BE763C0]);
  swift_allocError();
  sub_2449CF250();
  return swift_willThrow();
}

uint64_t type metadata accessor for Outlet.EndpointCollision(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Outlet.EndpointCollision);
}

uint64_t sub_244963480()
{
  type metadata accessor for AsyncMessageStream(0);
  return sub_24495F2D0();
}

uint64_t sub_2449634BC()
{
  return objectdestroyTm_1(&qword_2573A04A0, &qword_2573A04A8, &qword_25739EE88);
}

uint64_t objectdestroyTm_1(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 56) & ~v7;
  swift_unknownObjectRelease();
  swift_release();
  v9 = v3 + v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v9 + *(int *)(v6 + 48);
  v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2449635A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A04A0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = *v5;
  v7 = v5[1];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_2449382FC;
  v9 = (_QWORD *)swift_task_alloc();
  v8[2] = v9;
  *v9 = v8;
  v9[1] = sub_2449382FC;
  return sub_24495F3C8(v4, v6, v7);
}

uint64_t sub_244963668(uint64_t a1)
{
  uint64_t v1;

  return sub_24495FBE4(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t objectdestroy_28Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AsyncMessageStream(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 24);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24496371C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AsyncMessageStream(0) - 8) + 80);
  return sub_24493DCE8(v1 + ((v3 + 16) & ~v3), a1, type metadata accessor for AsyncMessageStream);
}

uint64_t sub_244963764()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_244963784()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[6];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v2 = swift_getAssociatedTypeWitness();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = *(_QWORD *)(v2 - 8) + 64;
      swift_getTupleTypeLayout2();
      v6[4] = v6;
      v6[5] = v4;
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_2449638B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, unint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v6 + v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = ((v6 + v9) & ~v9) + v11 + v9;
  v13 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v8 + 80));
  if (v13 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v12 & (unint64_t)~v9) + v11 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  else
  {
    v17 = v7;
    v18 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v19 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v19(((unint64_t)a1 + v10) & v18, ((unint64_t)a2 + v10) & v18, v17);
    v19(((unint64_t)a1 + v12) & v18, ((unint64_t)a2 + v12) & v18, v17);
  }
  return a1;
}

uint64_t sub_244963A34(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  v4 = *(_QWORD *)(v3 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v7 + a1;
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v10((v8 + v4) & ~v7, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v8 + *(_QWORD *)(v6 + 64) + ((v4 + v7) & ~v7)) & ~v7, v5);
}

uint64_t sub_244963B54(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v10((v6 + v9 + a1) & ~v9, (v6 + v9 + a2) & ~v9, v7);
  v11 = ((v6 + v9) & ~v9) + *(_QWORD *)(v8 + 64);
  v10((v9 + a1 + v11) & ~v9, (v9 + a2 + v11) & ~v9, v7);
  return a1;
}

uint64_t sub_244963C84(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v10((v6 + v9 + a1) & ~v9, (v6 + v9 + a2) & ~v9, v7);
  v11 = ((v6 + v9) & ~v9) + *(_QWORD *)(v8 + 64);
  v10((v9 + a1 + v11) & ~v9, (v9 + a2 + v11) & ~v9, v7);
  return a1;
}

uint64_t sub_244963DB4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v10((v6 + v9 + a1) & ~v9, (v6 + v9 + a2) & ~v9, v7);
  v11 = ((v6 + v9) & ~v9) + *(_QWORD *)(v8 + 64);
  v10((v9 + a1 + v11) & ~v9, (v9 + a2 + v11) & ~v9, v7);
  return a1;
}

uint64_t sub_244963EE4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v10((v6 + v9 + a1) & ~v9, (v6 + v9 + a2) & ~v9, v7);
  v11 = ((v6 + v9) & ~v9) + *(_QWORD *)(v8 + 64);
  v10((v9 + a1 + v11) & ~v9, (v9 + a2 + v11) & ~v9, v7);
  return a1;
}

uint64_t sub_244964014(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(_QWORD *)(v5 + 64) + v11;
  if (a2 <= v10)
    goto LABEL_23;
  v13 = ((*(_QWORD *)(v8 + 64) + v11 + (v12 & ~v11)) & ~v11) + *(_QWORD *)(v8 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_23:
      if (v10)
      {
        if (v6 >= v9)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v12 + a1) & ~v11, v9, v7);
      }
      return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_23;
LABEL_14:
  v17 = (v15 - 1) << v14;
  if (v13 > 3)
    v17 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v18 = v13;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  return v10 + v17 + 1;
}

void sub_244964248(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v8 + 84) <= v7)
    v9 = v7;
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = ((*(_QWORD *)(v8 + 64)
        + *(unsigned __int8 *)(v8 + 80)
        + ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 64);
  if (a3 <= v9)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (v9 < a2)
  {
    v12 = ~v9 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_244964500()
{
  JUMPOUT(0x24951C158);
}

void sub_244964510()
{
  JUMPOUT(0x24951C158);
}

void sub_244964520()
{
  JUMPOUT(0x24951C158);
}

uint64_t Transport.legacyMessageKey.getter()
{
  return 0;
}

uint64_t Transport.activation.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 32) + *(_QWORD *)(a2 + 32));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2449645B0;
  return v7(a1, a2);
}

uint64_t sub_2449645B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t Transport.invalidatedError.getter@<X0>(uint64_t *a1@<X8>)
{
  sub_2449CFB98();
  sub_2449CFCB8();
  sub_2449CF898();
  a1[3] = sub_2449CF424();
  a1[4] = sub_2449646CC();
  __swift_allocate_boxed_opaque_existential_1(a1);
  return sub_2449CF430();
}

unint64_t sub_2449646CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25739FEB0;
  if (!qword_25739FEB0)
  {
    v1 = sub_2449CF424();
    result = MEMORY[0x24951C158](MEMORY[0x24BE765D8], v1);
    atomic_store(result, (unint64_t *)&qword_25739FEB0);
  }
  return result;
}

uint64_t dispatch thunk of Transport.activate(receiver:interruptionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of Transport.sender.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 32) + *(_QWORD *)(a2 + 32));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_244964788;
  return v7(a1, a2);
}

uint64_t sub_244964788(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of Transport.legacyMessageKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t UVPropertyList.decoded.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(v1, sel_data);
  v4 = sub_2449CF04C();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  type metadata accessor for LazyPropertyList();
  return swift_storeEnumTagMultiPayload();
}

id LazyPropertyList.encoded.getter()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  id v6;

  v0 = sub_2449CF76C();
  MEMORY[0x24BDAC7A8](v0);
  v1 = LazyPropertyList.data.getter();
  v3 = v2;
  v4 = objc_allocWithZone(MEMORY[0x24BE78718]);
  v5 = (void *)sub_2449CF040();
  v6 = objc_msgSend(v4, sel_initWithData_, v5);
  sub_244962528((uint64_t)v1, v3);

  return v6;
}

id PropertyList.encoded.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  uint64_t v7;

  v1 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_2449CF400();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v3, v0, v4);
  swift_storeEnumTagMultiPayload();
  v5 = LazyPropertyList.encoded.getter();
  sub_24495D8A8((uint64_t)v3);
  return v5;
}

uint64_t UVPropertyList.eagerlyDecoded.getter()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_dictionary);
  sub_2449CF7D8();

  return sub_2449CF3A0();
}

PreviewsMessagingOS::BitmapDescription::ByteOrder_optional __swiftcall BitmapDescription.ByteOrder.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  PreviewsMessagingOS::BitmapDescription::ByteOrder_optional v2;

  v1 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = PreviewsMessagingOS_BitmapDescription_ByteOrder_big;
  else
    v2.value = PreviewsMessagingOS_BitmapDescription_ByteOrder_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t BitmapDescription.ByteOrder.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 6777186;
  else
    return 0x656C7474696CLL;
}

uint64_t sub_244964C50(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = BitmapDescription.ByteOrder.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == BitmapDescription.ByteOrder.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_244964CD8()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  BitmapDescription.ByteOrder.rawValue.getter(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_244964D38()
{
  char *v0;

  BitmapDescription.ByteOrder.rawValue.getter(*v0);
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244964D78()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  BitmapDescription.ByteOrder.rawValue.getter(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_244964DD4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_244964E30@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = BitmapDescription.ByteOrder.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244964E58()
{
  sub_2449662D4();
  return sub_2449CF670();
}

uint64_t sub_244964EA0()
{
  sub_2449662D4();
  return sub_2449CF67C();
}

uint64_t BitmapDescription.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_244964F34(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_244964F34(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t BitmapDescription.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_244962528(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*BitmapDescription.data.modify())()
{
  return nullsub_1;
}

uint64_t BitmapDescription.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t BitmapDescription.width.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*BitmapDescription.width.modify())()
{
  return nullsub_1;
}

uint64_t BitmapDescription.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t BitmapDescription.height.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*BitmapDescription.height.modify())()
{
  return nullsub_1;
}

uint64_t BitmapDescription.bytesPerRow.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t BitmapDescription.bytesPerRow.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*BitmapDescription.bytesPerRow.modify())()
{
  return nullsub_1;
}

uint64_t BitmapDescription.bitmapInfo.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t BitmapDescription.bitmapInfo.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*BitmapDescription.bitmapInfo.modify())()
{
  return nullsub_1;
}

uint64_t BitmapDescription.bitsPerComponent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t BitmapDescription.bitsPerComponent.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*BitmapDescription.bitsPerComponent.modify())()
{
  return nullsub_1;
}

uint64_t BitmapDescription.bitsPerPixel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t BitmapDescription.bitsPerPixel.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*BitmapDescription.bitsPerPixel.modify())()
{
  return nullsub_1;
}

uint64_t BitmapDescription.colorSpace.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BitmapDescription.colorSpace.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*BitmapDescription.colorSpace.modify())()
{
  return nullsub_1;
}

uint64_t BitmapDescription.init(data:width:height:bytesPerRow:bitmapInfo:bitsPerComponent:bitsPerPixel:colorSpace:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_DWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  return result;
}

BOOL sub_24496510C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_244965120()
{
  sub_2449CFD48();
  sub_2449CFD54();
  return sub_2449CFD84();
}

uint64_t sub_244965164()
{
  return sub_2449CFD54();
}

uint64_t sub_24496518C()
{
  sub_2449CFD48();
  sub_2449CFD54();
  return sub_2449CFD84();
}

CGImageRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BitmapDescription.makeImage()()
{
  uint64_t v0;
  size_t v1;
  size_t v2;
  CGImage *v3;
  size_t v4;
  const __CFData *v5;
  CGDataProviderRef v6;
  CGDataProvider *v7;
  __CFString *v8;
  CGColorSpaceRef v9;
  CGImageRef v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t bytesPerRow;
  CGBitmapInfo bitmapInfo;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  bytesPerRow = *(_QWORD *)(v0 + 32);
  bitmapInfo = *(_DWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(CGImage **)(v0 + 56);
  v5 = (const __CFData *)sub_2449CF040();
  v6 = CGDataProviderCreateWithCFData(v5);
  if (!v6)
  {
    sub_24496535C();
    swift_allocError();
    *v11 = 0;
    swift_willThrow();
    v9 = v5;
LABEL_8:

    return v3;
  }
  v7 = v6;
  v8 = (__CFString *)sub_2449CF85C();
  v9 = CGColorSpaceCreateWithName(v8);

  if (!v9)
  {
    sub_24496535C();
    swift_allocError();
    *v12 = 1;
    swift_willThrow();

    v9 = v7;
    goto LABEL_8;
  }
  v10 = CGImageCreate(v1, v2, v4, (size_t)v3, bytesPerRow, v9, bitmapInfo, v7, 0, 0, kCGRenderingIntentDefault);
  if (!v10)
  {
    sub_24496535C();
    swift_allocError();
    *v13 = 2;
    swift_willThrow();

    goto LABEL_8;
  }
  v3 = v10;

  return v3;
}

unint64_t sub_24496535C()
{
  unint64_t result;

  result = qword_2573A0628;
  if (!qword_2573A0628)
  {
    result = MEMORY[0x24951C158](&unk_2449D5A40, &type metadata for BitmapDescription.RenderingError);
    atomic_store(result, (unint64_t *)&qword_2573A0628);
  }
  return result;
}

uint64_t sub_2449653A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449653D8 + 4 * byte_2449D5750[a1]))(0xD000000000000010, 0x80000002449E20E0);
}

uint64_t sub_2449653D8()
{
  return 1635017060;
}

uint64_t sub_2449653E8()
{
  return 0x6874646977;
}

uint64_t sub_2449653FC()
{
  return 0x746867696568;
}

uint64_t sub_244965410()
{
  return 0x7265507365747962;
}

uint64_t sub_244965430()
{
  return 0x6564724F65747962;
}

uint64_t sub_24496544C()
{
  return 0x6E4970616D746962;
}

uint64_t sub_24496546C()
{
  return 0x5072655073746962;
}

uint64_t sub_24496548C()
{
  return 0x617053726F6C6F63;
}

void sub_2449654A8(char *a1)
{
  sub_2449A0EC8(*a1);
}

uint64_t sub_2449654B4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2449CFD48();
  sub_2449242D8((uint64_t)v3, v1);
  return sub_2449CFD84();
}

void sub_2449654F8(uint64_t a1)
{
  char *v1;

  sub_2449242D8(a1, *v1);
}

uint64_t sub_244965500()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2449CFD48();
  sub_2449242D8((uint64_t)v3, v1);
  return sub_2449CFD84();
}

uint64_t sub_244965540@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24496628C();
  *a1 = result;
  return result;
}

uint64_t sub_24496556C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449653A0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244965594()
{
  unsigned __int8 *v0;

  return sub_2449653A0(*v0);
}

uint64_t BitmapDescription.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449655E4()
{
  sub_244965C0C();
  sub_244965C50();
  return sub_2449CF5BC();
}

uint64_t sub_2449657A4()
{
  return sub_2449655E4();
}

uint64_t BitmapDescription.init(propertyListValue:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  int v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  ValueMetadata *v36;
  unint64_t v37;
  int v38;
  char v39;

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = &type metadata for BitmapDescription.Key;
  v9 = sub_244965C0C();
  v37 = v9;
  v35[0] = 5;
  sub_2449CF3B8();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    v29 = v38;
    v10 = v39;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, a1, v5);
    if ((v10 & 1) != 0)
    {
      v36 = &type metadata for BitmapDescription.Key;
      v37 = v9;
      v35[0] = 4;
      sub_244965C50();
      sub_2449CF37C();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      if ((_BYTE)v33)
        v11 = 16386;
      else
        v11 = 8194;
      v29 = v11;
    }
    v12 = *(void (**)(char *, uint64_t))(v6 + 8);
    v12(v8, v5);
    v36 = &type metadata for BitmapDescription.Key;
    v37 = v9;
    v35[0] = 6;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    if ((_BYTE)v34)
      v13 = 8;
    else
      v13 = v33;
    v36 = &type metadata for BitmapDescription.Key;
    v37 = v9;
    v35[0] = 7;
    sub_2449CF3B8();
    v28 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    if ((_BYTE)v34)
      v14 = 32;
    else
      v14 = v33;
    v36 = &type metadata for BitmapDescription.Key;
    v37 = v9;
    v35[0] = 8;
    sub_2449CF3B8();
    v27 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    v16 = v34;
    if (v34)
    {
      v26 = v33;
    }
    else
    {
      v26 = sub_2449CF868();
      v16 = v17;
    }
    v36 = &type metadata for BitmapDescription.Key;
    v37 = v9;
    v35[0] = 0;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    v24 = v33;
    v25 = v34;
    v36 = &type metadata for BitmapDescription.Key;
    v37 = v9;
    v35[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    v23 = v32;
    v36 = &type metadata for BitmapDescription.Key;
    v37 = v9;
    v35[0] = 2;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    v22 = v31;
    v36 = &type metadata for BitmapDescription.Key;
    v37 = v9;
    v35[0] = 3;
    sub_2449CF37C();
    v12(a1, v5);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    v18 = v30;
    v19 = v25;
    *(_QWORD *)a2 = v24;
    *(_QWORD *)(a2 + 8) = v19;
    v20 = v22;
    *(_QWORD *)(a2 + 16) = v23;
    *(_QWORD *)(a2 + 24) = v20;
    *(_QWORD *)(a2 + 32) = v18;
    *(_DWORD *)(a2 + 40) = v29;
    v21 = v27;
    *(_QWORD *)(a2 + 48) = v28;
    *(_QWORD *)(a2 + 56) = v21;
    *(_QWORD *)(a2 + 64) = v26;
    *(_QWORD *)(a2 + 72) = v16;
  }
  return result;
}

unint64_t sub_244965C0C()
{
  unint64_t result;

  result = qword_2573A0630;
  if (!qword_2573A0630)
  {
    result = MEMORY[0x24951C158](&unk_2449D5A18, &type metadata for BitmapDescription.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0630);
  }
  return result;
}

unint64_t sub_244965C50()
{
  unint64_t result;

  result = qword_2573A0638;
  if (!qword_2573A0638)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BitmapDescription.ByteOrder, &type metadata for BitmapDescription.ByteOrder);
    atomic_store(result, (unint64_t *)&qword_2573A0638);
  }
  return result;
}

uint64_t sub_244965C94()
{
  return sub_2449CF3D0();
}

uint64_t sub_244965CDC@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return BitmapDescription.init(propertyListValue:)(a1, a2);
}

unint64_t sub_244965CF4()
{
  unint64_t result;

  result = qword_2573A0640;
  if (!qword_2573A0640)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BitmapDescription.ByteOrder, &type metadata for BitmapDescription.ByteOrder);
    atomic_store(result, (unint64_t *)&qword_2573A0640);
  }
  return result;
}

uint64_t destroy for BitmapDescription(uint64_t a1)
{
  sub_244962528(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BitmapDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_244964F34(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BitmapDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_244964F34(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_244962528(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for BitmapDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_244962528(v4, v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BitmapDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BitmapDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BitmapDescription()
{
  return &type metadata for BitmapDescription;
}

uint64_t storeEnumTagSinglePayload for BitmapDescription.ByteOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244965FE4 + 4 * byte_2449D575E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244966018 + 4 * byte_2449D5759[v4]))();
}

uint64_t sub_244966018(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244966020(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244966028);
  return result;
}

uint64_t sub_244966034(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24496603CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244966040(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244966048(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BitmapDescription.ByteOrder()
{
  return &type metadata for BitmapDescription.ByteOrder;
}

uint64_t storeEnumTagSinglePayload for BitmapDescription.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2449660B0 + 4 * byte_2449D5768[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2449660E4 + 4 * byte_2449D5763[v4]))();
}

uint64_t sub_2449660E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449660EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2449660F4);
  return result;
}

uint64_t sub_244966100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244966108);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_24496610C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244966114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BitmapDescription.Key()
{
  return &type metadata for BitmapDescription.Key;
}

uint64_t storeEnumTagSinglePayload for BitmapDescription.RenderingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24496617C + 4 * byte_2449D5772[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2449661B0 + 4 * byte_2449D576D[v4]))();
}

uint64_t sub_2449661B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449661B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2449661C0);
  return result;
}

uint64_t sub_2449661CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2449661D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2449661D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449661E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BitmapDescription.RenderingError()
{
  return &type metadata for BitmapDescription.RenderingError;
}

unint64_t sub_244966200()
{
  unint64_t result;

  result = qword_2573A0648;
  if (!qword_2573A0648)
  {
    result = MEMORY[0x24951C158](&unk_2449D5950, &type metadata for BitmapDescription.RenderingError);
    atomic_store(result, (unint64_t *)&qword_2573A0648);
  }
  return result;
}

unint64_t sub_244966248()
{
  unint64_t result;

  result = qword_2573A0650;
  if (!qword_2573A0650)
  {
    result = MEMORY[0x24951C158](&unk_2449D59F0, &type metadata for BitmapDescription.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0650);
  }
  return result;
}

uint64_t sub_24496628C()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

unint64_t sub_2449662D4()
{
  unint64_t result;

  result = qword_2573A0658;
  if (!qword_2573A0658)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BitmapDescription.ByteOrder, &type metadata for BitmapDescription.ByteOrder);
    atomic_store(result, (unint64_t *)&qword_2573A0658);
  }
  return result;
}

uint64_t SelectableRegion.path.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double SelectableRegion.rect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t SelectableRegion.accessibilityElement.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_244966384(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t sub_244966384(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_244964F34(a1, a2);
  return a1;
}

uint64_t SelectableRegion.init(path:rect:accessibilityElement:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(double *)(a5 + 16) = a6;
  *(double *)(a5 + 24) = a7;
  *(double *)(a5 + 32) = a8;
  *(double *)(a5 + 40) = a9;
  *(_QWORD *)(a5 + 48) = a3;
  *(_QWORD *)(a5 + 56) = a4;
  return result;
}

uint64_t SelectableRegion.scaledBy(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double *v2;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGFloat v10;
  uint64_t v11;
  unint64_t v12;
  CGFloat v13;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  v6 = *v2;
  v5 = *((_QWORD *)v2 + 1);
  v7 = v2[2];
  v8 = v2[3];
  v10 = v2[4];
  v9 = v2[5];
  v11 = *((_QWORD *)v2 + 6);
  v12 = *((_QWORD *)v2 + 7);
  swift_bridgeObjectRetain();
  v15.origin.x = v7;
  v15.origin.y = v8;
  v15.size.width = v10;
  v15.size.height = v9;
  if (!CGRectIsNull(v15))
  {
    v16.origin.x = v7;
    v16.origin.y = v8;
    v16.size.width = v10;
    v16.size.height = v9;
    if (!CGRectIsInfinite(v16))
    {
      v17.origin.x = v7;
      v17.origin.y = v8;
      v17.size.width = v10;
      v17.size.height = v9;
      v13 = CGRectGetWidth(v17) * a2;
      v18.origin.x = v7;
      v18.origin.y = v8;
      v18.size.width = v10;
      v18.size.height = v9;
      v9 = CGRectGetHeight(v18) * a2;
      v7 = v7 * a2;
      v8 = v8 * a2;
      v10 = v13;
    }
  }
  *(double *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v8;
  *(CGFloat *)(a1 + 32) = v10;
  *(double *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  return sub_244966384(v11, v12);
}

uint64_t sub_2449664A0(char a1)
{
  if (!a1)
    return 1752457584;
  if (a1 == 1)
    return 1952671090;
  return 0xD00000000000001ELL;
}

uint64_t sub_2449664EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2449A1150(*a1, *a2);
}

uint64_t sub_2449664F8()
{
  return sub_2449C5E74();
}

uint64_t sub_244966500()
{
  return sub_244924400();
}

uint64_t sub_244966508()
{
  return sub_2449CA26C();
}

uint64_t sub_244966510@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244966D20();
  *a1 = result;
  return result;
}

uint64_t sub_24496653C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449664A0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244966564()
{
  char *v0;

  return sub_2449664A0(*v0);
}

uint64_t SelectableRegion.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449665AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  _BYTE v7[24];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _BYTE v16[16];

  v1 = *a1;
  v2 = a1[1];
  v6 = *((_OWORD *)a1 + 1);
  v3 = a1[4];
  v4 = a1[5];
  sub_244966D68((uint64_t)(a1 + 6), (uint64_t)v16);
  v15 = 0;
  v13 = v1;
  v14 = v2;
  v12 = 1;
  v8 = v6;
  v9 = v3;
  v10 = v4;
  v11 = 0;
  v7[23] = 2;
  sub_244966D68((uint64_t)v16, (uint64_t)v7);
  type metadata accessor for CGRect(0);
  sub_244966854();
  return sub_2449CF5F8();
}

uint64_t sub_2449666A0()
{
  uint64_t v0;

  return sub_2449665AC(*(uint64_t **)(v0 + 16));
}

uint64_t SelectableRegion.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  ValueMetadata *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = &type metadata for SelectableRegion.Key;
  v5 = sub_244966854();
  v18 = v5;
  v16[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v8 = v19;
    v7 = v20;
    v17 = &type metadata for SelectableRegion.Key;
    v18 = v5;
    v16[0] = 1;
    type metadata accessor for CGRect(0);
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v17 = &type metadata for SelectableRegion.Key;
    v18 = v5;
    v16[0] = 2;
    sub_2449CF3B8();
    v10 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v13;
    *(_QWORD *)(a2 + 32) = v14;
    *(_QWORD *)(a2 + 40) = v15;
    *(_OWORD *)(a2 + 48) = v11;
  }
  return result;
}

unint64_t sub_244966854()
{
  unint64_t result;

  result = qword_2573A0660;
  if (!qword_2573A0660)
  {
    result = MEMORY[0x24951C158](&unk_2449D5BB8, &type metadata for SelectableRegion.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0660);
  }
  return result;
}

uint64_t sub_244966898()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449668D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SelectableRegion.init(propertyListValue:)(a1, a2);
}

uint64_t destroy for SelectableRegion(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >> 60 != 15)
    return sub_244962528(*(_QWORD *)(a1 + 48), v3);
  return result;
}

uint64_t initializeWithCopy for SelectableRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = (_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_244964F34(v7, v6);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v6;
  }
  return a1;
}

_QWORD *assignWithCopy for SelectableRegion(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v4 = a2 + 6;
  v5 = a2[7];
  if (a1[7] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_244964F34(*v4, v5);
      v8 = a1[6];
      v9 = a1[7];
      a1[6] = v7;
      a1[7] = v5;
      sub_244962528(v8, v9);
      return a1;
    }
    sub_244966A8C((uint64_t)(a1 + 6));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_244964F34(*v4, v5);
  a1[6] = v6;
  a1[7] = v5;
  return a1;
}

uint64_t sub_244966A8C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SelectableRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = (_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 56);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = *v6;
      *(_QWORD *)(a1 + 56) = v8;
      sub_244962528(v9, v7);
      return a1;
    }
    sub_244966A8C(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewIncrementalUpdate(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreviewIncrementalUpdate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectableRegion()
{
  return &type metadata for SelectableRegion;
}

uint64_t storeEnumTagSinglePayload for SelectableRegion.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_244966C58 + 4 * byte_2449D5A85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_244966C8C + 4 * byte_2449D5A80[v4]))();
}

uint64_t sub_244966C8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244966C94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244966C9CLL);
  return result;
}

uint64_t sub_244966CA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244966CB0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_244966CB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244966CBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SelectableRegion.Key()
{
  return &type metadata for SelectableRegion.Key;
}

unint64_t sub_244966CDC()
{
  unint64_t result;

  result = qword_2573A0668;
  if (!qword_2573A0668)
  {
    result = MEMORY[0x24951C158](&unk_2449D5B90, &type metadata for SelectableRegion.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0668);
  }
  return result;
}

uint64_t sub_244966D20()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_244966D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void __swiftcall Error.makeNSError()(NSError *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;

  v3 = v2;
  v4 = v1;
  v5 = *(_QWORD *)(v1 - 8);
  v6 = ((uint64_t (*)())MEMORY[0x24BDAC7A8])();
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v32 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v32 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v32 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v17((char *)&v32 - v15, v3, v4);
  v18 = sub_2449CFCA0();
  if (v18)
  {
    v19 = (void *)v18;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
  }
  else
  {
    v19 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v20, v16, v4);
  }
  v21 = (void *)sub_2449CEFD4();

  v22 = objc_msgSend(v21, sel_userInfo);
  v23 = sub_2449CF7D8();

  v24 = *(_QWORD *)(v23 + 16);
  swift_bridgeObjectRelease();
  if (v24 < 2)
  {
    v17(v11, v3, v4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0678);
    if (swift_dynamicCast())
    {
      sub_244951464(&v32, (uint64_t)v35);
      v27 = (void *)objc_opt_self();
      __swift_project_boxed_opaque_existential_1(v35, v36);
      sub_2449CFC88();
      v28 = (void *)sub_2449CF85C();
      swift_bridgeObjectRelease();
      objc_msgSend(v27, sel_uv_errorWithDescription_, v28);

    }
    else
    {
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      sub_244940E8C((uint64_t)&v32, &qword_2573A0680);
      v17(v8, v3, v4);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0688);
      if (!swift_dynamicCast())
      {
        v34 = 0;
        v32 = 0u;
        v33 = 0u;
        sub_244940E8C((uint64_t)&v32, &qword_2573A0690);
        v30 = (void *)objc_opt_self();
        v35[0] = 0;
        v35[1] = 0xE000000000000000;
        sub_2449CFCAC();
        v31 = (void *)sub_2449CF85C();
        swift_bridgeObjectRelease();
        objc_msgSend(v30, sel_uv_errorWithDescription_, v31);

        return;
      }
      sub_244951464(&v32, (uint64_t)v35);
      __swift_project_boxed_opaque_existential_1(v35, v36);
      sub_2449CF55C();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    return;
  }
  v17(v14, v3, v4);
  v25 = sub_2449CFCA0();
  if (v25)
  {
    v26 = (void *)v25;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  else
  {
    v26 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v29, v14, v4);
  }
  sub_2449CEFD4();

}

uint64_t sub_2449671B4@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_2449671C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_24496D198();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ProviderPayload.propertyListValue.getter()
{
  sub_244967248();
  return sub_2449CF3E8();
}

unint64_t sub_244967248()
{
  unint64_t result;

  result = qword_2573A0698;
  if (!qword_2573A0698)
  {
    result = MEMORY[0x24951C158](&unk_2449D71C0, &type metadata for ProviderPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0698);
  }
  return result;
}

uint64_t ProviderPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = &type metadata for ProviderPayload.Key;
  v10 = sub_244967248();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (!v2)
  {
    v7 = v12;
    *a2 = v11;
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_244967350()
{
  sub_244967248();
  return sub_2449CF3E8();
}

uint64_t sub_2449673B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = &type metadata for ProviderPayload.Key;
  v10 = sub_244967248();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (!v2)
  {
    v7 = v12;
    *a2 = v11;
    a2[1] = v7;
  }
  return result;
}

uint64_t RegistryType.rawValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*RegistryType.rawValue.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::RegistryType __swiftcall RegistryType.init(rawValue:)(PreviewsMessagingOS::RegistryType rawValue)
{
  PreviewsMessagingOS::RegistryType *v1;

  *v1 = rawValue;
  return rawValue;
}

uint64_t RegistryType.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2449674EC()
{
  sub_244972938();
  return sub_2449CF670();
}

uint64_t sub_244967534()
{
  sub_244972938();
  return sub_2449CF67C();
}

void static RegistryType.preview.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x77656976657270;
  a1[1] = 0xE700000000000000;
}

void static RegistryType.test.getter(_QWORD *a1@<X8>)
{
  *a1 = 1953719668;
  a1[1] = 0xE400000000000000;
}

uint64_t RegistryID.init(sourceFilePath:registryType:registryIndexInFile:sidecarIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *a3;
  v9 = a3[1];
  *a6 = a1;
  a6[1] = a2;
  a6[2] = v8;
  a6[3] = v9;
  a6[4] = a4;
  v10 = type metadata accessor for RegistryID(0);
  return sub_2449314A4(a5, (uint64_t)a6 + *(int *)(v10 + 28), &qword_2573A06A0);
}

uint64_t type metadata accessor for RegistryID(uint64_t a1)
{
  return sub_24492813C(a1, (uint64_t *)&unk_2573A0828);
}

uint64_t sub_24496762C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_244967668 + 4 * byte_2449D5C00[a1]))(0xD000000000000013, 0x80000002449E2160);
}

uint64_t sub_244967668()
{
  return 0x6946656372756F73;
}

unint64_t sub_24496768C()
{
  return 0xD000000000000011;
}

uint64_t sub_2449676A8()
{
  return 0x7972747369676572;
}

void sub_2449676C8(char *a1)
{
  sub_2449A33F0(*a1);
}

void sub_2449676D4()
{
  char *v0;

  sub_2449C5F08(*v0);
}

void sub_2449676DC(uint64_t a1)
{
  char *v1;

  sub_24492551C(a1, *v1);
}

void sub_2449676E4(uint64_t a1)
{
  char *v1;

  sub_2449C8BE0(a1, *v1);
}

uint64_t sub_2449676EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449728F4();
  *a1 = result;
  return result;
}

uint64_t sub_244967720@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496762C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244967748()
{
  unsigned __int8 *v0;

  return sub_24496762C(*v0);
}

uint64_t RegistryID.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496777C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0C38);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = &v19[-v7];
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = &v19[*(int *)(v6 + 48) - v7];
  v19[-v7] = 3;
  v15 = type metadata accessor for RegistryID(0);
  sub_244968184((uint64_t)a1 + *(int *)(v15 + 28), (uint64_t)v14);
  v28 = 0;
  v26 = v9;
  v27 = v10;
  v25 = 1;
  v23 = v11;
  v24 = v12;
  v22 = 2;
  v20 = v13;
  v21 = 0;
  v16 = (uint64_t)&v5[*(int *)(v2 + 48)];
  *v5 = 3;
  sub_244968184((uint64_t)v14, v16);
  v19[15] = 3;
  sub_2449CF07C();
  sub_244967C18();
  sub_244967C5C();
  v17 = sub_2449CF5EC();
  sub_244940E8C((uint64_t)v8, &qword_2573A0C38);
  sub_244940E8C(v16, &qword_2573A06A0);
  return v17;
}

uint64_t sub_244967954()
{
  uint64_t v0;

  return sub_24496777C(*(uint64_t **)(v0 + 16));
}

uint64_t RegistryID.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE v24[24];
  ValueMetadata *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = &type metadata for RegistryID.Key;
  v8 = sub_244967C18();
  v26 = v8;
  v24[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v9 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    v11 = v27;
    v10 = v28;
    v25 = &type metadata for RegistryID.Key;
    v26 = v8;
    v24[0] = 1;
    sub_244967C5C();
    sub_2449CF3B8();
    v29 = v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if (v23)
      v12 = v22;
    else
      v12 = 0x77656976657270;
    if (v23)
      v13 = v23;
    else
      v13 = 0xE700000000000000;
    v25 = &type metadata for RegistryID.Key;
    v26 = v8;
    v24[0] = 2;
    sub_2449CF37C();
    v20 = v12;
    v21 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    v14 = v22;
    v25 = &type metadata for RegistryID.Key;
    v26 = v8;
    v24[0] = 3;
    sub_2449CF07C();
    sub_2449CF3B8();
    v16 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    *a2 = v29;
    a2[1] = v10;
    v17 = v21;
    a2[2] = v20;
    a2[3] = v17;
    a2[4] = v14;
    v18 = type metadata accessor for RegistryID(0);
    return sub_2449314A4((uint64_t)v7, (uint64_t)a2 + *(int *)(v18 + 28), &qword_2573A06A0);
  }
}

unint64_t sub_244967C18()
{
  unint64_t result;

  result = qword_2573A06A8;
  if (!qword_2573A06A8)
  {
    result = MEMORY[0x24951C158](&unk_2449D7198, &type metadata for RegistryID.Key);
    atomic_store(result, (unint64_t *)&qword_2573A06A8);
  }
  return result;
}

unint64_t sub_244967C5C()
{
  unint64_t result;

  result = qword_2573A06B0;
  if (!qword_2573A06B0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for RegistryType, &type metadata for RegistryType);
    atomic_store(result, (unint64_t *)&qword_2573A06B0);
  }
  return result;
}

uint64_t RegistryID.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v1 = v0;
  v2 = sub_2449CEFEC();
  v24 = *(_QWORD *)(v2 - 8);
  v25 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06B8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2449CF034();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2449CF07C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for RegistryID(0);
  sub_244968184(v1 + *(int *)(v18 + 28), (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_244940E8C((uint64_t)v13, &qword_2573A06A0);
    v28 = 0;
    v29 = 0xE000000000000000;
    sub_2449CFB98();
    swift_bridgeObjectRelease();
    v28 = 0x7972747369676552;
    v29 = 0xE90000000000002DLL;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, *MEMORY[0x24BDCD7A0], v25);
    swift_bridgeObjectRetain();
    sub_2449CF028();
    sub_2449CF004();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_2449CF898();
    swift_bridgeObjectRelease();
    sub_2449CF898();
    v27 = *(_QWORD *)(v1 + 32);
    sub_2449CFC88();
    sub_2449CF898();
    swift_bridgeObjectRelease();
    sub_2449CF898();
    swift_bridgeObjectRetain();
    sub_2449CF898();
    swift_bridgeObjectRelease();
    sub_2449CF898();
    return v28;
  }
  else
  {
    v22 = v17;
    v23 = v15;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v28 = 0;
    v29 = 0xE000000000000000;
    sub_2449CFB98();
    swift_bridgeObjectRelease();
    v28 = 0x7972747369676552;
    v29 = 0xE90000000000002DLL;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, *MEMORY[0x24BDCD7A0], v25);
    swift_bridgeObjectRetain();
    sub_2449CF028();
    sub_2449CF004();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_2449CF898();
    swift_bridgeObjectRelease();
    sub_2449CF898();
    sub_24493DED4(&qword_2573A06C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v20 = v22;
    sub_2449CFC88();
    sub_2449CF898();
    swift_bridgeObjectRelease();
    sub_2449CF898();
    v27 = *(_QWORD *)(v1 + 32);
    sub_2449CFC88();
    sub_2449CF898();
    swift_bridgeObjectRelease();
    sub_2449CF898();
    swift_bridgeObjectRetain();
    sub_2449CF898();
    swift_bridgeObjectRelease();
    sub_2449CF898();
    v19 = v28;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v14);
  }
  return v19;
}

uint64_t sub_244968184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t RegistryID.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = sub_2449CF07C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CFD54();
  v8 = type metadata accessor for RegistryID(0);
  sub_244968184(v0 + *(int *)(v8 + 28), (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    return sub_2449CFD60();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  sub_2449CFD60();
  sub_24493DED4((unint64_t *)&qword_2573A06C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_2449CF838();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t RegistryID.hashValue.getter()
{
  sub_2449CFD48();
  RegistryID.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_2449683A4()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449683D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return RegistryID.init(propertyListValue:)(a1, a2);
}

uint64_t sub_2449683E8()
{
  sub_2449CFD48();
  RegistryID.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_244968428()
{
  sub_2449CFD48();
  RegistryID.hash(into:)();
  return sub_2449CFD84();
}

uint64_t RuntimeRegistryLocation.file.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 RuntimeRegistryLocation.file.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*RuntimeRegistryLocation.file.modify())()
{
  return nullsub_1;
}

uint64_t RuntimeRegistryLocation.line.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t RuntimeRegistryLocation.line.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*RuntimeRegistryLocation.line.modify())()
{
  return nullsub_1;
}

void __swiftcall RuntimeRegistryLocation.init(file:line:)(PreviewsMessagingOS::RuntimeRegistryLocation *__return_ptr retstr, PreviewsMessagingOS::FileID file, Swift::Int line)
{
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(file.moduleName._countAndFlagsBits + 16);
  v4 = *(void **)(file.moduleName._countAndFlagsBits + 24);
  retstr->file.moduleName = *(Swift::String *)file.moduleName._countAndFlagsBits;
  retstr->file.fileName._countAndFlagsBits = v3;
  retstr->file.fileName._object = v4;
  retstr->line = (Swift::Int)file.moduleName._object;
}

uint64_t sub_244968530(char a1)
{
  if ((a1 & 1) != 0)
    return 1701734764;
  else
    return 1701603686;
}

uint64_t sub_244968550(char *a1, char *a2)
{
  return sub_24499F6C0(*a1, *a2);
}

uint64_t sub_24496855C()
{
  return sub_2449C5FE8();
}

uint64_t sub_244968564()
{
  return sub_244923630();
}

uint64_t sub_24496856C()
{
  return sub_2449CB224();
}

uint64_t sub_244968574@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244968580@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244968530(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449685A8()
{
  char *v0;

  return sub_244968530(*v0);
}

uint64_t RuntimeRegistryLocation.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449685F0()
{
  sub_24496D780();
  sub_24496D7C4();
  return sub_2449CF604();
}

uint64_t RuntimeRegistryLocation.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v15 = &type metadata for RuntimeRegistryLocation.Key;
  v5 = sub_24496D780();
  v16 = v5;
  v14[0] = 0;
  sub_24496D7C4();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v8 = v17;
    v7 = v18;
    v10 = v19;
    v9 = v20;
    v15 = &type metadata for RuntimeRegistryLocation.Key;
    v16 = v5;
    v14[0] = 1;
    sub_2449CF37C();
    v12 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v13 = v21;
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v10;
    a2[3] = v9;
    a2[4] = v13;
  }
  return result;
}

uint64_t sub_2449687E4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7972747369676572;
  else
    return 0x72656469766F7270;
}

uint64_t sub_244968820()
{
  return sub_2449CF3D0();
}

uint64_t sub_244968860@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return RuntimeRegistryLocation.init(propertyListValue:)(a1, a2);
}

uint64_t sub_244968874(char *a1, char *a2)
{
  return sub_24499FC58(*a1, *a2);
}

uint64_t sub_244968880()
{
  return sub_2449C604C();
}

uint64_t sub_244968888()
{
  return sub_24492390C();
}

uint64_t sub_244968890()
{
  return sub_2449CAD70();
}

uint64_t sub_244968898@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_2449688A4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449687E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449688CC()
{
  sub_24497286C();
  return sub_2449CF670();
}

uint64_t sub_244968914()
{
  sub_24497286C();
  return sub_2449CF67C();
}

uint64_t sub_244968978(char a1)
{
  return *(_QWORD *)&aDiscrimiprovid_0[8 * a1];
}

uint64_t sub_244968998(char *a1, char *a2)
{
  return sub_24499FBD4(*a1, *a2);
}

uint64_t sub_2449689A4()
{
  return sub_2449C60D8();
}

uint64_t sub_2449689AC()
{
  return sub_2449238CC();
}

uint64_t sub_2449689B4()
{
  return sub_2449CADF8();
}

uint64_t sub_2449689BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244945460();
  *a1 = result;
  return result;
}

uint64_t sub_2449689F0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244968978(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244968A18()
{
  char *v0;

  return sub_244968978(*v0);
}

uint64_t PreviewSpecification.Value.propertyListValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ValueMetadata *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  ValueMetadata *v26;
  unint64_t v27;
  _QWORD v28[3];
  ValueMetadata *v29;
  unint64_t v30;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06E0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RegistryID(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PreviewSpecification.Value(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = v0;
  v11 = sub_24496D824();
  sub_24496D868();
  sub_2449CF3E8();
  sub_24493DCE8(v0, (uint64_t)v10, type metadata accessor for PreviewSpecification.Value);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = (uint64_t *)((char *)v10 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48));
    v14 = *v12;
    v13 = v12[1];
    v15 = v12[2];
    v16 = (ValueMetadata *)v12[3];
    v21 = v12[4];
    v22 = v15;
    sub_24493DD84((uint64_t)v10, (uint64_t)v7, type metadata accessor for RegistryID);
    sub_24493DCE8((uint64_t)v7, (uint64_t)v3, type metadata accessor for RegistryID);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
    v29 = &type metadata for PreviewSpecification.Value.Key;
    v30 = v11;
    LOBYTE(v28[0]) = 3;
    sub_24493DED4(&qword_2573A0700, type metadata accessor for RegistryID, (uint64_t)&protocol conformance descriptor for RegistryID);
    sub_2449CF370();
    sub_244940E8C((uint64_t)v3, &qword_2573A06E0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    v28[0] = v14;
    v28[1] = v13;
    v28[2] = v22;
    v29 = v16;
    v30 = v21;
    v26 = &type metadata for PreviewSpecification.Value.Key;
    v27 = v11;
    LOBYTE(v24) = 4;
    sub_24496D8AC();
    sub_2449CF370();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2449299E4((uint64_t)v7, type metadata accessor for RegistryID);
    v17 = &v24;
  }
  else
  {
    v18 = v10[1];
    v19 = v10[2];
    v24 = *v10;
    v25 = v18;
    v29 = &type metadata for PreviewSpecification.Value.Key;
    v30 = v11;
    LOBYTE(v28[0]) = 1;
    sub_24496D8F0();
    sub_2449CF370();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    v24 = v19;
    LOBYTE(v25) = 0;
    v29 = &type metadata for PreviewSpecification.Value.Key;
    v30 = v11;
    LOBYTE(v28[0]) = 2;
    sub_2449CF370();
    v17 = v28;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
}

uint64_t sub_244968D1C(_BYTE *a1, BOOL *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v12;

  v6 = type metadata accessor for PreviewSpecification.Value(0);
  v7 = type metadata accessor for PreviewSpecification.Value;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = 0;
  sub_24493DCE8(a3, (uint64_t)v9, type metadata accessor for PreviewSpecification.Value);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = type metadata accessor for RegistryID;
  }
  result = sub_2449299E4((uint64_t)v9, v7);
  *a2 = EnumCaseMultiPayload == 1;
  return result;
}

uint64_t PreviewSpecification.Value.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  ValueMetadata *v24;
  unint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for PreviewSpecification.Value(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t *)((char *)&v20 - v9);
  v24 = &type metadata for PreviewSpecification.Value.Key;
  v11 = sub_24496D824();
  v25 = v11;
  v23[0] = 0;
  sub_24496D868();
  sub_2449CF37C();
  if (v2)
  {
    v12 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    v24 = &type metadata for PreviewSpecification.Value.Key;
    v25 = v11;
    if ((v21 & 1) != 0)
    {
      v23[0] = 3;
      type metadata accessor for RegistryID(0);
      sub_24493DED4(&qword_2573A0700, type metadata accessor for RegistryID, (uint64_t)&protocol conformance descriptor for RegistryID);
      sub_2449CF37C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      v24 = &type metadata for PreviewSpecification.Value.Key;
      v25 = v11;
      v23[0] = 4;
      sub_24496D8AC();
      sub_2449CF37C();
      v16 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      swift_storeEnumTagMultiPayload();
      v17 = (uint64_t)v8;
    }
    else
    {
      v23[0] = 1;
      sub_24496D8F0();
      sub_2449CF37C();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      v15 = v21;
      v14 = v22;
      v24 = &type metadata for PreviewSpecification.Value.Key;
      v25 = v11;
      v23[0] = 2;
      sub_2449CF37C();
      v18 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      v19 = v26;
      *v10 = v15;
      v10[1] = v14;
      v10[2] = v19;
      swift_storeEnumTagMultiPayload();
      v17 = (uint64_t)v10;
    }
    return sub_24493DD84(v17, a2, type metadata accessor for PreviewSpecification.Value);
  }
}

uint64_t sub_244969134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PreviewSpecification.Value.init(propertyListValue:)(a1, a2);
}

uint64_t PreviewSpecification.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24493DCE8(v1, a1, type metadata accessor for PreviewSpecification.Value);
}

uint64_t PreviewSpecification.value.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_24493DD40(a1, v1, type metadata accessor for PreviewSpecification.Value);
}

uint64_t (*PreviewSpecification.value.modify())()
{
  return nullsub_1;
}

uint64_t PreviewSpecification.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PreviewSpecification.Value(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  PreviewSpecification.Value.init(propertyListValue:)((uint64_t)v8, (uint64_t)v11);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return sub_24493DD84((uint64_t)v11, a2, type metadata accessor for PreviewSpecification.Value);
}

uint64_t static PreviewSpecification.providerPreview(provider:indexInProvider:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  a3[2] = a2;
  type metadata accessor for PreviewSpecification.Value(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t static PreviewSpecification.registryPreview(stableID:location:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *a2;
  v5 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  v10 = (_QWORD *)(a3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48));
  sub_24493DCE8(a1, a3, type metadata accessor for RegistryID);
  *v10 = v6;
  v10[1] = v5;
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  type metadata accessor for PreviewSpecification.Value(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t PreviewSpecification.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for RegistryID(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PreviewSpecification.Value(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_QWORD *)((char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24493DCE8(v1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24493DD84((uint64_t)v7, (uint64_t)v4, type metadata accessor for RegistryID);
    v9 = RegistryID.description.getter();
    sub_2449299E4((uint64_t)v4, type metadata accessor for RegistryID);
  }
  else
  {
    v10 = *v7;
    v11 = v7[1];
    v12 = v7[2];
    v15 = v10;
    v16 = v11;
    sub_2449CF898();
    v14[1] = v12;
    sub_2449CFC88();
    sub_2449CF898();
    swift_bridgeObjectRelease();
    return v15;
  }
  return v9;
}

uint64_t sub_244969508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PreviewSpecification.Value(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  PreviewSpecification.Value.init(propertyListValue:)((uint64_t)v8, (uint64_t)v11);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return sub_24493DD84((uint64_t)v11, a2, type metadata accessor for PreviewSpecification.Value);
}

uint64_t PreviewPayload.previewSpecification.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24493DCE8(v1, a1, type metadata accessor for PreviewSpecification);
}

uint64_t PreviewPayload.previewSpecification.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_24493DD40(a1, v1, type metadata accessor for PreviewSpecification);
}

uint64_t (*PreviewPayload.previewSpecification.modify())()
{
  return nullsub_1;
}

uint64_t PreviewPayload.renderEffects.getter()
{
  type metadata accessor for PreviewPayload(0);
  return swift_bridgeObjectRetain();
}

uint64_t PreviewPayload.renderEffects.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PreviewPayload(0) + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PreviewPayload.renderEffects.modify())()
{
  type metadata accessor for PreviewPayload(0);
  return nullsub_1;
}

uint64_t PreviewPayload.init(previewSpecification:renderEffects:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  sub_24493DD84(a1, a3, type metadata accessor for PreviewSpecification);
  result = type metadata accessor for PreviewPayload(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t sub_244969738(char a1)
{
  if ((a1 & 1) != 0)
    return 0x66457265646E6572;
  else
    return 0xD000000000000014;
}

uint64_t sub_244969780(char *a1, char *a2)
{
  return sub_2449A25D8(*a1, *a2);
}

uint64_t sub_24496978C()
{
  return sub_2449C6140();
}

uint64_t sub_244969794()
{
  return sub_244924DD8();
}

uint64_t sub_24496979C()
{
  return sub_2449C962C();
}

uint64_t sub_2449697A4@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_2449697B0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244969738(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449697D8()
{
  char *v0;

  return sub_244969738(*v0);
}

uint64_t PreviewPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496980C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0C18);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0C20);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v18 - v10;
  v12 = (char *)&v18 + *(int *)(v9 + 48) - v10;
  *((_BYTE *)&v18 - v10) = 0;
  sub_24493DCE8(a1, (uint64_t)v12, type metadata accessor for PreviewSpecification);
  v13 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for PreviewPayload(0) + 20));
  v14 = (uint64_t)&v8[*(int *)(v5 + 48)];
  *v8 = 0;
  sub_24493DCE8((uint64_t)v12, v14, type metadata accessor for PreviewSpecification);
  sub_24493DD84(v14, (uint64_t)v4, type metadata accessor for PreviewSpecification);
  v15 = type metadata accessor for PreviewSpecification(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v4, 0, 1, v15);
  v20 = 0;
  v19 = 1;
  v18 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0730);
  sub_24496D964();
  sub_24493DED4(&qword_2573A0720, type metadata accessor for PreviewSpecification, (uint64_t)&protocol conformance descriptor for PreviewSpecification);
  sub_24496D9EC();
  v16 = sub_2449CF604();
  sub_244940E8C((uint64_t)v4, &qword_2573A0C18);
  sub_244940E8C((uint64_t)v11, &qword_2573A0C20);
  return v16;
}

void PreviewPayload.init(propertyListValue:)(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ValueMetadata *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  ValueMetadata *v22;
  unint64_t v23;
  uint64_t v24;

  v18 = a2;
  v19 = sub_2449CF400();
  v4 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PreviewSpecification(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = &type metadata for PreviewPayload.Key;
  v10 = sub_24496D964();
  v23 = v10;
  LOBYTE(v20) = 0;
  sub_24493DED4(&qword_2573A0720, type metadata accessor for PreviewSpecification, (uint64_t)&protocol conformance descriptor for PreviewSpecification);
  sub_2449CF37C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  if (v2)
  {
    v11 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v19);
    sub_24496D9A8();
    sub_2449CF664();
    v12 = v21;
    v13 = v22;
    v14 = v18;
    *v18 = v20;
    *((_QWORD *)v14 + 2) = v12;
    type metadata accessor for PreviewSpecification.Value(0);
    swift_storeEnumTagMultiPayload();

    *(_QWORD *)((char *)v14 + *(int *)(type metadata accessor for PreviewPayload(0) + 20)) = v13;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v11);
  }
  else
  {
    v22 = &type metadata for PreviewPayload.Key;
    v23 = v10;
    LOBYTE(v20) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0730);
    sub_24496D9EC();
    sub_2449CF37C();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    v15 = v24;
    v16 = v18;
    sub_24493DD84((uint64_t)v9, (uint64_t)v18, type metadata accessor for PreviewSpecification);
    *(_QWORD *)((char *)v16 + *(int *)(type metadata accessor for PreviewPayload(0) + 20)) = v15;
  }
}

uint64_t PreviewPayload.init(providerPreviewPayload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v3;
  type metadata accessor for PreviewSpecification.Value(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for PreviewPayload(0);
  *(_QWORD *)(a2 + *(int *)(result + 20)) = v4;
  return result;
}

uint64_t sub_244969CF8()
{
  return sub_2449CF3D0();
}

void sub_244969D24(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  PreviewPayload.init(propertyListValue:)(a1, a2);
}

uint64_t ProviderPreviewPayload.providerPayload.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ProviderPreviewPayload.previewID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ProviderPreviewPayload.renderEffects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ProviderPreviewPayload.providerName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

PreviewsMessagingOS::ProviderPreviewPayload __swiftcall ProviderPreviewPayload.init(providerPayload:previewID:renderEffects:)(PreviewsMessagingOS::ProviderPayload providerPayload, Swift::Int previewID, Swift::OpaquePointer renderEffects)
{
  _QWORD *v3;
  uint64_t v4;
  PreviewsMessagingOS::ProviderPreviewPayload result;

  v4 = *(_QWORD *)(providerPayload.providerName._countAndFlagsBits + 8);
  *v3 = *(_QWORD *)providerPayload.providerName._countAndFlagsBits;
  v3[1] = v4;
  v3[2] = providerPayload.providerName._object;
  v3[3] = previewID;
  result.providerPayload = providerPayload;
  result.renderEffects = renderEffects;
  result.previewID = previewID;
  return result;
}

uint64_t sub_244969D90(char a1)
{
  return qword_2449D7240[a1];
}

uint64_t sub_244969DB0(char *a1, char *a2)
{
  return sub_24499F968(*a1, *a2);
}

uint64_t sub_244969DBC()
{
  return sub_2449C61D0();
}

uint64_t sub_244969DC4()
{
  return sub_24492377C();
}

uint64_t sub_244969DCC()
{
  return sub_2449CB058();
}

uint64_t sub_244969DD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_244969E08@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244969D90(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244969E30()
{
  char *v0;

  return sub_244969D90(*v0);
}

uint64_t ProviderPreviewPayload.propertyListValue.getter()
{
  return sub_24496A234();
}

uint64_t sub_244969E44()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0730);
  sub_24496DAA0();
  sub_24496D8F0();
  sub_24496D9EC();
  return sub_2449CF5F8();
}

uint64_t ProviderPreviewPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = &type metadata for ProviderPreviewPayload.Key;
  v5 = sub_24496DAA0();
  v16 = v5;
  v14[0] = 0;
  sub_24496D8F0();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v8 = v17;
    v7 = v18;
    v15 = &type metadata for ProviderPreviewPayload.Key;
    v16 = v5;
    v14[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v15 = &type metadata for ProviderPreviewPayload.Key;
    v16 = v5;
    v14[0] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0730);
    sub_24496D9EC();
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    if (v12)
      v10 = v12;
    else
      v10 = MEMORY[0x24BEE4AF8];
    v11 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v13;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_24496A0AC()
{
  return sub_24496A588();
}

uint64_t sub_24496A0B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return ProviderPreviewPayload.init(propertyListValue:)(a1, a2);
}

uint64_t FileID.moduleName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FileID.moduleName.modify())()
{
  return nullsub_1;
}

uint64_t FileID.fileName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FileID.fileName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FileID.fileName.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::FileID __swiftcall FileID.init(moduleName:fileName:)(Swift::String moduleName, Swift::String fileName)
{
  Swift::String *v2;
  PreviewsMessagingOS::FileID result;

  *v2 = moduleName;
  v2[1] = fileName;
  result.fileName = fileName;
  result.moduleName = moduleName;
  return result;
}

uint64_t sub_24496A18C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656D614E656C6966;
  else
    return 0x614E656C75646F6DLL;
}

uint64_t sub_24496A1C8(char *a1, char *a2)
{
  return sub_24499DEE4(*a1, *a2);
}

uint64_t sub_24496A1D4()
{
  return sub_2449C6238();
}

uint64_t sub_24496A1DC()
{
  return sub_244922ADC();
}

uint64_t sub_24496A1E4()
{
  return sub_2449CC278();
}

uint64_t sub_24496A1EC@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24496A1F8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496A18C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24496A220()
{
  char *v0;

  return sub_24496A18C(*v0);
}

uint64_t FileID.propertyListValue.getter()
{
  return sub_24496A234();
}

uint64_t sub_24496A234()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496A264()
{
  sub_24496DAF0();
  return sub_2449CF604();
}

uint64_t FileID.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = &type metadata for FileID.Key;
  v5 = sub_24496DAF0();
  v15 = v5;
  v13[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v8 = v16;
    v7 = v17;
    v14 = &type metadata for FileID.Key;
    v15 = v5;
    v13[0] = 1;
    sub_2449CF37C();
    v10 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v11;
    a2[3] = v12;
  }
  return result;
}

uint64_t FileID.description.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t FileID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t FileID.hashValue.getter()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24496A57C()
{
  return sub_24496A588();
}

uint64_t sub_24496A588()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496A5BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return FileID.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24496A5D0()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24496A654()
{
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24496A6C4()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t RegistryPayload.stableID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_24493DCE8(v1, a1, type metadata accessor for RegistryID);
}

uint64_t RegistryPayload.stableID.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_24493DD40(a1, v1, type metadata accessor for RegistryID);
}

uint64_t (*RegistryPayload.stableID.modify())()
{
  return nullsub_1;
}

uint64_t RegistryPayload.location.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for RegistryPayload(0) + 20));
  v5 = *v3;
  v4 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 RegistryPayload.location.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = v1 + *(int *)(type metadata accessor for RegistryPayload(0) + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)v3 = v6;
  *(__n128 *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 32) = v2;
  return result;
}

uint64_t (*RegistryPayload.location.modify())()
{
  type metadata accessor for RegistryPayload(0);
  return nullsub_1;
}

__n128 RegistryPayload.init(stableID:location:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;

  v7 = (__n128)a2[1];
  v8 = *a2;
  v4 = *((_QWORD *)a2 + 4);
  sub_24493DD84(a1, a3, type metadata accessor for RegistryID);
  v5 = a3 + *(int *)(type metadata accessor for RegistryPayload(0) + 20);
  result = v7;
  *(_OWORD *)v5 = v8;
  *(__n128 *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = v4;
  return result;
}

uint64_t RegistryPayload.registryType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24496A8F0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F697461636F6CLL;
  else
    return 0x4449656C62617473;
}

uint64_t sub_24496A920(char *a1, char *a2)
{
  return sub_2449A1908(*a1, *a2);
}

uint64_t sub_24496A92C()
{
  return sub_2449C62BC();
}

uint64_t sub_24496A934()
{
  return sub_2449247BC();
}

uint64_t sub_24496A93C()
{
  return sub_2449C9ED4();
}

uint64_t sub_24496A944@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24496A950@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496A8F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24496A978()
{
  char *v0;

  return sub_24496A8F0(*v0);
}

uint64_t RegistryPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496A9AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06E0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0C10);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v20 - v10;
  v12 = (char *)&v20 + *(int *)(v9 + 48) - v10;
  *((_BYTE *)&v20 - v10) = 0;
  sub_24493DCE8(a1, (uint64_t)v12, type metadata accessor for RegistryID);
  v13 = a1 + *(int *)(type metadata accessor for RegistryPayload(0) + 20);
  v14 = *(_OWORD *)v13;
  v20 = *(_OWORD *)(v13 + 16);
  v21 = v14;
  v15 = *(_QWORD *)(v13 + 32);
  v16 = (uint64_t)&v8[*(int *)(v5 + 48)];
  *v8 = 0;
  sub_24493DCE8((uint64_t)v12, v16, type metadata accessor for RegistryID);
  sub_24493DD84(v16, (uint64_t)v4, type metadata accessor for RegistryID);
  v17 = type metadata accessor for RegistryID(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 0, 1, v17);
  v26 = 0;
  v25 = 1;
  v22 = v21;
  v23 = v20;
  v24 = v15;
  sub_24496DB50();
  sub_24493DED4(&qword_2573A0700, type metadata accessor for RegistryID, (uint64_t)&protocol conformance descriptor for RegistryID);
  sub_24496D8AC();
  v18 = sub_2449CF604();
  sub_244940E8C((uint64_t)v4, &qword_2573A06E0);
  sub_244940E8C((uint64_t)v11, &qword_2573A0C10);
  return v18;
}

uint64_t RegistryPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17[24];
  ValueMetadata *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  v5 = type metadata accessor for RegistryID(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)&v21 + 1) = &type metadata for RegistryPayload.Key;
  v8 = sub_24496DB50();
  v22 = v8;
  LOBYTE(v20) = 0;
  sub_24493DED4(&qword_2573A0700, type metadata accessor for RegistryID, (uint64_t)&protocol conformance descriptor for RegistryID);
  sub_2449CF37C();
  if (v2)
  {
    v9 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    v18 = &type metadata for RegistryPayload.Key;
    v19 = v8;
    v17[0] = 1;
    sub_24496D8AC();
    sub_2449CF37C();
    v11 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v15 = v21;
    v16 = v20;
    v12 = v22;
    sub_24493DD84((uint64_t)v7, a2, type metadata accessor for RegistryID);
    result = type metadata accessor for RegistryPayload(0);
    v13 = a2 + *(int *)(result + 20);
    v14 = v15;
    *(_OWORD *)v13 = v16;
    *(_OWORD *)(v13 + 16) = v14;
    *(_QWORD *)(v13 + 32) = v12;
  }
  return result;
}

uint64_t sub_24496AD9C()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496ADC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RegistryPayload.init(propertyListValue:)(a1, a2);
}

uint64_t MainPreviewPayload.renderEffects.getter()
{
  return swift_bridgeObjectRetain();
}

PreviewsMessagingOS::MainPreviewPayload __swiftcall MainPreviewPayload.init(renderEffects:)(PreviewsMessagingOS::MainPreviewPayload renderEffects)
{
  PreviewsMessagingOS::MainPreviewPayload *v1;

  v1->renderEffects._rawValue = renderEffects.renderEffects._rawValue;
  return renderEffects;
}

uint64_t sub_24496ADEC(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000014;
  else
    return 0x66457265646E6572;
}

uint64_t sub_24496AE34(char *a1, char *a2)
{
  return sub_2449A06C8(*a1, *a2);
}

uint64_t sub_24496AE40()
{
  return sub_2449C6330();
}

uint64_t sub_24496AE48()
{
  return sub_244923EC4();
}

uint64_t sub_24496AE50()
{
  return sub_2449CA71C();
}

uint64_t sub_24496AE58@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24496AE64@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496ADEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24496AE8C()
{
  char *v0;

  return sub_24496ADEC(*v0);
}

uint64_t MainPreviewPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496AEC4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0730);
  sub_24496DB9C();
  sub_2449729C4();
  sub_24496D9EC();
  return sub_2449CF604();
}

uint64_t MainPreviewPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  ValueMetadata *v10;
  unint64_t v11;
  uint64_t v12;

  v10 = &type metadata for MainPreviewPayload.Key;
  v11 = sub_24496DB9C();
  v9[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0730);
  sub_24496D9EC();
  sub_2449CF3B8();
  if (v2)
  {
    v5 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    if (v12)
      v7 = v12;
    else
      v7 = MEMORY[0x24BEE4AF8];
    v8 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    *a2 = v7;
  }
  return result;
}

uint64_t sub_24496B03C(char a1)
{
  return *(_QWORD *)&aMain_4[8 * a1];
}

uint64_t sub_24496B05C()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496B08C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return MainPreviewPayload.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24496B0A0(char *a1, char *a2)
{
  return sub_2449A2164(*a1, *a2);
}

uint64_t sub_24496B0AC()
{
  return sub_2449C63C0();
}

uint64_t sub_24496B0B4()
{
  return sub_244924B84();
}

uint64_t sub_24496B0BC()
{
  return sub_2449C997C();
}

uint64_t sub_24496B0C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24496B0F8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496B03C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24496B120()
{
  sub_2449728B0();
  return sub_2449CF670();
}

uint64_t sub_24496B168()
{
  sub_2449728B0();
  return sub_2449CF67C();
}

uint64_t sub_24496B1CC(char a1)
{
  if (!a1)
    return 0x696D697263736964;
  if (a1 == 1)
    return 0xD000000000000010;
  return 0x6150656C646E7562;
}

uint64_t sub_24496B234(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2449A2044(*a1, *a2);
}

uint64_t sub_24496B240()
{
  return sub_2449C6428();
}

uint64_t sub_24496B248()
{
  return sub_244924AFC();
}

uint64_t sub_24496B250()
{
  return sub_2449C99E0();
}

uint64_t sub_24496B258@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24496B28C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496B1CC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24496B2B4()
{
  char *v0;

  return sub_24496B1CC(*v0);
}

uint64_t CFunctionBundle.propertyListValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;
  char v6;
  char v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  v4 = sub_24496DBFC();
  sub_24496DC40();
  result = sub_2449CF3E8();
  if (v3)
  {
    if (v3 != 1)
      return result;
    v10 = v1;
    v11 = v2;
    v8 = &type metadata for CFunctionBundle.Key;
    v9 = v4;
    v6 = 2;
  }
  else
  {
    v10 = v1;
    v11 = v2;
    v8 = &type metadata for CFunctionBundle.Key;
    v9 = v4;
    v6 = 1;
  }
  v7[0] = v6;
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t CFunctionBundle.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  ValueMetadata *v17;
  unint64_t v18;

  v17 = &type metadata for CFunctionBundle.Key;
  v5 = sub_24496DBFC();
  v18 = v5;
  v16[0] = 0;
  sub_24496DC40();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    if ((_BYTE)v14)
    {
      v17 = &type metadata for CFunctionBundle.Key;
      v18 = v5;
      if (v14 == 1)
      {
        v16[0] = 1;
        sub_2449CF37C();
        v8 = sub_2449CF400();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        v9 = 0;
        v10 = v14;
        v11 = v15;
      }
      else
      {
        v16[0] = 2;
        sub_2449CF37C();
        v13 = sub_2449CF400();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        v10 = v14;
        v11 = v15;
        v9 = 1;
      }
    }
    else
    {
      v12 = sub_2449CF400();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
      v10 = 0;
      v11 = 0;
      v9 = 2;
    }
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = v9;
  }
  return result;
}

uint64_t CFunctionBundle.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) && *(_BYTE *)(v0 + 16) != 1)
    return sub_2449CFD54();
  sub_2449CFD54();
  return sub_2449CF88C();
}

uint64_t CFunctionBundle.hashValue.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_2449CFD48();
  sub_2449CFD54();
  if (v1 <= 1)
    sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t sub_24496B64C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CFunctionBundle.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24496B660()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_2449CFD48();
  sub_2449CFD54();
  if (v1 <= 1)
    sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t sub_24496B6E8()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) && *(_BYTE *)(v0 + 16) != 1)
    return sub_2449CFD54();
  sub_2449CFD54();
  return sub_2449CF88C();
}

uint64_t sub_24496B75C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_2449CFD48();
  sub_2449CFD54();
  if (v1 <= 1)
    sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t CFunctionPayload.bundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_24496DC84(v2, v3, v4);
}

uint64_t CFunctionPayload.bundle.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = sub_24496DC9C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*CFunctionPayload.bundle.modify())()
{
  return nullsub_1;
}

uint64_t CFunctionPayload.functionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CFunctionPayload.functionName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*CFunctionPayload.functionName.modify())()
{
  return nullsub_1;
}

uint64_t CFunctionPayload.functionInput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CFunctionPayload(0) + 24);
  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CFunctionPayload.functionInput.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CFunctionPayload(0) + 24);
  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CFunctionPayload.functionInput.modify())()
{
  type metadata accessor for CFunctionPayload(0);
  return nullsub_1;
}

uint64_t CFunctionPayload.streamsOutput.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CFunctionPayload(0) + 28));
}

uint64_t CFunctionPayload.streamsOutput.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CFunctionPayload(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CFunctionPayload.streamsOutput.modify())()
{
  type metadata accessor for CFunctionPayload(0);
  return nullsub_1;
}

uint64_t CFunctionPayload.init(bundle:functionName:functionInput:streamsOutput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(_BYTE *)(a6 + 16) = v9;
  *(_QWORD *)(a6 + 24) = a2;
  *(_QWORD *)(a6 + 32) = a3;
  v10 = type metadata accessor for CFunctionPayload(0);
  v11 = a6 + *(int *)(v10 + 24);
  v12 = sub_2449CF400();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a4, v12);
  *(_BYTE *)(a6 + *(int *)(v10 + 28)) = a5;
  return result;
}

uint64_t sub_24496BA64(char a1)
{
  return *(_QWORD *)&aBundle_6[8 * a1];
}

uint64_t sub_24496BA84(char *a1, char *a2)
{
  return sub_2449A1554(*a1, *a2);
}

uint64_t sub_24496BA90()
{
  return sub_2449C64D8();
}

uint64_t sub_24496BA98()
{
  return sub_2449245EC();
}

uint64_t sub_24496BAA0()
{
  return sub_2449C9FF4();
}

uint64_t sub_24496BAA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449728F4();
  *a1 = result;
  return result;
}

uint64_t sub_24496BADC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496BA64(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24496BB04()
{
  char *v0;

  return sub_24496BA64(*v0);
}

uint64_t CFunctionPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496BB38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[4];
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  char v42;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v2);
  v31 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0C00);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x24BDAC7A8](v5);
  v32 = &v25[-v9];
  v11 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v27 = v10;
  v28 = v12;
  v13 = &v25[*(int *)(v8 + 48) - v9];
  v25[-v9] = 2;
  v26 = *(unsigned __int8 *)(a1 + 16);
  v14 = type metadata accessor for CFunctionPayload(0);
  v15 = a1 + *(int *)(v14 + 24);
  v16 = sub_2449CF400();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16);
  v18(v13, v15, v16);
  v29 = *(unsigned __int8 *)(a1 + *(int *)(v14 + 28));
  v42 = 0;
  v19 = v11;
  v39 = v11;
  v20 = v27;
  v40 = v27;
  LOBYTE(v14) = v26;
  v41 = v26;
  v38 = 1;
  v36 = v30;
  v37 = v28;
  v21 = &v7[*(int *)(v4 + 48)];
  *v7 = 2;
  v18(v21, (uint64_t)v13, v16);
  v22 = (uint64_t)v31;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v31, v21, v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v22, 0, 1, v16);
  v35 = 2;
  v34 = 3;
  v33 = v29;
  sub_24496DC84(v19, v20, v14);
  sub_24496DCD0();
  sub_24496DD14();
  swift_bridgeObjectRetain();
  v23 = sub_2449CF5EC();
  sub_244940E8C(v22, &qword_25739F710);
  swift_bridgeObjectRelease();
  sub_24496DD58(v39, v40, v41);
  sub_244940E8C((uint64_t)v32, &qword_2573A0C00);
  return v23;
}

uint64_t CFunctionPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _BYTE v32[24];
  ValueMetadata *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  int v38;
  char v39;

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = &type metadata for CFunctionPayload.Key;
  v9 = sub_24496DCD0();
  v34 = v9;
  v32[0] = 0;
  sub_24496DD14();
  sub_2449CF3B8();
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }
  else
  {
    v31 = a2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    v10 = v35;
    v11 = v36;
    v12 = v37;
    if (v37 == 255)
      v13 = 0;
    else
      v13 = v35;
    if (v37 == 255)
      v14 = 0;
    else
      v14 = v36;
    v29 = v14;
    v30 = v13;
    if (v37 == 255)
      v15 = 2;
    else
      v15 = v37;
    v38 = v15;
    v33 = &type metadata for CFunctionPayload.Key;
    v34 = v9;
    v32[0] = 1;
    sub_2449CF37C();
    v26 = v12;
    v27 = v10;
    v28 = v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    v17 = v35;
    v16 = v36;
    v33 = &type metadata for CFunctionPayload.Key;
    v34 = v9;
    v32[0] = 2;
    sub_2449CF37C();
    v24 = v17;
    v25 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    v33 = &type metadata for CFunctionPayload.Key;
    v34 = v9;
    v32[0] = 3;
    sub_2449CF3B8();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    v19 = v39 & 1;
    v20 = v31;
    v21 = v29;
    *v31 = v30;
    v20[1] = v21;
    *((_BYTE *)v20 + 16) = v38;
    v22 = v25;
    v20[3] = v24;
    v20[4] = v22;
    v23 = type metadata accessor for CFunctionPayload(0);
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))((char *)v20 + *(int *)(v23 + 24), v8, v5);
    *((_BYTE *)v20 + *(int *)(v23 + 28)) = v19;
  }
  return result;
}

uint64_t sub_24496C0CC()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496C0F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CFunctionPayload.init(propertyListValue:)(a1, a2);
}

void static MessageStreamInstanceIdentifier.cFunctionStreamingOutput.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000024;
  a1[1] = 0x80000002449E3FC0;
}

void static MessageStreamInstanceIdentifier.registryRuntimeEvents.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000021;
  a1[1] = 0x80000002449E3FF0;
}

__n128 StaticLayerHostPayload.layerHostPayload.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t StaticLayerHostPayload.renderPayload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_DWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 104);
  v5 = *(_QWORD *)(v1 + 112);
  v6 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)a1 = v2;
  v7 = *(_OWORD *)(v1 + 48);
  v8 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 128);
  sub_244964F34(v2, v7);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 StaticLayerHostPayload.init(layerHostPayload:renderPayload:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_DWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  v3 = *(_BYTE *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 32) = v3;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 56) = v8;
  *(_QWORD *)(a3 + 72) = v4;
  *(_DWORD *)(a3 + 80) = v5;
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a3 + 104) = v6;
  result = *(__n128 *)(a2 + 72);
  v10 = *(_OWORD *)(a2 + 88);
  *(__n128 *)(a3 + 112) = result;
  *(_OWORD *)(a3 + 128) = v10;
  return result;
}

uint64_t sub_24496C228(char a1)
{
  if ((a1 & 1) != 0)
    return 0x61507265646E6572;
  else
    return 0xD000000000000010;
}

uint64_t sub_24496C270(char *a1, char *a2)
{
  return sub_24499F72C(*a1, *a2);
}

uint64_t sub_24496C27C()
{
  return sub_2449C6540();
}

uint64_t sub_24496C284()
{
  return sub_244923664();
}

uint64_t sub_24496C28C()
{
  return sub_2449CB198();
}

uint64_t sub_24496C294@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24496C2A0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496C228(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24496C2C8()
{
  char *v0;

  return sub_24496C228(*v0);
}

uint64_t StaticLayerHostPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496C328(uint64_t a1)
{
  _BYTE v2[40];
  _BYTE v3[40];

  sub_2449314A4(a1, (uint64_t)v3, &qword_2573A0BF8);
  v2[39] = 0;
  sub_2449314A4((uint64_t)v3, (uint64_t)v2, &qword_2573A0BF8);
  sub_24496DD74();
  sub_24496DDB8();
  sub_24496DDFC();
  return sub_2449CF604();
}

uint64_t StaticLayerHostPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[7];
  char v19[24];
  ValueMetadata *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  *((_QWORD *)&v23 + 1) = &type metadata for StaticLayerHostPayload.Key;
  v5 = sub_24496DD74();
  v24 = v5;
  LOBYTE(v22) = 0;
  sub_24496DDB8();
  sub_2449CF3B8();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
    v35 = v30;
    v8 = v32;
    v17 = v31;
    v9 = v33;
    v10 = v34;
    v20 = &type metadata for StaticLayerHostPayload.Key;
    v21 = v5;
    v19[0] = 1;
    sub_24496DDFC();
    sub_2449CF37C();
    v11 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v12 = v24;
    v13 = v25;
    v14 = v27;
    *(_QWORD *)a2 = v35;
    *(_QWORD *)(a2 + 8) = v17;
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v9;
    *(_BYTE *)(a2 + 32) = v10;
    *(_DWORD *)(a2 + 33) = *(_DWORD *)v18;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)&v18[3];
    v15 = v23;
    *(_OWORD *)(a2 + 40) = v22;
    *(_OWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 72) = v12;
    *(_DWORD *)(a2 + 80) = v13;
    *(_OWORD *)(a2 + 88) = v26;
    *(_QWORD *)(a2 + 104) = v14;
    v16 = v29;
    *(_OWORD *)(a2 + 112) = v28;
    *(_OWORD *)(a2 + 128) = v16;
  }
  return result;
}

uint64_t sub_24496C5F0()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496C648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StaticLayerHostPayload.init(propertyListValue:)(a1, a2);
}

uint64_t NSPreviewHostablePreviewReply.auditToken.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t NSPreviewHostablePreviewReply.windowNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

double NSPreviewHostablePreviewReply.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double NSPreviewHostablePreviewReply.scaleFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t NSPreviewHostablePreviewReply.initialRenderPayload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_DWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 128);
  v5 = *(_QWORD *)(v1 + 136);
  v6 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)a1 = v2;
  v7 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 88);
  *(_DWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 112);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 152);
  sub_244964F34(v2, v7);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 NSPreviewHostablePreviewReply.init(auditToken:windowNumber:size:scaleFactor:initialRenderPayload:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __n128 result;

  v10 = *(_QWORD *)(a6 + 32);
  v11 = *(_DWORD *)(a6 + 40);
  v12 = *(_QWORD *)(a6 + 64);
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(double *)(a7 + 40) = a8;
  *(double *)(a7 + 48) = a9;
  *(double *)(a7 + 56) = a10;
  v13 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a7 + 64) = *(_OWORD *)a6;
  *(_OWORD *)(a7 + 80) = v13;
  *(_QWORD *)(a7 + 96) = v10;
  *(_DWORD *)(a7 + 104) = v11;
  *(_OWORD *)(a7 + 112) = *(_OWORD *)(a6 + 48);
  *(_QWORD *)(a7 + 128) = v12;
  *(_OWORD *)(a7 + 136) = *(_OWORD *)(a6 + 72);
  result = *(__n128 *)(a6 + 88);
  *(__n128 *)(a7 + 152) = result;
  return result;
}

uint64_t sub_24496C75C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24496C794 + 4 * byte_2449D5C04[a1]))(0xD000000000000014, 0x80000002449E2300);
}

uint64_t sub_24496C794()
{
  return 0x6B6F547469647561;
}

uint64_t sub_24496C7B0()
{
  return 0x754E776F646E6977;
}

uint64_t sub_24496C7D0()
{
  return 1702521203;
}

uint64_t sub_24496C7E0()
{
  return 0x636146656C616373;
}

void sub_24496C800(char *a1)
{
  sub_24499E63C(*a1);
}

void sub_24496C80C()
{
  char *v0;

  sub_2449C65D0(*v0);
}

void sub_24496C814(uint64_t a1)
{
  char *v1;

  sub_244922EC4(a1, *v1);
}

void sub_24496C81C(uint64_t a1)
{
  char *v1;

  sub_2449CBCE0(a1, *v1);
}

uint64_t sub_24496C824@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244945460();
  *a1 = result;
  return result;
}

uint64_t sub_24496C858@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24496C75C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24496C880()
{
  unsigned __int8 *v0;

  return sub_24496C75C(*v0);
}

uint64_t NSPreviewHostablePreviewReply.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496C8E8()
{
  type metadata accessor for audit_token_t(0);
  type metadata accessor for CGSize(0);
  sub_24496DE48();
  sub_24496DDFC();
  return sub_2449CF5E0();
}

uint64_t NSPreviewHostablePreviewReply.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  char v21[24];
  ValueMetadata *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *((_QWORD *)&v25 + 1) = &type metadata for NSPreviewHostablePreviewReply.Key;
  v5 = sub_24496DE48();
  v26 = v5;
  LOBYTE(v24) = 0;
  type metadata accessor for audit_token_t(0);
  sub_2449CF37C();
  if (v2)
  {
    v13 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    v6 = v36;
    v7 = v37;
    v8 = v38;
    v9 = v39;
    *((_QWORD *)&v25 + 1) = &type metadata for NSPreviewHostablePreviewReply.Key;
    v26 = v5;
    LOBYTE(v24) = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    v10 = v35;
    *((_QWORD *)&v25 + 1) = &type metadata for NSPreviewHostablePreviewReply.Key;
    v26 = v5;
    LOBYTE(v24) = 2;
    type metadata accessor for CGSize(0);
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    v11 = v33;
    v12 = v34;
    *((_QWORD *)&v25 + 1) = &type metadata for NSPreviewHostablePreviewReply.Key;
    v26 = v5;
    LOBYTE(v24) = 3;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    v14 = v32;
    v22 = &type metadata for NSPreviewHostablePreviewReply.Key;
    v23 = v5;
    v21[0] = 4;
    sub_24496DDFC();
    sub_2449CF37C();
    v15 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    v17 = v26;
    v18 = v27;
    v19 = v29;
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v9;
    *(_QWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 40) = v11;
    *(_QWORD *)(a2 + 48) = v12;
    *(_QWORD *)(a2 + 56) = v14;
    v20 = v25;
    *(_OWORD *)(a2 + 64) = v24;
    *(_OWORD *)(a2 + 80) = v20;
    *(_QWORD *)(a2 + 96) = v17;
    *(_DWORD *)(a2 + 104) = v18;
    *(_OWORD *)(a2 + 112) = v28;
    *(_QWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 136) = v30;
    *(_OWORD *)(a2 + 152) = v31;
  }
  return result;
}

uint64_t sub_24496CCC8()
{
  return sub_2449CF3D0();
}

uint64_t sub_24496CD28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NSPreviewHostablePreviewReply.init(propertyListValue:)(a1, a2);
}

uint64_t MacOSSnapshotPayload.renderPayload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v7 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_DWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  sub_244964F34(v2, v7);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 MacOSSnapshotPayload.init(renderPayload:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v2;
  *(_DWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 88);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

uint64_t sub_24496CDF8@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_24496CE04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_24496D1B8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MacOSSnapshotPayload.propertyListValue.getter()
{
  sub_24496DE94();
  sub_24496DDFC();
  return sub_2449CF3E8();
}

uint64_t sub_24496CEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a3 + 32);
  v4 = *(unsigned int *)(a3 + 40);
  v5 = *(_QWORD *)(a3 + 64);
  v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
  return sub_24497297C(a3);
}

__n128 MacOSSnapshotPayload.init(propertyListValue:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __n128 v23;

  v14 = &type metadata for MacOSSnapshotPayload.Key;
  v15 = sub_24496DE94();
  sub_24496DDFC();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (!v2)
  {
    v7 = v18;
    v8 = v19;
    v9 = v21;
    result = v23;
    v10 = v22;
    v11 = v17;
    v12 = v20;
    *(_OWORD *)a2 = v16;
    *(_OWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 32) = v7;
    *(_DWORD *)(a2 + 40) = v8;
    *(_OWORD *)(a2 + 48) = v12;
    *(_QWORD *)(a2 + 64) = v9;
    *(_OWORD *)(a2 + 72) = v10;
    *(__n128 *)(a2 + 88) = result;
  }
  return result;
}

uint64_t sub_24496CFE0()
{
  sub_24496DE94();
  sub_24496DDFC();
  return sub_2449CF3E8();
}

__n128 sub_24496D064@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __n128 v23;

  v14 = &type metadata for MacOSSnapshotPayload.Key;
  v15 = sub_24496DE94();
  sub_24496DDFC();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (!v2)
  {
    v7 = v18;
    v8 = v19;
    v9 = v21;
    result = v23;
    v10 = v22;
    v11 = v17;
    v12 = v20;
    *(_OWORD *)a2 = v16;
    *(_OWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 32) = v7;
    *(_DWORD *)(a2 + 40) = v8;
    *(_OWORD *)(a2 + 48) = v12;
    *(_QWORD *)(a2 + 64) = v9;
    *(_OWORD *)(a2 + 72) = v10;
    *(__n128 *)(a2 + 88) = result;
  }
  return result;
}

void static MessageStreamInstanceIdentifier.macOSSnapshots.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001ALL;
  a1[1] = 0x80000002449E4020;
}

void static MessageStreamInstanceIdentifier.nsPreviewSuppressedPresentations.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000002CLL;
  a1[1] = 0x80000002449E4040;
}

uint64_t sub_24496D198()
{
  return 0x72656469766F7270;
}

uint64_t sub_24496D1B8()
{
  return 0x61507265646E6572;
}

uint64_t _s19PreviewsMessagingOS15CFunctionBundleO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        if (v3 == v6 && v2 == v5)
          v9 = 1;
        else
          v9 = sub_2449CFCD0();
        sub_24496DC84(v6, v5, 1u);
        sub_24496DC84(v3, v2, 1u);
        sub_24496DC9C(v3, v2, 1u);
        v12 = v6;
        v13 = v5;
        v14 = 1;
LABEL_25:
        sub_24496DC9C(v12, v13, v14);
        return v9 & 1;
      }
    }
    else if (v7 == 2 && (v5 | v6) == 0)
    {
      sub_24496DC9C(*(_QWORD *)a1, v2, 2u);
      sub_24496DC9C(0, 0, 2u);
      v9 = 1;
      return v9 & 1;
    }
  }
  else if (!*(_BYTE *)(a2 + 16))
  {
    if (v3 == v6 && v2 == v5)
      v9 = 1;
    else
      v9 = sub_2449CFCD0();
    sub_24496DC84(v6, v5, 0);
    sub_24496DC84(v3, v2, 0);
    sub_24496DC9C(v3, v2, 0);
    v12 = v6;
    v13 = v5;
    v14 = 0;
    goto LABEL_25;
  }
  sub_24496DC84(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
  sub_24496DC84(v3, v2, v4);
  sub_24496DC9C(v3, v2, v4);
  sub_24496DC9C(v6, v5, v7);
  v9 = 0;
  return v9 & 1;
}

uint64_t _s19PreviewsMessagingOS6FileIDV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_2449CFCD0(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_2449CFCD0();
  }
  return result;
}

BOOL _s19PreviewsMessagingOS10RegistryIDV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  _BOOL8 result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;

  v4 = sub_2449CF07C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0C28);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v29 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v29 - v18;
  if (*a1 == *a2 && a1[1] == a2[1] || (v20 = sub_2449CFCD0(), result = 0, (v20 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3] || (v22 = sub_2449CFCD0(), result = 0, (v22 & 1) != 0))
    {
      if (a1[4] == a2[4])
      {
        v30 = v7;
        v23 = type metadata accessor for RegistryID(0);
        sub_244968184((uint64_t)a1 + *(int *)(v23 + 28), (uint64_t)v19);
        sub_244968184((uint64_t)a2 + *(int *)(v23 + 28), (uint64_t)v17);
        v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
        sub_244968184((uint64_t)v19, (uint64_t)v10);
        sub_244968184((uint64_t)v17, v24);
        v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v25((uint64_t)v10, 1, v4) == 1)
        {
          sub_244940E8C((uint64_t)v17, &qword_2573A06A0);
          sub_244940E8C((uint64_t)v19, &qword_2573A06A0);
          if (v25(v24, 1, v4) == 1)
          {
            sub_244940E8C((uint64_t)v10, &qword_2573A06A0);
            return 1;
          }
        }
        else
        {
          sub_244968184((uint64_t)v10, (uint64_t)v14);
          if (v25(v24, 1, v4) != 1)
          {
            v26 = v30;
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v30, v24, v4);
            sub_24493DED4(&qword_2573A0C30, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
            v27 = sub_2449CF850();
            v28 = *(void (**)(char *, uint64_t))(v5 + 8);
            v28(v26, v4);
            sub_244940E8C((uint64_t)v17, &qword_2573A06A0);
            sub_244940E8C((uint64_t)v19, &qword_2573A06A0);
            v28(v14, v4);
            sub_244940E8C((uint64_t)v10, &qword_2573A06A0);
            return (v27 & 1) != 0;
          }
          sub_244940E8C((uint64_t)v17, &qword_2573A06A0);
          sub_244940E8C((uint64_t)v19, &qword_2573A06A0);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
        }
        sub_244940E8C((uint64_t)v10, &qword_2573A0C28);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_24496D778()
{
  return sub_2449685F0();
}

unint64_t sub_24496D780()
{
  unint64_t result;

  result = qword_2573A06D0;
  if (!qword_2573A06D0)
  {
    result = MEMORY[0x24951C158](&unk_2449D7170, &type metadata for RuntimeRegistryLocation.Key);
    atomic_store(result, (unint64_t *)&qword_2573A06D0);
  }
  return result;
}

unint64_t sub_24496D7C4()
{
  unint64_t result;

  result = qword_2573A06D8;
  if (!qword_2573A06D8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for FileID, &type metadata for FileID);
    atomic_store(result, (unint64_t *)&qword_2573A06D8);
  }
  return result;
}

uint64_t type metadata accessor for PreviewSpecification.Value(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A0970);
}

uint64_t sub_24496D81C(_BYTE *a1, BOOL *a2)
{
  uint64_t v2;

  return sub_244968D1C(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_24496D824()
{
  unint64_t result;

  result = qword_2573A06E8;
  if (!qword_2573A06E8)
  {
    result = MEMORY[0x24951C158](&unk_2449D7148, &type metadata for PreviewSpecification.Value.Key);
    atomic_store(result, (unint64_t *)&qword_2573A06E8);
  }
  return result;
}

unint64_t sub_24496D868()
{
  unint64_t result;

  result = qword_2573A06F0;
  if (!qword_2573A06F0)
  {
    result = MEMORY[0x24951C158](&unk_2449D7108, &type metadata for PreviewSpecification.Value.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A06F0);
  }
  return result;
}

unint64_t sub_24496D8AC()
{
  unint64_t result;

  result = qword_2573A0708;
  if (!qword_2573A0708)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for RuntimeRegistryLocation, &type metadata for RuntimeRegistryLocation);
    atomic_store(result, (unint64_t *)&qword_2573A0708);
  }
  return result;
}

unint64_t sub_24496D8F0()
{
  unint64_t result;

  result = qword_2573A0710;
  if (!qword_2573A0710)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ProviderPayload, &type metadata for ProviderPayload);
    atomic_store(result, (unint64_t *)&qword_2573A0710);
  }
  return result;
}

uint64_t type metadata accessor for PreviewSpecification(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A08C8);
}

uint64_t type metadata accessor for PreviewPayload(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A0A00);
}

uint64_t sub_24496D95C()
{
  uint64_t v0;

  return sub_24496980C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_24496D964()
{
  unint64_t result;

  result = qword_2573A0718;
  if (!qword_2573A0718)
  {
    result = MEMORY[0x24951C158](&unk_2449D70E0, &type metadata for PreviewPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0718);
  }
  return result;
}

unint64_t sub_24496D9A8()
{
  unint64_t result;

  result = qword_2573A0728;
  if (!qword_2573A0728)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ProviderPreviewPayload, &type metadata for ProviderPreviewPayload);
    atomic_store(result, (unint64_t *)&qword_2573A0728);
  }
  return result;
}

unint64_t sub_24496D9EC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_2573A0738;
  if (!qword_2573A0738)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573A0730);
    v2 = sub_24496DA50();
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2573A0738);
  }
  return result;
}

unint64_t sub_24496DA50()
{
  unint64_t result;

  result = qword_2573A0740;
  if (!qword_2573A0740)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for RenderEffect, &type metadata for RenderEffect);
    atomic_store(result, (unint64_t *)&qword_2573A0740);
  }
  return result;
}

uint64_t sub_24496DA94()
{
  return sub_244969E44();
}

unint64_t sub_24496DAA0()
{
  unint64_t result;

  result = qword_2573A0748;
  if (!qword_2573A0748)
  {
    result = MEMORY[0x24951C158](&unk_2449D70B8, &type metadata for ProviderPreviewPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0748);
  }
  return result;
}

uint64_t sub_24496DAE4()
{
  return sub_24496A264();
}

unint64_t sub_24496DAF0()
{
  unint64_t result;

  result = qword_2573A0750;
  if (!qword_2573A0750)
  {
    result = MEMORY[0x24951C158](&unk_2449D7090, &type metadata for FileID.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0750);
  }
  return result;
}

uint64_t type metadata accessor for RegistryPayload(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A0A90);
}

uint64_t sub_24496DB48()
{
  uint64_t v0;

  return sub_24496A9AC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_24496DB50()
{
  unint64_t result;

  result = qword_2573A0758;
  if (!qword_2573A0758)
  {
    result = MEMORY[0x24951C158](&unk_2449D7068, &type metadata for RegistryPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0758);
  }
  return result;
}

uint64_t sub_24496DB94()
{
  return sub_24496AEC4();
}

unint64_t sub_24496DB9C()
{
  unint64_t result;

  result = qword_2573A0760;
  if (!qword_2573A0760)
  {
    result = MEMORY[0x24951C158](&unk_2449D7040, &type metadata for MainPreviewPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0760);
  }
  return result;
}

_BYTE *sub_24496DBE0(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;
  char v3;

  v3 = *(_BYTE *)(v2 + 32);
  *result = 0;
  *a2 = 0x201u >> (8 * v3);
  return result;
}

unint64_t sub_24496DBFC()
{
  unint64_t result;

  result = qword_2573A0768;
  if (!qword_2573A0768)
  {
    result = MEMORY[0x24951C158](&unk_2449D7018, &type metadata for CFunctionBundle.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0768);
  }
  return result;
}

unint64_t sub_24496DC40()
{
  unint64_t result;

  result = qword_2573A0770;
  if (!qword_2573A0770)
  {
    result = MEMORY[0x24951C158](&unk_2449D6FD8, &type metadata for CFunctionBundle.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0770);
  }
  return result;
}

uint64_t sub_24496DC84(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_24496DC9C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t type metadata accessor for CFunctionPayload(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A0B20);
}

uint64_t sub_24496DCC8()
{
  uint64_t v0;

  return sub_24496BB38(*(_QWORD *)(v0 + 16));
}

unint64_t sub_24496DCD0()
{
  unint64_t result;

  result = qword_2573A0778;
  if (!qword_2573A0778)
  {
    result = MEMORY[0x24951C158](&unk_2449D6FB0, &type metadata for CFunctionPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0778);
  }
  return result;
}

unint64_t sub_24496DD14()
{
  unint64_t result;

  result = qword_2573A0780;
  if (!qword_2573A0780)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CFunctionBundle, &type metadata for CFunctionBundle);
    atomic_store(result, (unint64_t *)&qword_2573A0780);
  }
  return result;
}

uint64_t sub_24496DD58(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_24496DC9C(a1, a2, a3);
  return a1;
}

uint64_t sub_24496DD6C()
{
  uint64_t v0;

  return sub_24496C328(*(_QWORD *)(v0 + 16));
}

unint64_t sub_24496DD74()
{
  unint64_t result;

  result = qword_2573A0788;
  if (!qword_2573A0788)
  {
    result = MEMORY[0x24951C158](&unk_2449D6F88, &type metadata for StaticLayerHostPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0788);
  }
  return result;
}

unint64_t sub_24496DDB8()
{
  unint64_t result;

  result = qword_2573A0790;
  if (!qword_2573A0790)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for LayerHostPayload, &type metadata for LayerHostPayload);
    atomic_store(result, (unint64_t *)&qword_2573A0790);
  }
  return result;
}

unint64_t sub_24496DDFC()
{
  unint64_t result;

  result = qword_2573A0798;
  if (!qword_2573A0798)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for RenderPayload, &type metadata for RenderPayload);
    atomic_store(result, (unint64_t *)&qword_2573A0798);
  }
  return result;
}

uint64_t sub_24496DE40()
{
  return sub_24496C8E8();
}

unint64_t sub_24496DE48()
{
  unint64_t result;

  result = qword_2573A07A0;
  if (!qword_2573A07A0)
  {
    result = MEMORY[0x24951C158](&unk_2449D6F60, &type metadata for NSPreviewHostablePreviewReply.Key);
    atomic_store(result, (unint64_t *)&qword_2573A07A0);
  }
  return result;
}

uint64_t sub_24496DE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24496CEB0(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_24496DE94()
{
  unint64_t result;

  result = qword_2573A07A8;
  if (!qword_2573A07A8)
  {
    result = MEMORY[0x24951C158](&unk_2449D6F38, &type metadata for MacOSSnapshotPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A07A8);
  }
  return result;
}

unint64_t sub_24496DEDC()
{
  unint64_t result;

  result = qword_2573A07B0;
  if (!qword_2573A07B0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for RegistryType, &type metadata for RegistryType);
    atomic_store(result, (unint64_t *)&qword_2573A07B0);
  }
  return result;
}

uint64_t sub_24496DF20()
{
  return sub_24493DED4(&qword_2573A07B8, type metadata accessor for RegistryID, (uint64_t)&protocol conformance descriptor for RegistryID);
}

unint64_t sub_24496DF50()
{
  unint64_t result;

  result = qword_2573A07C0;
  if (!qword_2573A07C0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for FileID, &type metadata for FileID);
    atomic_store(result, (unint64_t *)&qword_2573A07C0);
  }
  return result;
}

unint64_t sub_24496DF98()
{
  unint64_t result;

  result = qword_2573A07C8;
  if (!qword_2573A07C8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CFunctionBundle, &type metadata for CFunctionBundle);
    atomic_store(result, (unint64_t *)&qword_2573A07C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProviderPayload()
{
  return &type metadata for ProviderPayload;
}

ValueMetadata *type metadata accessor for RegistryType()
{
  return &type metadata for RegistryType;
}

uint64_t *initializeBufferWithCopyOfBuffer for RegistryID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    a1[4] = a2[4];
    v10 = sub_2449CF07C();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t destroy for RegistryID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_2449CF07C();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for RegistryID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2449CF07C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithCopy for RegistryID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2449CF07C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for RegistryID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_2449CF07C();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithTake for RegistryID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2449CF07C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegistryID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24496E5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RegistryID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24496E650(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_24496E6C8()
{
  unint64_t v0;

  sub_24496E74C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_24496E74C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2573A0838[0])
  {
    sub_2449CF07C();
    v0 = sub_2449CFB2C();
    if (!v1)
      atomic_store(v0, qword_2573A0838);
  }
}

_QWORD *initializeWithCopy for RuntimeRegistryLocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RuntimeRegistryLocation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

_QWORD *assignWithTake for RuntimeRegistryLocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for RuntimeRegistryLocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RuntimeRegistryLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RuntimeRegistryLocation()
{
  return &type metadata for RuntimeRegistryLocation;
}

uint64_t *initializeBufferWithCopyOfBuffer for PreviewSpecification(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for PreviewSpecification.Value(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      a1[4] = a2[4];
      v8 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_2449CF07C();
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v13(v10, 1, v11))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v17 = (uint64_t *)((char *)a1 + v16);
      v18 = (uint64_t *)((char *)a2 + v16);
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      v20 = v18[3];
      v17[2] = v18[2];
      v17[3] = v20;
      v17[4] = v18[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PreviewSpecification(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for PreviewSpecification.Value(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    v4 = a1 + *(int *)(type metadata accessor for RegistryID(0) + 28);
    v5 = sub_2449CF07C();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for PreviewSpecification(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for PreviewSpecification.Value(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    a1[4] = a2[4];
    v7 = *(int *)(type metadata accessor for RegistryID(0) + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_2449CF07C();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v16[3];
    v15[2] = v16[2];
    v15[3] = v18;
    v15[4] = v16[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    a1[2] = a2[2];
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for PreviewSpecification(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for PreviewSpecification.Value);
    type metadata accessor for PreviewSpecification.Value(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      v5 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = sub_2449CF07C();
      v9 = *(_QWORD *)(v8 - 8);
      v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v10(v7, 1, v8))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      }
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v13 = (_QWORD *)((char *)a1 + v12);
      v14 = (_QWORD *)((char *)a2 + v12);
      *v13 = *v14;
      v13[1] = v14[1];
      v13[2] = v14[2];
      v13[3] = v14[3];
      v13[4] = v14[4];
      swift_bridgeObjectRetain();
    }
    else
    {
      a1[2] = a2[2];
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for PreviewSpecification(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v4 = type metadata accessor for PreviewSpecification.Value(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    v6 = *(int *)(type metadata accessor for RegistryID(0) + 28);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_2449CF07C();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v15;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for PreviewSpecification(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for PreviewSpecification.Value);
    v4 = type metadata accessor for PreviewSpecification.Value(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v6 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = sub_2449CF07C();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v15;
      *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewSpecification()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24496F1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreviewSpecification.Value(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PreviewSpecification()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24496F1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreviewSpecification.Value(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_24496F228()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PreviewSpecification.Value(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PreviewSpecification.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      a1[4] = a2[4];
      v9 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_2449CF07C();
      v13 = *(_QWORD *)(v12 - 8);
      v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v14(v11, 1, v12))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      v21 = v19[3];
      v18[2] = v19[2];
      v18[3] = v21;
      v18[4] = v19[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PreviewSpecification.Value(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    v4 = a1 + *(int *)(type metadata accessor for RegistryID(0) + 28);
    v5 = sub_2449CF07C();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for PreviewSpecification.Value(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    a1[4] = a2[4];
    v7 = *(int *)(type metadata accessor for RegistryID(0) + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_2449CF07C();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v16[3];
    v15[2] = v16[2];
    v15[3] = v18;
    v15[4] = v16[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    a1[2] = a2[2];
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for PreviewSpecification.Value(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for PreviewSpecification.Value);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      v5 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = sub_2449CF07C();
      v9 = *(_QWORD *)(v8 - 8);
      v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v10(v7, 1, v8))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      }
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v13 = (_QWORD *)((char *)a1 + v12);
      v14 = (_QWORD *)((char *)a2 + v12);
      *v13 = *v14;
      v13[1] = v14[1];
      v13[2] = v14[2];
      v13[3] = v14[3];
      v13[4] = v14[4];
      swift_bridgeObjectRetain();
    }
    else
    {
      a1[2] = a2[2];
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for PreviewSpecification.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    v7 = *(int *)(type metadata accessor for RegistryID(0) + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_2449CF07C();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v16;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for PreviewSpecification.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for PreviewSpecification.Value);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v7 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = sub_2449CF07C();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v16;
      *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24496FAA4()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  v2[4] = &unk_2449D63E0;
  result = type metadata accessor for RegistryID(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PreviewPayload(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for PreviewSpecification.Value(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    if (EnumCaseMultiPayload == 1)
    {
      v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      a1[4] = a2[4];
      v10 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      __dst = (char *)a1 + v10;
      v11 = (char *)a2 + v10;
      v12 = sub_2449CF07C();
      v13 = *(_QWORD *)(v12 - 8);
      v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v14(v11, 1, v12))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
      }
      v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      v21 = v19[3];
      v18[2] = v19[2];
      v18[3] = v21;
      v18[4] = v19[4];
      swift_bridgeObjectRetain();
    }
    else
    {
      a1[2] = a2[2];
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PreviewPayload(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PreviewSpecification.Value(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    v3 = a1 + *(int *)(type metadata accessor for RegistryID(0) + 28);
    v4 = sub_2449CF07C();
    v5 = *(_QWORD *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PreviewPayload(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  type metadata accessor for PreviewSpecification.Value(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  if (EnumCaseMultiPayload == 1)
  {
    v22 = a3;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    a1[4] = a2[4];
    v9 = *(int *)(type metadata accessor for RegistryID(0) + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2449CF07C();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v18[3];
    v17[2] = v18[2];
    v17[3] = v20;
    v17[4] = v18[4];
    swift_bridgeObjectRetain();
    a3 = v22;
  }
  else
  {
    a1[2] = a2[2];
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PreviewPayload(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *__dst;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for PreviewSpecification.Value);
    type metadata accessor for PreviewSpecification.Value(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      v7 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      __dst = (char *)a1 + v7;
      v8 = (char *)a2 + v7;
      v9 = sub_2449CF07C();
      v10 = *(_QWORD *)(v9 - 8);
      v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11(v8, 1, v9))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(__dst, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
      }
      v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      *v14 = *v15;
      v14[1] = v15[1];
      v14[2] = v15[2];
      v14[3] = v15[3];
      v14[4] = v15[4];
      swift_bridgeObjectRetain();
    }
    else
    {
      a1[2] = a2[2];
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for PreviewPayload(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v6 = type metadata accessor for PreviewSpecification.Value(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    v8 = *(int *)(type metadata accessor for RegistryID(0) + 28);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2449CF07C();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v17;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *assignWithTake for PreviewPayload(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for PreviewSpecification.Value);
    v6 = type metadata accessor for PreviewSpecification.Value(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v8 = *(int *)(type metadata accessor for RegistryID(0) + 28);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_2449CF07C();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A06F8) + 48);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewPayload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24497041C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PreviewSpecification(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PreviewPayload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2449704A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PreviewSpecification(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_24497051C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244970E58(a1, a2, a3, type metadata accessor for PreviewSpecification.Value);
}

ValueMetadata *type metadata accessor for ProviderPreviewPayload()
{
  return &type metadata for ProviderPreviewPayload;
}

uint64_t _s19PreviewsMessagingOS6FileIDVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2449705A0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FileID()
{
  return &type metadata for FileID;
}

uint64_t *initializeBufferWithCopyOfBuffer for RegistryPayload(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    a1[4] = a2[4];
    v9 = *(int *)(type metadata accessor for RegistryID(0) + 28);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_2449CF07C();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = *(int *)(a3 + 20);
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = v19[3];
    v18[2] = v19[2];
    v18[3] = v21;
    v18[4] = v19[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for RegistryPayload(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for RegistryID(0) + 28);
  v3 = sub_2449CF07C();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for RegistryPayload(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = *(int *)(type metadata accessor for RegistryID(0) + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2449CF07C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 20);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = v17[3];
  v16[2] = v17[2];
  v16[3] = v19;
  v16[4] = v17[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RegistryPayload(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = *(int *)(type metadata accessor for RegistryID(0) + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2449CF07C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 20);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *(_QWORD *)((char *)a2 + v15);
  v16[1] = *(_QWORD *)((char *)a2 + v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16[2] = v17[2];
  v16[3] = v17[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16[4] = v17[4];
  return a1;
}

uint64_t initializeWithTake for RegistryPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(type metadata accessor for RegistryID(0) + 28);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_2449CF07C();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(a3 + 20);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  return a1;
}

_QWORD *assignWithTake for RegistryPayload(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v8 = *(int *)(type metadata accessor for RegistryID(0) + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_2449CF07C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(a3 + 20);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v21 = v19[3];
  v18[2] = v19[2];
  v18[3] = v21;
  swift_bridgeObjectRelease();
  v18[4] = v19[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for RegistryPayload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244970D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for RegistryID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for RegistryPayload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244970DC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for RegistryID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_244970E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244970E58(a1, a2, a3, type metadata accessor for RegistryID);
}

uint64_t sub_244970E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MainPreviewPayload()
{
  return &type metadata for MainPreviewPayload;
}

uint64_t destroy for CFunctionBundle(uint64_t a1)
{
  return sub_24496DC9C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s19PreviewsMessagingOS15CFunctionBundleOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24496DC84(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CFunctionBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_24496DC84(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_24496DC9C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CFunctionBundle(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_24496DC9C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CFunctionBundle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CFunctionBundle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_244971054(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_24497106C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CFunctionBundle()
{
  return &type metadata for CFunctionBundle;
}

unint64_t initializeBufferWithCopyOfBuffer for CFunctionPayload(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_24496DC84(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v10;
    v11 = *(int *)(a3 + 24);
    v12 = a1 + v11;
    v13 = a2 + v11;
    v14 = sub_2449CF400();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  }
  return a1;
}

uint64_t destroy for CFunctionPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_24496DC9C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for CFunctionPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_24496DC84(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v9;
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_2449CF400();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithCopy for CFunctionPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_24496DC84(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v11 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v8;
  sub_24496DC9C(v9, v10, v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t initializeWithTake for CFunctionPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for CFunctionPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_24496DC9C(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t getEnumTagSinglePayload for CFunctionPayload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244971460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2449CF400();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CFunctionPayload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2449714E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = sub_2449CF400();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_24497155C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for StaticLayerHostPayload(uint64_t a1)
{
  sub_244962528(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StaticLayerHostPayload(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  sub_244964F34(v5, v6);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StaticLayerHostPayload(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 6);
  sub_244964F34(v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  sub_244962528(v8, v9);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for StaticLayerHostPayload(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_244962528(v5, v6);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticLayerHostPayload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StaticLayerHostPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticLayerHostPayload()
{
  return &type metadata for StaticLayerHostPayload;
}

uint64_t destroy for NSPreviewHostablePreviewReply(uint64_t a1)
{
  sub_244962528(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSPreviewHostablePreviewReply(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  sub_244964F34(v5, v6);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSPreviewHostablePreviewReply(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  sub_244964F34(v4, v5);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  sub_244962528(v6, v7);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for NSPreviewHostablePreviewReply(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_244962528(v5, v6);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSPreviewHostablePreviewReply(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSPreviewHostablePreviewReply(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 136) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSPreviewHostablePreviewReply()
{
  return &type metadata for NSPreviewHostablePreviewReply;
}

uint64_t destroy for RenderPayload(uint64_t a1)
{
  sub_244962528(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RenderPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_244964F34(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RenderPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_244964F34(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_244962528(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for RenderPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_244962528(v4, v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for RenderPayload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MacOSSnapshotPayload()
{
  return &type metadata for MacOSSnapshotPayload;
}

ValueMetadata *type metadata accessor for MacOSSnapshotPayload.Key()
{
  return &type metadata for MacOSSnapshotPayload.Key;
}

ValueMetadata *type metadata accessor for NSPreviewHostablePreviewReply.Key()
{
  return &type metadata for NSPreviewHostablePreviewReply.Key;
}

ValueMetadata *type metadata accessor for StaticLayerHostPayload.Key()
{
  return &type metadata for StaticLayerHostPayload.Key;
}

ValueMetadata *type metadata accessor for CFunctionPayload.Key()
{
  return &type metadata for CFunctionPayload.Key;
}

ValueMetadata *type metadata accessor for CFunctionBundle.Discriminant()
{
  return &type metadata for CFunctionBundle.Discriminant;
}

ValueMetadata *type metadata accessor for CFunctionBundle.Key()
{
  return &type metadata for CFunctionBundle.Key;
}

ValueMetadata *type metadata accessor for MainPreviewPayload.Key()
{
  return &type metadata for MainPreviewPayload.Key;
}

ValueMetadata *type metadata accessor for RegistryPayload.Key()
{
  return &type metadata for RegistryPayload.Key;
}

ValueMetadata *type metadata accessor for FileID.Key()
{
  return &type metadata for FileID.Key;
}

uint64_t _s19PreviewsMessagingOS15CFunctionBundleO12DiscriminantOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24497204C + 4 * byte_2449D5C0E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_244972080 + 4 * byte_2449D5C09[v4]))();
}

uint64_t sub_244972080(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244972088(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244972090);
  return result;
}

uint64_t sub_24497209C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2449720A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2449720A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449720B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProviderPreviewPayload.Key()
{
  return &type metadata for ProviderPreviewPayload.Key;
}

ValueMetadata *type metadata accessor for PreviewPayload.Key()
{
  return &type metadata for PreviewPayload.Key;
}

ValueMetadata *type metadata accessor for PreviewSpecification.Value.Discriminant()
{
  return &type metadata for PreviewSpecification.Value.Discriminant;
}

uint64_t _s19PreviewsMessagingOS29NSPreviewHostablePreviewReplyV3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_244972138 + 4 * byte_2449D5C18[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24497216C + 4 * byte_2449D5C13[v4]))();
}

uint64_t sub_24497216C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244972174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24497217CLL);
  return result;
}

uint64_t sub_244972188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244972190);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_244972194(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24497219C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreviewSpecification.Value.Key()
{
  return &type metadata for PreviewSpecification.Value.Key;
}

uint64_t _s19PreviewsMessagingOS22StaticLayerHostPayloadV3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244972204 + 4 * byte_2449D5C22[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244972238 + 4 * byte_2449D5C1D[v4]))();
}

uint64_t sub_244972238(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244972240(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244972248);
  return result;
}

uint64_t sub_244972254(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24497225CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244972260(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244972268(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RuntimeRegistryLocation.Key()
{
  return &type metadata for RuntimeRegistryLocation.Key;
}

uint64_t _s19PreviewsMessagingOS16CFunctionPayloadV3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2449722D0 + 4 * byte_2449D5C2C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_244972304 + 4 * byte_2449D5C27[v4]))();
}

uint64_t sub_244972304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24497230C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244972314);
  return result;
}

uint64_t sub_244972320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244972328);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24497232C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244972334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RegistryID.Key()
{
  return &type metadata for RegistryID.Key;
}

uint64_t _s19PreviewsMessagingOS20MacOSSnapshotPayloadV3KeyOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_244972390 + 4 * byte_2449D5C31[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2449723B0 + 4 * byte_2449D5C36[v4]))();
}

_BYTE *sub_244972390(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2449723B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2449723B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2449723C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2449723C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2449723D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ProviderPayload.Key()
{
  return &type metadata for ProviderPayload.Key;
}

unint64_t sub_2449723F0()
{
  unint64_t result;

  result = qword_2573A0B60;
  if (!qword_2573A0B60)
  {
    result = MEMORY[0x24951C158](&unk_2449D65B0, &type metadata for ProviderPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0B60);
  }
  return result;
}

unint64_t sub_244972438()
{
  unint64_t result;

  result = qword_2573A0B68;
  if (!qword_2573A0B68)
  {
    result = MEMORY[0x24951C158](&unk_2449D6650, &type metadata for RegistryID.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0B68);
  }
  return result;
}

unint64_t sub_244972480()
{
  unint64_t result;

  result = qword_2573A0B70;
  if (!qword_2573A0B70)
  {
    result = MEMORY[0x24951C158](&unk_2449D66F0, &type metadata for RuntimeRegistryLocation.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0B70);
  }
  return result;
}

unint64_t sub_2449724C8()
{
  unint64_t result;

  result = qword_2573A0B78;
  if (!qword_2573A0B78)
  {
    result = MEMORY[0x24951C158](&unk_2449D6790, &type metadata for PreviewSpecification.Value.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0B78);
  }
  return result;
}

unint64_t sub_244972510()
{
  unint64_t result;

  result = qword_2573A0B80;
  if (!qword_2573A0B80)
  {
    result = MEMORY[0x24951C158](&unk_2449D6830, &type metadata for PreviewSpecification.Value.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0B80);
  }
  return result;
}

unint64_t sub_244972558()
{
  unint64_t result;

  result = qword_2573A0B88;
  if (!qword_2573A0B88)
  {
    result = MEMORY[0x24951C158](&unk_2449D68D0, &type metadata for PreviewPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0B88);
  }
  return result;
}

unint64_t sub_2449725A0()
{
  unint64_t result;

  result = qword_2573A0B90;
  if (!qword_2573A0B90)
  {
    result = MEMORY[0x24951C158](&unk_2449D6970, &type metadata for ProviderPreviewPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0B90);
  }
  return result;
}

unint64_t sub_2449725E8()
{
  unint64_t result;

  result = qword_2573A0B98;
  if (!qword_2573A0B98)
  {
    result = MEMORY[0x24951C158](&unk_2449D6A10, &type metadata for FileID.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0B98);
  }
  return result;
}

unint64_t sub_244972630()
{
  unint64_t result;

  result = qword_2573A0BA0;
  if (!qword_2573A0BA0)
  {
    result = MEMORY[0x24951C158](&unk_2449D6AB0, &type metadata for RegistryPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0BA0);
  }
  return result;
}

unint64_t sub_244972678()
{
  unint64_t result;

  result = qword_2573A0BA8;
  if (!qword_2573A0BA8)
  {
    result = MEMORY[0x24951C158](&unk_2449D6B50, &type metadata for MainPreviewPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0BA8);
  }
  return result;
}

unint64_t sub_2449726C0()
{
  unint64_t result;

  result = qword_2573A0BB0;
  if (!qword_2573A0BB0)
  {
    result = MEMORY[0x24951C158](&unk_2449D6BF0, &type metadata for CFunctionBundle.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0BB0);
  }
  return result;
}

unint64_t sub_244972708()
{
  unint64_t result;

  result = qword_2573A0BB8;
  if (!qword_2573A0BB8)
  {
    result = MEMORY[0x24951C158](&unk_2449D6C90, &type metadata for CFunctionBundle.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0BB8);
  }
  return result;
}

unint64_t sub_244972750()
{
  unint64_t result;

  result = qword_2573A0BC0;
  if (!qword_2573A0BC0)
  {
    result = MEMORY[0x24951C158](&unk_2449D6D30, &type metadata for CFunctionPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0BC0);
  }
  return result;
}

unint64_t sub_244972798()
{
  unint64_t result;

  result = qword_2573A0BC8;
  if (!qword_2573A0BC8)
  {
    result = MEMORY[0x24951C158](&unk_2449D6DD0, &type metadata for StaticLayerHostPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0BC8);
  }
  return result;
}

unint64_t sub_2449727E0()
{
  unint64_t result;

  result = qword_2573A0BD0;
  if (!qword_2573A0BD0)
  {
    result = MEMORY[0x24951C158](&unk_2449D6E70, &type metadata for NSPreviewHostablePreviewReply.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0BD0);
  }
  return result;
}

unint64_t sub_244972828()
{
  unint64_t result;

  result = qword_2573A0BD8;
  if (!qword_2573A0BD8)
  {
    result = MEMORY[0x24951C158](&unk_2449D6F10, &type metadata for MacOSSnapshotPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0BD8);
  }
  return result;
}

unint64_t sub_24497286C()
{
  unint64_t result;

  result = qword_2573A0BE0;
  if (!qword_2573A0BE0)
  {
    result = MEMORY[0x24951C158](&unk_2449D67B8, &type metadata for PreviewSpecification.Value.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0BE0);
  }
  return result;
}

unint64_t sub_2449728B0()
{
  unint64_t result;

  result = qword_2573A0BE8;
  if (!qword_2573A0BE8)
  {
    result = MEMORY[0x24951C158](&unk_2449D6C18, &type metadata for CFunctionBundle.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0BE8);
  }
  return result;
}

uint64_t sub_2449728F4()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

unint64_t sub_244972938()
{
  unint64_t result;

  result = qword_2573A0BF0;
  if (!qword_2573A0BF0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for RegistryType, &type metadata for RegistryType);
    atomic_store(result, (unint64_t *)&qword_2573A0BF0);
  }
  return result;
}

uint64_t sub_24497297C(uint64_t a1)
{
  sub_244964F34(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_2449729C4()
{
  unint64_t result;

  result = qword_2573A0C08;
  if (!qword_2573A0C08)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewTraits.Orientation, &type metadata for PreviewTraits.Orientation);
    atomic_store(result, (unint64_t *)&qword_2573A0C08);
  }
  return result;
}

uint64_t sub_244972A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch();
}

uint64_t sub_244972A5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[5];
  v0[6] = *(_QWORD *)(v1 + 8);
  v0[7] = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  v2 = swift_task_alloc();
  v0[8] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[9] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE98);
  *v3 = v0;
  v3[1] = sub_244972B18;
  return sub_2449CFCF4();
}

uint64_t sub_244972B18()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244972B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = v2;
  *(_QWORD *)(v3 + 16) = sub_244977158;
  *(_QWORD *)(v3 + 24) = v4;
  *(_OWORD *)(v3 + 32) = xmmword_2449D72E0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244972BF8()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_244972C34(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2449CF76C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF754();
  sub_244976E80((uint64_t)v3);
  swift_bridgeObjectRetain();
  sub_244976E80((uint64_t)v3);
  swift_bridgeObjectRetain();
  v16 = sub_2449CF760();
  v17 = sub_2449CFAE4();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v33 = a1;
    v19 = v18;
    v29 = swift_slowAlloc();
    v36 = v29;
    *(_DWORD *)v19 = 136446466;
    v31 = v12;
    v32 = v8;
    v30 = v13;
    v21 = *v3;
    v20 = v3[1];
    swift_bridgeObjectRetain();
    v34 = sub_244950C54(v21, v20, &v36);
    sub_2449CFB38();
    swift_bridgeObjectRelease();
    sub_244976EC8((uint64_t)v3);
    sub_244976EC8((uint64_t)v3);
    *(_WORD *)(v19 + 12) = 2082;
    v34 = v33;
    v35 = a2;
    swift_bridgeObjectRetain();
    v22 = sub_2449CF874();
    v34 = sub_244950C54(v22, v23, &v36);
    v8 = v32;
    sub_2449CFB38();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_244921000, v16, v17, "%{public}s sending one-way message: %{public}s", (uint8_t *)v19, 0x16u);
    v24 = v29;
    swift_arrayDestroy();
    MEMORY[0x24951C224](v24, -1, -1);
    v25 = v19;
    a1 = v33;
    MEMORY[0x24951C224](v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
  }
  else
  {
    sub_244976EC8((uint64_t)v3);
    sub_244976EC8((uint64_t)v3);

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  v26 = (void (*)(char *, char *))v3[2];
  swift_retain();
  sub_244972F8C(a1, a2, (uint64_t)v11);
  v27 = type metadata accessor for TransportReply();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
  v26(v11, v8);
  swift_release();
  sub_244940E8C((uint64_t)v8, &qword_25739FD98);
  return sub_2449299E4((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
}

uint64_t sub_244972F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _BYTE v16[16];
  _QWORD v17[2];

  v7 = sub_2449CF400();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = a1;
  v15[1] = a2;
  sub_2449314A4(v3 + 32, (uint64_t)v16, &qword_25739F178);
  v11 = sub_2449314A4((uint64_t)v16, (uint64_t)v17, &qword_25739F178);
  if (v17[1])
  {
    MEMORY[0x24BDAC7A8](v11);
    v15[-4] = v13;
    v15[-3] = v12;
    v15[-2] = v15;
    sub_2449CF3E8();
  }
  else
  {
    sub_2449CF658();
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a3, v10, v7);
  type metadata accessor for LazyPropertyList();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_2449730F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2449CF76C();
  v36 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF754();
  sub_244976E80((uint64_t)v4);
  swift_bridgeObjectRetain();
  sub_244976E80((uint64_t)v4);
  swift_bridgeObjectRetain();
  v17 = sub_2449CF760();
  v18 = sub_2449CFAE4();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v35 = a1;
    v20 = v19;
    v31 = swift_slowAlloc();
    v39 = v31;
    *(_DWORD *)v20 = 136446466;
    v33 = a3;
    v34 = v13;
    v32 = v14;
    v22 = *v4;
    v21 = v4[1];
    swift_bridgeObjectRetain();
    v37 = sub_244950C54(v22, v21, &v39);
    sub_2449CFB38();
    swift_bridgeObjectRelease();
    sub_244976EC8((uint64_t)v4);
    sub_244976EC8((uint64_t)v4);
    *(_WORD *)(v20 + 12) = 2082;
    v37 = v35;
    v38 = a2;
    swift_bridgeObjectRetain();
    v23 = sub_2449CF874();
    v37 = sub_244950C54(v23, v24, &v39);
    a3 = v33;
    sub_2449CFB38();
    swift_bridgeObjectRelease_n();
    v13 = v34;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_244921000, v17, v18, "%{public}s sending two-way message: %{public}s", (uint8_t *)v20, 0x16u);
    v25 = v31;
    swift_arrayDestroy();
    MEMORY[0x24951C224](v25, -1, -1);
    v26 = v20;
    a1 = v35;
    MEMORY[0x24951C224](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v32);
  }
  else
  {
    sub_244976EC8((uint64_t)v4);
    sub_244976EC8((uint64_t)v4);

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v14);
  }
  v27 = (void (*)(char *, char *))v4[2];
  swift_retain();
  sub_244972F8C(a1, a2, (uint64_t)v13);
  sub_24493DCE8(a3, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  v28 = type metadata accessor for TransportReply();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 0, 1, v28);
  v27(v13, v10);
  swift_release();
  sub_244940E8C((uint64_t)v10, &qword_25739FD98);
  return sub_2449299E4((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
}

uint64_t sub_244973478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v26[3];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v32 = a8;
  v30 = a6;
  v31 = a7;
  v28 = a4;
  v29 = a5;
  v27 = a3;
  v26[1] = a1;
  v26[2] = a2;
  v39 = a9;
  v34 = a10;
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v36 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_2449CF634();
  v12 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D80);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](v15);
  v18 = sub_2449CF724();
  MEMORY[0x24BDAC7A8](v18);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D98);
  v35 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF730();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a10, v15);
  v22 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v23 + v22, (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BE768C0], v33);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D78);
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  sub_2449CF2EC();
  type metadata accessor for LazyPropertyList();
  v24 = v36;
  sub_2449CF304();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v39, v24, v38);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v34, v15);
}

uint64_t sub_244973774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DD8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24495D8E4(a1, (uint64_t)v6, &qword_2573A0DD8);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DE0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    sub_2449314A4((uint64_t)v6, a2, &qword_2573A0DE0);
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, v7);
}

uint64_t sub_244973858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)(uint64_t, uint64_t);
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t (**v46)();
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  __int128 v61[2];
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;

  v47 = type metadata accessor for AsyncMessageStream.Event(0);
  MEMORY[0x24BDAC7A8](v47);
  v46 = (uint64_t (**)())((char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE80);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v48 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E18);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = v6;
  v9 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v56 = a2;
  v57 = v11;
  v12 = type metadata accessor for AsyncMessageStream(0);
  v63 = v12;
  v59 = v12;
  v13 = sub_24493DED4(&qword_25739EEA0, type metadata accessor for AsyncMessageStream, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  v64 = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v62);
  sub_24493DCE8(a2, (uint64_t)boxed_opaque_existential_1, type metadata accessor for AsyncMessageStream);
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v54(v10, a1, v8);
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = ((v15 + 16) & ~v15) + v9;
  v17 = (v15 + 16) & ~v15;
  v60 = v17;
  v53 = v15 | 7;
  v18 = swift_allocObject();
  v19 = v18 + v17;
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v20(v19, v10, v8);
  v58 = v20;
  sub_24495141C((uint64_t)v62, (uint64_t)v61);
  v21 = swift_allocObject();
  v55 = v21;
  *(_QWORD *)(v21 + 16) = sub_2449772BC;
  *(_QWORD *)(v21 + 24) = v18;
  sub_244951464(v61, v21 + 32);
  v22 = v57;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  v63 = v12;
  v64 = v13;
  v23 = __swift_allocate_boxed_opaque_existential_1(v62);
  sub_24493DCE8(v56, (uint64_t)v23, type metadata accessor for AsyncMessageStream);
  v51 = v10;
  v24 = a1;
  v44 = a1;
  v25 = a1;
  v52 = v8;
  v26 = v54;
  v54(v10, v25, v8);
  v43[1] = v16;
  v27 = swift_allocObject();
  v20(v27 + v60, v10, v8);
  sub_24495141C((uint64_t)v62, (uint64_t)v61);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = sub_2449772BC;
  *(_QWORD *)(v28 + 24) = v27;
  sub_244951464(v61, v28 + 32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  v29 = (uint64_t (*)(uint64_t, uint64_t))swift_allocObject();
  *((_QWORD *)v29 + 2) = v45;
  *((_QWORD *)v29 + 3) = v22;
  v30 = v55;
  *((_QWORD *)v29 + 4) = sub_2449772D4;
  *((_QWORD *)v29 + 5) = v30;
  *((_QWORD *)v29 + 6) = sub_244977368;
  *((_QWORD *)v29 + 7) = v28;
  v31 = v51;
  v32 = v24;
  v33 = v52;
  v26(v51, v32, v52);
  v34 = swift_allocObject();
  v58(v34 + v60, v31, v33);
  v35 = (uint64_t (**)(uint64_t, uint64_t))v46;
  *v46 = sub_2449773CC;
  v35[1] = (uint64_t (*)(uint64_t, uint64_t))v34;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  v36 = v48;
  sub_2449CFA24();
  v37 = *(void (**)(char *, uint64_t))(v49 + 8);
  v38 = v50;
  v37(v36, v50);
  *v35 = sub_2449773B8;
  v35[1] = v29;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  sub_2449CFA24();
  v37(v36, v38);
  swift_release();
  swift_release();
  v39 = v51;
  v40 = v52;
  v54(v51, v44, v52);
  v41 = swift_allocObject();
  v58(v41 + v60, v39, v40);
  sub_24493DED4(&qword_25739EEC0, type metadata accessor for AsyncMessageStream, (uint64_t)&protocol conformance descriptor for AsyncMessageStream);
  sub_2449CF64C();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244973D74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DE0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DD8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E20);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24495D8E4(a1, (uint64_t)v9, &qword_2573A0DE0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E18);
  sub_2449CFA24();
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  LODWORD(v3) = *MEMORY[0x24BEE69D0];
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((_DWORD)v4 == (_DWORD)v3)
  {
    sub_24495D8E4(a1, (uint64_t)v6, &qword_2573A0DE0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E28);
    sub_2449320D0(qword_2573A0E30, &qword_2573A0E28, (uint64_t)&unk_2449D4250);
    swift_allocError();
    sub_2449314A4((uint64_t)v6, v15, &qword_2573A0DE0);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_244973F64()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DD8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E20);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DE0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E18);
  sub_2449CFA24();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_24497405C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = sub_2449CF400();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v25[-1] - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v25[-1] - v12;
  result = swift_conformsToProtocol2();
  if (result)
  {
    v15 = result;
    result = LazyPropertyList.propertyList.getter((uint64_t)v13);
    if (!v2)
    {
      v24 = v5;
      v29 = v4;
      v17 = a2[3];
      v16 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v17);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 40))(v17, v16);
      if (v19)
      {
        v20 = v18;
        v21 = v19;
        v22 = v24;
        v23 = v29;
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v11, v13, v29);
        v26 = MEMORY[0x24BEE0D00];
        v27 = v15;
        __swift_allocate_boxed_opaque_existential_1(v25);
        sub_24494FD40(v20, v21, (uint64_t)v11);
      }
      else
      {
        v22 = v24;
        v23 = v29;
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v8, v13, v29);
        v26 = MEMORY[0x24BEE0D00];
        v27 = v15;
        __swift_allocate_boxed_opaque_existential_1(v25);
        sub_2449CF664();
      }
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v23);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739FEA8);
      swift_dynamicCast();
      return v28;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24497428C(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = sub_2449CF76C();
  MEMORY[0x24BDAC7A8](v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DE0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = sub_24497405C(a1, a4);
  v10[1] = v11;
  swift_storeEnumTagMultiPayload();
  a2(v10);
  return sub_244940E8C((uint64_t)v10, &qword_2573A0DE0);
}

uint64_t sub_244974500(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(uint64_t *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v21 = a3;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v24);
  v8 = sub_2449CF724();
  MEMORY[0x24BDAC7A8](v8);
  v25 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2449CF76C();
  v22 = *(_QWORD *)(v10 - 8);
  v23 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v26 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DE0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_24497405C(a1, a5);
  v17 = v16;
  v18 = (uint64_t)v14 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E10) + 48);
  *v14 = v15;
  v14[1] = v17;
  sub_24493DCE8(a2, v18, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  swift_storeEnumTagMultiPayload();
  v21(v14);
  return sub_244940E8C((uint64_t)v14, &qword_2573A0DE0);
}

uint64_t sub_2449748BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v25[3];
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v25[1] = a3;
  v29 = a6;
  v30 = a7;
  v28 = a5;
  v25[2] = a4;
  v27 = a9;
  v26 = a10;
  v31 = sub_2449CF400();
  v12 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v33);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_2449CF724();
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1;
  v36 = a2;
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 16))(v22, v25[0], v19);
  sub_2449CF730();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D78);
  sub_2449320D0(&qword_2573A0DA0, &qword_2573A0D78, (uint64_t)&unk_2449E0084);
  sub_2449CF658();
  v23 = v31;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v14, v31);
  type metadata accessor for LazyPropertyList();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v23);
  swift_storeEnumTagMultiPayload();
  sub_2449CF2E0();
  sub_244940E8C((uint64_t)v16, &qword_25739FDA0);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
}

void static MessageStreamInstanceIdentifier.sampleMessageStream.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x80000002449E4070;
}

uint64_t SampleStreamAgent.__allocating_init(messageStream:description:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  SampleStreamAgent.init(messageStream:description:offset:)(a1, a2, a3, a4);
  return v8;
}

uint64_t SampleStreamAgent.init(messageStream:description:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v25 = a3;
  v26 = type metadata accessor for MessageStream(0);
  v8 = *(_QWORD *)(v26 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v26);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F270);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2449D72F0;
  *(_QWORD *)(v14 + 32) = 0x7379656B6E6F6DLL;
  *(_QWORD *)(v14 + 40) = 0xE700000000000000;
  *(_QWORD *)(v14 + 48) = 0x73746F626F72;
  *(_QWORD *)(v14 + 56) = 0xE600000000000000;
  *(_QWORD *)(v14 + 64) = 0x73646E65697266;
  *(_QWORD *)(v14 + 72) = 0xE700000000000000;
  *(_QWORD *)(v14 + 80) = 0x736F70706968;
  *(_QWORD *)(v14 + 88) = 0xE600000000000000;
  *(_QWORD *)(v14 + 96) = 0x736C6573616577;
  *(_QWORD *)(v14 + 104) = 0xE700000000000000;
  *(_QWORD *)(v14 + 112) = 0x73746962626172;
  *(_QWORD *)(v14 + 120) = 0xE700000000000000;
  v15 = OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_messages;
  *(_QWORD *)(v14 + 128) = 0x7365666661726967;
  *(_QWORD *)(v14 + 136) = 0xE800000000000000;
  *(_QWORD *)(v4 + v15) = v14;
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2449D7300;
  *(_QWORD *)(v16 + 32) = 0x68636977646E6173;
  *(_QWORD *)(v16 + 40) = 0xEA00000000007365;
  *(_QWORD *)(v16 + 48) = 0x657365656863;
  *(_QWORD *)(v16 + 56) = 0xE600000000000000;
  *(_QWORD *)(v16 + 64) = 0x736B63616E73;
  *(_QWORD *)(v16 + 72) = 0xE600000000000000;
  *(_QWORD *)(v16 + 80) = 0x7370696E727574;
  *(_QWORD *)(v16 + 88) = 0xE700000000000000;
  *(_QWORD *)(v16 + 96) = 0x7365696B6F6F63;
  *(_QWORD *)(v16 + 104) = 0xE700000000000000;
  v17 = OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_replies;
  *(_QWORD *)(v16 + 112) = 0x6968636174736970;
  *(_QWORD *)(v16 + 120) = 0xEA0000000000736FLL;
  *(_QWORD *)(v4 + v17) = v16;
  sub_24493DCE8(a1, v4 + OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_messageStream, type metadata accessor for MessageStream);
  v18 = (_QWORD *)(v4 + OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_description);
  v19 = v25;
  *v18 = a2;
  v18[1] = v19;
  sub_244974FBC(1953066601, 0xE400000000000000);
  swift_retain();
  sub_2449761A4((uint64_t)sub_2449755B4, v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0C60);
  v20 = sub_2449CF9F4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 1, 1, v20);
  sub_24493DCE8(a1, (uint64_t)v10, type metadata accessor for MessageStream);
  v21 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v22 = swift_allocObject();
  sub_24493DD84((uint64_t)v10, v22 + v21, type metadata accessor for MessageStream);
  sub_2449CF700();
  swift_release();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v4;
  *(double *)(v23 + 24) = a4;
  swift_retain();
  sub_2449CF6E8();
  swift_release();
  sub_24493DED4(&qword_2573A0C78, type metadata accessor for MessageStream, (uint64_t)&protocol conformance descriptor for MessageStream);
  swift_retain();
  sub_2449CF40C();
  swift_release();
  swift_release();
  sub_2449299E4(a1, type metadata accessor for MessageStream);
  return v4;
}

uint64_t sub_244974FBC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = sub_2449CF76C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2449CF748();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v10 = sub_2449CF760();
  v11 = sub_2449CFAFC();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v19 = a1;
    v13 = v12;
    v14 = swift_slowAlloc();
    v23 = v14;
    *(_DWORD *)v13 = 136315394;
    v20 = v7;
    v21 = v6;
    v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_description);
    v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_description + 8);
    swift_bridgeObjectRetain();
    v22 = sub_244950C54(v16, v15, &v23);
    sub_2449CFB38();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    v22 = sub_244950C54(v19, a2, &v23);
    sub_2449CFB38();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_244921000, v10, v11, "StreamAgent[%s]: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24951C224](v14, -1, -1);
    MEMORY[0x24951C224](v13, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v21);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

unint64_t sub_2449751FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];

  v26 = a3;
  v5 = sub_2449CF0DC();
  v25 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DF8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MessageStream.Responder(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  sub_24495D8E4(a2, (uint64_t)v10, &qword_2573A0DF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_244940E8C((uint64_t)v10, &qword_2573A0DF8);
    v27[0] = 0;
    v27[1] = 0xE000000000000000;
    sub_2449CFB98();
    swift_bridgeObjectRelease();
    v27[0] = 0xD000000000000015;
    v27[1] = 0x80000002449E4220;
    sub_2449CF898();
    sub_2449CF898();
    sub_244974FBC(v27[0], v27[1]);
    return swift_bridgeObjectRelease();
  }
  v24[1] = v15;
  result = sub_24493DD84((uint64_t)v10, (uint64_t)v14, type metadata accessor for MessageStream.Responder);
  v17 = *(_QWORD *)(v26 + OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_replies);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    result = sub_244976D3C(v18);
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(_QWORD *)(v17 + 16))
    {
      v19 = v17 + 16 * result;
      v20 = *(_QWORD *)(v19 + 32);
      v21 = *(_QWORD *)(v19 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v27[0] = 45;
      v27[1] = 0xE100000000000000;
      sub_2449CF0D0();
      sub_24493DED4(&qword_2573A0D70, (uint64_t (*)(uint64_t))MEMORY[0x24BE761F8], MEMORY[0x24BE76218]);
      sub_2449CFC88();
      sub_2449CF898();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
      v27[0] = v20;
      v27[1] = v21;
      swift_bridgeObjectRetain();
      sub_2449CF898();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = v27[0];
      v22 = v27[1];
      v27[0] = 0;
      v27[1] = 0xE000000000000000;
      sub_2449CFB98();
      swift_bridgeObjectRelease();
      strcpy((char *)v27, "got message '");
      HIWORD(v27[1]) = -4864;
      sub_2449CF898();
      sub_2449CF898();
      sub_2449CF898();
      sub_2449CF898();
      sub_244974FBC(v27[0], v27[1]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_2449748BC(v23, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsMessaging/Sources/PreviewsMessaging/MessageStream.swift", 123, 2, 138, 32, (uint64_t)"reply(payload:)", 15, 2u);
      swift_bridgeObjectRelease();
      sub_2449299E4((uint64_t)v14, type metadata accessor for MessageStream.Responder);
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_2449755B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2449751FC(a1, a2, v2);
}

uint64_t sub_2449755BC(uint64_t *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = a1[5];
  v7 = *(_OWORD *)(a1 + 3);
  v5 = *a1;
  sub_244974FBC(0x646E657320746F67, 0xEA00000000007265);
  v8 = v5;
  v9 = *(_OWORD *)(a1 + 1);
  v10 = v7;
  v11 = v4;
  return sub_244975648((__int128 *)&v8, a2);
}

uint64_t sub_244975648(__int128 *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  void *v22;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = sub_2449CF778();
  v27 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2449CF790();
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2449CF7A8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  v17 = a1[1];
  v29 = *a1;
  v30 = v17;
  v31 = a1[2];
  sub_244976730();
  v18 = (void *)sub_2449CFB20();
  sub_2449CF79C();
  MEMORY[0x24951B708](v14, a2);
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v14, v10);
  v19 = swift_allocObject();
  swift_weakInit();
  v20 = swift_allocObject();
  v21 = v30;
  *(_OWORD *)(v20 + 24) = v29;
  *(_QWORD *)(v20 + 16) = v19;
  *(_OWORD *)(v20 + 40) = v21;
  *(_OWORD *)(v20 + 56) = v31;
  aBlock[4] = sub_2449767CC;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2449760A4;
  aBlock[3] = &block_descriptor;
  v22 = _Block_copy(aBlock);
  sub_244976E80((uint64_t)&v29);
  swift_release();
  sub_2449CF784();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  sub_24493DED4(&qword_2573A0D50, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D58);
  sub_2449320D0(&qword_2573A0D60, &qword_2573A0D58, MEMORY[0x24BEE12C8]);
  sub_2449CFB68();
  MEMORY[0x24951BA68](v16, v9, v6, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  return ((uint64_t (*)(char *, uint64_t))v24)(v16, v10);
}

uint64_t SampleStreamAgent.deinit()
{
  uint64_t v0;

  sub_244974FBC(0x74696E696564, 0xE600000000000000);
  sub_2449299E4(v0 + OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_messageStream, type metadata accessor for MessageStream);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SampleStreamAgent.__deallocating_deinit()
{
  uint64_t v0;

  sub_244974FBC(0x74696E696564, 0xE600000000000000);
  sub_2449299E4(v0 + OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_messageStream, type metadata accessor for MessageStream);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_244975A28(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    v3 = a2[1];
    v6 = *a2;
    v7 = v3;
    v8 = a2[2];
    sub_244975AE4((uint64_t *)&v6);
    swift_release();
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = a2[1];
    v6 = *a2;
    v7 = v5;
    v8 = a2[2];
    sub_244975648(&v6, 20.0);
    return swift_release();
  }
  return result;
}

unint64_t sub_244975AE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  MEMORY[0x24BDAC7A8](v3);
  v49 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TransportReply();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D68);
  v8 = MEMORY[0x24BDAC7A8](v48);
  v47 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (uint64_t *)((char *)&v44 - v10);
  v11 = sub_2449CF0DC();
  v12 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v1;
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19PreviewsMessagingOS17SampleStreamAgent_messages);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    goto LABEL_10;
  v18 = a1[1];
  v20 = a1[2];
  v19 = a1[3];
  v51 = *a1;
  v52 = v19;
  v22 = a1[4];
  v21 = a1[5];
  swift_bridgeObjectRetain();
  result = sub_244976D3C(v17);
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (result >= *(_QWORD *)(v16 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v50 = v20;
  v45 = v7;
  v23 = v16 + 16 * result;
  v24 = *(_QWORD *)(v23 + 32);
  v25 = *(_QWORD *)(v23 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = 45;
  v55 = 0xE100000000000000;
  sub_2449CF0D0();
  sub_24493DED4(&qword_2573A0D70, (uint64_t (*)(uint64_t))MEMORY[0x24BE761F8], MEMORY[0x24BE76218]);
  sub_2449CFC88();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v54 = v24;
  v55 = v25;
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v54;
  v26 = v55;
  v54 = 0;
  MEMORY[0x24951C230](&v54, 8);
  if ((v54 & 0x20000) != 0)
  {
    v54 = 0;
    v55 = 0xE000000000000000;
    sub_2449CFB98();
    swift_bridgeObjectRelease();
    v54 = 0xD000000000000011;
    v55 = 0x80000002449E41C0;
    sub_2449CF898();
    sub_2449CF898();
    sub_244974FBC(v54, v55);
    swift_bridgeObjectRelease();
    v54 = v51;
    v55 = v18;
    v56 = v50;
    v57 = v52;
    v58 = v22;
    v59 = v21;
    v51 = v26;
    v28 = v48;
    v29 = v46;
    v30 = (char *)v46 + *(int *)(v48 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D78);
    *v29 = sub_2449CFA90();
    v31 = (uint64_t *)v47;
    v32 = v27;
    v33 = &v47[*(int *)(v28 + 48)];
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D80);
    v50 = v18;
    v35 = *(_QWORD *)(v34 - 8);
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v33, v30, v34);
    v43 = (uint64_t)v33;
    v36 = (uint64_t)v45;
    sub_244973478((uint64_t)"/Library/Caches/com.apple.xbs/Sources/UITestingAgent/Shared/PreviewsMessaging/Sources/PreviewsMessaging/Transport+Interface.swift", 129, 2, 138, 34, (uint64_t)"send(message:expecting:)", 24, 2, (uint64_t)v45, v43);
    sub_2449730F8(v32, v51, v36);
    sub_2449299E4(v36, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
    v37 = (char *)v31 + *(int *)(v28 + 48);
    v38 = *v29;
    *v31 = *v29;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v30, v34);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v39 = sub_2449CF9F4();
    v40 = (uint64_t)v49;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v49, 1, 1, v39);
    v41 = (_QWORD *)swift_allocObject();
    v41[2] = 0;
    v41[3] = 0;
    v42 = v53;
    v41[4] = sub_244976DC4;
    v41[5] = v42;
    v41[6] = v38;
    swift_retain();
    sub_2449BD140(v40, (uint64_t)&unk_2573A0D90, (uint64_t)v41);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    v54 = 0;
    v55 = 0xE000000000000000;
    sub_2449CFB98();
    swift_bridgeObjectRelease();
    v54 = 0xD000000000000019;
    v55 = 0x80000002449E41E0;
    sub_2449CF898();
    sub_2449CF898();
    sub_244974FBC(v54, v55);
    swift_bridgeObjectRelease();
    v54 = v51;
    v55 = v18;
    v56 = v50;
    v57 = v52;
    v58 = v22;
    v59 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_244972C34(v27, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2449760A4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_2449760D0()
{
  sub_2449CFB98();
  sub_2449CF898();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DB0);
  sub_2449CFBE0();
  sub_2449CF898();
  sub_244974FBC(0, 0xE000000000000000);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449761A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a1;
  v31 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F578);
  MEMORY[0x24BDAC7A8](v3);
  v29 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DC8);
  v27 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DD0);
  v12 = *(_QWORD *)(v28 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x24BDAC7A8](v28);
  v15 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - v16;
  v32 = v2 + *(int *)(type metadata accessor for MessageStream(0) + 20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DD8);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE6A10], v5);
  sub_2449CFA84();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DE0);
  sub_2449CFA54();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  v18 = sub_2449CF9F4();
  v19 = (uint64_t)v29;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v29, 1, 1, v18);
  v20 = v28;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v28);
  v21 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v22 + v21, v15, v20);
  v23 = (_QWORD *)(v22 + ((v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8));
  v24 = v31;
  *v23 = v30;
  v23[1] = v24;
  swift_retain();
  sub_2449BD140(v19, (uint64_t)&unk_2573A0DF0, v22);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v20);
}

uint64_t sub_244976458(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  *(_QWORD *)(v1 + 64) = a1;
  type metadata accessor for MessageStream(0);
  v4 = (uint64_t (*)(uint64_t))((char *)&dword_2573A0DB8 + dword_2573A0DB8);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 72) = v2;
  *v2 = v1;
  v2[1] = sub_2449287C4;
  return v4(v1 + 16);
}

uint64_t sub_2449764D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MessageStream(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  swift_release();
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for AsyncMessageStream(0) + 24);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739EE88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244976598(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  type metadata accessor for MessageStream(0);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_244933754;
  return sub_244976458(a1);
}

uint64_t sub_244976608()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24497662C(uint64_t *a1)
{
  uint64_t v1;

  return sub_2449755BC(a1, *(double *)(v1 + 24));
}

uint64_t sub_244976638()
{
  return sub_244974FBC(0xD00000000000001BLL, 0x80000002449E4190);
}

uint64_t sub_244976654()
{
  return type metadata accessor for SampleStreamAgent();
}

uint64_t type metadata accessor for SampleStreamAgent()
{
  uint64_t result;

  result = qword_2573A0CA8;
  if (!qword_2573A0CA8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_244976698()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MessageStream(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SampleStreamAgent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SampleStreamAgent.__allocating_init(messageStream:description:offset:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t sub_244976730()
{
  unint64_t result;

  result = qword_2573A0D48;
  if (!qword_2573A0D48)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2573A0D48);
  }
  return result;
}

uint64_t sub_24497676C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_244976790()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2449767CC()
{
  uint64_t v0;

  return sub_244975A28(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_2449767F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  type metadata accessor for TransportReply();
  v6[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DF8);
  v6[10] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DE0);
  v6[11] = v7;
  v6[12] = *(_QWORD *)(v7 - 8);
  v6[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E00);
  v6[14] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E08);
  v6[15] = v8;
  v6[16] = *(_QWORD *)(v8 - 8);
  v6[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2449768EC()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DD0);
  sub_2449CFA48();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = sub_244976964;
  return sub_2449CFA60();
}

uint64_t sub_244976964()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2449769B8()
{
  uint64_t v0;
  uint64_t v1;
  int EnumCaseMultiPayload;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 48))(v1, 1, *(_QWORD *)(v0 + 88)) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_2449314A4(v1, *(_QWORD *)(v0 + 104), &qword_2573A0DE0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v4 = *(uint64_t **)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 80);
    if (EnumCaseMultiPayload == 1)
    {
      v6 = *(_QWORD *)(v0 + 72);
      v7 = *(void (**)(uint64_t, uint64_t))(v0 + 56);
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E10) + 48);
      v9 = *v4;
      *(_QWORD *)(v0 + 24) = v4[1];
      *(_QWORD *)(v0 + 16) = v9;
      sub_24493DD84((uint64_t)v4 + v8, v6, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
      sub_24493DCE8(v6, v5, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
      v10 = type metadata accessor for MessageStream.Responder(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
      v7(v0 + 16, v5);
      sub_244940E8C(v5, &qword_2573A0DF8);
      sub_2449299E4(v6, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
    }
    else
    {
      v11 = *v4;
      *(_QWORD *)(v0 + 40) = v4[1];
      v12 = *(void (**)(uint64_t, uint64_t))(v0 + 56);
      *(_QWORD *)(v0 + 32) = v11;
      v13 = type metadata accessor for MessageStream.Responder(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
      v12(v0 + 32, v5);
      sub_244940E8C(v5, &qword_2573A0DF8);
    }
    swift_bridgeObjectRelease();
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v14;
    *v14 = v0;
    v14[1] = sub_244976964;
    return sub_2449CFA60();
  }
}

uint64_t sub_244976BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[8] = a4;
  v5[9] = a5;
  v6 = (_QWORD *)swift_task_alloc();
  v5[10] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D78);
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  *v6 = v5;
  v6[1] = sub_244976C80;
  return sub_2449CFAB4();
}

uint64_t sub_244976C80()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_244976CD4()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = *(void (**)(uint64_t))(v0 + 64);
  v2 = *(void **)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_BYTE *)(v0 + 56);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v5;
  *(_BYTE *)(v0 + 32) = v4;
  v1(v0 + 16);
  sub_244976F48(v2, v3, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_244976D3C(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x24951C230](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x24951C230](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_244976DC4()
{
  return sub_2449760D0();
}

uint64_t sub_244976DCC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244976E00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_2449382FC;
  return sub_244976BEC(a1, v4, v5, v6, v7);
}

uint64_t sub_244976E80(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_244976EC8(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_244976F10(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v2[2];
  v4 = v2[3];
  v5 = (uint64_t *)v2[4];
  v7 = *v5;
  v6 = v5[1];
  *a2 = v7;
  a2[1] = v6;
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_244976F48(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t sub_244976F58()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D80);
  sub_2449320D0(&qword_2573A0DA8, &qword_2573A0D80, MEMORY[0x24BE76D88]);
  return sub_2449CF460();
}

uint64_t sub_244976FF8()
{
  return objectdestroyTm_0(&qword_2573A0D80);
}

uint64_t sub_244977004()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D80);
  return sub_244976F58();
}

uint64_t sub_244977054@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  v3 = sub_2449CF400();
  MEMORY[0x24BDAC7A8](v3);
  result = LazyPropertyList.propertyList.getter((uint64_t)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0D78);
    sub_2449320D0(&qword_2573A0DA0, &qword_2573A0D78, (uint64_t)&unk_2449E0084);
    result = sub_2449CF664();
    v6 = v7[1];
    *a1 = v7[0];
    a1[1] = v6;
  }
  return result;
}

uint64_t sub_244977134()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244977158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_244928500(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_244977160(uint64_t a1)
{
  uint64_t v1;

  return sub_244973858(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_244977168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DD0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244977200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A0DD0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_244933754;
  return sub_2449767F0(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_2449772B0()
{
  return objectdestroyTm_0(&qword_2573A0E18);
}

uint64_t sub_2449772BC(uint64_t a1)
{
  return sub_2449772EC(a1);
}

uint64_t sub_2449772D4(uint64_t a1)
{
  uint64_t v1;

  return sub_24497428C(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), (_QWORD *)(v1 + 32));
}

uint64_t sub_2449772E0()
{
  return objectdestroyTm_0(&qword_2573A0E18);
}

uint64_t sub_2449772EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E18) - 8) + 80);
  return sub_244973D74(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t objectdestroy_35Tm()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_244977368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_244974500(a1, a2, *(void (**)(uint64_t *))(v2 + 16), *(_QWORD *)(v2 + 24), (_QWORD *)(v2 + 32));
}

uint64_t sub_244977374()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_2449773B8(uint64_t a1, uint64_t a2)
{
  return sub_24494F1D8(a1, a2);
}

uint64_t sub_2449773C0()
{
  return objectdestroyTm_0(&qword_2573A0E18);
}

uint64_t sub_2449773CC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E18);
  return sub_244973F64();
}

uint64_t sub_2449773FC()
{
  return objectdestroyTm_0(&qword_2573A0E18);
}

uint64_t sub_244977408()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0E18);
  return sub_2449CFA30();
}

uint64_t sub_244977444()
{
  return swift_initClassMetadata2();
}

uint64_t sub_2449774A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_2449CF4D8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 80) || *(_QWORD *)(a2 + 80))
  {
    sub_2449CF4E4();
    v8 = *(_QWORD *)(a1 + 16);
    swift_getObjectType();
    v13 = v8;
    swift_unknownObjectRetain();
    sub_2449CF4CC();
    sub_2449CF484();
    v9 = *(void (**)(char *, uint64_t))(v5 + 8);
    v9(v7, v4);
    swift_unknownObjectRelease();
    v10 = *(_QWORD *)(a2 + 16);
    swift_getObjectType();
    v13 = v10;
    swift_unknownObjectRetain();
    sub_2449CF4CC();
    sub_2449CF484();
    v9(v7, v4);
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_244977970(a2);
    return sub_244977970(a1);
  }
}

_QWORD *sub_244977694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[9] = a8;
  result[10] = 0;
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  result[8] = a7;
  return result;
}

uint64_t sub_244977710(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v4)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v1 + 80);
  if (!v2)
    return sub_2449CF4E4();
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 48);
  swift_retain();
  swift_retain();
  v4(a1, v2);
  swift_release();
  return swift_release();
}

_QWORD *sub_2449777CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[9] = a8;
  v8[10] = 0;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v8[6] = a5;
  v8[7] = a6;
  v8[8] = a7;
  return v8;
}

uint64_t sub_2449777E8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    sub_2449CF898();
    sub_2449CF898();
  }
  sub_2449CF898();
  swift_bridgeObjectRelease();
  sub_2449CF898();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0EB8);
  sub_2449CFBE0();
  sub_2449CF898();
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x6E6F6974636E754ALL;
}

unint64_t sub_24497792C()
{
  return 0xD000000000000052;
}

uint64_t sub_244977948()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = 0;
  return swift_release();
}

unint64_t sub_244977954()
{
  return 0xD000000000000035;
}

uint64_t sub_244977970(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 80) = a1;
  swift_release();
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 64);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  swift_retain();
  v3(v4, v5, v1);
  swift_getObjectType();
  swift_unknownObjectRetain();
  swift_retain();
  sub_2449CF61C();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_244977A28()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_244977A64()
{
  sub_244977A28();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Junction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Junction);
}

uint64_t sub_244977A90()
{
  return sub_2449777E8();
}

uint64_t ServiceMessage.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ServiceMessage.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ServiceMessage.identifier.modify())()
{
  return nullsub_1;
}

uint64_t ServiceMessage.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ServiceMessage(0) + 20);
  return sub_244977B64(v3, a1);
}

uint64_t type metadata accessor for ServiceMessage(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A10D8);
}

uint64_t sub_244977B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ServiceMessage.Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ServiceMessage.Content(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A1180);
}

uint64_t ServiceMessage.content.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ServiceMessage(0) + 20);
  return sub_244977BEC(a1, v3);
}

uint64_t sub_244977BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ServiceMessage.Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ServiceMessage.content.modify())()
{
  type metadata accessor for ServiceMessage(0);
  return nullsub_1;
}

uint64_t ServiceMessage.description.getter()
{
  sub_2449CFB98();
  sub_2449CF898();
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  sub_2449CF898();
  ServiceMessage.messageType.getter();
  sub_2449CFBE0();
  sub_2449CF898();
  return 0;
}

void ServiceMessage.messageType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for ServiceMessage.Content(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ServiceMessage(0);
  sub_244977B64(v0 + *(int *)(v4 + 20), (uint64_t)v3);
  v5 = (char *)sub_244977DDC + 4 * byte_2449D7480[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_244977DDC()
{
  uint64_t v0;

  sub_2449299E4(v0, type metadata accessor for ServiceMessage.Content);
  return 3;
}

void ServiceMessage.payload.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t updated;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[12];
  uint64_t v12;
  uint64_t v13;

  v13 = a1;
  updated = type metadata accessor for ShellUpdatePayload();
  MEMORY[0x24BDAC7A8](updated);
  v3 = type metadata accessor for ForwardPayload(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_2449CF400();
  v11[11] = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for ServiceMessage.Content(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(int *)(type metadata accessor for ServiceMessage(0) + 20);
  v12 = v1;
  sub_244977B64(v1 + v9, (uint64_t)v8);
  v10 = (char *)sub_24497801C + 4 * byte_2449D748C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_24497801C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int128 v3;

  v2 = *(_BYTE *)(v0 + 32);
  v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 - 224) = *(_OWORD *)v0;
  *(_OWORD *)(v1 - 208) = v3;
  *(_BYTE *)(v1 - 192) = v2;
  sub_244978574();
  sub_2449CF658();
  *(_OWORD *)(v1 - 112) = *(_OWORD *)*(_QWORD *)(v1 - 240);
  *(_QWORD *)(v1 - 200) = &type metadata for ServiceMessage.PayloadKey;
  *(_QWORD *)(v1 - 192) = sub_2449784A8();
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1(v1 - 224);
}

uint64_t type metadata accessor for ForwardPayload(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A1210);
}

unint64_t sub_244978464()
{
  unint64_t result;

  result = qword_2573A0EC8;
  if (!qword_2573A0EC8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for RequestContentOverridePayload, &type metadata for RequestContentOverridePayload);
    atomic_store(result, (unint64_t *)&qword_2573A0EC8);
  }
  return result;
}

unint64_t sub_2449784A8()
{
  unint64_t result;

  result = qword_2573A0ED0;
  if (!qword_2573A0ED0)
  {
    result = MEMORY[0x24951C158](&unk_2449D93BC, &type metadata for ServiceMessage.PayloadKey);
    atomic_store(result, (unint64_t *)&qword_2573A0ED0);
  }
  return result;
}

unint64_t sub_2449784EC()
{
  unint64_t result;

  result = qword_2573A0ED8;
  if (!qword_2573A0ED8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for RequestPreviewVariantsPayload, &type metadata for RequestPreviewVariantsPayload);
    atomic_store(result, (unint64_t *)&qword_2573A0ED8);
  }
  return result;
}

unint64_t sub_244978530()
{
  unint64_t result;

  result = qword_2573A0EE0;
  if (!qword_2573A0EE0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PurgePayload, &type metadata for PurgePayload);
    atomic_store(result, (unint64_t *)&qword_2573A0EE0);
  }
  return result;
}

unint64_t sub_244978574()
{
  unint64_t result;

  result = qword_2573A0EE8;
  if (!qword_2573A0EE8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ProcessID, &type metadata for ProcessID);
    atomic_store(result, (unint64_t *)&qword_2573A0EE8);
  }
  return result;
}

unint64_t sub_2449785B8()
{
  unint64_t result;

  result = qword_2573A0F00;
  if (!qword_2573A0F00)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PrepareToRelaunchPayload, &type metadata for PrepareToRelaunchPayload);
    atomic_store(result, (unint64_t *)&qword_2573A0F00);
  }
  return result;
}

unint64_t sub_2449785FC()
{
  unint64_t result;

  result = qword_2573A0F08;
  if (!qword_2573A0F08)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for LaunchPayload, &type metadata for LaunchPayload);
    atomic_store(result, (unint64_t *)&qword_2573A0F08);
  }
  return result;
}

unint64_t sub_244978640()
{
  unint64_t result;

  result = qword_2573A0F10;
  if (!qword_2573A0F10)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DeviceType, &type metadata for DeviceType);
    atomic_store(result, (unint64_t *)&qword_2573A0F10);
  }
  return result;
}

uint64_t sub_244978684(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2449786C0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x64616F6C796170;
  else
    return 0x546567617373656DLL;
}

uint64_t sub_244978700(char *a1, char *a2)
{
  return sub_2449A23BC(*a1, *a2);
}

uint64_t sub_24497870C()
{
  return sub_2449C66B8();
}

uint64_t sub_244978714()
{
  return sub_244924CC0();
}

uint64_t sub_24497871C()
{
  return sub_2449C9790();
}

uint64_t sub_244978724@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244978730@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449786C0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244978758()
{
  char *v0;

  return sub_2449786C0(*v0);
}

uint64_t sub_244978760()
{
  sub_2449CFD48();
  sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t sub_2449787B4()
{
  return sub_2449CF88C();
}

uint64_t sub_2449787D0()
{
  sub_2449CFD48();
  sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t sub_244978820@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

void sub_24497882C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000023;
  a1[1] = 0x80000002449E2330;
}

unint64_t sub_24497884C()
{
  return 0xD000000000000023;
}

uint64_t ServiceMessage.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_244978894()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v0);
  v2 = &v17[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1350);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v17[-v7];
  ServiceMessage.messageType.getter();
  v10 = v9;
  v11 = (uint64_t)&v8[*(int *)(v3 + 48)];
  *v8 = 1;
  ServiceMessage.payload.getter(v11);
  v17[15] = 0;
  v17[14] = v10;
  v12 = &v6[*(int *)(v3 + 48)];
  *v6 = 1;
  v13 = sub_2449CF400();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v2, v12, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v2, 0, 1, v13);
  v17[13] = 1;
  sub_244978BC4();
  sub_244978C08();
  v15 = sub_2449CF604();
  sub_244940E8C((uint64_t)v2, &qword_25739F710);
  sub_244940E8C((uint64_t)v8, &qword_2573A1350);
  return v15;
}

uint64_t sub_244978A68()
{
  return sub_244978894();
}

uint64_t ServiceMessage.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  unsigned __int8 v16;

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = &type metadata for ServiceMessage.Key;
  v9 = sub_244978BC4();
  v15 = v9;
  v13[0] = 0;
  sub_244978C08();
  sub_2449CF37C();
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v10 = v16;
    v14 = &type metadata for ServiceMessage.Key;
    v15 = v9;
    v13[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    ServiceMessage.init(messageType:payload:)(v10, (uint64_t)v8, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  }
}

unint64_t sub_244978BC4()
{
  unint64_t result;

  result = qword_2573A0F18;
  if (!qword_2573A0F18)
  {
    result = MEMORY[0x24951C158](&unk_2449D9394, &type metadata for ServiceMessage.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0F18);
  }
  return result;
}

unint64_t sub_244978C08()
{
  unint64_t result;

  result = qword_2573A0F20;
  if (!qword_2573A0F20)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ServiceMessage.MessageType, &type metadata for ServiceMessage.MessageType);
    atomic_store(result, (unint64_t *)&qword_2573A0F20);
  }
  return result;
}

uint64_t ServiceMessage.init(messageType:payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v54[14];
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v64 = a1;
  v65 = sub_2449CF400();
  v67 = *(_QWORD *)(v65 - 8);
  v5 = MEMORY[0x24BDAC7A8](v65);
  v59 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v58 = (char *)v54 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v63 = (char *)v54 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v56 = (char *)v54 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v62 = (char *)v54 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v54[13] = (char *)v54 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v54[12] = (char *)v54 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v61 = (char *)v54 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v60 = (char *)v54 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v54[11] = (char *)v54 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v57 = (char *)v54 - v25;
  v55 = type metadata accessor for ServiceMessage.Content(0);
  v26 = MEMORY[0x24BDAC7A8](v55);
  v54[10] = (char *)v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v54[9] = (char *)v54 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v54[8] = (char *)v54 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)v54 - v33;
  v35 = MEMORY[0x24BDAC7A8](v32);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)v54 - v37;
  v39 = MEMORY[0x24BDAC7A8](v36);
  v41 = (char *)v54 - v40;
  v42 = MEMORY[0x24BDAC7A8](v39);
  v44 = (char *)v54 - v43;
  v45 = MEMORY[0x24BDAC7A8](v42);
  v47 = (char *)v54 - v46;
  MEMORY[0x24BDAC7A8](v45);
  v49 = (char *)v54 - v48;
  *a3 = 0;
  a3[1] = 0;
  v68 = a3;
  *((_QWORD *)&v72 + 1) = &type metadata for ServiceMessage.PayloadKey;
  *(_QWORD *)&v73 = sub_2449784A8();
  v50 = v66;
  sub_2449CF3B8();
  if (!v50)
  {
    v54[2] = v47;
    v54[3] = v44;
    v54[5] = v41;
    v54[6] = v38;
    v54[4] = v34;
    v54[1] = v49;
    v54[7] = a2;
    v66 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
    v51 = v69;
    v52 = v70;
    swift_bridgeObjectRelease();
    *v68 = v51;
    v68[1] = v52;
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(a2, v65);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
  return swift_bridgeObjectRelease();
}

uint64_t ServiceMessage.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  if (qword_25739EDA0 != -1)
    swift_once();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB00);
  sub_244942818();
  sub_2449CF6AC();
  swift_release();
  *a2 = sub_2449CFC88();
  a2[1] = v4;
  v5 = type metadata accessor for ServiceMessage(0);
  return sub_24493DD84(a1, (uint64_t)a2 + *(int *)(v5 + 20), type metadata accessor for ServiceMessage.Content);
}

uint64_t sub_244979B84()
{
  return sub_2449CF3D0();
}

uint64_t sub_244979BB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return ServiceMessage.init(propertyListValue:)(a1, a2);
}

uint64_t ServiceMessage.MessageType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_244979C04 + 4 * byte_2449D74B2[a1]))(0xD000000000000011, 0x80000002449E2380);
}

uint64_t sub_244979C04()
{
  return 1735289200;
}

uint64_t sub_244979C14()
{
  return 0x696C696261706163;
}

uint64_t sub_244979C34()
{
  return 0x68636E75616CLL;
}

uint64_t sub_244979C48()
{
  return 0x68636E75616C6572;
}

uint64_t sub_244979C60()
{
  return 0x7463656E6E6F63;
}

uint64_t sub_244979C78()
{
  return 0x64726177726F66;
}

uint64_t sub_244979C90()
{
  return 0x657461647075;
}

uint64_t sub_244979CA4()
{
  return 1886352499;
}

uint64_t sub_244979CB4()
{
  return 1819044203;
}

uint64_t sub_244979CC4()
{
  return 0x6567727570;
}

uint64_t sub_244979CD8()
{
  return 0x73746E6169726176;
}

uint64_t sub_244979CF0()
{
  return 0x4F746E65746E6F63;
}

uint64_t sub_244979D14(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_24497C7A8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))ServiceMessage.MessageType.rawValue.getter);
}

uint64_t sub_244979D20(uint64_t a1, uint64_t a2)
{
  return sub_24497C840(a1, a2, (void (*)(uint64_t))ServiceMessage.MessageType.rawValue.getter);
}

uint64_t sub_244979D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24497C8B0(a1, a2, a3, (void (*)(_QWORD))ServiceMessage.MessageType.rawValue.getter);
}

uint64_t sub_244979D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24497C8FC(a1, a2, a3, (void (*)(uint64_t))ServiceMessage.MessageType.rawValue.getter);
}

uint64_t sub_244979D44@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s19PreviewsMessagingOS14ServiceMessageV0E4TypeO8rawValueAESgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_244979D70@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ServiceMessage.MessageType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244979D98()
{
  sub_2449864CC();
  return sub_2449CF670();
}

uint64_t sub_244979DE0()
{
  sub_2449864CC();
  return sub_2449CF67C();
}

uint64_t sub_244979E44()
{
  uint64_t result;

  result = sub_2449CF73C();
  qword_2573A0EC0 = result;
  return result;
}

_QWORD *sub_244979E78@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = (*result)++;
  *a2 = v2;
  return result;
}

PreviewsMessagingOS::OSCapabilities __swiftcall OSCapabilities.init(supportsExecutionPoints:supportsPreviewVariants:supportsContentOverrides:supportsScreenshotRequests:supportsNSPreviewHostableMacPreviews:supportsNSPreviewHostableCatalystPreviews:supportsPerUpdateMessageStreams:supportsRegistryPreviews:supportsExternalRegistries:jitCapabilities:)(Swift::Bool supportsExecutionPoints, Swift::Bool supportsPreviewVariants, Swift::Bool supportsContentOverrides, Swift::Bool supportsScreenshotRequests, Swift::Bool supportsNSPreviewHostableMacPreviews, Swift::Bool supportsNSPreviewHostableCatalystPreviews, Swift::Bool supportsPerUpdateMessageStreams, Swift::Bool supportsRegistryPreviews, Swift::Bool supportsExternalRegistries, PreviewsMessagingOS::JITCapabilities jitCapabilities)
{
  Swift::Bool *v10;
  PreviewsMessagingOS::OSCapabilities result;

  *v10 = supportsExecutionPoints;
  v10[1] = supportsPreviewVariants;
  v10[2] = supportsContentOverrides;
  v10[3] = supportsScreenshotRequests;
  v10[4] = supportsNSPreviewHostableMacPreviews;
  v10[5] = supportsNSPreviewHostableCatalystPreviews;
  v10[6] = supportsPerUpdateMessageStreams;
  v10[7] = supportsRegistryPreviews;
  v10[8] = supportsExternalRegistries;
  v10[9] = jitCapabilities.supportsJITLinking;
  v10[10] = jitCapabilities.supportsLoadCommands;
  result.supportsExternalRegistries = supportsPreviewVariants;
  result.supportsExecutionPoints = supportsExecutionPoints;
  return result;
}

void static OSCapabilities.empty.getter(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 7) = 0;
  *(_QWORD *)a1 = 0;
}

uint64_t OSCapabilities.supportsExecutionPoints.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t OSCapabilities.supportsExecutionPoints.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*OSCapabilities.supportsExecutionPoints.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.supportsPreviewVariants.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t OSCapabilities.supportsPreviewVariants.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*OSCapabilities.supportsPreviewVariants.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.supportsContentOverrides.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t OSCapabilities.supportsContentOverrides.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*OSCapabilities.supportsContentOverrides.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.supportsScreenshotRequests.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t OSCapabilities.supportsScreenshotRequests.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*OSCapabilities.supportsScreenshotRequests.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.supportsNSPreviewHostableMacPreviews.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t OSCapabilities.supportsNSPreviewHostableMacPreviews.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*OSCapabilities.supportsNSPreviewHostableMacPreviews.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.supportsNSPreviewHostableCatalystPreviews.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t OSCapabilities.supportsNSPreviewHostableCatalystPreviews.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*OSCapabilities.supportsNSPreviewHostableCatalystPreviews.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.supportsPerUpdateMessageStreams.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 6);
}

uint64_t OSCapabilities.supportsPerUpdateMessageStreams.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 6) = result;
  return result;
}

uint64_t (*OSCapabilities.supportsPerUpdateMessageStreams.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.supportsRegistryPreviews.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 7);
}

uint64_t OSCapabilities.supportsRegistryPreviews.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 7) = result;
  return result;
}

uint64_t (*OSCapabilities.supportsRegistryPreviews.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.supportsExternalRegistries.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t OSCapabilities.supportsExternalRegistries.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*OSCapabilities.supportsExternalRegistries.modify())()
{
  return nullsub_1;
}

uint64_t OSCapabilities.jitCapabilities.getter()
{
  uint64_t v0;
  int v1;

  if (*(_BYTE *)(v0 + 10))
    v1 = 256;
  else
    v1 = 0;
  return v1 | *(unsigned __int8 *)(v0 + 9);
}

uint64_t OSCapabilities.jitCapabilities.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result & 1;
  *(_BYTE *)(v1 + 10) = BYTE1(result) & 1;
  return result;
}

uint64_t (*OSCapabilities.jitCapabilities.modify())()
{
  return nullsub_1;
}

uint64_t sub_24497A038(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24497A070 + 4 * byte_2449D74BF[a1]))(0xD000000000000017, 0x80000002449E23D0);
}

uint64_t sub_24497A0F4()
{
  return 0x626170614374696ALL;
}

uint64_t sub_24497A118(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_24497C7A8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_24497A038);
}

uint64_t sub_24497A124(uint64_t a1, uint64_t a2)
{
  return sub_24497C840(a1, a2, (void (*)(uint64_t))sub_24497A038);
}

uint64_t sub_24497A130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24497C8B0(a1, a2, a3, (void (*)(_QWORD))sub_24497A038);
}

uint64_t sub_24497A13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24497C8FC(a1, a2, a3, (void (*)(uint64_t))sub_24497A038);
}

uint64_t sub_24497A148@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244981414();
  *a1 = result;
  return result;
}

uint64_t sub_24497A17C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497A038(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497A1A4()
{
  unsigned __int8 *v0;

  return sub_24497A038(*v0);
}

uint64_t OSCapabilities.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497A22C()
{
  sub_244986554();
  sub_244986598();
  return sub_2449CF5B0();
}

uint64_t OSCapabilities.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  sub_24497A6C0(KeyPath, a1, 0);
  if (v2)
  {
    v15 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
    return swift_release();
  }
  else
  {
    swift_release();
    v6 = swift_getKeyPath();
    sub_24497A6C0(v6, a1, 1);
    swift_release();
    v7 = swift_getKeyPath();
    sub_24497A6C0(v7, a1, 2);
    swift_release();
    v8 = swift_getKeyPath();
    sub_24497A6C0(v8, a1, 3);
    swift_release();
    v9 = swift_getKeyPath();
    sub_24497A6C0(v9, a1, 4);
    swift_release();
    v10 = swift_getKeyPath();
    sub_24497A6C0(v10, a1, 5);
    swift_release();
    v11 = swift_getKeyPath();
    sub_24497A6C0(v11, a1, 6);
    swift_release();
    v12 = swift_getKeyPath();
    sub_24497A6C0(v12, a1, 7);
    swift_release();
    v13 = swift_getKeyPath();
    sub_24497A6C0(v13, a1, 8);
    swift_release();
    v14 = swift_getKeyPath();
    sub_24497A778(v14, a1, 9);
    v16 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
    result = swift_release();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
    a2[4] = 0;
    a2[5] = 0;
    a2[6] = 0;
    a2[7] = 0;
    a2[8] = 0;
    a2[9] = 0;
    a2[10] = 0;
  }
  return result;
}

uint64_t sub_24497A6C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  char v9;

  v7 = &type metadata for OSCapabilities.Key;
  v8 = sub_244986554();
  v6[0] = a3;
  sub_2449CF3B8();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (!v3 && v9 != 2)
  {
    v6[0] = v9 & 1;
    return swift_setAtWritableKeyPath();
  }
  return result;
}

uint64_t sub_24497A778(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  char v9;
  char v10;

  v7 = &type metadata for OSCapabilities.Key;
  v8 = sub_244986554();
  v6[0] = a3;
  sub_244986598();
  sub_2449CF3B8();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (!v3 && v9 != 2)
  {
    v6[0] = v9 & 1;
    v6[1] = v10 & 1;
    return swift_setAtWritableKeyPath();
  }
  return result;
}

uint64_t sub_24497A840()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497A8C0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return OSCapabilities.init(propertyListValue:)(a1, a2);
}

uint64_t AgentDescriptor.idAcrossRelaunches.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AgentDescriptor.idAcrossRelaunches.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AgentDescriptor.idAcrossRelaunches.modify())()
{
  return nullsub_1;
}

uint64_t AgentDescriptor.bundle.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[3];
  v4 = v1[4];
  v3 = v1[5];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 AgentDescriptor.bundle.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  v1[1] = v5;
  v1[2].n128_u64[0] = v2;
  v1[2].n128_u64[1] = v3;
  return result;
}

uint64_t (*AgentDescriptor.bundle.modify())()
{
  return nullsub_1;
}

void __swiftcall AgentDescriptor.init(idAcrossRelaunches:bundle:)(PreviewsMessagingOS::AgentDescriptor *__return_ptr retstr, Swift::String idAcrossRelaunches, PreviewsMessagingOS::AgentDescriptor::Bundle bundle)
{
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)bundle.bundleID._countAndFlagsBits;
  v4 = *(void **)(bundle.bundleID._countAndFlagsBits + 8);
  retstr->idAcrossRelaunches = idAcrossRelaunches;
  retstr->bundle.bundleID._countAndFlagsBits = v3;
  retstr->bundle.bundleID._object = v4;
  retstr->bundle.path = *(Swift::String_optional *)(bundle.bundleID._countAndFlagsBits + 16);
}

uint64_t sub_24497A9F4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656C646E7562;
  else
    return 0xD000000000000012;
}

uint64_t sub_24497AA2C(char *a1, char *a2)
{
  return sub_2449A2318(*a1, *a2);
}

uint64_t sub_24497AA38()
{
  return sub_2449C6740();
}

uint64_t sub_24497AA40()
{
  return sub_244924C68();
}

uint64_t sub_24497AA48()
{
  return sub_2449C9814();
}

uint64_t sub_24497AA50@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497AA5C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497A9F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497AA84()
{
  char *v0;

  return sub_24497A9F4(*v0);
}

uint64_t AgentDescriptor.propertyListValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  __int128 v5;
  _BYTE v7[16];
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v1 = sub_2449CF400();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = v0[1];
  v11 = *v0;
  v12 = v5;
  v13 = v0[2];
  v8 = &v11;
  sub_2449CF3D0();
  v9 = v12;
  v10 = v13;
  sub_244980E44();
  sub_2449CF658();
  sub_2449CF388();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_24497AB64()
{
  sub_244980E88();
  sub_244980E44();
  return sub_2449CF604();
}

void AgentDescriptor.init(propertyListValue:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[3];
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)&v18 + 1) = &type metadata for AgentDescriptor.Key;
  v9 = sub_244980E88();
  v19 = v9;
  LOBYTE(v17[0]) = 0;
  sub_2449CF37C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (v2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    sub_244980E44();
    sub_2449CF664();

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v10 = 0;
    v11 = v17[0];
    v12 = v17[1];
    v13 = 0xE000000000000000;
    v14 = v18;
  }
  else
  {
    v15[0] = v20;
    v22 = v21;
    *((_QWORD *)&v18 + 1) = &type metadata for AgentDescriptor.Key;
    v19 = v9;
    LOBYTE(v17[0]) = 1;
    sub_244980E44();
    sub_2449CF37C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v11 = v15[1];
    v12 = v15[2];
    v14 = v16;
    v10 = v15[0];
    v13 = v22;
  }
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(_OWORD *)(a2 + 32) = v14;
}

uint64_t AgentDescriptor.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t AgentDescriptor.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

uint64_t sub_24497AFD8()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  __int128 v5;
  _BYTE v7[16];
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v1 = sub_2449CF400();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = v0[1];
  v11 = *v0;
  v12 = v5;
  v13 = v0[2];
  v8 = &v11;
  sub_2449CF3D0();
  v9 = v12;
  v10 = v13;
  sub_244980E44();
  sub_2449CF658();
  sub_2449CF388();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_24497B0B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AgentDescriptor.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24497B0C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_24497B1B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

uint64_t AgentDescriptor.bundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AgentDescriptor.path.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AgentDescriptor.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0[5];
  v3 = *v0;
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRetain_n();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF898();
    sub_2449CF898();
  }
  sub_2449CF898();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AgentDescriptor.Bundle.bundleID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AgentDescriptor.Bundle.bundleID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AgentDescriptor.Bundle.bundleID.modify())()
{
  return nullsub_1;
}

uint64_t AgentDescriptor.Bundle.path.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AgentDescriptor.Bundle.path.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AgentDescriptor.Bundle.path.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::AgentDescriptor::Bundle __swiftcall AgentDescriptor.Bundle.init(bundleID:path:)(Swift::String bundleID, Swift::String_optional path)
{
  Swift::String_optional *v2;
  PreviewsMessagingOS::AgentDescriptor::Bundle result;

  v2->value = bundleID;
  v2[1] = path;
  result.path = path;
  result.bundleID = bundleID;
  return result;
}

uint64_t sub_24497B4C0(char a1)
{
  return *(_QWORD *)&aBundleidpath_0[8 * a1];
}

uint64_t sub_24497B4E0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x42646E4168746170;
  else
    return 0x4449656C646E7562;
}

uint64_t sub_24497B524(char *a1, char *a2)
{
  return sub_2449A21E8(*a1, *a2);
}

uint64_t sub_24497B530()
{
  return sub_2449C67C0();
}

uint64_t sub_24497B538()
{
  return sub_244924BC4();
}

uint64_t sub_24497B540()
{
  return sub_2449C9918();
}

uint64_t sub_24497B548@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24497B57C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497B4C0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497B5A4()
{
  char *v0;

  return sub_24497B4C0(*v0);
}

uint64_t sub_24497B5AC(char *a1, char *a2)
{
  return sub_2449A226C(*a1, *a2);
}

uint64_t sub_24497B5B8()
{
  return sub_2449C6828();
}

uint64_t sub_24497B5C0()
{
  return sub_244924C04();
}

uint64_t sub_24497B5C8()
{
  return sub_2449C9890();
}

uint64_t sub_24497B5D0@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497B5DC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497B4E0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497B604()
{
  sub_244986804();
  return sub_2449CF670();
}

uint64_t sub_24497B64C()
{
  sub_244986804();
  return sub_2449CF67C();
}

uint64_t AgentDescriptor.Bundle.propertyListValue.getter()
{
  return sub_24497FEBC();
}

uint64_t sub_24497B6BC()
{
  sub_244980ED8();
  sub_244986510();
  return sub_2449CF5F8();
}

uint64_t AgentDescriptor.Bundle.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = &type metadata for AgentDescriptor.Bundle.Key;
  v5 = sub_244980ED8();
  v15 = v5;
  v13[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v8 = v16;
    v7 = v17;
    v14 = &type metadata for AgentDescriptor.Bundle.Key;
    v15 = v5;
    v13[0] = 1;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v10 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v11;
    a2[3] = v12;
  }
  return result;
}

uint64_t AgentDescriptor.Bundle.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  if (!v1)
    return sub_2449CFD60();
  sub_2449CFD60();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t AgentDescriptor.Bundle.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_2449CFD48();
  sub_2449CF88C();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

uint64_t sub_24497B9E4()
{
  return sub_2449800C4();
}

uint64_t sub_24497B9F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return AgentDescriptor.Bundle.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24497BA04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_2449CFD48();
  sub_2449CF88C();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

uint64_t sub_24497BA9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_2449CF88C();
  if (!v1)
    return sub_2449CFD60();
  sub_2449CFD60();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24497BB14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_2449CFD48();
  sub_2449CF88C();
  sub_2449CFD60();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

uint64_t AgentDescriptor.Bundle.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  if (*(_QWORD *)(v1 + 24))
  {
    swift_bridgeObjectRetain();
    sub_2449CEFF8();
    v3 = sub_2449CF034();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_2449CF034();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t AgentDescriptor.Bundle.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  if (v0[3])
  {
    v3 = *v0;
    swift_bridgeObjectRetain();
    sub_2449CF898();
    sub_2449CF898();
    return v3;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t AgentDescriptor.Bundle.missingPathError.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  a1[3] = &type metadata for AgentDescriptor.Bundle.MissingPathError;
  a1[4] = sub_244980F1C();
  *a1 = v4;
  a1[1] = v3;
  return swift_bridgeObjectRetain();
}

unint64_t sub_24497BD14()
{
  sub_2449CFB98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

unint64_t sub_24497BDA0()
{
  return 0xD000000000000043;
}

unint64_t sub_24497BDBC()
{
  return sub_24497BD14();
}

uint64_t sub_24497BDC4()
{
  sub_244980F1C();
  return sub_2449CF52C();
}

uint64_t sub_24497BDEC()
{
  sub_244980F1C();
  return sub_2449CF508();
}

uint64_t PreviewAgentRole.displayName.getter()
{
  char *v0;

  return *(_QWORD *)&aPreviewsrunnin_0[8 * *v0];
}

uint64_t PreviewAgentRole.description.getter()
{
  char *v0;

  return *(_QWORD *)&aPreviewsrunnin_0[8 * *v0];
}

PreviewsMessagingOS::PreviewAgentRole_optional __swiftcall PreviewAgentRole.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  PreviewsMessagingOS::PreviewAgentRole_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2449CFC10();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t PreviewAgentRole.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aPreviewsrunnin_1[8 * *v0];
}

uint64_t sub_24497BEDC(char *a1, char *a2)
{
  return sub_2449A123C(*a1, *a2);
}

uint64_t sub_24497BEE8()
{
  return sub_2449C68B4();
}

uint64_t sub_24497BEF0()
{
  return sub_24492446C();
}

uint64_t sub_24497BEF8()
{
  return sub_2449CA208();
}

PreviewsMessagingOS::PreviewAgentRole_optional sub_24497BF00(Swift::String *a1)
{
  return PreviewAgentRole.init(rawValue:)(*a1);
}

uint64_t sub_24497BF0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PreviewAgentRole.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24497BF34()
{
  sub_2449863D0();
  return sub_2449CF670();
}

uint64_t sub_24497BF7C()
{
  sub_2449863D0();
  return sub_2449CF67C();
}

uint64_t PreviewAgentBootstrapMode.displayName.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x636578452054494ALL;
  else
    return 0x6E6942206C6C7546;
}

uint64_t PreviewAgentBootstrapMode.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x636578452054494ALL;
  else
    return 0x6E6942206C6C7546;
}

PreviewsMessagingOS::PreviewAgentBootstrapMode_optional __swiftcall PreviewAgentBootstrapMode.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  PreviewsMessagingOS::PreviewAgentBootstrapMode_optional v2;

  v1 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = PreviewsMessagingOS_PreviewAgentBootstrapMode_jitExecutor;
  else
    v2.value = PreviewsMessagingOS_PreviewAgentBootstrapMode_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t PreviewAgentBootstrapMode.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x756365784574696ALL;
  else
    return 0x616E69426C6C7566;
}

uint64_t sub_24497C104(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = PreviewAgentBootstrapMode.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == PreviewAgentBootstrapMode.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24497C18C()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  PreviewAgentBootstrapMode.rawValue.getter(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24497C1EC()
{
  char *v0;

  PreviewAgentBootstrapMode.rawValue.getter(*v0);
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24497C22C()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  PreviewAgentBootstrapMode.rawValue.getter(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24497C288@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497C294@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = PreviewAgentBootstrapMode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497C2BC()
{
  char *v0;

  return PreviewAgentBootstrapMode.description.getter(*v0);
}

uint64_t sub_24497C2C4()
{
  sub_24498638C();
  return sub_2449CF670();
}

uint64_t sub_24497C30C()
{
  sub_24498638C();
  return sub_2449CF67C();
}

uint64_t LaunchPayload.workspaceID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LaunchPayload.workspaceID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*LaunchPayload.workspaceID.modify())()
{
  return nullsub_1;
}

uint64_t LaunchPayload.agentDescriptor.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[5];
  v6 = v1[6];
  v5 = v1[7];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 LaunchPayload.agentDescriptor.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)(v1 + 16) = v6;
  *(__n128 *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v3;
  return result;
}

uint64_t (*LaunchPayload.agentDescriptor.modify())()
{
  return nullsub_1;
}

void LaunchPayload.agentRole.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 64);
}

_BYTE *LaunchPayload.agentRole.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = *result;
  return result;
}

uint64_t (*LaunchPayload.agentRole.modify())()
{
  return nullsub_1;
}

uint64_t LaunchPayload.agentBootstrapMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t LaunchPayload.agentBootstrapMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 65) = result & 1;
  return result;
}

uint64_t (*LaunchPayload.agentBootstrapMode.modify())()
{
  return nullsub_1;
}

uint64_t LaunchPayload.environment.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LaunchPayload.environment.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*LaunchPayload.environment.modify())()
{
  return nullsub_1;
}

uint64_t LaunchPayload.arguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LaunchPayload.arguments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*LaunchPayload.arguments.modify())()
{
  return nullsub_1;
}

void LaunchPayload.processType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 88);
}

_BYTE *LaunchPayload.processType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 88) = *result;
  return result;
}

uint64_t (*LaunchPayload.processType.modify())()
{
  return nullsub_1;
}

double LaunchPayload.binaryType.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 92);
  *a1 = result;
  return result;
}

double LaunchPayload.binaryType.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 92) = *a1;
  return result;
}

uint64_t (*LaunchPayload.binaryType.modify())()
{
  return nullsub_1;
}

uint64_t LaunchPayload.targetDescriptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LaunchPayload.targetDescriptions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*LaunchPayload.targetDescriptions.modify())()
{
  return nullsub_1;
}

double LaunchPayload.init(workspaceID:agentDescriptor:agentRole:agentBootstrapMode:environment:arguments:processType:binaryType:targetDescriptions:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, double *a10, uint64_t a11)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  double result;

  v11 = *a3;
  v12 = *((_QWORD *)a3 + 2);
  v13 = *((_QWORD *)a3 + 3);
  v14 = *a4;
  v15 = *a8;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_OWORD *)(a9 + 16) = v11;
  *(_QWORD *)(a9 + 32) = v12;
  *(_QWORD *)(a9 + 40) = v13;
  *(_OWORD *)(a9 + 48) = a3[2];
  *(_BYTE *)(a9 + 64) = v14;
  *(_BYTE *)(a9 + 65) = a5 & 1;
  *(_QWORD *)(a9 + 72) = a6;
  *(_QWORD *)(a9 + 80) = a7;
  *(_BYTE *)(a9 + 88) = v15;
  result = *a10;
  *(double *)(a9 + 92) = *a10;
  *(_QWORD *)(a9 + 104) = a11;
  return result;
}

uint64_t sub_24497C650(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24497C688 + 4 * byte_2449D74C9[a1]))(0xD000000000000012, 0x80000002449E25A0);
}

uint64_t sub_24497C688()
{
  return 0x636170736B726F77;
}

uint64_t sub_24497C6A8()
{
  return 0x656449746E656761;
}

uint64_t sub_24497C6CC()
{
  return 0x6C6F52746E656761;
}

uint64_t sub_24497C6E8()
{
  return 0x6D6E6F7269766E65;
}

uint64_t sub_24497C708()
{
  return 0x746E656D75677261;
}

uint64_t sub_24497C728()
{
  return 0x54737365636F7270;
}

uint64_t sub_24497C748()
{
  return 0x79547972616E6962;
}

uint64_t sub_24497C778()
{
  return 0x736544746E656761;
}

uint64_t sub_24497C79C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_24497C7A8(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_24497C650);
}

uint64_t sub_24497C7A8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  if (v7 == a5(v6) && v9 == v10)
    v12 = 1;
  else
    v12 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_24497C834(uint64_t a1, uint64_t a2)
{
  return sub_24497C840(a1, a2, (void (*)(uint64_t))sub_24497C650);
}

uint64_t sub_24497C840(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;

  v5 = *v3;
  sub_2449CFD48();
  a3(v5);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24497C8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24497C8B0(a1, a2, a3, (void (*)(_QWORD))sub_24497C650);
}

uint64_t sub_24497C8B0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unsigned __int8 *v4;

  a4(*v4);
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24497C8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24497C8FC(a1, a2, a3, (void (*)(uint64_t))sub_24497C650);
}

uint64_t sub_24497C8FC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;

  v6 = *v4;
  sub_2449CFD48();
  a4(v6);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24497C95C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244981414();
  *a1 = result;
  return result;
}

uint64_t sub_24497C990@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497C650(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497C9B8()
{
  unsigned __int8 *v0;

  return sub_24497C650(*v0);
}

uint64_t LaunchPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497CA10()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0F68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F670);
  sub_244980F68();
  sub_244980E44();
  sub_244980FAC();
  sub_244980FF0();
  sub_244981034();
  sub_244981078();
  sub_244957FC4();
  sub_2449810E0();
  sub_244981124();
  sub_244931570((unint64_t *)&qword_25739F678, &qword_25739F670, (uint64_t (*)(void))sub_2449395A8);
  return sub_2449CF5B0();
}

uint64_t LaunchPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  unint64_t v5;
  uint64_t v6;
  ValueMetadata *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  ValueMetadata *v26;
  unint64_t v27;
  _QWORD v28[3];
  ValueMetadata *v29;
  unint64_t v30;
  uint64_t v31;

  v26 = &type metadata for LaunchPayload.Key;
  v5 = sub_244980F68();
  v27 = v5;
  LOBYTE(v25[0]) = 9;
  sub_244980FAC();
  sub_2449CF37C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v26 = &type metadata for LaunchPayload.Key;
    v27 = v5;
    LOBYTE(v25[0]) = 1;
    sub_2449CF37C();

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  v6 = v28[1];
  v7 = v29;
  v18 = v28[2];
  v19 = v28[0];
  v8 = v31;
  v17 = v30;
  v29 = &type metadata for LaunchPayload.Key;
  v30 = v5;
  LOBYTE(v28[0]) = 0;
  sub_2449CF37C();
  v16 = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v9 = v25[0];
  v10 = v25[1];
  v29 = &type metadata for LaunchPayload.Key;
  v30 = v5;
  LOBYTE(v28[0]) = 2;
  sub_244980FF0();
  sub_2449CF3B8();
  v15 = v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  if (v24 == 3)
    v11 = 0;
  else
    v11 = v24;
  v29 = &type metadata for LaunchPayload.Key;
  v30 = v5;
  LOBYTE(v28[0]) = 3;
  sub_244981034();
  sub_2449CF3B8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v29 = &type metadata for LaunchPayload.Key;
  v30 = v5;
  LOBYTE(v28[0]) = 4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0F68);
  sub_244981078();
  sub_2449CF37C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v29 = &type metadata for LaunchPayload.Key;
  v30 = v5;
  LOBYTE(v28[0]) = 5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
  sub_244957FC4();
  sub_2449CF37C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v29 = &type metadata for LaunchPayload.Key;
  v30 = v5;
  LOBYTE(v28[0]) = 6;
  sub_2449810E0();
  sub_2449CF37C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v29 = &type metadata for LaunchPayload.Key;
  v30 = v5;
  LOBYTE(v28[0]) = 7;
  sub_244981124();
  sub_2449CF37C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v29 = &type metadata for LaunchPayload.Key;
  v30 = v5;
  LOBYTE(v28[0]) = 8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F670);
  sub_244931570((unint64_t *)&qword_25739F678, &qword_25739F670, (uint64_t (*)(void))sub_2449395A8);
  sub_2449CF3B8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  if (v20)
    v12 = v20;
  else
    v12 = MEMORY[0x24BEE4AF8];
  v13 = sub_2449CF400();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v8;
  *(_BYTE *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 65) = v24 & 1;
  *(_QWORD *)(a2 + 72) = v24;
  *(_QWORD *)(a2 + 80) = v23;
  *(_BYTE *)(a2 + 88) = v22;
  *(_QWORD *)(a2 + 92) = v21;
  *(_QWORD *)(a2 + 104) = v12;
  return result;
}

uint64_t sub_24497D168()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497D1B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LaunchPayload.init(propertyListValue:)(a1, a2);
}

uint64_t BinaryType.cpuType.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t BinaryType.cpuType.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*BinaryType.cpuType.modify())()
{
  return nullsub_1;
}

uint64_t BinaryType.cpuSubtype.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t BinaryType.cpuSubtype.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*BinaryType.cpuSubtype.modify())()
{
  return nullsub_1;
}

uint64_t BinaryType.init(cpuType:cpuSubtype:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

double static BinaryType.unspecified.getter@<D0>(_QWORD *a1@<X8>)
{
  double result;

  result = NAN;
  *a1 = -1;
  return result;
}

uint64_t sub_24497D220(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7974627553757063;
  else
    return 0x65707954757063;
}

uint64_t sub_24497D25C(char *a1, char *a2)
{
  return sub_2449A36A4(*a1, *a2);
}

uint64_t sub_24497D268()
{
  return sub_2449C691C();
}

uint64_t sub_24497D270()
{
  return sub_244925674();
}

uint64_t sub_24497D278()
{
  return sub_2449C8A7C();
}

uint64_t sub_24497D280@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497D28C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497D220(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497D2B4()
{
  char *v0;

  return sub_24497D220(*v0);
}

uint64_t BinaryType.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497D2EC()
{
  sub_244981170();
  return sub_2449CF604();
}

uint64_t BinaryType.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  _BYTE v11[24];
  ValueMetadata *v12;
  unint64_t v13;
  int v14;

  v12 = &type metadata for BinaryType.Key;
  v5 = sub_244981170();
  v13 = v5;
  v11[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    v6 = v14;
    v12 = &type metadata for BinaryType.Key;
    v13 = v5;
    v11[0] = 1;
    sub_2449CF37C();
    v8 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    *a2 = v6;
    a2[1] = v10;
  }
  return result;
}

uint64_t sub_24497D47C()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497D4AC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return BinaryType.init(propertyListValue:)(a1, a2);
}

void static ProcessType.homeScreenExtension.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

PreviewsMessagingOS::ProcessType_optional __swiftcall ProcessType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  PreviewsMessagingOS::ProcessType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2449CFC10();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t ProcessType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x746163696C707061;
}

uint64_t sub_24497D574(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6574616C756D6973;
  else
    return 0x746C7561666564;
}

uint64_t sub_24497D5B0(char *a1, char *a2)
{
  return sub_2449A30E8(*a1, *a2);
}

uint64_t sub_24497D5BC()
{
  return sub_2449C69A0();
}

uint64_t sub_24497D5C4()
{
  return sub_244925368();
}

uint64_t sub_24497D5CC()
{
  return sub_2449C8EA4();
}

PreviewsMessagingOS::ProcessType_optional sub_24497D5D4(Swift::String *a1)
{
  return ProcessType.init(rawValue:)(*a1);
}

uint64_t sub_24497D5E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ProcessType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24497D604()
{
  sub_244986348();
  return sub_2449CF670();
}

uint64_t sub_24497D64C()
{
  sub_244986348();
  return sub_2449CF67C();
}

uint64_t sub_24497D6B0(char *a1, char *a2)
{
  return sub_2449A357C(*a1, *a2);
}

uint64_t sub_24497D6BC()
{
  return sub_2449C6A2C();
}

uint64_t sub_24497D6C4()
{
  return sub_2449255D8();
}

uint64_t sub_24497D6CC()
{
  return sub_2449C8B60();
}

uint64_t sub_24497D6D4@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497D6E0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497D574(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497D708()
{
  sub_244986238();
  return sub_2449CF670();
}

uint64_t sub_24497D750()
{
  sub_244986238();
  return sub_2449CF67C();
}

uint64_t sub_24497D7C0@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_24497D7CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_244980B5C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

_OWORD *DeviceType.propertyListValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _OWORD *result;
  _BYTE v6[16];
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12[4];
  _OWORD v13[4];

  v1 = sub_2449CF400();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2449811B4(v0, v12);
  v7 = v12;
  sub_2449811D0();
  sub_244981214();
  sub_2449CF3E8();
  result = sub_2449811B4(v12, v13);
  if (*((_QWORD *)&v13[0] + 1))
  {
    v8 = v13[0];
    v9 = v13[1];
    v10 = v13[2];
    v11 = v13[3];
    sub_244981258();
    sub_2449CF658();
    sub_2449CF388();
    return (_OWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }
  return result;
}

uint64_t DeviceType.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[2];
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v20[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v20[-1] - v10;
  *((_QWORD *)&v21 + 1) = &type metadata for DeviceType.Key;
  v22 = sub_2449811D0();
  sub_244981214();
  sub_2449CF3B8();
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  if (v25 == 2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
    sub_244981258();
    sub_2449CF664();
LABEL_8:
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v13 = v20[0];
    v14 = v20[1];
    v17 = v21;
    v15 = v22;
    v16 = v23;
    v18 = v24;
    goto LABEL_9;
  }
  if ((v25 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    sub_244981258();
    sub_2449CF664();
    goto LABEL_8;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0uLL;
  v18 = 0uLL;
LABEL_9:
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_OWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v16;
  *(_OWORD *)(a2 + 48) = v18;
  return result;
}

uint64_t static DeviceType.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return sub_2449CFCD0();
}

uint64_t DeviceType.hash(into:)()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    return sub_2449CFD54();
  sub_2449CFD54();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t DeviceType.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_2449CFD48();
  sub_2449CFD54();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

_OWORD *sub_24497DC80()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _OWORD *result;
  _BYTE v6[16];
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12[4];
  _OWORD v13[4];

  v1 = sub_2449CF400();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2449811B4(v0, v12);
  v7 = v12;
  sub_2449811D0();
  sub_244981214();
  sub_2449CF3E8();
  result = sub_2449811B4(v12, v13);
  if (*((_QWORD *)&v13[0] + 1))
  {
    v8 = v13[0];
    v9 = v13[1];
    v10 = v13[2];
    v11 = v13[3];
    sub_244981258();
    sub_2449CF658();
    sub_2449CF388();
    return (_OWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }
  return result;
}

uint64_t sub_24497DDA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DeviceType.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24497DDB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_2449CFD48();
  sub_2449CFD54();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  return sub_2449CFD84();
}

uint64_t sub_24497DE30()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    return sub_2449CFD54();
  sub_2449CFD54();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24497DEA4()
{
  uint64_t v0;

  sub_2449CFD48();
  if (*(_QWORD *)(v0 + 8))
  {
    sub_2449CFD54();
    swift_bridgeObjectRetain();
    sub_2449CF88C();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_2449CFD54();
  }
  return sub_2449CFD84();
}

uint64_t sub_24497DF24(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return sub_2449CFCD0();
}

uint64_t SimulatorDevicePayload.deviceIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SimulatorDevicePayload.deviceIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SimulatorDevicePayload.deviceIdentifier.modify())()
{
  return nullsub_1;
}

double SimulatorDevicePayload.displaySize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void SimulatorDevicePayload.displaySize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*SimulatorDevicePayload.displaySize.modify())()
{
  return nullsub_1;
}

double SimulatorDevicePayload.displayScale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void SimulatorDevicePayload.displayScale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*SimulatorDevicePayload.displayScale.modify())()
{
  return nullsub_1;
}

uint64_t SimulatorDevicePayload.deviceEnvironment.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SimulatorDevicePayload.deviceEnvironment.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*SimulatorDevicePayload.deviceEnvironment.modify())()
{
  return nullsub_1;
}

uint64_t SimulatorDevicePayload.frameBufferMaskPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SimulatorDevicePayload.frameBufferMaskPath.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*SimulatorDevicePayload.frameBufferMaskPath.modify())()
{
  return nullsub_1;
}

uint64_t SimulatorDevicePayload.init(deviceIdentifier:displaySize:displayScale:deviceEnvironment:maskPath:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(double *)(a6 + 16) = a7;
  *(double *)(a6 + 24) = a8;
  *(double *)(a6 + 32) = a9;
  *(_QWORD *)(a6 + 40) = a3;
  *(_QWORD *)(a6 + 48) = a4;
  *(_QWORD *)(a6 + 56) = a5;
  return result;
}

uint64_t sub_24497E0E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24497E120 + 4 * byte_2449D74D3[a1]))(0xD000000000000010, 0x80000002449E2660);
}

uint64_t sub_24497E120()
{
  return 0x5379616C70736964;
}

uint64_t sub_24497E150(uint64_t a1)
{
  return a1 + 1;
}

void sub_24497E178(char *a1)
{
  sub_24499F7E0(*a1);
}

void sub_24497E184()
{
  char *v0;

  sub_2449C6AB0(*v0);
}

void sub_24497E18C(uint64_t a1)
{
  char *v1;

  sub_2449236CC(a1, *v1);
}

void sub_24497E194(uint64_t a1)
{
  char *v1;

  sub_2449CB0BC(a1, *v1);
}

uint64_t sub_24497E19C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244981458();
  *a1 = result;
  return result;
}

uint64_t sub_24497E1C8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497E0E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497E1F0()
{
  unsigned __int8 *v0;

  return sub_24497E0E8(*v0);
}

uint64_t SimulatorDevicePayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497E238(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[16];

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  sub_244940E44((uint64_t)(a1 + 6), (uint64_t)v21);
  v20 = 0;
  v18 = v1;
  v19 = v2;
  v17 = 1;
  v14 = v3;
  v15 = v4;
  v16 = 0;
  v13 = 2;
  v11 = v5;
  v12 = 0;
  v10 = 3;
  v9 = v6;
  v8[23] = 4;
  sub_244940E44((uint64_t)v21, (uint64_t)v8);
  type metadata accessor for CGSize(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0F68);
  sub_2449812A4();
  sub_244981078();
  return sub_2449CF5E0();
}

uint64_t SimulatorDevicePayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  ValueMetadata *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v18 = &type metadata for SimulatorDevicePayload.Key;
  v5 = sub_2449812A4();
  v19 = v5;
  v17[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v8 = v20;
    v7 = v21;
    v18 = &type metadata for SimulatorDevicePayload.Key;
    v19 = v5;
    v17[0] = 1;
    type metadata accessor for CGSize(0);
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v18 = &type metadata for SimulatorDevicePayload.Key;
    v19 = v5;
    v17[0] = 2;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v9 = v22;
    v18 = &type metadata for SimulatorDevicePayload.Key;
    v19 = v5;
    v17[0] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0F68);
    sub_244981078();
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v18 = &type metadata for SimulatorDevicePayload.Key;
    v19 = v5;
    v17[0] = 4;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v11 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v15;
    a2[3] = v16;
    a2[4] = v9;
    a2[5] = v14;
    a2[6] = v12;
    a2[7] = v13;
  }
  return result;
}

uint64_t sub_24497E5E4()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497E624@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return SimulatorDevicePayload.init(propertyListValue:)(a1, a2);
}

uint64_t PrepareToRelaunchPayload.agentDescriptor.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 PrepareToRelaunchPayload.agentDescriptor.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)v1 = v6;
  *(__n128 *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*PrepareToRelaunchPayload.agentDescriptor.modify())()
{
  return nullsub_1;
}

void __swiftcall PrepareToRelaunchPayload.init(agentDescriptor:)(PreviewsMessagingOS::PrepareToRelaunchPayload *__return_ptr retstr, PreviewsMessagingOS::AgentDescriptor *agentDescriptor)
{
  uint64_t countAndFlagsBits;
  void *object;

  countAndFlagsBits = agentDescriptor->bundle.bundleID._countAndFlagsBits;
  object = agentDescriptor->bundle.bundleID._object;
  retstr->agentDescriptor.idAcrossRelaunches = agentDescriptor->idAcrossRelaunches;
  retstr->agentDescriptor.bundle.bundleID._countAndFlagsBits = countAndFlagsBits;
  retstr->agentDescriptor.bundle.bundleID._object = object;
  retstr->agentDescriptor.bundle.path = agentDescriptor->bundle.path;
}

uint64_t sub_24497E71C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x736544746E656761;
  else
    return 0x656449746E656761;
}

uint64_t sub_24497E76C(char *a1, char *a2)
{
  return sub_24499F0EC(*a1, *a2);
}

uint64_t sub_24497E778()
{
  return sub_2449C6B90();
}

uint64_t sub_24497E780()
{
  return sub_244923330();
}

uint64_t sub_24497E788()
{
  return sub_2449CB610();
}

uint64_t sub_24497E790@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497E79C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497E71C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497E7C4()
{
  char *v0;

  return sub_24497E71C(*v0);
}

uint64_t PrepareToRelaunchPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497E80C()
{
  sub_2449812F0();
  sub_244980E44();
  sub_244980FAC();
  return sub_2449CF604();
}

uint64_t PrepareToRelaunchPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v14 = &type metadata for PrepareToRelaunchPayload.Key;
  v5 = sub_2449812F0();
  v15 = v5;
  v13[0] = 1;
  sub_244980FAC();
  sub_2449CF37C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v14 = &type metadata for PrepareToRelaunchPayload.Key;
    v15 = v5;
    v13[0] = 0;
    sub_2449CF37C();
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);

  }
  else
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  v9 = v17;
  v10 = v18;
  v11 = v19;
  v12 = v20;
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  return result;
}

uint64_t sub_24497EA0C(char a1)
{
  if ((a1 & 1) != 0)
    return 6580592;
  else
    return 0x6B6F547469647561;
}

uint64_t sub_24497EA40()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497EA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PrepareToRelaunchPayload.init(propertyListValue:)(a1, a2);
}

uint64_t sub_24497EA94(char *a1, char *a2)
{
  return sub_24499DDB0(*a1, *a2);
}

uint64_t sub_24497EAA0()
{
  return sub_2449C6C28();
}

uint64_t sub_24497EAA8()
{
  return sub_244922A38();
}

uint64_t sub_24497EAB0()
{
  return sub_2449CC36C();
}

uint64_t sub_24497EAB8@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497EAC4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497EA0C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497EAEC()
{
  sub_24498627C();
  return sub_2449CF670();
}

uint64_t sub_24497EB34()
{
  sub_24498627C();
  return sub_2449CF67C();
}

uint64_t sub_24497EB98(char a1)
{
  return *(_QWORD *)&aDiscrimiauditt_0[8 * a1];
}

uint64_t sub_24497EBB8(char *a1, char *a2)
{
  return sub_24499DD2C(*a1, *a2);
}

uint64_t sub_24497EBC4()
{
  return sub_2449C6CA4();
}

uint64_t sub_24497EBCC()
{
  return sub_2449229F8();
}

uint64_t sub_24497EBD4()
{
  return sub_2449CC3E4();
}

uint64_t sub_24497EBDC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_24497EC10@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497EB98(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497EC38()
{
  char *v0;

  return sub_24497EB98(*v0);
}

uint64_t ProcessID.propertyListValue.getter()
{
  __int128 *v0;
  unint64_t v1;
  _BYTE v3[24];
  ValueMetadata *v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;

  sub_244981334(v0, (uint64_t)&v6);
  v1 = sub_24498138C();
  sub_2449813D0();
  sub_2449CF3E8();
  sub_244981334(v0, (uint64_t)&v7);
  if ((v8 & 1) == 0)
  {
    v4 = &type metadata for ProcessID.Key;
    v5 = v1;
    v3[0] = 1;
    type metadata accessor for audit_token_t(0);
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    sub_2449CFAD8();
  }
  v4 = &type metadata for ProcessID.Key;
  v5 = v1;
  v3[0] = 2;
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t ProcessID.pid.getter()
{
  __int128 *v0;
  uint64_t v2;
  char v3;

  sub_244981334(v0, (uint64_t)&v2);
  if ((v3 & 1) != 0)
    return v2;
  else
    return sub_2449CFAD8();
}

uint64_t ProcessID.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[2];

  result = sub_2449814A0(a1, (uint64_t)v5);
  if (!v2)
    return sub_244981334(v5, a2);
  return result;
}

uint64_t sub_24497EE0C()
{
  __int128 *v0;
  _BYTE v2[36];

  sub_244981334(v0, (uint64_t)v2);
  return ProcessID.propertyListValue.getter();
}

uint64_t sub_24497EE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[2];

  result = sub_2449814A0(a1, (uint64_t)v5);
  if (!v2)
    return sub_244981334(v5, a2);
  return result;
}

void ForwardPayload.messageType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ForwardPayload.messageType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ForwardPayload.messageType.modify())()
{
  return nullsub_1;
}

uint64_t ForwardPayload.messagePayload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ForwardPayload(0) + 20);
  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ForwardPayload.messagePayload.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ForwardPayload(0) + 20);
  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ForwardPayload.messagePayload.modify())()
{
  type metadata accessor for ForwardPayload(0);
  return nullsub_1;
}

uint64_t ForwardPayload.pid.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for ForwardPayload(0) + 24));
}

uint64_t ForwardPayload.pid.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ForwardPayload(0);
  *(_DWORD *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*ForwardPayload.pid.modify())()
{
  type metadata accessor for ForwardPayload(0);
  return nullsub_1;
}

uint64_t ForwardPayload.contentDomain.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ForwardPayload(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t ForwardPayload.contentDomain.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ForwardPayload(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*ForwardPayload.contentDomain.modify())()
{
  type metadata accessor for ForwardPayload(0);
  return nullsub_1;
}

uint64_t ForwardPayload.previewInterfaceOrientation.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ForwardPayload(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ForwardPayload.previewInterfaceOrientation.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ForwardPayload(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*ForwardPayload.previewInterfaceOrientation.modify())()
{
  type metadata accessor for ForwardPayload(0);
  return nullsub_1;
}

uint64_t ForwardPayload.sceneIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ForwardPayload(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ForwardPayload.sceneIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ForwardPayload(0) + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ForwardPayload.sceneIdentifier.modify())()
{
  type metadata accessor for ForwardPayload(0);
  return nullsub_1;
}

uint64_t ForwardPayload.init(messageType:messagePayload:pid:contentDomain:previewInterfaceOrientation:sceneIdentifier:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  char v11;
  char v12;
  char v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t result;

  v11 = *a1;
  v12 = *a4;
  v13 = *a5;
  v14 = (int *)type metadata accessor for ForwardPayload(0);
  v16 = v14[7];
  v15 = v14[8];
  v17 = &a8[v14[9]];
  *a8 = v11;
  v18 = &a8[v14[5]];
  v19 = sub_2449CF400();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a2, v19);
  *(_DWORD *)&a8[v14[6]] = a3;
  a8[v16] = v12;
  a8[v15] = v13;
  *v17 = a6;
  v17[1] = a7;
  return result;
}

uint64_t sub_24497F24C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24497F284 + 4 * byte_2449D74D8[a1]))(0xD000000000000012, 0x80000002449E26E0);
}

uint64_t sub_24497F284()
{
  return 0x546567617373656DLL;
}

uint64_t sub_24497F2A4()
{
  return 0x506567617373656DLL;
}

uint64_t sub_24497F2C8()
{
  return 6580592;
}

uint64_t sub_24497F2D8(uint64_t a1)
{
  return a1 + 9;
}

uint64_t sub_24497F2F0()
{
  return 0x656449656E656373;
}

void sub_24497F314(char *a1)
{
  sub_2449A27CC(*a1);
}

void sub_24497F320()
{
  char *v0;

  sub_2449C6D0C(*v0);
}

void sub_24497F328(uint64_t a1)
{
  char *v1;

  sub_244924EF0(a1, *v1);
}

void sub_24497F330(uint64_t a1)
{
  char *v1;

  sub_2449C9420(a1, *v1);
}

uint64_t sub_24497F338@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449862C0();
  *a1 = result;
  return result;
}

uint64_t sub_24497F364@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497F24C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497F38C()
{
  unsigned __int8 *v0;

  return sub_24497F24C(*v0);
}

uint64_t ForwardPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497F3C0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char *v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[4];
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  int v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v2);
  v28 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1330);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x24BDAC7A8](v5);
  v29 = &v24[-v9];
  v10 = *a1;
  v11 = &v24[*(int *)(v8 + 48) - v9];
  v24[-v9] = 1;
  v12 = (int *)type metadata accessor for ForwardPayload(0);
  v13 = &a1[v12[5]];
  v14 = sub_2449CF400();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v16(v11, v13, v14);
  LODWORD(v13) = *(_DWORD *)&a1[v12[6]];
  v25 = a1[v12[7]];
  v17 = v12[9];
  LOBYTE(v12) = a1[v12[8]];
  v18 = &a1[v17];
  v19 = *(_QWORD *)&a1[v17];
  v26 = *((_QWORD *)v18 + 1);
  v27 = v19;
  v42 = 0;
  v41 = v10;
  v20 = &v7[*(int *)(v4 + 48)];
  *v7 = 1;
  v16(v20, v11, v14);
  v21 = (uint64_t)v28;
  (*(void (**)(_BYTE *, char *, uint64_t))(v15 + 32))(v28, v20, v14);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
  v40 = 1;
  v39 = 2;
  v37 = (int)v13;
  v38 = 0;
  v36 = 3;
  v35 = v25;
  v34 = 4;
  v33 = (char)v12;
  v32 = 5;
  v30 = v27;
  v31 = v26;
  sub_2449816B0();
  sub_2449816F4();
  sub_244981738();
  sub_2449729C4();
  v22 = sub_2449CF5D4();
  sub_244940E8C(v21, &qword_25739F710);
  sub_244940E8C((uint64_t)v29, &qword_2573A1330);
  return v22;
}

uint64_t ForwardPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  uint64_t result;
  int v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  ValueMetadata *v26;
  unint64_t v27;
  int v28;
  unsigned __int8 v29;
  char v30;

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = &type metadata for ForwardPayload.Key;
  v9 = sub_2449816B0();
  v27 = v9;
  v25[0] = 0;
  sub_2449816F4();
  sub_2449CF37C();
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v10 = v30;
    v26 = &type metadata for ForwardPayload.Key;
    v27 = v9;
    v25[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v26 = &type metadata for ForwardPayload.Key;
    v27 = v9;
    v25[0] = 2;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v22 = v28;
    v26 = &type metadata for ForwardPayload.Key;
    v27 = v9;
    v25[0] = 3;
    sub_244981738();
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v21 = v29;
    v26 = &type metadata for ForwardPayload.Key;
    v27 = v9;
    v25[0] = 4;
    sub_2449729C4();
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v20 = v23;
    v26 = &type metadata for ForwardPayload.Key;
    v27 = v9;
    v25[0] = 5;
    sub_2449CF3B8();
    v12 = v20;
    if (v20 == 4)
      v12 = 0;
    v20 = v12;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v18 = v24;
    v19 = v23;
    v13 = (int *)type metadata accessor for ForwardPayload(0);
    v14 = v13[8];
    v17 = v13[7];
    v15 = &a2[v13[9]];
    *a2 = v10;
    result = (*(uint64_t (**)(_BYTE *, char *, uint64_t))(v6 + 32))(&a2[v13[5]], v8, v5);
    *(_DWORD *)&a2[v13[6]] = v22;
    a2[v17] = v21;
    a2[v14] = v20;
    v16 = v18;
    *v15 = v19;
    v15[1] = v16;
  }
  return result;
}

uint64_t sub_24497F98C()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497F9B8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return ForwardPayload.init(propertyListValue:)(a1, a2);
}

uint64_t PurgePayload.workspaceID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PurgePayload.workspaceID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PurgePayload.workspaceID.modify())()
{
  return nullsub_1;
}

uint64_t PurgePayload.killAgents.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t PurgePayload.killAgents.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*PurgePayload.killAgents.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::PurgePayload __swiftcall PurgePayload.init(workspaceID:killAgents:)(Swift::String workspaceID, Swift::Bool killAgents)
{
  uint64_t v2;
  PreviewsMessagingOS::PurgePayload result;

  *(Swift::String *)v2 = workspaceID;
  *(_BYTE *)(v2 + 16) = killAgents;
  result.workspaceID = workspaceID;
  result.killAgents = killAgents;
  return result;
}

uint64_t sub_24497FA68(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6567416C6C696BLL;
  else
    return 0x636170736B726F77;
}

uint64_t sub_24497FAAC(char *a1, char *a2)
{
  return sub_2449A2E3C(*a1, *a2);
}

uint64_t sub_24497FAB8()
{
  return sub_2449C6E24();
}

uint64_t sub_24497FAC0()
{
  return sub_244925208();
}

uint64_t sub_24497FAC8()
{
  return sub_2449C90C0();
}

uint64_t sub_24497FAD0@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497FADC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497FA68(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497FB04()
{
  char *v0;

  return sub_24497FA68(*v0);
}

uint64_t PurgePayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497FB44()
{
  sub_244981788();
  return sub_2449CF604();
}

uint64_t PurgePayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v13 = &type metadata for PurgePayload.Key;
  v5 = sub_244981788();
  v14 = v5;
  v12[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v8 = v15;
    v7 = v16;
    v13 = &type metadata for PurgePayload.Key;
    v14 = v5;
    v12[0] = 1;
    sub_2449CF3B8();
    v10 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v11 = v17 & 1;
    *(_QWORD *)a2 = v8;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = v11;
  }
  return result;
}

uint64_t sub_24497FD08()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497FD40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PurgePayload.init(propertyListValue:)(a1, a2);
}

uint64_t RequestPreviewVariantsPayload.contentCategory.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t RequestPreviewVariantsPayload.contentCategory.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*RequestPreviewVariantsPayload.contentCategory.modify())()
{
  return nullsub_1;
}

uint64_t RequestPreviewVariantsPayload.contentOverride.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t RequestPreviewVariantsPayload.contentOverride.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*RequestPreviewVariantsPayload.contentOverride.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::RequestPreviewVariantsPayload __swiftcall RequestPreviewVariantsPayload.init(contentCategory:contentOverride:)(PreviewsMessagingOS::ContentCategory contentCategory, PreviewsMessagingOS::ContentOverride_optional contentOverride)
{
  uint64_t v2;
  uint64_t v3;
  PreviewsMessagingOS::RequestPreviewVariantsPayload result;

  v3 = *(_QWORD *)(contentCategory.rawValue._countAndFlagsBits + 8);
  *(_QWORD *)v2 = *(_QWORD *)contentCategory.rawValue._countAndFlagsBits;
  *(_QWORD *)(v2 + 8) = v3;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)contentCategory.rawValue._object;
  result.contentOverride = contentOverride;
  result.contentCategory = contentCategory;
  return result;
}

uint64_t sub_24497FE00(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4F746E65746E6F63;
  else
    return 0x43746E65746E6F63;
}

uint64_t sub_24497FE50(char *a1, char *a2)
{
  return sub_24499E0D8(*a1, *a2);
}

uint64_t sub_24497FE5C()
{
  return sub_2449C6EB0();
}

uint64_t sub_24497FE64()
{
  return sub_244922BDC();
}

uint64_t sub_24497FE6C()
{
  return sub_2449CC114();
}

uint64_t sub_24497FE74@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24497FE80@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24497FE00(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24497FEA8()
{
  char *v0;

  return sub_24497FE00(*v0);
}

uint64_t RequestPreviewVariantsPayload.propertyListValue.getter()
{
  return sub_24497FEBC();
}

uint64_t sub_24497FEBC()
{
  return sub_2449CF3D0();
}

uint64_t sub_24497FEEC()
{
  sub_2449817D8();
  sub_2449424D8();
  sub_24494251C();
  return sub_2449CF604();
}

uint64_t RequestPreviewVariantsPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = &type metadata for RequestPreviewVariantsPayload.Key;
  v5 = sub_2449817D8();
  v15 = v5;
  v13[0] = 0;
  sub_2449424D8();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v8 = v16;
    v7 = v17;
    v14 = &type metadata for RequestPreviewVariantsPayload.Key;
    v15 = v5;
    v13[0] = 1;
    sub_24494251C();
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v10 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v11;
    a2[3] = v12;
  }
  return result;
}

uint64_t sub_2449800B8()
{
  return sub_2449800C4();
}

uint64_t sub_2449800C4()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449800F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return RequestPreviewVariantsPayload.init(propertyListValue:)(a1, a2);
}

uint64_t PreviewVariantsPayload.groups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreviewVariantsPayload.groups.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PreviewVariantsPayload.groups.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::PreviewVariantsPayload __swiftcall PreviewVariantsPayload.init(groups:)(PreviewsMessagingOS::PreviewVariantsPayload groups)
{
  PreviewsMessagingOS::PreviewVariantsPayload *v1;

  v1->groups._rawValue = groups.groups._rawValue;
  return groups;
}

uint64_t sub_244980160@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_24498016C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_244980B9C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t PreviewVariantsPayload.propertyListValue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0FF0);
  sub_24498181C();
  sub_244931570(&qword_2573A1000, &qword_2573A0FF0, (uint64_t (*)(void))sub_244981860);
  return sub_2449CF3E8();
}

uint64_t PreviewVariantsPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;

  v8 = &type metadata for PreviewVariantsPayload.Key;
  v9 = sub_24498181C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0FF0);
  sub_244931570(&qword_2573A1000, &qword_2573A0FF0, (uint64_t (*)(void))sub_244981860);
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
    *a2 = v10;
  return result;
}

uint64_t sub_244980314()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0FF0);
  sub_24498181C();
  sub_244931570(&qword_2573A1000, &qword_2573A0FF0, (uint64_t (*)(void))sub_244981860);
  return sub_2449CF3E8();
}

uint64_t sub_2449803A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;

  v8 = &type metadata for PreviewVariantsPayload.Key;
  v9 = sub_24498181C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0FF0);
  sub_244931570(&qword_2573A1000, &qword_2573A0FF0, (uint64_t (*)(void))sub_244981860);
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
    *a2 = v10;
  return result;
}

uint64_t RequestContentOverridePayload.contentCategory.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t RequestContentOverridePayload.contentCategory.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*RequestContentOverridePayload.contentCategory.modify())()
{
  return nullsub_1;
}

uint64_t RequestContentOverridePayload.requestedOverrides.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RequestContentOverridePayload.requestedOverrides.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*RequestContentOverridePayload.requestedOverrides.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::RequestContentOverridePayload __swiftcall RequestContentOverridePayload.init(contentCategory:requestedOverrides:)(PreviewsMessagingOS::ContentCategory contentCategory, Swift::OpaquePointer requestedOverrides)
{
  _QWORD *v2;
  uint64_t v3;
  PreviewsMessagingOS::RequestContentOverridePayload result;

  v3 = *(_QWORD *)(contentCategory.rawValue._countAndFlagsBits + 8);
  *v2 = *(_QWORD *)contentCategory.rawValue._countAndFlagsBits;
  v2[1] = v3;
  v2[2] = contentCategory.rawValue._object;
  result.contentCategory = contentCategory;
  result.requestedOverrides = requestedOverrides;
  return result;
}

uint64_t sub_244980530(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000012;
  else
    return 0x43746E65746E6F63;
}

uint64_t sub_244980578(char *a1, char *a2)
{
  return sub_24499E190(*a1, *a2);
}

uint64_t sub_244980584()
{
  return sub_2449C6F48();
}

uint64_t sub_24498058C()
{
  return sub_244922C4C();
}

uint64_t sub_244980594()
{
  return sub_2449CC088();
}

uint64_t sub_24498059C@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_2449805A8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244980530(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449805D0()
{
  char *v0;

  return sub_244980530(*v0);
}

uint64_t RequestContentOverridePayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_244980610()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1018);
  sub_2449818B0();
  sub_2449424D8();
  sub_244931570(&qword_2573A1020, &qword_2573A1018, (uint64_t (*)(void))sub_24494251C);
  return sub_2449CF604();
}

uint64_t RequestContentOverridePayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = &type metadata for RequestContentOverridePayload.Key;
  v5 = sub_2449818B0();
  v14 = v5;
  v12[0] = 0;
  sub_2449424D8();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v8 = v15;
    v7 = v16;
    v13 = &type metadata for RequestContentOverridePayload.Key;
    v14 = v5;
    v12[0] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1018);
    sub_244931570(&qword_2573A1020, &qword_2573A1018, (uint64_t (*)(void))sub_24494251C);
    sub_2449CF37C();
    v10 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v11 = v17;
    *a2 = v8;
    a2[1] = v7;
    a2[2] = v11;
  }
  return result;
}

uint64_t sub_244980828()
{
  return sub_2449CF3D0();
}

uint64_t sub_244980860@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return RequestContentOverridePayload.init(propertyListValue:)(a1, a2);
}

uint64_t ContentOverridePayload.contentOverride.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ContentOverridePayload.contentOverride.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*ContentOverridePayload.contentOverride.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::ContentOverridePayload __swiftcall ContentOverridePayload.init(contentOverride:)(PreviewsMessagingOS::ContentOverridePayload contentOverride)
{
  _OWORD *v1;

  *v1 = *(_OWORD *)contentOverride.contentOverride.value.rawValue._countAndFlagsBits;
  return contentOverride;
}

uint64_t sub_2449808D8@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_2449808E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_244980B78();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ContentOverridePayload.propertyListValue.getter()
{
  sub_2449818F4();
  sub_24494251C();
  return sub_2449CF3E8();
}

double ContentOverridePayload.init(propertyListValue:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  __int128 v10;

  v8 = &type metadata for ContentOverridePayload.Key;
  v9 = sub_2449818F4();
  sub_24494251C();
  sub_2449CF3B8();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
  {
    result = *(double *)&v10;
    *a2 = v10;
  }
  return result;
}

uint64_t sub_244980A34()
{
  sub_2449818F4();
  sub_24494251C();
  return sub_2449CF3E8();
}

double sub_244980A98@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  __int128 v10;

  v8 = &type metadata for ContentOverridePayload.Key;
  v9 = sub_2449818F4();
  sub_24494251C();
  sub_2449CF3B8();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
  {
    result = *(double *)&v10;
    *a2 = v10;
  }
  return result;
}

uint64_t sub_244980B5C()
{
  return 0x7954656369766564;
}

uint64_t sub_244980B78()
{
  return 0x4F746E65746E6F63;
}

uint64_t sub_244980B9C()
{
  return 0x7370756F7267;
}

uint64_t _s19PreviewsMessagingOS14OSCapabilitiesV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;

  v2 = 0;
  if (*a1 == *a2
    && ((a1[1] ^ a2[1]) & 1) == 0
    && ((a1[2] ^ a2[2]) & 1) == 0
    && ((a1[3] ^ a2[3]) & 1) == 0
    && ((a1[4] ^ a2[4]) & 1) == 0
    && ((a1[5] ^ a2[5]) & 1) == 0
    && ((a1[6] ^ a2[6]) & 1) == 0
    && ((a1[7] ^ a2[7]) & 1) == 0
    && ((a1[8] ^ a2[8]) & 1) == 0)
  {
    v2 = (a2[9] ^ a1[9] | a2[10] ^ a1[10]) ^ 1;
  }
  return v2 & 1;
}

uint64_t _s19PreviewsMessagingOS15AgentDescriptorV6BundleV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;
  BOOL v9;

  v2 = a1[2];
  v3 = a1[3];
  v5 = a2[2];
  v4 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_2449CFCD0(), result = 0, (v7 & 1) != 0))
  {
    if (v3)
    {
      if (v4)
      {
        v9 = v2 == v5 && v3 == v4;
        if (v9 || (sub_2449CFCD0() & 1) != 0)
          return 1;
      }
    }
    else if (!v4)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s19PreviewsMessagingOS15AgentDescriptorV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = a2[2];
  v7 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_2449CFCD0(), result = 0, (v10 & 1) != 0))
  {
    if (v2 == v6 && v4 == v7 || (sub_2449CFCD0() & 1) != 0)
    {
      if (v5)
      {
        if (v8 && (v3 == v9 && v5 == v8 || (sub_2449CFCD0() & 1) != 0))
          return 1;
      }
      else if (!v8)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t _s19PreviewsMessagingOS14ServiceMessageV0E4TypeO8rawValueAESgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 0xD)
    return 13;
  else
    return v0;
}

uint64_t sub_244980E3C()
{
  return sub_24497AB64();
}

unint64_t sub_244980E44()
{
  unint64_t result;

  result = qword_2573A0F28;
  if (!qword_2573A0F28)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for AgentDescriptor.Bundle, &type metadata for AgentDescriptor.Bundle);
    atomic_store(result, (unint64_t *)&qword_2573A0F28);
  }
  return result;
}

unint64_t sub_244980E88()
{
  unint64_t result;

  result = qword_2573A0F30;
  if (!qword_2573A0F30)
  {
    result = MEMORY[0x24951C158](&unk_2449D936C, &type metadata for AgentDescriptor.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0F30);
  }
  return result;
}

uint64_t sub_244980ECC()
{
  return sub_24497B6BC();
}

unint64_t sub_244980ED8()
{
  unint64_t result;

  result = qword_2573A0F38;
  if (!qword_2573A0F38)
  {
    result = MEMORY[0x24951C158](&unk_2449D9344, &type metadata for AgentDescriptor.Bundle.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0F38);
  }
  return result;
}

unint64_t sub_244980F1C()
{
  unint64_t result;

  result = qword_2573A0F40;
  if (!qword_2573A0F40)
  {
    result = MEMORY[0x24951C158](&unk_2449D92AC, &type metadata for AgentDescriptor.Bundle.MissingPathError);
    atomic_store(result, (unint64_t *)&qword_2573A0F40);
  }
  return result;
}

uint64_t sub_244980F60()
{
  return sub_24497CA10();
}

unint64_t sub_244980F68()
{
  unint64_t result;

  result = qword_2573A0F48;
  if (!qword_2573A0F48)
  {
    result = MEMORY[0x24951C158](&unk_2449D9284, &type metadata for LaunchPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0F48);
  }
  return result;
}

unint64_t sub_244980FAC()
{
  unint64_t result;

  result = qword_2573A0F50;
  if (!qword_2573A0F50)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for AgentDescriptor, &type metadata for AgentDescriptor);
    atomic_store(result, (unint64_t *)&qword_2573A0F50);
  }
  return result;
}

unint64_t sub_244980FF0()
{
  unint64_t result;

  result = qword_2573A0F58;
  if (!qword_2573A0F58)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewAgentRole, &type metadata for PreviewAgentRole);
    atomic_store(result, (unint64_t *)&qword_2573A0F58);
  }
  return result;
}

unint64_t sub_244981034()
{
  unint64_t result;

  result = qword_2573A0F60;
  if (!qword_2573A0F60)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewAgentBootstrapMode, &type metadata for PreviewAgentBootstrapMode);
    atomic_store(result, (unint64_t *)&qword_2573A0F60);
  }
  return result;
}

unint64_t sub_244981078()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[3];

  result = qword_2573A0F70;
  if (!qword_2573A0F70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573A0F68);
    v2[0] = MEMORY[0x24BE76CC0];
    v2[1] = MEMORY[0x24BE76CC0];
    v2[2] = MEMORY[0x24BEE0D10];
    result = MEMORY[0x24951C158](MEMORY[0x24BE76CA8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2573A0F70);
  }
  return result;
}

unint64_t sub_2449810E0()
{
  unint64_t result;

  result = qword_2573A0F78;
  if (!qword_2573A0F78)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ProcessType, &type metadata for ProcessType);
    atomic_store(result, (unint64_t *)&qword_2573A0F78);
  }
  return result;
}

unint64_t sub_244981124()
{
  unint64_t result;

  result = qword_2573A0F80;
  if (!qword_2573A0F80)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BinaryType, &type metadata for BinaryType);
    atomic_store(result, (unint64_t *)&qword_2573A0F80);
  }
  return result;
}

uint64_t sub_244981168()
{
  return sub_24497D2EC();
}

unint64_t sub_244981170()
{
  unint64_t result;

  result = qword_2573A0F88;
  if (!qword_2573A0F88)
  {
    result = MEMORY[0x24951C158](&unk_2449D925C, &type metadata for BinaryType.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0F88);
  }
  return result;
}

_OWORD *sub_2449811B4(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

unint64_t sub_2449811D0()
{
  unint64_t result;

  result = qword_2573A0F90;
  if (!qword_2573A0F90)
  {
    result = MEMORY[0x24951C158](&unk_2449D9234, &type metadata for DeviceType.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0F90);
  }
  return result;
}

unint64_t sub_244981214()
{
  unint64_t result;

  result = qword_2573A0F98;
  if (!qword_2573A0F98)
  {
    result = MEMORY[0x24951C158](&unk_2449D91F4, &type metadata for DeviceType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0F98);
  }
  return result;
}

unint64_t sub_244981258()
{
  unint64_t result;

  result = qword_2573A0FA0;
  if (!qword_2573A0FA0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for SimulatorDevicePayload, &type metadata for SimulatorDevicePayload);
    atomic_store(result, (unint64_t *)&qword_2573A0FA0);
  }
  return result;
}

uint64_t sub_24498129C()
{
  uint64_t v0;

  return sub_24497E238(*(uint64_t **)(v0 + 16));
}

unint64_t sub_2449812A4()
{
  unint64_t result;

  result = qword_2573A0FA8;
  if (!qword_2573A0FA8)
  {
    result = MEMORY[0x24951C158](&unk_2449D91CC, &type metadata for SimulatorDevicePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0FA8);
  }
  return result;
}

uint64_t sub_2449812E8()
{
  return sub_24497E80C();
}

unint64_t sub_2449812F0()
{
  unint64_t result;

  result = qword_2573A0FB0;
  if (!qword_2573A0FB0)
  {
    result = MEMORY[0x24951C158](&unk_2449D91A4, &type metadata for PrepareToRelaunchPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0FB0);
  }
  return result;
}

uint64_t sub_244981334(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_24498134C(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  __int128 *v4;
  uint64_t result;
  _BYTE v6[36];

  v4 = *(__int128 **)(v2 + 16);
  *a1 = 0;
  result = sub_244981334(v4, (uint64_t)v6);
  *a2 = v6[32];
  return result;
}

unint64_t sub_24498138C()
{
  unint64_t result;

  result = qword_2573A0FB8;
  if (!qword_2573A0FB8)
  {
    result = MEMORY[0x24951C158](&unk_2449D917C, &type metadata for ProcessID.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0FB8);
  }
  return result;
}

unint64_t sub_2449813D0()
{
  unint64_t result;

  result = qword_2573A0FC0;
  if (!qword_2573A0FC0)
  {
    result = MEMORY[0x24951C158](&unk_2449D913C, &type metadata for ProcessID.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A0FC0);
  }
  return result;
}

uint64_t sub_244981414()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 0xA)
    return 10;
  else
    return v0;
}

uint64_t sub_244981458()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_2449814A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[24];
  ValueMetadata *v16;
  unint64_t v17;

  v16 = &type metadata for ProcessID.Key;
  v5 = sub_24498138C();
  v17 = v5;
  v15[0] = 0;
  sub_2449813D0();
  sub_2449CF37C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    v16 = &type metadata for ProcessID.Key;
    v17 = v5;
    v15[0] = 2;
    sub_2449CF37C();
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);

LABEL_6:
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    LODWORD(v11) = v13;
    v12 = 0uLL;
    v10 = 1;
    goto LABEL_7;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v13 & 1) != 0)
  {
    v16 = &type metadata for ProcessID.Key;
    v17 = v5;
    v15[0] = 2;
    sub_2449CF37C();
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    goto LABEL_6;
  }
  v16 = &type metadata for ProcessID.Key;
  v17 = v5;
  v15[0] = 1;
  type metadata accessor for audit_token_t(0);
  sub_2449CF37C();
  v8 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  v10 = 0;
  v11 = v13;
  v12 = v14;
LABEL_7:
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 32) = v10;
  return result;
}

uint64_t sub_2449816A8()
{
  uint64_t v0;

  return sub_24497F3C0(*(char **)(v0 + 16));
}

unint64_t sub_2449816B0()
{
  unint64_t result;

  result = qword_2573A0FC8;
  if (!qword_2573A0FC8)
  {
    result = MEMORY[0x24951C158](&unk_2449D9114, &type metadata for ForwardPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0FC8);
  }
  return result;
}

unint64_t sub_2449816F4()
{
  unint64_t result;

  result = qword_2573A0FD0;
  if (!qword_2573A0FD0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for AgentMessageType, &type metadata for AgentMessageType);
    atomic_store(result, (unint64_t *)&qword_2573A0FD0);
  }
  return result;
}

unint64_t sub_244981738()
{
  unint64_t result;

  result = qword_2573A0FD8;
  if (!qword_2573A0FD8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewContentDomain, &type metadata for PreviewContentDomain);
    atomic_store(result, (unint64_t *)&qword_2573A0FD8);
  }
  return result;
}

uint64_t sub_24498177C()
{
  return sub_24497FB44();
}

unint64_t sub_244981788()
{
  unint64_t result;

  result = qword_2573A0FE0;
  if (!qword_2573A0FE0)
  {
    result = MEMORY[0x24951C158](&unk_2449D90EC, &type metadata for PurgePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0FE0);
  }
  return result;
}

uint64_t sub_2449817CC()
{
  return sub_24497FEEC();
}

unint64_t sub_2449817D8()
{
  unint64_t result;

  result = qword_2573A0FE8;
  if (!qword_2573A0FE8)
  {
    result = MEMORY[0x24951C158](&unk_2449D90C4, &type metadata for RequestPreviewVariantsPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0FE8);
  }
  return result;
}

unint64_t sub_24498181C()
{
  unint64_t result;

  result = qword_2573A0FF8;
  if (!qword_2573A0FF8)
  {
    result = MEMORY[0x24951C158](&unk_2449D909C, &type metadata for PreviewVariantsPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A0FF8);
  }
  return result;
}

unint64_t sub_244981860()
{
  unint64_t result;

  result = qword_2573A1008;
  if (!qword_2573A1008)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewVariantGroup, &type metadata for PreviewVariantGroup);
    atomic_store(result, (unint64_t *)&qword_2573A1008);
  }
  return result;
}

uint64_t sub_2449818A4()
{
  return sub_244980610();
}

unint64_t sub_2449818B0()
{
  unint64_t result;

  result = qword_2573A1010;
  if (!qword_2573A1010)
  {
    result = MEMORY[0x24951C158](&unk_2449D9074, &type metadata for RequestContentOverridePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1010);
  }
  return result;
}

unint64_t sub_2449818F4()
{
  unint64_t result;

  result = qword_2573A1028;
  if (!qword_2573A1028)
  {
    result = MEMORY[0x24951C158](&unk_2449D904C, &type metadata for ContentOverridePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1028);
  }
  return result;
}

unint64_t sub_24498193C()
{
  unint64_t result;

  result = qword_2573A1048;
  if (!qword_2573A1048)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ServiceMessage.MessageType, &type metadata for ServiceMessage.MessageType);
    atomic_store(result, (unint64_t *)&qword_2573A1048);
  }
  return result;
}

unint64_t sub_244981984()
{
  unint64_t result;

  result = qword_2573A1050;
  if (!qword_2573A1050)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for AgentDescriptor, &type metadata for AgentDescriptor);
    atomic_store(result, (unint64_t *)&qword_2573A1050);
  }
  return result;
}

unint64_t sub_2449819CC()
{
  unint64_t result;

  result = qword_2573A1058;
  if (!qword_2573A1058)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for AgentDescriptor.Bundle, &type metadata for AgentDescriptor.Bundle);
    atomic_store(result, (unint64_t *)&qword_2573A1058);
  }
  return result;
}

unint64_t sub_244981A14()
{
  unint64_t result;

  result = qword_2573A1060;
  if (!qword_2573A1060)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewAgentRole, &type metadata for PreviewAgentRole);
    atomic_store(result, (unint64_t *)&qword_2573A1060);
  }
  return result;
}

unint64_t sub_244981A5C()
{
  unint64_t result;

  result = qword_2573A1068;
  if (!qword_2573A1068)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewAgentBootstrapMode, &type metadata for PreviewAgentBootstrapMode);
    atomic_store(result, (unint64_t *)&qword_2573A1068);
  }
  return result;
}

unint64_t sub_244981AA4()
{
  unint64_t result;

  result = qword_2573A1070;
  if (!qword_2573A1070)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ProcessType, &type metadata for ProcessType);
    atomic_store(result, (unint64_t *)&qword_2573A1070);
  }
  return result;
}

unint64_t sub_244981AEC()
{
  unint64_t result;

  result = qword_2573A1078;
  if (!qword_2573A1078)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for DeviceType, &type metadata for DeviceType);
    atomic_store(result, (unint64_t *)&qword_2573A1078);
  }
  return result;
}

ValueMetadata *type metadata accessor for PreviewServiceInterface()
{
  return &type metadata for PreviewServiceInterface;
}

uint64_t *initializeBufferWithCopyOfBuffer for ServiceMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *updated;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  uint64_t v55;
  char *v56;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (uint64_t *)((char *)a2 + v6);
    v9 = type metadata accessor for ServiceMessage.Content(0);
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v10 = v8[1];
        *(_QWORD *)v7 = *v8;
        *((_QWORD *)v7 + 1) = v10;
        v11 = v8[3];
        *((_QWORD *)v7 + 2) = v8[2];
        *((_QWORD *)v7 + 3) = v11;
        v12 = v8[5];
        *((_QWORD *)v7 + 4) = v8[4];
        *((_QWORD *)v7 + 5) = v12;
        v13 = v8[7];
        *((_QWORD *)v7 + 6) = v8[6];
        *((_QWORD *)v7 + 7) = v13;
        v7[64] = *((_BYTE *)v8 + 64);
        v7[65] = *((_BYTE *)v8 + 65);
        v14 = v8[10];
        *((_QWORD *)v7 + 9) = v8[9];
        *((_QWORD *)v7 + 10) = v14;
        v7[88] = *((_BYTE *)v8 + 88);
        *(_QWORD *)(v7 + 92) = *(_QWORD *)((char *)v8 + 92);
        *((_QWORD *)v7 + 13) = v8[13];
        v55 = v8[15];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v55)
        {
          *((_QWORD *)v7 + 14) = v8[14];
          *((_QWORD *)v7 + 15) = v55;
          *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
          v15 = v8[19];
          *((_QWORD *)v7 + 18) = v8[18];
          *((_QWORD *)v7 + 19) = v15;
          v16 = v8[20];
          v17 = v8[21];
          *((_QWORD *)v7 + 20) = v16;
          *((_QWORD *)v7 + 21) = v17;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v52 = *((_OWORD *)v8 + 8);
          *((_OWORD *)v7 + 7) = *((_OWORD *)v8 + 7);
          *((_OWORD *)v7 + 8) = v52;
          v53 = *((_OWORD *)v8 + 10);
          *((_OWORD *)v7 + 9) = *((_OWORD *)v8 + 9);
          *((_OWORD *)v7 + 10) = v53;
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v20 = v8[1];
        *(_QWORD *)v7 = *v8;
        *((_QWORD *)v7 + 1) = v20;
        v21 = v8[3];
        *((_QWORD *)v7 + 2) = v8[2];
        *((_QWORD *)v7 + 3) = v21;
        v22 = v8[4];
        v23 = v8[5];
        *((_QWORD *)v7 + 4) = v22;
        *((_QWORD *)v7 + 5) = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *v7 = *(_BYTE *)v8;
        v24 = (int *)type metadata accessor for ForwardPayload(0);
        v25 = v24[5];
        v26 = &v7[v25];
        v27 = (char *)v8 + v25;
        v28 = sub_2449CF400();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
        *(_DWORD *)&v7[v24[6]] = *(_DWORD *)((char *)v8 + v24[6]);
        v7[v24[7]] = *((_BYTE *)v8 + v24[7]);
        v7[v24[8]] = *((_BYTE *)v8 + v24[8]);
        v29 = v24[9];
        v30 = &v7[v29];
        v31 = (_QWORD *)((char *)v8 + v29);
        v32 = v31[1];
        *(_QWORD *)v30 = *v31;
        *((_QWORD *)v30 + 1) = v32;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(_DWORD *)v7 = *(_DWORD *)v8;
        *((_QWORD *)v7 + 1) = v8[1];
        v7[16] = *((_BYTE *)v8 + 16);
        v33 = v8 + 3;
        v34 = v8[4];
        if (v34 > 4)
        {
          *((_QWORD *)v7 + 3) = *v33;
          *((_QWORD *)v7 + 4) = v34;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v7 + 24) = *(_OWORD *)v33;
        }
        v35 = v8[6];
        *((_QWORD *)v7 + 5) = v8[5];
        *((_QWORD *)v7 + 6) = v35;
        v36 = v8[8];
        *((_QWORD *)v7 + 7) = v8[7];
        *((_QWORD *)v7 + 8) = v36;
        v37 = v8[10];
        *((_QWORD *)v7 + 9) = v8[9];
        *((_QWORD *)v7 + 10) = v37;
        updated = (int *)type metadata accessor for ShellUpdatePayload();
        v39 = updated[10];
        v54 = (char *)v8 + v39;
        v56 = &v7[v39];
        v40 = sub_2449CF400();
        v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v41(v56, v54, v40);
        *(_QWORD *)&v7[updated[11]] = *(_QWORD *)((char *)v8 + updated[11]);
        v42 = updated[12];
        v43 = &v7[v42];
        v44 = (char *)v8 + v42;
        *(_QWORD *)v43 = *(_QWORD *)v44;
        v43[8] = v44[8];
        v45 = *((_QWORD *)v44 + 3);
        *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
        *((_QWORD *)v43 + 3) = v45;
        v46 = *((_QWORD *)v44 + 5);
        *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
        *((_QWORD *)v43 + 5) = v46;
        *(_QWORD *)&v7[updated[13]] = *(_QWORD *)((char *)v8 + updated[13]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        v47 = v8[1];
        *(_QWORD *)v7 = *v8;
        *((_QWORD *)v7 + 1) = v47;
        v7[16] = *((_BYTE *)v8 + 16);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v48 = v8[1];
        *(_QWORD *)v7 = *v8;
        *((_QWORD *)v7 + 1) = v48;
        v49 = v8[2];
        v50 = v8[3];
        *((_QWORD *)v7 + 2) = v49;
        *((_QWORD *)v7 + 3) = v50;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        v51 = v8[1];
        *(_QWORD *)v7 = *v8;
        *((_QWORD *)v7 + 1) = v51;
        *((_QWORD *)v7 + 2) = v8[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        break;
    }
  }
  return v3;
}

uint64_t destroy for ServiceMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for ServiceMessage.Content(0);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = *(_QWORD *)(v4 + 120);
      if (result)
        goto LABEL_3;
      return result;
    case 1:
LABEL_3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 3:
      v6 = v4 + *(int *)(type metadata accessor for ForwardPayload(0) + 20);
      v7 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      goto LABEL_10;
    case 4:
      if (*(_QWORD *)(v4 + 32) >= 5uLL)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v4 + *(int *)(type metadata accessor for ShellUpdatePayload() + 40);
      v9 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 7:
      goto LABEL_10;
    case 8:
    case 9:
      swift_bridgeObjectRelease();
LABEL_10:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for ServiceMessage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *updated;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  char *v52;
  uint64_t v53;
  char *v54;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (_QWORD *)((char *)a2 + v5);
  v8 = type metadata accessor for ServiceMessage.Content(0);
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v9 = v7[1];
      *(_QWORD *)v6 = *v7;
      *((_QWORD *)v6 + 1) = v9;
      v10 = v7[3];
      *((_QWORD *)v6 + 2) = v7[2];
      *((_QWORD *)v6 + 3) = v10;
      v11 = v7[5];
      *((_QWORD *)v6 + 4) = v7[4];
      *((_QWORD *)v6 + 5) = v11;
      v12 = v7[7];
      *((_QWORD *)v6 + 6) = v7[6];
      *((_QWORD *)v6 + 7) = v12;
      v6[64] = *((_BYTE *)v7 + 64);
      v6[65] = *((_BYTE *)v7 + 65);
      v13 = v7[10];
      *((_QWORD *)v6 + 9) = v7[9];
      *((_QWORD *)v6 + 10) = v13;
      v6[88] = *((_BYTE *)v7 + 88);
      *(_QWORD *)(v6 + 92) = *(_QWORD *)((char *)v7 + 92);
      *((_QWORD *)v6 + 13) = v7[13];
      v53 = v7[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v53)
      {
        *((_QWORD *)v6 + 14) = v7[14];
        *((_QWORD *)v6 + 15) = v53;
        *((_OWORD *)v6 + 8) = *((_OWORD *)v7 + 8);
        v14 = v7[19];
        *((_QWORD *)v6 + 18) = v7[18];
        *((_QWORD *)v6 + 19) = v14;
        v15 = v7[20];
        v16 = v7[21];
        *((_QWORD *)v6 + 20) = v15;
        *((_QWORD *)v6 + 21) = v16;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v49 = *((_OWORD *)v7 + 8);
        *((_OWORD *)v6 + 7) = *((_OWORD *)v7 + 7);
        *((_OWORD *)v6 + 8) = v49;
        v50 = *((_OWORD *)v7 + 10);
        *((_OWORD *)v6 + 9) = *((_OWORD *)v7 + 9);
        *((_OWORD *)v6 + 10) = v50;
      }
      goto LABEL_14;
    case 1u:
      v17 = v7[1];
      *(_QWORD *)v6 = *v7;
      *((_QWORD *)v6 + 1) = v17;
      v18 = v7[3];
      *((_QWORD *)v6 + 2) = v7[2];
      *((_QWORD *)v6 + 3) = v18;
      v19 = v7[4];
      v20 = v7[5];
      *((_QWORD *)v6 + 4) = v19;
      *((_QWORD *)v6 + 5) = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 3u:
      *v6 = *(_BYTE *)v7;
      v21 = (int *)type metadata accessor for ForwardPayload(0);
      v22 = v21[5];
      v23 = &v6[v22];
      v24 = (char *)v7 + v22;
      v25 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      *(_DWORD *)&v6[v21[6]] = *(_DWORD *)((char *)v7 + v21[6]);
      v6[v21[7]] = *((_BYTE *)v7 + v21[7]);
      v6[v21[8]] = *((_BYTE *)v7 + v21[8]);
      v26 = v21[9];
      v27 = &v6[v26];
      v28 = (_QWORD *)((char *)v7 + v26);
      v29 = v28[1];
      *(_QWORD *)v27 = *v28;
      *((_QWORD *)v27 + 1) = v29;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 4u:
      *(_DWORD *)v6 = *(_DWORD *)v7;
      *((_QWORD *)v6 + 1) = v7[1];
      v6[16] = *((_BYTE *)v7 + 16);
      v30 = v7 + 3;
      v31 = v7[4];
      if (v31 > 4)
      {
        *((_QWORD *)v6 + 3) = *v30;
        *((_QWORD *)v6 + 4) = v31;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v6 + 24) = *(_OWORD *)v30;
      }
      v32 = v7[6];
      *((_QWORD *)v6 + 5) = v7[5];
      *((_QWORD *)v6 + 6) = v32;
      v33 = v7[8];
      *((_QWORD *)v6 + 7) = v7[7];
      *((_QWORD *)v6 + 8) = v33;
      v34 = v7[10];
      *((_QWORD *)v6 + 9) = v7[9];
      *((_QWORD *)v6 + 10) = v34;
      updated = (int *)type metadata accessor for ShellUpdatePayload();
      v36 = updated[10];
      v52 = (char *)v7 + v36;
      v54 = &v6[v36];
      v37 = sub_2449CF400();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v54, v52, v37);
      *(_QWORD *)&v6[updated[11]] = *(_QWORD *)((char *)v7 + updated[11]);
      v39 = updated[12];
      v40 = &v6[v39];
      v41 = (char *)v7 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = *((_QWORD *)v41 + 3);
      *((_QWORD *)v40 + 2) = *((_QWORD *)v41 + 2);
      *((_QWORD *)v40 + 3) = v42;
      v43 = *((_QWORD *)v41 + 5);
      *((_QWORD *)v40 + 4) = *((_QWORD *)v41 + 4);
      *((_QWORD *)v40 + 5) = v43;
      *(_QWORD *)&v6[updated[13]] = *(_QWORD *)((char *)v7 + updated[13]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 7u:
      v44 = v7[1];
      *(_QWORD *)v6 = *v7;
      *((_QWORD *)v6 + 1) = v44;
      v6[16] = *((_BYTE *)v7 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 8u:
      v45 = v7[1];
      *(_QWORD *)v6 = *v7;
      *((_QWORD *)v6 + 1) = v45;
      v46 = v7[2];
      v47 = v7[3];
      *((_QWORD *)v6 + 2) = v46;
      *((_QWORD *)v6 + 3) = v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 9u:
      v48 = v7[1];
      *(_QWORD *)v6 = *v7;
      *((_QWORD *)v6 + 1) = v48;
      *((_QWORD *)v6 + 2) = v7[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for ServiceMessage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *updated;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v30;
  uint64_t v31;
  char *v32;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_2449299E4((uint64_t)a1 + v6, type metadata accessor for ServiceMessage.Content);
    v9 = type metadata accessor for ServiceMessage.Content(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
        *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
        *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        v7[64] = v8[64];
        v7[65] = v8[65];
        *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
        *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
        v7[88] = v8[88];
        *(_QWORD *)(v7 + 92) = *(_QWORD *)(v8 + 92);
        *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);
        v31 = *((_QWORD *)v8 + 15);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v31)
        {
          *((_QWORD *)v7 + 14) = *((_QWORD *)v8 + 14);
          *((_QWORD *)v7 + 15) = *((_QWORD *)v8 + 15);
          *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
          *((_QWORD *)v7 + 18) = *((_QWORD *)v8 + 18);
          *((_QWORD *)v7 + 19) = *((_QWORD *)v8 + 19);
          *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
          *((_QWORD *)v7 + 21) = *((_QWORD *)v8 + 21);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v26 = *((_OWORD *)v8 + 7);
          v27 = *((_OWORD *)v8 + 8);
          v28 = *((_OWORD *)v8 + 10);
          *((_OWORD *)v7 + 9) = *((_OWORD *)v8 + 9);
          *((_OWORD *)v7 + 10) = v28;
          *((_OWORD *)v7 + 7) = v26;
          *((_OWORD *)v7 + 8) = v27;
        }
        goto LABEL_16;
      case 1u:
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
        *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
        *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 3u:
        *v7 = *v8;
        v10 = (int *)type metadata accessor for ForwardPayload(0);
        v11 = v10[5];
        v12 = &v7[v11];
        v13 = &v8[v11];
        v14 = sub_2449CF400();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        *(_DWORD *)&v7[v10[6]] = *(_DWORD *)&v8[v10[6]];
        v7[v10[7]] = v8[v10[7]];
        v7[v10[8]] = v8[v10[8]];
        v15 = v10[9];
        v16 = &v7[v15];
        v17 = &v8[v15];
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 4u:
        *(_DWORD *)v7 = *(_DWORD *)v8;
        v18 = *((_QWORD *)v8 + 1);
        v7[16] = v8[16];
        *((_QWORD *)v7 + 1) = v18;
        if (*((_QWORD *)v8 + 4) <= 4uLL)
        {
          *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
        }
        else
        {
          *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
          *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
          swift_bridgeObjectRetain();
        }
        *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
        *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
        *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
        *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
        *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
        updated = (int *)type metadata accessor for ShellUpdatePayload();
        v20 = updated[10];
        v30 = &v8[v20];
        v32 = &v7[v20];
        v21 = sub_2449CF400();
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22(v32, v30, v21);
        *(_QWORD *)&v7[updated[11]] = *(_QWORD *)&v8[updated[11]];
        v23 = updated[12];
        v24 = &v7[v23];
        v25 = &v8[v23];
        *(_QWORD *)v24 = *(_QWORD *)v25;
        v24[8] = v25[8];
        *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
        *((_QWORD *)v24 + 3) = *((_QWORD *)v25 + 3);
        *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
        *((_QWORD *)v24 + 5) = *((_QWORD *)v25 + 5);
        *(_QWORD *)&v7[updated[13]] = *(_QWORD *)&v8[updated[13]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 7u:
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
        v7[16] = v8[16];
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 8u:
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
        *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
        *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 9u:
        *(_QWORD *)v7 = *(_QWORD *)v8;
        *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
        *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for ServiceMessage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *updated;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ServiceMessage.Content(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    *(_DWORD *)v5 = *(_DWORD *)v6;
    *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
    v5[16] = v6[16];
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v6 + 40);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(v6 + 56);
    *(_OWORD *)(v5 + 72) = *(_OWORD *)(v6 + 72);
    updated = (int *)type metadata accessor for ShellUpdatePayload();
    v15 = updated[10];
    v16 = &v5[v15];
    v17 = &v6[v15];
    v18 = sub_2449CF400();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    *(_QWORD *)&v5[updated[11]] = *(_QWORD *)&v6[updated[11]];
    v19 = updated[12];
    v20 = &v5[v19];
    v21 = &v6[v19];
    v22 = *((_OWORD *)v21 + 2);
    v23 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = *((_OWORD *)v21 + 1);
    *((_OWORD *)v20 + 2) = v22;
    *(_OWORD *)v20 = v23;
    *(_QWORD *)&v5[updated[13]] = *(_QWORD *)&v6[updated[13]];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 3)
  {
    *v5 = *v6;
    v9 = (int *)type metadata accessor for ForwardPayload(0);
    v10 = v9[5];
    v11 = &v5[v10];
    v12 = &v6[v10];
    v13 = sub_2449CF400();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    *(_DWORD *)&v5[v9[6]] = *(_DWORD *)&v6[v9[6]];
    v5[v9[7]] = v6[v9[7]];
    v5[v9[8]] = v6[v9[8]];
    *(_OWORD *)&v5[v9[9]] = *(_OWORD *)&v6[v9[9]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for ServiceMessage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int *updated;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_2449299E4((uint64_t)a1 + v7, type metadata accessor for ServiceMessage.Content);
    v10 = type metadata accessor for ServiceMessage.Content(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *((_QWORD *)v8 + 1) = *((_QWORD *)v9 + 1);
      v8[16] = v9[16];
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
      updated = (int *)type metadata accessor for ShellUpdatePayload();
      v18 = updated[10];
      v19 = &v8[v18];
      v20 = &v9[v18];
      v21 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      *(_QWORD *)&v8[updated[11]] = *(_QWORD *)&v9[updated[11]];
      v22 = updated[12];
      v23 = &v8[v22];
      v24 = &v9[v22];
      v25 = *((_OWORD *)v24 + 2);
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = *((_OWORD *)v24 + 1);
      *((_OWORD *)v23 + 2) = v25;
      *(_OWORD *)v23 = v26;
      *(_QWORD *)&v8[updated[13]] = *(_QWORD *)&v9[updated[13]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 3)
    {
      *v8 = *v9;
      v12 = (int *)type metadata accessor for ForwardPayload(0);
      v13 = v12[5];
      v14 = &v8[v13];
      v15 = &v9[v13];
      v16 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_DWORD *)&v8[v12[6]] = *(_DWORD *)&v9[v12[6]];
      v8[v12[7]] = v9[v12[7]];
      v8[v12[8]] = v9[v12[8]];
      *(_OWORD *)&v8[v12[9]] = *(_OWORD *)&v9[v12[9]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ServiceMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244982E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for ServiceMessage.Content(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ServiceMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244982F0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for ServiceMessage.Content(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_244982F80()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ServiceMessage.Content(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ServiceMessage.MessageType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ServiceMessage.MessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_2449830D0 + 4 * byte_2449D750B[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_244983104 + 4 * byte_2449D7506[v4]))();
}

uint64_t sub_244983104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24498310C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244983114);
  return result;
}

uint64_t sub_244983120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244983128);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_24498312C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244983134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServiceMessage.MessageType()
{
  return &type metadata for ServiceMessage.MessageType;
}

char *initializeBufferWithCopyOfBuffer for ServiceMessage.Content(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *updated;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  char *v53;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v7;
        v8 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v8;
        v9 = a2[5];
        *((_QWORD *)a1 + 4) = a2[4];
        *((_QWORD *)a1 + 5) = v9;
        v10 = a2[7];
        *((_QWORD *)a1 + 6) = a2[6];
        *((_QWORD *)a1 + 7) = v10;
        a1[64] = *((_BYTE *)a2 + 64);
        a1[65] = *((_BYTE *)a2 + 65);
        v11 = a2[10];
        *((_QWORD *)a1 + 9) = a2[9];
        *((_QWORD *)a1 + 10) = v11;
        a1[88] = *((_BYTE *)a2 + 88);
        *(_QWORD *)(a1 + 92) = *(_QWORD *)((char *)a2 + 92);
        *((_QWORD *)a1 + 13) = a2[13];
        v12 = a2[15];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v12)
        {
          *((_QWORD *)a1 + 14) = a2[14];
          *((_QWORD *)a1 + 15) = v12;
          *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
          v13 = a2[19];
          *((_QWORD *)a1 + 18) = a2[18];
          *((_QWORD *)a1 + 19) = v13;
          v14 = a2[20];
          v15 = a2[21];
          *((_QWORD *)a1 + 20) = v14;
          *((_QWORD *)a1 + 21) = v15;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v51 = *((_OWORD *)a2 + 8);
          *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
          *((_OWORD *)a1 + 8) = v51;
          v52 = *((_OWORD *)a2 + 10);
          *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
          *((_OWORD *)a1 + 10) = v52;
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v18 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v18;
        v19 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v19;
        v20 = a2[4];
        v21 = a2[5];
        *((_QWORD *)a1 + 4) = v20;
        *((_QWORD *)a1 + 5) = v21;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1 = *(_BYTE *)a2;
        v22 = (int *)type metadata accessor for ForwardPayload(0);
        v23 = v22[5];
        v24 = &a1[v23];
        v25 = (char *)a2 + v23;
        v26 = sub_2449CF400();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
        *(_DWORD *)&a1[v22[6]] = *(_DWORD *)((char *)a2 + v22[6]);
        a1[v22[7]] = *((_BYTE *)a2 + v22[7]);
        a1[v22[8]] = *((_BYTE *)a2 + v22[8]);
        v27 = v22[9];
        v28 = &a1[v27];
        v29 = (_QWORD *)((char *)a2 + v27);
        v30 = v29[1];
        *(_QWORD *)v28 = *v29;
        *((_QWORD *)v28 + 1) = v30;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_QWORD *)a1 + 1) = a2[1];
        a1[16] = *((_BYTE *)a2 + 16);
        v31 = a2 + 3;
        v32 = a2[4];
        if (v32 > 4)
        {
          *((_QWORD *)a1 + 3) = *v31;
          *((_QWORD *)a1 + 4) = v32;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)v31;
        }
        v33 = a2[6];
        *((_QWORD *)a1 + 5) = a2[5];
        *((_QWORD *)a1 + 6) = v33;
        v34 = a2[8];
        *((_QWORD *)a1 + 7) = a2[7];
        *((_QWORD *)a1 + 8) = v34;
        v35 = a2[10];
        *((_QWORD *)a1 + 9) = a2[9];
        *((_QWORD *)a1 + 10) = v35;
        updated = (int *)type metadata accessor for ShellUpdatePayload();
        v37 = updated[10];
        v53 = &a1[v37];
        v38 = (char *)a2 + v37;
        v39 = sub_2449CF400();
        v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40(v53, v38, v39);
        *(_QWORD *)&a1[updated[11]] = *(_QWORD *)((char *)a2 + updated[11]);
        v41 = updated[12];
        v42 = &a1[v41];
        v43 = (char *)a2 + v41;
        *(_QWORD *)v42 = *(_QWORD *)v43;
        v42[8] = v43[8];
        v44 = *((_QWORD *)v43 + 3);
        *((_QWORD *)v42 + 2) = *((_QWORD *)v43 + 2);
        *((_QWORD *)v42 + 3) = v44;
        v45 = *((_QWORD *)v43 + 5);
        *((_QWORD *)v42 + 4) = *((_QWORD *)v43 + 4);
        *((_QWORD *)v42 + 5) = v45;
        *(_QWORD *)&a1[updated[13]] = *(_QWORD *)((char *)a2 + updated[13]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        v46 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v46;
        a1[16] = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v47 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v47;
        v48 = a2[2];
        v49 = a2[3];
        *((_QWORD *)a1 + 2) = v48;
        *((_QWORD *)a1 + 3) = v49;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        v50 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v50;
        *((_QWORD *)a1 + 2) = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ServiceMessage.Content(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = *(_QWORD *)(a1 + 120);
      if (result)
        goto LABEL_3;
      return result;
    case 1:
LABEL_3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 3:
      v3 = a1 + *(int *)(type metadata accessor for ForwardPayload(0) + 20);
      v4 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      goto LABEL_10;
    case 4:
      if (*(_QWORD *)(a1 + 32) >= 5uLL)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = a1 + *(int *)(type metadata accessor for ShellUpdatePayload() + 40);
      v6 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 7:
      goto LABEL_10;
    case 8:
    case 9:
      swift_bridgeObjectRelease();
LABEL_10:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

char *initializeWithCopy for ServiceMessage.Content(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *updated;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  char *v51;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v6;
      v7 = a2[3];
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v7;
      v8 = a2[5];
      *((_QWORD *)a1 + 4) = a2[4];
      *((_QWORD *)a1 + 5) = v8;
      v9 = a2[7];
      *((_QWORD *)a1 + 6) = a2[6];
      *((_QWORD *)a1 + 7) = v9;
      a1[64] = *((_BYTE *)a2 + 64);
      a1[65] = *((_BYTE *)a2 + 65);
      v10 = a2[10];
      *((_QWORD *)a1 + 9) = a2[9];
      *((_QWORD *)a1 + 10) = v10;
      a1[88] = *((_BYTE *)a2 + 88);
      *(_QWORD *)(a1 + 92) = *(_QWORD *)((char *)a2 + 92);
      *((_QWORD *)a1 + 13) = a2[13];
      v11 = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11)
      {
        *((_QWORD *)a1 + 14) = a2[14];
        *((_QWORD *)a1 + 15) = v11;
        *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
        v12 = a2[19];
        *((_QWORD *)a1 + 18) = a2[18];
        *((_QWORD *)a1 + 19) = v12;
        v13 = a2[20];
        v14 = a2[21];
        *((_QWORD *)a1 + 20) = v13;
        *((_QWORD *)a1 + 21) = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v48 = *((_OWORD *)a2 + 8);
        *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 8) = v48;
        v49 = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 10) = v49;
      }
      goto LABEL_14;
    case 1u:
      v15 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v15;
      v16 = a2[3];
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v16;
      v17 = a2[4];
      v18 = a2[5];
      *((_QWORD *)a1 + 4) = v17;
      *((_QWORD *)a1 + 5) = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 3u:
      *a1 = *(_BYTE *)a2;
      v19 = (int *)type metadata accessor for ForwardPayload(0);
      v20 = v19[5];
      v21 = &a1[v20];
      v22 = (char *)a2 + v20;
      v23 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      *(_DWORD *)&a1[v19[6]] = *(_DWORD *)((char *)a2 + v19[6]);
      a1[v19[7]] = *((_BYTE *)a2 + v19[7]);
      a1[v19[8]] = *((_BYTE *)a2 + v19[8]);
      v24 = v19[9];
      v25 = &a1[v24];
      v26 = (_QWORD *)((char *)a2 + v24);
      v27 = v26[1];
      *(_QWORD *)v25 = *v26;
      *((_QWORD *)v25 + 1) = v27;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 4u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_QWORD *)a1 + 1) = a2[1];
      a1[16] = *((_BYTE *)a2 + 16);
      v28 = a2 + 3;
      v29 = a2[4];
      if (v29 > 4)
      {
        *((_QWORD *)a1 + 3) = *v28;
        *((_QWORD *)a1 + 4) = v29;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v28;
      }
      v30 = a2[6];
      *((_QWORD *)a1 + 5) = a2[5];
      *((_QWORD *)a1 + 6) = v30;
      v31 = a2[8];
      *((_QWORD *)a1 + 7) = a2[7];
      *((_QWORD *)a1 + 8) = v31;
      v32 = a2[10];
      *((_QWORD *)a1 + 9) = a2[9];
      *((_QWORD *)a1 + 10) = v32;
      updated = (int *)type metadata accessor for ShellUpdatePayload();
      v34 = updated[10];
      v51 = &a1[v34];
      v35 = (char *)a2 + v34;
      v36 = sub_2449CF400();
      v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v51, v35, v36);
      *(_QWORD *)&a1[updated[11]] = *(_QWORD *)((char *)a2 + updated[11]);
      v38 = updated[12];
      v39 = &a1[v38];
      v40 = (char *)a2 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      v41 = *((_QWORD *)v40 + 3);
      *((_QWORD *)v39 + 2) = *((_QWORD *)v40 + 2);
      *((_QWORD *)v39 + 3) = v41;
      v42 = *((_QWORD *)v40 + 5);
      *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
      *((_QWORD *)v39 + 5) = v42;
      *(_QWORD *)&a1[updated[13]] = *(_QWORD *)((char *)a2 + updated[13]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 7u:
      v43 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v43;
      a1[16] = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 8u:
      v44 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v44;
      v45 = a2[2];
      v46 = a2[3];
      *((_QWORD *)a1 + 2) = v45;
      *((_QWORD *)a1 + 3) = v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 9u:
      v47 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v47;
      *((_QWORD *)a1 + 2) = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for ServiceMessage.Content(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *updated;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v28;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for ServiceMessage.Content);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        a1[64] = a2[64];
        a1[65] = a2[65];
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        a1[88] = a2[88];
        *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 92);
        *((_QWORD *)a1 + 13) = *((_QWORD *)a2 + 13);
        v6 = *((_QWORD *)a2 + 15);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v6)
        {
          *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
          *((_QWORD *)a1 + 15) = *((_QWORD *)a2 + 15);
          *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
          *((_QWORD *)a1 + 18) = *((_QWORD *)a2 + 18);
          *((_QWORD *)a1 + 19) = *((_QWORD *)a2 + 19);
          *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
          *((_QWORD *)a1 + 21) = *((_QWORD *)a2 + 21);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v24 = *((_OWORD *)a2 + 7);
          v25 = *((_OWORD *)a2 + 8);
          v26 = *((_OWORD *)a2 + 10);
          *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
          *((_OWORD *)a1 + 10) = v26;
          *((_OWORD *)a1 + 7) = v24;
          *((_OWORD *)a1 + 8) = v25;
        }
        goto LABEL_16;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 3u:
        *a1 = *a2;
        v7 = (int *)type metadata accessor for ForwardPayload(0);
        v8 = v7[5];
        v9 = &a1[v8];
        v10 = &a2[v8];
        v11 = sub_2449CF400();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
        *(_DWORD *)&a1[v7[6]] = *(_DWORD *)&a2[v7[6]];
        a1[v7[7]] = a2[v7[7]];
        a1[v7[8]] = a2[v7[8]];
        v12 = v7[9];
        v13 = &a1[v12];
        v14 = &a2[v12];
        *(_QWORD *)v13 = *(_QWORD *)v14;
        *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 4u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        v15 = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        *((_QWORD *)a1 + 1) = v15;
        if (*((_QWORD *)a2 + 4) <= 4uLL)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        }
        else
        {
          *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
          swift_bridgeObjectRetain();
        }
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
        updated = (int *)type metadata accessor for ShellUpdatePayload();
        v17 = updated[10];
        v28 = &a1[v17];
        v18 = &a2[v17];
        v19 = sub_2449CF400();
        v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20(v28, v18, v19);
        *(_QWORD *)&a1[updated[11]] = *(_QWORD *)&a2[updated[11]];
        v21 = updated[12];
        v22 = &a1[v21];
        v23 = &a2[v21];
        *(_QWORD *)v22 = *(_QWORD *)v23;
        v22[8] = v23[8];
        *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
        *((_QWORD *)v22 + 3) = *((_QWORD *)v23 + 3);
        *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
        *((_QWORD *)v22 + 5) = *((_QWORD *)v23 + 5);
        *(_QWORD *)&a1[updated[13]] = *(_QWORD *)&a2[updated[13]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 7u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 8u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 9u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for ServiceMessage.Content(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *updated;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    a1[16] = a2[16];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    updated = (int *)type metadata accessor for ShellUpdatePayload();
    v13 = updated[10];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = sub_2449CF400();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)&a1[updated[11]] = *(_QWORD *)&a2[updated[11]];
    v17 = updated[12];
    v18 = &a1[v17];
    v19 = &a2[v17];
    v20 = *((_OWORD *)v19 + 2);
    v21 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = *((_OWORD *)v19 + 1);
    *((_OWORD *)v18 + 2) = v20;
    *(_OWORD *)v18 = v21;
    *(_QWORD *)&a1[updated[13]] = *(_QWORD *)&a2[updated[13]];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 3)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for ForwardPayload(0);
    v8 = v7[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = sub_2449CF400();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_DWORD *)&a1[v7[6]] = *(_DWORD *)&a2[v7[6]];
    a1[v7[7]] = a2[v7[7]];
    a1[v7[8]] = a2[v7[8]];
    *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ServiceMessage.Content(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *updated;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  if (a1 != a2)
  {
    sub_2449299E4((uint64_t)a1, type metadata accessor for ServiceMessage.Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      a1[16] = a2[16];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      updated = (int *)type metadata accessor for ShellUpdatePayload();
      v13 = updated[10];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)&a1[updated[11]] = *(_QWORD *)&a2[updated[11]];
      v17 = updated[12];
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = *((_OWORD *)v19 + 2);
      v21 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1) = *((_OWORD *)v19 + 1);
      *((_OWORD *)v18 + 2) = v20;
      *(_OWORD *)v18 = v21;
      *(_QWORD *)&a1[updated[13]] = *(_QWORD *)&a2[updated[13]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 3)
    {
      *a1 = *a2;
      v7 = (int *)type metadata accessor for ForwardPayload(0);
      v8 = v7[5];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_DWORD *)&a1[v7[6]] = *(_DWORD *)&a2[v7[6]];
      a1[v7[7]] = a2[v7[7]];
      a1[v7[8]] = a2[v7[8]];
      *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_244984388()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ForwardPayload(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ShellUpdatePayload();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t __swift_memcpy11_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for OSCapabilities(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[11])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OSCapabilities(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for OSCapabilities()
{
  return &type metadata for OSCapabilities;
}

ValueMetadata *type metadata accessor for AgentDescriptor()
{
  return &type metadata for AgentDescriptor;
}

ValueMetadata *type metadata accessor for AgentDescriptor.Bundle()
{
  return &type metadata for AgentDescriptor.Bundle;
}

ValueMetadata *type metadata accessor for PreviewAgentRole()
{
  return &type metadata for PreviewAgentRole;
}

ValueMetadata *type metadata accessor for PreviewAgentBootstrapMode()
{
  return &type metadata for PreviewAgentBootstrapMode;
}

uint64_t destroy for LaunchPayload()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LaunchPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LaunchPayload(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for LaunchPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LaunchPayload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LaunchPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LaunchPayload()
{
  return &type metadata for LaunchPayload;
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BinaryType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BinaryType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BinaryType()
{
  return &type metadata for BinaryType;
}

ValueMetadata *type metadata accessor for ProcessType()
{
  return &type metadata for ProcessType;
}

unint64_t destroy for DeviceType(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for DeviceType(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v4;
    v5 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for DeviceType(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DeviceType(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DeviceType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

double sub_244984CE4(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceType()
{
  return &type metadata for DeviceType;
}

uint64_t destroy for SimulatorDevicePayload()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SimulatorDevicePayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SimulatorDevicePayload(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SimulatorDevicePayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SimulatorDevicePayload()
{
  return &type metadata for SimulatorDevicePayload;
}

ValueMetadata *type metadata accessor for PrepareToRelaunchPayload()
{
  return &type metadata for PrepareToRelaunchPayload;
}

__n128 __swift_memcpy33_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ProcessID(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProcessID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_244984F78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_244984F80(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ProcessID()
{
  return &type metadata for ProcessID;
}

_QWORD *initializeBufferWithCopyOfBuffer for ForwardPayload(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = sub_2449CF400();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[7];
    *(_DWORD *)((char *)v4 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
    *((_BYTE *)v4 + v11) = *((_BYTE *)a2 + v11);
    v12 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ForwardPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for ForwardPayload(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_2449CF400();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  a1[v10] = a2[v10];
  v11 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for ForwardPayload(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_2449CF400();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  v10 = a3[9];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for ForwardPayload(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_2449CF400();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  a1[v10] = a2[v10];
  v11 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  return a1;
}

_BYTE *assignWithTake for ForwardPayload(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_2449CF400();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  *(_DWORD *)&a1[a3[6]] = *(_DWORD *)&a2[a3[6]];
  a1[v10] = a2[v10];
  v11 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v12 = &a1[v11];
  v13 = (uint64_t *)&a2[v11];
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ForwardPayload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244985360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_2449CF400();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ForwardPayload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2449853FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2449CF400();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  return result;
}

uint64_t sub_24498547C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_244985520(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PurgePayload(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PurgePayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PurgePayload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PurgePayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PurgePayload()
{
  return &type metadata for PurgePayload;
}

ValueMetadata *type metadata accessor for RequestPreviewVariantsPayload()
{
  return &type metadata for RequestPreviewVariantsPayload;
}

ValueMetadata *type metadata accessor for PreviewVariantsPayload()
{
  return &type metadata for PreviewVariantsPayload;
}

uint64_t destroy for RequestContentOverridePayload()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s19PreviewsMessagingOS29RequestContentOverridePayloadVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RequestContentOverridePayload(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RequestContentOverridePayload(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestContentOverridePayload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RequestContentOverridePayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestContentOverridePayload()
{
  return &type metadata for RequestContentOverridePayload;
}

ValueMetadata *type metadata accessor for ContentOverridePayload()
{
  return &type metadata for ContentOverridePayload;
}

ValueMetadata *type metadata accessor for ContentOverridePayload.Key()
{
  return &type metadata for ContentOverridePayload.Key;
}

ValueMetadata *type metadata accessor for RequestContentOverridePayload.Key()
{
  return &type metadata for RequestContentOverridePayload.Key;
}

ValueMetadata *type metadata accessor for PreviewVariantsPayload.Key()
{
  return &type metadata for PreviewVariantsPayload.Key;
}

ValueMetadata *type metadata accessor for RequestPreviewVariantsPayload.Key()
{
  return &type metadata for RequestPreviewVariantsPayload.Key;
}

ValueMetadata *type metadata accessor for PurgePayload.Key()
{
  return &type metadata for PurgePayload.Key;
}

uint64_t storeEnumTagSinglePayload for ForwardPayload.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2449858F4 + 4 * byte_2449D753D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_244985928 + 4 * byte_2449D7538[v4]))();
}

uint64_t sub_244985928(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244985930(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244985938);
  return result;
}

uint64_t sub_244985944(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24498594CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_244985950(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244985958(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForwardPayload.Key()
{
  return &type metadata for ForwardPayload.Key;
}

ValueMetadata *type metadata accessor for ProcessID.Discriminant()
{
  return &type metadata for ProcessID.Discriminant;
}

ValueMetadata *type metadata accessor for ProcessID.Key()
{
  return &type metadata for ProcessID.Key;
}

ValueMetadata *type metadata accessor for PrepareToRelaunchPayload.Key()
{
  return &type metadata for PrepareToRelaunchPayload.Key;
}

uint64_t storeEnumTagSinglePayload for SimulatorDevicePayload.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2449859F0 + 4 * byte_2449D7547[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_244985A24 + 4 * byte_2449D7542[v4]))();
}

uint64_t sub_244985A24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244985A2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244985A34);
  return result;
}

uint64_t sub_244985A40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244985A48);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_244985A4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244985A54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SimulatorDevicePayload.Key()
{
  return &type metadata for SimulatorDevicePayload.Key;
}

ValueMetadata *type metadata accessor for DeviceType.Discriminant()
{
  return &type metadata for DeviceType.Discriminant;
}

ValueMetadata *type metadata accessor for DeviceType.Key()
{
  return &type metadata for DeviceType.Key;
}

ValueMetadata *type metadata accessor for BinaryType.Key()
{
  return &type metadata for BinaryType.Key;
}

ValueMetadata *type metadata accessor for LaunchPayload.Key()
{
  return &type metadata for LaunchPayload.Key;
}

ValueMetadata *type metadata accessor for AgentDescriptor.Bundle.MissingPathError()
{
  return &type metadata for AgentDescriptor.Bundle.MissingPathError;
}

uint64_t _s19PreviewsMessagingOS16PreviewAgentRoleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_244985B14 + 4 * byte_2449D7551[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_244985B48 + 4 * byte_2449D754C[v4]))();
}

uint64_t sub_244985B48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244985B50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244985B58);
  return result;
}

uint64_t sub_244985B64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244985B6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_244985B70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244985B78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AgentDescriptor.Bundle.Key()
{
  return &type metadata for AgentDescriptor.Bundle.Key;
}

ValueMetadata *type metadata accessor for AgentDescriptor.Key()
{
  return &type metadata for AgentDescriptor.Key;
}

ValueMetadata *type metadata accessor for ServiceMessage.Key()
{
  return &type metadata for ServiceMessage.Key;
}

uint64_t _s19PreviewsMessagingOS22ContentOverridePayloadV3KeyOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_244985BF4 + 4 * byte_2449D7556[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_244985C14 + 4 * byte_2449D755B[v4]))();
}

_BYTE *sub_244985BF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_244985C14(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244985C1C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244985C24(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244985C2C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244985C34(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ServiceMessage.PayloadKey()
{
  return &type metadata for ServiceMessage.PayloadKey;
}

unint64_t sub_244985C54()
{
  unint64_t result;

  result = qword_2573A1258;
  if (!qword_2573A1258)
  {
    result = MEMORY[0x24951C158](&unk_2449D84D4, &type metadata for ServiceMessage.PayloadKey);
    atomic_store(result, (unint64_t *)&qword_2573A1258);
  }
  return result;
}

unint64_t sub_244985C9C()
{
  unint64_t result;

  result = qword_2573A1260;
  if (!qword_2573A1260)
  {
    result = MEMORY[0x24951C158](&unk_2449D8574, &type metadata for ServiceMessage.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1260);
  }
  return result;
}

unint64_t sub_244985CE4()
{
  unint64_t result;

  result = qword_2573A1268;
  if (!qword_2573A1268)
  {
    result = MEMORY[0x24951C158](&unk_2449D8614, &type metadata for AgentDescriptor.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1268);
  }
  return result;
}

unint64_t sub_244985D2C()
{
  unint64_t result;

  result = qword_2573A1270;
  if (!qword_2573A1270)
  {
    result = MEMORY[0x24951C158](&unk_2449D86B4, &type metadata for AgentDescriptor.Bundle.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1270);
  }
  return result;
}

unint64_t sub_244985D74()
{
  unint64_t result;

  result = qword_2573A1278;
  if (!qword_2573A1278)
  {
    result = MEMORY[0x24951C158](&unk_2449D86DC, &type metadata for AgentDescriptor.Bundle.MissingPathError);
    atomic_store(result, (unint64_t *)&qword_2573A1278);
  }
  return result;
}

unint64_t sub_244985DBC()
{
  unint64_t result;

  result = qword_2573A1280;
  if (!qword_2573A1280)
  {
    result = MEMORY[0x24951C158](&unk_2449D8804, &type metadata for LaunchPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1280);
  }
  return result;
}

unint64_t sub_244985E04()
{
  unint64_t result;

  result = qword_2573A1288;
  if (!qword_2573A1288)
  {
    result = MEMORY[0x24951C158](&unk_2449D88A4, &type metadata for BinaryType.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1288);
  }
  return result;
}

unint64_t sub_244985E4C()
{
  unint64_t result;

  result = qword_2573A1290;
  if (!qword_2573A1290)
  {
    result = MEMORY[0x24951C158](&unk_2449D8944, &type metadata for DeviceType.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1290);
  }
  return result;
}

unint64_t sub_244985E94()
{
  unint64_t result;

  result = qword_2573A1298;
  if (!qword_2573A1298)
  {
    result = MEMORY[0x24951C158](&unk_2449D89E4, &type metadata for DeviceType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1298);
  }
  return result;
}

unint64_t sub_244985EDC()
{
  unint64_t result;

  result = qword_2573A12A0;
  if (!qword_2573A12A0)
  {
    result = MEMORY[0x24951C158](&unk_2449D8A84, &type metadata for SimulatorDevicePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12A0);
  }
  return result;
}

unint64_t sub_244985F24()
{
  unint64_t result;

  result = qword_2573A12A8;
  if (!qword_2573A12A8)
  {
    result = MEMORY[0x24951C158](&unk_2449D8B24, &type metadata for PrepareToRelaunchPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12A8);
  }
  return result;
}

unint64_t sub_244985F6C()
{
  unint64_t result;

  result = qword_2573A12B0;
  if (!qword_2573A12B0)
  {
    result = MEMORY[0x24951C158](&unk_2449D8BC4, &type metadata for ProcessID.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12B0);
  }
  return result;
}

unint64_t sub_244985FB4()
{
  unint64_t result;

  result = qword_2573A12B8;
  if (!qword_2573A12B8)
  {
    result = MEMORY[0x24951C158](&unk_2449D8C64, &type metadata for ProcessID.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A12B8);
  }
  return result;
}

unint64_t sub_244985FFC()
{
  unint64_t result;

  result = qword_2573A12C0;
  if (!qword_2573A12C0)
  {
    result = MEMORY[0x24951C158](&unk_2449D8D04, &type metadata for ForwardPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12C0);
  }
  return result;
}

unint64_t sub_244986044()
{
  unint64_t result;

  result = qword_2573A12C8;
  if (!qword_2573A12C8)
  {
    result = MEMORY[0x24951C158](&unk_2449D8DA4, &type metadata for PurgePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12C8);
  }
  return result;
}

unint64_t sub_24498608C()
{
  unint64_t result;

  result = qword_2573A12D0;
  if (!qword_2573A12D0)
  {
    result = MEMORY[0x24951C158](&unk_2449D8E44, &type metadata for RequestPreviewVariantsPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12D0);
  }
  return result;
}

unint64_t sub_2449860D4()
{
  unint64_t result;

  result = qword_2573A12D8;
  if (!qword_2573A12D8)
  {
    result = MEMORY[0x24951C158](&unk_2449D8EE4, &type metadata for PreviewVariantsPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12D8);
  }
  return result;
}

unint64_t sub_24498611C()
{
  unint64_t result;

  result = qword_2573A12E0;
  if (!qword_2573A12E0)
  {
    result = MEMORY[0x24951C158](&unk_2449D8F84, &type metadata for RequestContentOverridePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12E0);
  }
  return result;
}

unint64_t sub_244986164()
{
  unint64_t result;

  result = qword_2573A12E8;
  if (!qword_2573A12E8)
  {
    result = MEMORY[0x24951C158](&unk_2449D9024, &type metadata for ContentOverridePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A12E8);
  }
  return result;
}

unint64_t sub_2449861AC()
{
  unint64_t result;

  result = qword_2573A12F0;
  if (!qword_2573A12F0)
  {
    result = MEMORY[0x24951C158](&unk_2449D8744, &type metadata for AgentDescriptor.Bundle.MissingPathError);
    atomic_store(result, (unint64_t *)&qword_2573A12F0);
  }
  return result;
}

unint64_t sub_2449861F4()
{
  unint64_t result;

  result = qword_2573A12F8;
  if (!qword_2573A12F8)
  {
    result = MEMORY[0x24951C158](&unk_2449D871C, &type metadata for AgentDescriptor.Bundle.MissingPathError);
    atomic_store(result, (unint64_t *)&qword_2573A12F8);
  }
  return result;
}

unint64_t sub_244986238()
{
  unint64_t result;

  result = qword_2573A1300;
  if (!qword_2573A1300)
  {
    result = MEMORY[0x24951C158](&unk_2449D896C, &type metadata for DeviceType.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1300);
  }
  return result;
}

unint64_t sub_24498627C()
{
  unint64_t result;

  result = qword_2573A1308;
  if (!qword_2573A1308)
  {
    result = MEMORY[0x24951C158](&unk_2449D8BEC, &type metadata for ProcessID.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1308);
  }
  return result;
}

uint64_t sub_2449862C0()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

_OWORD *sub_244986308(uint64_t a1, BOOL *a2)
{
  uint64_t v2;
  _OWORD *result;
  __int128 v5;

  result = sub_2449811B4(*(__int128 **)(v2 + 16), &v5);
  *a2 = *((_QWORD *)&v5 + 1) != 0;
  return result;
}

unint64_t sub_244986348()
{
  unint64_t result;

  result = qword_2573A1310;
  if (!qword_2573A1310)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ProcessType, &type metadata for ProcessType);
    atomic_store(result, (unint64_t *)&qword_2573A1310);
  }
  return result;
}

unint64_t sub_24498638C()
{
  unint64_t result;

  result = qword_2573A1318;
  if (!qword_2573A1318)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewAgentBootstrapMode, &type metadata for PreviewAgentBootstrapMode);
    atomic_store(result, (unint64_t *)&qword_2573A1318);
  }
  return result;
}

unint64_t sub_2449863D0()
{
  unint64_t result;

  result = qword_2573A1320;
  if (!qword_2573A1320)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewAgentRole, &type metadata for PreviewAgentRole);
    atomic_store(result, (unint64_t *)&qword_2573A1320);
  }
  return result;
}

uint64_t sub_244986414()
{
  return sub_24497A22C();
}

unint64_t sub_2449864CC()
{
  unint64_t result;

  result = qword_2573A1328;
  if (!qword_2573A1328)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ServiceMessage.MessageType, &type metadata for ServiceMessage.MessageType);
    atomic_store(result, (unint64_t *)&qword_2573A1328);
  }
  return result;
}

unint64_t sub_244986510()
{
  unint64_t result;

  result = qword_2573A1338;
  if (!qword_2573A1338)
  {
    result = MEMORY[0x24951C158](&unk_2449D954C, &type metadata for AgentDescriptor.Bundle.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1338);
  }
  return result;
}

unint64_t sub_244986554()
{
  unint64_t result;

  result = qword_2573A1340;
  if (!qword_2573A1340)
  {
    result = MEMORY[0x24951C158](&unk_2449D9524, &type metadata for OSCapabilities.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1340);
  }
  return result;
}

unint64_t sub_244986598()
{
  unint64_t result;

  result = qword_2573A1348;
  if (!qword_2573A1348)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITCapabilities, &type metadata for JITCapabilities);
    atomic_store(result, (unint64_t *)&qword_2573A1348);
  }
  return result;
}

uint64_t _s19PreviewsMessagingOS13LaunchPayloadV3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_244986628 + 4 * byte_2449D7565[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_24498665C + 4 * byte_2449D7560[v4]))();
}

uint64_t sub_24498665C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244986664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24498666CLL);
  return result;
}

uint64_t sub_244986678(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244986680);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_244986684(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24498668C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OSCapabilities.Key()
{
  return &type metadata for OSCapabilities.Key;
}

uint64_t _s19PreviewsMessagingOS25PreviewAgentBootstrapModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2449866F4 + 4 * byte_2449D756F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244986728 + 4 * byte_2449D756A[v4]))();
}

uint64_t sub_244986728(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244986730(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244986738);
  return result;
}

uint64_t sub_244986744(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24498674CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244986750(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244986758(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AgentDescriptor.Bundle.Discriminant()
{
  return &type metadata for AgentDescriptor.Bundle.Discriminant;
}

unint64_t sub_244986778()
{
  unint64_t result;

  result = qword_2573A1358;
  if (!qword_2573A1358)
  {
    result = MEMORY[0x24951C158](&unk_2449D945C, &type metadata for AgentDescriptor.Bundle.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1358);
  }
  return result;
}

unint64_t sub_2449867C0()
{
  unint64_t result;

  result = qword_2573A1360;
  if (!qword_2573A1360)
  {
    result = MEMORY[0x24951C158](&unk_2449D94FC, &type metadata for OSCapabilities.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1360);
  }
  return result;
}

unint64_t sub_244986804()
{
  unint64_t result;

  result = qword_2573A1368;
  if (!qword_2573A1368)
  {
    result = MEMORY[0x24951C158](&unk_2449D93E4, &type metadata for AgentDescriptor.Bundle.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1368);
  }
  return result;
}

uint64_t PropertyList.lazy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
  type metadata accessor for LazyPropertyList();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for LazyPropertyList()
{
  uint64_t result;

  result = qword_2573A13E0;
  if (!qword_2573A13E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t LazyPropertyList.propertyList.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD v18[2];
  _BYTE v19[32];
  uint64_t v20;

  v2 = v1;
  v20 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_244986B24(v2, (uint64_t)v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *v6;
    v7 = v6[1];
    v9 = (void *)objc_opt_self();
    v10 = (void *)sub_2449CF040();
    *(_QWORD *)&v18[0] = 0;
    v11 = objc_msgSend(v9, sel_propertyListWithData_options_format_error_, v10, 0, 0, v18);

    v12 = *(id *)&v18[0];
    if (v11)
    {
      sub_2449CFB5C();
      swift_unknownObjectRelease();
      sub_24493DF74((uint64_t)v19, (uint64_t)v18);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0548);
      if (swift_dynamicCast())
      {
        sub_2449CF3A0();
      }
      else
      {
        sub_24493DF74((uint64_t)v19, (uint64_t)v18);
        sub_24496256C();
        swift_allocError();
        sub_24493DF64(v18, v16);
        swift_willThrow();
      }
      sub_244962528(v8, v7);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    else
    {
      v15 = v12;
      sub_2449CEFE0();

      swift_willThrow();
      return sub_244962528(v8, v7);
    }
  }
  else
  {
    v13 = sub_2449CF400();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, v6, v13);
  }
}

uint64_t sub_244986B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LazyPropertyList();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *LazyPropertyList.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v15[2];

  v1 = v0;
  v15[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = sub_2449CF400();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_244986B24(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
    return *(void **)v8;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  v10 = (void *)objc_opt_self();
  sub_2449CF3AC();
  v11 = (void *)sub_2449CF7CC();
  swift_bridgeObjectRelease();
  v15[0] = 0;
  v12 = objc_msgSend(v10, sel_dataWithPropertyList_format_options_error_, v11, 200, 0, v15);

  v13 = v15[0];
  if (v12)
  {
    v9 = (void *)sub_2449CF04C();

  }
  else
  {
    v9 = v13;
    sub_2449CEFE0();

    swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

uint64_t sub_244986D60()
{
  sub_2449CFB98();
  sub_2449CF898();
  sub_2449CFBE0();
  return 0;
}

uint64_t sub_244986DEC()
{
  sub_2449872C0();
  return sub_2449CF52C();
}

uint64_t sub_244986E14()
{
  sub_2449872C0();
  return sub_2449CF508();
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyPropertyList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = *a2;
      v6 = a2[1];
      sub_244964F34(v7, v6);
      *a1 = v7;
      a1[1] = v6;
    }
    else
    {
      v9 = sub_2449CF400();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for LazyPropertyList(uint64_t a1)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() == 1)
    return sub_244962528(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v3 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t *initializeWithCopy for LazyPropertyList(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = *a2;
    v4 = a2[1];
    sub_244964F34(v5, v4);
    *a1 = v5;
    a1[1] = v4;
  }
  else
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for LazyPropertyList(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_24495D8A8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = *a2;
      v4 = a2[1];
      sub_244964F34(v5, v4);
      *a1 = v5;
      a1[1] = v4;
    }
    else
    {
      v6 = sub_2449CF400();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for LazyPropertyList(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_2449CF400();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for LazyPropertyList(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_24495D8A8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_2449CF400();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_2449871B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyPropertyList.InvalidDeserialization()
{
  return &type metadata for LazyPropertyList.InvalidDeserialization;
}

unint64_t sub_244987234()
{
  unint64_t result;

  result = qword_2573A1418;
  if (!qword_2573A1418)
  {
    result = MEMORY[0x24951C158](&unk_2449D9700, &type metadata for LazyPropertyList.InvalidDeserialization);
    atomic_store(result, (unint64_t *)&qword_2573A1418);
  }
  return result;
}

unint64_t sub_24498727C()
{
  unint64_t result;

  result = qword_2573A1420;
  if (!qword_2573A1420)
  {
    result = MEMORY[0x24951C158](&unk_2449D96D8, &type metadata for LazyPropertyList.InvalidDeserialization);
    atomic_store(result, (unint64_t *)&qword_2573A1420);
  }
  return result;
}

unint64_t sub_2449872C0()
{
  unint64_t result;

  result = qword_2573A1428;
  if (!qword_2573A1428)
  {
    result = MEMORY[0x24951C158](&unk_2449D9748, &type metadata for LazyPropertyList.InvalidDeserialization);
    atomic_store(result, (unint64_t *)&qword_2573A1428);
  }
  return result;
}

uint64_t JITLoadCommand.hash(into:)()
{
  sub_2449CFD54();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

BOOL static JITLoadCommand.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_244988264(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t static JITLoadCommand.LoadDylib.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_2449881A0(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t JITLoadCommand.hashValue.getter()
{
  sub_2449CFD48();
  sub_2449CFD54();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_24498745C()
{
  return JITLoadCommand.hashValue.getter();
}

uint64_t sub_244987468()
{
  return JITLoadCommand.hash(into:)();
}

uint64_t sub_244987474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244987E78(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))JITLoadCommand.hash(into:));
}

uint64_t sub_244987480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2449880DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_244988264);
}

uint64_t sub_244987498@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_2449874E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_244988184();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24498750C()
{
  sub_2449889D0();
  return sub_2449CF670();
}

uint64_t sub_244987554()
{
  sub_2449889D0();
  return sub_2449CF67C();
}

uint64_t sub_2449875B8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x646E616D6D6F63;
  else
    return 0x696D697263736964;
}

uint64_t sub_2449875F8(char *a1, char *a2)
{
  return sub_2449A2724(*a1, *a2);
}

uint64_t sub_244987604()
{
  return sub_2449C6FD8();
}

uint64_t sub_24498760C()
{
  return sub_244924E90();
}

uint64_t sub_244987614()
{
  return sub_2449C9534();
}

uint64_t sub_24498761C@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244987628@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449875B8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244987650()
{
  char *v0;

  return sub_2449875B8(*v0);
}

uint64_t JITLoadCommand.propertyListValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  char v5;
  unint64_t v6;
  char v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = a3 & 1;
  v6 = sub_24498834C();
  sub_244988390();
  sub_2449CF3E8();
  v11 = a1;
  v12 = a2;
  v13 = v5;
  v9 = &type metadata for JITLoadCommand.Key;
  v10 = v6;
  v8[0] = 1;
  sub_2449883D4();
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t JITLoadCommand.init(propertyListValue:)(uint64_t a1)
{
  return sub_244987D04(a1, (uint64_t (*)(void))sub_2449884E0);
}

uint64_t sub_244987734()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  char v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_BYTE *)v0 + 16);
  v4 = sub_24498834C();
  sub_244988390();
  sub_2449CF3E8();
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v7 = &type metadata for JITLoadCommand.Key;
  v8 = v4;
  v6[0] = 1;
  sub_2449883D4();
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t sub_2449877F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_2449884E0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

PreviewsMessagingOS::JITLoadCommand::LoadDylib::Linkage_optional __swiftcall JITLoadCommand.LoadDylib.Linkage.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  PreviewsMessagingOS::JITLoadCommand::LoadDylib::Linkage_optional v2;

  v1 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = PreviewsMessagingOS_JITLoadCommand_LoadDylib_Linkage_weak;
  else
    v2.value = PreviewsMessagingOS_JITLoadCommand_LoadDylib_Linkage_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t JITLoadCommand.LoadDylib.Linkage.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1801545079;
  else
    return 0x676E6F727473;
}

uint64_t sub_24498789C(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = JITLoadCommand.LoadDylib.Linkage.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == JITLoadCommand.LoadDylib.Linkage.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_244987924()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  JITLoadCommand.LoadDylib.Linkage.rawValue.getter(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_244987984()
{
  char *v0;

  JITLoadCommand.LoadDylib.Linkage.rawValue.getter(*v0);
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2449879C4()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_2449CFD48();
  JITLoadCommand.LoadDylib.Linkage.rawValue.getter(v1);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_244987A20@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244987A2C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = JITLoadCommand.LoadDylib.Linkage.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244987A54()
{
  sub_244988A14();
  return sub_2449CF670();
}

uint64_t sub_244987A9C()
{
  sub_244988A14();
  return sub_2449CF67C();
}

uint64_t JITLoadCommand.LoadDylib.path.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t JITLoadCommand.LoadDylib.path.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*JITLoadCommand.LoadDylib.path.modify())()
{
  return nullsub_1;
}

uint64_t JITLoadCommand.LoadDylib.linkage.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t JITLoadCommand.LoadDylib.linkage.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result & 1;
  return result;
}

uint64_t (*JITLoadCommand.LoadDylib.linkage.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::JITLoadCommand::LoadDylib __swiftcall JITLoadCommand.LoadDylib.init(path:linkage:)(Swift::String path, PreviewsMessagingOS::JITLoadCommand::LoadDylib::Linkage linkage)
{
  PreviewsMessagingOS::JITLoadCommand::LoadDylib::Linkage v2;
  PreviewsMessagingOS::JITLoadCommand::LoadDylib result;

  v2 = linkage & 1;
  result.path = path;
  result.linkage = v2;
  return result;
}

uint64_t sub_244987BA0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6567616B6E696CLL;
  else
    return 1752457584;
}

uint64_t sub_244987BD0(char *a1, char *a2)
{
  return sub_2449A268C(*a1, *a2);
}

uint64_t sub_244987BDC()
{
  return sub_2449C7060();
}

uint64_t sub_244987BE4()
{
  return sub_244924E40();
}

uint64_t sub_244987BEC()
{
  return sub_2449C95B8();
}

uint64_t sub_244987BF4@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_244987C00@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244987BA0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_244987C28()
{
  char *v0;

  return sub_244987BA0(*v0);
}

uint64_t JITLoadCommand.LoadDylib.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_244987C64()
{
  sub_244988A58();
  sub_244988A9C();
  return sub_2449CF604();
}

uint64_t JITLoadCommand.LoadDylib.init(propertyListValue:)(uint64_t a1)
{
  return sub_244987D04(a1, (uint64_t (*)(void))sub_2449885F0);
}

uint64_t sub_244987D04(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = a2();
  if (v2)
    return v4;
  return result;
}

uint64_t JITLoadCommand.LoadDylib.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t JITLoadCommand.LoadDylib.hashValue.getter()
{
  sub_2449CFD48();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_244987E54()
{
  return JITLoadCommand.LoadDylib.hashValue.getter();
}

uint64_t sub_244987E60()
{
  return JITLoadCommand.LoadDylib.hash(into:)();
}

uint64_t sub_244987E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_244987E78(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))JITLoadCommand.LoadDylib.hash(into:));
}

uint64_t sub_244987E78(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[72];

  v6 = *v4;
  v7 = v4[1];
  v8 = *((unsigned __int8 *)v4 + 16);
  sub_2449CFD48();
  a4(v10, v6, v7, v8);
  return sub_2449CFD84();
}

uint64_t sub_244987ED0()
{
  return sub_2449CF3D0();
}

uint64_t sub_244987F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_2449885F0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_244987F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2449880DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2449881A0);
}

Swift::Void __swiftcall JITLoadCommand.describe(with:)(Swift::OpaquePointer *with)
{
  sub_2449CFBE0();
  sub_2449CF898();
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  sub_2449CF934();
  swift_bridgeObjectRelease();
}

void sub_244988020(Swift::OpaquePointer *with)
{
  JITLoadCommand.describe(with:)(with);
}

uint64_t sub_24498802C()
{
  uint64_t v0;
  Swift::OpaquePointer with;

  with._rawValue = (void *)MEMORY[0x24BEE4AF8];
  JITLoadCommand.describe(with:)(&with);
  v0 = sub_2449CF91C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t static JITLoadCommand.< infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_244988418(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t static JITLoadCommand.LoadDylib.< infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_244988418(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t sub_2449880AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2449880DC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_244988418);
}

BOOL sub_2449880B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2449880FC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_244988418);
}

BOOL sub_2449880C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244988130(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_244988418);
}

uint64_t sub_2449880D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244988168(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_244988418);
}

uint64_t sub_2449880DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

BOOL sub_2449880FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return (a5(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16)) & 1) == 0;
}

BOOL sub_244988130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return (a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16)) & 1) == 0;
}

uint64_t sub_244988168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_244988184()
{
  return 0x696C794464616F6CLL;
}

uint64_t sub_2449881A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (a1 == a4 && a2 == a5 || (v8 = 0, (sub_2449CFCD0() & 1) != 0))
  {
    if ((a3 & 1) != 0)
      v9 = 1801545079;
    else
      v9 = 0x676E6F727473;
    if ((a3 & 1) != 0)
      v10 = 0xE400000000000000;
    else
      v10 = 0xE600000000000000;
    if ((a6 & 1) != 0)
      v11 = 1801545079;
    else
      v11 = 0x676E6F727473;
    if ((a6 & 1) != 0)
      v12 = 0xE400000000000000;
    else
      v12 = 0xE600000000000000;
    if (v9 == v11 && v10 == v12)
      v8 = 1;
    else
      v8 = sub_2449CFCD0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8 & 1;
}

BOOL sub_244988264(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v13;

  if ((a1 != a4 || a2 != a5) && (sub_2449CFCD0() & 1) == 0)
    return 0;
  if ((a3 & 1) != 0)
    v8 = 1801545079;
  else
    v8 = 0x676E6F727473;
  if ((a3 & 1) != 0)
    v9 = 0xE400000000000000;
  else
    v9 = 0xE600000000000000;
  if ((a6 & 1) != 0)
    v10 = 1801545079;
  else
    v10 = 0x676E6F727473;
  if ((a6 & 1) != 0)
    v11 = 0xE400000000000000;
  else
    v11 = 0xE600000000000000;
  if (v8 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  v13 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v13 & 1) != 0;
}

_BYTE *sub_244988340(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

unint64_t sub_24498834C()
{
  unint64_t result;

  result = qword_2573A1430;
  if (!qword_2573A1430)
  {
    result = MEMORY[0x24951C158](&unk_2449D9D28, &type metadata for JITLoadCommand.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1430);
  }
  return result;
}

unint64_t sub_244988390()
{
  unint64_t result;

  result = qword_2573A1438;
  if (!qword_2573A1438)
  {
    result = MEMORY[0x24951C158](&unk_2449D9CE8, &type metadata for JITLoadCommand.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1438);
  }
  return result;
}

unint64_t sub_2449883D4()
{
  unint64_t result;

  result = qword_2573A1440;
  if (!qword_2573A1440)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand.LoadDylib, &type metadata for JITLoadCommand.LoadDylib);
    atomic_store(result, (unint64_t *)&qword_2573A1440);
  }
  return result;
}

uint64_t sub_244988418(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == a4 && a2 == a5 || (sub_2449CFCD0() & 1) == 0)
  {
    v12 = 0;
  }
  else
  {
    if ((a3 & 1) != 0)
      v8 = 1801545079;
    else
      v8 = 0x676E6F727473;
    if ((a3 & 1) != 0)
      v9 = 0xE400000000000000;
    else
      v9 = 0xE600000000000000;
    if ((a6 & 1) != 0)
      v10 = 1801545079;
    else
      v10 = 0x676E6F727473;
    if ((a6 & 1) != 0)
      v11 = 0xE400000000000000;
    else
      v11 = 0xE600000000000000;
    if (v8 == v10 && v9 == v11)
      v12 = 0;
    else
      v12 = sub_2449CFCD0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v12 & 1;
}

uint64_t sub_2449884E0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;

  v9 = &type metadata for JITLoadCommand.Key;
  v3 = sub_24498834C();
  v10 = v3;
  v8[0] = 0;
  sub_244988390();
  sub_2449CF37C();
  if (v1)
  {
    v4 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    v9 = &type metadata for JITLoadCommand.Key;
    v10 = v3;
    v8[0] = 1;
    sub_2449883D4();
    sub_2449CF37C();
    v5 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return v7;
  }
}

uint64_t sub_2449885E4()
{
  return sub_244987C64();
}

uint64_t sub_2449885F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;

  v9 = &type metadata for JITLoadCommand.LoadDylib.Key;
  v4 = sub_244988A58();
  v10 = v4;
  v8[0] = 0;
  sub_2449CF37C();
  if (v1)
  {
    v5 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    v2 = v11;
    v9 = &type metadata for JITLoadCommand.LoadDylib.Key;
    v10 = v4;
    v8[0] = 1;
    sub_244988A9C();
    sub_2449CF3B8();
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v2;
}

unint64_t sub_244988734()
{
  unint64_t result;

  result = qword_2573A1448;
  if (!qword_2573A1448)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand, &type metadata for JITLoadCommand);
    atomic_store(result, (unint64_t *)&qword_2573A1448);
  }
  return result;
}

unint64_t sub_24498877C()
{
  unint64_t result;

  result = qword_2573A1450;
  if (!qword_2573A1450)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand.LoadDylib.Linkage, &type metadata for JITLoadCommand.LoadDylib.Linkage);
    atomic_store(result, (unint64_t *)&qword_2573A1450);
  }
  return result;
}

unint64_t sub_2449887C4()
{
  unint64_t result;

  result = qword_2573A1458;
  if (!qword_2573A1458)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand.LoadDylib, &type metadata for JITLoadCommand.LoadDylib);
    atomic_store(result, (unint64_t *)&qword_2573A1458);
  }
  return result;
}

unint64_t sub_24498880C()
{
  unint64_t result;

  result = qword_2573A1460;
  if (!qword_2573A1460)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand, &type metadata for JITLoadCommand);
    atomic_store(result, (unint64_t *)&qword_2573A1460);
  }
  return result;
}

ValueMetadata *type metadata accessor for JITLoadCommand()
{
  return &type metadata for JITLoadCommand;
}

ValueMetadata *type metadata accessor for JITLoadCommand.LoadDylib()
{
  return &type metadata for JITLoadCommand.LoadDylib;
}

ValueMetadata *type metadata accessor for JITLoadCommand.LoadDylib.Linkage()
{
  return &type metadata for JITLoadCommand.LoadDylib.Linkage;
}

uint64_t storeEnumTagSinglePayload for JITLoadCommand.Discriminant(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2449888D4 + 4 * byte_2449D9820[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2449888F4 + 4 * byte_2449D9825[v4]))();
}

_BYTE *sub_2449888D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2449888F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2449888FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_244988904(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24498890C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_244988914(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JITLoadCommand.Discriminant()
{
  return &type metadata for JITLoadCommand.Discriminant;
}

ValueMetadata *type metadata accessor for JITLoadCommand.Key()
{
  return &type metadata for JITLoadCommand.Key;
}

unint64_t sub_244988944()
{
  unint64_t result;

  result = qword_2573A1468;
  if (!qword_2573A1468)
  {
    result = MEMORY[0x24951C158](&unk_2449D9C20, &type metadata for JITLoadCommand.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1468);
  }
  return result;
}

unint64_t sub_24498898C()
{
  unint64_t result;

  result = qword_2573A1470;
  if (!qword_2573A1470)
  {
    result = MEMORY[0x24951C158](&unk_2449D9CC0, &type metadata for JITLoadCommand.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1470);
  }
  return result;
}

unint64_t sub_2449889D0()
{
  unint64_t result;

  result = qword_2573A1478;
  if (!qword_2573A1478)
  {
    result = MEMORY[0x24951C158](&unk_2449D9C48, &type metadata for JITLoadCommand.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1478);
  }
  return result;
}

unint64_t sub_244988A14()
{
  unint64_t result;

  result = qword_2573A1480;
  if (!qword_2573A1480)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand.LoadDylib.Linkage, &type metadata for JITLoadCommand.LoadDylib.Linkage);
    atomic_store(result, (unint64_t *)&qword_2573A1480);
  }
  return result;
}

unint64_t sub_244988A58()
{
  unint64_t result;

  result = qword_2573A1488;
  if (!qword_2573A1488)
  {
    result = MEMORY[0x24951C158](&unk_2449D9DF0, &type metadata for JITLoadCommand.LoadDylib.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1488);
  }
  return result;
}

unint64_t sub_244988A9C()
{
  unint64_t result;

  result = qword_2573A1490;
  if (!qword_2573A1490)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for JITLoadCommand.LoadDylib.Linkage, &type metadata for JITLoadCommand.LoadDylib.Linkage);
    atomic_store(result, (unint64_t *)&qword_2573A1490);
  }
  return result;
}

uint64_t _s19PreviewsMessagingOS14JITLoadCommandO9LoadDylibV7LinkageOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_244988B2C + 4 * byte_2449D982F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244988B60 + 4 * byte_2449D982A[v4]))();
}

uint64_t sub_244988B60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244988B68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244988B70);
  return result;
}

uint64_t sub_244988B7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244988B84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244988B88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244988B90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JITLoadCommand.LoadDylib.Key()
{
  return &type metadata for JITLoadCommand.LoadDylib.Key;
}

unint64_t sub_244988BB0()
{
  unint64_t result;

  result = qword_2573A1498;
  if (!qword_2573A1498)
  {
    result = MEMORY[0x24951C158](&unk_2449D9DC8, &type metadata for JITLoadCommand.LoadDylib.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1498);
  }
  return result;
}

uint64_t sub_244988BFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  _QWORD v8[2];
  _BYTE v9[32];

  result = sub_24498A004(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    v8[0] = sub_24498A08C((uint64_t)v9, result, v5, 0, a1);
    v8[1] = v7;
    *(_QWORD *)a2 = v8[0];
    *(_QWORD *)(a2 + 8) = v7;
    sub_24493DF74((uint64_t)v9, a2 + 16);
    swift_bridgeObjectRetain();
    return sub_244940E8C((uint64_t)v8, &qword_2573A1560);
  }
  return result;
}

uint64_t PreviewIncrementalUpdate.key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PreviewIncrementalUpdate.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_244988CFC(v1 + 16, a1);
}

uint64_t sub_244988CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *PreviewIncrementalUpdate.init(key:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  return sub_244988D50(a3, (_OWORD *)(a4 + 16));
}

_OWORD *sub_244988D50(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t PreviewIncrementalUpdate.propertyListValue.getter()
{
  return sub_2449CF3DC();
}

uint64_t sub_244988DA4(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *boxed_opaque_existential_1;
  __int128 v9;

  v4 = a3[1];
  *a1 = *a3;
  a1[1] = v4;
  v9 = *(_OWORD *)(a3 + 5);
  v5 = a3[5];
  v6 = __swift_project_boxed_opaque_existential_1(a3 + 2, v5);
  *(_OWORD *)(a2 + 24) = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v6, v5);
  return swift_bridgeObjectRetain();
}

uint64_t sub_244988E1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_244988DA4(a1, a2, *(_QWORD **)(v2 + 16));
}

_OWORD *PreviewIncrementalUpdate.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  _OWORD v24[2];
  _OWORD v25[2];

  v4 = sub_2449CF3AC();
  sub_244988BFC(v4, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v21 + 1))
  {
    v23 = v21;
    sub_24493DF64(v22, v24);
    v5 = v23;
    sub_24493DF64(v24, v25);
    sub_24493DF74((uint64_t)v25, (uint64_t)&v20);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v6 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      sub_244988D50(&v21, &v23);
      result = sub_244988D50(&v23, a2 + 1);
      *a2 = v5;
    }
    else
    {
      memset(v22, 0, sizeof(v22));
      v21 = 0u;
      swift_bridgeObjectRelease();
      sub_244940E8C((uint64_t)&v21, &qword_2573A14C0);
      type metadata accessor for PreviewIncrementalUpdate.UnarchiveError();
      sub_244989F80(&qword_2573A14A8, (uint64_t)&unk_2449D9F44);
      swift_allocError();
      v13 = v12;
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
      v15 = v13 + *(int *)(v14 + 48);
      v16 = (uint64_t *)(v13 + *(int *)(v14 + 64));
      v17 = sub_2449CF400();
      v18 = *(_QWORD *)(v17 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v13, a1, v17);
      sub_24493DF74((uint64_t)v25, v15);
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14C8);
      v16[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14D0);
      *v16 = v19;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
      return (_OWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    }
  }
  else
  {
    sub_244940E8C((uint64_t)&v21, &qword_2573A14A0);
    type metadata accessor for PreviewIncrementalUpdate.UnarchiveError();
    sub_244989F80(&qword_2573A14A8, (uint64_t)&unk_2449D9F44);
    swift_allocError();
    v9 = v8;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    swift_willThrow();
    v11 = sub_2449CF400();
    return (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  }
  return result;
}

uint64_t type metadata accessor for PreviewIncrementalUpdate.UnarchiveError()
{
  uint64_t result;

  result = qword_2573A1548;
  if (!qword_2573A1548)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t PreviewIncrementalUpdate.description.getter()
{
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  sub_2449CF898();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B8);
  sub_2449CFBE0();
  return 0;
}

unint64_t sub_2449891C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _QWORD v14[2];
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_2449CF400();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PreviewIncrementalUpdate.UnarchiveError();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_244989FC0(v1, (uint64_t)v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
    return 0xD00000000000003DLL;
  v11 = &v8[*(int *)(v9 + 48)];
  v12 = &v8[*(int *)(v9 + 64)];
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_24493DF64(v11, &v16);
  sub_24493DF64(v12, v15);
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  sub_2449CFB98();
  sub_2449CF898();
  __swift_project_boxed_opaque_existential_1(&v16, v17);
  swift_getDynamicType();
  sub_2449CFDCC();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  sub_2449CF898();
  sub_2449CFBE0();
  sub_2449CF898();
  sub_2449CF3AC();
  sub_2449CF7E4();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v14[0];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v10;
}

uint64_t sub_244989438()
{
  return sub_2449CF3DC();
}

_OWORD *sub_244989474@<X0>(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  return PreviewIncrementalUpdate.init(propertyListValue:)(a1, a2);
}

uint64_t destroy for PreviewIncrementalUpdate(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for PreviewIncrementalUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 16;
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 16, v4, v7);
  return a1;
}

_QWORD *assignWithCopy for PreviewIncrementalUpdate(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_2(a1 + 2, a2 + 2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_2(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      result[5] = a2[5];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for PreviewIncrementalUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for PreviewIncrementalUpdate()
{
  return &type metadata for PreviewIncrementalUpdate;
}

uint64_t *sub_244989748(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = sub_2449CF400();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = *(int *)(v7 + 48);
      v12 = *(uint64_t *)((char *)a2 + v11 + 24);
      *(uint64_t *)((char *)a1 + v11 + 24) = v12;
      (**(void (***)(void))(v12 - 8))();
      v13 = *(int *)(v7 + 64);
      v14 = *(uint64_t *)((char *)a2 + v13 + 24);
      *(uint64_t *)((char *)a1 + v13 + 24) = v14;
      (**(void (***)(void))(v14 - 8))();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_244989860(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(v2 + 48));
    return __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(v2 + 64));
  }
  return result;
}

char *sub_2449898DC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_2449CF400();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = *(int *)(v6 + 48);
    v10 = *(_QWORD *)&a2[v9 + 24];
    *(_QWORD *)&a1[v9 + 24] = v10;
    (**(void (***)(void))(v10 - 8))();
    v11 = *(int *)(v6 + 64);
    v12 = *(_QWORD *)&a2[v11 + 24];
    *(_QWORD *)&a1[v11 + 24] = v12;
    (**(void (***)(void))(v12 - 8))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_2449899D0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v17 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(a1, a2, v17);
      __swift_assign_boxed_opaque_existential_0((uint64_t *)&a1[*(int *)(v6 + 48)], (uint64_t *)&a2[*(int *)(v6 + 48)]);
      __swift_assign_boxed_opaque_existential_0((uint64_t *)&a1[*(int *)(v6 + 64)], (uint64_t *)&a2[*(int *)(v6 + 64)]);
      return a1;
    }
    sub_244940E8C((uint64_t)a1, &qword_2573A14B0);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_2449CF400();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  v12 = *(int *)(v6 + 48);
  v13 = *(_QWORD *)&a2[v12 + 24];
  *(_QWORD *)&a1[v12 + 24] = v13;
  (**(void (***)(void))(v13 - 8))();
  v14 = *(int *)(v6 + 64);
  v15 = *(_QWORD *)&a2[v14 + 24];
  *(_QWORD *)&a1[v14 + 24] = v15;
  (**(void (***)(void))(v15 - 8))();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

char *sub_244989B3C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_2449CF400();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    v9 = *(int *)(v6 + 48);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = *((_OWORD *)v11 + 1);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v12;
    v13 = *(int *)(v6 + 64);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v16;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_244989C18(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v21 = sub_2449CF400();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(a1, a2, v21);
      v22 = *(int *)(v6 + 48);
      v23 = &a1[v22];
      v24 = &a2[v22];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&a1[v22]);
      v25 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v25;
      v26 = *(int *)(v6 + 64);
      v27 = &a1[v26];
      v28 = &a2[v26];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&a1[v26]);
      v29 = *((_OWORD *)v28 + 1);
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v29;
      return a1;
    }
    sub_244940E8C((uint64_t)a1, &qword_2573A14B0);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_2449CF400();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  v12 = *(int *)(v6 + 48);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = *(int *)(v6 + 64);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_244989D84()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_244989D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_244989DE0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244989DEC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_244989E40(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_244989E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A14B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_244989EC0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_244989F34(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_244989F80(&qword_2573A1558, (uint64_t)&unk_2449D9F00);
  result = sub_244989F80(&qword_2573A14A8, (uint64_t)&unk_2449D9F44);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_244989F80(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PreviewIncrementalUpdate.UnarchiveError();
    result = MEMORY[0x24951C158](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_244989FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PreviewIncrementalUpdate.UnarchiveError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24498A004(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_24498A08C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    sub_24493DF74(*(_QWORD *)(a5 + 56) + 32 * a2, result);
    swift_bridgeObjectRetain();
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

unint64_t sub_24498A11C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1570);
  v2 = sub_2449CFBF8();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24498AA54(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_24493D884(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_24493DF64(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

BOOL static JITCapabilities.== infix(_:_:)(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

PreviewsMessagingOS::JITCapabilities __swiftcall JITCapabilities.init(supportsJITLinking:supportsLoadCommands:)(Swift::Bool supportsJITLinking, Swift::Bool supportsLoadCommands)
{
  __int16 v2;

  if (supportsLoadCommands)
    v2 = 256;
  else
    v2 = 0;
  return (PreviewsMessagingOS::JITCapabilities)(v2 & 0xFFFE | supportsJITLinking);
}

uint64_t static JITCapabilities.empty.getter()
{
  return 0;
}

uint64_t JITCapabilities.supportsJITLinking.getter(char a1)
{
  return a1 & 1;
}

uint64_t JITCapabilities.supportsJITLinking.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*JITCapabilities.supportsJITLinking.modify())()
{
  return nullsub_1;
}

uint64_t JITCapabilities.supportsLoadCommands.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t JITCapabilities.supportsLoadCommands.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*JITCapabilities.supportsLoadCommands.modify())()
{
  return nullsub_1;
}

uint64_t sub_24498A2B8(char *a1, char *a2)
{
  return sub_2449A1BEC(*a1, *a2);
}

uint64_t sub_24498A2C4()
{
  return sub_2449C70D8();
}

uint64_t sub_24498A2CC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24498A32C()
{
  return sub_2449C9D08();
}

uint64_t sub_24498A334@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24498A390(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0xD000000000000012;
  v3 = 0x80000002449E2770;
  if (*v1)
    v3 = 0x80000002449E2790;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_24498A3D4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0xD000000000000012;
}

uint64_t JITCapabilities.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24498A44C()
{
  sub_24498AA9C();
  return sub_2449CF604();
}

uint64_t sub_24498A4C0()
{
  return sub_24498A44C();
}

uint64_t JITCapabilities.init(propertyListValue:)(uint64_t a1)
{
  return sub_24498A7DC(a1) & 0x101;
}

uint64_t sub_24498A4F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v4;
  uint64_t result;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  char v9;

  v4 = a3 & 1;
  v7 = &type metadata for JITCapabilities.Key;
  v8 = sub_24498AA9C();
  v6[0] = v4;
  sub_2449CF3B8();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (!v3 && v9 != 2)
  {
    v6[0] = v9 & 1;
    return swift_setAtWritableKeyPath();
  }
  return result;
}

uint64_t sub_24498A5AC()
{
  return sub_2449CF3D0();
}

uint64_t sub_24498A5E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_24498A7DC(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

BOOL sub_24498A618(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

id static JITCapabilities.userDefaultSupportsJITLinking.getter()
{
  id v0;
  void *v1;
  id v2;

  if (qword_25739EDA8 != -1)
    swift_once();
  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)sub_2449CF85C();
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

void sub_24498A6F0()
{
  id v0;
  uint64_t inited;
  void *v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1568);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2449D1F20;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x80000002449E45C0;
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 48) = 1;
  sub_24498A11C(inited);
  v2 = (void *)sub_2449CF7CC();
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_registerDefaults_, v2);

}

uint64_t sub_24498A7DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  KeyPath = swift_getKeyPath();
  sub_24498A4F8(KeyPath, a1, 0);
  if (v1)
  {
    v5 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    return swift_release();
  }
  else
  {
    swift_release();
    v4 = swift_getKeyPath();
    sub_24498A4F8(v4, a1, 1);
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    swift_release();
    return 0;
  }
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for JITCapabilities(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JITCapabilities(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24498A9D4 + 4 * byte_2449D9F95[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_24498AA08 + 4 * byte_2449D9F90[v4]))();
}

uint64_t sub_24498AA08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_24498AA10(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x24498AA18);
  return result;
}

uint64_t sub_24498AA24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x24498AA2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24498AA30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_24498AA38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JITCapabilities()
{
  return &type metadata for JITCapabilities;
}

uint64_t sub_24498AA54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_24498AA9C()
{
  unint64_t result;

  result = qword_2573A1580;
  if (!qword_2573A1580)
  {
    result = MEMORY[0x24951C158](&unk_2449DA128, &type metadata for JITCapabilities.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1580);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for JITCapabilities.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24498AB2C + 4 * byte_2449D9F9F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24498AB60 + 4 * byte_2449D9F9A[v4]))();
}

uint64_t sub_24498AB60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24498AB68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24498AB70);
  return result;
}

uint64_t sub_24498AB7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24498AB84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24498AB88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24498AB90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JITCapabilities.Key()
{
  return &type metadata for JITCapabilities.Key;
}

unint64_t sub_24498ABB0()
{
  unint64_t result;

  result = qword_2573A1588;
  if (!qword_2573A1588)
  {
    result = MEMORY[0x24951C158](&unk_2449DA100, &type metadata for JITCapabilities.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1588);
  }
  return result;
}

uint64_t DaemonConnection.invalidationHandle.getter()
{
  sub_24498BD84();
  return swift_retain();
}

uint64_t DaemonConnection.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 104));
}

char *DaemonConnection.__allocating_init(connection:role:serviceDescription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v10;

  v5 = v4;
  swift_allocObject();
  v10 = sub_24498BD8C(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 8))(a2);
  swift_release();
  return v10;
}

char *DaemonConnection.init(connection:role:serviceDescription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  char *v7;

  v6 = *v4;
  v7 = sub_24498BD8C(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 8))(a2);
  swift_release();
  return v7;
}

uint64_t sub_24498AD0C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v2 = *a1;
  v3 = sub_2449CF4D8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = a1;
  MEMORY[0x24951C158](&protocol conformance descriptor for DaemonConnection<A>, v2);
  sub_2449777C8();
  sub_2449CF484();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_24498ADF4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = (_QWORD *)*a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE88);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (_QWORD *)((char *)a2 + v3[16]);
  v9 = *(int *)(v5 + 48);
  v10 = (char *)v7 + v9;
  v11 = (char *)v8 + v9;
  *v7 = *v8;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE90);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  sub_24495D96C();
  sub_2449CF454();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  sub_2449CF088();
  return (*(uint64_t (**)(_QWORD))(v3[11] + 16))(v3[10]);
}

uint64_t DaemonConnection.activate(receiver:interruptionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v5 = *v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE88);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (_QWORD *)((char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_retain();
  sub_2449CF094();
  v19 = type metadata accessor for DaemonConnection.Receiver(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), v9);
  v20 = MEMORY[0x24951C158](&unk_2449DA2B0, v19);
  v18[0] = a1;
  v18[1] = a2;
  swift_retain();
  sub_2449CF0C4();
  sub_244940E8C((uint64_t)v18, &qword_2573A1590);
  v10 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128));
  v11 = *(int *)(v6 + 48);
  v12 = (char *)v8 + v11;
  v13 = (char *)v10 + v11;
  *v8 = *v10;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE90);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  sub_24495D96C();
  sub_2449CF478();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v12, v14);
}

uint64_t DaemonConnection.sender.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v1[2] = v0;
  v1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE88);
  v1[4] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24498B104()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD **)(v0 + 32);
  v2 = (uint64_t *)(*(_QWORD *)(v0 + 16) + *(_QWORD *)(**(_QWORD **)(v0 + 16) + 128));
  v3 = *(int *)(*(_QWORD *)(v0 + 24) + 48);
  *(_DWORD *)(v0 + 80) = v3;
  v4 = (char *)v1 + v3;
  v5 = (char *)v2 + v3;
  v6 = *v2;
  *(_QWORD *)(v0 + 40) = *v2;
  *v1 = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE90);
  *(_QWORD *)(v0 + 48) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v0 + 56) = v8;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v4, v5, v7);
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v9;
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  *v9 = v0;
  v9[1] = sub_24498B1E8;
  return sub_2449CFAA8();
}

uint64_t sub_24498B1E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_24498B254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(int *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4 + v3, v1);
  swift_retain();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(sub_24498C40C, v5);
}

uint64_t sub_24498B2D0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 32) + *(int *)(v0 + 80), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_24498B31C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;
  id v31;

  v31 = a1;
  v30 = sub_2449CF724();
  v28 = *(_QWORD *)(v30 - 8);
  v4 = *(_QWORD *)(v28 + 64);
  v5 = MEMORY[0x24BDAC7A8](v30);
  v29 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v27 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TransportReply();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v27 - v16;
  sub_24494C1C0(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_244940E8C((uint64_t)v10, &qword_25739FD98);
    v18 = LazyPropertyList.encoded.getter();
    sub_2449CF0B8();

  }
  else
  {
    sub_24494C244((uint64_t)v10, (uint64_t)v17);
    v27[1] = *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 112));
    v31 = LazyPropertyList.encoded.getter();
    sub_2449CF730();
    sub_2449513C8((uint64_t)v17, (uint64_t)v15);
    v19 = v28;
    v20 = v29;
    v21 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v22 = v30;
    v21(v29, v7, v30);
    v23 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v24 = (v13 + *(unsigned __int8 *)(v19 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v25 = swift_allocObject();
    sub_24494C244((uint64_t)v15, v25 + v23);
    v21((char *)(v25 + v24), v20, v22);
    v26 = v31;
    sub_2449CF0AC();

    swift_release();
    sub_2449299E4((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for TransportReply);
  }
}

uint64_t DaemonConnection.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  sub_2449CFB98();
  v2 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 88) + 8))(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
  swift_bridgeObjectRelease();
  sub_2449CF898();
  swift_bridgeObjectRetain();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t DaemonConnection.send(serviceMessage:reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2449CF400();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ServiceMessage(0);
  sub_24498BFEC();
  sub_2449CF658();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_2449513C8(a2, (uint64_t)v5);
  v13 = type metadata accessor for TransportReply();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 0, 1, v13);
  sub_24498B31C(v8, (uint64_t)v5);
  sub_244940E8C((uint64_t)v5, &qword_25739FD98);
  return sub_2449299E4((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
}

uint64_t sub_24498B824(void *a1, void (*a2)(uint64_t *, char *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = objc_msgSend(a1, sel_data);
  v11 = sub_2449CF04C();
  v13 = v12;

  *v9 = v11;
  v9[1] = v13;
  swift_storeEnumTagMultiPayload();
  v14 = type metadata accessor for TransportReply();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
  a2(v9, v6);
  sub_244940E8C((uint64_t)v6, &qword_25739FD98);
  return sub_2449299E4((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
}

uint64_t sub_24498B970(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, char *), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *, char *);

  v26 = a5;
  v27 = a4;
  v24 = a2;
  v25 = a3;
  v6 = sub_2449CF634();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LazyPropertyList();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = objc_msgSend(a1, sel_data);
  v17 = sub_2449CF04C();
  v19 = v18;

  *v15 = v17;
  v15[1] = v19;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE768C8], v6);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v24;
  *(_QWORD *)(v20 + 24) = v25;
  swift_retain();
  v21 = a1;
  __swift_instantiateConcreteTypeFromMangledName(qword_25739F080);
  sub_2449CF2B0();
  v22 = type metadata accessor for TransportReply();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 0, 1, v22);
  v27(v15, v12);
  sub_244940E8C((uint64_t)v12, &qword_25739FD98);
  return sub_2449299E4((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for LazyPropertyList);
}

uint64_t sub_24498BBCC(void *a1)
{
  void (**v1)(uint64_t *, char *);

  return sub_24498B824(a1, *v1);
}

uint64_t sub_24498BBDC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_24498B970(a1, a2, a3, *(void (**)(uint64_t *, char *))v3, *(_QWORD *)(v3 + 8));
}

uint64_t *DaemonConnection.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104));
  swift_release();
  swift_bridgeObjectRelease();
  sub_244940E8C((uint64_t)v0 + *(_QWORD *)(*v0 + 128), &qword_25739FE88);
  return v0;
}

uint64_t DaemonConnection.__deallocating_deinit()
{
  DaemonConnection.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24498BC90(uint64_t a1, uint64_t a2)
{
  return DaemonConnection.activate(receiver:interruptionHandler:)(a1, a2);
}

uint64_t sub_24498BCB0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_2449285EC;
  return DaemonConnection.sender.getter();
}

uint64_t sub_24498BCF8()
{
  sub_24498BD84();
  return swift_retain();
}

uint64_t sub_24498BD18()
{
  return DaemonConnection.description.getter();
}

uint64_t sub_24498BD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&protocol conformance descriptor for DaemonConnection<A>, a3);
  return sub_2449CF640();
}

uint64_t sub_24498BD84()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

char *sub_24498BD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  unint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v5 = v4;
  v19 = a3;
  v20 = a4;
  v21 = a2;
  v7 = *(_QWORD *)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](a1);
  sub_2449CF6D0();
  swift_allocObject();
  *((_QWORD *)v4 + 2) = sub_2449CF6C4();
  v11 = (uint64_t *)&v5[*(_QWORD *)(*(_QWORD *)v5 + 128)];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FE88);
  *v11 = sub_2449CFA90();
  *(_QWORD *)&v5[*(_QWORD *)(*(_QWORD *)v5 + 112)] = a1;
  v12 = &v5[*(_QWORD *)(*(_QWORD *)v5 + 120)];
  v13 = v20;
  v14 = v21;
  *(_QWORD *)v12 = v19;
  *((_QWORD *)v12 + 1) = v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15(&v5[*(_QWORD *)(*(_QWORD *)v5 + 104)], v14, v8);
  swift_retain();
  swift_retain();
  sub_2449CF0A0();
  v22 = v5;
  v15((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v8);
  v16 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = v8;
  *((_QWORD *)v17 + 3) = *(_QWORD *)(v7 + 88);
  *((_QWORD *)v17 + 4) = v5;
  *((_QWORD *)v17 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v17[v16], (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  swift_retain();
  swift_retain();
  MEMORY[0x24951C158](&protocol conformance descriptor for DaemonConnection<A>, v7);
  sub_2449CF64C();
  swift_release();
  return v5;
}

uint64_t type metadata accessor for DaemonConnection.Receiver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DaemonConnection.Receiver);
}

unint64_t sub_24498BFEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2573A15A0[0];
  if (!qword_2573A15A0[0])
  {
    v1 = type metadata accessor for ServiceMessage(255);
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ServiceMessage, v1);
    atomic_store(result, qword_2573A15A0);
  }
  return result;
}

uint64_t sub_24498C034(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x24951C158](&protocol conformance descriptor for DaemonConnection<A>);
  result = MEMORY[0x24951C158](&protocol conformance descriptor for DaemonConnection<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_24498C078()
{
  JUMPOUT(0x24951C158);
}

uint64_t dispatch thunk of static DaemonConnectionRole.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DaemonConnectionRole.handleInvalidation()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_24498C098()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;

  v0 = MEMORY[0x24BEE0190] + 64;
  v5 = MEMORY[0x24BEE0190] + 64;
  v1 = swift_checkMetadataState();
  if (v2 <= 0x3F)
  {
    v6 = *(_QWORD *)(v1 - 8) + 64;
    v7 = v0;
    v8 = &unk_2449DA268;
    sub_24498C17C();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v9 = &v4;
      swift_initClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for DaemonConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DaemonConnection);
}

uint64_t method lookup function for DaemonConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DaemonConnection.__allocating_init(connection:role:serviceDescription:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

void sub_24498C17C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2573A1630[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
    v0 = sub_2449CFA9C();
    if (!v1)
      atomic_store(v0, qword_2573A1630);
  }
}

_QWORD *sub_24498C1E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_24498C214()
{
  return swift_release();
}

_QWORD *sub_24498C21C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_24498C254(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_24498C284(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_24498C2CC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_24498C308()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24498C32C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24498C350()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for TransportReply() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = sub_2449CF724();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v2, v7);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t sub_24498C410()
{
  uint64_t *v0;

  return sub_24498AD0C(v0);
}

uint64_t sub_24498C418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_24498C48C(uint64_t a1)
{
  uint64_t v1;

  return sub_24498ADF4(a1, *(_QWORD **)(v1 + 32));
}

CGSize __swiftcall PreviewTraits.Orientation.rotatedSize(_:)(CGSize result)
{
  unsigned __int8 *v1;
  unsigned int v2;
  double height;
  double v4;

  v2 = *v1;
  if (v2 >= 2)
    height = result.height;
  else
    height = result.width;
  if (v2 >= 2)
    result.height = result.width;
  v4 = height;
  result.width = v4;
  return result;
}

double PreviewTraits.Orientation.rotationDegrees.getter()
{
  char *v0;

  return dbl_2449DA2E8[*v0];
}

double PreviewTraits.Orientation.deviceRotationDegrees.getter()
{
  char *v0;

  return dbl_2449DA308[*v0];
}

uint64_t PreviewTraits.Orientation.deviceRotationAngle.getter()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(), sel_degrees);
  sub_24498C560();
  return sub_2449CEF8C();
}

unint64_t sub_24498C560()
{
  unint64_t result;

  result = qword_2573A16B8[0];
  if (!qword_2573A16B8[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_2573A16B8);
  }
  return result;
}

uint64_t sub_24498C59C()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for PipeServiceInterface(255, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  v4 = MEMORY[0x24951C158](&unk_2449DA58C, v3);
  type metadata accessor for TransportEvent(255, v3, v4, v5);
  result = sub_2449CFA78();
  if (v7 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t sub_24498C6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[14] = a3;
  v4[15] = v3;
  v4[16] = *(_QWORD *)(v3 + 88);
  v4[17] = *(_QWORD *)(v3 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[18] = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4[19] = AssociatedConformanceWitness;
  v8 = type metadata accessor for PipeServiceInterface(255, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v4[20] = v8;
  v9 = MEMORY[0x24951C158](&unk_2449DA58C, v8);
  v4[21] = v9;
  type metadata accessor for TransportEvent(255, v8, v9, v10);
  v11 = sub_2449CFA78();
  v4[22] = v11;
  v4[23] = *(_QWORD *)(v11 - 8);
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  swift_getObjectType();
  v4[26] = sub_2449CF9AC();
  v4[27] = v12;
  return swift_task_switch();
}

uint64_t sub_24498C804()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = v0[20];
  v1 = v0[21];
  v4 = v0[16];
  v3 = v0[17];
  v5 = (_QWORD *)v0[14];
  v6 = v5[3];
  v7 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  Transport.activate<A>(forReceivingEvents:)(v2, v6, v2, v7, v1);
  v8 = v5[3];
  v9 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v8);
  v11 = type metadata accessor for PipeServiceInterface(0, v3, v4, v10);
  v12 = (_QWORD *)swift_task_alloc();
  v0[28] = v12;
  MEMORY[0x24951C158](&unk_2449DA58C, v11);
  *v12 = v0;
  v12[1] = sub_24498C90C;
  return Transport.transportSender<A>(for:)((uint64_t)(v0 + 2), v11, v8, v11, v9);
}

uint64_t sub_24498C90C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24498C96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 192);
  v19 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v20 = *(_OWORD *)(v0 + 24);
  (*(void (**)(uint64_t))(v19 + 16))(v1);
  v21 = v5;
  v22 = v20;
  v23 = v7;
  v24 = v6;
  v25 = v8;
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = sub_24498D3F4(v1, &v21);
  type metadata accessor for Junction(0, v2, v3, v10);
  v11 = MEMORY[0x24951C158](&unk_2449DA570, v4);
  v12 = swift_retain();
  v13 = sub_244977694(v12, v11, 0, 0, (uint64_t)sub_24499131C, (uint64_t)v9, (uint64_t)sub_2449912DC, (uint64_t)v9);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 + 120)) = v13;
  swift_retain_n();
  swift_retain();
  swift_release();
  *(_QWORD *)(v0 + 104) = v9;
  sub_24495141C(v16, v0 + 64);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v9;
  sub_244951464((__int128 *)(v0 + 64), v14 + 24);
  swift_retain();
  MEMORY[0x24951C158](&unk_2449DA540, v4);
  sub_2449CF61C();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(v0 + 8))(v9, v13);
}

uint64_t sub_24498CB90()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24498CBE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v3[11] = *v2;
  v4 = sub_2449CF4D8();
  v3[12] = v4;
  v3[13] = *(_QWORD *)(v4 - 8);
  v3[14] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[15] = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3[16] = AssociatedConformanceWitness;
  v3[17] = type metadata accessor for PipeEvent.Content(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v3[18] = swift_task_alloc();
  v8 = swift_getAssociatedTypeWitness();
  v3[19] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[20] = v9;
  v3[21] = *(_QWORD *)(v9 + 64);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v11 = type metadata accessor for PipeEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v3[24] = v11;
  v3[25] = *(_QWORD *)(v11 - 8);
  v3[26] = swift_task_alloc();
  v13 = type metadata accessor for PipeServiceInterface(255, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = MEMORY[0x24951C158](&unk_2449DA58C, v13);
  v16 = type metadata accessor for TransportMessage(0, v13, v14, v15);
  v3[27] = v16;
  v3[28] = *(_QWORD *)(v16 - 8);
  v3[29] = swift_task_alloc();
  v18 = type metadata accessor for TransportEvent(0, v13, v14, v17);
  v3[30] = v18;
  v3[31] = *(_QWORD *)(v18 - 8);
  v3[32] = swift_task_alloc();
  sub_2449CFB2C();
  v3[33] = swift_task_alloc();
  v19 = sub_2449CFA6C();
  v3[34] = v19;
  v3[35] = *(_QWORD *)(v19 - 8);
  v3[36] = swift_task_alloc();
  swift_getObjectType();
  v3[37] = sub_2449CF9AC();
  v3[38] = v20;
  return swift_task_switch();
}

uint64_t sub_24498CE60()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[10];
  sub_2449CFA78();
  sub_2449CFA48();
  v0[39] = *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess();
  v2 = (_QWORD *)swift_task_alloc();
  v0[40] = v2;
  *v2 = v0;
  v2[1] = sub_24498CF14;
  return sub_2449CFA60();
}

uint64_t sub_24498CF14()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24498CF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 40) = v8;
    MEMORY[0x24951C158](&unk_2449DA518, v6);
    sub_2449777C8();
    sub_2449CF484();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v10 = *(_QWORD *)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10, v1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    goto LABEL_14;
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + *(_QWORD *)(v0 + 312));
  v15 = swift_bridgeObjectRetain();
  if (!MEMORY[0x24951B8E8](v15, v13))
  {
LABEL_15:
    v36 = *(_QWORD *)(v0 + 104);
    v35 = *(_QWORD *)(v0 + 112);
    v38 = *(_QWORD *)(v0 + 88);
    v37 = *(_QWORD *)(v0 + 96);
    v39 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v39;
    MEMORY[0x24951C158](&unk_2449DA518, v38);
    sub_2449777C8();
    sub_2449CF484();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    v40 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 320) = v40;
    *v40 = v0;
    v40[1] = sub_24498CF14;
    return sub_2449CFA60();
  }
  v16 = 0;
  v41 = v14;
  while (1)
  {
    v17 = sub_2449CF97C();
    sub_2449CF904();
    if ((v17 & 1) != 0)
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 16))(*(_QWORD *)(v0 + 184), v14+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 160) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 160) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 160) + 72) * v16, *(_QWORD *)(v0 + 152));
      v18 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_13;
      goto LABEL_8;
    }
    v27 = *(_QWORD *)(v0 + 168);
    result = sub_2449CFBB0();
    if (v27 != 8)
      break;
    v28 = result;
    v29 = *(_QWORD *)(v0 + 184);
    v30 = *(_QWORD *)(v0 + 152);
    v31 = *(_QWORD *)(v0 + 160);
    *(_QWORD *)(v0 + 48) = v28;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v29, v0 + 48, v30);
    swift_unknownObjectRelease();
    v18 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_13:
      __break(1u);
LABEL_14:
      v33 = *(_QWORD *)(v0 + 208);
      v32 = *(_QWORD *)(v0 + 216);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 256), v32);
      sub_24498D70C(v32, v34, v33);
    }
LABEL_8:
    v19 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 184);
    v43 = *(_QWORD *)(v0 + 200);
    v44 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 144);
    v25 = *(_QWORD *)(v0 + 120);
    v42 = *(_QWORD *)(v0 + 128);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v20, v23);
    v26 = v21;
    v14 = v41;
    sub_24494B844(v24, v26, v25, v42, v19);
    sub_24498DD44();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v19, v44);
    ++v16;
    if (v18 == MEMORY[0x24951B8E8](v41, v23))
      goto LABEL_15;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24498D3AC(uint64_t a1, uint64_t *a2)
{
  swift_allocObject();
  return sub_24498D3F4(a1, a2);
}

_QWORD *sub_24498D3F4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v19;
  __int128 v20;

  v3 = v2;
  v6 = *a2;
  v20 = *(_OWORD *)(a2 + 3);
  v7 = a2[5];
  sub_2449CF694();
  swift_allocObject();
  v2[2] = sub_2449CF688();
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 120)) = 0;
  v8 = *(_QWORD *)(*v2 + 128);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v19 = *(_OWORD *)(a2 + 1);
  *(_QWORD *)((char *)v3 + v8) = sub_2449CF964();
  v11 = (char *)v3 + *(_QWORD *)(*v3 + 104);
  v13 = type metadata accessor for PipeServiceInterface(255, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = MEMORY[0x24951C158](&unk_2449DA58C, v13);
  type metadata accessor for TransportEvent(255, v13, v14, v15);
  v16 = sub_2449CFA78();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v11, a1, v16);
  v17 = (char *)v3 + *(_QWORD *)(*v3 + 112);
  *(_QWORD *)v17 = v6;
  *(_OWORD *)(v17 + 8) = v19;
  *(_OWORD *)(v17 + 24) = v20;
  *((_QWORD *)v17 + 5) = v7;
  return v3;
}

uint64_t sub_24498D5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  swift_getObjectType();
  MEMORY[0x24951C158](&unk_2449DA540, v4);
  return sub_2449CF628();
}

uint64_t sub_24498D674(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 120)) = 0;
  swift_release();
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  return sub_2449CF484();
}

void sub_24498D70C(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[9];
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = a3;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = type metadata accessor for PipeServiceInterface.TwoWayContent(0, v4, v5, a2);
  v10[7] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10[8] = (char *)v10 - v7;
  v11 = type metadata accessor for TransportReply();
  v10[1] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v12 = (char *)v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24951C158](&unk_2449DA458, v6);
  v14 = v4;
  v15 = v6;
  v16 = v5;
  v17 = v9;
  type metadata accessor for PipeServiceInterface.Message();
}

uint64_t sub_24498DD44()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PipeEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v2);
  return sub_24494C108(sub_2449912C4);
}

void sub_24498DDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[48];
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v22 = a2;
  v23 = a1;
  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = &v12[-v5];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v18 = &v12[-v7];
  v9 = type metadata accessor for PipeServiceInterface.TwoWayContent(0, v3, v4, v8);
  MEMORY[0x24BDAC7A8](v9);
  v15 = &v12[-v10];
  v11 = MEMORY[0x24951C158](&unk_2449DA458, v9);
  v24 = v3;
  v25 = v9;
  v16 = v9;
  v26 = v4;
  v27 = v11;
  v14 = v11;
  type metadata accessor for PipeServiceInterface.Message();
}

void sub_24498DF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v11 - 304) = a1;
  *(_QWORD *)(v11 - 312) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v11 - 320) = (char *)&a9 - v12;
  v13 = type metadata accessor for TransportReply();
  *(_QWORD *)(v11 - 296) = v13;
  *(_QWORD *)(v11 - 376) = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v11 - 368) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v11 - 392) = (char *)&a9 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FD98);
  v18 = MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v11 - 384) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v11 - 272) = (char *)&a9 - v20;
  v21 = sub_2449CF400();
  *(_QWORD *)(v11 - 360) = v21;
  *(_QWORD *)(v11 - 280) = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v11 - 288) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v11 - 176) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v11 - 168) = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  *(_QWORD *)(v11 - 160) = (char *)&a9 - v24;
  v26 = type metadata accessor for PipeServiceInterface.OneWayContent(0, v9, v10, v25);
  MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v11 - 224) = (char *)&a9 - v27;
  v28 = MEMORY[0x24951C158](&unk_2449DA498, v26);
  *(_QWORD *)(v11 - 136) = v9;
  *(_QWORD *)(v11 - 128) = v26;
  *(_QWORD *)(v11 - 120) = v10;
  *(_QWORD *)(v11 - 112) = v28;
  *(_QWORD *)(v11 - 216) = v28;
  type metadata accessor for PipeServiceInterface.Message();
}

uint64_t sub_24498E190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int EnumCaseMultiPayload;

  *(_QWORD *)(v12 - 200) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v12 - 192) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v12 - 208) = (char *)&a9 - v13;
  v15 = type metadata accessor for PipeEvent.Content(0, v10, v11, v14);
  MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v12 - 184) = *(_QWORD *)(v9 + 32);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 16))((char *)&a9 - v17, *(_QWORD *)(v12 - 144), v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_24498E248 + 4 * word_2449DA334[EnumCaseMultiPayload]))();
}

void sub_24498E248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *(_QWORD *)(v8 - 352);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v11 = v4 + *(int *)(TupleTypeMetadata3 + 48);
  *(_QWORD *)(v8 - 192) = v4 + *(int *)(TupleTypeMetadata3 + 64);
  v12 = v4;
  v13 = *(_QWORD *)(v8 - 240);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 248) + 32))(*(_QWORD *)(v8 - 256), v12, v13);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 232) + 32))(*(_QWORD *)(v8 - 264), v11, v9);
  sub_24494C244(*(_QWORD *)(v8 - 192), *(_QWORD *)(v8 - 368));
  *(_QWORD *)(v8 - 136) = v0;
  *(_QWORD *)(v8 - 128) = v7;
  *(_QWORD *)(v8 - 120) = v6;
  *(_QWORD *)(v8 - 112) = v3;
  *(_QWORD *)(v8 - 104) = *(_QWORD *)(v8 - 184);
  *(_QWORD *)(v8 - 96) = v1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = *(_QWORD *)(v8 - 336);
  v16 = v15 + *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 248) + 16))(v15, *(_QWORD *)(v8 - 256), v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 232) + 16))(v16, *(_QWORD *)(v8 - 264), v9);
  v17 = *(_QWORD *)(v8 - 328);
  swift_storeEnumTagMultiPayload();
  v19 = type metadata accessor for PipeEvent(0, v2, v5, v18);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v8 - 176) + 16))(*(_QWORD *)(v8 - 160), *(_QWORD *)(v8 - 144) + *(int *)(v19 + 36), *(_QWORD *)(v8 - 168));
  sub_24498EBD8(v15, v17, *(_QWORD *)(v8 - 320));
}

uint64_t sub_24498E3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 - 152);
  v6 = MEMORY[0x24951C158](&protocol conformance descriptor for TransportSender<A>, v5);
  v7 = *(_QWORD *)(v4 - 304);
  v8 = MEMORY[0x24951C158](&unk_2449DA4D8, v7);
  TransportSenderProtocol<>.send(message:reply:)(v0, v3, v5, v6, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 312) + 8))(v0, v7);
  sub_24494C208(v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 232) + 8))(v1, v2);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 248) + 8))(*(_QWORD *)(v4 - 256), *(_QWORD *)(v4 - 240));
}

void sub_24498E848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v2 - 152);
  v4 = MEMORY[0x24951C158](&protocol conformance descriptor for TransportSender<A>, v3);
  v5 = *(_QWORD *)(v2 - 304);
  v6 = MEMORY[0x24951C158](&unk_2449DA4D8, v5);
  TransportSenderProtocol<>.send(message:reply:)(v0, v1, v3, v4, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 312) + 8))(v0, v5);
  sub_24494C208(v1);
  sub_244940E8C(*(_QWORD *)(v2 - 272), &qword_25739FD98);
  JUMPOUT(0x24498E75CLL);
}

uint64_t sub_24498E8D8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a3;
  v5 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v19 - v11;
  if (*(uint64_t *)((char *)a2 + *(_QWORD *)(v5 + 120)))
  {
    swift_retain();
    sub_244977710(a1);
    return swift_release();
  }
  else
  {
    v14 = type metadata accessor for PipeEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v20 + *(int *)(v14 + 36), v8);
    v17 = type metadata accessor for EndpointInvalidated(0, v8, v15, v16);
    MEMORY[0x24951C158](&unk_2449D3D90, v17);
    swift_allocError();
    sub_24494C8C4((uint64_t)v12, v8, v18);
    return swift_willThrow();
  }
}

uint64_t sub_24498EA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for PipeServiceInterface(255, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  v6 = MEMORY[0x24951C158](&unk_2449DA58C, v5);
  type metadata accessor for TransportEvent(255, v5, v6, v7);
  v8 = sub_2449CFA78();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24498EB9C()
{
  sub_24498EA70();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Bridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Bridge);
}

uint64_t type metadata accessor for PipeServiceInterface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeServiceInterface);
}

void sub_24498EBD8(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for PipeServiceInterface.Message();
}

uint64_t sub_24498EC34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v2 + *(int *)(a1 + 52);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, v1, AssociatedTypeWitness);
}

uint64_t sub_24498EC8C()
{
  uint64_t v0;
  unsigned int v1;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (v0)
    return v1;
  else
    return 0;
}

void sub_24498ECDC()
{
  type metadata accessor for PipeServiceInterface.Message.Key();
}

uint64_t sub_24498ED00()
{
  uint64_t v0;
  _WORD *v1;

  sub_2449CFC94();
  swift_allocObject();
  v0 = sub_2449CF8F8();
  *v1 = 256;
  return sub_244993CF8(v0);
}

uint64_t sub_24498ED44(char a1)
{
  if ((a1 & 1) != 0)
    return 0x74616E6974736564;
  else
    return 0x64616F6C796170;
}

uint64_t sub_24498ED84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DA540, a3);
  return sub_2449CF610();
}

uint64_t sub_24498EDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DA6A0, a3);
  return sub_2449CFCE8();
}

uint64_t sub_24498EE24(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DA6A0, a1);
  return sub_2449CF8D4();
}

uint64_t sub_24498EE70()
{
  MEMORY[0x24951C158](&unk_2449DA6A0);
  return sub_2449CF8EC();
}

uint64_t sub_24498EEC0()
{
  MEMORY[0x24951C158](&unk_2449DA6A0);
  return sub_2449CF8E0();
}

uint64_t sub_24498EF10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24498EC8C();
  *a1 = result;
  return result;
}

uint64_t sub_24498EF48@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24498ED44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24498EF7C()
{
  char *v0;

  return sub_24498ED44(*v0);
}

void sub_24498EF90()
{
  sub_24498ECDC();
}

uint64_t sub_24498EFB0(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_24498EFC0()
{
  return sub_2449CF3D0();
}

void sub_24498EFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[24];

  v13[16] = a5;
  v13[17] = a4;
  v13[15] = a2;
  swift_getAssociatedTypeWitness();
  v9 = sub_2449CFB2C();
  v13[13] = *(_QWORD *)(v9 - 8);
  v13[14] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v13[8] = (char *)v13 - v10;
  v11 = sub_2449CFB2C();
  v13[11] = *(_QWORD *)(v11 - 8);
  v13[12] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13[4] = (char *)v13 - v12;
  v13[19] = a2;
  v13[20] = a3;
  v13[21] = a4;
  v13[22] = a5;
  type metadata accessor for PipeServiceInterface.Message.Key();
}

void sub_24498F0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v11 - 232) = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v11 - 192) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  *(_QWORD *)(v11 - 264) = TupleTypeMetadata2;
  v13 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  *(_QWORD *)(v11 - 256) = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&a9 - v15;
  v17 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v11 - 200) = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v19 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v11 - 216) = (char *)&a9 - v20;
  v21 = *(int *)(v19 + 48);
  *(_QWORD *)(v11 - 248) = v19;
  *((_BYTE *)&a9 - v20) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))((char *)&a9 + v21 - v20, v10, v9);
  *(_QWORD *)(v11 - 224) = v16;
  *v16 = 1;
  *(_QWORD *)(v11 - 120) = *(_QWORD *)(v11 - 152);
  *(_QWORD *)(v11 - 112) = v9;
  v22 = *(_QWORD *)(v11 - 144);
  *(_QWORD *)(v11 - 104) = *(_QWORD *)(v11 - 136);
  *(_QWORD *)(v11 - 96) = v22;
  type metadata accessor for PipeServiceInterface.Message();
}

uint64_t sub_24498F230(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  void (*v4)(_BYTE *, uint64_t, uint64_t);
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;

  v11 = v8 + *(int *)(a1 + 52);
  v12 = *(_QWORD *)(v3 - 8);
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16);
  v13(v6, v11, v3);
  v14 = &v2[*(int *)(v7 + 48)];
  *v2 = 0;
  v4(v14, v5, v1);
  v15 = *(_QWORD *)(v10 - 240);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(v15, v14, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v1);
  *(_BYTE *)(v10 - 120) = 0;
  v16 = *(_QWORD *)(v10 - 264);
  v17 = *(_BYTE **)(v10 - 256);
  v18 = &v17[*(int *)(v16 + 48)];
  *v17 = 1;
  v13(v18, (uint64_t)v6, v3);
  v19 = *(_QWORD *)(v10 - 208);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v19, v18, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v3);
  *(_BYTE *)(v10 - 121) = 1;
  MEMORY[0x24951C158](&unk_2449DAA90, *(_QWORD *)(v10 - 232));
  swift_getAssociatedConformanceWitness();
  v20 = sub_2449CF604();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 168) + 8))(v19, *(_QWORD *)(v10 - 160));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 184) + 8))(v15, *(_QWORD *)(v10 - 176));
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v10 - 192) + 8))(*(_QWORD *)(v10 - 224), v16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v10 - 200) + 8))(*(_QWORD *)(v10 - 216), *(_QWORD *)(v10 - 248));
  return v20;
}

void sub_24498F3DC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11[1] = (char *)v11 - v10;
  v13 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = a1;
  v15 = a2;
  v11[2] = a3;
  v16 = a3;
  v17 = a4;
  type metadata accessor for PipeServiceInterface.Message.Key();
}

uint64_t sub_24498F4B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 - 96) = a1;
  v10 = MEMORY[0x24951C158](&unk_2449DAA90, a1);
  *(_QWORD *)(v8 - 88) = v10;
  *(_BYTE *)(v8 - 120) = 0;
  sub_2449CF37C();
  if (!v6)
  {
    *(_QWORD *)(v8 - 192) = v5;
    __swift_destroy_boxed_opaque_existential_1(v8 - 120);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 32))(*(_QWORD *)(v8 - 72), v1, v3);
    *(_QWORD *)(v8 - 96) = a1;
    *(_QWORD *)(v8 - 88) = v10;
    *(_BYTE *)(v8 - 120) = 1;
    v13 = *(_QWORD *)(v8 - 176);
    swift_getAssociatedConformanceWitness();
    sub_2449CF37C();
    v14 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v2, v14);
    __swift_destroy_boxed_opaque_existential_1(v8 - 120);
    *(_QWORD *)(v8 - 120) = v7;
    *(_QWORD *)(v8 - 112) = v3;
    *(_QWORD *)(v8 - 104) = v13;
    *(_QWORD *)(v8 - 96) = v4;
    type metadata accessor for PipeServiceInterface.Message();
  }
  v11 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v2, v11);
  return __swift_destroy_boxed_opaque_existential_1(v8 - 120);
}

uint64_t sub_24498F648(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24498F680 + 4 * byte_2449DA33E[a1]))(0xD000000000000011, 0x80000002449E27D0);
}

uint64_t sub_24498F680()
{
  return 0x704F6D6165727473;
}

uint64_t sub_24498F6B4()
{
  return 0x654D6D6165727473;
}

void sub_24498F6DC(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  sub_24498F3DC(a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t sub_24498F6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DA7E0, a3);
  return sub_2449CFCE8();
}

uint64_t sub_24498F750(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DA7E0, a1);
  return sub_2449CF8D4();
}

uint64_t sub_24498F79C()
{
  MEMORY[0x24951C158](&unk_2449DA7E0);
  return sub_2449CF8EC();
}

uint64_t sub_24498F7EC()
{
  MEMORY[0x24951C158](&unk_2449DA7E0);
  return sub_2449CF8E0();
}

uint64_t sub_24498F83C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449905B0();
  *a1 = result;
  return result;
}

uint64_t sub_24498F878@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24499079C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_24498F648, a2);
}

uint64_t sub_24498F884(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DA7E0, a1);
  return sub_2449CF670();
}

uint64_t sub_24498F8D8()
{
  MEMORY[0x24951C158](&unk_2449DA7E0);
  return sub_2449CF67C();
}

void sub_24498F944(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v3 + 16))(v2);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  v5 = (char *)sub_24498F9D8
     + 4
     * byte_2449DA342[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 3, v4)];
  __asm { BR              X10 }
}

uint64_t sub_24498F9D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
  return 1;
}

uint64_t sub_24498FA18(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6567617373656DLL;
  else
    return 0x696D697263736964;
}

uint64_t sub_24498FA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DA740, a3);
  return sub_2449CFCE8();
}

uint64_t sub_24498FAAC(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DA740, a1);
  return sub_2449CF8D4();
}

uint64_t sub_24498FAF8()
{
  MEMORY[0x24951C158](&unk_2449DA740);
  return sub_2449CF8EC();
}

uint64_t sub_24498FB48()
{
  MEMORY[0x24951C158](&unk_2449DA740);
  return sub_2449CF8E0();
}

uint64_t sub_24498FB98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244990108();
  *a1 = result;
  return result;
}

uint64_t sub_24498FBD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_244990348(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_24498FA18, a2);
}

uint64_t sub_24498FBE0()
{
  char *v0;

  return sub_24498FA18(*v0);
}

uint64_t sub_24498FBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[24];
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v6);
  v28 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2449CF400();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v27 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v30 = v15;
  v31 = v16;
  v32 = v3;
  v18 = type metadata accessor for PipeServiceInterface.OneWayContent.Key(0, v15, v16, v17);
  v20 = type metadata accessor for PipeServiceInterface.OneWayContent.Discriminant(0, v15, v16, v19);
  v21 = MEMORY[0x24951C158](&unk_2449DAA68, v18);
  MEMORY[0x24951C158](&unk_2449DAA28, v20);
  v29 = a2;
  sub_2449CF3E8();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v3, a1);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v14, 3, v22);
  if (!(_DWORD)result)
  {
    v24 = v27;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v27, v14, v8);
    v25 = (uint64_t)v28;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v28, v24, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v25, 0, 1, v8);
    v34 = v18;
    v35 = v21;
    v33[0] = 1;
    sub_2449CF370();
    sub_244940E8C(v25, &qword_25739F710);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v24, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  }
  return result;
}

uint64_t sub_24498FE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for PipeServiceInterface.OneWayContent(0, a2, a3, a4);
  MEMORY[0x24BDAC7A8](v8);
  v15 = type metadata accessor for PipeServiceInterface.OneWayContent.Key(0, a2, a3, v9);
  v16 = MEMORY[0x24951C158](&unk_2449DAA68, v15);
  v14[0] = 0;
  v11 = type metadata accessor for PipeServiceInterface.OneWayContent.Discriminant(0, a2, a3, v10);
  MEMORY[0x24951C158](&unk_2449DAA28, v11);
  sub_2449CF37C();
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    __asm { BR              X10 }
  }
  v12 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t sub_244990108()
{
  uint64_t v0;
  unsigned int v1;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (v0)
    return v1;
  else
    return 0;
}

uint64_t sub_244990154(char a1)
{
  if ((a1 & 1) != 0)
    return 0x654D6D6165727473;
  else
    return 0x7453657461657263;
}

uint64_t sub_2449901A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24498FE34(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
}

uint64_t sub_2449901C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DA920, a3);
  return sub_2449CFCE8();
}

uint64_t sub_244990214(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DA920, a1);
  return sub_2449CF8D4();
}

uint64_t sub_244990260()
{
  MEMORY[0x24951C158](&unk_2449DA920);
  return sub_2449CF8EC();
}

uint64_t sub_2449902B0()
{
  MEMORY[0x24951C158](&unk_2449DA920);
  return sub_2449CF8E0();
}

uint64_t sub_244990300@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244990108();
  *a1 = result;
  return result;
}

uint64_t sub_24499033C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_244990348(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_244990154, a2);
}

uint64_t sub_244990348@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X2>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v6;

  result = a2(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_24499037C(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DA920, a1);
  return sub_2449CF670();
}

uint64_t sub_2449903D0()
{
  MEMORY[0x24951C158](&unk_2449DA920);
  return sub_2449CF67C();
}

BOOL sub_24499043C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v3 + 16))(v2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    AssociatedTypeWitness = sub_2449CF400();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v6 = swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(&v2[*(int *)(TupleTypeMetadata2 + 48)], v6);
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  return EnumCaseMultiPayload == 1;
}

uint64_t sub_2449905B0()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_2449905F4(char a1)
{
  return *(_QWORD *)&aDiscrimiorigin[8 * a1];
}

uint64_t sub_244990614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DA880, a3);
  return sub_2449CFCE8();
}

uint64_t sub_244990668(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DA880, a1);
  return sub_2449CF8D4();
}

uint64_t sub_2449906B4()
{
  MEMORY[0x24951C158](&unk_2449DA880);
  return sub_2449CF8EC();
}

uint64_t sub_244990704()
{
  MEMORY[0x24951C158](&unk_2449DA880);
  return sub_2449CF8E0();
}

uint64_t sub_244990754@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449905B0();
  *a1 = result;
  return result;
}

uint64_t sub_244990790@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24499079C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2449905F4, a2);
}

uint64_t sub_24499079C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X2>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v6;

  result = a2(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_2449907CC()
{
  char *v0;

  return sub_2449905F4(*v0);
}

uint64_t sub_2449907D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t v62;

  v56 = a2;
  v4 = sub_2449CF400();
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v6);
  v53 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v45 = AssociatedTypeWitness;
  v11 = swift_getAssociatedTypeWitness();
  v44 = sub_2449CFB2C();
  v42 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v41 = (char *)&v41 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(v13 - 8);
  v52 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v46 = (char *)&v41 - v15;
  v47 = *(_QWORD *)(v11 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v50 = (char *)&v41 - v17;
  v18 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v9;
  v58 = v8;
  v21 = v2;
  v59 = v2;
  v23 = type metadata accessor for PipeServiceInterface.TwoWayContent.Key(0, v9, v8, v22);
  v25 = type metadata accessor for PipeServiceInterface.TwoWayContent.Discriminant(0, v9, v8, v24);
  v26 = MEMORY[0x24951C158](&unk_2449DAA00, v23);
  MEMORY[0x24951C158](&unk_2449DA9C0, v25);
  v49 = v26;
  sub_2449CF3E8();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v21, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = v54;
    v28 = v48;
    v29 = v20;
    v30 = v55;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v48, v29, v55);
    v31 = (uint64_t)v53;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v53, v28, v30);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v31, 0, 1, v30);
    v61 = v23;
    v62 = v49;
    v60[0] = 3;
    sub_2449CF370();
    sub_244940E8C(v31, &qword_25739F710);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v30);
  }
  else
  {
    v32 = v52;
    v33 = &v20[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v34 = v47;
    v35 = v50;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v50, v20, v11);
    v36 = v46;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v46, v33, v32);
    v37 = v41;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v41, v35, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v11);
    v38 = v49;
    v61 = v23;
    v62 = v49;
    v60[0] = 1;
    swift_getAssociatedConformanceWitness();
    sub_2449CF370();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v37, v44);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    v39 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 56))(v36, v9, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v39, 0, 1, v55);
    v61 = v23;
    v62 = v38;
    v60[0] = 2;
    sub_2449CF370();
    sub_244940E8C(v39, &qword_25739F710);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v52);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v50, v11);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
}

uint64_t sub_244990CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _BYTE v42[24];
  uint64_t v43;
  uint64_t v44;
  char v45;

  v38 = a4;
  v7 = sub_2449CF400();
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PipeServiceInterface.TwoWayContent(0, a2, a3, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  v37 = v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v33 - v15;
  v18 = type metadata accessor for PipeServiceInterface.TwoWayContent.Key(0, a2, a3, v17);
  v43 = v18;
  v19 = MEMORY[0x24951C158](&unk_2449DAA00, v18);
  v44 = v19;
  v42[0] = 0;
  v21 = type metadata accessor for PipeServiceInterface.TwoWayContent.Discriminant(0, a2, a3, v20);
  MEMORY[0x24951C158](&unk_2449DA9C0, v21);
  v22 = a1;
  v23 = v41;
  sub_2449CF37C();
  if (v23)
  {
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(a1, v40);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  }
  else
  {
    v41 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    v43 = v18;
    v44 = v19;
    if ((v45 & 1) != 0)
    {
      v42[0] = 3;
      v25 = v40;
      sub_2449CF37C();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v22, v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      v26 = v36;
      swift_storeEnumTagMultiPayload();
      v27 = v14;
    }
    else
    {
      v34 = v19;
      v42[0] = 1;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      v27 = v41;
      sub_2449CF37C();
      v33 = a2;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      v28 = v35;
      v43 = v18;
      v44 = v34;
      v42[0] = 2;
      v29 = v40;
      sub_2449CF37C();
      v30 = a3;
      v31 = v33;
      swift_getAssociatedTypeWitness();
      swift_getTupleTypeMetadata2();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 64))(v28, v31, v30);
      v32 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
      v32(v22, v29);
      v32((uint64_t)v28, v29);
      v26 = v36;
      swift_storeEnumTagMultiPayload();
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v38, v27, v26);
  }
}

uint64_t sub_244991188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_244990CF8(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

void sub_2449911A4()
{
  JUMPOUT(0x24951C158);
}

uint64_t sub_2449911B4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449DA540);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for PipeServiceInterface.Message.Key()
{
  JUMPOUT(0x24951C0C8);
}

void type metadata accessor for PipeServiceInterface.Message()
{
  JUMPOUT(0x24951C0C8);
}

void sub_2449911F8()
{
  uint64_t *v0;

  sub_24498EFF4(v0[6], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t type metadata accessor for PipeServiceInterface.OneWayContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeServiceInterface.OneWayContent);
}

uint64_t type metadata accessor for PipeServiceInterface.OneWayContent.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeServiceInterface.OneWayContent.Key);
}

uint64_t type metadata accessor for PipeServiceInterface.OneWayContent.Discriminant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeServiceInterface.OneWayContent.Discriminant);
}

void sub_24499122C(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  *a1 = 0;
  v8 = type metadata accessor for PipeServiceInterface.OneWayContent(0, v6, v7, a4);
  sub_24498F944(v8);
  *a2 = v9;
}

uint64_t type metadata accessor for PipeServiceInterface.TwoWayContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeServiceInterface.TwoWayContent);
}

uint64_t type metadata accessor for PipeServiceInterface.TwoWayContent.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeServiceInterface.TwoWayContent.Key);
}

uint64_t type metadata accessor for PipeServiceInterface.TwoWayContent.Discriminant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PipeServiceInterface.TwoWayContent.Discriminant);
}

BOOL sub_244991288(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  *a1 = 0;
  v8 = type metadata accessor for PipeServiceInterface.TwoWayContent(0, v6, v7, a4);
  result = sub_24499043C(v8);
  *a2 = result;
  return result;
}

uint64_t sub_2449912C4(uint64_t a1)
{
  uint64_t v1;

  return sub_24498E8D8(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_2449912DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_24498D5D4(a1, a2, a3, v3);
}

uint64_t sub_2449912E4()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_244991310(uint64_t a1)
{
  uint64_t v1;

  return sub_24498D674(a1, *(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24));
}

void sub_24499131C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_244991330(a1, a2, a3, a4);
}

void sub_244991330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata3;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;

  v5 = v4;
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v9 = type metadata accessor for PipeEvent.Content(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v30 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v33 = a1;
  v18(v12, a1, v9);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v20 = swift_getAssociatedTypeWitness();
    type metadata accessor for TransportReply();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v30 = &v12[*(int *)(TupleTypeMetadata3 + 48)];
    v22 = (uint64_t)&v12[*(int *)(TupleTypeMetadata3 + 64)];
    v23 = v32;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v17, v12, AssociatedTypeWitness);
    sub_24494C208(v22);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v30, v20);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v31, v17, AssociatedTypeWitness);
    swift_beginAccess();
    sub_2449CF9A0();
    sub_2449CF988();
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, AssociatedTypeWitness);
  }
  v24 = (uint64_t *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 112));
  v25 = v24[3];
  v34 = *v24;
  v35 = *(_OWORD *)(v24 + 1);
  v36 = v25;
  v37 = *((_OWORD *)v24 + 2);
  v26 = type metadata accessor for PipeServiceInterface(255, v7, v8, v19);
  v27 = MEMORY[0x24951C158](&unk_2449DA58C, v26);
  v29 = type metadata accessor for TransportSender(0, v26, v27, v28);
  sub_24498DDF0(v33, v29);
}

uint64_t sub_244991624(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_244991670 + 4 * byte_2449DA34F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2449916A4 + 4 * byte_2449DA34A[v4]))();
}

uint64_t sub_2449916A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449916AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2449916B4);
  return result;
}

uint64_t sub_2449916C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2449916C8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2449916CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449916D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2449916E0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24499172C + 4 * byte_2449DA359[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_244991760 + 4 * byte_2449DA354[v4]))();
}

uint64_t sub_244991760(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_244991768(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x244991770);
  return result;
}

uint64_t sub_24499177C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x244991784);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_244991788(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_244991790(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499179C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2449917A4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_244991844(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_24499193C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t sub_2449919B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_244991A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_244991ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_244991B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_244991BE4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, AssociatedTypeWitness);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_244991D94(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_244991FC4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2449CF400();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_244992018(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = sub_2449CF400();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t sub_2449920F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_2449CF400();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *sub_244992158(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_2449CF400();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *sub_24499220C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_2449CF400();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_244940E8C((uint64_t)a1, &qword_2573A17D8);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_2449CF400();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

void *sub_244992318(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_2449CF400();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *sub_2449923CC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_2449CF400();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_244940E8C((uint64_t)a1, &qword_2573A17D8);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_2449CF400();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t sub_2449924D8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2449924E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4)
    return v5 - 3;
  else
    return 0;
}

uint64_t sub_244992534()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_244992540(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 3);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_244992598(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
}

uint64_t sub_2449925D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A17D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 3, v4);
}

uint64_t sub_244992618()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[6];

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v2 = swift_getAssociatedTypeWitness();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v7[4] = v7;
      v4 = sub_2449CF400();
      AssociatedTypeWitness = v4;
      if (v5 <= 0x3F)
      {
        v7[5] = *(_QWORD *)(v4 - 8) + 64;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_244992758(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v10 & ~(unint64_t)v9) + *(_QWORD *)(v8 + 64);
  v12 = sub_2449CF400();
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v13 + 64) > v11)
    v11 = *(_QWORD *)(v13 + 64);
  v14 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v13 + 80) | v9);
  if (v14 <= 7
    && v11 + 1 <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v13 + 80) | v9) & 0x100000) == 0)
  {
    v18 = *((unsigned __int8 *)a2 + v11);
    if (v18 >= 2)
    {
      if (v11 <= 3)
        v19 = v11;
      else
        v19 = 4;
      __asm { BR              X13 }
    }
    if (v18 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
      *((_BYTE *)a1 + v11) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & ~(unint64_t)v9, ((unint64_t)a2 + v10) & ~(unint64_t)v9, v7);
      *((_BYTE *)a1 + v11) = 0;
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_244992994(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v4 + v7;
  v9 = ((v4 + v7) & ~v7) + *(_QWORD *)(v6 + 64);
  v10 = sub_2449CF400();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12 <= v9)
    v12 = v9;
  v13 = *(unsigned __int8 *)(a1 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 1)
  {
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    v16 = a1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
    v16 = (v8 + a1) & ~v7;
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    v10 = v5;
  }
  return v15(v16, v10);
}

uint64_t sub_244992B34(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v10 & ~v9) + *(_QWORD *)(v8 + 64);
  v12 = sub_2449CF400();
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v13 + 64) > v11)
    v11 = *(_QWORD *)(v13 + 64);
  v14 = *(unsigned __int8 *)(a2 + v11);
  if (v14 >= 2)
  {
    if (v11 <= 3)
      v15 = v11;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  if (v14 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a1, a2, v12);
    v16 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v10 + a1) & ~v9, (v10 + a2) & ~v9, v7);
    v16 = 0;
  }
  *(_BYTE *)(a1 + v11) = v16;
  return a1;
}

uint64_t sub_244992D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v6 = swift_getAssociatedTypeWitness();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = v5 + v8;
    v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
    v11 = sub_2449CF400();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v10)
      v10 = *(_QWORD *)(v12 + 64);
    v13 = *(unsigned __int8 *)(a1 + v10);
    if (v13 >= 2)
    {
      if (v10 <= 3)
        v14 = v10;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v8;
    if (v13 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v9 + a1) & v15, v6);
    }
    v16 = *(unsigned __int8 *)(a2 + v10);
    if (v16 >= 2)
    {
      if (v10 <= 3)
        v17 = v10;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, a2, v11);
      v18 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v9 + a1) & v15, (v9 + a2) & v15, v6);
      v18 = 0;
    }
    *(_BYTE *)(a1 + v10) = v18;
  }
  return a1;
}

uint64_t sub_244992FD0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v10 & ~v9) + *(_QWORD *)(v8 + 64);
  v12 = sub_2449CF400();
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v13 + 64) > v11)
    v11 = *(_QWORD *)(v13 + 64);
  v14 = *(unsigned __int8 *)(a2 + v11);
  if (v14 >= 2)
  {
    if (v11 <= 3)
      v15 = v11;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  if (v14 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(a1, a2, v12);
    v16 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v10 + a1) & ~v9, (v10 + a2) & ~v9, v7);
    v16 = 0;
  }
  *(_BYTE *)(a1 + v11) = v16;
  return a1;
}

uint64_t sub_2449931A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v6 = swift_getAssociatedTypeWitness();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = v5 + v8;
    v10 = (v9 & ~v8) + *(_QWORD *)(v7 + 64);
    v11 = sub_2449CF400();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v10)
      v10 = *(_QWORD *)(v12 + 64);
    v13 = *(unsigned __int8 *)(a1 + v10);
    if (v13 >= 2)
    {
      if (v10 <= 3)
        v14 = v10;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v8;
    if (v13 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v9 + a1) & v15, v6);
    }
    v16 = *(unsigned __int8 *)(a2 + v10);
    if (v16 >= 2)
    {
      if (v10 <= 3)
        v17 = v10;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(a1, a2, v11);
      v18 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))((v9 + a1) & v15, (v9 + a2) & v15, v6);
      v18 = 0;
    }
    *(_BYTE *)(a1 + v10) = v18;
  }
  return a1;
}

uint64_t sub_24499346C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = ((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v7 = sub_2449CF400();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) <= v6)
    v8 = v6;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 > 3)
      LODWORD(v9) = 4;
    __asm { BR              X11 }
  }
  return (v14 + 255);
}

void sub_244993648(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64);
  if (v9 <= v8)
    v9 = v8;
  v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_2449938A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = ((v2 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64);
  if (v5 <= v4)
    v5 = v4;
  result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_2449939F4(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  if (a2 > 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v10 = ((v8 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v11 = sub_2449CF400();
    if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) > v10)
      v10 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
    v12 = a2 - 2;
    if (v10 < 4)
    {
      v13 = v12 >> (8 * v10);
      v14 = v12 & ~(-1 << (8 * v10));
      a1[v10] = v13 + 2;
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v10] = 2;
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(sub_2449CF400() - 8) + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    v6 = swift_getAssociatedTypeWitness();
    v7 = ((v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
    if (v4 > v7)
      v7 = v4;
    a1[v7] = a2;
  }
}

void sub_244993C2C()
{
  JUMPOUT(0x24951C158);
}

void sub_244993C3C()
{
  JUMPOUT(0x24951C158);
}

void sub_244993C4C()
{
  JUMPOUT(0x24951C158);
}

void sub_244993C5C()
{
  JUMPOUT(0x24951C158);
}

void sub_244993C6C()
{
  JUMPOUT(0x24951C158);
}

void sub_244993C7C()
{
  JUMPOUT(0x24951C158);
}

uint64_t sub_244993C8C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_244993CF8(uint64_t a1)
{
  sub_2449CF9A0();
  return a1;
}

uint64_t sub_244993D20(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *v1;
  v17[1] = *a1;
  v18 = a1;
  v3 = sub_2449CF0DC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v17 - v8;
  sub_2449CF0D0();
  v19 = 0x2068636E617262;
  v20 = 0xE700000000000000;
  sub_244999F30(&qword_2573A0D70, MEMORY[0x24BE76218]);
  sub_2449CFC88();
  sub_2449CF898();
  swift_bridgeObjectRelease();
  v10 = v19;
  v11 = v20;
  v12 = MEMORY[0x24951C158](&unk_2449DAC88, v2);
  v13 = sub_244994AC0(v10, v11, v2, v12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v21 = sub_244997994((uint64_t)v13);
  v22 = v14;
  swift_beginAccess();
  type metadata accessor for Junction(255, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v15);
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  sub_244999F30(&qword_2573A1D40, MEMORY[0x24BE76208]);
  sub_2449CF814();
  sub_2449CF82C();
  swift_endAccess();
  sub_2449774A8((uint64_t)v13, (uint64_t)v18);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t sub_244993F60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = swift_allocObject();
  sub_2449975C8();
  v3 = MEMORY[0x24951C158](&unk_2449DAC88, v1);
  sub_2449941E8(v1, v3);
  return v2;
}

uint64_t *sub_244993FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v10;
  uint64_t v11;

  v5 = v4;
  swift_allocObject();
  swift_retain();
  swift_retain();
  v10 = sub_244995100(a1, a2, a3, a4);
  v11 = MEMORY[0x24951C158](&unk_2449DAD34, v5);
  sub_2449941E8(v5, v11);
  return v10;
}

uint64_t sub_244994058@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

_QWORD *sub_2449941E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Junction(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v10 = *(_QWORD *)(v6 + 8);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v3;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v3;
  v13 = swift_unknownObjectRetain();
  v14 = sub_244977694(v13, v10, 0x6B6E757274, 0xE500000000000000, (uint64_t)sub_244999F0C, (uint64_t)v11, (uint64_t)sub_244999EB4, (uint64_t)v12);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 24);
  swift_unknownObjectRetain_n();
  v16 = swift_retain();
  v15(v16, a1, a2);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = v3;
  swift_unknownObjectRetain();
  sub_2449CF61C();
  swift_release();
  return v14;
}

uint64_t sub_2449943D4()
{
  swift_getObjectType();
  return sub_2449CF628();
}

uint64_t sub_244994470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata3;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a4;
  v31 = a3;
  v29 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for PipeEvent.Content(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - v10;
  v26 = type metadata accessor for TransportReply();
  MEMORY[0x24BDAC7A8](v26);
  v28 = (uint64_t)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - v14;
  v16 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v26 - v17;
  v19 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return sub_244994748(a1, v31, v32);
  }
  else
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v22 = &v11[*(int *)(TupleTypeMetadata3 + 48)];
    v23 = (uint64_t)&v11[*(int *)(TupleTypeMetadata3 + 64)];
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v18, v11, v16);
    v24 = v27;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v15, v22, v13);
    v25 = v28;
    sub_24494C244(v23, v28);
    (*(void (**)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t))(v32 + 80))(v19, v29, v18, v15, v25, v31);
    sub_24494C208(v25);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v18, v16);
  }
}

uint64_t sub_244994748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3))
  {
    sub_244977710(a1);
    return swift_release();
  }
  else
  {
    v14 = type metadata accessor for PipeEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1 + *(int *)(v14 + 36), v8);
    v17 = type metadata accessor for EndpointInvalidated(0, v8, v15, v16);
    MEMORY[0x24951C158](&unk_2449D3D90, v17);
    swift_allocError();
    sub_24494C8C4((uint64_t)v11, v8, v18);
    return swift_willThrow();
  }
}

uint64_t sub_24499491C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - v10;
  v13 = a1
      + *(int *)(type metadata accessor for PipeEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12) + 36);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(v13, a2, a3))
  {
    swift_bridgeObjectRelease();
    sub_244977710(a1);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
    v17 = type metadata accessor for EndpointInvalidated(0, v8, v15, v16);
    MEMORY[0x24951C158](&unk_2449D3D90, v17);
    swift_allocError();
    sub_24494C8C4((uint64_t)v11, v8, v18);
    return swift_willThrow();
  }
}

_QWORD *sub_244994AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v5 = v4;
  v10 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Junction(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v14 = *(_QWORD *)(v10 + 8);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = v5;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = v5;
  v17 = swift_unknownObjectRetain();
  v18 = sub_244977694(v17, v14, a1, a2, (uint64_t)sub_244998C34, (uint64_t)v15, (uint64_t)sub_244998B44, (uint64_t)v16);
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  return v18;
}

uint64_t sub_244994BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;

  swift_getObjectType();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a5;
  v10[3] = a6;
  v10[4] = a4;
  v10[5] = a3;
  swift_unknownObjectRetain();
  swift_retain();
  sub_2449CF61C();
  return swift_release();
}

uint64_t sub_244994CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  result = (*(uint64_t (**)(void))(a3 + 48))();
  if (result)
  {
    v7 = result;
    v8 = v6;
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    swift_retain();
    swift_bridgeObjectRetain();
    v9(v7, v8, a2, a3);
    swift_release();
    swift_bridgeObjectRelease();
    v10 = sub_244977948();
    MEMORY[0x24BDAC7A8](v10);
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    v11 = sub_2449CF9A0();
    MEMORY[0x24951C158](MEMORY[0x24BEE12C8], v11);
    sub_2449CF8C8();
    return sub_244998BC0(v7);
  }
  return result;
}

uint64_t sub_244994E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a3;
  v25 = a4;
  v26 = a2;
  v23 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - v8;
  v11 = type metadata accessor for PipeEvent.Content(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - v12;
  v15 = type metadata accessor for PipeEvent(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v22 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v21 - v16;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v23, v6);
  sub_24494B844((uint64_t)v13, (uint64_t)v9, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v17);
  v18 = (_QWORD *)swift_allocObject();
  v19 = v25;
  v18[2] = v24;
  v18[3] = v19;
  v18[4] = v26;
  swift_unknownObjectRetain();
  sub_24494C108(sub_244998C10);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v15);
  return swift_release();
}

uint64_t *sub_2449950A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return sub_244995100(a1, a2, a3, a4);
}

uint64_t *sub_244995100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;

  v7 = *v4;
  sub_2449CF694();
  swift_allocObject();
  v4[6] = sub_2449CF688();
  v4[7] = 0;
  type metadata accessor for Junction(255, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 96), v8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  sub_2449CF964();
  v4[8] = sub_2449CF7F0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573A04E0);
  swift_getTupleTypeMetadata2();
  sub_2449CF964();
  v4[9] = sub_2449CF7F0();
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

uint64_t sub_2449952F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = *(uint64_t **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v1 + 16))(v5);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 64);
  type metadata accessor for Junction(255, v2[10], v2[12], v9);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24951B774](&v14, v7, v8, v3, TupleTypeMetadata2, v2[13]);
  v11 = v14;
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v11;
}

uint64_t sub_244995474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  type metadata accessor for Junction(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 96), a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = sub_2449CFB2C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - v10;
  sub_24499561C(a1, v12, (uint64_t)&v15 - v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v11, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  else
  {
    v13 = *(_QWORD *)&v11[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v11, v6);
  }
  return v13;
}

uint64_t sub_24499561C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL (*v34)(uint64_t, uint64_t);
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v19 = a3;
  v5 = *v3;
  v7 = *(_QWORD *)(*v3 + 80);
  v6 = *(_QWORD *)(*v3 + 88);
  v8 = *(_QWORD *)(*v3 + 96);
  type metadata accessor for Junction(255, v7, v8, a2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  v9 = sub_2449CFB2C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  swift_beginAccess();
  v40 = v3[8];
  v13 = *(_QWORD *)(v5 + 104);
  v37 = v6;
  v38 = v13;
  v39 = a1;
  v30 = v7;
  v31 = v6;
  v32 = v8;
  v33 = v13;
  v34 = sub_244999D54;
  v35 = &v36;
  v14 = sub_2449CF814();
  swift_bridgeObjectRetain();
  MEMORY[0x24951C158](MEMORY[0x24BEE04D8], v14);
  sub_2449CF8BC();
  swift_bridgeObjectRelease();
  v28 = v6;
  v29 = v13;
  v21 = v7;
  v22 = v6;
  v23 = v8;
  v24 = v13;
  v25 = sub_244999D88;
  v26 = &v27;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_244994058((void (*)(char *, char *))sub_244999DD8, (uint64_t)v20, MEMORY[0x24BEE4078], TupleTypeMetadata2, v16, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_2449958A4(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TupleTypeMetadata2;

  type metadata accessor for Junction(255, a4, a6, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, *(_QWORD *)(a1 + *(int *)(TupleTypeMetadata2 + 48)), *(_QWORD *)(a1 + *(int *)(TupleTypeMetadata2 + 48) + 8)) & 1;
}

uint64_t sub_2449959CC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;

  type metadata accessor for Junction(255, a3, a4, a3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  v8 = (uint64_t *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  v9 = *v8;
  v10 = v8[1];
  v11 = (uint64_t *)(a5 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  result = a2(a5, a1, v9, v10);
  *v11 = result;
  v11[1] = v13;
  return result;
}

uint64_t sub_244995B30(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a2;
  v3 = (_QWORD *)*v2;
  v4 = *(_QWORD *)(*v2 + 88);
  v5 = *(_QWORD *)(v4 - 8);
  v19 = a1;
  v20 = v5;
  MEMORY[0x24BDAC7A8](a1);
  v21 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v3[12];
  v8 = v3[10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)v18 - v11;
  v18[1] = v2 + 8;
  swift_beginAccess();
  v13 = v2[8];
  type metadata accessor for Junction(255, v8, v7, v14);
  sub_2449CF9A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24951B774](&v23, v22, v13, v4, TupleTypeMetadata2, v3[13]);
  v16 = v23;
  if (!v23)
    return swift_endAccess();
  v25 = v24;
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v19, AssociatedTypeWitness);
  sub_2449CF988();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v21, v22, v4);
  v23 = v16;
  v24 = v25;
  swift_beginAccess();
  sub_2449CF814();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2449CF82C();
  swift_endAccess();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_244995D98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  type metadata accessor for Junction(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 96), v2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  sub_2449CF814();
  sub_2449CF808();
  return swift_endAccess();
}

uint64_t sub_244995EB4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v7 = (_QWORD *)*a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1D30);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2449CF76C();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v7[11];
  v16 = MEMORY[0x24BDAC7A8](v12);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void **)a1;
  LODWORD(v19) = *(unsigned __int8 *)(a1 + 8);
  v48 = a3;
  if ((_DWORD)v19 != 1)
  {
    v49 = 0;
    v50 = 0xE000000000000000;
    v41 = v21;
    sub_244998B38(v21, 0);
    sub_2449CF898();
    sub_2449CFCAC();
    v45 = v10;
    v33 = v7[10];
    v34 = v7[12];
    v43 = v7[13];
    v49 = v33;
    v50 = v15;
    v51 = v34;
    v52 = v43;
    type metadata accessor for BranchingFork();
  }
  v42 = v18;
  v43 = v16;
  v44 = v17;
  v47 = v20;
  v22 = v21;
  sub_2449CF748();
  v23 = v21;
  v24 = v21;
  v25 = sub_2449CF760();
  v26 = sub_2449CFAF0();
  if (os_log_type_enabled(v25, v26))
  {
    v40 = v15;
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v45 = v10;
    v38 = (_QWORD *)v28;
    v46 = v7;
    *(_DWORD *)v27 = 138412290;
    v39 = v25;
    v29 = v21;
    v30 = _swift_stdlib_bridgeErrorToNSError();
    v49 = v30;
    sub_2449CFB38();
    v31 = v38;
    *v38 = v30;
    v15 = v40;
    sub_244998B2C(v21, 1);
    v25 = v39;
    sub_244998B2C(v21, 1);
    _os_log_impl(&dword_244921000, v25, v26, "Branching fork failed to create new branch: %@", v27, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDB0);
    swift_arrayDestroy();
    v32 = v31;
    v10 = v45;
    MEMORY[0x24951C224](v32, -1, -1);
    MEMORY[0x24951C224](v27, -1, -1);
  }
  else
  {
    sub_244998B2C(v21, 1);
    sub_244998B2C(v21, 1);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v43);
  v49 = *(_QWORD *)(a4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488) + 48));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0558);
  sub_2449625C0();
  sub_2449CF46C();
  sub_244998B2C(v21, 1);
  (*(void (**)(char *, uint64_t, unint64_t))(v44 + 16))(v47, v48, v15);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04E0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v10, 1, 1, v35);
  swift_beginAccess();
  sub_2449CF814();
  sub_2449CF82C();
  return swift_endAccess();
}

void sub_2449964FC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a5;
  v41 = a6;
  v39 = (char *)a4;
  v8 = *a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_2449CF724();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2449CF76C();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    v35 = v18;
    v36 = v17;
    v38 = v9;
    v39 = v15;
    v40 = v13;
    v37 = v12;
    v21 = *(id *)a1;
    v22 = *(id *)a1;
    sub_2449CF748();
    v23 = v21;
    v24 = v21;
    v25 = sub_2449CF760();
    v26 = sub_2449CFAF0();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v27 = 138412290;
      v29 = v21;
      v30 = _swift_stdlib_bridgeErrorToNSError();
      v42 = v30;
      sub_2449CFB38();
      *v28 = v30;
      sub_244998AD0(v21, 1);
      sub_244998AD0(v21, 1);
      _os_log_impl(&dword_244921000, v25, v26, "Fork failed to create new branch: %@", v27, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDB0);
      swift_arrayDestroy();
      MEMORY[0x24951C224](v28, -1, -1);
      MEMORY[0x24951C224](v27, -1, -1);
    }
    else
    {
      sub_244998AD0(v21, 1);
      sub_244998AD0(v21, 1);
    }
    v32 = v40;
    v33 = (uint64_t)v39;

    (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v36);
    sub_2449CF730();
    *v11 = v21;
    swift_storeEnumTagMultiPayload();
    v34 = v21;
    __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    sub_2449CF2E0();
    sub_244940E8C((uint64_t)v11, &qword_25739FDA0);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v37);
    sub_244998AD0(v21, 1);
  }
  else
  {
    sub_244995B30(a3, (uint64_t)v39);
    type metadata accessor for PipeEvent(0, *(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 96), v31);
    sub_24494C108(sub_244998ADC);
  }
}

uint64_t sub_244996858()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24499689C()
{
  sub_244996858();
  return swift_deallocClassInstance();
}

void type metadata accessor for BranchingFork()
{
  JUMPOUT(0x24951C0C8);
}

uint64_t sub_2449968C8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_244996924()
{
  return swift_retain();
}

uint64_t sub_24499692C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t sub_24499694C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_244997A68(a1, a2, a4);
}

uint64_t sub_244996964()
{
  return swift_retain();
}

uint64_t sub_244996970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DACCC, a3);
  return sub_2449CF610();
}

uint64_t sub_2449969BC()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_2449975C8();
  return v0;
}

uint64_t sub_2449969F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  char *v23;
  uint64_t v24;

  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1D38);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2449CF0DC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v23 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v10 = v1[5];
  v13 = v3 + 80;
  v12 = *(_QWORD *)(v3 + 80);
  v11 = *(_QWORD *)(v13 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x24951B774](a1, v10, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_244940E8C((uint64_t)v6, &qword_2573A1D38);
    swift_endAccess();
    return 0;
  }
  else
  {
    v17 = v23;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v23, v6, v7);
    swift_endAccess();
    swift_beginAccess();
    v18 = v1[4];
    type metadata accessor for Junction(255, v12, v11, v19);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    sub_2449CF9A0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v21 = sub_244999F30(&qword_2573A1D40, MEMORY[0x24BE76208]);
    MEMORY[0x24951B774](&v24, v17, v18, v7, TupleTypeMetadata2, v21);
    v16 = v24;
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
  }
  return v16;
}

uint64_t sub_244996C94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *v1;
  v4 = sub_2449CF0DC();
  type metadata accessor for Junction(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = sub_2449CFB2C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  sub_244996E44(a1, (uint64_t)&v13 - v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v10, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  else
  {
    v11 = *(_QWORD *)&v10[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v10, v4);
  }
  return v11;
}

uint64_t sub_244996E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)();
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v5 = *v2;
  sub_2449CF0DC();
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 88);
  type metadata accessor for Junction(255, v6, v7, v8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  v9 = sub_2449CFB2C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v17[-v11];
  swift_beginAccess();
  v26 = v2[4];
  v22 = v6;
  v23 = v7;
  v24 = sub_244999DFC;
  v25 = a1;
  sub_244999F30(&qword_2573A1D40, MEMORY[0x24BE76208]);
  v13 = sub_2449CF814();
  swift_bridgeObjectRetain();
  MEMORY[0x24951C158](MEMORY[0x24BEE04D8], v13);
  sub_2449CF8BC();
  swift_bridgeObjectRelease();
  v18 = v6;
  v19 = v7;
  v20 = sub_244999E28;
  v21 = 0;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_244994058((void (*)(char *, char *))sub_244999E2C, (uint64_t)v17, MEMORY[0x24BEE4078], TupleTypeMetadata2, v15, a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_24499709C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  sub_2449CF0DC();
  type metadata accessor for Junction(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  sub_244999F30(&qword_2573A1D40, MEMORY[0x24BE76208]);
  sub_2449CF814();
  sub_2449CF808();
  swift_endAccess();
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_2449CF814();
  sub_2449CF808();
  return swift_endAccess();
}

uint64_t sub_244997264(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t TupleTypeMetadata2;

  sub_2449CF0DC();
  type metadata accessor for Junction(255, a4, a5, v9);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, *(_QWORD *)(a1 + *(int *)(TupleTypeMetadata2 + 48)), *(_QWORD *)(a1 + *(int *)(TupleTypeMetadata2 + 48) + 8)) & 1;
}

uint64_t sub_244997394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2449CF0DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  swift_retain();
  swift_bridgeObjectRetain();
  return a3;
}

uint64_t sub_2449973FC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;

  sub_2449CF0DC();
  type metadata accessor for Junction(255, a3, a4, v10);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  v11 = (uint64_t *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  v12 = *v11;
  v13 = v11[1];
  v14 = (uint64_t *)(a5 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  result = a2(a5, a1, v12, v13);
  *v14 = result;
  v14[1] = v16;
  return result;
}

uint64_t sub_244997568()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24499759C()
{
  sub_244997568();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MergingFork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MergingFork);
}

uint64_t *sub_2449975C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  sub_2449CF694();
  swift_allocObject();
  v0[2] = sub_2449CF688();
  v0[3] = 0;
  sub_2449CF0DC();
  type metadata accessor for Junction(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  swift_getTupleTypeMetadata2();
  sub_244999F30(&qword_2573A1D40, MEMORY[0x24BE76208]);
  v0[4] = sub_2449CF7C0();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v0[5] = sub_2449CF7C0();
  return v0;
}

uint64_t sub_244997794()
{
  return swift_retain();
}

uint64_t sub_24499779C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_release();
}

void sub_2449977BC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_244998F64(a1, a2, a3, a5);
}

uint64_t sub_2449977D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DAD50, a3);
  return sub_2449CF610();
}

uint64_t sub_244997820(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449DAD50);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24499784C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449DAC50);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_244997878(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449DAC6C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_2449978A4()
{
  JUMPOUT(0x24951C158);
}

uint64_t sub_2449978B4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449DACCC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2449978E0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449DACFC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24499790C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24951C158](&unk_2449DAD18);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_244997938()
{
  JUMPOUT(0x24951C158);
}

uint64_t sub_244997948(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1D48);
  else
    return sub_2449CFC94();
}

uint64_t sub_244997994(uint64_t a1)
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_retain();
  sub_2449CF964();
  return a1;
}

uint64_t sub_244997A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v3;
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t TupleTypeMetadata2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD **v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  _QWORD **v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v4 = v3;
  v115 = a3;
  v130 = a2;
  v138 = a1;
  v5 = *v3;
  v6 = type metadata accessor for TransportReply();
  v116 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v117 = v7;
  v126 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v5[10];
  v9 = v5[12];
  v136 = type metadata accessor for PipeEvent(0, v8, v9, v10);
  v120 = *(_QWORD *)(v136 - 8);
  v114 = *(_QWORD *)(v120 + 64);
  MEMORY[0x24BDAC7A8](v136);
  v123 = (char *)&v98 - v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v135 = swift_getAssociatedTypeWitness();
  v113 = *(_QWORD *)(v135 - 8);
  v112 = *(_QWORD *)(v113 + 64);
  MEMORY[0x24BDAC7A8](v135);
  v124 = (char *)&v98 - v14;
  type metadata accessor for Junction(255, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  v16 = v9;
  v104 = (void (*)(char *, char *, uint64_t))__swift_instantiateConcreteTypeFromMangledNameAbstract(qword_25739F080);
  v109 = sub_2449CF364();
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x24BDAC7A8](v109);
  v119 = (char *)&v98 - v17;
  v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488);
  v106 = *(_QWORD *)(v121 - 8);
  v18 = *(_QWORD *)(v106 + 64);
  v19 = MEMORY[0x24BDAC7A8](v121);
  v107 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v118 = (uint64_t)&v98 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1D30);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v105 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v111 = (void (*)(char *, uint64_t, uint64_t))((char *)&v98 - v24);
  v131 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04E0);
  v129 = *(_QWORD *)(v131 - 8);
  v25 = MEMORY[0x24BDAC7A8](v131);
  v125 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v127 = (char *)&v98 - v28;
  v29 = v5[11];
  v133 = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(v133 + 64);
  v31 = MEMORY[0x24BDAC7A8](v27);
  v128 = (char *)&v98 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v98 - v32;
  ((void (*)(uint64_t))v4[2])(v138 + *(int *)(v136 + 36));
  swift_beginAccess();
  v132 = v4;
  v34 = v4[8];
  v122 = v8;
  v35 = v16;
  type metadata accessor for Junction(255, v8, v16, v36);
  sub_2449CF9A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v38 = v5[13];
  v134 = v29;
  v39 = v29;
  v40 = v38;
  MEMORY[0x24951B774](&v137, v33, v34, v39, TupleTypeMetadata2, v38);
  v41 = v137;
  swift_endAccess();
  sub_244998BC0(v41);
  if (v41)
  {
    sub_244995B30(v130, (uint64_t)v33);
    v42 = MEMORY[0x24951C158](&unk_2449DAD34, v5);
    sub_24499491C(v138, (uint64_t)v5, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v33, v134);
  }
  else
  {
    v44 = v121;
    v100 = v18;
    v102 = v30;
    v103 = v35;
    v45 = v132;
    swift_beginAccess();
    v46 = (uint64_t)v111;
    v47 = v131;
    MEMORY[0x24951B774](v33, v45[9], v134, v131, v40);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v46, 1, v47);
    v101 = v40;
    v110 = v33;
    if (v48 == 1)
    {
      sub_244940E8C(v46, &qword_2573A1D30);
      swift_endAccess();
      v49 = *(int *)(v44 + 48);
      v50 = v118;
      v51 = v118;
      v52 = sub_2449CF340();
      *(_QWORD *)(v50 + v49) = v52;
      v98 = v52;
      v104 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
      v53 = v128;
      v104(v128, v33, v134);
      v54 = v129;
      v111 = *(void (**)(char *, uint64_t, uint64_t))(v129 + 16);
      v55 = (uint64_t)v107;
      v56 = v131;
      v111(v107, v50, v131);
      v99 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 32);
      v57 = v105;
      v99(v105, v55, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v57, 0, 1, v56);
      swift_beginAccess();
      v58 = v101;
      sub_2449CF814();
      swift_retain();
      sub_2449CF82C();
      swift_endAccess();
      v59 = v51;
      v60 = v51;
      v61 = (void (*)(uint64_t, uint64_t, uint64_t))v111;
      v111((char *)v55, v59, v56);
      v99(v127, v55, v56);
      v62 = v58;
      v63 = v132;
      v64 = v110;
      ((void (*)(uint64_t, char *))v132[4])(v130, v110);
      v65 = v64;
      v66 = v134;
      v104(v53, v65, v134);
      v67 = *(int *)(v121 + 48);
      v61(v55, v60, v56);
      *(_QWORD *)(v55 + v67) = v98;
      v68 = v133;
      v69 = (*(unsigned __int8 *)(v133 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
      v70 = (v102 + *(unsigned __int8 *)(v106 + 80) + v69) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
      v71 = (char *)swift_allocObject();
      *((_QWORD *)v71 + 2) = v122;
      *((_QWORD *)v71 + 3) = v66;
      *((_QWORD *)v71 + 4) = v103;
      *((_QWORD *)v71 + 5) = v62;
      *((_QWORD *)v71 + 6) = v63;
      v72 = v68;
      v73 = v66;
      v74 = v127;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(&v71[v69], v128, v73);
      sub_2449985EC(v55, (uint64_t)&v71[v70]);
      swift_retain();
      v75 = v109;
      v76 = v119;
      sub_2449CF31C();
      v77 = v130;
      swift_release();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v76, v75);
      sub_244940E8C(v118, &qword_2573A0488);
      v78 = v126;
      v79 = v136;
      v80 = v120;
      v111(v125, (uint64_t)v74, v131);
    }
    else
    {
      v81 = v129;
      v82 = v127;
      (*(void (**)(char *, uint64_t, uint64_t))(v129 + 32))(v127, v46, v131);
      swift_endAccess();
      v83 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
      v78 = v126;
      v79 = v136;
      v80 = v120;
      v77 = v130;
      v72 = v133;
      v83(v125, v82, v131);
    }
    v84 = v134;
    v85 = v113;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v124, v77, v135);
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v128, v110, v84);
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v123, v138, v79);
    sub_2449513C8(v115, v78);
    v86 = (*(unsigned __int8 *)(v85 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
    v87 = *(unsigned __int8 *)(v72 + 80);
    v88 = v80;
    v89 = (v112 + v87 + v86) & ~v87;
    v90 = (v102 + *(unsigned __int8 *)(v88 + 80) + v89) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
    v91 = (v114 + *(unsigned __int8 *)(v116 + 80) + v90) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
    v92 = (char *)swift_allocObject();
    *((_QWORD *)v92 + 2) = v122;
    *((_QWORD *)v92 + 3) = v84;
    v93 = v101;
    *((_QWORD *)v92 + 4) = v103;
    *((_QWORD *)v92 + 5) = v93;
    *((_QWORD *)v92 + 6) = v132;
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(&v92[v86], v124, v135);
    v94 = v133;
    (*(void (**)(char *, char *, uint64_t))(v133 + 32))(&v92[v89], v128, v84);
    (*(void (**)(char *, char *, uint64_t))(v88 + 32))(&v92[v90], v123, v136);
    sub_24494C244(v126, (uint64_t)&v92[v91]);
    swift_retain();
    v95 = v131;
    v96 = v125;
    sub_2449CF31C();
    swift_release();
    v97 = *(void (**)(char *, uint64_t))(v129 + 8);
    v97(v96, v95);
    v97(v127, v95);
    return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v110, v84);
  }
}

uint64_t sub_24499851C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488) - 8) + 80);
  v6 = (v3 + v4 + v5) & ~v5;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A04E0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v6, v7);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2449985EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_244998634(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2573A0488) - 8) + 80);
  return sub_244995EB4(a1, *(_QWORD **)(v1 + 48), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6));
}

uint64_t sub_2449986A0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t TupleTypeMetadata3;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 3);
  v30 = v2;
  v3 = *((_QWORD *)v0 + 4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (v6 + *(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v11 = type metadata accessor for PipeEvent(0, v1, v3, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  v13 = (v8 + v9 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v32 = *(_QWORD *)(v12 + 64);
  v29 = type metadata accessor for TransportReply();
  v14 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned __int8 *)(v14 + 80);
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(&v0[v6], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(&v0[v8], v30);
  v16 = &v0[v13];
  type metadata accessor for PipeEvent.Content(0, v1, v3, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v22 = sub_2449CF400();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(&v0[v13], v22);
    v21 = &v16[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA8) + 48)];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v21, 1, v29))
      goto LABEL_5;
  }
  else if (!EnumCaseMultiPayload)
  {
    v15(&v0[v13], AssociatedTypeWitness);
    v19 = swift_getAssociatedTypeWitness();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(&v16[*(int *)(TupleTypeMetadata3 + 48)], v19);
    v21 = &v16[*(int *)(TupleTypeMetadata3 + 64)];
LABEL_5:
    v23 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  v24 = (v13 + v32 + v31) & ~v31;
  v25 = &v16[*(int *)(v33 + 36)];
  v26 = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(&v0[v24], v27);
  return swift_deallocObject();
}

void sub_2449989AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = (v7 + *(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v12 = *(_QWORD *)(type metadata accessor for PipeEvent(0, v3, v5, v11) - 8);
  v13 = (v9 + v10 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TransportReply() - 8) + 80);
  sub_2449964FC(a1, *(uint64_t **)(v1 + 48), v1 + v7, v1 + v9, v1 + v13, v1 + ((v13 + v14 + v15) & ~v15));
}

void sub_244998AD0(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_244998ADC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = MEMORY[0x24951C158](&unk_2449DAD34, *v1);
  return sub_24499491C(a1, v3, v4);
}

void sub_244998B2C(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release();
}

id sub_244998B38(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain();
}

uint64_t sub_244998B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_244994BF8(a1, a2, a3, v3[4], v3[2], v3[3]);
}

uint64_t sub_244998B50()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_244998B7C()
{
  uint64_t *v0;

  return sub_244994CAC(v0[5], v0[2], v0[3]);
}

uint64_t sub_244998BA4(uint64_t a1)
{
  uint64_t *v1;

  return sub_244994E54(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_244998BC0(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_244998BEC()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_244998C10(uint64_t a1)
{
  uint64_t v1;

  return sub_244994748(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_244998C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_244994470(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_244998C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t TupleTypeMetadata3;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for PipeEvent.Content(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v30 - v10;
  v31 = type metadata accessor for TransportReply();
  MEMORY[0x24BDAC7A8](v31);
  v34 = (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v13 - 8);
  v33 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - v14;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v16 = a1;
  v17 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v30 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v16, v8);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return sub_24499491C(v16, v35, v36);
  }
  else
  {
    v22 = v33;
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v24 = v16;
    v25 = &v11[*(int *)(TupleTypeMetadata3 + 48)];
    v26 = &v11[*(int *)(TupleTypeMetadata3 + 64)];
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v11, v17);
    v27 = v32;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v15, v25, v22);
    v28 = (uint64_t)v26;
    v29 = v34;
    sub_24494C244(v28, v34);
    (*(void (**)(uint64_t, char *, char *, uint64_t, uint64_t))(v36 + 72))(v24, v20, v15, v29, v35);
    sub_24494C208(v29);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
}

void sub_244998F64(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t AssociatedConformanceWitness;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t AssociatedTypeWitness;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;

  *(_QWORD *)&v72 = a4;
  v78 = a3;
  v81 = a2;
  v74 = a1;
  v5 = *v4;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739FDA0);
  MEMORY[0x24BDAC7A8](v67);
  v71 = (_QWORD *)((char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_2449CF724();
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v68 = (char *)v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1D38);
  MEMORY[0x24BDAC7A8](v9);
  v63 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v5 + 80);
  v12 = *(_QWORD *)(v5 + 88);
  v75 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v76 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v79 = (char *)v61 - v13;
  v14 = sub_2449CF0DC();
  type metadata accessor for Junction(255, v11, v12, v15);
  v16 = swift_getAssociatedTypeWitness();
  v61[1] = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v64 = v16;
  v65 = swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = swift_getTupleTypeMetadata2();
  v19 = sub_2449CFB2C();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v61 - v21;
  v66 = TupleTypeMetadata2;
  v23 = swift_getTupleTypeMetadata2();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v61 - v25;
  v73 = v14;
  v27 = *(_QWORD *)(v14 - 8);
  v28 = MEMORY[0x24BDAC7A8](v24);
  v61[0] = (char *)v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v77 = (char *)v61 - v30;
  v31 = (uint64_t)v81;
  v81 = v4;
  sub_244996E44(v31, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v22, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    v32 = (uint64_t)v79;
    v33 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v79, v78, AssociatedTypeWitness);
    v36 = type metadata accessor for EndpointInvalidated(0, v33, v34, v35);
    MEMORY[0x24951C158](&unk_2449D3D90, v36);
    v37 = (void *)swift_allocError();
    sub_24494C8C4(v32, v33, v38);
    v39 = v68;
    sub_2449CF730();
    v40 = (uint64_t)v71;
    *v71 = v37;
    swift_storeEnumTagMultiPayload();
    v41 = v37;
    __swift_instantiateConcreteTypeFromMangledName(qword_25739FC80);
    sub_2449CF2E0();
    sub_244940E8C(v40, &qword_25739FDA0);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v39, v70);

  }
  else
  {
    v42 = *(int *)(v23 + 48);
    v43 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v72 = *(_OWORD *)&v22[*(int *)(v18 + 48)];
    v44 = v73;
    v43(v26, v22, v73);
    *(_OWORD *)&v26[v42] = v72;
    v45 = &v26[*(int *)(v23 + 48)];
    v46 = *(_QWORD *)v45;
    v71 = (_QWORD *)*((_QWORD *)v45 + 1);
    *(_QWORD *)&v72 = v46;
    v47 = v77;
    v43(v77, v26, v44);
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v79, v78, AssociatedTypeWitness);
    v48 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v49 = v63;
    v48(v63, v47, v44);
    v78 = v27;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v49, 0, 1, v44);
    swift_beginAccess();
    swift_getAssociatedConformanceWitness();
    sub_2449CF814();
    sub_2449CF82C();
    swift_endAccess();
    v48((char *)v61[0], v47, v44);
    v50 = v65;
    sub_244997948(v65, v65);
    v51 = *(_QWORD *)(v50 - 8);
    swift_allocObject();
    v52 = v72;
    swift_retain();
    sub_2449CF8F8();
    v54 = v53;
    v56 = type metadata accessor for PipeEvent(0, v64, AssociatedConformanceWitness, v55);
    v57 = v74;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v54, v74 + *(int *)(v56 + 36), v50);
    sub_2449CF9A0();
    v58 = sub_2449CF910();
    swift_bridgeObjectRelease();
    v82 = v52;
    v83 = v58;
    swift_beginAccess();
    sub_244999F30(&qword_2573A1D40, MEMORY[0x24BE76208]);
    sub_2449CF814();
    sub_2449CF82C();
    swift_endAccess();
    v59 = v75;
    v60 = MEMORY[0x24951C158](&unk_2449DAC88, v75);
    sub_244994748(v57, v59, v60);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v44);
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t sub_244999694(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v2 = *v1;
  v3 = sub_2449CF0DC();
  v4 = *(_QWORD *)(v2 + 80);
  v5 = *(_QWORD *)(v2 + 88);
  type metadata accessor for Junction(255, v4, v5, v6);
  swift_getAssociatedTypeWitness();
  v37 = v5;
  v38 = v4;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = swift_getTupleTypeMetadata2();
  v9 = sub_2449CFB2C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v33 - v11;
  v35 = TupleTypeMetadata2;
  v13 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v33 - v15;
  v17 = *(_QWORD *)(v3 - 8);
  v18 = MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v36 = (char *)&v33 - v21;
  v22 = (uint64_t)v39;
  v39 = v1;
  sub_244996E44(v22, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v12, 1, v8) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v24 = *(int *)(v8 + 48);
  v25 = *(int *)(v13 + 48);
  v26 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v27 = v17;
  v34 = v17;
  v33 = *(_OWORD *)&v12[v24];
  v26(v16, v12, v3);
  *(_OWORD *)&v16[v25] = v33;
  swift_release();
  swift_bridgeObjectRelease();
  v28 = v36;
  v26(v36, v16, v3);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v20, v28, v3);
  v29 = v39;
  v40 = 0;
  v41 = 0;
  swift_beginAccess();
  sub_244999F30(&qword_2573A1D40, MEMORY[0x24BE76208]);
  sub_2449CF814();
  sub_2449CF82C();
  swift_endAccess();
  v30 = swift_beginAccess();
  MEMORY[0x24BDAC7A8](v30);
  v31 = v37;
  *((_QWORD *)&v33 - 4) = v38;
  *((_QWORD *)&v33 - 3) = v31;
  *((_QWORD *)&v33 - 2) = v28;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  v32 = sub_2449CF7FC();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v3);
  v29[5] = v32;
  return swift_bridgeObjectRelease();
}

uint64_t sub_244999A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(*v4 + 80);
  v5 = *(_QWORD *)(*v4 + 88);
  v30 = *v4;
  *(_QWORD *)&v31 = a1;
  type metadata accessor for Junction(255, v6, *(_QWORD *)(v30 + 96), a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  sub_2449CF9A0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = swift_getTupleTypeMetadata2();
  v9 = sub_2449CFB2C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - v11;
  v29 = TupleTypeMetadata2;
  v13 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - v15;
  v17 = *(_QWORD *)(v5 - 8);
  v18 = MEMORY[0x24BDAC7A8](v14);
  v28 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v27 - v20;
  sub_24499561C(v31, v22, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v12, 1, v8) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v24 = *(int *)(v8 + 48);
  v25 = *(int *)(v13 + 48);
  v26 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v31 = *(_OWORD *)&v12[v24];
  v26(v16, v12, v5);
  *(_OWORD *)&v16[v25] = v31;
  swift_release();
  swift_bridgeObjectRelease();
  v26(v21, v16, v5);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v28, v21, v5);
  v32 = 0;
  v33 = 0;
  swift_beginAccess();
  sub_2449CF814();
  sub_2449CF82C();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v5);
}

BOOL sub_244999D54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return *(_QWORD *)(v2 + 32) == a2;
}

uint64_t sub_244999D64(uint64_t a1)
{
  uint64_t v1;

  return sub_2449958A4(a1, *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32)) & 1;
}

uint64_t sub_244999D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(v3 + 16) - 8) + 16))();
  swift_retain();
  swift_bridgeObjectRetain();
  return a3;
}

uint64_t sub_244999DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2449959CC(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

BOOL sub_244999DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return a2 == v2;
}

uint64_t sub_244999E08(uint64_t a1)
{
  uint64_t v1;

  return sub_244997264(a1, *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_244999E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2449973FC(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

BOOL sub_244999E4C()
{
  sub_2449CF0DC();
  sub_244999F30(&qword_2573A1D50, MEMORY[0x24BE76210]);
  return (sub_2449CF850() & 1) == 0;
}

uint64_t sub_244999EB4()
{
  return sub_2449943D4();
}

uint64_t sub_244999EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 24))(0, v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t sub_244999F0C(uint64_t a1)
{
  uint64_t v1;

  return sub_244998C58(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_244999F30(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_2449CF0DC();
    result = MEMORY[0x24951C158](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_244999F84(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_244999FBC + 4 * byte_2449DAD80[a1]))(0xD000000000000016, 0x80000002449E2850);
}

uint64_t sub_244999FBC()
{
  return 0x6D726177657270;
}

uint64_t sub_244999FD4()
{
  return 0x416C6C6174736E69;
}

uint64_t sub_244999FF0()
{
  return 0x6C6174736E696E75;
}

uint64_t sub_24499A014()
{
  return 0x4C525579706F63;
}

uint64_t sub_24499A02C()
{
  return 0x7070417465736572;
}

void sub_24499A044(char *a1)
{
  sub_24499FEC8(*a1);
}

void sub_24499A050()
{
  char *v0;

  sub_2449C715C(*v0);
}

void sub_24499A058(uint64_t a1)
{
  char *v1;

  sub_244923A44(a1, *v1);
}

void sub_24499A060(uint64_t a1)
{
  char *v1;

  sub_2449CAB48(a1, *v1);
}

uint64_t sub_24499A068@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24499DAB8();
  *a1 = result;
  return result;
}

uint64_t sub_24499A094@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_244999F84(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24499A0BC()
{
  sub_24499DA58();
  return sub_2449CF670();
}

uint64_t sub_24499A104()
{
  sub_24499DA58();
  return sub_2449CF67C();
}

uint64_t sub_24499A168@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

void AppManagerInterface.TwoWayMessage.propertyListValue.getter()
{
  _OWORD *v0;
  _OWORD v1[5];
  _OWORD v2[4];

  sub_24499A36C(v0, v1);
  sub_24499A3EC();
  sub_24499A430();
  sub_2449CF3E8();
  sub_24499A36C(v1, v2);
  __asm { BR              X10 }
}

uint64_t sub_24499A20C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_BYTE *)(v2 - 120);
  v8 = *(_QWORD *)(v2 - 128);
  v9 = v3;
  v6 = v1;
  v7 = v0;
  v5 = 1;
  sub_24499A584();
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
}

_OWORD *sub_24499A36C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *a2 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *(_OWORD *)((char *)a2 + 57) = *(_OWORD *)((char *)a1 + 57);
  a2[2] = v3;
  a2[3] = v4;
  a2[1] = v2;
  return a2;
}

_OWORD *sub_24499A394(_BYTE *a1, _BYTE *a2, _OWORD *a3)
{
  _OWORD *result;
  _OWORD v5[4];
  char v6;

  *a1 = 0;
  result = sub_24499A36C(a3, v5);
  *a2 = 0x504030201uLL >> (8 * v6);
  return result;
}

_OWORD *sub_24499A3E4(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;

  return sub_24499A394(a1, a2, *(_OWORD **)(v2 + 16));
}

unint64_t sub_24499A3EC()
{
  unint64_t result;

  result = qword_2573A1D58;
  if (!qword_2573A1D58)
  {
    result = MEMORY[0x24951C158](&unk_2449DB780, &type metadata for AppManagerInterface.TwoWayMessage.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1D58);
  }
  return result;
}

unint64_t sub_24499A430()
{
  unint64_t result;

  result = qword_2573A1D60;
  if (!qword_2573A1D60)
  {
    result = MEMORY[0x24951C158](&unk_2449DB740, &type metadata for AppManagerInterface.TwoWayMessage.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1D60);
  }
  return result;
}

unint64_t sub_24499A474()
{
  unint64_t result;

  result = qword_2573A1D68;
  if (!qword_2573A1D68)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ResetAppRequest, &type metadata for ResetAppRequest);
    atomic_store(result, (unint64_t *)&qword_2573A1D68);
  }
  return result;
}

unint64_t sub_24499A4B8()
{
  unint64_t result;

  result = qword_2573A1D70;
  if (!qword_2573A1D70)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for GrantExecutePermissionRequest, &type metadata for GrantExecutePermissionRequest);
    atomic_store(result, (unint64_t *)&qword_2573A1D70);
  }
  return result;
}

unint64_t sub_24499A4FC()
{
  unint64_t result;

  result = qword_2573A1D78;
  if (!qword_2573A1D78)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for CopyURLRequest, &type metadata for CopyURLRequest);
    atomic_store(result, (unint64_t *)&qword_2573A1D78);
  }
  return result;
}

unint64_t sub_24499A540()
{
  unint64_t result;

  result = qword_2573A1D80;
  if (!qword_2573A1D80)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for UninstallAppsRequest, &type metadata for UninstallAppsRequest);
    atomic_store(result, (unint64_t *)&qword_2573A1D80);
  }
  return result;
}

unint64_t sub_24499A584()
{
  unint64_t result;

  result = qword_2573A1D88;
  if (!qword_2573A1D88)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for InstallAppRequest, &type metadata for InstallAppRequest);
    atomic_store(result, (unint64_t *)&qword_2573A1D88);
  }
  return result;
}

uint64_t AppManagerInterface.TwoWayMessage.init(propertyListValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[6];

  v5[3] = &type metadata for AppManagerInterface.TwoWayMessage.Key;
  v5[4] = sub_24499A3EC();
  LOBYTE(v5[0]) = 0;
  sub_24499A430();
  sub_2449CF37C();
  if (!v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    __asm { BR              X10 }
  }
  v3 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t sub_24499A96C(uint64_t a1)
{
  return AppManagerInterface.TwoWayMessage.init(propertyListValue:)(a1);
}

id InstallAppRequest.sourceURLWrapper.getter@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t InstallAppRequest.isDevelopment.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t InstallAppRequest.init(sourceURL:isDevelopment:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  void (*v13)(char *, uint64_t);
  uint64_t result;
  uint64_t v15;

  v6 = sub_2449CF034();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = objc_allocWithZone(MEMORY[0x24BDD17B8]);
  v11 = (void *)sub_2449CF010();
  v12 = objc_msgSend(v10, sel_initWithURL_readonly_, v11, 0);

  v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  result = ((uint64_t (*)(uint64_t, uint64_t))v13)(a1, v6);
  *(_QWORD *)a3 = v12;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t sub_24499AA7C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6F6C657665447369;
  else
    return 0xD000000000000014;
}

uint64_t sub_24499AAC4(char *a1, char *a2)
{
  return sub_2449A0E14(*a1, *a2);
}

uint64_t sub_24499AAD0()
{
  return sub_2449C72E8();
}

uint64_t sub_24499AAD8()
{
  return sub_244924270();
}

uint64_t sub_24499AAE0()
{
  return sub_2449CA2FC();
}

uint64_t sub_24499AAE8@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24499AAF4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24499AA7C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24499AB1C()
{
  char *v0;

  return sub_24499AA7C(*v0);
}

uint64_t InstallAppRequest.propertyListValue.getter()
{
  return sub_24499AE74();
}

uint64_t sub_24499AB30()
{
  sub_24499ACF8();
  sub_24499AD3C();
  return sub_2449CF604();
}

uint64_t sub_24499ABB0()
{
  return sub_24499AB30();
}

uint64_t InstallAppRequest.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  _BYTE v11[24];
  ValueMetadata *v12;
  unint64_t v13;
  uint64_t v14;

  v12 = &type metadata for InstallAppRequest.Key;
  v5 = sub_24499ACF8();
  v13 = v5;
  v11[0] = 0;
  sub_24499AD3C();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    v7 = v14;
    v12 = &type metadata for InstallAppRequest.Key;
    v13 = v5;
    v11[0] = 1;
    sub_2449CF37C();
    v9 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = v10;
  }
  return result;
}

unint64_t sub_24499ACF8()
{
  unint64_t result;

  result = qword_2573A1D90;
  if (!qword_2573A1D90)
  {
    result = MEMORY[0x24951C158](&unk_2449DB718, &type metadata for InstallAppRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1D90);
  }
  return result;
}

unint64_t sub_24499AD3C()
{
  unint64_t result;

  result = qword_2573A1D98;
  if (!qword_2573A1D98)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for SecurityScopedURLWrapper, &type metadata for SecurityScopedURLWrapper);
    atomic_store(result, (unint64_t *)&qword_2573A1D98);
  }
  return result;
}

uint64_t sub_24499AD80()
{
  return sub_24499B0F0();
}

uint64_t sub_24499AD8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InstallAppRequest.init(propertyListValue:)(a1, a2);
}

uint64_t UninstallAppsRequest.bundleIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UninstallAppsRequest.init(bundleIDs:arePrefixes:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t sub_24499ADB4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6966657250657261;
  else
    return 0x4449656C646E7562;
}

uint64_t sub_24499ADF8(char *a1, char *a2)
{
  return sub_24499FB28(*a1, *a2);
}

uint64_t sub_24499AE04()
{
  return sub_2449C7378();
}

uint64_t sub_24499AE0C()
{
  return sub_244923868();
}

uint64_t sub_24499AE14()
{
  return sub_2449CAE5C();
}

uint64_t sub_24499AE1C@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_24499AE28@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24499ADB4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24499AE50()
{
  char *v0;

  return sub_24499ADB4(*v0);
}

void sub_24499AE58(_QWORD *a1@<X8>)
{
  *a1 = &unk_251594748;
}

uint64_t UninstallAppsRequest.propertyListValue.getter()
{
  return sub_24499AE74();
}

uint64_t sub_24499AE74()
{
  return sub_2449CF3D0();
}

uint64_t sub_24499AEA4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
  sub_24499B0A0();
  sub_244957FC4();
  return sub_2449CF604();
}

uint64_t sub_24499AF30()
{
  return sub_24499AEA4();
}

uint64_t UninstallAppsRequest.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[24];
  ValueMetadata *v12;
  unint64_t v13;
  uint64_t v14;

  v12 = &type metadata for UninstallAppsRequest.Key;
  v5 = sub_24499B0A0();
  v13 = v5;
  v11[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739F158);
  sub_244957FC4();
  sub_2449CF3B8();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    v8 = v14;
    v12 = &type metadata for UninstallAppsRequest.Key;
    v13 = v5;
    v11[0] = 1;
    swift_bridgeObjectRetain();
    sub_2449CF37C();
    v9 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    v10 = v14;
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = v10;
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_24499B0A0()
{
  unint64_t result;

  result = qword_2573A1DA0;
  if (!qword_2573A1DA0)
  {
    result = MEMORY[0x24951C158](&unk_2449DB6F0, &type metadata for UninstallAppsRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1DA0);
  }
  return result;
}

uint64_t sub_24499B0E4()
{
  return sub_24499B0F0();
}

uint64_t sub_24499B0F0()
{
  return sub_2449CF3D0();
}

uint64_t sub_24499B124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return UninstallAppsRequest.init(propertyListValue:)(a1, a2);
}

uint64_t CopyURLRequest.filename.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

id CopyURLRequest.sourceURLWrapper.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 64);
  *a1 = v2;
  return v2;
}

__n128 CopyURLRequest.init(agentDescriptor:sourceURL:)@<Q0>(__int128 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void (*v18)(char *, uint64_t);
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __int128 v24;

  v6 = sub_2449CF034();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v23 = (__n128)a1[1];
  v24 = v10;
  v11 = *((_QWORD *)a1 + 4);
  v21 = *((_QWORD *)a1 + 5);
  v22 = v11;
  v12 = sub_2449CF004();
  v14 = v13;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, a2, v6);
  v15 = objc_allocWithZone(MEMORY[0x24BDD17B8]);
  v16 = (void *)sub_2449CF010();
  v17 = objc_msgSend(v15, sel_initWithURL_readonly_, v16, 0);

  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v9, v6);
  v18(a2, v6);
  result = v23;
  *(_OWORD *)a3 = v24;
  *(__n128 *)(a3 + 16) = result;
  v20 = v21;
  *(_QWORD *)(a3 + 32) = v22;
  *(_QWORD *)(a3 + 40) = v20;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v14;
  *(_QWORD *)(a3 + 64) = v17;
  return result;
}

uint64_t sub_24499B2B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24499B2EC + 4 * byte_2449DAD92[a1]))(0xD000000000000014, 0x80000002449E2870);
}

uint64_t sub_24499B2EC()
{
  return 0x656449746E656761;
}

uint64_t sub_24499B310()
{
  return 0x656D616E656C6966;
}

uint64_t sub_24499B328()
{
  return 0x736544746E656761;
}

uint64_t sub_24499B34C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24499E7E0(*a1, *a2);
}

uint64_t sub_24499B358()
{
  unsigned __int8 *v0;

  return sub_2449C7404(*v0);
}

uint64_t sub_24499B360(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_244922F88(a1, *v1);
}

uint64_t sub_24499B368(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_2449C941C(a1, *v1);
}

uint64_t sub_24499B370@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449728F4();
  *a1 = result;
  return result;
}

uint64_t sub_24499B3A4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24499B2B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24499B3CC()
{
  unsigned __int8 *v0;

  return sub_24499B2B4(*v0);
}

uint64_t CopyURLRequest.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24499B41C()
{
  uint64_t v0;

  return sub_24499BA90(*(_QWORD *)(v0 + 16), (void (*)(void))sub_24499B468);
}

uint64_t CopyURLRequest.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_24499BBE4(a1, (uint64_t)&type metadata for CopyURLRequest.Key, (uint64_t (*)(void))sub_24499B468, a2);
}

unint64_t sub_24499B468()
{
  unint64_t result;

  result = qword_2573A1DA8;
  if (!qword_2573A1DA8)
  {
    result = MEMORY[0x24951C158](&unk_2449DB6C8, &type metadata for CopyURLRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1DA8);
  }
  return result;
}

uint64_t sub_24499B4AC()
{
  return sub_2449CF3D0();
}

uint64_t sub_24499B4F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CopyURLRequest.init(propertyListValue:)(a1, a2);
}

uint64_t CopyURLResponse.finalPath.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

PreviewsMessagingOS::CopyURLResponse __swiftcall CopyURLResponse.init(finalPath:)(PreviewsMessagingOS::CopyURLResponse finalPath)
{
  PreviewsMessagingOS::CopyURLResponse *v1;

  *v1 = finalPath;
  return finalPath;
}

uint64_t sub_24499B548@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2449CFC10();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_24499B598@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_24499DA9C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_24499B5C0(_QWORD *a1@<X8>)
{
  *a1 = &unk_251594828;
}

uint64_t CopyURLResponse.propertyListValue.getter()
{
  sub_24499B630();
  return sub_2449CF3E8();
}

unint64_t sub_24499B630()
{
  unint64_t result;

  result = qword_2573A1DB0;
  if (!qword_2573A1DB0)
  {
    result = MEMORY[0x24951C158](&unk_2449DB6A0, &type metadata for CopyURLResponse.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1DB0);
  }
  return result;
}

uint64_t CopyURLResponse.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = &type metadata for CopyURLResponse.Key;
  v10 = sub_24499B630();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (!v2)
  {
    v7 = v12;
    *a2 = v11;
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_24499B738()
{
  sub_24499B630();
  return sub_2449CF3E8();
}

uint64_t sub_24499B798@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = &type metadata for CopyURLResponse.Key;
  v10 = sub_24499B630();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (!v2)
  {
    v7 = v12;
    *a2 = v11;
    a2[1] = v7;
  }
  return result;
}

uint64_t _s19PreviewsMessagingOS14CopyURLRequestV15agentDescriptorAA05AgentG0Vvg_0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 GrantExecutePermissionRequest.init(agentDescriptor:sourceURL:)@<Q0>(__int128 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void (*v18)(char *, uint64_t);
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;

  v6 = sub_2449CF034();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v25 = (__n128)a1[1];
  v26 = v10;
  v11 = *((_QWORD *)a1 + 4);
  v23 = *((_QWORD *)a1 + 5);
  v24 = v11;
  v22 = sub_2449CF004();
  v13 = v12;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, a2, v6);
  v14 = objc_allocWithZone(MEMORY[0x24BDD17B8]);
  v15 = (void *)sub_2449CF010();
  v16 = (void *)sub_2449CF85C();
  v17 = objc_msgSend(v14, sel_initWithURL_readonly_extensionClass_, v15, 1, v16);

  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v9, v6);
  v18(a2, v6);
  result = v25;
  *(_OWORD *)a3 = v26;
  *(__n128 *)(a3 + 16) = result;
  v20 = v23;
  *(_QWORD *)(a3 + 32) = v24;
  *(_QWORD *)(a3 + 40) = v20;
  *(_QWORD *)(a3 + 48) = v22;
  *(_QWORD *)(a3 + 56) = v13;
  *(_QWORD *)(a3 + 64) = v17;
  return result;
}

uint64_t sub_24499BA14@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449728F4();
  *a1 = result;
  return result;
}

uint64_t GrantExecutePermissionRequest.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24499BA90(uint64_t a1, void (*a2)(void))
{
  a2();
  sub_244980E44();
  sub_244980FAC();
  sub_24499AD3C();
  return sub_2449CF5EC();
}

uint64_t sub_24499BB98()
{
  uint64_t v0;

  return sub_24499BA90(*(_QWORD *)(v0 + 16), (void (*)(void))sub_24499BE24);
}

uint64_t GrantExecutePermissionRequest.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_24499BBE4(a1, (uint64_t)&type metadata for GrantExecutePermissionRequest.Key, (uint64_t (*)(void))sub_24499BE24, a2);
}

uint64_t sub_24499BBE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v21 = a2;
  v8 = a3();
  v22 = v8;
  LOBYTE(v20[0]) = 1;
  sub_244980FAC();
  sub_2449CF37C();
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v21 = a2;
    v22 = v8;
    LOBYTE(v20[0]) = 0;
    sub_2449CF37C();

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  v9 = v23[1];
  v10 = v24;
  v18 = v23[2];
  v19 = v23[0];
  v11 = v26;
  v17 = v25;
  v24 = a2;
  v25 = v8;
  LOBYTE(v23[0]) = 2;
  sub_2449CF37C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v12 = v20[1];
  v16 = v20[0];
  v24 = a2;
  v25 = v8;
  LOBYTE(v23[0]) = 3;
  sub_24499AD3C();
  sub_2449CF37C();
  v13 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v15 = v27;
  *a4 = v19;
  a4[1] = v9;
  a4[2] = v18;
  a4[3] = v10;
  a4[4] = v17;
  a4[5] = v11;
  a4[6] = v16;
  a4[7] = v12;
  a4[8] = v15;
  return result;
}

unint64_t sub_24499BE24()
{
  unint64_t result;

  result = qword_2573A1DB8;
  if (!qword_2573A1DB8)
  {
    result = MEMORY[0x24951C158](&unk_2449DB678, &type metadata for GrantExecutePermissionRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1DB8);
  }
  return result;
}

uint64_t sub_24499BE68()
{
  return sub_2449CF3D0();
}

uint64_t sub_24499BEB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return GrantExecutePermissionRequest.init(propertyListValue:)(a1, a2);
}

uint64_t ResetAppRequest.agentDescriptorBundle.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id ResetAppRequest.sourceURLWrapper.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 32);
  *a1 = v2;
  return v2;
}

uint64_t ResetAppRequest.init(agentDescriptorBundle:sourceURL:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06B8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2449CF034();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - v14;
  v32 = *a1;
  v16 = a1[1];
  v17 = a1[2];
  v18 = a1[3];
  v30 = v17;
  v31 = v16;
  sub_24499C10C(a2, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_24499C154(a2);
    result = sub_24499C154((uint64_t)v8);
    v20 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    v21 = objc_allocWithZone(MEMORY[0x24BDD17B8]);
    v22 = sub_2449CF010();
    v29 = v18;
    v23 = (void *)v22;
    v24 = sub_2449CF85C();
    v28 = a2;
    v25 = (void *)v24;
    v20 = objc_msgSend(v21, sel_initWithURL_readonly_extensionClass_, v23, 1, v24);

    v18 = v29;
    v26 = *(void (**)(char *, uint64_t))(v10 + 8);
    v26(v13, v9);
    sub_24499C154(v28);
    result = ((uint64_t (*)(char *, uint64_t))v26)(v15, v9);
  }
  v27 = v31;
  *a3 = v32;
  a3[1] = v27;
  a3[2] = v30;
  a3[3] = v18;
  a3[4] = v20;
  return result;
}

uint64_t sub_24499C10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24499C154(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A06B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24499C194(char a1)
{
  if (!a1)
    return 0x656449746E656761;
  if (a1 == 1)
    return 0xD000000000000015;
  return 0xD000000000000010;
}

uint64_t sub_24499C200(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2449A17E8(*a1, *a2);
}

uint64_t sub_24499C20C()
{
  return sub_2449C74E4();
}

uint64_t sub_24499C214()
{
  return sub_244924730();
}

uint64_t sub_24499C21C()
{
  return sub_2449C9F44();
}

uint64_t sub_24499C224@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24499DB00();
  *a1 = result;
  return result;
}

uint64_t sub_24499C250@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24499C194(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24499C278()
{
  char *v0;

  return sub_24499C194(*v0);
}

uint64_t ResetAppRequest.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_24499C2C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[8];

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  sub_24499DB48((uint64_t)(a1 + 4), (uint64_t)v17);
  v16 = 0;
  v12 = v1;
  v13 = v2;
  v14 = v3;
  v15 = v4;
  v11 = 1;
  v7 = v1;
  v8 = v2;
  v9 = v3;
  v10 = v4;
  v6[15] = 2;
  sub_24499DB48((uint64_t)v17, (uint64_t)v6);
  sub_24499C558();
  sub_244980E44();
  sub_24499AD3C();
  return sub_2449CF5F8();
}

uint64_t sub_24499C388()
{
  uint64_t v0;

  return sub_24499C2C0(*(uint64_t **)(v0 + 16));
}

uint64_t ResetAppRequest.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v13 = &type metadata for ResetAppRequest.Key;
  v5 = sub_24499C558();
  v14 = v5;
  v12[0] = 1;
  sub_244980E44();
  sub_2449CF37C();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v13 = &type metadata for ResetAppRequest.Key;
    v14 = v5;
    v12[0] = 0;
    sub_2449CF37C();

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  v6 = v16;
  v19 = v15;
  v8 = v17;
  v7 = v18;
  v13 = &type metadata for ResetAppRequest.Key;
  v14 = v5;
  v12[0] = 2;
  sub_24499AD3C();
  sub_2449CF3B8();
  v9 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  v11 = v15;
  *a2 = v19;
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v7;
  a2[4] = v11;
  return result;
}

unint64_t sub_24499C558()
{
  unint64_t result;

  result = qword_2573A1DC0;
  if (!qword_2573A1DC0)
  {
    result = MEMORY[0x24951C158](&unk_2449DB650, &type metadata for ResetAppRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1DC0);
  }
  return result;
}

uint64_t sub_24499C59C()
{
  return sub_2449CF3D0();
}

uint64_t sub_24499C5DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return ResetAppRequest.init(propertyListValue:)(a1, a2);
}

ValueMetadata *type metadata accessor for AppManagerInterface()
{
  return &type metadata for AppManagerInterface;
}

void destroy for AppManagerInterface.TwoWayMessage(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 72);
  if (v2 >= 5)
    v2 = *(_DWORD *)a1 + 5;
  switch(v2)
  {
    case 0u:

      break;
    case 1u:
      swift_bridgeObjectRelease();
      break;
    case 2u:
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for AppManagerInterface.TwoWayMessage(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  void *v4;
  id v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  v3 = *(unsigned __int8 *)(a2 + 72);
  if (v3 >= 5)
    v3 = *(_DWORD *)a2 + 5;
  switch(v3)
  {
    case 0u:
      v4 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a1 + 72) = 0;
      v5 = v4;
      break;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a1 + 72) = 1;
      swift_bridgeObjectRetain();
      break;
    case 2u:
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v8;
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v9;
      v10 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v10;
      v11 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v11;
      v12 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v12;
      v13 = 2;
      goto LABEL_9;
    case 3u:
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v14;
      v15 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v15;
      v16 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v16;
      v17 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v17;
      v12 = *(void **)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v12;
      v13 = 3;
LABEL_9:
      *(_BYTE *)(a1 + 72) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = v12;
      break;
    case 4u:
      v19 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v19;
      v20 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v20;
      v21 = *(void **)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v21;
      *(_BYTE *)(a1 + 72) = 4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = v21;
      break;
    default:
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      break;
  }
  return a1;
}

uint64_t assignWithCopy for AppManagerInterface.TwoWayMessage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  unsigned int v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  id v14;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    switch(v4)
    {
      case 0u:
        v5 = *(void **)a1;
        goto LABEL_9;
      case 1u:
        swift_bridgeObjectRelease();
        break;
      case 2u:
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = *(void **)(a1 + 64);
        goto LABEL_9;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = *(void **)(a1 + 32);
LABEL_9:

        break;
      default:
        break;
    }
    v6 = *(unsigned __int8 *)(a2 + 72);
    if (v6 >= 5)
      v6 = *(_DWORD *)a2 + 5;
    switch(v6)
    {
      case 0u:
        v7 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_BYTE *)(a1 + 72) = 0;
        v8 = v7;
        return a1;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_BYTE *)(a1 + 72) = 1;
        swift_bridgeObjectRetain();
        return a1;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        v12 = *(void **)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v12;
        v13 = 2;
        goto LABEL_18;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        v12 = *(void **)(a2 + 64);
        *(_QWORD *)(a1 + 64) = v12;
        v13 = 3;
LABEL_18:
        *(_BYTE *)(a1 + 72) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_20;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        v12 = *(void **)(a2 + 32);
        *(_QWORD *)(a1 + 32) = v12;
        *(_BYTE *)(a1 + 72) = 4;
        swift_bridgeObjectRetain();
LABEL_20:
        swift_bridgeObjectRetain();
        v14 = v12;
        break;
      default:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v9 = *(_OWORD *)(a2 + 16);
        v10 = *(_OWORD *)(a2 + 32);
        v11 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)(a1 + 16) = v9;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AppManagerInterface.TwoWayMessage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 5)
      v4 = *(_DWORD *)a1 + 5;
    switch(v4)
    {
      case 0u:
        v5 = *(void **)a1;
        goto LABEL_9;
      case 1u:
        swift_bridgeObjectRelease();
        break;
      case 2u:
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = *(void **)(a1 + 64);
        goto LABEL_9;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = *(void **)(a1 + 32);
LABEL_9:

        break;
      default:
        break;
    }
    v6 = *(unsigned __int8 *)(a2 + 72);
    if (v6 >= 5)
      v6 = *(_DWORD *)a2 + 5;
    switch(v6)
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_BYTE *)(a1 + 72) = 0;
        return a1;
      case 1u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        v9 = 1;
        goto LABEL_19;
      case 2u:
        v10 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v10;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v11;
        v9 = 2;
        goto LABEL_19;
      case 3u:
        v12 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v12;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v13;
        v9 = 3;
        goto LABEL_19;
      case 4u:
        v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v9 = 4;
LABEL_19:
        *(_BYTE *)(a1 + 72) = v9;
        break;
      default:
        v7 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v7;
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AppManagerInterface.TwoWayMessage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 >= 6)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AppManagerInterface.TwoWayMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 57) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

uint64_t sub_24499CCC8(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 72);
  if (result >= 5)
    return (*(_DWORD *)a1 + 5);
  return result;
}

uint64_t sub_24499CCE4(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_QWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppManagerInterface.TwoWayMessage()
{
  return &type metadata for AppManagerInterface.TwoWayMessage;
}

uint64_t initializeBufferWithCopyOfBuffer for InstallAppRequest(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = v3;
  return a1;
}

void destroy for InstallAppRequest(id *a1)
{

}

uint64_t assignWithCopy for InstallAppRequest(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for InstallAppRequest(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for InstallAppRequest()
{
  return &type metadata for InstallAppRequest;
}

uint64_t assignWithCopy for UninstallAppsRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for UninstallAppsRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UninstallAppsRequest(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UninstallAppsRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UninstallAppsRequest()
{
  return &type metadata for UninstallAppsRequest;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for CopyURLRequest()
{
  return &type metadata for CopyURLRequest;
}

ValueMetadata *type metadata accessor for CopyURLResponse()
{
  return &type metadata for CopyURLResponse;
}

void _s19PreviewsMessagingOS14CopyURLRequestVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *_s19PreviewsMessagingOS14CopyURLRequestVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = (void *)a2[8];
  a1[8] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v7;
  return a1;
}

_QWORD *_s19PreviewsMessagingOS14CopyURLRequestVwca_0(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[8];
  v5 = (void *)a1[8];
  a1[8] = v4;
  v6 = v4;

  return a1;
}

uint64_t _s19PreviewsMessagingOS14CopyURLRequestVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  return a1;
}

uint64_t _s19PreviewsMessagingOS14CopyURLRequestVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_24499D1C8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GrantExecutePermissionRequest()
{
  return &type metadata for GrantExecutePermissionRequest;
}

void destroy for ResetAppRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for ResetAppRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for ResetAppRequest(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[4];
  v5 = (void *)a2[4];
  a1[4] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for ResetAppRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for ResetAppRequest()
{
  return &type metadata for ResetAppRequest;
}

uint64_t storeEnumTagSinglePayload for ResetAppRequest.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24499D3D8 + 4 * byte_2449DADB9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24499D40C + 4 * byte_2449DADB4[v4]))();
}

uint64_t sub_24499D40C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499D414(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24499D41CLL);
  return result;
}

uint64_t sub_24499D428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24499D430);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24499D434(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499D43C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResetAppRequest.Key()
{
  return &type metadata for ResetAppRequest.Key;
}

ValueMetadata *type metadata accessor for GrantExecutePermissionRequest.Key()
{
  return &type metadata for GrantExecutePermissionRequest.Key;
}

uint64_t storeEnumTagSinglePayload for CopyURLResponse.Key(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24499D4AC + 4 * byte_2449DADBE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24499D4CC + 4 * byte_2449DADC3[v4]))();
}

_BYTE *sub_24499D4AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24499D4CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24499D4D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24499D4DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24499D4E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24499D4EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CopyURLResponse.Key()
{
  return &type metadata for CopyURLResponse.Key;
}

uint64_t _s19PreviewsMessagingOS29GrantExecutePermissionRequestV3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24499D554 + 4 * byte_2449DADCD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24499D588 + 4 * byte_2449DADC8[v4]))();
}

uint64_t sub_24499D588(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499D590(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24499D598);
  return result;
}

uint64_t sub_24499D5A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24499D5ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24499D5B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499D5B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CopyURLRequest.Key()
{
  return &type metadata for CopyURLRequest.Key;
}

ValueMetadata *type metadata accessor for UninstallAppsRequest.Key()
{
  return &type metadata for UninstallAppsRequest.Key;
}

ValueMetadata *type metadata accessor for InstallAppRequest.Key()
{
  return &type metadata for InstallAppRequest.Key;
}

uint64_t storeEnumTagSinglePayload for AppManagerInterface.TwoWayMessage.Discriminant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24499D644 + 4 * byte_2449DADD7[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24499D678 + 4 * byte_2449DADD2[v4]))();
}

uint64_t sub_24499D678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499D680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24499D688);
  return result;
}

uint64_t sub_24499D694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24499D69CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24499D6A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499D6A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppManagerInterface.TwoWayMessage.Discriminant()
{
  return &type metadata for AppManagerInterface.TwoWayMessage.Discriminant;
}

uint64_t _s19PreviewsMessagingOS20UninstallAppsRequestV3KeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24499D710 + 4 * byte_2449DADE1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24499D744 + 4 * byte_2449DADDC[v4]))();
}

uint64_t sub_24499D744(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499D74C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24499D754);
  return result;
}

uint64_t sub_24499D760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24499D768);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24499D76C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24499D774(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppManagerInterface.TwoWayMessage.Key()
{
  return &type metadata for AppManagerInterface.TwoWayMessage.Key;
}

unint64_t sub_24499D794()
{
  unint64_t result;

  result = qword_2573A1DE0;
  if (!qword_2573A1DE0)
  {
    result = MEMORY[0x24951C158](&unk_2449DB158, &type metadata for AppManagerInterface.TwoWayMessage.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1DE0);
  }
  return result;
}

unint64_t sub_24499D7DC()
{
  unint64_t result;

  result = qword_2573A1DE8;
  if (!qword_2573A1DE8)
  {
    result = MEMORY[0x24951C158](&unk_2449DB1F8, &type metadata for AppManagerInterface.TwoWayMessage.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1DE8);
  }
  return result;
}

unint64_t sub_24499D824()
{
  unint64_t result;

  result = qword_2573A1DF0;
  if (!qword_2573A1DF0)
  {
    result = MEMORY[0x24951C158](&unk_2449DB298, &type metadata for InstallAppRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1DF0);
  }
  return result;
}

uint64_t sub_24499D868()
{
  return sub_24499D940(&qword_2573A1DF8, &qword_2573A1E00);
}

unint64_t sub_24499D890()
{
  unint64_t result;

  result = qword_2573A1E08;
  if (!qword_2573A1E08)
  {
    result = MEMORY[0x24951C158](&unk_2449DB370, &type metadata for UninstallAppsRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E08);
  }
  return result;
}

unint64_t sub_24499D8D8()
{
  unint64_t result;

  result = qword_2573A1E10;
  if (!qword_2573A1E10)
  {
    result = MEMORY[0x24951C158](&unk_2449DB410, &type metadata for CopyURLRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E10);
  }
  return result;
}

uint64_t sub_24499D91C()
{
  return sub_24499D940(&qword_2573A1E18, &qword_2573A1E20);
}

uint64_t sub_24499D940(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24951C158](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24499D984()
{
  unint64_t result;

  result = qword_2573A1E28;
  if (!qword_2573A1E28)
  {
    result = MEMORY[0x24951C158](&unk_2449DB4E8, &type metadata for CopyURLResponse.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E28);
  }
  return result;
}

unint64_t sub_24499D9CC()
{
  unint64_t result;

  result = qword_2573A1E30;
  if (!qword_2573A1E30)
  {
    result = MEMORY[0x24951C158](&unk_2449DB588, &type metadata for GrantExecutePermissionRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E30);
  }
  return result;
}

unint64_t sub_24499DA14()
{
  unint64_t result;

  result = qword_2573A1E38;
  if (!qword_2573A1E38)
  {
    result = MEMORY[0x24951C158](&unk_2449DB628, &type metadata for ResetAppRequest.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E38);
  }
  return result;
}

unint64_t sub_24499DA58()
{
  unint64_t result;

  result = qword_2573A1E40;
  if (!qword_2573A1E40)
  {
    result = MEMORY[0x24951C158](&unk_2449DB180, &type metadata for AppManagerInterface.TwoWayMessage.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1E40);
  }
  return result;
}

uint64_t sub_24499DA9C()
{
  return 0x7461506C616E6966;
}

uint64_t sub_24499DAB8()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_24499DB00()
{
  unint64_t v0;

  v0 = sub_2449CFC10();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_24499DB48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1E48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24499DBC0(char a1, char a2)
{
  char v2;

  if (*(_QWORD *)&aUuid_3[8 * a1] == *(_QWORD *)&aUuid_3[8 * a2])
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_24499DC24(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aImageindimageo_1[8 * a1] == *(_QWORD *)&aImageindimageo_1[8 * a2]
    && *(_QWORD *)&aSymbollosource_1[8 * a1 + 24] == *(_QWORD *)&aSymbollosource_1[8 * a2 + 24])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499DCA8(char a1, char a2)
{
  char v3;

  if (qword_2449DE300[a1] == qword_2449DE300[a2] && qword_2449DE348[a1] == qword_2449DE348[a2])
    v3 = 1;
  else
    v3 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499DD2C(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aDiscrimiauditt_1[8 * a1] == *(_QWORD *)&aDiscrimiauditt_1[8 * a2]
    && *(_QWORD *)&aNant_3[8 * a1] == *(_QWORD *)&aNant_3[8 * a2])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499DDB0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 6580592;
  else
    v3 = 0x6B6F547469647561;
  if (v2)
    v4 = 0xEA00000000006E65;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 6580592;
  else
    v5 = 0x6B6F547469647561;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xEA00000000006E65;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499DE4C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1835365481;
  else
    v3 = 0x6E6F6974636573;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1835365481;
  else
    v5 = 0x6E6F6974636573;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499DEE4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656D614E656C6966;
  else
    v3 = 0x614E656C75646F6DLL;
  if (v2)
    v4 = 0xEA0000000000656DLL;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656D614E656C6966;
  else
    v5 = 0x614E656C75646F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA0000000000656DLL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24499DF88(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24499DFD4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24499E03C + 4 * byte_2449DB7B4[a2]))(0x726F77656D617266);
}

uint64_t sub_24499E03C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x726F77656D617266 && v1 == 0xED0000687461506BLL)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24499E0D8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4F746E65746E6F63;
  else
    v3 = 0x43746E65746E6F63;
  if (v2)
    v4 = 0xEF79726F67657461;
  else
    v4 = 0xEF65646972726576;
  if ((a2 & 1) != 0)
    v5 = 0x4F746E65746E6F63;
  else
    v5 = 0x43746E65746E6F63;
  if ((a2 & 1) != 0)
    v6 = 0xEF65646972726576;
  else
    v6 = 0xEF79726F67657461;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499E190(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0x43746E65746E6F63;
  if (v2)
    v4 = 0xEF79726F67657461;
  else
    v4 = 0x80000002449E2730;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0x43746E65746E6F63;
  if ((a2 & 1) != 0)
    v6 = 0x80000002449E2730;
  else
    v6 = 0xEF79726F67657461;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499E240(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000011;
    else
      v3 = 0x73746E6169726176;
    if (v2 == 1)
      v4 = 0x80000002449E2D00;
    else
      v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000011;
      else
        v6 = 0x73746E6169726176;
      if (v5 == 1)
        v7 = 0x80000002449E2D00;
      else
        v7 = 0xE800000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x656C746974;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x656C746974)
  {
LABEL_21:
    v8 = sub_2449CFCD0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24499E340(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000019;
    else
      v3 = 0xD000000000000018;
    if (v2 == 1)
      v4 = 0x80000002449E2D30;
    else
      v4 = 0x80000002449E2D50;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000019;
      else
        v6 = 0xD000000000000018;
      if (v5 == 1)
        v7 = 0x80000002449E2D30;
      else
        v7 = 0x80000002449E2D50;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v3 = 0x696D697263736964;
    v4 = 0xEC000000746E616ELL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xEC000000746E616ELL;
  if (v3 != 0x696D697263736964)
  {
LABEL_21:
    v8 = sub_2449CFCD0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24499E450(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C655369746C756DLL;
  else
    v3 = 0x6553656C676E6973;
  if (v2)
    v4 = 0xEC0000007463656CLL;
  else
    v4 = 0xEB00000000746365;
  if ((a2 & 1) != 0)
    v5 = 0x6C655369746C756DLL;
  else
    v5 = 0x6553656C676E6973;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000746365;
  else
    v6 = 0xEC0000007463656CLL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499E500(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65676E6172;
  else
    v3 = 1953720684;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x65676E6172;
  else
    v5 = 1953720684;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499E594(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x56746C7561666564;
  else
    v3 = 0x656C797473;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xEE00746E61697261;
  if ((a2 & 1) != 0)
    v5 = 0x56746C7561666564;
  else
    v5 = 0x656C797473;
  if ((a2 & 1) != 0)
    v6 = 0xEE00746E61697261;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24499E63C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24499E688(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24499E710 + 4 * byte_2449DB7BD[a2]))(0x6B6F547469647561);
}

uint64_t sub_24499E710(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6B6F547469647561 && v1 == 0xEA00000000006E65)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24499E7E4(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0x6574756C6F736261;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0x80000002449E1BB0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0x6574756C6F736261;
  if ((a2 & 1) != 0)
    v6 = 0x80000002449E1BB0;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499E888(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aBundle_7[8 * a1] == *(_QWORD *)&aBundle_7[8 * a2] && qword_2449DE3D8[a1] == qword_2449DE3D8[a2])
    v3 = 1;
  else
    v3 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499E90C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x74616964656D6D69;
  else
    v3 = 0x746C7561666564;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE900000000000065;
  if ((a2 & 1) != 0)
    v5 = 0x74616964656D6D69;
  else
    v5 = 0x746C7561666564;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000065;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24499E9B0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24499E9FC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24499EAC8 + 4 * byte_2449DB7C9[a2]))(1752457584);
}

uint64_t sub_24499EAC8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1752457584 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24499EBE8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1752457584;
  else
    v3 = 0x696669746E656469;
  if (v2)
    v4 = 0xEA00000000007265;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1752457584;
  else
    v5 = 0x696669746E656469;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xEA00000000007265;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24499EC84(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24499ECD0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24499ED3C + 4 * byte_2449DB7D4[a2]))(0x7469617274726F70);
}

uint64_t sub_24499ED3C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7469617274726F70 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24499EDD8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73746E6169726176;
  else
    v3 = 0x656C746974;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x73746E6169726176;
  else
    v5 = 0x656C746974;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499EE74(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x736E6F6974636573;
  else
    v3 = 0x656C746974;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x736E6F6974636573;
  else
    v5 = 0x656C746974;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499EF10(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aIdentifipath_1[8 * a1] == *(_QWORD *)&aIdentifipath_1[8 * a2]
    && *(_QWORD *)&aSourcefiforrep_1[8 * a1 + 16] == *(_QWORD *)&aSourcefiforrep_1[8 * a2 + 16])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499EF94(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7065526873617263;
  else
    v3 = 0x696D697263736964;
  if (v2)
    v4 = 0xEC000000746E616ELL;
  else
    v4 = 0xEB0000000074726FLL;
  if ((a2 & 1) != 0)
    v5 = 0x7065526873617263;
  else
    v5 = 0x696D697263736964;
  if ((a2 & 1) != 0)
    v6 = 0xEB0000000074726FLL;
  else
    v6 = 0xEC000000746E616ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499F044(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD00000000000001DLL;
  else
    v3 = 0xD000000000000011;
  if (v2)
    v4 = 0x80000002449E2E60;
  else
    v4 = 0x80000002449E2E80;
  if ((a2 & 1) != 0)
    v5 = 0xD00000000000001DLL;
  else
    v5 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v6 = 0x80000002449E2E80;
  else
    v6 = 0x80000002449E2E60;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499F0EC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x736544746E656761;
  else
    v3 = 0x656449746E656761;
  if (v2)
    v4 = 0xEF7265696669746ELL;
  else
    v4 = 0xEF726F7470697263;
  if ((a2 & 1) != 0)
    v5 = 0x736544746E656761;
  else
    v5 = 0x656449746E656761;
  if ((a2 & 1) != 0)
    v6 = 0xEF726F7470697263;
  else
    v6 = 0xEF7265696669746ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499F1A4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7265696669646F6DLL;
    else
      v3 = 0xD000000000000011;
    if (v2 == 1)
      v4 = 0xE900000000000073;
    else
      v4 = 0x80000002449E1D60;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7265696669646F6DLL;
      else
        v6 = 0xD000000000000011;
      if (v5 == 1)
        v7 = 0xE900000000000073;
      else
        v7 = 0x80000002449E1D60;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v3 = 0x546C6F72746E6F63;
    v4 = 0xEB00000000657079;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xEB00000000657079;
  if (v3 != 0x546C6F72746E6F63)
  {
LABEL_21:
    v8 = sub_2449CFCD0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24499F2C8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x72756769666E6F63;
  else
    v3 = 0x696D697263736964;
  if (v2)
    v4 = 0xEC000000746E616ELL;
  else
    v4 = 0xED00006E6F697461;
  if ((a2 & 1) != 0)
    v5 = 0x72756769666E6F63;
  else
    v5 = 0x696D697263736964;
  if ((a2 & 1) != 0)
    v6 = 0xED00006E6F697461;
  else
    v6 = 0xEC000000746E616ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499F37C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x756853776F6C6C61;
  else
    v3 = 0x73706F7473;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xEC000000656C6666;
  if ((a2 & 1) != 0)
    v5 = 0x756853776F6C6C61;
  else
    v5 = 0x73706F7473;
  if ((a2 & 1) != 0)
    v6 = 0xEC000000656C6666;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499F420(char a1, char a2)
{
  char v3;

  if (qword_2449DE430[a1] == qword_2449DE430[a2] && qword_2449DE448[a1] == qword_2449DE448[a2])
    v3 = 1;
  else
    v3 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499F4A4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x656C746974;
    else
      v3 = 0xD000000000000019;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0x80000002449E1E30;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x656C746974;
      else
        v6 = 0xD000000000000019;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0x80000002449E1E30;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v3 = 0x6C6F626D79536673;
    v4 = 0xEC000000656D614ELL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xEC000000656D614ELL;
  if (v3 != 0x6C6F626D79536673)
  {
LABEL_21:
    v8 = sub_2449CFCD0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_24499F5B8(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aTitle_5[8 * a1] == *(_QWORD *)&aTitle_5[8 * a2]
    && *(_QWORD *)&aFirstitemoreit_1[8 * a1 + 16] == *(_QWORD *)&aFirstitemoreit_1[8 * a2 + 16])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499F63C(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aTimelinetoggle_1[8 * a1] == *(_QWORD *)&aTimelinetoggle_1[8 * a2]
    && *(_QWORD *)&aDisabled_3[8 * a1 + 8] == *(_QWORD *)&aDisabled_3[8 * a2 + 8])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499F6C0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1701734764;
  else
    v2 = 1701603686;
  if ((a2 & 1) != 0)
    v3 = 1701734764;
  else
    v3 = 1701603686;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_24499F72C(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x61507265646E6572;
  else
    v3 = 0xD000000000000010;
  if (v2)
    v4 = 0x80000002449E22B0;
  else
    v4 = 0xED000064616F6C79;
  if ((a2 & 1) != 0)
    v5 = 0x61507265646E6572;
  else
    v5 = 0xD000000000000010;
  if ((a2 & 1) != 0)
    v6 = 0xED000064616F6C79;
  else
    v6 = 0x80000002449E22B0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24499F7E0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24499F82C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24499F8B0 + 4 * byte_2449DB7DD[a2]))(0x5379616C70736964);
}

uint64_t sub_24499F8B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x5379616C70736964 && v1 == 0xEB00000000657A69)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24499F968(char a1, char a2)
{
  char v3;

  if (qword_2449DE4E0[a1] == qword_2449DE4E0[a2] && qword_2449DE4F8[a1] == qword_2449DE4F8[a2])
    v3 = 1;
  else
    v3 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499F9F0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x736172437478656ELL;
  else
    v3 = 0xD000000000000016;
  if (v2)
    v4 = 0x80000002449E1FC0;
  else
    v4 = 0xEF74726F70655268;
  if ((a2 & 1) != 0)
    v5 = 0x736172437478656ELL;
  else
    v5 = 0xD000000000000016;
  if ((a2 & 1) != 0)
    v6 = 0xEF74726F70655268;
  else
    v6 = 0x80000002449E1FC0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499FAA4(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aName_6[8 * a1] == *(_QWORD *)&aName_6[8 * a2]
    && *(_QWORD *)&aMinversisdkver_1[8 * a1 + 16] == *(_QWORD *)&aMinversisdkver_1[8 * a2 + 16])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499FB28(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6966657250657261;
  else
    v3 = 0x4449656C646E7562;
  if (v2)
    v4 = 0xE900000000000073;
  else
    v4 = 0xEB00000000736578;
  if ((a2 & 1) != 0)
    v5 = 0x6966657250657261;
  else
    v5 = 0x4449656C646E7562;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000736578;
  else
    v6 = 0xE900000000000073;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24499FBD4(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aDiscrimiprovid_1[8 * a1] == *(_QWORD *)&aDiscrimiprovid_1[8 * a2]
    && *(_QWORD *)&aDiscrimiprovid_1[8 * a1 + 40] == *(_QWORD *)&aDiscrimiprovid_1[8 * a2 + 40])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_24499FC58(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x7972747369676572;
  else
    v2 = 0x72656469766F7270;
  if ((a2 & 1) != 0)
    v3 = 0x7972747369676572;
  else
    v3 = 0x72656469766F7270;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_24499FCF8(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aApplicatwidget_0[8 * a1] == *(_QWORD *)&aApplicatwidget_0[8 * a2]
    && *(_QWORD *)&aComplicaion_0[8 * a1 + 8] == *(_QWORD *)&aComplicaion_0[8 * a2 + 8])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_24499FD7C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_24499FDC8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24499FE28 + 4 * byte_2449DB7E6[a2]))(25705);
}

uint64_t sub_24499FE28(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 25705 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_24499FEC8(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24499FF14(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24499FFB8 + 4 * byte_2449DB7F0[a2]))(0x6D726177657270);
}

uint64_t sub_24499FFB8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D726177657270 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2449A00A8(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_2449A00F4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A0184 + 4 * byte_2449DB7FB[a2]))(0x73746375646F7270);
}

uint64_t sub_2449A0184(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73746375646F7270 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2449A0258(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A02A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A0324 + 4 * byte_2449DB804[a2]))(0x7954656D6F726863);
}

uint64_t sub_2449A0324(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7954656D6F726863 && v1 == 0xEA00000000006570)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2449A03E4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A0430(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A04C0 + 4 * byte_2449DB80D[a2]))(0x696D697263736964);
}

uint64_t sub_2449A04C0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x696D697263736964 && v1 == 0xEC000000746E616ELL)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2449A0598(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aWillprovcansym_0[8 * a1] == *(_QWORD *)&aWillprovcansym_0[8 * a2]
    && *(_QWORD *)&aWillprovcansym_0[8 * a1 + 24] == *(_QWORD *)&aWillprovcansym_0[8 * a2 + 24])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A061C(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000017;
  else
    v3 = 0x617243746E656761;
  if (v2)
    v4 = 0xEC00000064656873;
  else
    v4 = 0x80000002449E2EB0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000017;
  else
    v5 = 0x617243746E656761;
  if ((a2 & 1) != 0)
    v6 = 0x80000002449E2EB0;
  else
    v6 = 0xEC00000064656873;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A06C8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0x66457265646E6572;
  if (v2)
    v4 = 0xED00007374636566;
  else
    v4 = 0x80000002449E2230;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000014;
  else
    v5 = 0x66457265646E6572;
  if ((a2 & 1) != 0)
    v6 = 0x80000002449E2230;
  else
    v6 = 0xED00007374636566;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_2449A0778(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A07C4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A0884 + 4 * byte_2449DB819[a2]))(0x73746375646F7270);
}

uint64_t sub_2449A0884(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73746375646F7270 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2449A0998(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A09E4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A0AA0 + 4 * byte_2449DB826[a2]))(0x6E65644974736F68);
}

uint64_t sub_2449A0AA0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E65644974736F68 && v1 == 0xEC00000079746974)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2449A0BA8(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aEvent_5[8 * a1] == *(_QWORD *)&aEvent_5[8 * a2]
    && *(_QWORD *)&aControlistateb_1[8 * a1 + 16] == *(_QWORD *)&aControlistateb_1[8 * a2 + 16])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A0C2C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x615272656E726F63;
  else
    v3 = 1702521203;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xEC00000073756964;
  if ((a2 & 1) != 0)
    v5 = 0x615272656E726F63;
  else
    v5 = 1702521203;
  if ((a2 & 1) != 0)
    v6 = 0xEC00000073756964;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A0CCC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x64616F6C796170;
  else
    v3 = 0x696D697263736964;
  if (v2)
    v4 = 0xEC000000746E616ELL;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x64616F6C796170;
  else
    v5 = 0x696D697263736964;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEC000000746E616ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A0D74(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4E737365636F7270;
  else
    v3 = 6580592;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xEB00000000656D61;
  if ((a2 & 1) != 0)
    v5 = 0x4E737365636F7270;
  else
    v5 = 6580592;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000656D61;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A0E14(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F6C657665447369;
  else
    v3 = 0xD000000000000014;
  if (v2)
    v4 = 0x80000002449E2870;
  else
    v4 = 0xED0000746E656D70;
  if ((a2 & 1) != 0)
    v5 = 0x6F6C657665447369;
  else
    v5 = 0xD000000000000014;
  if ((a2 & 1) != 0)
    v6 = 0xED0000746E656D70;
  else
    v6 = 0x80000002449E2870;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_2449A0EC8(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A0F14(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A1000 + 4 * byte_2449DB835[a2]))(1635017060);
}

uint64_t sub_2449A1000(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1635017060 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2449A1150(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1952671090;
    else
      v3 = 0xD00000000000001ELL;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0x80000002449E2110;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1952671090;
      else
        v6 = 0xD00000000000001ELL;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0x80000002449E2110;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1752457584;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1752457584)
  {
LABEL_21:
    v8 = sub_2449CFCD0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2449A123C(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aPreviewsrunnin_2[8 * a1] == *(_QWORD *)&aPreviewsrunnin_2[8 * a2]
    && *(_QWORD *)&aPreviewsrunnin_2[8 * a1 + 24] == *(_QWORD *)&aPreviewsrunnin_2[8 * a2 + 24])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A12C0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x74756F656D6974;
  else
    v2 = 0x737365636F7270;
  if ((a2 & 1) != 0)
    v3 = 0x74756F656D6974;
  else
    v3 = 0x737365636F7270;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_2449A133C(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aContextiscalef_0[8 * a1] == *(_QWORD *)&aContextiscalef_0[8 * a2]
    && *(_QWORD *)&aD_0[8 * a1] == *(_QWORD *)&aD_0[8 * a2])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_2449A13C0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A140C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A148C + 4 * byte_2449DB843[a2]))(0x4965636166727573);
}

uint64_t sub_2449A148C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4965636166727573 && v1 == 0xE900000000000044)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2449A1554(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aBundle_8[8 * a1] == *(_QWORD *)&aBundle_8[8 * a2]
    && *(_QWORD *)&aFunctionfuncti_1[8 * a1 + 24] == *(_QWORD *)&aFunctionfuncti_1[8 * a2 + 24])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_2449A15D8(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A1624(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A16EC + 4 * byte_2449DB852[a2]))(a3 + 11);
}

uint64_t sub_2449A16EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 11 && v3 == 0x80000002449E2920)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_2449A17E8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000015;
    else
      v3 = 0xD000000000000010;
    if (v2 == 1)
      v4 = 0x80000002449E28C0;
    else
      v4 = 0x80000002449E28E0;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000015;
      else
        v6 = 0xD000000000000010;
      if (v5 == 1)
        v7 = 0x80000002449E28C0;
      else
        v7 = 0x80000002449E28E0;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v3 = 0x656449746E656761;
    v4 = 0xEF7265696669746ELL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xEF7265696669746ELL;
  if (v3 != 0x656449746E656761)
  {
LABEL_21:
    v8 = sub_2449CFCD0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2449A1908(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x6E6F697461636F6CLL;
  else
    v2 = 0x4449656C62617473;
  if ((a2 & 1) != 0)
    v3 = 0x6E6F697461636F6CLL;
  else
    v3 = 0x4449656C62617473;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_2449A1984(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A19D0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A1AB4 + 4 * byte_2449DB863[a2]))(0x44746E65746E6F63);
}

uint64_t sub_2449A1AB4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x44746E65746E6F63 && v1 == 0xED00006E69616D6FLL)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2449A1BEC(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0xD000000000000012;
  if (v2)
    v4 = 0x80000002449E2770;
  else
    v4 = 0x80000002449E2790;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000014;
  else
    v5 = 0xD000000000000012;
  if ((a2 & 1) != 0)
    v6 = 0x80000002449E2790;
  else
    v6 = 0x80000002449E2770;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A1C94(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000011;
  v3 = 0x80000002449E1E90;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6164705574736F68;
    else
      v5 = 0xD000000000000012;
    if (v4 == 1)
      v6 = 0xEE00646565536574;
    else
      v6 = 0x80000002449E2DF0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000011;
  v6 = 0x80000002449E1E90;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x6164705574736F68;
    else
      v2 = 0xD000000000000012;
    if (v7 == 1)
      v3 = 0xEE00646565536574;
    else
      v3 = 0x80000002449E2DF0;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2449A1DA8(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x646950746E656761;
  else
    v2 = 0x44496D6165727473;
  if ((a2 & 1) != 0)
    v3 = 0x646950746E656761;
  else
    v3 = 0x44496D6165727473;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_2449A1E24(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A1E70(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A1EF4 + 4 * byte_2449DB86F[a2]))(0x696D697263736964);
}

uint64_t sub_2449A1EF4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x696D697263736964 && v1 == 0xEC000000746E616ELL)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2449A1FAC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x657461647075;
  else
    v3 = 0x746E656761;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x657461647075;
  else
    v5 = 0x746E656761;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A2044(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000010;
    else
      v3 = 0x6150656C646E7562;
    if (v2 == 1)
      v4 = 0x80000002449E2260;
    else
      v4 = 0xEA00000000006874;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000010;
      else
        v6 = 0x6150656C646E7562;
      if (v5 == 1)
        v7 = 0x80000002449E2260;
      else
        v7 = 0xEA00000000006874;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xEC000000746E616ELL;
    v3 = 0x696D697263736964;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xEC000000746E616ELL;
  if (v3 != 0x696D697263736964)
  {
LABEL_21:
    v8 = sub_2449CFCD0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2449A2164(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aMain_5[8 * a1] == *(_QWORD *)&aMain_5[8 * a2] && qword_2449DE678[a1] == qword_2449DE678[a2])
    v3 = 1;
  else
    v3 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A21E8(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aBundleidpath_1[8 * a1] == *(_QWORD *)&aBundleidpath_1[8 * a2]
    && *(_QWORD *)&aDiscrimi_1[8 * a1 + 8] == *(_QWORD *)&aDiscrimi_1[8 * a2 + 8])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A226C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x42646E4168746170;
  else
    v3 = 0x4449656C646E7562;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEF4449656C646E75;
  if ((a2 & 1) != 0)
    v5 = 0x42646E4168746170;
  else
    v5 = 0x4449656C646E7562;
  if ((a2 & 1) != 0)
    v6 = 0xEF4449656C646E75;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A2318(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656C646E7562;
  else
    v3 = 0xD000000000000012;
  if (v2)
    v4 = 0x80000002449E2520;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656C646E7562;
  else
    v5 = 0xD000000000000012;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0x80000002449E2520;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A23BC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x64616F6C796170;
  else
    v3 = 0x546567617373656DLL;
  if (v2)
    v4 = 0xEB00000000657079;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x64616F6C796170;
  else
    v5 = 0x546567617373656DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEB00000000657079;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_2449A2464(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A24B0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A252C + 4 * byte_2449DB879[a2]))(25705);
}

uint64_t sub_2449A252C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 25705 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2449A25D8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x66457265646E6572;
  else
    v3 = 0xD000000000000014;
  if (v2)
    v4 = 0x80000002449E21E0;
  else
    v4 = 0xED00007374636566;
  if ((a2 & 1) != 0)
    v5 = 0x66457265646E6572;
  else
    v5 = 0xD000000000000014;
  if ((a2 & 1) != 0)
    v6 = 0xED00007374636566;
  else
    v6 = 0x80000002449E21E0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A268C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6567616B6E696CLL;
  else
    v3 = 1752457584;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6567616B6E696CLL;
  else
    v5 = 1752457584;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A2724(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x646E616D6D6F63;
  else
    v3 = 0x696D697263736964;
  if (v2)
    v4 = 0xEC000000746E616ELL;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x646E616D6D6F63;
  else
    v5 = 0x696D697263736964;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEC000000746E616ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_2449A27CC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A2818(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A28C4 + 4 * byte_2449DB884[a2]))(0x546567617373656DLL);
}

uint64_t sub_2449A28C4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x546567617373656DLL && v1 == 0xEB00000000657079)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2449A29BC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A2A08(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A2A84 + 4 * byte_2449DB88E[a2]))(0x656449746E656761);
}

uint64_t sub_2449A2A84(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656449746E656761 && v1 == 0xEF7265696669746ELL)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2449A2B44(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_2449A2B90(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_2449A2BF0 + 4 * byte_2449DB896[a2]))();
}

uint64_t sub_2449A2BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0x80000002449E2A00)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_2449A2C88(uint64_t a1, uint64_t a2)
{
  char v3;

  if (*(_QWORD *)&aKind_1[8 * (char)a1] == *(_QWORD *)&aKind_1[8 * (char)a2] && a1 << 56 == a2 << 56)
    v3 = 1;
  else
    v3 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A2D14(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aDevice_2[8 * a1] == *(_QWORD *)&aDevice_2[8 * a2] && qword_2449DE858[a1] == qword_2449DE858[a2])
    v3 = 1;
  else
    v3 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A2D98(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7461746E6569726FLL;
  else
    v3 = 0x74756F79616CLL;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEB000000006E6F69;
  if ((a2 & 1) != 0)
    v5 = 0x7461746E6569726FLL;
  else
    v5 = 0x74756F79616CLL;
  if ((a2 & 1) != 0)
    v6 = 0xEB000000006E6F69;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A2E3C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E6567416C6C696BLL;
  else
    v3 = 0x636170736B726F77;
  if (v2)
    v4 = 0xEB00000000444965;
  else
    v4 = 0xEA00000000007374;
  if ((a2 & 1) != 0)
    v5 = 0x6E6567416C6C696BLL;
  else
    v5 = 0x636170736B726F77;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000007374;
  else
    v6 = 0xEB00000000444965;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A2EE8(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aDiscrimiscreen_0[8 * a1] == *(_QWORD *)&aDiscrimiscreen_0[8 * a2]
    && *(_QWORD *)&aDiscrimiscreen_0[8 * a1 + 24] == *(_QWORD *)&aDiscrimiscreen_0[8 * a2 + 24])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A2F6C(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aMain_6[8 * a1] == *(_QWORD *)&aMain_6[8 * a2] && qword_2449DE760[a1] == qword_2449DE760[a2])
    v3 = 1;
  else
    v3 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A2FF0(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aDiscrimiorient_0[8 * a1] == *(_QWORD *)&aDiscrimiorient_0[8 * a2]
    && *(_QWORD *)&aNant_4[8 * a1] == *(_QWORD *)&aNant_4[8 * a2])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A3074(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x6D6F74737563;
  else
    v2 = 0x656369766564;
  if ((a2 & 1) != 0)
    v3 = 0x6D6F74737563;
  else
    v3 = 0x656369766564;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_2449A30E8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000013;
  else
    v3 = 0x746163696C707061;
  if (v2)
    v4 = 0xEB000000006E6F69;
  else
    v4 = 0x80000002449E2630;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000013;
  else
    v5 = 0x746163696C707061;
  if ((a2 & 1) != 0)
    v6 = 0x80000002449E2630;
  else
    v6 = 0xEB000000006E6F69;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A3194(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x61636F4C74736F68;
  else
    v3 = 0x696D697263736964;
  if (v2)
    v4 = 0xEC000000746E616ELL;
  else
    v4 = 0xEC0000006E6F6974;
  if ((a2 & 1) != 0)
    v5 = 0x61636F4C74736F68;
  else
    v5 = 0x696D697263736964;
  if ((a2 & 1) != 0)
    v6 = 0xEC0000006E6F6974;
  else
    v6 = 0xEC000000746E616ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A3244(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656449656E656373;
  else
    v3 = 0x696D697263736964;
  if (v2)
    v4 = 0xEC000000746E616ELL;
  else
    v4 = 0xEF7265696669746ELL;
  if ((a2 & 1) != 0)
    v5 = 0x656449656E656373;
  else
    v5 = 0x696D697263736964;
  if ((a2 & 1) != 0)
    v6 = 0xEF7265696669746ELL;
  else
    v6 = 0xEC000000746E616ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A32F8(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aMainscensimdis_1[8 * a1] == *(_QWORD *)&aMainscensimdis_1[8 * a2]
    && *(_QWORD *)&aMainscensimdis_1[8 * a1 + 40] == *(_QWORD *)&aMainscensimdis_1[8 * a2 + 40])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A337C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x646574736F68;
  else
    v2 = 0x636974617473;
  if ((a2 & 1) != 0)
    v3 = 0x646574736F68;
  else
    v3 = 0x636974617473;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2449CFCD0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_2449A33F0(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_2449A343C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2449A34BC + 4 * byte_2449DB89E[a2]))(0x6946656372756F73);
}

uint64_t sub_2449A34BC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6946656372756F73 && v1 == 0xEE0068746150656CLL)
    v2 = 1;
  else
    v2 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_2449A357C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6574616C756D6973;
  else
    v3 = 0x746C7561666564;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE900000000000064;
  if ((a2 & 1) != 0)
    v5 = 0x6574616C756D6973;
  else
    v5 = 0x746C7561666564;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000064;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2449A3620(char a1, char a2)
{
  char v3;

  if (*(_QWORD *)&aUnspecifdevice_0[8 * a1] == *(_QWORD *)&aUnspecifdevice_0[8 * a2]
    && *(_QWORD *)&aRoundedprounde_0[8 * a1 + 16] == *(_QWORD *)&aRoundedprounde_0[8 * a2 + 16])
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_2449CFCD0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_2449A36A4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7974627553757063;
  else
    v3 = 0x65707954757063;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xEA00000000006570;
  if ((a2 & 1) != 0)
    v5 = 0x7974627553757063;
  else
    v5 = 0x65707954757063;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006570;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2449CFCD0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void AgentMessageType.incrementalVariant.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_2449A377C(uint64_t a1)
{
  _BYTE *v1;
  char v2;
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  result = sub_2449CF4E4();
  *v1 = v2;
  return result;
}

void sub_2449A3804()
{
  JUMPOUT(0x2449A37ECLL);
}

void sub_2449A380C()
{
  JUMPOUT(0x2449A37ECLL);
}

void sub_2449A3814()
{
  JUMPOUT(0x2449A37ECLL);
}

void sub_2449A381C()
{
  JUMPOUT(0x2449A37ECLL);
}

uint64_t sub_2449A3824()
{
  sub_2449CFB98();
  sub_2449CF898();
  sub_2449CFBE0();
  sub_2449CF898();
  return 0;
}

uint64_t sub_2449A38C0()
{
  return sub_2449A3824();
}

uint64_t AgentMessageType.isIncremental.getter()
{
  _BYTE *v0;

  return (*v0 > 8u) | *v0 & 1u;
}

PreviewsMessagingOS::AgentMessageType_optional __swiftcall AgentMessageType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  PreviewsMessagingOS::AgentMessageType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2449CFC10();
  result.value = swift_bridgeObjectRelease();
  v5 = 10;
  if (v3 < 0xA)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t AgentMessageType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449A396C + 4 * byte_2449DB8AC[*v0]))(0xD000000000000010, 0x80000002449E2900);
}

uint64_t sub_2449A396C(uint64_t a1)
{
  return a1 + 11;
}

void sub_2449A3A18(char *a1)
{
  sub_2449A15D8(*a1);
}

uint64_t sub_2449A3A24()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2449CFD48();
  sub_24492462C((uint64_t)v3, v1);
  return sub_2449CFD84();
}

void sub_2449A3A68(uint64_t a1)
{
  char *v1;

  sub_24492462C(a1, *v1);
}

uint64_t sub_2449A3A70()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2449CFD48();
  sub_24492462C((uint64_t)v3, v1);
  return sub_2449CFD84();
}

PreviewsMessagingOS::AgentMessageType_optional sub_2449A3AB0(Swift::String *a1)
{
  return AgentMessageType.init(rawValue:)(*a1);
}

uint64_t sub_2449A3ABC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AgentMessageType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2449A3AE0()
{
  sub_2449B536C();
  return sub_2449CF670();
}

uint64_t sub_2449A3B28()
{
  sub_2449B536C();
  return sub_2449CF67C();
}

uint64_t LegacyAgentPayload.dynamicProducts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LegacyAgentPayload.staticProducts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LegacyAgentPayload.updates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LegacyAgentPayload.loggingOutputPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LegacyAgentPayload.providerName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LegacyAgentPayload.previewID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t LegacyAgentPayload.renderEffects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LegacyAgentPayload.init(dynamicProducts:staticProducts:updates:loggingOutputPath:providerName:previewID:renderEffects:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 64) = a10 & 1;
  *(_QWORD *)(a9 + 72) = a11;
  return result;
}

uint64_t sub_2449A3C38(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449A3C70 + 4 * byte_2449DB8B6[a1]))(0xD000000000000011, 0x80000002449E1F40);
}

uint64_t sub_2449A3C70()
{
  return 0x73746375646F7270;
}

uint64_t sub_2449A3C88()
{
  return 0x7250636974617473;
}

uint64_t sub_2449A3CAC()
{
  return 0x73657461647075;
}

uint64_t sub_2449A3CC4()
{
  return 0x72656469766F7270;
}

uint64_t sub_2449A3CE4()
{
  return 25705;
}

uint64_t sub_2449A3CF0()
{
  return 0x66457265646E6572;
}

void sub_2449A3D14(char *a1)
{
  sub_2449A0778(*a1);
}

void sub_2449A3D20()
{
  char *v0;

  sub_2449CA600(0, *v0);
}

void sub_2449A3D2C(uint64_t a1)
{
  char *v1;

  sub_244923F2C(a1, *v1);
}

void sub_2449A3D34(uint64_t a1)
{
  char *v1;

  sub_2449CA600(a1, *v1);
}

uint64_t sub_2449A3D3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449B4EEC();
  *a1 = result;
  return result;
}

uint64_t sub_2449A3D70@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A3C38(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A3D98()
{
  unsigned __int8 *v0;

  return sub_2449A3C38(*v0);
}

uint64_t LegacyAgentPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A3DE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE v10[24];
  uint64_t v11;
  char v12;
  _BYTE v13[16];
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[8];
  _BYTE v18[16];

  sub_2449314A4((uint64_t)a1, (uint64_t)v18, &qword_2573A2518);
  sub_2449314A4((uint64_t)(a1 + 1), (uint64_t)v17, &qword_2573A2520);
  v2 = a1[2];
  sub_2449314A4((uint64_t)(a1 + 3), (uint64_t)v16, &qword_25739F178);
  v3 = a1[5];
  v4 = a1[6];
  sub_2449314A4((uint64_t)(a1 + 7), (uint64_t)v15, &qword_2573A2528);
  v14[15] = 0;
  sub_2449314A4((uint64_t)v18, (uint64_t)v14, &qword_2573A2518);
  v13[15] = 1;
  sub_2449314A4((uint64_t)v17, (uint64_t)v13, &qword_2573A2520);
  v12 = 2;
  v11 = v2;
  v10[23] = 3;
  sub_2449314A4((uint64_t)v16, (uint64_t)v10, &qword_25739F178);
  v9 = 4;
  v7 = v3;
  v8 = v4;
  v6[15] = 5;
  sub_2449314A4((uint64_t)v15, (uint64_t)v6, &qword_2573A2528);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAD8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0730);
  sub_2449A44F8();
  sub_244931570(&qword_25739FB20, &qword_25739FB18, (uint64_t (*)(void))sub_244943068);
  sub_244931570(&qword_25739FAE0, &qword_25739FAD8, (uint64_t (*)(void))sub_244942560);
  sub_244931570(&qword_25739FB38, &qword_25739FB30, (uint64_t (*)(void))sub_2449430AC);
  sub_244931570((unint64_t *)&qword_2573A0738, &qword_2573A0730, (uint64_t (*)(void))sub_24496DA50);
  return sub_2449CF5C8();
}

uint64_t sub_2449A4080()
{
  uint64_t v0;

  return sub_2449A3DE8(*(_QWORD **)(v0 + 16));
}

uint64_t LegacyAgentPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v23;

  v21 = &type metadata for LegacyAgentPayload.Key;
  v5 = sub_2449A44F8();
  v22 = v5;
  v20[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB18);
  sub_244931570(&qword_25739FB20, &qword_25739FB18, (uint64_t (*)(void))sub_244943068);
  sub_2449CF3B8();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v7 = v23;
    v21 = &type metadata for LegacyAgentPayload.Key;
    v22 = v5;
    v20[0] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAD8);
    sub_244931570(&qword_25739FAE0, &qword_25739FAD8, (uint64_t (*)(void))sub_244942560);
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v21 = &type metadata for LegacyAgentPayload.Key;
    v22 = v5;
    v20[0] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FB30);
    sub_244931570(&qword_25739FB38, &qword_25739FB30, (uint64_t (*)(void))sub_2449430AC);
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v21 = &type metadata for LegacyAgentPayload.Key;
    v22 = v5;
    v20[0] = 3;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v21 = &type metadata for LegacyAgentPayload.Key;
    v22 = v5;
    v20[0] = 4;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v21 = &type metadata for LegacyAgentPayload.Key;
    v22 = v5;
    v20[0] = 5;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v21 = &type metadata for LegacyAgentPayload.Key;
    v22 = v5;
    v20[0] = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A0730);
    sub_244931570((unint64_t *)&qword_2573A0738, &qword_2573A0730, (uint64_t (*)(void))sub_24496DA50);
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    if (v11)
      v9 = v11;
    else
      v9 = MEMORY[0x24BEE4AF8];
    v10 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 16) = v18;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 32) = v17;
    *(_QWORD *)(a2 + 40) = v14;
    *(_QWORD *)(a2 + 48) = v15;
    *(_QWORD *)(a2 + 56) = v12;
    *(_BYTE *)(a2 + 64) = v13;
    *(_QWORD *)(a2 + 72) = v9;
  }
  return result;
}

unint64_t sub_2449A44F8()
{
  unint64_t result;

  result = qword_2573A1E60;
  if (!qword_2573A1E60)
  {
    result = MEMORY[0x24951C158](&unk_2449DE248, &type metadata for LegacyAgentPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E60);
  }
  return result;
}

uint64_t sub_2449A453C()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A4584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LegacyAgentPayload.init(propertyListValue:)(a1, a2);
}

uint64_t TimelinePayload.timelineData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_244964F34(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t TimelinePayload.init(timelineData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_2449A45DC@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_2449A45E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2449B073C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t TimelinePayload.propertyListValue.getter()
{
  sub_2449A4674();
  return sub_2449CF3E8();
}

unint64_t sub_2449A4674()
{
  unint64_t result;

  result = qword_2573A1E68;
  if (!qword_2573A1E68)
  {
    result = MEMORY[0x24951C158](&unk_2449DE220, &type metadata for TimelinePayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E68);
  }
  return result;
}

double TimelinePayload.init(propertyListValue:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  __int128 v10;

  v8 = &type metadata for TimelinePayload.Key;
  v9 = sub_2449A4674();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
  {
    result = *(double *)&v10;
    *a2 = v10;
  }
  return result;
}

uint64_t sub_2449A477C()
{
  sub_2449A4674();
  return sub_2449CF3E8();
}

double sub_2449A47DC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  double result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  __int128 v10;

  v8 = &type metadata for TimelinePayload.Key;
  v9 = sub_2449A4674();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
  {
    result = *(double *)&v10;
    *a2 = v10;
  }
  return result;
}

uint64_t GeometryPayload.selectableRegions.getter()
{
  return swift_bridgeObjectRetain();
}

PreviewsMessagingOS::GeometryPayload __swiftcall GeometryPayload.init(selectableRegions:)(PreviewsMessagingOS::GeometryPayload selectableRegions)
{
  PreviewsMessagingOS::GeometryPayload *v1;

  v1->selectableRegions._rawValue = selectableRegions.selectableRegions._rawValue;
  return selectableRegions;
}

uint64_t sub_2449A48B0()
{
  sub_2449CFD48();
  sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t sub_2449A4904()
{
  return sub_2449CF88C();
}

uint64_t sub_2449A4920()
{
  sub_2449CFD48();
  sub_2449CF88C();
  return sub_2449CFD84();
}

uint64_t sub_2449A4970@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

void sub_2449A497C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000002449E2A00;
}

unint64_t sub_2449A499C()
{
  return 0xD000000000000011;
}

uint64_t GeometryPayload.propertyListValue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1E70);
  sub_2449A4A48();
  sub_244931570(&qword_2573A1E80, &qword_2573A1E70, (uint64_t (*)(void))sub_2449A4A8C);
  return sub_2449CF3E8();
}

unint64_t sub_2449A4A48()
{
  unint64_t result;

  result = qword_2573A1E78;
  if (!qword_2573A1E78)
  {
    result = MEMORY[0x24951C158](&unk_2449DE1F8, &type metadata for GeometryPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E78);
  }
  return result;
}

unint64_t sub_2449A4A8C()
{
  unint64_t result;

  result = qword_2573A1E88;
  if (!qword_2573A1E88)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for SelectableRegion, &type metadata for SelectableRegion);
    atomic_store(result, (unint64_t *)&qword_2573A1E88);
  }
  return result;
}

uint64_t GeometryPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;

  v8 = &type metadata for GeometryPayload.Key;
  v9 = sub_2449A4A48();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1E70);
  sub_244931570(&qword_2573A1E80, &qword_2573A1E70, (uint64_t (*)(void))sub_2449A4A8C);
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
    *a2 = v10;
  return result;
}

uint64_t sub_2449A4BC0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1E70);
  sub_2449A4A48();
  sub_244931570(&qword_2573A1E80, &qword_2573A1E70, (uint64_t (*)(void))sub_2449A4A8C);
  return sub_2449CF3E8();
}

uint64_t sub_2449A4C50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;

  v8 = &type metadata for GeometryPayload.Key;
  v9 = sub_2449A4A48();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1E70);
  sub_244931570(&qword_2573A1E80, &qword_2573A1E70, (uint64_t (*)(void))sub_2449A4A8C);
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
    *a2 = v10;
  return result;
}

void SceneLayout.interfaceOrientation.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  if ((v1[16] & 1) != 0)
    *a1 = 0;
  else
    *a1 = *v1;
}

uint64_t sub_2449A4D5C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6D6F74737563;
  else
    return 0x656369766564;
}

uint64_t sub_2449A4D84(char *a1, char *a2)
{
  return sub_2449A3074(*a1, *a2);
}

uint64_t sub_2449A4D90()
{
  return sub_2449C7598();
}

uint64_t sub_2449A4D98()
{
  return sub_24492532C();
}

uint64_t sub_2449A4DA0()
{
  return sub_2449C8F2C();
}

uint64_t sub_2449A4DA8@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_2449A4DB4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A4D5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A4DDC()
{
  sub_2449B4DD8();
  return sub_2449CF670();
}

uint64_t sub_2449A4E24()
{
  sub_2449B4DD8();
  return sub_2449CF67C();
}

uint64_t sub_2449A4E88(char a1)
{
  return *(_QWORD *)&aDiscrimiorient_0[8 * a1];
}

uint64_t sub_2449A4EA8(char *a1, char *a2)
{
  return sub_2449A2FF0(*a1, *a2);
}

uint64_t sub_2449A4EB4()
{
  return sub_2449C7604();
}

uint64_t sub_2449A4EBC()
{
  return sub_2449252EC();
}

uint64_t sub_2449A4EC4()
{
  return sub_2449C8F94();
}

uint64_t sub_2449A4ECC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_2449A4F00@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A4E88(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A4F28()
{
  char *v0;

  return sub_2449A4E88(*v0);
}

uint64_t SceneLayout.propertyListValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  char v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_BYTE *)v0 + 16);
  v4 = sub_2449A5018();
  sub_2449A505C();
  sub_2449CF3E8();
  if ((v3 & 1) != 0)
  {
    v9 = v1;
    v10 = v2;
    v11 = 0;
    v7 = &type metadata for SceneLayout.Key;
    v8 = v4;
    v6[0] = 2;
    type metadata accessor for CGSize(0);
  }
  else
  {
    LOBYTE(v9) = v1;
    v7 = &type metadata for SceneLayout.Key;
    v8 = v4;
    v6[0] = 1;
    sub_2449729C4();
  }
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

unint64_t sub_2449A5018()
{
  unint64_t result;

  result = qword_2573A1E90;
  if (!qword_2573A1E90)
  {
    result = MEMORY[0x24951C158](&unk_2449DE1D0, &type metadata for SceneLayout.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1E90);
  }
  return result;
}

unint64_t sub_2449A505C()
{
  unint64_t result;

  result = qword_2573A1E98;
  if (!qword_2573A1E98)
  {
    result = MEMORY[0x24951C158](&unk_2449DE190, &type metadata for SceneLayout.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1E98);
  }
  return result;
}

uint64_t SceneLayout.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;

  v13 = &type metadata for SceneLayout.Key;
  v5 = sub_2449A5018();
  v14 = v5;
  v12[0] = 0;
  sub_2449A505C();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    v13 = &type metadata for SceneLayout.Key;
    v14 = v5;
    if ((v11 & 1) != 0)
    {
      v12[0] = 2;
      type metadata accessor for CGSize(0);
      sub_2449CF37C();
      v8 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v9 = v11;
    }
    else
    {
      v12[0] = 1;
      sub_2449729C4();
      sub_2449CF37C();
      v10 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v9 = v11;
    }
    *(_OWORD *)a2 = v9;
    *(_BYTE *)(a2 + 16) = v11;
  }
  return result;
}

void static SceneLayout.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  if ((a1[2] & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
    sub_24499EC84(v3);
}

void sub_2449A5280(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  if ((a1[2] & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
    sub_24499EC84(v3);
}

uint64_t sub_2449A52D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SceneLayout.init(propertyListValue:)(a1, a2);
}

uint64_t static UInt32.mainScreen.getter()
{
  return 1;
}

uint64_t sub_2449A52F4(char a1)
{
  return *(_QWORD *)&aMain_6[8 * a1];
}

uint64_t sub_2449A5314(char *a1, char *a2)
{
  return sub_2449A2F6C(*a1, *a2);
}

uint64_t sub_2449A5320()
{
  return sub_2449C766C();
}

uint64_t sub_2449A5328()
{
  return sub_2449252AC();
}

uint64_t sub_2449A5330()
{
  return sub_2449C8FF8();
}

uint64_t sub_2449A5338@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449728F4();
  *a1 = result;
  return result;
}

uint64_t sub_2449A536C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A52F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A5394()
{
  sub_2449B4E1C();
  return sub_2449CF670();
}

uint64_t sub_2449A53DC()
{
  sub_2449B4E1C();
  return sub_2449CF67C();
}

uint64_t sub_2449A5440(char a1)
{
  return *(_QWORD *)&aDiscrimiscreen_0[8 * a1];
}

uint64_t sub_2449A5460(char *a1, char *a2)
{
  return sub_2449A2EE8(*a1, *a2);
}

uint64_t sub_2449A546C()
{
  return sub_2449C76D4();
}

uint64_t sub_2449A5474()
{
  return sub_24492526C();
}

uint64_t sub_2449A547C()
{
  return sub_2449C905C();
}

uint64_t sub_2449A5484@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_2449A54B8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A5440(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A54E0()
{
  char *v0;

  return sub_2449A5440(*v0);
}

uint64_t HostIdentity.propertyListValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;
  char v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  v4 = sub_2449A561C();
  sub_2449A5660();
  result = sub_2449CF3E8();
  if (v3)
  {
    if (v3 != 1)
      return result;
    v9 = v1;
    v10 = v2;
    v7 = &type metadata for HostIdentity.Key;
    v8 = v4;
    v6[0] = 2;
  }
  else
  {
    LODWORD(v9) = v1;
    BYTE4(v9) = 0;
    v7 = &type metadata for HostIdentity.Key;
    v8 = v4;
    v6[0] = 1;
  }
  sub_2449CF370();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

_BYTE *sub_2449A55D4(_BYTE *result, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(unsigned __int8 *)(v2 + 32);
  *result = 0;
  if (v5)
  {
    if (v5 == 1)
    {
      *a2 = 2;
    }
    else
    {
      if (v3 | v4)
        v6 = 3;
      else
        v6 = 0;
      *a2 = v6;
    }
  }
  else
  {
    *a2 = 1;
  }
  return result;
}

unint64_t sub_2449A561C()
{
  unint64_t result;

  result = qword_2573A1EA0;
  if (!qword_2573A1EA0)
  {
    result = MEMORY[0x24951C158](&unk_2449DE168, &type metadata for HostIdentity.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1EA0);
  }
  return result;
}

unint64_t sub_2449A5660()
{
  unint64_t result;

  result = qword_2573A1EA8;
  if (!qword_2573A1EA8)
  {
    result = MEMORY[0x24951C158](&unk_2449DE128, &type metadata for HostIdentity.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1EA8);
  }
  return result;
}

uint64_t HostIdentity.init(propertyListValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v7 = &type metadata for HostIdentity.Key;
  v8 = sub_2449A561C();
  v6[0] = 0;
  sub_2449A5660();
  sub_2449CF37C();
  if (!v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    __asm { BR              X10 }
  }
  v3 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t sub_2449A58A0(uint64_t a1)
{
  return HostIdentity.init(propertyListValue:)(a1);
}

PreviewsMessagingOS::ChromeType_optional __swiftcall ChromeType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  PreviewsMessagingOS::ChromeType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2449CFC10();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t ChromeType.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aUnspecifdevice_0[8 * *v0];
}

uint64_t sub_2449A5930(char *a1, char *a2)
{
  return sub_2449A3620(*a1, *a2);
}

uint64_t sub_2449A593C()
{
  return sub_2449C773C();
}

uint64_t sub_2449A5944()
{
  return sub_244925634();
}

uint64_t sub_2449A594C()
{
  return sub_2449C8AFC();
}

PreviewsMessagingOS::ChromeType_optional sub_2449A5954(Swift::String *a1)
{
  return ChromeType.init(rawValue:)(*a1);
}

uint64_t sub_2449A5960@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ChromeType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2449A5984()
{
  sub_2449B5318();
  return sub_2449CF670();
}

uint64_t sub_2449A59CC()
{
  sub_2449B5318();
  return sub_2449CF67C();
}

uint64_t GridIndex.section.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t GridIndex.section.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GridIndex.section.modify())()
{
  return nullsub_1;
}

uint64_t GridIndex.item.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t GridIndex.item.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*GridIndex.item.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::GridIndex __swiftcall GridIndex.init(section:item:)(Swift::Int section, Swift::Int item)
{
  Swift::Int *v2;
  PreviewsMessagingOS::GridIndex result;

  *v2 = section;
  v2[1] = item;
  result.item = item;
  result.section = section;
  return result;
}

uint64_t sub_2449A5A78(char a1)
{
  if ((a1 & 1) != 0)
    return 1835365481;
  else
    return 0x6E6F6974636573;
}

uint64_t sub_2449A5AA8(char *a1, char *a2)
{
  return sub_24499DE4C(*a1, *a2);
}

uint64_t sub_2449A5AB4()
{
  return sub_2449C77A4();
}

uint64_t sub_2449A5ABC()
{
  return sub_244922A8C();
}

uint64_t sub_2449A5AC4()
{
  return sub_2449CC2F8();
}

uint64_t sub_2449A5ACC@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_2449A5AD8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A5A78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A5B00()
{
  char *v0;

  return sub_2449A5A78(*v0);
}

uint64_t GridIndex.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A5B38()
{
  sub_2449A5CCC();
  return sub_2449CF604();
}

uint64_t sub_2449A5BAC()
{
  return sub_2449A5B38();
}

uint64_t GridIndex.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[24];
  ValueMetadata *v12;
  unint64_t v13;
  uint64_t v14;

  v12 = &type metadata for GridIndex.Key;
  v5 = sub_2449A5CCC();
  v13 = v5;
  v11[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    v6 = v14;
    v12 = &type metadata for GridIndex.Key;
    v13 = v5;
    v11[0] = 1;
    sub_2449CF37C();
    v8 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    v10 = v14;
    *a2 = v6;
    a2[1] = v10;
  }
  return result;
}

unint64_t sub_2449A5CCC()
{
  unint64_t result;

  result = qword_2573A1EB0;
  if (!qword_2573A1EB0)
  {
    result = MEMORY[0x24951C158](&unk_2449DE100, &type metadata for GridIndex.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1EB0);
  }
  return result;
}

BOOL static GridIndex.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_2449A5D28()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A5D58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return GridIndex.init(propertyListValue:)(a1, a2);
}

BOOL sub_2449A5D6C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void StaticPreviewReply.chromeType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t StaticPreviewReply.contentPayload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StaticPreviewReply(0) + 20);
  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for StaticPreviewReply(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A20C8);
}

uint64_t StaticPreviewReply.controlDescriptions.getter()
{
  type metadata accessor for StaticPreviewReply(0);
  return swift_bridgeObjectRetain();
}

uint64_t StaticPreviewReply.controlStates.getter()
{
  return sub_2449A685C((void (*)(_QWORD))type metadata accessor for StaticPreviewReply);
}

uint64_t StaticPreviewReply.init(chromeType:controlDescriptions:controlStates:contentPayload:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  int *v9;
  _BYTE *v10;
  uint64_t v11;

  *a5 = *a1;
  v9 = (int *)type metadata accessor for StaticPreviewReply(0);
  *(_QWORD *)&a5[v9[6]] = a2;
  *(_QWORD *)&a5[v9[7]] = a3;
  v10 = &a5[v9[5]];
  v11 = sub_2449CF400();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a4, v11);
}

uint64_t sub_2449A5E8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449A5EC4 + 4 * byte_2449DB8C1[a1]))(0xD000000000000013, 0x80000002449E2AA0);
}

uint64_t sub_2449A5EC4()
{
  return 0x7954656D6F726863;
}

uint64_t sub_2449A5EE0()
{
  return 0x536C6F72746E6F63;
}

uint64_t sub_2449A5F04()
{
  return 0x50746E65746E6F63;
}

void sub_2449A5F28(char *a1)
{
  sub_2449A0258(*a1);
}

void sub_2449A5F34()
{
  char *v0;

  sub_2449C781C(*v0);
}

void sub_2449A5F3C(uint64_t a1)
{
  char *v1;

  sub_244923BF0(a1, *v1);
}

void sub_2449A5F44(uint64_t a1)
{
  char *v1;

  sub_2449CA980(a1, *v1);
}

uint64_t sub_2449A5F4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449728F4();
  *a1 = result;
  return result;
}

uint64_t sub_2449A5F80@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A5E8C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A5FA8()
{
  unsigned __int8 *v0;

  return sub_2449A5E8C(*v0);
}

uint64_t StaticPreviewReply.propertyListValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE v6[16];
  uint64_t v7;

  v1 = sub_2449CF400();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v0;
  sub_2449CF3D0();
  type metadata accessor for StaticPreviewReply(0);
  sub_2449CF394();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_2449A6060(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A2510);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v25 - v8;
  v10 = *a1;
  v11 = (int *)type metadata accessor for StaticPreviewReply(0);
  v12 = v11[5];
  v13 = *(_QWORD *)&a1[v11[6]];
  v14 = *(_QWORD *)&a1[v11[7]];
  v15 = *(int *)(v4 + 48);
  v27 = v9;
  v16 = &v9[v15];
  *v9 = 3;
  v17 = &a1[v12];
  v18 = sub_2449CF400();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v20(v16, v17, v18);
  v34 = 0;
  v33 = v10;
  v32 = 1;
  v31 = v13;
  v30 = 2;
  v29 = v14;
  v21 = &v7[*(int *)(v4 + 48)];
  *v7 = 3;
  v20(v21, v16, v18);
  v22 = (uint64_t)v26;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v26, v21, v18);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
  v28 = 3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1EC8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAF0);
  sub_2449A6574();
  sub_2449A65B8();
  sub_2449A65FC();
  sub_2449A6678();
  v23 = sub_2449CF5EC();
  sub_244940E8C(v22, &qword_25739F710);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_244940E8C((uint64_t)v27, &qword_2573A2510);
  return v23;
}

uint64_t sub_2449A62EC()
{
  uint64_t v0;

  return sub_2449A6060(*(char **)(v0 + 16));
}

uint64_t StaticPreviewReply.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int *v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  _BYTE v20[24];
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t v23;

  v5 = sub_2449CF400();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = &type metadata for StaticPreviewReply.Key;
  v9 = sub_2449A6574();
  v22 = v9;
  v20[0] = 0;
  sub_2449A65B8();
  sub_2449CF3B8();
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    if (v23 == 5)
      v10 = 0;
    else
      v10 = v23;
    v21 = &type metadata for StaticPreviewReply.Key;
    v22 = v9;
    v20[0] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1EC8);
    sub_2449A65FC();
    sub_2449CF3B8();
    v18 = v10;
    v19 = a2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v12 = MEMORY[0x24BEE4AF8];
    if (v23)
      v13 = v23;
    else
      v13 = MEMORY[0x24BEE4AF8];
    v21 = &type metadata for StaticPreviewReply.Key;
    v22 = v9;
    v20[0] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAF0);
    sub_2449A6678();
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    if (v23)
      v14 = v23;
    else
      v14 = v12;
    v21 = &type metadata for StaticPreviewReply.Key;
    v22 = v9;
    v20[0] = 3;
    sub_2449CF37C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v15 = v19;
    *v19 = v18;
    v16 = (int *)type metadata accessor for StaticPreviewReply(0);
    *(_QWORD *)&v15[v16[6]] = v13;
    *(_QWORD *)&v15[v16[7]] = v14;
    return (*(uint64_t (**)(_BYTE *, char *, uint64_t))(v6 + 32))(&v15[v16[5]], v8, v5);
  }
}

unint64_t sub_2449A6574()
{
  unint64_t result;

  result = qword_2573A1EB8;
  if (!qword_2573A1EB8)
  {
    result = MEMORY[0x24951C158](&unk_2449DE0D8, &type metadata for StaticPreviewReply.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1EB8);
  }
  return result;
}

unint64_t sub_2449A65B8()
{
  unint64_t result;

  result = qword_2573A1EC0;
  if (!qword_2573A1EC0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for ChromeType, &type metadata for ChromeType);
    atomic_store(result, (unint64_t *)&qword_2573A1EC0);
  }
  return result;
}

unint64_t sub_2449A65FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2573A1ED0;
  if (!qword_2573A1ED0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2573A1EC8);
    v2 = sub_24493DED4(&qword_2573A1ED8, type metadata accessor for CanvasControlDescription, (uint64_t)&protocol conformance descriptor for CanvasControlDescription);
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2573A1ED0);
  }
  return result;
}

unint64_t sub_2449A6678()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25739FAF8;
  if (!qword_25739FAF8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25739FAF0);
    v2 = sub_24493DED4((unint64_t *)&qword_25739F6D8, type metadata accessor for PlistValueBox, (uint64_t)&protocol conformance descriptor for PlistValueBox);
    result = MEMORY[0x24951C158](MEMORY[0x24BE76D10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25739FAF8);
  }
  return result;
}

uint64_t sub_2449A66F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE v6[16];
  uint64_t v7;

  v1 = sub_2449CF400();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v0;
  sub_2449CF3D0();
  sub_2449CF394();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_2449A67A0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return StaticPreviewReply.init(propertyListValue:)(a1, a2);
}

uint64_t HostedPreviewReply.hostIdentity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_2449A67C8(v2, v3, v4);
}

uint64_t sub_2449A67C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRetain();
  return result;
}

__n128 HostedPreviewReply.sceneLayout.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 40);
  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t HostedPreviewReply.contentPayload.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HostedPreviewReply(0) + 24);
  v4 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for HostedPreviewReply(uint64_t a1)
{
  return sub_24492813C(a1, qword_2573A2160);
}

uint64_t HostedPreviewReply.controlDescriptions.getter()
{
  return sub_2449A685C((void (*)(_QWORD))type metadata accessor for HostedPreviewReply);
}

uint64_t sub_2449A685C(void (*a1)(_QWORD))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t HostedPreviewReply.controlStates.getter()
{
  type metadata accessor for HostedPreviewReply(0);
  return swift_bridgeObjectRetain();
}

unint64_t HostedPreviewReply.screenID.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (*(_BYTE *)(v0 + 16))
  {
    if (v1 != 1 && *(_OWORD *)v0 == 0)
    {
      LOBYTE(v1) = 0;
      v2 = 1;
    }
    else
    {
      v2 = 0;
      LOBYTE(v1) = 1;
    }
  }
  else
  {
    v2 = *(_QWORD *)v0;
  }
  return v2 | ((unint64_t)v1 << 32);
}

uint64_t HostedPreviewReply.init(hostIdentity:sceneLayout:controlDescriptions:controlStates:contentPayload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10;
  char v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;

  v10 = *(_BYTE *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(_BYTE *)(a6 + 16) = v10;
  *(_OWORD *)(a6 + 24) = *(_OWORD *)a2;
  *(_BYTE *)(a6 + 40) = v11;
  v12 = (int *)type metadata accessor for HostedPreviewReply(0);
  *(_QWORD *)(a6 + v12[7]) = a3;
  *(_QWORD *)(a6 + v12[8]) = a4;
  v13 = a6 + v12[6];
  v14 = sub_2449CF400();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a5, v14);
}

uint64_t sub_2449A6980(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449A69B8 + 4 * byte_2449DB8C5[a1]))(0xD000000000000013, 0x80000002449E2AA0);
}

uint64_t sub_2449A69B8()
{
  return 0x6E65644974736F68;
}

uint64_t sub_2449A69D8()
{
  return 0x79614C656E656373;
}

uint64_t sub_2449A69F8()
{
  return 0x536C6F72746E6F63;
}

uint64_t sub_2449A6A1C()
{
  return 0x50746E65746E6F63;
}

uint64_t sub_2449A6A40()
{
  return 0x44496E6565726373;
}

void sub_2449A6A58(char *a1)
{
  sub_2449A0998(*a1);
}

void sub_2449A6A64()
{
  char *v0;

  sub_2449C78FC(*v0);
}

void sub_2449A6A6C(uint64_t a1)
{
  char *v1;

  sub_244924028(a1, *v1);
}

void sub_2449A6A74(uint64_t a1)
{
  char *v1;

  sub_2449CA4E8(a1, *v1);
}

uint64_t sub_2449A6A7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449B4EA4();
  *a1 = result;
  return result;
}

uint64_t sub_2449A6AA8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A6980(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A6AD0()
{
  unsigned __int8 *v0;

  return sub_2449A6980(*v0);
}

uint64_t HostedPreviewReply.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A6B04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[4];
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v2);
  v34 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2573A2508);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v26[-v8];
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(unsigned __int8 *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v29 = *(_QWORD *)(a1 + 32);
  v30 = v13;
  v28 = *(unsigned __int8 *)(a1 + 40);
  v14 = (int *)type metadata accessor for HostedPreviewReply(0);
  v15 = v14[6];
  v16 = *(_QWORD *)(a1 + v14[8]);
  v31 = *(_QWORD *)(a1 + v14[7]);
  v32 = v16;
  v17 = &v9[*(int *)(v4 + 48)];
  v33 = v9;
  *v9 = 4;
  v18 = a1 + v15;
  v19 = sub_2449CF400();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v20 + 16);
  v21(v17, v18, v19);
  if (v12)
  {
    if (v12 == 1 || v10 | v11)
    {
      sub_2449A67C8(v10, v11, v12);
      v27 = 0x100000000;
    }
    else
    {
      v27 = 1;
    }
  }
  else
  {
    v27 = v10;
  }
  v50 = 0;
  v47 = v10;
  v48 = v11;
  v49 = v12;
  v46 = 1;
  v43 = v30;
  v44 = v29;
  v45 = v28;
  v42 = 2;
  v41 = v31;
  v40 = 3;
  v39 = v32;
  v22 = &v7[*(int *)(v4 + 48)];
  *v7 = 4;
  v21(v22, (uint64_t)v17, v19);
  v23 = (uint64_t)v34;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v34, v22, v19);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
  v38 = 4;
  v37 = 5;
  v35 = v27;
  v36 = BYTE4(v27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1EC8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAF0);
  sub_2449A7288();
  sub_2449A72CC();
  sub_2449A7310();
  sub_2449A65FC();
  sub_2449A6678();
  v24 = sub_2449CF5D4();
  sub_244940E8C(v23, &qword_25739F710);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2449B53B0(v47, v48, v49);
  sub_244940E8C((uint64_t)v33, &qword_2573A2508);
  return v24;
}

uint64_t sub_2449A6E78()
{
  uint64_t v0;

  return sub_2449A6B04(*(_QWORD *)(v0 + 16));
}

uint64_t HostedPreviewReply.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE v31[24];
  ValueMetadata *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2449CF400();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = &type metadata for HostedPreviewReply.Key;
  v12 = sub_2449A7288();
  v33 = v12;
  v31[0] = 0;
  sub_2449A72CC();
  sub_2449CF37C();
  v27 = a2;
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    v32 = &type metadata for HostedPreviewReply.Key;
    v33 = v12;
    v31[0] = 5;
    sub_2449CF3B8();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    v29 = 0;
    if (BYTE4(v34) == 1)
    {
      v30 = 2;
      v13 = 1;
    }
    else
    {
      v30 = 0;
      v13 = v34;
    }
    v28 = v13;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    v28 = v34;
    v29 = v35;
    v30 = v36;
  }
  v32 = &type metadata for HostedPreviewReply.Key;
  v33 = v12;
  v31[0] = 1;
  sub_2449A7310();
  sub_2449CF3B8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  v25 = v35;
  v26 = v34;
  v24 = v36;
  v32 = &type metadata for HostedPreviewReply.Key;
  v33 = v12;
  v31[0] = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1EC8);
  sub_2449A65FC();
  sub_2449CF3B8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  v14 = v37;
  if (!v37)
    v14 = MEMORY[0x24BEE4AF8];
  v23 = v14;
  v32 = &type metadata for HostedPreviewReply.Key;
  v33 = v12;
  v31[0] = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25739FAF0);
  sub_2449A6678();
  sub_2449CF3B8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  if (v37)
    v15 = v37;
  else
    v15 = MEMORY[0x24BEE4AF8];
  v32 = &type metadata for HostedPreviewReply.Key;
  v33 = v12;
  v31[0] = 4;
  sub_2449CF3B8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  v18 = v25;
  v17 = v26;
  if (v16 == 1)
  {
    _s19PreviewsMessagingOS24CanvasControlDescriptionV9ModifiersV17propertyListValue0a10FoundationC008PropertyI0Vvg_0();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    sub_244940E8C((uint64_t)v7, &qword_25739F710);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  v19 = v27;
  v20 = v29;
  *v27 = v28;
  v19[1] = v20;
  *((_BYTE *)v19 + 16) = v30;
  v19[3] = v17;
  v19[4] = v18;
  *((_BYTE *)v19 + 40) = v24;
  v21 = (int *)type metadata accessor for HostedPreviewReply(0);
  *(uint64_t *)((char *)v19 + v21[7]) = v23;
  *(uint64_t *)((char *)v19 + v21[8]) = v15;
  return (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))((char *)v19 + v21[6], v11, v8);
}

unint64_t sub_2449A7288()
{
  unint64_t result;

  result = qword_2573A1EE0;
  if (!qword_2573A1EE0)
  {
    result = MEMORY[0x24951C158](&unk_2449DE0B0, &type metadata for HostedPreviewReply.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1EE0);
  }
  return result;
}

unint64_t sub_2449A72CC()
{
  unint64_t result;

  result = qword_2573A1EE8;
  if (!qword_2573A1EE8)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for HostIdentity, &type metadata for HostIdentity);
    atomic_store(result, (unint64_t *)&qword_2573A1EE8);
  }
  return result;
}

unint64_t sub_2449A7310()
{
  unint64_t result;

  result = qword_2573A1EF0;
  if (!qword_2573A1EF0)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for SceneLayout, &type metadata for SceneLayout);
    atomic_store(result, (unint64_t *)&qword_2573A1EF0);
  }
  return result;
}

uint64_t sub_2449A7354(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2449A736C()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A7398@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return HostedPreviewReply.init(propertyListValue:)(a1, a2);
}

uint64_t RenderPayload.bitmapDescription.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v6 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_DWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  sub_244964F34(v2, v6);
  return swift_bridgeObjectRetain();
}

uint64_t RenderPayload.selectableRegions.getter()
{
  return swift_bridgeObjectRetain();
}

double RenderPayload.snapshotCornerRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

double RenderPayload.scaleFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

uint64_t RenderPayload.init(bitmapDescription:selectableRegions:snapshotCornerRadius:scaleFactor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v5 = *(_QWORD *)(result + 32);
  v6 = *(_DWORD *)(result + 40);
  v7 = *(_QWORD *)(result + 64);
  v8 = *(_QWORD *)(result + 72);
  v9 = *(_OWORD *)(result + 16);
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(_OWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 32) = v5;
  *(_DWORD *)(a3 + 40) = v6;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(result + 48);
  *(_QWORD *)(a3 + 64) = v7;
  *(_QWORD *)(a3 + 72) = v8;
  *(_QWORD *)(a3 + 80) = a2;
  *(double *)(a3 + 88) = a4;
  *(double *)(a3 + 96) = a5;
  return result;
}

uint64_t sub_2449A744C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449A7484 + 4 * byte_2449DB8CB[a1]))(0xD000000000000011, 0x80000002449E2AD0);
}

uint64_t sub_2449A74A8()
{
  return 0x636146656C616373;
}

void sub_2449A74C8(char *a1)
{
  sub_2449A2B44(*a1);
}

void sub_2449A74D4()
{
  char *v0;

  sub_2449C7A18(*v0);
}

void sub_2449A74DC(uint64_t a1)
{
  char *v1;

  sub_244925090(a1, *v1);
}

void sub_2449A74E4(uint64_t a1)
{
  char *v1;

  sub_2449C9354(a1, *v1);
}

uint64_t sub_2449A74EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449728F4();
  *a1 = result;
  return result;
}

uint64_t sub_2449A7520@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A744C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A7548()
{
  unsigned __int8 *v0;

  return sub_2449A744C(*v0);
}

uint64_t RenderPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A75A0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1E70);
  sub_2449A79A8();
  sub_2449A79EC();
  sub_244931570(&qword_2573A1E80, &qword_2573A1E70, (uint64_t (*)(void))sub_2449A4A8C);
  return sub_2449CF5EC();
}

uint64_t sub_2449A76DC()
{
  return sub_2449A75A0();
}

uint64_t RenderPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  char v23;
  uint64_t v24;
  _BYTE v25[24];
  ValueMetadata *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v26 = &type metadata for RenderPayload.Key;
  v5 = sub_2449A79A8();
  v27 = v5;
  v25[0] = 0;
  sub_2449A79EC();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    v21 = a2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v8 = v28;
    v7 = v29;
    v19 = v31;
    v20 = v30;
    v18 = v32;
    v17 = v33;
    v15 = v35;
    v16 = v34;
    v9 = v37;
    v14 = v36;
    v26 = &type metadata for RenderPayload.Key;
    v27 = v5;
    v25[0] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1E70);
    sub_244931570(&qword_2573A1E80, &qword_2573A1E70, (uint64_t (*)(void))sub_2449A4A8C);
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v26 = &type metadata for RenderPayload.Key;
    v27 = v5;
    v25[0] = 2;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v10 = v22;
    v26 = &type metadata for RenderPayload.Key;
    v27 = v5;
    v25[0] = 3;
    sub_2449CF3B8();
    if (v23)
      v10 = 0.0;
    v12 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v13 = v22;
    if (v23)
      v13 = 3.0;
    *(_QWORD *)v21 = v8;
    *(_QWORD *)(v21 + 8) = v7;
    *(_QWORD *)(v21 + 16) = v20;
    *(_QWORD *)(v21 + 24) = v19;
    *(_QWORD *)(v21 + 32) = v18;
    *(_DWORD *)(v21 + 40) = v17;
    *(_QWORD *)(v21 + 48) = v16;
    *(_QWORD *)(v21 + 56) = v15;
    *(_QWORD *)(v21 + 64) = v14;
    *(_QWORD *)(v21 + 72) = v9;
    *(_QWORD *)(v21 + 80) = v24;
    *(double *)(v21 + 88) = v10;
    *(double *)(v21 + 96) = v13;
  }
  return result;
}

unint64_t sub_2449A79A8()
{
  unint64_t result;

  result = qword_2573A1EF8;
  if (!qword_2573A1EF8)
  {
    result = MEMORY[0x24951C158](&unk_2449DE088, &type metadata for RenderPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1EF8);
  }
  return result;
}

unint64_t sub_2449A79EC()
{
  unint64_t result;

  result = qword_2573A1F00;
  if (!qword_2573A1F00)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for BitmapDescription, &type metadata for BitmapDescription);
    atomic_store(result, (unint64_t *)&qword_2573A1F00);
  }
  return result;
}

uint64_t sub_2449A7A30()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A7A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RenderPayload.init(propertyListValue:)(a1, a2);
}

uint64_t LayerHostPayload.contextID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

double LayerHostPayload.scaleFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double LayerHostPayload.width.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double LayerHostPayload.height.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t LayerHostPayload.init(contextID:scaleFactor:width:height:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  return result;
}

uint64_t sub_2449A7AC4(char a1)
{
  return *(_QWORD *)&aContextiscalef_0[8 * a1];
}

uint64_t sub_2449A7AE4(char *a1, char *a2)
{
  return sub_2449A133C(*a1, *a2);
}

uint64_t sub_2449A7AF0()
{
  return sub_2449C7AE4();
}

uint64_t sub_2449A7AF8()
{
  return sub_2449244F0();
}

uint64_t sub_2449A7B00()
{
  return sub_2449CA134();
}

uint64_t sub_2449A7B08@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449728F4();
  *a1 = result;
  return result;
}

uint64_t sub_2449A7B3C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A7AC4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A7B64()
{
  char *v0;

  return sub_2449A7AC4(*v0);
}

uint64_t LayerHostPayload.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A7BAC()
{
  sub_2449A7E28();
  return sub_2449CF5EC();
}

uint64_t sub_2449A7C70()
{
  return sub_2449A7BAC();
}

uint64_t LayerHostPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  uint64_t v16;

  v14 = &type metadata for LayerHostPayload.Key;
  v5 = sub_2449A7E28();
  v15 = v5;
  v13[0] = 0;
  sub_2449CF37C();
  if (v2)
  {
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v6 = v16;
    v14 = &type metadata for LayerHostPayload.Key;
    v15 = v5;
    v13[0] = 1;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v14 = &type metadata for LayerHostPayload.Key;
    v15 = v5;
    v13[0] = 2;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v14 = &type metadata for LayerHostPayload.Key;
    v15 = v5;
    v13[0] = 3;
    sub_2449CF37C();
    v8 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    *a2 = v6;
    a2[1] = v12;
    a2[2] = v11;
    a2[3] = v10;
  }
  return result;
}

unint64_t sub_2449A7E28()
{
  unint64_t result;

  result = qword_2573A1F08;
  if (!qword_2573A1F08)
  {
    result = MEMORY[0x24951C158](&unk_2449DE060, &type metadata for LayerHostPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1F08);
  }
  return result;
}

uint64_t sub_2449A7E6C()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A7EAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return LayerHostPayload.init(propertyListValue:)(a1, a2);
}

__n128 PreviewInstancesPayload.init(previewDescription:)@<Q0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v15 = a1[1];
  v16 = *a1;
  v13 = (__n128)a1[3];
  v14 = a1[2];
  v3 = *((_QWORD *)a1 + 8);
  v4 = *((_BYTE *)a1 + 72);
  v5 = *((_BYTE *)a1 + 73);
  v6 = *((_BYTE *)a1 + 74);
  v7 = *((_BYTE *)a1 + 75);
  v8 = *((_BYTE *)a1 + 76);
  v9 = *((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)a1 + 11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1F10);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2449D1F20;
  *(_OWORD *)(v11 + 32) = v16;
  *(_OWORD *)(v11 + 48) = v15;
  *(_OWORD *)(v11 + 64) = v14;
  result = v13;
  *(__n128 *)(v11 + 80) = v13;
  *(_QWORD *)(v11 + 96) = v3;
  *(_BYTE *)(v11 + 104) = v4;
  *(_BYTE *)(v11 + 105) = v5;
  *(_BYTE *)(v11 + 106) = v6;
  *(_BYTE *)(v11 + 107) = v7;
  *(_BYTE *)(v11 + 108) = v8;
  *(_QWORD *)(v11 + 112) = v9;
  *(_QWORD *)(v11 + 120) = v10;
  *a2 = v11;
  return result;
}

uint64_t sub_2449A7FA0@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_2449A7FAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2449B075C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t PreviewInstancesPayload.propertyListValue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1F18);
  sub_2449A8064();
  sub_244931570(&qword_2573A1F28, &qword_2573A1F18, (uint64_t (*)(void))sub_2449A80A8);
  return sub_2449CF3E8();
}

unint64_t sub_2449A8064()
{
  unint64_t result;

  result = qword_2573A1F20;
  if (!qword_2573A1F20)
  {
    result = MEMORY[0x24951C158](&unk_2449DE038, &type metadata for PreviewInstancesPayload.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1F20);
  }
  return result;
}

unint64_t sub_2449A80A8()
{
  unint64_t result;

  result = qword_2573A1F30;
  if (!qword_2573A1F30)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewDescription, &type metadata for PreviewDescription);
    atomic_store(result, (unint64_t *)&qword_2573A1F30);
  }
  return result;
}

uint64_t PreviewInstancesPayload.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;

  v8 = &type metadata for PreviewInstancesPayload.Key;
  v9 = sub_2449A8064();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1F18);
  sub_244931570(&qword_2573A1F28, &qword_2573A1F18, (uint64_t (*)(void))sub_2449A80A8);
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
    *a2 = v10;
  return result;
}

uint64_t sub_2449A81DC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1F18);
  sub_2449A8064();
  sub_244931570(&qword_2573A1F28, &qword_2573A1F18, (uint64_t (*)(void))sub_2449A80A8);
  return sub_2449CF3E8();
}

uint64_t sub_2449A826C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];
  ValueMetadata *v8;
  unint64_t v9;
  uint64_t v10;

  v8 = &type metadata for PreviewInstancesPayload.Key;
  v9 = sub_2449A8064();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2573A1F18);
  sub_244931570(&qword_2573A1F28, &qword_2573A1F18, (uint64_t (*)(void))sub_2449A80A8);
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (!v2)
    *a2 = v10;
  return result;
}

__n128 PreviewTraits.layout.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 PreviewTraits.layout.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*PreviewTraits.layout.modify())()
{
  return nullsub_1;
}

void PreviewTraits.orientation.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *PreviewTraits.orientation.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*PreviewTraits.orientation.modify())()
{
  return nullsub_1;
}

void static PreviewTraits.defaultTraits.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
}

__n128 PreviewTraits.init(layout:orientation:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 *a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = a1[1].n128_u8[0];
  v4 = *a2;
  result = *a1;
  *a3 = *a1;
  a3[1].n128_u8[0] = v3;
  a3[1].n128_u8[1] = v4;
  return result;
}

uint64_t sub_2449A83E8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7461746E6569726FLL;
  else
    return 0x74756F79616CLL;
}

uint64_t sub_2449A8424(char *a1, char *a2)
{
  return sub_2449A2D98(*a1, *a2);
}

uint64_t sub_2449A8430()
{
  return sub_2449C7B4C();
}

uint64_t sub_2449A8438()
{
  return sub_2449251AC();
}

uint64_t sub_2449A8440()
{
  return sub_2449C9210();
}

uint64_t sub_2449A8448@<X0>(char *a1@<X8>)
{
  return sub_24493C2EC(a1);
}

uint64_t sub_2449A8454@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A83E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A847C()
{
  char *v0;

  return sub_2449A83E8(*v0);
}

uint64_t PreviewTraits.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A84C4()
{
  sub_2449A8684();
  sub_2449A86C8();
  sub_2449729C4();
  return sub_2449CF604();
}

uint64_t PreviewTraits.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  _BYTE v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v14 = &type metadata for PreviewTraits.Key;
  v5 = sub_2449A8684();
  v15 = v5;
  v13[0] = 0;
  sub_2449A86C8();
  sub_2449CF37C();
  if (v2)
  {
    v9 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v6 = v16;
    v7 = v17;
    v8 = v18;
    v14 = &type metadata for PreviewTraits.Key;
    v15 = v5;
    v13[0] = 1;
    sub_2449729C4();
    sub_2449CF37C();
    v10 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = v8;
    *(_BYTE *)(a2 + 17) = v12;
  }
  return result;
}

unint64_t sub_2449A8684()
{
  unint64_t result;

  result = qword_2573A1F38;
  if (!qword_2573A1F38)
  {
    result = MEMORY[0x24951C158](&unk_2449DE010, &type metadata for PreviewTraits.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1F38);
  }
  return result;
}

unint64_t sub_2449A86C8()
{
  unint64_t result;

  result = qword_2573A1F40;
  if (!qword_2573A1F40)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewTraits.Layout, &type metadata for PreviewTraits.Layout);
    atomic_store(result, (unint64_t *)&qword_2573A1F40);
  }
  return result;
}

void PreviewTraits.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 17);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_2449CFD54();
  }
  else
  {
    sub_2449CFD54();
    sub_2449CFD78();
    sub_2449CFD78();
  }
  __asm { BR              X9 }
}

uint64_t sub_2449A87AC()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void static PreviewTraits.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;
  char v5;
  double v6;
  double v7;
  uint64_t v8;
  BOOL v9;
  BOOL v11;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 17);
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  if (v4 == 1)
  {
    v8 = *(_QWORD *)&v6 | *(_QWORD *)&v7;
    if (*(_QWORD *)&v2 | *(_QWORD *)&v3)
    {
      if (*(_BYTE *)(a2 + 16))
        v9 = v8 == 0;
      else
        v9 = 1;
      if (!v9)
LABEL_14:
        sub_24499EC84(v5);
    }
    else
    {
      if (*(_BYTE *)(a2 + 16))
        v11 = v8 == 0;
      else
        v11 = 0;
      if (v11)
        goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) == 0 && v2 == v6 && v3 == v7)
  {
    goto LABEL_14;
  }
}

BOOL static PreviewTraits.Layout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  _BOOL4 v7;

  v3 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v5 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    v6 = *(_QWORD *)&v5 | *(_QWORD *)&v4;
    if (*(_QWORD *)&v3 | *(_QWORD *)&v2)
      v7 = v6 != 0;
    else
      v7 = v6 == 0;
    return *(_BYTE *)(a2 + 16) && v7;
  }
  else
  {
    return (*(_BYTE *)(a2 + 16) & 1) == 0 && v3 == v5 && v2 == v4;
  }
}

void PreviewTraits.hashValue.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 17);
  sub_2449CFD48();
  sub_2449CFD54();
  if (v1 != 1)
  {
    sub_2449CFD78();
    sub_2449CFD78();
  }
  __asm { BR              X9 }
}

uint64_t sub_2449A89AC()
{
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

uint64_t sub_2449A8A2C(char a1)
{
  return *(_QWORD *)&aDevice_2[8 * a1];
}

uint64_t sub_2449A8A4C()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449A8A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PreviewTraits.init(propertyListValue:)(a1, a2);
}

void sub_2449A8AA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 17);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_2449CFD54();
  }
  else
  {
    sub_2449CFD54();
    sub_2449CFD78();
    sub_2449CFD78();
  }
  __asm { BR              X9 }
}

uint64_t sub_2449A8B44()
{
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

void sub_2449A8BB4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 17);
  sub_2449CFD48();
  sub_2449CFD54();
  if (v1 != 1)
  {
    sub_2449CFD78();
    sub_2449CFD78();
  }
  __asm { BR              X9 }
}

uint64_t sub_2449A8C60()
{
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  return sub_2449CFD84();
}

void sub_2449A8CE0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;
  char v5;
  double v6;
  double v7;
  uint64_t v8;
  BOOL v9;
  BOOL v11;

  v2 = *(double *)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 17);
  v6 = *(double *)a2;
  v7 = *(double *)(a2 + 8);
  if (v4 == 1)
  {
    v8 = *(_QWORD *)&v6 | *(_QWORD *)&v7;
    if (*(_QWORD *)&v2 | *(_QWORD *)&v3)
    {
      if (*(_BYTE *)(a2 + 16))
        v9 = v8 == 0;
      else
        v9 = 1;
      if (!v9)
LABEL_14:
        sub_24499EC84(v5);
    }
    else
    {
      if (*(_BYTE *)(a2 + 16))
        v11 = v8 == 0;
      else
        v11 = 0;
      if (v11)
        goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) == 0 && v2 == v6 && v3 == v7)
  {
    goto LABEL_14;
  }
}

uint64_t sub_2449A8D50(char *a1, char *a2)
{
  return sub_2449A2D14(*a1, *a2);
}

uint64_t sub_2449A8D5C()
{
  return sub_2449C7BD0();
}

uint64_t sub_2449A8D64()
{
  return sub_24492516C();
}

uint64_t sub_2449A8D6C()
{
  return sub_2449C9290();
}

uint64_t sub_2449A8D74@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_2449A8DA8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A8A2C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A8DD0()
{
  sub_2449B4E60();
  return sub_2449CF670();
}

uint64_t sub_2449A8E18()
{
  sub_2449B4E60();
  return sub_2449CF67C();
}

uint64_t sub_2449A8E7C(char a1)
{
  return *(_QWORD *)&aKind_1[8 * a1];
}

uint64_t sub_2449A8E9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2449A2C88(*a1, *a2);
}

uint64_t sub_2449A8EA8()
{
  return sub_2449C7C38();
}

uint64_t sub_2449A8EB0()
{
  return sub_24492512C();
}

uint64_t sub_2449A8EB8()
{
  return sub_2449C92F4();
}

uint64_t sub_2449A8EC0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_244940DA8();
  *a1 = result;
  return result;
}

uint64_t sub_2449A8EF4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449A8E7C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449A8F1C()
{
  char *v0;

  return sub_2449A8E7C(*v0);
}

uint64_t PreviewTraits.Layout.propertyListValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t result;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_BYTE *)v0 + 16);
  v4 = sub_2449A95D0();
  sub_2449A9614();
  result = sub_2449CF3E8();
  if ((v3 & 1) == 0)
  {
    v8 = v4;
    v9 = v1;
    v10 = 0;
    v7 = &type metadata for PreviewTraits.Layout.Key;
    v6[0] = 1;
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v8 = v4;
    v9 = v2;
    v10 = 0;
    v7 = &type metadata for PreviewTraits.Layout.Key;
    v6[0] = 2;
    sub_2449CF370();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  return result;
}

uint64_t PreviewTraits.Layout.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  ValueMetadata *v17;
  unint64_t v18;

  v17 = &type metadata for PreviewTraits.Layout.Key;
  v5 = sub_2449A95D0();
  v18 = v5;
  v16[0] = 0;
  sub_2449A9614();
  sub_2449CF37C();
  if (v2)
  {
    v6 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if ((_BYTE)v15)
  {
    if (v15 != 1)
    {
      v17 = &type metadata for PreviewTraits.Layout.Key;
      v18 = v5;
      v16[0] = 1;
      sub_2449CF37C();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      v10 = v15;
      v17 = &type metadata for PreviewTraits.Layout.Key;
      v18 = v5;
      v16[0] = 2;
      sub_2449CF37C();
      v13 = sub_2449CF400();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      v12 = 0;
      v9 = v14;
      goto LABEL_8;
    }
    v8 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
    v9 = 0;
    v10 = 1;
  }
  else
  {
    v11 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    v10 = 0;
    v9 = 0;
  }
  v12 = 1;
LABEL_8:
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v12;
  return result;
}

uint64_t PreviewTraits.Layout.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) == 1)
    return sub_2449CFD54();
  sub_2449CFD54();
  sub_2449CFD78();
  return sub_2449CFD78();
}

uint64_t PreviewTraits.Layout.hashValue.getter()
{
  sub_2449CFD48();
  PreviewTraits.Layout.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_2449A92AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PreviewTraits.Layout.init(propertyListValue:)(a1, a2);
}

uint64_t sub_2449A92C0()
{
  sub_2449CFD48();
  PreviewTraits.Layout.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_2449A9314()
{
  sub_2449CFD48();
  PreviewTraits.Layout.hash(into:)();
  return sub_2449CFD84();
}

BOOL sub_2449A9360(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  _BOOL4 v7;

  v3 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v5 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    v6 = *(_QWORD *)&v5 | *(_QWORD *)&v4;
    if (*(_QWORD *)&v3 | *(_QWORD *)&v2)
      v7 = v6 != 0;
    else
      v7 = v6 == 0;
    return *(_BYTE *)(a2 + 16) && v7;
  }
  else
  {
    return (*(_BYTE *)(a2 + 16) & 1) == 0 && v3 == v5 && v2 == v4;
  }
}

PreviewsMessagingOS::PreviewTraits::Orientation_optional __swiftcall PreviewTraits.Orientation.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  PreviewsMessagingOS::PreviewTraits::Orientation_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2449CFC10();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t PreviewTraits.Orientation.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449A945C + 4 * byte_2449DB8DF[*v0]))(0xD000000000000012, 0x80000002449E2B40);
}

uint64_t sub_2449A945C()
{
  return 0x7469617274726F70;
}

uint64_t sub_2449A9474()
{
  return 0x70616373646E616CLL;
}

void sub_2449A94AC(char *a1)
{
  sub_24499EC84(*a1);
}

PreviewsMessagingOS::PreviewTraits::Orientation_optional sub_2449A94B8(Swift::String *a1)
{
  return PreviewTraits.Orientation.init(rawValue:)(*a1);
}

uint64_t sub_2449A94C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PreviewTraits.Orientation.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2449A94E8()
{
  sub_2449B52B8();
  return sub_2449CF670();
}

uint64_t sub_2449A9530()
{
  sub_2449B52B8();
  return sub_2449CF67C();
}

void sub_2449A9594()
{
  char *v0;

  sub_2449C7C9C(*v0);
}

void sub_2449A959C(uint64_t a1)
{
  char *v1;

  sub_244923E1C(a1, *v1);
}

_BYTE *sub_2449A95A4(_BYTE *result, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(unsigned __int8 *)(v2 + 32);
  *result = 0;
  v6 = (v3 | v4) != 0;
  if (v5 != 1)
    v6 = 2;
  *a2 = v6;
  return result;
}

unint64_t sub_2449A95D0()
{
  unint64_t result;

  result = qword_2573A1F48;
  if (!qword_2573A1F48)
  {
    result = MEMORY[0x24951C158](&unk_2449DDFE8, &type metadata for PreviewTraits.Layout.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1F48);
  }
  return result;
}

unint64_t sub_2449A9614()
{
  unint64_t result;

  result = qword_2573A1F50;
  if (!qword_2573A1F50)
  {
    result = MEMORY[0x24951C158](&unk_2449DDFA8, &type metadata for PreviewTraits.Layout.Discriminant);
    atomic_store(result, (unint64_t *)&qword_2573A1F50);
  }
  return result;
}

void sub_2449A9658(uint64_t a1)
{
  char *v1;

  sub_2449C9148(a1, *v1);
}

uint64_t Explanation.body.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Explanation.body.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::Explanation __swiftcall Explanation.init(body:)(PreviewsMessagingOS::Explanation body)
{
  PreviewsMessagingOS::Explanation *v1;

  *v1 = body;
  return body;
}

uint64_t sub_2449A96B8@<X0>(BOOL *a1@<X8>)
{
  return sub_24493D158(a1);
}

uint64_t sub_2449A96C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2449B072C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Explanation.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = &type metadata for Explanation.Key;
  v10 = sub_2449A97B0();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (!v2)
  {
    v7 = v12;
    *a2 = v11;
    a2[1] = v7;
  }
  return result;
}

unint64_t sub_2449A97B0()
{
  unint64_t result;

  result = qword_2573A1F58;
  if (!qword_2573A1F58)
  {
    result = MEMORY[0x24951C158](&unk_2449DDF80, &type metadata for Explanation.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1F58);
  }
  return result;
}

uint64_t Explanation.propertyListValue.getter()
{
  sub_2449A97B0();
  return sub_2449CF3E8();
}

uint64_t Explanation.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static Explanation.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_2449CFCD0();
}

uint64_t sub_2449A98B0()
{
  sub_2449A97B0();
  return sub_2449CF3E8();
}

uint64_t sub_2449A9910@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = &type metadata for Explanation.Key;
  v10 = sub_2449A97B0();
  sub_2449CF37C();
  v5 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (!v2)
  {
    v7 = v12;
    *a2 = v11;
    a2[1] = v7;
  }
  return result;
}

uint64_t static RuntimeLookup.unavailable(explanation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_2449A99F8(a1, a2, a3, 1, a4);
}

uint64_t type metadata accessor for RuntimeLookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RuntimeLookup);
}

uint64_t static RuntimeLookup.notLocated(explanation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_2449A99F8(a1, a2, a3, 2, a4);
}

uint64_t static RuntimeLookup.notSupported(explanation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_2449A99F8(a1, a2, a3, 3, a4);
}

uint64_t sub_2449A99F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  type metadata accessor for RuntimeLookup(0, a3, a3, a4);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

void RuntimeLookup.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v9[2];

  v9[1] = a4;
  v4 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = (char *)sub_2449A9B14 + 4 * byte_2449DB8E3[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2449A9B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v4, v5, v2);
  v3(v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v2);
  if (!v0)
  {
    type metadata accessor for RuntimeLookup(0, *(_QWORD *)(v6 - 72), v8, v9);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t RuntimeLookup.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v8 = *(_QWORD *)(a4 + 16);
  v6[8] = v8;
  v6[9] = *(_QWORD *)(v8 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = *(_QWORD *)(a4 - 8);
  v6[12] = swift_task_alloc();
  return swift_task_switch();
}

void sub_2449A9C80()
{
  _QWORD *v0;
  char *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[11] + 16))(v0[12], v0[7], v0[5]);
  v1 = (char *)sub_2449A9CDC + 4 * byte_2449DB8E7[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2449A9CDC()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[3];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[9] + 32))(v0[10], v0[12], v0[8]);
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[13] = v2;
  *v2 = v0;
  v2[1] = sub_2449A9DF4;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(v0[2], v0[10]);
}

uint64_t sub_2449A9D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(uint64_t **)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD **)(v4 + 16);
  v9 = *v5;
  v8 = v5[1];
  *v7 = v9;
  v7[1] = v8;
  type metadata accessor for RuntimeLookup(0, v6, a3, a4);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2449A9DF4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2449A9E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  type metadata accessor for RuntimeLookup(0, v1, v2, v3);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2449A9ECC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RuntimeLookup.flatMap<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  void (*v20)(char *);

  v20 = a1;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_QWORD *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload())
  {
    v17 = v12[1];
    *a4 = *v12;
    a4[1] = v17;
    type metadata accessor for RuntimeLookup(0, a3, v15, v16);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 32))(v10, v12, v6);
    v20(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t RuntimeLookup.flatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v8 = *(_QWORD *)(a4 + 16);
  v6[8] = v8;
  v6[9] = *(_QWORD *)(v8 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = *(_QWORD *)(a4 - 8);
  v6[12] = swift_task_alloc();
  return swift_task_switch();
}

void sub_2449AA0E8()
{
  _QWORD *v0;
  char *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[11] + 16))(v0[12], v0[7], v0[5]);
  v1 = (char *)sub_2449AA144 + 4 * byte_2449DB8EB[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2449AA144()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = (int *)v0[3];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[9] + 32))(v0[10], v0[12], v0[8]);
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[13] = v2;
  *v2 = v0;
  v2[1] = sub_2449AA25C;
  return ((uint64_t (*)(_QWORD, _QWORD))v4)(v0[2], v0[10]);
}

uint64_t sub_2449AA1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(uint64_t **)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD **)(v4 + 16);
  v9 = *v5;
  v8 = v5[1];
  *v7 = v9;
  v7[1] = v8;
  type metadata accessor for RuntimeLookup(0, v6, a3, a4);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_2449AA25C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2449AA2C0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void RuntimeLookup.availableValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_2449AA394 + 4 * byte_2449DB8EF[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2449AA394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 32))(v2, v1);
}

uint64_t type metadata accessor for RuntimeLookup.NoValueError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RuntimeLookup.NoValueError);
}

uint64_t sub_2449AA4E8()
{
  uint64_t v0;

  v0 = sub_24495135C();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_2449AA51C(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DDE40, a1);
  return sub_2449CF52C();
}

uint64_t sub_2449AA550(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DDE40, a1);
  return sub_2449CF508();
}

void RuntimeLookup.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_2449AA638 + 4 * byte_2449DB8F3[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_2449AA638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
  *(_QWORD *)(v4 - 64) = 0;
  *(_QWORD *)(v4 - 56) = 0xE000000000000000;
  sub_2449CFCAC();
  v5 = *(_QWORD *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  return v5;
}

uint64_t sub_2449AA75C(char a1)
{
  return *(_QWORD *)&aLocated_0[8 * a1];
}

uint64_t sub_2449AA780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DD758, a3);
  return sub_2449CFCE8();
}

uint64_t sub_2449AA7D4(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DD758, a1);
  return sub_2449CF8D4();
}

uint64_t sub_2449AA820()
{
  MEMORY[0x24951C158](&unk_2449DD758);
  return sub_2449CF8EC();
}

uint64_t sub_2449AA870()
{
  MEMORY[0x24951C158](&unk_2449DD758);
  return sub_2449CF8E0();
}

uint64_t sub_2449AA8C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449905B0();
  *a1 = result;
  return result;
}

uint64_t sub_2449AA8FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24499079C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2449AA75C, a2);
}

uint64_t sub_2449AA908(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DD758, a1);
  return sub_2449CF670();
}

uint64_t sub_2449AA95C()
{
  MEMORY[0x24951C158](&unk_2449DD758);
  return sub_2449CF67C();
}

uint64_t sub_2449AA9C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return EnumCaseMultiPayload;
}

uint64_t sub_2449AAA54(char a1)
{
  return *(_QWORD *)&aDiscrimilocate[8 * a1];
}

uint64_t sub_2449AAA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24951C158](&unk_2449DD6B8, a3);
  return sub_2449CFCE8();
}

uint64_t sub_2449AAAC8(uint64_t a1)
{
  MEMORY[0x24951C158](&unk_2449DD6B8, a1);
  return sub_2449CF8D4();
}

uint64_t sub_2449AAB14()
{
  MEMORY[0x24951C158](&unk_2449DD6B8);
  return sub_2449CF8EC();
}

uint64_t sub_2449AAB64()
{
  MEMORY[0x24951C158](&unk_2449DD6B8);
  return sub_2449CF8E0();
}

uint64_t sub_2449AABB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449905B0();
  *a1 = result;
  return result;
}

uint64_t sub_2449AABF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24499079C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_2449AAA54, a2);
}

uint64_t sub_2449AABFC()
{
  char *v0;

  return sub_2449AAA54(*v0);
}

uint64_t RuntimeLookup<A>.propertyListValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25739F710);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = sub_2449CFB2C();
  v39 = *(_QWORD *)(v10 - 8);
  v40 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v37 = (char *)&v35 - v12;
  v38 = *(_QWORD *)(v9 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v36 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = v9;
  v44 = a2;
  v45 = v3;
  v19 = _s3KeyOMa_2(0, v9, a2, v18);
  v35 = a2;
  v21 = _s12DiscriminantOMa(0, v9, a2, v20);
  v22 = MEMORY[0x24951C158](&unk_2449DDF18, v19);
  MEMORY[0x24951C158](&unk_2449DDED8, v21);
  v42 = a3;
  v23 = v22;
  sub_2449CF3E8();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v17, v3, a1);
  if (swift_getEnumCaseMultiPayload())
  {
    v24 = v17[1];
    v49 = *v17;
    v25 = v49;
    v50 = v24;
    v47 = v19;
    v48 = v22;
    LOBYTE(v46[0]) = 2;
    sub_2449AAFE4();
    sub_2449CF370();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    v46[0] = 0x616C696176616E75;
    v46[1] = 0xEB00000000656C62;
    v46[2] = v25;
    v47 = v24;
    v28 = type metadata accessor for RuntimeLookup.NoValueError(0, v9, v26, v27);
    MEMORY[0x24951C158](&unk_2449DDE40, v28);
    v29 = (uint64_t)v41;
    sub_2449CF550();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = sub_2449CF400();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 0, 1, v30);
    v47 = v19;
    v48 = v22;
    LOBYTE(v46[0]) = 3;
    sub_2449CF370();
    sub_244940E8C(v29, &qword_25739F710);
  }
  else
  {
    v31 = v38;
    v32 = v36;
    (*(void (**)(char *, uint64_t *, uint64_t))(v38 + 32))(v36, v17, v9);
    v33 = v37;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v37, v32, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v33, 0, 1, v9);
    v47 = v19;
    v48 = v23;
    LOBYTE(v46[0]) = 1;
    sub_2449CF370();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v40);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v9);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

uint64_t sub_2449AAF88(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_QWORD *)(v4 + 16);
  *a1 = 0;
  v7 = type metadata accessor for RuntimeLookup(0, v6, a3, a4);
  result = sub_2449AA9C8(v7);
  *a2 = result;
  return result;
}

uint64_t _s3KeyOMa_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s3KeyOMn_2);
}

uint64_t _s12DiscriminantOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s12DiscriminantOMn);
}

unint64_t sub_2449AAFE4()
{
  unint64_t result;

  result = qword_2573A1F70;
  if (!qword_2573A1F70)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for Explanation, &type metadata for Explanation);
    atomic_store(result, (unint64_t *)&qword_2573A1F70);
  }
  return result;
}

uint64_t RuntimeLookup<A>.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[9];
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;

  v21[5] = a5;
  v8 = type metadata accessor for RuntimeLookup(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v21[3] = v8;
  v21[4] = v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v21[2] = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v21[1] = (char *)v21 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v14);
  v23 = _s3KeyOMa_2(0, a2, a3, v15);
  v24 = MEMORY[0x24951C158](&unk_2449DDF18, v23);
  v22[0] = 0;
  v17 = _s12DiscriminantOMa(0, a2, a3, v16);
  MEMORY[0x24951C158](&unk_2449DDED8, v17);
  v18 = v21[6];
  sub_2449CF37C();
  if (!v18)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    __asm { BR              X10 }
  }
  v19 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

void sub_2449AB1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v3;
  *(_BYTE *)(v5 - 120) = 1;
  sub_2449CF37C();
  v6 = sub_2449CF400();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0, v6);
  __swift_destroy_boxed_opaque_existential_1(v5 - 120);
  if (!v1)
  {
    v7 = *(_QWORD *)(v5 - 168);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 160) + 32))(*(_QWORD *)(v5 - 152), v4, v7);
  }
  JUMPOUT(0x2449AB190);
}

uint64_t sub_2449AB48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return RuntimeLookup<A>.propertyListValue.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t sub_2449AB494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return RuntimeLookup<A>.init(propertyListValue:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4, a5);
}

void PreviewMetadata.contentDomain.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *PreviewMetadata.contentDomain.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*PreviewMetadata.contentDomain.modify())()
{
  return nullsub_1;
}

uint64_t PreviewMetadata.contentCategory.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PreviewMetadata.contentCategory.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*PreviewMetadata.contentCategory.modify())()
{
  return nullsub_1;
}

uint64_t PreviewMetadata.supportsOnDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t PreviewMetadata.supportsOnDevice.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*PreviewMetadata.supportsOnDevice.modify())()
{
  return nullsub_1;
}

uint64_t PreviewMetadata.supportsInteractive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t PreviewMetadata.supportsInteractive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

uint64_t (*PreviewMetadata.supportsInteractive.modify())()
{
  return nullsub_1;
}

__n128 PreviewMetadata.requestedTraits.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[3].n128_u8[0];
  v3 = v1[3].n128_u8[1];
  result = v1[2];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u8[1] = v3;
  return result;
}

__n128 PreviewMetadata.requestedTraits.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  v3 = a1[1].n128_u8[1];
  result = *a1;
  v1[2] = *a1;
  v1[3].n128_u8[0] = v2;
  v1[3].n128_u8[1] = v3;
  return result;
}

uint64_t (*PreviewMetadata.requestedTraits.modify())()
{
  return nullsub_1;
}

uint64_t PreviewMetadata.isPreviewGroup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t PreviewMetadata.isPreviewGroup.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 50) = result;
  return result;
}

uint64_t (*PreviewMetadata.isPreviewGroup.modify())()
{
  return nullsub_1;
}

uint64_t PreviewMetadata.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PreviewMetadata.displayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*PreviewMetadata.displayName.modify())()
{
  return nullsub_1;
}

__n128 PreviewMetadata.init(contentDomain:contentCategory:supportsOnDevice:supportsInteractive:requestedTraits:isPreviewGroup:displayName:)@<Q0>(unsigned __int8 *a1@<X0>, unint64_t *a2@<X1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, __n128 *a5@<X4>, unsigned __int8 a6@<W5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  __n128 result;

  v9 = *a2;
  v10 = a2[1];
  v11 = a5[1].n128_u8[0];
  v12 = a5[1].n128_u8[1];
  a9->n128_u8[0] = *a1;
  a9->n128_u64[1] = v9;
  a9[1].n128_u64[0] = v10;
  a9[1].n128_u8[8] = a3;
  a9[1].n128_u8[9] = a4;
  result = *a5;
  a9[2] = *a5;
  a9[3].n128_u8[0] = v11;
  a9[3].n128_u8[1] = v12;
  a9[3].n128_u8[2] = a6;
  a9[3].n128_u64[1] = a7;
  a9[4].n128_u64[0] = a8;
  return result;
}

uint64_t sub_2449AB678(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2449AB6B0 + 4 * byte_2449DB8FB[a1]))(0xD000000000000010, 0x80000002449E2BD0);
}

uint64_t sub_2449AB6B0()
{
  return 0x44746E65746E6F63;
}

uint64_t sub_2449AB6D4()
{
  return 0x43746E65746E6F63;
}

uint64_t sub_2449AB6F8(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_2449AB710()
{
  return 0x6574736575716572;
}

uint64_t sub_2449AB734()
{
  return 0x6569766572507369;
}

uint64_t sub_2449AB758()
{
  return 0x4E79616C70736964;
}

void sub_2449AB778(char *a1)
{
  sub_2449A1984(*a1);
}

void sub_2449AB784()
{
  char *v0;

  sub_2449C9D88(0, *v0);
}

void sub_2449AB790(uint64_t a1)
{
  char *v1;

  sub_244924800(a1, *v1);
}

void sub_2449AB798(uint64_t a1)
{
  char *v1;

  sub_2449C9D88(a1, *v1);
}

uint64_t sub_2449AB7A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2449B4EEC();
  *a1 = result;
  return result;
}

uint64_t sub_2449AB7D4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_2449AB678(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2449AB7FC()
{
  unsigned __int8 *v0;

  return sub_2449AB678(*v0);
}

uint64_t PreviewMetadata.propertyListValue.getter()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449AB84C(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  __int16 v10;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  _BYTE v26[24];

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  v4 = a1[24];
  v5 = a1[25];
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v8 = a1[48];
  v9 = a1[50];
  v10 = a1[49];
  sub_2449314A4((uint64_t)(a1 + 56), (uint64_t)v26, &qword_25739F178);
  v25 = 0;
  v24 = v1;
  v23 = 1;
  v21 = v2;
  v22 = v3;
  v20 = 2;
  v19 = v4;
  v18 = 3;
  v17 = v5;
  v16 = 4;
  v13 = v6;
  v14 = v7;
  v15 = v8 | (v10 << 8);
  v12[23] = 5;
  v12[22] = v9;
  v12[21] = 6;
  sub_2449314A4((uint64_t)v26, (uint64_t)v12, &qword_25739F178);
  sub_2449ABCFC();
  sub_244981738();
  sub_2449424D8();
  sub_2449ABD40();
  return sub_2449CF5C8();
}

uint64_t sub_2449ABA08()
{
  uint64_t v0;

  return sub_2449AB84C(*(char **)(v0 + 16));
}

uint64_t PreviewMetadata.init(propertyListValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  ValueMetadata *v20;
  unint64_t v21;
  int v22;
  char v23;
  unsigned __int8 v24;
  char v25;

  v20 = &type metadata for PreviewMetadata.Key;
  v5 = sub_2449ABCFC();
  v21 = v5;
  v19[0] = 0;
  sub_244981738();
  sub_2449CF37C();
  if (v2)
  {
    v7 = sub_2449CF400();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v6 = v25;
    v20 = &type metadata for PreviewMetadata.Key;
    v21 = v5;
    v19[0] = 1;
    sub_2449424D8();
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v20 = &type metadata for PreviewMetadata.Key;
    v21 = v5;
    v19[0] = 2;
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v8 = v24;
    v20 = &type metadata for PreviewMetadata.Key;
    v21 = v5;
    v19[0] = 3;
    sub_2449CF37C();
    v22 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    LOBYTE(v8) = v23;
    v20 = &type metadata for PreviewMetadata.Key;
    v21 = v5;
    v19[0] = 4;
    sub_2449ABD40();
    sub_2449CF37C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v20 = &type metadata for PreviewMetadata.Key;
    v21 = v5;
    v19[0] = 5;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v20 = &type metadata for PreviewMetadata.Key;
    v21 = v5;
    v19[0] = 6;
    sub_2449CF3B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v9 = sub_2449CF400();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    *(_BYTE *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v17;
    *(_QWORD *)(a2 + 16) = v18;
    *(_BYTE *)(a2 + 24) = v22;
    *(_BYTE *)(a2 + 25) = v8;
    *(_QWORD *)(a2 + 32) = v13;
    *(_QWORD *)(a2 + 40) = v14;
    *(_BYTE *)(a2 + 48) = v15;
    *(_BYTE *)(a2 + 49) = v16;
    *(_BYTE *)(a2 + 50) = v11 & 1;
    *(_QWORD *)(a2 + 56) = v11;
    *(_QWORD *)(a2 + 64) = v12;
  }
  return result;
}

unint64_t sub_2449ABCFC()
{
  unint64_t result;

  result = qword_2573A1F78;
  if (!qword_2573A1F78)
  {
    result = MEMORY[0x24951C158](&unk_2449DDE18, &type metadata for PreviewMetadata.Key);
    atomic_store(result, (unint64_t *)&qword_2573A1F78);
  }
  return result;
}

unint64_t sub_2449ABD40()
{
  unint64_t result;

  result = qword_2573A1F80;
  if (!qword_2573A1F80)
  {
    result = MEMORY[0x24951C158](&protocol conformance descriptor for PreviewTraits, &type metadata for PreviewTraits);
    atomic_store(result, (unint64_t *)&qword_2573A1F80);
  }
  return result;
}

void PreviewMetadata.hash(into:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 48);
  v2 = *(unsigned __int8 *)(v0 + 49);
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CFD60();
  sub_2449CFD60();
  sub_2449CFD54();
  if (v1 != 1)
  {
    sub_2449CFD78();
    sub_2449CFD78();
  }
  __asm { BR              X9 }
}

uint64_t sub_2449ABEB0()
{
  uint64_t v0;

  sub_2449CF88C();
  swift_bridgeObjectRelease();
  sub_2449CFD60();
  if (!v0)
    return sub_2449CFD60();
  sub_2449CFD60();
  swift_bridgeObjectRetain();
  sub_2449CF88C();
  return swift_bridgeObjectRelease();
}

uint64_t PreviewMetadata.hashValue.getter()
{
  sub_2449CFD48();
  PreviewMetadata.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_2449AC014()
{
  return sub_2449CF3D0();
}

uint64_t sub_2449AC05C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PreviewMetadata.init(propertyListValue:)(a1, a2);
}

uint64_t sub_2449AC070()
{
  sub_2449CFD48();
  PreviewMetadata.hash(into:)();
  return sub_2449CFD84();
}

uint64_t sub_2449AC0FC()
{
  sub_2449CFD48();
  PreviewMetadata.hash(into:)();
  return sub_2449CFD84();
}

uint64_t PlaygroundMetadata.displayName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlaygroundMetadata.displayName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PlaygroundMetadata.displayName.modify())()
{
  return nullsub_1;
}

PreviewsMessagingOS::PlaygroundMetadata __swiftcall PlaygroundMetadata.init(displayName:)(PreviewsMessagingOS::PlaygroundMetadata displayName)
{
  PreviewsMessagingOS::PlaygroundMetadata *v1;

  *v1 = displayName;
  return displayName;
}

