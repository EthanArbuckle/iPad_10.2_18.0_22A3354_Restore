@implementation HMDHome

- (NSSet)notificationRegistrations
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableSet copy](self->_notificationRegistrations, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v3;
}

uint64_t __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = a2;
  objc_msgSend(v3, "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "hapMetadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "shouldRefreshValueForCharacteristicWithType:serviceType:", v4, v6);

  return v8;
}

void __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  HMDHomeManagerXPCMessageSendPolicy *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = a2;
  v4 = v3;
  v5 = (_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32) && (objc_msgSend(v3, "isEntitledForSPIAccess") & 1) != 0)
  {
    v6 = 1;
    v7 = 5;
  }
  else
  {
    v6 = 0;
    v5 = (_QWORD *)(a1 + 48);
    v7 = 1;
  }
  objc_msgSend(*(id *)(a1 + 40), "setMessagePayload:", *v5);
  objc_msgSend(*(id *)(a1 + 40), "setRequiresSPIEntitlement:", v6);
  if (*(void **)(a1 + 56) == v4)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setQualityOfService:", 17);
    v8 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", v7, *(_QWORD *)(a1 + 88), 1);
    objc_msgSend(*(id *)(a1 + 40), "setSendPolicy:", v8);

  }
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
  v9 = (void *)objc_msgSend(*(id *)(a1 + 40), "copy");
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_2;
  v11[3] = &unk_1E89C25C8;
  v12 = v4;
  v13 = *(id *)(a1 + 56);
  v15 = *(id *)(a1 + 72);
  v14 = *(id *)(a1 + 64);
  v10 = v4;
  objc_msgSend(v10, "sendMessage:completionHandler:", v9, v11);

}

- (id)shortDescription
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if ((isInternalBuild() & 1) != 0)
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    -[HMDHome name](self, "name");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/%@"), v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[HMDHome uuid](self, "uuid");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (void)__updateServiceTransaction:(id)a3 accessoryTransaction:(id)a4 service:(id)a5 accessory:(id)a6 hapService:(id)a7
{
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  unsigned __int8 v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  HMDHome *v77;
  void *v78;
  uint64_t v79;
  id obj;
  void *v81;
  void *v82;
  uint64_t v83;
  _QWORD aBlock[4];
  id v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[128];
  _QWORD v95[4];
  _QWORD v96[4];
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v73 = a3;
  v72 = a4;
  v12 = a5;
  v75 = a6;
  v13 = a7;
  v14 = (void *)MEMORY[0x1E0C99DE8];
  v71 = v13;
  objc_msgSend(v13, "characteristics");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "arrayWithArray:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v16, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v16, "count"));
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v69 = v16;
    obj = v16;
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v90, v97, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v91;
      v20 = 0x1E0C99000uLL;
      v70 = v12;
      v76 = *(_QWORD *)v91;
      v77 = self;
      do
      {
        v21 = 0;
        v79 = v18;
        do
        {
          if (*(_QWORD *)v91 != v19)
            objc_enumerationMutation(obj);
          v22 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * v21);
          -[HMDHome hapMetadata](self, "hapMetadata");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "type");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v23, "shouldFilterCharacteristicOfType:", v24);

          if ((v25 & 1) == 0)
          {
            v83 = v21;
            objc_msgSend(v22, "metadata");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v20 + 3592), "dictionaryWithCapacity:", 8);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "format");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v28, CFSTR("metadataFormat"));

            objc_msgSend(v26, "units");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v29, CFSTR("metadataUnits"));

            objc_msgSend(v26, "manufacturerDescription");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setObject:forKeyedSubscript:", v30, CFSTR("metadataUserDescription"));

            objc_msgSend(v26, "constraints");
            v31 = (void *)objc_claimAutoreleasedReturnValue();

            if (v31)
            {
              objc_msgSend(v26, "constraints");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v32, "minimumValue");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v33, CFSTR("metadataMinimumValue"));

              objc_msgSend(v26, "constraints");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "maximumValue");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v35, CFSTR("metadataMaximumValue"));

              objc_msgSend(v26, "constraints");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "stepValue");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v37, CFSTR("metadataStepValue"));

              objc_msgSend(v26, "constraints");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "maxLength");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v39, CFSTR("metadataMaxLength"));

              objc_msgSend(v26, "constraints");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "validValues");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setObject:forKeyedSubscript:", v41, CFSTR("metadataValidValues"));

            }
            v42 = *(void **)(v20 + 3592);
            v95[0] = CFSTR("characteristicInstanceID");
            objc_msgSend(v22, "instanceID");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v96[0] = v43;
            v95[1] = CFSTR("characteristicType");
            objc_msgSend(v22, "type");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v96[1] = v44;
            v95[2] = CFSTR("characteristicProperties");
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v22, "properties"));
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v95[3] = CFSTR("characteristicMetadata");
            v96[2] = v45;
            v96[3] = v27;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v96, v95, 4);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "dictionaryWithDictionary:", v46);
            v47 = objc_claimAutoreleasedReturnValue();

            if (v12)
            {
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              objc_msgSend(v12, "characteristics");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              v49 = (id)objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v86, v94, 16);
              if (v49)
              {
                v74 = (void *)v47;
                v81 = v26;
                v50 = *(_QWORD *)v87;
LABEL_13:
                v51 = 0;
                while (1)
                {
                  if (*(_QWORD *)v87 != v50)
                    objc_enumerationMutation(v48);
                  v52 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v51);
                  objc_msgSend(v52, "instanceID");
                  v53 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v22, "instanceID");
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  v55 = objc_msgSend(v53, "isEqual:", v54);

                  if ((v55 & 1) != 0)
                    break;
                  if (v49 == (id)++v51)
                  {
                    v49 = (id)objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v86, v94, 16);
                    if (v49)
                      goto LABEL_13;
                    v12 = v70;
                    v26 = v81;
                    v47 = (uint64_t)v74;
                    goto LABEL_25;
                  }
                }
                v49 = v52;

                if (v49)
                {
                  objc_msgSend(v49, "authorizationData");
                  v56 = (void *)objc_claimAutoreleasedReturnValue();

                  v12 = v70;
                  v26 = v81;
                  v47 = (uint64_t)v74;
                  if (v56)
                  {
                    objc_msgSend(v49, "authorizationData");
                    v57 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v74, "setObject:forKeyedSubscript:", v57, CFSTR("kCharacteristicAuthorizationDataCodingKey"));

                  }
                  objc_msgSend(v75, "findServiceWithServiceType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
                  v58 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v58)
                  {
                    v59 = objc_msgSend(v22, "properties");
                    v60 = objc_msgSend(v49, "properties");
                    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v60 & 0x80 | (unint64_t)v59);
                    v48 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v74, "setObject:forKeyedSubscript:", v48, CFSTR("characteristicProperties"));
                    goto LABEL_25;
                  }
                }
                else
                {
                  v12 = v70;
                  v26 = v81;
                  v47 = (uint64_t)v74;
                }
              }
              else
              {
LABEL_25:

              }
            }
            v82 = v27;
            v61 = (void *)v47;
            objc_msgSend(v78, "addObject:", v47);
            objc_msgSend(v22, "value");
            v62 = (void *)objc_claimAutoreleasedReturnValue();

            v19 = v76;
            v21 = v83;
            if (v62)
            {
              aBlock[0] = MEMORY[0x1E0C809B0];
              aBlock[1] = 3221225472;
              aBlock[2] = __88__HMDHome___updateServiceTransaction_accessoryTransaction_service_accessory_hapService___block_invoke;
              aBlock[3] = &unk_1E89AE6E8;
              v85 = v73;
              v63 = _Block_copy(aBlock);
              objc_msgSend(v22, "type");
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "value");
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v71, "type");
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDService processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:](HMDService, "processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:", v64, v65, v66, v12, v63, v75, v72, 0);

            }
            self = v77;
            v18 = v79;
            v20 = 0x1E0C99000;
          }
          ++v21;
        }
        while (v21 != v18);
        v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v90, v97, 16);
      }
      while (v18);
    }

    v16 = v69;
    v67 = v78;
  }
  else
  {
    v67 = 0;
  }
  +[HMDCharacteristic sortComparatorForCharacteristicDictionary](HMDCharacteristic, "sortComparatorForCharacteristicDictionary");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v67, "sortUsingComparator:", v68);

  objc_msgSend(v73, "setCharacteristics:", v67);
}

- (HMDHAPMetadata)hapMetadata
{
  return (HMDHAPMetadata *)objc_getProperty(self, a2, 864, 1);
}

- (BOOL)isResidentFirstAccessoryCommunicationEnabled
{
  return self->_residentFirstAccessoryCommunicationEnabled;
}

- (id)primaryResident
{
  void *v2;
  void *v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "primaryResidentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (BOOL)isResidentSupported
{
  void *v3;
  char v4;
  void *v6;
  char v7;

  if (isWatch())
  {
    -[HMDHome homeManager](self, "homeManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "companionReachable");

    if ((v4 & 1) != 0)
      return 0;
  }
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isResidentAvailable");

  return v7;
}

- (BOOL)isCurrentDeviceAvailableResident
{
  void *v2;
  char v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCurrentDeviceAvailableResident");

  return v3;
}

- (HMDResidentDeviceManager)residentDeviceManager
{
  return self->_residentDeviceManager;
}

- (void)_wol_processChangedCharacteristicResponses:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  char isKindOfClass;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend(v8, "request");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "characteristic");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v10, "accessory");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (objc_msgSend(v13, "canWakeUpViaWoL"))
        {
          objc_msgSend(v8, "request");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          objc_msgSend(v8, "error");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "_wol_processReadWriteResponseForCharacteristic:isRead:error:", v10, (v14 == 0) | ((isKindOfClass & 1) == 0), v16);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v5);
  }

}

- (HMFTimer)modifyNotificationsCoalesceTimer
{
  return self->_modifyNotificationsCoalesceTimer;
}

- (NSMutableDictionary)enableNotificationPayload
{
  return self->_enableNotificationPayload;
}

- (NSMutableDictionary)disableNotificationPayload
{
  return self->_disableNotificationPayload;
}

- (void)setModifyNotificationsCoalesceTimer:(id)a3
{
  objc_storeStrong((id *)&self->_modifyNotificationsCoalesceTimer, a3);
}

uint64_t __27__HMDHome_currentAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "isCurrentAccessory");
  else
    v6 = 0;

  return v6;
}

HMDCharacteristicRequest *__62__HMDHome__readRequestTuplesFromMessage_outUnhandledRequests___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[HMDCharacteristicRequest requestWithCharacteristic:](HMDCharacteristicRequest, "requestWithCharacteristic:", a2);
}

BOOL __74__HMDHome_AccessoryRetrieval___retrieveTupleForPrimaryAccessory_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;

  v3 = a2;
  objc_msgSend(v3, "accessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqual:", v6))
    v7 = objc_msgSend(v3, "linkType") == *(_QWORD *)(a1 + 40);
  else
    v7 = 0;

  return v7;
}

void __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  if (objc_msgSend(v3, "matchesHAPAccessoryWithServerIdentifier:linkType:", *(_QWORD *)(a1 + 32), 0))
  {
    v4 = _Block_copy(*(const void **)(a1 + 56));
    v5 = v4;
    if (v4)
      (*((void (**)(void *, id))v4 + 2))(v4, v3);

    objc_msgSend(*(id *)(a1 + 40), "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke_2;
    v9[3] = &unk_1E89BE790;
    v9[4] = *(_QWORD *)(a1 + 40);
    v7 = v3;
    v8 = *(_QWORD *)(a1 + 64);
    v10 = v7;
    v12 = v8;
    v11 = *(id *)(a1 + 48);
    dispatch_async(v6, v9);

  }
}

- (id)hapAccessoriesForServer:(id)a3 linkType:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  int64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMDHome accessories](self, "accessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v9);
        v14 = *(id *)(*((_QWORD *)&v19 + 1) + 8 * v13);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v15 = v14;
        else
          v15 = 0;
        v16 = v15;

        if (v16)
        {
          v18 = a4;
          if (objc_msgSend(v16, "matchesHAPAccessoryWithServerIdentifier:linkType:", v6, &v18))
            objc_msgSend(v8, "addObject:", v16);
        }

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }

  return v8;
}

- (BOOL)getUpdateTransactionForAccessory:(id)a3 hapAccessory:(id)a4 accessoryTransaction:(id)a5 addSvcTransactions:(id *)a6 updateSvcTransactions:(id *)a7 removeSvcTransactions:(id *)a8
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  HMDServiceTransaction *v32;
  void *v33;
  uint64_t v34;
  HMDServiceTransaction *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  char v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  HMDServiceTransaction *v56;
  void *v57;
  HMDHome *v58;
  HMDHome *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  HMDHome *v64;
  NSObject *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t k;
  void *v74;
  void *v75;
  void *v76;
  char v77;
  HMDServiceTransaction *v78;
  HMDServiceTransaction *v79;
  void *v80;
  HMDHome *v81;
  NSObject *v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t m;
  void *v89;
  HMDServiceTransaction *v90;
  void *v91;
  void *v92;
  HMDServiceTransaction *v93;
  void *v94;
  HMDHome *v95;
  NSObject *v96;
  id v97;
  void *v98;
  HMDServiceTransaction *v99;
  HMDServiceTransaction *v100;
  BOOL v101;
  void *v102;
  void *v103;
  void *v104;
  void *v106;
  HMDServiceTransaction *v108;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  id v115;
  id v116;
  id v117;
  id v118;
  void *v121;
  HMDServiceTransaction *v122;
  id obj;
  uint64_t v124;
  HMDServiceTransaction *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  id v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _BYTE v147[128];
  _BYTE v148[128];
  uint8_t v149[128];
  uint8_t buf[4];
  id v151;
  __int16 v152;
  HMDServiceTransaction *v153;
  __int16 v154;
  HMDServiceTransaction *v155;
  __int16 v156;
  void *v157;
  _BYTE v158[128];
  _BYTE v159[128];
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v115 = a5;
  objc_msgSend(v10, "services");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v12, "mutableCopy");

  v145 = 0u;
  v146 = 0u;
  v143 = 0u;
  v144 = 0u;
  v106 = v11;
  objc_msgSend(v11, "services");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v143, v159, 16);
  v116 = v10;
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v144;
    v124 = 138544130;
    v110 = *(_QWORD *)v144;
    v111 = v14;
    while (2)
    {
      v18 = 0;
      v112 = v16;
      do
      {
        if (*(_QWORD *)v144 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v143 + 1) + 8 * v18);
        -[HMDHome hapMetadata](self, "hapMetadata");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "type");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v20, "shouldFilterServiceOfType:", v21);

        if ((v22 & 1) == 0)
        {
          v114 = v18;
          v117 = v13;
          v141 = 0u;
          v142 = 0u;
          v139 = 0u;
          v140 = 0u;
          objc_msgSend(v10, "services");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v139, v158, 16);
          if (v24)
          {
            v25 = v24;
            v26 = *(_QWORD *)v140;
            while (2)
            {
              for (i = 0; i != v25; ++i)
              {
                if (*(_QWORD *)v140 != v26)
                  objc_enumerationMutation(v23);
                v28 = *(void **)(*((_QWORD *)&v139 + 1) + 8 * i);
                objc_msgSend(v28, "instanceID");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "instanceID");
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                v31 = objc_msgSend(v29, "isEqual:", v30);

                if (v31)
                {
                  v32 = v28;
                  goto LABEL_17;
                }
              }
              v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v139, v158, 16);
              if (v25)
                continue;
              break;
            }
          }
          v32 = 0;
LABEL_17:

          objc_msgSend(v115, "uuid");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          if (v32)
            v34 = 2;
          else
            v34 = 1;
          -[HMDHome getServiceTransaction:parentUUID:changeType:](self, "getServiceTransaction:parentUUID:changeType:", v19, v33, v34);
          v35 = (HMDServiceTransaction *)objc_claimAutoreleasedReturnValue();

          -[HMDServiceTransaction type](v32, "type");
          v36 = objc_claimAutoreleasedReturnValue();
          if (v36)
          {
            v37 = (void *)v36;
            -[HMDServiceTransaction type](v32, "type");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDServiceTransaction serviceType](v35, "serviceType");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = objc_msgSend(v38, "isEqualToString:", v39);

            if ((v40 & 1) == 0)
            {

              v101 = 0;
              v84 = v117;
              v102 = v111;
              goto LABEL_75;
            }
          }
          -[HMDHome __updateServiceTransaction:accessoryTransaction:service:accessory:hapService:](self, "__updateServiceTransaction:accessoryTransaction:service:accessory:hapService:", v35, v115, v32, v10, v19);
          -[HMDServiceTransaction accessory](v32, "accessory");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "shortDescription");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = v42;
          if (v42)
          {
            v125 = v42;
          }
          else
          {
            -[HMDBackingStoreModelObject parentUUID](v35, "parentUUID");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "UUIDString");
            v125 = (HMDServiceTransaction *)objc_claimAutoreleasedReturnValue();

          }
          v13 = v117;

          if (v32)
          {
            -[HMDServiceTransaction modelObjectWithChangeType:](v32, "modelObjectWithChangeType:", 1);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v138 = 0;
            v121 = v45;
            objc_msgSend(v45, "diff:differingFields:", v35, &v138);
            v46 = v138;
            v113 = v46;
            v122 = v35;
            if (a7)
            {
              v47 = v46;
              if (objc_msgSend(v46, "count"))
              {
                v108 = v32;
                v48 = (void *)MEMORY[0x1D17BA0A0]();
                v49 = self;
                HMFGetOSLogHandle();
                v50 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v51 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138544130;
                  v151 = v51;
                  v152 = 2112;
                  v153 = v125;
                  v154 = 2114;
                  v155 = v35;
                  v156 = 2114;
                  v157 = v47;
                  _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %@] Received service update %{public}@ due to diff %{public}@", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v48);
                v136 = 0u;
                v137 = 0u;
                v134 = 0u;
                v135 = 0u;
                obj = v47;
                v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v134, v149, 16);
                if (v52)
                {
                  v53 = v52;
                  v54 = *(_QWORD *)v135;
                  do
                  {
                    for (j = 0; j != v53; ++j)
                    {
                      if (*(_QWORD *)v135 != v54)
                        objc_enumerationMutation(obj);
                      v56 = *(HMDServiceTransaction **)(*((_QWORD *)&v134 + 1) + 8 * j);
                      v57 = (void *)MEMORY[0x1D17BA0A0]();
                      v58 = v49;
                      v59 = v49;
                      HMFGetOSLogHandle();
                      v60 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v61 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v121, "valueForKeyPath:", v56);
                        v62 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138544130;
                        v151 = v61;
                        v152 = 2114;
                        v153 = v125;
                        v154 = 2114;
                        v155 = v56;
                        v156 = 2114;
                        v157 = v62;
                        _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] LOCAL %{public}@: %{public}@", buf, 0x2Au);

                      }
                      objc_autoreleasePoolPop(v57);
                      v63 = (void *)MEMORY[0x1D17BA0A0]();
                      v64 = v59;
                      HMFGetOSLogHandle();
                      v65 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v66 = (void *)objc_claimAutoreleasedReturnValue();
                        -[HMDServiceTransaction valueForKeyPath:](v122, "valueForKeyPath:", v56);
                        v67 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138544130;
                        v151 = v66;
                        v152 = 2114;
                        v153 = v125;
                        v154 = 2114;
                        v155 = v56;
                        v156 = 2114;
                        v157 = v67;
                        _os_log_impl(&dword_1CD062000, v65, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] UPDATE %{public}@: %{public}@", buf, 0x2Au);

                      }
                      objc_autoreleasePoolPop(v63);
                      v49 = v58;
                    }
                    v53 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v134, v149, 16);
                  }
                  while (v53);
                }

                objc_msgSend(*a7, "addObject:", v122);
                v13 = v117;
                v32 = v108;
              }
            }
            objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v13, "count"));
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            v130 = 0u;
            v131 = 0u;
            v132 = 0u;
            v133 = 0u;
            v69 = v13;
            v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v130, v148, 16);
            if (v70)
            {
              v71 = v70;
              v72 = *(_QWORD *)v131;
              do
              {
                for (k = 0; k != v71; ++k)
                {
                  if (*(_QWORD *)v131 != v72)
                    objc_enumerationMutation(v69);
                  v74 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * k);
                  objc_msgSend(v74, "uuid");
                  v75 = (void *)objc_claimAutoreleasedReturnValue();
                  -[HMDBackingStoreModelObject uuid](v32, "uuid");
                  v76 = (void *)objc_claimAutoreleasedReturnValue();
                  v77 = objc_msgSend(v75, "isEqual:", v76);

                  if ((v77 & 1) == 0)
                    objc_msgSend(v68, "addObject:", v74);
                }
                v71 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v130, v148, 16);
              }
              while (v71);
            }

            v78 = v122;
            v79 = v32;
            v13 = v68;
            v10 = v116;
            v17 = v110;
            v14 = v111;
            v16 = v112;
            v18 = v114;
          }
          else
          {
            v80 = (void *)MEMORY[0x1D17BA0A0]();
            v81 = self;
            HMFGetOSLogHandle();
            v82 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v151 = v83;
              v152 = 2114;
              v153 = v125;
              v154 = 2114;
              v155 = v35;
              _os_log_impl(&dword_1CD062000, v82, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Adding service %{public}@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v80);
            objc_msgSend(*a6, "addObject:", v35);
            v79 = v35;
            v17 = v110;
            v14 = v111;
            v16 = v112;
            v18 = v114;
            v78 = v125;
          }

        }
        ++v18;
      }
      while (v18 != v16);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v143, v159, 16);
      if (v16)
        continue;
      break;
    }
  }

  v128 = 0u;
  v129 = 0u;
  v126 = 0u;
  v127 = 0u;
  v84 = v13;
  v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v126, v147, 16);
  if (v85)
  {
    v86 = v85;
    v118 = v84;
    v87 = *(_QWORD *)v127;
    do
    {
      for (m = 0; m != v86; ++m)
      {
        if (*(_QWORD *)v127 != v87)
          objc_enumerationMutation(v118);
        v89 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * m);
        v90 = [HMDServiceTransaction alloc];
        objc_msgSend(v89, "uuid");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "uuid");
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        v93 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v90, "initWithObjectChangeType:uuid:parentUUID:", 3, v91, v92);

        v94 = (void *)MEMORY[0x1D17BA0A0]();
        v95 = self;
        HMFGetOSLogHandle();
        v96 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v97 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v89, "accessory");
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v98, "shortDescription");
          v99 = (HMDServiceTransaction *)objc_claimAutoreleasedReturnValue();
          v100 = v99;
          if (!v99)
          {
            -[HMDBackingStoreModelObject parentUUID](v93, "parentUUID");
            v124 = objc_claimAutoreleasedReturnValue();
            v100 = (HMDServiceTransaction *)v124;
          }
          *(_DWORD *)buf = 138543874;
          v151 = v97;
          v152 = 2114;
          v153 = v100;
          v154 = 2114;
          v155 = v93;
          _os_log_impl(&dword_1CD062000, v96, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Removing service %{public}@", buf, 0x20u);
          if (!v99)

          v10 = v116;
        }

        objc_autoreleasePoolPop(v94);
        objc_msgSend(*a8, "addObject:", v93);

      }
      v86 = objc_msgSend(v118, "countByEnumeratingWithState:objects:count:", &v126, v147, 16);
    }
    while (v86);
    v84 = v118;

  }
  else
  {

    if (!a8)
    {
      v101 = 1;
      goto LABEL_76;
    }
  }
  v103 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(*a8, "na_map:", &__block_literal_global_1407);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v103, "setWithArray:", v104);
  v102 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome filterServiceTransactions:removedServiceUUIDs:](self, "filterServiceTransactions:removedServiceUUIDs:", *a6, v102);
  -[HMDHome filterServiceTransactions:removedServiceUUIDs:](self, "filterServiceTransactions:removedServiceUUIDs:", *a7, v102);
  v101 = 1;
LABEL_75:

LABEL_76:
  return v101;
}

- (id)getServiceTransaction:(id)a3 parentUUID:(id)a4 changeType:(unint64_t)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  HMDServiceTransaction *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v7 = a3;
  v8 = a4;
  objc_msgSend(v7, "instanceID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDService generateUUIDWithAccessoryUUID:serviceID:](HMDService, "generateUUIDWithAccessoryUUID:serviceID:", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:]([HMDServiceTransaction alloc], "initWithObjectChangeType:uuid:parentUUID:", a5, v10, v8);
  if (v7)
  {
    objc_msgSend(v7, "instanceID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDServiceTransaction setInstanceID:](v11, "setInstanceID:", v12);

    objc_msgSend(v7, "type");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDServiceTransaction setServiceType:](v11, "setServiceType:", v13);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v14 = v7;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v15 = v14;
      else
        v15 = 0;
      v16 = v15;

      objc_msgSend(v16, "endpoint");
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDServiceTransaction setMatterEndpointID:](v11, "setMatterEndpointID:", v17);
    }
    objc_msgSend(v7, "linkedServices");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend(v7, "linkedServices");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)objc_msgSend(v19, "copy");
      -[HMDServiceTransaction setLinkedServices:](v11, "setLinkedServices:", v20);

    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v7, "serviceProperties"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDServiceTransaction setServiceProperties:](v11, "setServiceProperties:", v21);

  }
  return v11;
}

uint64_t __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_dequeueRetrievalForAccessory:linkType:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

- (NSString)name
{
  NSString *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_name;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (HMDRoom)roomForEntireHome
{
  return self->_roomForEntireHome;
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t1337 != -1)
    dispatch_once(&logCategory__hmf_once_t1337, &__block_literal_global_1435);
  return (id)logCategory__hmf_once_v1338;
}

- (void)_processUpdatedAccessoryServer:(id)a3 reAddServices:(BOOL)a4
{
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  _BOOL8 v39;
  void *v40;
  void *v41;
  _BOOL8 v42;
  void *v43;
  void *v44;
  _BOOL8 v45;
  void *v46;
  _BOOL4 v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  __CFString *v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  HMDHome *v62;
  NSObject *v63;
  void *v64;
  void *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  int v81;
  NSObject *v82;
  void *v83;
  void *v84;
  unint64_t v85;
  __CFString *v86;
  __CFString *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  __CFString *v97;
  void *v98;
  HMDHome *v99;
  NSObject *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  HMDHome *v108;
  NSObject *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  HMDHome *v114;
  NSObject *v115;
  void *v116;
  void *v117;
  void *v118;
  __CFString *v119;
  void *v120;
  void *v121;
  void *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t k;
  void *v127;
  void *v128;
  void *v129;
  id v130;
  void *v131;
  HMDHome *v132;
  NSObject *v133;
  void *v134;
  void *v135;
  dispatch_group_t v136;
  id v137;
  uint64_t v138;
  void *v139;
  HMDHome *v140;
  NSObject *v141;
  void *v142;
  void *v143;
  void *v144;
  __CFString *v145;
  uint64_t v146;
  __CFString *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t n;
  void *v156;
  void *v157;
  void *v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t ii;
  void *v163;
  id v164;
  NSObject *v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t m;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  int v183;
  uint64_t v184;
  id v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  id v191;
  void *v192;
  void *v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  id obj;
  id obja;
  id objb;
  id val;
  HMDHome *vala;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  id v209;
  id v210;
  uint64_t v211;
  HMDHome *v212;
  id v213;
  void *context;
  void *contexta;
  void *contextb;
  void *v217;
  id v218;
  id v219;
  void *v220;
  id v221;
  id v222;
  HMDHome *v223;
  void *v224;
  void *v225;
  id v226;
  _QWORD v227[4];
  id v228;
  NSObject *v229;
  id v230;
  id v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  id v244;
  id v245;
  id v246;
  id v247;
  id v248;
  id v249;
  id v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  id v259;
  id v260;
  id v261;
  id v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  _BYTE v279[128];
  _BYTE v280[128];
  _BYTE v281[128];
  void *v282;
  _BYTE v283[128];
  _BYTE v284[128];
  _BYTE v285[128];
  _BYTE v286[128];
  uint8_t v287[128];
  uint8_t buf[4];
  void *v289;
  __int16 v290;
  uint64_t v291;
  __int16 v292;
  id v293;
  __int16 v294;
  __CFString *v295;
  __int16 v296;
  void *v297;
  __int16 v298;
  void *v299;
  uint64_t v300;

  v300 = *MEMORY[0x1E0C80C00];
  v185 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v289 = v8;
    v290 = 2112;
    v291 = (uint64_t)v185;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating existing HMDAccessory objects from HAPAccessory objects for server: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v188 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v187 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _primaryAccessoryForServer:](v6, "_primaryAccessoryForServer:", v185);
  v209 = (id)objc_claimAutoreleasedReturnValue();
  v184 = objc_msgSend(v209, "configNumber");
  v9 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend(v185, "accessories");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "arrayWithArray:", v10);
  v192 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHome hapAccessoriesForServer:](v6, "hapAccessoriesForServer:", v185);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "arrayWithArray:", v12);
  v205 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome _discoveredAccessoriesForServer:](v6, "_discoveredAccessoriesForServer:", v185);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v205, "addObjectsFromArray:", v13);

  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v223 = v6;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v205, "count");
    objc_msgSend(v185, "identifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v185, "accessories");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "count");
    *(_DWORD *)buf = 138544130;
    v289 = v16;
    v290 = 2050;
    v291 = v17;
    v292 = 2114;
    v293 = v18;
    v294 = 2050;
    v295 = (__CFString *)v20;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Found %{public}tu existing HMDAccessory objects associated with the server: '%{public}@' and discovered %{public}tu HAPAccessory objects", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v14);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v189 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v190 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v186 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v220 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v217 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  context = (void *)objc_claimAutoreleasedReturnValue();
  v269 = 0u;
  v270 = 0u;
  v267 = 0u;
  v268 = 0u;
  objc_msgSend(v185, "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v211 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v267, v286, 16);
  if (v211)
  {
    v206 = *(_QWORD *)v268;
    do
    {
      for (i = 0; i != v211; ++i)
      {
        if (*(_QWORD *)v268 != v206)
          objc_enumerationMutation(obj);
        v22 = *(void **)(*((_QWORD *)&v267 + 1) + 8 * i);
        v263 = 0u;
        v264 = 0u;
        v265 = 0u;
        v266 = 0u;
        v23 = v205;
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v263, v285, 16);
        if (!v24)
          goto LABEL_21;
        v25 = *(_QWORD *)v264;
        while (2)
        {
          for (j = 0; j != v24; ++j)
          {
            if (*(_QWORD *)v264 != v25)
              objc_enumerationMutation(v23);
            v27 = *(id *)(*((_QWORD *)&v263 + 1) + 8 * j);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v28 = v27;
            else
              v28 = 0;
            v29 = v28;

            if ((objc_msgSend(v29, "matchesHAPAccessory:", v22) & 1) != 0)
            {

              if (!v29)
                goto LABEL_56;
              if ((objc_msgSend(v29, "isPrimary") & 1) == 0 && (objc_msgSend(v29, "isPaired") & 1) == 0)
              {
                v61 = (void *)MEMORY[0x1D17BA0A0]();
                v62 = v223;
                HMFGetOSLogHandle();
                v63 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v64 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v29, "shortDescription");
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v289 = v64;
                  v290 = 2114;
                  v291 = (uint64_t)v65;
                  _os_log_impl(&dword_1CD062000, v63, OS_LOG_TYPE_INFO, "%{public}@Skipping configuring unpaired secondary accessory with identifier: %{public}@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v61);
                goto LABEL_55;
              }
              objc_msgSend(v188, "addObject:", v22);
              objc_msgSend(v187, "addObject:", v29);
              objc_msgSend(v29, "uuid");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "hostAccessory");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "uuid");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:](v223, "getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:", v22, v29, v30, v32, 2);
              v33 = (void *)objc_claimAutoreleasedReturnValue();

              v34 = v22;
              v35 = v29;
              v36 = v33;
              objc_msgSend(v35, "initialManufacturer");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              if (v37)
              {
LABEL_28:

              }
              else
              {
                objc_msgSend(v34, "manufacturer");
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                v39 = v38 == 0;

                if (!v39)
                {
                  objc_msgSend(v34, "manufacturer");
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v36, "setInitialManufacturer:", v37);
                  goto LABEL_28;
                }
              }
              objc_msgSend(v35, "initialModel");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              if (v40)
              {
LABEL_32:

              }
              else
              {
                objc_msgSend(v34, "model");
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                v42 = v41 == 0;

                if (!v42)
                {
                  objc_msgSend(v34, "model");
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v36, "setInitialModel:", v40);
                  goto LABEL_32;
                }
              }
              objc_msgSend(v35, "initialCategoryIdentifier");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              if (v43)
              {
LABEL_36:

              }
              else
              {
                objc_msgSend(v34, "category");
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                v45 = v44 == 0;

                if (!v45)
                {
                  objc_msgSend(v34, "category");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v36, "setInitialCategoryIdentifier:", v43);
                  goto LABEL_36;
                }
              }
              objc_msgSend(v35, "initialServiceTypeUUIDs");
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              v47 = v46 == 0;

              if (v47)
              {
                serviceTypeUUIDsForAccessory(v34);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                if (v48)
                  objc_msgSend(v36, "setInitialServiceTypeUUIDs:", v48);

              }
              v262 = v220;
              v261 = v217;
              v260 = context;
              -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:](v223, "getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:", v35, v34, v36, &v262, &v261, &v260);
              val = v262;

              v221 = v261;
              v218 = v260;

              if (objc_msgSend(v34, "isPrimary"))
              {
                objc_msgSend(v185, "setupHash");
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                if (v49)
                {
                  contexta = (void *)MEMORY[0x1D17BA0A0]();
                  v50 = v223;
                  HMFGetOSLogHandle();
                  v51 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v35, "shortDescription");
                    v53 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543874;
                    v289 = v52;
                    v290 = 2112;
                    v291 = (uint64_t)v49;
                    v292 = 2112;
                    v293 = v53;
                    _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Saving setup hash '%@ for accessory %@", buf, 0x20u);

                  }
                  objc_autoreleasePoolPop(contexta);
                  objc_msgSend(v36, "setAccessorySetupHash:", v49);
                }
                -[HMDHome _processUpdatedProductDataForAccessory:hapAccessory:transaction:](v223, "_processUpdatedProductDataForAccessory:hapAccessory:transaction:", v35, v34, v36);

              }
              objc_msgSend(v35, "modelObjectWithChangeType:", 1);
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              v259 = 0;
              objc_msgSend(v54, "diff:differingFields:", v36, &v259);
              v55 = (__CFString *)v259;

              if (-[__CFString count](v55, "count"))
              {
                v56 = (void *)MEMORY[0x1D17BA0A0]();
                v57 = v223;
                HMFGetOSLogHandle();
                v58 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v59 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v209, "shortDescription");
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138544130;
                  v289 = v59;
                  v290 = 2114;
                  v291 = (uint64_t)v60;
                  v292 = 2114;
                  v293 = v36;
                  v294 = 2114;
                  v295 = v55;
                  _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Received accessory update %{public}@ due to diff %{public}@", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v56);
                objc_msgSend(v190, "addObject:", v36);
              }

              context = v218;
              v217 = v221;
              v220 = val;
              goto LABEL_55;
            }

          }
          v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v263, v285, 16);
          if (v24)
            continue;
          break;
        }
LABEL_21:
        v27 = v23;
LABEL_55:

LABEL_56:
        ;
      }
      v211 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v267, v286, 16);
    }
    while (v211);
  }

  v66 = (void *)MEMORY[0x1D17BA0A0]();
  vala = v223;
  HMFGetOSLogHandle();
  v67 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v289 = v68;
    v290 = 2112;
    v291 = (uint64_t)v185;
    _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_INFO, "%{public}@Finished updating paired accessories for server: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v66);
  objc_msgSend(v192, "removeObjectsInArray:", v188);
  objc_msgSend(v205, "removeObjectsInArray:", v187);
  -[HMDHome accessories](vala, "accessories");
  v199 = (void *)objc_claimAutoreleasedReturnValue();
  v257 = 0u;
  v258 = 0u;
  v255 = 0u;
  v256 = 0u;
  v191 = v192;
  obja = (id)objc_msgSend(v191, "countByEnumeratingWithState:objects:count:", &v255, v284, 16);
  if (obja)
  {
    v197 = *(_QWORD *)v256;
    do
    {
      v69 = 0;
      do
      {
        if (*(_QWORD *)v256 != v197)
        {
          v70 = v69;
          objc_enumerationMutation(v191);
          v69 = v70;
        }
        v207 = v69;
        v71 = *(void **)(*((_QWORD *)&v255 + 1) + 8 * v69);
        v251 = 0u;
        v252 = 0u;
        v253 = 0u;
        v254 = 0u;
        v72 = v199;
        v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v251, v283, 16);
        if (v73)
        {
          v74 = *(_QWORD *)v252;
LABEL_67:
          v75 = 0;
          while (1)
          {
            if (*(_QWORD *)v252 != v74)
              objc_enumerationMutation(v72);
            v76 = *(id *)(*((_QWORD *)&v251 + 1) + 8 * v75);
            objc_opt_class();
            v77 = (objc_opt_isKindOfClass() & 1) != 0 ? v76 : 0;
            v78 = v77;

            objc_msgSend(v71, "identifier");
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "instanceID");
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            v81 = objc_msgSend(v78, "matchesHAPAccessoryWithServerIdentifier:instanceID:", v79, v80);

            if (v81)
              break;

            if (v73 == ++v75)
            {
              v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v251, v283, 16);
              if (v73)
                goto LABEL_67;
              goto LABEL_76;
            }
          }
          v224 = (void *)MEMORY[0x1D17BA0A0]();
          v212 = vala;
          HMFGetOSLogHandle();
          v82 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v193 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "server");
            v195 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v195, "identifier");
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "instanceID");
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            v85 = objc_msgSend(v71, "linkType");
            v86 = CFSTR("Undefined");
            if (v85 <= 2)
              v86 = off_1E89ABEB0[v85];
            v87 = v86;
            objc_msgSend(v78, "name");
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v78, "uniqueIdentifier");
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544642;
            v289 = v193;
            v290 = 2114;
            v291 = (uint64_t)v83;
            v292 = 2114;
            v293 = v84;
            v294 = 2112;
            v295 = v87;
            v296 = 2112;
            v297 = v88;
            v298 = 2112;
            v299 = v89;
            _os_log_impl(&dword_1CD062000, v82, OS_LOG_TYPE_INFO, "%{public}@HAPAccessory %{public}@/%{public}@/%@ matches existing HMDAccessory %@(%@)", buf, 0x3Eu);

          }
          objc_autoreleasePoolPop(v224);

          if (v78)
          {
            objc_msgSend(v205, "removeObject:", v78);
            objc_msgSend(v78, "uuid");
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v78, "hostAccessory");
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v91, "uuid");
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:](v212, "getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:", v71, v78, v90, v92, 2);
            v225 = (void *)objc_claimAutoreleasedReturnValue();

            v250 = v220;
            v249 = v217;
            v248 = context;
            -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:](v212, "getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:", v78, v71, v225, &v250, &v249, &v248);
            v93 = v250;

            v94 = v249;
            v95 = v248;

            objc_msgSend(v78, "modelObjectWithChangeType:", 1);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            v247 = 0;
            objc_msgSend(v96, "diff:differingFields:", v225, &v247);
            v97 = (__CFString *)v247;

            if (-[__CFString count](v97, "count"))
            {
              v98 = (void *)MEMORY[0x1D17BA0A0]();
              v99 = v212;
              HMFGetOSLogHandle();
              v100 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v101 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v209, "uuid");
                v102 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138544130;
                v289 = v101;
                v290 = 2114;
                v291 = (uint64_t)v102;
                v292 = 2114;
                v293 = v225;
                v294 = 2114;
                v295 = v97;
                _os_log_impl(&dword_1CD062000, v100, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Received accessory update %{public}@ due to diff %{public}@", buf, 0x2Au);

              }
              objc_autoreleasePoolPop(v98);
              objc_msgSend(v190, "addObject:", v225);
            }
            goto LABEL_94;
          }
        }
        else
        {
LABEL_76:

        }
        if (v209)
        {
          objc_msgSend(v71, "instanceID");
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v103, "stringValue");
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          v282 = v104;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v282, 1);
          v76 = (id)objc_claimAutoreleasedReturnValue();

          v105 = (void *)MEMORY[0x1E0CB3A28];
          objc_msgSend(v209, "uuid");
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v105, "hm_deriveUUIDFromBaseUUID:withSalts:", v106, v76);
          v225 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v225)
          {
            v107 = (void *)MEMORY[0x1D17BA0A0]();
            v108 = vala;
            HMFGetOSLogHandle();
            v109 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v110 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v209, "shortDescription");
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v289 = v110;
              v290 = 2112;
              v291 = (uint64_t)v111;
              _os_log_impl(&dword_1CD062000, v109, OS_LOG_TYPE_ERROR, "%{public}@Error during _processUpdatedAccessoryServer: Primary Accessory for Server has nil UUID: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v107);
            +[HMDTTRManager sharedManager](HMDTTRManager, "sharedManager");
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v112, "requestRadarWithMessage:radarTitle:", CFSTR("Null identifier for accessory detected. Please file a radar against: HomeKit | New Bugs."), CFSTR("PrimaryAccessoryForServer results in nil uuid during processUpdatedAccessoryServer"));

          }
          v113 = (void *)MEMORY[0x1D17BA0A0]();
          v114 = vala;
          HMFGetOSLogHandle();
          v115 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v209, "shortDescription");
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "instanceID");
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v225, "UUIDString");
            v119 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v289 = v116;
            v290 = 2114;
            v291 = (uint64_t)v117;
            v292 = 2114;
            v293 = v118;
            v294 = 2114;
            v295 = v119;
            _os_log_impl(&dword_1CD062000, v115, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Adding a new bridged accessory instanceID %{public}@ and uuid %{public}@", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v113);
          objc_msgSend(v209, "uuid");
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:](v114, "getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:", v71, 0, v225, v120, 1);
          v97 = (__CFString *)objc_claimAutoreleasedReturnValue();

          v246 = v220;
          v245 = v217;
          v244 = context;
          -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:](v114, "getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:", 0, v71, v97, &v246, &v245, &v244);
          v93 = v246;

          v94 = v245;
          v95 = v244;

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v209, "certificationStatus"));
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString setCertificationStatus:](v97, "setCertificationStatus:", v121);

          -[HMDHome uuidToHAPAccessoryConfigTable](v114, "uuidToHAPAccessoryConfigTable");
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v122, "setObject:forKey:", v71, v225);

          objc_msgSend(v189, "addObject:", v97);
LABEL_94:

          context = v95;
          v217 = v94;
          v220 = v93;
        }
        v69 = v207 + 1;
      }
      while ((id)(v207 + 1) != obja);
      obja = (id)objc_msgSend(v191, "countByEnumeratingWithState:objects:count:", &v255, v284, 16);
    }
    while (obja);
  }

  if (objc_msgSend(v205, "count"))
  {
    v242 = 0u;
    v243 = 0u;
    v240 = 0u;
    v241 = 0u;
    v123 = v205;
    v124 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v240, v281, 16);
    if (v124)
    {
      v125 = *(_QWORD *)v241;
      do
      {
        for (k = 0; k != v124; ++k)
        {
          if (*(_QWORD *)v241 != v125)
            objc_enumerationMutation(v123);
          v127 = *(void **)(*((_QWORD *)&v240 + 1) + 8 * k);
          if ((objc_msgSend(v127, "isPrimary") & 1) == 0)
          {
            objc_msgSend(v127, "transactionWithObjectChangeType:", 3);
            v128 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v129 = v128;
            else
              v129 = 0;
            v130 = v129;

            v131 = (void *)MEMORY[0x1D17BA0A0]();
            v132 = vala;
            HMFGetOSLogHandle();
            v133 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v134 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v209, "shortDescription");
              v135 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v289 = v134;
              v290 = 2114;
              v291 = (uint64_t)v135;
              v292 = 2114;
              v293 = v130;
              _os_log_impl(&dword_1CD062000, v133, OS_LOG_TYPE_INFO, "%{public}@[Pair-Verify %{public}@] Removing a secondary accessory %{public}@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v131);
            if (v130)
              objc_msgSend(v186, "addObject:", v130);

          }
        }
        v124 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v240, v281, 16);
      }
      while (v124);
    }

  }
  v136 = dispatch_group_create();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  v213 = v185;
  v137 = v209;
  v222 = v220;
  v219 = v217;
  v226 = context;
  contextb = v137;
  v138 = objc_msgSend(v137, "configNumber");
  if (objc_msgSend(v213, "configNumber") != v138)
  {

LABEL_123:
    v147 = CFSTR("Add Accessory");
    goto LABEL_124;
  }
  if (!objc_msgSend(v226, "count") && !objc_msgSend(v222, "count"))
  {
    v277 = 0u;
    v278 = 0u;
    v275 = 0u;
    v276 = 0u;
    objb = v219;
    v198 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v275, buf, 16);
    if (v198)
    {
      v167 = *(_QWORD *)v276;
      v194 = *(_QWORD *)v276;
      while (2)
      {
        v168 = 0;
        do
        {
          if (*(_QWORD *)v276 != v167)
          {
            v169 = v168;
            objc_enumerationMutation(objb);
            v168 = v169;
          }
          v196 = v168;
          v170 = *(void **)(*((_QWORD *)&v275 + 1) + 8 * v168);
          objc_msgSend(v170, "instanceID");
          v171 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(contextb, "findService:", v171);
          v172 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v172, "serviceType");
          v173 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v170, "serviceType");
          v174 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v171) = objc_msgSend(v173, "isEqualToString:", v174);

          if (!(_DWORD)v171)
          {
LABEL_157:

            goto LABEL_119;
          }
          v273 = 0u;
          v274 = 0u;
          v271 = 0u;
          v272 = 0u;
          objc_msgSend(v170, "characteristics");
          v210 = (id)objc_claimAutoreleasedReturnValue();
          v175 = objc_msgSend(v210, "countByEnumeratingWithState:objects:count:", &v271, v287, 16);
          if (v175)
          {
            v176 = *(_QWORD *)v272;
            while (2)
            {
              for (m = 0; m != v175; ++m)
              {
                if (*(_QWORD *)v272 != v176)
                  objc_enumerationMutation(v210);
                v178 = *(void **)(*((_QWORD *)&v271 + 1) + 8 * m);
                objc_msgSend(v178, "objectForKeyedSubscript:", CFSTR("characteristicInstanceID"));
                v179 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v178, "objectForKeyedSubscript:", CFSTR("characteristicType"));
                v180 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v172, "findCharacteristic:", v179);
                v181 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v181, "characteristicType");
                v182 = (void *)objc_claimAutoreleasedReturnValue();
                v183 = objc_msgSend(v182, "isEqualToString:", v180);

                if (!v183)
                {

                  goto LABEL_157;
                }
              }
              v175 = objc_msgSend(v210, "countByEnumeratingWithState:objects:count:", &v271, v287, 16);
              if (v175)
                continue;
              break;
            }
          }

          v167 = v194;
          v168 = v196 + 1;
        }
        while (v196 + 1 != v198);
        v198 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v275, buf, 16);
        v167 = v194;
        if (v198)
          continue;
        break;
      }
    }

    goto LABEL_123;
  }

LABEL_119:
  v139 = (void *)MEMORY[0x1D17BA0A0]();
  v140 = vala;
  HMFGetOSLogHandle();
  v141 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(contextb, "shortDescription");
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v184);
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v289 = v142;
    v290 = 2112;
    v291 = (uint64_t)v143;
    v292 = 2112;
    v293 = v144;
    _os_log_impl(&dword_1CD062000, v141, OS_LOG_TYPE_ERROR, "%{public}@Only storing the update locally since the accessory %@ didn't update its config number: %@ after updating its services/characteristics.", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v139);
  v145 = CFSTR("Add Accessory Locally");
  +[HMDBackingStoreTransactionOptions defaultLocalOptions](HMDBackingStoreTransactionOptions, "defaultLocalOptions");
  v146 = objc_claimAutoreleasedReturnValue();

  v147 = CFSTR("Add Accessory Locally");
  v208 = (void *)v146;
LABEL_124:
  -[HMDHome backingStore](vala, "backingStore");
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v148, "transaction:options:", v147, v208);
  v149 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v190, "arrayByAddingObjectsFromArray:", v189);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "arrayByAddingObjectsFromArray:", v186);
  v151 = (void *)objc_claimAutoreleasedReturnValue();

  v238 = 0u;
  v239 = 0u;
  v236 = 0u;
  v237 = 0u;
  v152 = v151;
  v153 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v236, v280, 16);
  if (v153)
  {
    v154 = *(_QWORD *)v237;
    do
    {
      for (n = 0; n != v153; ++n)
      {
        if (*(_QWORD *)v237 != v154)
          objc_enumerationMutation(v152);
        v156 = *(void **)(*((_QWORD *)&v236 + 1) + 8 * n);
        objc_msgSend(v156, "setConfigurationTracker:", v136);
        objc_msgSend(v149, "add:withMessage:", v156, 0);
      }
      v153 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v236, v280, 16);
    }
    while (v153);
  }

  objc_msgSend(v219, "arrayByAddingObjectsFromArray:", v222);
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v157, "arrayByAddingObjectsFromArray:", v226);
  v158 = (void *)objc_claimAutoreleasedReturnValue();

  v234 = 0u;
  v235 = 0u;
  v232 = 0u;
  v233 = 0u;
  v159 = v158;
  v160 = objc_msgSend(v159, "countByEnumeratingWithState:objects:count:", &v232, v279, 16);
  if (v160)
  {
    v161 = *(_QWORD *)v233;
    do
    {
      for (ii = 0; ii != v160; ++ii)
      {
        if (*(_QWORD *)v233 != v161)
          objc_enumerationMutation(v159);
        v163 = *(void **)(*((_QWORD *)&v232 + 1) + 8 * ii);
        objc_msgSend(v163, "setConfigurationTracker:", v136);
        objc_msgSend(v149, "add:withMessage:", v163, 0);
      }
      v160 = objc_msgSend(v159, "countByEnumeratingWithState:objects:count:", &v232, v279, 16);
    }
    while (v160);
  }

  objc_initWeak((id *)buf, vala);
  v227[0] = MEMORY[0x1E0C809B0];
  v227[1] = 3221225472;
  v227[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke;
  v227[3] = &unk_1E89B94D0;
  objc_copyWeak(&v231, (id *)buf);
  v164 = v213;
  v228 = v164;
  v165 = v136;
  v229 = v165;
  v166 = v189;
  v230 = v166;
  objc_msgSend(v149, "run:", v227);

  objc_destroyWeak(&v231);
  objc_destroyWeak((id *)buf);

}

- (HMDAccessory)currentAccessory
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_firstObjectPassingTest:", &__block_literal_global_912);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDAccessory *)v3;
}

- (id)accessoryWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (NSArray)accessories
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableDictionary allValues](self->_accessories, "allValues");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t i;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t k;
  void *v19;
  void *v20;
  void *v21;
  _BOOL8 v22;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  id obj;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD block[5];
  id v34;
  id v35;
  _QWORD v36[6];
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v29 = a1;
    objc_msgSend(*(id *)(a1 + 32), "accessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = WeakRetained;
    objc_msgSend(WeakRetained, "accessories");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    obj = v3;
    v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
    if (v31)
    {
      v28 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v31; ++i)
        {
          if (*(_QWORD *)v47 != v28)
            objc_enumerationMutation(obj);
          v6 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
          v42 = 0u;
          v43 = 0u;
          v44 = 0u;
          v45 = 0u;
          v7 = v30;
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
          if (v8)
          {
            v9 = v8;
            v10 = *(_QWORD *)v43;
            do
            {
              for (j = 0; j != v9; ++j)
              {
                if (*(_QWORD *)v43 != v10)
                  objc_enumerationMutation(v7);
                v12 = *(id *)(*((_QWORD *)&v42 + 1) + 8 * j);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v13 = v12;
                else
                  v13 = 0;
                v14 = v13;

                if (v14 && objc_msgSend(v14, "matchesHAPAccessory:", v6))
                  objc_msgSend(v4, "setObject:forKey:", v6, v14);

              }
              v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
            }
            while (v9);
          }

        }
        v31 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
      }
      while (v31);
    }

    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v15 = v4;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
    WeakRetained = v26;
    if (v16)
    {
      v17 = v16;
      v32 = *(_QWORD *)v39;
      do
      {
        for (k = 0; k != v17; ++k)
        {
          if (*(_QWORD *)v39 != v32)
            objc_enumerationMutation(v15);
          v19 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * k);
          dispatch_group_enter(*(dispatch_group_t *)(v29 + 40));
          objc_msgSend(v15, "objectForKey:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "notificationRegistrations");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v21, "count") != 0;
          objc_msgSend(v26, "workQueue");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v36[0] = MEMORY[0x1E0C809B0];
          v36[1] = 3221225472;
          v36[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2;
          v36[3] = &unk_1E89C20C8;
          v36[4] = v19;
          v36[5] = v26;
          v37 = *(id *)(v29 + 40);
          objc_msgSend(v19, "configureWithAccessory:homeNotificationsEnabled:queue:completion:", v20, v22, v23, v36);

        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
      }
      while (v17);
    }

    v24 = *(NSObject **)(v29 + 40);
    objc_msgSend(v26, "workQueue");
    v25 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1416;
    block[3] = &unk_1E89C20C8;
    block[4] = v26;
    v34 = *(id *)(v29 + 32);
    v35 = *(id *)(v29 + 48);
    dispatch_group_notify(v24, v25, block);

  }
}

- (OS_dispatch_queue)workQueue
{
  return self->_workQueue;
}

- (HMDBackingStore)backingStore
{
  HMDBackingStore *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_backingStore;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (id)_buildRequestMapTableFromRequests:(id)a3 pendingResponses:(id)a4
{
  id v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  __int128 v28;
  id v30;
  id obj;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v30 = a4;
  objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
  v32 = (id)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = v5;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v34;
    *(_QWORD *)&v7 = 138543618;
    v28 = v7;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v34 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v11, "characteristic", v28);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "service");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          if ((objc_msgSend(v14, "isPrimary") & 1) == 0)
          {
            objc_msgSend(v14, "bridge");
            v15 = objc_claimAutoreleasedReturnValue();

            v14 = (void *)v15;
          }
          objc_msgSend(v32, "objectForKey:", v14);
          v16 = objc_claimAutoreleasedReturnValue();
          v17 = (void *)v16;
          v18 = (void *)MEMORY[0x1E0C9AA60];
          if (v16)
            v18 = (void *)v16;
          v19 = v18;

          +[HMDCharacteristicRequest requestWithCharacteristic:](HMDCharacteristicRequest, "requestWithCharacteristic:", v12);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "arrayByAddingObject:", v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v32, "setObject:forKey:", v21, v14);
        }
        else
        {
          v22 = v9;
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = (void *)MEMORY[0x1D17BA0A0]();
          v24 = self;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v28;
            v38 = v26;
            v39 = 2112;
            v40 = v11;
            _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Aborting characteristic request, accessory is nil %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v23);
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v11, v14);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "addToPendingResponses:", v21);
          v9 = v22;
        }

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v8);
  }

  return v32;
}

void __168__HMDHome__sendReadRequestToAccessoryServer_requestMessage_source_pendingResponses_slowFailedAccessories_fastFailedAccessories_unreachableWaitGroup_waitGroup_activity___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _BOOL4 v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHomeKitVersion *v28;
  int v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  _BOOL4 v39;
  void *v40;
  void *v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uniqueIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v49 = v7;
    v50 = 2112;
    v51 = v8;
    v52 = 2112;
    v53 = v10;
    v54 = 2112;
    v55 = v11;
    v56 = 2048;
    v57 = objc_msgSend(v3, "count");
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Completed read for accessory %@/%@/%@ with %ld responses", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v4);
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v12 = v3;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (!v13)
    goto LABEL_25;
  v14 = v13;
  v15 = *(_QWORD *)v44;
  v16 = *MEMORY[0x1E0CB3388];
  v17 = *MEMORY[0x1E0CB8C70];
  while (2)
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v44 != v15)
        objc_enumerationMutation(v12);
      objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * i), "error", (_QWORD)v43);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "domain");

      objc_msgSend(v19, "code");
      objc_msgSend(v19, "userInfo");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20)
      {
        objc_msgSend(v19, "userInfo");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "objectForKey:", v16);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        v23 = v22 && (objc_msgSend(v22, "code") == 2401 || objc_msgSend(v22, "code") == 2400);
        if (!v19)
          goto LABEL_22;
      }
      else
      {
        v23 = 0;
        if (!v19)
          goto LABEL_22;
      }
      objc_msgSend(v19, "domain");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v24, "isEqualToString:", v17) || objc_msgSend(v19, "code") != 4)
      {

LABEL_22:
        continue;
      }

      if (!v23)
      {

        if (!*(_BYTE *)(a1 + 120))
          goto LABEL_32;
        if (*(_BYTE *)(a1 + 121))
        {
          objc_msgSend(*(id *)(a1 + 32), "primaryResident");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "device");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "version");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("4.0"));
          if (objc_msgSend(v27, "isAtLeastVersion:", v28))
          {
            v29 = *(unsigned __int8 *)(a1 + 121);

            if (v29)
            {
              v30 = (void *)MEMORY[0x1D17BA0A0]();
              v31 = *(id *)(a1 + 32);
              HMFGetOSLogHandle();
              v32 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543362;
                v49 = v33;
                _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@Dispatching to resident with binning", buf, 0xCu);
LABEL_45:

              }
LABEL_46:

              objc_autoreleasePoolPop(v30);
              v42 = *(void **)(a1 + 64);
LABEL_47:
              objc_msgSend(v42, "addObject:", *(_QWORD *)(a1 + 40));
              goto LABEL_48;
            }
          }
          else
          {

          }
          v38 = objc_msgSend(*(id *)(a1 + 40), "linkSpeed");
          v30 = (void *)MEMORY[0x1D17BA0A0]();
          v31 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v32 = objc_claimAutoreleasedReturnValue();
          v39 = os_log_type_enabled(v32, OS_LOG_TYPE_INFO);
          if ((v38 & 0x8000000000000000) == 0)
          {
            if (v39)
            {
              HMFGetLogIdentifier();
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(a1 + 40), "name");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v49 = v40;
              v50 = 2112;
              v51 = v41;
              _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@adding accessory %@ to fast dispatch group (multi-part).", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v30);
            v42 = *(void **)(a1 + 72);
            goto LABEL_47;
          }
          if (!v39)
            goto LABEL_46;
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "name");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v49 = v33;
          v50 = 2112;
          v51 = v36;
          v37 = "%{public}@adding accessory %@ to slow dispatch group (multi-part).";
        }
        else
        {
          v30 = (void *)MEMORY[0x1D17BA0A0]();
          v31 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v32 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            goto LABEL_46;
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "name");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v49 = v33;
          v50 = 2112;
          v51 = v36;
          v37 = "%{public}@adding accessory %@ to dispatch group (single-part).";
        }
        _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, v37, buf, 0x16u);

        goto LABEL_45;
      }
    }
    v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    if (v14)
      continue;
    break;
  }
LABEL_25:

LABEL_32:
  objc_msgSend(*(id *)(a1 + 80), "addResponsesToPendingResponse:", v12, (_QWORD)v43);
  if (*(_BYTE *)(a1 + 121) && (objc_msgSend(*(id *)(a1 + 88), "isRemote") & 1) == 0)
  {
    v34 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 80), "retrieveAndClearAllResponses");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v35, *(_QWORD *)(a1 + 96), 1, 1, *(_QWORD *)(a1 + 88), 0);

  }
LABEL_48:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 112));

}

void __81__HMDHome__readCharacteristicValues_requestMessage_source_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  const char *v18;
  void *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    v7 = "multi";
    if (!*(_BYTE *)(a1 + 96))
      v7 = "single";
    v20 = 138543618;
    v21 = v5;
    v22 = 2080;
    v23 = v7;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Final notification for multi-read (%s part)", (uint8_t *)&v20, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 40), "retrieveAndClearAllResponses");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  v10 = *(void **)(a1 + 48);
  if (v10)
  {
    if (v8)
    {
      v11 = (void *)objc_msgSend(v8, "mutableCopy");
      objc_msgSend(v11, "arrayByAddingObjectsFromArray:", *(_QWORD *)(a1 + 48));
      v12 = objc_claimAutoreleasedReturnValue();

      v9 = (id)v12;
    }
    else
    {
      v9 = v10;
    }
  }
  v13 = objc_msgSend(*(id *)(a1 + 32), "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v9, *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 96), 0, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 88));
  if (!*(_QWORD *)(a1 + 72))
  {
    v14 = (void *)MEMORY[0x1D17BA0A0](v13);
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(const char **)(a1 + 80);
      v20 = 138543618;
      v21 = (uint64_t)v17;
      v22 = 2112;
      v23 = v18;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Remove tracking pending response for identifier %@ after final notification", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(*(id *)(a1 + 32), "pendingResponses");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "removeObjectForKey:", *(_QWORD *)(a1 + 80));

  }
}

- (NSMutableDictionary)pendingResponses
{
  return self->_pendingResponses;
}

- (id)_splitCharacteristicChanges:(id)a3 changedAccessories:(id)a4
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  char v55;
  void *v56;
  void *v57;
  void *v58;
  id obj;
  void *v60;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = v6;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v63;
    do
    {
      v10 = 0;
      v54 = v8;
      do
      {
        if (*(_QWORD *)v63 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * v10);
        objc_msgSend(v11, "service");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "accessory");
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = (void *)v13;
        if (v12)
          v15 = v13 == 0;
        else
          v15 = 1;
        if (!v15)
        {
          -[HMDHome hapMetadata](self, "hapMetadata");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "type");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v16, "shouldFilterCharacteristicOfTypeFromApp:", v17) & 1) == 0)
          {
            -[HMDHome hapMetadata](self, "hapMetadata");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "type");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = v18;
            if ((objc_msgSend(v18, "shouldFilterServiceOfTypeFromApp:", v19) & 1) == 0)
            {
              -[HMDHome hapMetadata](self, "hapMetadata");
              v20 = v17;
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "type");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "type");
              v57 = v16;
              v23 = v9;
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              v55 = objc_msgSend(v21, "shouldFilterChangeNotificationsForCharacteristicType:serviceType:", v22, v24);

              v9 = v23;
              v8 = v54;

              if ((v55 & 1) != 0)
                goto LABEL_29;
              objc_msgSend(v14, "uuid");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "UUIDString");
              v16 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v49, "objectForKey:", v16);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "instanceID");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "stringValue");
              v28 = objc_claimAutoreleasedReturnValue();

              v56 = v26;
              v60 = (void *)v28;
              objc_msgSend(v26, "objectForKey:", v28);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "instanceID");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "stringValue");
              v30 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v19, "objectForKey:", v30);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              if (v31)
              {
                v53 = v30;
                v32 = v48;
                v52 = v31;
                if (isAppleTV())
                {
                  v58 = v16;
                  -[HMDHome hapMetadata](self, "hapMetadata");
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v11, "type");
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v12, "type");
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  v36 = objc_msgSend(v33, "requiresDeviceUnlock:forService:", v34, v35);

                  if (v36)
                  {
                    v37 = v47;

                    v8 = v54;
                    v16 = v58;
                    goto LABEL_19;
                  }
                  v8 = v54;
                  v16 = v58;
                }
                v37 = v32;
LABEL_19:
                accessoryToEncodeForXPCTransportForAccessory(v14);
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                v51 = v38;
                if (v38 != v14)
                {
                  objc_msgSend(v38, "uuid");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v39, "UUIDString");
                  v40 = objc_claimAutoreleasedReturnValue();
                  v41 = v16;
                  v16 = (void *)v40;

                  v42 = v47;
                  v37 = v42;
                }
                objc_msgSend(v37, "objectForKey:", v16);
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v43)
                {
                  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v56, "count"));
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v37, "setObject:forKey:", v43, v16);
                }
                objc_msgSend(v43, "objectForKey:", v60);
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v44)
                {
                  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v19, "count"));
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v43, "setObject:forKey:", v44, v60);
                }
                v50 = v43;
                v30 = v53;
                objc_msgSend(v44, "setObject:forKey:", v52, v53);

                v31 = v52;
              }

              v17 = v56;
            }

          }
        }
LABEL_29:

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v68, 16);
    }
    while (v8);
  }

  v66[0] = CFSTR("kCharacteristicUpdatesForEntitledClientsNotificationKey");
  v66[1] = CFSTR("kCharacteristicUpdatesForAllClientsNotificationKey");
  v67[0] = v47;
  v67[1] = v48;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v67, v66, 2);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  return v45;
}

void __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
      (*(void (**)(void))(v3 + 16))();
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __56__HMDHome___readWriteResponseHandler_unhandledRequests___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (objc_msgSend(a1[4], "count"))
  {
    +[HMDCharacteristicResponseNotificationContext updateMultipleCharacteristicReadWriteResponsePayload:withUnhandledRequests:](HMDCharacteristicResponseNotificationContext, "updateMultipleCharacteristicReadWriteResponsePayload:withUnhandledRequests:", v6, a1[4]);
    v8 = objc_claimAutoreleasedReturnValue();

    v6 = (id)v8;
  }
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = WeakRetained;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "shortDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138544130;
    v15 = v12;
    v16 = 2112;
    v17 = v13;
    v18 = 2112;
    v19 = v6;
    v20 = 2112;
    v21 = v5;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Responding to the client: %@ with payload : %@, error: %@", (uint8_t *)&v14, 0x2Au);

  }
  objc_autoreleasePoolPop(v9);
  objc_msgSend(a1[5], "respondWithPayload:error:", v6, v5);
  objc_msgSend(a1[5], "setResponseHandler:", 0);
  objc_msgSend(v10, "endReportingSessionForMessage:", a1[5]);

}

- (void)endReportingSessionForMessage:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  reportContextFromMessage(v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v10;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (!v7)
    {
      -[HMDHome reportingSessionManager](self, "reportingSessionManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "endSessionWithUUID:", v9);

    }
  }

}

+ (id)shortDescription
{
  objc_class *v2;

  v2 = (objc_class *)objc_opt_class();
  return NSStringFromClass(v2);
}

- (BOOL)threadPreferredNetworkExists
{
  return self->_threadPreferredNetworkExists;
}

id __46__HMDHome__handleCoalescedModifyNotifications__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return (id)objc_msgSend(a3, "copy");
}

- (NSMutableArray)serviceGroups
{
  return self->_serviceGroups;
}

- (int64_t)atHomeLevel
{
  int64_t atHomeLevel;

  os_unfair_recursive_lock_lock_with_options();
  atHomeLevel = self->_atHomeLevel;
  os_unfair_recursive_lock_unlock();
  return atHomeLevel;
}

- (void)accessoryBrowser:(id)a3 didFindAccessoryServer:(id)a4 stateChanged:(BOOL)a5 stateNumber:(id)a6 completion:(id)a7
{
  id v11;
  id v12;
  __CFString *v13;
  void (**v14)(id, _QWORD, uint64_t);
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  __CFString *v28;
  id v29;
  id v30;
  __CFString *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  __CFString *v36;
  __CFString *v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  __CFString *v54;
  __CFString *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  double DiscoveryBackoffPeriod;
  double Current;
  double v67;
  double v68;
  unint64_t v69;
  void *v70;
  HMDHome *v71;
  NSObject *v72;
  void *v73;
  __CFString *v74;
  const char *v75;
  void *v76;
  void *v77;
  _BOOL4 v78;
  void *v79;
  HMDHome *v80;
  NSObject *v81;
  _BOOL4 v82;
  void *v83;
  __CFString *v84;
  void *v85;
  HMDHome *v86;
  NSObject *v87;
  void *v88;
  unint64_t v89;
  __CFString *v90;
  void *v91;
  __CFString *v92;
  __CFString *v93;
  void *v94;
  __CFString *v95;
  __CFString *v96;
  void *v97;
  void *v98;
  void *v99;
  HMDAccessoryTransportInformation *v100;
  void *v101;
  HMDAccessoryTransportInformation *v102;
  void *v103;
  int v104;
  void *v105;
  HMDHome *v106;
  HMDHome *v107;
  NSObject *v108;
  void *v109;
  __CFString *v110;
  unsigned int v111;
  HMDHome *v112;
  NSObject *v113;
  unint64_t v114;
  __CFString *v115;
  __CFString *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  HMDHome *v121;
  NSObject *v122;
  void *v123;
  __CFString *v124;
  void *v125;
  __CFString *v126;
  id v127;
  void *v128;
  HMDHome *v129;
  HMDHome *v130;
  void *context;
  void *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  int v136;
  int v137;
  void (**v138)(id, _QWORD, uint64_t);
  __CFString *v139;
  _BOOL4 v140;
  void *v141;
  _BOOL4 v142;
  _QWORD v143[4];
  id v144;
  uint8_t buf[4];
  void *v146;
  __int16 v147;
  __CFString *v148;
  __int16 v149;
  __CFString *v150;
  __int16 v151;
  void *v152;
  __int16 v153;
  double v154;
  __int16 v155;
  void *v156;
  uint64_t v157;

  v140 = a5;
  v157 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  v13 = (__CFString *)a6;
  v14 = (void (**)(id, _QWORD, uint64_t))a7;
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "shortDescription");
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v146 = v18;
    v147 = 2112;
    v148 = v19;
    v149 = 2112;
    v150 = v13;
    v151 = 2112;
    v152 = v20;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Found paired accessory server %@. State: %@/%@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v15);
  objc_msgSend(v12, "identifier");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](v16, "hapAccessoryWithIdentifier:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v142 = -[HMDHome _shouldAvoidTombstoningAccessoryServer:accessory:](v16, "_shouldAvoidTombstoningAccessoryServer:accessory:", v12, v22);
  if (!v22)
  {
    v45 = 0;
LABEL_13:
    ((void (**)(id, _BOOL4, uint64_t))v14)[2](v14, v142, v45);
    goto LABEL_14;
  }
  v139 = v13;
  -[HMDHome residentDeviceManager](v16, "residentDeviceManager");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v136 = objc_msgSend(v23, "isCurrentDeviceAvailableResident");

  v24 = (void *)MEMORY[0x1D17BA0A0]();
  v25 = v16;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  v138 = v14;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "shortDescription");
    v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v29 = v12;
    v30 = v11;
    v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v146 = v27;
    v147 = 2112;
    v148 = v28;
    v149 = 2112;
    v150 = v31;
    _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Performing accessory/service discovery on paired accessory %@. isResidentDevice: %@", buf, 0x20u);

    v11 = v30;
    v12 = v29;

  }
  objc_autoreleasePoolPop(v24);
  if ((!objc_msgSend(v22, "canWakeUpViaWoL")
     || objc_msgSend(v22, "shouldDiscoverSuspendCapableAccessoryServer:", v12))
    && !objc_msgSend(v12, "wakeNumber"))
  {
    v46 = v12;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v47 = v46;
    else
      v47 = 0;
    v48 = v47;

    if (objc_msgSend(v46, "isReachable") && (objc_msgSend(v48, "isCached") & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", v22);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v143[0] = MEMORY[0x1E0C809B0];
      v143[1] = 3221225472;
      v143[2] = __87__HMDHome_accessoryBrowser_didFindAccessoryServer_stateChanged_stateNumber_completion___block_invoke;
      v143[3] = &unk_1E89BEF40;
      v144 = v46;
      objc_msgSend(v49, "na_each:", v143);

    }
    v50 = (void *)MEMORY[0x1D17BA0A0]();
    v51 = v25;
    HMFGetOSLogHandle();
    v52 = objc_claimAutoreleasedReturnValue();
    v134 = v48;
    v135 = v46;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v132 = v50;
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "shortDescription");
      v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
      -[HMDHome isCurrentDevicePrimaryResident](v51, "isCurrentDevicePrimaryResident");
      HMFBooleanToString();
      v55 = (__CFString *)objc_claimAutoreleasedReturnValue();
      -[HMDHome isCurrentDeviceAvailableResident](v51, "isCurrentDeviceAvailableResident");
      HMFBooleanToString();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome areAllResidentsUnreachable](v51, "areAllResidentsUnreachable");
      HMFBooleanToString();
      v57 = v22;
      v58 = v12;
      v59 = v11;
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v146 = v53;
      v147 = 2112;
      v148 = v54;
      v149 = 2114;
      v150 = v55;
      v151 = 2114;
      v152 = v56;
      v153 = 2114;
      v154 = *(double *)&v60;
      _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Evaluating disconnect on idle status for %@ using - isCurrentDevicePrimaryResident = %{public}@, isCurrentDeviceAvailableResident = %{public}@, areAllResidentsUnreachable = %{public}@", buf, 0x34u);

      v11 = v59;
      v12 = v58;
      v22 = v57;

      v46 = v135;
      v48 = v134;

      v50 = v132;
    }

    objc_autoreleasePoolPop(v50);
    v61 = shouldDisconnectOnIdleForAccessory(v22);
    if ((_DWORD)v61 != objc_msgSend(v22, "shouldDisconnectOnIdle"))
      objc_msgSend(v22, "setShouldDisconnectOnIdle:", v61);
    objc_msgSend(v46, "setShouldDisconnectOnIdle:", v61);
    objc_msgSend(v46, "identifier");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = objc_msgSend(v22, "supportedTransports");
    objc_msgSend(v46, "setupHash");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _registerPairedAccessory:transports:setupHash:](v51, "_registerPairedAccessory:transports:setupHash:", v62, v63, v64);

    DiscoveryBackoffPeriod = 0.0;
    v13 = v139;
    if ((v136 & 1) != 0)
    {
      v14 = v138;
      goto LABEL_49;
    }
    Current = CFAbsoluteTimeGetCurrent();
    objc_msgSend(v22, "lastPairingFailureTime");
    v68 = Current - v67;
    v69 = objc_msgSend(v22, "consecutivePairingFailures");
    v14 = v138;
    if (v68 < getDiscoveryBackoffPeriod() || v69 >= 6)
    {
      if (v69 <= 5)
        DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
      else
        DiscoveryBackoffPeriod = 1800.0;
      objc_msgSend(v22, "setResetOnBackoffExpiry:", v69 > 5);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v135, "identifier");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v51, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v76, v77, 0, 0);

LABEL_48:
      if (DiscoveryBackoffPeriod != 0.0)
      {
        v45 = 0;
LABEL_84:

        if (DiscoveryBackoffPeriod > 0.0)
        {
          v120 = (void *)MEMORY[0x1D17BA0A0]();
          v121 = v51;
          HMFGetOSLogHandle();
          v122 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v122, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "shortDescription");
            v124 = (__CFString *)objc_claimAutoreleasedReturnValue();
            HMFBooleanToString();
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544386;
            v146 = v123;
            v147 = 2112;
            v148 = v124;
            v149 = 2112;
            v150 = v139;
            v151 = 2112;
            v152 = v125;
            v153 = 2048;
            v154 = DiscoveryBackoffPeriod;
            _os_log_impl(&dword_1CD062000, v122, OS_LOG_TYPE_INFO, "%{public}@Backing off discovery for accessory %@ with s# %@, state changed: %@ for %.2f sec", buf, 0x34u);

            v13 = v139;
            v14 = v138;
          }

          objc_autoreleasePoolPop(v120);
          objc_msgSend(v22, "backOffAccessoryForStateNumber:backoffPeriod:", v13, DiscoveryBackoffPeriod);
        }
        goto LABEL_13;
      }
LABEL_49:
      if ((objc_msgSend(v22, "shouldAutoDiscoverAccessoryServer") & 1) != 0)
      {
        v137 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(v22, "hasIPLink") & 1) == 0)
        {
          v85 = (void *)MEMORY[0x1D17BA0A0]();
          v130 = v51;
          v86 = v51;
          HMFGetOSLogHandle();
          v87 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v87, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            v89 = objc_msgSend(v135, "linkType");
            if (v89 > 2)
              v90 = CFSTR("Undefined");
            else
              v90 = off_1E89ABEB0[v89];
            v95 = v90;
            objc_msgSend(v22, "shortDescription");
            v96 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v146 = v88;
            v147 = 2112;
            v148 = v95;
            v149 = 2112;
            v150 = v96;
            _os_log_impl(&dword_1CD062000, v87, OS_LOG_TYPE_INFO, "%{public}@Adding %@ transport for Thread accessory: %@", buf, 0x20u);

            v48 = v134;
          }

          objc_autoreleasePoolPop(v85);
          v97 = (void *)MEMORY[0x1E0D163A8];
          objc_msgSend(v22, "uniqueIdentifier");
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v97, "instanceIDForUniqueIdentifier:", v98);
          v99 = (void *)objc_claimAutoreleasedReturnValue();

          v100 = [HMDAccessoryTransportInformation alloc];
          objc_msgSend(v135, "identifier");
          v101 = (void *)objc_claimAutoreleasedReturnValue();
          v102 = -[HMDAccessoryTransportInformation initWithServerIdentifier:instanceID:linkType:](v100, "initWithServerIdentifier:instanceID:linkType:", v101, v99, objc_msgSend(v135, "linkType"));
          objc_msgSend(v22, "addTransportInformationInstance:", v102);

          if (objc_msgSend(v135, "isReachable"))
          {
            objc_msgSend(v135, "identifier");
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "setReachability:serverIdentifier:linkType:", 1, v103, objc_msgSend(v135, "linkType"));

          }
          v14 = v138;
          v51 = v130;
        }
        if (v48)
          v104 = v136;
        else
          v104 = 0;
        if (v104 == 1 && (v140 || objc_msgSend(v48, "connectReason") == 2))
        {
          v105 = (void *)MEMORY[0x1D17BA0A0]();
          v106 = v51;
          v107 = v51;
          HMFGetOSLogHandle();
          v108 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "shortDescription");
            v110 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v146 = v109;
            v147 = 2112;
            v148 = v110;
            _os_log_impl(&dword_1CD062000, v108, OS_LOG_TYPE_INFO, "%{public}@Enabling auto discovery for BTLE accessory: %@", buf, 0x16u);

            v48 = v134;
            v14 = v138;
          }

          objc_autoreleasePoolPop(v105);
          v137 = 1;
          v51 = v106;
        }
        else
        {
          v137 = 0;
        }
      }
      v133 = objc_msgSend(v22, "enhancedAuthMethod");
      v111 = -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:](v51, "_isRetrievalInProgressForPrimaryAccessory:linkType:", v22, objc_msgSend(v135, "linkType"));
      context = (void *)MEMORY[0x1D17BA0A0]();
      v112 = v51;
      HMFGetOSLogHandle();
      v113 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
      {
        v127 = v11;
        HMFGetLogIdentifier();
        v128 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v135, "identifier");
        v126 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v114 = objc_msgSend(v135, "linkType");
        if (v114 > 2)
          v115 = CFSTR("Undefined");
        else
          v115 = off_1E89ABEB0[v114];
        v116 = v115;
        HMFBooleanToString();
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544642;
        v146 = v128;
        v147 = 2112;
        v148 = v126;
        v149 = 2112;
        v150 = v116;
        v151 = 2112;
        v152 = v117;
        v153 = 2112;
        v154 = *(double *)&v118;
        v155 = 2112;
        v156 = v119;
        _os_log_impl(&dword_1CD062000, v113, OS_LOG_TYPE_INFO, "%{public}@Evaluating need to discover accessories from found accessory server %@/%@, autoDiscoveryEnabled =  %@, hasExplicitRetrieveRequest = %@ discoverForEAuth = %@", buf, 0x3Eu);

        v11 = v127;
        v14 = v138;
        v48 = v134;
      }

      objc_autoreleasePoolPop(context);
      if (v133)
        v45 = v137 | v111;
      else
        v45 = 1;
      v13 = v139;
      goto LABEL_84;
    }
    if (!v48 || !v140)
      goto LABEL_49;
    v129 = v51;
    if (-[HMDHome _isRegisteredForNotificationsWithRemoteGateway:](v51, "_isRegisteredForNotificationsWithRemoteGateway:", v22))
    {
      v70 = (void *)MEMORY[0x1D17BA0A0]();
      v71 = v51;
      HMFGetOSLogHandle();
      v72 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "shortDescription");
        v74 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v146 = v73;
        v147 = 2112;
        v148 = v74;
        v75 = "%{public}@Backing off since notifications for %@ are registered with remote gateway";
LABEL_34:
        _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_INFO, v75, buf, 0x16u);

        v48 = v134;
        v14 = v138;
      }
    }
    else
    {
      if (!-[HMDHome _isEventTriggerOnRemoteGatewayForAccessory:](v51, "_isEventTriggerOnRemoteGatewayForAccessory:", v22)|| -[HMDHome _isRegisteredForNotificationsForClients:](v51, "_isRegisteredForNotificationsForClients:", v22)|| -[HMDHome _isEventTriggerOnLocalDeviceForAccessory:](v51, "_isEventTriggerOnLocalDeviceForAccessory:", v22))
      {
        v78 = -[HMDHome _isEventTriggerOnRemoteGatewayForAccessory:](v51, "_isEventTriggerOnRemoteGatewayForAccessory:", v22);
        v79 = (void *)MEMORY[0x1D17BA0A0]();
        v80 = v51;
        HMFGetOSLogHandle();
        v81 = objc_claimAutoreleasedReturnValue();
        v82 = os_log_type_enabled(v81, OS_LOG_TYPE_INFO);
        if (!v78)
        {
          if (v82)
          {
            HMFGetLogIdentifier();
            v91 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "shortDescription");
            v92 = (__CFString *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v134, "stateNumber");
            v93 = (__CFString *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v134, "stateChanged");
            HMFBooleanToString();
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v146 = v91;
            v147 = 2112;
            v148 = v92;
            v149 = 2112;
            v150 = v93;
            v151 = 2112;
            v152 = v94;
            _os_log_impl(&dword_1CD062000, v81, OS_LOG_TYPE_INFO, "%{public}@Discovering BLE Accessory: %@, State Number: %@, State Changed: %@", buf, 0x2Au);

            v14 = v138;
            v13 = v139;

          }
          objc_autoreleasePoolPop(v79);

          v45 = 1;
          goto LABEL_13;
        }
        if (v82)
        {
          HMFGetLogIdentifier();
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "shortDescription");
          v84 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v146 = v83;
          v147 = 2112;
          v148 = v84;
          _os_log_impl(&dword_1CD062000, v81, OS_LOG_TYPE_INFO, "%{public}@Backing off since triggers are on resident and have clients interested for accessory: %@", buf, 0x16u);

          v14 = v138;
        }

        objc_autoreleasePoolPop(v79);
        DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
        v48 = v134;
        goto LABEL_47;
      }
      v70 = (void *)MEMORY[0x1D17BA0A0]();
      v71 = v51;
      HMFGetOSLogHandle();
      v72 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "shortDescription");
        v74 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v146 = v73;
        v147 = 2112;
        v148 = v74;
        v75 = "%{public}@Not discovering accessory (%@) as trigger is active on resident and no clients and no local triggers locally";
        goto LABEL_34;
      }
    }

    objc_autoreleasePoolPop(v70);
    DiscoveryBackoffPeriod = getDiscoveryBackoffPeriod();
LABEL_47:
    v51 = v129;
    goto LABEL_48;
  }
  v32 = (void *)MEMORY[0x1D17BA0A0]();
  v33 = v25;
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "shortDescription");
    v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "lpmProfile");
    v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "connectivityInfo");
    v141 = v32;
    v38 = v22;
    v39 = v12;
    v40 = v11;
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "woWLANInfo");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v146 = v35;
    v147 = 2112;
    v148 = v36;
    v149 = 2112;
    v150 = v37;
    v151 = 2112;
    v152 = v42;
    _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Not discovering the suspended accessory server: %@ with LPM Profile: %@ and WoWInfo: %@.", buf, 0x2Au);

    v11 = v40;
    v12 = v39;
    v22 = v38;
    v32 = v141;

  }
  objc_autoreleasePoolPop(v32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "identifier");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v33, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v43, v44, objc_msgSend(v12, "linkType"), 0);

  v14 = v138;
  ((void (**)(id, _BOOL4, uint64_t))v138)[2](v138, v142, 0);

  v13 = v139;
LABEL_14:

}

- (id)hapAccessoryWithIdentifier:(id)a3
{
  void *v3;
  void *v4;
  id v5;

  -[HMDHome accessoryWithIdentifier:](self, "accessoryWithIdentifier:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  return v5;
}

- (id)accessoryWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "identifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v10, "isEqualToString:", v4))
        {
          v11 = objc_msgSend(v9, "isPrimary");

          if ((v11 & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
        else
        {

        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }
LABEL_12:

  return v6;
}

- (BOOL)areAllResidentsUnreachable
{
  void *v2;
  char v3;

  -[HMDHome enabledResidents](self, "enabledResidents");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_allObjectsPassTest:", &__block_literal_global_1306);

  return v3;
}

- (NSArray)enabledResidents
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentDevices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v10, "isEnabled"))
          objc_msgSend(v3, "addObject:", v10);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (BOOL)isCurrentDevicePrimaryResident
{
  void *v2;
  char v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCurrentDevicePrimaryResident");

  return v3;
}

- (void)_registerPairedAccessory:(id)a3 transports:(unint64_t)a4 setupHash:(id)a5
{
  id v8;
  id v9;
  id v10;

  v8 = a5;
  v9 = a3;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "registerPairedAccessory:transports:setupHash:delegate:", v9, a4, v8, self);

}

- (BOOL)isThreadCapable
{
  void *v3;

  -[HMDHome threadNetworkID](self, "threadNetworkID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    return 1;
  -[HMDHome _scheduleThreadNetworkUpdate](self, "_scheduleThreadNetworkUpdate");
  return -[HMDHome threadPreferredNetworkExists](self, "threadPreferredNetworkExists");
}

- (NSString)threadNetworkID
{
  void *v2;
  id v3;

  -[HMDHome unfilteredThreadNetworkID](self, "unfilteredThreadNetworkID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F")) & 1) != 0)
    v3 = 0;
  else
    v3 = v2;

  return (NSString *)v3;
}

- (NSString)unfilteredThreadNetworkID
{
  NSString *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_unfilteredThreadNetworkID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSMutableArray)zones
{
  return self->_zones;
}

- (NSUUID)spiClientIdentifier
{
  return self->_spiClientIdentifier;
}

- (int64_t)homeLocation
{
  int *v3;
  int64_t v4;

  os_unfair_recursive_lock_lock_with_options();
  if (self->_overrideHomeLocation)
    v3 = &OBJC_IVAR___HMDHome__overriddenHomeLocation;
  else
    v3 = &OBJC_IVAR___HMDHome__homeLocation;
  v4 = *(int64_t *)((char *)&self->super.super.isa + *v3);
  os_unfair_recursive_lock_unlock();
  return v4;
}

- (NSMutableArray)actionSets
{
  return self->_actionSets;
}

- (HMDUser)currentUser
{
  HMDUser **p_currentUser;
  HMDUser *currentUser;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  p_currentUser = &self->_currentUser;
  currentUser = self->_currentUser;
  if (!currentUser)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    -[HMDHome users](self, "users", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
          if (objc_msgSend(v10, "isCurrentUser"))
          {
            objc_storeStrong((id *)p_currentUser, v10);
            -[HMDHome presenceAuthStatus](self, "presenceAuthStatus");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDUser setPresenceAuthStatus:](*p_currentUser, "setPresenceAuthStatus:", v11);

            goto LABEL_12;
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_12:

    currentUser = *p_currentUser;
  }
  return currentUser;
}

- (id)_characteristicNotificationPayloadsOnDirectTransports:(BOOL)a3
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  uint64_t j;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _BOOL4 v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id obj;
  id obja;
  HMDHome *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _QWORD v92[2];
  _BYTE v93[128];
  _BYTE v94[128];
  _BYTE v95[128];
  _BYTE v96[128];
  _BYTE v97[128];
  uint64_t v98;

  v65 = a3;
  v98 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  -[HMDHome triggers](self, "triggers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v97, 16);
  v71 = self;
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v89;
    do
    {
      v7 = 0;
      v67 = v5;
      do
      {
        if (*(_QWORD *)v89 != v6)
          objc_enumerationMutation(obj);
        v8 = *(id *)(*((_QWORD *)&v88 + 1) + 8 * v7);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        if (objc_msgSend(v10, "shouldActivateOnLocalDevice"))
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          objc_msgSend(v10, "characteristicEvents");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v84, v96, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v85;
            do
            {
              for (i = 0; i != v13; ++i)
              {
                if (*(_QWORD *)v85 != v14)
                  objc_enumerationMutation(v11);
                v16 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * i);
                objc_msgSend(v16, "characteristic");
                v17 = (void *)objc_claimAutoreleasedReturnValue();

                if (v17)
                {
                  objc_msgSend(v16, "characteristic");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v66, "addObject:", v18);

                }
              }
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v84, v96, 16);
            }
            while (v13);
          }

          self = v71;
          v5 = v67;
        }

        ++v7;
      }
      while (v7 != v5);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v97, 16);
    }
    while (v5);
  }

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessories](self, "accessories");
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v52 = (id)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v80, v95, 16);
  if (v56)
  {
    v55 = *(_QWORD *)v81;
    obja = (id)*MEMORY[0x1E0D16198];
    do
    {
      for (j = 0; j != v56; ++j)
      {
        if (*(_QWORD *)v81 != v55)
          objc_enumerationMutation(v52);
        v20 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * j);
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = v20;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v24 = v23;
        else
          v24 = 0;
        v25 = v24;

        if (v25)
        {
          v57 = v23;
          v58 = v25;
          v64 = v22;
          v68 = v21;
          v59 = j;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          objc_msgSend(v25, "services");
          v60 = (id)objc_claimAutoreleasedReturnValue();
          v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v76, v94, 16);
          if (!v62)
            goto LABEL_62;
          v61 = *(_QWORD *)v77;
          while (1)
          {
            v26 = 0;
            do
            {
              if (*(_QWORD *)v77 != v61)
                objc_enumerationMutation(v60);
              v63 = v26;
              v27 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * v26);
              objc_msgSend(v27, "type");
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              v72 = 0u;
              v73 = 0u;
              v74 = 0u;
              v75 = 0u;
              objc_msgSend(v27, "characteristics");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v72, v93, 16);
              if (v30)
              {
                v31 = v30;
                v32 = *(_QWORD *)v73;
                do
                {
                  v33 = 0;
                  do
                  {
                    if (*(_QWORD *)v73 != v32)
                      objc_enumerationMutation(v29);
                    v34 = *(void **)(*((_QWORD *)&v72 + 1) + 8 * v33);
                    if (objc_msgSend(v34, "supportsNotification"))
                    {
                      -[HMDHome hapMetadata](self, "hapMetadata");
                      v35 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v34, "type");
                      v36 = (void *)objc_claimAutoreleasedReturnValue();
                      v37 = objc_msgSend(v35, "shouldFilterEnableNotificationsForCharacteristicType:serviceType:", v36, v28);

                      if ((v37 & 1) == 0)
                      {
                        if (objc_msgSend(v28, "isEqualToString:", obja))
                        {
                          objc_msgSend(v34, "type");
                          v38 = (void *)objc_claimAutoreleasedReturnValue();
                          v39 = objc_msgSend(v38, "isEqualToString:", CFSTR("000000A6-0000-1000-8000-0026BB765291"));

                        }
                        else
                        {
                          v39 = 0;
                        }
                        -[HMDHome hapMetadata](self, "hapMetadata");
                        v40 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v34, "type");
                        v41 = (void *)objc_claimAutoreleasedReturnValue();
                        v42 = objc_msgSend(v40, "shouldAutoEnableNotificationForCharacteristic:ofService:", v41, v28);

                        if ((objc_msgSend(v34, "isClientNotificationEnabled") & 1) != 0
                          || (objc_msgSend(v66, "containsObject:", v34) & 1) != 0
                          || (objc_msgSend(v34, "isNonHomeNotificationsEnabled") | v39 | v42) == 1)
                        {
                          v43 = v68;
                          goto LABEL_50;
                        }
                        if (v65)
                        {
                          objc_msgSend(v34, "type");
                          v44 = (void *)objc_claimAutoreleasedReturnValue();
                          -[HMDHome hapMetadata](v71, "hapMetadata");
                          v45 = (void *)objc_claimAutoreleasedReturnValue();
                          v46 = objc_msgSend(v45, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v44, v28);

                          if (v46)
                            objc_msgSend(v68, "addObject:", v34);

                        }
                        else
                        {
                          v43 = v64;
LABEL_50:
                          objc_msgSend(v43, "addObject:", v34);
                        }
                        self = v71;
                      }
                    }
                    ++v33;
                  }
                  while (v31 != v33);
                  v47 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v72, v93, 16);
                  v31 = v47;
                }
                while (v47);
              }

              v26 = v63 + 1;
            }
            while (v63 + 1 != v62);
            v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v76, v94, 16);
            if (!v62)
            {
LABEL_62:

              v25 = v58;
              j = v59;
              v21 = v68;
              v22 = v64;
              v23 = v57;
              break;
            }
          }
        }
        objc_msgSend(v23, "uuid");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "UUIDString");
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v21, "count"))
          objc_msgSend(v54, "setObject:forKeyedSubscript:", v21, v49);
        if (objc_msgSend(v22, "count"))
          objc_msgSend(v53, "setObject:forKeyedSubscript:", v22, v49);

      }
      v56 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v80, v95, 16);
    }
    while (v56);
  }
  v92[0] = v53;
  v92[1] = v54;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v92, 2);
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  return v50;
}

id __50__HMDHome_Wallet__accessoriesWithWalletKeySupport__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = 0;
  if (objc_msgSend(v4, "supportsWalletKey"))
    v5 = v4;

  return v5;
}

uint64_t __38__HMDHome__handleEnableNotifications___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
}

uint64_t __59__HMDHome__subscribeForHomeNotificationsFromRemoteGateway___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  char v3;

  v2 = a2;
  objc_opt_class();
  v3 = (v2 == 0) | ~objc_opt_isKindOfClass();

  return v3 & 1;
}

- (void)_refreshCharacteristicValuesOnHomeNotificationEnable
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  _BOOL4 v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  id obj;
  uint64_t v42;
  HMDHome *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  _QWORD v48[4];
  id v49;
  HMDHome *v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[5];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  const __CFString *v65;
  uint64_t v66;
  uint8_t buf[4];
  void *v68;
  __int16 v69;
  void *v70;
  _BYTE v71[128];
  _BYTE v72[128];
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v43 = self;
  -[HMDHome accessories](self, "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v73, 16);
  if (v44)
  {
    v42 = *(_QWORD *)v62;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v62 != v42)
          objc_enumerationMutation(obj);
        v46 = v4;
        v5 = *(id *)(*((_QWORD *)&v61 + 1) + 8 * v4);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v6 = v5;
        else
          v6 = 0;
        v7 = v6;

        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 3221225472;
        v60[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke;
        v60[3] = &unk_1E89BF8D0;
        v60[4] = v43;
        objc_msgSend(v7, "characteristicsPassingTest:", v60);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = 0u;
        v57 = 0u;
        v58 = 0u;
        v59 = 0u;
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v56, v72, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v57;
          do
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v57 != v11)
                objc_enumerationMutation(v8);
              +[HMDCharacteristicRequest requestWithCharacteristic:](HMDCharacteristicRequest, "requestWithCharacteristic:", *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i));
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v3, "addObject:", v13);

            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v56, v72, 16);
          }
          while (v10);
        }
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v45 = v7;
        objc_msgSend(v7, "lightProfiles");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "allObjects");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v52, v71, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v53;
          do
          {
            for (j = 0; j != v17; ++j)
            {
              if (*(_QWORD *)v53 != v18)
                objc_enumerationMutation(v15);
              v20 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * j);
              objc_msgSend(v20, "readCharacteristicRequests");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v21, "count"))
              {
                objc_msgSend(v21, "allObjects");
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v3, "addObjectsFromArray:", v22);

                objc_msgSend(v47, "addObject:", v20);
              }

            }
            v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v52, v71, 16);
          }
          while (v17);
        }

        v4 = v46 + 1;
      }
      while (v46 + 1 != v44);
      v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v73, 16);
    }
    while (v44);
  }

  v23 = objc_msgSend(v3, "hmf_isEmpty");
  v24 = (void *)MEMORY[0x1D17BA0A0]();
  v25 = v43;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = os_log_type_enabled(v26, OS_LOG_TYPE_INFO);
  if ((v23 & 1) != 0)
  {
    v28 = v47;
    if (v27)
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v68 = v29;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Not refreshing characteristics as read requests are empty", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
  }
  else
  {
    v28 = v47;
    if (v27)
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v68 = v30;
      v69 = 2112;
      v70 = v3;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Issuing characteristic read requests when Home app enabled notifications: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    v31 = (void *)MEMORY[0x1E0D285D0];
    objc_msgSend(MEMORY[0x1E0D285D8], "allMessageDestinations");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = CFSTR("kMultiPartResponseKey");
    v66 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "messageWithName:destination:payload:", CFSTR("kMultipleCharacteristicReadRequestKey"), v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    v35 = (void *)MEMORY[0x1D17BA0A0]();
    v36 = v25;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "identifier");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v68 = v38;
      v69 = 2114;
      v70 = v39;
      _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: App enabled notifications", buf, 0x16u);

      v28 = v47;
    }

    objc_autoreleasePoolPop(v35);
    v40 = (void *)objc_msgSend(v3, "copy");
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1322;
    v48[3] = &unk_1E89BB158;
    v49 = v3;
    v50 = v36;
    v51 = v28;
    -[HMDHome _readCharacteristicValues:requestMessage:source:withCompletionHandler:](v36, "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", v40, v34, 7, v48);

  }
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  logAndPostNotification(CFSTR("HMDAccessoryConnectedNotification"), *(void **)(a1 + 32), 0);
  objc_msgSend(*(id *)(a1 + 32), "updateLightProfilesSettings");
  objc_msgSend(*(id *)(a1 + 32), "chipAccessoryServer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "chipAccessoryServer");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "chipAccessoryServer");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138544130;
      v11 = v6;
      v12 = 2112;
      v13 = v7;
      v14 = 2048;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Configured chipAccessoryServer on accessory: %@, chipAccessoryServer: %p %@", (uint8_t *)&v10, 0x2Au);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "setDidConfigureCHIPAccessoryServer");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id __39__HMDHome_Light__lightProfileWithUUID___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "lightProfiles");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __39__HMDHome_Light__lightProfileWithUUID___block_invoke_2;
    v10[3] = &unk_1E89ADFA0;
    v11 = *(id *)(a1 + 32);
    objc_msgSend(v7, "na_firstObjectPassingTest:", v10);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (void)updateLightProfilesSettings:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id location[2];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v7 = v4;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v11, "readCharacteristicRequests");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v12, "count"))
        {
          objc_msgSend(v12, "allObjects");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "addObjectsFromArray:", v13);

          objc_msgSend(v6, "addObject:", v11);
        }

      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v8);
  }

  if (objc_msgSend(v5, "count"))
  {
    objc_initWeak(location, self);
    objc_msgSend(v5, "allObjects");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome description](self, "description");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __46__HMDHome_Light__updateLightProfilesSettings___block_invoke;
    v20[3] = &unk_1E89BF4F0;
    objc_copyWeak(&v22, location);
    v21 = v6;
    -[HMDHome readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:](self, "readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:", v14, 7, v15, -1, v20);

    objc_destroyWeak(&v22);
    objc_destroyWeak(location);
  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    -[HMDHome lightLogCategory](self, "lightLogCategory");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@No characteristic read requests for light profiles", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
  }

}

- (Class)lightLogCategory
{
  return (Class)objc_opt_class();
}

- (void)_notifyRetrievalError:(id)a3 accessoryServer:(id)a4 linkType:(int64_t)a5 accessoryOperationBlock:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  HMDHome *v19;
  id v20;
  id v21;
  int64_t v22;

  v10 = a3;
  v11 = a4;
  v12 = a6;
  -[HMDHome hapAccessories](self, "hapAccessories");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __102__HMDHome_AccessoryRetrieval___notifyRetrievalError_accessoryServer_linkType_accessoryOperationBlock___block_invoke;
  v17[3] = &unk_1E89BE7E0;
  v18 = v11;
  v19 = self;
  v21 = v12;
  v22 = a5;
  v20 = v10;
  v14 = v10;
  v15 = v12;
  v16 = v11;
  objc_msgSend(v13, "na_each:", v17);

}

- (NSArray)hapAccessories
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v16;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v5);
        v10 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
          objc_msgSend(v4, "addObject:", v12, (_QWORD)v15);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v7);
  }

  v13 = (void *)objc_msgSend(v4, "copy");
  return (NSArray *)v13;
}

- (void)_evaluateShouldRelaunchAndSetRelaunch
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    -[HMDHome accessories](self, "accessories", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = 0;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v3);
          v6 |= objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "shouldEnableDaemonRelaunch");
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);

      if ((v6 & 1) != 0)
        goto LABEL_10;
    }
    else
    {

    }
    -[HMDHome launchHandler](self, "launchHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "deregisterRelaunchClientWithUUID:", v10);
    goto LABEL_13;
  }
LABEL_10:
  -[HMDHome launchHandler](self, "launchHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "registerRelaunchClientWithUUID:", v10);
LABEL_13:

}

- (HMDLaunchHandler)launchHandler
{
  return +[HMDLaunchHandler sharedHandler](HMDLaunchHandler, "sharedHandler");
}

- (BOOL)isCurrentDeviceConfirmedPrimaryResident
{
  void *v2;
  char v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCurrentDeviceConfirmedPrimaryResident");

  return v3;
}

uint64_t __76__HMDHome_AccessoryRetrieval___dequeueRetrievalForAccessory_linkType_error___block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)(a1 + 32));
}

- (void)_processUpdatedProductDataForAccessory:(id)a3 hapAccessory:(id)a4 transaction:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  HMDHome *v39;
  void *v40;
  void *v41;
  void *v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "productData");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _productDataFromHAPAccessory:](self, "_productDataFromHAPAccessory:", v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v11)
  {
    if (v12)
    {
      if ((objc_msgSend(v12, "isEqualToString:", v11) & 1) == 0)
      {
        +[HMDVendorDataManager sharedVendorDataManager](HMDVendorDataManager, "sharedVendorDataManager");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "vendorModelEntryForProductData:", v11);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v15, "productDataAlternates");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "containsObject:", v13);

          v18 = (void *)MEMORY[0x1D17BA0A0]();
          v19 = self;
          HMFGetOSLogHandle();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = v20;
          if ((v17 & 1) != 0)
          {
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v40 = v18;
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "shortDescription");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v44 = v22;
              v45 = 2112;
              v46 = v23;
              v47 = 2112;
              v48 = v11;
              v49 = 2112;
              v50 = v13;
              _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ has changed its product data to a value that is allowed, binding: %@ -> %@", buf, 0x2Au);

              v18 = v40;
            }

            objc_autoreleasePoolPop(v18);
            objc_msgSend(v10, "setProductDataV2:", v13);
            goto LABEL_22;
          }
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "shortDescription");
            v42 = v18;
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v44 = v34;
            v45 = 2112;
            v46 = v38;
            v47 = 2112;
            v48 = v11;
            v49 = 2112;
            v50 = v13;
            _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has changed its productData to a value that is not allowed, keeping previous product data: %@ -> %@", buf, 0x2Au);

            v18 = v42;
            goto LABEL_20;
          }
        }
        else
        {
          v18 = (void *)MEMORY[0x1D17BA0A0]();
          v19 = self;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "shortDescription");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "manufacturer");
            v39 = v19;
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "model");
            v41 = v18;
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544386;
            v44 = v34;
            v45 = 2112;
            v46 = v35;
            v47 = 2112;
            v48 = v36;
            v49 = 2112;
            v50 = v37;
            v51 = 2112;
            v52 = v11;
            _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ could not be found in the VIDB, keeping previous product data (manufacturer: '%@', model: '%@', productData: '%@')", buf, 0x34u);

            v18 = v41;
            v19 = v39;

            v15 = 0;
LABEL_20:

          }
        }

        objc_autoreleasePoolPop(v18);
LABEL_22:

      }
    }
    else
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "shortDescription");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v44 = v32;
        v45 = 2112;
        v46 = v33;
        v47 = 2112;
        v48 = v11;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is no longer advertising product data, keeping previous product data %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v29);
    }
  }
  else if (v12)
  {
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "shortDescription");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v44 = v27;
      v45 = 2112;
      v46 = v28;
      v47 = 2112;
      v48 = v13;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ is now bound to product data %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(v10, "setProductDataV2:", v13);
    objc_msgSend(v10, "setProductData:", v13);
  }

}

- (HMDHomeManager)homeManager
{
  return (HMDHomeManager *)objc_loadWeakRetained((id *)&self->_homeManager);
}

- (id)_productDataFromHAPAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _BOOL4 v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  const char *v50;
  int v52;
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "server");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "productData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v5, "productData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = +[HMDAccessory validateProductData:](HMDAccessory, "validateProductData:", v7);

    if (v8)
    {
      objc_msgSend(v4, "productData");
      v9 = objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        v10 = (void *)v9;
        objc_msgSend(v5, "productData");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "productData");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v11, "isEqualToString:", v12);

        if ((v13 & 1) == 0)
        {
          v14 = (void *)MEMORY[0x1D17BA0A0]();
          v15 = self;
          HMFGetOSLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "shortDescription");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "productData");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "productData");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = 138544130;
            v53 = v17;
            v54 = 2112;
            v55 = v18;
            v56 = 2112;
            v57 = v19;
            v58 = 2112;
            v59 = v20;
            _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is using productData from pair setup that differs from productData published on AIS: %@ != %@", (uint8_t *)&v52, 0x2Au);

          }
          objc_autoreleasePoolPop(v14);
        }
      }
      v21 = v5;
      goto LABEL_15;
    }
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "productData");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = 138543874;
      v53 = v25;
      v54 = 2112;
      v55 = v26;
      v56 = 2112;
      v57 = v27;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has invalid productData from pair setup: %@", (uint8_t *)&v52, 0x20u);

    }
    objc_autoreleasePoolPop(v22);
  }
  objc_msgSend(v4, "productData");
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v28)
  {
LABEL_19:
    +[HMDVendorDataManager sharedVendorDataManager](HMDVendorDataManager, "sharedVendorDataManager");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "manufacturer");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "model");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "vendorModelEntryForManufacturer:model:", v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    if (v41)
    {
      objc_msgSend(v41, "productData");
      v42 = (void *)objc_claimAutoreleasedReturnValue();

      if (v42)
      {
        objc_msgSend(v41, "productData");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_28:

        goto LABEL_29;
      }
      v43 = (void *)MEMORY[0x1D17BA0A0]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "shortDescription");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "manufacturer");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "model");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = 138544130;
        v53 = v46;
        v54 = 2112;
        v55 = v47;
        v56 = 2112;
        v57 = v48;
        v58 = 2112;
        v59 = v49;
        v50 = "%{public}@Accessory %@ does not have productData in the VIDB (manufacturer: '%@', model: '%@')";
        goto LABEL_26;
      }
    }
    else
    {
      v43 = (void *)MEMORY[0x1D17BA0A0]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "shortDescription");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "manufacturer");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "model");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = 138544130;
        v53 = v46;
        v54 = 2112;
        v55 = v47;
        v56 = 2112;
        v57 = v48;
        v58 = 2112;
        v59 = v49;
        v50 = "%{public}@Accessory %@ could not be found in the VIDB (manufacturer: '%@', model: '%@')";
LABEL_26:
        _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_ERROR, v50, (uint8_t *)&v52, 0x2Au);

      }
    }

    objc_autoreleasePoolPop(v43);
    v31 = 0;
    goto LABEL_28;
  }
  objc_msgSend(v4, "productData");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = +[HMDAccessory validateProductData:](HMDAccessory, "validateProductData:", v29);

  if (!v30)
  {
    v32 = (void *)MEMORY[0x1D17BA0A0]();
    v33 = self;
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "productData");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = 138543874;
      v53 = v35;
      v54 = 2112;
      v55 = v36;
      v56 = 2112;
      v57 = v37;
      _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ has invalid productData published on AIS: %@", (uint8_t *)&v52, 0x20u);

    }
    objc_autoreleasePoolPop(v32);
    goto LABEL_19;
  }
  v21 = v4;
LABEL_15:
  objc_msgSend(v21, "productData");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_29:

  return v31;
}

void __70__HMDHome__subscribeForHomeAppleMediaNotificationsOnDirectTransports___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v5;
  else
    v3 = 0;
  v4 = v3;
  if (v4)
    -[HMDHome _enableMediaNotifications:forMediaAccessory:](*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), v4);

}

- (BOOL)_shouldAvoidTombstoningAccessoryServer:(id)a3 accessory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  BOOL v9;
  void *v10;
  int v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v23;
  void *v24;
  id v25;
  int v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD v33[4];
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = v7;
  v9 = 0;
  if (v6 && v7)
  {
    -[HMDHome removeAccessoryInProgressForHMDAccessories](self, "removeAccessoryInProgressForHMDAccessories");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "containsObject:", v8);

    if (v11)
    {
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "identifier");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v36 = v15;
        v37 = 2112;
        v38 = v16;
        v39 = 2112;
        v40 = v17;
        v18 = "%{public}@Accessory %@/%@ being removed from home - not tombstoning";
LABEL_9:
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, v18, buf, 0x20u);

      }
    }
    else
    {
      -[HMDHome addPendingAccessorySetupCodeHandlers](self, "addPendingAccessorySetupCodeHandlers");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "uuid");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "objectForKey:", v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v21)
      {
        -[HMDHome addPendingAccessories](self, "addPendingAccessories");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "hm_allKeys");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = __60__HMDHome__shouldAvoidTombstoningAccessoryServer_accessory___block_invoke;
        v33[3] = &unk_1E89A4A80;
        v25 = v8;
        v34 = v25;
        v26 = objc_msgSend(v24, "na_any:", v33);

        if (!v26)
        {

          v9 = -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:](self, "_isRetrievalInProgressForPrimaryAccessory:linkType:", v25, objc_msgSend(v6, "linkType"));
          goto LABEL_12;
        }
        v27 = (void *)MEMORY[0x1D17BA0A0]();
        v28 = self;
        HMFGetOSLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "name");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "identifier");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v36 = v30;
          v37 = 2112;
          v38 = v31;
          v39 = 2112;
          v40 = v32;
          _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ being added to home (via setupDescription) - not tombstoning", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v27);

        goto LABEL_11;
      }
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "identifier");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v36 = v15;
        v37 = 2112;
        v38 = v16;
        v39 = 2112;
        v40 = v17;
        v18 = "%{public}@Accessory %@/%@ being added to home - not tombstoning";
        goto LABEL_9;
      }
    }

    objc_autoreleasePoolPop(v12);
LABEL_11:
    v9 = 1;
  }
LABEL_12:

  return v9;
}

- (NSHashTable)removeAccessoryInProgressForHMDAccessories
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSHashTable copy](self->_removeAccessoryInProgressForHMDAccessories, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSHashTable *)v3;
}

- (NSMutableDictionary)addPendingAccessorySetupCodeHandlers
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableDictionary copy](self->_addPendingAccessorySetupCodeHandlers, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSMutableDictionary *)v3;
}

- (NSMapTable)addPendingAccessories
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMapTable copy](self->_addPendingAccessories, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSMapTable *)v3;
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL8 v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 56))
  {
    v6 = v3 != 0;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_2;
    v7[3] = &unk_1E89BFC88;
    v8 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 56);
    objc_msgSend(v1, "_retrieveHAPAccessoryForHMDHAPAccessory:linkType:forceRetrieve:completion:", v2, v4, v6, v7);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_retrieveHAPAccessoryForHMDHAPAccessory:linkType:forceRetrieve:completion:", v2, v4, v3 != 0, 0);
  }
}

- (void)retrieveStateForTrackedAccessory:(id)a3 stateNumber:(id *)a4 isReachable:(BOOL *)a5 linkQuality:(unint64_t *)a6 lastSeen:(id *)a7
{
  id v12;
  void *v13;
  id v14;

  v12 = a3;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "accessoryBrowserHapProtocol");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "retrieveCurrentStateForIdentifier:stateNumber:isReachable:linkQuality:lastSeen:", v12, a4, a5, a6, a7);

}

- (void)_retrieveHAPAccessoryForHMDHAPAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 completion:(id)a6
{
  _BOOL4 v7;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void (**v21)(_QWORD, _QWORD);
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  __CFString *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  __CFString *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  __CFString *v47;
  __CFString *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  _QWORD v59[5];
  id v60;
  int64_t v61;
  char v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  void (**v68)(_QWORD, _QWORD);
  __int16 v69;
  __CFString *v70;
  __int16 v71;
  void *v72;
  uint64_t v73;

  v7 = a5;
  v73 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a6;
  -[HMDHome workQueue](self, "workQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v12);

  objc_msgSend(v10, "bridge");
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  if (v13)
    v15 = (void *)v13;
  else
    v15 = v10;
  v16 = v15;

  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isBrowsingAllowed");

  if ((v18 & 1) != 0)
  {
    -[HMDHome accessories](self, "accessories");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "containsObject:", v10);

    if ((v20 & 1) != 0)
    {
      objc_msgSend(v16, "matchingHAPAccessoryServerIdentifierWithLinkType:", a4);
      v21 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v22 = (void *)MEMORY[0x1D17BA0A0]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      v58 = v11;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "shortDescription");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = v22;
        if ((unint64_t)a4 > 2)
          v25 = CFSTR("Undefined");
        else
          v25 = off_1E89ABEB0[a4];
        v39 = v25;
        HMFBooleanToString();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v64 = v54;
        v65 = 2112;
        v66 = v52;
        v67 = 2112;
        v68 = v21;
        v69 = 2112;
        v70 = v39;
        v71 = 2112;
        v72 = v40;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Retrieving accessory (%@) with server %@/%@. Force retrieve: %@", buf, 0x34u);

        v22 = v56;
        v11 = v58;
      }

      objc_autoreleasePoolPop(v22);
      v62 = 0;
      -[HMDHome _enqueueRetrievalTupleForAccessory:linkType:inProgress:completion:](v23, "_enqueueRetrievalTupleForAccessory:linkType:inProgress:completion:", v16, a4, &v62, v11);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = v41;
      if (v62 && !v7)
        goto LABEL_23;
      objc_msgSend(v41, "start");
      -[HMDHome accessoryBrowser](v23, "accessoryBrowser");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v59[0] = MEMORY[0x1E0C809B0];
      v59[1] = 3221225472;
      v59[2] = __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke;
      v59[3] = &unk_1E89BE7B8;
      v59[4] = v23;
      v60 = v16;
      v61 = a4;
      objc_msgSend(v43, "discoverAccessoryServer:linkType:errorHandler:", v21, a4, v59);

      if (v62)
      {
LABEL_23:
        v44 = (void *)MEMORY[0x1D17BA0A0]();
        v45 = v23;
        HMFGetOSLogHandle();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "shortDescription");
          v57 = v44;
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          if ((unint64_t)a4 > 2)
            v47 = CFSTR("Undefined");
          else
            v47 = off_1E89ABEB0[a4];
          v48 = v47;
          v49 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v42, "completions");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "numberWithUnsignedInteger:", objc_msgSend(v50, "count"));
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544386;
          v64 = v55;
          v65 = 2112;
          v66 = v53;
          v67 = 2112;
          v68 = v21;
          v69 = 2112;
          v70 = v48;
          v71 = 2112;
          v72 = v51;
          _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_INFO, "%{public}@Retrieval already in progress for accessory (%@) with server %@/%@ and %@ completions.", buf, 0x34u);

          v44 = v57;
          v11 = v58;
        }

        objc_autoreleasePoolPop(v44);
      }

      goto LABEL_30;
    }
    v33 = (void *)MEMORY[0x1D17BA0A0]();
    v34 = self;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "shortDescription");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v64 = v36;
      v65 = 2112;
      v66 = v37;
      _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@Cannot retrieve HAP accessory: %@. Requested accessory not part of this home", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v33);
    v21 = (void (**)(_QWORD, _QWORD))_Block_copy(v11);
    if (v21)
    {
      v31 = (void *)MEMORY[0x1E0CB35C8];
      v32 = 3;
      goto LABEL_17;
    }
  }
  else
  {
    v26 = (void *)MEMORY[0x1D17BA0A0]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "shortDescription");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v64 = v29;
      v65 = 2112;
      v66 = v30;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Ignoring request to retrieve HAP accessory: %@. Browsing not allowed (companion is connected or no app)", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    v21 = (void (**)(_QWORD, _QWORD))_Block_copy(v11);
    if (v21)
    {
      v31 = (void *)MEMORY[0x1E0CB35C8];
      v32 = 48;
LABEL_17:
      objc_msgSend(v31, "hmErrorWithCode:", v32);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v21)[2](v21, v38);

    }
  }
LABEL_30:

}

- (HMDAccessoryBrowserProtocol)accessoryBrowser
{
  return self->_accessoryBrowser;
}

- (void)_addRetrievalCompletionTuple:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[HMDHome retrievalAccessoryCompletionTuples](self, "retrievalAccessoryCompletionTuples");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  os_unfair_recursive_lock_unlock();
}

- (id)_enqueueRetrievalTupleForAccessory:(id)a3 linkType:(int64_t)a4 inProgress:(BOOL *)a5 completion:(id)a6
{
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  __CFString *v22;
  __CFString *v23;
  uint64_t v24;
  HMDAccessoryRetrievalCompletionTuple *v25;
  void *v27;
  void *v28;
  BOOL *v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a6;
  objc_msgSend(v10, "bridge");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v12)
    v14 = (void *)v12;
  else
    v14 = v10;
  v15 = v14;

  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v27 = v16;
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
      v20 = CFSTR(" with completion");
    else
      v20 = &stru_1E89C3E38;
    objc_msgSend(v15, "shortDescription", v27);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = a5;
    if ((unint64_t)a4 > 2)
      v22 = CFSTR("Undefined");
    else
      v22 = off_1E89ABEB0[a4];
    v23 = v22;
    *(_DWORD *)buf = 138544130;
    v31 = v19;
    v32 = 2112;
    v33 = v20;
    v34 = 2112;
    v35 = v21;
    v36 = 2112;
    v37 = v23;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Enqueueing retrieval tuple%@ for %@/%@.", buf, 0x2Au);

    v16 = v28;
    a5 = v29;
  }

  objc_autoreleasePoolPop(v16);
  -[HMDHome _retrieveTupleForPrimaryAccessory:linkType:](v17, "_retrieveTupleForPrimaryAccessory:linkType:", v15, a4);
  v24 = objc_claimAutoreleasedReturnValue();
  if (!v24)
  {
    v25 = -[HMDAccessoryRetrievalCompletionTuple initWithHome:accessory:linkType:]([HMDAccessoryRetrievalCompletionTuple alloc], "initWithHome:accessory:linkType:", v17, v15, a4);
    -[HMDHome _addRetrievalCompletionTuple:](v17, "_addRetrievalCompletionTuple:", v25);
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  v25 = (HMDAccessoryRetrievalCompletionTuple *)v24;
  if (a5)
    *a5 = 1;
  if (v11)
LABEL_16:
    -[HMDAccessoryRetrievalCompletionTuple addCompletion:](v25, "addCompletion:", v11);
LABEL_17:

  return v25;
}

- (BOOL)_isRetrievalInProgressForPrimaryAccessory:(id)a3 linkType:(int64_t)a4
{
  void *v4;
  BOOL v5;

  -[HMDHome _retrieveTupleForPrimaryAccessory:linkType:](self, "_retrieveTupleForPrimaryAccessory:linkType:", a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 != 0;

  return v5;
}

- (void)_dequeueRetrievalForAccessory:(id)a3 linkType:(int64_t)a4 error:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  __CFString *v20;
  __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  __CFString *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v10);

  objc_msgSend(v8, "bridge");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v11)
    v13 = (void *)v11;
  else
    v13 = v8;
  v14 = v13;

  -[HMDHome _retrieveTupleForPrimaryAccessory:linkType:](self, "_retrieveTupleForPrimaryAccessory:linkType:", v14, a4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    -[HMDHome _removeRetrievalCompletionTuple:](self, "_removeRetrievalCompletionTuple:", v15);
    v16 = objc_msgSend(v15, "stop");
    if (v9)
    {
      v17 = (void *)MEMORY[0x1D17BA0A0](v16);
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "shortDescription");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v17;
        if ((unint64_t)a4 > 2)
          v20 = CFSTR("Undefined");
        else
          v20 = off_1E89ABEB0[a4];
        v21 = v20;
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmStringFromErrorCode:", objc_msgSend(v9, "code"));
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v15, "completions");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "numberWithUnsignedInteger:", objc_msgSend(v27, "count"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v34 = v30;
        v35 = 2112;
        v36 = v28;
        v37 = 2112;
        v38 = v21;
        v39 = 2112;
        v40 = v22;
        v41 = 2112;
        v42 = v24;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Calling accessory retrieval for %@/%@ with error: %@ and %@ completions.", buf, 0x34u);

        v17 = v29;
      }

      objc_autoreleasePoolPop(v17);
    }
    objc_msgSend(v15, "completions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = __76__HMDHome_AccessoryRetrieval___dequeueRetrievalForAccessory_linkType_error___block_invoke;
    v31[3] = &unk_1E89BE768;
    v32 = v9;
    objc_msgSend(v25, "na_each:", v31);

    objc_msgSend(v15, "completions");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "removeAllObjects");

  }
}

- (id)_retrieveTupleForPrimaryAccessory:(id)a3 linkType:(int64_t)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v15[4];
  id v16;
  int64_t v17;

  v6 = a3;
  objc_msgSend(v6, "bridge");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v7)
    v9 = (void *)v7;
  else
    v9 = v6;
  v10 = v9;

  os_unfair_recursive_lock_lock_with_options();
  -[HMDHome retrievalAccessoryCompletionTuples](self, "retrievalAccessoryCompletionTuples");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __74__HMDHome_AccessoryRetrieval___retrieveTupleForPrimaryAccessory_linkType___block_invoke;
  v15[3] = &unk_1E89BE740;
  v12 = v10;
  v16 = v12;
  v17 = a4;
  objc_msgSend(v11, "na_firstObjectPassingTest:", v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_recursive_lock_unlock();
  return v13;
}

- (NSMutableArray)retrievalAccessoryCompletionTuples
{
  return self->_retrievalAccessoryCompletionTuples;
}

- (void)_removeRetrievalCompletionTuple:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[HMDHome retrievalAccessoryCompletionTuples](self, "retrievalAccessoryCompletionTuples");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObject:", v5);

  os_unfair_recursive_lock_unlock();
}

- (void)handleFetchLightProfileSettingsMessage:(id)a3 withLightProfileUUIDs:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  HMDHome *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  HMDHome *v36;
  uint64_t v37;
  id obj;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  uint8_t v49[128];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  id v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v35 = a3;
  v6 = a4;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v36 = self;
  -[HMDHome lightLogCategory](self, "lightLogCategory");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v51 = v10;
    v52 = 2112;
    v53 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Handling fetch light profiles settings for profiles: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = v6;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
  v13 = self;
  if (v12)
  {
    v14 = v12;
    v15 = *(_QWORD *)v45;
    do
    {
      v16 = 0;
      v37 = v14;
      do
      {
        if (*(_QWORD *)v45 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * v16);
        -[HMDHome lightProfileWithUUID:](v13, "lightProfileWithUUID:", v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
        {
          objc_msgSend(v39, "addObject:", v18);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBA540]), "initWithError:", v19);
          v21 = v11;
          objc_msgSend(v11, "setObject:forKeyedSubscript:", v20, v17);

          v22 = (void *)MEMORY[0x1D17BA0A0]();
          -[HMDHome lightLogCategory](v13, "lightLogCategory");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v51 = v25;
            v52 = 2112;
            v53 = v17;
            _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find light profile with uuid: %@", buf, 0x16u);

            v13 = v36;
          }

          objc_autoreleasePoolPop(v22);
          v11 = v21;
          v14 = v37;
        }

        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    }
    while (v14);
  }

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v26 = v39;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v41;
    do
    {
      for (i = 0; i != v28; ++i)
      {
        if (*(_QWORD *)v41 != v29)
          objc_enumerationMutation(v26);
        v31 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
        objc_msgSend(v31, "settings");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBA540]), "initWithSettings:", v32);
        objc_msgSend(v31, "uniqueIdentifier");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "setObject:forKeyedSubscript:", v33, v34);

      }
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
    }
    while (v28);
  }

  -[HMDHome respondMessage:withSettingResults:](v36, "respondMessage:withSettingResults:", v35, v11);
}

uint64_t __39__HMDHome_Light__lightProfileWithUUID___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uniqueIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

- (id)lightProfileWithUUID:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __39__HMDHome_Light__lightProfileWithUUID___block_invoke;
  v10[3] = &unk_1E89AA750;
  v11 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_map:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Commissioning finished for %@ with error: %@", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

}

uint64_t __178__HMDHome__handleFailedAccessories_requestMessage_source_pendingResponses_fastFailedAccessories_slowFailedAccessories_tmpErrorResponseTuples_waitGroup_failureWaitGroup_activity___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  id v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "begin");
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "count");
    if (*(_BYTE *)(a1 + 104))
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    else
      objc_msgSend(*(id *)(a1 + 48), "allResponses");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "begin");
    v8 = *(id *)(a1 + 32);
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v5 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v10 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for fast read failed accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 56), "_redispatchReadForAccessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:errorResponseTuples:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88));
    __HMFActivityScopeLeave();

    objc_msgSend(*(id *)(a1 + 40), "removeAllObjects");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  return objc_msgSend(*(id *)(a1 + 32), "end");
}

void __87__HMDHome_accessoryBrowser_didFindAccessoryServer_stateChanged_stateNumber_completion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v6;
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setReachability:serverIdentifier:linkType:", 1, v5, objc_msgSend(*(id *)(a1 + 32), "linkType"));

}

- (id)_primaryAccessoryForServer:(id)a3
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome hapAccessoriesForServer:](self, "hapAccessoriesForServer:", v4);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v9, "isPrimary"))
        {
          v13 = 0;
          objc_msgSend(v4, "identifier");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v9, "matchesHAPAccessoryWithServerIdentifier:linkType:", v10, &v13);

          if ((v11 & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_12:

  return v6;
}

- (id)hapAccessoriesForServer:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = a3;
  objc_msgSend(v4, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "linkType");

  -[HMDHome hapAccessoriesForServer:linkType:](self, "hapAccessoriesForServer:linkType:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didDiscoverAccessories:(id)a5 transaction:(id)a6 error:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  char isKindOfClass;
  _QWORD v32[4];
  id v33;
  HMDHome *v34;
  uint64_t v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  objc_msgSend(v13, "identifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v16)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v37 = v23;
        v38 = 2112;
        v39 = v13;
        v40 = 2114;
        v41 = v16;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed HAP service discovery on accessory server %@ with error: %{public}@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(v13, "identifier");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v13, "linkType");
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke;
      v32[3] = &unk_1E89A5100;
      v26 = v24;
      v34 = v20;
      v35 = v25;
      v33 = v26;
      -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v20, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v16, v26, v25, v32);
      objc_msgSend(v16, "domain");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v27, "isEqualToString:", *MEMORY[0x1E0CB8C70]))
      {
        v28 = objc_msgSend(v16, "code");

        if (v28 == 66)
        {
          objc_msgSend(v18, "didEncounterError:", v16);
LABEL_15:

          goto LABEL_16;
        }
      }
      else
      {

      }
      v30 = v13;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if (v30 && (isKindOfClass & 1) != 0)
        objc_msgSend(v18, "_forceEnableReachabilityPingForPrimaryResident:", v30);
      goto LABEL_15;
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v29;
      v38 = 2112;
      v39 = v13;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Completed HAP service discovery on accessory server %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(v18, "setLastPairingFailureTime:", 0.0);
    objc_msgSend(v18, "setConsecutivePairingFailures:", 0);
    -[HMDHome _configurePairedAccessoriesForServer:reAddServices:](v20, "_configurePairedAccessoriesForServer:reAddServices:", v13, objc_msgSend(v14, "count") == 0);
  }
LABEL_16:

}

- (void)_configurePairedAccessoriesForServer:(id)a3 reAddServices:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  char v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v4 = a4;
  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = objc_msgSend(v6, "isPaired");
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if ((v7 & 1) != 0)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v12;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Configuring paired accessories with accessory server '%@'", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(v6, "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome hapAccessoryWithIdentifier:](v9, "hapAccessoryWithIdentifier:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = v9;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543618;
        v22 = v18;
        v23 = 2112;
        v24 = v14;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Primary HMDAccessory %@ is listed as paired", (uint8_t *)&v21, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      -[HMDHome _processUpdatedAccessoryServer:reAddServices:](v16, "_processUpdatedAccessoryServer:reAddServices:", v6, v4);
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v19;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping configuration of unpaired accessory server '%@'", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 4, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v9, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v14, v20, objc_msgSend(v6, "linkType"), 0);

  }
}

- (HMMLogEventSubmitting)logEventSubmitter
{
  return self->_logEventSubmitter;
}

- (void)_notifyChangedCharacteristics:(id)a3 identifier:(id)a4 multiPartResponse:(BOOL)a5 moreMessagesInMultipart:(BOOL)a6 requestMessage:(id)a7 withCompletionHandler:(id)a8
{
  _BOOL8 v10;
  id v13;
  id v14;
  id v15;
  HMDCharacteristicResponseNotificationContext *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  void *v22;
  HMDCharacteristicResponseNotificationContext *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  HMDHomeKitVersion *v35;
  void *v36;
  void *v37;
  HMDHomeKitVersion *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  HMDCharacteristicResponseNotificationContext *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  HMDHome *v47;
  NSObject *v48;
  void *v49;
  HMDRemoteDeviceMessageDestination *v50;
  void *v51;
  void *v52;
  HMDRemoteDeviceMessageDestination *v53;
  uint64_t v54;
  HMDRemoteMessage *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  HMDHome *v62;
  void *v63;
  void *v64;
  HMDHome *v65;
  NSObject *v66;
  void *v67;
  HMDCharacteristicResponseNotificationContext *v68;
  char v69;
  void *v70;
  HMDHome *v71;
  NSObject *v72;
  void *v73;
  HMDCharacteristicResponseNotificationContext *v74;
  char v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  HMDCharacteristicResponseNotificationContext *v81;
  void *v82;
  void *v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  HMDHomeKitVersion *v93;
  HMDCharacteristicResponseNotificationContext *v94;
  HMDCharacteristicResponseNotificationContext *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  HMDCharacteristicResponseNotificationContext *v100;
  void *v101;
  _BOOL4 v102;
  id aBlock;
  _BOOL4 v104;
  void *v105;
  HMDHome *v106;
  _QWORD v107[4];
  id v108;
  id v109;
  _QWORD v110[4];
  id v111;
  id v112;
  uint8_t buf[4];
  void *v114;
  __int16 v115;
  HMDCharacteristicResponseNotificationContext *v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  void *v120;
  uint64_t v121;

  v10 = a6;
  v104 = a5;
  v121 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v15 = a7;
  aBlock = a8;
  v99 = v14;
  v101 = v13;
  v102 = v10;
  v16 = -[HMDCharacteristicResponseNotificationContext initWithRequestIdentifier:responses:pendingMultiPartResponses:]([HMDCharacteristicResponseNotificationContext alloc], "initWithRequestIdentifier:responses:pendingMultiPartResponses:", v14, v13, v10);
  v17 = (void *)MEMORY[0x1D17BA0A0]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v114 = v20;
    v115 = 2112;
    v116 = v16;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Preparing characteristics changed notifications using context: %@", buf, 0x16u);

  }
  v106 = v18;

  objc_autoreleasePoolPop(v17);
  v21 = v15;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = v22;

  objc_msgSend(v21, "destination");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v25 = v24;
  else
    v25 = 0;
  v26 = v25;

  LODWORD(v27) = 0;
  if (objc_msgSend(v21, "isRemote"))
  {
    if (v26)
    {
      v28 = -[HMDCharacteristicResponseNotificationContext type](v23, "type");
      LODWORD(v27) = v28 != 2;
      if (v28 != 2 && v102)
        LODWORD(v27) = -[HMDHome isResidentFirstAccessoryCommunicationEnabled](v18, "isResidentFirstAccessoryCommunicationEnabled");
    }
  }
  v100 = v23;
  if ((objc_msgSend(v21, "isSingleReadWriteRequest") & 1) != 0)
  {
    objc_msgSend(v101, "firstObject");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "characteristicUpdateDictionary");
    v30 = (id)objc_claimAutoreleasedReturnValue();

    if ((_DWORD)v27)
      v31 = v30;
    else
      v31 = 0;
    v32 = v31;
    v33 = 0;
    v105 = v30;
    if (!(_DWORD)v27)
      goto LABEL_38;
  }
  else
  {
    -[HMDCharacteristicResponseNotificationContext notificationPayloadByAccessoryUUID](v16, "notificationPayloadByAccessoryUUID");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    if (!(_DWORD)v27)
    {
      v33 = 0;
      goto LABEL_38;
    }
    if (v104)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v102);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", v18, v105, v34);
      v30 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", v18, v105, 0);
      v30 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  v35 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("3.0"));
  objc_msgSend(v26, "device");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "version");
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  v96 = v37;
  if (v104 || objc_msgSend(v37, "isAtLeastVersion:", v35))
  {
    v38 = v35;
    v39 = (void *)MEMORY[0x1D17BA0A0]();
    v40 = v106;
    HMFGetOSLogHandle();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v42 = v16;
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v114 = v43;
      v115 = 2112;
      v116 = v100;
      _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Preferring to send the response as a response for: %@", buf, 0x16u);

      v16 = v42;
    }

    objc_autoreleasePoolPop(v39);
    v44 = _Block_copy(aBlock);
    v45 = v44;
    if (v44)
      (*((void (**)(void *, _QWORD, id))v44 + 2))(v44, 0, v30);
  }
  else
  {
    v93 = v35;
    v94 = v16;
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = v18;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v114 = v49;
      v115 = 2112;
      v116 = v100;
      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_INFO, "%{public}@Preferring to send the response as a notification for: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v46);
    v45 = (void *)objc_msgSend(v30, "mutableCopy");
    objc_msgSend(v45, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("kIDSMessageIsNotificationKey"));
    v92 = (void *)objc_msgSend(v45, "copy");

    v50 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](v47, "uuid");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "device");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v50, "initWithTarget:device:", v51, v52);

    if (objc_msgSend(v21, "qualityOfService") < 17)
      v54 = 17;
    else
      v54 = objc_msgSend(v21, "qualityOfService");
    v55 = -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:type:timeout:secure:]([HMDRemoteMessage alloc], "initWithName:qualityOfService:destination:payload:type:timeout:secure:", CFSTR("kMultipleCharacteristicValuesUpdatedNotificationKey"), v54, v53, v92, 2, 1, 0.0);
    -[HMDRemoteMessage setIdentifier:](v55, "setIdentifier:", v99);
    -[HMDHome homeManager](v47, "homeManager");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "messageDispatcher");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v110[0] = MEMORY[0x1E0C809B0];
    v110[1] = 3221225472;
    v110[2] = __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke;
    v110[3] = &unk_1E89BFC88;
    v112 = aBlock;
    v30 = v92;
    v111 = v30;
    objc_msgSend(v57, "sendMessage:completionHandler:", v55, v110);

    v38 = v93;
    v16 = v94;
  }

  v33 = v30;
LABEL_38:
  v97 = v33;
  -[HMDCharacteristicResponseNotificationContext changedCharacteristics](v16, "changedCharacteristics");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "allObjects");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDCharacteristicResponseNotificationContext previouslyNilChangedCharacteristics](v16, "previouslyNilChangedCharacteristics");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "allObjects");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v91) = 0;
  v62 = v106;
  -[HMDHome _postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:](v106, "_postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:", v59, v61, 0, v27 ^ 1, 1, v21, v91);

  -[HMDCharacteristicResponseNotificationContext notificationWithHome:](v16, "notificationWithHome:", v106);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v98 = v26;
  if (v63)
  {
    v95 = v16;
    v64 = (void *)MEMORY[0x1D17BA0A0]();
    v65 = v106;
    HMFGetOSLogHandle();
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "name");
      v68 = (HMDCharacteristicResponseNotificationContext *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "object");
      v69 = v27;
      v27 = objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v114 = v67;
      v115 = 2112;
      v116 = v68;
      v117 = 2112;
      v118 = v27;
      _os_log_impl(&dword_1CD062000, v66, OS_LOG_TYPE_INFO, "%{public}@Posting %@ with object: %@", buf, 0x20u);

      LOBYTE(v27) = v69;
      v62 = v106;

    }
    objc_autoreleasePoolPop(v64);
    v70 = (void *)MEMORY[0x1D17BA0A0]();
    v71 = v65;
    HMFGetOSLogHandle();
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "name");
      v74 = (HMDCharacteristicResponseNotificationContext *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "object");
      v75 = v27;
      v27 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "userInfo");
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v114 = v73;
      v115 = 2112;
      v116 = v74;
      v117 = 2112;
      v118 = v27;
      v119 = 2112;
      v120 = v76;
      _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_DEBUG, "%{public}@Posting %@ with object: %@, userInfo: %@", buf, 0x2Au);

      v62 = v106;
      LOBYTE(v27) = v75;

    }
    objc_autoreleasePoolPop(v70);
    -[HMDHome notificationCenter](v71, "notificationCenter");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v77, "postNotification:", v63);

    v16 = v95;
  }
  v78 = (void *)MEMORY[0x1D17BA0A0]();
  -[HMDCharacteristicResponseNotificationContext responseCharacteristics](v16, "responseCharacteristics");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "allObjects");
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v81 = v16;
  -[HMDCharacteristicResponseNotificationContext notificationPayloadByAccessoryUUID](v16, "notificationPayloadByAccessoryUUID");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _splitCharacteristicChanges:changedAccessories:](v62, "_splitCharacteristicChanges:changedAccessories:", v80, v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    objc_msgSend(v21, "proxyConnection");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = v84 ? 1 : v27;

    if ((v85 & 1) == 0)
    {
      v86 = aBlock;
      v90 = _Block_copy(aBlock);
      v89 = v90;
      if (v90)
        (*((void (**)(void *, _QWORD, void *))v90 + 2))(v90, 0, v105);
      v88 = 0;
      goto LABEL_58;
    }
  }
  v86 = aBlock;
  if (aBlock)
    v87 = v27;
  else
    v87 = 1;
  if ((v87 & 1) == 0)
  {
    v107[0] = MEMORY[0x1E0C809B0];
    v107[1] = 3221225472;
    v107[2] = __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke_1202;
    v107[3] = &unk_1E89C1D68;
    v109 = aBlock;
    v108 = v105;
    v88 = _Block_copy(v107);

    v89 = v109;
LABEL_58:

    goto LABEL_59;
  }
  v88 = 0;
LABEL_59:
  -[HMDHome _sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:](v106, "_sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:", v99, v21, v104, v102, v83, v88);

  objc_autoreleasePoolPop(v78);
  -[HMDHome _wol_processChangedCharacteristicResponses:](v106, "_wol_processChangedCharacteristicResponses:", v101);

}

- (NSNotificationCenter)notificationCenter
{
  return (NSNotificationCenter *)objc_getProperty(self, a2, 1072, 1);
}

- (void)_sendClientCharacteristicsChangedNotificationWithIdentifier:(id)a3 requestMessage:(id)a4 multiPartResponse:(BOOL)a5 moreInMultiPartResponse:(BOOL)a6 characteristicChanges:(id)a7 completionHandler:(id)a8
{
  _BOOL8 v10;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  dispatch_group_t v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  NSObject *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  __int128 v59;
  _QWORD block[4];
  id v61;
  _QWORD v62[4];
  id v63;
  id v64;
  id v65;
  id v66;
  NSObject *v67;
  id v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE buf[24];
  id v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  void *v78;
  __int16 v79;
  void *v80;
  uint64_t v81;

  v10 = a6;
  v81 = *MEMORY[0x1E0C80C00];
  v56 = a3;
  v57 = a4;
  v14 = a7;
  v53 = a8;
  v54 = v14;
  objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("kCharacteristicUpdatesForAllClientsNotificationKey"));
  *((_QWORD *)&v59 + 1) = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("kCharacteristicUpdatesForEntitledClientsNotificationKey"));
  *(_QWORD *)&v59 = objc_claimAutoreleasedReturnValue();
  if (a5)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", self, *((_QWORD *)&v59 + 1), v15);
    v52 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", self, *((_QWORD *)&v59 + 1), 0);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if ((_QWORD)v59)
  {
    if (*((_QWORD *)&v59 + 1))
      v16 = *((_QWORD *)&v59 + 1);
    else
      v16 = MEMORY[0x1E0C9AA70];
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addEntriesFromDictionary:", (_QWORD)v59);
    v18 = (void *)objc_msgSend(v17, "copy");
    if (a5)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", self, v18, v19);
      v51 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:](HMDCharacteristicResponseNotificationContext, "responsePayloadForHome:changedAccessories:moreMessagesInMultipart:", self, v18, 0);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v51 = 0;
  }
  objc_msgSend(v57, "proxyConnection");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E10], "orderedSet");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  if (v55)
    objc_msgSend(v58, "addObject:");
  if (v59 != 0)
  {
    -[HMDHome xpcMessageTransportFactory](self, "xpcMessageTransportFactory");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "defaultTransport");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "connections");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "addObjectsFromArray:", v22);

  }
  if (objc_msgSend(v57, "qualityOfService") < 17)
    v23 = 17;
  else
    v23 = objc_msgSend(v57, "qualityOfService");
  v24 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMDHome uuid](self, "uuid");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v24, "initWithTarget:", v25);

  v50 = (void *)v26;
  v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D285F8]), "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicValuesUpdatedNotificationKey"), v23, v26, 0);
  v28 = v27;
  if (v56)
    objc_msgSend(v27, "setIdentifier:");
  v29 = (void *)MEMORY[0x1D17BA0A0]();
  v30 = self;
  HMFGetOSLogHandle();
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v58, "count"));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)&v59 + 1), "count");
    HMFBooleanToString();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v59, "count");
    HMFBooleanToString();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v33;
    *(_WORD *)&buf[22] = 2112;
    v72 = v56;
    v73 = 2112;
    v74 = v34;
    v75 = 2112;
    v76 = v35;
    v77 = 2112;
    v78 = v36;
    v79 = 2112;
    v80 = v37;
    _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Notifying %@ clients of characteristic changes with message identifier: %@ allClients: %@ entitledClients: %@ multiPartResponse: %@ moreMessagesInMultipart: %@", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v29);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  LOBYTE(v72) = v53 != 0;
  v38 = dispatch_group_create();
  objc_msgSend(v58, "array");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 3221225472;
  v62[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke;
  v62[3] = &unk_1E89A4C90;
  v40 = v51;
  v63 = v40;
  v41 = v28;
  v64 = v41;
  v42 = v52;
  v65 = v42;
  v43 = v55;
  v66 = v43;
  v69 = buf;
  v70 = 34305;
  v44 = v38;
  v67 = v44;
  v45 = v53;
  v68 = v45;
  objc_msgSend(v39, "na_each:", v62);

  -[HMDHome reportingSessionManager](v30, "reportingSessionManager");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "messagePayload");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "identifier");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "addResponseMessagePayload:toSessionWithUUID:", v47, v48);

  if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    -[HMDHome workQueue](v30, "workQueue");
    v49 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_3;
    block[3] = &unk_1E89C0870;
    v61 = v45;
    dispatch_group_notify(v44, v49, block);

  }
  _Block_object_dispose(buf, 8);

}

- (HMDXPCMessageTransportFactory)xpcMessageTransportFactory
{
  return (HMDXPCMessageTransportFactory *)objc_getProperty(self, a2, 696, 1);
}

- (HMDXPCMessageReportingSessionManager)reportingSessionManager
{
  return (HMDXPCMessageReportingSessionManager *)objc_getProperty(self, a2, 920, 1);
}

- (id)_discoveredAccessoriesForServer:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = a3;
  objc_msgSend(v4, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "linkType");

  -[HMDHome _discoveredAccessoriesForServer:linkType:](self, "_discoveredAccessoriesForServer:linkType:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)_discoveredAccessoriesForServer:(id)a3 linkType:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  -[HMDHome discoveredAccessories](self, "discoveredAccessories");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v12);
        v15 = a4;
        if (objc_msgSend(v13, "matchesHAPAccessoryWithServerIdentifier:linkType:", v6, &v15))
          objc_msgSend(v7, "addObject:", v13);
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }

  return v7;
}

- (NSMutableArray)discoveredAccessories
{
  return self->_discoveredAccessories;
}

- (void)_subscribeForHomeNotificationsOnDirectTransports:(void *)a1
{
  int v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  uint8_t v56[128];
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    objc_msgSend(a1, "_characteristicNotificationPayloadsOnDirectTransports:", a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectAtIndex:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectAtIndex:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count") || objc_msgSend(v6, "count"))
    {
      if (objc_msgSend(v5, "count"))
      {
        v7 = (void *)MEMORY[0x1D17BA0A0]();
        v8 = a1;
        HMFGetOSLogHandle();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "shortDescription");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v58 = v10;
          v59 = 2112;
          v60 = v11;
          _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Deregistering notifications %@ with direct transports", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v7);
      }
      v46 = v2;
      v45 = v6;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v44 = v5;
      v12 = v5;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v52;
        do
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v52 != v15)
              objc_enumerationMutation(v12);
            v17 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
            objc_msgSend(v12, "objectForKey:", v17, v44);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v17);
            objc_msgSend(a1, "accessoryWithUUID:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v21 = v20;
            else
              v21 = 0;
            v22 = v21;

            objc_msgSend(v22, "enableNotification:forCharacteristics:message:clientIdentifier:", 0, v18, 0, CFSTR("com.apple.HomeKitDaemon.homeNotifications"));
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
        }
        while (v14);
      }

      if (objc_msgSend(v45, "count"))
      {
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = a1;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "shortDescription");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v58 = v26;
          v59 = 2112;
          v60 = v27;
          _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_DEBUG, "%{public}@Registering notifications %@ with direct transports", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
      }
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v28 = v45;
      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
      v5 = v44;
      if (v29)
      {
        v30 = v29;
        v31 = *(_QWORD *)v48;
        do
        {
          for (j = 0; j != v30; ++j)
          {
            if (*(_QWORD *)v48 != v31)
              objc_enumerationMutation(v28);
            v33 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * j);
            objc_msgSend(v28, "objectForKey:", v33, v44);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v33);
            objc_msgSend(a1, "accessoryWithUUID:", v35);
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            v37 = v36;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v38 = v37;
            else
              v38 = 0;
            v39 = v38;

            if (v39)
            {
              if (v46)
                objc_msgSend(v39, "enableNotification:forCharacteristics:message:clientIdentifier:", 1, v34, 0, CFSTR("com.apple.HomeKitDaemon.homeNotifications"));
              else
                objc_msgSend(v39, "updateNotificationEnabled:forCharacteristics:onBehalfOf:", 0, v34, CFSTR("com.apple.HomeKitDaemon.homeNotifications"));
              objc_msgSend(v39, "checkHAPSessionRestore");
            }

          }
          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
        }
        while (v30);
      }

      v6 = v45;
    }
    else
    {
      v40 = (void *)MEMORY[0x1D17BA0A0]();
      v41 = a1;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v58 = v43;
        _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@Not registering notifications on direct transports since we have no modifications", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v40);
    }

  }
}

- (id)_readRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  BOOL v27;
  id v28;
  void *v29;
  id *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id obj;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[128];
  _BYTE v62[128];
  _BYTE v63[128];
  uint64_t v64;

  v31 = a4;
  v64 = *MEMORY[0x1E0C80C00];
  v32 = a3;
  objc_msgSend(v32, "dictionaryForKey:", CFSTR("kAccessoriesListKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = v4;
  v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
  if (v34)
  {
    v33 = *(_QWORD *)v58;
    v45 = v5;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v58 != v33)
          objc_enumerationMutation(obj);
        v36 = v6;
        v7 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * v6);
        objc_msgSend(obj, "hmf_dictionaryForKey:", v7, v31);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = v7;
        v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v7);
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v38 = v11;

        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v12 = v8;
        v5 = v45;
        v41 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
        if (v41)
        {
          v39 = *(_QWORD *)v54;
          v37 = v12;
          do
          {
            for (i = 0; i != v41; ++i)
            {
              if (*(_QWORD *)v54 != v39)
                objc_enumerationMutation(v12);
              v14 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
              objc_msgSend(v12, "hmf_arrayForKey:", v14);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome _stringToUnsignedLongLongNumber:]((uint64_t)self, v14);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              if (v16)
              {
                v44 = i;
                v42 = v16;
                objc_msgSend(v38, "findService:", v16);
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                v49 = 0u;
                v50 = 0u;
                v51 = 0u;
                v52 = 0u;
                v43 = v15;
                v18 = v15;
                v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v49, v61, 16);
                if (v19)
                {
                  v20 = v19;
                  v21 = *(_QWORD *)v50;
                  do
                  {
                    for (j = 0; j != v20; ++j)
                    {
                      if (*(_QWORD *)v50 != v21)
                        objc_enumerationMutation(v18);
                      v23 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * j);
                      objc_msgSend(v17, "findCharacteristic:", v23);
                      v24 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v24)
                      {
                        objc_msgSend(v5, "addObject:", v24);
                      }
                      else
                      {
                        objc_msgSend(v46, "hmf_mutableDictionaryForKey:", v47);
                        v25 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v25)
                        {
                          v25 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                          objc_msgSend(v46, "setObject:forKeyedSubscript:", v25, v47);
                        }
                        objc_msgSend(v25, "hmf_mutableArrayForKey:", v14);
                        v26 = (id)objc_claimAutoreleasedReturnValue();
                        if (!v26)
                        {
                          v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                          objc_msgSend(v25, "setObject:forKeyedSubscript:", v26, v14);
                        }
                        objc_msgSend(v26, "addObject:", v23);

                        v5 = v45;
                      }

                    }
                    v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v49, v61, 16);
                  }
                  while (v20);
                }

                v12 = v37;
                v15 = v43;
                i = v44;
                v16 = v42;
              }

            }
            v41 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
          }
          while (v41);
        }

        v6 = v36 + 1;
      }
      while (v36 + 1 != v34);
      v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v63, 16);
    }
    while (v34);
  }

  if (v31)
    *v31 = (id)objc_msgSend(v46, "copy");
  v48 = 0;
  v27 = -[HMDHome _isReadRequestAllowForCharacteristics:message:error:](self, "_isReadRequestAllowForCharacteristics:message:error:", v5, v32, &v48, v31);
  v28 = v48;
  if (v27)
  {
    objc_msgSend(v5, "na_map:", &__block_literal_global_1287);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v32, "respondWithError:", v28);
    v29 = 0;
  }

  return v29;
}

- (id)_stringToUnsignedLongLongNumber:(uint64_t)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;

  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "hmf_isInteger"))
  {
    objc_msgSend(MEMORY[0x1E0CB3900], "scannerWithString:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 0;
    v6 = 0;
    if (objc_msgSend(v5, "scanUnsignedLongLong:", &v8))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v8);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (BOOL)_isReadRequestAllowForCharacteristics:(id)a3 message:(id)a4 error:(id *)a5
{
  id v8;
  BOOL v9;
  uint64_t v11;

  v8 = a4;
  if (-[HMDHome requiresUnlockToAccessCharacteristics:withMessage:](self, "requiresUnlockToAccessCharacteristics:withMessage:", a3, v8)&& !-[HMDHome isAccessAllowedForCharacteristicsWithMessage:](self, "isAccessAllowedForCharacteristicsWithMessage:", v8))
  {
    if (a5)
    {
      v11 = parseMessageSource(v8);
      HMDSecureAccessErrorCodeForMessage(v8, v11);
      v9 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 1;
  }

  return v9;
}

- (BOOL)requiresUnlockToAccessCharacteristics:(id)a3 withMessage:(id)a4
{
  id v6;
  char v7;
  _QWORD v9[5];

  v6 = a3;
  if (-[HMDHome applyDeviceLockStatus:](self, "applyDeviceLockStatus:", a4))
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __61__HMDHome_requiresUnlockToAccessCharacteristics_withMessage___block_invoke;
    v9[3] = &unk_1E89BF8D0;
    v9[4] = self;
    v7 = objc_msgSend(v6, "na_any:", v9);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (BOOL)applyDeviceLockStatus:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "isRemote"))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v8;
      v19 = 2112;
      v20 = v9;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@%@ is from remote source; ignoring this device's lock status",
        (uint8_t *)&v17,
        0x16u);

    }
    objc_autoreleasePoolPop(v5);
    v10 = 0;
  }
  else if (objc_msgSend(v4, "BOOLForKey:", CFSTR("kApplyDeviceUnlockKey")))
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Treating device as always locked.", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    v10 = 1;
  }
  else
  {
    -[HMDHome deviceLockStateDataSource](self, "deviceLockStateDataSource");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v15, "isLocked");

  }
  return v10;
}

- (HMDDeviceLockStateDataSource)deviceLockStateDataSource
{
  return (HMDDeviceLockStateDataSource *)objc_getProperty(self, a2, 872, 1);
}

- (void)_handleFailedAccessories:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 fastFailedAccessories:(id)a7 slowFailedAccessories:(id)a8 tmpErrorResponseTuples:(id)a9 waitGroup:(id)a10 failureWaitGroup:(id)a11 activity:(id)a12
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  NSObject *v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  id v31;
  id v32;
  NSObject *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char v38;
  NSObject *group;
  id v40;
  id v42;
  id v43;
  id v44;
  id v45;
  _QWORD v46[4];
  id v47;
  id v48;
  id v49;
  HMDHome *v50;
  NSObject *v51;
  id v52;
  id v53;
  id v54;
  unint64_t v55;
  char v56;
  _QWORD block[4];
  id v58;
  id v59;
  id v60;
  HMDHome *v61;
  NSObject *v62;
  id v63;
  id v64;
  id v65;
  unint64_t v66;
  char v67;

  v44 = a3;
  v17 = a4;
  v18 = a6;
  v19 = a7;
  v43 = a8;
  v40 = a9;
  v20 = a11;
  v21 = a12;
  group = a10;
  v38 = objc_msgSend(v17, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  v22 = self;
  -[HMDHome workQueue](self, "workQueue");
  v23 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __178__HMDHome__handleFailedAccessories_requestMessage_source_pendingResponses_fastFailedAccessories_slowFailedAccessories_tmpErrorResponseTuples_waitGroup_failureWaitGroup_activity___block_invoke;
  block[3] = &unk_1E89A4E18;
  v37 = v21;
  v58 = v37;
  v59 = v19;
  v24 = v19;
  v67 = v38;
  v25 = v18;
  v60 = v25;
  v61 = v22;
  v26 = v20;
  v62 = v26;
  v27 = v44;
  v63 = v27;
  v28 = v17;
  v64 = v28;
  v66 = a5;
  v29 = v40;
  v65 = v29;
  v45 = v24;
  dispatch_group_notify(group, v23, block);

  dispatch_group_enter(v26);
  -[HMDHome workQueue](v22, "workQueue");
  v30 = objc_claimAutoreleasedReturnValue();
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = __178__HMDHome__handleFailedAccessories_requestMessage_source_pendingResponses_fastFailedAccessories_slowFailedAccessories_tmpErrorResponseTuples_waitGroup_failureWaitGroup_activity___block_invoke_1274;
  v46[3] = &unk_1E89A4E18;
  v47 = v37;
  v48 = v43;
  v56 = v38;
  v49 = v25;
  v50 = v22;
  v51 = v26;
  v52 = v27;
  v54 = v29;
  v55 = a5;
  v53 = v28;
  v42 = v29;
  v31 = v28;
  v32 = v27;
  v33 = v26;
  v34 = v25;
  v35 = v43;
  v36 = v37;
  dispatch_group_notify(group, v30, v46);

}

- (void)_handleMultipleCharacteristicRead:(id)a3
{
  id v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  void *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isRemote") && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v32 = v19;
    v33 = 2112;
    v34 = v4;
    v20 = "%{public}@Message not supported: %@";
    v21 = v18;
    v22 = 22;
    goto LABEL_20;
  }
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0 || (objc_msgSend(v4, "isRemote") & 1) != 0)
  {
    v30 = 0;
    -[HMDHome _readRequestTuplesFromMessage:outUnhandledRequests:](self, "_readRequestTuplesFromMessage:outUnhandledRequests:", v4, &v30);
    v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v7 = v30;
    if (objc_msgSend(v6, "count"))
    {
      if (objc_msgSend(v7, "count"))
      {
        v8 = (void *)MEMORY[0x1D17BA0A0]();
        v9 = self;
        HMFGetOSLogHandle();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "shortDescription");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v32 = v11;
          v33 = 2112;
          v34 = v12;
          v35 = 2112;
          v36 = v7;
          _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@%@ has characteristic requests that cannot be handled: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v8);
      }
      v13 = parseMessageSource(v4);
      objc_msgSend(v6, "count");
      objc_msgSend(v4, "isRemote");
      v14 = +[HMDMetricsUtilities stringForSource:](HMDMetricsUtilities, "stringForSource:", v13);
      -[HMDHome startReportingSessionForMessage:](self, "startReportingSessionForMessage:", v4);
      -[HMDHome __readWriteResponseHandler:unhandledRequests:](self, "__readWriteResponseHandler:unhandledRequests:", v4, v7);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _readCharacteristicValues:requestMessage:source:withCompletionHandler:](self, "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", v6, v4, v13, v15);
    }
    else
    {
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v32 = v26;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@None of the characteristics/properties in multi-read are valid", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "domain");

      objc_msgSend(v15, "code");
      objc_msgSend(v4, "responseHandler");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27)
      {
        objc_msgSend(v4, "responseHandler");
        v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v28)[2](v28, v15, 0);

      }
    }

    goto LABEL_23;
  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v32 = v19;
    v20 = "%{public}@Client does not have entitlement to use SPI";
    v21 = v18;
    v22 = 12;
LABEL_20:
    _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);

  }
LABEL_21:

  objc_autoreleasePoolPop(v16);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "domain");

  objc_msgSend(v7, "code");
  objc_msgSend(v4, "responseHandler");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    objc_msgSend(v4, "responseHandler");
    v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v6)[2](v6, v7, 0);
LABEL_23:

  }
}

- (void)startReportingSessionForMessage:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  reportContextFromMessage(v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v10, "transport");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      -[HMDHome reportingSessionManager](self, "reportingSessionManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "startSessionWithUUID:reportContext:xpcClientConnection:", v9, v4, v7);

    }
  }

}

- (void)_readCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  id v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  NSObject *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  char v49;
  void *v50;
  dispatch_group_t v51;
  void *v52;
  dispatch_group_t v53;
  void *v54;
  id v55;
  id v56;
  _QWORD block[5];
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  char v65;
  id v66;
  uint8_t buf[4];
  id v68;
  __int16 v69;
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v55 = a3;
  v11 = a4;
  v56 = a6;
  v12 = objc_alloc(MEMORY[0x1E0D28540]);
  v13 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "stringWithFormat:", CFSTR("%@, %s:%ld"), v14, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 26461);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = (id)objc_msgSend(v12, "initWithName:", v15);

  if (-[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled"))
  {
    v16 = -[HMDHome isCurrentDeviceAvailableResident](self, "isCurrentDeviceAvailableResident");
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    if (v16)
    {
      HMFGetOSLogHandle();
      v19 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "shortDescription");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v68 = v20;
        v69 = 2112;
        v70 = v21;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Running new accessory communication logic for resident. %@", buf, 0x16u);

      }
    }
    else
    {
      HMFGetOSLogHandle();
      v19 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "shortDescription");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v68 = v43;
        v69 = 2112;
        v70 = v44;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Routing accessory read requests using Resident First logic. %@", buf, 0x16u);

      }
    }

    objc_autoreleasePoolPop(v17);
    -[HMDHome _createMessageForReadWriteRequest:source:withCompletionHandler:](v18, "_createMessageForReadWriteRequest:source:withCompletionHandler:", v11, a5, v56);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome accessoryReaderWriter](v18, "accessoryReaderWriter");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "submitReadRequests:sourceType:requestMessage:", v55, a5, v45);

  }
  else
  {
    v53 = dispatch_group_create();
    objc_msgSend(v11, "identifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v11, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
    objc_msgSend(v11, "stringForKey:", CFSTR("kRequestIdentifierKey"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "UUIDString");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _setupPendingResponseTimerIdentifier:originalRequestIdentifier:](self, "_setupPendingResponseTimerIdentifier:originalRequestIdentifier:", v25, v24);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    +[HMDPendingResponse tupleForMessage:originalRequestIdentifier:requestCount:withCompletionHandler:](HMDPendingResponse, "tupleForMessage:originalRequestIdentifier:requestCount:withCompletionHandler:", v11, v26, objc_msgSend(v55, "count"), v56);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome pendingResponses](self, "pendingResponses");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v27, v26);

    objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _buildRequestMapTableFromRequests:pendingResponses:](self, "_buildRequestMapTableFromRequests:pendingResponses:", v55, v27);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    if (isWatch()
      && -[HMDHome _passReadRequestToCompanion:requestMessage:source:pendingResponses:remoteAccessories:withCompletionHandler:](self, "_passReadRequestToCompanion:requestMessage:source:pendingResponses:remoteAccessories:withCompletionHandler:", v30, v11, a5, v27, v52, v56))
    {

    }
    else
    {
      v49 = v23;
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v30, "count"));
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v30, "count"));
      v47 = v24;
      v48 = v22;
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = dispatch_group_create();
      -[HMDHome _sendReadRequestToAccessoryServer:requestMessage:source:pendingResponses:slowFailedAccessories:fastFailedAccessories:unreachableWaitGroup:waitGroup:activity:](self, "_sendReadRequestToAccessoryServer:requestMessage:source:pendingResponses:slowFailedAccessories:fastFailedAccessories:unreachableWaitGroup:waitGroup:activity:", v30, v11, a5, v27, v54, v50, v51, v53, v66);
      v31 = dispatch_group_create();
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      dispatch_group_enter(v31);
      -[HMDHome _waitForEarlyDispatchTimeoutOnReadRequest:requestMessage:source:pendingResponses:activity:slowFailedAccessories:tmpErrorResponseTuples:unreachableWaitGroup:failureWaitGroup:](self, "_waitForEarlyDispatchTimeoutOnReadRequest:requestMessage:source:pendingResponses:activity:slowFailedAccessories:tmpErrorResponseTuples:unreachableWaitGroup:failureWaitGroup:", v30, v11, a5, v27, v66, v54, v32, v51, v31);
      v33 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome _handleFailedAccessories:requestMessage:source:pendingResponses:fastFailedAccessories:slowFailedAccessories:tmpErrorResponseTuples:waitGroup:failureWaitGroup:activity:](self, "_handleFailedAccessories:requestMessage:source:pendingResponses:fastFailedAccessories:slowFailedAccessories:tmpErrorResponseTuples:waitGroup:failureWaitGroup:activity:", v30, v11, a5, v27, v50, v54, v32, v53, v31, v66));
      v34 = self;
      HMFGetOSLogHandle();
      v35 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v68 = v36;
        _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Wait before final notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v33);
      -[HMDHome workQueue](v34, "workQueue");
      v37 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __81__HMDHome__readCharacteristicValues_requestMessage_source_withCompletionHandler___block_invoke;
      block[3] = &unk_1E89A4F58;
      v65 = v49;
      block[4] = v34;
      v58 = v27;
      v59 = v32;
      v60 = v48;
      v61 = v11;
      v62 = v47;
      v63 = v26;
      v64 = v56;
      v38 = v26;
      v39 = v47;
      v40 = v48;
      v41 = v32;
      v42 = v27;
      dispatch_group_notify(v31, v37, block);

    }
  }
  __HMFActivityScopeLeave();

}

- (void)_waitForEarlyDispatchTimeoutOnReadRequest:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 activity:(id)a7 slowFailedAccessories:(id)a8 tmpErrorResponseTuples:(id)a9 unreachableWaitGroup:(id)a10 failureWaitGroup:(id)a11
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  char v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD block[4];
  id v36;
  HMDHome *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  unint64_t v45;
  char v46;

  v15 = a3;
  v16 = a4;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v21 = a10;
  v22 = a11;
  v23 = objc_msgSend(v16, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  dispatch_get_global_queue(0, 0);
  v24 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __184__HMDHome__waitForEarlyDispatchTimeoutOnReadRequest_requestMessage_source_pendingResponses_activity_slowFailedAccessories_tmpErrorResponseTuples_unreachableWaitGroup_failureWaitGroup___block_invoke;
  block[3] = &unk_1E89B6EF8;
  v36 = v21;
  v37 = self;
  v38 = v19;
  v39 = v18;
  v46 = v23;
  v40 = v17;
  v41 = v22;
  v42 = v15;
  v43 = v16;
  v44 = v20;
  v45 = a5;
  v25 = v20;
  v26 = v16;
  v27 = v15;
  v28 = v22;
  v29 = v17;
  v30 = v18;
  v31 = v19;
  v32 = v21;
  dispatch_async(v24, block);

}

- (id)_setupPendingResponseTimerIdentifier:(id)a3 originalRequestIdentifier:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = v7;
  if (v7)
  {
    v9 = v7;

    v10 = objc_alloc(MEMORY[0x1E0D286C8]);
    v11 = (void *)objc_msgSend(v10, "initWithTimeInterval:options:", 1, *(double *)&pendingResponseTickPeriod);
    -[HMDHome setPendingResponsesTimer:](self, "setPendingResponsesTimer:", v11);

    -[HMDHome workQueue](self, "workQueue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome pendingResponsesTimer](self, "pendingResponsesTimer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setDelegateQueue:", v12);

    -[HMDHome pendingResponsesTimer](self, "pendingResponsesTimer");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setDelegate:", self);

    -[HMDHome pendingResponsesTimer](self, "pendingResponsesTimer");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "resume");

    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome pendingResponsesTimer](v17, "pendingResponsesTimer");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543874;
      v23 = v19;
      v24 = 2048;
      v25 = v20;
      v26 = 2112;
      v27 = v9;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Started pending responses timer %p for request %@", (uint8_t *)&v22, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
  }
  else
  {
    v9 = v6;
  }

  return v9;
}

- (void)_sendReadRequestToAccessoryServer:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 slowFailedAccessories:(id)a7 fastFailedAccessories:(id)a8 unreachableWaitGroup:(id)a9 waitGroup:(id)a10 activity:(id)a11
{
  id v15;
  id v16;
  id v17;
  char v18;
  void *v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  char v34;
  char v36;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  id obj;
  id v43;
  NSObject *group;
  NSObject *v45;
  _QWORD v46[6];
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  NSObject *v54;
  NSObject *v55;
  char v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  uint64_t v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v16 = a4;
  v17 = a6;
  v40 = a7;
  v39 = a8;
  v45 = a9;
  group = a10;
  v43 = a11;
  v18 = objc_msgSend(v16, "BOOLForKey:", CFSTR("kDoNotForwardMessageKey"));
  v36 = objc_msgSend(v16, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  v19 = v16;
  objc_msgSend(v16, "identifier");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  obj = v15;
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
  if (v41)
  {
    v34 = v18 ^ 1;
    v33 = *(_QWORD *)v59;
    do
    {
      for (i = 0; i != v41; ++i)
      {
        if (*(_QWORD *)v59 != v33)
          objc_enumerationMutation(obj);
        v21 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * i);
        dispatch_group_enter(group);
        dispatch_group_enter(v45);
        objc_msgSend(obj, "objectForKey:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "shortDescription");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "markWithFormat:", CFSTR("Starting read for accessory: %@"), v23);

        objc_msgSend(v21, "uuid");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = (void *)MEMORY[0x1D17BA0A0]();
        v26 = self;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v22, "count");
          *(_DWORD *)buf = 138543874;
          v63 = v28;
          v64 = 2112;
          v65 = v24;
          v66 = 2048;
          v67 = v29;
          _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Starting read for accessory %@ with %ld requests", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v25);
        objc_msgSend(v22, "count");
        -[HMDHome workQueue](v26, "workQueue");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v46[0] = MEMORY[0x1E0C809B0];
        v46[1] = 3221225472;
        v46[2] = __168__HMDHome__sendReadRequestToAccessoryServer_requestMessage_source_pendingResponses_slowFailedAccessories_fastFailedAccessories_unreachableWaitGroup_waitGroup_activity___block_invoke;
        v46[3] = &unk_1E89A4F30;
        v46[4] = v26;
        v46[5] = v21;
        v47 = v43;
        v48 = v24;
        v56 = v34;
        v57 = v36;
        v49 = v40;
        v50 = v39;
        v51 = v17;
        v31 = v19;
        v52 = v31;
        v53 = v38;
        v54 = group;
        v55 = v45;
        v32 = v24;
        objc_msgSend(v21, "readCharacteristicValues:source:message:queue:logEvent:completionHandler:", v22, a5, v31, v30, 0, v46);

      }
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
    }
    while (v41);
  }

}

- (id)__readWriteResponseHandler:(id)a3 unhandledRequests:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id location;

  v6 = a3;
  v7 = a4;
  objc_initWeak(&location, self);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __56__HMDHome___readWriteResponseHandler_unhandledRequests___block_invoke;
  v12[3] = &unk_1E89C1698;
  objc_copyWeak(&v15, &location);
  v13 = v7;
  v14 = v6;
  v8 = v6;
  v9 = v7;
  v10 = _Block_copy(v12);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);
  return v10;
}

void __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke_2;
    v8[3] = &unk_1E89BE790;
    v5 = *(void **)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 48);
    v9 = v6;
    v11 = v7;
    v10 = v3;
    dispatch_async(v4, v8);

  }
}

- (void)retrieveHAPAccessoryForHMDAccessory:(id)a3 linkType:(int64_t)a4 forceRetrieve:(BOOL)a5 queue:(id)a6 completion:(id)a7
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  int64_t v23;
  BOOL v24;

  v12 = a3;
  v13 = a6;
  v14 = a7;
  -[HMDHome workQueue](self, "workQueue");
  v15 = objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke;
  v19[3] = &unk_1E89AB3B8;
  v19[4] = self;
  v20 = v12;
  v22 = v14;
  v23 = a4;
  v24 = a5;
  v21 = v13;
  v16 = v13;
  v17 = v14;
  v18 = v12;
  dispatch_async(v15, v19);

}

- (void)_getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6
{
  _BOOL4 v6;
  unsigned int v7;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t i;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  BOOL v26;
  BOOL v27;
  char v28;
  BOOL v29;
  char v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  HMDHome *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t j;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t k;
  void *v72;
  void *v73;
  _BOOL4 v74;
  void (**v75)(_QWORD, void *);
  void *v76;
  void *v77;
  char v78;
  HMDHome *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id obj;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  void *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[128];
  _BYTE v107[128];
  const __CFString *v108;
  void *v109;
  _BYTE v110[128];
  uint64_t v111;

  v6 = a5;
  v92 = a4;
  v7 = a3;
  v111 = *MEMORY[0x1E0C80C00];
  v9 = a6;
  v10 = v9;
  if (v9)
  {
    v74 = v6;
    v75 = (void (**)(_QWORD, void *))v9;
    -[HMDHome accessories](self, "accessories");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v11, "count"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v11, "count"));
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v78 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](self);
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v105 = 0u;
    obj = v11;
    v79 = self;
    v85 = v12;
    v91 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v102, v110, 16);
    if (v91)
    {
      v90 = v7 & 0x201;
      v89 = v7 & 0x50;
      v88 = *(_QWORD *)v103;
      v84 = *MEMORY[0x1E0CB9580];
      v83 = *MEMORY[0x1E0CB95D8];
      v82 = *MEMORY[0x1E0CB95A8];
      v81 = *MEMORY[0x1E0CB95E8];
      v80 = *MEMORY[0x1E0CB9568];
      v87 = v7;
      do
      {
        for (i = 0; i != v91; ++i)
        {
          if (*(_QWORD *)v103 != v88)
            objc_enumerationMutation(obj);
          v14 = *(id *)(*((_QWORD *)&v102 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v15 = v14;
          else
            v15 = 0;
          v16 = v15;

          v17 = v16;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v18 = v17;
          else
            v18 = 0;
          v19 = v18;

          v20 = v17;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v21 = v20;
          else
            v21 = 0;
          v22 = v21;

          v23 = v14;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v24 = v23;
          else
            v24 = 0;
          v25 = v24;

          if (v20)
            v26 = v92;
          else
            v26 = 0;
          if (v89)
            v27 = v22 == 0;
          else
            v27 = 1;
          v28 = !v27;
          v93 = v19;
          if (v90)
            v29 = v25 == 0;
          else
            v29 = 1;
          v30 = !v29;
          if (v26
            || (v28 & 1) != 0
            || ((v19 != 0) & (v7 >> 8)) != 0
            || (v30 & 1) != 0
            || (v7 & 0x400) != 0 && objc_msgSend(v25, "hasTelevisionService"))
          {
            objc_msgSend(v23, "runtimeState");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v32 = (void *)objc_msgSend(v31, "mutableCopy");

            if (v20 && v92)
            {
              objc_msgSend(v20, "mediaProfile");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v34 = v33;
              if (v33)
              {
                objc_msgSend(v33, "mediaSession");
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v35, "state");
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                if (v36
                  || (objc_msgSend(v20, "identifier"),
                      v37 = (void *)objc_claimAutoreleasedReturnValue(),
                      -[HMDHome mediaSessionStateWithIdentifier:](v79, "mediaSessionStateWithIdentifier:", v37),
                      v36 = (void *)objc_claimAutoreleasedReturnValue(),
                      v37,
                      v36))
                {
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v36, "playbackState"));
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v32, "setObject:forKeyedSubscript:", v38, v84);

                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v36, "shuffleState"));
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v32, "setObject:forKeyedSubscript:", v39, v83);

                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v36, "repeatState"));
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v32, "setObject:forKeyedSubscript:", v40, v82);

                  objc_msgSend(v36, "volume");
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v32, "setObject:forKeyedSubscript:", v41, v81);

                  objc_msgSend(v36, "mediaUniqueIdentifier");
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v32, "setObject:forKeyedSubscript:", v42, v80);

                }
                if (!v35)
                {
                  objc_msgSend(v22, "device");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v43)
                    v44 = v78;
                  else
                    v44 = 1;
                  if ((v44 & 1) != 0)
                  {
                    objc_msgSend(v76, "addObject:", v34);
                  }
                  else
                  {
                    objc_msgSend(v77, "objectForKey:", v43);
                    v45 = (void *)objc_claimAutoreleasedReturnValue();
                    if (!v45)
                    {
                      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                      v45 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v77, "setObject:forKey:", v45, v43);
                    }
                    objc_msgSend(v45, "addObject:", v34);

                  }
                }

                v12 = v85;
              }

            }
            v46 = (void *)objc_msgSend(v32, "copy");
            objc_msgSend(v23, "uuid");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "UUIDString");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "setObject:forKeyedSubscript:", v46, v48);

            v7 = v87;
          }

        }
        v91 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v102, v110, 16);
      }
      while (v91);
    }

    v108 = CFSTR("kAccessoriesListKey");
    v49 = (void *)objc_msgSend(v12, "copy");
    v109 = v49;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v109, &v108, 1);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = (void *)objc_msgSend(v50, "mutableCopy");

    v10 = v75;
    v52 = v79;
    if (v74)
    {
      -[HMDHome residentDeviceManager](v79, "residentDeviceManager");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "residentDevices");
      v54 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v54, "count"));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v98 = 0u;
      v99 = 0u;
      v100 = 0u;
      v101 = 0u;
      v56 = v54;
      v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v98, v107, 16);
      if (v57)
      {
        v58 = v57;
        v59 = *(_QWORD *)v99;
        do
        {
          for (j = 0; j != v58; ++j)
          {
            if (*(_QWORD *)v99 != v59)
              objc_enumerationMutation(v56);
            v61 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * j);
            objc_msgSend(v61, "identifier");
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v62, "UUIDString");
            v63 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v61, "runtimeState");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v55, "setObject:forKey:", v64, v63);

          }
          v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v98, v107, 16);
        }
        while (v58);
      }

      v65 = (void *)objc_msgSend(v55, "copy");
      objc_msgSend(v51, "setObject:forKey:", v65, *MEMORY[0x1E0CB91F8]);

      v52 = v79;
      v12 = v85;
    }
    v66 = (void *)objc_msgSend(v51, "copy");
    v75[2](v75, v66);

    if (objc_msgSend(v76, "count"))
      -[HMDHome _readProfileState:viaDevice:](v52, v76, 0);
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v67 = v77;
    v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v94, v106, 16);
    if (v68)
    {
      v69 = v68;
      v70 = *(_QWORD *)v95;
      do
      {
        for (k = 0; k != v69; ++k)
        {
          if (*(_QWORD *)v95 != v70)
            objc_enumerationMutation(v67);
          v72 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * k);
          objc_msgSend(v67, "objectForKey:", v72);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v73, "count"))
            -[HMDHome _readProfileState:viaDevice:](v52, v73, v72);

        }
        v69 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v94, v106, 16);
      }
      while (v69);
    }

  }
}

- (HMMTRFabric)fabric
{
  return (HMMTRFabric *)objc_getProperty(self, a2, 1464, 1);
}

- (id)_residentUsers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHome users](self, "users");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHome users](self, "users", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend(v5, "addObject:", v11);
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  return v5;
}

- (NSArray)users
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_users, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (BOOL)isApplicationBundleIDSubscribedToAppleMediaAccessoryState:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = -[NSMutableSet containsObject:](self->_notificationRegistrationsForAppleMediaAccessories, "containsObject:", v4);
  os_unfair_recursive_lock_unlock();

  return (char)self;
}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  if (v4)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_3;
    v7[3] = &unk_1E89C1D68;
    v9 = *(id *)(a1 + 40);
    v8 = v3;
    dispatch_async(v4, v7);

  }
  else
  {
    v5 = _Block_copy(*(const void **)(a1 + 40));
    v6 = v5;
    if (v5)
      (*((void (**)(void *, id))v5 + 2))(v5, v3);

  }
}

- (void)_registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientBundleIdentifier:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  uint64_t v15;
  _BOOL4 v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  id v33;
  void *v34;
  int v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v6 = a3;
  v39 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v10);

  -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v6)
  {
    v13 = objc_msgSend(v11, "containsObject:", v8);

    if ((v13 & 1) != 0)
      goto LABEL_6;
    -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v8);
  }
  else
  {
    objc_msgSend(v11, "removeObject:", v8);
  }

LABEL_6:
  -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");

  if (v15)
  {
    v16 = -[HMDHome currentRemoteReachabilityRegistration](self, "currentRemoteReachabilityRegistration");
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v16)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome accessoryRemoteReachabilityEnabledClients](v18, "accessoryRemoteReachabilityEnabledClients");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543618;
        v36 = v21;
        v37 = 2112;
        v38 = v22;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability registration as we are registered and have the clients %@", (uint8_t *)&v35, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
    }
    else
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543362;
        v36 = v23;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Updating remote accessory reachability registration as we are not registered but have clients", (uint8_t *)&v35, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      if (v9)
        v24 = v9;
      else
        v24 = v8;
      -[HMDHome __registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:](v18, "__registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:", 1, v24);
    }
  }
  -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "count");

  if (!v26)
  {
    v27 = -[HMDHome currentRemoteReachabilityRegistration](self, "currentRemoteReachabilityRegistration");
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = v30;
    if (v27)
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543362;
        v36 = v32;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Updating remote accessory reachability registration as we are registered but have no clients", (uint8_t *)&v35, 0xCu);

      }
      objc_autoreleasePoolPop(v28);
      if (v9)
        v33 = v9;
      else
        v33 = v8;
      -[HMDHome __registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:](v29, "__registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:", 0, v33);
    }
    else
    {
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543362;
        v36 = v34;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability registration as we are not registered and have no clients", (uint8_t *)&v35, 0xCu);

      }
      objc_autoreleasePoolPop(v28);
    }
  }

}

- (NSMutableArray)accessoryRemoteReachabilityEnabledClients
{
  return self->_accessoryRemoteReachabilityEnabledClients;
}

void __184__HMDHome__waitForEarlyDispatchTimeoutOnReadRequest_requestMessage_source_pendingResponses_activity_slowFailedAccessories_tmpErrorResponseTuples_unreachableWaitGroup_failureWaitGroup___block_invoke(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  char v20;

  v2 = *(NSObject **)(a1 + 32);
  v3 = dispatch_time(0, 250000000);
  dispatch_group_wait(v2, v3);
  objc_msgSend(*(id *)(a1 + 40), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __184__HMDHome__waitForEarlyDispatchTimeoutOnReadRequest_requestMessage_source_pendingResponses_activity_slowFailedAccessories_tmpErrorResponseTuples_unreachableWaitGroup_failureWaitGroup___block_invoke_2;
  v10[3] = &unk_1E89A4E18;
  v11 = *(id *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 112);
  v5 = *(id *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 40);
  v13 = v5;
  v14 = v6;
  v15 = *(id *)(a1 + 72);
  v16 = *(id *)(a1 + 80);
  v7 = *(id *)(a1 + 88);
  v9 = *(void **)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v17 = v7;
  v19 = v8;
  v18 = v9;
  dispatch_async(v4, v10);

}

void __184__HMDHome__waitForEarlyDispatchTimeoutOnReadRequest_requestMessage_source_pendingResponses_activity_slowFailedAccessories_tmpErrorResponseTuples_unreachableWaitGroup_failureWaitGroup___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(v2, "count");
    if (*(_BYTE *)(a1 + 104))
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    else
      objc_msgSend(*(id *)(a1 + 48), "allResponses");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "begin");
    v8 = *(id *)(a1 + 40);
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v10 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for unreachable read accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 56), "_redispatchReadForAccessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:errorResponseTuples:", v2, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 96), v3, *(_QWORD *)(a1 + 88));
    __HMFActivityScopeLeave();

    objc_msgSend(*(id *)(a1 + 32), "removeObjectsInArray:", v2);
  }

}

- (void)_handleCoalescedModifyNotifications
{
  NSObject *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void (**v8)(void *, void *, void *, uint64_t);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD aBlock[5];
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome setModifyNotificationsCoalesceTimer:](self, "setModifyNotificationsCoalesceTimer:", 0));
  v5 = self;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v7;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to notification coalesce timer firing", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__HMDHome__handleCoalescedModifyNotifications__block_invoke;
  aBlock[3] = &unk_1E89A51F0;
  aBlock[4] = v5;
  v8 = (void (**)(void *, void *, void *, uint64_t))_Block_copy(aBlock);
  -[HMDHome enableNotificationPayload](v5, "enableNotificationPayload");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2](v8, v9, v10, 1);

  -[HMDHome disableNotificationPayload](v5, "disableNotificationPayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2](v8, v11, v12, 0);

}

void __46__HMDHome__handleCoalescedModifyNotifications__block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v7 = a3;
  if (objc_msgSend(v11, "count") || objc_msgSend(v7, "count"))
  {
    objc_msgSend(v11, "na_dictionaryByMappingValues:", &__block_literal_global_1428);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "copy");

    v10 = (void *)objc_msgSend(v7, "copy");
    objc_msgSend(*(id *)(a1 + 32), "_modifyCharacteristicNotificationsOnResident:mediaNotifications:actionSetNotificationPayload:enableNotification:", v9, MEMORY[0x1E0C9AA70], v10, a4);
    objc_msgSend(v11, "removeAllObjects");
    objc_msgSend(v7, "removeAllObjects");

  }
}

- (NSArray)accessoriesWithWalletKeySupport
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)_handleEnableNotifications:(id)a3
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD);
  void *v19;
  uint64_t v20;
  BOOL v21;
  void *v22;
  int v23;
  uint64_t v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void (**v41)(_QWORD, _QWORD, _QWORD);
  void *v42;
  char v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  BOOL v57;
  void (**v58)(_QWORD, _QWORD);
  int v59;
  _QWORD aBlock[5];
  id v61;
  char v62;
  char v63;
  _QWORD v64[3];
  _QWORD v65[3];
  uint8_t buf[4];
  uint64_t v67;
  __int16 v68;
  void *v69;
  __int16 v70;
  void *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v63 = 0;
  v6 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kCharacteristicNotificationEnableKey"), &v63);
  v62 = 0;
  v7 = *MEMORY[0x1E0CB8D50];
  v8 = objc_msgSend(v4, "BOOLForKey:keyPresent:", *MEMORY[0x1E0CB8D50], &v62);
  if (v63 && v62)
  {
    v9 = v8;
    objc_msgSend(v4, "applicationBundleIdentifier");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (!v10)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v67 = (uint64_t)v40;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to look up the application bundle identifier from request to enable home notifications", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      objc_msgSend(v4, "responseHandler");
      v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        objc_msgSend(v4, "responseHandler");
        v41 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 52);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v41)[2](v41, v42, 0);

        v10 = 0;
      }
      goto LABEL_37;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v67 = (uint64_t)v15;
      v68 = 2112;
      v69 = v10;
      v70 = 2112;
      v71 = v16;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling Enable Notifications from ClientIdentifier: %@, setting: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __38__HMDHome__handleEnableNotifications___block_invoke;
    aBlock[3] = &unk_1E89A5020;
    aBlock[4] = v12;
    v61 = v4;
    v17 = _Block_copy(aBlock);
    v18 = (void (**)(_QWORD, _QWORD))v17;
    if (!(_DWORD)v6)
    {
      -[HMDHome addNotificationDeregistrationForApplicationBundleIdentifier:](v12, "addNotificationDeregistrationForApplicationBundleIdentifier:", v10);
      -[HMDHome _startHomeNotificationDeregistrationTimer](v12, "_startHomeNotificationDeregistrationTimer");
      v43 = 0;
      v21 = 0;
LABEL_33:
      objc_msgSend(MEMORY[0x1E0D28668], "sharedPowerLogger");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "reportCharacteristicNotificationRegistrationEvent:clientIdentifier:", v6, v10);

      if (!v21 && (v43 & 1) == 0)
        v18[2](v18, 0);

      goto LABEL_37;
    }
    v58 = (void (**)(_QWORD, _QWORD))v17;
    -[HMDHome removeNotificationDeregistrationForApplicationBundleIdentifier:](v12, "removeNotificationDeregistrationForApplicationBundleIdentifier:", v10);
    -[HMDHome notificationRegistrations](v12, "notificationRegistrations");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "count");
    v21 = v20 == 0;

    -[HMDHome notificationRegistrationsForAppleMediaAccessories](v12, "notificationRegistrationsForAppleMediaAccessories");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v22, "count"))
      v23 = 0;
    else
      v23 = v9;

    v24 = -[HMDHome addNotificationRegistrationForApplicationBundleIdentifier:includesAppleMediaAccessories:](v12, "addNotificationRegistrationForApplicationBundleIdentifier:includesAppleMediaAccessories:", v10, v9);
    v59 = v23;
    if (v23 == 1)
    {
      v25 = (void *)MEMORY[0x1D17BA0A0](v24);
      v26 = v12;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v67 = v28;
        v55 = v25;
        v29 = (void *)v28;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Modifying direct Apple Media notification registrations with resident due to HomeKit client request", buf, 0xCu);

        v25 = v55;
      }

      objc_autoreleasePoolPop(v25);
      -[HMDHome _subscribeForHomeAppleMediaNotificationsOnDirectTransports:](v26, 1);
      v21 = v20 == 0;
    }
    if (v20)
    {
      -[HMDHome homeManager](v12, "homeManager");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "chipDataSource");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "updateNotificationsEnabled:forHome:keepAliveOnly:", 1, v12, 0);

      v18 = v58;
      if (!v59)
        goto LABEL_30;
    }
    else
    {
      v57 = v21;
      v44 = (void *)MEMORY[0x1D17BA0A0]();
      v45 = v12;
      HMFGetOSLogHandle();
      v46 = objc_claimAutoreleasedReturnValue();
      v18 = v58;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v56 = v44;
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v67 = (uint64_t)v47;
        _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to HomeKit client request", buf, 0xCu);

        v44 = v56;
      }

      objc_autoreleasePoolPop(v44);
      -[HMDHome _subscribeForHomeNotificationsFromRemoteGateway:](v45, "_subscribeForHomeNotificationsFromRemoteGateway:", 1);
      -[HMDHome _subscribeForHomeNotificationsOnDirectTransports:](v45, 1);
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setNotificationsUpdatedTime:](v45, "setNotificationsUpdatedTime:", v48);

      -[HMDHome homeManager](v45, "homeManager");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "chipDataSource");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "updateNotificationsEnabled:forHome:keepAliveOnly:", 1, v45, 0);

      v21 = v57;
    }
    v65[0] = MEMORY[0x1E0C9AAB0];
    v64[0] = CFSTR("kCharacteristicNotificationEnableKey");
    v64[1] = CFSTR("kCharacteristicNotificationEnableTime");
    -[HMDHome notificationsUpdatedTime](v12, "notificationsUpdatedTime");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v65[1] = v51;
    v64[2] = v7;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v65[2] = v52;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v65, v64, 3);
    v53 = (void *)objc_claimAutoreleasedReturnValue();

    ((void (**)(_QWORD, void *))v18)[2](v18, v53);
LABEL_30:
    logAndPostNotification(CFSTR("HMDHomeDidEnableCharacteristicNotifyEventNotification"), v12, 0);
    -[HMDHome _refreshCharacteristicValuesOnHomeNotificationEnable](v12, "_refreshCharacteristicValuesOnHomeNotificationEnable");
    if ((_DWORD)v9)
      -[HMDHome _refreshMediaProfilesOnHomeNotificationEnable](v12, "_refreshMediaProfilesOnHomeNotificationEnable");
    v43 = v59;
    goto LABEL_33;
  }
  v32 = (void *)MEMORY[0x1D17BA0A0](v8);
  v33 = self;
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v67 = (uint64_t)v35;
    v68 = 2112;
    v69 = v36;
    v70 = 2112;
    v71 = v37;
    _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key (hasHAPKey: %@, hasAppleMediaKey: %@) to enable home notifications", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v32);
  objc_msgSend(v4, "responseHandler");
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  if (v38)
  {
    objc_msgSend(v4, "responseHandler");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 27);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v10)[2](v10, v39, 0);

LABEL_37:
  }

}

void __87__HMDHome_retrieveHAPAccessoryForHMDAccessory_linkType_forceRetrieve_queue_completion___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(void *, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void __38__HMDHome__handleEnableNotifications___block_invoke(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  HMDHomeManagerXPCMessageSendPolicy *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v3 = (objc_class *)MEMORY[0x1E0D285D8];
  v4 = a2;
  v5 = [v3 alloc];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initWithTarget:", v6);

  v8 = objc_alloc(MEMORY[0x1E0D285F8]);
  v9 = (void *)objc_msgSend(v8, "initWithName:destination:payload:", *MEMORY[0x1E0CBAAE0], v7, v4);

  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setIdentifier:", v10);

  v11 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:", 4, 1);
  objc_msgSend(v9, "setSendPolicy:", v11);
  objc_msgSend(*(id *)(a1 + 32), "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __38__HMDHome__handleEnableNotifications___block_invoke_2;
  v13[3] = &unk_1E89C2350;
  v14 = *(id *)(a1 + 40);
  objc_msgSend(v12, "sendMessage:completionHandler:", v9, v13);

}

void __24__HMDHome_handleActive___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (isWatch())
  {
    if (objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
    {
      objc_msgSend(*(id *)(a1 + 32), "WiFiAssertion");
      v2 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v2)
      {
        v3 = (void *)MEMORY[0x1D17BA0A0]();
        v4 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v16 = v6;
          _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Taking WiFi assertion", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v3);
        objc_msgSend(*(id *)(a1 + 32), "wifiManager");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(*(id *)(a1 + 32), "shortDescription");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "stringWithFormat:", CFSTR("Remote Access for %@"), v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "beginActiveAssertionWithOptions:reason:", 0, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "setWiFiAssertion:", v11);

        objc_msgSend(*(id *)(a1 + 32), "wifiManager");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "takeWoWAssertion");

      }
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "userInfo");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "hmf_stringForKey:", CFSTR("HMDXPCConnectionBundleIdentifier"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "_registerForAccessoryReachabilityNotifications:registrationIdentifier:clientBundleIdentifier:", 1, CFSTR("HMDAccessoryActiveClientRemoteRegistrationIdentifierKey"), v14);
  objc_msgSend(*(id *)(a1 + 32), "_registerForMatterFabricNotifications:registrationIdentifier:clientBundleIdentifier:", 1, CFSTR("HMDAccessoryActiveClientRemoteRegistrationIdentifierKey"), v14);

}

uint64_t __116__HMDHome_getRunTimeStateUpdateWithOptions_includeMediaAccessorySessionState_includeResidentDeviceState_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_getRunTimeStateUpdateWithOptions:includeMediaAccessorySessionState:includeResidentDeviceState:completion:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(_QWORD *)(a1 + 40));
}

- (void)respondMessage:(id)a3 withSettingResults:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v17 = 0;
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v7, 1, &v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v17;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  -[HMDHome lightLogCategory](self, "lightLogCategory");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v8)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v14;
      v22 = 2112;
      v23 = v7;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Responding with light profile settings: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v18 = *MEMORY[0x1E0CB9168];
    v19 = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "respondWithPayload:", v15);
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v21 = v16;
      v22 = 2112;
      v23 = v7;
      v24 = 2112;
      v25 = v9;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to encode profile setting results: %@ with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "respondWithError:", v15);
  }

}

- (void)handleFetchLightProfileSettingsMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  objc_msgSend(v4, "setForKey:", *MEMORY[0x1E0CB9160]);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome handleFetchLightProfileSettingsMessage:withLightProfileUUIDs:](self, "handleFetchLightProfileSettingsMessage:withLightProfileUUIDs:", v4, v6);

}

- (NSArray)triggers
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_currentTriggers, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (void)timerDidFire:(id)a3
{
  HMFTimer *v4;
  NSObject *v5;
  HMFTimer *v6;
  HMFTimer *v7;
  HMFTimer *v8;
  HMFTimer *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = (HMFTimer *)a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
  v6 = (HMFTimer *)objc_claimAutoreleasedReturnValue();

  if (v6 == v4)
  {
    -[HMDHome _handleCoalescedModifyNotifications](self, "_handleCoalescedModifyNotifications");
  }
  else
  {
    -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
    v7 = (HMFTimer *)objc_claimAutoreleasedReturnValue();

    if (v7 == v4)
    {
      -[HMDHome _handleDisableNotificationsTimerFired](self, "_handleDisableNotificationsTimerFired");
    }
    else
    {
      -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
      v8 = (HMFTimer *)objc_claimAutoreleasedReturnValue();

      if (v8 == v4)
      {
        -[HMDHome _handleRemoteReachabilityNotificationTimerFired](self, "_handleRemoteReachabilityNotificationTimerFired");
      }
      else
      {
        -[HMDHome pendingResponsesTimer](self, "pendingResponsesTimer");
        v9 = (HMFTimer *)objc_claimAutoreleasedReturnValue();

        if (v9 == v4)
        {
          -[HMDHome _handlePendingResponsesTimerFired:](self, "_handlePendingResponsesTimerFired:", 0);
        }
        else if (self->_homeLocationTimer == v4)
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          v11 = self;
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = 138543362;
            v15 = v13;
            _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Evaluating home location", (uint8_t *)&v14, 0xCu);

          }
          objc_autoreleasePoolPop(v10);
          -[HMDHome updateHomeLocation](v11, "updateHomeLocation");
        }
        else if (self->_accessoryReachabilityUpdatesTimer == v4)
        {
          -[HMDHome _handleAccessoryReachabilityUpdatesTimerFired](self, "_handleAccessoryReachabilityUpdatesTimerFired");
        }
      }
    }
  }

}

- (uint64_t)supportsUnifiedMediaNotificationsOnResidents
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  if (!a1)
    return 0;
  objc_msgSend(a1, "primaryResident");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "device");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(v1, "capabilities");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "supportsUnifiedMediaNotifications");

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (HMDManagedStagedValue)stagedRemoteReachabilityRegistration
{
  return self->_stagedRemoteReachabilityRegistration;
}

- (void)setNotificationsUpdatedTime:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 512);
}

- (void)removeNotificationDeregistrationForApplicationBundleIdentifier:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet removeObject:](self->_notificationDeregistrations, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (NSDate)notificationsUpdatedTime
{
  return self->_notificationsUpdatedTime;
}

- (id)notificationRegistrationsForAppleMediaAccessories
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableSet copy](self->_notificationRegistrationsForAppleMediaAccessories, "copy");
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (HMDHomeNFCReaderKeyManager)nfcReaderKeyManager
{
  return (HMDHomeNFCReaderKeyManager *)objc_getProperty(self, a2, 608, 1);
}

- (HMFMessageDispatcher)msgDispatcher
{
  return self->_msgDispatcher;
}

- (BOOL)hasCharacteristicNotificationRegistrations
{
  void *v2;
  BOOL v3;

  -[HMDHome notificationRegistrations](self, "notificationRegistrations");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

- (void)handleActive:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __24__HMDHome_handleActive___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)getRunTimeStateUpdateWithOptions:(unint64_t)a3 includeMediaAccessorySessionState:(BOOL)a4 includeResidentDeviceState:(BOOL)a5 completion:(id)a6
{
  id v10;
  NSObject *v11;
  id v12;
  _QWORD v13[5];
  id v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;

  v10 = a6;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __116__HMDHome_getRunTimeStateUpdateWithOptions_includeMediaAccessorySessionState_includeResidentDeviceState_completion___block_invoke;
  v13[3] = &unk_1E89A45D8;
  v14 = v10;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v13[4] = self;
  v12 = v10;
  dispatch_async(v11, v13);

}

- (NSString)description
{
  return (NSString *)-[HMDHome descriptionWithPointer:](self, "descriptionWithPointer:", 0);
}

- (id)descriptionWithPointer:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a3;
  v5 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend((id)objc_opt_class(), "shortDescription");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" %p"), self);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = &stru_1E89C3E38;
  }
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome spiClientIdentifier](self, "spiClientIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "UUIDString");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome name](self, "name");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringWithFormat:", CFSTR("<%@%@, ID = %@, spiID = %@, NM = %@>"), v6, v7, v9, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  return v13;
}

- (BOOL)currentRemoteReachabilityRegistration
{
  void *v2;
  void *v3;

  -[HMDHome stagedRemoteReachabilityRegistration](self, "stagedRemoteReachabilityRegistration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "value");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v2) = objc_msgSend(v3, "BOOLValue");
  return (char)v2;
}

- (void)addNotificationRegistrationForApplicationBundleIdentifier:(id)a3 includesAppleMediaAccessories:(BOOL)a4
{
  _BOOL4 v4;
  id v6;

  v4 = a4;
  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet addObject:](self->_notificationRegistrations, "addObject:", v6);
  if (v4)
    -[NSMutableSet addObject:](self->_notificationRegistrationsForAppleMediaAccessories, "addObject:", v6);
  os_unfair_recursive_lock_unlock();

}

- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3 accessories:(id)a4
{
  _BOOL4 v4;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  void *v56;
  uint64_t v57;

  v4 = a3;
  v57 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v44 = 0;
  -[HMDHome _notificationPayloadsForRemoteGateway:accessories:enableCharacteristicNotificationPayload:characteristicNotificationThresholdsPayload:disableCharacteristicNotificationPayload:enableMediaNotificationPayload:disableMediaNotificationPayload:](self, v4, v6, &v48, &v47, &v46, &v45, &v44);
  v8 = v48;
  v9 = v47;
  v10 = v46;
  v11 = v45;
  v12 = v44;
  if (objc_msgSend(v10, "count")
    || objc_msgSend(v8, "count")
    || objc_msgSend(v12, "count")
    || objc_msgSend(v11, "count"))
  {
    if (objc_msgSend(v8, "count") || objc_msgSend(v11, "count"))
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v37 = v13;
        v16 = v11;
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v38 = v12;
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "shortDescription");
        v39 = v8;
        v41 = v10;
        v19 = v6;
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "shortDescription");
        v21 = v9;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v50 = v17;
        v51 = 2112;
        v52 = v18;
        v53 = 2112;
        v54 = v20;
        v55 = 2112;
        v56 = v22;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Registering notifications with remote gateway when notificationEnabled: %@, characteristics: %@, properties: %@", buf, 0x2Au);

        v9 = v21;
        v6 = v19;
        v8 = v39;
        v10 = v41;

        v12 = v38;
        v11 = v16;
        v13 = v37;
      }

      objc_autoreleasePoolPop(v13);
      -[HMDHome _modifyCharacteristicNotificationsOnResident:mediaNotifications:actionSetNotificationPayload:enableNotification:](v14, "_modifyCharacteristicNotificationsOnResident:mediaNotifications:actionSetNotificationPayload:enableNotification:", v8, v11, MEMORY[0x1E0C9AA60], 1);
    }
    if (objc_msgSend(v10, "count", v37) || objc_msgSend(v12, "count"))
    {
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v42 = v11;
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v43 = v6;
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "shortDescription");
        v40 = v9;
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "shortDescription");
        v29 = v12;
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v50 = v26;
        v51 = 2112;
        v52 = v27;
        v53 = 2112;
        v54 = v28;
        v55 = 2112;
        v56 = v30;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@De-registering notifications with remote gateway when notificationEnabled: %@, characteristics: %@, properties: %@", buf, 0x2Au);

        v12 = v29;
        v9 = v40;

        v6 = v43;
        v11 = v42;
      }

      objc_autoreleasePoolPop(v23);
      -[HMDHome _modifyCharacteristicNotificationsOnResident:mediaNotifications:actionSetNotificationPayload:enableNotification:](v24, "_modifyCharacteristicNotificationsOnResident:mediaNotifications:actionSetNotificationPayload:enableNotification:", v10, v12, MEMORY[0x1E0C9AA60], 0);
    }
  }
  else
  {
    v31 = v12;
    v32 = v11;
    v33 = (void *)MEMORY[0x1D17BA0A0]();
    v34 = self;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v50 = v36;
      _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Not registering notifications with remote gateway since we have no modifications", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v33);
    v11 = v32;
    v12 = v31;
  }

}

- (void)_subscribeForHomeNotificationsFromRemoteGateway:(BOOL)a3
{
  _BOOL8 v3;
  id v5;
  uint64_t v6;
  id v7;
  id v8;

  v3 = a3;
  -[HMDHome accessories](self, "accessories");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if ((-[HMDHome supportsUnifiedMediaNotificationsOnResidents](self) & 1) != 0)
  {
    v5 = v7;
  }
  else
  {
    objc_msgSend(v7, "na_filter:", &__block_literal_global_621);
    v6 = objc_claimAutoreleasedReturnValue();

    v5 = (id)v6;
  }
  v8 = v5;
  -[HMDHome _subscribeForHomeNotificationsFromRemoteGateway:accessories:](self, "_subscribeForHomeNotificationsFromRemoteGateway:accessories:", v3, v5);

}

- (void)_subscribeForHomeAppleMediaNotificationsOnDirectTransports:(void *)a1
{
  NSObject *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  char v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend(a1, "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v4);

    if ((-[HMDHome supportsUnifiedMediaNotificationsOnResidents](a1) & 1) == 0)
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = a1;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v13 = v8;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Registering for apple media notifications on direct transports since we have no primary resident that supports unified notifications", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v5);
      objc_msgSend(v6, "accessories");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __70__HMDHome__subscribeForHomeAppleMediaNotificationsOnDirectTransports___block_invoke;
      v10[3] = &unk_1E89A43E0;
      v10[4] = v6;
      v11 = a2;
      objc_msgSend(v9, "na_each:", v10);

    }
  }
}

- (void)_refreshMediaProfilesOnHomeNotificationEnable
{
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  HMDHome *v24;
  void *v25;
  id obj;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](self);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v24 = self;
  -[HMDHome accessories](self, "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v32 != v7)
          objc_enumerationMutation(obj);
        v9 = *(id *)(*((_QWORD *)&v31 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11)
        {
          objc_msgSend(v11, "device");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            v13 = v4;
          else
            v13 = 1;
          if ((v13 & 1) != 0)
          {
            objc_msgSend(v11, "mediaProfile");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "addObject:", v14);
          }
          else
          {
            v15 = v3;
            objc_msgSend(v25, "objectForKey:", v12);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v14)
            {
              objc_msgSend(MEMORY[0x1E0C99DE8], "array");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "setObject:forKey:", v14, v12);
            }
            objc_msgSend(v11, "mediaProfile");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "addObject:", v16);

            v3 = v15;
          }

        }
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    }
    while (v6);
  }

  if (objc_msgSend(v3, "count"))
    -[HMDHome _readProfileState:viaDevice:](v24, v3, 0);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v17 = v25;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v28;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v28 != v20)
          objc_enumerationMutation(v17);
        v22 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * j);
        objc_msgSend(v17, "objectForKey:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v23, "count"))
          -[HMDHome _readProfileState:viaDevice:](v24, v23, v22);

      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v19);
  }

}

- (void)__registerForRemoteAccessoryReachabilityNotifications:(BOOL)a3 applicationBundleIdentifier:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v4 = a3;
  v30 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMDHome primaryResident](self, "primaryResident");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v11, "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v13;
      v26 = 2112;
      v27 = v14;
      v15 = "%{public}@No resident for home: %@, skipping remote reachability";
      goto LABEL_11;
    }
LABEL_12:

    objc_autoreleasePoolPop(v10);
    goto LABEL_13;
  }
  if (v4)
  {
    -[HMDHome accessories](self, "accessories");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "hmf_isEmpty");

    if (v9)
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome name](v11, "name");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = 138543618;
        v25 = v13;
        v26 = 2112;
        v27 = v14;
        v15 = "%{public}@No accessories in home: %@";
LABEL_11:
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v24, 0x16u);

        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    HMFEnabledStatusToString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543874;
    v25 = v19;
    v26 = 2112;
    v27 = v20;
    v28 = 2112;
    v29 = v6;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Remote accessory reachability notification: %@ applicationBundleIdentifier: %@", (uint8_t *)&v24, 0x20u);

  }
  objc_autoreleasePoolPop(v16);
  -[HMDHome stagedRemoteReachabilityRegistration](v17, "stagedRemoteReachabilityRegistration");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D28558], "BOOLeanWithBool:", v4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stageValue:", v22);

  objc_msgSend(MEMORY[0x1E0D28668], "sharedPowerLogger");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "reportRemoteReachabilityRegistrationEvent:clientIdentifier:", v4, v6);

LABEL_13:
}

- (NSString)contextID
{
  void *v2;
  void *v3;

  -[HMDHome uuid](self, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v3;
}

- (NSUUID)contextSPIUniqueIdentifier
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  +[HMDProcessInfo privateClientIdentifierSalt](HMDProcessInfo, "privateClientIdentifierSalt");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB3A28];
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v5, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSUUID *)v6;
}

- (id)homeBulletinContext
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v8[0] = CFSTR("home");
  -[HMDHome contextID](self, "contextID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v3;
  v8[1] = *MEMORY[0x1E0CB8388];
  -[HMDHome contextSPIUniqueIdentifier](self, "contextSPIUniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "UUIDString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[1] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (BOOL)hasAnyAccessoryWithWalletKeySupport
{
  void *v2;
  char v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_1722);

  return v3;
}

- (BOOL)hasAnyAccessoryWithWalletKeyAndAccessCodeSupport
{
  void *v2;
  char v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_2);

  return v3;
}

- (BOOL)hasPostedWalletKeyOnboardingBulletinForAnyAccessory
{
  void *v2;
  char v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_5);

  return v3;
}

- (void)updateHasOnboardedForWalletKey:(BOOL)a3 message:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeModel *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeModel *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v4 = a3;
  v31 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  if (-[HMDHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey") != v4)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome hasOnboardedForWalletKey](v8, "hasOnboardedForWalletKey");
      HMFBooleanToString();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138544130;
      v24 = v10;
      v25 = 2112;
      v26 = v11;
      v27 = 2112;
      v28 = v12;
      v29 = 2112;
      v30 = v6;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating has onboarded for wallet key from %@ to %@ with message: %@", (uint8_t *)&v23, 0x2Au);

    }
    objc_autoreleasePoolPop(v7);
    v13 = [HMDHomeModel alloc];
    -[HMDHome uuid](v8, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](v8, "homeManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v13, "initWithObjectChangeType:uuid:parentUUID:", 2, v14, v16);

    if (v4)
      v18 = MEMORY[0x1E0C9AAB0];
    else
      v18 = MEMORY[0x1E0C9AAA0];
    -[HMDHomeModel setHasOnboardedForWalletKey:](v17, "setHasOnboardedForWalletKey:", v18);
    -[HMDHome backingStore](v8, "backingStore");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "name");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "transaction:options:", v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v22, "add:withMessage:", v17, v6);
    objc_msgSend(v22, "run");

  }
}

uint64_t __70__HMDHome_Wallet__hasPostedWalletKeyOnboardingBulletinForAnyAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = objc_msgSend(v4, "hasPostedBulletinForWalletKeyOnboarding");

  return v5;
}

uint64_t __67__HMDHome_Wallet__hasAnyAccessoryWithWalletKeyAndAccessCodeSupport__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  unsigned int v5;
  int v6;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = objc_msgSend(v4, "supportsAccessCode");
  v6 = objc_msgSend(v4, "supportsWalletKey");

  return v6 & v5;
}

uint64_t __54__HMDHome_Wallet__hasAnyAccessoryWithWalletKeySupport__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = objc_msgSend(v4, "supportsWalletKey");

  return v5;
}

+ (id)nfcIssuerKeyIdentifierWithPairingIdentity:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(a3, "publicKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "data");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNFCReaderKey identifierForKey:](HMDHomeNFCReaderKey, "identifierForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)readAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 params:(id)a7 completion:(id)a8
{
  id v14;
  objc_class *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[5];
  id v23;

  v14 = a8;
  v15 = (objc_class *)MEMORY[0x1E0C99E08];
  v16 = a7;
  v17 = a6;
  v18 = a5;
  v19 = a4;
  v20 = objc_alloc_init(v15);
  objc_msgSend(v20, "setCHIPRemoteCommand:", *MEMORY[0x1E0D33398]);
  objc_msgSend(v20, "setCHIPEndpointId:clusterId:attributeId:", v19, v18, v17);

  objc_msgSend(v20, "setCHIPEncodedParams:", v16);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __92__HMDHome_CHIP__readAttributeWithNodeId_endpointId_clusterId_attributeId_params_completion___block_invoke;
  v22[3] = &unk_1E89AA0C0;
  v22[4] = self;
  v23 = v14;
  v21 = v14;
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", a3, v20, v22);

}

- (void)writeAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 value:(id)a7 timedWriteTimeout:(id)a8 completion:(id)a9
{
  id v15;
  id v16;
  objc_class *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;

  v15 = a8;
  v16 = a9;
  v17 = (objc_class *)MEMORY[0x1E0C99E08];
  v18 = a7;
  v19 = a6;
  v20 = a5;
  v21 = a4;
  v22 = objc_alloc_init(v17);
  objc_msgSend(v22, "setCHIPRemoteCommand:", *MEMORY[0x1E0D333A8]);
  objc_msgSend(v22, "setCHIPEndpointId:clusterId:attributeId:", v21, v20, v19);

  objc_msgSend(v22, "setCHIPData:", v18);
  if (v15)
    objc_msgSend(v22, "setCHIPTimedWriteTimeout:", v15);
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __110__HMDHome_CHIP__writeAttributeWithNodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion___block_invoke;
  v24[3] = &unk_1E89AA0C0;
  v24[4] = self;
  v25 = v16;
  v23 = v16;
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", a3, v22, v24);

}

- (void)invokeCommandWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 commandId:(id)a6 fields:(id)a7 timedInvokeTimeout:(id)a8 completion:(id)a9
{
  id v15;
  id v16;
  id v17;
  objc_class *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;

  v15 = a7;
  v16 = a8;
  v17 = a9;
  v18 = (objc_class *)MEMORY[0x1E0C99E08];
  v19 = a6;
  v20 = a5;
  v21 = a4;
  v22 = objc_alloc_init(v18);
  objc_msgSend(v22, "setCHIPRemoteCommand:", *MEMORY[0x1E0D33380]);
  objc_msgSend(v22, "setCHIPEndpointId:clusterId:commandId:", v21, v20, v19);

  if (v15)
    objc_msgSend(v22, "setCHIPCommandFields:", v15);
  if (v16)
    objc_msgSend(v22, "setCHIPTimedInvokeTimeout:", v16);
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __109__HMDHome_CHIP__invokeCommandWithNodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_completion___block_invoke;
  v24[3] = &unk_1E89AA0C0;
  v24[4] = self;
  v25 = v17;
  v23 = v17;
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", a3, v22, v24);

}

- (void)subscribeAttributeWithNodeId:(unint64_t)a3 endpointId:(id)a4 clusterId:(id)a5 attributeId:(id)a6 minInterval:(id)a7 maxInterval:(id)a8 params:(id)a9 establishedHandler:(id)a10 completion:(id)a11
{
  id v18;
  objc_class *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;

  v26 = a9;
  v18 = a11;
  v19 = (objc_class *)MEMORY[0x1E0C99E08];
  v20 = a8;
  v21 = a7;
  v22 = a6;
  v23 = a5;
  v24 = a4;
  v25 = objc_alloc_init(v19);
  objc_msgSend(v25, "setCHIPRemoteCommand:", *MEMORY[0x1E0D333A0]);
  objc_msgSend(v25, "setCHIPEndpointId:clusterId:attributeId:", v24, v23, v22);

  objc_msgSend(v25, "setCHIPMinInterval:", v21);
  objc_msgSend(v25, "setCHIPMaxInterval:", v20);

  if (v26)
    objc_msgSend(v25, "setCHIPEncodedParams:", v26);
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", a3, v25, v18);

}

- (void)downloadLogWithController:(id)a3 nodeId:(id)a4 type:(int64_t)a5 timeout:(double)a6 completion:(id)a7
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD v20[5];
  id v21;

  v11 = a4;
  v12 = a7;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setCHIPRemoteCommand:", *MEMORY[0x1E0D33388]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a5);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setCHIPDownloadLogType:", v14);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setCHIPDownloadTimeout:", v15);

  if ((unint64_t)a6)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", (unint64_t)(a6 + 10.0));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setCHIPRemoteMessageTimeout:", v16);

  }
  v17 = objc_msgSend(v11, "unsignedLongValue");
  v18 = (void *)objc_msgSend(v13, "copy");
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __74__HMDHome_CHIP__downloadLogWithController_nodeId_type_timeout_completion___block_invoke;
  v20[3] = &unk_1E89AA0C0;
  v20[4] = self;
  v21 = v12;
  v19 = v12;
  -[HMDHome _sendRemoteMessageUsingNodeId:payload:completion:](self, "_sendRemoteMessageUsingNodeId:payload:completion:", v17, v18, v20);

}

- (void)_writeLogData:(id)a3 logName:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  char v21;
  id v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void (**v27)(void *, void *, id);
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  id v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = v10;
  if (v8 && v9)
  {
    -[HMDHome homeManager](self, "homeManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "chipDataSource");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "fileManager");
    v14 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    v15 = (void *)MEMORY[0x1E0C99E98];
    HMDCreateHomeKitDaemonCacheDirectory();
    v16 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "fileURLWithPath:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v17, "URLByAppendingPathComponent:", CFSTR("MatterDiagnostics"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v36 = 0;
    LOBYTE(v16) = objc_msgSend(v14, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v18, 1, 0, &v36);
    v19 = v36;
    if ((v16 & 1) != 0)
    {
      objc_msgSend(v18, "URLByAppendingPathComponent:", v9);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = v19;
      v21 = objc_msgSend(v14, "writeData:toURL:options:error:", v8, v20, 0, &v35);
      v22 = v35;

      if ((v21 & 1) == 0)
      {
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = self;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v34 = v23;
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v38 = v26;
          v39 = 2112;
          v40 = v20;
          v41 = 2112;
          v42 = v22;
          _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to write log file to path: %@ error: %@", buf, 0x20u);

          v23 = v34;
        }

        objc_autoreleasePoolPop(v23);
        v20 = 0;
      }
      v27 = (void (**)(void *, void *, id))_Block_copy(v11);
      if (v27)
      {
        objc_msgSend(v20, "path");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v27[2](v27, v28, v22);

      }
    }
    else
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v38 = v32;
        v39 = 2112;
        v40 = v18;
        v41 = 2112;
        v42 = v19;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to create directory at path: %@ error: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v29);
      v33 = _Block_copy(v11);
      v20 = v33;
      if (v33)
        (*((void (**)(void *, _QWORD, id))v33 + 2))(v33, 0, v19);
      v22 = v19;
    }

    goto LABEL_19;
  }
  v14 = (void (**)(_QWORD, _QWORD, _QWORD))_Block_copy(v10);
  if (v14)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v14)[2](v14, 0, v18);
LABEL_19:

  }
}

- (void)handleUpdatedCHIPPropertiesOnHomeModel:(id)a3 actions:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  const __CFString *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome chipStorage](self, "chipStorage");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "updateUsingHomeModel:", v6);

  if (v9)
  {
    v10 = (unint64_t)objc_msgSend(v7, "source") < 2;
    v13 = CFSTR("HMDHomeCHIPStorageIsLocalChangeNotificationKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    logAndPostNotification(CFSTR("HMDHomeCHIPStorageUpdatedNotification"), self, v12);
    objc_msgSend(v7, "markChanged");

  }
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
    && -[HMDHome updateFabricUsingHomeModel:](self, "updateFabricUsingHomeModel:", v6))
  {
    objc_msgSend(v7, "markChanged");
  }

}

- (BOOL)updateFabricUsingHomeModel:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  BOOL v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  int v47;
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "setProperties");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "containsObject:", CFSTR("matterFabricID")))
    goto LABEL_11;
  -[HMDHome fabric](self, "fabric");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fabricID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "matterFabricID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = HMFEqualObjects();

  if (v9 || (objc_msgSend(v4, "matterFabricID"), (v10 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_11:

    goto LABEL_12;
  }
  v11 = v10;
  v12 = objc_msgSend(v10, "isEqualToNumber:", &unk_1E8B326A0);

  if ((v12 & 1) != 0)
  {
LABEL_12:
    v25 = 0;
    goto LABEL_13;
  }
  -[HMDHome fabric](self, "fabric");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "fabricID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome fabric](v16, "fabric");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "fabricID");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "matterFabricID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = 138543874;
    v48 = v18;
    v49 = 2112;
    v50 = v20;
    v51 = 2112;
    v52 = v21;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating fabric ID from %@ to %@", (uint8_t *)&v47, 0x20u);

  }
  objc_autoreleasePoolPop(v15);
  objc_msgSend(v4, "matterFabricID");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome fabric](v16, "fabric");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "setFabricID:", v22);

  if (v14 && (objc_msgSend(v14, "isEqualToNumber:", &unk_1E8B326A0) & 1) == 0)
  {
    -[HMDHome fabric](v16, "fabric");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "invalidateCachedData");

  }
  v25 = 1;
LABEL_13:
  -[HMDHome chipStorage](self, "chipStorage");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "fabricID");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = v27;
  if (v27 && (objc_msgSend(v27, "isEqualToNumber:", &unk_1E8B326A0) & 1) == 0)
  {
    -[HMDHome fabric](self, "fabric");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "fabricID");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome chipStorage](self, "chipStorage");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "fabricID");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = HMFEqualObjects();

    if ((v34 & 1) != 0)
    {
      if (!v25)
        goto LABEL_16;
    }
    else
    {
      v35 = (void *)MEMORY[0x1D17BA0A0]();
      v36 = self;
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome fabric](v36, "fabric");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "fabricID");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome chipStorage](v36, "chipStorage");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "fabricID");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = 138543874;
        v48 = v38;
        v49 = 2112;
        v50 = v40;
        v51 = 2112;
        v52 = v42;
        _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Updating fabric ID from CHIPStorage from %@ to %@", (uint8_t *)&v47, 0x20u);

      }
      objc_autoreleasePoolPop(v35);
      -[HMDHome chipStorage](v36, "chipStorage");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "fabricID");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome fabric](v36, "fabric");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "setFabricID:", v44);

    }
LABEL_23:
    -[HMDHome _saveAndSyncMatterFabricIDWithCompletion:](self, "_saveAndSyncMatterFabricIDWithCompletion:", 0);
    v29 = 1;
    goto LABEL_24;
  }

  if ((v25 & 1) != 0)
    goto LABEL_23;
LABEL_16:
  v29 = 0;
LABEL_24:

  return v29;
}

- (void)_saveAndSyncMatterFabricIDWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  id v13;

  v4 = a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    -[HMDHome emptyModelObjectWithChangeType:](self, "emptyModelObjectWithChangeType:", 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome fabric](self, "fabric");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fabricID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setMatterFabricID:", v7);

    -[HMDHome backingStore](self, "backingStore");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "transaction:options:", CFSTR("Update Matter Fabric ID"), v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "add:", v5);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __58__HMDHome_CHIP___saveAndSyncMatterFabricIDWithCompletion___block_invoke;
    v12[3] = &unk_1E89BFC88;
    v12[4] = self;
    v13 = v4;
    objc_msgSend(v10, "run:", v12);

  }
  else
  {
    v11 = _Block_copy(v4);
    v5 = v11;
    if (v11)
      (*((void (**)(void *, _QWORD))v11 + 2))(v11, 0);
  }

}

- (void)finishPairingForServer:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v5;
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v4, "finishPairing");

}

- (void)setCHIPReportHandlerWithSubscriber:(id)a3 handler:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __60__HMDHome_CHIP__setCHIPReportHandlerWithSubscriber_handler___block_invoke;
  block[3] = &unk_1E89C1B48;
  v12 = v6;
  v13 = v7;
  block[4] = self;
  v9 = v6;
  v10 = v7;
  dispatch_async(v8, block);

}

- (void)handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome primaryResidentMessageRouter](self, "primaryResidentMessageRouter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __73__HMDHome_CHIP__handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke;
    v12[3] = &unk_1E89BFD28;
    v12[4] = self;
    objc_msgSend(v5, "routeMessage:localHandler:", v4, v12);
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v14 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle reset and remove all CHIP pairings message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);

  }
}

- (void)handleCHIPSendRemoteRequestMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleCHIPSendReportMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleResetMatterStorageRequest:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)fetchOperationalCertificatesForNewFabricWithFabricID:(id)a3 publicKey:(id)a4 fetchFromResident:(BOOL)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a6;
  if (a5)
  {
    -[HMDHome retrieveOperationalCertificatesForFabricID:commissionerNodeID:commissioneeNodeID:publicKey:completion:](self, "retrieveOperationalCertificatesForFabricID:commissionerNodeID:commissioneeNodeID:publicKey:completion:", v10, 0, 0, v11, v12);
  }
  else
  {
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      -[HMDHome currentUser](self, "currentUser");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome handleCommissioningCertificateRequestWithCommissionerNodeID:commissioneeNodeID:fabricID:publicKey:sender:completion:](self, "handleCommissioningCertificateRequestWithCommissionerNodeID:commissioneeNodeID:fabricID:publicKey:sender:completion:", 0, 0, v10, v11, v13, v12);
    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome currentUser](v15, "currentUser");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543618;
        v20 = v17;
        v21 = 2112;
        v22 = v18;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Current user %@ is not the owner. Therefore it must request NOC from the primary resident", (uint8_t *)&v19, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, void *))v12 + 2))(v12, 0, 0, 0, 0, v13);
    }

  }
}

- (BOOL)requiresRemoteFabricDataUpdate
{
  return 0;
}

- (void)_sendRemoteMessageUsingNodeId:(unint64_t)a3 payload:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *, void *);
  void *v24;
  HMDHome *v25;
  id v26;
  id v27;
  id v28;
  unint64_t v29;
  _QWORD v30[2];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  v10 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v10, "initWithTarget:", v11);

  v30[0] = CFSTR("HMDHomeCHIPNodeIDMessageKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = CFSTR("HMDHomeCHIPRequestMessageKey");
  v31[0] = v13;
  v31[1] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, v30, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMDHomeCHIPSendRemoteRequestMessage"), v12, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "CHIPRemoteMessageTimeout");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    objc_msgSend(v8, "CHIPRemoteMessageTimeout");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "doubleValue");
    objc_msgSend(v15, "setTimeout:");

  }
  v21 = MEMORY[0x1E0C809B0];
  v22 = 3221225472;
  v23 = __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke;
  v24 = &unk_1E89A3B70;
  v28 = v9;
  v29 = a3;
  v25 = self;
  v26 = v12;
  v27 = v14;
  v18 = v14;
  v19 = v12;
  v20 = v9;
  objc_msgSend(v15, "setResponseHandler:", &v21);
  -[HMDHome handleCHIPSendRemoteRequestMessage:](self, "handleCHIPSendRemoteRequestMessage:", v15, v21, v22, v23, v24, v25);

}

- (BOOL)_shouldFallbackLocallyForRemoteMatterRequest:(id)a3
{
  id v3;
  unint64_t v4;
  BOOL v5;

  v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v4 = objc_msgSend(v3, "code");
    v5 = 1;
    if (v4 > 8 || ((1 << v4) & 0x11C) == 0)
      v5 = v4 == 3201;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
    v8 = v7;

    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v13;
        v25 = 2112;
        v26 = v8;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Resetting and removing all CHIP pairings from accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke;
      v21[3] = &unk_1E89C21C0;
      v21[4] = v10;
      v22 = v4;
      objc_msgSend(v8, "removeAllCHIPPairingsWithCompletion:", v21);

    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v19;
        v25 = 2112;
        v26 = v5;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory with UUID %@ for reset and remove all CHIP pairings message", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v20);

      v8 = 0;
    }
  }
  else
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v17;
      v25 = 2112;
      v26 = v18;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory UUID in reset and remove all CHIP pairings message payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (void)_handleCHIPSendRemoteRequestMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  HMDHome *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCHIPNodeIDMessageKey"));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (v45)
  {
    v43 = v4;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    -[HMDHome hapAccessories](self, "hapAccessories");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v47;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v47 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
          v11 = (void *)MEMORY[0x1D17BA0A0]();
          v12 = self;
          HMFGetOSLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "matterNodeID");
            v44 = v10;
            v15 = v7;
            v16 = v8;
            v17 = self;
            v18 = v5;
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v51 = v14;
            v52 = 2112;
            v53 = v19;
            v54 = 2112;
            v55 = v45;
            _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Remote request dispatch compares %@ with %@", buf, 0x20u);

            v5 = v18;
            self = v17;
            v8 = v16;
            v7 = v15;
            v10 = v44;

          }
          objc_autoreleasePoolPop(v11);
          objc_msgSend(v10, "matterNodeID");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v20, "isEqualToNumber:", v45);

          if (v21)
          {
            v26 = (void *)MEMORY[0x1D17BA0A0]();
            v27 = v12;
            HMFGetOSLogHandle();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "identifier");
              v30 = v5;
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v51 = v29;
              v52 = 2112;
              v53 = v31;
              _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Dispatching remote request to accessory %@", buf, 0x16u);

              v5 = v30;
            }

            objc_autoreleasePoolPop(v26);
            v4 = v43;
            objc_msgSend(v43, "dictionaryForKey:", CFSTR("HMDHomeCHIPRequestMessageKey"));
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "CHIPRemoteCommand");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = objc_msgSend(v33, "isEqualToString:", *MEMORY[0x1E0D333A0]);

            if (v34)
            {
              v35 = (void *)MEMORY[0x1D17BA0A0]();
              v36 = v27;
              HMFGetOSLogHandle();
              v37 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v51 = v38;
                v52 = 2112;
                v53 = v43;
                _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_ERROR, "%{public}@Rejecting CHIP remote request as subscription using this interface is not supported: %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v35);
              objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "respondWithError:", v39);

            }
            else
            {
              objc_msgSend(v10, "handleCHIPSendRemoteRequestMessage:", v43);
            }

            goto LABEL_27;
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
        if (v7)
          continue;
        break;
      }
    }

    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    v4 = v43;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v25;
      v52 = 2112;
      v53 = v43;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cannot find accessory for CHIP remote request: %@", buf, 0x16u);

    }
  }
  else
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = self;
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v41;
      v52 = 2112;
      v53 = v42;
      _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_ERROR, "%{public}@Cannot find node ID in CHIP remote request message payload: %@", buf, 0x16u);

    }
  }

  objc_autoreleasePoolPop(v22);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v5);
LABEL_27:

}

- (void)_dispatchCHIPReport:(id)a3 destination:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "deviceForHandle:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "account");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    if (!objc_msgSend(v10, "isCurrentDevice"))
    {
      objc_initWeak((id *)buf, self);
      -[HMDHome homeManager](self, "homeManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)objc_msgSend(v6, "copy");
      -[HMDHome uuid](self, "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome workQueue](self, "workQueue");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 3221225472;
      v24[2] = __49__HMDHome_CHIP___dispatchCHIPReport_destination___block_invoke;
      v24[3] = &unk_1E89C1698;
      objc_copyWeak(&v27, (id *)buf);
      v25 = v6;
      v26 = v7;
      objc_msgSend(v20, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v21, v22, v26, v26, v23, v24);

      objc_destroyWeak(&v27);
      objc_destroyWeak((id *)buf);
      goto LABEL_10;
    }
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v15;
      v30 = 2112;
      v31 = v7;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Skipping device %@ - ourselves", buf, 0x16u);

    }
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "shortDescription");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v29 = v18;
      v30 = 2112;
      v31 = v19;
      v32 = 2112;
      v33 = v7;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Device %@ for CHIP report destination %@ has no user attached to it. Destination removed.", buf, 0x20u);

    }
  }

  objc_autoreleasePoolPop(v12);
  -[HMDHome notificationRegistry](v13, "notificationRegistry");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "chipRemoteSubscribers");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "removeObject:", v7);

LABEL_10:
}

- (void)handleCommissioningCertificateRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCommissioningDeviceNodeIDMessageKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCommissioningFabricIDMessageKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("HMDHomeCommissioningPublicKeyMessageKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "userForHome:", self);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!isFeatureMatteriPhoneOnlyPairingControlEnabled())
    goto LABEL_4;
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCommissioningCommissionerNodeIDMessageKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isEqualToNumber:", &unk_1E8B326A0))
  {

LABEL_4:
    v9 = 0;
  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __55__HMDHome_CHIP__handleCommissioningCertificateRequest___block_invoke;
  v11[3] = &unk_1E89A3B98;
  v12 = v4;
  v10 = v4;
  -[HMDHome handleCommissioningCertificateRequestWithCommissionerNodeID:commissioneeNodeID:fabricID:publicKey:sender:completion:](self, "handleCommissioningCertificateRequestWithCommissionerNodeID:commissioneeNodeID:fabricID:publicKey:sender:completion:", v9, v5, v6, v7, v8, v11);

}

- (void)handleCommissioningCertificateRequestWithCommissionerNodeID:(id)a3 commissioneeNodeID:(id)a4 fabricID:(id)a5 publicKey:(id)a6 sender:(id)a7 completion:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  void *v42;
  void *v43;
  char v44;
  void *v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  _QWORD v53[4];
  id v54;
  id v55;
  HMDHome *v56;
  id v57;
  _QWORD aBlock[4];
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  char v64;
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  id v68;
  __int16 v69;
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  if (!-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v23 = (void *)MEMORY[0x1D17BA0A0]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v66 = v26;
    v28 = "%{public}@Non-owner user cannot handle request to generate certificates";
    v29 = v25;
    v30 = 12;
LABEL_13:
    _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
LABEL_14:

    goto LABEL_15;
  }
  if (!v17)
  {
    v23 = (void *)MEMORY[0x1D17BA0A0]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v66 = v26;
    v67 = 2112;
    v68 = 0;
    v28 = "%{public}@Cannot handle remote request to retrieve certificates with public Key: %@";
    v29 = v25;
    v30 = 22;
    goto LABEL_13;
  }
  if (!isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    if ((objc_msgSend(v16, "isEqual:", &unk_1E8B326A0) & 1) == 0)
    {
      if (v16)
      {
        -[HMDHome chipStorage](self, "chipStorage");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "fabricID");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend(v16, "isEqual:", v33);

        if ((v34 & 1) == 0)
        {
          v23 = (void *)MEMORY[0x1D17BA0A0]();
          v24 = self;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            goto LABEL_15;
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome chipStorage](v24, "chipStorage");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = v23;
          objc_msgSend(v51, "fabricID");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v66 = v26;
          v67 = 2112;
          v68 = v16;
          v69 = 2112;
          v70 = v27;
          goto LABEL_40;
        }
      }
LABEL_21:
      if (objc_msgSend(v14, "isEqualToNumber:", &unk_1E8B326A0))
      {

        v14 = 0;
      }
      if (v15 && !v16)
      {
        v35 = (void *)MEMORY[0x1D17BA0A0]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
LABEL_28:

          objc_autoreleasePoolPop(v35);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
          v16 = (id)objc_claimAutoreleasedReturnValue();
          (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, id))v19 + 2))(v19, 0, 0, 0, 0, v16);
          goto LABEL_16;
        }
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v66 = v38;
        v67 = 2112;
        v68 = v15;
        v69 = 2112;
        v70 = 0;
        v39 = "%{public}@Cannot handle remote request to retrieve certificates with device Node ID %@ and fabricID %@";
        v40 = v37;
        v41 = 32;
LABEL_27:
        _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_ERROR, v39, buf, v41);

        goto LABEL_28;
      }
      if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
      {
        -[HMDHome fabric](self, "fabric");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "fabricID");
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        v44 = objc_msgSend(v18, "isOwner");
        if (v43)
          goto LABEL_37;
      }
      else
      {
        -[HMDHome chipStorage](self, "chipStorage");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "fabricID");
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        v44 = 0;
        if (v43)
          goto LABEL_37;
      }
      if (!-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident")
        && -[HMDHome doesHomeContainResident](self, "doesHomeContainResident"))
      {
        v35 = (void *)MEMORY[0x1D17BA0A0]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v66 = v38;
        v39 = "%{public}@Failing commissioning cert because fabric creation is not allowed in this device while there is "
              "a resident in Home";
        v40 = v37;
        v41 = 12;
        goto LABEL_27;
      }
LABEL_37:
      -[HMDHome homeManager](self, "homeManager");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = MEMORY[0x1E0C809B0];
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke;
      aBlock[3] = &unk_1E89A3BC0;
      v63 = v19;
      v48 = v46;
      v59 = v48;
      v14 = v14;
      v60 = v14;
      v61 = v15;
      v64 = v44;
      v62 = v17;
      v53[0] = v47;
      v53[1] = 3221225472;
      v53[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2;
      v53[3] = &unk_1E89C25C8;
      v54 = v43;
      v55 = v48;
      v56 = self;
      v57 = _Block_copy(aBlock);
      v49 = v57;
      v50 = v48;
      v16 = v43;
      -[HMDHome updateCATIDsForUsersIfNeeded:completion:](self, "updateCATIDsForUsersIfNeeded:completion:", 1, v53);

      goto LABEL_16;
    }
LABEL_18:

    v16 = 0;
    goto LABEL_21;
  }
  if ((objc_msgSend(v16, "isEqualToNumber:", &unk_1E8B326A0) & 1) != 0)
    goto LABEL_18;
  if (!v16)
    goto LABEL_21;
  -[HMDHome fabric](self, "fabric");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "fabricID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v16, "isEqual:", v21);

  if ((v22 & 1) != 0)
    goto LABEL_21;
  v23 = (void *)MEMORY[0x1D17BA0A0]();
  v24 = self;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome fabric](v24, "fabric");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = v23;
    objc_msgSend(v51, "fabricID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v66 = v26;
    v67 = 2112;
    v68 = v16;
    v69 = 2112;
    v70 = v27;
LABEL_40:
    _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle remote request to retrieve certificates for unknown fabricID %@. Current home fabric ID %@", buf, 0x20u);

    v23 = v52;
    goto LABEL_14;
  }
LABEL_15:

  objc_autoreleasePoolPop(v23);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, void *))v19 + 2))(v19, 0, 0, 0, 0, v31);

LABEL_16:
}

- (void)handleMatterPairingCompletionNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionNodeIDMessageKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionFabricIDMessageKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionVendorIDMessageKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionProductIDMessageKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionConfigNumberMessageKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomePairingCompletionCategoryMessageKey"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("HMDHomePairingCompletionTopologyMessageKey"));
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v5 && v6)
  {
    -[HMDHome homeManager](self, "homeManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "accessoryBrowserInternal");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "chipAccessoryServerBrowser");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handlePairingCompletionForAccessoryWithNodeID:fabricID:vendorID:productID:configNumber:category:topology:", v5, v6, v7, v8, v9, v10, v12);

    objc_msgSend(v4, "respondWithSuccess");
  }
  else
  {
    v20 = v10;
    v22 = (void *)v11;
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v24 = v18;
      v25 = 2112;
      v26 = v5;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Resident cannot establish connection with accessory with accessory node ID = %@, fabric ID = %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 8);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v19);

    v10 = v20;
    v12 = v22;
  }

}

- (void)_handleResetMatterStorageRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v13 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling request to reset Matter storage", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke;
  v10[3] = &unk_1E89C21C0;
  v10[4] = v6;
  v11 = v4;
  v9 = v4;
  -[HMDHome _clearCHIPStorageWithCompletion:](v6, "_clearCHIPStorageWithCompletion:", v10);

}

- (void)_clearCHIPStorageWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  HMDCHIPHomeDataSource *v8;
  void *v9;
  HMDCHIPHomeDataSource *v10;
  _QWORD v11[5];
  id v12;

  v4 = a3;
  -[HMDHome chipStorage](self, "chipStorage");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "keyValueStore");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");

  if (v7)
  {
    v8 = [HMDCHIPHomeDataSource alloc];
    -[HMDHome matterFabricID](self, "matterFabricID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDCHIPHomeDataSource initWithFabricID:home:](v8, "initWithFabricID:home:", v9, self);

    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke;
    v11[3] = &unk_1E89BFC88;
    v11[4] = self;
    v12 = v4;
    -[HMDCHIPHomeDataSource updateKeyValueStore:completion:](v10, "updateKeyValueStore:completion:", MEMORY[0x1E0C9AA70], v11);

  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

- (BOOL)_doesUsersHaveCATID
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome users](self, "users", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v5)
        objc_enumerationMutation(v2);
      v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v6);
      objc_msgSend(v7, "matterCASEAuthenticatedTagID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v8)
        break;
      objc_msgSend(v7, "matterCASEAuthenticatedTagID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "intValue");

      if (!v10)
      {
        LOBYTE(v8) = 0;
        break;
      }
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        LOBYTE(v8) = 1;
        if (v4)
          goto LABEL_3;
        break;
      }
    }
  }
  else
  {
    LOBYTE(v8) = 1;
  }

  return (char)v8;
}

- (void)updateCATIDForUsersIfNeeded:(BOOL)a3
{
  -[HMDHome updateCATIDsForUsersIfNeeded:completion:](self, "updateCATIDsForUsersIfNeeded:completion:", a3, 0);
}

- (void)updateCATIDsForUsersIfNeeded:(BOOL)a3 completion:(id)a4
{
  if (a4)
    (*((void (**)(id, _QWORD))a4 + 2))(a4, 0);
}

- (BOOL)hasSharedUser
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  BOOL v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHome users](self, "users", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v7, "privilege") == 4 || !objc_msgSend(v7, "privilege"))
        {
          v8 = 1;
          goto LABEL_13;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v8 = 0;
      if (v4)
        continue;
      break;
    }
  }
  else
  {
    v8 = 0;
  }
LABEL_13:

  return v8;
}

- (id)accessoryOperatePrivilegeCATID:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v3 = a3;
  v47 = *MEMORY[0x1E0C80C00];
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (!v6)
  {
LABEL_21:

LABEL_22:
    -[HMDHome currentOperateCATID](self, "currentOperateCATID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[HMDHome currentOperateCATID](self, "currentOperateCATID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (!v8 && v3)
    {
      objc_msgSend(MEMORY[0x1E0D332B8], "caseAuthenticatedTagWithIdentifier:version:", objc_msgSend(MEMORY[0x1E0D332B8], "randomCASEAuthenticatedTagIdentifier"), 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (void *)MEMORY[0x1D17BA0A0]();
      v28 = self;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v8, "integerValue");
        *(_DWORD *)buf = 138543874;
        v39 = v30;
        v40 = 2048;
        v41 = v31;
        v42 = 2112;
        v43 = (uint64_t)v8;
        _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Generated new CAT for accessory operate 0x%lX (%@)", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v27);
    }
    goto LABEL_29;
  }
  v7 = v6;
  v33 = v3;
  v8 = 0;
  v9 = *(_QWORD *)v35;
  while (2)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v35 != v9)
        objc_enumerationMutation(v5);
      v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
      if ((objc_msgSend(v11, "privilege") | 4) == 4)
      {
        if (v8
          || (objc_msgSend(v11, "matterCASEAuthenticatedTagID"),
              v18 = (void *)objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          objc_msgSend(v11, "matterCASEAuthenticatedTagID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqual:", v8);

          if ((v13 & 1) == 0)
          {
            objc_msgSend(v11, "matterCASEAuthenticatedTagID");
            v14 = objc_claimAutoreleasedReturnValue();
            if (v14)
            {
              v15 = (void *)v14;
              objc_msgSend(v11, "matterCASEAuthenticatedTagID");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "isEqual:", v8);

              if ((v17 & 1) == 0)
              {
                v19 = (void *)MEMORY[0x1D17BA0A0]();
                v20 = self;
                HMFGetOSLogHandle();
                v21 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  v24 = objc_msgSend(v8, "integerValue");
                  objc_msgSend(v11, "matterCASEAuthenticatedTagID");
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  v26 = objc_msgSend(v25, "integerValue");
                  *(_DWORD *)buf = 138544130;
                  v39 = v23;
                  v40 = 2048;
                  v41 = v24;
                  v42 = 2048;
                  v43 = v26;
                  v44 = 2112;
                  v45 = v11;
                  _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@CATID mismatch between users - current 0x%lX userCAT 0x%lX user %@", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v19);

                v3 = v33;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          objc_msgSend(v11, "matterCASEAuthenticatedTagID");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
        }
      }
    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    if (v7)
      continue;
    break;
  }

  v3 = v33;
  if (!v8)
    goto LABEL_22;
LABEL_29:
  -[HMDHome setCurrentOperateCATID:](self, "setCurrentOperateCATID:", v8);
  return v8;
}

- (id)accessoryAdministerPrivilegeCATID:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v3 = a3;
  v47 = *MEMORY[0x1E0C80C00];
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (!v6)
  {
LABEL_21:

LABEL_22:
    -[HMDHome currentAdministerCATID](self, "currentAdministerCATID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[HMDHome currentAdministerCATID](self, "currentAdministerCATID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (!v8 && v3)
    {
      objc_msgSend(MEMORY[0x1E0D332B8], "caseAuthenticatedTagWithIdentifier:version:", objc_msgSend(MEMORY[0x1E0D332B8], "randomCASEAuthenticatedTagIdentifier"), 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (void *)MEMORY[0x1D17BA0A0]();
      v28 = self;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v8, "integerValue");
        *(_DWORD *)buf = 138543874;
        v39 = v30;
        v40 = 2048;
        v41 = v31;
        v42 = 2112;
        v43 = (uint64_t)v8;
        _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Generated new CAT for accessory administer 0x%lX (%@)", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v27);
    }
    goto LABEL_29;
  }
  v7 = v6;
  v33 = v3;
  v8 = 0;
  v9 = *(_QWORD *)v35;
  while (2)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v35 != v9)
        objc_enumerationMutation(v5);
      v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
      if (objc_msgSend(v11, "privilege") == 3)
      {
        if (v8
          || (objc_msgSend(v11, "matterCASEAuthenticatedTagID"),
              v18 = (void *)objc_claimAutoreleasedReturnValue(),
              v18,
              !v18))
        {
          objc_msgSend(v11, "matterCASEAuthenticatedTagID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqual:", v8);

          if ((v13 & 1) == 0)
          {
            objc_msgSend(v11, "matterCASEAuthenticatedTagID");
            v14 = objc_claimAutoreleasedReturnValue();
            if (v14)
            {
              v15 = (void *)v14;
              objc_msgSend(v11, "matterCASEAuthenticatedTagID");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "isEqual:", v8);

              if ((v17 & 1) == 0)
              {
                v19 = (void *)MEMORY[0x1D17BA0A0]();
                v20 = self;
                HMFGetOSLogHandle();
                v21 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  v24 = objc_msgSend(v8, "integerValue");
                  objc_msgSend(v11, "matterCASEAuthenticatedTagID");
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  v26 = objc_msgSend(v25, "integerValue");
                  *(_DWORD *)buf = 138544130;
                  v39 = v23;
                  v40 = 2048;
                  v41 = v24;
                  v42 = 2048;
                  v43 = v26;
                  v44 = 2112;
                  v45 = v11;
                  _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@CATID mismatch between users - current 0x%lX userCAT 0x%lX user %@", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v19);

                v3 = v33;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          objc_msgSend(v11, "matterCASEAuthenticatedTagID");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
        }
      }
    }
    v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    if (v7)
      continue;
    break;
  }

  v3 = v33;
  if (!v8)
    goto LABEL_22;
LABEL_29:
  -[HMDHome setCurrentAdministerCATID:](self, "setCurrentAdministerCATID:", v8);
  return v8;
}

- (void)incrementOperatePrivilegeCATVersion:(id)a3
{
  void (**v4)(id, void *);
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(id, void *))a3;
  -[HMDHome accessoryOperatePrivilegeCATID:](self, "accessoryOperatePrivilegeCATID:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  objc_msgSend(MEMORY[0x1E0D332B8], "parseCaseAuthenticatedTag:identifier:version:", v5, (char *)&v12 + 2, &v12);
  objc_msgSend(MEMORY[0x1E0D332B8], "caseAuthenticatedTagWithIdentifier:version:", HIWORD(v12), (unsigned __int16)(v12 + 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v6, "integerValue");
    *(_DWORD *)buf = 138543874;
    v14 = v10;
    v15 = 2048;
    v16 = v11;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Bumping tag version for operate as 0x%lX (%@)", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v4[2](v4, v6);

}

- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4
{
  -[HMDHome updateUserCATWithOperatePrivilege:administerPrivilege:completion:](self, "updateUserCATWithOperatePrivilege:administerPrivilege:completion:", a3, a4, 0);
}

- (void)updateUserCATWithOperatePrivilege:(id)a3 administerPrivilege:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __82__HMDHome_CHIP__updateUserCATWithOperatePrivilege_administerPrivilege_completion___block_invoke;
  v15[3] = &unk_1E89C0448;
  v15[4] = self;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, v15);

}

- (BOOL)isPrimaryResidentNodeReachableAndThreadCapable
{
  void *v3;
  void *v4;
  void *v5;
  char v6;

  -[HMDHome primaryResident](self, "primaryResident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isReachable"))
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "supportsThreadBorderRouter");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (BOOL)areAllThreadResidentNodesUnreachable
{
  void *v2;
  char v3;

  -[HMDHome enabledResidents](self, "enabledResidents");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_allObjectsPassTest:", &__block_literal_global_147);

  return v3;
}

- (BOOL)isPrimaryResidentNodeReachable
{
  void *v2;
  char v3;

  -[HMDHome primaryResident](self, "primaryResident");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isReachable");

  return v3;
}

- (id)privateDataSourceForNode:(id)a3
{
  return 0;
}

- (id)currentDeviceControllerNodeID
{
  return 0;
}

uint64_t __53__HMDHome_CHIP__areAllThreadResidentNodesUnreachable__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  objc_msgSend(v2, "capabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "supportsThreadBorderRouter"))
    v4 = objc_msgSend(v2, "isReachable") ^ 1;
  else
    v4 = 1;

  return v4;
}

void __82__HMDHome_CHIP__updateUserCATWithOperatePrivilege_administerPrivilege_completion___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  id *v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  void *v14;
  char v15;
  id *v16;
  void *v17;
  char v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v1 = a1;
  v47 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "backingStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "transaction:options:", CFSTR("UpdatingUserCATIDs"), v3);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  objc_msgSend(*(id *)(v1 + 32), "users");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (!v5)
  {

    goto LABEL_23;
  }
  v7 = v5;
  v8 = 0;
  v9 = *(_QWORD *)v35;
  v33 = (id *)(v1 + 48);
  v31 = v1;
  v10 = (id *)(v1 + 40);
  *(_QWORD *)&v6 = 138544130;
  v28 = v6;
  v30 = v4;
  do
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)v35 != v9)
        objc_enumerationMutation(v4);
      v12 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
      v13 = objc_msgSend(v12, "privilege", v28);
      if (v13 != 4)
      {
        if (v13 == 3)
        {
          if (!*v33)
            continue;
          objc_msgSend(v12, "matterCASEAuthenticatedTagID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v17, "isEqual:", *v33);

          v16 = v33;
          if ((v18 & 1) != 0)
            continue;
          goto LABEL_14;
        }
        if (v13)
          continue;
      }
      if (!*v10)
        continue;
      objc_msgSend(v12, "matterCASEAuthenticatedTagID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "isEqual:", *v10);

      v16 = v10;
      if ((v15 & 1) != 0)
        continue;
LABEL_14:
      v19 = *v16;
      if (v19)
      {
        v20 = v19;
        v21 = (void *)objc_msgSend(v12, "newModelWithChangeType:", 2);
        objc_msgSend(v21, "setMatterCASEAuthenticatedTagID:", v20);
        v22 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v32, "add:", v21));
        v23 = *(id *)(v31 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v29 = v22;
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v20, "integerValue");
          *(_DWORD *)buf = v28;
          v39 = v25;
          v40 = 2112;
          v41 = v12;
          v42 = 2048;
          v43 = v26;
          v44 = 2112;
          v45 = v20;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Updated CATID transaction for user %@ to 0x%lX (%@)", buf, 0x2Au);

          v22 = v29;
        }

        objc_autoreleasePoolPop(v22);
        v8 = 1;
        v4 = v30;
      }
    }
    v7 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  }
  while (v7);

  v1 = v31;
  if ((v8 & 1) != 0)
  {
    objc_msgSend(v32, "run:", *(_QWORD *)(v31 + 56));
    goto LABEL_25;
  }
LABEL_23:
  v27 = *(_QWORD *)(v1 + 56);
  if (v27)
    (*(void (**)(uint64_t, _QWORD))(v27 + 16))(v27, 0);
LABEL_25:

}

void __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke_2;
  v7[3] = &unk_1E89C1D68;
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t __49__HMDHome_CHIP___clearCHIPStorageWithCompletion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v7;
      v24 = 2112;
      v25 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to clear CHIP storage: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "homeManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "accessoryBrowser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "chipAccessoryServerBrowser");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_140;
      v19[3] = &unk_1E89A8888;
      v12 = *(void **)(a1 + 40);
      v19[4] = *(_QWORD *)(a1 + 32);
      v20 = v12;
      v21 = v9;
      objc_msgSend(v11, "createNewFabricIDWithCompletion:", v19);

    }
    else
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v23 = v16;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Cleared CHIP storage but no home manager to create new Matter storage with", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v13);
      v17 = *(void **)(a1 + 40);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "respondWithError:", v18);

    }
  }

}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_140(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  int v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD aBlock[5];
  id v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v23 = v7;
    v24 = 2112;
    v25 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Creating new CHIP storage content with fabric ID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_141;
  aBlock[3] = &unk_1E89C0DA8;
  aBlock[4] = a1[4];
  v8 = v3;
  v20 = v8;
  v21 = a1[5];
  v9 = _Block_copy(aBlock);
  v10 = isFeatureMatteriPhoneOnlyPairingControlEnabled();
  v11 = a1[4];
  if (v10)
  {
    objc_msgSend(v11, "fabric");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "invalidateCachedData");

    objc_msgSend(a1[4], "fabric");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setFabricID:", v8);

    objc_msgSend(a1[4], "chipStorage");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setFabricID:", v8);

    objc_msgSend(a1[6], "accessoryBrowser");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "chipAccessoryServerBrowser");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "fabric");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "createNewFabricDataForFabric:completion:", v17, v9);

  }
  else
  {
    objc_msgSend(v11, "chipStorage");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setFabricID:", v8);

    objc_msgSend(a1[6], "accessoryBrowser");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "chipAccessoryServerBrowser");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "createNewFabricDataForFabricID:completion:", v8, v9);
  }

}

void __50__HMDHome_CHIP___handleResetMatterStorageRequest___block_invoke_141(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v12 = 138543874;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      v16 = 2112;
      v17 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to create new fabric data for fabric ID %@: %@", (uint8_t *)&v12, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 48), "respondWithError:", v3);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully created new fabric data for fabric ID %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 48), "respondWithSuccess");
  }

}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "accessoryBrowserInternal");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "chipAccessoryServerBrowser");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fetchCertificatesForMatterNodeWithCommissionerNodeID:commissioneeNodeID:forOwner:publicKey:fabricID:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56), v7, *(_QWORD *)(a1 + 64));

  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  if (v4 && !objc_msgSend(v4, "isEqual:", &unk_1E8B326A0))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "accessoryBrowser");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "chipAccessoryServerBrowser");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3;
    v8[3] = &unk_1E89A3BE8;
    v7 = *(void **)(a1 + 56);
    v8[4] = *(_QWORD *)(a1 + 48);
    v11 = v7;
    v9 = v3;
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v6, "createNewFabricIDWithCompletion:", v8);

  }
}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_3(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  int v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD aBlock[5];
  id v22;
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v7;
    v28 = 2112;
    v29 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Attempting to initialize fabric data with fabric ID: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[4], "fabric");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "fabricID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_138;
  aBlock[3] = &unk_1E89BDE38;
  aBlock[4] = a1[4];
  v10 = v9;
  v22 = v10;
  v25 = a1[7];
  v11 = v3;
  v23 = v11;
  v24 = a1[5];
  v12 = _Block_copy(aBlock);
  v13 = isFeatureMatteriPhoneOnlyPairingControlEnabled();
  v14 = a1[4];
  if (v13)
  {
    objc_msgSend(v14, "fabric");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setFabricID:", v11);

    objc_msgSend(a1[4], "chipStorage");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setFabricID:", v11);

    objc_msgSend(a1[6], "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "chipAccessoryServerBrowser");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "fabric");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "createNewFabricDataForFabric:completion:", v19, v12);

  }
  else
  {
    objc_msgSend(v14, "chipStorage");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setFabricID:", v11);

    objc_msgSend(a1[6], "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "chipAccessoryServerBrowser");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "createNewFabricDataForFabricID:completion:", v11, v12);
  }

}

void __133__HMDHome_CHIP__handleCommissioningCertificateRequestWithCommissionerNodeID_commissioneeNodeID_fabricID_publicKey_sender_completion___block_invoke_138(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void (*v12)(void);
  void *v13;
  char v14;
  void *v15;
  id v16;
  NSObject *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v7;
      v27 = 2112;
      v28 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Couldn't create CHIP storage: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setFabricID:", v8);

    v10 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "chipStorage");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setFabricID:", v10);

    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
LABEL_9:
    v12();
    goto LABEL_10;
  }
  objc_msgSend(*(id *)(a1 + 32), "matterFabricID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isEqual:", *(_QWORD *)(a1 + 48));

  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if ((v14 & 1) != 0)
  {
    if (v18)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(void **)(a1 + 48);
      v25 = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = v20;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Initialized CHIP storage with fabric ID: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
    goto LABEL_9;
  }
  if (v18)
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = *(void **)(a1 + 48);
    v25 = 138543618;
    v26 = v21;
    v27 = 2112;
    v28 = v22;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@CHIP storage wasn't initialized with fabric ID %@ due to asynchronous model update", (uint8_t *)&v25, 0x16u);

  }
  objc_autoreleasePoolPop(v15);
  v23 = *(_QWORD *)(a1 + 64);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 12);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v24);

LABEL_10:
}

void __55__HMDHome_CHIP__handleCommissioningCertificateRequest___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;

  v15 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (a6)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a6);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, CFSTR("HMDHomeCommissioningRootCertMessageKey"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v11, CFSTR("HMDHomeCommissioningOperationalCertMessageKey"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v12, CFSTR("HMDHomeCommissioningOwnerNodeIDMessageKey"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, CFSTR("HMDHomeCommissioningIPKMessageKey"));
    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v14);

  }
}

void __49__HMDHome_CHIP___dispatchCHIPReport_destination___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v11)
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(void **)(a1 + 40);
        v16 = 138543874;
        v17 = v12;
        v18 = 2112;
        v19 = v13;
        v20 = 2112;
        v21 = v5;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to send CHIP report to user %@ due to error %@", (uint8_t *)&v16, 0x20u);
LABEL_7:

      }
    }
    else if (v11)
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "messagePayload");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(void **)(a1 + 40);
      v16 = 138543874;
      v17 = v12;
      v18 = 2112;
      v19 = v14;
      v20 = 2112;
      v21 = v15;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Sent CHIP report: %@ to user %@", (uint8_t *)&v16, 0x20u);

      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v8);
  }

}

void __74__HMDHome_CHIP___handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Ignoring remove all CHIP pairings error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "handleRemoveAccessoryMessage:", *(_QWORD *)(a1 + 40));

}

void __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  id v23;
  uint64_t v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "_shouldFallbackLocallyForRemoteMatterRequest:", v5))
    {
      objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("HMDHomeCHIPSendRemoteRequestMessage"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v22[0] = MEMORY[0x1E0C809B0];
      v22[2] = __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke_131;
      v22[3] = &unk_1E89A3B48;
      v9 = *(void **)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 64);
      v22[4] = *(_QWORD *)(a1 + 32);
      v24 = v8;
      v22[1] = 3221225472;
      v23 = v9;
      objc_msgSend(v7, "setResponseHandler:", v22);
      objc_msgSend(*(id *)(a1 + 32), "_handleCHIPSendRemoteRequestMessage:", v7);

    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 138543874;
        v26 = v19;
        v27 = 2048;
        v28 = v20;
        v29 = 2112;
        v30 = v5;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute CHIP remote operation for nodeID=%llu: error=%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
      v21 = *(_QWORD *)(a1 + 56);
      objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPResponseMessageKey"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, id))(v21 + 16))(v21, v7, v5);
    }
  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2048;
      v28 = v14;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully executed CHIP remote operation for nodeID=%llu", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v15 = *(_QWORD *)(a1 + 56);
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPResponseMessageKey"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v15 + 16))(v15, v7, 0);
  }

}

void __66__HMDHome_CHIP___sendRemoteMessageUsingNodeId_payload_completion___block_invoke_131(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 48);
      v20 = 138543874;
      v21 = v11;
      v22 = 2048;
      v23 = v12;
      v24 = 2112;
      v25 = v5;
      v13 = "%{public}@Failed to execute CHIP local fallback operation for nodeID=%llu: error=%@";
      v14 = v10;
      v15 = OS_LOG_TYPE_ERROR;
      v16 = 32;
LABEL_6:
      _os_log_impl(&dword_1CD062000, v14, v15, v13, (uint8_t *)&v20, v16);

    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 48);
    v20 = 138543618;
    v21 = v11;
    v22 = 2048;
    v23 = v17;
    v13 = "%{public}@Successfully executed CHIP local fallback operation for nodeID=%llu";
    v14 = v10;
    v15 = OS_LOG_TYPE_INFO;
    v16 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
  v18 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("HMDHomeCHIPResponseMessageKey"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v18 + 16))(v18, v19, v5);

}

void __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "primaryResidentMessageRouter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke_128;
    v11[3] = &unk_1E89BFD28;
    v4 = *(_QWORD *)(a1 + 40);
    v11[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v2, "routeMessage:localHandler:", v4, v11);
  }
  else
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v13 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle request to reset Matter storage", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v9 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
}

uint64_t __49__HMDHome_CHIP__handleResetMatterStorageRequest___block_invoke_128(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleResetMatterStorageRequest:", a2);
}

void __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  id obj;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t v39[128];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  uint64_t v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 32), "isCurrentDevicePrimaryResident"))
  {
    objc_msgSend(*(id *)(a1 + 32), "notificationRegistry");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "chipRemoteSubscribers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "copy");

    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v36 != v8)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i);
          v11 = (void *)MEMORY[0x1D17BA0A0]();
          v12 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v41 = v14;
            v42 = 2112;
            v43 = v10;
            _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Dispatch CHIP report to %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v11);
          objc_msgSend(*(id *)(a1 + 32), "_dispatchCHIPReport:destination:", *(_QWORD *)(a1 + 40), v10);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
      }
      while (v7);
    }

  }
  objc_msgSend(*(id *)(a1 + 40), "numberForKey:", CFSTR("HMDHomeCHIPNodeIDMessageKey"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v15, "unsignedIntegerValue");

  objc_msgSend(*(id *)(a1 + 40), "arrayForKey:", CFSTR("HMDHomeCHIPReportMessageKey"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "na_filter:", &__block_literal_global_127_7256);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v32;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v32 != v20)
          objc_enumerationMutation(obj);
        v22 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * j);
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v41 = v26;
          v42 = 2112;
          v43 = v22;
          _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_DEBUG, "%{public}@Calling CHIP report handler for subscriber %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
        objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "objectForKeyedSubscript:", v22);
        v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, uint64_t, void *))v28)[2](v28, v30, v17);

      }
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    }
    while (v19);
  }

  objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
}

uint64_t __45__HMDHome_CHIP__handleCHIPSendReportMessage___block_invoke_125(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  objc_opt_class();
  v3 = objc_opt_isKindOfClass() & (v2 != 0);

  return v3;
}

void __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "primaryResidentMessageRouter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke_124;
    v11[3] = &unk_1E89BFD28;
    v4 = *(_QWORD *)(a1 + 40);
    v11[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v2, "routeMessage:localHandler:", v4, v11);
  }
  else
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v13 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle CHIP remote request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v9 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
}

uint64_t __52__HMDHome_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke_124(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleCHIPSendRemoteRequestMessage:", a2);
}

uint64_t __73__HMDHome_CHIP__handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:", a2);
}

void __60__HMDHome_CHIP__setCHIPReportHandlerWithSubscriber_handler___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      v15 = 138543618;
      v16 = v7;
      v17 = 2112;
      v18 = v8;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Register CHIP report handler for subscriber %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
    {
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(*(id *)(a1 + 32), "setChipLocalSubscribers:", v10);

    }
    v11 = _Block_copy(*(const void **)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, *(_QWORD *)(a1 + 40));

  }
  else
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 138543618;
      v16 = v13;
      v17 = 2112;
      v18 = v14;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Deregister CHIP report handler for subscriber %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "chipLocalSubscribers");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 40));
  }

}

void __58__HMDHome_CHIP___saveAndSyncMatterFabricIDWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "fabricID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v8;
    v18 = 2112;
    v19 = v10;
    v11 = "%{public}@Failed to sync Matter Fabric ID to %@";
    v12 = v7;
    v13 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "fabricID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v8;
    v18 = 2112;
    v19 = v10;
    v11 = "%{public}@Successfully sync'ed Matter Fabric ID to %@";
    v12 = v7;
    v13 = OS_LOG_TYPE_INFO;
  }
  _os_log_impl(&dword_1CD062000, v12, v13, v11, (uint8_t *)&v16, 0x16u);

LABEL_7:
  objc_autoreleasePoolPop(v4);
  v14 = _Block_copy(*(const void **)(a1 + 40));
  v15 = v14;
  if (v14)
    (*((void (**)(void *, id))v14 + 2))(v14, v3);

}

void __74__HMDHome_CHIP__downloadLogWithController_nodeId_type_timeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v10;
    v17 = 2112;
    v18 = v5;
    v19 = 2112;
    v20 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Download log response: %@, error: %@", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(v5, "hmf_dataForKey:", *MEMORY[0x1E0D333B0]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_stringForKey:", *MEMORY[0x1E0D333B8]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v13 = _Block_copy(*(const void **)(a1 + 40));
    v14 = v13;
    if (v13)
      (*((void (**)(void *, _QWORD, id))v13 + 2))(v13, 0, v6);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_writeLogData:logName:completion:", v11, v12, *(_QWORD *)(a1 + 40));
  }

}

void __109__HMDHome_CHIP__invokeCommandWithNodeId_endpointId_clusterId_commandId_fields_timedInvokeTimeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543874;
    v14 = v10;
    v15 = 2112;
    v16 = v5;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Invoke command response: %@, error: %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("results"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

}

void __110__HMDHome_CHIP__writeAttributeWithNodeId_endpointId_clusterId_attributeId_value_timedWriteTimeout_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543874;
    v14 = v10;
    v15 = 2112;
    v16 = v5;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Write attribute response: %@, error: %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("results"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

}

void __92__HMDHome_CHIP__readAttributeWithNodeId_endpointId_clusterId_attributeId_params_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543874;
    v14 = v10;
    v15 = 2112;
    v16 = v5;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Read attribute response: %@, error: %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("results"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v12, v6);

}

+ (BOOL)updateCHIPPropertiesOnHomeModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v5 = a3;
  v6 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;
  objc_msgSend(v8, "fabricID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v8, "fabricID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setChipFabricID:", v10);

    objc_msgSend(v8, "fabricID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setChipFabricIndex:", v11);

  }
  return v9 != 0;
}

+ (void)updateCHIPPropertiesOnAccessoryModel:(id)a3 forAddedHAPAccessoryServer:(id)a4
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v5 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "nodeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setChipNodeID:", v9);

  }
}

- (BOOL)bulletinBoardNotificationsMigrationFileExistsOnDisk
{
  void *v3;
  void *v4;
  char v5;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome getBulletinBoardNotificationSerializedFileName](self, "getBulletinBoardNotificationSerializedFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "fileExistsAtPath:", v4);

  return v5;
}

- (BOOL)cameraNotificationSettingsMigrationFileExistsOnDisk
{
  void *v3;
  void *v4;
  char v5;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome getCameraNotificationSettingsSerializedFileName](self, "getCameraNotificationSettingsSerializedFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "fileExistsAtPath:", v4);

  return v5;
}

- (id)getBulletinBoardNotificationSerializedFileName
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/HMDHome-Bulletin-Board-Notifications-%@.plist"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)getCameraNotificationSettingsSerializedFileName
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/HMDHome-Camera-Notification-Settings-%@.plist"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)storeMigrationBulletinBoardNotificationsToDisk
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  +[HMDHome migrationBulletinBoardNotificationsForHome:](HMDHome, "migrationBulletinBoardNotificationsForHome:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543874;
      v26 = v10;
      v27 = 2112;
      v28 = v11;
      v29 = 2112;
      v30 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Archiving bulletin board notifications for migration for home: %@, [%@]", (uint8_t *)&v25, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    +[HMDHome encodedMigrationBulletinBoardNotifications:](HMDHome, "encodedMigrationBulletinBoardNotifications:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      -[HMDHome getBulletinBoardNotificationSerializedFileName](v7, "getBulletinBoardNotificationSerializedFileName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDPersistentStore writeData:toStorePath:dataLabel:](HMDPersistentStore, "writeData:toStorePath:dataLabel:", v12, v13, CFSTR("BulletinBoardNotifications"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = v7;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v18;
        v27 = 2112;
        v28 = v14;
        v29 = 2112;
        v30 = v13;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored bulletin board notifications ([%@] bytes) to [%@]", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v15);

    }
    else
    {
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = v7;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = v24;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to store bulletin board notifications during migration, archived data is nil", (uint8_t *)&v25, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
    }

  }
  else
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = v20;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@No bulletin board notifications to migrate for home: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v3);
}

- (void)storeMigrationCameraNotificationSettingsToDisk
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  +[HMDHome migrationCameraNotificationSettingsForHome:](HMDHome, "migrationCameraNotificationSettingsForHome:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543874;
      v26 = v10;
      v27 = 2112;
      v28 = v11;
      v29 = 2112;
      v30 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Archiving camera notification settings for migration for home: %@, [%@]", (uint8_t *)&v25, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    +[HMDHome encodedMigrationCameraNotificationSettings:](HMDHome, "encodedMigrationCameraNotificationSettings:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      -[HMDHome getCameraNotificationSettingsSerializedFileName](v7, "getCameraNotificationSettingsSerializedFileName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDPersistentStore writeData:toStorePath:dataLabel:](HMDPersistentStore, "writeData:toStorePath:dataLabel:", v12, v13, CFSTR("CameraNotificationSettings"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = v7;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v18;
        v27 = 2112;
        v28 = v14;
        v29 = 2112;
        v30 = v13;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored camera notification settings ([%@] bytes) to [%@]", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v15);

    }
    else
    {
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = v7;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = v24;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to store camera notification settings during migration, archived data is nil", (uint8_t *)&v25, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
    }

  }
  else
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v19;
      v27 = 2112;
      v28 = v20;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@No camera notification settings to migrate for home: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

  objc_autoreleasePoolPop(v3);
}

- (id)loadMigrationBulletinBoardNotificationsFromDisk
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  BOOL v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  void *v14;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  -[HMDHome getBulletinBoardNotificationSerializedFileName](self, "getBulletinBoardNotificationSerializedFileName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:options:error:", v3, 2, &v16);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v16;
  v6 = v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
  {
    +[HMDHome decodedMigrationBulletinBoardNotifications:](HMDHome, "decodedMigrationBulletinBoardNotifications:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Bulletin board notifications for migration: [%@]", buf, 0x16u);

    }
  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v18 = v11;
      v19 = 2112;
      v20 = v3;
      v21 = 2112;
      v22 = v6;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);

    }
    v12 = 0;
  }

  objc_autoreleasePoolPop(v8);
  return v12;
}

- (id)loadMigrationCameraNotificationSettingsFromDisk
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  BOOL v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  void *v14;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  -[HMDHome getCameraNotificationSettingsSerializedFileName](self, "getCameraNotificationSettingsSerializedFileName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:options:error:", v3, 2, &v16);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v16;
  v6 = v5;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
  {
    +[HMDHome decodedMigrationCameraNotificationSettings:](HMDHome, "decodedMigrationCameraNotificationSettings:", v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Camera notification settings for migration: [%@]", buf, 0x16u);

    }
  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v18 = v11;
      v19 = 2112;
      v20 = v3;
      v21 = 2112;
      v22 = v6;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to read data from file : %@ / %@", buf, 0x20u);

    }
    v12 = 0;
  }

  objc_autoreleasePoolPop(v8);
  return v12;
}

- (void)removeBulletinBoardNotificationsMigrationFileFromDisk
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc(MEMORY[0x1E0C99E98]);
  -[HMDHome getBulletinBoardNotificationSerializedFileName](self, "getBulletinBoardNotificationSerializedFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initFileURLWithPath:", v4);

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  objc_msgSend(v6, "removeItemAtURL:error:", v5, &v12);
  v7 = v12;

  if (v7)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing bulletin board notification migration file from disk : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

- (void)removeCameraNotificationSettingsMigrationFileFromDisk
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  id v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc(MEMORY[0x1E0C99E98]);
  -[HMDHome getCameraNotificationSettingsSerializedFileName](self, "getCameraNotificationSettingsSerializedFileName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initFileURLWithPath:", v4);

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  objc_msgSend(v6, "removeItemAtURL:error:", v5, &v12);
  v7 = v12;

  if (v7)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v11;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while removing camera notification settings migration file from disk : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

+ (id)migrationBulletinBoardNotificationsForHome:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  id v15;
  id v16;

  v4 = (void *)MEMORY[0x1E0C99DE8];
  v5 = a3;
  objc_msgSend(v4, "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hapAccessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = MEMORY[0x1E0C809B0];
  v12 = 3221225472;
  v13 = __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke;
  v14 = &unk_1E89A4030;
  v15 = v6;
  v16 = a1;
  v8 = v6;
  objc_msgSend(v7, "na_each:", &v11);

  v9 = (void *)objc_msgSend(v8, "copy", v11, v12, v13, v14);
  return v9;
}

+ (id)migrationCameraNotificationSettingsForHome:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  id v15;
  id v16;

  v4 = (void *)MEMORY[0x1E0C99DE8];
  v5 = a3;
  objc_msgSend(v4, "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "cameraAccessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = MEMORY[0x1E0C809B0];
  v12 = 3221225472;
  v13 = __77__HMDHome_BulletinNotifications__migrationCameraNotificationSettingsForHome___block_invoke;
  v14 = &unk_1E89A4030;
  v15 = v6;
  v16 = a1;
  v8 = v6;
  objc_msgSend(v7, "na_each:", &v11);

  v9 = (void *)objc_msgSend(v8, "copy", v11, v12, v13, v14);
  return v9;
}

+ (id)encodedMigrationBulletinBoardNotifications:(id)a3
{
  objc_class *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (objc_class *)MEMORY[0x1E0CB36F8];
  v4 = a3;
  v5 = (void *)objc_msgSend([v3 alloc], "initRequiringSecureCoding:", 1);
  objc_msgSend(v5, "encodeObject:forKey:", v4, *MEMORY[0x1E0CB2CD0]);

  objc_msgSend(v5, "finishEncoding");
  objc_msgSend(v5, "encodedData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

+ (id)encodedMigrationCameraNotificationSettings:(id)a3
{
  objc_class *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (objc_class *)MEMORY[0x1E0CB36F8];
  v4 = a3;
  v5 = (void *)objc_msgSend([v3 alloc], "initRequiringSecureCoding:", 1);
  objc_msgSend(v5, "encodeObject:forKey:", v4, *MEMORY[0x1E0CB2CD0]);

  objc_msgSend(v5, "finishEncoding");
  objc_msgSend(v5, "encodedData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

+ (id)decodedMigrationBulletinBoardNotifications:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  _QWORD v30[10];

  v30[9] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99E60];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  v30[4] = objc_opt_class();
  v30[5] = objc_opt_class();
  v30[6] = objc_opt_class();
  v30[7] = objc_opt_class();
  v30[8] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 9);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setWithArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v7, v4, &v25);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v25;
  v10 = v9;
  if (!v8 || v9)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = a1;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v19;
      v28 = 2112;
      v29 = v10;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive bulletin board notifications: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v15 = 0;
  }
  else
  {
    v11 = v8;
    objc_opt_class();
    v12 = objc_opt_isKindOfClass() & 1;
    if (v12)
      v13 = v11;
    else
      v13 = 0;
    v14 = v13;

    if (v12)
    {
      v15 = v11;
    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = a1;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v23;
        v28 = 2112;
        v29 = v11;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      v15 = 0;
    }

  }
  return v15;
}

+ (id)decodedMigrationCameraNotificationSettings:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  int v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  _QWORD v30[11];

  v30[10] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99E60];
  v30[0] = objc_opt_class();
  v30[1] = objc_opt_class();
  v30[2] = objc_opt_class();
  v30[3] = objc_opt_class();
  v30[4] = objc_opt_class();
  v30[5] = objc_opt_class();
  v30[6] = objc_opt_class();
  v30[7] = objc_opt_class();
  v30[8] = objc_opt_class();
  v30[9] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setWithArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = 0;
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v7, v4, &v25);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v25;
  v10 = v9;
  if (!v8 || v9)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = a1;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v19;
      v28 = 2112;
      v29 = v10;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Unable to unarchive camera notification settings: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v15 = 0;
  }
  else
  {
    v11 = v8;
    objc_opt_class();
    v12 = objc_opt_isKindOfClass() & 1;
    if (v12)
      v13 = v11;
    else
      v13 = 0;
    v14 = v13;

    if (v12)
    {
      v15 = v11;
    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = a1;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v23;
        v28 = 2112;
        v29 = v11;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unarchived data is the wrong type : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      v15 = 0;
    }

  }
  return v15;
}

void __77__HMDHome_BulletinNotifications__migrationCameraNotificationSettingsForHome___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "cameraProfileNotificationSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v18 = v9;
      v19 = 2112;
      v20 = v10;
      v21 = 2112;
      v22 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding camera notification settings entry for migration: accessoryUUID: %@ cameraProfileNotificationSettings: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    v11 = *(void **)(a1 + 32);
    objc_msgSend(v3, "uuid", CFSTR("HMD.CNS.A"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15[1] = CFSTR("HMD.CNS");
    v16[0] = v12;
    v16[1] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addObject:", v13);

  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v3;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Camera accessory: %@ missing camera profile notification settings during migration", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6[2];
  _QWORD v7[4];
  id v8;
  __int128 v9;

  v3 = a2;
  objc_msgSend(v3, "services");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke_2;
  v7[3] = &unk_1E89A4008;
  v8 = v3;
  *(_OWORD *)v6 = *(_OWORD *)(a1 + 32);
  v5 = v6[0];
  v9 = *(_OWORD *)v6;
  v6[0] = v3;
  objc_msgSend(v4, "na_each:", v7);

}

void __77__HMDHome_BulletinNotifications__migrationBulletinBoardNotificationsForHome___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  _QWORD v24[4];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "bulletinBoardNotification");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "condition");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
      objc_msgSend(v4, "condition");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "encodeObject:forKey:", v8, *MEMORY[0x1E0CB2CD0]);

      objc_msgSend(v7, "finishEncoding");
      objc_msgSend(v7, "encodedData");
      v9 = objc_claimAutoreleasedReturnValue();

      v5 = (void *)v9;
    }
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "instanceID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "isEnabled");
      HMFBooleanToString();
      v22 = v10;
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v26 = v13;
      v27 = 2112;
      v28 = v14;
      v29 = 2112;
      v30 = v15;
      v31 = 2112;
      v32 = v5;
      v33 = 2112;
      v34 = v16;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding bulletin board notification entry for migration: accessoryUUID: %@ serviceInstanceID: %@ predicate: %@ enabled: %@", buf, 0x34u);

      v10 = v22;
    }

    objc_autoreleasePoolPop(v10);
    v23[0] = CFSTR("HMD.BBN.A");
    v17 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = v18;
    v23[1] = CFSTR("HMD.BBN.S");
    objc_msgSend(v3, "instanceID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v24[1] = v19;
    v24[2] = v5;
    v23[2] = CFSTR("HMD.BBN.P");
    v23[3] = CFSTR("HMD.BBN.E");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v4, "isEnabled"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v24[3] = v20;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addObject:", v21);

  }
}

- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8
{
  id v14;
  void *v15;
  HMDXPCMessageReportingSessionManager *v16;
  HMDHome *v17;
  HMDHomeLocalDeviceCapabilitiesDataSource *v19;
  void *v20;
  HMDDeviceLockStateDataSource *v21;
  HMDXPCMessageTransportFactory *v22;
  HMDCarPlayDataSource *v23;
  HMDSiriSecureAccessoryAccessController *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  HMDHomeMetricsDispatcherFactory *v35;
  HMDNotificationRegistry *v36;

  v32 = a8;
  v14 = a7;
  v31 = a6;
  v28 = a5;
  v30 = a4;
  v27 = a3;
  if (isWatch())
    v36 = 0;
  else
    v36 = objc_alloc_init(HMDNotificationRegistry);
  v35 = objc_alloc_init(HMDHomeMetricsDispatcherFactory);
  objc_msgSend(v14, "metricsManager");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "logEventSubmitter");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "metricsManager");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "dailyScheduler");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = -[HMDSiriSecureAccessoryAccessController initWithDataSource:]([HMDSiriSecureAccessoryAccessController alloc], "initWithDataSource:", self);
  v23 = objc_alloc_init(HMDCarPlayDataSource);
  v21 = objc_alloc_init(HMDDeviceLockStateDataSource);
  v22 = objc_alloc_init(HMDXPCMessageTransportFactory);
  v19 = objc_alloc_init(HMDHomeLocalDeviceCapabilitiesDataSource);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_alloc_init(HMDXPCMessageReportingSessionManager);
  v17 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:netManagerFactory:wifiManagerFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:keychainStore:reportingSessionManager:](self, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:netManagerFactory:wifiManagerFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:keychainStore:reportingSessionManager:", v27, v30, v28, v31, v14, v32, v35, v26, v34, &__block_literal_global_394_10843, &__block_literal_global_397, &__block_literal_global_403, v25,
          v24,
          v23,
          v21,
          v36,
          &__block_literal_global_400,
          &__block_literal_global_406,
          &__block_literal_global_409,
          v22,
          v19,
          v20,
          v15,
          v16);

  return v17;
}

- (HMDHome)initWithName:(id)a3 uuid:(id)a4 defaultRoomUUID:(id)a5 owner:(id)a6 homeManager:(id)a7 presenceAuth:(id)a8 metricsDispatcherFactory:(id)a9 logEventSubmitter:(id)a10 dailyScheduler:(id)a11 currentUserFactory:(id)a12 residentDeviceManagerFactory:(id)a13 locationHandlerFactory:(id)a14 hapMetadata:(id)a15 siriSecureAccessoryAccessController:(id)a16 carPlayDataSource:(id)a17 deviceLockStateDataSource:(id)a18 notificationRegistry:(id)a19 administratorHandlerFactory:(id)a20 netManagerFactory:(id)a21 wifiManagerFactory:(id)a22 xpcMessageTransportFactory:(id)a23 localCapabilitiesDataSource:(id)a24 notificationCenter:(id)a25 keychainStore:(id)a26 reportingSessionManager:(id)a27
{
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  HMDHome *v39;
  uint64_t v40;
  HMDFeaturesDataSource *featureDataSource;
  void *v42;
  id currentUserFactory;
  uint64_t v44;
  OS_os_log *logger;
  uint64_t v46;
  NSUUID *uuid;
  uint64_t v48;
  NSUUID *spiClientIdentifier;
  void *v50;
  void *v51;
  const char *v52;
  NSObject *v53;
  dispatch_queue_t v54;
  OS_dispatch_queue *workQueue;
  HMDPrimaryResidentChangeMonitor *v56;
  HMDPrimaryResidentChangeMonitor *primaryResidentChangeMonitor;
  void *v58;
  id netManagerFactory;
  void *v60;
  id wifiManagerFactory;
  HMDAccessoryInfoFetchController *v62;
  HMDAccessoryInfoFetchController *accessoryInfoFetchController;
  uint64_t v64;
  HMDHomeMetricsDispatcher *metricsDispatcher;
  void *v66;
  uint64_t v67;
  NSString *name;
  uint64_t v69;
  NSUUID *zoneID;
  uint64_t v71;
  HMFMessageDispatcher *msgDispatcher;
  uint64_t v73;
  NSString *ownerName;
  char v75;
  uint64_t v76;
  HMDHomeKitVersion *currentHomeKitVersion;
  void *v78;
  HMDHome *v79;
  NSObject *v80;
  void *v81;
  HMUserPresenceAuthorization *v82;
  void *presenceAuthStatus;
  _BOOL4 v84;
  HMUserPresenceCompute *presenceComputeStatus;
  uint64_t v86;
  NSMutableSet *reachabilityUpdatedAccessories;
  HMDHomeObjectChangeHandler *v88;
  HMDHomeObjectChangeHandler *homeObjectChangeHandler;
  uint64_t v90;
  HMDAccessoryBrowserProtocol *accessoryBrowser;
  uint64_t v92;
  NSMutableArray *rooms;
  uint64_t v94;
  NSMutableArray *zones;
  uint64_t v96;
  NSMutableDictionary *accessories;
  uint64_t v98;
  NSMutableArray *discoveredAccessories;
  uint64_t v100;
  NSMutableArray *serviceGroups;
  uint64_t v102;
  NSMutableArray *actionSets;
  uint64_t v104;
  NSMutableArray *currentTriggers;
  uint64_t v106;
  NSMutableArray *triggerOwnedActionSets;
  uint64_t v108;
  NSMutableArray *users;
  uint64_t v110;
  NSMutableArray *usersPendingUserManagementOperations;
  uint64_t v112;
  NSMutableArray *removedUsers;
  uint64_t v114;
  NSMutableArray *outgoingInvitations;
  uint64_t v116;
  NSMutableArray *ownedTriggers;
  uint64_t v118;
  NSMutableSet *pendingResponsesForRemoteAccessSetup;
  uint64_t v120;
  NSMutableDictionary *enableNotificationPayload;
  uint64_t v122;
  NSMutableDictionary *disableNotificationPayload;
  uint64_t v124;
  NSMutableDictionary *notificationHandlerMap;
  uint64_t v126;
  NSMutableSet *notificationRegistrations;
  uint64_t v128;
  NSMutableSet *notificationRegistrationsForAppleMediaAccessories;
  uint64_t v130;
  NSMutableSet *notificationDeregistrations;
  uint64_t v132;
  NSDate *notificationsUpdatedTime;
  uint64_t v134;
  NSMapTable *uuidToHAPAccessoryConfigTable;
  uint64_t v136;
  HMDAppleAccountSettings *accountSettings;
  uint64_t v138;
  NSMutableSet *heartbeatPingMessagesQueuedWithServer;
  HMDRoom *v140;
  void *v141;
  uint64_t v142;
  HMDRoom *roomForEntireHome;
  uint64_t v144;
  NSMutableArray *unconfiguredResidentDevices;
  uint64_t v146;
  NSHashTable *removeAccessoryInProgressForHMDAccessories;
  uint64_t v148;
  NSMutableArray *retrievalAccessoryCompletionTuples;
  uint64_t v150;
  NSMutableArray *accessoryRemoteReachabilityEnabledClients;
  HMDManagedStagedValue *v152;
  void *v153;
  uint64_t v154;
  HMDManagedStagedValue *stagedRemoteReachabilityRegistration;
  uint64_t v156;
  NSMutableArray *reachabilityRegisteredDevices;
  uint64_t v158;
  NSMutableArray *remoteReachabilityNotificationPendingAccessories;
  uint64_t v160;
  NSMutableDictionary *pendingResponses;
  uint64_t v162;
  HMDHomeLocationHandler *homeLocationHandler;
  HMDHomeReprovisionHandler *v164;
  HMDHomeReprovisionHandler *homeReprovisionHandler;
  uint64_t v166;
  NSMutableDictionary *newlyConfiguredAccessories;
  uint64_t v168;
  NSMapTable *addPendingAccessories;
  uint64_t v170;
  NSMutableDictionary *addPendingAccessorySetupCodes;
  uint64_t v172;
  NSMutableDictionary *addPendingAccessoryOnboardingSetupPayloadStrings;
  uint64_t v174;
  NSMutableDictionary *addPendingAccessorySetupCodeHandlers;
  uint64_t v176;
  HMDResidentDeviceManager *residentDeviceManager;
  HMDSharedHomeUpdateHandler *v178;
  HMDSharedHomeUpdateHandler *sharedHomeUpdateHandler;
  uint64_t v180;
  HMDHomeAdministratorHandler *administratorHandler;
  HMDHomeMediaSystemHandler *v182;
  uint64_t v183;
  HMDHomeMediaSystemHandler *mediaSystemController;
  HMDResidentAppleMediaStateManager *v185;
  HMDResidentAppleMediaStateManager *mediaStateManager;
  uint64_t v187;
  NSMutableArray *mediaSessions;
  uint64_t v189;
  NSMutableArray *mediaSessionStates;
  uint64_t v191;
  NSHashTable *connectionsDiscoveringSymptomsForNearbyDevices;
  HMDHomePresenceMonitor *v193;
  HMDHomePresenceMonitor *presenceMonitor;
  HMDHomePeriodicReader *v195;
  HMDHomePeriodicReader *periodicReader;
  HMDUserPresenceFeeder *v197;
  HMDUserPresenceFeeder *presenceFeeder;
  HMDPredicateUtilities *v199;
  void *v200;
  uint64_t v201;
  HMDPredicateUtilities *predicateUtility;
  HMDMediaActionRouter *v203;
  HMDMediaActionRouter *mediaActionRouter;
  HMDAccessoryNetworkProtectionGroupRegistry *v205;
  void *v206;
  uint64_t v207;
  HMDAccessoryNetworkProtectionGroupRegistry *networkProtectionGroupRegistry;
  HMDResidentReachabilityNotificationManager *v209;
  HMDResidentReachabilityContext *v210;
  uint64_t v211;
  HMDResidentReachabilityNotificationManager *reachabilityNotificationManager;
  HMDAccessoryReachabilityChangedLogEventManager *v213;
  HMDAccessoryReachabilityChangedLogEventManager *reachabilityChangedLogEventManager;
  HMDHomeNaturalLightingCurveWriter *v215;
  HMDHomeNaturalLightingCurveWriter *naturalLightingCurveWriter;
  HMDHAPAccessoryConnectionCoordinator *v217;
  void *v218;
  uint64_t v219;
  HMDHAPAccessoryConnectionCoordinator *accessoryConnectionCoordinator;
  HMDHAPAccessoryReaderWriter *v221;
  HMDHAPAccessoryReaderWriter *accessoryReaderWriter;
  HMDHomePersonDataManager *v223;
  HMDHomePersonDataManager *personDataManager;
  HMDHomeWalletKeyManager *v225;
  HMDHomeWalletKeyManager *walletKeyManager;
  void *v227;
  HMDHome *v228;
  NSObject *v229;
  void *v230;
  HMDHomeNFCReaderKeyManager *v231;
  HMDHomeNFCReaderKeyManager *nfcReaderKeyManager;
  void *v233;
  HMDHome *v234;
  NSObject *v235;
  void *v236;
  uint64_t v237;
  NSMutableDictionary *labelsByAccessCode;
  uint64_t v239;
  NSMutableDictionary *removedUserInfoByAccessCode;
  HMDAccessCodeManagerContext *v241;
  void *v242;
  HMDAccessCodeManagerContext *v243;
  HMDAccessCodeManager *v244;
  HMDAccessCodeManager *accessCodeManager;
  HMDHomeLockNotificationManager *v246;
  HMDHomeLockNotificationManager *lockNotificationManager;
  HMDCameraAnalysisStatePublisher *v248;
  HMDCameraAnalysisStatePublisher *analysisStatePublisher;
  HMDHomeRemoteEventAccessController *v250;
  HMDHomeRemoteEventAccessController *homeRemoteEventAccessController;
  void *v252;
  id *v253;
  NSObject *v254;
  void *v255;
  HMDMediaGroupSetupMetricDispatcher *v256;
  id v257;
  HMDMediaGroupSetupMetricDispatcher *v258;
  id v259;
  HMDCHIPHomeStorage *v260;
  id v261;
  uint64_t v262;
  id v263;
  id v264;
  void *v265;
  uint64_t v266;
  id v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  id v276;
  id v277;
  id v278;
  id v279;
  id v280;
  id v281;
  id v282;
  id v283;
  void *v284;
  void *v285;
  void *v286;
  id v287;
  id v288;
  id v289;
  id v290;
  id v291;
  void *v292;
  void *v293;
  id *p_localCapabilitiesDataSource;
  void (**v296)(void);
  void *v297;
  void (**v298)(id, id);
  void (**v299)(id, id);
  id v300;
  id v301;
  id v302;
  id v303;
  id v304;
  id v305;
  id aBlock;
  void *v307;
  id v308;
  id v310;
  void *v311;
  _QWORD v312[4];
  id v313;
  _QWORD v314[4];
  id v315;
  id location;
  objc_super v317;
  uint8_t buf[4];
  void *v319;
  __int16 v320;
  id v321;
  uint64_t v322;

  v322 = *MEMORY[0x1E0C80C00];
  v301 = a3;
  v302 = a4;
  v300 = a5;
  v279 = a6;
  v31 = a6;
  v308 = a7;
  v32 = a8;
  v33 = a9;
  v310 = a10;
  v287 = a11;
  aBlock = a12;
  v298 = (void (**)(id, id))a13;
  v296 = (void (**)(void))a14;
  v34 = a15;
  v35 = a16;
  v36 = a17;
  v37 = a18;
  v288 = a19;
  v299 = (void (**)(id, id))a20;
  v304 = a21;
  v303 = a22;
  v289 = a23;
  v290 = a24;
  v305 = a25;
  v291 = a26;
  v38 = a27;
  v297 = v33;
  if (!v33)
    _HMFPreconditionFailure();
  v285 = v37;
  v286 = v38;
  v284 = v34;
  v307 = v32;
  v311 = v31;
  v317.receiver = self;
  v317.super_class = (Class)HMDHome;
  v39 = -[HMDHome init](&v317, sel_init);
  if (v39)
  {
    +[HMDHome _initialize](HMDHome, "_initialize");
    +[HMDFeaturesDataSource defaultDataSource](HMDFeaturesDataSource, "defaultDataSource");
    v40 = objc_claimAutoreleasedReturnValue();
    featureDataSource = v39->_featureDataSource;
    v39->_featureDataSource = (HMDFeaturesDataSource *)v40;

    p_localCapabilitiesDataSource = (id *)&v39->_localCapabilitiesDataSource;
    objc_storeStrong((id *)&v39->_localCapabilitiesDataSource, a24);
    v42 = _Block_copy(aBlock);
    currentUserFactory = v39->_currentUserFactory;
    v39->_currentUserFactory = v42;

    objc_storeStrong((id *)&v39->_xpcMessageTransportFactory, a23);
    HMFGetOSLogHandle();
    v44 = objc_claimAutoreleasedReturnValue();
    logger = v39->_logger;
    v39->_logger = (OS_os_log *)v44;

    if (v302)
    {
      v293 = (void *)objc_msgSend(v302, "copy", a17, a16, a15, v279, a11, a10);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3A28], "UUID", a17, a16, a15, v279, a11, a10);
      v293 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(MEMORY[0x1E0D28638], "hmf_cachedInstanceForNSUUID:", v293);
    v46 = objc_claimAutoreleasedReturnValue();
    uuid = v39->_uuid;
    v39->_uuid = (NSUUID *)v46;

    spiClientIdentifierForUUID(v39->_uuid);
    v292 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D28638], "hmf_cachedInstanceForNSUUID:", v292);
    v48 = objc_claimAutoreleasedReturnValue();
    spiClientIdentifier = v39->_spiClientIdentifier;
    v39->_spiClientIdentifier = (NSUUID *)v48;

    -[NSUUID UUIDString](v39->_uuid, "UUIDString");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("com.apple.hmd.home"), "stringByAppendingString:", v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();

    v283 = objc_retainAutorelease(v51);
    v52 = (const char *)objc_msgSend(v283, "UTF8String");
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v53 = objc_claimAutoreleasedReturnValue();
    v54 = dispatch_queue_create(v52, v53);
    workQueue = v39->_workQueue;
    v39->_workQueue = (OS_dispatch_queue *)v54;

    objc_msgSend(MEMORY[0x1E0D28570], "blessWithImplicitContext:", v39->_workQueue);
    objc_storeStrong((id *)&v39->_notificationCenter, a25);
    v56 = -[HMDPrimaryResidentChangeMonitor initWithIdentifier:notificationCenter:]([HMDPrimaryResidentChangeMonitor alloc], "initWithIdentifier:notificationCenter:", v39->_uuid, v305);
    primaryResidentChangeMonitor = v39->_primaryResidentChangeMonitor;
    v39->_primaryResidentChangeMonitor = v56;

    -[HMDPrimaryResidentChangeMonitor setDataSource:](v39->_primaryResidentChangeMonitor, "setDataSource:", v39);
    objc_storeStrong((id *)&v39->_logEventSubmitter, v282);
    objc_storeStrong((id *)&v39->_dailyScheduler, v281);
    v58 = _Block_copy(v304);
    netManagerFactory = v39->_netManagerFactory;
    v39->_netManagerFactory = v58;

    v60 = _Block_copy(v303);
    wifiManagerFactory = v39->_wifiManagerFactory;
    v39->_wifiManagerFactory = v60;

    objc_storeStrong((id *)&v39->_keychainStore, a26);
    objc_storeStrong((id *)&v39->_reportingSessionManager, a27);
    v62 = -[HMDAccessoryInfoFetchController initWithHomeUUID:workQueue:]([HMDAccessoryInfoFetchController alloc], "initWithHomeUUID:workQueue:", v39->_uuid, v39->_workQueue);
    accessoryInfoFetchController = v39->_accessoryInfoFetchController;
    v39->_accessoryInfoFetchController = v62;

    if (v310)
    {
      objc_msgSend(v33, "createHomeMetricsDispatcherWithIdentifier:logEventSubmitter:", v39->_uuid, v310);
      v64 = objc_claimAutoreleasedReturnValue();
      metricsDispatcher = v39->_metricsDispatcher;
      v39->_metricsDispatcher = (HMDHomeMetricsDispatcher *)v64;

    }
    objc_msgSend(v301, "hm_truncatedNameString");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = objc_msgSend(v66, "copy");
    name = v39->_name;
    v39->_name = (NSString *)v67;

    +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v39->_uuid);
    v69 = objc_claimAutoreleasedReturnValue();
    zoneID = v39->_zoneID;
    v39->_zoneID = (NSUUID *)v69;

    objc_storeWeak((id *)&v39->_homeManager, v308);
    objc_msgSend(v308, "messageDispatcher");
    v71 = objc_claimAutoreleasedReturnValue();
    msgDispatcher = v39->_msgDispatcher;
    v39->_msgDispatcher = (HMFMessageDispatcher *)v71;

    objc_storeStrong((id *)&v39->_owner, v280);
    v39->_ownerTrustZoneCapable = objc_msgSend(v311, "isCurrentUser");
    objc_msgSend(v311, "pairingUsername");
    v73 = objc_claimAutoreleasedReturnValue();
    ownerName = v39->_ownerName;
    v39->_ownerName = (NSString *)v73;

    v75 = (char)v311;
    if (v311)
      v75 = objc_msgSend(v311, "isCurrentUser");
    v39->_ownerUser = v75;
    v39->_allowsRemoteAccess = 1;
    +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
    v76 = objc_claimAutoreleasedReturnValue();
    currentHomeKitVersion = v39->_currentHomeKitVersion;
    v39->_currentHomeKitVersion = (HMDHomeKitVersion *)v76;

    v78 = (void *)MEMORY[0x1D17BA0A0]();
    v79 = v39;
    HMFGetOSLogHandle();
    v80 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v319 = v81;
      v320 = 2112;
      v321 = v32;
      _os_log_impl(&dword_1CD062000, v80, OS_LOG_TYPE_INFO, "%{public}@Home Presence auth : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v78);
    if (v32)
    {
      v82 = (HMUserPresenceAuthorization *)v32;
      presenceAuthStatus = v79->_presenceAuthStatus;
      v79->_presenceAuthStatus = v82;
    }
    else
    {
      v84 = +[HMDHomeManager isThisDeviceAdminOfHome:](HMDHomeManager, "isThisDeviceAdminOfHome:", v79);
      if (v84)
      {
        objc_msgSend(MEMORY[0x1E0CBA950], "authWithValue:", 1);
        presenceAuthStatus = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        presenceAuthStatus = 0;
      }
      objc_storeStrong((id *)&v79->_presenceAuthStatus, presenceAuthStatus);
      if (!v84)
        goto LABEL_19;
    }

LABEL_19:
    presenceComputeStatus = v79->_presenceComputeStatus;
    v79->_presenceComputeStatus = 0;

    v79->_homeLocation = 0;
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v86 = objc_claimAutoreleasedReturnValue();
    reachabilityUpdatedAccessories = v79->_reachabilityUpdatedAccessories;
    v79->_reachabilityUpdatedAccessories = (NSMutableSet *)v86;

    v88 = -[HMDHomeObjectChangeHandler initWithHome:]([HMDHomeObjectChangeHandler alloc], "initWithHome:", v79);
    homeObjectChangeHandler = v79->_homeObjectChangeHandler;
    v79->_homeObjectChangeHandler = v88;

    objc_msgSend(v308, "accessoryBrowser");
    v90 = objc_claimAutoreleasedReturnValue();
    accessoryBrowser = v79->_accessoryBrowser;
    v79->_accessoryBrowser = (HMDAccessoryBrowserProtocol *)v90;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v92 = objc_claimAutoreleasedReturnValue();
    rooms = v79->_rooms;
    v79->_rooms = (NSMutableArray *)v92;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v94 = objc_claimAutoreleasedReturnValue();
    zones = v79->_zones;
    v79->_zones = (NSMutableArray *)v94;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v96 = objc_claimAutoreleasedReturnValue();
    accessories = v79->_accessories;
    v79->_accessories = (NSMutableDictionary *)v96;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v98 = objc_claimAutoreleasedReturnValue();
    discoveredAccessories = v79->_discoveredAccessories;
    v79->_discoveredAccessories = (NSMutableArray *)v98;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v100 = objc_claimAutoreleasedReturnValue();
    serviceGroups = v79->_serviceGroups;
    v79->_serviceGroups = (NSMutableArray *)v100;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v102 = objc_claimAutoreleasedReturnValue();
    actionSets = v79->_actionSets;
    v79->_actionSets = (NSMutableArray *)v102;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v104 = objc_claimAutoreleasedReturnValue();
    currentTriggers = v79->_currentTriggers;
    v79->_currentTriggers = (NSMutableArray *)v104;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v106 = objc_claimAutoreleasedReturnValue();
    triggerOwnedActionSets = v79->_triggerOwnedActionSets;
    v79->_triggerOwnedActionSets = (NSMutableArray *)v106;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v108 = objc_claimAutoreleasedReturnValue();
    users = v79->_users;
    v79->_users = (NSMutableArray *)v108;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v110 = objc_claimAutoreleasedReturnValue();
    usersPendingUserManagementOperations = v79->_usersPendingUserManagementOperations;
    v79->_usersPendingUserManagementOperations = (NSMutableArray *)v110;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v112 = objc_claimAutoreleasedReturnValue();
    removedUsers = v79->_removedUsers;
    v79->_removedUsers = (NSMutableArray *)v112;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v114 = objc_claimAutoreleasedReturnValue();
    outgoingInvitations = v79->_outgoingInvitations;
    v79->_outgoingInvitations = (NSMutableArray *)v114;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v116 = objc_claimAutoreleasedReturnValue();
    ownedTriggers = v79->_ownedTriggers;
    v79->_ownedTriggers = (NSMutableArray *)v116;

    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v118 = objc_claimAutoreleasedReturnValue();
    pendingResponsesForRemoteAccessSetup = v79->_pendingResponsesForRemoteAccessSetup;
    v79->_pendingResponsesForRemoteAccessSetup = (NSMutableSet *)v118;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v120 = objc_claimAutoreleasedReturnValue();
    enableNotificationPayload = v79->_enableNotificationPayload;
    v79->_enableNotificationPayload = (NSMutableDictionary *)v120;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v122 = objc_claimAutoreleasedReturnValue();
    disableNotificationPayload = v79->_disableNotificationPayload;
    v79->_disableNotificationPayload = (NSMutableDictionary *)v122;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v124 = objc_claimAutoreleasedReturnValue();
    notificationHandlerMap = v79->_notificationHandlerMap;
    v79->_notificationHandlerMap = (NSMutableDictionary *)v124;

    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v126 = objc_claimAutoreleasedReturnValue();
    notificationRegistrations = v79->_notificationRegistrations;
    v79->_notificationRegistrations = (NSMutableSet *)v126;

    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v128 = objc_claimAutoreleasedReturnValue();
    notificationRegistrationsForAppleMediaAccessories = v79->_notificationRegistrationsForAppleMediaAccessories;
    v79->_notificationRegistrationsForAppleMediaAccessories = (NSMutableSet *)v128;

    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v130 = objc_claimAutoreleasedReturnValue();
    notificationDeregistrations = v79->_notificationDeregistrations;
    v79->_notificationDeregistrations = (NSMutableSet *)v130;

    objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
    v132 = objc_claimAutoreleasedReturnValue();
    notificationsUpdatedTime = v79->_notificationsUpdatedTime;
    v79->_notificationsUpdatedTime = (NSDate *)v132;

    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v134 = objc_claimAutoreleasedReturnValue();
    uuidToHAPAccessoryConfigTable = v79->_uuidToHAPAccessoryConfigTable;
    v79->_uuidToHAPAccessoryConfigTable = (NSMapTable *)v134;

    +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
    v136 = objc_claimAutoreleasedReturnValue();
    accountSettings = v79->_accountSettings;
    v79->_accountSettings = (HMDAppleAccountSettings *)v136;

    objc_storeStrong((id *)&v79->_hapMetadata, v278);
    objc_storeStrong((id *)&v79->_deviceLockStateDataSource, a18);
    objc_storeStrong((id *)&v79->_siriSecureAccessoryAccessController, v277);
    objc_storeStrong((id *)&v79->_carPlayDataSource, v276);
    if (isiOSDevice())
    {
      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v138 = objc_claimAutoreleasedReturnValue();
      heartbeatPingMessagesQueuedWithServer = v79->_heartbeatPingMessagesQueuedWithServer;
      v79->_heartbeatPingMessagesQueuedWithServer = (NSMutableSet *)v138;

    }
    if (v311)
    {
      -[NSMutableArray addObject:](v79->_users, "addObject:", v311);
      objc_msgSend(v311, "setHome:", v79);
      if (!v39->_ownerUser)
        -[HMDHome _updateCurrentUserForSharedHome](v79, "_updateCurrentUserForSharedHome");
    }
    v140 = [HMDRoom alloc];
    HMDDefaultRoomName();
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    v142 = -[HMDRoom initWithName:uuid:home:](v140, "initWithName:uuid:home:", v141, v300, v79);
    roomForEntireHome = v79->_roomForEntireHome;
    v79->_roomForEntireHome = (HMDRoom *)v142;

    v79->_configurationVersion = 0;
    v79->_previousReachableAccessoriesCount = 0;
    v79->_previousReachableAppleMediaAccessoriesCount = 0;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v144 = objc_claimAutoreleasedReturnValue();
    unconfiguredResidentDevices = v79->_unconfiguredResidentDevices;
    v79->_unconfiguredResidentDevices = (NSMutableArray *)v144;

    objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
    v146 = objc_claimAutoreleasedReturnValue();
    removeAccessoryInProgressForHMDAccessories = v79->_removeAccessoryInProgressForHMDAccessories;
    v79->_removeAccessoryInProgressForHMDAccessories = (NSHashTable *)v146;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v148 = objc_claimAutoreleasedReturnValue();
    retrievalAccessoryCompletionTuples = v79->_retrievalAccessoryCompletionTuples;
    v79->_retrievalAccessoryCompletionTuples = (NSMutableArray *)v148;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v150 = objc_claimAutoreleasedReturnValue();
    accessoryRemoteReachabilityEnabledClients = v79->_accessoryRemoteReachabilityEnabledClients;
    v79->_accessoryRemoteReachabilityEnabledClients = (NSMutableArray *)v150;

    objc_initWeak(&location, v79);
    v152 = [HMDManagedStagedValue alloc];
    objc_msgSend(MEMORY[0x1E0D28558], "BOOLeanWithBool:", 0);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    v314[0] = MEMORY[0x1E0C809B0];
    v314[1] = 3221225472;
    v314[2] = __495__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke;
    v314[3] = &unk_1E89A4218;
    objc_copyWeak(&v315, &location);
    v154 = -[HMDManagedStagedValue initWithValue:commitBlock:](v152, "initWithValue:commitBlock:", v153, v314);
    stagedRemoteReachabilityRegistration = v79->_stagedRemoteReachabilityRegistration;
    v79->_stagedRemoteReachabilityRegistration = (HMDManagedStagedValue *)v154;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v156 = objc_claimAutoreleasedReturnValue();
    reachabilityRegisteredDevices = v79->_reachabilityRegisteredDevices;
    v79->_reachabilityRegisteredDevices = (NSMutableArray *)v156;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v158 = objc_claimAutoreleasedReturnValue();
    remoteReachabilityNotificationPendingAccessories = v79->_remoteReachabilityNotificationPendingAccessories;
    v79->_remoteReachabilityNotificationPendingAccessories = (NSMutableArray *)v158;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v160 = objc_claimAutoreleasedReturnValue();
    pendingResponses = v79->_pendingResponses;
    v79->_pendingResponses = (NSMutableDictionary *)v160;

    if (!isWatch())
    {
      v296[2]();
      v162 = objc_claimAutoreleasedReturnValue();
      homeLocationHandler = v79->_homeLocationHandler;
      v79->_homeLocationHandler = (HMDHomeLocationHandler *)v162;

    }
    if (!isWatch())
    {
      v164 = objc_alloc_init(HMDHomeReprovisionHandler);
      homeReprovisionHandler = v79->_homeReprovisionHandler;
      v79->_homeReprovisionHandler = v164;

    }
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v166 = objc_claimAutoreleasedReturnValue();
    newlyConfiguredAccessories = v79->_newlyConfiguredAccessories;
    v79->_newlyConfiguredAccessories = (NSMutableDictionary *)v166;

    objc_msgSend(MEMORY[0x1E0CB3748], "mapTableWithStrongToStrongObjects");
    v168 = objc_claimAutoreleasedReturnValue();
    addPendingAccessories = v79->_addPendingAccessories;
    v79->_addPendingAccessories = (NSMapTable *)v168;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v170 = objc_claimAutoreleasedReturnValue();
    addPendingAccessorySetupCodes = v79->_addPendingAccessorySetupCodes;
    v79->_addPendingAccessorySetupCodes = (NSMutableDictionary *)v170;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v172 = objc_claimAutoreleasedReturnValue();
    addPendingAccessoryOnboardingSetupPayloadStrings = v79->_addPendingAccessoryOnboardingSetupPayloadStrings;
    v79->_addPendingAccessoryOnboardingSetupPayloadStrings = (NSMutableDictionary *)v172;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v174 = objc_claimAutoreleasedReturnValue();
    addPendingAccessorySetupCodeHandlers = v79->_addPendingAccessorySetupCodeHandlers;
    v79->_addPendingAccessorySetupCodeHandlers = (NSMutableDictionary *)v174;

    v79->_anyBTLEAccessoryReachable = 0;
    v298[2](v298, v79);
    v176 = objc_claimAutoreleasedReturnValue();
    residentDeviceManager = v79->_residentDeviceManager;
    v79->_residentDeviceManager = (HMDResidentDeviceManager *)v176;

    if (!v39->_ownerUser && !isWatch())
    {
      v178 = objc_alloc_init(HMDSharedHomeUpdateHandler);
      sharedHomeUpdateHandler = v79->_sharedHomeUpdateHandler;
      v79->_sharedHomeUpdateHandler = v178;

      -[HMDSharedHomeUpdateHandler configureWithHome:](v79->_sharedHomeUpdateHandler, "configureWithHome:", v79);
    }
    v299[2](v299, v79);
    v180 = objc_claimAutoreleasedReturnValue();
    administratorHandler = v79->_administratorHandler;
    v79->_administratorHandler = (HMDHomeAdministratorHandler *)v180;

    v182 = [HMDHomeMediaSystemHandler alloc];
    v183 = -[HMDHomeMediaSystemHandler initWithMediaSystems:](v182, "initWithMediaSystems:", MEMORY[0x1E0C9AA60]);
    mediaSystemController = v79->_mediaSystemController;
    v79->_mediaSystemController = (HMDHomeMediaSystemHandler *)v183;

    v79->_automaticSoftwareUpdateEnabled = 1;
    v79->_automaticThirdPartyAccessorySoftwareUpdateEnabled = 0;
    v79->_protectionMode = 0;
    v79->_networkRouterSupportDisableReason = 0;
    v79->_networkRouterSupport = -[HMDHome deriveNetworkRouterSupport:](v79, "deriveNetworkRouterSupport:", 0);
    v79->_mediaPeerToPeerEnabled = 0;
    v79->_soundCheckEnabled = 1;
    objc_storeStrong((id *)&v79->_notificationRegistry, a19);
    -[HMDNotificationRegistry configureWithHome:](v79->_notificationRegistry, "configureWithHome:", v79);
    if (objc_msgSend(*p_localCapabilitiesDataSource, "isResidentCapable"))
    {
      v185 = -[HMDResidentAppleMediaStateManager initWithDataSource:delegate:]([HMDResidentAppleMediaStateManager alloc], "initWithDataSource:delegate:", v79, v79);
      mediaStateManager = v79->_mediaStateManager;
      v79->_mediaStateManager = v185;

    }
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v187 = objc_claimAutoreleasedReturnValue();
    mediaSessions = v79->_mediaSessions;
    v79->_mediaSessions = (NSMutableArray *)v187;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v189 = objc_claimAutoreleasedReturnValue();
    mediaSessionStates = v79->_mediaSessionStates;
    v79->_mediaSessionStates = (NSMutableArray *)v189;

    objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
    v191 = objc_claimAutoreleasedReturnValue();
    connectionsDiscoveringSymptomsForNearbyDevices = v79->_connectionsDiscoveringSymptomsForNearbyDevices;
    v79->_connectionsDiscoveringSymptomsForNearbyDevices = (NSHashTable *)v191;

    if (!isWatch())
    {
      if (v311 && objc_msgSend(*p_localCapabilitiesDataSource, "isResidentCapable"))
      {
        v193 = objc_alloc_init(HMDHomePresenceMonitor);
        presenceMonitor = v79->_presenceMonitor;
        v79->_presenceMonitor = v193;

        v195 = objc_alloc_init(HMDHomePeriodicReader);
        periodicReader = v79->_periodicReader;
        v79->_periodicReader = v195;

      }
      v197 = objc_alloc_init(HMDUserPresenceFeeder);
      presenceFeeder = v79->_presenceFeeder;
      v79->_presenceFeeder = v197;

    }
    v199 = [HMDPredicateUtilities alloc];
    -[HMDHome name](v79, "name");
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    v201 = -[HMDPredicateUtilities initWithHome:logIdentifier:](v199, "initWithHome:logIdentifier:", v79, v200);
    predicateUtility = v79->_predicateUtility;
    v79->_predicateUtility = (HMDPredicateUtilities *)v201;

    v203 = -[HMDMediaActionRouter initWithDataSource:]([HMDMediaActionRouter alloc], "initWithDataSource:", v79);
    mediaActionRouter = v79->_mediaActionRouter;
    v79->_mediaActionRouter = v203;

    v79->_multiUserEnabled = 1;
    v79->_hasAnyUserAcknowledgedCameraRecordingOnboarding = 0;
    v205 = [HMDAccessoryNetworkProtectionGroupRegistry alloc];
    -[HMDHome notificationCenter](v79, "notificationCenter");
    v206 = (void *)objc_claimAutoreleasedReturnValue();
    v207 = -[HMDAccessoryNetworkProtectionGroupRegistry initWithHome:notificationCenter:](v205, "initWithHome:notificationCenter:", v79, v206);
    networkProtectionGroupRegistry = v79->_networkProtectionGroupRegistry;
    v79->_networkProtectionGroupRegistry = (HMDAccessoryNetworkProtectionGroupRegistry *)v207;

    v209 = [HMDResidentReachabilityNotificationManager alloc];
    v210 = objc_alloc_init(HMDResidentReachabilityContext);
    v211 = -[HMDResidentReachabilityNotificationManager initWithResidentReachabilityContext:workQueue:](v209, "initWithResidentReachabilityContext:workQueue:", v210, v39->_workQueue);
    reachabilityNotificationManager = v79->_reachabilityNotificationManager;
    v79->_reachabilityNotificationManager = (HMDResidentReachabilityNotificationManager *)v211;

    v213 = -[HMDAccessoryReachabilityChangedLogEventManager initWithHome:]([HMDAccessoryReachabilityChangedLogEventManager alloc], "initWithHome:", v79);
    reachabilityChangedLogEventManager = v79->_reachabilityChangedLogEventManager;
    v79->_reachabilityChangedLogEventManager = v213;

    v215 = -[HMDHomeNaturalLightingCurveWriter initWithHome:]([HMDHomeNaturalLightingCurveWriter alloc], "initWithHome:", v79);
    naturalLightingCurveWriter = v79->_naturalLightingCurveWriter;
    v79->_naturalLightingCurveWriter = v215;

    v217 = [HMDHAPAccessoryConnectionCoordinator alloc];
    -[HMDHome notificationCenter](v79, "notificationCenter");
    v218 = (void *)objc_claimAutoreleasedReturnValue();
    v219 = -[HMDHAPAccessoryConnectionCoordinator initWithHome:notificationCenter:](v217, "initWithHome:notificationCenter:", v79, v218);
    accessoryConnectionCoordinator = v79->_accessoryConnectionCoordinator;
    v79->_accessoryConnectionCoordinator = (HMDHAPAccessoryConnectionCoordinator *)v219;

    v221 = -[HMDHAPAccessoryReaderWriter initWithHome:]([HMDHAPAccessoryReaderWriter alloc], "initWithHome:", v79);
    accessoryReaderWriter = v79->_accessoryReaderWriter;
    v79->_accessoryReaderWriter = v221;

    v223 = -[HMDHomePersonDataManager initWithHome:workQueue:]([HMDHomePersonDataManager alloc], "initWithHome:workQueue:", v79, v39->_workQueue);
    personDataManager = v79->_personDataManager;
    v79->_personDataManager = v223;

    v225 = -[HMDHomeWalletKeyManager initWithUUID:workQueue:]([HMDHomeWalletKeyManager alloc], "initWithUUID:workQueue:", v39->_uuid, v39->_workQueue);
    walletKeyManager = v79->_walletKeyManager;
    v79->_walletKeyManager = v225;

    v227 = (void *)MEMORY[0x1D17BA0A0]();
    v228 = v79;
    HMFGetOSLogHandle();
    v229 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v230 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v319 = v230;
      _os_log_impl(&dword_1CD062000, v229, OS_LOG_TYPE_DEFAULT, "%{public}@Created wallet key manager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v227);
    v231 = -[HMDHomeNFCReaderKeyManager initWithUUID:workQueue:]([HMDHomeNFCReaderKeyManager alloc], "initWithUUID:workQueue:", v39->_uuid, v39->_workQueue);
    nfcReaderKeyManager = v228->_nfcReaderKeyManager;
    v228->_nfcReaderKeyManager = v231;

    v233 = (void *)MEMORY[0x1D17BA0A0]();
    v234 = v228;
    HMFGetOSLogHandle();
    v235 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v236 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v319 = v236;
      _os_log_impl(&dword_1CD062000, v235, OS_LOG_TYPE_DEFAULT, "%{public}@Created nfc reader key manager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v233);
    v234->_shouldEncodeHasOnboardedForWalletKey = 1;
    v234->_shouldEncodeNFCReaderKey = 1;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v237 = objc_claimAutoreleasedReturnValue();
    labelsByAccessCode = v234->_labelsByAccessCode;
    v234->_labelsByAccessCode = (NSMutableDictionary *)v237;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v239 = objc_claimAutoreleasedReturnValue();
    removedUserInfoByAccessCode = v234->_removedUserInfoByAccessCode;
    v234->_removedUserInfoByAccessCode = (NSMutableDictionary *)v239;

    v241 = [HMDAccessCodeManagerContext alloc];
    -[HMDHome workQueue](v234, "workQueue");
    v242 = (void *)objc_claimAutoreleasedReturnValue();
    v243 = -[HMDAccessCodeManagerContext initWithHome:workQueue:](v241, "initWithHome:workQueue:", v234, v242);

    v244 = -[HMDAccessCodeManager initWithContext:]([HMDAccessCodeManager alloc], "initWithContext:", v243);
    accessCodeManager = v234->_accessCodeManager;
    v234->_accessCodeManager = v244;

    v246 = -[HMDHomeLockNotificationManager initWithUUID:workQueue:]([HMDHomeLockNotificationManager alloc], "initWithUUID:workQueue:", v39->_uuid, v39->_workQueue);
    lockNotificationManager = v234->_lockNotificationManager;
    v234->_lockNotificationManager = v246;

    v248 = -[HMDCameraAnalysisStatePublisher initWithHome:]([HMDCameraAnalysisStatePublisher alloc], "initWithHome:", v234);
    analysisStatePublisher = v234->_analysisStatePublisher;
    v234->_analysisStatePublisher = v248;

    if (objc_msgSend(*p_localCapabilitiesDataSource, "isResidentCapable"))
    {
      v250 = -[HMDHomeRemoteEventAccessController initWithDataSource:]([HMDHomeRemoteEventAccessController alloc], "initWithDataSource:", v234);
      homeRemoteEventAccessController = v234->_homeRemoteEventAccessController;
      v234->_homeRemoteEventAccessController = v250;

    }
    v252 = (void *)MEMORY[0x1D17BA0A0]();
    v253 = v234;
    HMFGetOSLogHandle();
    v254 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v255 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v319 = v255;
      _os_log_impl(&dword_1CD062000, v254, OS_LOG_TYPE_DEFAULT, "%{public}@Creating setup metric dispatchers for media system and home theater", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v252);
    v256 = -[HMDMediaGroupSetupMetricDispatcher initWithDataSource:logEventSubmitter:]([HMDMediaGroupSetupMetricDispatcher alloc], "initWithDataSource:logEventSubmitter:", v253, v310);
    v257 = v253[189];
    v253[189] = v256;

    v258 = -[HMDMediaGroupSetupMetricDispatcher initWithDataSource:logEventSubmitter:]([HMDMediaGroupSetupMetricDispatcher alloc], "initWithDataSource:logEventSubmitter:", v253, v310);
    v259 = v253[190];
    v253[190] = v258;

    v260 = objc_alloc_init(HMDCHIPHomeStorage);
    v261 = v253[182];
    v253[182] = v260;

    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v262 = objc_claimAutoreleasedReturnValue();
      v263 = v253[119];
      v253[119] = (id)v262;

      v264 = objc_alloc(MEMORY[0x1E0D33288]);
      objc_msgSend(v253, "workQueue");
      v265 = (void *)objc_claimAutoreleasedReturnValue();
      v266 = objc_msgSend(v264, "initWithDelegate:queue:", v253, v265);
      v267 = v253[183];
      v253[183] = (id)v266;

      objc_msgSend(v253, "homeManager");
      v268 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v268, "accessoryBrowser");
      v269 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v269, "chipAccessoryServerBrowser");
      v270 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v270, "storage");
      v271 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v253[183], "setStorage:", v271);

      LODWORD(v269) = objc_msgSend(v311, "isCurrentUser");
      objc_msgSend(v253[183], "accessControl");
      v272 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v272, "setCurrentUserPrivilege:", v269);

      objc_msgSend(v253[183], "accessControl");
      v273 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v269) = objc_msgSend(v273, "currentUserPrivilege") == 0;

      if ((_DWORD)v269)
      {
        objc_initWeak((id *)buf, v253);
        v312[0] = MEMORY[0x1E0C809B0];
        v312[1] = 3221225472;
        v312[2] = __495__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_472;
        v312[3] = &unk_1E89A4240;
        objc_copyWeak(&v313, (id *)buf);
        objc_msgSend(v253[183], "accessControl");
        v274 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v274, "setPrivilegeGetter:", v312);

        objc_destroyWeak(&v313);
        objc_destroyWeak((id *)buf);
      }
    }
    v253[194] = 0;
    v253[195] = 0;

    objc_destroyWeak(&v315);
    objc_destroyWeak(&location);

  }
  return v39;
}

- (void)unconfigure
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome _deregisterStateHandler](self, "_deregisterStateHandler");
  -[HMDHome notificationCenter](self, "notificationCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObserver:", self);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deregisterReceiver:", self);

  -[HMDHome mediaGroupsAggregateConsumer](self, "mediaGroupsAggregateConsumer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "unconfigure");

  -[HMDHome accessCodeManager](self, "accessCodeManager");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "unconfigure");

}

- (void)dealloc
{
  objc_super v3;

  -[HMDHome unconfigure](self, "unconfigure");
  v3.receiver = self;
  v3.super_class = (Class)HMDHome;
  -[HMDHome dealloc](&v3, sel_dealloc);
}

- (NSString)debugDescription
{
  return (NSString *)-[HMDHome descriptionWithPointer:](self, "descriptionWithPointer:", 1);
}

- (id)dumpState
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  __CFString *v15;
  HMDHome *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  void *v30;
  void *v31;
  void *v32;
  const __CFString *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t k;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t m;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t n;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t ii;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t jj;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  HMDHome *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _QWORD v181[3];
  _QWORD v182[3];
  _BYTE v183[128];
  _BYTE v184[128];
  _BYTE v185[128];
  _BYTE v186[128];
  _BYTE v187[128];
  _BYTE v188[128];
  _BYTE v189[128];
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 12);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  v144 = (void *)MEMORY[0x1E0CB3940];
  -[HMDHome name](self, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v151 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v151, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome spiClientIdentifier](self, "spiClientIdentifier");
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v147, "UUIDString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome zoneID](self, "zoneID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled");
  HMFBooleanToString();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
  HMFBooleanToString();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome urlString](self, "urlString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v144, "stringWithFormat:", CFSTR("name: %@, uuid: %@, spiClientIdentifier: %@, zoneID: %@, multiUserEnabled: %@, acknowledgedCameraOnboarding: %@, assistantIdentifier: %@"), v3, v4, v5, v7, v8, v9, v10);
  v11 = objc_claimAutoreleasedReturnValue();

  v139 = (void *)v11;
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v11, *MEMORY[0x1E0D27F80]);
  -[HMDHome appData](self, "appData");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "dumpState");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v13, *MEMORY[0x1E0D27E60]);

  v145 = (void *)MEMORY[0x1E0CB3940];
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v148, "location");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    -[HMDHome homeLocationHandler](self, "homeLocationHandler");
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v142, "location");
    v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = CFSTR("Unknown");
  }
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v16 = self;
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "regionStateAtHome");
  HMDRegionStateString();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeLocationHandler](v16, "homeLocationHandler");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "regionStateNearbyHome");
  HMDRegionStateString();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v152 = v16;
  v21 = -[HMDHome atHomeLevel](v16, "atHomeLevel");
  if (v21 > 3)
    v22 = CFSTR("HMDAtHomeLevelNotAtHome");
  else
    v22 = off_1E89A55F8[v21];
  -[HMDHome homeLocation](v16, "homeLocation");
  HMStringFromHomeLocation();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeLocationHandler](v152, "homeLocationHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  HMDHomeLocationSourceToString(objc_msgSend(v24, "locationSource"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v145, "stringWithFormat:", CFSTR("Location: %@, At Home Region State: %@, Nearby Home Region State: %@, At Home Level: %@, State: %@, Source: %@"), v15, v18, v20, v22, v23, v25);
  v26 = objc_claimAutoreleasedReturnValue();

  if (v14)
  {

  }
  v27 = v150;
  v138 = (void *)v26;
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v26, *MEMORY[0x1E0D27F08]);
  v28 = (void *)MEMORY[0x1E0CB3940];
  v29 = v152;
  -[HMDHome minimumMediaUserPrivilege](v152, "minimumMediaUserPrivilege");
  HMUserPrivilegeToString();
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome isMediaPeerToPeerEnabled](v152, "isMediaPeerToPeerEnabled");
  HMFBooleanToString();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaPassword](v152, "mediaPassword");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = CFSTR("<set>");
  if (!v32)
    v33 = CFSTR("<null>");
  objc_msgSend(v28, "stringWithFormat:", CFSTR("Minimum Media User Privilege: %@, Media Peer to Peer Enabled: %@, has Media Password: %@"), v30, v31, v33);
  v34 = objc_claimAutoreleasedReturnValue();

  v137 = (void *)v34;
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v34, CFSTR("User Privilege"));
  -[HMDHome rooms](v152, "rooms");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = (void *)objc_msgSend(v35, "copy");

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v36, "count") + 1);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome roomForEntireHome](v152, "roomForEntireHome");
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  if (v38)
  {
    -[HMDHome roomForEntireHome](v152, "roomForEntireHome");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "dumpState");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "addObject:", v40);

  }
  v179 = 0u;
  v180 = 0u;
  v177 = 0u;
  v178 = 0u;
  v41 = v36;
  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v177, v189, 16);
  if (v42)
  {
    v43 = v42;
    v44 = *(_QWORD *)v178;
    do
    {
      for (i = 0; i != v43; ++i)
      {
        if (*(_QWORD *)v178 != v44)
          objc_enumerationMutation(v41);
        objc_msgSend(*(id *)(*((_QWORD *)&v177 + 1) + 8 * i), "dumpState");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "addObject:", v46);

      }
      v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v177, v189, 16);
    }
    while (v43);
  }

  if (objc_msgSend(v37, "count"))
    objc_msgSend(v150, "setObject:forKeyedSubscript:", v37, *MEMORY[0x1E0D27F50]);
  -[HMDHome zones](v152, "zones");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = (void *)objc_msgSend(v47, "copy");

  v149 = v48;
  if (objc_msgSend(v48, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v48, "count"));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v173 = 0u;
    v174 = 0u;
    v175 = 0u;
    v176 = 0u;
    v50 = v48;
    v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v173, v188, 16);
    if (v51)
    {
      v52 = v51;
      v53 = *(_QWORD *)v174;
      do
      {
        for (j = 0; j != v52; ++j)
        {
          if (*(_QWORD *)v174 != v53)
            objc_enumerationMutation(v50);
          objc_msgSend(*(id *)(*((_QWORD *)&v173 + 1) + 8 * j), "dumpState");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "addObject:", v55);

        }
        v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v173, v188, 16);
      }
      while (v52);
    }

    objc_msgSend(v150, "setObject:forKeyedSubscript:", v49, *MEMORY[0x1E0D27FA8]);
    v29 = v152;
  }
  -[HMDHome accessories](v29, "accessories");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = (void *)objc_msgSend(v56, "copy");

  v146 = v57;
  if (objc_msgSend(v57, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v57, "count"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v169 = 0u;
    v170 = 0u;
    v171 = 0u;
    v172 = 0u;
    v59 = v57;
    v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v169, v187, 16);
    if (v60)
    {
      v61 = v60;
      v62 = *(_QWORD *)v170;
      do
      {
        for (k = 0; k != v61; ++k)
        {
          if (*(_QWORD *)v170 != v62)
            objc_enumerationMutation(v59);
          v64 = *(void **)(*((_QWORD *)&v169 + 1) + 8 * k);
          v65 = (void *)MEMORY[0x1D17BA0A0]();
          objc_msgSend(v64, "dumpState");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "addObject:", v66);

          objc_autoreleasePoolPop(v65);
        }
        v61 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v169, v187, 16);
      }
      while (v61);
    }

    v27 = v150;
    objc_msgSend(v150, "setObject:forKeyedSubscript:", v58, *MEMORY[0x1E0D27E38]);

    v29 = v152;
  }
  -[HMDHome serviceGroups](v29, "serviceGroups");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = (void *)objc_msgSend(v67, "copy");

  v143 = v68;
  if (objc_msgSend(v68, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v68, "count"));
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    v168 = 0u;
    v70 = v68;
    v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v165, v186, 16);
    if (v71)
    {
      v72 = v71;
      v73 = *(_QWORD *)v166;
      do
      {
        for (m = 0; m != v72; ++m)
        {
          if (*(_QWORD *)v166 != v73)
            objc_enumerationMutation(v70);
          objc_msgSend(*(id *)(*((_QWORD *)&v165 + 1) + 8 * m), "dumpState");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "addObject:", v75);

        }
        v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v165, v186, 16);
      }
      while (v72);
    }

    objc_msgSend(v27, "setObject:forKeyedSubscript:", v69, *MEMORY[0x1E0D27F58]);
    v29 = v152;
  }
  -[HMDHome triggers](v29, "triggers");
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v141, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v141, "count"));
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v161 = 0u;
    v162 = 0u;
    v163 = 0u;
    v164 = 0u;
    v77 = v141;
    v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v161, v185, 16);
    if (v78)
    {
      v79 = v78;
      v80 = *(_QWORD *)v162;
      do
      {
        for (n = 0; n != v79; ++n)
        {
          if (*(_QWORD *)v162 != v80)
            objc_enumerationMutation(v77);
          objc_msgSend(*(id *)(*((_QWORD *)&v161 + 1) + 8 * n), "dumpState");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v76, "addObject:", v82);

        }
        v79 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v161, v185, 16);
      }
      while (v79);
    }

    objc_msgSend(v27, "setObject:forKeyedSubscript:", v76, *MEMORY[0x1E0D27F98]);
    v29 = v152;
  }
  -[HMDHome currentUser](v29, "currentUser");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "dumpState");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v84, *MEMORY[0x1E0D27EA0]);

  -[HMDHome users](v29, "users");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = (void *)objc_msgSend(v85, "copy");

  v140 = v86;
  if (objc_msgSend(v86, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v86, "count"));
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v157 = 0u;
    v158 = 0u;
    v159 = 0u;
    v160 = 0u;
    v88 = v86;
    v89 = objc_msgSend(v88, "countByEnumeratingWithState:objects:count:", &v157, v184, 16);
    if (v89)
    {
      v90 = v89;
      v91 = *(_QWORD *)v158;
      do
      {
        for (ii = 0; ii != v90; ++ii)
        {
          if (*(_QWORD *)v158 != v91)
            objc_enumerationMutation(v88);
          objc_msgSend(*(id *)(*((_QWORD *)&v157 + 1) + 8 * ii), "dumpState");
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v87, "addObject:", v93);

        }
        v90 = objc_msgSend(v88, "countByEnumeratingWithState:objects:count:", &v157, v184, 16);
      }
      while (v90);
    }

    objc_msgSend(v27, "setObject:forKeyedSubscript:", v87, *MEMORY[0x1E0D27FA0]);
    v29 = v152;
  }
  -[HMDHome removedUsers](v29, "removedUsers");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = (void *)objc_msgSend(v94, "copy");

  if (objc_msgSend(v95, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v95, "count"));
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v153 = 0u;
    v154 = 0u;
    v155 = 0u;
    v156 = 0u;
    v97 = v95;
    v98 = objc_msgSend(v97, "countByEnumeratingWithState:objects:count:", &v153, v183, 16);
    if (v98)
    {
      v99 = v98;
      v100 = *(_QWORD *)v154;
      do
      {
        for (jj = 0; jj != v99; ++jj)
        {
          if (*(_QWORD *)v154 != v100)
            objc_enumerationMutation(v97);
          objc_msgSend(*(id *)(*((_QWORD *)&v153 + 1) + 8 * jj), "user");
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v102, "dumpState");
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v96, "addObject:", v103);

        }
        v99 = objc_msgSend(v97, "countByEnumeratingWithState:objects:count:", &v153, v183, 16);
      }
      while (v99);
    }

    v27 = v150;
    objc_msgSend(v150, "setObject:forKeyedSubscript:", v96, *MEMORY[0x1E0D27F40]);

    v29 = v152;
  }
  v136 = v95;
  -[HMDHome residentDeviceManager](v29, "residentDeviceManager");
  v104 = (void *)objc_claimAutoreleasedReturnValue();

  if (v104)
  {
    -[HMDHome residentDeviceManager](v29, "residentDeviceManager");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "dumpState");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setObject:forKeyedSubscript:", v106, *MEMORY[0x1E0D27F48]);

  }
  v107 = (void *)MEMORY[0x1E0C99E08];
  v181[0] = CFSTR("Registered");
  -[HMDHome notificationRegistrations](v29, "notificationRegistrations");
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v108, "allObjects");
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  v182[0] = v109;
  v181[1] = CFSTR("Apple Media Registered");
  -[HMDHome notificationRegistrationsForAppleMediaAccessories](v29, "notificationRegistrationsForAppleMediaAccessories");
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v110, "allObjects");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  v182[1] = v111;
  v181[2] = CFSTR("Deregistered");
  -[HMDHome notificationDeregistrations](v29, "notificationDeregistrations");
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v112, "allObjects");
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  v182[2] = v113;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v182, v181, 3);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v107, "dictionaryWithDictionary:", v114);
  v115 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome notificationsUpdatedTime](v152, "notificationsUpdatedTime");
  v116 = (void *)objc_claimAutoreleasedReturnValue();

  if (v116)
  {
    -[HMDHome notificationsUpdatedTime](v152, "notificationsUpdatedTime");
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v117, "shortDescription");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v115, "setObject:forKey:", v118, CFSTR("UpdateTime"));

  }
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v115, *MEMORY[0x1E0D27ED8]);
  -[HMDHome pendingResponses](v152, "pendingResponses");
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v119, "description");
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v120, *MEMORY[0x1E0D27F28]);

  -[HMDHome sharedHomeUpdateHandler](v152, "sharedHomeUpdateHandler");
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v121, "dumpState");
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v122, *MEMORY[0x1E0D27F70]);

  -[HMDHome sharedHomeSourceVersion](v152, "sharedHomeSourceVersion");
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v123, "versionString");
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v124, *MEMORY[0x1E0D27F68]);

  v125 = (void *)MEMORY[0x1E0CB3940];
  -[HMDHome unfilteredThreadNetworkID](v152, "unfilteredThreadNetworkID");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v125, "stringWithFormat:", CFSTR("threadNetworkID=%@"), v126);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v127, CFSTR("ThreadNetwork"));

  -[HMDHome personManagerSettings](v152, "personManagerSettings");
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v128, "description");
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v129, CFSTR("Person Manager Settings"));

  -[HMDHome labelsByAccessCode](v152, "labelsByAccessCode");
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v130, "description");
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v131, CFSTR("Simple Label Access Codes"));

  -[HMDHome chipStorage](v152, "chipStorage");
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v132, "debugDictionaryRepresentation");
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v133, CFSTR("CHIP Home Storage"));

  -[HMDHome isResidentFirstAccessoryCommunicationEnabled](v152, "isResidentFirstAccessoryCommunicationEnabled");
  HMFBooleanToString();
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v150, "setObject:forKeyedSubscript:", v134, CFSTR("Is Resident First Accessory Communication Enabled"));

  return v150;
}

- (void)setName:(id)a3
{
  NSString *v4;
  NSString *name;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(v6, "hm_truncatedNameString");
  v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  name = self->_name;
  self->_name = v4;

  os_unfair_recursive_lock_unlock();
}

- (BOOL)isAnyBTLEAccessoryReachable
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_anyBTLEAccessoryReachable;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setAnyBTLEAccessoryReachable:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_anyBTLEAccessoryReachable = a3;
  os_unfair_recursive_lock_unlock();
}

- (id)allNewlyConfiguredAccessories
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[NSMutableDictionary allValues](self->_newlyConfiguredAccessories, "allValues", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "addObjectsFromArray:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7++));
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  v8 = (void *)objc_msgSend(v3, "copy");
  os_unfair_recursive_lock_unlock();
  return v8;
}

- (void)addNewlyConfiguredAccessories:(id)a3 addSessionIdentifier:(id)a4
{
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  v6 = a4;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableDictionary objectForKeyedSubscript:](self->_newlyConfiguredAccessories, "objectForKeyedSubscript:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](self->_newlyConfiguredAccessories, "setObject:forKeyedSubscript:", v7, v6);
  }
  objc_msgSend(v7, "addObjectsFromArray:", v8);

  os_unfair_recursive_lock_unlock();
}

- (void)addToCurrentTriggers:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((-[NSMutableArray containsObject:](self->_currentTriggers, "containsObject:", v4) & 1) == 0)
    -[NSMutableArray addObject:](self->_currentTriggers, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeFromCurrentTriggers:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[NSMutableArray containsObject:](self->_currentTriggers, "containsObject:", v4))
    -[NSMutableArray removeObject:](self->_currentTriggers, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (id)retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableDictionary objectForKeyedSubscript:](self->_newlyConfiguredAccessories, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  if (v6)
  {
    -[NSMutableDictionary removeObjectForKey:](self->_newlyConfiguredAccessories, "removeObjectForKey:", v4);
    v7 = v6;
  }
  else
  {
    v7 = (void *)MEMORY[0x1E0C9AA60];
  }
  v8 = v7;

  os_unfair_recursive_lock_unlock();
  return v8;
}

- (int64_t)protectionMode
{
  int64_t protectionMode;

  os_unfair_recursive_lock_lock_with_options();
  protectionMode = self->_protectionMode;
  os_unfair_recursive_lock_unlock();
  return protectionMode;
}

- (void)setProtectionMode:(int64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_protectionMode = a3;
  os_unfair_recursive_lock_unlock();
}

- (unint64_t)networkRouterSupportDisableReason
{
  unint64_t networkRouterSupportDisableReason;

  os_unfair_recursive_lock_lock_with_options();
  networkRouterSupportDisableReason = self->_networkRouterSupportDisableReason;
  os_unfair_recursive_lock_unlock();
  return networkRouterSupportDisableReason;
}

- (void)setNetworkRouterSupportDisableReason:(unint64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_networkRouterSupportDisableReason = a3;
  os_unfair_recursive_lock_unlock();
}

- (unint64_t)networkRouterSupport
{
  unint64_t networkRouterSupport;

  os_unfair_recursive_lock_lock_with_options();
  networkRouterSupport = self->_networkRouterSupport;
  os_unfair_recursive_lock_unlock();
  return networkRouterSupport;
}

- (void)setNetworkRouterSupport:(unint64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_networkRouterSupport = a3;
  os_unfair_recursive_lock_unlock();
}

- (HMDHomeKitVersion)minimumNetworkRouterSupportHomeKitVersion
{
  HMDHomeKitVersion *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_minimumNetworkRouterSupportHomeKitVersion;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMinimumNetworkRouterSupportHomeKitVersion:(id)a3
{
  HMDHomeKitVersion *v4;
  HMDHomeKitVersion *minimumNetworkRouterSupportHomeKitVersion;

  v4 = (HMDHomeKitVersion *)a3;
  os_unfair_recursive_lock_lock_with_options();
  minimumNetworkRouterSupportHomeKitVersion = self->_minimumNetworkRouterSupportHomeKitVersion;
  self->_minimumNetworkRouterSupportHomeKitVersion = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDHomeKitVersion)minHomeKitVersionForAccessoryNetworkProtectionChange
{
  HMDHomeKitVersion *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_minHomeKitVersionForAccessoryNetworkProtectionChange;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3
{
  HMDHomeKitVersion *v4;
  HMDHomeKitVersion *minHomeKitVersionForAccessoryNetworkProtectionChange;

  v4 = (HMDHomeKitVersion *)a3;
  os_unfair_recursive_lock_lock_with_options();
  minHomeKitVersionForAccessoryNetworkProtectionChange = self->_minHomeKitVersionForAccessoryNetworkProtectionChange;
  self->_minHomeKitVersionForAccessoryNetworkProtectionChange = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDNetworkRouterClientManager)routerClientManager
{
  HMDNetworkRouterClientManager *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_routerClientManager;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setRouterClientManager:(id)a3
{
  HMDNetworkRouterClientManager *v4;
  HMDNetworkRouterClientManager *routerClientManager;

  v4 = (HMDNetworkRouterClientManager *)a3;
  os_unfair_recursive_lock_lock_with_options();
  routerClientManager = self->_routerClientManager;
  self->_routerClientManager = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSUUID)activeNetworkRouterUUID
{
  NSUUID *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_activeNetworkRouterUUID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setActiveNetworkRouterUUID:(id)a3
{
  NSUUID *v4;
  NSUUID *activeNetworkRouterUUID;

  v4 = (NSUUID *)a3;
  os_unfair_recursive_lock_lock_with_options();
  activeNetworkRouterUUID = self->_activeNetworkRouterUUID;
  self->_activeNetworkRouterUUID = v4;

  os_unfair_recursive_lock_unlock();
}

- (BOOL)isActiveNetworkRouterInitialSetupNeeded
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_activeNetworkRouterInitialSetupNeeded;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setActiveNetworkRouterInitialSetupNeeded:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_activeNetworkRouterInitialSetupNeeded = a3;
  os_unfair_recursive_lock_unlock();
}

- (NSUUID)primaryNetworkRouterManagingDeviceUUID
{
  NSUUID *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_primaryNetworkRouterManagingDeviceUUID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setPrimaryNetworkRouterManagingDeviceUUID:(id)a3
{
  NSUUID *v4;
  NSUUID *primaryNetworkRouterManagingDeviceUUID;

  v4 = (NSUUID *)a3;
  os_unfair_recursive_lock_lock_with_options();
  primaryNetworkRouterManagingDeviceUUID = self->_primaryNetworkRouterManagingDeviceUUID;
  self->_primaryNetworkRouterManagingDeviceUUID = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)handleInactive:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __26__HMDHome_handleInactive___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)registerForAccessoryReachabilityNotifications:(BOOL)a3 registrationIdentifier:(id)a4
{
  id v6;
  NSObject *v7;
  _QWORD block[6];
  BOOL v9;

  v6 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __80__HMDHome_registerForAccessoryReachabilityNotifications_registrationIdentifier___block_invoke;
  block[3] = &unk_1E89C0898;
  v9 = a3;
  block[4] = self;
  block[5] = v6;
  dispatch_async(v7, block);

}

- (void)registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4
{
  id v6;
  NSObject *v7;
  _QWORD block[6];
  BOOL v9;

  v6 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __71__HMDHome_registerForMatterFabricNotifications_registrationIdentifier___block_invoke;
  block[3] = &unk_1E89C0898;
  v9 = a3;
  block[4] = self;
  block[5] = v6;
  dispatch_async(v7, block);

}

- (void)_registerForMatterFabricNotifications:(BOOL)a3 registrationIdentifier:(id)a4 clientBundleIdentifier:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _BOOL4 v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  BOOL v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMDHome *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v6 = a3;
  v44 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v10);

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    if (v9)
      v11 = v9;
    else
      v11 = v8;
    v12 = v11;
    if ((objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0CB8D08]) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0CB9608]) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0CB9DB0]) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0CB9310]) & 1) != 0
      || objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0CB9288]))
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543618;
        v41 = v16;
        v42 = 2112;
        v43 = v12;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEBUG, "%{public}@registerForMatterFabricNotifications - skip registering client %@", (uint8_t *)&v40, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
      goto LABEL_13;
    }
    -[HMDHome matterFabricEnabledClients](self, "matterFabricEnabledClients");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v6)
    {
      v19 = objc_msgSend(v17, "containsObject:", v8);

      if ((v19 & 1) != 0)
        goto LABEL_20;
      -[HMDHome matterFabricEnabledClients](self, "matterFabricEnabledClients");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v8);
    }
    else
    {
      objc_msgSend(v17, "removeObject:", v8);
    }

LABEL_20:
    -[HMDHome homeManager](self, "homeManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome matterFabricEnabledClients](self, "matterFabricEnabledClients");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "count");

    if (v22)
    {
      v23 = -[HMDHome currentMatterClientRegistration](self, "currentMatterClientRegistration");
      v24 = (void *)MEMORY[0x1D17BA0A0]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = v26;
      if (v23)
      {
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
LABEL_25:

          objc_autoreleasePoolPop(v24);
LABEL_35:

LABEL_13:
          goto LABEL_14;
        }
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome accessoryRemoteReachabilityEnabledClients](v25, "accessoryRemoteReachabilityEnabledClients");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543618;
        v41 = v28;
        v42 = 2112;
        v43 = v29;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Not updating matter fabric registration as we are registered and have the clients %@", (uint8_t *)&v40, 0x16u);

LABEL_24:
        goto LABEL_25;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543362;
        v41 = v38;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Updating matter fabric registration as we are not registered but have clients", (uint8_t *)&v40, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(v20, "chipDataSource");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "updateNotificationsEnabled:forHome:keepAliveOnly:", 1, v25, 1);

      v36 = v25;
      v37 = 1;
    }
    else
    {
      -[HMDHome accessoryRemoteReachabilityEnabledClients](self, "accessoryRemoteReachabilityEnabledClients");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v30, "count");

      if (v31)
        goto LABEL_35;
      v32 = -[HMDHome currentMatterClientRegistration](self, "currentMatterClientRegistration");
      v24 = (void *)MEMORY[0x1D17BA0A0]();
      v25 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      v27 = v33;
      if (!v32)
      {
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          goto LABEL_25;
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543362;
        v41 = v28;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Not updating matter fabric registration as we are not registered and have no clients", (uint8_t *)&v40, 0xCu);
        goto LABEL_24;
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543362;
        v41 = v34;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Updating matter fabric registration as we are registered but have no clients", (uint8_t *)&v40, 0xCu);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(v20, "chipDataSource");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "updateNotificationsEnabled:forHome:keepAliveOnly:", 0, v25, 1);

      v36 = v25;
      v37 = 0;
    }
    -[HMDHome setCurrentMatterClientRegistration:](v36, "setCurrentMatterClientRegistration:", v37);
    goto LABEL_35;
  }
LABEL_14:

}

- (void)handleAdaptiveClientDisconnected:(id)a3
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[5];
  id v10;

  objc_msgSend(a3, "object");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    objc_msgSend(v6, "bundleIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[HMDHome workQueue](self, "workQueue");
      v8 = objc_claimAutoreleasedReturnValue();
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __44__HMDHome_handleAdaptiveClientDisconnected___block_invoke;
      v9[3] = &unk_1E89C2328;
      v9[4] = self;
      v10 = v7;
      dispatch_async(v8, v9);

    }
  }

}

- (void)handleAccessoryReachabilityChangeNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __57__HMDHome_handleAccessoryReachabilityChangeNotification___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_cleanAddAccessoryOperations
{
  os_unfair_recursive_lock_lock_with_options();
  -[NSMapTable removeAllObjects](self->_addPendingAccessories, "removeAllObjects");
  -[NSMutableDictionary removeAllObjects](self->_addPendingAccessorySetupCodeHandlers, "removeAllObjects");
  -[NSMutableDictionary removeAllObjects](self->_addPendingAccessorySetupCodes, "removeAllObjects");
  -[NSMutableDictionary removeAllObjects](self->_addPendingAccessoryOnboardingSetupPayloadStrings, "removeAllObjects");
  os_unfair_recursive_lock_unlock();
}

- (void)_disableNotificationsForClient:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (v4)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v9;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Disabling notification for client %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome notificationRegistrations](v7, "notificationRegistrations");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v10, "containsObject:", v4) & 1) != 0)
    {
      -[HMDHome notificationDeregistrations](v7, "notificationDeregistrations");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "containsObject:", v4);

      if ((v12 & 1) == 0)
      {
        -[HMDHome addNotificationDeregistrationForApplicationBundleIdentifier:](v7, "addNotificationDeregistrationForApplicationBundleIdentifier:", v4);
        -[HMDHome _startHomeNotificationDeregistrationTimer](v7, "_startHomeNotificationDeregistrationTimer");
      }
    }
    else
    {

    }
    objc_msgSend(CFSTR("com.apple.HomeKit.client."), "stringByAppendingString:", v4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _disableDirectCharacteristicNotificationsForClient:](v7, "_disableDirectCharacteristicNotificationsForClient:", v13);

  }
}

- (void)_disableDirectCharacteristicNotificationsForClient:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;
  _QWORD block[6];
  _QWORD aBlock[4];
  NSObject *v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[3];
  char v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  v25 = 0;
  v5 = dispatch_group_create();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v21 != v9)
          objc_enumerationMutation(v7);
        v11 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (v13)
        {
          dispatch_group_enter(v5);
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke;
          aBlock[3] = &unk_1E89BD870;
          v19 = v24;
          v18 = v5;
          v14 = _Block_copy(aBlock);
          objc_msgSend(v13, "disableNotificationsForBundleID:completionHandler:", v4, v14);

        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v26, 16);
    }
    while (v8);
  }

  -[HMDHome workQueue](self, "workQueue");
  v15 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke_2;
  block[3] = &unk_1E89C0800;
  block[4] = self;
  block[5] = v24;
  dispatch_group_notify(v5, v15, block);

  _Block_object_dispose(v24, 8);
}

- (void)_startHomeNotificationDeregistrationTimer
{
  void *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome disableNotificationTimer](v5, "disableNotificationTimer");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v7;
      v23 = 2112;
      v24 = v8;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Kicking notification disable timer: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHome disableNotificationTimer](v5, "disableNotificationTimer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "kick");

  }
  else
  {
    v10 = objc_alloc(MEMORY[0x1E0D286C8]);
    v11 = (void *)objc_msgSend(v10, "initWithTimeInterval:options:", 1, *(double *)&disableNotificationsDeferPeriod);
    -[HMDHome setDisableNotificationTimer:](self, "setDisableNotificationTimer:", v11);

    -[HMDHome workQueue](self, "workQueue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setDelegateQueue:", v12);

    -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setDelegate:", self);

    -[HMDHome disableNotificationTimer](self, "disableNotificationTimer");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "resume");

    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome disableNotificationTimer](v17, "disableNotificationTimer");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v19;
      v23 = 2112;
      v24 = v20;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Started notification disable timer: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
  }
}

- (void)__handleProcessStateChange:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  unint64_t v12;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  HMDHome *v21;

  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    objc_msgSend(v4, "userInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("state"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v10 = v9;
    else
      v10 = 0;
    v11 = v10;

    v12 = objc_msgSend(v11, "unsignedIntegerValue");
    if (v12 <= 4 && ((1 << v12) & 0x1A) != 0)
    {
      -[HMDHome workQueue](self, "workQueue");
      v14 = objc_claimAutoreleasedReturnValue();
      v16 = MEMORY[0x1E0C809B0];
      v17 = 3221225472;
      v18 = __38__HMDHome___handleProcessStateChange___block_invoke;
      v19 = &unk_1E89C2328;
      v20 = v7;
      v21 = self;
      dispatch_async(v14, &v16);

    }
    -[HMDHome hapAccessories](self, "hapAccessories", v16, v17, v18, v19);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_515);

  }
}

- (void)computeBridgedAccessoriesForAllBridges
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  BOOL v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessories](self, "accessories");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v34 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        objc_msgSend(v11, "bridge");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = v12;
        if (v12)
        {
          objc_msgSend(v12, "uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "hmf_mutableSetForKey:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v15)
          {
            objc_msgSend(MEMORY[0x1E0C99E20], "set");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "uuid");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "setObject:forKey:", v15, v16);

          }
          objc_msgSend(v9, "uuid");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "addObject:", v17);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v6);
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v18 = v3;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v30;
    do
    {
      for (j = 0; j != v20; ++j)
      {
        if (*(_QWORD *)v30 != v21)
          objc_enumerationMutation(v18);
        v23 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * j);
        objc_msgSend(v18, "hmf_mutableSetForKey:", v23, (_QWORD)v29);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "hmf_firstObjectWithUUID:", v23);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v26 = v25;
        else
          v26 = 0;
        v27 = v26;

        if (v27)
          v28 = v24 == 0;
        else
          v28 = 1;
        if (!v28)
          objc_msgSend(v27, "setIdentifiersForBridgedAccessories:", v24);

      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    }
    while (v20);
  }

}

- (id)filterBuiltinActionSets:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  +[HMDHome getBuiltinActionSets](HMDHome, "getBuiltinActionSets");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allKeys");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = v3;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v12, "type", (_QWORD)v16);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v5, "containsObject:", v13);

        if (v14)
          objc_msgSend(v6, "addObject:", v12);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v9);
  }

  return v6;
}

- (void)updateActionSetExecutionDates:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  -[HMDHome actionSets](self, "actionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v28 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend(v10, "uuid");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "actionSetWithUUID:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v12, "lastExecutionDate");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setLastExecutionDate:", v13);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v7);
  }

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v24;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v24 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
        objc_msgSend(v19, "uuid");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "triggerOwnedActionSetWithUUID:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v21, "lastExecutionDate");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "setLastExecutionDate:", v22);

      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v16);
  }

}

- (id)createActionSetWithName:(id)a3 uuid:(id)a4 type:(id)a5
{
  id v8;
  id v9;
  id v10;
  HMDActionSet *v11;
  void *v12;
  HMDActionSet *v13;
  void *v14;
  void *v15;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = [HMDActionSet alloc];
  -[HMDHome workQueue](self, "workQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDActionSet initWithName:uuid:type:home:queue:](v11, "initWithName:uuid:type:home:queue:", v10, v9, v8, self, v12);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDActionSet configure:messageDispatcher:queue:](v13, "configure:messageDispatcher:queue:", self, v14, v15);

  return v13;
}

- (id)_createBuiltinActionSets
{
  void *v3;
  id v4;
  __int128 v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  HMDHome *v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHome getBuiltinActionSets](HMDHome, "getBuiltinActionSets");
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v26;
    *(_QWORD *)&v5 = 138543874;
    v20 = v5;
    v21 = v4;
    do
    {
      for (i = 0; i != v24; ++i)
      {
        if (*(_QWORD *)v26 != v23)
          objc_enumerationMutation(v4);
        v7 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(v4, "objectForKeyedSubscript:", v7, v20);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HMDLocalizedStringForKey(v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome addName:](self, "addName:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)MEMORY[0x1D17BA0A0]();
          v12 = self;
          HMFGetOSLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v22 = v11;
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome name](v12, "name");
            v15 = self;
            v16 = v3;
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v20;
            v30 = v14;
            v31 = 2112;
            v32 = v9;
            v33 = 2112;
            v34 = v17;
            _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Could not add builtin actionSet '%@' to home '%@' namespace", buf, 0x20u);

            v3 = v16;
            self = v15;
            v4 = v21;

            v11 = v22;
          }

          objc_autoreleasePoolPop(v11);
        }
        -[HMDHome createActionSetWithName:uuid:type:](self, "createActionSetWithName:uuid:type:", v9, 0, v7);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v18);

      }
      v24 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
    }
    while (v24);
  }

  return v3;
}

- (void)__addMediaSession:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v4 = a3;
  if (v4)
  {
    v7 = v4;
    -[HMDHome notificationRegistrations](self, "notificationRegistrations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");

    if (v6)
      objc_msgSend(v7, "registerForSessionUpdates:", 1);
    -[HMDHome addMediaSession:](self, "addMediaSession:", v7);
    v4 = v7;
  }

}

- (id)_addMediaSessionForCurrentAccessory:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  objc_msgSend(v6, "mediaProfile");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(v4, "identifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDMediaSession sessionForCurrentAccessoryWithSessionIdentifier:mediaProfile:](HMDMediaSession, "sessionForCurrentAccessoryWithSessionIdentifier:mediaProfile:", v8, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v9, "state");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome addMediaSessionState:](self, "addMediaSessionState:", v10);

      -[HMDHome __addMediaSession:](self, "__addMediaSession:", v9);
      objc_msgSend(v4, "updateMediaSession:", v9);
    }
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Current accessory '%@' not an Apple media accessory or no media profile", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v9 = 0;
  }

  return v9;
}

- (id)_createMediaSessionWithEndpoint:(id)a3
{
  id v4;
  void *v5;
  HMDMediaSessionState *v6;
  HMDMediaSession *v7;
  void *v8;
  HMDMediaSession *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "sessionIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHome mediaSessionStateWithIdentifier:](self, "mediaSessionStateWithIdentifier:", v5);
    v6 = (HMDMediaSessionState *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v6 = -[HMDMediaSessionState initWithSessionIdentifier:]([HMDMediaSessionState alloc], "initWithSessionIdentifier:", v5);
      -[HMDHome addMediaSessionState:](self, "addMediaSessionState:", v6);
    }
    v7 = [HMDMediaSession alloc];
    objc_msgSend(MEMORY[0x1E0C99D20], "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDMediaSession initWithEndpoint:mediaProfiles:state:](v7, "initWithEndpoint:mediaProfiles:state:", v4, v8, v6);

    -[HMDHome __addMediaSession:](self, "__addMediaSession:", v9);
  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v13;
      v17 = 2112;
      v18 = v4;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Cannot create a mediaSession with nil sessionIdentifier for endpoint %@", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v9 = 0;
  }

  return v9;
}

- (void)_removeMediaSessionWithIdentifier:(id)a3
{
  void *v4;
  id v5;

  -[HMDHome mediaSessionWithIdentifier:](self, "mediaSessionWithIdentifier:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "registerForSessionUpdates:", 0);
    -[HMDHome removeMediaSession:](self, "removeMediaSession:", v5);
    v4 = v5;
  }

}

- (void)_addUserToIdentityRegistry:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  objc_msgSend(v12, "userID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v12;
  if (v3)
  {
    objc_msgSend(v12, "pairingIdentity");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = v12;
    if (v5)
    {
      v6 = v12;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v7 = v6;
      else
        v7 = 0;
      v8 = v7;

      if (v8)
      {
        objc_msgSend(v8, "device");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "pairingIdentity");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "registerIdentity:device:object:", v11, v9, v6);
LABEL_11:

        }
      }
      else
      {
        objc_msgSend(v6, "account");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "pairingIdentity");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "registerIdentity:account:object:", v11, v9, v6);
          goto LABEL_11;
        }
      }

      v4 = v12;
    }
  }

}

- (BOOL)watchSkipVersionCheck
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_watchSkipVersionCheck;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setWatchSkipVersionCheck:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_watchSkipVersionCheck = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)setBackingStore:(id)a3
{
  HMDBackingStore *v4;
  HMDBackingStore *backingStore;

  v4 = (HMDBackingStore *)a3;
  os_unfair_recursive_lock_lock_with_options();
  backingStore = self->_backingStore;
  self->_backingStore = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)setupBackingStore
{
  uint64_t v3;
  void *v4;
  void *v5;
  HMDBackingStore *v6;
  void *v7;
  HMDBackingStore *v8;
  id v9;

  -[HMDHome uuid](self, "uuid");
  v3 = objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)v3;
    -[HMDHome backingStore](self, "backingStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      v6 = [HMDBackingStore alloc];
      -[HMDHome uuid](self, "uuid");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = -[HMDBackingStore initWithUUID:home:](v6, "initWithUUID:home:", v7, self);
      -[HMDHome setBackingStore:](self, "setBackingStore:", v8);

      -[HMDHome backingStore](self, "backingStore");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setDelegate:", self);

    }
  }
}

- (void)_setupActiveNetworkRouterAccessory:(id)a3 existingRouterAccessories:(id)a4
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  HMDHome *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v51;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v51 != v11)
          objc_enumerationMutation(v8);
        v13 = *(id *)(*((_QWORD *)&v50 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v14 = v13;
        else
          v14 = 0;
        v15 = v14;

        if (objc_msgSend(v15, "isPrimary"))
        {
          objc_msgSend(v15, "networkRouterController");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            v41 = v8;
            v42 = v7;
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v17 = v7;
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
            v19 = v15;
            v45 = v15;
            if (v18)
            {
              v20 = v18;
              v21 = *(_QWORD *)v47;
              v43 = v17;
              v44 = *(_QWORD *)v47;
              do
              {
                for (j = 0; j != v20; ++j)
                {
                  if (*(_QWORD *)v47 != v21)
                    objc_enumerationMutation(v17);
                  v23 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
                  if ((objc_msgSend(v23, "isEqual:", v19, v41, v42) & 1) == 0)
                  {
                    v24 = (void *)MEMORY[0x1D17BA0A0]();
                    v25 = self;
                    HMFGetOSLogHandle();
                    v26 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v27 = self;
                      v28 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v23, "shortDescription");
                      v29 = v20;
                      v30 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v19, "shortDescription");
                      v31 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v55 = v28;
                      v56 = 2112;
                      v57 = v30;
                      v58 = 2112;
                      v59 = v31;
                      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Removing existing Wi-Fi router accessory '%@' while adding a new Wi-Fi router accessory '%@'", buf, 0x20u);

                      v19 = v45;
                      v20 = v29;

                      self = v27;
                      v17 = v43;
                      v21 = v44;
                    }

                    objc_autoreleasePoolPop(v24);
                    -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v25, v23, 1, 0);
                  }
                }
                v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v46, v60, 16);
              }
              while (v20);
            }

            objc_msgSend(v19, "uuid");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome activeNetworkRouterUUID](self, "activeNetworkRouterUUID");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = objc_msgSend(v32, "isEqual:", v33);

            if ((v34 & 1) != 0)
            {
              -[HMDHome _evaluateNetworkProtectionAndRouterManagement](self, "_evaluateNetworkProtectionAndRouterManagement");
              v8 = v41;
              v7 = v42;
              v35 = v45;
            }
            else
            {
              v36 = (void *)MEMORY[0x1D17BA0A0]();
              v37 = self;
              HMFGetOSLogHandle();
              v38 = objc_claimAutoreleasedReturnValue();
              v8 = v41;
              v7 = v42;
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v45, "shortDescription");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v55 = v39;
                v56 = 2112;
                v57 = v40;
                _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_INFO, "%{public}@Adding transaction to set %@ as active network router accessory", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v36);
              v35 = v45;
              -[HMDHome _addTransactionForActiveNetworkRouterAccessory:isReplacement:](v37, "_addTransactionForActiveNetworkRouterAccessory:isReplacement:", v45, objc_msgSend(v17, "count") != 0);
            }

            goto LABEL_31;
          }
        }

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_31:

}

- (BOOL)configureWithHomeManager:(id)a3 accessoriesPresent:(id)a4 uncommittedTransactions:(id)a5 source:(unint64_t)a6
{
  uint64_t v9;
  double v10;
  double v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  HMMLogEventSubmitting *logEventSubmitter;
  void *v30;
  uint64_t v31;
  HMDLogEventDailyScheduler *dailyScheduler;
  HMDHomeMetricsDispatcherFactory *v33;
  NSUUID *uuid;
  void *v35;
  uint64_t v36;
  HMDHomeMetricsDispatcher *metricsDispatcher;
  uint64_t v38;
  HMFTimer *homeLocationTimer;
  void *v40;
  void *v41;
  uint64_t v42;
  HMFTimer *accessoryReachabilityUpdatesTimer;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  unsigned int v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  id v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t i;
  void *v78;
  uint64_t v79;
  double v80;
  double v81;
  void *v82;
  HMDHome *v83;
  NSObject *v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t j;
  void *v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  uint64_t v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  void *v110;
  id v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  HMDHome *v117;
  NSObject *v118;
  id v119;
  void *v120;
  double v121;
  id v122;
  void *v123;
  void *v124;
  void *v125;
  id v126;
  void *v127;
  double v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  double v136;
  double v137;
  void *v138;
  HMDHome *v139;
  NSObject *v140;
  id v141;
  void *v142;
  void *v143;
  id v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t k;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  id v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t m;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  id v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t n;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  id v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t ii;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  char v184;
  void *v185;
  id v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t jj;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  _BOOL4 v197;
  _BOOL4 v198;
  void *v199;
  id *v200;
  NSObject *v201;
  _BOOL4 v202;
  id v203;
  uint64_t v204;
  void *v205;
  void *v206;
  id v207;
  const __CFString *v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t kk;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  _BOOL4 v220;
  void *v221;
  void *v222;
  void *v223;
  HMDHome *v224;
  NSObject *v225;
  id v226;
  __CFString *v227;
  void *v228;
  HMDHome *v229;
  NSObject *v230;
  id v231;
  void *v232;
  double v233;
  id v234;
  void *v235;
  void *v236;
  id v237;
  void *v238;
  double v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  uint64_t v245;
  double v246;
  double v247;
  void *v248;
  HMDHome *v249;
  NSObject *v250;
  id v251;
  void *v252;
  void *v253;
  id v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t mm;
  void *v263;
  uint64_t v264;
  uint64_t nn;
  __CFString *v266;
  void *v267;
  char v268;
  char v269;
  void *v270;
  void *v271;
  HMDHome *v272;
  NSObject *v273;
  id v274;
  void *v275;
  void *v276;
  HMDResidentUser *v277;
  void *v278;
  HMDResidentUser *v279;
  void *v280;
  dispatch_time_t v281;
  NSObject *v282;
  void *v283;
  HMDHome *v284;
  NSObject *v285;
  id v286;
  void *v287;
  double v288;
  id v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  id v294;
  void *v295;
  double v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  id v309;
  void *v310;
  id v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  HMEDelegatingEventRouter *serverDelegatingEventRouter;
  HMDHomeRemoteEventRouterClientController *v316;
  void *v317;
  void *v318;
  void *v319;
  HMDHomeRemoteEventRouterClientController *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  NSObject *v328;
  void *v329;
  uint64_t v330;
  uint64_t i1;
  void *v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t i2;
  void *v337;
  void *v338;
  uint64_t v339;
  double v340;
  double v341;
  void *v342;
  HMDHome *v343;
  NSObject *v344;
  id v345;
  void *v346;
  void *v347;
  id v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  void *v353;
  void *v354;
  HMDHome *v355;
  NSObject *v356;
  id v357;
  __CFString *v358;
  HMDMediaActionRouter *v359;
  void *v360;
  HMDUserActionPredictionManager *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  void *v368;
  void *v369;
  void *v370;
  HMDAppleMediaAccessoryMessageRouter *v371;
  void *v372;
  void *v373;
  HMDAppleMediaAccessoryMessageRouter *v374;
  void *v375;
  HMDDelegatingMessageRouter *v376;
  void *v377;
  void *v378;
  void *v379;
  void *v380;
  HMDDelegatingMessageRouter *v381;
  void *v382;
  void *v383;
  void *v384;
  NSObject *v385;
  void *v386;
  HMDHome *v387;
  NSObject *v388;
  id v389;
  void *v390;
  double v391;
  id v392;
  void *v393;
  void *v394;
  id v395;
  void *v396;
  double v397;
  void *v398;
  void *v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  void *v404;
  _QWORD *v405;
  NSObject *v406;
  void *v407;
  double v408;
  id v409;
  void *v410;
  id v411;
  void *v412;
  void *v413;
  void *v414;
  void *v415;
  void *v416;
  void *v417;
  void *v418;
  id v419;
  void *v420;
  double v421;
  void *v422;
  void *v423;
  void *v424;
  void *v425;
  void *v426;
  void *v427;
  void *v428;
  void *v429;
  void *v430;
  void *v431;
  void *v432;
  id v434;
  id v435;
  id v436;
  id v437;
  void *v438;
  void *v439;
  id v440;
  void *v441;
  id v442;
  id v443;
  id obj;
  id obja;
  void *v446;
  id v447;
  id v448;
  uint64_t v450;
  uint64_t v451;
  id v452;
  void *v453;
  id v454;
  NSObject *group;
  uint64_t v456;
  char v457;
  _QWORD v458[5];
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  _QWORD v467[4];
  id v468;
  id v469;
  id v470;
  id v471;
  id location;
  _QWORD block[6];
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  uint8_t buf[4];
  id v515;
  __int16 v516;
  const __CFString *v517;
  __int16 v518;
  const __CFString *v519;
  __int16 v520;
  const __CFString *v521;
  __int16 v522;
  const __CFString *v523;
  __int16 v524;
  const __CFString *v525;
  __int16 v526;
  id v527;
  __int16 v528;
  const __CFString *v529;
  __int16 v530;
  id v531;
  __int16 v532;
  const __CFString *v533;
  __int16 v534;
  id v535;
  __int16 v536;
  const __CFString *v537;
  __int16 v538;
  void *v539;
  __int16 v540;
  const __CFString *v541;
  __int16 v542;
  void *v543;
  _QWORD v544[2];
  _BYTE v545[128];
  _BYTE v546[128];
  _BYTE v547[128];
  _BYTE v548[128];
  _BYTE v549[128];
  _BYTE v550[128];
  _BYTE v551[128];
  _BYTE v552[128];
  _BYTE v553[128];
  _BYTE v554[128];
  _BYTE v555[128];
  _BYTE v556[128];
  uint64_t v557;

  v557 = *MEMORY[0x1E0C80C00];
  v440 = a3;
  v454 = a4;
  v435 = a5;
  v9 = HMFUptime();
  v11 = v10;
  v12 = (void *)MEMORY[0x1D17BA0A0](v9);
  v13 = self;
  HMFGetOSLogHandle();
  v14 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v13, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome locationServicesEnabled](v13, "locationServicesEnabled");
    HMFBooleanToString();
    v17 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v515 = v15;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configuring home with location service enabled");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("start");
    v524 = 2114;
    v525 = CFSTR("homeUUID");
    v526 = 2112;
    v527 = v16;
    v528 = 2114;
    v529 = CFSTR("status");
    v530 = 2112;
    v531 = v17;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v12);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_alloc(MEMORY[0x1E0D334C8]);
  -[HMDHome uuid](v13, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome locationServicesEnabled](v13, "locationServicesEnabled");
  HMFBooleanToString();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)objc_msgSend(v19, "initWithTag:data:", CFSTR("homeConfigureStart"), v22, CFSTR("state"), CFSTR("start"), CFSTR("homeUUID"), v20, CFSTR("status"), v21);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "submitTaggedEvent:processorList:", v23, v24);

  -[HMDHome setHomeManager:](v13, "setHomeManager:", v440);
  objc_msgSend(v440, "messageDispatcher");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setMsgDispatcher:](v13, "setMsgDispatcher:", v25);

  objc_msgSend(v440, "accessoryBrowser");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setAccessoryBrowser:](v13, "setAccessoryBrowser:", v26);

  objc_msgSend(v440, "metricsManager");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "logEventSubmitter");
  v28 = objc_claimAutoreleasedReturnValue();
  logEventSubmitter = v13->_logEventSubmitter;
  v13->_logEventSubmitter = (HMMLogEventSubmitting *)v28;

  objc_msgSend(v440, "metricsManager");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "dailyScheduler");
  v31 = objc_claimAutoreleasedReturnValue();
  dailyScheduler = v13->_dailyScheduler;
  v13->_dailyScheduler = (HMDLogEventDailyScheduler *)v31;

  if (!v13->_metricsDispatcher)
  {
    v33 = objc_alloc_init(HMDHomeMetricsDispatcherFactory);
    uuid = v13->_uuid;
    -[HMDHome logEventSubmitter](v13, "logEventSubmitter");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeMetricsDispatcherFactory createHomeMetricsDispatcherWithIdentifier:logEventSubmitter:](v33, "createHomeMetricsDispatcherWithIdentifier:logEventSubmitter:", uuid, v35);
    v36 = objc_claimAutoreleasedReturnValue();
    metricsDispatcher = v13->_metricsDispatcher;
    v13->_metricsDispatcher = (HMDHomeMetricsDispatcher *)v36;

  }
  v38 = objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 8, 7.0);
  homeLocationTimer = v13->_homeLocationTimer;
  v13->_homeLocationTimer = (HMFTimer *)v38;

  -[HMFTimer setDelegateQueue:](v13->_homeLocationTimer, "setDelegateQueue:", v13->_workQueue);
  -[HMFTimer setDelegate:](v13->_homeLocationTimer, "setDelegate:", v13);
  objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "preferenceForKey:", CFSTR("accessoryReachabilityCoalescePeriod"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "numberValue");
  v439 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v40) = objc_msgSend(v439, "unsignedIntValue");
  v42 = objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 0, (double)v40);
  accessoryReachabilityUpdatesTimer = v13->_accessoryReachabilityUpdatesTimer;
  v13->_accessoryReachabilityUpdatesTimer = (HMFTimer *)v42;

  -[HMFTimer setDelegate:](v13->_accessoryReachabilityUpdatesTimer, "setDelegate:", v13);
  -[HMFTimer setDelegateQueue:](v13->_accessoryReachabilityUpdatesTimer, "setDelegateQueue:", v13->_workQueue);
  -[HMDHome roomForEntireHome](v13, "roomForEntireHome");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v13, "msgDispatcher");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v13, "workQueue");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "configure:queue:", v45, v46);

  -[HMDHome setOwnerUser:](v13, "setOwnerUser:", +[HMDHomeManager isThisDeviceAdminOfHome:](HMDHomeManager, "isThisDeviceAdminOfHome:", v13));
  -[HMDHome setupBackingStore](v13, "setupBackingStore");
  -[HMDHome periodicReader](v13, "periodicReader");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "configure:", v13);

  -[HMDHome presenceMonitor](v13, "presenceMonitor");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v13, "msgDispatcher");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "configure:messageDispatcher:", v13, v49);

  -[HMDHome presenceFeeder](v13, "presenceFeeder");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v13, "msgDispatcher");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "configure:messageDispatcher:", v13, v51);

  -[HMDHome homeLocationHandler](v13, "homeLocationHandler");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v13, "workQueue");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v13, "msgDispatcher");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "configure:queue:messageDispatcher:", v13, v53, v54);

  -[HMDHome homeReprovisionHandler](v13, "homeReprovisionHandler");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v13, "workQueue");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v13, "msgDispatcher");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v55, "configure:queue:messageDispatcher:", v13, v56, v57);

  -[HMDHome sharedHomeUpdateHandler](v13, "sharedHomeUpdateHandler");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "registerForMessages");

  -[HMDHome reachabilityChangedLogEventManager](v13, "reachabilityChangedLogEventManager");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "configure");

  -[HMDHome updateHomeLocation](v13, "updateHomeLocation");
  -[HMDHome residentDeviceManager](v13, "residentDeviceManager");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMessageDispatcher defaultDispatcher](HMDMessageDispatcher, "defaultDispatcher");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v60, "configureWithHome:messageDispatcher:", v13, v61);

  -[HMDHome residentDeviceManager](v13, "residentDeviceManager");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "setDelegate:", v13);

  -[HMDHome primaryResidentChangeMonitor](v13, "primaryResidentChangeMonitor");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "configureWithHome:", v13);

  -[HMDHome setResidentFirstAccessoryCommunicationEnabled:](v13, "setResidentFirstAccessoryCommunicationEnabled:", -[HMDHome shouldEnableResidentFirstAccessoryCommunication](v13, "shouldEnableResidentFirstAccessoryCommunication"));
  -[HMDHome _purgeResidentUsers](v13, "_purgeResidentUsers");
  if (-[HMDHome isOwnerUser](v13, "isOwnerUser"))
  {
    -[HMDHome primaryResident](v13, "primaryResident");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "device");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = objc_msgSend(v65, "isCurrentDevice");

    -[HMDHome accessoryBrowser](v13, "accessoryBrowser");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "setQOS:", v66);

  }
  -[HMDHome name](v13, "name");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = -[HMDHome addName:](v13, "addName:", v68);

  -[HMDHome roomForEntireHome](v13, "roomForEntireHome");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "name");
  v71 = objc_claimAutoreleasedReturnValue();
  v72 = -[HMDHome addName:](v13, "addName:", v71);

  -[HMDHome notificationRegistrations](v13, "notificationRegistrations");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v71) = objc_msgSend(v73, "count") == 0;

  if ((v71 & 1) == 0)
  {
    v512 = 0u;
    v513 = 0u;
    v510 = 0u;
    v511 = 0u;
    -[HMDHome mediaSessions](v13, "mediaSessions");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v510, v556, 16);
    if (v75)
    {
      v76 = *(_QWORD *)v511;
      do
      {
        for (i = 0; i != v75; ++i)
        {
          if (*(_QWORD *)v511 != v76)
            objc_enumerationMutation(v74);
          objc_msgSend(*(id *)(*((_QWORD *)&v510 + 1) + 8 * i), "registerForSessionUpdates:", 1);
        }
        v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v510, v556, 16);
      }
      while (v75);
    }

  }
  group = dispatch_group_create();
  -[HMDHome setBulletinNotificationsSupported:](v13, "setBulletinNotificationsSupported:", 1);
  -[HMDHome accessories](v13, "accessories");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v78, "count"));
  v446 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = HMFUptime();
  v81 = v80;
  v82 = (void *)MEMORY[0x1D17BA0A0](v79);
  v83 = v13;
  HMFGetOSLogHandle();
  v84 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v85 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v83, "uuid");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v515 = v85;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configuring accessories");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("homeConfigureAccessories");
    v524 = 2114;
    v525 = CFSTR("homeUUID");
    v526 = 2112;
    v527 = v86;
    _os_log_impl(&dword_1CD062000, v84, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v82);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = objc_alloc(MEMORY[0x1E0D334C8]);
  -[HMDHome uuid](v83, "uuid");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = (void *)objc_msgSend(v88, "initWithTag:data:", CFSTR("homeConfigureStart"), v90, CFSTR("state"), CFSTR("homeConfigureAccessories"), CFSTR("homeUUID"), v89);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v87, "submitTaggedEvent:processorList:", v91, v92);

  v508 = 0u;
  v509 = 0u;
  v506 = 0u;
  v507 = 0u;
  obj = v78;
  v93 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v506, v555, 16);
  if (v93)
  {
    v447 = 0;
    v456 = *(_QWORD *)v507;
    do
    {
      for (j = 0; j != v93; ++j)
      {
        if (*(_QWORD *)v507 != v456)
          objc_enumerationMutation(obj);
        v95 = *(void **)(*((_QWORD *)&v506 + 1) + 8 * j);
        v96 = (void *)MEMORY[0x1D17BA0A0]();
        v97 = v95;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v98 = v97;
        else
          v98 = 0;
        v99 = v98;

        objc_msgSend(v99, "setDataSource:", v83);
        v100 = v97;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v101 = v100;
        else
          v101 = 0;
        v102 = v101;

        if (v102)
        {
          if (objc_msgSend(v102, "isPrimary"))
          {
            objc_msgSend(v102, "identifier");
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            v104 = objc_msgSend(v102, "supportedTransports");
            objc_msgSend(v102, "setupHash");
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome _registerPairedAccessory:transports:setupHash:](v83, "_registerPairedAccessory:transports:setupHash:", v103, v104, v105);

          }
          objc_msgSend(v446, "addObject:", v102);
        }
        v106 = v100;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v107 = v106;
        else
          v107 = 0;
        v108 = v107;

        if (v108)
        {
          if (v99)
          {
            -[HMDHome capabilitiesAggregator](v83, "capabilitiesAggregator");
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v99, "uuid");
            v110 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v109, "didAddAccessory:", v110);

          }
          if (objc_msgSend(v99, "isCurrentAccessory"))
          {
            v111 = v99;

            v447 = v111;
          }
          objc_msgSend(v108, "identifier");
          v112 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _registerPairedAccessory:transports:setupHash:](v83, "_registerPairedAccessory:transports:setupHash:", v112, objc_msgSend(v108, "supportedTransports"), 0);

        }
        -[HMDHome msgDispatcher](v83, "msgDispatcher");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v106, "configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:", v83, v113, group, 1);

        objc_msgSend(v106, "uuid");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "UUIDString");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v454, "addObject:", v115);

        objc_autoreleasePoolPop(v96);
      }
      v93 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v506, v555, 16);
    }
    while (v93);
  }
  else
  {
    v447 = 0;
  }

  v116 = (void *)MEMORY[0x1D17BA0A0]();
  v117 = v83;
  HMFGetOSLogHandle();
  v118 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v119 = (id)objc_claimAutoreleasedReturnValue();
    v120 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v120, "stringWithFormat:", CFSTR("%.3f"), v121 - v81);
    v122 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v117, "uuid");
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(obj, "count"));
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545922;
    v515 = v119;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configured accessories");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("homeConfiguredAccessories");
    v524 = 2114;
    v525 = CFSTR("duration");
    v526 = 2112;
    v527 = v122;
    v528 = 2114;
    v529 = CFSTR("homeUUID");
    v530 = 2112;
    v531 = v123;
    v532 = 2114;
    v533 = CFSTR("accessoriesCount");
    v534 = 2112;
    v535 = v124;
    _os_log_impl(&dword_1CD062000, v118, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x70u);

  }
  objc_autoreleasePoolPop(v116);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  v126 = objc_alloc(MEMORY[0x1E0D334C8]);
  v127 = (void *)MEMORY[0x1E0CB3940];
  HMFUptime();
  objc_msgSend(v127, "stringWithFormat:", CFSTR("%.3f"), v128 - v81);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v117, "uuid");
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(obj, "count"));
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  v133 = (void *)objc_msgSend(v126, "initWithTag:data:", CFSTR("homeConfigureStart"), v132, CFSTR("state"), CFSTR("homeConfiguredAccessories"), CFSTR("duration"), v129, CFSTR("homeUUID"), v130, CFSTR("accessoriesCount"), v131);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v125, "submitTaggedEvent:processorList:", v133, v134);

  if (v447)
    -[HMDHome createCoordinationStateManagerForCurrentAccessory:](v117, "createCoordinationStateManagerForCurrentAccessory:", v447);
  v135 = HMFUptime();
  v137 = v136;
  v138 = (void *)MEMORY[0x1D17BA0A0](v135);
  v139 = v117;
  HMFGetOSLogHandle();
  v140 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v141 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v139, "uuid");
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v515 = v141;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configuring rooms, zones, groups, etc");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("homeConfigureProperties");
    v524 = 2114;
    v525 = CFSTR("homeUUID");
    v526 = 2112;
    v527 = v142;
    _os_log_impl(&dword_1CD062000, v140, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v138);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  v144 = objc_alloc(MEMORY[0x1E0D334C8]);
  -[HMDHome uuid](v139, "uuid");
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  v147 = (void *)objc_msgSend(v144, "initWithTag:data:", CFSTR("homeConfigureStart"), v146, CFSTR("state"), CFSTR("homeConfigureProperties"), CFSTR("homeUUID"), v145);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v143, "submitTaggedEvent:processorList:", v147, v148);

  v504 = 0u;
  v505 = 0u;
  v502 = 0u;
  v503 = 0u;
  -[HMDHome rooms](v139, "rooms");
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  v150 = objc_msgSend(v149, "countByEnumeratingWithState:objects:count:", &v502, v554, 16);
  if (v150)
  {
    v151 = *(_QWORD *)v503;
    do
    {
      for (k = 0; k != v150; ++k)
      {
        if (*(_QWORD *)v503 != v151)
          objc_enumerationMutation(v149);
        v153 = *(void **)(*((_QWORD *)&v502 + 1) + 8 * k);
        -[HMDHome msgDispatcher](v139, "msgDispatcher");
        v154 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v139, "workQueue");
        v155 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v153, "configure:queue:", v154, v155);

        objc_msgSend(v153, "name");
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        v157 = -[HMDHome addName:](v139, "addName:", v156);

      }
      v150 = objc_msgSend(v149, "countByEnumeratingWithState:objects:count:", &v502, v554, 16);
    }
    while (v150);
  }

  v500 = 0u;
  v501 = 0u;
  v498 = 0u;
  v499 = 0u;
  -[HMDHome zones](v139, "zones");
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  v159 = objc_msgSend(v158, "countByEnumeratingWithState:objects:count:", &v498, v553, 16);
  if (v159)
  {
    v160 = *(_QWORD *)v499;
    do
    {
      for (m = 0; m != v159; ++m)
      {
        if (*(_QWORD *)v499 != v160)
          objc_enumerationMutation(v158);
        v162 = *(void **)(*((_QWORD *)&v498 + 1) + 8 * m);
        -[HMDHome msgDispatcher](v139, "msgDispatcher");
        v163 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v139, "workQueue");
        v164 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v162, "configure:queue:", v163, v164);

        objc_msgSend(v162, "name");
        v165 = (void *)objc_claimAutoreleasedReturnValue();
        v166 = -[HMDHome addName:](v139, "addName:", v165);

      }
      v159 = objc_msgSend(v158, "countByEnumeratingWithState:objects:count:", &v498, v553, 16);
    }
    while (v159);
  }

  v496 = 0u;
  v497 = 0u;
  v494 = 0u;
  v495 = 0u;
  -[HMDHome serviceGroups](v139, "serviceGroups");
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  v168 = objc_msgSend(v167, "countByEnumeratingWithState:objects:count:", &v494, v552, 16);
  if (v168)
  {
    v169 = *(_QWORD *)v495;
    do
    {
      for (n = 0; n != v168; ++n)
      {
        if (*(_QWORD *)v495 != v169)
          objc_enumerationMutation(v167);
        v171 = *(void **)(*((_QWORD *)&v494 + 1) + 8 * n);
        -[HMDHome msgDispatcher](v139, "msgDispatcher");
        v172 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v139, "workQueue");
        v173 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v171, "configure:queue:", v172, v173);

        objc_msgSend(v171, "name");
        v174 = (void *)objc_claimAutoreleasedReturnValue();
        v175 = -[HMDHome addName:](v139, "addName:", v174);

      }
      v168 = objc_msgSend(v167, "countByEnumeratingWithState:objects:count:", &v494, v552, 16);
    }
    while (v168);
  }

  v492 = 0u;
  v493 = 0u;
  v490 = 0u;
  v491 = 0u;
  -[HMDHome actionSets](v139, "actionSets");
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  v177 = objc_msgSend(v176, "countByEnumeratingWithState:objects:count:", &v490, v551, 16);
  if (v177)
  {
    v457 = 0;
    v178 = *(_QWORD *)v491;
    do
    {
      for (ii = 0; ii != v177; ++ii)
      {
        if (*(_QWORD *)v491 != v178)
          objc_enumerationMutation(v176);
        v180 = *(void **)(*((_QWORD *)&v490 + 1) + 8 * ii);
        v181 = (void *)MEMORY[0x1D17BA0A0]();
        -[HMDHome msgDispatcher](v139, "msgDispatcher");
        v182 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v139, "workQueue");
        v183 = (void *)objc_claimAutoreleasedReturnValue();
        v184 = objc_msgSend(v180, "configure:messageDispatcher:queue:", v139, v182, v183);

        objc_msgSend(v180, "name");
        v185 = (void *)objc_claimAutoreleasedReturnValue();
        v186 = -[HMDHome addName:](v139, "addName:", v185);

        objc_autoreleasePoolPop(v181);
        v457 |= v184;
      }
      v177 = objc_msgSend(v176, "countByEnumeratingWithState:objects:count:", &v490, v551, 16);
    }
    while (v177);
  }
  else
  {
    v457 = 0;
  }

  v488 = 0u;
  v489 = 0u;
  v486 = 0u;
  v487 = 0u;
  -[HMDHome triggerOwnedActionSets](v139, "triggerOwnedActionSets");
  v187 = (void *)objc_claimAutoreleasedReturnValue();
  v188 = objc_msgSend(v187, "countByEnumeratingWithState:objects:count:", &v486, v550, 16);
  if (v188)
  {
    v189 = *(_QWORD *)v487;
    do
    {
      for (jj = 0; jj != v188; ++jj)
      {
        if (*(_QWORD *)v487 != v189)
          objc_enumerationMutation(v187);
        v191 = *(void **)(*((_QWORD *)&v486 + 1) + 8 * jj);
        v192 = (void *)MEMORY[0x1D17BA0A0]();
        -[HMDHome msgDispatcher](v139, "msgDispatcher");
        v193 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v139, "workQueue");
        v194 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v191) = objc_msgSend(v191, "configure:messageDispatcher:queue:", v139, v193, v194);

        objc_autoreleasePoolPop(v192);
        v457 |= v191;
      }
      v188 = objc_msgSend(v187, "countByEnumeratingWithState:objects:count:", &v486, v550, 16);
    }
    while (v188);
  }

  if (a6 <= 1)
  {
    -[HMDHome actionSets](v139, "actionSets");
    v195 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome filterBuiltinActionSets:](v139, "filterBuiltinActionSets:", v195);
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    v197 = objc_msgSend(v196, "count") == 0;

    if (v197)
    {
      v198 = -[HMDHome isOwnerUser](v139, "isOwnerUser");
      v199 = (void *)MEMORY[0x1D17BA0A0]();
      v200 = v139;
      HMFGetOSLogHandle();
      v201 = (id)objc_claimAutoreleasedReturnValue();
      v202 = os_log_type_enabled(v201, OS_LOG_TYPE_INFO);
      if (v198)
      {
        if (v202)
        {
          HMFGetLogIdentifier();
          v203 = (id)objc_claimAutoreleasedReturnValue();
          v204 = objc_msgSend(v200[141], "count");
          *(_DWORD *)buf = 138543618;
          v515 = v203;
          v516 = 2048;
          v517 = (const __CFString *)v204;
          _os_log_impl(&dword_1CD062000, v201, OS_LOG_TYPE_INFO, "%{public}@%ld user-defined actionSets; no builtin actionSets - creating....",
            buf,
            0x16u);

        }
        objc_autoreleasePoolPop(v199);
        objc_msgSend(v200, "actionSets");
        v205 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v200, "_createBuiltinActionSets");
        v206 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v205, "addObjectsFromArray:", v206);

        v457 = 1;
      }
      else
      {
        if (v202)
        {
          HMFGetLogIdentifier();
          v207 = (id)objc_claimAutoreleasedReturnValue();
          v208 = (const __CFString *)v200[151];
          *(_DWORD *)buf = 138543618;
          v515 = v207;
          v516 = 2112;
          v517 = v208;
          _os_log_impl(&dword_1CD062000, v201, OS_LOG_TYPE_INFO, "%{public}@Shared home - not creating builtin actionSets %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v199);
      }
    }
  }
  v484 = 0u;
  v485 = 0u;
  v482 = 0u;
  v483 = 0u;
  -[HMDHome triggers](v139, "triggers");
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v210 = objc_msgSend(v209, "countByEnumeratingWithState:objects:count:", &v482, v549, 16);
  if (v210)
  {
    v211 = *(_QWORD *)v483;
    do
    {
      for (kk = 0; kk != v210; ++kk)
      {
        if (*(_QWORD *)v483 != v211)
          objc_enumerationMutation(v209);
        v213 = *(void **)(*((_QWORD *)&v482 + 1) + 8 * kk);
        -[HMDHome msgDispatcher](v139, "msgDispatcher");
        v214 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v139, "workQueue");
        v215 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v213, "configure:messageDispatcher:queue:", v139, v214, v215);

        objc_msgSend(v213, "owner");
        v216 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v214) = v216 == 0;

        if ((_DWORD)v214)
        {
          -[HMDHome currentUser](v139, "currentUser");
          v217 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v213, "setOwner:", v217);

        }
        objc_msgSend(v213, "owner");
        v218 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v218, "isCurrentUser") & 1) != 0)
        {
          objc_msgSend(v213, "owningDevice");
          v219 = (void *)objc_claimAutoreleasedReturnValue();
          v220 = v219 == 0;

          if (v220)
          {
            -[HMDHome currentDevice](v139, "currentDevice");
            v221 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v213, "setOwningDevice:", v221);

            objc_msgSend(v213, "owningDevice");
            v222 = (void *)objc_claimAutoreleasedReturnValue();

            if (v222)
            {
              v223 = (void *)MEMORY[0x1D17BA0A0]();
              v224 = v139;
              HMFGetOSLogHandle();
              v225 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v225, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v226 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v213, "name");
                v227 = (__CFString *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v515 = v226;
                v516 = 2112;
                v517 = v227;
                _os_log_impl(&dword_1CD062000, v225, OS_LOG_TYPE_INFO, "%{public}@Configuration changed: Trigger %@ owner updated to current device", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v223);
              v457 = 1;
            }
          }
        }
        else
        {

        }
      }
      v210 = objc_msgSend(v209, "countByEnumeratingWithState:objects:count:", &v482, v549, 16);
    }
    while (v210);
  }

  v228 = (void *)MEMORY[0x1D17BA0A0]();
  v229 = v139;
  HMFGetOSLogHandle();
  v230 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v230, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v231 = (id)objc_claimAutoreleasedReturnValue();
    v232 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v232, "stringWithFormat:", CFSTR("%.3f"), v233 - v137);
    v234 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v229, "uuid");
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v515 = v231;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configured rooms, zones, triggers, etc.");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("homeConfiguredProperties");
    v524 = 2114;
    v525 = CFSTR("duration");
    v526 = 2112;
    v527 = v234;
    v528 = 2114;
    v529 = CFSTR("homeUUID");
    v530 = 2112;
    v531 = v235;
    _os_log_impl(&dword_1CD062000, v230, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v228);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v236 = (void *)objc_claimAutoreleasedReturnValue();
  v237 = objc_alloc(MEMORY[0x1E0D334C8]);
  v238 = (void *)MEMORY[0x1E0CB3940];
  HMFUptime();
  objc_msgSend(v238, "stringWithFormat:", CFSTR("%.3f"), v239 - v137);
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v229, "uuid");
  v241 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v242 = (void *)objc_claimAutoreleasedReturnValue();
  v243 = (void *)objc_msgSend(v237, "initWithTag:data:", CFSTR("homeConfigureStart"), v242, CFSTR("state"), CFSTR("homeConfiguredProperties"), CFSTR("duration"), v240, CFSTR("homeUUID"), v241);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v244 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v236, "submitTaggedEvent:processorList:", v243, v244);

  v245 = HMFUptime();
  v247 = v246;
  v248 = (void *)MEMORY[0x1D17BA0A0](v245);
  v249 = v229;
  HMFGetOSLogHandle();
  v250 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v250, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v251 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v249, "uuid");
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v515 = v251;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configuring users");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("homeConfigureUsers");
    v524 = 2114;
    v525 = CFSTR("homeUUID");
    v526 = 2112;
    v527 = v252;
    _os_log_impl(&dword_1CD062000, v250, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v248);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v253 = (void *)objc_claimAutoreleasedReturnValue();
  v254 = objc_alloc(MEMORY[0x1E0D334C8]);
  -[HMDHome uuid](v249, "uuid");
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v256 = (void *)objc_claimAutoreleasedReturnValue();
  v257 = (void *)objc_msgSend(v254, "initWithTag:data:", CFSTR("homeConfigureStart"), v256, CFSTR("state"), CFSTR("homeConfigureUsers"), CFSTR("homeUUID"), v255);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v258 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v253, "submitTaggedEvent:processorList:", v257, v258);

  v480 = 0u;
  v481 = 0u;
  v478 = 0u;
  v479 = 0u;
  -[HMDHome removedUsers](v249, "removedUsers");
  v259 = (void *)objc_claimAutoreleasedReturnValue();
  v260 = objc_msgSend(v259, "countByEnumeratingWithState:objects:count:", &v478, v548, 16);
  if (v260)
  {
    v261 = *(_QWORD *)v479;
    do
    {
      for (mm = 0; mm != v260; ++mm)
      {
        if (*(_QWORD *)v479 != v261)
          objc_enumerationMutation(v259);
        objc_msgSend(*(id *)(*((_QWORD *)&v478 + 1) + 8 * mm), "user");
        v263 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _addUserToIdentityRegistry:](v249, "_addUserToIdentityRegistry:", v263);

      }
      v260 = objc_msgSend(v259, "countByEnumeratingWithState:objects:count:", &v478, v548, 16);
    }
    while (v260);
  }

  v476 = 0u;
  v477 = 0u;
  v474 = 0u;
  v475 = 0u;
  -[HMDHome users](v249, "users");
  v442 = (id)objc_claimAutoreleasedReturnValue();
  v264 = objc_msgSend(v442, "countByEnumeratingWithState:objects:count:", &v474, v547, 16);
  if (v264)
  {
    v450 = *(_QWORD *)v475;
    do
    {
      for (nn = 0; nn != v264; ++nn)
      {
        if (*(_QWORD *)v475 != v450)
          objc_enumerationMutation(v442);
        v266 = *(__CFString **)(*((_QWORD *)&v474 + 1) + 8 * nn);
        -[__CFString userID](v266, "userID");
        v267 = (void *)objc_claimAutoreleasedReturnValue();
        v268 = -[__CFString isRemoteGateway](v266, "isRemoteGateway");
        if (v267)
          v269 = v268;
        else
          v269 = 1;
        if ((v269 & 1) == 0)
        {
          +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v267);
          v270 = (void *)objc_claimAutoreleasedReturnValue();
          if (v270)
          {
            v271 = (void *)MEMORY[0x1D17BA0A0]();
            v272 = v249;
            HMFGetOSLogHandle();
            v273 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v274 = (id)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v515 = v274;
              v516 = 2112;
              v517 = v266;
              _os_log_impl(&dword_1CD062000, v273, OS_LOG_TYPE_DEFAULT, "%{public}@Migrating invalid resident user: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v271);
            -[HMDHome _removeUser:](v272, "_removeUser:", v266);
            +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
            v275 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v275, "deviceForHandle:", v270);
            v276 = (void *)objc_claimAutoreleasedReturnValue();

            v277 = [HMDResidentUser alloc];
            -[__CFString pairingIdentity](v266, "pairingIdentity");
            v278 = (void *)objc_claimAutoreleasedReturnValue();
            v279 = -[HMDResidentUser initWithDevice:home:pairingIdentity:configurationState:](v277, "initWithDevice:home:pairingIdentity:configurationState:", v276, v272, v278, 0);

            -[__CFString uuid](v266, "uuid");
            v280 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDUser setUUID:](v279, "setUUID:", v280);

            -[HMDHome addUser:](v272, "addUser:", v279);
          }

        }
        -[HMDHome _addUserToIdentityRegistry:](v249, "_addUserToIdentityRegistry:", v266);
        -[__CFString configureWithHome:](v266, "configureWithHome:", v249);
        if (-[__CFString isOwner](v266, "isOwner") && !-[HMDHome isOwnerUser](v249, "isOwnerUser"))
        {
          v281 = dispatch_time(0, 300000000000);
          -[HMDHome workQueue](v249, "workQueue");
          v282 = objc_claimAutoreleasedReturnValue();
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke;
          block[3] = &unk_1E89C2328;
          block[4] = v266;
          block[5] = v249;
          dispatch_after(v281, v282, block);

        }
      }
      v264 = objc_msgSend(v442, "countByEnumeratingWithState:objects:count:", &v474, v547, 16);
    }
    while (v264);
  }

  v283 = (void *)MEMORY[0x1D17BA0A0]();
  v284 = v249;
  HMFGetOSLogHandle();
  v285 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v285, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v286 = (id)objc_claimAutoreleasedReturnValue();
    v287 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v287, "stringWithFormat:", CFSTR("%.3f"), v288 - v247);
    v289 = (id)objc_claimAutoreleasedReturnValue();
    v290 = (void *)MEMORY[0x1E0CB37E8];
    -[HMDHome users](v284, "users");
    v291 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v290, "numberWithUnsignedInteger:", objc_msgSend(v291, "count"));
    v292 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v515 = v286;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configured users");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("homeConfiguredUsers");
    v524 = 2114;
    v525 = CFSTR("duration");
    v526 = 2112;
    v527 = v289;
    v528 = 2114;
    v529 = CFSTR("usersCount");
    v530 = 2112;
    v531 = v292;
    _os_log_impl(&dword_1CD062000, v285, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v283);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v293 = (void *)objc_claimAutoreleasedReturnValue();
  v294 = objc_alloc(MEMORY[0x1E0D334C8]);
  v295 = (void *)MEMORY[0x1E0CB3940];
  HMFUptime();
  objc_msgSend(v295, "stringWithFormat:", CFSTR("%.3f"), v296 - v247);
  v297 = (void *)objc_claimAutoreleasedReturnValue();
  v298 = (void *)MEMORY[0x1E0CB37E8];
  -[HMDHome users](v284, "users");
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v298, "numberWithUnsignedInteger:", objc_msgSend(v299, "count"));
  v300 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v301 = (void *)objc_claimAutoreleasedReturnValue();
  v302 = (void *)objc_msgSend(v294, "initWithTag:data:", CFSTR("homeConfigureStart"), v301, CFSTR("state"), CFSTR("homeConfiguredUsers"), CFSTR("duration"), v297, CFSTR("usersCount"), v300);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v303 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v293, "submitTaggedEvent:processorList:", v302, v303);

  -[HMDHome networkProtectionGroupRegistry](v284, "networkProtectionGroupRegistry");
  v304 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v304, "configure");

  -[HMDHome localCapabilitiesDataSource](v284, "localCapabilitiesDataSource");
  v305 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v297) = objc_msgSend(v305, "isResidentCapable");

  if ((_DWORD)v297)
  {
    -[HMDHome uuid](v284, "uuid");
    v306 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v306, "UUIDString");
    v307 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("Home.EventRouter.Server.Delegating."), "stringByAppendingString:", v307);
    v308 = (void *)objc_claimAutoreleasedReturnValue();

    v309 = objc_alloc(MEMORY[0x1E0D32D20]);
    objc_msgSend(v440, "workQueue");
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    v311 = objc_retainAutorelease(v308);
    v312 = objc_msgSend(v311, "UTF8String");
    -[HMDHome uuid](v284, "uuid");
    v313 = (void *)objc_claimAutoreleasedReturnValue();
    v314 = objc_msgSend(v309, "initWithQueue:dataSource:storeReadHandle:logCategory:identifier:", v310, v284, 0, v312, v313);
    serverDelegatingEventRouter = v284->_serverDelegatingEventRouter;
    v284->_serverDelegatingEventRouter = (HMEDelegatingEventRouter *)v314;

    -[HMDHome createRemoteEventRouterServerIfNeeded](v284, "createRemoteEventRouterServerIfNeeded");
  }
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v284, 3, 0);
  v441 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v440, "eventRouterAssertionController");
  v438 = (void *)objc_claimAutoreleasedReturnValue();
  v316 = [HMDHomeRemoteEventRouterClientController alloc];
  -[HMDHome messageTargetUUID](v284, "messageTargetUUID");
  v317 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v440, "workQueue");
  v318 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v447, "uuid");
  v319 = (void *)objc_claimAutoreleasedReturnValue();
  v320 = -[HMDHomeRemoteEventRouterClientController initWithMessageTargetUUID:workQueue:dataSource:requestMessageName:updateMessageName:multiHopFetchResponseMessageName:clientUserMessagePolicy:currentAccessoryUUID:assertionController:](v316, "initWithMessageTargetUUID:workQueue:dataSource:requestMessageName:updateMessageName:multiHopFetchResponseMessageName:clientUserMessagePolicy:currentAccessoryUUID:assertionController:", v317, v318, v284, CFSTR("RemoteEventRouterRequestMessage"), CFSTR("RemoteEventRouterUpdateMessageName"), CFSTR("RER.MHF.ResponseMessageName"), v441, v319, v438);
  -[HMDHome setRemoteEventRouterClientController:](v284, "setRemoteEventRouterClientController:", v320);

  -[HMDHome remoteEventRouterClientController](v284, "remoteEventRouterClientController");
  v321 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v321, "setHomeManager:", v440);

  objc_msgSend(v440, "localAndRemoteSubscriptionProvider");
  v322 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v323 = v322;
  else
    v323 = 0;
  v437 = v323;

  -[HMDHome remoteEventRouterClientController](v284, "remoteEventRouterClientController");
  v324 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v324, "residentDelegatingEventRouter");
  v443 = (id)objc_claimAutoreleasedReturnValue();

  if (v443)
    objc_msgSend(v437, "registerSubRouter:", v443);
  -[HMDHome accessoryInfoFetchController](v284, "accessoryInfoFetchController");
  v325 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v284, "msgDispatcher");
  v326 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome remoteEventRouterClientController](v284, "remoteEventRouterClientController");
  v327 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v325, "configureWithMessageDispatcher:remoteEventRouterClientController:", v326, v327);

  objc_initWeak(&location, v284);
  -[HMDHome workQueue](v284, "workQueue");
  v328 = objc_claimAutoreleasedReturnValue();
  v467[0] = MEMORY[0x1E0C809B0];
  v467[1] = 3221225472;
  v467[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_557;
  v467[3] = &unk_1E89BF278;
  objc_copyWeak(&v471, &location);
  v434 = v447;
  v468 = v434;
  obja = obj;
  v469 = obja;
  v436 = v435;
  v470 = v436;
  dispatch_group_notify(group, v328, v467);

  v465 = 0u;
  v466 = 0u;
  v463 = 0u;
  v464 = 0u;
  -[HMDHome outgoingInvitations](v284, "outgoingInvitations");
  v329 = (void *)objc_claimAutoreleasedReturnValue();
  v330 = objc_msgSend(v329, "countByEnumeratingWithState:objects:count:", &v463, v546, 16);
  if (v330)
  {
    v448 = v329;
    v451 = *(_QWORD *)v464;
    do
    {
      for (i1 = 0; i1 != v330; ++i1)
      {
        if (*(_QWORD *)v464 != v451)
          objc_enumerationMutation(v448);
        v332 = *(void **)(*((_QWORD *)&v463 + 1) + 8 * i1);
        v459 = 0u;
        v460 = 0u;
        v461 = 0u;
        v462 = 0u;
        objc_msgSend(v332, "operations");
        v333 = (void *)objc_claimAutoreleasedReturnValue();
        v334 = objc_msgSend(v333, "countByEnumeratingWithState:objects:count:", &v459, v545, 16);
        if (v334)
        {
          v335 = *(_QWORD *)v460;
          do
          {
            for (i2 = 0; i2 != v334; ++i2)
            {
              if (*(_QWORD *)v460 != v335)
                objc_enumerationMutation(v333);
              v337 = *(void **)(*((_QWORD *)&v459 + 1) + 8 * i2);
              if ((objc_msgSend(v337, "isFinished") & 1) == 0)
              {
                objc_msgSend(v337, "setDelegate:", v284);
                +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
                v338 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v338, "addOperation:", v337);

              }
            }
            v334 = objc_msgSend(v333, "countByEnumeratingWithState:objects:count:", &v459, v545, 16);
          }
          while (v334);
        }

      }
      v329 = v448;
      v330 = objc_msgSend(v448, "countByEnumeratingWithState:objects:count:", &v463, v546, 16);
    }
    while (v330);
  }

  v339 = HMFUptime();
  v341 = v340;
  v342 = (void *)MEMORY[0x1D17BA0A0](v339);
  v343 = v284;
  HMFGetOSLogHandle();
  v344 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v344, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v345 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v343, "uuid");
    v346 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    v515 = v345;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configuring profiles and settings");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("homeConfigureProfiles");
    v524 = 2114;
    v525 = CFSTR("homeUUID");
    v526 = 2112;
    v527 = v346;
    _os_log_impl(&dword_1CD062000, v344, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v342);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v347 = (void *)objc_claimAutoreleasedReturnValue();
  v348 = objc_alloc(MEMORY[0x1E0D334C8]);
  -[HMDHome uuid](v343, "uuid");
  v349 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v350 = (void *)objc_claimAutoreleasedReturnValue();
  v351 = (void *)objc_msgSend(v348, "initWithTag:data:", CFSTR("homeConfigureStart"), v350, CFSTR("state"), CFSTR("homeConfigureProfiles"), CFSTR("homeUUID"), v349);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v352 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v347, "submitTaggedEvent:processorList:", v351, v352);

  v353 = (void *)MEMORY[0x1D17BA0A0]();
  -[HMDHome _registerForMessages](v343, "_registerForMessages");
  objc_autoreleasePoolPop(v353);
  -[HMDHome _registerForNotifications](v343, "_registerForNotifications");
  -[HMDHome resubscribeForNotificationsOnResident:](v343, "resubscribeForNotificationsOnResident:", 0);
  -[HMDHome configureMultiuserSettingsMessengerWithMessengerFactory:](v343, "configureMultiuserSettingsMessengerWithMessengerFactory:", v343);
  -[HMDHome _evaluateShouldRelaunchAndSetRelaunch](v343, "_evaluateShouldRelaunchAndSetRelaunch");
  v354 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome reEvaluateHomeHubState](v343, "reEvaluateHomeHubState"));
  v355 = v343;
  HMFGetOSLogHandle();
  v356 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v356, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v357 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHome triggers](v355, "triggers");
    v358 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v515 = v357;
    v516 = 2112;
    v517 = v358;
    _os_log_impl(&dword_1CD062000, v356, OS_LOG_TYPE_INFO, "%{public}@Triggers: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v354);
  -[HMDHome migrateAfterResidentChange](v355, "migrateAfterResidentChange");
  -[HMDHome _updateWoWState:](v355, "_updateWoWState:", v446);
  if ((v457 & 1) != 0 && -[HMDHome isOwnerUser](v355, "isOwnerUser"))
    -[HMDHome _updateConfigurationVersion](v355, "_updateConfigurationVersion");
  v359 = -[HMDMediaActionRouter initWithDataSource:]([HMDMediaActionRouter alloc], "initWithDataSource:", v355);
  -[HMDHome setMediaActionRouter:](v355, "setMediaActionRouter:", v359);

  -[HMDHome personDataManager](v355, "personDataManager");
  v360 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v360, "configure");

  v361 = -[HMDUserActionPredictionManager initWithHome:]([HMDUserActionPredictionManager alloc], "initWithHome:", v355);
  -[HMDHome setUserActionPredictionManager:](v355, "setUserActionPredictionManager:", v361);

  -[HMDHome userActionPredictionManager](v355, "userActionPredictionManager");
  v362 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v362, "configure");

  -[HMDHome reachabilityNotificationManager](v355, "reachabilityNotificationManager");
  v363 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v440, "messageDispatcher");
  v364 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v364, "secureRemoteTransport");
  v365 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v365, "deviceMonitor");
  v366 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v363, "configureWithHome:deviceMonitor:", v355, v366);

  -[HMDHome configureNaturalLightingWithDemoModeEnabled:](v355, "configureNaturalLightingWithDemoModeEnabled:", 0);
  -[HMDHome walletKeyManager](v355, "walletKeyManager");
  v367 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v367, "configureWithHome:", v355);

  -[HMDHome nfcReaderKeyManager](v355, "nfcReaderKeyManager");
  v368 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v368, "configureWithHome:", v355);

  -[HMDHome lockNotificationManager](v355, "lockNotificationManager");
  v369 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v369, "configureWithHome:", v355);

  -[HMDHome analysisStatePublisher](v355, "analysisStatePublisher");
  v370 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v370, "configureWithHome:", v355);

  -[HMDHome configurePrimaryResidentMessageRouterWithFactory:metricsDispatcherFactory:](v355, "configurePrimaryResidentMessageRouterWithFactory:metricsDispatcherFactory:", v355, v355);
  v371 = [HMDAppleMediaAccessoryMessageRouter alloc];
  -[HMDHome uuid](v355, "uuid");
  v372 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v355, "msgDispatcher");
  v373 = (void *)objc_claimAutoreleasedReturnValue();
  v374 = -[HMDAppleMediaAccessoryMessageRouter initWithIdentifier:messageDispatcher:](v371, "initWithIdentifier:messageDispatcher:", v372, v373);
  -[HMDHome setAppleDeviceRouter:](v355, "setAppleDeviceRouter:", v374);

  -[HMDHome appleDeviceRouter](v355, "appleDeviceRouter");
  v375 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v375, "setDataSource:", v355);

  v376 = [HMDDelegatingMessageRouter alloc];
  -[HMDHome msgDispatcher](v355, "msgDispatcher");
  v377 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome appleDeviceRouter](v355, "appleDeviceRouter");
  v378 = (void *)objc_claimAutoreleasedReturnValue();
  v544[0] = v378;
  -[HMDHome primaryResidentMessageRouter](v355, "primaryResidentMessageRouter");
  v379 = (void *)objc_claimAutoreleasedReturnValue();
  v544[1] = v379;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v544, 2);
  v380 = (void *)objc_claimAutoreleasedReturnValue();
  v381 = -[HMDDelegatingMessageRouter initWithMessageDispatcher:routers:](v376, "initWithMessageDispatcher:routers:", v377, v380);
  -[HMDHome setAccessoryMessageRouterViaPrimary:](v355, "setAccessoryMessageRouterViaPrimary:", v381);

  -[HMDHome accessoryMessageRouterViaPrimary](v355, "accessoryMessageRouterViaPrimary");
  v382 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v382, "setDataSource:", v355);

  -[HMDHome configureUnifiedLanguageValueListSettingDataProviderWithFactory:](v355, "configureUnifiedLanguageValueListSettingDataProviderWithFactory:", v355);
  -[HMDHome configureAccessorySettingsMessengerWithMessengerFactory:messageHandlerFactory:](v355, "configureAccessorySettingsMessengerWithMessengerFactory:messageHandlerFactory:", v355, v355);
  -[HMDHome configureSiriEndpointProfilesMessengerWithMessengerFactory:messageHandlerFactory:](v355, "configureSiriEndpointProfilesMessengerWithMessengerFactory:messageHandlerFactory:", v355, v355);
  -[HMDHome accessoryConnectionCoordinator](v355, "accessoryConnectionCoordinator");
  v383 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome localCapabilitiesDataSource](v355, "localCapabilitiesDataSource");
  v384 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v383, "configureWithIsResidentCapable:", objc_msgSend(v384, "isResidentCapable"));

  -[HMDHome workQueue](v355, "workQueue");
  v385 = objc_claimAutoreleasedReturnValue();
  v458[0] = MEMORY[0x1E0C809B0];
  v458[1] = 3221225472;
  v458[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_564;
  v458[3] = &unk_1E89C2730;
  v458[4] = v355;
  dispatch_async(v385, v458);

  v386 = (void *)MEMORY[0x1D17BA0A0]();
  v387 = v355;
  HMFGetOSLogHandle();
  v388 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v388, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v389 = (id)objc_claimAutoreleasedReturnValue();
    v390 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v390, "stringWithFormat:", CFSTR("%.3f"), v391 - v341);
    v392 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v387, "uuid");
    v393 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v515 = v389;
    v516 = 2114;
    v517 = CFSTR("homeConfigureStart");
    v518 = 2112;
    v519 = CFSTR("Configured profiles and settings");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("homeConfiguredProfiles");
    v524 = 2114;
    v525 = CFSTR("duration");
    v526 = 2112;
    v527 = v392;
    v528 = 2114;
    v529 = CFSTR("homeUUID");
    v530 = 2112;
    v531 = v393;
    _os_log_impl(&dword_1CD062000, v388, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v386);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v394 = (void *)objc_claimAutoreleasedReturnValue();
  v395 = objc_alloc(MEMORY[0x1E0D334C8]);
  v396 = (void *)MEMORY[0x1E0CB3940];
  HMFUptime();
  objc_msgSend(v396, "stringWithFormat:", CFSTR("%.3f"), v397 - v341);
  v398 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v387, "uuid");
  v399 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v400 = (void *)objc_claimAutoreleasedReturnValue();
  v401 = (void *)objc_msgSend(v395, "initWithTag:data:", CFSTR("homeConfigureStart"), v400, CFSTR("state"), CFSTR("homeConfiguredProfiles"), CFSTR("duration"), v398, CFSTR("homeUUID"), v399);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v402 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v394, "submitTaggedEvent:processorList:", v401, v402);

  objc_msgSend(v387, "dailyScheduler");
  v403 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v403, "registerDailyTaskRunner:", v387);

  v404 = (void *)MEMORY[0x1D17BA0A0]();
  v405 = v387;
  HMFGetOSLogHandle();
  v406 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v406, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v452 = (id)objc_claimAutoreleasedReturnValue();
    v407 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v407, "stringWithFormat:", CFSTR("%.3f"), v408 - v11);
    v409 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v405, "uuid");
    v410 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v411 = (id)objc_claimAutoreleasedReturnValue();
    v412 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v405, "accessories");
    v413 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v412, "numberWithUnsignedInteger:", objc_msgSend(v413, "count"));
    v414 = (void *)objc_claimAutoreleasedReturnValue();
    v415 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v405, "users");
    v416 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v415, "numberWithUnsignedInteger:", objc_msgSend(v416, "count"));
    v417 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138546946;
    v515 = v452;
    v516 = 2114;
    v517 = CFSTR("homeConfigureDone");
    v518 = 2112;
    v519 = CFSTR("Configured home");
    v520 = 2114;
    v521 = CFSTR("state");
    v522 = 2112;
    v523 = CFSTR("end");
    v524 = 2114;
    v525 = CFSTR("duration");
    v526 = 2112;
    v527 = v409;
    v528 = 2114;
    v529 = CFSTR("homeUUID");
    v530 = 2112;
    v531 = v410;
    v532 = 2114;
    v533 = CFSTR("configChanged");
    v534 = 2112;
    v535 = v411;
    v536 = 2114;
    v537 = CFSTR("accessoriesCount");
    v538 = 2112;
    v539 = v414;
    v540 = 2114;
    v541 = CFSTR("usersCount");
    v542 = 2112;
    v543 = v417;
    _os_log_impl(&dword_1CD062000, v406, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x98u);

  }
  objc_autoreleasePoolPop(v404);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v418 = (void *)objc_claimAutoreleasedReturnValue();
  v419 = objc_alloc(MEMORY[0x1E0D334C8]);
  v420 = (void *)MEMORY[0x1E0CB3940];
  HMFUptime();
  objc_msgSend(v420, "stringWithFormat:", CFSTR("%.3f"), v421 - v11);
  v453 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v405, "uuid");
  v422 = (void *)objc_claimAutoreleasedReturnValue();
  HMFBooleanToString();
  v423 = (void *)objc_claimAutoreleasedReturnValue();
  v424 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v405, "accessories");
  v425 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v424, "numberWithUnsignedInteger:", objc_msgSend(v425, "count"));
  v426 = (void *)objc_claimAutoreleasedReturnValue();
  v427 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v405, "users");
  v428 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v427, "numberWithUnsignedInteger:", objc_msgSend(v428, "count"));
  v429 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v430 = (void *)objc_claimAutoreleasedReturnValue();
  v431 = (void *)objc_msgSend(v419, "initWithTag:data:", CFSTR("homeConfigureDone"), v430, CFSTR("state"), CFSTR("end"), CFSTR("duration"), v453, CFSTR("homeUUID"), v422, CFSTR("configChanged"), v423, CFSTR("accessoriesCount"), v426, CFSTR("usersCount"), v429);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v432 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v418, "submitTaggedEvent:processorList:", v431, v432);

  objc_destroyWeak(&v471);
  objc_destroyWeak(&location);

  return v457 & 1;
}

- (void)configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:(id)a3 accessories:(id)a4 uncommittedTransactions:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  id v22;
  char isKindOfClass;
  void *v24;
  id v25;
  void *v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  __objc2_class *v42;
  uint64_t i;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  HMDHome *v52;
  NSObject *v53;
  uint64_t v54;
  HMDHome *v55;
  void *v56;
  void *v57;
  HMDHome *v58;
  NSObject *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  HMDHome *v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  id obj;
  uint64_t v75;
  _QWORD v76[5];
  id v77;
  id v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[4];
  id v84;
  uint8_t buf[4];
  void *v86;
  __int16 v87;
  id v88;
  __int16 v89;
  id v90;
  _BYTE v91[128];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v86 = v14;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Configuring after accessories configuration tracker notifications", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v11);
  -[HMDHome workQueue](v12, "workQueue");
  v15 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v15);

  -[HMDHome configureBulletinNotification](v12, "configureBulletinNotification");
  v16 = -[HMDHome _evaluateNetworkProtectionAndRouterManagement](v12, "_evaluateNetworkProtectionAndRouterManagement");
  if (v8)
  {
    v17 = (void *)MEMORY[0x1D17BA0A0](v16);
    v18 = v12;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v86 = v20;
      v87 = 2112;
      v88 = v8;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Setting up media session for current accessory during configure - %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v21 = -[HMDHome _addMediaSessionForCurrentAccessory:](v18, "_addMediaSessionForCurrentAccessory:", v8);
    v22 = v8;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
      v24 = v22;
    else
      v24 = 0;
    v25 = v24;

    if ((isKindOfClass & 1) != 0)
      objc_msgSend(v22, "configureSensors");

  }
  -[HMDHome localCapabilitiesDataSource](v12, "localCapabilitiesDataSource");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "isResidentCapable");

  if (v27)
  {
    -[HMDHome mediaStateManager](v12, "mediaStateManager");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationRegistry](v12, "notificationRegistry");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationCenter](v12, "notificationCenter");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "configureWithNotificationRegistry:notificationCenter:", v29, v30);

  }
  -[HMDHome configureMediaSystems](v12, "configureMediaSystems");
  -[HMDHome configureMediaDestinationControllersForAccessories:](v12, "configureMediaDestinationControllersForAccessories:", v9);
  -[HMDHome registerForDeviceWithCapabilities](v12, "registerForDeviceWithCapabilities");
  v31 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome configureAppleMediaAccessoriesStateManagerWithStateManagerWithFactory:messengerFactory:metricsDispatcherFactory:](v12, "configureAppleMediaAccessoriesStateManagerWithStateManagerWithFactory:messengerFactory:metricsDispatcherFactory:", v12, v12, v12));
  if (objc_msgSend(v10, "count"))
  {
    -[HMDHome backingStore](v12, "backingStore");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "root");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "encodeForKey");
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    v83[0] = MEMORY[0x1E0C809B0];
    v83[1] = 3221225472;
    v83[2] = __126__HMDHome_configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory_accessories_uncommittedTransactions___block_invoke;
    v83[3] = &unk_1E89A42D0;
    v35 = v34;
    v84 = v35;
    objc_msgSend(v10, "na_filter:", v83);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v36, "count"))
    {
      v67 = v35;
      v68 = v31;
      v70 = v10;
      v71 = v9;
      v72 = v8;
      v37 = (void *)MEMORY[0x1D17BA0A0]();
      v69 = v12;
      v38 = v12;
      HMFGetOSLogHandle();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v86 = v40;
        v87 = 2112;
        v88 = v36;
        _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Obtained uncommitted transactions that need to be applied: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v37);
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v66 = v36;
      obj = v36;
      v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v91, 16);
      if (v75)
      {
        v41 = *(_QWORD *)v80;
        v42 = HMDAggregationAnalysisLogEvent;
        do
        {
          for (i = 0; i != v75; ++i)
          {
            if (*(_QWORD *)v80 != v41)
              objc_enumerationMutation(obj);
            v44 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * i);
            objc_msgSend(v44, "data");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = objc_msgSend(v44, "encoding");
            v47 = objc_msgSend(v44, "rowID");
            v78 = 0;
            objc_msgSend(&v42[39], "objectFromData:encoding:rowID:error:", v45, v46, v47, &v78);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            v49 = v78;

            v50 = objc_msgSend(v48, "setObjectChangeType:", objc_msgSend(v44, "type"));
            if (v49)
            {
              v51 = (void *)MEMORY[0x1D17BA0A0](v50);
              v52 = v38;
              HMFGetOSLogHandle();
              v53 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v54 = v41;
                v55 = v38;
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v86 = v56;
                v87 = 2112;
                v88 = v44;
                v89 = 2112;
                v90 = v49;
                _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_ERROR, "%{public}@Error decoding log record %@: %@", buf, 0x20u);

                v38 = v55;
                v41 = v54;
                v42 = HMDAggregationAnalysisLogEvent;
              }

              objc_autoreleasePoolPop(v51);
            }
            else
            {
              objc_msgSend(v73, "addObject:", v48);
            }

          }
          v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v91, 16);
        }
        while (v75);
      }

      v57 = (void *)MEMORY[0x1D17BA0A0]();
      v58 = v38;
      HMFGetOSLogHandle();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v86 = v60;
        v87 = 2112;
        v88 = v73;
        _os_log_impl(&dword_1CD062000, v59, OS_LOG_TYPE_DEFAULT, "%{public}@Rerunning uncommitted transaction models %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v57);
      -[HMDHome backingStore](v58, "backingStore");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultLocalOptions](HMDBackingStoreTransactionOptions, "defaultLocalOptions");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v61, "transaction:options:", CFSTR("RerunUncommitted"), v62);
      v63 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v63, "addObjects:", v73);
      v76[0] = MEMORY[0x1E0C809B0];
      v76[1] = 3221225472;
      v76[2] = __126__HMDHome_configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory_accessories_uncommittedTransactions___block_invoke_574;
      v76[3] = &unk_1E89C21C0;
      v76[4] = v58;
      v77 = v73;
      v64 = v73;
      objc_msgSend(v63, "runWithoutSave:", v76);

      v9 = v71;
      v8 = v72;
      v12 = v69;
      v10 = v70;
      v35 = v67;
      v31 = v68;
      v36 = v66;
    }

  }
  objc_autoreleasePoolPop(v31);
  -[HMDHome migrateLegacyLocationServiceSettings](v12, "migrateLegacyLocationServiceSettings");
  -[HMDHome configureMediaGroupObjects](v12, "configureMediaGroupObjects");
  -[HMDHome accessories](v12, "accessories");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome configureRemoteEventRouterClientControllerForAccessories:](v12, "configureRemoteEventRouterClientControllerForAccessories:", v65);

}

- (void)configureRemoteEventRouterClientControllerForAccessories:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  id v12;
  int v13;
  void *v14;
  void *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (_os_feature_enabled_impl())
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v16 = v4;
    v5 = v4;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v18 != v8)
            objc_enumerationMutation(v5);
          v10 = *(id *)(*((_QWORD *)&v17 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v11 = v10;
          else
            v11 = 0;
          v12 = v11;

          if (v12)
          {
            v13 = objc_msgSend(v10, "isCurrentAccessory");
            -[HMDHome remoteEventRouterClientController](self, "remoteEventRouterClientController");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "uuid");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            if (v13)
              objc_msgSend(v14, "updateCurrentAccessoryUUID:", v15);
            else
              objc_msgSend(v14, "createResidentRouterForAccessoryUUID:", v15);

          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v7);
    }

    v4 = v16;
  }

}

- (void)createRemoteEventRouterServerIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  HMDRemoteEventRouterServer *v43;
  void *v44;
  _BOOL8 v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  HMDRemoteEventRouterServer *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  id v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  void *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome currentAccessory](self, "currentAccessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  -[HMDHome remoteEventRouterServer](self, "remoteEventRouterServer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "residentModeUUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v9, "isResidentCapable") & 1) != 0)
    {
      if (!v8)
      {

LABEL_14:
        objc_msgSend(v6, "uuid");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v8, "isEqual:", v18);

        if ((v19 & 1) == 0)
        {
          v20 = (void *)MEMORY[0x1D17BA0A0]();
          v21 = self;
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "uuid");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v57 = v23;
            v58 = 2112;
            v59 = v8;
            v60 = 2112;
            v61 = v24;
            _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Overwriting stale remote event router server with uuid: %@ to current accessory uuid: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v20);
        }
        v25 = (void *)MEMORY[0x1D17BA0A0]();
        v26 = self;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v57 = v28;
          v58 = 2112;
          v59 = v6;
          _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Creating remote event router server with current accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v25);
        objc_msgSend(v3, "localOnlySubscriptionProvider");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          -[HMDHome serverDelegatingEventRouter](v26, "serverDelegatingEventRouter");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "synchronousSubscriptionProvider");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "registerSubRouter:", v31);

          -[HMDHome serverDelegatingEventRouter](v26, "serverDelegatingEventRouter");
          v32 = objc_claimAutoreleasedReturnValue();

          v29 = (void *)v32;
        }
        v52 = v29;
        v53 = v8;
        -[HMDHome remoteEventRouterClientController](v26, "remoteEventRouterClientController");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "residentDelegatingEventRouter");
        v34 = objc_claimAutoreleasedReturnValue();

        if (v34)
        {
          -[HMDHome serverDelegatingEventRouter](v26, "serverDelegatingEventRouter");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "registerSubRouter:", v34);

        }
        v50 = [HMDRemoteEventRouterServer alloc];
        -[HMDHome uuid](v26, "uuid");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "workQueue");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome msgDispatcher](v26, "msgDispatcher");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome notificationCenter](v26, "notificationCenter");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome serverDelegatingEventRouter](v26, "serverDelegatingEventRouter");
        v54 = v3;
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "eventForwarder");
        v51 = (void *)v34;
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "eventStoreReadHandle");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = -[HMDRemoteEventRouterServer initWithPrimaryModeUUID:residentModeUUID:queue:messageDispatcher:dataSource:notificationCenter:requestMessageName:updateMessageName:multiHopFetchResponseMessageName:subscriptionProvider:registrationEventRouter:storeReadHandle:](v50, "initWithPrimaryModeUUID:residentModeUUID:queue:messageDispatcher:dataSource:notificationCenter:requestMessageName:updateMessageName:multiHopFetchResponseMessageName:subscriptionProvider:registrationEventRouter:storeReadHandle:", v49, v36, v37, v38, v26, v39, CFSTR("RemoteEventRouterRequestMessage"), CFSTR("RemoteEventRouterUpdateMessageName"), CFSTR("RER.MHF.ResponseMessageName"), v40, v41, v42);
        -[HMDHome setRemoteEventRouterServer:](v26, "setRemoteEventRouterServer:", v43);

        +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v26, 0, 0);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = isTVOSDevice();
        -[HMDHome remoteEventRouterServer](v26, "remoteEventRouterServer");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = -[HMDHome isCurrentDevicePrimaryResident](v26, "isCurrentDevicePrimaryResident");
        v55 = v44;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v55, 1);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "configureWithHome:isPrimaryResident:isResidentEventProviding:additionalPolicies:", v26, v47, v45, v48);

        v3 = v54;
        v8 = v53;
        goto LABEL_25;
      }
      objc_msgSend(v6, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v8, "isEqual:", v10);

      if ((v11 & 1) == 0)
        goto LABEL_14;
    }
    else
    {

    }
  }
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome localCapabilitiesDataSource](v13, "localCapabilitiesDataSource");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "isResidentCapable");
    HMFBooleanToString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v57 = v15;
    v58 = 2112;
    v59 = v6;
    v60 = 2112;
    v61 = v17;
    v62 = 2112;
    v63 = v8;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Cannot create remote event router server with currentAccessory: %@ isResidentCapable: %@ serverAccessoryUUID: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v12);
LABEL_25:

}

- (id)eventRouterServerDiagnosticInfo
{
  void *v2;
  void *v3;

  -[HMDHome remoteEventRouterServer](self, "remoteEventRouterServer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "diagnosticInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)enableLocationServiceSettings
{
  self->_enableLocationServiceSettings = 1;
}

- (BOOL)isLocationServiceSettingsEnabled
{
  if (self->_enableLocationServiceSettings)
    return 1;
  else
    return _os_feature_enabled_impl();
}

- (void)migrateLegacyLocationServiceSettings
{
  void *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (-[HMDHome isLocationServiceSettingsEnabled](self, "isLocationServiceSettingsEnabled"))
  {
    if (-[HMDHome isOwnerUser](self, "isOwnerUser")
      && !-[HMDHome didOnboardLocationServices](self, "didOnboardLocationServices"))
    {
      -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v3, "count"))
      {
        v4 = (void *)MEMORY[0x1D17BA0A0]();
        v5 = self;
        HMFGetOSLogHandle();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = 138543362;
          v13 = v7;
          _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Migrating legacy location service setting", (uint8_t *)&v12, 0xCu);

        }
        objc_autoreleasePoolPop(v4);
        if (objc_msgSend(v3, "na_allObjectsPassTest:", &__block_literal_global_583))
          -[HMDHome runLocationServicesEnabledUpdateWithValue:](v5, "runLocationServicesEnabledUpdateWithValue:", 1);
      }

    }
  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Siri endpoint home level location service migration not enabled", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
  }
}

- (void)registerForDeviceWithCapabilities
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for device with capabilities and confirming resident device", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHome residentDeviceManager](v4, "residentDeviceManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addDataSource:", v4);

  -[HMDHome residentDeviceManager](v4, "residentDeviceManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "confirmWithCompletionHandler:", 0);

}

- (BOOL)supportsDeviceWithCapabilities:(id)a3
{
  id v4;
  char v5;

  v4 = a3;
  if (-[HMDHome hasSiriEndpointAccessory](self, "hasSiriEndpointAccessory")
    && !objc_msgSend(v4, "supportsSiriEndpointSetup"))
  {
    v5 = 0;
  }
  else
  {
    v5 = objc_msgSend(v4, "supportsResidentFirstAccessoryCommunication");
  }

  return v5;
}

- (BOOL)hasSiriEndpointAccessory
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  id v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(v2);
        v6 = *(id *)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v7 = v6;
        else
          v7 = 0;
        v8 = v7;

        if (v8)
        {
          objc_msgSend(v8, "siriEndpointProfile");
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          if (v9)
          {
            LOBYTE(v3) = 1;
            goto LABEL_15;
          }
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_15:

  return v3;
}

- (void)configureMediaSystems
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome mediaSystemController](self, "mediaSystemController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome notificationCenter](self, "notificationCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "configure:delegate:dataSource:queue:messageDispatcher:notificationCenter:", self, self, self, v3, v4, v5);

}

- (void)configureMediaDestinationControllersForAccessories:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  objc_msgSend(v4, "na_map:", &__block_literal_global_585);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "na_each:", &__block_literal_global_587);
}

- (void)configureNaturalLightingWithDemoModeEnabled:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __55__HMDHome_configureNaturalLightingWithDemoModeEnabled___block_invoke;
  v6[3] = &unk_1E89C2758;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (id)accessoriesWithUUIDs:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __32__HMDHome_accessoriesWithUUIDs___block_invoke;
  v9[3] = &unk_1E89B53F8;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_filter:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)configureMediaGroupObjects
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && (objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue") & 1) != 0)
  {
    -[HMDHome configureMediaGroupsUnconfiguredParticipantOnboardingManager](self, "configureMediaGroupsUnconfiguredParticipantOnboardingManager");
    -[HMDHome configureMediaGroupsAggregator](self, "configureMediaGroupsAggregator");
    -[HMDHome configureMediaGroupsAggregateConsumer](self, "configureMediaGroupsAggregateConsumer");
  }
  else
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
}

- (HMFWiFiManager)wifiManager
{
  void (**v2)(void);
  void *v3;

  -[HMDHome wifiManagerFactory](self, "wifiManagerFactory");
  v2 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  v2[2]();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMFWiFiManager *)v3;
}

- (HMDDevice)currentDevice
{
  void *v2;
  void *v3;

  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDDevice *)v3;
}

- (void)didUpdateAggregateDataForMediaGroupsAggregateConsumer:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543362;
    v16 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating home graph due to updated media groups aggregate data", (uint8_t *)&v15, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome mergeMediaGroupsAggregateDataWithConsumer:](v6, "mergeMediaGroupsAggregateDataWithConsumer:", v4);
  -[HMDHome homeManager](v6, "homeManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    -[HMDHome uuid](v6, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("HMDMediaGroupsAggregateConsumerDelegateUpdatedAggregateData"), v10, 1);

    objc_msgSend(v9, "assistantSyncDataChanged:", CFSTR("HMDMediaGroupsAggregateConsumerDelegateUpdatedAggregateData"));
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = v6;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to update home graph for media groups due to no home manager", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)mergeMediaGroupsAggregateDataWithConsumer:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  -[HMDHome mergeMediaDestinationsWithConsumer:](self, "mergeMediaDestinationsWithConsumer:", v4);
  -[HMDHome mergeMediaDestinationControllerDataWithConsumer:](self, "mergeMediaDestinationControllerDataWithConsumer:", v4);
  -[HMDHome mediaSystemController](self, "mediaSystemController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allMediaSystemData");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "mergeMediaSystemData:", v5);
}

- (void)mergeMediaDestinationControllerDataWithConsumer:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __59__HMDHome_mergeMediaDestinationControllerDataWithConsumer___block_invoke;
  v7[3] = &unk_1E89BC3F8;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_each:", v7);

}

- (void)mergeMediaDestinationsWithConsumer:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;

  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke;
  v12[3] = &unk_1E89BC3F8;
  v7 = v4;
  v13 = v7;
  objc_msgSend(v5, "na_each:", v12);

  -[HMDHome mediaSystems](self, "mediaSystems");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke_2;
  v10[3] = &unk_1E89A4378;
  v11 = v7;
  v9 = v7;
  objc_msgSend(v8, "na_each:", v10);

}

- (id)routerForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  if (v10)
  {
    objc_msgSend(v10, "messageRouter");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to get router for unknown accessory uuid: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v11 = 0;
  }

  return v11;
}

- (id)receiverForParticipantAccessoryUUID:(id)a3 mediaGroupsLocalDataStorage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "mediaGroupParticipantDataLocalStorage");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "groupsBackupReceiver");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    v12 = v10;
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v16;
      v20 = 2112;
      v21 = v8;
      v22 = 2112;
      v23 = v9;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to get groups backup receiver with homeManager: %@ participantStorage: %@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
  }

  return v11;
}

- (void)configureMediaGroupsUnconfiguredParticipantOnboardingManager
{
  void *v3;
  uint64_t v4;
  void *v5;
  HMDMediaGroupsUnconfiguredParticipantOnboardingManager *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && (objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue") & 1) != 0)
  {
    -[HMDHome uuid](self, "uuid");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationCenter](self, "notificationCenter");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v3 && v4)
    {
      v6 = -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager initWithIdentifier:]([HMDMediaGroupsUnconfiguredParticipantOnboardingManager alloc], "initWithIdentifier:", v3);
      -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager setDataSource:](v6, "setDataSource:", self);
      -[HMDHome setMediaGroupsUnconfiguredParticipantOnboardingManager:](self, "setMediaGroupsUnconfiguredParticipantOnboardingManager:", v6);
      -[HMDHome mediaGroupsUnconfiguredParticipantOnboardingManager](self, "mediaGroupsUnconfiguredParticipantOnboardingManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "configureWithNotificationCenter:", v5);

    }
    else
    {
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543874;
        v17 = v15;
        v18 = 2112;
        v19 = v3;
        v20 = 2112;
        v21 = v5;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups unconfigured participant onboarding manager with dependencies homeUUID: %@ notificationCenter: %@", (uint8_t *)&v16, 0x20u);

      }
      objc_autoreleasePoolPop(v12);
    }

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", (uint8_t *)&v16, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
  }
}

- (void)configureMediaGroupsAggregator
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  HMDMediaGroupsAggregatorBackupSender *v10;
  HMDMediaGroupsAggregatorMessenger *v11;
  HMDMediaGroupsAggregator *v12;
  void *v13;
  HMDHome *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  HMDMediaGroupsLocalDataStorage *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && (objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue") & 1) != 0)
  {
    -[HMDHome uuid](self, "uuid");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](self, "homeManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationCenter](self, "notificationCenter");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome primaryResidentChangeMonitor](self, "primaryResidentChangeMonitor");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "eventForwarder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "localAndRemoteSubscriptionProvider");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "eventStoreReadHandle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v9 = objc_claimAutoreleasedReturnValue();
    v27 = (void *)v9;
    if (v3 && v29 && v28 && v6 && v7 && v8 && v9)
    {
      v10 = -[HMDMediaGroupsAggregatorBackupSender initWithIdentifier:]([HMDMediaGroupsAggregatorBackupSender alloc], "initWithIdentifier:", v3);
      v24 = -[HMDMediaGroupsLocalDataStorage initWithIdentifier:backupSender:]([HMDMediaGroupsLocalDataStorage alloc], "initWithIdentifier:backupSender:", v3, v10);
      v11 = objc_alloc_init(HMDMediaGroupsAggregatorMessenger);
      v25 = v5;
      v12 = -[HMDMediaGroupsAggregator initWithIdentifier:messenger:eventForwarder:subscriptionProvider:eventStoreReadHandle:groupsLocalDataStorage:]([HMDMediaGroupsAggregator alloc], "initWithIdentifier:messenger:eventForwarder:subscriptionProvider:eventStoreReadHandle:groupsLocalDataStorage:", v3, v11, v6, v7, v8, v24);
      -[HMDMediaGroupsAggregatorBackupSender setDataSource:](v10, "setDataSource:", v24);
      -[HMDMediaGroupsLocalDataStorage setDataSource:](v24, "setDataSource:", self);
      -[HMDMediaGroupsAggregatorMessenger setDataSource:](v11, "setDataSource:", self);
      -[HMDMediaGroupsAggregatorMessenger setDelegate:](v11, "setDelegate:", v12);
      -[HMDMediaGroupsAggregator setDataSource:](v12, "setDataSource:", self);
      -[HMDHome setMediaGroupsAggregator:](self, "setMediaGroupsAggregator:", v12);
      -[HMDHome mediaGroupsAggregator](self, "mediaGroupsAggregator");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = self;
      v15 = v27;
      objc_msgSend(v13, "configureWithHome:messageDispatcher:notificationCenter:primaryResidentChangeMonitor:", v14, v27, v29, v28);

      v5 = v25;
    }
    else
    {
      v26 = v8;
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138545666;
        v31 = v23;
        v32 = 2112;
        v33 = v3;
        v34 = 2112;
        v35 = v5;
        v36 = 2112;
        v37 = v29;
        v38 = 2112;
        v39 = v28;
        v40 = 2112;
        v41 = v6;
        v42 = 2112;
        v43 = v7;
        v44 = 2112;
        v45 = v26;
        v46 = 2112;
        v47 = v4;
        v48 = 2112;
        v49 = v27;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups aggregator with dependencies homeUUID: %@ homeManagerUUID: %@ notificationCenter: %@ primaryChangeMonitor: %@ eventForwarder: %@ subscriptionProvider: %@ eventStoreReadHandle: %@ homeManager: %@ message dispatcher: %@", buf, 0x66u);

      }
      objc_autoreleasePoolPop(v20);
      v8 = v26;
      v15 = v27;
    }

  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is not enabled", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
  }
}

- (id)participantDataTopicForAccessory:(id)a3 mediaGroupsAggregator:(id)a4
{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = (void *)MEMORY[0x1E0CBA240];
  v6 = *MEMORY[0x1E0CB7C20];
  v7 = a3;
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "topicFromSuffixID:homeUUID:accessoryUUID:", v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (id)eventSourceForMediaGroupsAggregator:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome homeManager](self, "homeManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentEventSource");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)roomsForMediaGroupsAggregator:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome rooms](self, "rooms", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

- (id)roomForAllDestinationParentIdentifiers:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    -[HMDHome accessoriesWithUUIDs:](self, "accessoriesWithUUIDs:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome mediaSystemsWithUUIDs:](self, "mediaSystemsWithUUIDs:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v4, "count");
    v8 = objc_msgSend(v5, "count");
    if (v7 == objc_msgSend(v6, "count") + v8)
    {
      objc_msgSend(v5, "firstObject");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "room");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10)
      {
        v12 = v10;
      }
      else
      {
        objc_msgSend(v6, "firstObject");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "room");
        v12 = (id)objc_claimAutoreleasedReturnValue();

      }
      v19 = MEMORY[0x1E0C809B0];
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke;
      v26[3] = &unk_1E89B53F8;
      v20 = v12;
      v27 = v20;
      if (objc_msgSend(v5, "na_allObjectsPassTest:", v26))
      {
        v24[0] = v19;
        v24[1] = 3221225472;
        v24[2] = __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke_2;
        v24[3] = &unk_1E89AA628;
        v21 = v20;
        v25 = v21;
        if (objc_msgSend(v6, "na_allObjectsPassTest:", v24))
          v22 = v21;
        else
          v22 = 0;
        v13 = v22;

      }
      else
      {
        v13 = 0;
      }

    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v29 = v17;
        v30 = 2112;
        v31 = v4;
        v32 = 2112;
        v33 = v5;
        v34 = 2112;
        v35 = v6;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to find room due to missing destination parent identifiers: %@ found accessories: %@ found media systems: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v14);
      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

- (void)configureMediaGroupsAggregateConsumer
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  HMDMediaGroupsStageManager *v9;
  HMDMediaGroupsAggregateConsumer *v10;
  HMDMediaGroupsAggregateConsumer *mediaGroupsAggregateConsumer;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (isFeatureHomeTheaterQFAEnabledForTests
    && (objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue") & 1) != 0)
  {
    -[HMDHome homeManager](self, "homeManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationCenter](self, "notificationCenter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "localAndRemoteSubscriptionProvider");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "userDefaults");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    if (v6 && v4 && v5 && v7)
    {
      v9 = -[HMDMediaGroupsStageManager initWithIdentifier:userDefaults:]([HMDMediaGroupsStageManager alloc], "initWithIdentifier:userDefaults:", v4, v7);
      v10 = -[HMDMediaGroupsAggregateConsumer initWithIdentifier:subscriptionProvider:notificationCenter:stageManager:]([HMDMediaGroupsAggregateConsumer alloc], "initWithIdentifier:subscriptionProvider:notificationCenter:stageManager:", v4, v6, v5, v9);
      mediaGroupsAggregateConsumer = self->_mediaGroupsAggregateConsumer;
      self->_mediaGroupsAggregateConsumer = v10;

      -[HMDMediaGroupsStageManager setDelegate:](v9, "setDelegate:", self->_mediaGroupsAggregateConsumer);
      -[HMDMediaGroupsAggregateConsumer setDelegate:](self->_mediaGroupsAggregateConsumer, "setDelegate:", self);
      -[HMDMediaGroupsAggregateConsumer configureWithHome:](self->_mediaGroupsAggregateConsumer, "configureWithHome:", self);

    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138544642;
        v21 = v19;
        v22 = 2112;
        v23 = v4;
        v24 = 2112;
        v25 = v6;
        v26 = 2112;
        v27 = v5;
        v28 = 2112;
        v29 = v8;
        v30 = 2112;
        v31 = v3;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media groups aggregate consumer with dependencies homeUUID: %@ subscriptionProvider: %@ notificationCenter: %@ userDefaults: %@ homeManager: %@", (uint8_t *)&v20, 0x3Eu);

      }
      objc_autoreleasePoolPop(v16);
    }

  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Home Theater QFA is disabled", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }
}

- (void)_handleRemoteGatewayNotificationRegistration:(id)a3 enable:(BOOL)a4
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v17 = a4;
  v24 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v20;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v10);
        v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v11);
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v14 = v13;
        else
          v14 = 0;
        v15 = v14;

        if (v15)
        {
          objc_msgSend(v6, "hmf_arrayForKey:", v11);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v16, "count"))
            objc_msgSend(v15, "handleRemoteGatewayNotificationRegistration:enable:enableTime:", v16, v17, v18);

        }
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v8);
  }

}

- (void)addCompanionAsResidentUser:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __38__HMDHome_addCompanionAsResidentUser___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5
{
  -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:](self, "redispatchToResidentMessage:target:responseQueue:viaDevice:", a3, a4, a5, 0);
}

- (void)redispatchToResidentMessage:(id)a3 target:(id)a4 responseQueue:(id)a5 viaDevice:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  HMDAssertionLogEvent *v16;
  HMDAssertionLogEvent *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  HMDRemoteDeviceMessageDestination *v30;
  void *v31;
  char v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  char v52;
  void *v53;
  HMDHome *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  HMDHome *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  _BOOL4 v69;
  void *v70;
  HMDHome *v71;
  NSObject *v72;
  _BOOL4 v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  HMDHome *v81;
  NSObject *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  id v90;
  id v91;
  void *v92;
  id v93;
  _QWORD v94[4];
  id v95;
  id v96;
  uint8_t buf[4];
  void *v98;
  __int16 v99;
  void *v100;
  __int16 v101;
  void *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v93 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  v92 = v10;
  if (v10)
  {
    v13 = v93;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    if (v15)
      v16 = (HMDAssertionLogEvent *)v13;
    else
      v16 = (HMDAssertionLogEvent *)objc_msgSend(v13, "mutableCopy");
    v17 = v16;

    -[HMDAssertionLogEvent responseHandler](v17, "responseHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      v94[0] = MEMORY[0x1E0C809B0];
      v94[1] = 3221225472;
      v94[2] = __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke;
      v94[3] = &unk_1E89BE018;
      v95 = v11;
      v96 = v18;
      -[HMDAssertionLogEvent setResponseHandler:](v17, "setResponseHandler:", v94);

    }
    -[HMDAssertionLogEvent name](v17, "name");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("kMultipleCharacteristicWriteRequestKey"));

    if (!isiOSDevice())
      goto LABEL_15;
    if (redispatchToResidentMessage_target_responseQueue_viaDevice__pred != -1)
      dispatch_once(&redispatchToResidentMessage_target_responseQueue_viaDevice__pred, &__block_literal_global_611);
    v21 = (void *)redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages;
    -[HMDAssertionLogEvent name](v17, "name");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v21) = objc_msgSend(v21, "containsObject:", v22);

    if (!(_DWORD)v21)
      goto LABEL_15;
    -[HMDHome currentUser](self, "currentUser");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "isRemoteAccessAllowed");

    if ((v24 & 1) == 0)
    {
      v91 = v11;
      v69 = -[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled");
      v70 = (void *)MEMORY[0x1D17BA0A0]();
      v71 = self;
      HMFGetOSLogHandle();
      v72 = objc_claimAutoreleasedReturnValue();
      v73 = os_log_type_enabled(v72, OS_LOG_TYPE_INFO);
      if (!v69)
      {
        if (v73)
        {
          HMFGetLogIdentifier();
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome currentUser](v71, "currentUser");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v78, "shortDescription");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v98 = v77;
          v99 = 2112;
          v100 = v79;
          _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_INFO, "%{public}@Remote access is disabled for the current user: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v70);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAssertionLogEvent respondWithError:](v17, "respondWithError:", v27);
        v11 = v91;
        goto LABEL_40;
      }
      if (v73)
      {
        HMFGetLogIdentifier();
        v88 = v70;
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome currentUser](v71, "currentUser");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "displayName");
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v98 = v74;
        v99 = 2112;
        v100 = v76;
        _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_INFO, "%{public}@Remote access is disabled for the user %@, restricting to local transports...", buf, 0x16u);

        v70 = v88;
      }

      objc_autoreleasePoolPop(v70);
      v25 = 1;
      v11 = v91;
    }
    else
    {
LABEL_15:
      v25 = 0;
    }
    -[HMDAssertionLogEvent messagePayload](v17, "messagePayload");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)objc_msgSend(v26, "mutableCopy");

    if (v25)
      -[HMDAssertionLogEvent setRemoteDisallowsIDSRacing:](v17, "setRemoteDisallowsIDSRacing:", 1);
    objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)v28;
    if (v12)
    {
      -[HMDAssertionLogEvent setSecureRemote:](v17, "setSecureRemote:", 1);
      v30 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:]([HMDRemoteDeviceMessageDestination alloc], "initWithTarget:device:", v92, v12);
      -[HMDAssertionLogEvent setDestination:](v17, "setDestination:", v30);

      objc_msgSend(v27, "setObject:forKeyedSubscript:", 0, CFSTR("kIDSMessageSourceIDKey"));
      if ((-[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled") & v20) == 1)
      {
        objc_msgSend(v12, "capabilities");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = objc_msgSend(v31, "supportsResidentFirstAccessoryCommunication");

        if ((v32 & 1) == 0)
          objc_msgSend(v27, "setObject:forKeyedSubscript:", 0, CFSTR("kMultiPartResponseKey"));
      }
      v33 = (void *)MEMORY[0x1D17BA0A0](-[HMDAssertionLogEvent setMessagePayload:](v17, "setMessagePayload:", v27));
      v34 = self;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v86 = v27;
        v89 = v18;
        v36 = v11;
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAssertionLogEvent shortDescription](v17, "shortDescription");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "shortDescription");
        v39 = v29;
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v98 = v37;
        v99 = 2112;
        v100 = v38;
        v101 = 2112;
        v102 = v40;
        _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to device: %@", buf, 0x20u);

        v29 = v39;
        v11 = v36;
        v27 = v86;
        v18 = v89;
      }

      objc_autoreleasePoolPop(v33);
      -[HMDAssertionLogEvent name](v17, "name");

      -[HMDAssertionLogEvent identifier](v17, "identifier");
      objc_msgSend(v12, "identifier");

      +[HMDSecureRemoteMessageTransport defaultTransport](HMDSecureRemoteMessageTransport, "defaultTransport");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = (void *)-[HMDAssertionLogEvent copy](v17, "copy");
      objc_msgSend(v41, "sendMessage:completionHandler:", v42, 0);
    }
    else
    {
      v85 = (void *)v28;
      v90 = v11;
      v43 = (void *)MEMORY[0x1D17BA0A0]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAssertionLogEvent shortDescription](v17, "shortDescription");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v98 = v46;
        v99 = 2112;
        v100 = v47;
        _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to resident", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v43);
      -[HMDHome homeManager](v44, "homeManager");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "messageDispatcher");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "residentCommunicationHandlerForHome:", v44);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v41, "preferredDevice");
      v50 = objc_claimAutoreleasedReturnValue();
      if (v50)
      {
        v42 = (void *)v50;
        if (v20)
        {
          if (-[HMDHome isResidentFirstAccessoryCommunicationEnabled](v44, "isResidentFirstAccessoryCommunicationEnabled"))
          {
            objc_msgSend(v42, "capabilities");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = objc_msgSend(v51, "supportsResidentFirstAccessoryCommunication");

            if ((v52 & 1) == 0)
              objc_msgSend(v27, "setObject:forKeyedSubscript:", 0, CFSTR("kMultiPartResponseKey"));
          }
        }
        v53 = (void *)MEMORY[0x1D17BA0A0](-[HMDAssertionLogEvent setMessagePayload:](v17, "setMessagePayload:", v27));
        v54 = v44;
        HMFGetOSLogHandle();
        v55 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v84 = v53;
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAssertionLogEvent shortDescription](v17, "shortDescription");
          v87 = v27;
          v57 = v18;
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "shortDescription");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v98 = v56;
          v99 = 2112;
          v100 = v58;
          v101 = 2112;
          v102 = v59;
          _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_INFO, "%{public}@Redispatching message %@ to remote device: %@", buf, 0x20u);

          v12 = 0;
          v18 = v57;
          v27 = v87;

          v53 = v84;
        }

        objc_autoreleasePoolPop(v53);
        v11 = v90;
        objc_msgSend(v41, "redispatchMessage:target:responseQueue:", v17, v92, v90);
      }
      else
      {
        v60 = (void *)MEMORY[0x1D17BA0A0]();
        v61 = v44;
        HMFGetOSLogHandle();
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAssertionLogEvent shortDescription](v17, "shortDescription");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome shortDescription](v61, "shortDescription");
          v65 = v27;
          v66 = v18;
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v98 = v63;
          v99 = 2112;
          v100 = v64;
          v101 = 2112;
          v102 = v67;
          _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_INFO, "%{public}@Cannot redispatch message %@ because there is no resident configured for home: %@", buf, 0x20u);

          v18 = v66;
          v27 = v65;

          v12 = 0;
        }

        objc_autoreleasePoolPop(v60);
        -[HMDHome uuid](v61, "uuid");

        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAssertionLogEvent respondWithError:](v17, "respondWithError:", v68);

        v42 = 0;
        v11 = v90;
      }
      v29 = v85;
    }

LABEL_40:
    goto LABEL_41;
  }
  v80 = (void *)MEMORY[0x1D17BA0A0]();
  v81 = self;
  HMFGetOSLogHandle();
  v82 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
  {
    HMFGetLogIdentifier();
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v98 = v83;
    _os_log_impl(&dword_1CD062000, v82, OS_LOG_TYPE_FAULT, "%{public}@Submitting ABC event for failure: TargetUUID cannot be nil", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v80);
  v17 = -[HMDAssertionLogEvent initWithReason:]([HMDAssertionLogEvent alloc], "initWithReason:", CFSTR("TargetUUID cannot be nil"));
  +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "submitLogEvent:", v17);
LABEL_41:

}

- (void)remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  BOOL v16;

  v8 = a4;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __93__HMDHome_remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke;
  v13[3] = &unk_1E89BCF10;
  v16 = a3;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)_remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 characteristicChangeThresholds:(id)a5
{
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  HMDHome *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id obj;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v30 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v9);

  if (a3)
  {
    -[HMDHome enableNotificationPayload](self, "enableNotificationPayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome disableNotificationPayload](self, "disableNotificationPayload");
  }
  else
  {
    -[HMDHome disableNotificationPayload](self, "disableNotificationPayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome enableNotificationPayload](self, "enableNotificationPayload");
  }
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  obj = v8;
  v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
  if (v36)
  {
    v35 = *(_QWORD *)v38;
    v31 = v10;
    do
    {
      for (i = 0; i != v36; ++i)
      {
        if (*(_QWORD *)v38 != v35)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_msgSend(v12, "accessory");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "UUIDString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v10, "objectForKeyedSubscript:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v16)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "setObject:forKeyedSubscript:", v16, v15);
          }
          objc_msgSend(v12, "instanceID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v16, "containsObject:", v17);

          if ((v18 & 1) == 0)
          {
            objc_msgSend(v12, "instanceID");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "addObject:", v19);

          }
          objc_msgSend(v34, "objectForKeyedSubscript:", v15);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v12, "instanceID");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v20, "containsObject:", v21);

          if (v22)
          {
            objc_msgSend(v12, "instanceID");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "removeObject:", v23);

            v24 = (void *)MEMORY[0x1D17BA0A0]();
            v25 = self;
            HMFGetOSLogHandle();
            v26 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              HMFBooleanToString();
              v32 = v24;
              v28 = self;
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v42 = v27;
              v43 = 2112;
              v44 = v29;
              v45 = 2112;
              v46 = v12;
              _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Function call to set notification to %@, removing the entry %@ from the other payload", buf, 0x20u);

              self = v28;
              v24 = v32;

              v10 = v31;
            }

            objc_autoreleasePoolPop(v24);
            if (!objc_msgSend(v20, "count"))
              objc_msgSend(v34, "removeObjectForKey:", v15);
          }

        }
      }
      v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
    }
    while (v36);
  }

  if (objc_msgSend(v10, "count") || objc_msgSend(v34, "count"))
    -[HMDHome _createModifyNotificationsCoalesceTimerIfNeeded](self, "_createModifyNotificationsCoalesceTimerIfNeeded");

}

- (void)_createModifyNotificationsCoalesceTimerIfNeeded
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  HMDHome *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 0, 0.5);
    -[HMDHome setModifyNotificationsCoalesceTimer:](self, "setModifyNotificationsCoalesceTimer:", v5);

    -[HMDHome workQueue](self, "workQueue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setDelegateQueue:", v6);

    -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setDelegate:", self);

    -[HMDHome modifyNotificationsCoalesceTimer](self, "modifyNotificationsCoalesceTimer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "resume");

    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v11;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@%@ Kicked off the modify notifications on resident request timer", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }
}

- (void)subscribeForNotificationsFromRemoteGateway
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __53__HMDHome_subscribeForNotificationsFromRemoteGateway__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)enableHomeNotificationsForMediaAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHome_enableHomeNotificationsForMediaAccessory___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)enableMediaNotifications:(BOOL)a3 directlyOnMediaAccessory:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  BOOL v16;

  v8 = a4;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __72__HMDHome_enableMediaNotifications_directlyOnMediaAccessory_completion___block_invoke;
  v13[3] = &unk_1E89BD720;
  v16 = a3;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)_modifyCharacteristicNotificationsOnResident:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6
{
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  const char *v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t i;
  id v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  const char *v38;
  id v39;
  id obj;
  _BOOL4 v41;
  HMDHome *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  void *v53;
  uint64_t v54;

  v41 = a6;
  v54 = *MEMORY[0x1E0C80C00];
  v39 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v11);

  v42 = self;
  -[HMDHome primaryResident](self, "primaryResident");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (isWatch())
  {
    -[HMDHome homeManager](v42, "homeManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "companionReachable");

    if (v14)
    {

      v12 = 0;
LABEL_11:
      v17 = v39;
      goto LABEL_12;
    }
  }
  if (!v12)
    goto LABEL_11;
  objc_msgSend(v12, "device");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isCurrentDevice");

  v17 = v39;
  if ((v16 & 1) != 0)
  {
LABEL_12:
    objc_msgSend(v12, "device");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "isCurrentDevice");

    if (v25)
    {
      v37 = v12;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      -[HMDHome residentEnabledDevices](v42, "residentEnabledDevices");
      obj = (id)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v44;
        v29 = "Disabling";
        if (v41)
          v29 = "Enabling";
        v38 = v29;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            v31 = v9;
            if (*(_QWORD *)v44 != v28)
              objc_enumerationMutation(obj);
            v32 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
            v33 = (void *)MEMORY[0x1D17BA0A0]();
            v34 = v42;
            HMFGetOSLogHandle();
            v35 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v49 = v36;
              v50 = 2080;
              v51 = v38;
              v52 = 2112;
              v53 = v32;
              _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@%s notifications with secondary resident %@", buf, 0x20u);

              v17 = v39;
            }

            objc_autoreleasePoolPop(v33);
            v9 = v31;
            -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:](v34, "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:", v17, v31, v10, v41, v32, 0);
          }
          v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
        }
        while (v27);
      }

      v12 = v37;
    }
    -[HMDHome _modifyCharacteristicNotificationsOnRemoteGateways:mediaNotifications:actionSetNotificationPayload:enableNotification:](v42, "_modifyCharacteristicNotificationsOnRemoteGateways:mediaNotifications:actionSetNotificationPayload:enableNotification:", v17, v9, v10, v41);
    goto LABEL_26;
  }
  objc_msgSend(v12, "device");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)MEMORY[0x1D17BA0A0]();
  v20 = v42;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = "Disabling";
    *(_DWORD *)buf = 138543874;
    v49 = v22;
    if (v41)
      v23 = "Enabling";
    v50 = 2080;
    v51 = v23;
    v52 = 2112;
    v53 = v18;
    _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@%s notifications with resident %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v19);
  -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:](v20, "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:", v39, v9, v10, v41, v18, 0);

LABEL_26:
}

- (void)_modifyCharacteristicNotificationsOnRemoteGateways:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6
{
  _BOOL8 v6;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  _BOOL8 v25;
  id v26;
  void *v27;
  __int128 v28;
  const char *v29;
  HMDHome *v30;
  void *v31;
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  void *v43;
  _BYTE v44[128];
  uint64_t v45;

  v6 = a6;
  v45 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v33 = a4;
  v32 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v11);

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  -[HMDHome _residentUsers](self, "_residentUsers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
  if (v13)
  {
    v15 = v13;
    v16 = *(_QWORD *)v35;
    if (v6)
      v17 = "Enabling";
    else
      v17 = "Disabling";
    v29 = v17;
    *(_QWORD *)&v14 = 138543874;
    v28 = v14;
    v30 = self;
    v31 = v12;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v35 != v16)
          objc_enumerationMutation(v12);
        v19 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        if (objc_msgSend(v19, "configurationState", v28) == 2)
        {
          objc_msgSend(v19, "userID");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v20);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          if (v21 && (objc_msgSend(v21, "isCurrentDevice") & 1) == 0)
          {
            v22 = (void *)MEMORY[0x1D17BA0A0]();
            v23 = self;
            HMFGetOSLogHandle();
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v25 = v6;
              v26 = v10;
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v28;
              v39 = v27;
              v40 = 2080;
              v41 = v29;
              v42 = 2112;
              v43 = v21;
              _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@%s notifications with remote gateway %@", buf, 0x20u);

              v10 = v26;
              v6 = v25;
              self = v30;
            }

            objc_autoreleasePoolPop(v22);
            -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:](v23, "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:", v10, v33, v32, v6, v21, 0);
            v12 = v31;
          }

        }
      }
      v15 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
    }
    while (v15);
  }

}

- (void)enableNotificationsForDevices:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHome_enableNotificationsForDevices___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_enableNotificationsForDevices:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  HMDHome *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **p_cache;
  __objc2_class *v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  __objc2_class *v53;
  void **v54;
  uint64_t v55;
  void *v56;
  int v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  char v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  HMDHome *v81;
  NSObject *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  HMDHome *v95;
  NSObject *v96;
  void *v97;
  NSObject *v98;
  os_log_type_t v99;
  const char *v100;
  HMDHome *v101;
  void *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t k;
  void *v108;
  void *v109;
  int v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  HMDHome *v116;
  NSObject *v117;
  void *v118;
  void *v119;
  void *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  id v125;
  void *v126;
  void *v127;
  id v128;
  void *v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  id obj;
  id obja;
  char objb;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  int v146;
  void *v147;
  HMDHome *v148;
  id v149;
  id v150;
  uint64_t v151;
  void *v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _BYTE v182[128];
  void *v183;
  _BYTE v184[128];
  _BYTE v185[128];
  _BYTE v186[128];
  _BYTE v187[128];
  _BYTE v188[128];
  uint8_t v189[128];
  uint8_t buf[4];
  void *v191;
  __int16 v192;
  id v193;
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v119 = v4;
  if (objc_msgSend(v4, "count"))
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v191 = v9;
      v192 = 2112;
      v193 = v119;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Enabling Notifications on %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome notificationRegistrations](v7, "notificationRegistrations");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v143 = objc_msgSend(v10, "count");

    -[HMDHome primaryResident](v7, "primaryResident");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "device");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (-[HMDHome isCurrentDeviceAvailableResident](v7, "isCurrentDeviceAvailableResident")
      && !-[HMDHome isCurrentDevicePrimaryResident](v7, "isCurrentDevicePrimaryResident"))
    {
      v180 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v13 = v119;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v178, v189, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v179;
        while (2)
        {
          for (i = 0; i != v15; ++i)
          {
            if (*(_QWORD *)v179 != v16)
              objc_enumerationMutation(v13);
            if ((objc_msgSend(*(id *)(*((_QWORD *)&v178 + 1) + 8 * i), "isEqual:", v12) & 1) != 0)
            {
              v146 = 1;
              goto LABEL_17;
            }
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v178, v189, 16);
          if (v15)
            continue;
          break;
        }
      }
      v146 = 0;
LABEL_17:

    }
    else
    {
      v146 = 0;
    }
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    v148 = v7;
    v174 = 0u;
    v175 = 0u;
    v176 = 0u;
    v177 = 0u;
    -[HMDHome triggers](v7, "triggers");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v142 = v12;
    v144 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v174, v188, 16);
    if (v144)
    {
      v140 = *(_QWORD *)v175;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v175 != v140)
            objc_enumerationMutation(obj);
          v151 = v18;
          v19 = *(id *)(*((_QWORD *)&v174 + 1) + 8 * v18);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v20 = v19;
          else
            v20 = 0;
          v21 = v20;

          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v149 = v21;
          objc_msgSend(v21, "characteristicEvents");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v170, v187, 16);
          if (v23)
          {
            v24 = v23;
            v25 = *(_QWORD *)v171;
            do
            {
              for (j = 0; j != v24; ++j)
              {
                if (*(_QWORD *)v171 != v25)
                  objc_enumerationMutation(v22);
                v27 = *(void **)(*((_QWORD *)&v170 + 1) + 8 * j);
                objc_msgSend(v27, "characteristic");
                v28 = (void *)objc_claimAutoreleasedReturnValue();

                if (v28)
                {
                  objc_msgSend(v27, "characteristic");
                  v29 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v147, "addObject:", v29);

                }
                else
                {
                  v30 = (void *)MEMORY[0x1D17BA0A0]();
                  v31 = v7;
                  HMFGetOSLogHandle();
                  v32 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                  {
                    HMFGetLogIdentifier();
                    v33 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543618;
                    v191 = v33;
                    v192 = 2112;
                    v193 = v27;
                    _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_ERROR, "%{public}@Characteristic of HMDCharacteristicEvent %@ is nil!", buf, 0x16u);

                  }
                  objc_autoreleasePoolPop(v30);
                }
                v12 = v142;
              }
              v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v170, v187, 16);
            }
            while (v24);
          }

          v18 = v151 + 1;
        }
        while (v151 + 1 != v144);
        v144 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v174, v188, 16);
      }
      while (v144);
    }

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v7;
    v121 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](v7);
    v166 = 0u;
    v167 = 0u;
    v168 = 0u;
    v169 = 0u;
    -[HMDHome accessories](v7, "accessories");
    v125 = (id)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v166, v186, 16);
    if (v35)
    {
      v36 = v35;
      v37 = *(_QWORD *)v167;
      v135 = *MEMORY[0x1E0D16198];
      p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
      v39 = HMDAggregationAnalysisLogEvent;
      v122 = *(_QWORD *)v167;
      do
      {
        v40 = 0;
        v123 = v36;
        do
        {
          if (*(_QWORD *)v167 != v37)
            objc_enumerationMutation(v125);
          v130 = v40;
          v41 = *(id *)(*((_QWORD *)&v166 + 1) + 8 * v40);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v42 = v41;
          else
            v42 = 0;
          v43 = v42;

          v44 = v41;
          v45 = v43;
          v46 = v44;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v47 = v46;
          else
            v47 = 0;
          v48 = v47;
          v129 = v46;

          if (!v45)
          {
            if (v48)
              v57 = v121;
            else
              v57 = 0;
            if (v57 != 1)
              goto LABEL_119;
            objc_msgSend(v48, "mediaProfile");
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            v126 = 0;
            if (v58)
            {
              if (v143)
              {
                -[HMDHome mediaNotificationPayloadForProfile:](v34, v58);
                v59 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v124, "addEntriesFromDictionary:", v59);

LABEL_117:
                goto LABEL_118;
              }
              v94 = (void *)MEMORY[0x1D17BA0A0]();
              v101 = v34;
              HMFGetOSLogHandle();
              v96 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                v97 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v191 = v97;
                v192 = 2112;
                v193 = v48;
                v98 = v96;
                v99 = OS_LOG_TYPE_DEBUG;
                v100 = "%{public}@Skipping enabling notifications for apple media accessory %@ because home notifications are disabled";
LABEL_115:
                _os_log_impl(&dword_1CD062000, v98, v99, v100, buf, 0x16u);

              }
            }
            else
            {
              v94 = (void *)MEMORY[0x1D17BA0A0]();
              v95 = v34;
              HMFGetOSLogHandle();
              v96 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v97 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v191 = v97;
                v192 = 2112;
                v193 = v48;
                v98 = v96;
                v99 = OS_LOG_TYPE_INFO;
                v100 = "%{public}@Skipping enabling notifications for apple media accessory without media profile: %@";
                goto LABEL_115;
              }
            }
            v37 = v122;

            objc_autoreleasePoolPop(v94);
            goto LABEL_117;
          }
          v128 = v48;
          if (shouldSkipRemoteAccessoryNotificationRegistration(v34, v45))
          {
            v49 = v45;
            v50 = (void *)MEMORY[0x1D17BA0A0]();
            v51 = v34;
            HMFGetOSLogHandle();
            v52 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v53 = v39;
              v54 = p_cache;
              v55 = v37;
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v191 = v56;
              v192 = 2112;
              v193 = v49;
              _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Dropping all characteristics for %@ from remote notification as partitioned network is no longer supported by residents", buf, 0x16u);

              v37 = v55;
              p_cache = v54;
              v39 = v53;
              v36 = v123;
            }

            objc_autoreleasePoolPop(v50);
            v45 = v49;
            v48 = v128;
            goto LABEL_119;
          }
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v141 = (void *)objc_claimAutoreleasedReturnValue();
          v162 = 0u;
          v163 = 0u;
          v164 = 0u;
          v165 = 0u;
          v126 = v45;
          objc_msgSend(v45, "services");
          v131 = (id)objc_claimAutoreleasedReturnValue();
          v133 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v162, v185, 16);
          if (!v133)
            goto LABEL_106;
          v132 = *(_QWORD *)v163;
          do
          {
            v60 = 0;
            do
            {
              if (*(_QWORD *)v163 != v132)
                objc_enumerationMutation(v131);
              v134 = v60;
              v61 = *(void **)(*((_QWORD *)&v162 + 1) + 8 * v60);
              v158 = 0u;
              v159 = 0u;
              v160 = 0u;
              v161 = 0u;
              v153 = v61;
              objc_msgSend(v61, "characteristics");
              v150 = (id)objc_claimAutoreleasedReturnValue();
              v62 = objc_msgSend(v150, "countByEnumeratingWithState:objects:count:", &v158, v184, 16);
              if (v62)
              {
                v63 = v62;
                v64 = *(_QWORD *)v159;
                do
                {
                  v65 = 0;
                  do
                  {
                    if (*(_QWORD *)v159 != v64)
                      objc_enumerationMutation(v150);
                    v66 = *(void **)(*((_QWORD *)&v158 + 1) + 8 * v65);
                    if (objc_msgSend(v66, "supportsNotification"))
                    {
                      -[HMDHome hapMetadata](v34, "hapMetadata");
                      v67 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v66, "type");
                      v68 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v153, "type");
                      v69 = (void *)objc_claimAutoreleasedReturnValue();
                      v70 = objc_msgSend(v67, "shouldFilterEnableNotificationsForCharacteristicType:serviceType:", v68, v69);

                      if ((v70 & 1) == 0)
                      {
                        objc_msgSend(v66, "type");
                        v152 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v153, "type");
                        v71 = (void *)objc_claimAutoreleasedReturnValue();
                        -[HMDHome notificationRegistry](v34, "notificationRegistry");
                        v72 = (void *)objc_claimAutoreleasedReturnValue();
                        v183 = v66;
                        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v183, 1);
                        v73 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v72, "usersRegisteredForNotificationsForCharacteristics:", v73);
                        v74 = (void *)objc_claimAutoreleasedReturnValue();
                        v75 = (void *)objc_msgSend(v74, "mutableCopy");

                        objc_msgSend(v12, "remoteDestinationString");
                        v76 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v76)
                          objc_msgSend(v75, "removeObject:", v76);
                        v77 = objc_msgSend(v75, "count");
                        if ((objc_msgSend(v147, "containsObject:", v66) & 1) != 0
                          || (objc_msgSend(v66, "isNonHomeNotificationsEnabled") & 1) != 0)
                        {
                          goto LABEL_83;
                        }
                        -[HMDHome hapMetadata](v148, "hapMetadata");
                        v78 = (void *)objc_claimAutoreleasedReturnValue();
                        if ((objc_msgSend(v78, "requiresDeviceUnlock:forService:", v152, v71) & 1) == 0)
                        {
                          -[HMDHome hapMetadata](v148, "hapMetadata");
                          v79 = (void *)objc_claimAutoreleasedReturnValue();
                          if ((objc_msgSend(v79, "shouldAutoEnableNotificationForCharacteristic:ofService:", v152, v71) & 1) == 0
                            && (!objc_msgSend(v152, "isEqualToString:", CFSTR("000000A6-0000-1000-8000-0026BB765291"))|| (objc_msgSend(v71, "isEqualToString:", v135) & 1) == 0))
                          {
                            if (v143)
                            {
                              -[HMDHome hapMetadata](v148, "hapMetadata");
                              v136 = (void *)objc_claimAutoreleasedReturnValue();
                              objb = objc_msgSend(v136, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v152, v71);

                              v12 = v142;
                              if ((objb & 1) != 0)
                                goto LABEL_83;
                            }
                            else
                            {

                              v12 = v142;
                            }
                            if (v77)
                            {
LABEL_83:
                              if (v146
                                && objc_msgSend(v66, "isNotificationEnabledForClientIdentifierPrefix:", CFSTR("com.apple.HomeKitDaemon.Local")))
                              {
                                v80 = (void *)MEMORY[0x1D17BA0A0]();
                                v81 = v148;
                                HMFGetOSLogHandle();
                                v82 = objc_claimAutoreleasedReturnValue();
                                if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
                                {
                                  HMFGetLogIdentifier();
                                  obja = v80;
                                  v83 = (void *)objc_claimAutoreleasedReturnValue();
                                  *(_DWORD *)buf = 138543618;
                                  v191 = v83;
                                  v192 = 2112;
                                  v193 = v66;
                                  _os_log_impl(&dword_1CD062000, v82, OS_LOG_TYPE_INFO, "%{public}@Dropping characteristic for remote notifications from primary resident because it should be local only: %@", buf, 0x16u);

                                  v80 = obja;
                                }

                                objc_autoreleasePoolPop(v80);
                                v12 = v142;
                              }
                              else
                              {
                                objc_msgSend(v66, "instanceID");
                                v84 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v145, "addObject:", v84);

                                objc_msgSend(v66, "changeThresholdForEnabledNotifications");
                                v85 = (void *)objc_claimAutoreleasedReturnValue();
                                if (v85 && !v143)
                                {
                                  objc_msgSend(v66, "instanceID");
                                  v86 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(v86, "stringValue");
                                  v87 = (void *)objc_claimAutoreleasedReturnValue();
                                  objc_msgSend(v141, "setObject:forKeyedSubscript:", v85, v87);

                                }
                              }
                            }

                            v34 = v148;
                            goto LABEL_93;
                          }

                          v12 = v142;
                        }

                        goto LABEL_83;
                      }
                    }
LABEL_93:
                    ++v65;
                  }
                  while (v63 != v65);
                  v88 = objc_msgSend(v150, "countByEnumeratingWithState:objects:count:", &v158, v184, 16);
                  v63 = v88;
                }
                while (v88);
              }

              v60 = v134 + 1;
            }
            while (v134 + 1 != v133);
            v133 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v162, v185, 16);
          }
          while (v133);
LABEL_106:

          objc_msgSend(v129, "uuid");
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v89, "UUIDString");
          v90 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v145, "count"))
          {
            v91 = (void *)objc_msgSend(v145, "copy");
            objc_msgSend(v127, "setObject:forKeyedSubscript:", v91, v90);

          }
          v92 = v141;
          v37 = v122;
          v36 = v123;
          p_cache = (void **)(HMDCloudSyncLegacyFetchLogEvent + 16);
          v39 = HMDAggregationAnalysisLogEvent;
          v48 = v128;
          if (objc_msgSend(v141, "count"))
          {
            v93 = (void *)objc_msgSend(v141, "copy");
            objc_msgSend(v120, "setObject:forKeyedSubscript:", v93, v90);

            v92 = v141;
          }

LABEL_118:
          v45 = v126;
LABEL_119:

          v40 = v130 + 1;
        }
        while (v130 + 1 != v36);
        v36 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v166, v186, 16);
      }
      while (v36);
    }

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v127, "count");
    if (objc_msgSend(v127, "count") || objc_msgSend(v124, "count"))
    {
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v103 = v119;
      v104 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v154, v182, 16);
      if (v104)
      {
        v105 = v104;
        v106 = *(_QWORD *)v155;
        do
        {
          for (k = 0; k != v105; ++k)
          {
            if (*(_QWORD *)v155 != v106)
              objc_enumerationMutation(v103);
            v108 = *(void **)(*((_QWORD *)&v154 + 1) + 8 * k);
            objc_msgSend(v108, "capabilities");
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            v110 = objc_msgSend(v109, "supportsUnifiedMediaNotifications");

            if (v110)
              v111 = (void *)objc_msgSend(v124, "copy");
            else
              v111 = 0;
            v112 = (void *)objc_msgSend(v127, "copy");
            v113 = (void *)objc_msgSend(v111, "copy");
            v114 = (void *)objc_msgSend(v102, "copy");
            -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:](v148, "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:", v112, v113, v114, 1, v108);

          }
          v105 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v154, v182, 16);
        }
        while (v105);
      }

      v12 = v142;
    }
    else
    {
      v115 = (void *)MEMORY[0x1D17BA0A0]();
      v116 = v34;
      HMFGetOSLogHandle();
      v117 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v191 = v118;
        _os_log_impl(&dword_1CD062000, v117, OS_LOG_TYPE_INFO, "%{public}@There are no characteristics/media properties requiring registration", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v115);
    }

  }
}

- (void)disableNotificationsForDevices:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHome_disableNotificationsForDevices___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_disableNotificationsForDevices:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  HMDHome *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t k;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  int v55;
  BOOL v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  HMDHome *v62;
  NSObject *v63;
  void *v64;
  void *v65;
  id obj;
  uint64_t v67;
  void *v68;
  id v69;
  id v70;
  void *v71;
  uint64_t v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  int v80;
  HMDHome *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[128];
  _BYTE v103[128];
  _BYTE v104[128];
  _BYTE v105[128];
  uint8_t v106[128];
  uint8_t buf[4];
  void *v108;
  __int16 v109;
  id v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (objc_msgSend(v4, "count"))
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v108 = v9;
      v109 = 2112;
      v110 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Disabling Notifications on %@", buf, 0x16u);

    }
    v65 = v4;

    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](v7);
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v101 = 0u;
    -[HMDHome accessories](v7, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v10 = v7;
    v81 = v7;
    v69 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v98, v106, 16);
    if (v69)
    {
      v67 = *(_QWORD *)v99;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v99 != v67)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)v11);
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = v12;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v15 = v14;
          else
            v15 = 0;
          v16 = v15;

          v17 = v14;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v18 = v17;
          else
            v18 = 0;
          v19 = v18;

          if (v16)
          {
            v71 = v17;
            v73 = v19;
            v78 = v11;
            v96 = 0u;
            v97 = 0u;
            v94 = 0u;
            v95 = 0u;
            v75 = v16;
            objc_msgSend(v16, "services");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v94, v105, 16);
            if (v21)
            {
              v22 = v21;
              v23 = *(_QWORD *)v95;
              do
              {
                for (i = 0; i != v22; ++i)
                {
                  if (*(_QWORD *)v95 != v23)
                    objc_enumerationMutation(v20);
                  v25 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * i);
                  v90 = 0u;
                  v91 = 0u;
                  v92 = 0u;
                  v93 = 0u;
                  objc_msgSend(v25, "characteristics");
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v90, v104, 16);
                  if (v27)
                  {
                    v28 = v27;
                    v29 = *(_QWORD *)v91;
                    do
                    {
                      for (j = 0; j != v28; ++j)
                      {
                        if (*(_QWORD *)v91 != v29)
                          objc_enumerationMutation(v26);
                        v31 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * j);
                        if (objc_msgSend(v31, "supportsNotification"))
                        {
                          objc_msgSend(v31, "instanceID");
                          v32 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v13, "addObject:", v32);

                        }
                      }
                      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v90, v104, 16);
                    }
                    while (v28);
                  }

                }
                v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v94, v105, 16);
              }
              while (v22);
            }

            objc_msgSend(v71, "uuid");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "UUIDString");
            v34 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v13, "count"))
            {
              v35 = (void *)objc_msgSend(v13, "copy");
              objc_msgSend(v77, "setObject:forKeyedSubscript:", v35, v34);

            }
            v10 = v81;
            v11 = v78;
            v19 = v73;
            v16 = v75;
LABEL_35:

            goto LABEL_36;
          }
          if (v19)
          {
            objc_msgSend(v19, "mediaProfile");
            v36 = objc_claimAutoreleasedReturnValue();
            if (v36)
            {
              v34 = (void *)v36;
              objc_msgSend(v68, "addObject:", v36);
            }
            else
            {
              v37 = (void *)MEMORY[0x1D17BA0A0]();
              v38 = v10;
              HMFGetOSLogHandle();
              v39 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v108 = v40;
                v109 = 2112;
                v110 = v19;
                _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@skipping disabling notifications for apple media accessory without media profile: %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v37);
              v34 = 0;
            }
            goto LABEL_35;
          }
LABEL_36:

          v11 = (char *)v11 + 1;
        }
        while (v11 != v69);
        v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v98, v106, 16);
        v69 = (id)v41;
      }
      while (v41);
    }

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v77, "count") || objc_msgSend(v68, "count"))
    {
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v70 = v65;
      v76 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v86, v103, 16);
      if (v76)
      {
        v72 = *(_QWORD *)v87;
        do
        {
          v42 = 0;
          do
          {
            if (*(_QWORD *)v87 != v72)
              objc_enumerationMutation(v70);
            v79 = v42;
            v43 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v42);
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v82 = 0u;
            v83 = 0u;
            v84 = 0u;
            v85 = 0u;
            v45 = v68;
            v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v82, v102, 16);
            if (v46)
            {
              v47 = v46;
              v48 = *(_QWORD *)v83;
              do
              {
                for (k = 0; k != v47; ++k)
                {
                  if (*(_QWORD *)v83 != v48)
                    objc_enumerationMutation(v45);
                  v50 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * k);
                  objc_msgSend(v50, "accessory");
                  v51 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                    v52 = v51;
                  else
                    v52 = 0;
                  v53 = v52;

                  if (!v53
                    || ((objc_msgSend(v53, "device"), v54 = (void *)objc_claimAutoreleasedReturnValue(), v54 != v43)
                      ? (v55 = 1)
                      : (v55 = v80),
                        v54,
                        v56 = v55 == 1,
                        v10 = v81,
                        v56))
                  {
                    -[HMDHome mediaNotificationPayloadForProfile:](v10, v50);
                    v57 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v44, "addEntriesFromDictionary:", v57);

                  }
                }
                v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v82, v102, 16);
              }
              while (v47);
            }

            v58 = (void *)objc_msgSend(v77, "copy");
            v59 = (void *)objc_msgSend(v44, "copy");
            v60 = (void *)objc_msgSend(v74, "copy");
            -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:](v10, "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:", v58, v59, v60, 0, v43);

            v42 = v79 + 1;
          }
          while (v79 + 1 != v76);
          v76 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v86, v103, 16);
        }
        while (v76);
      }

      v4 = v65;
    }
    else
    {
      v61 = (void *)MEMORY[0x1D17BA0A0]();
      v62 = v10;
      HMFGetOSLogHandle();
      v63 = objc_claimAutoreleasedReturnValue();
      v4 = v65;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v108 = v64;
        _os_log_impl(&dword_1CD062000, v63, OS_LOG_TYPE_INFO, "%{public}@There are no characteristics requiring deregistration", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v61);
    }

  }
}

- (void)registerCameraReachabilityEventNotificationsWithCompletionHandler:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __77__HMDHome_registerCameraReachabilityEventNotificationsWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E89C1D68;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_registerCameraReachabilityEventNotificationsWithCompletionHandler:(id)a3
{
  NSObject *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **p_cache;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  void *v22;
  void **v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id obj;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v29 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v4);

  v5 = objc_alloc(MEMORY[0x1E0C99DE8]);
  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = (void *)objc_msgSend(v5, "initWithCapacity:", objc_msgSend(v6, "count"));

  v7 = objc_alloc(MEMORY[0x1E0C99DE8]);
  -[HMDHome accessories](self, "accessories");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = (void *)objc_msgSend(v7, "initWithCapacity:", objc_msgSend(v8, "count"));

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  -[HMDHome accessories](self, "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v35;
    p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
    v30 = *(_QWORD *)v35;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v35 != v11)
          objc_enumerationMutation(obj);
        v14 = *(id *)(*((_QWORD *)&v34 + 1) + 8 * v13);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v15 = v14;
        else
          v15 = 0;
        v16 = v15;

        objc_msgSend(v16, "cameraProfiles");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "count");

        if (v18)
        {
          -[HMDHome accountSettings](self, "accountSettings");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v19, "isHomeEnabled") & 1) != 0)
          {
            objc_msgSend(v16, "cameraProfileSettingsManager");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "currentSettings");
            v21 = self;
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "notificationSettings");
            v23 = p_cache;
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = objc_msgSend(v24, "isReachabilityEventNotificationEnabled");

            p_cache = v23;
            self = v21;
            v11 = v30;

            v26 = v31;
            if ((v25 & 1) != 0)
              goto LABEL_15;
          }
          else
          {

          }
          v26 = v32;
LABEL_15:
          objc_msgSend(v26, "addObject:", v16);
        }

        ++v13;
      }
      while (v10 != v13);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    }
    while (v10);
  }

  v27 = (void *)objc_msgSend(v31, "copy");
  v28 = (void *)objc_msgSend(v32, "copy");
  -[HMDHome _registerResidentReachabilityNotificationWithEnableAccessories:disableAccessories:completionHandler:](self, "_registerResidentReachabilityNotificationWithEnableAccessories:disableAccessories:completionHandler:", v27, v28, v29);

}

- (void)setCameraReachabilityEventNotificationsEnabled:(BOOL)a3 forAccessory:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  BOOL v16;

  v8 = a4;
  v9 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __89__HMDHome_setCameraReachabilityEventNotificationsEnabled_forAccessory_completionHandler___block_invoke;
  v13[3] = &unk_1E89BD720;
  v16 = a3;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (BOOL)_canCurrentDeviceRegisterForReachabilityEventNotification
{
  NSObject *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  if (!isWatch() && !isAppleTV() && !isHomePod())
    return 1;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = self;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v7;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEBUG, "%{public}@Skipping registering for reachability notification on watch / ATV / HomePod", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  return 0;
}

- (void)_registerResidentReachabilityNotificationWithEnableAccessories:(id)a3 disableAccessories:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, void *);
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  unsigned __int8 v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  HMDRemoteDeviceMessageDestination *v37;
  void *v38;
  void *v39;
  HMDRemoteDeviceMessageDestination *v40;
  void *v41;
  void *v42;
  HMDHome *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD v57[5];
  void (**v58)(id, void *);
  _QWORD v59[2];
  _QWORD v60[2];
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  void *v66;
  __int16 v67;
  void *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, void *))a5;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v11);

  if (!-[HMDHome _canCurrentDeviceRegisterForReachabilityEventNotification](self, "_canCurrentDeviceRegisterForReachabilityEventNotification"))
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      goto LABEL_13;
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v62 = v22;
    v23 = "%{public}@Current device is either watch or resident, do not have to send remote message for remote reachabili"
          "ty event notification registration";
    v24 = v21;
    v25 = OS_LOG_TYPE_DEBUG;
    goto LABEL_12;
  }
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "availableResidentDevices");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");

  if (!v14)
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v62 = v22;
    v23 = "%{public}@There is no resident available to register for reachability event notification";
    v24 = v21;
    v25 = OS_LOG_TYPE_ERROR;
LABEL_12:
    _os_log_impl(&dword_1CD062000, v24, v25, v23, buf, 0xCu);

LABEL_13:
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
      v10[2](v10, v26);
    goto LABEL_26;
  }
  if (!-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "isConfirmed");
    -[HMDHome primaryResident](self, "primaryResident");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "capabilities");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "supportsCameraRecordingReachabilityNotifications");

    if (!v26 || ((v27 ^ 1) & 1) != 0 || v30 != 1)
    {
      v48 = (void *)MEMORY[0x1D17BA0A0]();
      v49 = self;
      HMFGetOSLogHandle();
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v62 = v51;
        v63 = 2112;
        v64 = v52;
        v65 = 2112;
        v66 = v53;
        v67 = 2112;
        v68 = v26;
        _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not confirmed (%@) or does not support camera recording reachability notifications (%@): %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v48);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
        v10[2](v10, v47);
    }
    else
    {
      objc_msgSend(v8, "na_map:", &__block_literal_global_629);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "copy");

      objc_msgSend(v9, "na_map:", &__block_literal_global_630);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v33, "copy");

      v59[0] = CFSTR("HMDAccessoryResidentReachabilityNotificationEnableAccessoryUUIDsMessageKey");
      v59[1] = CFSTR("HMDAccessoryResidentReachabilityNotificationDisableAccessoryUUIDsMessageKey");
      v55 = (void *)v34;
      v56 = (void *)v32;
      v60[0] = v32;
      v60[1] = v34;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, v59, 2);
      v35 = v26;
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = [HMDRemoteDeviceMessageDestination alloc];
      -[HMDHome uuid](self, "uuid");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = v35;
      objc_msgSend(v35, "device");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v37, "initWithTarget:device:", v38, v39);
      +[HMDRemoteMessage secureMessageWithName:destination:messagePayload:](HMDRemoteMessage, "secureMessageWithName:destination:messagePayload:", CFSTR("HMDAccessoryResidentReachabilityNotificationRegistrationMessage"), v40, v36);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      v57[0] = MEMORY[0x1E0C809B0];
      v57[1] = 3221225472;
      v57[2] = __111__HMDHome__registerResidentReachabilityNotificationWithEnableAccessories_disableAccessories_completionHandler___block_invoke_3;
      v57[3] = &unk_1E89BE018;
      v57[4] = self;
      v58 = v10;
      v42 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v41, "setResponseHandler:", v57));
      v43 = self;
      HMFGetOSLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v62 = v45;
        v63 = 2112;
        v64 = v41;
        v65 = 2112;
        v66 = v36;
        _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_INFO, "%{public}@Sending reachability notification registration message %@ with payload: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v42);
      -[HMDHome msgDispatcher](v43, "msgDispatcher");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "sendMessage:", v41);

      v47 = v56;
      v26 = v54;
    }

LABEL_26:
    goto LABEL_27;
  }
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v62 = v18;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Current device is confirmed primary resident, do not need to register for notification on confirmed primary resident itself", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v15);
  if (v10)
    v10[2](v10, 0);
LABEL_27:

}

- (void)resubscribeForNotificationsOnResident:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHome_resubscribeForNotificationsOnResident___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_resubscribeForNotificationsOnResident:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t v48[128];
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  id v52;
  __int16 v53;
  void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHome primaryResident](self, "primaryResident");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "device");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v50 = v11;
    v51 = 2112;
    v52 = v4;
    v53 = 2112;
    v54 = v7;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Resubscribing for notifications - previousResidentDevice: %@, current primaryResident: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  v43 = v4;
  if (isWatch()
    && (-[HMDHome homeManager](v9, "homeManager"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v13 = objc_msgSend(v12, "companionReachable"),
        v12,
        v13))
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = v9;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v50 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Subscribing to companion", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);

    v42 = 0;
  }
  else
  {
    v42 = v7;
  }
  -[HMDHome residentEnabledDevices](v9, "residentEnabledDevices");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  -[HMDHome _residentUsers](v9, "_residentUsers");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v45 != v22)
          objc_enumerationMutation(v19);
        v24 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
        if (objc_msgSend(v24, "configurationState") == 2)
        {
          objc_msgSend(v24, "userID");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          if (v26 && (objc_msgSend(v26, "isCurrentDevice") & 1) == 0)
            objc_msgSend(v18, "addObject:", v26);

        }
      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
    }
    while (v21);
  }

  if (objc_msgSend(v41, "count") || objc_msgSend(v18, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v18, "count") + objc_msgSend(v41, "count"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v18, "count") + objc_msgSend(v41, "count"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = v42;
    if (objc_msgSend(v42, "isCurrentDevice"))
    {
      objc_msgSend(v27, "addObjectsFromArray:", v41);
      objc_msgSend(v27, "addObjectsFromArray:", v18);
      v30 = v43;
    }
    else
    {
      v30 = v43;
      if (v43)
        objc_msgSend(v28, "addObject:", v43);
      else
        objc_msgSend(v28, "addObjectsFromArray:", v18);
      if (v42)
        objc_msgSend(v27, "addObject:", v42);
      else
        objc_msgSend(v27, "addObjectsFromArray:", v18);
    }
    v31 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v28, "minusSet:", v27));
    v32 = v9;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v50 = v34;
      _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to initial home launch or change in primary resident.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v31);
    if (objc_msgSend(v28, "count"))
    {
      objc_msgSend(v28, "allObjects");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _disableNotificationsForDevices:](v32, "_disableNotificationsForDevices:", v35);

    }
    if (objc_msgSend(v27, "count"))
    {
      objc_msgSend(v27, "allObjects");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _enableNotificationsForDevices:](v32, "_enableNotificationsForDevices:", v36);

    }
    -[HMDHome _updateDirectAppleMediaNotificationsOnResidentChange:previousResidentDevice:](v32, v42, v30);

  }
  else
  {
    v37 = (void *)MEMORY[0x1D17BA0A0]();
    v38 = v9;
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    v29 = v42;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v50 = v40;
      _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@There are no resident devices or remote gateways to register with", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v37);
    v30 = v43;
  }

}

- (BOOL)shouldRestrictAllMessagingToLocalTransportsForUser:(id)a3
{
  id v4;
  _BOOL4 v5;

  v4 = a3;
  if (isiOSDevice())
  {
    v5 = -[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled");
    LOBYTE(self) = 0;
    if (v4 && v5)
      LODWORD(self) = objc_msgSend(v4, "isRemoteAccessAllowed") ^ 1;
  }
  else
  {
    LOBYTE(self) = 0;
  }

  return (char)self;
}

- (void)modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[5];
  id v22;
  id v23;
  id v24;
  id v25;
  BOOL v26;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a7;
  -[HMDHome workQueue](self, "workQueue");
  v16 = objc_claimAutoreleasedReturnValue();
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __123__HMDHome_modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice___block_invoke;
  v21[3] = &unk_1E89B6E60;
  v21[4] = self;
  v22 = v12;
  v23 = v13;
  v24 = v14;
  v26 = a6;
  v25 = v15;
  v17 = v15;
  v18 = v14;
  v19 = v13;
  v20 = v12;
  dispatch_async(v16, v21);

}

- (void)_modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7
{
  -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:](self, "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:", a3, a4, a5, a6, a7, 0);
}

- (void)_modifyCharacteristicNotifications:(id)a3 mediaNotifications:(id)a4 actionSetNotificationPayload:(id)a5 enableNotification:(BOOL)a6 withDevice:(id)a7 completion:(id)a8
{
  _BOOL8 v10;
  id v14;
  id v15;
  id v16;
  void (**v17)(id, _QWORD);
  NSObject *v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _BOOL4 v28;
  uint64_t v29;
  HMDRemoteDeviceMessageDestination *v30;
  void *v31;
  HMDRemoteDeviceMessageDestination *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  id v40;
  _QWORD v41[4];
  id v42;
  id v43;
  void (**v44)(id, _QWORD);
  id v45;
  BOOL v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  id v50;
  const __CFString *v51;
  _QWORD v52[2];

  v10 = a6;
  v52[1] = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a4;
  v40 = a5;
  v16 = a7;
  v17 = (void (**)(id, _QWORD))a8;
  -[HMDHome workQueue](self, "workQueue");
  v18 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v18);

  v19 = objc_msgSend(v16, "isCurrentDevice");
  if (!(_DWORD)v19)
  {
    v51 = CFSTR("kCharacteristicNotificationEnableKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10, v40);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v52[0] = v25;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52, &v51, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(v26, "mutableCopy");

    if (objc_msgSend(v14, "count"))
    {
      objc_msgSend(v24, "setObject:forKeyedSubscript:", v14, CFSTR("kCharacteristicNotificationsKey"));
      if (!objc_msgSend(v15, "count"))
        goto LABEL_11;
    }
    else if (!objc_msgSend(v15, "count"))
    {
      v36 = (void *)MEMORY[0x1D17BA0A0]();
      v37 = self;
      HMFGetOSLogHandle();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v48 = v39;
        v49 = 2112;
        v50 = v16;
        _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_INFO, "%{public}@Skipping modifying notifications with remote gateway %@ as there is nothing to modify", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v36);
      if (v17)
        v17[2](v17, 0);
      goto LABEL_15;
    }
    objc_msgSend(v24, "setObject:forKeyedSubscript:", v15, CFSTR("kMediaNotificationsKey"));
LABEL_11:
    -[HMDHome currentUser](self, "currentUser");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = -[HMDHome shouldRestrictAllMessagingToLocalTransportsForUser:](self, "shouldRestrictAllMessagingToLocalTransportsForUser:", v27);

    if (v28)
      v29 = 14;
    else
      v29 = -1;
    v30 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v30, "initWithTarget:device:", v31, v16);

    +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "secureMessageWithName:qualityOfService:destination:messagePayload:restriction:", CFSTR("kModifyCharacterisiticNotificationsRequestKey"), 17, v32, v24, v29);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak((id *)buf, self);
    v41[0] = MEMORY[0x1E0C809B0];
    v41[1] = 3221225472;
    v41[2] = __135__HMDHome__modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice_completion___block_invoke;
    v41[3] = &unk_1E89A4470;
    objc_copyWeak(&v45, (id *)buf);
    v44 = v17;
    v42 = v16;
    v43 = v14;
    v46 = v10;
    objc_msgSend(v33, "setResponseHandler:", v41);
    -[HMDHome homeManager](self, "homeManager");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "messageDispatcher");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "sendMessage:completionHandler:", v33, 0);

    objc_destroyWeak(&v45);
    objc_destroyWeak((id *)buf);

    goto LABEL_15;
  }
  v20 = (void *)MEMORY[0x1D17BA0A0](v19);
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v48 = v23;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Cannot modify notifications with current device", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v20);
  if (v17)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 3, v40);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, void *))v17)[2](v17, v24);
LABEL_15:

  }
}

- (void)auditUsersForNotifications:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __38__HMDHome_auditUsersForNotifications___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleAccessoryReachabilityEventNotificationsRegistration:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v32 = v9;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received message to handle accessory reachability event notification registration", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "hmf_arrayForKey:", CFSTR("HMDAccessoryResidentReachabilityNotificationEnableAccessoryUUIDsMessageKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "messagePayload");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "hmf_arrayForKey:", CFSTR("HMDAccessoryResidentReachabilityNotificationDisableAccessoryUUIDsMessageKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v11, "count") || objc_msgSend(v13, "count"))
  {
    objc_msgSend(v11, "na_map:", &__block_literal_global_634);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "na_map:", &__block_literal_global_635);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "hmf_stringForKey:", CFSTR("HMDAccessoryResidentReachabilityNotificationUserIDMessageKey"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v16)
    {
      objc_msgSend(v4, "remoteSourceID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
    }
    -[HMDHome notificationRegistry](v7, "notificationRegistry");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v17, "enableReachabilityEventNotificationForAccessoryUUIDs:forUserID:", v14, v16) & 1) != 0)
    {
      v18 = 1;
    }
    else
    {
      -[HMDHome notificationRegistry](v7, "notificationRegistry");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v19, "disableReachabilityEventNotificationForAccessoryUUIDs:forUserID:", v30, v16);

    }
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = v7;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v23 = v11;
      v24 = v13;
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v32 = v25;
      v33 = 2112;
      v34 = v14;
      v35 = 2112;
      v36 = v30;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Changed reachability event notification registration for enableAccessoryUUIDs : %@ and disableAccessoryUUIDs : %@", buf, 0x20u);

      v13 = v24;
      v11 = v23;
    }

    objc_autoreleasePoolPop(v20);
    if (v18)
      -[HMDHome saveToCurrentAccountWithReason:](v21, "saveToCurrentAccountWithReason:", CFSTR("HMDAccessoryResidentReachabilityNotificationRegistrationMessage"));
    objc_msgSend(v4, "respondWithSuccess");

  }
  else
  {
    v26 = (void *)MEMORY[0x1D17BA0A0]();
    v27 = v7;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v29;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_DEFAULT, "%{public}@No accessories passed in for remote reachability event registration/deregistration", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);
  }

}

- (void)_handleModifyCharacteristicNotifications:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t k;
  uint64_t v50;
  void *v51;
  void *v52;
  HMDHome *v53;
  NSObject *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  id obj;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char v77;
  uint8_t v78[128];
  uint8_t buf[4];
  void *v80;
  __int16 v81;
  id v82;
  __int16 v83;
  void *v84;
  _BYTE v85[128];
  _BYTE v86[128];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if (objc_msgSend(v3, "isRemote") && (objc_msgSend(v3, "isSecureRemote") & 1) == 0)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v80 = v19;
      v81 = 2112;
      v82 = v3;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v4 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v4);
  }
  else
  {
    objc_msgSend(v3, "dictionaryForKey:", CFSTR("kCharacteristicNotificationsKey"));
    v4 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "dictionaryForKey:", CFSTR("kMediaNotificationsKey"));
    v5 = objc_claimAutoreleasedReturnValue();
    v77 = 0;
    v6 = objc_msgSend(v3, "BOOLForKey:keyPresent:", CFSTR("kCharacteristicNotificationEnableKey"), &v77);
    objc_msgSend(v3, "remoteSourceDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "remoteDestinationString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4 | v5 && v8 && v77)
    {
      if (v6)
      {
        -[HMDHome notificationRegistry](self, "notificationRegistry");
        v9 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setNotificationsEnabled:forUserID:characteristicsPayload:mediaPropertiesPayload:", 1, v8, v4, v5);
LABEL_50:

        objc_msgSend(v3, "respondWithSuccess");
      }
      else
      {
        v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v3, "remoteSourceDevice");
        v73 = 0u;
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "handles");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v73, v86, 16);
        if (v22)
        {
          v23 = v22;
          v24 = *(_QWORD *)v74;
          do
          {
            for (i = 0; i != v23; ++i)
            {
              if (*(_QWORD *)v74 != v24)
                objc_enumerationMutation(v21);
              objc_msgSend(*(id *)(*((_QWORD *)&v73 + 1) + 8 * i), "destination");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "addObject:", v26);

            }
            v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v73, v86, 16);
          }
          while (v23);
        }
        v60 = v8;

        objc_msgSend(v61, "globalHandles");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "firstObject");
        v28 = objc_claimAutoreleasedReturnValue();

        v62 = (void *)v28;
        if (v28)
        {
          v57 = v5;
          v58 = v4;
          v59 = v3;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          objc_msgSend(v61, "account");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "handles");
          v30 = (void *)objc_claimAutoreleasedReturnValue();

          obj = v30;
          v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
          v32 = v62;
          if (v31)
          {
            v33 = v31;
            v34 = *(_QWORD *)v70;
            do
            {
              for (j = 0; j != v33; ++j)
              {
                if (*(_QWORD *)v70 != v34)
                  objc_enumerationMutation(obj);
                v36 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * j);
                objc_msgSend(v32, "pushToken");
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v36, "URI");
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v38, "prefixedURI");
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                v40 = (void *)MEMORY[0x1D17B908C](v37, v39);

                if (v40)
                {
                  if ((objc_msgSend(v20, "containsObject:", v40) & 1) == 0)
                    objc_msgSend(v20, "addObject:", v40);
                }
                else
                {
                  v41 = (void *)MEMORY[0x1D17BA0A0]();
                  v42 = self;
                  HMFGetOSLogHandle();
                  v43 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  {
                    HMFGetLogIdentifier();
                    v44 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543874;
                    v80 = v44;
                    v81 = 2112;
                    v82 = v62;
                    v83 = 2112;
                    v84 = v36;
                    _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_ERROR, "%{public}@Failed to create destination with globalHandle: %@, accountHandle: %@", buf, 0x20u);

                    v32 = v62;
                  }

                  objc_autoreleasePoolPop(v41);
                }

              }
              v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
            }
            while (v33);
          }

          v4 = v58;
          v3 = v59;
          v5 = v57;
        }
        objc_msgSend(v3, "remoteSourceID");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v20, "containsObject:", v45) & 1) == 0)
          objc_msgSend(v20, "addObject:", v45);
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v9 = v20;
        v46 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
        if (v46)
        {
          v47 = v46;
          v48 = *(_QWORD *)v66;
          while (2)
          {
            for (k = 0; k != v47; ++k)
            {
              if (*(_QWORD *)v66 != v48)
                objc_enumerationMutation(v9);
              v50 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * k);
              -[HMDHome notificationRegistry](self, "notificationRegistry");
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              LOBYTE(v50) = objc_msgSend(v51, "setNotificationsEnabled:forUserID:characteristicsPayload:mediaPropertiesPayload:", 0, v50, v4, v5);

              if ((v50 & 1) != 0)
              {

                v8 = v60;
                goto LABEL_50;
              }
            }
            v47 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
            if (v47)
              continue;
            break;
          }
        }

        v52 = (void *)MEMORY[0x1D17BA0A0]();
        v53 = self;
        HMFGetOSLogHandle();
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v80 = v55;
          v81 = 2112;
          v82 = v9;
          _os_log_impl(&dword_1CD062000, v54, OS_LOG_TYPE_ERROR, "%{public}@Failed to disable notification with destinations: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v52);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 2, CFSTR("Failed to disable notification because registration was not found"), CFSTR("Could not find matching registration"), 0);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "respondWithError:", v56);

        v8 = v60;
      }
    }
    else
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "messagePayload");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v80 = v13;
        v81 = 2112;
        v82 = v14;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle modify characteristic notifications message payload: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 27);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "respondWithError:", v15);

    }
  }

}

- (void)__saveConfigurationVersionTransaction
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome backingStore](self, "backingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "transaction:options:", CFSTR("kHomeConfigurationVersionKey"), v4);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  -[HMDHome homeConfigurationModelObjectWithChangeType:](self, "homeConfigurationModelObjectWithChangeType:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "add:withMessage:", v5, 0);
  objc_msgSend(v6, "save");

}

- (void)_updateConfigurationVersion
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome setConfigurationVersion:](self, "setConfigurationVersion:", -[HMDHome configurationVersion](self, "configurationVersion") + 1));
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v6;
    v9 = 2048;
    v10 = -[HMDHome configurationVersion](v4, "configurationVersion");
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Incrementing configuration version to %lu", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHome __saveConfigurationVersionTransaction](v4, "__saveConfigurationVersionTransaction");
}

- (void)_updateExpectConfigurationVersion
{
  int64_t v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = -[HMDHome expectedConfigurationVersion](self, "expectedConfigurationVersion");
  if (v3 < -[HMDHome configurationVersion](self, "configurationVersion"))
    -[HMDHome setExpectedConfigurationVersion:](self, "setExpectedConfigurationVersion:", -[HMDHome configurationVersion](self, "configurationVersion"));
  v4 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome setExpectedConfigurationVersion:](self, "setExpectedConfigurationVersion:", -[HMDHome expectedConfigurationVersion](self, "expectedConfigurationVersion") + 1));
  v5 = self;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543874;
    v9 = v7;
    v10 = 2048;
    v11 = -[HMDHome expectedConfigurationVersion](v5, "expectedConfigurationVersion");
    v12 = 2048;
    v13 = -[HMDHome configurationVersion](v5, "configurationVersion");
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Increased expected configuration counter to %lu (current configurationVersion: %lu).", (uint8_t *)&v8, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
}

- (void)saveSharedHomeToAccountWithReason:(id)a3 postSyncNotification:(BOOL)a4 options:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  BOOL v17;
  id location;

  v8 = a3;
  v9 = a5;
  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_saveSharedHomeToAccountWithReason_postSyncNotification_options___block_invoke;
  block[3] = &unk_1E89BB6A0;
  objc_copyWeak(&v16, &location);
  v17 = a4;
  v14 = v8;
  v15 = v9;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, block);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);
}

- (void)_saveSharedHomeToAccountWithReason:(id)a3 postSyncNotification:(BOOL)a4 options:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  id v25;
  BOOL v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v13;
    v29 = 2112;
    v30 = v8;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Received request to save to account with reason: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if (-[HMDHome isOwnerUser](v11, "isOwnerUser")
    || +[HMDHomeManager doesSaveReasonAffectOnlyLocalData:](HMDHomeManager, "doesSaveReasonAffectOnlyLocalData:", v8)|| (objc_msgSend(MEMORY[0x1E0D28690], "productInfo"), v14 = (void *)objc_claimAutoreleasedReturnValue(), v15 = objc_msgSend(v14, "productPlatform") == 3, v14, v15))
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = v11;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v19;
      v29 = 2112;
      v30 = v8;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot save home as a shared home to cloud for reason %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
  }
  else
  {
    -[HMDHome sharedHomeModel](v11, "sharedHomeModel");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome backingStore](v11, "backingStore");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "transaction:options:", v8, v9);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v22, "add:", v20);
    objc_initWeak((id *)buf, v11);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __75__HMDHome__saveSharedHomeToAccountWithReason_postSyncNotification_options___block_invoke;
    v23[3] = &unk_1E89A85A0;
    objc_copyWeak(&v25, (id *)buf);
    v24 = v8;
    v26 = a4;
    objc_msgSend(v22, "save:", v23);
    -[HMDHome configureBulletinNotification](v11, "configureBulletinNotification");

    objc_destroyWeak(&v25);
    objc_destroyWeak((id *)buf);

  }
}

- (void)saveToCurrentAccountWithReason:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHome_saveToCurrentAccountWithReason___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)saveWithReason:(id)a3 postSyncNotification:(BOOL)a4
{
  -[HMDHome saveWithReason:information:postSyncNotification:objectChange:](self, "saveWithReason:information:postSyncNotification:objectChange:", a3, 0, a4, 0);
}

- (void)saveWithReason:(id)a3 postSyncNotification:(BOOL)a4 objectChange:(BOOL)a5
{
  -[HMDHome saveWithReason:information:postSyncNotification:objectChange:](self, "saveWithReason:information:postSyncNotification:objectChange:", a3, 0, a4, a5);
}

- (void)saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5
{
  -[HMDHome saveWithReason:information:postSyncNotification:objectChange:](self, "saveWithReason:information:postSyncNotification:objectChange:", a3, a4, a5, 0);
}

- (void)saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5 objectChange:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  id v10;
  id v11;
  id v12;
  _BOOL4 v13;
  _BOOL4 v14;
  HMDHomeSaveRequest *v15;
  void *v16;
  id v17;

  v6 = a6;
  v7 = a5;
  v17 = a3;
  v10 = a4;
  v11 = v17;
  v12 = v10;
  if (v17)
  {
    v13 = +[HMDHomeManager doesSaveReasonAffectOnlyLocalData:](HMDHomeManager, "doesSaveReasonAffectOnlyLocalData:", v17);
    v11 = v17;
    if (v13)
    {
      v14 = +[HMDHomeManager doesSaveReasonRequireForceSyncToWatch:](HMDHomeManager, "doesSaveReasonRequireForceSyncToWatch:", v17);
      v11 = v17;
      if (v14)
      {
        -[HMDHome setWatchSkipVersionCheck:](self, "setWatchSkipVersionCheck:", 1);
        v11 = v17;
      }
    }
  }
  -[HMDHome _performPostSaveActionsWithReason:](self, "_performPostSaveActionsWithReason:", v11);
  v15 = -[HMDHomeSaveRequest initWithHome:reason:information:postSyncNotification:objectChange:]([HMDHomeSaveRequest alloc], "initWithHome:reason:information:postSyncNotification:objectChange:", self, v17, v12, v7, v6);
  -[HMDHome homeManager](self, "homeManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "saveWithRequest:", v15);

}

- (void)performPostSaveActionsWithReason:(id)a3
{
  id v4;
  void *v5;
  HMDHomeSaveRequest *v6;

  v4 = a3;
  -[HMDHome _performPostSaveActionsWithReason:](self, "_performPostSaveActionsWithReason:", v4);
  v6 = -[HMDHomeSaveRequest initWithHome:reason:information:postSyncNotification:objectChange:]([HMDHomeSaveRequest alloc], "initWithHome:reason:information:postSyncNotification:objectChange:", self, v4, 0, 0, 1);

  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "performPostSaveRequestActionsWithRequest:", v6);

}

- (void)_performPostSaveActionsWithReason:(id)a3
{
  __CFString *v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  _BOOL8 v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  const __CFString *v23;
  HMDHome *v24;
  int v25;
  void *v26;
  __int16 v27;
  __CFString *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (__CFString *)a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    if (+[HMDHomeManager doesSaveReasonAffectOnlyLocalData:](HMDHomeManager, "doesSaveReasonAffectOnlyLocalData:", v4))
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543618;
        v26 = v8;
        v27 = 2112;
        v28 = v4;
        v9 = "%{public}@Saving with reason %@ for a local change.";
LABEL_19:
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v25, 0x16u);

      }
    }
    else
    {
      v5 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome _updateConfigurationVersion](self, "_updateConfigurationVersion"));
      v24 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543618;
        v26 = v8;
        v27 = 2112;
        v28 = v4;
        v9 = "%{public}@Saving with reason %@ for a non-local change";
        goto LABEL_19;
      }
    }

    objc_autoreleasePoolPop(v5);
    -[HMDHome configureBulletinNotification](self, "configureBulletinNotification");
    goto LABEL_21;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543618;
    v26 = v13;
    v27 = 2112;
    v28 = v4;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Dropping request to save due to %@ since the user is not owner of home", (uint8_t *)&v25, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if (-[HMDHome isAdminUser](v11, "isAdminUser")
    && !+[HMDHomeManager doesSaveReasonAffectOnlyLocalData:](HMDHomeManager, "doesSaveReasonAffectOnlyLocalData:", v4)&& !+[HMDHomeManager shouldIgnoreExpectedConfigurationVersionUpdateForReason:](HMDHomeManager, "shouldIgnoreExpectedConfigurationVersionUpdateForReason:", v4))
  {
    -[HMDHome _updateExpectConfigurationVersion](v11, "_updateExpectConfigurationVersion");
  }
  v14 = +[HMDHomeManager shouldIncrementGenerationCounterForReason:](HMDHomeManager, "shouldIncrementGenerationCounterForReason:", v4);
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = v11;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543874;
    v26 = v18;
    v27 = 2112;
    v28 = v4;
    v29 = 2112;
    v30 = v19;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Saving to persistent store due to reason: %@ (incrementing generation counter: %@)", (uint8_t *)&v25, 0x20u);

  }
  objc_autoreleasePoolPop(v15);
  -[HMDHome homeManager](v16, "homeManager");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "backingStore");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v21;
  if (v4)
    v23 = v4;
  else
    v23 = CFSTR("Unknown Reason");
  objc_msgSend(v21, "saveToPersistentStoreWithReason:incrementGeneration:", v23, v14);

LABEL_21:
}

- (void)configureBulletinNotification
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __40__HMDHome_configureBulletinNotification__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_configureBulletinNotification
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(id *)(*((_QWORD *)&v10 + 1) + 8 * v6);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        if (v9)
          objc_msgSend(v9, "configureBulletinNotification");

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

- (id)roomWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome rooms](self, "rooms");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)roomWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;

  v4 = a3;
  -[HMDHome roomForEntireHome](self, "roomForEntireHome");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", v4);

  if (v7)
  {
    -[HMDHome roomForEntireHome](self, "roomForEntireHome");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[HMDHome rooms](self, "rooms");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "hmf_firstObjectWithUUID:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

- (id)roomWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;

  v6 = a3;
  v7 = a4;
  -[HMDHome rooms](self, "rooms");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __60__HMDHome_roomWithUniqueIdentifier_forClientIdentifierSalt___block_invoke;
  v13[3] = &unk_1E89A44D8;
  v14 = v7;
  v15 = v6;
  v9 = v6;
  v10 = v7;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (id)accessoryWithEndpointIdentifier:(id)a3
{
  void *v3;
  void *v4;
  id v5;

  -[HMDHome accessoryWithSPIClientIdentifier:](self, "accessoryWithSPIClientIdentifier:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  return v5;
}

- (id)accessoryWithDeviceIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[4];
  id v12;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __41__HMDHome_accessoryWithDeviceIdentifier___block_invoke;
  v11[3] = &unk_1E89B53F8;
  v12 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  return v9;
}

- (id)accessoryWithSPIClientIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __44__HMDHome_accessoryWithSPIClientIdentifier___block_invoke;
  v9[3] = &unk_1E89B53F8;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)mediaProfileWithUUID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  char v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v21;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v21 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * v9);
      objc_opt_class();
      v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
      v12 = v11;

      if (v12)
      {
        objc_msgSend(v12, "mediaProfile");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v14 = v10;
        objc_opt_class();
        v15 = (objc_opt_isKindOfClass() & 1) != 0 ? v14 : 0;
        v16 = v15;

        objc_msgSend(v16, "mediaProfile");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

      }
      objc_msgSend(v13, "uniqueIdentifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "isEqual:", v4);

      if ((v18 & 1) != 0)
        break;

      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v13 = 0;
  }

  return v13;
}

- (id)zoneWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome zones](self, "zones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)zoneWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome zones](self, "zones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (BOOL)ownerTrustZoneCapable
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_ownerTrustZoneCapable;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setOwnerTrustZoneCapable:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_ownerTrustZoneCapable = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)_isSharedHomeVersionTrustZoneCapable
{
  void *v2;
  HMDHomeKitVersion *v3;
  char v4;

  -[HMDHome sharedHomeSourceVersion](self, "sharedHomeSourceVersion");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("6.1"));
  v4 = objc_msgSend(v2, "isAtLeastVersion:", v3);

  return v4;
}

- (void)_handleReceivedNonCloudSourcedSharedHomeModel
{
  void *v3;
  int v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (-[HMDHome _isSharedHomeVersionTrustZoneCapable](self, "_isSharedHomeVersionTrustZoneCapable")
    || (-[HMDHome residentDeviceManager](self, "residentDeviceManager"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "hasTrustZoneCapableResident"),
        v3,
        v4))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Owner became trust zone capable after receiving shared home model", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome setOwnerTrustZoneCapable:](v6, "setOwnerTrustZoneCapable:", 1);
    -[HMDHome notificationCenter](v6, "notificationCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeOwnerBecameTrustZoneCapableNotification"), v6);

  }
}

- (void)_evaluateOwnerTrustZoneCapabilityAndNotify
{
  void *v3;
  int v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!-[HMDHome isOwnerTrustZoneCapable](self, "isOwnerTrustZoneCapable"))
  {
    if (-[HMDHome _isSharedHomeVersionTrustZoneCapable](self, "_isSharedHomeVersionTrustZoneCapable")
      || (-[HMDHome residentDeviceManager](self, "residentDeviceManager"),
          v3 = (void *)objc_claimAutoreleasedReturnValue(),
          v4 = objc_msgSend(v3, "hasTrustZoneCapableResident"),
          v3,
          v4))
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = 138543362;
        v11 = v8;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Owner became trust zone capable after evaluating owner trust zone capability", (uint8_t *)&v10, 0xCu);

      }
      objc_autoreleasePoolPop(v5);
      -[HMDHome setOwnerTrustZoneCapable:](v6, "setOwnerTrustZoneCapable:", 1);
      -[HMDHome notificationCenter](v6, "notificationCenter");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeOwnerBecameTrustZoneCapableNotification"), v6);

    }
  }
}

- (id)actionSetWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome actionSets](self, "actionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)actionSetWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome actionSets](self, "actionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerOwnedActionSetWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome triggers](self, "triggers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)triggerWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome triggers](self, "triggers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)serviceGroupWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome serviceGroups](self, "serviceGroups");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithName:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)serviceGroupWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome serviceGroups](self, "serviceGroups");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)userWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)outgoingInvitationWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, CFSTR("identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (NSMutableArray)outgoingInvitations
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray mutableCopy](self->_outgoingInvitations, "mutableCopy");
  os_unfair_recursive_lock_unlock();
  return (NSMutableArray *)v3;
}

- (void)setOutgoingInvitations:(id)a3
{
  NSMutableArray *v4;
  NSMutableArray *outgoingInvitations;

  v4 = (NSMutableArray *)a3;
  os_unfair_recursive_lock_lock_with_options();
  outgoingInvitations = self->_outgoingInvitations;
  self->_outgoingInvitations = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)addOutgoingInvitation:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableArray addObject:](self->_outgoingInvitations, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeOutgoingInvitation:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableArray removeObject:](self->_outgoingInvitations, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (id)mediaSystemsWithUUIDs:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __33__HMDHome_mediaSystemsWithUUIDs___block_invoke;
  v9[3] = &unk_1E89AA628;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_filter:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)mediaSystemWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)reEvaluateTriggers
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  -[HMDHome triggers](self, "triggers", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "reEvaluate:", 0);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

- (void)handleSignificantTimeChange
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t v16[128];
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v18 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Going to re-evaluate all the triggers as time has changed significantly", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHome triggers](v4, "triggers", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "reEvaluate:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v9);
  }

}

- (void)removeService:(id)a3
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10[2];
  id location;

  v5 = a3;
  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __25__HMDHome_removeService___block_invoke;
  v8[3] = &unk_1E89BD1B8;
  objc_copyWeak(v10, &location);
  v9 = v5;
  v10[1] = (id)a2;
  v7 = v5;
  dispatch_async(v6, v8);

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
}

- (void)removeCharacteristic:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __32__HMDHome_removeCharacteristic___block_invoke;
  block[3] = &unk_1E89BE218;
  objc_copyWeak(&v9, &location);
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

- (void)removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  BOOL v20;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v22 = v13;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Removed all home content and accessory pairings", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHome workQueue](v11, "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __77__HMDHome_removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke;
  v17[3] = &unk_1E89BD720;
  v20 = a3;
  v17[4] = v11;
  v18 = v8;
  v19 = v9;
  v15 = v9;
  v16 = v8;
  dispatch_async(v14, v17);

}

- (id)validateName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nameValidator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "validateName:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)addName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nameValidator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addName:namespace:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)addActionSetName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nameValidator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addActionSetName:namespace:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)removeName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nameValidator");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeName:namespace:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)replaceName:(id)a3 withNewName:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "nameValidator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "replaceName:withNewName:inNamespaces:", v7, v6, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (id)replaceActionSetName:(id)a3 withNewName:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "nameValidator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "replaceActionSetName:withNewName:inNamespaces:", v7, v6, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (void)reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4
{
  id v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;
  HMDHome *v10;
  BOOL v11;

  v6 = a3;
  if (v6)
  {
    -[HMDHome workQueue](self, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __53__HMDHome_reachabilityChangedForAccessory_reachable___block_invoke;
    block[3] = &unk_1E89C0898;
    v9 = v6;
    v10 = self;
    v11 = a4;
    dispatch_async(v7, block);

  }
}

- (void)suspendedStateChangedForAccessory:(id)a3 suspendedState:(unint64_t)a4
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  _QWORD v15[5];
  id v16;
  id v17;
  unint64_t v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  if (v8)
  {
    if (a4 == 2)
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        HAPAccessorySuspendedStateDescription();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v20 = v12;
        v21 = 2112;
        v22 = v13;
        v23 = 2112;
        v24 = v6;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Skipping suspended state update: '%@' for accessory %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v9);
    }
    else
    {
      -[HMDHome workQueue](self, "workQueue");
      v14 = objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __60__HMDHome_suspendedStateChangedForAccessory_suspendedState___block_invoke;
      v15[3] = &unk_1E89BE790;
      v15[4] = self;
      v18 = a4;
      v16 = v8;
      v17 = v6;
      dispatch_async(v14, v15);

    }
  }

}

- (void)regionStateUpdated
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_regionStateUpdated__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 identifier:(id)a5 transport:(id)a6 qualityOfService:(int64_t)a7 withCompletionHandler:(id)a8
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD block[4];
  id v29;
  id v30;
  id v31;
  HMDHome *v32;
  id v33;
  id v34;
  unint64_t v35;
  int64_t v36;
  id v37;

  v15 = a3;
  v16 = a5;
  v17 = a6;
  v18 = a8;
  v19 = objc_alloc(MEMORY[0x1E0D28540]);
  v20 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "stringWithFormat:", CFSTR("%@, %s:%ld"), v21, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 7177);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (id)objc_msgSend(v19, "initWithName:", v22);

  -[HMDHome workQueue](self, "workQueue");
  v23 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __104__HMDHome_writeCharacteristicValues_source_identifier_transport_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_1E89A4500;
  v35 = a4;
  v36 = a7;
  v29 = v37;
  v30 = v16;
  v31 = v17;
  v32 = self;
  v33 = v15;
  v34 = v18;
  v24 = v18;
  v25 = v15;
  v26 = v17;
  v27 = v16;
  dispatch_async(v23, block);

  __HMFActivityScopeLeave();
}

- (id)performWriteRequests:(id)a3 loggingObject:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  __int128 v25;
  _BYTE buf[18];
  __int16 v27;
  __int128 *v28;
  __int16 v29;
  HMDHome *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = objc_alloc_init(MEMORY[0x1E0D519C0]);
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    if (v9)
      objc_msgSend(v9, "getUUIDBytes:", buf);
    else
      *(_OWORD *)buf = *MEMORY[0x1E0D286F8];
    v25 = *(_OWORD *)buf;
    v14 = objc_msgSend(v6, "count");
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    v27 = 2098;
    v28 = &v25;
    v29 = 2114;
    v30 = v11;
    v31 = 2048;
    v32 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier: %{public,uuid_t}.16P from home: %{public}@ count: %lu for perform write requests", buf, 0x30u);

  }
  objc_autoreleasePoolPop(v10);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __46__HMDHome_performWriteRequests_loggingObject___block_invoke;
  v21[3] = &unk_1E89BB158;
  v22 = v7;
  v15 = v8;
  v23 = v15;
  v24 = v6;
  v16 = v6;
  v17 = v7;
  -[HMDHome writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:](v11, "writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:", v16, 7, v9, 0, -1, v21);
  v18 = v24;
  v19 = v15;

  return v19;
}

- (id)performReadRequests:(id)a3 loggingObject:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;

  v6 = a3;
  v7 = a4;
  v8 = objc_alloc_init(MEMORY[0x1E0D519C0]);
  -[HMDHome description](self, "description");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __45__HMDHome_performReadRequests_loggingObject___block_invoke;
  v16[3] = &unk_1E89BB158;
  v17 = v7;
  v10 = v8;
  v18 = v10;
  v19 = v6;
  v11 = v6;
  v12 = v7;
  -[HMDHome readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:](self, "readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:", v11, 7, v9, -1, v16);

  v13 = v19;
  v14 = v10;

  return v14;
}

- (id)performWriteRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6
{
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v34;
  _QWORD v37[4];
  id v38;
  _QWORD v39[5];
  id v40;
  int64_t v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v34 = a6;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v10 = v8;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v44 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend(v15, "characteristic");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "service");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "accessory");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v9, "objectForKeyedSubscript:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          objc_msgSend(v9, "objectForKeyedSubscript:", v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "addObject:", v15);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v21, v19);
        }

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    }
    while (v12);
  }

  objc_msgSend(v9, "allValues");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke;
  v39[3] = &unk_1E89A4550;
  v42 = a5;
  v41 = a4;
  v39[4] = self;
  v24 = v34;
  v40 = v24;
  objc_msgSend(v22, "na_map:", v39);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = (void *)MEMORY[0x1E0D519C0];
  v27 = (void *)MEMORY[0x1E0D519E8];
  -[HMDHome workQueue](self, "workQueue");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "schedulerWithDispatchQueue:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "combineAllFutures:ignoringErrors:scheduler:", v25, 1, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v37[0] = v23;
  v37[1] = 3221225472;
  v37[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_656;
  v37[3] = &unk_1E89BFD90;
  v38 = v24;
  v31 = v24;
  objc_msgSend(v30, "flatMap:", v37);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

- (id)performReadRequests:(id)a3 withRetries:(int64_t)a4 timeInterval:(double)a5 loggingObject:(id)a6
{
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v34;
  _QWORD v37[4];
  id v38;
  _QWORD v39[5];
  id v40;
  int64_t v41;
  double v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v34 = a6;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v10 = v8;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v44 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        objc_msgSend(v15, "characteristic");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "service");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "accessory");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v9, "objectForKeyedSubscript:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        if (v20)
        {
          objc_msgSend(v9, "objectForKeyedSubscript:", v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "addObject:", v15);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v21, v19);
        }

      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    }
    while (v12);
  }

  objc_msgSend(v9, "allValues");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke;
  v39[3] = &unk_1E89A4550;
  v42 = a5;
  v41 = a4;
  v39[4] = self;
  v24 = v34;
  v40 = v24;
  objc_msgSend(v22, "na_map:", v39);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = (void *)MEMORY[0x1E0D519C0];
  v27 = (void *)MEMORY[0x1E0D519E8];
  -[HMDHome workQueue](self, "workQueue");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "schedulerWithDispatchQueue:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "combineAllFutures:ignoringErrors:scheduler:", v25, 1, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v37[0] = v23;
  v37[1] = 3221225472;
  v37[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_661;
  v37[3] = &unk_1E89BFD90;
  v38 = v24;
  v31 = v24;
  objc_msgSend(v30, "flatMap:", v37);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

- (id)migrateOwnedTriggers
{
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  __int128 v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[2];
  _QWORD v34[2];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  -[HMDHome triggers](self, "triggers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
  if (!v4)
    goto LABEL_17;
  v6 = v4;
  v7 = *(_QWORD *)v30;
  *(_QWORD *)&v5 = 138543618;
  v27 = v5;
  do
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)v30 != v7)
        objc_enumerationMutation(v3);
      v9 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
      -[HMDHome ownedTriggers](self, "ownedTriggers", v27);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v10, "containsObject:", v11) & 1) == 0)
      {

        continue;
      }
      objc_msgSend(v9, "owningDevice");
      v12 = objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        v13 = (void *)v12;
        v14 = objc_msgSend(v9, "isOwnedByThisDevice");

        if ((v14 & 1) != 0)
          continue;
      }
      else
      {

      }
      -[HMDHome currentUser](self, "currentUser");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setOwner:", v15);

      -[HMDHome currentDevice](self, "currentDevice");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setOwningDevice:", v16);

      objc_msgSend(v9, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "addObject:", v18);

      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = v27;
        v36 = v22;
        v37 = 2112;
        v38 = v9;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Updating owning device for trigger %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
    }
    v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
  }
  while (v6);
LABEL_17:

  if (objc_msgSend(v28, "count"))
  {
    v33[0] = CFSTR("triggerUUID");
    v33[1] = CFSTR("kHomeUUID");
    v34[0] = v28;
    -[HMDHome uuid](self, "uuid");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "UUIDString");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v34[1] = v24;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v25 = 0;
  }

  return v25;
}

- (void)checkTimerTriggers
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_checkTimerTriggers__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)readProfileState:(id)a3 viaDevice:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __38__HMDHome_readProfileState_viaDevice___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_registerForReachabilityChangeNotificationsEnabled:(BOOL)a3 completionHandler:(id)a4
{
  _BOOL4 v4;
  void (**v6)(id, uint64_t);
  _BOOL4 v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  void (**v23)(id, uint64_t);
  id v24;
  BOOL v25;
  const __CFString *v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v4 = a3;
  v32 = *MEMORY[0x1E0C80C00];
  v6 = (void (**)(id, uint64_t))a4;
  v7 = -[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident");
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEBUG, "%{public}@Not updating remote accessory reachability notifications because we are the primary resident", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    v6[2](v6, 1);
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v13;
      v30 = 2112;
      v31 = v14;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Setting remote accessory reachability notifications enabled to %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMDHome uuid](v9, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "UUIDString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = CFSTR("kHomeUUID");
    v27 = v16;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak((id *)buf, v9);
    if (v4)
      v18 = CFSTR("kEnableAccessoryReachabilityNotificationRequestKey");
    else
      v18 = CFSTR("kDisableAccessoryReachabilityNotificationRequestKey");
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __80__HMDHome__registerForReachabilityChangeNotificationsEnabled_completionHandler___block_invoke;
    v22[3] = &unk_1E89A4600;
    objc_copyWeak(&v24, (id *)buf);
    v25 = v4;
    v23 = v6;
    +[HMDRemoteMessage messageWithName:messagePayload:responseHandler:](HMDRemoteMessage, "messageWithName:messagePayload:responseHandler:", v18, v17, v22);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v9, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](v9, "workQueue");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:](v9, "redispatchToResidentMessage:target:responseQueue:", v19, v20, v21);

    objc_destroyWeak(&v24);
    objc_destroyWeak((id *)buf);

  }
}

- (BOOL)_hasPairedReachableBTLEAccessories
{
  void *v2;
  char v3;

  -[HMDHome hapAccessories](self, "hapAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_675);

  return v3;
}

- (id)namesOfServicesWithNewFirmwareAvailableInHome
{
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char isKindOfClass;
  void *v12;
  void *v13;
  uint64_t v14;
  HMDHome *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  char v29;
  id v30;
  void *v31;
  void *v32;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  uint64_t v38;
  void *v39;
  char v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  __int128 v57;
  HMDHome *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id obj;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t buf[4];
  void *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  void *v78;
  __int16 v79;
  void *v80;
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v65 = (id)objc_claimAutoreleasedReturnValue();
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    -[HMDHome accessories](self, "accessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "copy");

    obj = v4;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v69, v81, 16);
    if (!v5)
      goto LABEL_56;
    v7 = v5;
    v8 = *(_QWORD *)v70;
    *(_QWORD *)&v6 = 138544130;
    v57 = v6;
    v66 = *(_QWORD *)v70;
    while (1)
    {
      v9 = 0;
      v67 = v7;
      do
      {
        if (*(_QWORD *)v70 != v8)
          objc_enumerationMutation(obj);
        v10 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * v9);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v10)
        {
          if (!-[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](self, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled")|| (-[HMDHome residentDeviceManager](self, "residentDeviceManager"), v12 = (void *)objc_claimAutoreleasedReturnValue(), objc_msgSend(v12, "availableResidentDevices"), v13 = (void *)objc_claimAutoreleasedReturnValue(), v14 = objc_msgSend(v13, "count"), v13, v12, !v14))
          {
            v15 = self;
            v16 = v10;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v17 = v16;
            else
              v17 = 0;
            v18 = v17;

            if (!objc_msgSend(v18, "supportsCHIP"))
            {
              objc_msgSend(v16, "vendorInfo");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "firmwareVersion");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              if (v34 && objc_msgSend(v16, "isPrimary"))
              {
                objc_msgSend(v20, "firmwareVersion");
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v16, "firmwareVersion");
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                v37 = objc_msgSend(v35, "isGreaterThanVersion:", v36);

              }
              else
              {
                v37 = 0;
              }

              if (v20
                && (objc_msgSend(v20, "firmwareVersion"), (v38 = objc_claimAutoreleasedReturnValue()) != 0)
                && (v39 = (void *)v38, v40 = objc_msgSend(v16, "isPrimary"), v39, (v40 & 1) != 0))
              {
                if (!v37)
                {
                  self = v15;
                  v8 = v66;
                  goto LABEL_51;
                }
                v41 = (void *)MEMORY[0x1D17BA0A0]();
                v42 = v15;
                HMFGetOSLogHandle();
                v43 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v16, "uuid");
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v60, "UUIDString");
                  v45 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v20, "firmwareVersion");
                  v63 = v41;
                  v46 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v20, "productData");
                  v58 = v42;
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v57;
                  v74 = v44;
                  v75 = 2114;
                  v76 = v45;
                  v77 = 2114;
                  v78 = v46;
                  v79 = 2112;
                  v80 = v47;
                  _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ has a firmware update, vendor database indicates available firmware version %{public}@ for product data %@", buf, 0x2Au);

                  v42 = v58;
                  v41 = v63;

                }
                objc_autoreleasePoolPop(v41);
                objc_msgSend(v16, "namesOfServicesShowingTilesInHomeApp");
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v65, "addObjectsFromArray:", v27);
              }
              else
              {
                objc_msgSend(v16, "softwareUpdate", v57);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                v27 = v48;
                if (v48 && objc_msgSend(v48, "state") == 2)
                {
                  v49 = (void *)MEMORY[0x1D17BA0A0]();
                  v50 = v15;
                  HMFGetOSLogHandle();
                  v51 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v64 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v16, "uuid");
                    v59 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v59, "UUIDString");
                    v61 = v49;
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v16, "firmwareVersion");
                    v53 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543874;
                    v74 = v64;
                    v75 = 2114;
                    v76 = v52;
                    v77 = 2114;
                    v78 = v53;
                    _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ currentFirmwareVersion %{public}@ has a firmware update", buf, 0x20u);

                    v49 = v61;
                  }

                  objc_autoreleasePoolPop(v49);
                  objc_msgSend(v16, "name");
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v65, "addObject:", v54);

                }
              }
              self = v15;
              v8 = v66;
              goto LABEL_50;
            }
            objc_msgSend(v16, "softwareUpdate");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = v19;
            if (v19 && objc_msgSend(v19, "state") == 2)
            {
              v21 = (void *)MEMORY[0x1D17BA0A0]();
              v22 = v15;
              HMFGetOSLogHandle();
              v23 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v16, "uuid");
                v62 = v21;
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v25, "UUIDString");
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v74 = v24;
                v75 = 2114;
                v76 = v26;
                _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Matter accessory %{public}@ has a firmware update", buf, 0x16u);

                v21 = v62;
              }

              objc_autoreleasePoolPop(v21);
              objc_msgSend(v16, "name");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "addObject:", v27);
              self = v15;
              v8 = v66;
              goto LABEL_50;
            }
            self = v15;
            v8 = v66;
LABEL_51:

            v7 = v67;
          }
        }
        else
        {
          v28 = v10;
          objc_opt_class();
          v29 = objc_opt_isKindOfClass();

          if ((v29 & 1) != 0
            && v10
            && !-[HMDHome isAutomaticSoftwareUpdateEnabled](self, "isAutomaticSoftwareUpdateEnabled"))
          {
            v30 = v28;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v31 = v30;
            else
              v31 = 0;
            v18 = v31;

            objc_msgSend(v18, "softwareUpdate");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = v32;
            if (!v32)
              goto LABEL_51;
            v33 = objc_msgSend(v32, "state");
            if (v33 >= 2)
            {
              if (v33 == 2)
                goto LABEL_49;
            }
            else
            {
              if (!objc_msgSend(v18, "supportsTVOSUpdateManualUpdateAvailableNotification"))
                goto LABEL_51;
LABEL_49:
              objc_msgSend(v18, "name", v57);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "addObject:", v27);
LABEL_50:

            }
            goto LABEL_51;
          }
        }
        ++v9;
      }
      while (v7 != v9);
      v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v81, 16);
      v7 = v55;
      if (!v55)
      {
LABEL_56:

        return v65;
      }
    }
  }
  return v65;
}

- (id)matterAccessoriesWithNewFirmwareInstalledInHome
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHome *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *context;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v23 = (id)objc_claimAutoreleasedReturnValue();
  if ((-[HMDHome isOwnerUser](self, "isOwnerUser") || -[HMDHome isSharedAdmin](self, "isSharedAdmin"))
    && !-[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](self, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"))
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    -[HMDHome accessories](self, "accessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "copy");

    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v26;
      v19 = self;
      v22 = v4;
      do
      {
        v8 = 0;
        v20 = v6;
        do
        {
          if (*(_QWORD *)v26 != v7)
            objc_enumerationMutation(v4);
          v9 = *(id *)(*((_QWORD *)&v25 + 1) + 8 * v8);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v10 = v9;
          else
            v10 = 0;
          v11 = v10;

          if (objc_msgSend(v11, "supportsCHIP"))
          {
            objc_msgSend(v9, "softwareUpdate");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = v12;
            if (v12 && objc_msgSend(v12, "state") == 4)
            {
              context = (void *)MEMORY[0x1D17BA0A0]();
              v14 = self;
              HMFGetOSLogHandle();
              v15 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v16 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v9, "uuid");
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v21, "UUIDString");
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v30 = v16;
                v31 = 2114;
                v32 = v17;
                v33 = 2112;
                v34 = v13;
                _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory %{public}@ has a firmware recently installed, softwareUpdate %@", buf, 0x20u);

                self = v19;
                v6 = v20;
              }

              objc_autoreleasePoolPop(context);
              objc_msgSend(v23, "addObject:", v9);
              v4 = v22;
            }

          }
          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
      }
      while (v6);
    }

  }
  return v23;
}

- (void)reEvaluateHomeHubState
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __33__HMDHome_reEvaluateHomeHubState__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)evaluateResidentUpdate
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __33__HMDHome_evaluateResidentUpdate__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (id)getTransactionFromHAPAccessory:(id)a3 hmdAccessory:(id)a4 uuid:(id)a5 hostAccessoryUUID:(id)a6 objectChangeType:(unint64_t)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  HMDHAPAccessoryTransaction *v22;
  void *v23;
  int v24;
  HMDAppleMediaAccessorySensorModel *v25;
  void *v26;
  HMDAppleMediaAccessorySensorModel *v27;
  HMDHAPAccessoryTransaction *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  int v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  char isKindOfClass;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  int v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  void *v78;
  id v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;
  _QWORD v86[4];
  id v87;
  _QWORD v88[4];
  id v89;
  id v90;
  id v91;
  unsigned __int8 v92;
  uint8_t buf[4];
  void *v94;
  __int16 v95;
  void *v96;
  __int16 v97;
  void *v98;
  __int16 v99;
  id v100;
  __int16 v101;
  void *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  -[HMDHome currentAccessory](self, "currentAccessory");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v85 = v17;

  v18 = v14;
  v19 = v18;
  v82 = v15;
  if (v13)
  {
    objc_msgSend(v13, "transactionWithObjectChangeType:", a7);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v21 = v20;
    else
      v21 = 0;
    v22 = v21;
    goto LABEL_14;
  }
  if (!v18)
    goto LABEL_13;
  if (!v85)
    goto LABEL_13;
  objc_msgSend(v85, "sensorAccessoryUUID");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "hmf_isEqualToUUID:", v19);

  if (!v24
    || (v25 = [HMDAppleMediaAccessorySensorModel alloc],
        -[HMDHome uuid](self, "uuid"),
        v26 = (void *)objc_claimAutoreleasedReturnValue(),
        v27 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v25, "initWithObjectChangeType:uuid:parentUUID:", a7, v19, v26), v26, v15 = v82, !v27))
  {
LABEL_13:
    v28 = [HMDHAPAccessoryTransaction alloc];
    -[HMDHome uuid](self, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v28, "initWithObjectChangeType:uuid:parentUUID:", a7, v19, v20);
LABEL_14:
    v27 = (HMDAppleMediaAccessorySensorModel *)v22;

  }
  -[HMDHAPAccessoryTransaction setHapAccessoryLocal:](v27, "setHapAccessoryLocal:", v12);
  objc_msgSend(v13, "providedName");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (v29)
  {
LABEL_18:

    goto LABEL_19;
  }
  if (objc_msgSend(v12, "linkType") != 2)
  {
    objc_msgSend(v12, "name");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = (void *)objc_msgSend(v29, "copy");
    -[HMDAppleMediaAccessorySensorModel setProvidedName:](v27, "setProvidedName:", v30);

    goto LABEL_18;
  }
LABEL_19:
  objc_msgSend(v12, "uniqueIdentifier");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAppleMediaAccessorySensorModel setUniqueIdentifier:](v27, "setUniqueIdentifier:", v31);

  objc_msgSend(v12, "identifier");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAppleMediaAccessorySensorModel setIdentifier:](v27, "setIdentifier:", v32);

  objc_msgSend(v12, "identifier");
  v33 = objc_claimAutoreleasedReturnValue();
  v92 = 0;
  -[HMDHome keychainStore](self, "keychainStore");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = 0;
  objc_msgSend(v34, "readPublicKeyForAccessoryName:registeredWithHomeKit:error:", v33, &v92, &v91);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = v91;

  v35 = v92;
  v36 = (void *)MEMORY[0x1D17BA0A0]();
  v37 = self;
  HMFGetOSLogHandle();
  v38 = objc_claimAutoreleasedReturnValue();
  v39 = v38;
  v83 = (void *)v33;
  if (v33 && v84 && v35)
  {
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "name");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "uniqueIdentifier");
      v42 = v13;
      v43 = v19;
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v94 = v40;
      v95 = 2112;
      v96 = v41;
      v97 = 2112;
      v98 = v44;
      v99 = 2112;
      v100 = v83;
      v101 = 2112;
      v102 = v84;
      _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ setting pairing username and pubkey to ('%@', '%@')", buf, 0x34u);

      v19 = v43;
      v13 = v42;

      v15 = v82;
    }

    objc_autoreleasePoolPop(v36);
    -[HMDAppleMediaAccessorySensorModel setPairingUsername:](v27, "setPairingUsername:", v83);
    -[HMDAppleMediaAccessorySensorModel setPublicKey:](v27, "setPublicKey:", v84);
    if (!v15)
      goto LABEL_34;
LABEL_29:
    -[HMDHome accessoryWithUUID:](v37, "accessoryWithUUID:", v15, v80);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    objc_msgSend(v15, "UUIDString");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    if ((isKindOfClass & 1) != 0 && v49)
      -[HMDAppleMediaAccessorySensorModel setHostAccessoryUUID:](v27, "setHostAccessoryUUID:", v51);
    else
      -[HMDAppleMediaAccessorySensorModel setBridgeUUID:](v27, "setBridgeUUID:", v51);

    goto LABEL_34;
  }
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAppleMediaAccessorySensorModel providedName](v27, "providedName");
    v46 = v13;
    v47 = v19;
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v94 = v45;
    v95 = 2112;
    v96 = v48;
    v97 = 2112;
    v98 = v83;
    v99 = 2112;
    v100 = v80;
    _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_ERROR, "%{public}@Failed to read public key for accessory %@ with pairing username %@: %@", buf, 0x2Au);

    v19 = v47;
    v13 = v46;

  }
  objc_autoreleasePoolPop(v36);
  if (v15)
    goto LABEL_29;
LABEL_34:
  -[HMDAppleMediaAccessorySensorModel hostAccessoryUUID](v27, "hostAccessoryUUID", v80);
  v52 = objc_claimAutoreleasedReturnValue();
  v53 = (void *)v52;
  if (v19 && !v52 && v85)
  {
    objc_msgSend(v85, "sensorAccessoryUUID");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend(v54, "hmf_isEqualToUUID:", v19);

    if (!v55)
      goto LABEL_40;
    objc_msgSend(v85, "uuid");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "UUIDString");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAppleMediaAccessorySensorModel setHostAccessoryUUID:](v27, "setHostAccessoryUUID:", v56);

  }
LABEL_40:
  objc_msgSend(v13, "category");
  v57 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v57)
  {
    objc_msgSend(v12, "category");
    v58 = (void *)objc_claimAutoreleasedReturnValue();

    if (v58)
    {
      objc_msgSend(v12, "category");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAppleMediaAccessorySensorModel setAccessoryCategory:](v27, "setAccessoryCategory:", v59);
    }
    else
    {
      -[HMDHome hapMetadata](v37, "hapMetadata");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "categoryForOther");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "identifier");
      v61 = v13;
      v62 = v19;
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAppleMediaAccessorySensorModel setAccessoryCategory:](v27, "setAccessoryCategory:", v63);

      v19 = v62;
      v13 = v61;

    }
  }
  v64 = v13;
  v65 = v19;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = (void *)MEMORY[0x1E0C99E20];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "linkType"));
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v67, "setWithObject:", v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "servicesOfType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = objc_msgSend(v70, "count");

  if (v71)
    objc_msgSend(v69, "addObject:", &unk_1E8B327C0);
  v72 = MEMORY[0x1E0C809B0];
  v88[0] = MEMORY[0x1E0C809B0];
  v88[1] = 3221225472;
  v88[2] = __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke;
  v88[3] = &unk_1E89A4648;
  v73 = v66;
  v89 = v73;
  v90 = v12;
  v74 = v12;
  objc_msgSend(v69, "na_each:", v88);
  objc_msgSend(v64, "transportInformationInstances");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v86[0] = v72;
  v86[1] = 3221225472;
  v86[2] = __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke_2;
  v86[3] = &unk_1E89A4670;
  v87 = v73;
  v76 = v73;
  objc_msgSend(v75, "na_each:", v86);

  objc_msgSend(v76, "allObjects");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAppleMediaAccessorySensorModel setTransportInformation:](v27, "setTransportInformation:", v77);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v74, "communicationProtocol"));
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAppleMediaAccessorySensorModel setCommunicationProtocol:](v27, "setCommunicationProtocol:", v78);

  return v27;
}

- (void)evaluateShouldRelaunchAndSetRelaunch
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __47__HMDHome_evaluateShouldRelaunchAndSetRelaunch__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)resetConfiguration
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome unconfigure](self, "unconfigure");
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_resetConfiguration__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)notifyClientOfVendorInfoUpdatedForManufacturers:(id)a3 withCompletion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_notifyClientOfVendorInfoUpdatedForManufacturers_withCompletion___block_invoke;
  block[3] = &unk_1E89C1B48;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_registerForMessages
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  int v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  _QWORD v337[4];
  id v338;
  id location;
  void *v340;
  _QWORD v341[2];
  _QWORD v342[2];
  _QWORD v343[3];
  _QWORD v344[3];
  void *v345;
  void *v346;
  void *v347;
  _QWORD v348[3];
  _QWORD v349[2];
  _QWORD v350[2];
  _QWORD v351[3];
  _QWORD v352[2];
  _QWORD v353[2];
  _QWORD v354[2];
  _QWORD v355[2];
  _QWORD v356[2];
  _QWORD v357[2];
  _QWORD v358[2];
  _QWORD v359[2];
  _QWORD v360[3];
  _QWORD v361[3];
  _QWORD v362[2];
  _QWORD v363[3];
  _QWORD v364[2];
  _QWORD v365[2];
  _QWORD v366[2];
  _QWORD v367[2];
  _QWORD v368[2];
  _QWORD v369[2];
  _QWORD v370[2];
  _QWORD v371[2];
  _QWORD v372[4];
  _QWORD v373[4];
  _QWORD v374[4];
  _QWORD v375[4];
  _QWORD v376[4];
  _QWORD v377[4];
  _QWORD v378[2];
  _QWORD v379[3];
  _QWORD v380[2];
  _QWORD v381[2];
  _QWORD v382[2];
  _QWORD v383[3];
  _QWORD v384[2];
  _QWORD v385[2];
  _QWORD v386[3];
  _QWORD v387[4];
  _QWORD v388[3];
  _QWORD v389[2];
  _QWORD v390[2];
  _QWORD v391[4];
  _QWORD v392[4];
  _QWORD v393[2];
  _QWORD v394[2];
  _QWORD v395[2];
  _QWORD v396[3];
  _QWORD v397[4];
  _QWORD v398[3];
  _QWORD v399[3];
  _QWORD v400[3];
  _QWORD v401[2];
  _QWORD v402[2];
  _QWORD v403[2];
  _QWORD v404[2];
  _QWORD v405[2];
  _QWORD v406[2];
  _QWORD v407[2];
  _QWORD v408[2];
  _QWORD v409[2];
  _QWORD v410[2];
  _QWORD v411[2];
  _QWORD v412[2];
  _QWORD v413[2];
  _QWORD v414[2];
  _QWORD v415[2];
  _QWORD v416[2];
  _QWORD v417[3];
  _QWORD v418[2];
  _QWORD v419[2];
  _QWORD v420[2];
  _QWORD v421[2];
  _QWORD v422[2];
  _QWORD v423[2];
  _QWORD v424[2];
  _QWORD v425[2];
  _QWORD v426[2];
  _QWORD v427[2];
  void *v428;
  _QWORD v429[4];

  v429[2] = *MEMORY[0x1E0C80C00];
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 3, 0);
  v334 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 0, 0);
  v336 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 0, 1);
  v335 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome administratorHandler](self, "administratorHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v429[0] = v4;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v429[1] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v429, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "registerForMessage:receiver:policies:selector:", CFSTR("kRenameHomeRequestKey"), self, v6, sel__handleRename_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v428 = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v428, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9E18], self, v9, sel__handleHomeDataRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v427[0] = v11;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v427[1] = v12;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v427, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "registerForMessage:receiver:policies:selector:", CFSTR("kAddRoomRequestKey"), self, v13, sel__handleAddRoom_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v426[0] = v15;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v426[1] = v16;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v426, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveRoomRequestKey"), self, v17, sel__handleRemoveRoom_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v425[0] = v19;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v425[1] = v20;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v425, 2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "registerForMessage:receiver:policies:selector:", CFSTR("kAddZoneRequestKey"), self, v21, sel__handleAddZone_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v424[0] = v23;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v424[1] = v24;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v424, 2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveZoneRequestKey"), self, v25, sel__handleRemoveZone_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v423[0] = v27;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v423[1] = v28;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v423, 2);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CBAA98], self, v29, sel__handleAddServiceGroup_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v422[0] = v31;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v422[1] = v32;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v422, 2);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CBABD8], self, v33, sel__handleRemoveServiceGroup_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v421[0] = v35;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v421[1] = v36;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v421, 2);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "registerForMessage:receiver:policies:selector:", CFSTR("kAddActionSetRequestKey"), self, v37, sel__handleAddActionSet_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v420[0] = v39;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v420[1] = v40;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v420, 2);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveActionSetRequestKey"), self, v41, sel__handleRemoveActionSet_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v419[0] = v43;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v419[1] = v44;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v419, 2);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveTriggerRequestKey"), self, v45, sel__handleRemoveTrigger_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v418[0] = v47;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v418[1] = v48;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v418, 2);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateUserAccessRequestKey"), self, v49, sel__handleUpdateUserAccess_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v417[0] = v51;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v417[1] = v52;
  v417[2] = v334;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v417, 3);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CBACD8], self, v53, sel__handleUpdateUserCamerasAccessLevel_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v416[0] = v55;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v416[1] = v56;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v416, 2);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v54, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveUserRequestKey"), self, v57, sel__handleRemoveUser_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v415[0] = v59;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 7);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v415[1] = v60;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v415, 2);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "registerForMessage:receiver:policies:selector:", CFSTR("kSetAppDataRequestKey"), self, v61, sel__handleSetAppData_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v414[0] = v63;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v414[1] = v64;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v414, 2);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB92C0], self, v65, sel__handleUpdateMinimumMediaUserPrivilege_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v413[0] = v67;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v413[1] = v68;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v413, 2);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB92B8], self, v69, sel__handleUpdateMediaPeerToPeerEnabled_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v412[0] = v71;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v412[1] = v72;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v412, 2);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB92B0], self, v73, sel__handleUpdateMediaPassword_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v411[0] = v75;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v411[1] = v76;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v411, 2);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9218], self, v77, sel__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v410[0] = v79;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v410[1] = v80;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v410, 2);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9220], self, v81, sel__handleSetHasOnboardedForAccessCodeMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 131077);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v409[0] = v83;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v409[1] = v84;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v409, 2);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v82, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9228], self, v85, sel__handleSetHasOnboardedForWalletKeyMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v408[0] = v87;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v408[1] = v88;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v408, 2);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB92C8], self, v89, sel__handleUpdateNetworkProtection_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v407[0] = v91;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v407[1] = v92;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v407, 2);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB92D8], self, v93, sel__handleUpdateUserAnnounceAccess_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  v406[0] = v95;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  v406[1] = v96;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v406, 2);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v94, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9200], self, v97, sel__handleResolveThreadNetworkRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  v405[0] = v99;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v405[1] = v100;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v405, 2);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v98, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9250], self, v101, sel__handleSiriPhraseOptionsUpdateRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  v404[0] = v103;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  v404[1] = v104;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v404, 2);
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9238], self, v105, sel__handleSoundCheckUpdateRequest_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  v403[0] = v107;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  v403[1] = v108;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v403, 2);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v106, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB92A8], self, v109, sel__handleHomeUpdateLocationServicesEnabledRequest_);

  if (isInternalBuild())
  {
    -[HMDHome administratorHandler](self, "administratorHandler");
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    v402[0] = v111;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    v402[1] = v112;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v402, 2);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB92A0], self, v113, sel__handleHomeUpdateDidOnboardLocationServicesRequest_);

  }
  if (!isWatch())
  {
    -[HMDHome administratorHandler](self, "administratorHandler");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    v401[0] = v115;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 6);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    v401[1] = v116;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v401, 2);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateInvitationStateRequestKey"), self, v117, sel__handleUpdateOutgoingInvitationState_);

  }
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v118, "setRoles:", objc_msgSend(v118, "roles") | 4);
  v119 = (void *)objc_msgSend(v118, "copy");
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 4, 0);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  v400[0] = v122;
  v400[1] = v120;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  v400[2] = v123;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v400, 3);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v121, "registerForMessage:receiver:policies:selector:", CFSTR("kAddEventTriggerRequestKey"), self, v124, sel__handleAddEventTrigger_);

  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  v399[0] = v125;
  v399[1] = v120;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  v399[2] = v126;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v399, 3);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v121, "registerForMessage:receiver:policies:selector:", CFSTR("kAddTimerTriggerRequestKey"), self, v127, sel__handleAddTimerTrigger_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  v398[0] = v119;
  v398[1] = v120;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  v398[2] = v129;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v398, 3);
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v128, "registerForMessage:receiver:policies:selector:", CFSTR("kAddTriggersInternalRequestKey"), self, v130, sel__handleAddTriggers_);

  objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v129) = objc_msgSend(v131, "productPlatform") == 1;

  if ((_DWORD)v129)
    v132 = 5;
  else
    v132 = 1;
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  v397[0] = v119;
  v397[1] = v120;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", v132);
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  v397[2] = v134;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  v397[3] = v135;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v397, 4);
  v136 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v133, "registerForMessage:receiver:policies:selector:", CFSTR("kAddAccessoryRequestKey"), self, v136, sel__handleAddAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  v396[0] = v119;
  v396[1] = v120;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v138 = (void *)objc_claimAutoreleasedReturnValue();
  v396[2] = v138;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v396, 3);
  v139 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v137, "registerForMessage:receiver:policies:selector:", CFSTR("kAddAccessoriesInternalRequestKey"), self, v139, sel__handleAddAccessories_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v395[0] = v141;
  v395[1] = v120;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v395, 2);
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v140, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB92F0], self, v142, sel__handleUserConsentResponseForAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  v394[0] = v144;
  v394[1] = v120;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v394, 2);
  v145 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v143, "registerForMessage:receiver:policies:selector:", CFSTR("kContinuePairingAccessoryRequestKey"), self, v145, sel__handleContinuePairingAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v146 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  v393[0] = v147;
  v393[1] = v120;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v393, 2);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v146, "registerForMessage:receiver:policies:selector:", CFSTR("kCancelPairingAccessoryRequestKey"), self, v148, sel__handleCancelPairingAccessory_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  v392[0] = v150;
  v392[1] = v119;
  v392[2] = v120;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v151 = (void *)objc_claimAutoreleasedReturnValue();
  v392[3] = v151;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v392, 4);
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v149, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveAccessoryRequestKey"), self, v152, sel__handleRemoveAccessoryMessage_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  v391[0] = v154;
  v391[1] = v119;
  v391[2] = v120;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  v391[3] = v155;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v391, 4);
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v153, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB91E8], self, v156, sel_handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  v390[0] = v119;
  v390[1] = v335;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v390, 2);
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v157, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeRequestCommissioningCertificatesMessage"), self, v158, sel_handleCommissioningCertificateRequest_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  v389[0] = v119;
  v389[1] = v120;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v389, 2);
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v159, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeNotificationPairingCompletionMessage"), self, v160, sel_handleMatterPairingCompletionNotification_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  v388[0] = v162;
  v388[1] = v120;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  v388[2] = v163;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v388, 3);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v161, "registerForMessage:receiver:policies:selector:", CFSTR("kInviteUsersRequestKey"), self, v164, sel__handleUserInvitations_);

  -[HMDHome administratorHandler](self, "administratorHandler");
  v165 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v166 = (void *)objc_claimAutoreleasedReturnValue();
  v387[0] = v166;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v167 = (void *)objc_claimAutoreleasedReturnValue();
  v387[1] = v167;
  v387[2] = v335;
  v387[3] = v119;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v387, 4);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v165, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8D58], self, v168, sel__handleEnableMultiUserRequest_);

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v167) = objc_msgSend(v169, "isResidentCapable");

  if ((_DWORD)v167)
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    v386[0] = v119;
    v386[1] = v120;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    v386[2] = v171;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v386, 3);
    v172 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v170, "registerForMessage:receiver:policies:selector:", CFSTR("kAddHomeInvitesInternalRequestKey"), self, v172, sel__handleOutgoingInvitations_);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v173 = (void *)objc_claimAutoreleasedReturnValue();
    v385[0] = v119;
    v385[1] = v120;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v385, 2);
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v173, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeCreateUniquePSKClientConfigurationRequestKey"), self, v174, sel__handleCreateUniquePSKClientConfiguration_);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    v384[0] = v119;
    v384[1] = v120;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v384, 2);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v175, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeRemoveClientConfigurationRequestKey"), self, v176, sel__handleRemoveClientConfiguration_);

  }
  if (!isWatch())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
    v178 = (void *)objc_claimAutoreleasedReturnValue();
    v383[0] = v178;
    v383[1] = v120;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    v383[2] = v179;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v383, 3);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v177, "registerForMessage:receiver:policies:selector:", CFSTR("kHomeLocationUpdatedNotificationKey"), self, v180, sel__handleHomeLocationUpdateFromSharedAdmin_);

  }
  if (isInternalBuild())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    v382[0] = v182;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    v382[1] = v183;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v382, 2);
    v184 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v181, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8DF0], self, v184, sel__handleSetMinimumNetworkRouterHomeKitVersion_);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v185 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v186 = (void *)objc_claimAutoreleasedReturnValue();
    v381[0] = v186;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v187 = (void *)objc_claimAutoreleasedReturnValue();
    v381[1] = v187;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v381, 2);
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v185, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8DE8], self, v188, sel__handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange_);

  }
  if (isInternalBuild() && isiOSDevice())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v189 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1049605);
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    v380[0] = v190;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    v380[1] = v191;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v380, 2);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v189, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9210], self, v192, sel__handleRetrieveHomeLocationForFeedback_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v193 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v194 = (void *)objc_claimAutoreleasedReturnValue();
  v379[0] = v194;
  v379[1] = v336;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  v379[2] = v195;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v379, 3);
  v196 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v193, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateUserPresenceStatusConsentRequestKey"), self, v196, sel__handleUpdatePresenceConsent_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v197 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  v378[0] = v198;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v199 = (void *)objc_claimAutoreleasedReturnValue();
  v378[1] = v199;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v378, 2);
  v200 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v197, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9208], self, v200, sel__handleRetrieveAsyncResults_);

  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v201, "setRoles:", objc_msgSend(v201, "roles") | 6);
  v202 = (void *)objc_msgSend(v201, "copy");
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v204 = (void *)objc_claimAutoreleasedReturnValue();
  v377[0] = v204;
  v377[1] = v202;
  v377[2] = v335;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v205 = (void *)objc_claimAutoreleasedReturnValue();
  v377[3] = v205;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v377, 4);
  v206 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v203, "registerForMessage:receiver:policies:selector:", CFSTR("kExecuteActionSetRequestKey"), self, v206, sel__handleExecuteActionSet_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  v376[0] = v208;
  v376[1] = v202;
  v376[2] = v335;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v376[3] = v209;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v376, 4);
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v207, "registerForMessage:receiver:policies:selector:", CFSTR("kMultipleCharacteristicWriteRequestKey"), self, v210, sel__handleMultipleCharacteristicWrite_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v212 = (void *)objc_claimAutoreleasedReturnValue();
  v375[0] = v212;
  v375[1] = v202;
  v375[2] = v335;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  v375[3] = v213;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v375, 4);
  v214 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v211, "registerForMessage:receiver:policies:selector:", CFSTR("kMultipleCharacteristicReadRequestKey"), self, v214, sel__handleMultipleCharacteristicRead_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v215 = (void *)objc_claimAutoreleasedReturnValue();
  v374[0] = v202;
  v374[1] = v335;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v216 = (void *)objc_claimAutoreleasedReturnValue();
  v374[2] = v216;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v217 = (void *)objc_claimAutoreleasedReturnValue();
  v374[3] = v217;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v374, 4);
  v218 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v215, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacteristicWriteRequestKey"), self, v218, sel__handleCharacteristicWrite_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v219 = (void *)objc_claimAutoreleasedReturnValue();
  v373[0] = v202;
  v373[1] = v335;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v220 = (void *)objc_claimAutoreleasedReturnValue();
  v373[2] = v220;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v221 = (void *)objc_claimAutoreleasedReturnValue();
  v373[3] = v221;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v373, 4);
  v222 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v219, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacteristicReadRequestKey"), self, v222, sel__handleCharacteristicRead_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v223 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v224 = (void *)objc_claimAutoreleasedReturnValue();
  v372[0] = v224;
  v372[1] = v202;
  v372[2] = v336;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v225 = (void *)objc_claimAutoreleasedReturnValue();
  v372[3] = v225;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v372, 4);
  v226 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v223, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacteristicEnableNotificationRequestKey"), self, v226, sel__handleCharacteristicEnableNotification_);

  if (!isWatch())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v227 = (void *)objc_claimAutoreleasedReturnValue();
    v371[0] = v202;
    v371[1] = v335;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v371, 2);
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v227, "registerForMessage:receiver:policies:selector:", CFSTR("kModifyCharacterisiticNotificationsRequestKey"), self, v228, sel__handleModifyCharacteristicNotifications_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v229 = (void *)objc_claimAutoreleasedReturnValue();
  v370[0] = v202;
  v370[1] = v335;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v370, 2);
  v230 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v229, "registerForMessage:receiver:policies:selector:", CFSTR("kEnableAccessoryReachabilityNotificationRequestKey"), self, v230, sel__handleAccessoryReachabilityRegistrationAndEnable_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v231 = (void *)objc_claimAutoreleasedReturnValue();
  v369[0] = v202;
  v369[1] = v335;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v369, 2);
  v232 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v231, "registerForMessage:receiver:policies:selector:", CFSTR("kDisableAccessoryReachabilityNotificationRequestKey"), self, v232, sel__handleAccessoryReachabilityRegistration_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v233 = (void *)objc_claimAutoreleasedReturnValue();
  v368[0] = v202;
  v368[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v368, 2);
  v234 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v233, "registerForMessage:receiver:policies:selector:", CFSTR("kRequestHomeDataSyncRequestKey"), self, v234, sel__handleRequestHomeDataSync_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v235 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v236 = (void *)objc_claimAutoreleasedReturnValue();
  v367[0] = v236;
  v367[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v367, 2);
  v237 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v235, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacterisiticsChangedInternalNotificationKey"), self, v237, sel__handleCharacteristicsChangedNotification_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v238 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v239 = (void *)objc_claimAutoreleasedReturnValue();
  v366[0] = v239;
  v366[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v366, 2);
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v238, "registerForMessage:receiver:policies:selector:", CFSTR("HMHomeAllowUserManagementMessage"), self, v240, sel__handleAllowUserManagementMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v241 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v242 = (void *)objc_claimAutoreleasedReturnValue();
  v365[0] = v242;
  v365[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v365, 2);
  v243 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v241, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoteReachabilityChangedNotificationKey"), self, v243, sel__handleAccessoryReachabilityChange_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v244 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v245 = (void *)objc_claimAutoreleasedReturnValue();
  v364[0] = v245;
  v364[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v364, 2);
  v246 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v244, "registerForMessage:receiver:policies:selector:", CFSTR("HMDAccessoryResidentReachabilityNotificationRegistrationMessage"), self, v246, sel__handleAccessoryReachabilityEventNotificationsRegistration_);

  +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
  v247 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v247, "setRequiresSecureMessage:", 1);
  objc_msgSend(v247, "setRoles:", 3);
  v332 = (void *)objc_msgSend(v247, "copy");
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v248 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v249 = (void *)objc_claimAutoreleasedReturnValue();
  v363[0] = v249;
  v363[1] = v332;
  v363[2] = v335;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v363, 3);
  v250 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v248, "registerForMessage:receiver:policies:selector:", CFSTR("kConfirmExecuteTriggerRequestKey"), self, v250, sel__handleExecuteConfirmationOfTrigger_);

  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v251 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v251, "setRoles:", 4);
  v252 = (void *)objc_msgSend(v251, "copy");
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v253 = (void *)objc_claimAutoreleasedReturnValue();
  v362[0] = v252;
  v362[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v362, 2);
  v254 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v253, "registerForMessage:receiver:policies:selector:", CFSTR("kPredicateEvaluatePredicateRequestKey"), self, v254, sel_handleEvaluatePredicateMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v333 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  v361[0] = v255;
  v361[1] = v334;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v256 = (void *)objc_claimAutoreleasedReturnValue();
  v361[2] = v256;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v361, 3);
  v257 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v333, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9290], self, v257, sel__handleUpdateAutomaticSoftwareUpdate_);

  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v258 = (void *)objc_claimAutoreleasedReturnValue();
  v360[0] = v258;
  v360[1] = v334;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v259 = (void *)objc_claimAutoreleasedReturnValue();
  v360[2] = v259;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v360, 3);
  v260 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v333, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9298], self, v260, sel__handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v261 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v262 = (void *)objc_claimAutoreleasedReturnValue();
  v359[0] = v262;
  v359[1] = v335;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v359, 2);
  v263 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v261, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeQueryResidentReachabilityForAccessoriesMessageKey"), self, v263, sel__handleQueryResidentReachabilityForAccessories_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v264 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v265 = (void *)objc_claimAutoreleasedReturnValue();
  v358[0] = v265;
  v358[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v358, 2);
  v266 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v264, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8D78], self, v266, sel_executeActionsFromMessage_);

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v267 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v265) = objc_msgSend(v267, "supportsHomeInvitation");

  if ((_DWORD)v265)
  {
    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v268, "setRequiresSecureMessage:", 0);
    objc_msgSend(v268, "setRequiresAccountMessage:", 0);
    objc_msgSend(v268, "setTransportRestriction:", -1);
    v269 = (void *)objc_msgSend(v268, "copy");
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v270 = (void *)objc_claimAutoreleasedReturnValue();
    v357[0] = v269;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v271 = (void *)objc_claimAutoreleasedReturnValue();
    v357[1] = v271;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v357, 2);
    v272 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v270, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateHomeInvitationStateInternalRequestKey"), self, v272, sel__handleUpdateRequestForHomeInvitationFromInvitee_);

  }
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v273 = (void *)objc_claimAutoreleasedReturnValue();
  v274 = objc_msgSend(v273, "supportsRemoteAccess");

  if (v274)
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v275 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    v356[0] = v276;
    v356[1] = v336;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v356, 2);
    v277 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v275, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CBAAE8], self, v277, sel__handleEnableNotifications_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v278 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v279 = (void *)objc_claimAutoreleasedReturnValue();
  v355[0] = v279;
  v355[1] = v335;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v355, 2);
  v280 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v278, "registerForMessage:receiver:policies:selector:", CFSTR("kMediaPropertiesWriteRequestKey"), self, v280, sel__handleMediaPropertiesWrite_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v281 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v282 = (void *)objc_claimAutoreleasedReturnValue();
  v354[0] = v282;
  v354[1] = v335;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v354, 2);
  v283 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v281, "registerForMessage:receiver:policies:selector:", CFSTR("kMediaPropertiesReadRequestKey"), self, v283, sel__handleMediaPropertiesRead_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v284 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v285 = (void *)objc_claimAutoreleasedReturnValue();
  v353[0] = v285;
  v353[1] = v334;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v353, 2);
  v286 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v284, "registerForMessage:receiver:policies:selector:", CFSTR("kStartDiscoveringSymptomsForNearbyDevicesRequestKey"), self, v286, sel__handleStartDiscoveringSymptomsForNearbyDevicesMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v287 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v288 = (void *)objc_claimAutoreleasedReturnValue();
  v352[0] = v288;
  v352[1] = v334;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v352, 2);
  v289 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v287, "registerForMessage:receiver:policies:selector:", CFSTR("kStopDiscoveringSymptomsForNearbyDevicesRequestKey"), self, v289, sel__handleStopDiscoveringSymptomsForNearbyDevicesMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v290 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v291 = (void *)objc_claimAutoreleasedReturnValue();
  v351[0] = v291;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v292 = (void *)objc_claimAutoreleasedReturnValue();
  v351[1] = v292;
  v351[2] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v351, 3);
  v293 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v290, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9ED0], self, v293, sel__handleAssistantAccessControlUpdate_);
  objc_msgSend(v290, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9F88], self, v293, sel__handleMediaContentProfileAccessControlUpdate_);
  objc_msgSend(v290, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9F70], self, v293, sel__handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs_);
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  v350[0] = v295;
  v350[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v350, 2);
  v296 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v294, "registerForMessage:receiver:policies:selector:", CFSTR("HMDUCM.rsr"), self, v296, sel__handleRemoteUserClientCloudShareRequest_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v297 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v298 = (void *)objc_claimAutoreleasedReturnValue();
  v349[0] = v298;
  v349[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v349, 2);
  v299 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v297, "registerForMessage:receiver:policies:selector:", CFSTR("HMDUCM.rRepr"), self, v299, sel__handleRemoteUserClientCloudShareRepairRequest_);

  if (isInternalBuild())
  {
    objc_initWeak(&location, self);
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v300 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v301 = (void *)objc_claimAutoreleasedReturnValue();
    v348[0] = v301;
    v348[1] = v334;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
    v302 = (void *)objc_claimAutoreleasedReturnValue();
    v348[2] = v302;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v348, 3);
    v303 = (void *)objc_claimAutoreleasedReturnValue();
    v337[0] = MEMORY[0x1E0C809B0];
    v337[1] = 3221225472;
    v337[2] = __31__HMDHome__registerForMessages__block_invoke;
    v337[3] = &unk_1E89C1AD0;
    objc_copyWeak(&v338, &location);
    objc_msgSend(v300, "registerForMessage:receiver:policies:messageHandler:", *MEMORY[0x1E0CB8D28], self, v303, v337);

    objc_destroyWeak(&v338);
    objc_destroyWeak(&location);
  }
  -[HMDHome _registerThreadResidentCommissioningMessageHandlers](self, "_registerThreadResidentCommissioningMessageHandlers");
  if (!-[HMDHome stateHandle](self, "stateHandle"))
    -[HMDHome _registerStateHandler](self, "_registerStateHandler");
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v304 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v305 = (void *)objc_claimAutoreleasedReturnValue();
  v347 = v305;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v347, 1);
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v304, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8D90], self, v306, sel__handleFetchLastModifiedServiceOfType_);

  if (isInternalBuild())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v307 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v308 = (void *)objc_claimAutoreleasedReturnValue();
    v346 = v308;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v346, 1);
    v309 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v307, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9268], self, v309, sel__handleTestUpgradeToROAR_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v311 = (void *)objc_claimAutoreleasedReturnValue();
  v345 = v311;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v345, 1);
  v312 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v310, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8D98], self, v312, sel_handleFetchLightProfileSettingsMessage_);

  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v313 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  v344[0] = v314;
  v344[1] = v336;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v315 = (void *)objc_claimAutoreleasedReturnValue();
  v344[2] = v315;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v344, 3);
  v316 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v313, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeCHIPSendRemoteRequestMessage"), self, v316, sel_handleCHIPSendRemoteRequestMessage_);

  if (isInternalBuild())
  {
    +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", self, 4, 0);
    v317 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v318 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
    v319 = (void *)objc_claimAutoreleasedReturnValue();
    v343[0] = v319;
    v343[1] = v317;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v320 = (void *)objc_claimAutoreleasedReturnValue();
    v343[2] = v320;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v343, 3);
    v321 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v318, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB91F0], self, v321, sel_handleResetMatterStorageRequest_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v322 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v323 = (void *)objc_claimAutoreleasedReturnValue();
  v342[0] = v323;
  v342[1] = v336;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v342, 2);
  v324 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v322, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeCHIPSendReportMessage"), self, v324, sel_handleCHIPSendReportMessage_);

  if (isInternalBuild())
  {
    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v325 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
    v326 = (void *)objc_claimAutoreleasedReturnValue();
    v341[0] = v326;
    +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
    v327 = (void *)objc_claimAutoreleasedReturnValue();
    v341[1] = v327;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v341, 2);
    v328 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v325, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9230], self, v328, sel_handleSetPreferredPrimaryMessage_);

  }
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v329 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v330 = (void *)objc_claimAutoreleasedReturnValue();
  v340 = v330;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v340, 1);
  v331 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v329, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8DA0], self, v331, sel__handleFetchTriggerNameRequest_);

}

- (void)_registerForNotifications
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome notificationCenter](self, "notificationCenter");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleActive_, CFSTR("HMDHomeManagerActiveNotification"), v3);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleInactive_, CFSTR("HMDHomeManagerInactiveNotification"), v3);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleAdaptiveClientDisconnected_, CFSTR("HMDHomeManagerAdaptiveClientDisconnectedNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleAccessoryDidAddNetworkRouterControllerNotification_, CFSTR("HMDAccessoryDidAddNetworkRouterControllerNotification"), self);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleAccessoryDidRemoveNetworkRouterControllerNotification_, CFSTR("HMDAccessoryDidRemoveNetworkRouterControllerNotification"), self);
  -[HMDHome currentUser](self, "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleCurrentUserPrivilegeChanged_, CFSTR("HMDUserPrivilegeDidChangeNotification"), v4);

  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleActiveAccountChanged_, CFSTR("HMDAppleAccountManagerAccountUpdatedNotification"), v5);

  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleAccountHandlesUpdated_, CFSTR("HMDAccountHandlesUpdatedNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel___handleProcessStateChange_, CFSTR("HMDProcessInfoStateDidChangeNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleAccessoryReachabilityChangeNotification_, CFSTR("HMDAccessoryIsReachableNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleAccessoryReachabilityChangeNotification_, CFSTR("HMDAccessoryIsNotReachableNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleRemovedMediaSessions_, CFSTR("HMDMediaSessionsRemovedNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleXPCConnectionInvalidated_, CFSTR("HMDXPCClientConnectionInvalidatedNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleDeviceCapabilitiesUpdated_, CFSTR("HMDDeviceCapabilitiiesUpdatedNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handlePrimaryResidentChangeNotification_, CFSTR("HMDResidentDeviceConfirmedStateChangedNotification"), 0);
  if (isiOSDevice())
    objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleDidReceiveIDSMessageWithNoListener_, CFSTR("HMDDidReceiveRemoteMessageWithNoListenerNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleSiriEndPointAddedNotification_, CFSTR("HMDSiriEndpointProfileAddedNotification"), 0);
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_handleRemoteDeviceBecameReachableNotification_, CFSTR("HMDRemoteDeviceIsReachableNotification"), 0);

}

- (void)_handleFetchPresenceMapMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id obj;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  _BYTE v53[128];
  uint8_t v54[128];
  uint8_t buf[4];
  void *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    v40 = v4;
    objc_msgSend(v4, "messagePayload");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hmf_setForKey:", *MEMORY[0x1E0CB9308]);
    v6 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = (void *)v6;
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithSet:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    -[HMDHome home](self, "home");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "usersSupportingPresence");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    obj = v9;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v48;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v48 != v12)
            objc_enumerationMutation(obj);
          v14 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
          objc_msgSend(v14, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v7, "containsObject:", v15);

          if (v16)
          {
            -[HMDHome presenceMonitor](self, "presenceMonitor");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "presenceMap");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "uuid");
            v19 = v7;
            v20 = self;
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "objectForKeyedSubscript:", v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            v23 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(v22, "presenceRegionStatus");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "numberWithUnsignedInteger:", objc_msgSend(v24, "value"));
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "setObject:forKeyedSubscript:", v25, v26);

            self = v20;
            v7 = v19;

          }
        }
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v54, 16);
      }
      while (v11);
    }

    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v27 = v39;
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
    if (v28)
    {
      v29 = v28;
      v30 = *(_QWORD *)v44;
      do
      {
        for (j = 0; j != v29; ++j)
        {
          if (*(_QWORD *)v44 != v30)
            objc_enumerationMutation(v27);
          v32 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * j);
          objc_msgSend(v41, "objectForKeyedSubscript:", v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v33)
            objc_msgSend(v41, "setObject:forKeyedSubscript:", &unk_1E8B327D8, v32);
        }
        v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v43, v53, 16);
      }
      while (v29);
    }

    v51 = *MEMORY[0x1E0CB9FC8];
    v52 = v41;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v40;
    objc_msgSend(v40, "respondWithPayload:", v34);

  }
  else
  {
    v35 = (void *)MEMORY[0x1D17BA0A0]();
    v36 = self;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v56 = v38;
      _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_ERROR, "%{public}@presence map fetch error: not primary resident", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v35);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2708);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v27);
  }

}

- (void)_updateWoWState:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void (**v13)(void);
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v9, "identifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "matchingHAPAccessoryWithServerIdentifier:linkType:", v10, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v9, "isReachable"))
          v12 = v11 == 0;
        else
          v12 = 1;
        if (v12 || !objc_msgSend(v9, "isNonClientNotificationEnabled"))
        {
          -[HMDHome netManagerFactory](self, "netManagerFactory");
          v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();
          v13[2]();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "deregisterWoWAssertionForObject:", v9);
        }
        else
        {
          -[HMDHome netManagerFactory](self, "netManagerFactory");
          v13 = (void (**)(void))objc_claimAutoreleasedReturnValue();
          v13[2]();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "registerWoWAssertionForObject:", v9);
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

}

- (id)_unexpectedCharacteristicsFromCharacteristicNotifications:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v40;
  void *context;
  id v42;
  id obj;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  HMDHome *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  id v74;
  id v75;
  _QWORD v76[4];
  id v77;
  HMDHome *v78;
  uint8_t buf[4];
  void *v80;
  __int16 v81;
  void *v82;
  __int16 v83;
  void *v84;
  _BYTE v85[128];
  _BYTE v86[128];
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome notificationRegistrations](self, "notificationRegistrations");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    context = (void *)MEMORY[0x1D17BA0A0]();
    objc_msgSend(v4, "allKeys");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v76[0] = MEMORY[0x1E0C809B0];
    v76[1] = 3221225472;
    v76[2] = __69__HMDHome__unexpectedCharacteristicsFromCharacteristicNotifications___block_invoke;
    v76[3] = &unk_1E89A4698;
    v42 = v4;
    v45 = v4;
    v77 = v45;
    v78 = self;
    v40 = v9;
    objc_msgSend(v9, "na_map:", v76);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v74 = 0;
    v75 = 0;
    -[HMDHome _notificationPayloadsForRemoteGateway:accessories:enableCharacteristicNotificationPayload:characteristicNotificationThresholdsPayload:disableCharacteristicNotificationPayload:enableMediaNotificationPayload:disableMediaNotificationPayload:](self, 0, v10, &v75, 0, &v74, 0, 0);
    v47 = v75;
    v46 = v74;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    obj = v10;
    v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v87, 16);
    if (!v48)
      goto LABEL_36;
    v44 = *(_QWORD *)v71;
    v56 = self;
    while (1)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v71 != v44)
          objc_enumerationMutation(obj);
        v49 = v11;
        v12 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * v11);
        objc_msgSend(v12, "uuid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "UUIDString");
        v14 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v45, "hmf_dictionaryForKey:", v14);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "hmf_arrayForKey:", v14);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v57 = (void *)v14;
        objc_msgSend(v46, "hmf_arrayForKey:", v14);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v66 = 0u;
        v67 = 0u;
        v68 = 0u;
        v69 = 0u;
        objc_msgSend(v12, "services");
        v50 = (id)objc_claimAutoreleasedReturnValue();
        v53 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v66, v86, 16);
        if (v53)
        {
          v51 = *(_QWORD *)v67;
          do
          {
            for (i = 0; i != v53; ++i)
            {
              if (*(_QWORD *)v67 != v51)
                objc_enumerationMutation(v50);
              v16 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * i);
              objc_msgSend(v16, "instanceID");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "stringValue");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v52, "hmf_dictionaryForKey:", v18);
              v19 = (void *)objc_claimAutoreleasedReturnValue();

              if (v19)
              {
                v54 = i;
                v64 = 0u;
                v65 = 0u;
                v62 = 0u;
                v63 = 0u;
                objc_msgSend(v16, "characteristics");
                v60 = (id)objc_claimAutoreleasedReturnValue();
                v20 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v62, v85, 16);
                if (!v20)
                  goto LABEL_31;
                v21 = v20;
                v22 = *(_QWORD *)v63;
                v59 = v19;
                while (1)
                {
                  for (j = 0; j != v21; ++j)
                  {
                    if (*(_QWORD *)v63 != v22)
                      objc_enumerationMutation(v60);
                    v24 = *(void **)(*((_QWORD *)&v62 + 1) + 8 * j);
                    objc_msgSend(v24, "instanceID");
                    v25 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v25, "stringValue");
                    v26 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v19, "objectForKey:", v26);
                    v27 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v27)
                    {
                      if (objc_msgSend(v61, "containsObject:", v25))
                      {
                        v28 = (void *)MEMORY[0x1D17BA0A0]();
                        v29 = self;
                        HMFGetOSLogHandle();
                        v30 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
                        {
                          HMFGetLogIdentifier();
                          v31 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v24, "shortDescription");
                          v32 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138543874;
                          v80 = v31;
                          v81 = 2112;
                          v82 = v32;
                          v83 = 2112;
                          v84 = v57;
                          _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_DEBUG, "%{public}@Received persistent characteristic changed notification for characteristic (%@), accessoryUUID %@", buf, 0x20u);

                          self = v56;
                        }

                        objc_autoreleasePoolPop(v28);
                      }
                      else
                      {
                        if (!objc_msgSend(v58, "containsObject:", v25))
                          goto LABEL_29;
                        v33 = (void *)MEMORY[0x1D17BA0A0]();
                        v34 = self;
                        HMFGetOSLogHandle();
                        v35 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                        {
                          HMFGetLogIdentifier();
                          v36 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v24, "shortDescription");
                          v55 = v33;
                          v37 = v8;
                          v38 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138543874;
                          v80 = v36;
                          v81 = 2112;
                          v82 = v38;
                          v83 = 2112;
                          v84 = v57;
                          _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected characteristic changed notification for characteristic (%@), accessoryUUID %@", buf, 0x20u);

                          v8 = v37;
                          v33 = v55;

                          self = v56;
                        }

                        objc_autoreleasePoolPop(v33);
                        objc_msgSend(v8, "addObject:", v24);
                      }
                      v19 = v59;
                    }
LABEL_29:

                  }
                  v21 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v62, v85, 16);
                  if (!v21)
                  {
LABEL_31:

                    i = v54;
                    break;
                  }
                }
              }

            }
            v53 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v66, v86, 16);
          }
          while (v53);
        }

        v11 = v49 + 1;
      }
      while (v49 + 1 != v48);
      v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v87, 16);
      if (!v48)
      {
LABEL_36:

        objc_autoreleasePoolPop(context);
        v7 = (void *)objc_msgSend(v8, "copy");

        v4 = v42;
        goto LABEL_37;
      }
    }
  }
  v7 = (void *)MEMORY[0x1E0C9AA60];
LABEL_37:

  return v7;
}

- (void)_handleRename:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeModel *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  HMDHomeModel *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  _QWORD v31[2];
  uint8_t buf[4];
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = HMMaxLengthForNaming();
  if (objc_msgSend(v5, "length") <= v6)
  {
    -[HMDHome homeManager](self, "homeManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome name](self, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v31[0] = v13;
    -[HMDHome uuid](self, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v31[1] = v14;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "replaceName:withNewName:inNamespaces:", v12, v5, v15);
    v16 = (HMDHomeModel *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      if (-[HMDHomeModel code](v16, "code") == 31)
      {
        v17 = (void *)MEMORY[0x1E0CB35C8];
        v18 = *MEMORY[0x1E0CB8C70];
        -[HMDHomeModel userInfo](v16, "userInfo");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "errorWithDomain:code:userInfo:", v18, 32, v19);
        v20 = objc_claimAutoreleasedReturnValue();

        v16 = (HMDHomeModel *)v20;
      }
      objc_msgSend(v4, "respondWithError:", v16);
    }
    else
    {
      v21 = [HMDHomeModel alloc];
      -[HMDHome uuid](self, "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v21, "initWithObjectChangeType:uuid:parentUUID:", 2, v22, v23);

      -[HMDHomeModel setName:](v16, "setName:", v5);
      -[HMDHome backingStore](self, "backingStore");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "transaction:options:", v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v27, "add:", v16);
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = __25__HMDHome__handleRename___block_invoke;
      v28[3] = &unk_1E89C21C0;
      v29 = v4;
      v30 = v5;
      objc_msgSend(v27, "run:", v28);

    }
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }

}

- (id)_handleRenameHomeModel:(id)a3 message:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  const __CFString *v21;
  void *v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v6 = a4;
  objc_msgSend(a3, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hm_truncatedNameString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8 && objc_msgSend(v8, "length"))
  {
    objc_msgSend(v6, "transactionResult");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "label");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("kRenameHomeRequestKey"));

    if ((v11 & 1) == 0)
    {
      -[HMDHome homeManager](self, "homeManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](self, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v23[0] = v14;
      -[HMDHome uuid](self, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v23[1] = v15;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (id)objc_msgSend(v12, "replaceName:withNewName:inNamespaces:", v13, v8, v16);

    }
    -[HMDHome setName:](self, "setName:", v8);
    v21 = CFSTR("HMDHomeNameNotificationKey");
    v22 = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    logAndPostNotification(CFSTR("HMDHomeNameChangedNotification"), self, v18);

    v19 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v19;
}

- (void)_handleHomeDataRequest:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = a3;
  objc_msgSend(v3, "hmErrorWithCode:", 48);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v5);

}

- (void)_handleAddRoom:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  HMDRoomModel *v26;
  void *v27;
  void *v28;
  HMDRoomModel *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kRoomName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = HMMaxLengthForNaming();
  if (objc_msgSend(v5, "length") <= v6)
  {
    -[HMDHome roomWithName:](self, "roomWithName:", v5);
    v12 = objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v11 = (void *)v12;
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v13);

      goto LABEL_17;
    }
    -[HMDHome rooms](self, "rooms");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "count");
    v16 = maximumRoomsPerHome;

    if (v15 >= v16)
    {
      v22 = (void *)MEMORY[0x1D17BA0A0]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = 138543618;
        v35 = v25;
        v36 = 2112;
        v37 = v5;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@ to home; already at maximum rooms for home",
          (uint8_t *)&v34,
          0x16u);

      }
      objc_autoreleasePoolPop(v22);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 49);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMDHome addName:](self, "addName:", v5);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
      {
        v26 = [HMDRoomModel alloc];
        objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](self, "uuid");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v26, "initWithObjectChangeType:uuid:parentUUID:", 1, v27, v28);

        -[HMDRoomModel setName:](v29, "setName:", v5);
        -[HMDHome backingStore](self, "backingStore");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "transaction:options:", v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v33, "add:withMessage:", v29, v4);
        objc_msgSend(v33, "run");

        goto LABEL_16;
      }
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = 138543874;
        v35 = v21;
        v36 = 2112;
        v37 = v5;
        v38 = 2112;
        v39 = v17;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@ to home; namespace error %@",
          (uint8_t *)&v34,
          0x20u);

      }
      objc_autoreleasePoolPop(v18);
    }
    objc_msgSend(v4, "respondWithError:", v17);
LABEL_16:

    v11 = 0;
    goto LABEL_17;
  }
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = 138543362;
    v35 = v10;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v34, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v11);
LABEL_17:

}

- (void)_handleAddRoomModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  HMDRoom *v16;
  void *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD v35[3];
  _QWORD v36[3];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "name");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "uuid");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v8 && v9)
  {
    objc_msgSend(v8, "hm_truncatedNameString");
    v11 = objc_claimAutoreleasedReturnValue();

    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v15;
      v39 = 2112;
      v40 = v11;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Add room: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v34 = v10;
    v16 = -[HMDRoom initWithName:uuid:home:]([HMDRoom alloc], "initWithName:uuid:home:", v11, v10, v13);
    -[HMDHome rooms](v13, "rooms");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addObject:", v16);

    -[HMDHome msgDispatcher](v13, "msgDispatcher");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](v13, "workQueue");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDRoom configure:queue:](v16, "configure:queue:", v18, v19);

    objc_msgSend(v7, "transactionResult");
    v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "markChanged");
    objc_msgSend(v20, "markSaveToAssistant");
    v35[0] = CFSTR("kHomeUUID");
    -[HMDHome uuid](v13, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "UUIDString");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v36[0] = v22;
    v36[1] = v11;
    v33 = (void *)v11;
    v35[1] = CFSTR("kRoomName");
    v35[2] = CFSTR("kRoomUUID");
    -[HMDRoom uuid](v16, "uuid");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "UUIDString");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v36[2] = v24;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, v35, 3);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "respondWithPayload:", v25);
    if (-[HMDHome isOwnerUser](v13, "isOwnerUser"))
    {
      -[HMDHome home](v13, "home");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "homeManager");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "updateCurrentUserEligibleForOwnerToAutoMigration");

    }
    v8 = v33;
    v10 = v34;
    goto LABEL_12;
  }
  v28 = (void *)MEMORY[0x1D17BA0A0]();
  v29 = self;
  HMFGetOSLogHandle();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v38 = v31;
    v39 = 2112;
    v40 = (uint64_t)v8;
    _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't add room %@; invalid parameter", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v28);
  objc_msgSend(v7, "responseHandler");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (v32)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v16 = (HMDRoom *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, HMDRoom *, _QWORD))v20)[2](v20, v16, 0);
LABEL_12:

  }
}

- (void)_handleRemoveRoom:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  HMDRoomModel *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t v55[128];
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kRoomUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v19;
      v58 = 2112;
      v59 = v20;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot find room UUID in remove room message payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v14 = (void *)MEMORY[0x1E0CB35C8];
    v15 = 2;
    goto LABEL_9;
  }
  -[HMDHome roomForEntireHome](self, "roomForEntireHome");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v5, "isEqual:", v7);

  if (v8)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome roomForEntireHome](v10, "roomForEntireHome");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v12;
      v58 = 2112;
      v59 = v13;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle request to remove roomForEntireHome: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = (void *)MEMORY[0x1E0CB35C8];
    v15 = 29;
LABEL_9:
    objc_msgSend(v14, "hmErrorWithCode:", v15);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v21);
    goto LABEL_29;
  }
  -[HMDHome roomWithUUID:](self, "roomWithUUID:", v5);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (void *)MEMORY[0x1D17BA0A0]();
  v50 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v21)
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v25;
      v58 = 2112;
      v59 = v21;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Removing room: %@", buf, 0x16u);

    }
    v48 = v21;

    objc_autoreleasePoolPop(v22);
    v26 = [HMDRoomModel alloc];
    -[HMDHome uuid](v50, "uuid");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v26, "initWithObjectChangeType:uuid:parentUUID:", 3, v5, v27);

    -[HMDHome backingStore](v50, "backingStore");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v30 = v4;
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "transaction:options:", v31, v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v47 = (void *)v28;
    v49 = v30;
    objc_msgSend(v33, "add:withMessage:", v28, v30);
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    -[HMDHome accessories](v50, "accessories");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
    if (v35)
    {
      v36 = v35;
      v37 = *(_QWORD *)v52;
      do
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v52 != v37)
            objc_enumerationMutation(v34);
          v39 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * i);
          objc_msgSend(v39, "room");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "uuid");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = objc_msgSend(v5, "isEqual:", v41);

          if (v42)
          {
            -[HMDHome roomForEntireHome](v50, "roomForEntireHome");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "modelWithUpdatedRoom:", v43);
            v44 = (void *)objc_claimAutoreleasedReturnValue();

            if (v44)
              objc_msgSend(v33, "add:", v44);

          }
        }
        v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
      }
      while (v36);
    }

    objc_msgSend(v33, "run");
    v21 = v48;
    v4 = v49;
    v45 = v47;
  }
  else
  {
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v46;
      v58 = 2112;
      v59 = v5;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find room to remove with UUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v45);
  }

LABEL_29:
}

- (void)_handleRemoveRoomModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  HMDHome *v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[3];
  _QWORD v63[3];
  _BYTE v64[128];
  uint8_t v65[128];
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  void *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome roomWithUUID:](self, "roomWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v51 = v8;
    objc_msgSend(v9, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome roomForEntireHome](self, "roomForEntireHome");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v11, "isEqual:", v13);

    if (v14)
    {
      objc_msgSend(v7, "responseHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = v51;
      if (v15)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 29);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "responseHandler");
        v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v17)[2](v17, v16, 0);

      }
    }
    else
    {
      v53 = v7;
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "name");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v67 = v22;
        v68 = 2112;
        v69 = v23;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Remove room: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      -[HMDHome zones](v20, "zones");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v58, v65, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v59;
        do
        {
          for (i = 0; i != v26; ++i)
          {
            if (*(_QWORD *)v59 != v27)
              objc_enumerationMutation(v24);
            objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * i), "removeRoom:", v10);
          }
          v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v58, v65, 16);
        }
        while (v26);
      }
      v50 = v6;

      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = v20;
      -[HMDHome accessories](v20, "accessories");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
      if (v30)
      {
        v31 = v30;
        v32 = *(_QWORD *)v55;
        do
        {
          for (j = 0; j != v31; ++j)
          {
            if (*(_QWORD *)v55 != v32)
              objc_enumerationMutation(v29);
            v34 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * j);
            objc_msgSend(v10, "uuid", v50);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "room");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "uuid");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend(v35, "isEqual:", v37);

            if (v38)
            {
              objc_msgSend(v53, "transactionResult");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome roomForEntireHome](v52, "roomForEntireHome");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "updateRoom:source:", v40, objc_msgSend(v39, "source"));

            }
          }
          v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
        }
        while (v31);
      }

      objc_msgSend(v10, "name");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = -[HMDHome removeName:](v52, "removeName:", v41);

      -[HMDHome rooms](v52, "rooms");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "removeObject:", v10);

      v7 = v53;
      objc_msgSend(v53, "transactionResult");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "markChanged");
      objc_msgSend(v44, "markSaveToAssistant");
      v62[0] = CFSTR("kHomeUUID");
      -[HMDHome uuid](v52, "uuid");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "UUIDString");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v63[0] = v46;
      v62[1] = CFSTR("kRoomName");
      objc_msgSend(v10, "name");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v63[1] = v47;
      v62[2] = CFSTR("kRoomUUID");
      v8 = v51;
      objc_msgSend(v51, "UUIDString");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v63[2] = v48;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 3);
      v49 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v53, "respondWithPayload:", v49);
      v6 = v50;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v18);

  }
}

- (void)_handleAddZone:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  HMDZoneModel *v30;
  void *v31;
  HMDZoneModel *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[4];
  id v38;
  id v39;
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kZoneName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v5 && v6)
  {
    v8 = HMMaxLengthForNaming();
    if (objc_msgSend(v5, "length") > v8)
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v42 = v12;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      v13 = (void *)MEMORY[0x1E0CB35C8];
      v14 = 46;
      goto LABEL_8;
    }
    -[HMDHome zoneWithName:](self, "zoneWithName:", v5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v16 = (void *)MEMORY[0x1E0CB35C8];
      v17 = 1;
    }
    else
    {
      -[HMDHome zones](self, "zones");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "count");
      v20 = maximumZonesPerHome;

      if (v19 < v20)
      {
        -[HMDHome addName:](self, "addName:", v5);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v21)
        {
          v30 = [HMDZoneModel alloc];
          -[HMDHome uuid](self, "uuid");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v30, "initWithObjectChangeType:uuid:parentUUID:", 1, v7, v31);

          -[HMDZoneModel setName:](v32, "setName:", v5);
          -[HMDHome backingStore](self, "backingStore");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "name");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "transaction:options:", v34, v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v36, "add:", v32);
          v37[0] = MEMORY[0x1E0C809B0];
          v37[1] = 3221225472;
          v37[2] = __26__HMDHome__handleAddZone___block_invoke;
          v37[3] = &unk_1E89C0DA8;
          v38 = v4;
          v39 = v7;
          v40 = v5;
          objc_msgSend(v36, "run:", v37);

          goto LABEL_21;
        }
        v22 = (void *)MEMORY[0x1D17BA0A0]();
        v23 = self;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v42 = v25;
          v43 = 2112;
          v44 = v5;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; invalid parameter",
            buf,
            0x16u);

        }
        objc_autoreleasePoolPop(v22);
LABEL_20:
        objc_msgSend(v4, "respondWithError:", v21);
LABEL_21:

        goto LABEL_22;
      }
      v26 = (void *)MEMORY[0x1D17BA0A0]();
      v27 = self;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v42 = v29;
        v43 = 2112;
        v44 = v5;
        _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; already at maximum zones for home",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v26);
      v16 = (void *)MEMORY[0x1E0CB35C8];
      v17 = 49;
    }
    objc_msgSend(v16, "hmErrorWithCode:", v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_20;
  }
  v13 = (void *)MEMORY[0x1E0CB35C8];
  v14 = 20;
LABEL_8:
  objc_msgSend(v13, "hmErrorWithCode:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v15);
LABEL_22:

}

- (void)_handleAddZoneModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  HMDZone *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "name");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hm_truncatedNameString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "uuid");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v9 && v10)
  {
    v12 = -[HMDZone initWithName:uuid:home:]([HMDZone alloc], "initWithName:uuid:home:", v9, v10, self);
    -[HMDHome zones](self, "zones");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v12);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDZone configure:queue:](v12, "configure:queue:", v14, v15);

    -[HMDZone updateZoneWithModel:message:error:](v12, "updateZoneWithModel:message:error:", v6, v7, 0);
    objc_msgSend(v7, "transactionResult");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "markChanged");
    -[HMDZone roomUUIDs](v12, "roomUUIDs");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "count");

    if (v18)
      objc_msgSend(v16, "markSaveToAssistant");
    objc_msgSend(v7, "respondWithPayload:", 0);

  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v22;
      v25 = 2112;
      v26 = v9;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Can't add zone %@; invalid parameter",
        (uint8_t *)&v23,
        0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v12 = (HMDZone *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v12);
  }

}

- (void)_handleRemoveZone:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDZoneModel *v7;
  void *v8;
  HMDZoneModel *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;

  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kZoneUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome zoneWithUUID:](self, "zoneWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = [HMDZoneModel alloc];
    -[HMDHome uuid](self, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 3, v5, v8);

    -[HMDHome backingStore](self, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "add:", v9);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __29__HMDHome__handleRemoveZone___block_invoke;
    v14[3] = &unk_1E89C2350;
    v15 = v4;
    objc_msgSend(v13, "run:", v14);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v9 = (HMDZoneModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
  }

}

- (void)_handleRemoveZoneModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome zoneWithUUID:](self, "zoneWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDHome removeName:](self, "removeName:", v11);

    -[HMDHome zones](self, "zones");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeObject:", v10);

    objc_msgSend(v7, "transactionResult");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "markChanged");
    v15 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v14, "markSaveToAssistant"));
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v19;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove zone: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v14);
  }

}

- (void)setAccessories:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome _setAccessories:](self, "_setAccessories:", v4);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v23;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v5);
        v10 = *(id *)(*((_QWORD *)&v22 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
        {
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          -[HMDHome serviceGroups](self, "serviceGroups", 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v19;
            do
            {
              v17 = 0;
              do
              {
                if (*(_QWORD *)v19 != v16)
                  objc_enumerationMutation(v13);
                objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v17++), "fixupServicesForReplacementAccessory:", v12);
              }
              while (v15 != v17);
              v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
            }
            while (v15);
          }

        }
        ++v9;
      }
      while (v9 != v7);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v7);
  }

}

- (void)_setAccessories:(id)a3
{
  void *v4;
  NSMutableDictionary *v5;
  NSMutableDictionary *accessories;
  id v7;

  v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (v7)
  {
    objc_msgSend(v7, "na_dictionaryWithKeyGenerator:", &__block_literal_global_914);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (NSMutableDictionary *)objc_msgSend(v4, "mutableCopy");
    accessories = self->_accessories;
    self->_accessories = v5;

  }
  else
  {
    -[NSMutableDictionary removeAllObjects](self->_accessories, "removeAllObjects");
  }
  os_unfair_recursive_lock_unlock();

}

- (NSArray)appleMediaAccessories
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_915);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (id)mediaSystemForAppleMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHome mediaSystems](self, "mediaSystems", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        if ((_mediaSystemContainsAccessory(v9, v4) & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (id)audioDestinationControllerDataForDestination:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __56__HMDHome_audioDestinationControllerDataForDestination___block_invoke;
  v10[3] = &unk_1E89C1088;
  v11 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "audioDestinationControllerData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)targetAccessoriesWithDestinationIdentifiers:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  id (*v21)(uint64_t, void *);
  void *v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaSystems](self, "mediaSystems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke;
  v24[3] = &unk_1E89A4720;
  v8 = v4;
  v25 = v8;
  objc_msgSend(v6, "na_map:", v24);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v7;
  v20 = 3221225472;
  v21 = __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke_2;
  v22 = &unk_1E89A4748;
  v10 = v8;
  v23 = v10;
  objc_msgSend(v5, "na_map:", &v19);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "arrayByAddingObjectsFromArray:", v11, v19, v20, v21, v22);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "count");
  if (v13 != objc_msgSend(v10, "count"))
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v27 = v17;
      v28 = 2112;
      v29 = v10;
      v30 = 2112;
      v31 = v12;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to get target accessories for destination identifiers: %@ targets: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v14);

    v12 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v12;
}

- (id)destinationManagersWithDestinationIdentifiers:(id)a3 supportedOptions:(unint64_t)a4
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  v6 = a3;
  -[HMDHome mediaDestinationManagersWithSupportedOptions:](self, "mediaDestinationManagersWithSupportedOptions:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __74__HMDHome_destinationManagersWithDestinationIdentifiers_supportedOptions___block_invoke;
  v11[3] = &unk_1E89B10A0;
  v12 = v6;
  v8 = v6;
  objc_msgSend(v7, "na_filter:", v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)rootDestinationManagerWithDescendantDestinationIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void *);
  void *v13;
  HMDHome *v14;
  id v15;

  v4 = a3;
  -[HMDHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v11 = 3221225472;
  v12 = __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke;
  v13 = &unk_1E89A7260;
  v14 = self;
  v15 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", &v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "audioDestinationManager", v10, v11, v12, v13, v14);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)destinationManagerWithParentIdentifier:(id)a3
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __50__HMDHome_destinationManagerWithParentIdentifier___block_invoke;
  v8[3] = &unk_1E89B10A0;
  v9 = v4;
  v5 = v4;
  -[HMDHome destinationManagerPassingTest:](self, "destinationManagerPassingTest:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)destinationManagerWithDestinationIdentifier:(id)a3
{
  id v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __55__HMDHome_destinationManagerWithDestinationIdentifier___block_invoke;
  v8[3] = &unk_1E89B10A0;
  v9 = v4;
  v5 = v4;
  -[HMDHome destinationManagerPassingTest:](self, "destinationManagerPassingTest:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)destinationManagerPassingTest:(id)a3
{
  uint64_t (**v4)(id, void *);
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t (**)(id, void *))a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v22;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v22 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v9), "audioDestinationManager");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10 && (v4[2](v4, v10) & 1) != 0)
        {
          v11 = v5;
          goto LABEL_22;
        }

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      if (v7)
        continue;
      break;
    }
  }

  -[HMDHome mediaSystems](self, "mediaSystems");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v18;
LABEL_12:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v18 != v14)
        objc_enumerationMutation(v11);
      objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v15), "audioDestinationManager", (_QWORD)v17);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        if ((v4[2](v4, v10) & 1) != 0)
          break;
      }

      if (v13 == ++v15)
      {
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v13)
          goto LABEL_12;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v10 = 0;
  }

LABEL_22:
  return v10;
}

- (id)mediaDestinationManagersWithHomeTheaterSupportedOptions
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaSystems](self, "mediaSystems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "na_map:", &__block_literal_global_921);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke_2;
  v10[3] = &unk_1E89A47D8;
  v11 = v4;
  v6 = v4;
  objc_msgSend(v3, "na_map:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "arrayByAddingObjectsFromArray:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)mediaDestinationManagersWithSupportedOptions:(unint64_t)a3
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  unint64_t v15;
  _QWORD v16[5];

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaSystems](self, "mediaSystems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke;
  v16[3] = &__block_descriptor_40_e54____HMDMediaDestinationManager__16__0__HMDMediaSystem_8l;
  v16[4] = a3;
  objc_msgSend(v6, "na_map:", v16);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v7;
  v13[1] = 3221225472;
  v13[2] = __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke_2;
  v13[3] = &unk_1E89A4820;
  v14 = v6;
  v15 = a3;
  v9 = v6;
  objc_msgSend(v5, "na_map:", v13);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "arrayByAddingObjectsFromArray:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (NSArray)mediaDestinations
{
  return (NSArray *)-[HMDHome mediaDestinationsInRoom:](self, "mediaDestinationsInRoom:", 0);
}

- (id)mediaDestinationsInRoom:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  char v28;
  void *v29;
  void *v31;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome mediaSystems](self, "mediaSystems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v5;
  v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v6, "count") + objc_msgSend(v5, "count"));
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v39 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        objc_msgSend(v12, "audioDestination");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v13)
        {
          if (!v4)
            goto LABEL_9;
          objc_msgSend(v12, "room");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "uuid");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "hmf_isEqualToUUID:", v16);

          if (v17)
LABEL_9:
            objc_msgSend(v33, "addObject:", v13);
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    }
    while (v9);
  }
  v32 = v7;

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v18 = v31;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v35;
    do
    {
      for (j = 0; j != v20; ++j)
      {
        if (*(_QWORD *)v35 != v21)
          objc_enumerationMutation(v18);
        v23 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * j);
        objc_msgSend(v23, "audioDestination");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
        {
          if (!v4)
          {
            if ((_mediaSystemsContainsAccessory(v32, v23) & 1) != 0)
              goto LABEL_25;
LABEL_23:
            objc_msgSend(v33, "addObject:", v24);
            goto LABEL_25;
          }
          objc_msgSend(v23, "room");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "uuid");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "uuid");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v26, "hmf_isEqualToUUID:", v27) & 1) != 0)
          {
            v28 = _mediaSystemsContainsAccessory(v32, v23);

            if ((v28 & 1) == 0)
              goto LABEL_23;
          }
          else
          {

          }
        }
LABEL_25:

      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
    }
    while (v20);
  }

  v29 = (void *)objc_msgSend(v33, "copy");
  return v29;
}

- (int64_t)destinationTypeForDestinationWithIdentifier:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  void *v26;
  char v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v34;
    v9 = 3;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v34 != v8)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v11, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "hmf_isEqualToUUID:", v4);

        if ((v13 & 1) != 0)
        {
          v17 = v5;
          goto LABEL_26;
        }
        objc_msgSend(v11, "audioDestination");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "uniqueIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v4);

        if ((v16 & 1) != 0)
        {
          v17 = v5;
          v9 = 1;
          goto LABEL_26;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
      if (v7)
        continue;
      break;
    }
  }

  -[HMDHome mediaSystems](self, "mediaSystems");
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v17 = (id)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v30;
    while (2)
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v30 != v20)
          objc_enumerationMutation(v17);
        v22 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * j);
        objc_msgSend(v22, "uuid", (_QWORD)v29);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "hmf_isEqualToUUID:", v4);

        if ((v24 & 1) != 0)
        {
          v9 = 4;
          goto LABEL_25;
        }
        objc_msgSend(v22, "audioDestination");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "uniqueIdentifier");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v26, "hmf_isEqualToUUID:", v4);

        if ((v27 & 1) != 0)
        {
          v9 = 2;
          goto LABEL_25;
        }
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      v9 = 0;
      if (v19)
        continue;
      break;
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_25:

LABEL_26:
  return v9;
}

- (id)destinationControllers
{
  void *v2;
  void *v3;

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_925);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)destinationControllerWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome destinationControllers](self, "destinationControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __47__HMDHome_destinationControllerWithIdentifier___block_invoke;
  v9[3] = &unk_1E89A4888;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)destinationControllerWithDestinationIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome destinationControllers](self, "destinationControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __58__HMDHome_destinationControllerWithDestinationIdentifier___block_invoke;
  v9[3] = &unk_1E89A4888;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)destinationControllerWithCommittedDestinationIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome destinationControllers](self, "destinationControllers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __67__HMDHome_destinationControllerWithCommittedDestinationIdentifier___block_invoke;
  v9[3] = &unk_1E89A4888;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)shouldEncodeLegacyLocationServiceSettingForSettingsParentUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome mediaSystemWithUUID:](self, "mediaSystemWithUUID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    LODWORD(v7) = objc_msgSend(v5, "componentsSupportsHomeLevelLocationServiceSetting") ^ 1;
  }
  else
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;

    if (v10)
    {
      LODWORD(v7) = objc_msgSend(v10, "supportsHomeLevelLocationServiceSetting") ^ 1;
    }
    else
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543618;
        v16 = v13;
        v17 = 2112;
        v18 = v4;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to filter legacy location service setting due to no parent found with uuid: %@", (uint8_t *)&v15, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
      LOBYTE(v7) = 0;
    }

  }
  return (char)v7;
}

- (unint64_t)assistantAccessCapableAccessoryCount
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v2);
        v5 += +[HMDAssistantAccessControl isAccessorySupported:](HMDAssistantAccessControl, "isAccessorySupported:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * i));
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)addAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDAssertionLogEvent *v20;
  void *v21;
  HMDAssertionLogEvent *v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (!v4)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v10;
      v11 = "%{public}@Attempting to add a nil accessory";
      v12 = v9;
      v13 = 12;
      goto LABEL_8;
    }
LABEL_9:

    objc_autoreleasePoolPop(v7);
    goto LABEL_11;
  }
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (!-[HMDHome _addAccessory:](self, "_addAccessory:", v5))
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v10;
        v26 = 2112;
        v27 = v5;
        v11 = "%{public}@Attempted to add an accessory that is already present: %@";
        v12 = v9;
        v13 = 22;
LABEL_8:
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);

        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else
  {
    objc_msgSend(v5, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v14)
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "shortDescription");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v18;
        v26 = 2112;
        v27 = v19;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_FAULT, "%{public}@Submitting ABC event for failure: Attempted to add an accessory that does not have an uuid: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      v20 = [HMDAssertionLogEvent alloc];
      objc_msgSend(v5, "shortDescription");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = -[HMDAssertionLogEvent initWithReason:](v20, "initWithReason:", CFSTR("Attempted to add an accessory that does not have an uuid: %@"), v21);

      +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "submitLogEvent:", v22);

    }
  }
LABEL_11:

}

- (BOOL)_addAccessory:(id)a3
{
  id v4;
  NSMutableDictionary *accessories;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  id v11;
  void *v12;
  NSMutableDictionary *v13;
  void *v14;
  int v16;
  id v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  accessories = self->_accessories;
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary objectForKey:](accessories, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Added accessory to the home's list: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v13 = self->_accessories;
    objc_msgSend(v4, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v4, v14);

  }
  os_unfair_recursive_lock_unlock();

  return v7 == 0;
}

- (void)_addAccessories:(id)a3
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __27__HMDHome__addAccessories___block_invoke;
  v3[3] = &unk_1E89BEF40;
  v3[4] = self;
  objc_msgSend(a3, "na_each:", v3);
}

- (void)removeAccessory:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  id v9;
  char isKindOfClass;
  void *v11;
  id v12;
  id v13;
  char v14;
  void *v15;
  id v16;
  NSObject *workQueue;
  id *v18;
  _QWORD *v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[5];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4 && -[HMDHome _removeAccessory:](self, "_removeAccessory:", v4))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v8;
      v26 = 2112;
      v27 = v4;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Removed accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    if (objc_msgSend(v4, "isPrimary"))
    {
      v9 = v4;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
        v11 = v9;
      else
        v11 = 0;
      v12 = v11;

      v13 = v9;
      objc_opt_class();
      v14 = objc_opt_isKindOfClass();
      if ((v14 & 1) != 0)
        v15 = v13;
      else
        v15 = 0;
      v16 = v15;

      if ((isKindOfClass & 1) != 0)
      {
        workQueue = v6->_workQueue;
        v22[0] = MEMORY[0x1E0C809B0];
        v22[1] = 3221225472;
        v22[2] = __27__HMDHome_removeAccessory___block_invoke;
        v22[3] = &unk_1E89C2328;
        v22[4] = v6;
        v18 = &v23;
        v23 = v13;
        v19 = v22;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
LABEL_17:

          goto LABEL_18;
        }
        workQueue = v6->_workQueue;
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 3221225472;
        v20[2] = __27__HMDHome_removeAccessory___block_invoke_2;
        v20[3] = &unk_1E89C2328;
        v20[4] = v6;
        v18 = &v21;
        v21 = v13;
        v19 = v20;
      }
      dispatch_async(workQueue, v19);

      goto LABEL_17;
    }
  }
LABEL_18:

}

- (BOOL)_removeAccessory:(id)a3
{
  id v4;
  NSMutableDictionary *accessories;
  void *v6;
  void *v7;
  NSMutableDictionary *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  id v13;
  void *v14;
  HMDHome *v15;
  id v16;
  void *v17;
  int v19;
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  accessories = self->_accessories;
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary objectForKey:](accessories, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = self->_accessories;
    objc_msgSend(v4, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", v9);

    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v13;
      v21 = 2112;
      v22 = v14;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Successfully removed accessory from home's list: %@", (uint8_t *)&v19, 0x16u);

    }
  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v16;
      v21 = 2112;
      v22 = v17;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to remove accessory from home's list: %@", (uint8_t *)&v19, 0x16u);

    }
  }

  objc_autoreleasePoolPop(v10);
  os_unfair_recursive_lock_unlock();

  return v7 != 0;
}

- (void)_handleAddAccessory:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  id v10;

  v10 = a3;
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "supportsAddingAccessory");

  if ((v5 & 1) != 0)
  {
    objc_msgSend(v10, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
      -[HMDHome _handleAddAccessoryWithDescription:](self, "_handleAddAccessoryWithDescription:", v10);
    else
      -[HMDHome _handleLegacyAddAccessory:](self, "_handleLegacyAddAccessory:", v10);
  }
  else
  {
    objc_msgSend(v10, "responseHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v10, "responseHandler");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v9, 0);

    }
  }

}

- (void)performLocalAddAccessoryWithDescription:(id)a3 progressHandlerDelegate:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "supportsAddingAccessory");

  if ((v12 & 1) != 0)
  {
    -[HMDHome currentAccessory](self, "currentAccessory");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v13)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v26 = v18;
        v27 = 2112;
        v28 = v8;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Performing local add accessory with setup description %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(MEMORY[0x1E0D285F8], "internalMessageWithName:messagePayload:", CFSTR("kAddAccessoryRequestKey"), 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_initWeak((id *)buf, v15);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __86__HMDHome_performLocalAddAccessoryWithDescription_progressHandlerDelegate_completion___block_invoke;
      v22[3] = &unk_1E89C1B70;
      objc_copyWeak(&v24, (id *)buf);
      v23 = v10;
      objc_msgSend(v19, "setResponseHandler:", v22);
      -[HMDHome _handleAddAccessoryWithDescription:progressHandlerDelegate:message:]((id *)&v15->super.super.isa, v8, v9, v19);

      objc_destroyWeak(&v24);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v26 = v21;
        v27 = 2112;
        v28 = v8;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Will not perform local add accessory with setup description %@ without current accessory present", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      if (!v10)
        goto LABEL_13;
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2020);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v10 + 2))(v10, v19);
    }

LABEL_13:
    goto LABEL_14;
  }
  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v10 + 2))(v10, v20);

  }
LABEL_14:

}

- (BOOL)__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  BOOL v18;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if ((objc_msgSend(v6, "isEntitledForSPIAccess") & 1) == 0
    && (objc_msgSend(v6, "isEntitledToProvideAccessorySetupPayload") & 1) == 0
    && (_os_feature_enabled_impl() & 1) == 0)
  {
    if (a4)
    {
      v9 = (void *)MEMORY[0x1E0CB35C8];
      v10 = 48;
      goto LABEL_14;
    }
LABEL_18:
    v18 = 0;
    goto LABEL_19;
  }
  if (!-[HMDHome checkForNetworkRouterSupport:error:](self, "checkForNetworkRouterSupport:error:", 4, a4))
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v12, "networkRouterSupport"));
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = (void *)v15;
      if (a4)
        v17 = *a4;
      else
        v17 = 0;
      v20 = 138543874;
      v21 = v14;
      v22 = 2112;
      v23 = v15;
      v24 = 2112;
      v25 = v17;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Cannot add network router to the home - networkRouterSupport %@ error %@", (uint8_t *)&v20, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    goto LABEL_18;
  }
  -[HMDHome wiFiRouterAccessories](self, "wiFiRouterAccessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  if (v8)
  {
    if (a4)
    {
      v9 = (void *)MEMORY[0x1E0CB35C8];
      v10 = 97;
LABEL_14:
      objc_msgSend(v9, "hmErrorWithCode:", v10);
      v18 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v18 = 1;
LABEL_19:

  return v18;
}

- (id)_setupDescriptionFromData:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v23;
  id obj;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v6, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "addRequestIdentifier");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    -[HMDHome addPendingAccessories](self, "addPendingAccessories");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "hm_allKeys");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    obj = v10;
    v25 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v25)
    {
      v26 = *(_QWORD *)v30;
      v23 = v6;
      while (2)
      {
        for (i = 0; i != v25; ++i)
        {
          if (*(_QWORD *)v30 != v26)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
          objc_msgSend(v12, "setupAccessoryPayload", v23);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "setupID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "setupAccessoryPayload");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setupID");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v14, "isEqual:", v16) & 1) != 0)
            goto LABEL_15;
          objc_msgSend(v12, "accessoryUUID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "accessoryUUID");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v17, "isEqual:", v18) & 1) != 0)
          {

LABEL_15:
LABEL_16:
            objc_msgSend(v8, "cancellationReason");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "setCancellationReason:", v21);

            v20 = v12;
            v6 = v23;
            goto LABEL_17;
          }
          objc_msgSend(v12, "addRequestIdentifier");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = objc_msgSend(v19, "isEqual:", v27);

          if ((v28 & 1) != 0)
            goto LABEL_16;
        }
        v6 = v23;
        v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        if (v25)
          continue;
        break;
      }
    }

    v20 = v8;
LABEL_17:

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

- (BOOL)_shouldAllowAddingAccessoryOfCategory:(id)a3 requestMessage:(id)a4 error:(id *)a5
{
  id v8;
  BOOL v9;

  v8 = a4;
  if (objc_msgSend(a3, "isWiFiRouterAccessoryCategory"))
    v9 = -[HMDHome __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:](self, "__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:", v8, a5);
  else
    v9 = 1;

  return v9;
}

- (BOOL)_shouldAllowAddingAccessoryWithDescription:(id)a3 requestMessage:(id)a4 error:(id *)a5
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  BOOL v16;

  v8 = a4;
  v9 = (void *)MEMORY[0x1E0CBA1D8];
  v10 = a3;
  objc_msgSend(v10, "setupAccessoryPayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "categoryNumber");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "categoryWithCategoryIdentifier:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "category");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v14, "isWiFiRouterAccessoryCategory") & 1) != 0)
  {

  }
  else
  {
    v15 = objc_msgSend(v13, "isWiFiRouterAccessoryCategory");

    if ((v15 & 1) == 0)
    {
      v16 = 1;
      goto LABEL_6;
    }
  }
  v16 = -[HMDHome __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:](self, "__shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:", v8, a5);
LABEL_6:

  return v16;
}

- (void)_handleLegacyAddAccessory:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 138543362;
    v37 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling legacy add accessory", (uint8_t *)&v36, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10 && (objc_msgSend(v4, "isEntitledForSPIAccess") & 1) == 0)
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v6;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543362;
        v37 = v32;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Client provided a setup code but does not have entitlement to use SPI", (uint8_t *)&v36, 0xCu);

      }
      objc_autoreleasePoolPop(v29);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v13);
    }
    else
    {
      -[HMDHome accessoryBrowser](v6, "accessoryBrowser");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "unassociatedAccessories");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "hmf_firstObjectWithUUID:", v9);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = v6;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v13)
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v18;
          v38 = 2112;
          v39 = v13;
          _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Found matching unassociated accessory: %@", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v14);
        v19 = (void *)MEMORY[0x1D17BA0A0]();
        v20 = v15;
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v22;
          v38 = 2112;
          v39 = v13;
          _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Continuing legacy add for unassociated accessory: %@", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v19);
        objc_msgSend(v4, "applicationBundleIdentifier");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _continueLegacyAddAccessoryWithUUID:unassociatedAccessory:setupCode:appID:message:](v20, "_continueLegacyAddAccessoryWithUUID:unassociatedAccessory:setupCode:appID:message:", v9, v13, v10, v23, v4);
      }
      else
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome accessoryBrowser](v15, "accessoryBrowser");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "unassociatedAccessories");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543874;
          v37 = v33;
          v38 = 2112;
          v39 = v9;
          v40 = 2112;
          v41 = v35;
          _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Could not find unassociated accessory with UUID %@ for legacy add accessory flow. All unassociated accessories: %@", (uint8_t *)&v36, 0x20u);

        }
        objc_autoreleasePoolPop(v14);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v23);
      }

    }
  }
  else
  {
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = v6;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v27;
      v38 = 2112;
      v39 = v28;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Legacy add accessory message is missing accessory uuid: %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v10);
  }

}

- (BOOL)_shouldUseDeprecatedAddAccessoryMessage:(id)a3 minimumVersion:(id)a4 primaryResident:(id)a5 shouldRelayMessages:(BOOL)a6
{
  id v9;
  void *v10;
  void *v11;
  int v12;
  BOOL v13;
  BOOL v14;

  v9 = a4;
  objc_msgSend(a5, "device");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "version");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v12) = 0;
  if (v9 && a5)
    v12 = objc_msgSend(v11, "isAtLeastVersion:", v9) ^ 1;
  v13 = v12 & a6;
  if (a3)
    v14 = v13;
  else
    v14 = 0;

  return v14;
}

- (void)_continueLegacyAddAccessoryWithUUID:(id)a3 unassociatedAccessory:(id)a4 setupCode:(id)a5 appID:(id)a6 message:(id)a7
{
  id v12;
  id v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  id v23;
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  HMDAddAccessoryProgressState *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDAddAccessoryProgressState *v32;
  id v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  _BOOL4 v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  BOOL v52;
  void *v53;
  HMDHome *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  HMDHome *v59;
  NSObject *v60;
  void *v61;
  uint64_t v62;
  HMDHome *v63;
  void (**v64)(_QWORD, _QWORD, _QWORD);
  void *v65;
  HMDAddAccessoryProgressState *v66;
  void *v67;
  void *v68;
  void *v69;
  HMDAddAccessoryProgressState *v70;
  void *v71;
  HMDHome *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *context;
  void *v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  uint8_t buf[4];
  void *v85;
  __int16 v86;
  id v87;
  __int16 v88;
  id v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v82 = a4;
  v80 = a5;
  v81 = a6;
  v13 = a7;
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v85 = v18;
      v86 = 2112;
      v87 = v12;
      v88 = 2112;
      v89 = v14;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Can't add unassociated accessory: this home already has an accessory with UUID %@: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    if (_os_feature_enabled_impl()
      && objc_msgSend(v13, "isEntitledForSPIAccess")
      && objc_msgSend(v13, "isEntitledToProvideAccessorySetupPayload"))
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = v16;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v85 = v22;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Creating temporary progress handler to invoke with already-associated error", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      v23 = objc_alloc(MEMORY[0x1E0CBA838]);
      -[HMDHome uuid](v20, "uuid");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v78 = (void *)objc_msgSend(v23, "initWithAccessoryUUID:accessoryName:appID:homeUUID:", v12, 0, v81, v24);

      HMDHomeCreateAddAccessoryProgressHandler(v20, v78, v13);
      v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v26 = [HMDAddAccessoryProgressState alloc];
      objc_msgSend(v14, "uuid");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "name");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "manufacturer");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "category");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "productData");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = -[HMDAddAccessoryProgressState initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:](v26, "initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:", v27, v28, v29, v30, 0, v31);

      ((void (**)(_QWORD, uint64_t, HMDAddAccessoryProgressState *))v25)[2](v25, 47, v32);
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 13);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v33);
    goto LABEL_47;
  }
  -[HMDHome accessories](self, "accessories");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v34, "count");
  v36 = maximumAccessoriesPerHome;

  if (v35 >= v36)
  {
    v43 = (void *)MEMORY[0x1D17BA0A0]();
    v44 = self;
    HMFGetOSLogHandle();
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v85 = v46;
      _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_ERROR, "%{public}@Can't add unassociated accessory: already at maximum accessories for home", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v43);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 49);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v33);
  }
  else if ((objc_msgSend(v82, "associationOptions") & 2) != 0)
  {
    v47 = (void *)MEMORY[0x1D17BA0A0]();
    v48 = self;
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v85 = v50;
      _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_INFO, "%{public}@Can't add unassociated accessory: software update needed on the accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v47);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v33 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v33);
  }
  else
  {
    objc_msgSend(v82, "category");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v83 = 0;
    v38 = -[HMDHome _shouldAllowAddingAccessoryOfCategory:requestMessage:error:](self, "_shouldAllowAddingAccessoryOfCategory:requestMessage:error:", v37, v13, &v83);
    v33 = v83;

    if (v38)
    {
LABEL_14:
      v39 = v82;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v40 = v39;
      else
        v40 = 0;
      v79 = v40;

      if (v79)
      {
        v41 = objc_alloc(MEMORY[0x1E0CBA838]);
        -[HMDHome uuid](self, "uuid");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = (void *)objc_msgSend(v41, "initWithAccessoryUUID:accessoryName:appID:homeUUID:", v12, 0, v81, v42);

        objc_msgSend(v77, "setSetupCode:", v80);
        os_unfair_recursive_lock_lock_with_options();
        -[NSMapTable setObject:forKey:](self->_addPendingAccessories, "setObject:forKey:", v13, v77);
        os_unfair_recursive_lock_unlock();
      }
      else
      {
        v77 = 0;
      }
      if (objc_msgSend(v13, "isEntitledForSPIAccess")
        && objc_msgSend(v13, "isEntitledToProvideAccessorySetupPayload"))
      {
        context = (void *)MEMORY[0x1D17BA0A0]();
        v59 = self;
        HMFGetOSLogHandle();
        v60 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v85 = v61;
          _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_DEBUG, "%{public}@Registering Progress Handler", buf, 0xCu);

        }
        objc_autoreleasePoolPop(context);
        HMDHomeCreateAddAccessoryProgressHandler(v59, v77, v13);
        v62 = objc_claimAutoreleasedReturnValue();
        v63 = v59;
        v64 = (void (**)(_QWORD, _QWORD, _QWORD))v62;
        -[HMDHome accessoryBrowser](v63, "accessoryBrowser");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "registerProgressHandler:unpairedAccessoryUUID:", v64, v12);

      }
      else
      {
        v64 = 0;
      }
      if (v38)
      {
        -[HMDHome _continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:](self, "_continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:", v12, v39, v13);
      }
      else if (v64)
      {
        v66 = [HMDAddAccessoryProgressState alloc];
        objc_msgSend(v79, "uuid");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "name");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "category");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v70 = -[HMDAddAccessoryProgressState initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:](v66, "initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:", v67, v68, 0, v69, 0, 0);

        ((void (**)(_QWORD, uint64_t, HMDAddAccessoryProgressState *))v64)[2](v64, 9, v70);
      }
      else
      {
        v71 = (void *)MEMORY[0x1D17BA0A0]();
        v72 = self;
        HMFGetOSLogHandle();
        v73 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v85 = v74;
          _os_log_impl(&dword_1CD062000, v73, OS_LOG_TYPE_INFO, "%{public}@No progress handler but need to request user consent to replace accessory in home", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v71);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "respondWithError:", v75);

      }
      goto LABEL_47;
    }
    objc_msgSend(v33, "domain");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v51, "isEqualToString:", *MEMORY[0x1E0CB8C70]))
    {
      v52 = objc_msgSend(v33, "code") == 97;

      if (v52)
        goto LABEL_14;
    }
    else
    {

    }
    v53 = (void *)MEMORY[0x1D17BA0A0]();
    v54 = self;
    HMFGetOSLogHandle();
    v55 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "category");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "localizedDescription");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v85 = v56;
      v86 = 2112;
      v87 = v58;
      v88 = 2112;
      v89 = v33;
      _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_ERROR, "%{public}@Can't add an accessory of category %@: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v53);
    objc_msgSend(v13, "respondWithError:", v33);
  }
LABEL_47:

}

- (void)_continuePairingAfterUserConsentWithAccessoryUUID:(id)a3 orUnassociatedAccessory:(id)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  char isKindOfClass;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  char v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  char v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  HMDUnpairedHAPAccessoryConfiguration *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  HMDHome *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  HMDHome *v80;
  NSObject *v81;
  void *v82;
  void *v83;
  void *v84;
  HMDHome *v85;
  NSObject *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  HMDHome *v93;
  NSObject *v94;
  void *v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  void *v100;
  HMDHome *v101;
  NSObject *v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  _QWORD v112[5];
  id v113;
  id v114;
  id v115;
  id v116;
  HMDUnpairedHAPAccessoryConfiguration *v117;
  id v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  id location;
  uint8_t v124[128];
  _BYTE buf[24];
  void *v126;
  _BYTE v127[20];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v111 = a5;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v8;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Continue pairing after user consent with accessoryUUID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if (v9)
    goto LABEL_5;
  -[HMDHome accessoryBrowser](v11, "accessoryBrowser");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "unassociatedAccessories");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "hmf_firstObjectWithUUID:", v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
LABEL_5:
    v110 = v9;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
      v17 = v110;
    else
      v17 = 0;
    v109 = v17;

    if ((isKindOfClass & 1) != 0)
    {
      v122 = 0u;
      v120 = 0u;
      v121 = 0u;
      v119 = 0u;
      -[HMDHome addPendingAccessories](v11, "addPendingAccessories");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "hm_allKeys");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v119, v124, 16);
      if (v20)
      {
        v21 = *(_QWORD *)v120;
        while (2)
        {
          for (i = 0; i != v20; ++i)
          {
            if (*(_QWORD *)v120 != v21)
              objc_enumerationMutation(v19);
            v23 = *(void **)(*((_QWORD *)&v119 + 1) + 8 * i);
            objc_msgSend(v23, "accessoryUUID");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = objc_msgSend(v24, "isEqual:", v8);

            if (v25)
            {
              v108 = v23;
              -[HMDHome addPendingAccessories](v11, "addPendingAccessories");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "objectForKey:", v108);
              v43 = objc_claimAutoreleasedReturnValue();

              v111 = (id)v43;
              goto LABEL_33;
            }
          }
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v119, v124, 16);
          if (v20)
            continue;
          break;
        }
      }
      v108 = 0;
LABEL_33:

      objc_msgSend(v111, "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      if (v106)
      {
        v44 = (void *)MEMORY[0x1D17BA0A0]();
        v45 = v11;
        HMFGetOSLogHandle();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v47;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v109;
          _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_INFO, "%{public}@Storing setupCode accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v44);
        -[HMDHome addPendingAccessorySetupCodes](v45, "addPendingAccessorySetupCodes");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "setObject:forKey:", v106, v8);

      }
      else
      {
        objc_msgSend(v108, "setupCode");
        v106 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v108, "appIdentifier");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDAccessoryPairingEvent pairingAccessory:home:appIdentifier:retry:](HMDAccessoryPairingEvent, "pairingAccessory:home:appIdentifier:retry:", v109, v11, v53, objc_msgSend(v108, "retry"));
      v107 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v107, "isMatterAccessory"))
        notifyMatterMetricPairingStep(v11, 2uLL);
      v54 = objc_alloc_init(HMDUnpairedHAPAccessoryConfiguration);
      -[HMDUnpairedHAPAccessoryConfiguration setSetupCode:](v54, "setSetupCode:", v106);
      -[HMDHome _setupCodeProviderForMessage:](v11, "_setupCodeProviderForMessage:", v111);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUnpairedHAPAccessoryConfiguration setSetupCodeProvider:](v54, "setSetupCodeProvider:", v55);

      -[HMDHome homeLocationHandler](v11, "homeLocationHandler");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "isoCountryCode");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUnpairedHAPAccessoryConfiguration setIsoCountryCode:](v54, "setIsoCountryCode:", v57);

      -[HMDHome matterFabricID](v11, "matterFabricID");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUnpairedHAPAccessoryConfiguration setChipFabricID:](v54, "setChipFabricID:", v58);

      -[HMDHome uuid](v11, "uuid");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUnpairedHAPAccessoryConfiguration setHomeUUID:](v54, "setHomeUUID:", v59);

      objc_msgSend(v109, "preferredAccessoryServer");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v61 = v60;
      else
        v61 = 0;
      v105 = v61;

      v62 = (void *)MEMORY[0x1D17BA0A0]();
      v63 = v11;
      HMFGetOSLogHandle();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "UUIDString");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v105, "isWacNeeded");
        HMFBooleanToString();
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v63, "networkRouterSupport"));
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome networkRouterSupportDisableReason](v63, "networkRouterSupportDisableReason");
        HMNetworkRouterSupportDisableReasonAsString();
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        *(_QWORD *)&buf[4] = v65;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v66;
        *(_WORD *)&buf[22] = 2112;
        v126 = v67;
        *(_WORD *)v127 = 2112;
        *(_QWORD *)&v127[2] = v68;
        *(_WORD *)&v127[10] = 2112;
        *(_QWORD *)&v127[12] = v69;
        _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@Adding unpaired accessory with uuid: %@, WAC needed: %@, network router support: %@ (Reason %@)", buf, 0x34u);

      }
      objc_autoreleasePoolPop(v62);
      objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v108, "accessoryUUID");

      objc_msgSend(v109, "preferredAccessoryServer");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "category");

      v72 = HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v63, "networkRouterSupport"));
      v73 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMDHome networkRouterSupportDisableReason](v63, "networkRouterSupportDisableReason"));
      objc_msgSend(v107, "linkType");
      v74 = (id)HAPLinkTypeDescription();
      objc_msgSend(v107, "communicationProtocol");
      v75 = (id)HAPCommunicationProtocolDescription();
      objc_msgSend(v105, "isWacNeeded");
      v76 = (id)HMFBooleanToString();
      -[HMDUnpairedHAPAccessoryConfiguration requiresUserConsent](v54, "requiresUserConsent");
      v77 = (id)HMFBooleanToString();
      objc_msgSend(v108, "appIdentifier");

      objc_msgSend(v107, "isThreadAccessory");
      v78 = (id)HMFBooleanToString();
      if (objc_msgSend(v105, "isWacNeeded")
        && (-[HMDHome networkRouterSupport](v63, "networkRouterSupport") & 8) != 0)
      {
        v112[0] = MEMORY[0x1E0C809B0];
        v112[1] = 3221225472;
        v112[2] = __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke;
        v112[3] = &unk_1E89A4928;
        v112[4] = v63;
        v113 = v70;
        v114 = v108;
        v115 = v107;
        v116 = v111;
        v117 = v54;
        v118 = v109;
        -[HMDHome _createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:](v63, "_createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:", v116, v115, v112);

      }
      else
      {
        objc_msgSend(v70, "begin", v105);
        *(_QWORD *)buf = v70;
        -[HMDHome _pairAccessoryWithAccessoryDescription:unpairedAccessory:configuration:pairingEvent:requestMessage:](v63, "_pairAccessoryWithAccessoryDescription:unpairedAccessory:configuration:pairingEvent:requestMessage:", v108, v109, v54, v107, v111);
        __HMFActivityScopeLeave();

      }
    }
    else
    {
      v110 = v110;
      v111 = v111;
      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "preferenceForKey:", CFSTR("enableMediaAccessories"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v27, "BOOLValue");

        if ((v28 & 1) != 0)
        {
          v29 = v110;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v30 = v29;
          else
            v30 = 0;
          v31 = v30;

          if (v31
            && (objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences"),
                v32 = (void *)objc_claimAutoreleasedReturnValue(),
                objc_msgSend(v32, "preferenceForKey:", CFSTR("enableAppleMedia")),
                v33 = (void *)objc_claimAutoreleasedReturnValue(),
                v34 = objc_msgSend(v33, "BOOLValue"),
                v33,
                v32,
                (v34 & 1) == 0))
          {
            v92 = (void *)MEMORY[0x1D17BA0A0]();
            v93 = v11;
            HMFGetOSLogHandle();
            v94 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v95 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v95;
              _os_log_impl(&dword_1CD062000, v94, OS_LOG_TYPE_DEFAULT, "%{public}@Apple media accessories are not currently supported", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v92);
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v111, "respondWithError:", v96);

          }
          else
          {
            objc_initWeak(&location, v11);
            v35 = v29;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v36 = v35;
            else
              v36 = 0;
            v37 = v36;

            if (v37)
            {
              v38 = (void *)MEMORY[0x1D17BA0A0]();
              v39 = v11;
              HMFGetOSLogHandle();
              v40 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                HMFGetLogIdentifier();
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                *(_QWORD *)&buf[4] = v41;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v37;
                _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Starting WAC for %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v38);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke;
              v126 = &unk_1E89A4978;
              objc_copyWeak((id *)&v127[16], &location);
              *(_QWORD *)v127 = v111;
              *(_QWORD *)&v127[8] = v37;
              objc_msgSend(*(id *)&v127[8], "startConfigurationWithCompletionHandler:", buf);

              objc_destroyWeak((id *)&v127[16]);
            }
            else
            {
              v97 = v35;
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v98 = v97;
              else
                v98 = 0;
              v99 = v98;

              if (v99)
              {
                -[HMDHome _addAndMaybeAssociateMediaAccessory:message:](v11, v99, v111);
              }
              else
              {
                v100 = (void *)MEMORY[0x1D17BA0A0]();
                v101 = v11;
                HMFGetOSLogHandle();
                v102 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
                {
                  HMFGetLogIdentifier();
                  v103 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  *(_QWORD *)&buf[4] = v103;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v97;
                  _os_log_impl(&dword_1CD062000, v102, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to add unknown unassociated accessory: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v100);
                objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
                v104 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v111, "respondWithError:", v104);

              }
            }

            objc_destroyWeak(&location);
          }
        }
        else
        {
          v49 = (void *)MEMORY[0x1D17BA0A0]();
          v50 = v11;
          HMFGetOSLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v52;
            _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_DEFAULT, "%{public}@Media accessories are not currently supported", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v49);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
          v31 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v111, "respondWithError:", v31);
        }

      }
    }
    goto LABEL_74;
  }
  v79 = (void *)MEMORY[0x1D17BA0A0]();
  v80 = v11;
  HMFGetOSLogHandle();
  v81 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "UUIDString");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v82;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v83;
    _os_log_impl(&dword_1CD062000, v81, OS_LOG_TYPE_DEFAULT, "%{public}@Unknown accessory with identifier: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v79);
  v84 = (void *)MEMORY[0x1D17BA0A0]();
  v85 = v80;
  HMFGetOSLogHandle();
  v86 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome accessoryBrowser](v85, "accessoryBrowser");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome accessoryBrowser](v85, "accessoryBrowser");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v89, "unassociatedAccessories");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v87;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v88;
    *(_WORD *)&buf[22] = 2112;
    v126 = v90;
    _os_log_impl(&dword_1CD062000, v86, OS_LOG_TYPE_DEFAULT, "%{public}@AccessoryBrowser %@, Unassociated accessories: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v84);
  objc_msgSend(v111, "responseHandler");
  v91 = (void *)objc_claimAutoreleasedReturnValue();

  if (v91)
  {
    objc_msgSend(v111, "responseHandler");
    v110 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v109 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id, _QWORD))v110 + 2))(v110, v109, 0);
LABEL_74:

  }
}

- (void)_pairAccessoryWithAccessoryDescription:(id)a3 unpairedAccessory:(id)a4 configuration:(id)a5 pairingEvent:(id)a6 requestMessage:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;

  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = a3;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  __createAccessoryBrowserAddAccessoryCompletionHandler(self, v16, v14, v13, v12);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v18, "pairAccessory:configuration:completionHandler:", v15, v14, v17);
}

- (void)_accessoryPairingDidComplete:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 accessoryServer:(id)a6 certificationStatus:(int64_t)a7 requestMessage:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  id v38;
  id v39[2];
  uint8_t buf[4];
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v32 = a4;
  v15 = a5;
  v16 = a6;
  v33 = a8;
  -[HMDHome _removePendingAccessoryAdd:](self, "_removePendingAccessoryAdd:", v14);
  v17 = v16;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v18 = v17;
  else
    v18 = 0;
  v19 = v18;

  v31 = v19;
  v20 = 0;
  if (objc_msgSend(v19, "isWacComplete"))
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v24;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@WAC was completed as part of accessory pairing.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(v32, "networkCredential");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (objc_msgSend(v15, "isMatterAccessory"))
    notifyMatterMetricPairingStep(self, 0x18uLL);
  objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak((id *)buf, self);
  objc_msgSend(v14, "accessoryUUID");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __118__HMDHome__accessoryPairingDidComplete_configuration_pairingEvent_accessoryServer_certificationStatus_requestMessage___block_invoke;
  v34[3] = &unk_1E89A4950;
  objc_copyWeak(v39, (id *)buf);
  v27 = v17;
  v35 = v27;
  v28 = v15;
  v36 = v28;
  v29 = v14;
  v37 = v29;
  v30 = v25;
  v38 = v30;
  v39[1] = (id)a7;
  -[HMDHome _processAccessoriesToAddForUnpairedAccessory:certificationStatus:accessoryServer:networkCredential:pairingEvent:message:completionHandler:](self, "_processAccessoriesToAddForUnpairedAccessory:certificationStatus:accessoryServer:networkCredential:pairingEvent:message:completionHandler:", v26, a7, v27, v20, v28, v33, v34);

  objc_destroyWeak(v39);
  objc_destroyWeak((id *)buf);

}

- (void)_removePendingAccessoryAdd:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "accessoryUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v9;
    v13 = 2112;
    v14 = v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing accessoryDescription, setupCode and handlers for accessory %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  os_unfair_recursive_lock_lock_with_options();
  -[NSMapTable removeObjectForKey:](v7->_addPendingAccessories, "removeObjectForKey:", v4);
  if (v5)
  {
    -[NSMutableDictionary removeObjectForKey:](v7->_addPendingAccessorySetupCodeHandlers, "removeObjectForKey:", v5);
    -[NSMutableDictionary removeObjectForKey:](v7->_addPendingAccessorySetupCodes, "removeObjectForKey:", v5);
    -[NSMutableDictionary removeObjectForKey:](v7->_addPendingAccessoryOnboardingSetupPayloadStrings, "removeObjectForKey:", v5);
  }
  os_unfair_recursive_lock_unlock();

}

- (void)_testOnlyAddMediaAccessory:(id)a3 message:(id)a4
{
  -[HMDHome _addMediaAccessory:message:](self, a3, a4);
}

- (void)_handleAddAccessoryWithDescription:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0;
  -[HMDHome _setupDescriptionFromData:error:](self, "_setupDescriptionFromData:error:", v5, &v13);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v13;
  if (v6)
  {
    -[HMDHome _handleAddAccessoryWithDescription:progressHandlerDelegate:message:]((id *)&self->super.super.isa, v6, 0, v4);
  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v11;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);

  }
}

- (void)_continuePairingAfterUserConsentWithAccessoryDescription:(id)a3 progressHandlerDelegate:(id)a4 message:(id)a5
{
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  HMDUnpairedHAPAccessoryConfiguration *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  _QWORD v45[5];
  id v46;
  id v47;
  id v48;
  id v49;
  HMDUnpairedHAPAccessoryConfiguration *v50;
  id v51;
  id location;
  _BYTE buf[24];
  void *v54;
  _BYTE v55[10];
  __int16 v56;
  void *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v41 = a4;
  v42 = a5;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v9;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Continue pairing after user consent with accessoryDescription %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  v14 = objc_alloc_init(HMDUnpairedHAPAccessoryConfiguration);
  -[HMDUnpairedHAPAccessoryConfiguration setRequiresUserConsent:](v14, "setRequiresUserConsent:", 1);
  -[HMDHome homeLocationHandler](v11, "homeLocationHandler");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "isoCountryCode");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDUnpairedHAPAccessoryConfiguration setIsoCountryCode:](v14, "setIsoCountryCode:", v16);

  -[HMDHome matterFabricID](v11, "matterFabricID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDUnpairedHAPAccessoryConfiguration setChipFabricID:](v14, "setChipFabricID:", v17);

  -[HMDHome uuid](v11, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDUnpairedHAPAccessoryConfiguration setHomeUUID:](v14, "setHomeUUID:", v18);

  +[HMDAccessoryPairingEvent pairingAccessoryWithDescription:home:](HMDAccessoryPairingEvent, "pairingAccessoryWithDescription:home:", v9, v11);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v19, "isMatterAccessory"))
    notifyMatterMetricPairingStep(v11, 2uLL);
  objc_msgSend(v9, "setupAccessoryPayload");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_alloc(MEMORY[0x1E0D28540]);
  v21 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](v11, a2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stringWithFormat:", CFSTR("%@, %s:%ld"), v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 11958);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend(v20, "initWithName:", v23);

  v44 = v24;
  objc_msgSend(v9, "accessoryUUID");

  objc_msgSend(v43, "categoryNumber");
  objc_msgSend(v19, "linkType");
  v25 = (id)HAPLinkTypeDescription();
  objc_msgSend(v19, "communicationProtocol");
  v26 = (id)HAPCommunicationProtocolDescription();
  objc_msgSend(v43, "supportsWAC");
  v27 = (id)HMFBooleanToString();
  -[HMDUnpairedHAPAccessoryConfiguration requiresUserConsent](v14, "requiresUserConsent");
  v28 = (id)HMFBooleanToString();
  v29 = HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v11, "networkRouterSupport"));
  v30 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMDHome networkRouterSupportDisableReason](v11, "networkRouterSupportDisableReason"));
  objc_msgSend(v9, "appIdentifier");

  objc_msgSend(v19, "isThreadAccessory");
  v31 = (id)HMFBooleanToString();

  if (v41)
  {
    v32 = v41;
    if (v11)
    {
      objc_initWeak(&location, v11);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __74__HMDHome_createLocalAddAccessoryProgressHandler_progressHandlerDelegate___block_invoke;
      v54 = &unk_1E89A48D8;
      objc_copyWeak((id *)&v55[8], &location);
      *(_QWORD *)v55 = v32;
      v40 = _Block_copy(buf);

      objc_destroyWeak((id *)&v55[8]);
      objc_destroyWeak(&location);
    }
    else
    {
      v40 = 0;
    }

  }
  else
  {
    HMDHomeCreateAddAccessoryProgressHandler(v11, v9, v42);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v33 = (void *)MEMORY[0x1D17BA0A0]();
  v34 = v11;
  HMFGetOSLogHandle();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "supportsWAC");
    HMFBooleanToString();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v34, "networkRouterSupport"));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome networkRouterSupportDisableReason](v34, "networkRouterSupportDisableReason");
    HMNetworkRouterSupportDisableReasonAsString();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v36;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2112;
    v54 = v37;
    *(_WORD *)v55 = 2112;
    *(_QWORD *)&v55[2] = v38;
    v56 = 2112;
    v57 = v39;
    _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Adding unpaired accessory with description: %@, supports WAC: %@, network router support: %@ (Reason: %@)", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v33);
  if (objc_msgSend(v9, "supportsWAC")
    && (-[HMDHome networkRouterSupport](v34, "networkRouterSupport") & 8) != 0)
  {
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke;
    v45[3] = &unk_1E89A49C8;
    v45[4] = v34;
    v46 = v44;
    v47 = v9;
    v48 = v19;
    v49 = v42;
    v50 = v14;
    v51 = v40;
    -[HMDHome _createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:](v34, "_createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:", v49, v48, v45);

  }
  else
  {
    objc_msgSend(v44, "begin");
    *(_QWORD *)buf = v44;
    -[HMDHome _pairAccessoryWithAccessoryDescription:configuration:pairingEvent:progressHandler:requestMessage:](v34, "_pairAccessoryWithAccessoryDescription:configuration:pairingEvent:progressHandler:requestMessage:", v9, v14, v19, v40, v42);
    __HMFActivityScopeLeave();

  }
}

- (void)_pairAccessoryWithAccessoryDescription:(id)a3 configuration:(id)a4 pairingEvent:(id)a5 progressHandler:(id)a6 requestMessage:(id)a7
{
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;

  v12 = a6;
  v13 = a4;
  v14 = a3;
  __createAccessoryBrowserAddAccessoryCompletionHandler(self, v14, v13, a5, a7);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "pairAccessoryWithDescription:configuration:progressHandler:completionHandler:", v14, v13, v12, v16);

}

- (void)_handleAddAccessories:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void (**v32)(id, void *, _QWORD);
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t i;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  HMDUserManagementOperationTimestamp *v47;
  void *v48;
  HMDUserManagementOperationTimestamp *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  void *v55;
  void (**v56)(id, void *, _QWORD);
  id v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  HMDHome *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  void (**v71)(id, void *, _QWORD);
  void *v72;
  id v73;
  void *v74;
  id v75;
  void (**v76)(id, void *, _QWORD);
  void (**v77)(_QWORD, _QWORD, _QWORD);
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  HMDHome *v82;
  NSObject *v83;
  void *v84;
  id v85;
  NSObject *v86;
  void *v87;
  void *v88;
  void (**v89)(_QWORD, _QWORD, _QWORD);
  void *v90;
  void *v91;
  HMDHome *v92;
  NSObject *v93;
  id v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  HMDHome *v100;
  NSObject *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  uint64_t v107;
  void *v108;
  void *v109;
  void (**v110)(id, void *, _QWORD);
  id obj;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  HMDHome *v115;
  void (**v116)(id, void *, _QWORD);
  id v117;
  void *v118;
  id v119;
  dispatch_group_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[4];
  dispatch_group_t v125;
  HMDHome *v126;
  id v127;
  id v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  id v137;
  id v138;
  id v139;
  uint8_t buf[4];
  void *v141;
  __int16 v142;
  void *v143;
  __int16 v144;
  void (**v145)(id, void *, _QWORD);
  __int16 v146;
  void *v147;
  _BYTE v148[128];
  _BYTE v149[128];
  _QWORD v150[2];
  _QWORD v151[5];

  v151[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "supportsAddingAccessory");

  if ((v6 & 1) != 0)
  {
    objc_msgSend(v4, "dataForKey:", CFSTR("accessories"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "identifier");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "UUIDString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v141 = v11;
        v142 = 2112;
        v143 = v13;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Unable to find accessories to add for message: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v15)[2](v15, v14, 0);

    }
    v139 = 0;
    v109 = v7;
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v7, &v139);
    v17 = v139;
    objc_msgSend(v16, "_allowDecodingCyclesInSecureMode");
    v18 = (void *)MEMORY[0x1E0C99E60];
    v151[0] = objc_opt_class();
    v151[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v151, 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setWithArray:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = *MEMORY[0x1E0CB2CD0];
    v138 = v17;
    v108 = v16;
    objc_msgSend(v16, "decodeTopLevelObjectOfClasses:forKey:error:", v20, v21, &v138);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v110 = (void (**)(id, void *, _QWORD))v138;

    v23 = v22;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v24 = v23;
    else
      v24 = 0;
    v25 = v24;

    if (!v25)
    {
      v91 = (void *)MEMORY[0x1D17BA0A0]();
      v92 = self;
      HMFGetOSLogHandle();
      v93 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v94 = v23;
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "identifier");
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v96, "UUIDString");
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v141 = v95;
        v142 = 2112;
        v143 = v97;
        v144 = 2112;
        v145 = v110;
        _os_log_impl(&dword_1CD062000, v93, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive accessories from encoded accessories data: %@: %@", buf, 0x20u);

        v23 = v94;
      }

      objc_autoreleasePoolPop(v91);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v32 = (void (**)(id, void *, _QWORD))objc_claimAutoreleasedReturnValue();
      v32[2](v32, v98, 0);
      v87 = 0;
      v7 = v109;
      goto LABEL_67;
    }
    objc_msgSend(v4, "dataForKey:", CFSTR("accessories.airplay"));
    v106 = v23;
    v107 = objc_claimAutoreleasedReturnValue();
    v26 = v23;
    if (v107)
    {
      v27 = (void *)MEMORY[0x1E0CB3710];
      v28 = (void *)MEMORY[0x1E0C99E60];
      v150[0] = objc_opt_class();
      v150[1] = objc_opt_class();
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v150, 2);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setWithArray:", v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v137 = 0;
      objc_msgSend(v27, "unarchivedObjectOfClasses:fromData:error:", v30, v107, &v137);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = (void (**)(id, void *, _QWORD))v137;

      if (!v31)
      {
        v99 = (void *)MEMORY[0x1D17BA0A0]();
        v100 = self;
        HMFGetOSLogHandle();
        v101 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "identifier");
          v103 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v103, "UUIDString");
          v104 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v141 = v102;
          v142 = 2112;
          v143 = v104;
          v144 = 2112;
          v145 = v32;
          _os_log_impl(&dword_1CD062000, v101, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive airplay accessories from encoded airplay accessories data: %@: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v99);
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
        v76 = (void (**)(id, void *, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "responseHandler");
        v77 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v77[2](v77, v76, 0);
        v23 = v106;
        v87 = v106;
        goto LABEL_66;
      }
      objc_msgSend(v25, "arrayByAddingObjectsFromArray:", v31);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

    }
    -[HMDHome wiFiRouterAccessories](self, "wiFiRouterAccessories");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    v120 = dispatch_group_create();
    -[HMDHome backingStore](self, "backingStore");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "transaction:options:", v34, v35);
    v32 = (void (**)(id, void *, _QWORD))objc_claimAutoreleasedReturnValue();

    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    obj = v26;
    v113 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v133, v149, 16);
    if (v113)
    {
      v112 = *(_QWORD *)v134;
      v116 = v32;
      v115 = self;
      do
      {
        v36 = 0;
        do
        {
          if (*(_QWORD *)v134 != v112)
            objc_enumerationMutation(obj);
          v114 = v36;
          v37 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * v36);
          objc_msgSend(v37, "setHome:", self);
          v121 = v37;
          objc_msgSend(v37, "backingStoreObjects:", 4);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v129 = 0u;
          v130 = 0u;
          v131 = 0u;
          v132 = 0u;
          v117 = v38;
          v123 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v129, v148, 16);
          if (v123)
          {
            v122 = *(_QWORD *)v130;
            do
            {
              for (i = 0; i != v123; ++i)
              {
                if (*(_QWORD *)v130 != v122)
                  objc_enumerationMutation(v117);
                v40 = *(void **)(*((_QWORD *)&v129 + 1) + 8 * i);
                objc_msgSend(v40, "setObjectChangeType:", 1);
                v41 = v40;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v42 = v41;
                else
                  v42 = 0;
                v43 = v42;

                v44 = v41;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v45 = v44;
                else
                  v45 = 0;
                v46 = v45;

                if (v43)
                {
                  objc_msgSend(v43, "setConfigurationTracker:", v120);
                  v47 = [HMDUserManagementOperationTimestamp alloc];
                  objc_msgSend(v4, "remoteSourceDevice");
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  v49 = -[HMDUserManagementOperationTimestamp initWithDevice:state:](v47, "initWithDevice:state:", v48, 0);
                  objc_msgSend(v43, "setSharedAdminAddedTimestamp:", v49);

                  v50 = (void *)MEMORY[0x1D17BA0A0]();
                  v51 = self;
                  HMFGetOSLogHandle();
                  v52 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v53 = (void *)objc_claimAutoreleasedReturnValue();
                    v119 = v46;
                    objc_msgSend(v121, "name");
                    v54 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v121, "uuid");
                    v55 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v55, "UUIDString");
                    v118 = v50;
                    v56 = (void (**)(id, void *, _QWORD))objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v43, "sharedAdminAddedTimestamp");
                    v57 = v4;
                    v58 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138544130;
                    v141 = v53;
                    v142 = 2112;
                    v143 = v54;
                    v144 = 2112;
                    v145 = v56;
                    v146 = 2112;
                    v147 = v58;
                    _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ shared admin added %@", buf, 0x2Au);

                    v4 = v57;
                    v46 = v119;

                    self = v115;
                    v32 = v116;

                    v50 = v118;
                  }

                  objc_autoreleasePoolPop(v50);
                  objc_msgSend(v32, "add:withMessage:", v43, v4);
                  v59 = v121;
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                    v60 = v59;
                  else
                    v60 = 0;
                  v61 = v60;

                  if (objc_msgSend(v61, "isPrimary"))
                  {
                    +[HMDUserManagementOperation auditUserManagementOperationAccessory:model:](HMDUserManagementOperation, "auditUserManagementOperationAccessory:model:", v59, 0);
                    v62 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v43, "uuid");
                    v63 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v62, "modelObjectWithChangeType:parentUUID:", 1, v63);
                    v64 = (void *)objc_claimAutoreleasedReturnValue();

                    if (v64)
                      objc_msgSend(v32, "add:withMessage:", v64, v4);

                  }
                }
                else if (v46)
                {
                  objc_msgSend(v46, "setConfigurationTracker:", v120);
                  objc_msgSend(v32, "add:withMessage:", v44, 0);
                }

              }
              v123 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v129, v148, 16);
            }
            while (v123);
          }

          v65 = (void *)MEMORY[0x1D17BA0A0]();
          v66 = self;
          HMFGetOSLogHandle();
          v67 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v121, "name");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v121, "uuid");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "UUIDString");
            v71 = (void (**)(id, void *, _QWORD))objc_claimAutoreleasedReturnValue();
            objc_msgSend(v121, "supportsTargetController");
            HMFBooleanToString();
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v141 = v68;
            v142 = 2112;
            v143 = v69;
            v144 = 2112;
            v145 = v71;
            v146 = 2112;
            v147 = v72;
            _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ (supportsTargetController %@) being added to home through shared admin", buf, 0x2Au);

            v32 = v116;
          }

          objc_autoreleasePoolPop(v65);
          v73 = v121;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v74 = v73;
          else
            v74 = 0;
          v75 = v74;

          objc_msgSend(v75, "autoConfigureTargetController");
          v36 = v114 + 1;
        }
        while (v114 + 1 != v113);
        v113 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v133, v149, 16);
      }
      while (v113);
    }

    objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCHIPFabricIDMessageKey"));
    v76 = (void (**)(id, void *, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "numberForKey:", CFSTR("HMDHomeCHIPFabricIndexMessageKey"));
    v77 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome emptyModelObjectWithChangeType:](self, "emptyModelObjectWithChangeType:", 2);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v109;
    if (v76)
    {
      if (v77)
      {
        -[HMDHome chipStorage](self, "chipStorage");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "fabricID");
        v80 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v80)
        {
          objc_msgSend(v78, "setChipFabricID:", v76);
          v81 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v78, "setChipFabricIndex:", v77));
          v82 = self;
          HMFGetOSLogHandle();
          v83 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v84 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v141 = v84;
            v142 = 2112;
            v143 = v77;
            v144 = 2112;
            v145 = v76;
            _os_log_impl(&dword_1CD062000, v83, OS_LOG_TYPE_INFO, "%{public}@Updating home model with fabric index %@ and fabric ID %@", buf, 0x20u);

            v7 = v109;
          }

          objc_autoreleasePoolPop(v81);
          objc_msgSend(v32, "add:", v78);
        }
      }
    }
    v124[0] = MEMORY[0x1E0C809B0];
    v124[1] = 3221225472;
    v124[2] = __33__HMDHome__handleAddAccessories___block_invoke;
    v124[3] = &unk_1E89BA850;
    v125 = v120;
    v126 = self;
    v127 = v4;
    v128 = v105;
    v85 = v105;
    v86 = v120;
    objc_msgSend(v32, "run:", v124);

    v23 = v106;
    v87 = obj;
LABEL_66:

    v98 = (void *)v107;
LABEL_67:

    goto LABEL_68;
  }
  objc_msgSend(v4, "responseHandler");
  v88 = (void *)objc_claimAutoreleasedReturnValue();

  if (v88)
  {
    objc_msgSend(v4, "responseHandler");
    v89 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v89)[2](v89, v90, 0);

  }
LABEL_68:

}

- (void)_handleUserConsentForAccessoryReplacement:(id)a3 consent:(BOOL)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (a4)
  {
    if (v13)
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "messagePayload");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138544130;
      v28 = v14;
      v29 = 2112;
      v30 = v15;
      v31 = 2112;
      v32 = v16;
      v33 = 2112;
      v34 = v17;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@User consented to Wi-Fi router replacement; continue to adding new Wi-Fi router - message %@/%@/%@",
        (uint8_t *)&v27,
        0x2Au);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v8, "setUserConsentedForReplace:", 1);
    objc_msgSend(v8, "accessoryUUID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      objc_msgSend(v8, "accessoryUUID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:](v11, "_continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:", v19, 0, v9);

    }
    else
    {
      -[HMDHome _continuePairingAfterUserConsentWithAccessoryDescription:progressHandlerDelegate:message:](v11, "_continuePairingAfterUserConsentWithAccessoryDescription:progressHandlerDelegate:message:", v8, 0, v9);
    }
  }
  else
  {
    if (v13)
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "name");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "messagePayload");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138544130;
      v28 = v20;
      v29 = 2112;
      v30 = v21;
      v31 = 2112;
      v32 = v22;
      v33 = 2112;
      v34 = v23;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@User did not consent to Wi-Fi router replacement; cancelling adding new Wi-Fi router - message %@/%@/%@",
        (uint8_t *)&v27,
        0x2Au);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmInternalErrorWithCode:", 1091);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDMatterAccessoryPairingEndContext hmContextWithCancelledError:](HMDMatterAccessoryPairingEndContext, "hmContextWithCancelledError:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _cancelPairingWithAccessoryDescription:context:](v11, "_cancelPairingWithAccessoryDescription:context:", v8, v25);

    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v26);

  }
}

- (void)_handleUserConsentResponseForAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  _BOOL8 v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
  {
    objc_msgSend(v4, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0;
    -[HMDHome _setupDescriptionFromData:error:](self, "_setupDescriptionFromData:error:", v5, &v29);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v29;
    if (v6)
    {
      objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB92F8]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        -[HMDHome addPendingAccessories](self, "addPendingAccessories");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectForKey:", v6);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        v11 = objc_msgSend(v8, "integerValue");
        if (v11 > 1)
        {
          if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 2)
          {
            -[HMDHome _handleUserConsentForAccessoryReplacement:consent:message:](self, "_handleUserConsentForAccessoryReplacement:consent:message:", v6, v11 == 3, v10);
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
            v26 = objc_claimAutoreleasedReturnValue();

            v7 = (id)v26;
          }
        }
        else
        {
          v12 = v11 == 1;
          -[HMDHome accessoryBrowser](self, "accessoryBrowser");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "didReceiveUserConsentResponseForSetupAccessoryDetail:consent:", v6, v12);

        }
        objc_msgSend(v4, "responseHandler");
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        if (v27)
        {
          objc_msgSend(v4, "responseHandler");
          v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, id, _QWORD))v28)[2](v28, v7, 0);

        }
      }
      else
      {
        v22 = (void *)MEMORY[0x1D17BA0A0]();
        v23 = self;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v31 = v25;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@user consent response is absent", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v22);
      }

    }
    else
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v31 = v21;
        v32 = 2112;
        v33 = v7;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
    }

  }
  else
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI for user consent response", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
  }

}

- (void)_handleAddAccessoryModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void (**v27)(_QWORD, _QWORD, _QWORD);
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v6;
  else
    v8 = 0;
  v9 = v8;
  v10 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = v10;
  else
    v11 = 0;
  v12 = v11;

  objc_msgSend(v10, "identifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uuid");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v17;
      v31 = 2112;
      v32 = v19;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to create accessory from object (null identifier) %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v20);
    goto LABEL_21;
  }
  if (v9)
  {
    -[HMDHome __handleAddHAPAccessoryModel:message:](self, "__handleAddHAPAccessoryModel:message:", v9, v7);
  }
  else if (v12)
  {
    -[HMDHome __handleAddMediaAccessoryModel:message:](self, "__handleAddMediaAccessoryModel:message:", v12, v7);
  }
  else
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543362;
      v30 = v24;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Only HAP accessories can be added to the home currently", (uint8_t *)&v29, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(v7, "responseHandler");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "responseHandler");
      v27 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v27)[2](v27, v26, 0);

    }
  }
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    -[HMDHome home](self, "home");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "homeManager");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "updateCurrentUserEligibleForOwnerToAutoMigration");

LABEL_21:
  }

}

- (void)__requestAccessoryBrowsing
{
  id v2;

  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "startDiscoveringPairedAccessories");

}

- (void)__handleAddHAPAccessoryModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  HMDAppleMediaAccessorySensor *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  char v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  id v54;
  HMDAppleMediaAccessorySensor *v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  HMDHome *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  void *v71;
  BOOL v72;
  _QWORD block[5];
  HMDAppleMediaAccessorySensor *v74;
  id v75;
  id v76;
  id v77;
  BOOL v78;
  _QWORD v79[4];
  NSObject *v80;
  HMDAppleMediaAccessorySensor *v81;
  uint8_t buf[4];
  void *v83;
  __int16 v84;
  void *v85;
  __int16 v86;
  void *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  void *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "bridgeUUID");
  v8 = objc_claimAutoreleasedReturnValue();
  if (!v8)
    goto LABEL_3;
  v9 = (void *)v8;
  v10 = objc_alloc(MEMORY[0x1E0CB3A28]);
  objc_msgSend(v6, "bridgeUUID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v10, "initWithUUIDString:", v11);
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    v56 = (void *)MEMORY[0x1D17BA0A0]();
    v57 = self;
    HMFGetOSLogHandle();
    v58 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "bridgeUUID");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v83 = v59;
      v84 = 2112;
      v85 = v60;
      v86 = 2112;
      v87 = v61;
      _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_ERROR, "%{public}@No bridge accessory %@ for added bridged accessory %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v56);
  }
  else
  {
LABEL_3:
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uniqueIdentifier");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "shortDescription");
      v71 = v14;
      v21 = v7;
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v83 = v17;
      v84 = 2112;
      v85 = v18;
      v86 = 2112;
      v87 = v19;
      v88 = 2112;
      v89 = v20;
      v90 = 2112;
      v91 = v22;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Creating new HAP accessory from model with UUID %@/%@/%@ from message: %@", buf, 0x34u);

      v7 = v21;
      v14 = v71;

    }
    objc_autoreleasePoolPop(v14);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (v23 = -[HMDHAPAccessory initWithTransaction:home:]([HMDAppleMediaAccessorySensor alloc], "initWithTransaction:home:", v6, v15)) != 0|| (v23 = -[HMDHAPAccessory initWithTransaction:home:]([HMDHAPAccessory alloc], "initWithTransaction:home:", v6, v15)) != 0)
    {
      objc_msgSend(v6, "configurationTracker");
      v24 = objc_claimAutoreleasedReturnValue();
      if (!v24)
        v24 = dispatch_group_create();
      -[HMDHome notificationRegistrations](v15, "notificationRegistrations");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "count");
      v72 = v26 != 0;

      -[HMDHome uuidToHAPAccessoryConfigTable](v15, "uuidToHAPAccessoryConfigTable");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "objectForKey:", v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      v30 = MEMORY[0x1E0C809B0];
      if (v29)
      {
        -[HMDHome uuidToHAPAccessoryConfigTable](v15, "uuidToHAPAccessoryConfigTable");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "removeObjectForKey:", v32);

        dispatch_group_enter(v24);
        -[HMDHome workQueue](v15, "workQueue");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v79[0] = v30;
        v79[1] = 3221225472;
        v79[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke;
        v79[3] = &unk_1E89C2730;
        v80 = v24;
        -[HMDHAPAccessory configureWithAccessory:homeNotificationsEnabled:queue:completion:](v23, "configureWithAccessory:homeNotificationsEnabled:queue:completion:", v29, v26 != 0, v33, v79);

      }
      if (-[HMDHAPAccessory isPrimary](v23, "isPrimary"))
      {
        objc_msgSend(v7, "name");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = objc_msgSend(v34, "isEqualToString:", CFSTR("kAddAccessoryRequestKey"));

        if ((v35 & 1) == 0)
          -[HMDHAPAccessory savePublicKeyToKeychain](v23, "savePublicKeyToKeychain");
        -[HMDAccessory identifier](v23, "identifier");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = -[HMDHAPAccessory supportedTransports](v23, "supportedTransports");
        -[HMDHAPAccessory setupHash](v23, "setupHash");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _registerPairedAccessory:transports:setupHash:](v15, "_registerPairedAccessory:transports:setupHash:", v36, v37, v38);

      }
      -[HMDHome addAccessory:](v15, "addAccessory:", v23);
      -[HMDHome msgDispatcher](v15, "msgDispatcher");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:](v23, "configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:", v15, v39, v24, 0);

      v81 = v23;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v81, 1);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "identifier");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome addNewlyConfiguredAccessories:addSessionIdentifier:](v15, "addNewlyConfiguredAccessories:addSessionIdentifier:", v40, v41);

      -[HMDHome accessoryBrowser](v15, "accessoryBrowser");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "evaluateAccessoryDiscoveryState");

      -[HMDHAPAccessory matterNodeID](v23, "matterNodeID");
      v43 = objc_claimAutoreleasedReturnValue();
      if (v43)
      {
        v44 = (void *)v43;
        -[HMDHAPAccessory matterNodeID](v23, "matterNodeID");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = objc_msgSend(v45, "isEqual:", &unk_1E8B327F0);

        if ((v46 & 1) == 0)
        {
          -[HMDHome homeManager](v15, "homeManager");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "accessoryBrowser");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "chipAccessoryServerBrowser");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory matterNodeID](v23, "matterNodeID");
          v70 = v7;
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome home](v15, "home");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "fabric");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "handleHomeAddedAccessoryWithNodeID:fabric:", v49, v51);

          v7 = v70;
        }
      }
      objc_msgSend(v7, "transactionResult");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "markChanged");
      objc_msgSend(v52, "markSaveToAssistant");
      -[HMDHome workQueue](v15, "workQueue");
      v53 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1019;
      block[3] = &unk_1E89B6E60;
      block[4] = v15;
      v74 = v23;
      v75 = v7;
      v76 = v29;
      v77 = v6;
      v78 = v72;
      v54 = v29;
      v55 = v23;
      dispatch_group_notify(v24, v53, block);

      goto LABEL_20;
    }
    v62 = (void *)MEMORY[0x1D17BA0A0]();
    v63 = v15;
    HMFGetOSLogHandle();
    v64 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "UUIDString");
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v83 = v65;
      v84 = 2112;
      v85 = v67;
      _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_ERROR, "%{public}@Unable to create accessory from object (null accessory) %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v62);
    objc_msgSend(v7, "responseHandler");
    v68 = (void *)objc_claimAutoreleasedReturnValue();

    if (v68)
    {
      objc_msgSend(v7, "responseHandler");
      v55 = (HMDAppleMediaAccessorySensor *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v24 = objc_claimAutoreleasedReturnValue();
      (*(void (**)(HMDAppleMediaAccessorySensor *, NSObject *, _QWORD))&v55->super.super._primary)(v55, v24, 0);
LABEL_20:

    }
  }

}

- (void)__handleAddMediaAccessoryModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  int v29;
  id v30;
  char isKindOfClass;
  void *v32;
  __objc2_class **v33;
  id v34;
  id v35;
  char v36;
  void *v37;
  id v38;
  HMDAirPlayAccessory *v39;
  BOOL v40;
  void *v41;
  void *v42;
  int v43;
  HMDAirPlayAccessory *v44;
  char v45;
  HMDAirPlayAccessory *v46;
  HMDAirPlayAccessory *v47;
  void *v48;
  void *v49;
  void *v50;
  dispatch_group_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  NSObject *v58;
  id v59;
  HMDAirPlayAccessory *v60;
  id v61;
  HMDAirPlayAccessory *v62;
  void *v63;
  HMDHome *v64;
  NSObject *v65;
  void *v66;
  const char *v67;
  HMDHome *v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  NSObject *group;
  BOOL v73;
  void *v74;
  id v75;
  _QWORD block[5];
  HMDAirPlayAccessory *v77;
  id v78;
  id v79;
  id v80;
  HMDAirPlayAccessory *v81;
  id v82;
  BOOL v83;
  HMDAirPlayAccessory *v84;
  uint8_t buf[4];
  void *v86;
  __int16 v87;
  id v88;
  __int16 v89;
  const __CFString *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    objc_msgSend(v6, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "parentUUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bsoRecord");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "recordID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "recordName");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    v15 = &stru_1E89C3E38;
    *(_DWORD *)buf = 138412802;
    v86 = v9;
    if (v13)
      v15 = (const __CFString *)v13;
    v87 = 2112;
    v88 = v10;
    v89 = 2112;
    v90 = v15;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "AddMediaAccessoryModel", "Identifier=%{signpost.description:attribute}@ parentUUID=%{signpost.description:attribute}@ recordName=%{signpost.description:attribute}@ ", buf, 0x20u);

  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v86 = v19;
    v87 = 2112;
    v88 = v20;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Creating new media accessory from model with UUID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  v21 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = v22;

  v24 = v21;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v25 = v24;
  else
    v25 = 0;
  v26 = v25;

  if (!v23)
  {
    if (!v26)
    {
      v63 = (void *)MEMORY[0x1D17BA0A0]();
      v68 = v17;
      HMFGetOSLogHandle();
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v86 = v70;
        v87 = 2112;
        v88 = v24;
        _os_log_impl(&dword_1CD062000, v69, OS_LOG_TYPE_DEFAULT, "%{public}@Invalid WHA accessory: %@", buf, 0x16u);

      }
      goto LABEL_47;
    }
    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "preferenceForKey:", CFSTR("enableAirPlay2"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "BOOLValue");

    if (v43)
    {
      v39 = -[HMDAirPlayAccessory initWithTransaction:home:]([HMDAirPlayAccessory alloc], "initWithTransaction:home:", v26, v17);
      v40 = -[HMDHome isCurrentDevicePrimaryResident](v17, "isCurrentDevicePrimaryResident");
      if (!v39)
        goto LABEL_48;
      goto LABEL_31;
    }
    v63 = (void *)MEMORY[0x1D17BA0A0]();
    v64 = v17;
    HMFGetOSLogHandle();
    v65 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v86 = v66;
      v87 = 2112;
      v88 = v26;
      v67 = "%{public}@AirPlay2 not enabled, dropping model: %@";
      goto LABEL_45;
    }
LABEL_46:

LABEL_47:
    objc_autoreleasePoolPop(v63);
    goto LABEL_48;
  }
  objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "preferenceForKey:", CFSTR("enableAppleMedia"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "BOOLValue");

  if (!v29)
  {
    v63 = (void *)MEMORY[0x1D17BA0A0]();
    v64 = v17;
    HMFGetOSLogHandle();
    v65 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v86 = v66;
      v87 = 2112;
      v88 = v23;
      v67 = "%{public}@WHA not enabled, dropping model: %@";
LABEL_45:
      _os_log_impl(&dword_1CD062000, v65, OS_LOG_TYPE_INFO, v67, buf, 0x16u);

      goto LABEL_46;
    }
    goto LABEL_46;
  }
  v30 = v23;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
    v32 = v30;
  else
    v32 = 0;
  if ((isKindOfClass & 1) != 0)
    v33 = off_1E89990F0;
  else
    v33 = off_1E8999110;
  v34 = v32;

  v35 = v30;
  objc_opt_class();
  v36 = objc_opt_isKindOfClass();
  if ((v36 & 1) != 0)
    v37 = v35;
  else
    v37 = 0;
  if ((v36 & 1) != 0)
    v33 = off_1E8999100;
  v38 = v37;

  v39 = (HMDAirPlayAccessory *)objc_msgSend(objc_alloc(*v33), "initWithTransaction:home:", v35, v17);
  v40 = 0;
  if (v39)
  {
LABEL_31:
    v73 = v40;
    v75 = v26;
    v44 = v39;
    objc_opt_class();
    v45 = objc_opt_isKindOfClass();
    if ((v45 & 1) != 0)
      v46 = v44;
    else
      v46 = 0;
    v47 = v46;

    -[HMDAirPlayAccessory setDataSource:](v47, "setDataSource:", v17);
    -[HMDHome addAccessory:](v17, "addAccessory:", v44);
    -[HMDHome homeManager](v17, "homeManager");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](v44, "uuid");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "accessorySetupMetricDispatcherForAccessoryUUID:", v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    v74 = v50;
    objc_msgSend(v50, "markAccessoryAddCompleted");
    v51 = dispatch_group_create();
    -[HMDHome msgDispatcher](v17, "msgDispatcher");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    group = v51;
    -[HMDAirPlayAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:](v44, "configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:", v17, v52, v51, 0);

    -[HMDHome homeManager](v17, "homeManager");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v45 & 1) != 0 && -[HMDAccessory isCurrentAccessory](v44, "isCurrentAccessory"))
    {
      objc_msgSend(v53, "currentAccessorySetupMetricDispatcher");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "markSetupBeginStage:error:", 7, 0);

    }
    v84 = v44;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v84, 1);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "identifier");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome addNewlyConfiguredAccessories:addSessionIdentifier:](v17, "addNewlyConfiguredAccessories:addSessionIdentifier:", v55, v56);

    objc_msgSend(v7, "transactionResult");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "markChanged");
    objc_msgSend(v57, "markSaveToAssistant");
    -[HMDHome workQueue](v17, "workQueue");
    v58 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke;
    block[3] = &unk_1E89A49F0;
    block[4] = v17;
    v77 = v44;
    v78 = v7;
    v79 = v53;
    v80 = v23;
    v81 = v47;
    v83 = v73;
    v82 = v57;
    v59 = v57;
    v60 = v47;
    v61 = v53;
    v62 = v44;
    dispatch_group_notify(group, v58, block);

    v26 = v75;
  }
LABEL_48:
  HMFGetOSLogHandle();
  v71 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v71))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, v71, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "AddMediaAccessoryModel", ", buf, 2u);
  }

}

- (void)handleRemoveAccessory:(id)a3 completion:(id)a4
{
  id v6;
  objc_class *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *);
  void *v21;
  id v22;
  const __CFString *v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (objc_class *)MEMORY[0x1E0D285F8];
  v8 = a3;
  v9 = [v7 alloc];
  v10 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v10, "initWithTarget:", v11);
  v23 = CFSTR("kAccessoryUUID");
  objc_msgSend(v8, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "UUIDString");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v23, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v9, "initWithName:destination:payload:", CFSTR("kRemoveAccessoryRequestKey"), v12, v15);

  v18 = MEMORY[0x1E0C809B0];
  v19 = 3221225472;
  v20 = __44__HMDHome_handleRemoveAccessory_completion___block_invoke;
  v21 = &unk_1E89B0528;
  v22 = v6;
  v17 = v6;
  objc_msgSend(v16, "setResponseHandler:", &v18);
  -[HMDHome handleRemoveAccessoryMessage:](self, "handleRemoveAccessoryMessage:", v16, v18, v19, v20, v21);

}

- (void)handleRemoveAccessoryMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __40__HMDHome_handleRemoveAccessoryMessage___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleRemoveAccessoryMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  char v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void (**v22)(_QWORD, _QWORD, _QWORD);
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  HMDHome *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  _QWORD aBlock[5];
  id v55;
  id v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v58 = v26;
        v59 = 2112;
        v60 = v6;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to find accessory with UUID: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v23);
      objc_msgSend(v4, "responseHandler");
      v8 = (id)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "responseHandler");
        v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v28)[2](v28, v27, 0);

        v8 = 0;
      }
      goto LABEL_26;
    }
    v8 = v7;
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EFAEB658))
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;

    v11 = objc_msgSend(v10, "supportsDisassociation");
    if ((v11 & 1) != 0 || (objc_msgSend(v8, "isPrimary") & 1) != 0)
    {
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v58 = v15;
        v59 = 2112;
        v60 = v8;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Received request to remove accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
      if ((objc_msgSend(v4, "isRemote") & 1) != 0 || (objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
        goto LABEL_12;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __41__HMDHome__handleRemoveAccessoryMessage___block_invoke;
      aBlock[3] = &unk_1E89A6B00;
      aBlock[4] = v13;
      v55 = v4;
      v35 = v8;
      v56 = v35;
      v36 = _Block_copy(aBlock);
      objc_msgSend(v35, "uuid");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome activeNetworkRouterUUID](v13, "activeNetworkRouterUUID");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend(v37, "isEqual:", v38);

      if (v39)
      {
        -[HMDHome accessoriesRequiringManualReconfigurationOnRouterRemoval](v13, "accessoriesRequiringManualReconfigurationOnRouterRemoval");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "na_map:", &__block_literal_global_1035);
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        v42 = (void *)MEMORY[0x1D17BA0A0]();
        v43 = v13;
        HMFGetOSLogHandle();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v58 = v45;
          _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_INFO, "%{public}@Requesting permission to remove active network router accessory", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v42);
        +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "name");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "uuid");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v43, "workQueue");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "requestUserPermissionForRemovalOfRouter:accessoriesRequiringManualReconfiguration:withContext:queue:completionHandler:", v47, v41, v48, v49, v36);

      }
      else
      {
        if (objc_msgSend(v35, "wiFiCredentialType") != 3)
        {

LABEL_12:
          -[HMDHome _handleRemoveAccessoryAfterUserConsent:message:](v13, "_handleRemoveAccessoryAfterUserConsent:message:", v8, v4);
LABEL_26:

          goto LABEL_27;
        }
        v50 = (void *)MEMORY[0x1D17BA0A0]();
        v51 = v13;
        HMFGetOSLogHandle();
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v58 = v53;
          _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Requesting permission to remove accessory with specific WiFi credential", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v50);
        +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "name");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "uuid");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome workQueue](v51, "workQueue");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "requestUserPermissionForRemovalOfSpecificWiFiCredentialedAccessory:withContext:queue:completionHandler:", v46, v47, v48, v36);
      }

      v8 = v35;
      goto LABEL_26;
    }
    v29 = (void *)MEMORY[0x1D17BA0A0]();
    v30 = self;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v58 = v32;
      v59 = 2112;
      v60 = v8;
      _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@cannot remove non-primary accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(v4, "responseHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v33)
      goto LABEL_26;
    objc_msgSend(v4, "responseHandler");
    v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 34, 0);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v22)[2](v22, v34, 0);

LABEL_25:
    goto LABEL_26;
  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v58 = v19;
    v59 = 2112;
    v60 = v20;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Missing target accessory UUID from message payload: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  objc_msgSend(v4, "responseHandler");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v22)[2](v22, v8, 0);
    goto LABEL_25;
  }
LABEL_27:

}

- (void)_handleRemoveAccessoryAfterUserConsent:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (-[HMDHome isAdminUser](self, "isAdminUser"))
  {
    -[HMDHome administratorHandler](self, "administratorHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "shouldRelayMessages") & 1) != 0
      || objc_msgSend(v6, "requiresRemovalOnPrimaryResident")
      && !-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident"))
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v20;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Sending remove accessory request to owner / primary resident", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      v32 = 0;
      objc_msgSend(v8, "operationForMessage:error:", v7, &v32);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = v32;
      if (v21)
      {
        v23 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v8, "addOperation:", v21));
        v24 = v18;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v34 = v26;
          _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Also removing accessory locally", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v23);
        -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v24, v6, 0, v7);
        -[HMDHome _submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:](v24, "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", v6, 1, 1, 0, 0, v22);
      }
      else
      {
        v27 = (void *)MEMORY[0x1D17BA0A0]();
        v28 = v18;
        HMFGetOSLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v34 = v30;
          v35 = 2112;
          v36 = v22;
          _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to create home administrator configuration operation for accessory removal: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v27);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 52);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "respondWithError:", v31);

      }
    }
    else
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v12;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Removing accessory locally", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      -[HMDHome __removeAccessory:isBeingReplaced:isForceUpdate:message:](v10, v6, 0, v7);
      -[HMDHome _submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:](v10, "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", v6, 1, 0, 0, 0, 0);
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Not removing accessory due to insufficient privileges", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v8);
  }

}

- (void)_submitRemovalLogEventForAccessory:(id)a3 isLocalRemoval:(BOOL)a4 isLocalFallback:(BOOL)a5 isDuplicate:(BOOL)a6 duplicateCount:(int64_t)a7 error:(id)a8
{
  _BOOL8 v10;
  _BOOL8 v11;
  _BOOL8 v12;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  HMDAppleMediaAccessoryRemovalLogEvent *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v10 = a6;
  v11 = a5;
  v12 = a4;
  v32 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a8;
  v16 = v14;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  if (v18 && objc_msgSend(v18, "isHomePod"))
  {
    v19 = -[HMDAppleMediaAccessoryRemovalLogEvent initWithIsLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:]([HMDAppleMediaAccessoryRemovalLogEvent alloc], "initWithIsLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:", v12, v11, v10, a7);
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAppleMediaAccessoryRemovalLogEvent coreAnalyticsEventDictionary](v19, "coreAnalyticsEventDictionary");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543874;
      v27 = v23;
      v28 = 2112;
      v29 = v24;
      v30 = 2112;
      v31 = v15;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Submitting apple media accessory removal log event: %@ error: %@", (uint8_t *)&v26, 0x20u);

    }
    objc_autoreleasePoolPop(v20);
    -[HMDHome logEventSubmitter](v21, "logEventSubmitter");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "submitLogEvent:error:", v19, v15);

  }
}

- (void)_handleRemoveAccessoryModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v7, "transactionResult");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "debugString:", 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v15;
      v38 = 2112;
      v39 = v16;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Going to remove accessory : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v17 = v11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v18 = v17;
    else
      v18 = 0;
    v19 = v18;

    if (v17)
    {
      if (isInternalBuild() && (objc_msgSend(v17, "shouldProcessTransactionRemoval") & 1) == 0)
      {
        v31 = (void *)MEMORY[0x1D17BA0A0]();
        v32 = v13;
        HMFGetOSLogHandle();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v37 = v34;
          _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Failed to process transaction removal due to internal flag set to simulate this failure", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v31);
        objc_msgSend(v7, "respondWithSuccess");
        goto LABEL_17;
      }
      if (objc_msgSend(v17, "isPrimary"))
      {
        objc_msgSend(v6, "uuid");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _removeAccessoryWithUUID:message:](v13, "_removeAccessoryWithUUID:message:", v20, v7);

        -[HMDHome networkProtectionGroupRegistry](v13, "networkProtectionGroupRegistry");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "handleRemovedAccessory:", v17);

        objc_msgSend(v17, "uuid");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome activeNetworkRouterUUID](v13, "activeNetworkRouterUUID");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v22, "isEqual:", v23);

        if (v24)
          -[HMDHome _evaluateNetworkRouterManagementForTransaction:](v13, "_evaluateNetworkRouterManagementForTransaction:", v9);
      }
      else
      {
        objc_msgSend(v19, "bridge");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "removeHostedAccessory:", v17);
        -[HMDHome removeAccessory:](v13, "removeAccessory:", v17);
        v35 = v17;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v35, 1);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _removeAccessories:message:](v13, "_removeAccessories:message:", v26, 0);

      }
      objc_msgSend(v7, "transactionResult");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome notifyOfRemovedAccessory:source:](v13, "notifyOfRemovedAccessory:source:", v17, objc_msgSend(v27, "source"));
      -[HMDHome homeManager](v13, "homeManager");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "lastEventStoreController");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "uuid");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "didRemoveAccessory:", v30);

    }
    objc_msgSend(v9, "markChanged");
    objc_msgSend(v9, "markSaveToAssistant");
LABEL_17:

    goto LABEL_18;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "responseHandler");
  v17 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void *, _QWORD))v17 + 2))(v17, v9, 0);
LABEL_18:

}

- (void)notifyOfRemovedAccessory:(id)a3 source:(unint64_t)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  unint64_t v11;

  v6 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __43__HMDHome_notifyOfRemovedAccessory_source___block_invoke;
  block[3] = &unk_1E89BE2F0;
  block[4] = self;
  v10 = v6;
  v11 = a4;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)notifyOfAddedAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __34__HMDHome_notifyOfAddedAccessory___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)notifyOfNewlyAddedAccessoryByThisOwnerDevice:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _BOOL4 v8;
  id v9;
  void *v10;
  id v11;
  BOOL v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;
  if (v6)
  {
    v7 = v6;
    v8 = -[HMDHome isOwnerUser](self, "isOwnerUser");

    if (!v8)
      goto LABEL_13;
    goto LABEL_12;
  }
  v9 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  if (v11)
  {
    v12 = -[HMDHome isOwnerUser](self, "isOwnerUser");

    if (v12)
    {
LABEL_12:
      -[HMDHome notificationCenter](self, "notificationCenter");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = CFSTR("HMDAccessoryNotificationKey");
      v16[0] = v4;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "postNotificationName:object:userInfo:", CFSTR("HMDHomeThisOwnerDeviceAddedAccessoryNotification"), self, v14);

    }
  }
LABEL_13:

}

- (void)removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __90__HMDHome_removeWithMergeSecondaryAccessory_removedFromBridgeAccessory_completionHandler___block_invoke;
  v15[3] = &unk_1E89C0448;
  v15[4] = self;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, v15);

}

- (void)_removeWithMergeSecondaryAccessory:(id)a3 removedFromBridgeAccessory:(id)a4 completionHandler:(id)a5
{
  id v8;
  void (**v9)(id, void *, _QWORD);
  void *v10;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (void (**)(id, void *, _QWORD))a5;
  objc_msgSend(a4, "removeHostedAccessory:", v8);
  -[HMDHome removeAccessory:](self, "removeAccessory:", v8);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "removeBulletinsForAccessory:", v8);

  -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](self, "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);
  if (v9)
  {
    v12[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2](v9, v11, 0);

  }
}

- (id)hapAccessoryWithIdentifier:(id)a3 instanceID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  char v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        objc_msgSend(v13, "identifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v6);

        if (v15)
        {
          v16 = v13;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v17 = v16;
          else
            v17 = 0;
          v18 = v17;

          if (v18)
          {
            if (!v7)
              goto LABEL_17;
            objc_msgSend(v18, "hapInstanceId");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v19, "isEqualToNumber:", v7);

            if ((v20 & 1) != 0)
              goto LABEL_17;
          }

        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v10);
  }
  v16 = 0;
LABEL_17:

  return v16;
}

- (id)hmdHAPAccessoryWithHAPAccessory:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v8)
        objc_enumerationMutation(v5);
      v10 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * v9);
      objc_opt_class();
      v11 = (objc_opt_isKindOfClass() & 1) != 0 ? v10 : 0;
      v12 = v11;

      if ((objc_msgSend(v12, "matchesHAPAccessory:", v4) & 1) != 0)
        break;

      if (v7 == ++v9)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v12 = 0;
  }

  return v12;
}

- (void)scheduleRemoval
{
  void *v3;
  id v4;

  -[HMDHome homeManager](self, "homeManager");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "scheduleRemovalForHome:message:options:", self, 0, v3);

}

- (unint64_t)accessoryCountForRoom:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;

  objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("room == %@"), a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessories](self, "accessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "filteredArrayUsingPredicate:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "count");
  return v7;
}

- (id)hapAccessoryServerIdentifiers
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11 && objc_msgSend(v11, "isPrimary", (_QWORD)v15))
        {
          objc_msgSend(v11, "identifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v12);

        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_msgSend(v3, "copy");
  return v13;
}

- (id)hapAccessoryUniqueIdentifiers
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11)
        {
          objc_msgSend(v11, "uniqueIdentifier", (_QWORD)v15);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v12);

        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_msgSend(v3, "copy");
  return v13;
}

- (void)_deregisterPairedAccessory:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "deregisterPairedAccessory:", v4);

}

- (BOOL)_addOwnerToPrimaryAccessory:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  id *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  BOOL v14;
  _QWORD v16[4];
  NSObject *v17;
  uint64_t *v18;
  id obj;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v6 = a3;
  if (objc_msgSend(v6, "isPrimary"))
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = __Block_byref_object_copy__10535;
    v24 = __Block_byref_object_dispose__10536;
    v25 = 0;
    -[HMDHome owner](self, "owner");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id *)(v21 + 5);
    obj = (id)v21[5];
    -[HMDHome prepareUserManagementOperationForUser:accessory:type:model:error:](self, "prepareUserManagementOperationForUser:accessory:type:model:error:", v7, v6, 1, 0, &obj);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v8, obj);

    v10 = (void *)v21[5];
    if (!v10)
    {
      v11 = dispatch_group_create();
      dispatch_group_enter(v11);
      dispatch_get_global_queue(0, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __45__HMDHome__addOwnerToPrimaryAccessory_error___block_invoke;
      v16[3] = &unk_1E89B5170;
      v18 = &v20;
      v13 = v11;
      v17 = v13;
      objc_msgSend(v9, "executeWithCompletionQueue:completionHandler:", v12, v16);

      dispatch_group_wait(v13, 0xFFFFFFFFFFFFFFFFLL);
      v10 = (void *)v21[5];
    }
    v14 = v10 == 0;
    if (a4 && v10)
      *a4 = objc_retainAutorelease(v10);

    _Block_object_dispose(&v20, 8);
  }
  else
  {
    v14 = 1;
  }

  return v14;
}

- (void)_notifyOwnerOfAddedAccessories:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  _QWORD v33[4];
  id v34;
  id v35;
  id location;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v31 = a4;
  v32 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v8 = (void *)objc_msgSend(v6, "mutableCopy");
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v38;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v38 != v11)
          objc_enumerationMutation(v9);
        v13 = *(id *)(*((_QWORD *)&v37 + 1) + 8 * v12);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v14 = v13;
        else
          v14 = 0;
        v15 = v14;

        if (v15)
        {
          objc_msgSend(v7, "addObject:", v15);
          objc_msgSend(v8, "removeObject:", v15);
        }

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    }
    while (v10);
  }

  v16 = (void *)objc_msgSend(v8, "copy");
  objc_msgSend(v32, "setObject:forKey:", v7, CFSTR("accessories.airplay"));
  encodeRootObject();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "setObject:forKey:", v17, CFSTR("accessories"));
  -[HMDHome chipStorage](self, "chipStorage");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "fabricID");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "setObject:forKeyedSubscript:", v19, CFSTR("HMDHomeCHIPFabricIndexMessageKey"));

  -[HMDHome chipStorage](self, "chipStorage");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "fabricID");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "setObject:forKeyedSubscript:", v21, CFSTR("HMDHomeCHIPFabricIDMessageKey"));

  objc_initWeak(&location, self);
  v22 = (void *)MEMORY[0x1E0D285F8];
  v23 = (void *)objc_msgSend(v32, "copy");
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __53__HMDHome__notifyOwnerOfAddedAccessories_completion___block_invoke;
  v33[3] = &unk_1E89C1B70;
  objc_copyWeak(&v35, &location);
  v24 = v31;
  v34 = v24;
  objc_msgSend(v22, "messageWithName:messagePayload:responseHandler:", CFSTR("kAddAccessoriesInternalRequestKey"), v23, v33);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  v26 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMDHome uuid](self, "uuid");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = (void *)objc_msgSend(v26, "initWithTarget:", v27);

  objc_msgSend(v25, "setDestination:", v28);
  objc_msgSend(v25, "setQualityOfService:", 33);
  -[HMDHome administratorHandler](self, "administratorHandler");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "operationForMessage:error:", v25, 0);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (v30)
    objc_msgSend(v29, "addOperation:", v30);

  objc_destroyWeak(&v35);
  objc_destroyWeak(&location);

}

- (void)_sharedAdminDidFailToAddAccessories:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_notifyClientOfNewlyAddedAccessories:(id)a3 requestMessage:(id)a4
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  void *v60;
  id obj;
  _QWORD v62[4];
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  const __CFString *v68;
  void *v69;
  _QWORD v70[2];
  _QWORD v71[2];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  void *v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v58 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v76, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v65;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v65 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * i);
        accessoryToEncodeForXPCTransportForAccessory(v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12 == v11)
        {
          v70[0] = CFSTR("kAccessoryUUID");
          objc_msgSend(v11, "uuid");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v70[1] = CFSTR("kAccessoryDataKey");
          v71[0] = v17;
          encodeRootObjectForSPIClients(v11);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v71[1] = v18;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v71, v70, 2);
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          v20 = (void *)objc_msgSend(v19, "copy");
          objc_msgSend(v60, "addObject:", v20);

          v21 = v11;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v22 = v21;
          else
            v22 = 0;
          v23 = v22;

          v24 = v21;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v25 = v24;
          else
            v25 = 0;
          v26 = v25;

          if (v23
            && (!objc_msgSend(v23, "hasTelevisionService") || (_os_feature_enabled_impl() & 1) != 0)
            || v26 && _os_feature_enabled_impl())
          {
            objc_msgSend(v59, "addObject:", v19);
          }

        }
        else
        {
          v13 = (void *)MEMORY[0x1D17BA0A0]();
          v14 = self;
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v73 = v16;
            v74 = 2112;
            v75 = v11;
            _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Skipping notifying clients of added accessory: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v13);
        }

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v76, 16);
    }
    while (v8);
  }

  v68 = CFSTR("kHomeUUID");
  -[HMDHome uuid](self, "uuid");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = v27;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v69, &v68, 1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = objc_msgSend(v59, "count");
  v30 = (uint64_t *)MEMORY[0x1E0CB8CB8];
  if (v29)
  {
    v31 = (void *)objc_msgSend(v28, "mutableCopy");
    v32 = (void *)objc_msgSend(v59, "copy");
    objc_msgSend(v31, "setObject:forKeyedSubscript:", v32, CFSTR("kAccessoriesListKey"));

    v33 = (void *)MEMORY[0x1D17BA0A0]();
    v34 = self;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v73 = v36;
      v74 = 2112;
      v75 = v31;
      _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Notifying non-SPI-entitled clients of added accessories using payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v33);
    objc_msgSend(MEMORY[0x1E0D285F8], "nonSPIEntitledMessageWithName:messagePayload:", *v30, v31);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "identifier");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "setIdentifier:", v38);

    -[HMDHome msgDispatcher](v34, "msgDispatcher");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v34, "uuid");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "sendMessage:target:", v37, v40);

  }
  else
  {
    v41 = (void *)MEMORY[0x1D17BA0A0]();
    v42 = self;
    HMFGetOSLogHandle();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v73 = v44;
      _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Not notifying non-SPI-entitled clients of empty list of added accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v41);
  }
  v45 = (void *)objc_msgSend(v28, "mutableCopy");
  v46 = (void *)objc_msgSend(v60, "copy");
  objc_msgSend(v45, "setObject:forKeyedSubscript:", v46, CFSTR("kAccessoriesListKey"));

  v47 = (void *)MEMORY[0x1D17BA0A0]();
  v48 = self;
  HMFGetOSLogHandle();
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v73 = v50;
    v74 = 2112;
    v75 = v45;
    _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_INFO, "%{public}@Notifying SPI-entitled clients of added accessories using payload: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v47);
  v51 = (void *)MEMORY[0x1E0D285F8];
  v52 = *v30;
  objc_msgSend(v58, "identifier");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "entitledMessageWithName:identifier:messagePayload:", v52, v53, v45);
  v54 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome msgDispatcher](v48, "msgDispatcher");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v48, "uuid");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v62[0] = MEMORY[0x1E0C809B0];
  v62[1] = 3221225472;
  v62[2] = __63__HMDHome__notifyClientOfNewlyAddedAccessories_requestMessage___block_invoke;
  v62[3] = &unk_1E89C2730;
  v63 = v58;
  v57 = v58;
  objc_msgSend(v55, "sendMessage:target:andInvokeCompletionHandler:", v54, v56, v62);

}

- (void)_sendRemoveCompletionStatusForHMDAccessories:(id)a3 withCompletion:(id)a4 error:(id)a5
{
  id v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void (**v27)(id, id, id);
  id v28;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t v34[128];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v27 = (void (**)(id, id, id))a4;
  v28 = a5;
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if (v27)
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v36 = v13;
      v37 = 2112;
      v38 = v28;
      v39 = 2112;
      v40 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending removal completion with error %@, accessories %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    v27[2](v27, v8, v28);
  }
  else
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v14;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@sending removal completion for accessory removal: no completion found", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
  }
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v8;
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v31;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v31 != v16)
          objc_enumerationMutation(obj);
        v18 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v17);
        os_unfair_recursive_lock_lock_with_options();
        -[NSHashTable removeObject:](v10->_removeAccessoryInProgressForHMDAccessories, "removeObject:", v18);
        os_unfair_recursive_lock_unlock();
        v19 = v18;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v20 = v19;
        else
          v20 = 0;
        v21 = v20;

        if (v21 && objc_msgSend(v19, "isPrimary"))
        {
          objc_msgSend(v21, "getPrimaryHAPAccessories");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "firstObject");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "server");
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          -[HMDHome accessoryBrowser](v10, "accessoryBrowser");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "identifier");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "addUnpairedAccessoryServer:identifier:", v24, v26);

        }
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v15);
  }

  if (objc_msgSend(obj, "count"))
    -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v10, "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);

}

- (void)_removeAccessoriesForPrimaryAccessory:(id)a3 error:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  char isKindOfClass;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  int v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  char v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  HMDHome *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSObject *v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  HMDHome *v67;
  void *v68;
  id v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint8_t buf[4];
  void *v76;
  __int16 v77;
  id v78;
  __int16 v79;
  void *v80;
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!v8)
  {
    v53 = (void *)MEMORY[0x1D17BA0A0]();
    v54 = self;
    HMFGetOSLogHandle();
    v55 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v76 = v56;
      _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_ERROR, "%{public}@Nil accessory was passed to remove it from the home.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v53);
    v57 = (void *)MEMORY[0x1E0CB35C8];
    v58 = *MEMORY[0x1E0CB8C70];
    v59 = 20;
    goto LABEL_50;
  }
  if ((objc_msgSend(v8, "isPrimary") & 1) == 0)
  {
    v60 = (void *)MEMORY[0x1D17BA0A0]();
    v54 = self;
    HMFGetOSLogHandle();
    v61 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v76 = v62;
      v77 = 2112;
      v78 = v8;
      _os_log_impl(&dword_1CD062000, v61, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not primary (Bridged). Not moving further. [%@]", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v60);
    v57 = (void *)MEMORY[0x1E0CB35C8];
    v58 = *MEMORY[0x1E0CB8C70];
    v59 = 34;
LABEL_50:
    objc_msgSend(v57, "errorWithDomain:code:userInfo:", v58, v59, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:](v54, "_sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:", 0, v10, v11);
    goto LABEL_51;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome removeAccessory:](self, "removeAccessory:", v8);
  objc_msgSend(v11, "addObject:", v8);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeBulletinsForAccessory:", v8);

  v13 = v8;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
    v15 = v13;
  else
    v15 = 0;
  v69 = v15;

  if ((isKindOfClass & 1) != 0)
  {
    v65 = v13;
    v66 = v9;
    v67 = self;
    v68 = v11;
    v63 = v10;
    v64 = v8;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    -[HMDHome accessories](self, "accessories");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v71, v81, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v72;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v72 != v19)
            objc_enumerationMutation(v16);
          v21 = *(id *)(*((_QWORD *)&v71 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v22 = v21;
          else
            v22 = 0;
          v23 = v22;

          objc_msgSend(v23, "identifier");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "identifier");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v24, "isEqualToString:", v25) & 1) == 0)
          {

            goto LABEL_20;
          }
          objc_msgSend(v23, "hostAccessory");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v27 = objc_opt_isKindOfClass();

          if ((v27 & 1) == 0 || !v26)
          {
            -[HMDHome removeAccessory:](v67, "removeAccessory:", v21);
            objc_msgSend(v68, "addObject:", v21);
            +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "removeBulletinsForAccessory:", v21);
LABEL_20:

          }
        }
        v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v71, v81, 16);
      }
      while (v18);
    }

    v13 = v65;
    v28 = objc_msgSend(v65, "isReachable");
    v8 = v64;
    v9 = v66;
    self = v67;
    v11 = v68;
    if (v66
      || !v28
      || (objc_msgSend(v65, "home"),
          v29 = (void *)objc_claimAutoreleasedReturnValue(),
          v30 = objc_msgSend(v29, "isAdminUser"),
          v29,
          (v30 & 1) == 0))
    {
      -[HMDHome keychainStore](v67, "keychainStore");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v69, "identifier");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = 0;
      objc_msgSend(v31, "removeAccessoryKeyForName:error:", v32, &v70);
      v33 = v70;

      if (v33)
      {
        v34 = (void *)MEMORY[0x1D17BA0A0]();
        v35 = v67;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v65, "name");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "identifier");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v76 = v37;
          v77 = 2112;
          v78 = v38;
          v79 = 2112;
          v80 = v39;
          _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove keychain entry for accessory %@ with identifier: %@", buf, 0x20u);

          v11 = v68;
          v13 = v65;

        }
        objc_autoreleasePoolPop(v34);
        v9 = v66;
      }

    }
    objc_msgSend(v69, "identifier");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _deregisterPairedAccessory:](v67, "_deregisterPairedAccessory:", v40);

    v10 = v63;
  }
  v41 = v13;
  objc_opt_class();
  v42 = objc_opt_isKindOfClass();
  if ((v42 & 1) != 0)
    v43 = v41;
  else
    v43 = 0;
  v44 = v43;

  if ((v42 & 1) != 0)
  {
    objc_msgSend(v41, "mediaProfile");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    if (v45)
    {
      -[HMDHome notificationRegistry](self, "notificationRegistry");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "removeRegistrationsForMediaProfile:", v45);

      objc_msgSend(v41, "identifier");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome mediaSessionStateWithIdentifier:](self, "mediaSessionStateWithIdentifier:", v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      if (v48)
        -[HMDHome removeMediaSessionState:](self, "removeMediaSessionState:", v48);

    }
  }
  v49 = (void *)MEMORY[0x1D17BA0A0]();
  v50 = self;
  HMFGetOSLogHandle();
  v51 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v76 = v52;
    v77 = 2112;
    v78 = v11;
    _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@removedAccessories %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v49);
  -[HMDHome _sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:](v50, "_sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:", v11, v10, 0);

LABEL_51:
}

- (void)removeAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __45__HMDHome_removeAccessory_completionHandler___block_invoke;
  block[3] = &unk_1E89C1B48;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_removeAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  void (**v7)(id, _QWORD, void *);
  void *v8;
  int v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  _QWORD v36[2];
  _QWORD v37[2];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, _QWORD, void *))a4;
  if ((objc_msgSend(v6, "isPrimary") & 1) != 0)
  {
    -[HMDHome removeAccessoryInProgressForHMDAccessories](self, "removeAccessoryInProgressForHMDAccessories");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "containsObject:", v6);

    if (v9)
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v39 = v13;
        v40 = 2112;
        v41 = v6;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Already have a remove operation queued for accessory %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      v36[0] = *MEMORY[0x1E0CB2D50];
      v14 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v6, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "stringWithFormat:", CFSTR("Failed to remove accessory %@(%@)"), v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v36[1] = *MEMORY[0x1E0CB2D68];
      v37[0] = v17;
      v18 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmStringFromErrorCode:", 15);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "stringWithFormat:", CFSTR("%ld (%@) This accessory is already being removed from the home."), 15, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v37[1] = v20;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 2);
      v21 = (id)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 15, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        v7[2](v7, 0, v22);

    }
    else
    {
      v27 = v6;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v28 = v27;
      else
        v28 = 0;
      v21 = v28;

      objc_msgSend(v27, "home");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v29, "isAdminUser"))
      {
        v30 = objc_msgSend(v21, "isPaired");

        if ((v30 & 1) != 0)
        {
          os_unfair_recursive_lock_lock_with_options();
          -[NSHashTable addObject:](self->_removeAccessoryInProgressForHMDAccessories, "addObject:", v21);
          v31 = os_unfair_recursive_lock_unlock();
          v32 = (void *)MEMORY[0x1D17BA0A0](v31);
          v33 = self;
          HMFGetOSLogHandle();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v39 = v35;
            v40 = 2112;
            v41 = v21;
            _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Removing accessory %@. Also added accessory in removal-in-progress array", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v32);
          -[HMDHome _removeAccessoriesForPrimaryAccessory:error:completionHandler:](v33, "_removeAccessoriesForPrimaryAccessory:error:completionHandler:", v21, 0, v7);
          goto LABEL_22;
        }
      }
      else
      {

      }
      -[HMDHome _removeAccessoriesForPrimaryAccessory:error:completionHandler:](self, "_removeAccessoriesForPrimaryAccessory:error:completionHandler:", v27, 0, v7);
    }
LABEL_22:

    goto LABEL_23;
  }
  v23 = (void *)MEMORY[0x1D17BA0A0]();
  v24 = self;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v39 = v26;
    v40 = 2112;
    v41 = v6;
    _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@cannot remove non-primary accessory %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v23);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 34, 0);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    v7[2](v7, 0, v21);
    goto LABEL_22;
  }
LABEL_23:

}

- (void)_removeAccessoryWithUUID:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id location;
  _BYTE buf[12];
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_initWeak(&location, self);
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v12;
      v26 = 2112;
      v27 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Remove accessory name: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v13 = v8;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    *(_QWORD *)buf = 0;
    objc_msgSend(v15, "preferredHAPAccessoryForOperation:linkType:", 8, buf);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAccessoryPairingEvent removingAccessory:hapAccessory:](HMDAccessoryPairingEvent, "removingAccessory:hapAccessory:", v13, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __44__HMDHome__removeAccessoryWithUUID_message___block_invoke;
    v19[3] = &unk_1E89A4A38;
    objc_copyWeak(&v23, &location);
    v20 = v7;
    v18 = v17;
    v21 = v18;
    v22 = v13;
    -[HMDHome _removeAccessory:completionHandler:](v10, "_removeAccessory:completionHandler:", v22, v19);

    objc_destroyWeak(&v23);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v15);
  }

  objc_destroyWeak(&location);
}

- (void)_removeCharacteristic:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome backingStore](self, "backingStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "transaction:options:", CFSTR("kRemoveCharacteristicRequestKey"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  -[HMDHome actionSets](self, "actionSets");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "copy");

  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v35;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v35 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * v13++), "handleRemovalOfActionForCharacteristic:transaction:", v4, v7);
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
    }
    while (v11);
  }

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v14, "copy");

  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v31;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v31 != v18)
          objc_enumerationMutation(v15);
        objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * v19++), "handleRemovalOfActionForCharacteristic:transaction:", v4, v7);
      }
      while (v17 != v19);
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
    }
    while (v17);
  }

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[HMDHome triggers](self, "triggers");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v27;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v27 != v23)
          objc_enumerationMutation(v20);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v24++), "handleRemovalOfCharacteristic:transaction:", v4, v7);
      }
      while (v22 != v24);
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
    }
    while (v22);
  }

  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __33__HMDHome__removeCharacteristic___block_invoke;
  v25[3] = &unk_1E89C2350;
  v25[4] = self;
  objc_msgSend(v7, "run:", v25);

}

- (void)_removeService:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD v39[5];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  const __CFString *v56;
  id v57;
  _BYTE v58[128];
  _BYTE v59[128];
  _BYTE v60[128];
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome backingStore](self, "backingStore");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x1E0CBABE0];
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "transaction:options:", v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  -[HMDHome serviceGroups](self, "serviceGroups");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "copy");

  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v52, v61, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v53;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v53 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * v14++), "removeService:", v4);
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v52, v61, 16);
    }
    while (v12);
  }

  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  -[HMDHome actionSets](self, "actionSets");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v15, "copy");

  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v49;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v49 != v19)
          objc_enumerationMutation(v16);
        objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * v20++), "handleRemovalOfService:transaction:", v4, v8);
      }
      while (v18 != v20);
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
    }
    while (v18);
  }

  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = (void *)objc_msgSend(v21, "copy");

  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v45;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v45 != v25)
          objc_enumerationMutation(v22);
        objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * v26++), "handleRemovalOfService:transaction:", v4, v8);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
    }
    while (v24);
  }

  objc_msgSend(v4, "getConfiguredName");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    objc_msgSend(v4, "getConfiguredName");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = -[HMDHome removeName:](self, "removeName:", v28);

  }
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  -[HMDHome triggers](self, "triggers");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v40, v58, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v41;
    do
    {
      v34 = 0;
      do
      {
        if (*(_QWORD *)v41 != v33)
          objc_enumerationMutation(v30);
        objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * v34++), "handleRemovalOfService:transaction:", v4, v8);
      }
      while (v32 != v34);
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v40, v58, 16);
    }
    while (v32);
  }

  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = __26__HMDHome__removeService___block_invoke;
  v39[3] = &unk_1E89C2350;
  v39[4] = self;
  objc_msgSend(v8, "run:", v39);
  -[HMDHome notificationCenter](self, "notificationCenter");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = CFSTR("HMDServiceNotificationKey");
  v57 = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "postNotificationName:object:userInfo:", CFSTR("HMDHomeServiceRemovedNotification"), self, v36);

  -[HMDHome notificationRegistry](self, "notificationRegistry");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "characteristics");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "removeRegistrationsForCharacteristics:", v38);

}

- (void)_removeAccessoriesFromContainers:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id obj;
  uint64_t v44;
  _QWORD v45[5];
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  _BYTE v68[128];
  _BYTE v69[128];
  _BYTE v70[128];
  uint8_t v71[128];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v73 = v8;
      v74 = 2112;
      v75 = v4;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Removing accessories from containers : [%@]", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome backingStore](v6, "backingStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "transaction:options:", CFSTR("kRemoveAccessoryFromContainersRequestKey"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v42 = v4;
    obj = v4;
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
    if (v12)
    {
      v13 = v12;
      v44 = *(_QWORD *)v64;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v64 != v44)
            objc_enumerationMutation(obj);
          v15 = *(id *)(*((_QWORD *)&v63 + 1) + 8 * v14);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v16 = v15;
          else
            v16 = 0;
          v17 = v16;

          if (v17)
          {
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            -[HMDHome serviceGroups](v6, "serviceGroups");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = (void *)objc_msgSend(v18, "copy");

            v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v59, v70, 16);
            if (v20)
            {
              v21 = v20;
              v22 = *(_QWORD *)v60;
              do
              {
                v23 = 0;
                do
                {
                  if (*(_QWORD *)v60 != v22)
                    objc_enumerationMutation(v19);
                  objc_msgSend(*(id *)(*((_QWORD *)&v59 + 1) + 8 * v23++), "removeServicesForAccessory:", v17);
                }
                while (v21 != v23);
                v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v59, v70, 16);
              }
              while (v21);
            }

          }
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          -[HMDHome actionSets](v6, "actionSets");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = (void *)objc_msgSend(v24, "copy");

          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v55, v69, 16);
          if (v26)
          {
            v27 = v26;
            v28 = *(_QWORD *)v56;
            do
            {
              v29 = 0;
              do
              {
                if (*(_QWORD *)v56 != v28)
                  objc_enumerationMutation(v25);
                objc_msgSend(*(id *)(*((_QWORD *)&v55 + 1) + 8 * v29++), "handleRemovalOfAccessory:transaction:", v15, v11);
              }
              while (v27 != v29);
              v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v55, v69, 16);
            }
            while (v27);
          }

          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          -[HMDHome triggerOwnedActionSets](v6, "triggerOwnedActionSets");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = (void *)objc_msgSend(v30, "copy");

          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v51, v68, 16);
          if (v32)
          {
            v33 = v32;
            v34 = *(_QWORD *)v52;
            do
            {
              v35 = 0;
              do
              {
                if (*(_QWORD *)v52 != v34)
                  objc_enumerationMutation(v31);
                objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * v35++), "handleRemovalOfAccessory:transaction:", v15, v11);
              }
              while (v33 != v35);
              v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v51, v68, 16);
            }
            while (v33);
          }

          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          -[HMDHome triggers](v6, "triggers");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v47, v67, 16);
          if (v37)
          {
            v38 = v37;
            v39 = *(_QWORD *)v48;
            do
            {
              v40 = 0;
              do
              {
                if (*(_QWORD *)v48 != v39)
                  objc_enumerationMutation(v36);
                objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * v40++), "handleRemovalOfAccessory:transaction:", v15, v11);
              }
              while (v38 != v40);
              v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v47, v67, 16);
            }
            while (v38);
          }

          v45[0] = MEMORY[0x1E0C809B0];
          v45[1] = 3221225472;
          v45[2] = __44__HMDHome__removeAccessoriesFromContainers___block_invoke;
          v45[3] = &unk_1E89C21C0;
          v45[4] = v6;
          v46 = v17;
          v41 = v17;
          objc_msgSend(v11, "run:", v45);

          ++v14;
        }
        while (v14 != v13);
        v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
      }
      while (v13);
    }

    -[HMDHome _evaluateShouldRelaunchAndSetRelaunch](v6, "_evaluateShouldRelaunchAndSetRelaunch");
    v4 = v42;
  }

}

- (id)_removeAccessoriesCommon:(id)a3
{
  id v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id obj;
  uint64_t v27;
  id v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const __CFString *v38;
  void *v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v28 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome _removeAccessoriesFromContainers:](self, "_removeAccessoriesFromContainers:", v4);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = v4;
  v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
  if (v29)
  {
    v27 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v29; ++i)
      {
        if (*(_QWORD *)v35 != v27)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        -[HMDHome removeAccessory:](self, "removeAccessory:", v6);
        objc_msgSend(v6, "getConfiguredName");
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        if (v7)
        {
          objc_msgSend(v6, "getConfiguredName");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = -[HMDHome removeName:](self, "removeName:", v8);

        }
        v10 = v6;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
        {
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          objc_msgSend(v12, "services");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v31;
            do
            {
              for (j = 0; j != v15; ++j)
              {
                if (*(_QWORD *)v31 != v16)
                  objc_enumerationMutation(v13);
                v18 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * j);
                objc_msgSend(v18, "getConfiguredName");
                v19 = (void *)objc_claimAutoreleasedReturnValue();

                if (v19)
                {
                  objc_msgSend(v18, "getConfiguredName");
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v21 = -[HMDHome removeName:](self, "removeName:", v20);

                }
              }
              v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v40, 16);
            }
            while (v15);
          }

        }
        v38 = CFSTR("kAccessoryUUID");
        objc_msgSend(v10, "uuid");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "UUIDString");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = v23;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "addObject:", v24);

      }
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
    }
    while (v29);
  }

  return v28;
}

- (void)_removeAccessories:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  HMDHome *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id obj;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  const __CFString *v48;
  void *v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  id v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome _removeAccessoriesCommon:](self, "_removeAccessoriesCommon:", v6);
  v8 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "name");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("kRemoveAccessoryRequestKey"));

  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v8, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v8, CFSTR("kAccessoriesListKey"));
    v12 = (void *)objc_msgSend(v11, "copy");
    objc_msgSend(v7, "respondWithPayload:", v12);

  }
  else
  {
    objc_msgSend(v7, "respondWithSuccess", v8, v7);
  }
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = v6;
  v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v45;
    do
    {
      v16 = 0;
      v42 = v14;
      do
      {
        if (*(_QWORD *)v45 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * v16);
        v18 = (void *)MEMORY[0x1D17BA0A0]();
        v19 = self;
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v51 = v21;
          v52 = 2112;
          v53 = v17;
          _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Removing accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v18);
        v22 = v17;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v23 = v22;
        else
          v23 = 0;
        v24 = v23;

        if (v24)
        {
          if (objc_msgSend(v24, "isCurrentAccessory"))
          {
            v25 = v15;
            v26 = self;
            v27 = (void *)MEMORY[0x1D17BA0A0]();
            v28 = v19;
            HMFGetOSLogHandle();
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v51 = v30;
              v52 = 2112;
              v53 = v22;
              _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Posting notification about current accessory removal %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v27);
            -[HMDHome notificationCenter](v28, "notificationCenter");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v48 = CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey");
            objc_msgSend(v24, "uuid");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v49 = v32;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerDidRemoveCurrentAccessoryNotification"), v28, v33);

            self = v26;
            v15 = v25;
            v14 = v42;
          }
          -[HMDHome homeManager](v19, "homeManager");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome capabilitiesAggregator](v19, "capabilitiesAggregator");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "uuid");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "didRemoveAccessory:", v36);

          objc_msgSend(v24, "uuid");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "accessorySetupMetricDispatcherForAccessoryUUID:", v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v38, "markAccessoryRemoved");
        }
        if (objc_msgSend(v22, "isPrimary"))
        {
          objc_msgSend(v22, "identifier");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _deregisterPairedAccessory:](v19, "_deregisterPairedAccessory:", v39);

        }
        objc_msgSend(v22, "setHome:", 0);
        objc_msgSend(v22, "unconfigure");

        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
    }
    while (v14);
  }

}

- (void)_removeAllHomeContentsAndAccessoryPairings:(BOOL)a3 queue:(id)a4 completionHandler:(id)a5
{
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t k;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  id v42;
  void *v43;
  _BOOL4 v44;
  HMDHome *val;
  NSObject *group;
  _QWORD aBlock[5];
  NSObject *v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  id location;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint8_t buf[4];
  void *v68;
  __int16 v69;
  void *v70;
  _BYTE v71[128];
  _BYTE v72[128];
  _BYTE v73[128];
  _BYTE v74[128];
  uint64_t v75;

  v44 = a3;
  v75 = *MEMORY[0x1E0C80C00];
  v41 = a4;
  v42 = a5;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  val = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v68 = v9;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing all home contents and accessory pairings", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  -[HMDHome walletKeyManager](val, "walletKeyManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "handleHomeWillBeRemoved");

  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  -[HMDHome triggers](val, "triggers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v63, v74, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v64;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v64 != v13)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v63 + 1) + 8 * i), "invalidate");
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v63, v74, 16);
    }
    while (v12);
  }

  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v15 = (void *)-[NSMutableArray copy](val->_actionSets, "copy");
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v59, v73, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v60;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v60 != v17)
          objc_enumerationMutation(v15);
        objc_msgSend(*(id *)(*((_QWORD *)&v59 + 1) + 8 * j), "invalidate");
      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v59, v73, 16);
    }
    while (v16);
  }

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  -[HMDHome users](val, "users");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v19, "copy");

  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v55, v72, 16);
  if (v21)
  {
    v22 = *(_QWORD *)v56;
    do
    {
      for (k = 0; k != v21; ++k)
      {
        if (*(_QWORD *)v56 != v22)
          objc_enumerationMutation(v20);
        v24 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * k);
        objc_msgSend(v24, "removeCloudData");
        objc_msgSend(v24, "unconfigure");
      }
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v55, v72, 16);
    }
    while (v21);
  }

  -[HMDHome accessories](val, "accessories");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "na_map:", &__block_literal_global_1049);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome _registerResidentReachabilityNotificationWithEnableAccessories:disableAccessories:completionHandler:](val, "_registerResidentReachabilityNotificationWithEnableAccessories:disableAccessories:completionHandler:", MEMORY[0x1E0C9AA60], v43, 0);
  objc_initWeak(&location, val);
  group = dispatch_group_create();
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  -[HMDHome accessories](val, "accessories");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v50, v71, 16);
  if (v27)
  {
    v28 = *(_QWORD *)v51;
    do
    {
      for (m = 0; m != v27; ++m)
      {
        if (*(_QWORD *)v51 != v28)
          objc_enumerationMutation(v26);
        v30 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * m);
        if (objc_msgSend(v30, "isPrimary"))
        {
          v31 = (void *)MEMORY[0x1D17BA0A0]();
          v32 = val;
          HMFGetOSLogHandle();
          v33 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v68 = v34;
            v69 = 2112;
            v70 = v30;
            _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Removing primary accessory %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v31);
          dispatch_group_enter(group);
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1050;
          aBlock[3] = &unk_1E89BD988;
          objc_copyWeak(&v49, &location);
          aBlock[4] = v30;
          v48 = group;
          v35 = _Block_copy(aBlock);
          v36 = v35;
          if (v44)
            -[HMDHome removeAllUsersAndCloudDataFromAccessory:completionHandler:](v32, "removeAllUsersAndCloudDataFromAccessory:completionHandler:", v30, v35);
          else
            (*((void (**)(void *))v35 + 2))(v35);

          objc_destroyWeak(&v49);
        }
      }
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v50, v71, 16);
    }
    while (v27);
  }

  -[HMDHome _removeCloudData](val, "_removeCloudData");
  dispatch_group_notify(group, v41, v42);
  v37 = (void *)MEMORY[0x1D17BA0A0]();
  v38 = val;
  HMFGetOSLogHandle();
  v39 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v68 = v40;
    _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Removed all accessories", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v37);

  objc_destroyWeak(&location);
}

- (void)handleHomeWasRemoved
{
  id v2;

  -[HMDHome walletKeyManager](self, "walletKeyManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleHomeWasRemoved");

}

- (void)_removeCloudData
{
  NSObject *v3;
  void *v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  HMDHome *v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  +[HMDCameraProfileSettingsManager zoneNameForHome:](HMDCameraProfileSettingsManager, "zoneNameForHome:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v22 = v8;
    v23 = 2112;
    v24 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Removing camera profile settings manager zone named %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDDatabase defaultDatabase](HMDDatabase, "defaultDatabase");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "removePrivateZonesWithName:", v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = MEMORY[0x1E0C809B0];
  v16 = 3221225472;
  v17 = __27__HMDHome__removeCloudData__block_invoke;
  v18 = &unk_1E89C21C0;
  v19 = v6;
  v20 = v4;
  v11 = v4;
  v12 = (id)objc_msgSend(v10, "addFailureBlock:", &v15);

  -[HMDHome userActionPredictionManager](v6, "userActionPredictionManager", v15, v16, v17, v18, v19);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "removeZones");

  -[HMDHome personDataManager](v6, "personDataManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "removeCloudDataDueToHomeRemoval");

}

- (void)notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __61__HMDHome_notifyClientsOfAccessoryInfoUpdatedForAccessories___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_notifyClientsOfAccessoryInfoUpdatedForAccessories:(id)a3 shouldRefreshBadge:(BOOL)a4 withCompletion:(id)a5
{
  _BOOL4 v6;
  id v8;
  void (**v9)(id, _QWORD);
  uint64_t v10;
  char v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  HMDHome *v60;
  _BOOL4 v61;
  void (**v62)(id, _QWORD);
  id v63;
  id obj;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t buf[4];
  void *v74;
  __int16 v75;
  void *v76;
  __int16 v77;
  void *v78;
  _BYTE v79[128];
  uint64_t v80;

  v6 = a4;
  v80 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (void (**)(id, _QWORD))a5;
  if (objc_msgSend(v8, "count"))
  {
    v60 = self;
    v61 = v6;
    v62 = v9;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v63 = v8;
    obj = v8;
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v79, 16);
    v58 = v10;
    v11 = 0;
    if (!v10)
      goto LABEL_36;
    v67 = *(_QWORD *)v70;
    v68 = v10;
    while (1)
    {
      for (i = 0; i != v68; ++i)
      {
        if (*(_QWORD *)v70 != v67)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
        objc_msgSend(v13, "vendorInfo", v58);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "firmwareVersion");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v15)
        {
          objc_msgSend(v14, "firmwareVersion");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "firmwareVersion");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v16, "isGreaterThanVersion:", v17);

        }
        else
        {
          v18 = 0;
        }

        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "appBundleID");
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (v21)
        {
          objc_msgSend(v14, "appBundleID");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v22, CFSTR("kAccessoryVendorInfoBundleIDKey"));

          v11 = 1;
        }
        objc_msgSend(v14, "appStoreID");
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          objc_msgSend(v14, "appStoreID");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v24, CFSTR("kAccessoryVendorInfoStoreIDKey"));

          v11 = 1;
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v18);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setObject:forKeyedSubscript:", v25, CFSTR("kAccessoryVendorInfoFirmwareUpdateAvailableKey"));

        objc_msgSend(v13, "serialNumber");
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        if (v26)
        {
          objc_msgSend(v13, "serialNumber");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v27, CFSTR("kAccessoryInfoSerialNumberKey"));

          v11 = 1;
        }
        objc_msgSend(v13, "manufacturer");
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        if (v28)
        {
          objc_msgSend(v13, "manufacturer");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v29, CFSTR("kAccessoryInfoManufacturerKey"));

          objc_msgSend(v13, "manufacturer");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v30, CFSTR("kAccessoryInfoManufacturerKey"));

        }
        objc_msgSend(v13, "model");
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        if (v31)
        {
          objc_msgSend(v13, "model");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v32, CFSTR("kAccessoryInfoModelKey"));

          objc_msgSend(v13, "model");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v33, CFSTR("kAccessoryInfoModelKey"));

        }
        v34 = v13;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v35 = v34;
        else
          v35 = 0;
        v36 = v35;

        if (v36 && objc_msgSend(v36, "supportsCHIP"))
        {
          objc_msgSend(v34, "displayableFirmwareVersion");
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v37)
            goto LABEL_30;
          objc_msgSend(v34, "displayableFirmwareVersion");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v38, CFSTR("kAccessoryInfoFirmwareVersionKey"));

          objc_msgSend(v34, "displayableFirmwareVersion");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v39, CFSTR("kAccessoryInfoFirmwareVersionKey"));
        }
        else
        {
          objc_msgSend(v34, "firmwareVersion");
          v40 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v40)
            goto LABEL_30;
          objc_msgSend(v34, "firmwareVersion");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "shortVersionString");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v42, CFSTR("kAccessoryInfoFirmwareVersionKey"));

          objc_msgSend(v34, "firmwareVersion");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "shortVersionString");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v43, CFSTR("kAccessoryInfoFirmwareVersionKey"));

        }
LABEL_30:
        if (objc_msgSend(v20, "count"))
        {
          objc_msgSend(v34, "uuid");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "UUIDString");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "setObject:forKeyedSubscript:", v20, v45);

        }
        if (objc_msgSend(v19, "count"))
        {
          objc_msgSend(v34, "uuid");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "UUIDString");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v65, "setObject:forKeyedSubscript:", v19, v47);

        }
      }
      v68 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v79, 16);
      if (!v68)
      {
LABEL_36:

        v48 = (void *)MEMORY[0x1D17BA0A0]();
        v49 = v60;
        HMFGetOSLogHandle();
        v50 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v74 = v51;
          v75 = 2112;
          v76 = v65;
          v77 = 2112;
          v78 = v66;
          _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_INFO, "%{public}@Notify clients that vendor info has updated: %@  entitledInfo %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v48);
        if (objc_msgSend(v65, "count"))
        {
          objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:messagePayload:", CFSTR("kAccessoryInfoUpdatedNotificationKey"), v65);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome msgDispatcher](v49, "msgDispatcher");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome messageTargetUUID](v49, "messageTargetUUID");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "sendMessage:target:", v52, v54);

        }
        if ((v11 & 1) != 0)
        {
          objc_msgSend(MEMORY[0x1E0D285D0], "entitledMessageWithName:messagePayload:", CFSTR("kAccessoryInfoUpdatedNotificationKey"), v66);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome msgDispatcher](v49, "msgDispatcher");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome messageTargetUUID](v49, "messageTargetUUID");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "sendMessage:target:", v55, v57);

        }
        -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v49, "_reevaluateAccessoryInfoWithBadgeRefresh:", v61, v58);
        v9 = v62;
        if (v62)
          ((void (**)(id, BOOL))v62)[2](v62, v59 != 0);

        v8 = v63;
        goto LABEL_47;
      }
    }
  }
  if (v9)
    v9[2](v9, 0);
LABEL_47:

}

- (void)_reevaluateAccessoryInfoWithBadgeRefresh:(BOOL)a3
{
  _BOOL4 v3;
  _BOOL4 v5;
  _BOOL4 v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v3 = a3;
  v26 = *MEMORY[0x1E0C80C00];
  v5 = -[HMDHome isOwnerUser](self, "isOwnerUser");
  v6 = -[HMDHome isSharedAdmin](self, "isSharedAdmin");
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138544130;
    v19 = v10;
    v20 = 2112;
    v21 = v11;
    v22 = 2112;
    v23 = v12;
    v24 = 2112;
    v25 = v13;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Re-evaluating accessory info with shouldRefreshBadge: %@, isOwnerUser: %@, isSharedAdminUser:%@ ", (uint8_t *)&v18, 0x2Au);

  }
  objc_autoreleasePoolPop(v7);
  if (v5)
  {
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (id)objc_msgSend(v14, "updateBulletinForFirmwareUpdateInHome:", v8);

  }
  else if (!v6)
  {
    goto LABEL_7;
  }
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "insertBulletinsForMatterFirmwareUpdateInstalledInHome:", v8);

LABEL_7:
  if (v3)
  {
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "refreshHomeBadgeNumber");

  }
}

- (void)reevaluateAccessoryInfo
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  _QWORD block[5];
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v10 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Re-evaluating accessory info", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHome workQueue](v4, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __34__HMDHome_reevaluateAccessoryInfo__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = v4;
  dispatch_async(v7, block);

}

- (void)evaluateNotificationConditionForCharacteristics:(id)a3 homePresence:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  int v39;
  HMDHome *v40;
  NSObject *v41;
  _BOOL4 v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  HMDHome *v58;
  NSObject *v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  void *context;
  uint64_t v67;
  uint64_t v68;
  id obj;
  HMDHome *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint8_t v79[128];
  uint8_t buf[4];
  void *v81;
  __int16 v82;
  id v83;
  __int16 v84;
  void *v85;
  const __CFString *v86;
  void *v87;
  _BYTE v88[128];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (v10)
  {
    if (-[HMDHome bulletinNotificationsSupported](self, "bulletinNotificationsSupported"))
    {
      v61 = v10;
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v8, "count"));
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v62 = v8;
      obj = v8;
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
      v64 = v9;
      v70 = self;
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v76;
        v67 = *(_QWORD *)v76;
        do
        {
          v14 = 0;
          v68 = v12;
          do
          {
            if (*(_QWORD *)v76 != v13)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * v14);
            objc_msgSend(v15, "service");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "bulletinBoardNotification");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v17, "isEnabled");

            if (v18)
            {
              v19 = (void *)MEMORY[0x1D17BA0A0]();
              v20 = self;
              HMFGetOSLogHandle();
              v21 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v81 = v22;
                v82 = 2112;
                v83 = v15;
                _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Notification is enabled for characteristic %@.", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v19);
              objc_msgSend(v16, "bulletinBoardNotification");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "condition");
              v24 = (void *)objc_claimAutoreleasedReturnValue();

              if (v24)
              {
                -[HMDHome predicateUtility](v20, "predicateUtility");
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                v26 = objc_msgSend(v25, "containsPresenceEvents:", v24);
                if (v9 || (v26 & 1) == 0)
                {
                  objc_msgSend(v25, "rewritePredicate:currentCharacteristicInPredicate:characteristicsToRead:homePresence:", v24, 0, 0, v9);
                  v32 = (void *)objc_claimAutoreleasedReturnValue();
                  v86 = CFSTR("THIS_OBJECT");
                  v87 = v25;
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1);
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v32, "allowEvaluation");
                  v39 = objc_msgSend(v32, "evaluateWithObject:substitutionVariables:", v25, v38);
                  context = (void *)MEMORY[0x1D17BA0A0]();
                  v40 = v20;
                  HMFGetOSLogHandle();
                  v41 = objc_claimAutoreleasedReturnValue();
                  v42 = os_log_type_enabled(v41, OS_LOG_TYPE_INFO);
                  if (v39)
                  {
                    if (v42)
                    {
                      HMFGetLogIdentifier();
                      v43 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v81 = v43;
                      v82 = 2112;
                      v83 = v24;
                      v84 = 2112;
                      v85 = v15;
                      _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Condition %@ for characteristic (%@) evaluates to true, posting bulletin for it.", buf, 0x20u);

                    }
                    objc_autoreleasePoolPop(context);
                    objc_msgSend(v65, "addObject:", v15);
                  }
                  else
                  {
                    if (v42)
                    {
                      HMFGetLogIdentifier();
                      v44 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v81 = v44;
                      v82 = 2112;
                      v83 = v24;
                      v84 = 2112;
                      v85 = v15;
                      _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Condition %@ for characteristic (%@) evaluates to false, not posting bulletin for it.", buf, 0x20u);

                    }
                    objc_autoreleasePoolPop(context);
                  }

                  v9 = v64;
                }
                else
                {
                  v27 = (void *)MEMORY[0x1D17BA0A0]();
                  v28 = v20;
                  HMFGetOSLogHandle();
                  v29 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v30 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543874;
                    v81 = v30;
                    v82 = 2112;
                    v83 = v24;
                    v84 = 2112;
                    v85 = v15;
                    _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Condition %@ contains presence and no homePresence presents, delaying bulletin for characteristic %@", buf, 0x20u);

                    v9 = v64;
                  }

                  objc_autoreleasePoolPop(v27);
                  objc_msgSend(v16, "uuid");
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v63, "objectForKeyedSubscript:", v31);
                  v32 = (void *)objc_claimAutoreleasedReturnValue();

                  if (!v32)
                  {
                    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                    v32 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v16, "uuid");
                    v33 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v63, "setObject:forKeyedSubscript:", v32, v33);

                  }
                  objc_msgSend(v32, "addObject:", v15);
                }
                v12 = v68;

                self = v70;
                v13 = v67;
              }
              else
              {
                v34 = (void *)MEMORY[0x1D17BA0A0]();
                v35 = v20;
                HMFGetOSLogHandle();
                v36 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v37 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v81 = v37;
                  v82 = 2112;
                  v83 = v15;
                  _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@No condition is present in chr (%@)", buf, 0x16u);

                  v13 = v67;
                }

                objc_autoreleasePoolPop(v34);
                objc_msgSend(v65, "addObject:", v15);
                v12 = v68;
              }

            }
            ++v14;
          }
          while (v12 != v14);
          v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
        }
        while (v12);
      }

      v45 = v65;
      v10 = v61;
      if (objc_msgSend(v65, "count"))
        (*((void (**)(id, _QWORD, void *))v61 + 2))(v61, 0, v65);
      v46 = v63;
      if (objc_msgSend(v63, "count"))
      {
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        objc_msgSend(v63, "allValues");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v71, v79, 16);
        if (v48)
        {
          v49 = v48;
          v50 = *(_QWORD *)v72;
          do
          {
            for (i = 0; i != v49; ++i)
            {
              if (*(_QWORD *)v72 != v50)
                objc_enumerationMutation(v47);
              v52 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * i);
              objc_msgSend(v52, "firstObject");
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "service");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v54, "bulletinBoardNotification");
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v55, "condition");
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome dispatchRequestToEvaluateCondition:forCharacteristics:completion:](v70, "dispatchRequestToEvaluateCondition:forCharacteristics:completion:", v56, v52, v61);

            }
            v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v71, v79, 16);
          }
          while (v49);
        }

        v46 = v63;
        v9 = v64;
        v45 = v65;
      }

      v8 = v62;
    }
    else
    {
      v57 = (void *)MEMORY[0x1D17BA0A0]();
      v58 = self;
      HMFGetOSLogHandle();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v81 = v60;
        v82 = 2112;
        v83 = v8;
        _os_log_impl(&dword_1CD062000, v59, OS_LOG_TYPE_DEBUG, "%{public}@Bulletin notifications are not supported, skipping evaluating bulletin for characteristics: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v57);
      (*((void (**)(id, _QWORD, _QWORD))v10 + 2))(v10, 0, MEMORY[0x1E0C9AA60]);
    }
  }

}

- (void)dispatchRequestToEvaluateCondition:(id)a3 forCharacteristics:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, _QWORD, id);
  void *v11;
  int v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDRemoteDeviceMessageDestination *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  HMDPredicateUtilities *v43;
  HMDRemoteDeviceMessageDestination *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  _QWORD v49[4];
  id v50;
  id v51;
  id v52;
  void (**v53)(id, _QWORD, id);
  id v54;
  id location;
  _QWORD v56[2];
  _QWORD v57[2];
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  id v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, _QWORD, id))a5;
  if (v10 && objc_msgSend(v9, "count"))
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isCurrentDevice");

    if (v12)
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v59 = v16;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Current device is the resident device itself, evaluating locally.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v13);
      if (-[HMDHome evaluatePredicate:](v14, "evaluatePredicate:", v8))
        v10[2](v10, 0, v9);
    }
    else
    {
      -[HMDHome primaryResident](self, "primaryResident");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "device");
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHome primaryResident](self, "primaryResident");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "supportsSharedEventTriggerActivation");

      if ((v19 & 1) != 0)
      {
        v20 = (void *)MEMORY[0x1E0CB3940];
        -[HMDHome logIdentifier](self, "logIdentifier");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "stringWithFormat:", CFSTR("Bulletin-%@"), v21);
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        v43 = -[HMDPredicateUtilities initWithHome:logIdentifier:]([HMDPredicateUtilities alloc], "initWithHome:logIdentifier:", self, v47);
        -[HMDPredicateUtilities rewritePredicateForDaemon:message:](v43, "rewritePredicateForDaemon:message:", v8, 0);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v56[0] = CFSTR("kPredicateEvaluatePredicateDataKey");
        encodeRootObject();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v57[0] = v22;
        v56[1] = CFSTR("serviceUUID");
        objc_msgSend(v9, "firstObject");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "service");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "UUIDString");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v57[1] = v26;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v57, v56, 2);
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        v27 = [HMDRemoteDeviceMessageDestination alloc];
        -[HMDHome uuid](self, "uuid");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v27, "initWithTarget:device:", v28, v48);

        +[HMDRemoteMessage secureMessageWithName:destination:messagePayload:](HMDRemoteMessage, "secureMessageWithName:destination:messagePayload:", CFSTR("kPredicateEvaluatePredicateRequestKey"), v44, v45);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "identifier");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_initWeak(&location, self);
        v49[0] = MEMORY[0x1E0C809B0];
        v49[1] = 3221225472;
        v49[2] = __76__HMDHome_dispatchRequestToEvaluateCondition_forCharacteristics_completion___block_invoke;
        v49[3] = &unk_1E89A5970;
        objc_copyWeak(&v54, &location);
        v31 = v30;
        v50 = v31;
        v51 = v8;
        v52 = v9;
        v53 = v10;
        v32 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v29, "setResponseHandler:", v49));
        v33 = self;
        HMFGetOSLogHandle();
        v34 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v59 = v35;
          v60 = 2114;
          v61 = v31;
          _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Sending message with identifier %{public}@ to evaluate bulletin condition to resident", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v32);
        -[HMDHome homeManager](v33, "homeManager");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "messageDispatcher");
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v37, "sendMessage:completionHandler:", v29, 0);
        objc_destroyWeak(&v54);
        objc_destroyWeak(&location);

      }
      else
      {
        v38 = (void *)MEMORY[0x1D17BA0A0]();
        v39 = self;
        HMFGetOSLogHandle();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome primaryResident](v39, "primaryResident");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v59 = v41;
          v60 = 2112;
          v61 = v42;
          _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Remote access device %@ is not capable of presence status. Directly send the notification.", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v38);
        v10[2](v10, 0, v9);
      }

    }
  }

}

- (void)handleEvaluatePredicateMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void (**v24)(_QWORD, _QWORD, _QWORD);
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  const __CFString *v35;
  _QWORD v36[3];

  v36[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "predicateForKey:", CFSTR("kPredicateEvaluatePredicateDataKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("serviceUUID"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v5 && v6)
  {
    v8 = -[HMDHome evaluatePredicate:](self, "evaluatePredicate:", v5);
    objc_msgSend(v4, "responseHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(v4, "responseHandler");
      v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v35 = CFSTR("kPredicateEvaluateResultKey");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v36[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, &v35, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, void *))v10)[2](v10, 0, v12);

    }
    v29 = v7;
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v7);
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    -[HMDHome accessories](self, "accessories");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v31;
      while (2)
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v31 != v17)
            objc_enumerationMutation(v14);
          v19 = *(id *)(*((_QWORD *)&v30 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v20 = v19;
          else
            v20 = 0;
          v21 = v20;

          objc_msgSend(v21, "serviceWithUUID:", v13);
          v22 = objc_claimAutoreleasedReturnValue();
          if (v22)
          {
            v26 = (void *)v22;
            objc_msgSend(v4, "remoteSourceDevice");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "remoteDestinationString");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "updatePresenceRequestTimeForDeviceWithDestination:", v28);

            goto LABEL_20;
          }

        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        if (v16)
          continue;
        break;
      }
    }
LABEL_20:

    v7 = v29;
  }
  else
  {
    objc_msgSend(v4, "responseHandler");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      objc_msgSend(v4, "responseHandler");
      v24 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v24)[2](v24, v25, 0);

    }
  }

}

- (BOOL)evaluatePredicate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  const __CFString *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome predicateUtility](self, "predicateUtility");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "rewritePredicate:currentCharacteristicInPredicate:characteristicsToRead:homePresence:", v4, 0, 0, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = CFSTR("THIS_OBJECT");
  -[HMDHome predicateUtility](self, "predicateUtility");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "allowEvaluation");
  -[HMDHome predicateUtility](self, "predicateUtility");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v6, "evaluateWithObject:substitutionVariables:", v9, v8);

  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138544130;
    v18 = v14;
    v19 = 2112;
    v20 = v4;
    v21 = 2112;
    v22 = v6;
    v23 = 2112;
    v24 = v15;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Evaluating predicate %@ (rewritten %@) with result %@", (uint8_t *)&v17, 0x2Au);

  }
  objc_autoreleasePoolPop(v11);

  return v10;
}

- (void)btleAccessoryReachabilityProbeTimer:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __47__HMDHome_btleAccessoryReachabilityProbeTimer___block_invoke;
  v6[3] = &unk_1E89C2758;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (void)resetAccessoryHashedRouteIdentifiers
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "resetHashedRoute");
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

- (void)_handleAccessoryReachabilityRegistrationAndEnable:(id)a3
{
  __handleAccessoryReachabilityRegistration(self, a3, 1);
}

- (void)_handleAccessoryReachabilityRegistration:(id)a3
{
  __handleAccessoryReachabilityRegistration(self, a3, 0);
}

- (void)_registerDeviceForReachabilityNotification:(id)a3 accessoryList:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  HMDDeviceRegistrationEntry *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome _deregisterDeviceForReachabilityNotification:](self, "_deregisterDeviceForReachabilityNotification:", v6));
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Registering device %@ for reachability notification", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v12 = -[HMDDeviceRegistrationEntry initWithDevice:accessoryList:]([HMDDeviceRegistrationEntry alloc], "initWithDevice:accessoryList:", v6, v7);
  if (v12)
  {
    -[HMDHome reachabilityRegisteredDevices](v9, "reachabilityRegisteredDevices");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v12);

  }
}

- (void)_deregisterDeviceForReachabilityNotification:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v25 = v8;
    v26 = 2112;
    v27 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@De-registering device %@ for reachability notification", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[HMDHome reachabilityRegisteredDevices](v6, "reachabilityRegisteredDevices", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "copy");

  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v15, "device");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isEqual:", v4);

        if (v17)
        {
          -[HMDHome reachabilityRegisteredDevices](v6, "reachabilityRegisteredDevices");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "removeObject:", v15);

        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v12);
  }

}

- (id)getReachabilityTupleForAccessoryUUID:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHome remoteReachabilityNotificationPendingAccessories](self, "remoteReachabilityNotificationPendingAccessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "accessoryUUID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqual:", v4);

        if ((v11 & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_updateReachabilityChangeToRegisteredDevices:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  int v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome getReachabilityTupleForAccessoryUUID:](self, "getReachabilityTupleForAccessoryUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isReachable") & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    -[HMDHome homeManager](self, "homeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "residentMesh");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "deviceForAccessory:residentOrder:reachableResidents:", v4, 1, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v11 != 0;

  }
  v12 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v13 = v12;
  else
    v13 = 0;
  v14 = v13;

  if (v14)
  {
    objc_msgSend(v7, "setPreviouslySentSuspendedState:", objc_msgSend(v7, "currentSuspendedState"));
    objc_msgSend(v7, "setCurrentSuspendedState:", objc_msgSend(v14, "suspendedState"));
  }
  if (!v7)
  {
    +[HMDAccessoryReachabilityTuple tupleWithAccessoryUUID:reachable:](HMDAccessoryReachabilityTuple, "tupleWithAccessoryUUID:reachable:", v6, v8);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setCurrentSuspendedState:", objc_msgSend(v14, "suspendedState"));
    -[HMDHome remoteReachabilityNotificationPendingAccessories](self, "remoteReachabilityNotificationPendingAccessories");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "addObject:", v22);

    -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v24)
    {
      v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 1, *(double *)&remoteReachabilityNotificationsDeferPeriod);
      -[HMDHome setReachabilityNotificationTimer:](self, "setReachabilityNotificationTimer:", v25);

      -[HMDHome workQueue](self, "workQueue");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "setDelegateQueue:", v26);

      -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setDelegate:", self);

      -[HMDHome reachabilityNotificationTimer](self, "reachabilityNotificationTimer");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "resume");

      v30 = (void *)MEMORY[0x1D17BA0A0]();
      v31 = self;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome reachabilityNotificationTimer](v31, "reachabilityNotificationTimer");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543874;
        v36 = v33;
        v37 = 2048;
        v38 = v34;
        v39 = 2048;
        v40 = remoteReachabilityNotificationsDeferPeriod;
        _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@Started reachability notification defer timer %p for %f sec", (uint8_t *)&v35, 0x20u);

      }
      objc_autoreleasePoolPop(v30);
    }
    goto LABEL_19;
  }
  objc_msgSend(v7, "setCurrentReachability:", v8);
  v15 = objc_msgSend(v7, "previouslySentReachability");
  if (v15 == objc_msgSend(v7, "currentReachability"))
  {
    v16 = objc_msgSend(v7, "previouslySentSuspendedState");
    if (v16 == objc_msgSend(v7, "currentSuspendedState"))
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543874;
        v36 = v20;
        v37 = 2112;
        v38 = v12;
        v39 = 2112;
        v40 = (uint64_t)v21;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ toggled reachability back to %@ ignoring", (uint8_t *)&v35, 0x20u);

      }
      objc_autoreleasePoolPop(v17);
      -[HMDHome remoteReachabilityNotificationPendingAccessories](v18, "remoteReachabilityNotificationPendingAccessories");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "removeObject:", v7);
LABEL_19:

    }
  }

}

- (void)_handleRemoteReachabilityNotificationTimerFired
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  __int128 v51;
  id obj;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  HMDHome *v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[2];
  _QWORD v69[2];
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  void *v75;
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome remoteReachabilityNotificationPendingAccessories](v4, "remoteReachabilityNotificationPendingAccessories");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v71 = v6;
    v72 = 2112;
    v73 = (uint64_t)v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Reachability notification timer fired, pending list: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  -[HMDHome reachabilityRegisteredDevices](v4, "reachabilityRegisteredDevices");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v77, 16);
  if (v54)
  {
    v53 = *(_QWORD *)v65;
    *(_QWORD *)&v8 = 138543874;
    v51 = v8;
    v9 = 0x1E0CB3000uLL;
    v58 = v4;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v65 != v53)
          objc_enumerationMutation(obj);
        v55 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * v10);
        v56 = v10;
        v11 = (void *)MEMORY[0x1E0C99DE8];
        -[HMDHome remoteReachabilityNotificationPendingAccessories](v4, "remoteReachabilityNotificationPendingAccessories", v51);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "arrayWithCapacity:", objc_msgSend(v12, "count"));
        v59 = (void *)objc_claimAutoreleasedReturnValue();

        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        -[HMDHome accessories](v4, "accessories");
        v57 = (id)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v60, v76, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v61;
          do
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v61 != v15)
                objc_enumerationMutation(v57);
              v17 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
              objc_msgSend(v17, "uuid");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "UUIDString");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome getReachabilityTupleForAccessoryUUID:](v4, "getReachabilityTupleForAccessoryUUID:", v19);
              v20 = (void *)objc_claimAutoreleasedReturnValue();

              if (v20)
              {
                v21 = (void *)MEMORY[0x1E0C99E08];
                objc_msgSend(*(id *)(v9 + 2024), "numberWithBool:", objc_msgSend(v20, "currentReachability"));
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v20, "accessoryUUID");
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v21, "dictionaryWithObject:forKey:", v22, v23);
                v24 = (void *)objc_claimAutoreleasedReturnValue();

                v25 = v17;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v26 = v25;
                else
                  v26 = 0;
                v27 = v26;

                objc_msgSend(v27, "identifier");
                v28 = (void *)objc_claimAutoreleasedReturnValue();

                if (v28)
                {
                  objc_msgSend(*(id *)(v9 + 2024), "numberWithUnsignedInteger:", objc_msgSend(v27, "suspendedState"));
                  v29 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v27, "identifier");
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v24, "setObject:forKey:", v29, v30);

                }
                objc_msgSend(v59, "addObject:", v24);

                v4 = v58;
              }

            }
            v14 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v60, v76, 16);
          }
          while (v14);
        }

        if (objc_msgSend(v59, "count"))
        {
          v31 = v9;
          v32 = (void *)MEMORY[0x1D17BA0A0]();
          v33 = v4;
          HMFGetOSLogHandle();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = objc_msgSend(v59, "count");
            objc_msgSend(v55, "device");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "remoteDestinationString");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v51;
            v71 = v35;
            v72 = 2048;
            v73 = v36;
            v74 = 2112;
            v75 = v38;
            _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Sending current reachability for %tu accessories to destination:%@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v32);
          v68[0] = CFSTR("kAccessoriesListKey");
          v39 = (void *)objc_msgSend(v59, "copy");
          v68[1] = CFSTR("kHomeUUID");
          v69[0] = v39;
          -[HMDHome uuid](v33, "uuid");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "UUIDString");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v69[1] = v41;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v69, v68, 2);
          v42 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:identifier:messagePayload:", CFSTR("kRemoteReachabilityChangedNotificationKey"), 0, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome homeManager](v33, "homeManager");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "messageDispatcher");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](v33, "uuid");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "device");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "remoteDestinationString");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome workQueue](v33, "workQueue");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v43, v46, 0, v48, v49, 0);

          v4 = v58;
          v9 = v31;
        }

        v10 = v56 + 1;
      }
      while (v56 + 1 != v54);
      v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v77, 16);
    }
    while (v54);
  }

  -[HMDHome remoteReachabilityNotificationPendingAccessories](v4, "remoteReachabilityNotificationPendingAccessories");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v50, "removeAllObjects");

  -[HMDHome setReachabilityNotificationTimer:](v4, "setReachabilityNotificationTimer:", 0);
}

- (void)_handleAccessoryReachabilityChange:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void (**v42)(_QWORD, _QWORD, _QWORD);
  void *v43;
  void *v44;
  void *v45;
  BOOL v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id obj;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  void *v72;
  void *context;
  uint64_t v74;
  HMDHome *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  const __CFString *v85;
  void *v86;
  uint8_t buf[4];
  void *v88;
  __int16 v89;
  void *v90;
  __int16 v91;
  void *v92;
  __int16 v93;
  void *v94;
  _BYTE v95[128];
  _BYTE v96[128];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v5, "isEqualToString:", v7);

  v75 = self;
  v63 = v5;
  if ((v8 & 1) != 0)
  {
    v62 = 0;
  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v10, "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "UUIDString");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v88 = v12;
      v89 = 2112;
      v90 = v5;
      v91 = 2112;
      v92 = v14;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Home does not match, received: %@, current: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v64 = v4;
  objc_msgSend(v4, "messagePayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "hmf_arrayForKey:", CFSTR("kAccessoriesListKey"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  obj = v16;
  v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v96, 16);
  if (v67)
  {
    v66 = *(_QWORD *)v82;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v82 != v66)
          objc_enumerationMutation(obj);
        v68 = v17;
        v18 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * v17);
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        -[HMDHome accessories](v75, "accessories");
        v71 = (id)objc_claimAutoreleasedReturnValue();
        v76 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v77, v95, 16);
        if (v76)
        {
          v74 = *(_QWORD *)v78;
          v72 = v18;
          do
          {
            for (i = 0; i != v76; ++i)
            {
              if (*(_QWORD *)v78 != v74)
                objc_enumerationMutation(v71);
              v20 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * i);
              objc_msgSend(v20, "uuid");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "UUIDString");
              v22 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v18, "objectForKeyedSubscript:", v22);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              if (v23)
              {
                v24 = (void *)MEMORY[0x1D17BA0A0]();
                v25 = v75;
                HMFGetOSLogHandle();
                v26 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v27 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v88 = v27;
                  v89 = 2112;
                  v90 = v22;
                  v91 = 2112;
                  v92 = v23;
                  _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Setting remote reachability for accessory: %@ to: %@", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v24);
                objc_msgSend(v20, "setRemotelyReachable:", objc_msgSend(v23, "BOOLValue"));
              }
              v28 = v20;
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v29 = v28;
              else
                v29 = 0;
              v30 = v29;

              objc_msgSend(v30, "identifier");
              v31 = (void *)objc_claimAutoreleasedReturnValue();

              if (v31)
              {
                objc_msgSend(v30, "identifier");
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v18, "objectForKeyedSubscript:", v32);
                v33 = (void *)objc_claimAutoreleasedReturnValue();

                if (v33)
                {
                  v34 = objc_msgSend(v33, "unsignedIntegerValue");
                  context = (void *)MEMORY[0x1D17BA0A0]();
                  v35 = v75;
                  HMFGetOSLogHandle();
                  v36 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                  {
                    HMFGetLogIdentifier();
                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v28, "identifier");
                    v38 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v30, "suspendedState");
                    HAPAccessorySuspendedStateDescription();
                    v69 = v22;
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    HAPAccessorySuspendedStateDescription();
                    v70 = v34;
                    v40 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138544130;
                    v88 = v37;
                    v89 = 2112;
                    v90 = v38;
                    v91 = 2112;
                    v92 = v39;
                    v93 = 2112;
                    v94 = v40;
                    _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_DEBUG, "%{public}@Handle Reachability change. Setting suspended state of accessory: %@ from '%@' to '%@'", buf, 0x2Au);

                    v34 = v70;
                    v22 = v69;

                  }
                  objc_autoreleasePoolPop(context);
                  objc_msgSend(v30, "setSuspendedState:shouldNotify:", v34, 0);
                }

                v18 = v72;
              }

            }
            v76 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v77, v95, 16);
          }
          while (v76);
        }

        v17 = v68 + 1;
      }
      while (v68 + 1 != v67);
      v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v96, 16);
    }
    while (v67);
  }

  objc_msgSend(v64, "responseHandler");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  if (v41)
  {
    objc_msgSend(v64, "responseHandler");
    v42 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v42)[2](v42, v62, 0);

  }
  objc_msgSend(v64, "remoteSourceDevice");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome primaryResident](v75, "primaryResident");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "device");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v43, "isEqual:", v45))
  {
    v46 = -[HMDHome currentRemoteReachabilityRegistration](v75, "currentRemoteReachabilityRegistration");

    if (v46)
      goto LABEL_42;
  }
  else
  {

  }
  v47 = (void *)MEMORY[0x1D17BA0A0]();
  v48 = v75;
  HMFGetOSLogHandle();
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v88 = v50;
    v89 = 2112;
    v90 = v43;
    _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_INFO, "%{public}@De-registering stale remote reachability for accessories with device = %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v47);
  v51 = objc_alloc(MEMORY[0x1E0D285D0]);
  objc_msgSend(MEMORY[0x1E0D285D8], "allMessageDestinations");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = CFSTR("kHomeUUID");
  -[HMDHome uuid](v48, "uuid");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "UUIDString");
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = v54;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v86, &v85, 1);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = (void *)objc_msgSend(v51, "initWithName:destination:payload:", CFSTR("kDisableAccessoryReachabilityNotificationRequestKey"), v52, v55);

  -[HMDHome homeManager](v48, "homeManager");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "messageDispatcher");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v48, "uuid");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "remoteDestinationString");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v48, "workQueue");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v56, v59, 0, v60, v61, 0);

LABEL_42:
}

- (void)_reachabilityChangedForAccessory:(id)a3 reachable:(BOOL)a4
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  BOOL v14;
  char v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  HMDHome *v49;
  NSObject *v50;
  void *v51;
  void *v52;
  char v53;
  id v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t buf[4];
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  int64_t v64;
  __int16 v65;
  _BOOL4 v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int64_t v70;
  uint64_t v71;

  v56 = a4;
  v71 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v6);

  v7 = -[HMDHome reachableAccessoriesCount](self, "reachableAccessoriesCount");
  v8 = -[HMDHome previousReachableAccessoriesCount](self, "previousReachableAccessoriesCount");
  v9 = -[HMDHome reachableAppleMediaAccessoriesCount](self, "reachableAppleMediaAccessoriesCount");
  v10 = -[HMDHome previousReachableAppleMediaAccessoriesCount](self, "previousReachableAppleMediaAccessoriesCount");
  -[HMDHome setPreviousReachableAccessoriesCount:](self, "setPreviousReachableAccessoriesCount:", v7);
  v11 = -[HMDHome setPreviousReachableAppleMediaAccessoriesCount:](self, "setPreviousReachableAppleMediaAccessoriesCount:", v9);
  v12 = v9 + v7 < 1;
  v57 = v8;
  v55 = v10 + v8;
  if ((v10 + v8 < 0) ^ __OFADD__(v10, v8) | (v10 + v8 == 0))
    v13 = 0;
  else
    v13 = 1;
  if ((v10 + v8 < 0) ^ __OFADD__(v10, v8) | (v10 + v8 == 0))
    v14 = v9 + v7 < 1;
  else
    v14 = 1;
  v15 = v12 ^ v13;
  if (((v12 ^ v13) & 1) == 0)
  {
    v53 = v12 ^ v13;
    v54 = v5;
    v16 = (void *)MEMORY[0x1D17BA0A0](v11);
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544642;
      v60 = (uint64_t)v19;
      v61 = 2048;
      v62 = v7;
      v63 = 2048;
      v64 = v9;
      v65 = 1024;
      v66 = v56;
      v67 = 2048;
      v68 = v57;
      v69 = 2048;
      v70 = v10;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Total reachable accessories %ld, apple media accessories: %ld, reachable = %d,                      last known reachable = %ld, last known apple media reachable = %ld", buf, 0x3Au);

    }
    objc_autoreleasePoolPop(v16);
    v5 = v54;
    v15 = v53;
  }
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "supportsRemoteAccess");

  if (v21)
  {
    v58 = 0;
    -[HMDHome getReachableIPAccessories:btleAccessories:mediaAccessories:](self, "getReachableIPAccessories:btleAccessories:mediaAccessories:", &v58, 0, 0);
    if (v14)
    {
      if (v9 + v7 > 0 || v55 < 1)
        goto LABEL_18;
      -[HMDHome homeLocationHandler](self, "homeLocationHandler");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "accessoriesBecomeUnreachable");
    }
    else
    {
      -[HMDHome homeLocationHandler](self, "homeLocationHandler");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "accessoriesBecomeReachable");
    }

LABEL_18:
    v23 = (void *)MEMORY[0x1D17BA0A0]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = (void *)v26;
      v28 = CFSTR("don't ");
      if (v7 > 0)
        v28 = &stru_1E89C3E38;
      *(_DWORD *)buf = 138543618;
      v60 = v26;
      v61 = 2112;
      v62 = (uint64_t)v28;
      _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Notifying home manager that we %@have locally reachable accessories", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    -[HMDHome homeManager](v24, "homeManager");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v24, "uuid");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "accessoriesAreLocallyReachableOnTransientDevice:forHome:", v7 > 0, v30);

    if (objc_msgSend(v5, "accessoryReprovisionState") && v56)
    {
      v31 = v15;
      v32 = (void *)MEMORY[0x1D17BA0A0]();
      v33 = v24;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "name");
        v36 = v5;
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v60 = (uint64_t)v35;
        v61 = 2112;
        v62 = (uint64_t)v37;
        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ reprovision state is updated to Not Required", buf, 0x16u);

        v5 = v36;
      }

      objc_autoreleasePoolPop(v32);
      objc_msgSend(v5, "setAccessoryReprovisionState:", 0);
      objc_msgSend(v5, "uuid");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("ReprovisionStateChange"), v38, 0);

      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "UUIDString");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "setObject:forKeyedSubscript:", v41, CFSTR("kAccessoryUUID"));

      objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_1E8B327D8, *MEMORY[0x1E0CBAA80]);
      v42 = (void *)MEMORY[0x1E0D285F8];
      v43 = *MEMORY[0x1E0CBAA70];
      -[HMDHome messageDestination](v33, "messageDestination");
      v44 = v5;
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "messageWithName:destination:payload:", v43, v45, v39);
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      v5 = v44;
      -[HMDHome msgDispatcher](v33, "msgDispatcher");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "sendMessage:completionHandler:", v46, 0);

      v15 = v31;
    }

  }
  if (v7 >= 1 && v57 <= 0)
  {
    v48 = (void *)MEMORY[0x1D17BA0A0]();
    v49 = self;
    HMFGetOSLogHandle();
    v50 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v60 = (uint64_t)v51;
      _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_INFO, "%{public}@Notifying that we see at least one reachable accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v48);
    -[HMDHome notificationCenter](v49, "notificationCenter");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "postNotificationName:object:", CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), v49);

  }
  if ((v15 & 1) == 0)
    -[HMFTimer resume](self->_homeLocationTimer, "resume");

}

- (int64_t)reachableAccessoriesCount
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHome accessories](self, "accessories");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(obj);
        v7 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        v10 = v7;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v9 && objc_msgSend(v9, "isReachable"))
        {
          ++v4;
        }
        else if (v12 && objc_msgSend(v12, "isCurrentAccessory"))
        {
          v4 += objc_msgSend(v12, "isReachable");
        }

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (int64_t)reachableAccessoriesCountExcludingMatter
{
  HMDHome *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  int v22;
  const __CFString *v23;
  __int128 v25;
  void *v26;
  HMDHome *v27;
  int64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  const __CFString *v38;
  _BYTE v39[128];
  uint64_t v40;

  v2 = self;
  v40 = *MEMORY[0x1E0C80C00];
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  -[HMDHome accessories](self, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
  if (v4)
  {
    v6 = v4;
    v28 = 0;
    v7 = *(_QWORD *)v30;
    *(_QWORD *)&v5 = 138543618;
    v25 = v5;
    v26 = v3;
    v27 = v2;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v30 != v7)
          objc_enumerationMutation(v3);
        v9 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11)
        {
          if (objc_msgSend(v11, "isReachable") && (objc_msgSend(v11, "supportsCHIP") & 1) == 0)
          {
            v12 = (void *)MEMORY[0x1D17BA0A0]();
            v13 = v2;
            HMFGetOSLogHandle();
            v14 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "name");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v25;
              v34 = v15;
              v35 = 2112;
              v36 = v16;
              _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Accessory: %@ is reachable", buf, 0x16u);

              v2 = v27;
              v3 = v26;
            }

            objc_autoreleasePoolPop(v12);
            ++v28;
          }
          if (objc_msgSend(v11, "supportsCHIP", v25))
          {
            v17 = (void *)MEMORY[0x1D17BA0A0]();
            v18 = v2;
            HMFGetOSLogHandle();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "name");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = objc_msgSend(v11, "isReachable");
              *(_DWORD *)buf = 138543874;
              v23 = CFSTR("NO");
              if (v22)
                v23 = CFSTR("YES");
              v34 = v20;
              v35 = 2112;
              v36 = v21;
              v37 = 2112;
              v38 = v23;
              _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring Matter Accessory: %@ isReachable: %@", buf, 0x20u);

              v3 = v26;
              v2 = v27;
            }

            objc_autoreleasePoolPop(v17);
          }
        }

      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    }
    while (v6);
  }
  else
  {
    v28 = 0;
  }

  return v28;
}

- (int64_t)reachableAppleMediaAccessoriesCount
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v2);
        v8 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        if (v10)
          v5 += objc_msgSend(v8, "isReachable");

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)getReachableIPAccessories:(unint64_t *)a3 btleAccessories:(unint64_t *)a4 mediaAccessories:(unint64_t *)a5
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  unsigned int v20;
  id obj;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    -[HMDHome accessories](self, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v26 != v10)
            objc_enumerationMutation(obj);
          v12 = *(id *)(*((_QWORD *)&v25 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v13 = v12;
          else
            v13 = 0;
          v14 = v13;

          if (v14)
          {
            objc_msgSend(v14, "matchingHAPAccessoryWithLinkType:", 1);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v9 += objc_msgSend(v15, "isReachable");
            objc_msgSend(v14, "matchingHAPAccessoryWithLinkType:", 2);
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            v8 += objc_msgSend(v16, "isReachable");
          }
          v17 = v12;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v18 = v17;
          else
            v18 = 0;
          v19 = v18;

          v20 = objc_msgSend(v19, "isReachable");
          v7 += v20;

        }
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      }
      while (v6);
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }

    if (a3)
      *a3 = v9;
    if (a4)
      *a4 = v8;
    if (a5)
      *a5 = v7;
  }
}

- (id)_setupCodeProviderForMessage:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD aBlock[4];
  id v10;
  id v11;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke;
  aBlock[3] = &unk_1E89A4AA8;
  objc_copyWeak(&v11, &location);
  v5 = v4;
  v10 = v5;
  v6 = _Block_copy(aBlock);
  v7 = (void *)objc_msgSend(v6, "copy");

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

  return v7;
}

- (void)_handleCancelPairingAccessory:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v4 = (void *)MEMORY[0x1E0CB35C8];
  v5 = a3;
  objc_msgSend(v4, "hmInternalErrorWithCode:", 1090);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMatterAccessoryPairingEndContext hmContextWithCancelledError:](HMDMatterAccessoryPairingEndContext, "hmContextWithCancelledError:", v6);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
    -[HMDHome _processPairingRequestForMessage:cancelPairing:context:](self, "_processPairingRequestForMessage:cancelPairing:context:", v5, 1, v8);
  else
    -[HMDHome _processLegacyPairingRequestForMessage:cancelPairing:context:](self, "_processLegacyPairingRequestForMessage:cancelPairing:context:", v5, 1, v8);

}

- (void)_handleContinuePairingAccessory:(id)a3
{
  -[HMDHome _processLegacyPairingRequestForMessage:cancelPairing:context:](self, "_processLegacyPairingRequestForMessage:cancelPairing:context:", a3, 0, 0);
}

- (void)_cancelPairingWithAccessoryDescription:(id)a3 context:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "accessoryUUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v12;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Canceling pairing and removing all state for accessory with description %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v9);
  os_unfair_recursive_lock_lock_with_options();
  -[NSMapTable removeObjectForKey:](v10->_addPendingAccessories, "removeObjectForKey:", v6);
  if (v8)
  {
    -[NSMutableDictionary removeObjectForKey:](v10->_addPendingAccessorySetupCodes, "removeObjectForKey:", v8);
    -[NSMutableDictionary removeObjectForKey:](v10->_addPendingAccessoryOnboardingSetupPayloadStrings, "removeObjectForKey:", v8);
    -[NSMutableDictionary removeObjectForKey:](v10->_addPendingAccessorySetupCodeHandlers, "removeObjectForKey:", v8);
  }
  os_unfair_recursive_lock_unlock();
  -[HMDHome accessoryBrowser](v10, "accessoryBrowser");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "cancelPairingWithAccessoryDescription:error:context:", v6, v14, v7);

}

- (void)_processPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v6 = a4;
  v23 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  objc_msgSend(v8, "dataForKey:", CFSTR("kAccessoryDescriptionDataKey"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  -[HMDHome _setupDescriptionFromData:error:](self, "_setupDescriptionFromData:error:", v10, &v18);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v18;
  if (v11)
  {
    if (v6)
    {
      -[HMDHome _cancelPairingWithAccessoryDescription:context:](self, "_cancelPairingWithAccessoryDescription:context:", v11, v9);
      objc_msgSend(v8, "respondWithPayload:", 0);
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v16;
      v21 = 2112;
      v22 = v12;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive setup accessory description from accessory description data: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "respondWithError:", v17);

  }
}

- (void)_cancelPairingWithAccessoryUUID:(id)a3 context:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *context;
  void (**v37)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v38;
  id v39;
  _QWORD v40[4];
  id v41;
  _QWORD v42[4];
  id v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v39 = a4;
  v9 = a5;
  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "unassociatedAccessories");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_firstObjectWithUUID:", v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = v12;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v14 = v13;
  else
    v14 = 0;
  v15 = v14;

  if (v15)
  {
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke;
    v42[3] = &unk_1E89C0870;
    v43 = v9;
    objc_msgSend(v15, "cancelConfigurationWithCompletionHandler:", v42);
    v16 = v43;
  }
  else
  {
    -[HMDHome accessoryBrowser](self, "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "unpairedAccessoryWithUUID:", v8);
    v38 = objc_claimAutoreleasedReturnValue();

    -[HMDHome addPendingAccessorySetupCodeHandlers](self, "addPendingAccessorySetupCodeHandlers");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "objectForKeyedSubscript:", v8);
    v37 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v45 = v22;
      v46 = 2112;
      v47 = v23;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Canceling pairing and removing all state for accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    os_unfair_recursive_lock_lock_with_options();
    -[NSMapTable hm_allKeys](v20->_addPendingAccessories, "hm_allKeys");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke_1070;
    v40[3] = &unk_1E89A4A80;
    v25 = v8;
    v41 = v25;
    objc_msgSend(v24, "na_firstObjectPassingTest:", v40);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    -[NSMutableDictionary removeObjectForKey:](v20->_addPendingAccessorySetupCodeHandlers, "removeObjectForKey:", v25);
    if (v26)
      -[NSMapTable removeObjectForKey:](v20->_addPendingAccessories, "removeObjectForKey:", v26);

    v27 = os_unfair_recursive_lock_unlock();
    if (v38)
    {
      -[HMDHome accessoryBrowser](v20, "accessoryBrowser");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "cancelPairingWithAccessory:error:context:", v38, v29, v39);

    }
    if (v37)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, _QWORD, void *))v37)[2](v37, 0, 0, v30);

      if (v9)
        (*((void (**)(id, _QWORD, _QWORD))v9 + 2))(v9, 0, 0);
    }
    else
    {
      context = (void *)MEMORY[0x1D17BA0A0](v27);
      v31 = v20;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "UUIDString", context);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v45 = v33;
        v46 = 2112;
        v47 = v34;
        _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@Unable to find setup available completion handler for accessory %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(context);
      if (v9)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, void *, _QWORD))v9 + 2))(v9, v35, 0);

      }
    }

    v16 = (void *)v38;
  }

}

- (void)_processLegacyPairingRequestForMessage:(id)a3 cancelPairing:(BOOL)a4 context:(id)a5
{
  _BOOL4 v6;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char v24;
  id v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  _BOOL4 v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void (**v37)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t v55[128];
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  void *v59;
  uint64_t v60;

  v6 = a4;
  v60 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v50 = a5;
  objc_msgSend(v8, "uuidForKey:", CFSTR("kAccessoryUUID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    if (v6)
    {
      objc_msgSend(v8, "responseHandler");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _cancelPairingWithAccessoryUUID:context:completionHandler:](self, "_cancelPairingWithAccessoryUUID:context:completionHandler:", v9, v50, v10);

    }
    else
    {
      objc_msgSend(v8, "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "stringForKey:", CFSTR("kAccessoryOnboardingSetupPayloadStringKey"));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      -[HMDHome addPendingAccessories](self, "addPendingAccessories");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "hm_allKeys");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
      if (v19)
      {
        v20 = *(_QWORD *)v52;
LABEL_9:
        v21 = 0;
        while (1)
        {
          if (*(_QWORD *)v52 != v20)
            objc_enumerationMutation(v18);
          v22 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * v21);
          objc_msgSend(v22, "accessoryUUID");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "isEqual:", v9);

          if ((v24 & 1) != 0)
            break;
          if (v19 == ++v21)
          {
            v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
            if (v19)
              goto LABEL_9;
            goto LABEL_15;
          }
        }
        v25 = v22;

        if (!v25)
          goto LABEL_24;
        v26 = (void *)MEMORY[0x1D17BA0A0]();
        v27 = self;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
        if (v49)
        {
          if (v29)
          {
            HMFGetLogIdentifier();
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v57 = v30;
            v58 = 2112;
            v59 = v9;
            _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Storing the setupCode for accessory %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v26);
          -[HMDHome addPendingAccessorySetupCodes](v27, "addPendingAccessorySetupCodes");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "setObject:forKey:", v49, v9);

          -[HMDHome addPendingAccessoryOnboardingSetupPayloadStrings](v27, "addPendingAccessoryOnboardingSetupPayloadStrings");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "setObject:forKeyedSubscript:", v48, v9);

          -[HMDHome accessoryBrowser](v27, "accessoryBrowser");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "unpairedAccessoryWithUUID:", v9);
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          if (v34)
          {
            -[HMDHome accessoryBrowser](v27, "accessoryBrowser");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "handleSetupCodeAvailable:", v34);

          }
          -[HMDHome addPendingAccessorySetupCodeHandlers](v27, "addPendingAccessorySetupCodeHandlers");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "objectForKeyedSubscript:", v9);
          v37 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

          if (v37)
          {
            os_unfair_recursive_lock_lock_with_options();
            -[NSMutableDictionary removeObjectForKey:](v27->_addPendingAccessorySetupCodeHandlers, "removeObjectForKey:", v9);
            os_unfair_recursive_lock_unlock();
            ((void (**)(_QWORD, void *, void *, _QWORD))v37)[2](v37, v49, v48, 0);
          }
          else
          {
            v44 = (void *)MEMORY[0x1D17BA0A0]();
            v45 = v27;
            HMFGetOSLogHandle();
            v46 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v57 = v47;
              v58 = 2112;
              v59 = v9;
              _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_INFO, "%{public}@No handler to provide the setup code to for accessory: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v44);
          }
          objc_msgSend(v8, "respondWithSuccess");

        }
        else
        {
          if (v29)
          {
            HMFGetLogIdentifier();
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v57 = v42;
            v58 = 2112;
            v59 = v9;
            _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@No setupCode specified to continue pairing with accessory %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v26);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "respondWithError:", v43);

        }
      }
      else
      {
LABEL_15:

LABEL_24:
        v38 = (void *)MEMORY[0x1D17BA0A0]();
        v39 = self;
        HMFGetOSLogHandle();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v57 = v41;
          v58 = 2112;
          v59 = v9;
          _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Accessory with UUID %@ not being added to the home", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v38);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 79);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "respondWithError:", v25);
      }

    }
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "messagePayload");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v14;
      v58 = 2112;
      v59 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@No accessory UUID found in payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "respondWithError:", v16);

  }
}

- (BOOL)hasNeverAddedAnyHAPAccessory
{
  void *v3;
  BOOL v4;
  void *v5;

  -[HMDHome firstHAPAccessoryAddedDate](self, "firstHAPAccessoryAddedDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 0;
  }
  else
  {
    -[HMDHome hapAccessories](self, "hapAccessories");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "count") == 0;

  }
  return v4;
}

- (HMDBackgroundTaskManager)backgroundTaskManager
{
  return +[HMDBackgroundTaskManager sharedManager](HMDBackgroundTaskManager, "sharedManager");
}

- (void)_processAccessoriesToAddForUnpairedAccessory:(id)a3 certificationStatus:(int64_t)a4 accessoryServer:(id)a5 networkCredential:(id)a6 pairingEvent:(id)a7 message:(id)a8 completionHandler:(id)a9
{
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  int v25;
  void *v26;
  NSObject *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  HMDHome *v68;
  NSObject *v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  HMDHome *v81;
  NSObject *v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  HMDHome *v87;
  id v88;
  void *v89;
  id v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  HMDHome *v97;
  NSObject *v98;
  id v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  HMDHome *v108;
  NSObject *v109;
  id v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  dispatch_group_t v119;
  uint64_t v120;
  uint64_t i;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  id v126;
  void *v127;
  void *v128;
  id v129;
  unsigned __int8 isKindOfClass;
  void *v131;
  HMDHome *v132;
  NSObject *v133;
  void *v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t j;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  HMDHome *v143;
  NSObject *v144;
  void *v145;
  void *v146;
  void *v147;
  id v148;
  NSObject *v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  void *v157;
  void *obj;
  id v159;
  id v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  id v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  id v171;
  id v172;
  id v173;
  id v174;
  void *v175;
  void *v176;
  id v177;
  void *v178;
  HMDHome *v179;
  id v180;
  _QWORD v181[4];
  NSObject *v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  id v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  id v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  id v210;
  _BYTE v211[128];
  _BYTE v212[128];
  void *v213;
  uint8_t v214[128];
  uint8_t buf[4];
  id v216;
  __int16 v217;
  uint64_t v218;
  __int16 v219;
  id v220;
  __int16 v221;
  void *v222;
  _BYTE v223[128];
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v172 = a5;
  v173 = a6;
  v161 = a7;
  v164 = a8;
  v155 = a9;
  v16 = objc_alloc(MEMORY[0x1E0D28540]);
  v17 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@, %s:%ld"), v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 16242);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v210 = (id)objc_msgSend(v16, "initWithName:", v19);

  objc_msgSend(v172, "primaryAccessory");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v161, "updateEventPropertiesWithHAPAccessory:", v20);

  v171 = v15;
  if (self)
  {
    -[HMDHome currentAccessory](self, "currentAccessory");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v22 = v21;
    else
      v22 = 0;
    v23 = v22;

    v170 = 0;
    if (v171 && v23)
    {
      objc_msgSend(v23, "sensorAccessoryUUID");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "hmf_isEqualToUUID:", v171);

      if (v25)
      {
        objc_msgSend(v23, "uuid");
        v170 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v170 = 0;
      }
    }

  }
  else
  {
    v170 = 0;
  }

  v26 = (void *)MEMORY[0x1D17BA0A0]();
  v179 = self;
  HMFGetOSLogHandle();
  v27 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v28 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v172, "accessories");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v29, "count");
    objc_msgSend(v172, "identifier");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v216 = v28;
    v217 = 2048;
    v218 = v30;
    v219 = 2112;
    v220 = v31;
    _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Creating %tu new accessory objects for a newly paired accessory server: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v26);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend(v172, "accessories");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "arrayWithCapacity:", objc_msgSend(v33, "count"));
  v165 = (id)objc_claimAutoreleasedReturnValue();

  v34 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend(v172, "accessories");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "arrayWithCapacity:", objc_msgSend(v35, "count"));
  v177 = (id)objc_claimAutoreleasedReturnValue();

  v208 = 0u;
  v209 = 0u;
  v206 = 0u;
  v207 = 0u;
  objc_msgSend(v172, "accessories");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v206, v223, 16);
  if (v37)
  {
    v178 = 0;
    v167 = *(_QWORD *)v207;
    obj = v36;
    do
    {
      v38 = 0;
      v162 = v37;
      do
      {
        if (*(_QWORD *)v207 != v167)
          objc_enumerationMutation(obj);
        v39 = *(void **)(*((_QWORD *)&v206 + 1) + 8 * v38);
        objc_msgSend(v39, "uniqueIdentifier");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v172, "primaryAccessory");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "uniqueIdentifier");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = objc_msgSend(v40, "isEqual:", v42);

        if (v43)
        {
          if (v178)
          {
            v44 = (void *)MEMORY[0x1D17BA0A0]();
            v45 = v179;
            HMFGetOSLogHandle();
            v46 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v47 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v178, "uuid");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v172, "primaryAccessory");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v216 = v47;
              v217 = 2112;
              v218 = (uint64_t)v48;
              v219 = 2112;
              v220 = v49;
              _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@#### Multiple primary accessories: %@  new %@", buf, 0x20u);

              v37 = v162;
            }

            objc_autoreleasePoolPop(v44);
          }
          v50 = v171;
          if (!v171)
          {
            objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
            v159 = (id)objc_claimAutoreleasedReturnValue();
            v50 = v159;
          }
          -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:](v179, "getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:", v39, 0, v50, v170, 1);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v171)

          v52 = v51;
          v53 = v39;
          objc_msgSend(v53, "manufacturer");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setInitialManufacturer:", v54);

          objc_msgSend(v53, "model");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setInitialModel:", v55);

          objc_msgSend(v53, "category");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setInitialCategoryIdentifier:", v56);

          serviceTypeUUIDsForAccessory(v53);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setInitialServiceTypeUUIDs:", v57);

          objc_msgSend(v53, "server");
          v58 = (void *)objc_claimAutoreleasedReturnValue();

          +[HMDHome updateCHIPPropertiesOnAccessoryModel:forAddedHAPAccessoryServer:](HMDHome, "updateCHIPPropertiesOnAccessoryModel:forAddedHAPAccessoryServer:", v52, v58);
          v59 = v172;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v60 = v59;
          else
            v60 = 0;
          v174 = v60;

          objc_msgSend(v173, "clientIdentifier");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setNetworkClientIdentifier:", v61);

          objc_msgSend(v52, "setNetworkClientLAN:", &unk_1E8B32808);
          objc_msgSend(v173, "networkRouterUUID");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v62, "UUIDString");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setNetworkRouterUUID:", v63);

          objc_msgSend(v173, "wiFiPSK");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setWiFiUniquePreSharedKey:", v64);

          objc_msgSend(v173, "wiFiPSK");
          v65 = (void *)objc_claimAutoreleasedReturnValue();

          if (v65)
          {
            v66 = 3;
          }
          else if (objc_msgSend(v174, "isWacComplete"))
          {
            v66 = 2;
          }
          else
          {
            v66 = 0;
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v66);
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setWiFiCredentialType:", v72);

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "setCertificationStatus:", v73);

          if (v170)
          {
            objc_msgSend(v170, "UUIDString");
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "setHostAccessoryUUID:", v74);

          }
          -[HMDHome uuidToHAPAccessoryConfigTable](v179, "uuidToHAPAccessoryConfigTable");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "uuid");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "setObject:forKey:", v53, v76);

          v77 = v52;
          -[HMDHome homeManager](v179, "homeManager");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v79 = v78;
          if (v171)
          {
            v80 = (void *)MEMORY[0x1D17BA0A0]();
            v81 = v179;
            HMFGetOSLogHandle();
            v82 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v83 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "uniqueIdentifier");
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v174, "isWacComplete");
              HMFBooleanToString();
              v85 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v77, "wiFiCredentialType");
              v86 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v216 = v83;
              v217 = 2112;
              v218 = (uint64_t)v84;
              v219 = 2112;
              v220 = v85;
              v221 = 2112;
              v222 = v86;
              _os_log_impl(&dword_1CD062000, v82, OS_LOG_TYPE_INFO, "%{public}@Creating primary accessory for unpaired accessory with identifier %@ isWacComplete: %@ wiFiCredentialType: %@", buf, 0x2Au);

              v37 = v162;
            }
          }
          else
          {
            v80 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v78, "processAnyPendingRequestsForRemoteAccess"));
            v87 = v179;
            HMFGetOSLogHandle();
            v82 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v88 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "uniqueIdentifier");
              v89 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v174, "isWacComplete");
              HMFBooleanToString();
              v90 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v77, "wiFiCredentialType");
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v216 = v88;
              v217 = 2112;
              v218 = (uint64_t)v89;
              v219 = 2112;
              v220 = v90;
              v221 = 2112;
              v222 = v91;
              _os_log_impl(&dword_1CD062000, v82, OS_LOG_TYPE_INFO, "%{public}@Creating primary accessory with identifier %@ isWacComplete: %@ wiFiCredentialType: %@", buf, 0x2Au);

              v37 = v162;
            }
          }

          objc_autoreleasePoolPop(v80);
          v205 = v177;
          -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:](v179, "getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:", 0, v53, v77, &v205, 0, 0);
          v92 = v205;

          -[HMDHome _processProductDataForNewlyAddedAccessory:transaction:](v179, "_processProductDataForNewlyAddedAccessory:transaction:", v53, v77);
          if (-[HMDHome hasNeverAddedAnyHAPAccessory](v179, "hasNeverAddedAnyHAPAccessory"))
          {
            objc_msgSend(v161, "setFirstHAPAccessoryInHome:", 1);
            -[HMDHome updateHomeFirstHAPAccessoryAddedDateToNow](v179, "updateHomeFirstHAPAccessoryAddedDateToNow");
            objc_msgSend(v161, "setFirstHAPAccessoryInAnyHome:", 1);
            if (objc_msgSend(v79, "hasHAPAccessoryInAnyHome"))
              objc_msgSend(v161, "setFirstHAPAccessoryInAnyHome:", 0);
          }

          v177 = v92;
          v178 = v77;
        }
        else
        {
          v67 = (void *)MEMORY[0x1D17BA0A0]();
          v68 = v179;
          HMFGetOSLogHandle();
          v69 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v70 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "uniqueIdentifier");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v216 = v70;
            v217 = 2112;
            v218 = (uint64_t)v71;
            _os_log_impl(&dword_1CD062000, v69, OS_LOG_TYPE_INFO, "%{public}@Non-primary accessory with identifier %@", buf, 0x16u);

            v37 = v162;
          }

          objc_autoreleasePoolPop(v67);
          objc_msgSend(v157, "addObject:", v39);
        }
        ++v38;
      }
      while (v37 != v38);
      v36 = obj;
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v206, v223, 16);
    }
    while (v37);
  }
  else
  {
    v178 = 0;
  }

  v203 = 0u;
  v204 = 0u;
  v201 = 0u;
  v202 = 0u;
  v160 = v157;
  v93 = objc_msgSend(v160, "countByEnumeratingWithState:objects:count:", &v201, v214, 16);
  if (v93)
  {
    v163 = *(_QWORD *)v202;
    do
    {
      v168 = v93;
      v94 = 0;
      v175 = v177;
      do
      {
        if (*(_QWORD *)v202 != v163)
          objc_enumerationMutation(v160);
        v95 = *(void **)(*((_QWORD *)&v201 + 1) + 8 * v94);
        v96 = (void *)MEMORY[0x1D17BA0A0]();
        v97 = v179;
        HMFGetOSLogHandle();
        v98 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v99 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v95, "uniqueIdentifier");
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v216 = v99;
          v217 = 2112;
          v218 = (uint64_t)v100;
          _os_log_impl(&dword_1CD062000, v98, OS_LOG_TYPE_INFO, "%{public}@Non-primary accessory with identifier %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v96);
        objc_msgSend(v95, "instanceID");
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "stringValue");
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        v213 = v102;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v213, 1);
        v103 = (void *)objc_claimAutoreleasedReturnValue();

        v104 = (void *)MEMORY[0x1E0CB3A28];
        objc_msgSend(v178, "uuid");
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v104, "hm_deriveUUIDFromBaseUUID:withSalts:", v105, v103);
        v106 = (void *)objc_claimAutoreleasedReturnValue();

        v107 = (void *)MEMORY[0x1D17BA0A0]();
        v108 = v97;
        HMFGetOSLogHandle();
        v109 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v110 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v95, "uniqueIdentifier");
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v106, "UUIDString");
          v112 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v216 = v110;
          v217 = 2112;
          v218 = (uint64_t)v111;
          v219 = 2112;
          v220 = v112;
          _os_log_impl(&dword_1CD062000, v109, OS_LOG_TYPE_INFO, "%{public}@Creating secondary accessory with identifier %@ and uuid %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v107);
        objc_msgSend(v178, "uuid");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:](v108, "getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:objectChangeType:", v95, 0, v106, v113, 1);
        v114 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v114, "setWiFiCredentialType:", &unk_1E8B32808);
        objc_msgSend(v165, "addObject:", v114);
        -[HMDHome uuidToHAPAccessoryConfigTable](v108, "uuidToHAPAccessoryConfigTable");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v115, "setObject:forKey:", v95, v106);

        v200 = v175;
        -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:](v108, "getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:", 0, v95, v114, &v200, 0, 0);
        v177 = v200;

        ++v94;
        v175 = v177;
      }
      while (v168 != v94);
      v93 = objc_msgSend(v160, "countByEnumeratingWithState:objects:count:", &v201, v214, 16);
    }
    while (v93);
  }

  -[HMDHome backingStore](v179, "backingStore");
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v164, "name");
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v116, "transaction:options:", v117, v118);
  v176 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v176, "add:withMessage:", v178, v164);
  v119 = dispatch_group_create();
  objc_msgSend(v178, "setConfigurationTracker:", v119);
  v198 = 0u;
  v199 = 0u;
  v196 = 0u;
  v197 = 0u;
  v166 = v165;
  v120 = objc_msgSend(v166, "countByEnumeratingWithState:objects:count:", &v196, v212, 16);
  if (v120)
  {
    v169 = *(_QWORD *)v197;
    do
    {
      for (i = 0; i != v120; ++i)
      {
        if (*(_QWORD *)v197 != v169)
          objc_enumerationMutation(v166);
        v122 = *(void **)(*((_QWORD *)&v196 + 1) + 8 * i);
        objc_msgSend(v122, "setConfigurationTracker:", v119);
        objc_msgSend(v178, "certificationStatus");
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v122, "setCertificationStatus:", v123);

        objc_msgSend(v178, "uuid");
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome accessoryWithUUID:](v179, "accessoryWithUUID:", v124);
        v125 = (void *)objc_claimAutoreleasedReturnValue();

        v126 = v125;
        objc_opt_class();
        LOBYTE(v125) = objc_opt_isKindOfClass();

        if ((v125 & (v126 != 0)) == 1)
        {
          objc_msgSend(v178, "uuid");
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v127, "UUIDString");
          v128 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v122, "setBridgeUUID:", v128);
LABEL_73:

          goto LABEL_77;
        }
        v129 = v126;
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & (v126 != 0)) == 1)
        {
          objc_msgSend(v178, "uuid");
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v127, "UUIDString");
          v128 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v122, "setHostAccessoryUUID:", v128);
          goto LABEL_73;
        }
        v131 = (void *)MEMORY[0x1D17BA0A0]();
        v132 = v179;
        HMFGetOSLogHandle();
        v133 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v216 = v134;
          v217 = 2112;
          v218 = (uint64_t)v129;
          _os_log_impl(&dword_1CD062000, v133, OS_LOG_TYPE_ERROR, "%{public}@Unexpected type of host accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v131);
LABEL_77:
        objc_msgSend(v176, "add:withMessage:", v122, v164);

      }
      v120 = objc_msgSend(v166, "countByEnumeratingWithState:objects:count:", &v196, v212, 16);
    }
    while (v120);
  }

  v194 = 0u;
  v195 = 0u;
  v192 = 0u;
  v193 = 0u;
  v135 = v177;
  v136 = objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v192, v211, 16);
  if (v136)
  {
    v137 = *(_QWORD *)v193;
    do
    {
      for (j = 0; j != v136; ++j)
      {
        if (*(_QWORD *)v193 != v137)
          objc_enumerationMutation(v135);
        v139 = *(void **)(*((_QWORD *)&v192 + 1) + 8 * j);
        objc_msgSend(v139, "setConfigurationTracker:", v119);
        objc_msgSend(v176, "add:withMessage:", v139, 0);
      }
      v136 = objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v192, v211, 16);
    }
    while (v136);
  }

  -[HMDHome emptyModelObjectWithChangeType:](v179, "emptyModelObjectWithChangeType:", 2);
  v140 = objc_claimAutoreleasedReturnValue();
  if (objc_msgSend((id)objc_opt_class(), "updateCHIPPropertiesOnHomeModel:forAddedHAPAccessoryServer:", v140, v172))
  {
    v141 = v140;
    v142 = (void *)MEMORY[0x1D17BA0A0]();
    v143 = v179;
    HMFGetOSLogHandle();
    v144 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v144, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v216 = v145;
      v217 = 2112;
      v218 = v141;
      _os_log_impl(&dword_1CD062000, v144, OS_LOG_TYPE_INFO, "%{public}@Adding updated home model for CHIP-related properties: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v142);
    v140 = v141;
    objc_msgSend(v176, "add:", v141);
  }
  v146 = (void *)v140;
  -[HMDHome wiFiRouterAccessories](v179, "wiFiRouterAccessories");
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak((id *)buf, v179);
  v181[0] = MEMORY[0x1E0C809B0];
  v181[1] = 3221225472;
  v181[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke;
  v181[3] = &unk_1E89A4BD0;
  objc_copyWeak(&v191, (id *)buf);
  v148 = v155;
  v190 = v148;
  v149 = v119;
  v182 = v149;
  v150 = v178;
  v183 = v150;
  v180 = v172;
  v184 = v180;
  v151 = v166;
  v185 = v151;
  v152 = v164;
  v186 = v152;
  v187 = v210;
  v153 = v147;
  v188 = v153;
  v154 = v161;
  v189 = v154;
  objc_msgSend(v176, "run:", v181);

  objc_destroyWeak(&v191);
  objc_destroyWeak((id *)buf);

  __HMFActivityScopeLeave();
}

- (void)updateHomeFirstHAPAccessoryAddedDateToNow
{
  HMDHomeModel *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeModel *v11;

  v3 = [HMDHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v3, "initWithObjectChangeType:uuid:parentUUID:", 2, v4, v6);

  v7 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  -[HMDHomeModel setFirstHAPAccessoryAddedDate:](v11, "setFirstHAPAccessoryAddedDate:", v7);

  -[HMDHome backingStore](self, "backingStore");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "transaction:options:", CFSTR("updateHomeFirstHAPAccessoryAddedDate"), v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "add:", v11);
  objc_msgSend(v10, "run");

}

- (void)_handleAddServiceGroup:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  HMDServiceGroupModel *v28;
  void *v29;
  void *v30;
  HMDServiceGroupModel *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMDServiceGroupModel *v36;
  _QWORD v37[4];
  id v38;
  HMDServiceGroupModel *v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CBAC40]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = HMMaxLengthForNaming();
    if (objc_msgSend(v5, "length") > v6)
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v10;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v7);
      v11 = (void *)MEMORY[0x1E0CB35C8];
      v12 = 46;
      goto LABEL_7;
    }
    -[HMDHome serviceGroupWithName:](self, "serviceGroupWithName:", v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = (void *)MEMORY[0x1E0CB35C8];
      v15 = 1;
    }
    else
    {
      -[HMDHome serviceGroups](self, "serviceGroups");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "count");
      v18 = maximumServiceGroupsPerHome;

      if (v17 < v18)
      {
        -[HMDHome addName:](self, "addName:", v5);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v19)
        {
          v28 = [HMDServiceGroupModel alloc];
          objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](self, "uuid");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v28, "initWithObjectChangeType:uuid:parentUUID:", 1, v29, v30);

          -[HMDServiceGroupModel setName:](v31, "setName:", v5);
          -[HMDHome backingStore](self, "backingStore");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "name");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "transaction:options:", v33, v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v35, "add:", v31);
          v37[0] = MEMORY[0x1E0C809B0];
          v37[1] = 3221225472;
          v37[2] = __34__HMDHome__handleAddServiceGroup___block_invoke;
          v37[3] = &unk_1E89C21C0;
          v38 = v4;
          v39 = v31;
          v36 = v31;
          objc_msgSend(v35, "run:", v37);

          goto LABEL_20;
        }
        v20 = (void *)MEMORY[0x1D17BA0A0]();
        v21 = self;
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v41 = v23;
          v42 = 2112;
          v43 = v5;
          v44 = 2112;
          v45 = v19;
          _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; namespace error %@",
            buf,
            0x20u);

        }
        objc_autoreleasePoolPop(v20);
LABEL_19:
        objc_msgSend(v4, "respondWithError:", v19);
LABEL_20:

        goto LABEL_21;
      }
      v24 = (void *)MEMORY[0x1D17BA0A0]();
      v25 = self;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v27;
        v42 = 2112;
        v43 = v5;
        _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; already at maximum service groups for home",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v24);
      v14 = (void *)MEMORY[0x1E0CB35C8];
      v15 = 49;
    }
    objc_msgSend(v14, "hmErrorWithCode:", v15);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_19;
  }
  v11 = (void *)MEMORY[0x1E0CB35C8];
  v12 = 20;
LABEL_7:
  objc_msgSend(v11, "hmErrorWithCode:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v13);
LABEL_21:

}

- (void)_handleAddServiceGroupModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  HMDServiceGroup *v12;
  void *v13;
  HMDServiceGroup *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "name");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "uuid");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)v9;
  if (v8 && v9)
  {
    objc_msgSend(v8, "hm_truncatedNameString");
    v11 = objc_claimAutoreleasedReturnValue();

    v12 = [HMDServiceGroup alloc];
    -[HMDHome workQueue](self, "workQueue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[HMDServiceGroup initWithName:uuid:home:queue:](v12, "initWithName:uuid:home:queue:", v11, v10, self, v13);

    -[HMDHome serviceGroups](self, "serviceGroups");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "addObject:", v14);

    -[HMDHome msgDispatcher](self, "msgDispatcher");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDServiceGroup configure:queue:](v14, "configure:queue:", v16, v17);

    -[HMDServiceGroup updateServiceGroupWithModel:message:](v14, "updateServiceGroupWithModel:message:", v6, v7);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "transactionResult");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "markChanged");
    -[HMDServiceGroup serviceUUIDs](v14, "serviceUUIDs");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "count");

    if (v21)
      v22 = objc_msgSend(v19, "markSaveToAssistant");
    v23 = (void *)MEMORY[0x1D17BA0A0](v22);
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v32 = v10;
      v26 = v11;
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v27;
      v35 = 2112;
      v36 = v26;
      _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Add service group: %@", buf, 0x16u);

      v11 = v26;
      v10 = v32;
    }

    objc_autoreleasePoolPop(v23);
    objc_msgSend(v7, "respondWithPayload:error:", 0, v18);

    v8 = (void *)v11;
  }
  else
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v31;
      v35 = 2112;
      v36 = (uint64_t)v8;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Can't add service group %@; invalid parameter",
        buf,
        0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v14 = (HMDServiceGroup *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v14);
  }

}

- (void)_handleRemoveServiceGroup:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDServiceGroupModel *v7;
  void *v8;
  HMDServiceGroupModel *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;

  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", *MEMORY[0x1E0CBAC60]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome serviceGroupWithUUID:](self, "serviceGroupWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = [HMDServiceGroupModel alloc];
    -[HMDHome uuid](self, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 3, v5, v8);

    -[HMDHome backingStore](self, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "add:", v9);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __37__HMDHome__handleRemoveServiceGroup___block_invoke;
    v14[3] = &unk_1E89C2350;
    v15 = v4;
    objc_msgSend(v13, "run:", v14);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v9 = (HMDServiceGroupModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
  }

}

- (void)_handleRemoveServiceGroupModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome serviceGroupWithUUID:](self, "serviceGroupWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDHome removeName:](self, "removeName:", v11);

    -[HMDHome serviceGroups](self, "serviceGroups");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeObject:", v10);

    objc_msgSend(v7, "transactionResult");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "markChanged");
    v15 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v14, "markSaveToAssistant"));
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v19;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove service group: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(v7, "respondWithSuccess");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v14);
  }

}

- (id)builtInActionSetInfo
{
  void *v3;
  NSObject *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v9[5];
  id v10;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __31__HMDHome_builtInActionSetInfo__block_invoke;
  v9[3] = &unk_1E89C2328;
  v9[4] = self;
  v5 = v3;
  v10 = v5;
  dispatch_sync(v4, v9);

  v6 = v10;
  v7 = v5;

  return v7;
}

- (void)_handleAddActionSet:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  unint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDAddActionSetLogEvent *v18;
  void *v19;
  HMDAddActionSetLogEvent *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543618;
    v23 = v8;
    v24 = 2112;
    v25 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received a request to add a new action set : %@", (uint8_t *)&v22, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetType"));
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (!v9)
    v9 = (id)*MEMORY[0x1E0CB8238];
  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = HMMaxLengthForNaming();
  if (objc_msgSend(v10, "length") <= v11)
  {
    -[HMDHome logEventSubmitter](v6, "logEventSubmitter");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = [HMDAddActionSetLogEvent alloc];
    -[HMDHome uuid](v6, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = -[HMDAddActionSetLogEvent initWithActionSetType:homeUUID:](v18, "initWithActionSetType:homeUUID:", v9, v19);
    objc_msgSend(v17, "submitLogEvent:", v20);

    objc_msgSend(v4, "name");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v20) = objc_msgSend(v21, "isEqualToString:", *MEMORY[0x1E0CB8268]);

    if ((_DWORD)v20)
    {
      -[HMDHome _handleAddActionSetFromBuilder:](v6, "_handleAddActionSetFromBuilder:", v4);
    }
    else if (objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0CB8230]))
    {
      -[HMDHome _handleAddTriggerOwnedActionSet:](v6, "_handleAddTriggerOwnedActionSet:", v4);
    }
    else
    {
      -[HMDHome _handleAddHomeOwnedActionSet:](v6, "_handleAddHomeOwnedActionSet:", v4);
    }
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543362;
      v23 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v22, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v16);

  }
}

- (void)_handleAddActionSetFromBuilder:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  _QWORD v45[5];
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  id v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v52 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding Home owned action set (from builder)", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v11 = v9;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetType"));
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  v15 = (void *)*MEMORY[0x1E0CB8238];
  if (v13)
    v15 = (void *)v13;
  v16 = v15;

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithName:](v6, "actionSetWithName:", v17);
  v18 = objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    -[HMDHome actionSets](v6, "actionSets");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "count");
    v27 = maximumActionSetsPerHome;

    if (v26 >= v27)
    {
      v33 = (void *)MEMORY[0x1D17BA0A0]();
      v34 = v6;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v52 = v36;
        v53 = 2112;
        v54 = v17;
        _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; already at maximum action sets for home",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v33);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 49);
      v19 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMDHome addActionSetName:](v6, "addActionSetName:", v17);
      v28 = objc_claimAutoreleasedReturnValue();
      if (!v28)
      {
        -[HMDHome backingStore](v6, "backingStore");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "transaction:options:", v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v4, "messagePayload");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = 0;
        v50 = 0;
        -[HMDHome _createActionSetWithUUID:name:type:fromDictionary:transaction:response:error:](v6, v12, v17, v16, v41, v40, &v50, &v49);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = v50;
        v19 = v49;

        if (v42)
        {
          v45[0] = MEMORY[0x1E0C809B0];
          v45[1] = 3221225472;
          v45[2] = __42__HMDHome__handleAddActionSetFromBuilder___block_invoke;
          v45[3] = &unk_1E89BA850;
          v45[4] = v6;
          v46 = v17;
          v47 = v4;
          v48 = v43;
          objc_msgSend(v40, "run:", v45);

        }
        else
        {
          v44 = -[HMDHome removeName:](v6, "removeName:", v17);
          objc_msgSend(v4, "respondWithError:", v19);
        }

        goto LABEL_21;
      }
      v19 = (id)v28;
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v6;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v52 = v32;
        v53 = 2112;
        v54 = v17;
        v55 = 2112;
        v56 = v19;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; namespace error %@",
          buf,
          0x20u);

      }
      objc_autoreleasePoolPop(v29);
    }
    objc_msgSend(v4, "respondWithError:", v19);
    goto LABEL_21;
  }
  v19 = (id)v18;
  v20 = (void *)MEMORY[0x1D17BA0A0]();
  v21 = v6;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v52 = v23;
    v53 = 2112;
    v54 = v17;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@ as it already exists.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v20);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 1);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v24);

LABEL_21:
}

- (void)_handleAddTriggerOwnedActionSet:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  HMDActionSetModel *v9;
  void *v10;
  void *v11;
  HMDActionSetModel *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543362;
    v19 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding trigger owned action set", (uint8_t *)&v18, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = [HMDActionSetModel alloc];
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v6, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 1, v10, v11);

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDActionSetModel setName:](v12, "setName:", v13);

  -[HMDActionSetModel setType:](v12, "setType:", *MEMORY[0x1E0CB8230]);
  -[HMDHome backingStore](v6, "backingStore");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "transaction:options:", v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "add:withMessage:", v12, v4);
  objc_msgSend(v17, "run");

}

- (void)_handleAddHomeOwnedActionSet:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  HMDActionSetModel *v30;
  void *v31;
  void *v32;
  HMDActionSetModel *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 138543362;
    v43 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding Home owned action set", (uint8_t *)&v42, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithName:](v6, "actionSetWithName:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = v6;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138543618;
      v43 = v14;
      v44 = 2112;
      v45 = v9;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@ as it already exists.", (uint8_t *)&v42, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = (void *)MEMORY[0x1E0CB35C8];
    v16 = 1;
LABEL_15:
    objc_msgSend(v15, "hmErrorWithCode:", v16);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:
    objc_msgSend(v4, "respondWithError:", v21);
    goto LABEL_17;
  }
  -[HMDHome actionSets](v6, "actionSets");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "count");
  v19 = maximumActionSetsPerHome;

  if (v18 >= v19)
  {
    v26 = (void *)MEMORY[0x1D17BA0A0]();
    v27 = v6;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138543618;
      v43 = v29;
      v44 = 2112;
      v45 = v9;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; already at maximum action sets for home",
        (uint8_t *)&v42,
        0x16u);

    }
    objc_autoreleasePoolPop(v26);
    v15 = (void *)MEMORY[0x1E0CB35C8];
    v16 = 49;
    goto LABEL_15;
  }
  -[HMDHome addActionSetName:](v6, "addActionSetName:", v9);
  v20 = objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v21 = (void *)v20;
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = v6;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138543874;
      v43 = v25;
      v44 = 2112;
      v45 = v9;
      v46 = 2112;
      v47 = v21;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; namespace error %@",
        (uint8_t *)&v42,
        0x20u);

    }
    objc_autoreleasePoolPop(v22);
    goto LABEL_16;
  }
  v30 = [HMDActionSetModel alloc];
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v6, "uuid");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v30, "initWithObjectChangeType:uuid:parentUUID:", 1, v31, v32);

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetName"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDActionSetModel setName:](v33, "setName:", v34);

  objc_msgSend(v4, "stringForKey:", CFSTR("kActionSetType"));
  v35 = objc_claimAutoreleasedReturnValue();
  v36 = (void *)v35;
  if (v35)
    v37 = v35;
  else
    v37 = *MEMORY[0x1E0CB8238];
  -[HMDActionSetModel setType:](v33, "setType:", v37);
  -[HMDHome backingStore](v6, "backingStore");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "transaction:options:", v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v41, "add:withMessage:", v33, v4);
  objc_msgSend(v41, "run");

  v21 = 0;
LABEL_17:

}

- (void)_handleAddActionSetModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  id v8;
  HMDHome *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  HMDHome *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  const __CFString *v46;
  _BYTE v47[12];
  __int16 v48;
  void *v49;
  _QWORD v50[4];
  _BYTE buf[24];
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = v6;
  v9 = self;
  objc_msgSend(v8, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "type");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_msgSend(v8, "type");
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = (id)*MEMORY[0x1E0CB8238];
  }
  v14 = v13;

  -[HMDHome createActionSetWithName:uuid:type:](v9, "createActionSetWithName:uuid:type:", v10, v11, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend(v7, "transactionResult");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "markChanged");
    objc_msgSend(v8, "type");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "isEqualToString:", *MEMORY[0x1E0CB8230]);

    if (v18)
    {
      -[HMDHome triggerOwnedActionSets](v9, "triggerOwnedActionSets");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "addObject:", v15);

    }
    else
    {
      -[HMDHome actionSets](v9, "actionSets");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "addObject:", v15);

      objc_msgSend(v15, "actions");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "count");

      if (v26)
        objc_msgSend(v16, "markSaveToAssistant");
    }
    v43 = v16;
    v27 = v9;
    v44 = v15;
    v28 = v15;
    v45 = v7;
    v42 = v7;
    v50[0] = CFSTR("kHomeUUID");
    -[HMDHome uuid](v27, "uuid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "UUIDString");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = v30;
    v50[1] = CFSTR("kActionSetName");
    objc_msgSend(v28, "name");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&buf[8] = v31;
    v50[2] = CFSTR("kActionSetUUID");
    objc_msgSend(v28, "uuid");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "UUIDString");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&buf[16] = v33;
    v50[3] = CFSTR("kActionSetType");
    objc_msgSend(v28, "type");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = v34;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", buf, v50, 4);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    v36 = (void *)MEMORY[0x1D17BA0A0]();
    v37 = v27;
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v47 = 138543618;
      *(_QWORD *)&v47[4] = v39;
      v48 = 2112;
      v49 = v35;
      _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_INFO, "%{public}@Add action set finished. Responding to clients with : %@", v47, 0x16u);

    }
    objc_autoreleasePoolPop(v36);
    -[HMDHome notificationCenter](v37, "notificationCenter");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = CFSTR("HMDActionSetNotificationKey");
    *(_QWORD *)v47 = v28;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v47, &v46, 1);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "postNotificationName:object:userInfo:", CFSTR("HMDActionSetAddedNotification"), v37, v41);

    objc_msgSend(v42, "respondWithPayload:", v35);
    v15 = v44;
    v7 = v45;
  }
  else
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = v9;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v7;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to create action set model. %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
  }

}

- (void)_handleRemoveActionSet:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDActionSetModel *v23;
  void (**v24)(_QWORD, _QWORD, _QWORD);
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  HMDActionSetModel *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kActionSetUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (!v6)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v19;
      v38 = 2112;
      v39 = v5;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Did not find the action set with UUID : %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v14 = (void *)MEMORY[0x1E0CB35C8];
    v15 = 2;
    goto LABEL_9;
  }
  objc_msgSend(v6, "type");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CB8230]);

  if (v9)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v13;
      v38 = 2112;
      v39 = v7;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Removing this action Set is not supported. : %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v14 = (void *)MEMORY[0x1E0CB35C8];
    v15 = 48;
LABEL_9:
    objc_msgSend(v14, "hmErrorWithCode:", v15);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v20);
    goto LABEL_16;
  }
  +[HMDHome getBuiltinActionSets](HMDHome, "getBuiltinActionSets");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "type");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectForKey:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 83, 0);
    v23 = (HMDActionSetModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v24 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, HMDActionSetModel *, _QWORD))v24)[2](v24, v23, 0);

    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "type");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v28;
      v38 = 2112;
      v39 = v29;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove built in action set : %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(v4, "respondWithError:", v23);
  }
  else
  {
    v30 = [HMDActionSetModel alloc];
    -[HMDHome uuid](self, "uuid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v30, "initWithObjectChangeType:uuid:parentUUID:", 3, v5, v31);

    -[HMDHome backingStore](self, "backingStore");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "transaction:options:", v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v35, "add:withMessage:", v23, v4);
    objc_msgSend(v35, "run");

  }
LABEL_16:

}

- (void)_handleRemoveActionSetModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  _BOOL4 v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint8_t v51[128];
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9
    || (-[HMDHome triggerOwnedActionSetWithUUID:](self, "triggerOwnedActionSetWithUUID:", v8),
        (v9 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v44 = v6;
    objc_msgSend(v9, "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDHome removeName:](self, "removeName:", v10);

    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    -[HMDHome triggers](self, "triggers");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v46;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v46 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(*(id *)(*((_QWORD *)&v45 + 1) + 8 * v16++), "removeActionSet:postUpdate:", v9, 1);
        }
        while (v14 != v16);
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
      }
      while (v14);
    }

    objc_msgSend(v7, "transactionResult");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "markChanged");
    objc_msgSend(v9, "type");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "isEqualToString:", *MEMORY[0x1E0CB8230]);

    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    if (v19)
    {
      if (v23)
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "name");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v53 = v24;
        v54 = 2112;
        v55 = v25;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Remove trigger owned action set: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHome triggerOwnedActionSets](v21, "triggerOwnedActionSets");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "removeObject:", v9);

    }
    else
    {
      if (v23)
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "name");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v53 = v27;
        v54 = 2112;
        v55 = v28;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Remove action set: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHome actionSets](v21, "actionSets");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "removeObject:", v9);

      objc_msgSend(v17, "markSaveToAssistant");
    }
    objc_msgSend(v9, "invalidate");
    v49[0] = CFSTR("kHomeUUID");
    -[HMDHome uuid](v21, "uuid");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "UUIDString");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v50[0] = v31;
    v49[1] = CFSTR("kActionSetName");
    objc_msgSend(v9, "name");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v50[1] = v32;
    v49[2] = CFSTR("kActionSetUUID");
    objc_msgSend(v8, "UUIDString");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v50[2] = v33;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v50, v49, 3);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    v35 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v7, "respondWithPayload:", v34));
    v36 = v21;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v53 = v38;
      v54 = 2112;
      v55 = v34;
      _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Responding back to clients after removing actionSet: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v35);

    v6 = v44;
  }
  else
  {
    v39 = (void *)MEMORY[0x1D17BA0A0]();
    v40 = self;
    HMFGetOSLogHandle();
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v53 = v42;
      v54 = 2112;
      v55 = v43;
      _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_ERROR, "%{public}@Count not find action set with UUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v39);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v9);
  }

}

- (void)executeActionSet:(id)a3
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  id v13;
  _QWORD block[5];
  id v15;
  id v16;

  v5 = a3;
  v6 = objc_alloc(MEMORY[0x1E0D28540]);
  v7 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%@, %s:%ld"), v8, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 17151);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v6, "initWithName:", v9);

  -[HMDHome workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __28__HMDHome_executeActionSet___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v15 = v5;
  v16 = v10;
  v12 = v10;
  v13 = v5;
  dispatch_async(v11, block);

}

- (void)_handleExecuteActionSet:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  id v10;

  v10 = a3;
  objc_msgSend(v10, "uuidForKey:", CFSTR("kActionSetUUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    if (!isInternalBuild()
      || (-[HMDHome triggerOwnedActionSetWithUUID:](self, "triggerOwnedActionSetWithUUID:", v4),
          (v5 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "responseHandler");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v5, 0);
      goto LABEL_10;
    }
  }
  objc_msgSend(v5, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0CB8230]))
  {

    goto LABEL_9;
  }
  v7 = isInternalBuild();

  if ((v7 & 1) != 0)
  {
LABEL_9:
    +[HMDDonationHandler sharedDonationHandler](HMDDonationHandler, "sharedDonationHandler");
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "donateActionSet:withMessage:", v5, v10);
    objc_msgSend(v5, "execute:", v10);
    goto LABEL_10;
  }
  objc_msgSend(v10, "responseHandler");
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v9, 0);

LABEL_10:
}

- (void)_updateOwnedTriggers
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome triggers](self, "triggers", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v9, "isOwnedByThisDevice"))
        {
          objc_msgSend(v9, "uuid");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v10);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

  -[HMDHome ownedTriggers](self, "ownedTriggers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setArray:", v3);

}

- (void)_handleAddEventTrigger:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  HMDEventTriggerModel *v13;
  void *v14;
  HMDEventTriggerModel *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  HMDEventTriggerModel *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  HMDEventTrigger *v28;
  void *v29;
  BOOL v30;
  id v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  void *context;
  void *v45;
  HMDEventTrigger *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _QWORD v55[4];
  id v56;
  id v57;
  HMDEventTriggerModel *v58;
  id v59;
  HMDHome *v60;
  HMDEventTrigger *v61;
  id v62;
  _QWORD v63[4];
  id v64;
  HMDEventTriggerModel *v65;
  id v66;
  char v67;
  id location;
  uint8_t buf[4];
  id v70;
  __int16 v71;
  id v72;
  __int16 v73;
  HMDEventTrigger *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v70 = v8;
    v71 = 2112;
    v72 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received message %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "name");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0CB8270]);

  objc_msgSend(v4, "stringForKey:", CFSTR("kTriggerName"));
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9E50]);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "predicateForKey:", CFSTR("kEventTriggerConditionKey"));
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kEventTriggerRecurrencesKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    if (objc_msgSend(v11, "unsignedIntegerValue") == 127)
    {
      v53 = 0;
    }
    else
    {
      HMDaysOfTheWeekToDateComponents();
      v53 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    objc_msgSend(v4, "arrayOfDateComponentsForKey:", CFSTR("kEventTriggerRecurrencesKey"));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
  }
  -[HMDHome currentUser](v6, "currentUser");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = [HMDEventTriggerModel alloc];
  -[HMDHome uuid](v6, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v13, "initWithObjectChangeType:uuid:parentUUID:", 1, v51, v14);

  -[HMDEventTriggerModel setName:](v15, "setName:", v54);
  -[HMDEventTriggerModel setConfiguredName:](v15, "setConfiguredName:", v50);
  -[HMDEventTriggerModel setActive:](v15, "setActive:", MEMORY[0x1E0C9AAA0]);
  -[HMDEventTriggerModel setOwner:](v15, "setOwner:", v49);
  -[HMDHome currentDevice](v6, "currentDevice");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDEventTriggerModel setOwningDevice:](v15, "setOwningDevice:", v16);

  -[HMDHome predicateUtility](v6, "predicateUtility");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "rewritePredicateForDaemon:message:", v52, v4);
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v48, 1, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDEventTriggerModel setEvaluationCondition:](v15, "setEvaluationCondition:", v18);

  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v53, 1, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDEventTriggerModel setRecurrences:](v15, "setRecurrences:", v19);

  v20 = (void *)objc_msgSend(v4, "mutableCopy");
  objc_initWeak(&location, v6);
  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 3221225472;
  v63[2] = __34__HMDHome__handleAddEventTrigger___block_invoke;
  v63[3] = &unk_1E89A4B20;
  objc_copyWeak(&v66, &location);
  v21 = v4;
  v64 = v21;
  v22 = v15;
  v65 = v22;
  v67 = v10;
  objc_msgSend(v20, "setResponseHandler:", v63);
  if (-[HMDHome _validateAddingNewTriggerWithName:message:](v6, "_validateAddingNewTriggerWithName:message:", v54, v20))
  {
    if (!v12
      && !+[HMDEventTrigger __validateRecurrences:](HMDEventTrigger, "__validateRecurrences:", v53))
    {
      v33 = (void *)MEMORY[0x1D17BA0A0]();
      v34 = v6;
      HMFGetOSLogHandle();
      v35 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v70 = v36;
        v71 = 2112;
        v72 = v53;
        _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@Received invalid values for recurrences: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v33);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v26 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "respondWithError:", v26);
      goto LABEL_38;
    }
    -[HMDHome backingStore](v6, "backingStore");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "name");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "transaction:options:", v24, v25);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      v26 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      if (!-[HMDHome _populateTriggerModel:fromBuilderMessage:transaction:responsePayload:](v6, "_populateTriggerModel:fromBuilderMessage:transaction:responsePayload:", v22, v20, v47, v26))
      {
LABEL_37:

LABEL_38:
        goto LABEL_39;
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v21, "BOOLForKey:", CFSTR("kEventTriggerExecuteOnce")));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDEventTriggerModel setExecuteOnce:](v22, "setExecuteOnce:", v27);

    }
    else
    {
      v26 = 0;
    }
    v28 = -[HMDEventTrigger initWithModel:home:message:]([HMDEventTrigger alloc], "initWithModel:home:message:", v22, v6, v21);
    v46 = v28;
    if (v10)
      v29 = v47;
    else
      v29 = 0;
    v62 = 0;
    v30 = -[HMDEventTrigger addEventsFromMessage:preserveUUIDs:transaction:error:](v28, "addEventsFromMessage:preserveUUIDs:transaction:error:", v21, v10 ^ 1u, v29, &v62);
    v31 = v62;
    v45 = v31;
    if (v30)
    {
      if (-[HMDEventTrigger requiresDataVersion4](v46, "requiresDataVersion4")
        && !-[HMDEventTrigger checkSharedEventTriggerActivationResidentRequirement:](v46, "checkSharedEventTriggerActivationResidentRequirement:", v21))
      {
        context = (void *)MEMORY[0x1D17BA0A0]();
        v38 = v6;
        HMFGetOSLogHandle();
        v39 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          v43 = v26;
          HMFGetLogIdentifier();
          v40 = (id)objc_claimAutoreleasedReturnValue();
          -[HMDHome primaryResident](v38, "primaryResident");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "device");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v70 = v40;
          v71 = 2112;
          v72 = v42;
          v73 = 2112;
          v74 = v46;
          _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Current resident device %@ does not support shared activation, cannot add the trigger %@", buf, 0x20u);

          v26 = v43;
        }

        objc_autoreleasePoolPop(context);
        goto LABEL_36;
      }
      if (-[HMDHome isOwnerUser](v6, "isOwnerUser"))
      {
        if (!v10)
        {
          objc_msgSend(v47, "add:withMessage:", v22, v20);
          objc_msgSend(v47, "run");
          goto LABEL_36;
        }
        objc_msgSend(v47, "add:", v22);
        v55[0] = MEMORY[0x1E0C809B0];
        v55[1] = 3221225472;
        v55[2] = __34__HMDHome__handleAddEventTrigger___block_invoke_1094;
        v55[3] = &unk_1E89A85C8;
        v56 = v20;
        v57 = v26;
        v58 = v22;
        v59 = v52;
        v60 = v6;
        v61 = v46;
        objc_msgSend(v47, "run:", v55);

        v32 = v56;
        goto LABEL_31;
      }
      if (-[HMDHome isAdminUser](v6, "isAdminUser"))
      {
        -[HMDHome transactionObjectUpdated:newValues:message:](v6, "transactionObjectUpdated:newValues:message:", 0, v22, v20);
        -[HMDBackingStoreModelObject uuid](v22, "uuid");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome triggerWithUUID:](v6, "triggerWithUUID:", v37);
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        if (v32)
          -[HMDHome _relayAddTriggerToResident:](v6, "_relayAddTriggerToResident:", v32);
LABEL_31:

      }
    }
    else
    {
      objc_msgSend(v20, "respondWithError:", v31);
    }
LABEL_36:

    goto LABEL_37;
  }
LABEL_39:

  objc_destroyWeak(&v66);
  objc_destroyWeak(&location);

}

- (BOOL)_populateTriggerModel:(id)a3 fromBuilderMessage:(id)a4 transaction:(id)a5 responsePayload:(id)a6
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  BOOL v42;
  void *v43;
  HMDHome *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *context;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id obj;
  id v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  id v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v55 = a5;
  v57 = a6;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v11, "BOOLForKey:", CFSTR("kTriggerActivate")));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setActive:", v12);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v11, "BOOLForKey:", *MEMORY[0x1E0CB9E60]));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setAutoDelete:", v13);

  v59 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v56 = v11;
  objc_msgSend(v11, "arrayForKey:", CFSTR("kTriggerActionSetUUIDKey"));
  obj = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v63;
    v53 = v10;
    while (2)
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v63 != v16)
          objc_enumerationMutation(obj);
        v18 = *(id *)(*((_QWORD *)&v62 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v19 = v18;
        else
          v19 = 0;
        v20 = v19;

        if (!v20)
          goto LABEL_18;
        v21 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v20);
        if (!v21)
        {
          v20 = v18;
LABEL_18:
          v37 = (void *)MEMORY[0x1D17BA0A0]();
          v38 = self;
          HMFGetOSLogHandle();
          v39 = objc_claimAutoreleasedReturnValue();
          v28 = v55;
          v27 = v56;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v67 = v40;
            v68 = 2112;
            v69 = v20;
            _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_ERROR, "%{public}@Invalid ActionSet reference: '%@'", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v37);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "respondWithError:", v41);

          v42 = 0;
          v10 = v53;
          goto LABEL_29;
        }
        v22 = (void *)v21;
        -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v21);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v23)
        {
          v43 = (void *)MEMORY[0x1D17BA0A0]();
          v44 = self;
          HMFGetOSLogHandle();
          v45 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v67 = v46;
            v68 = 2112;
            v69 = v22;
            _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve ActionSet reference: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v43);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = v56;
          objc_msgSend(v56, "respondWithError:", v47);

          v42 = 0;
          v10 = v53;
          v28 = v55;
          goto LABEL_29;
        }
        v24 = v23;
        objc_msgSend(v23, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "UUIDString");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "addObject:", v26);

      }
      v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v62, v70, 16);
      v10 = v53;
      if (v15)
        continue;
      break;
    }
  }

  v27 = v56;
  objc_msgSend(v56, "dictionaryForKey:", CFSTR("kTriggerOwnedActionSetKey"));
  v28 = v55;
  obj = (id)objc_claimAutoreleasedReturnValue();
  if (!obj)
    goto LABEL_28;
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "hm_deriveUUIDFromBaseUUID:", v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "UUIDString");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v32 = (void *)*MEMORY[0x1E0CB8230];
  v60 = 0;
  v61 = 0;
  -[HMDHome _createActionSetWithUUID:name:type:fromDictionary:transaction:response:error:](self, v29, v31, v32, obj, v55, &v61, &v60);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v61;
  v35 = v60;

  if (v33)
  {
    objc_msgSend(v57, "setObject:forKeyedSubscript:", v34, CFSTR("kTriggerOwnedActionSetKey"));
    objc_msgSend(v29, "UUIDString");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "addObject:", v36);

  }
  else
  {
    v54 = v10;
    context = (void *)MEMORY[0x1D17BA0A0]();
    v48 = self;
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v67 = v50;
      _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_ERROR, "%{public}@Failed to create trigger-owned action set", buf, 0xCu);

    }
    objc_autoreleasePoolPop(context);
    objc_msgSend(v56, "respondWithError:", v35);
    v10 = v54;
  }

  if (!v33)
  {
    v42 = 0;
  }
  else
  {
LABEL_28:
    v20 = (id)objc_msgSend(v59, "copy");
    objc_msgSend(v10, "setCurrentActionSets:", v20);
    v42 = 1;
LABEL_29:

  }
  return v42;
}

- (void)_handleAddEventTriggerModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDEventTrigger *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = -[HMDEventTrigger initWithModel:home:message:]([HMDEventTrigger alloc], "initWithModel:home:message:", v6, self, v7);
  if (v8)
  {
    objc_msgSend(v6, "createPayload");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome _addNewTrigger:message:payloadAnnex:triggerModel:](self, "_addNewTrigger:message:payloadAnnex:triggerModel:", v8, v7, v9, v6);
LABEL_7:

    goto LABEL_8;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543362;
    v17 = v13;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Could not create event trigger object from model", (uint8_t *)&v16, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(v7, "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(v7, "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, v15, 0);

    goto LABEL_7;
  }
LABEL_8:

}

- (BOOL)_validateAddingNewTriggerWithName:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  unint64_t v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (v6)
  {
    if (objc_msgSend(v6, "length"))
    {
      v8 = HMMaxLengthForNaming();
      if (objc_msgSend(v6, "length") > v8)
      {
        v9 = (void *)MEMORY[0x1D17BA0A0]();
        v10 = self;
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = 138543362;
          v30 = v12;
          _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v29, 0xCu);

        }
        objc_autoreleasePoolPop(v9);
        v13 = (void *)MEMORY[0x1E0CB35C8];
        v14 = 46;
        goto LABEL_9;
      }
      -[HMDHome triggerWithName:](self, "triggerWithName:", v6);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        v19 = (void *)MEMORY[0x1E0CB35C8];
        v20 = 1;
      }
      else
      {
        -[HMDHome triggers](self, "triggers");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v21, "count");
        v23 = maximumTriggersPerHome;

        if (v22 < v23)
        {
          v16 = 1;
LABEL_19:

          goto LABEL_10;
        }
        v24 = (void *)MEMORY[0x1D17BA0A0]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = 138543618;
          v30 = v27;
          v31 = 2112;
          v32 = v6;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Can't add trigger %@; already at maximum triggers for home",
            (uint8_t *)&v29,
            0x16u);

        }
        objc_autoreleasePoolPop(v24);
        v19 = (void *)MEMORY[0x1E0CB35C8];
        v20 = 49;
      }
      objc_msgSend(v19, "hmErrorWithCode:", v20);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "respondWithError:", v28);

      v16 = 0;
      goto LABEL_19;
    }
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v14 = 3;
  }
  else
  {
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v14 = 20;
  }
LABEL_9:
  objc_msgSend(v13, "hmErrorWithCode:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "respondWithError:", v15);

  v16 = 0;
LABEL_10:

  return v16;
}

- (void)_relayAddTriggerToResident:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id location;
  const __CFString *v21;
  void *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v23[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObject();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = CFSTR("HM.triggers");
  v22 = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  v8 = (void *)MEMORY[0x1E0D285F8];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __38__HMDHome__relayAddTriggerToResident___block_invoke;
  v17[3] = &unk_1E89BF4F0;
  objc_copyWeak(&v19, &location);
  v9 = v4;
  v18 = v9;
  objc_msgSend(v8, "messageWithName:messagePayload:responseHandler:", CFSTR("kAddTriggersInternalRequestKey"), v7, v17);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMDHome uuid](self, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v11, "initWithTarget:", v12);

  objc_msgSend(v10, "setDestination:", v13);
  objc_msgSend(v10, "setQualityOfService:", 33);
  -[HMDHome administratorHandler](self, "administratorHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v10, "copy");
  objc_msgSend(v14, "operationForMessage:error:", v15, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
    objc_msgSend(v14, "addOperation:", v16);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

}

- (void)_handleAddTimerTrigger:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  HMDTimerTriggerModel *v10;
  void *v11;
  HMDTimerTriggerModel *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  id v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD v35[4];
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0CB8278]);

  objc_msgSend(v4, "stringForKey:", CFSTR("kTriggerName"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHome _validateAddingNewTriggerWithName:message:](self, "_validateAddingNewTriggerWithName:message:", v7, v4))
  {
    objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9E50]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = [HMDTimerTriggerModel alloc];
    -[HMDHome uuid](self, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v10, "initWithObjectChangeType:uuid:parentUUID:", 1, v9, v11);

    -[HMDTimerTriggerModel setName:](v12, "setName:", v7);
    -[HMDTimerTriggerModel setConfiguredName:](v12, "setConfiguredName:", v8);
    -[HMDTimerTriggerModel setActive:](v12, "setActive:", MEMORY[0x1E0C9AAA0]);
    +[HMDTimerTrigger validateTriggerModel:message:currentFireDate:](HMDTimerTrigger, "validateTriggerModel:message:currentFireDate:", v12, v4, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v13)
    {
LABEL_21:

      goto LABEL_22;
    }
    v34 = v9;
    v14 = v8;
    -[HMDHome backingStore](self, "backingStore");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "transaction:options:", v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();

    v19 = v6;
    if (v6)
    {
      v20 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v21 = -[HMDHome _populateTriggerModel:fromBuilderMessage:transaction:responsePayload:](self, "_populateTriggerModel:fromBuilderMessage:transaction:responsePayload:", v13, v4, v18, v20);
      v22 = (void *)v18;
      v8 = v14;
      v9 = v34;
      if (!v21)
      {
LABEL_20:

        goto LABEL_21;
      }
    }
    else
    {
      v20 = 0;
      v22 = (void *)v18;
      v8 = v14;
      v9 = v34;
    }
    -[HMDHome currentUser](self, "currentUser");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setOwner:", v27);

    -[HMDHome currentDevice](self, "currentDevice");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setOwningDevice:", v28);

    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      if (v19)
      {
        objc_msgSend(v22, "add:", v13);
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = __34__HMDHome__handleAddTimerTrigger___block_invoke;
        v35[3] = &unk_1E89C0DA8;
        v36 = v4;
        v20 = v20;
        v37 = v20;
        v38 = v13;
        objc_msgSend(v22, "run:", v35);

      }
      else
      {
        objc_msgSend(v22, "add:withMessage:", v13, v4);
        objc_msgSend(v22, "run");
      }
    }
    else if (-[HMDHome isAdminUser](self, "isAdminUser"))
    {
      v29 = v22;
      -[HMDHome transactionObjectUpdated:newValues:message:](self, "transactionObjectUpdated:newValues:message:", 0, v13, v4);
      objc_msgSend(v13, "uuid");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome triggerWithUUID:](self, "triggerWithUUID:", v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();

      if (v31)
        -[HMDHome _relayAddTriggerToResident:](self, "_relayAddTriggerToResident:", v31);

      v22 = v29;
    }
    else
    {
      objc_msgSend(v4, "responseHandler");
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      if (v32)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v33);

      }
    }
    goto LABEL_20;
  }
  v23 = (void *)MEMORY[0x1D17BA0A0]();
  v24 = self;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v40 = v26;
    _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Trigger name is not valid", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v23);
LABEL_22:

}

- (void)_handleAddTimerTriggerModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDTimerTrigger *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = -[HMDTimerTrigger initWithModel:home:]([HMDTimerTrigger alloc], "initWithModel:home:", v6, self);
  if (v8)
  {
    objc_msgSend(v6, "createPayload");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome _addNewTrigger:message:payloadAnnex:triggerModel:](self, "_addNewTrigger:message:payloadAnnex:triggerModel:", v8, v7, v9, v6);
LABEL_7:

    goto LABEL_8;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543362;
    v17 = v13;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Could not create timer trigger object from model", (uint8_t *)&v16, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(v7, "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(v7, "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, v15, 0);

    goto LABEL_7;
  }
LABEL_8:

}

- (void)_handleAddTriggers:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  HomeKitEventTriggerAddLogEvent *v46;
  void *v47;
  HomeKitEventTriggerAddLogEvent *v48;
  HMDAnalyticsEventTriggerData *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  HMDHome *v56;
  NSObject *v57;
  void *v58;
  void *v59;
  void *v60;
  void (**v61)(_QWORD, _QWORD, _QWORD);
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  void (**v68)(_QWORD, _QWORD, _QWORD);
  void *v69;
  id v70;
  void *v71;
  id obj;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void (**v79)(_QWORD, _QWORD, _QWORD);
  HMDHome *v80;
  _QWORD v81[4];
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  id v95;
  _BYTE v96[128];
  _BYTE v97[128];
  uint8_t v98[128];
  uint8_t buf[4];
  void *v100;
  __int16 v101;
  id v102;
  __int16 v103;
  id v104;
  _QWORD v105[5];

  v105[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("HM.triggers"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = v4;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1E0CB3710];
    v7 = (void *)MEMORY[0x1E0C99E60];
    v105[0] = objc_opt_class();
    v105[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v105, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setWithArray:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v95 = 0;
    v69 = v5;
    objc_msgSend(v6, "unarchivedObjectOfClasses:fromData:error:", v9, v5, &v95);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = v95;

    v11 = v10;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v12 = v11;
    else
      v12 = 0;
    v13 = v12;

    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v80 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
    v68 = (void (**)(_QWORD, _QWORD, _QWORD))v13;
    if (v13)
    {
      v67 = v11;
      if (v16)
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v100 = v17;
        v101 = 2112;
        v102 = v13;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Received triggers %@ from shared admin to add", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMDHome backingStore](v80, "backingStore");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "transaction:options:", v19, v20);
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      obj = v13;
      v74 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v98, 16);
      if (v74)
      {
        v73 = *(_QWORD *)v92;
        v79 = v21;
        do
        {
          v22 = 0;
          do
          {
            if (*(_QWORD *)v92 != v73)
              objc_enumerationMutation(obj);
            v76 = v22;
            v23 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * v22);
            objc_msgSend(v23, "setHome:", v80, v67);
            v89 = 0u;
            v90 = 0u;
            v87 = 0u;
            v88 = 0u;
            -[HMDHome accessories](v80, "accessories");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v87, v97, 16);
            if (v25)
            {
              v26 = v25;
              v27 = *(_QWORD *)v88;
              do
              {
                for (i = 0; i != v26; ++i)
                {
                  if (*(_QWORD *)v88 != v27)
                    objc_enumerationMutation(v24);
                  objc_msgSend(v23, "fixupForReplacementAccessory:transaction:", *(_QWORD *)(*((_QWORD *)&v87 + 1) + 8 * i), v21);
                }
                v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v87, v97, 16);
              }
              while (v26);
            }

            objc_msgSend(v23, "modelObjectWithChangeType:", 1);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "add:withMessage:", v29, 0);
            v30 = v23;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v31 = v30;
            else
              v31 = 0;
            v32 = v31;
            v77 = v30;

            v85 = 0u;
            v86 = 0u;
            v83 = 0u;
            v84 = 0u;
            objc_msgSend(v32, "events");
            v78 = (id)objc_claimAutoreleasedReturnValue();
            v33 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v83, v96, 16);
            v75 = v32;
            if (v33)
            {
              v34 = v33;
              v35 = *(_QWORD *)v84;
              do
              {
                v36 = 0;
                v37 = v29;
                do
                {
                  if (*(_QWORD *)v84 != v35)
                    objc_enumerationMutation(v78);
                  v38 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * v36);
                  v39 = (void *)MEMORY[0x1D17BA0A0]();
                  v40 = v80;
                  HMFGetOSLogHandle();
                  v41 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v42 = v34;
                    v43 = v35;
                    v44 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v77, "name");
                    v45 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543874;
                    v100 = v44;
                    v101 = 2112;
                    v102 = v38;
                    v103 = 2112;
                    v104 = v45;
                    _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Adding %@ to trigger %@", buf, 0x20u);

                    v35 = v43;
                    v34 = v42;
                  }

                  objc_autoreleasePoolPop(v39);
                  objc_msgSend(v38, "modelObjectWithChangeType:", 1);
                  v29 = (void *)objc_claimAutoreleasedReturnValue();

                  v21 = v79;
                  objc_msgSend(v79, "add:withMessage:", v29, 0);
                  ++v36;
                  v37 = v29;
                }
                while (v34 != v36);
                v34 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v83, v96, 16);
              }
              while (v34);
            }

            v46 = [HomeKitEventTriggerAddLogEvent alloc];
            -[HMDHome uuid](v80, "uuid");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v48 = -[HomeKitEventTriggerAddLogEvent initWithHomeUUID:](v46, "initWithHomeUUID:", v47);

            v49 = -[HMDAnalyticsEventTriggerData initWithEventTrigger:isAdding:]([HMDAnalyticsEventTriggerData alloc], "initWithEventTrigger:isAdding:", v75, 1);
            -[HomeKitEventTriggerAddLogEvent analyticsData](v48, "analyticsData");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "setEventTrigger:", v49);

            -[HomeKitEventTriggerAddLogEvent analyticsData](v48, "analyticsData");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v51, "setResultErrorCode:", 0);

            -[HomeKitEventTriggerAddLogEvent analyticsData](v48, "analyticsData");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "setRequestOrigin:", 3);

            -[HMDHome logEventSubmitter](v80, "logEventSubmitter");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "submitLogEvent:", v48);

            v22 = v76 + 1;
          }
          while (v76 + 1 != v74);
          v74 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v91, v98, 16);
        }
        while (v74);
      }

      v81[0] = MEMORY[0x1E0C809B0];
      v81[1] = 3221225472;
      v81[2] = __30__HMDHome__handleAddTriggers___block_invoke;
      v81[3] = &unk_1E89C2350;
      v4 = v71;
      v82 = v71;
      objc_msgSend(v21, "run:", v81);
      v54 = v82;
      v11 = v67;
    }
    else
    {
      v4 = v71;
      if (v16)
      {
        HMFGetLogIdentifier();
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "identifier");
        v64 = v11;
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "UUIDString");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v100 = v63;
        v101 = 2112;
        v102 = v66;
        v103 = 2112;
        v104 = v70;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive triggers from encoded triggers data: %@: %@", buf, 0x20u);

        v11 = v64;
        v4 = v71;

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(v4, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v21)[2](v21, v54, 0);
    }

    v5 = v69;
    v62 = v70;
    v61 = v68;
  }
  else
  {
    v55 = (void *)MEMORY[0x1D17BA0A0]();
    v56 = self;
    HMFGetOSLogHandle();
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "UUIDString");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v100 = v58;
      v101 = 2112;
      v102 = v60;
      _os_log_impl(&dword_1CD062000, v57, OS_LOG_TYPE_INFO, "%{public}@Unable to find triggers to add for message: %@", buf, 0x16u);

      v4 = v71;
      v5 = 0;
    }

    objc_autoreleasePoolPop(v55);
    objc_msgSend(v4, "responseHandler");
    v61 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v61)[2](v61, v62, 0);
  }

}

- (void)_addNewTrigger:(id)a3 message:(id)a4 payloadAnnex:(id)a5 triggerModel:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMDHome addToCurrentTriggers:](self, "addToCurrentTriggers:", v10);
  -[HMDHome ownedTriggers](self, "ownedTriggers");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v14, "containsObject:", v15) & 1) == 0)
  {
    objc_msgSend(v10, "owner");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isOwner");

    if (!v17)
      goto LABEL_5;
    -[HMDHome ownedTriggers](self, "ownedTriggers");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addObject:", v15);
  }

LABEL_5:
  -[HMDHome msgDispatcher](self, "msgDispatcher");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "configure:messageDispatcher:queue:", self, v18, v19);

  objc_msgSend(v11, "transactionResult");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "markChanged");
  objc_msgSend(v11, "name");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v21, "isEqualToString:", CFSTR("kAddEventTriggerRequestKey")))
  {

  }
  else
  {
    objc_msgSend(v11, "name");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "isEqualToString:", CFSTR("kAddTimerTriggerRequestKey"));

    if ((v23 & 1) == 0)
    {
      objc_msgSend(v11, "respondWithSuccess");
      goto LABEL_14;
    }
  }
  v24 = (void *)MEMORY[0x1D17BA0A0]();
  v25 = self;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "name");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 138543874;
    v36 = v27;
    v37 = 2112;
    v38 = v28;
    v39 = 2112;
    v40 = v11;
    _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Add trigger Transaction marked for change. The client will be updated next: %@, %@", (uint8_t *)&v35, 0x20u);

  }
  objc_autoreleasePoolPop(v24);
  v29 = (void *)MEMORY[0x1E0C99E08];
  objc_msgSend(v11, "messagePayload");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "dictionaryWithDictionary:", v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  HMDRemoteMessagePayloadKeysForTransportMetadata();
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "removeObjectsForKeys:", v32);

  objc_msgSend(v10, "uuid");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "UUIDString");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKey:", v34, CFSTR("kTriggerUUID"));

  if (v12)
    objc_msgSend(v31, "addEntriesFromDictionary:", v12);
  objc_msgSend(v11, "respondWithPayload:", v31);

LABEL_14:
}

- (void)_handleRemoveTrigger:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDTriggerModel *v7;
  void *v8;
  void *v9;
  HMDTriggerModel *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kTriggerUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome triggerWithUUID:](self, "triggerWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = [HMDTriggerModel alloc];
    objc_msgSend(v6, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 3, v8, v9);

    -[HMDHome backingStore](self, "backingStore");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "transaction:options:", v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "add:withMessage:", v10, v4);
    objc_msgSend(v14, "run");

  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v5;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the trigger with UUID %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v19);

  }
}

- (void)_handleRemoveTriggerModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome triggerWithUUID:](self, "triggerWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHome _removeTrigger:message:](self, "_removeTrigger:message:", v9, v7);
    objc_msgSend(v7, "transactionResult");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "markChanged");
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find trigger with UUID %@ to remove.", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v10);
  }

}

- (void)removeTrigger:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __25__HMDHome_removeTrigger___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)removeTriggerNoNotification:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  if (a3)
  {
    v4 = a3;
    objc_msgSend(v4, "invalidate");
    objc_msgSend(v4, "name");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[HMDHome removeName:](self, "removeName:", v5);

    -[HMDHome removeFromCurrentTriggers:](self, "removeFromCurrentTriggers:", v4);
    -[HMDHome ownedTriggers](self, "ownedTriggers");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "removeObject:", v7);
  }
}

- (void)_removeTrigger:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  _QWORD v27[3];
  _QWORD v28[3];
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (v6)
  {
    -[HMDHome removeTriggerNoNotification:](self, "removeTriggerNoNotification:", v6);
    objc_msgSend(v7, "transactionResult");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v8, "markChanged"));
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v12;
      v31 = 2112;
      v32 = v6;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Remove trigger: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHome uuid](v10, "uuid", CFSTR("kHomeUUID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = v14;
    v27[1] = CFSTR("kTriggerName");
    objc_msgSend(v6, "name");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v28[1] = v15;
    v27[2] = CFSTR("kTriggerUUID");
    objc_msgSend(v6, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "UUIDString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v28[2] = v17;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = v10;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v22;
      v31 = 2112;
      v32 = v18;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Successfully Removed trigger : sending back the result: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(v7, "respondWithPayload:", v18);

  }
  else
  {
    v23 = (void *)MEMORY[0x1D17BA0A0]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v26;
      v31 = 2112;
      v32 = 0;
      _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Could not find the Trigger : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v8);
  }

}

- (void)_handleExecuteConfirmationOfTrigger:(id)a3
{
  __CFString *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  _BOOL4 v24;
  const __CFString *v25;
  void *v26;
  HMDRemoteDeviceMessageDestination *v27;
  void *v28;
  HMDRemoteDeviceMessageDestination *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  HMDHome *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  void (**v48)(_QWORD, _QWORD, _QWORD);
  _QWORD v49[4];
  id v50;
  __CFString *v51;
  _QWORD v52[4];
  __CFString *v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  const __CFString *v57;
  __int16 v58;
  __CFString *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = (__CFString *)a3;
  if ((-[__CFString isEntitledForSPIAccess](v4, "isEntitledForSPIAccess") & 1) != 0
    || (-[__CFString isRemote](v4, "isRemote") & 1) != 0)
  {
    -[__CFString uuidForKey:](v4, "uuidForKey:", CFSTR("kTriggerUUID"));
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome triggers](self, "triggers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hmf_firstObjectWithSPIUniqueIdentifier:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = v7;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v10 = v9;

    if (isWatch() || isWatch() && (objc_msgSend(v10, "hasUserConfirmationSession") & 1) == 0)
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = isWatch();
        v25 = CFSTR("non-Tinker HH2");
        *(_DWORD *)buf = 138543874;
        v55 = v23;
        v56 = 2112;
        if (v24)
          v25 = CFSTR("Legacy");
        v57 = v25;
        v58 = 2112;
        v59 = v4;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Received trigger execution confirmation for relay in %@ Watch, %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHome homeManager](v21, "homeManager");
      v19 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "companionDevice");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      if (v26 && objc_msgSend(v19, "companionReachable"))
      {
        v47 = v10;
        v48 = v5;
        v27 = [HMDRemoteDeviceMessageDestination alloc];
        -[HMDHome uuid](v21, "uuid");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v27, "initWithTarget:device:", v28, v26);

        v30 = (void *)MEMORY[0x1E0D285D0];
        -[__CFString messagePayload](v4, "messagePayload");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = (void *)objc_msgSend(v31, "copy");
        objc_msgSend(v30, "messageWithName:qualityOfService:destination:payload:", CFSTR("kConfirmExecuteTriggerRequestKey"), 25, v29, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        v52[0] = MEMORY[0x1E0C809B0];
        v52[1] = 3221225472;
        v52[2] = __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke;
        v52[3] = &unk_1E89C0E20;
        v53 = v4;
        v34 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v33, "setResponseHandler:", v52));
        v35 = v21;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v55 = v37;
          _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@Sending confirmation to companion", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v34);
        objc_msgSend(v19, "messageDispatcher");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "sendMessage:completionHandler:", v33, 0);

        v10 = v47;
        v5 = v48;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 63, 0);
        v29 = (HMDRemoteDeviceMessageDestination *)objc_claimAutoreleasedReturnValue();
        -[__CFString responseHandler](v4, "responseHandler");
        v39 = objc_claimAutoreleasedReturnValue();
        v33 = (void *)v39;
        if (v39)
          (*(void (**)(uint64_t, HMDRemoteDeviceMessageDestination *, _QWORD))(v39 + 16))(v39, v29, 0);
      }

    }
    else
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = v10;
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v55 = v15;
        v56 = 2112;
        v57 = v4;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Received trigger execution confirmation on iOS or HH2 Watch: %@", buf, 0x16u);

        v10 = v14;
      }

      objc_autoreleasePoolPop(v11);
      if (v8)
      {
        v16 = v10;
        v17 = -[__CFString BOOLForKey:](v4, "BOOLForKey:", CFSTR("kTriggerExecuteConfirmationKey"));
        v49[0] = MEMORY[0x1E0C809B0];
        v49[1] = 3221225472;
        v49[2] = __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke_1104;
        v49[3] = &unk_1E89C21C0;
        v50 = v8;
        v51 = v4;
        v18 = v17;
        v10 = v16;
        objc_msgSend(v50, "userDidConfirmExecute:completionHandler:", v18, v49);

        v19 = v50;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
        v19 = (id)objc_claimAutoreleasedReturnValue();
        -[__CFString responseHandler](v4, "responseHandler");
        v45 = objc_claimAutoreleasedReturnValue();
        v46 = (void *)v45;
        if (v45)
          (*(void (**)(uint64_t, id, _QWORD))(v45 + 16))(v45, v19, 0);

      }
    }

    goto LABEL_26;
  }
  v40 = (void *)MEMORY[0x1D17BA0A0]();
  v41 = self;
  HMFGetOSLogHandle();
  v42 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v55 = v43;
    _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI and it's not relayed from watch.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v40);
  -[__CFString responseHandler](v4, "responseHandler");
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  if (v44)
  {
    -[__CFString responseHandler](v4, "responseHandler");
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v5)[2](v5, v8, 0);
LABEL_26:

  }
}

- (void)_handleAllowUserManagementMessage:(id)a3
{
  id v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome isAdminUser](self, "isAdminUser"))
  {
    objc_msgSend(v4, "responseHandler");
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v5[2](v5, 0, MEMORY[0x1E0C9AA70]);
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to allow user management, insufficient privileges", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v10[2](v10, v5, MEMORY[0x1E0C9AA70]);

  }
}

- (id)_getContainerForAppData:(id)a3 keyName:(id *)a4
{
  id v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  HMDHome *v14;

  v6 = a3;
  objc_msgSend(v6, "uuidForKey:", CFSTR("kRoomUUID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    if (a4)
    {
      v8 = objc_retainAutorelease(CFSTR("kRoomUUID"));
      *a4 = CFSTR("kRoomUUID");
    }
    -[HMDHome roomWithUUID:](self, "roomWithUUID:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = (void *)*MEMORY[0x1E0CBAC60];
    objc_msgSend(v6, "uuidForKey:", *MEMORY[0x1E0CBAC60]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      if (a4)
        *a4 = objc_retainAutorelease(v10);
      -[HMDHome serviceGroupWithUUID:](self, "serviceGroupWithUUID:", v11);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v6, "uuidForKey:", CFSTR("kActionSetUUID"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        if (a4)
        {
          v13 = objc_retainAutorelease(CFSTR("kActionSetUUID"));
          *a4 = CFSTR("kActionSetUUID");
        }
        -[HMDHome actionSetWithUUID:](self, "actionSetWithUUID:", v12);
        v14 = (HMDHome *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v14 = self;
      }
      v9 = v14;

    }
  }

  return v9;
}

- (void)_handleSetAppData:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kAppDataInformationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0C99E08];
  objc_msgSend(v4, "messagePayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dictionaryWithCapacity:", objc_msgSend(v7, "count"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v30 = 0;
  -[HMDHome _getContainerForAppData:keyName:](self, "_getContainerForAppData:keyName:", v4, &v30);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v30;
  v11 = v10;
  if (v9)
  {
    if (v10)
    {
      objc_msgSend(v9, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "UUIDString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKey:", v13, v11);

    }
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v32 = v17;
      v33 = 2112;
      v34 = v9;
      v35 = 2112;
      v36 = v5;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Going to update appData for %@ to: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(v9, "appData");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome createModelForAppDataPayload:existingAppData:parentUUID:](v15, "createModelForAppDataPayload:existingAppData:parentUUID:", v5, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      objc_msgSend(v8, "setObject:forKey:", v5, CFSTR("kAppDataInformationKey"));
    if (v20)
    {
      -[HMDHome backingStore](v15, "backingStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v29 = v4;
      v23 = v9;
      v24 = v5;
      v25 = v8;
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "transaction:options:", v22, v26);
      v28 = v11;
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = v25;
      v5 = v24;
      v9 = v23;
      v4 = v29;

      objc_msgSend(v27, "add:withMessage:", v20, v29);
      objc_msgSend(v27, "run");

      v11 = v28;
    }
    else
    {
      objc_msgSend(v4, "respondWithPayload:", 0);
    }

  }
  else
  {
    objc_msgSend(v4, "responseHandler");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v19, 0);
  }

}

- (id)createModelForAppDataPayload:(id)a3 existingAppData:(id)a4 parentUUID:(id)a5
{
  id v7;
  id v8;
  HMDApplicationData *v9;
  HMDApplicationData *v10;
  void *v11;
  void *v12;

  v7 = a3;
  v8 = a5;
  v9 = (HMDApplicationData *)objc_msgSend(a4, "copy");
  v10 = v9;
  if (v7)
  {
    if (!v9)
      v10 = -[HMDApplicationData initWithParentUUID:]([HMDApplicationData alloc], "initWithParentUUID:", v8);
    -[HMDApplicationData setApplicationData:forIdentifier:](v10, "setApplicationData:forIdentifier:", v7, CFSTR("com.apple.homekit-entitledclient.identifer"));
    -[HMDApplicationData modelObjectWithChangeType:](v10, "modelObjectWithChangeType:", 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (!a4)
      objc_msgSend(v11, "setObjectChangeType:", 1);
  }
  else
  {
    -[HMDApplicationData removeApplicationDataForIdentifier:](v9, "removeApplicationDataForIdentifier:", CFSTR("com.apple.homekit-entitledclient.identifer"));
    if (v10)
    {
      -[HMDApplicationData modelObjectWithChangeType:](v10, "modelObjectWithChangeType:", 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = 0;
    }
  }

  return v12;
}

- (void)_handleUpdateAppDataModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDApplicationData *v10;
  void *v11;
  void *v12;
  HMDApplicationData *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome appData](self, "appData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[HMDHome appData](self, "appData");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateWithModel:", v6);

  }
  else
  {
    v10 = [HMDApplicationData alloc];
    objc_msgSend(v6, "appDataDictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMDApplicationData initWithDictionary:parentUUID:](v10, "initWithDictionary:parentUUID:", v11, v12);
    -[HMDHome setAppData:](self, "setAppData:", v13);

    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "appDataDictionary");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v17;
      v22 = 2112;
      v23 = v18;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Updating the application data : %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
  }
  objc_msgSend(v7, "transactionResult");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "markChanged");
  objc_msgSend(v7, "respondWithPayload:", 0);

}

- (void)_handleRemoveAppDataModel:(id)a3 message:(id)a4
{
  id v5;
  id v6;

  v5 = a4;
  -[HMDHome setAppData:](self, "setAppData:", 0);
  objc_msgSend(v5, "transactionResult");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "markChanged");
  objc_msgSend(v5, "respondWithPayload:", 0);

}

- (id)sharedUsers
{
  void *v2;
  void *v3;

  -[HMDHome users](self, "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_1107);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (NSArray)usersSupportingPresence
{
  void *v2;
  void *v3;

  -[HMDHome users](self, "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHome filterUsersSupportingPresence:](HMDHome, "filterUsersSupportingPresence:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)addUser:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    os_unfair_recursive_lock_lock_with_options();
    if ((-[NSMutableArray containsObject:](self->_users, "containsObject:", v4) & 1) == 0)
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = 138543618;
        v11 = v8;
        v12 = 2112;
        v13 = v4;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Adding a new user : %@", (uint8_t *)&v10, 0x16u);

      }
      objc_autoreleasePoolPop(v5);
      -[NSMutableArray addObject:](self->_users, "addObject:", v4);
    }
    os_unfair_recursive_lock_unlock();
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      -[HMDHome homeManager](self, "homeManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "updateCurrentUserEligibleForOwnerToAutoMigration");

    }
  }

}

- (void)_removeUser:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  if (v4)
  {
    v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    if (-[NSMutableArray containsObject:](self->_users, "containsObject:", v5))
      -[NSMutableArray removeObject:](self->_users, "removeObject:", v5);
    os_unfair_recursive_lock_unlock();
    v4 = v5;
  }

}

- (id)owner
{
  HMDUser **p_owner;
  HMDUser *owner;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  p_owner = &self->_owner;
  owner = self->_owner;
  if (!owner)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    -[HMDHome users](self, "users", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (objc_msgSend(v9, "privilege") == 3)
          {
            objc_storeStrong((id *)p_owner, v9);
            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

    owner = *p_owner;
  }
  return owner;
}

- (BOOL)isAdminUser
{
  void *v2;
  char v3;

  -[HMDHome currentUser](self, "currentUser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAdministrator");

  return v3;
}

- (BOOL)isSharedAdmin
{
  _BOOL4 v3;

  v3 = -[HMDHome isAdminUser](self, "isAdminUser");
  if (v3)
    LOBYTE(v3) = !-[HMDHome isOwnerUser](self, "isOwnerUser");
  return v3;
}

- (void)setOwnerUser:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_ownerUser = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isOwnerUser
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_ownerUser;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isSmokeAlarmEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LODWORD(self) = self->_audioAnalysisClassifierOptions & 1;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isSiriPhraseOptionsHeySiriEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LODWORD(self) = self->_siriPhraseOptions & 1;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)isSiriPhraseOptionsJustSiriEnabled
{
  unint64_t v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (self->_siriPhraseOptions >> 1) & 1;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)_updateCurrentUserForSharedHome
{
  void *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  HMDUser *v9;
  HMDUser *currentUser;
  HMDUser *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[HMDHome currentUser](self, "currentUser");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Did not find the current user so adding user for shared home", (uint8_t *)&v13, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHome currentUserFactory](v5, "currentUserFactory");
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, HMDHome *))v8)[2](v8, 0, v5);
    v9 = (HMDUser *)objc_claimAutoreleasedReturnValue();

    currentUser = v5->_currentUser;
    v5->_currentUser = v9;
    v11 = v9;

    -[HMDHome presenceAuthStatus](v5, "presenceAuthStatus");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDUser setPresenceAuthStatus:](v5->_currentUser, "setPresenceAuthStatus:", v12);

    -[HMDHome addUser:](v5, "addUser:", v11);
    -[HMDUser setHome:](v11, "setHome:", v5);

  }
}

- (id)userWithPairingIdentity:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    -[HMDHome users](self, "users", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v14;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v9, "pairingIdentity");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v4, "isEqual:", v10);

          if ((v11 & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
        v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)userWithPairingIdentityIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    -[HMDHome users](self, "users", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(v9, "matchingPairingIdentityIdentifier:", v4) & 1) != 0)
          {
            v6 = v9;
            goto LABEL_12;
          }
        }
        v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)userWithMergeID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void *v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    -[HMDHome users](self, "users", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v34, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v25;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v25 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          objc_msgSend(v10, "account");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "senderCorrelationIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqualToString:", v4);

          if (v13)
          {
            v19 = (void *)MEMORY[0x1D17BA0A0]();
            v20 = self;
            HMFGetOSLogHandle();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v29 = v22;
              v30 = 2112;
              v31 = v4;
              v32 = 2112;
              v33 = v10;
              _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Found user with mergeID %@: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v19);
            v18 = v10;

            goto LABEL_17;
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v34, 16);
        if (v7)
          continue;
        break;
      }
    }

  }
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v29 = v17;
    v30 = 2112;
    v31 = v4;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@No user found with mergeID %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  v18 = 0;
LABEL_17:

  return v18;
}

- (id)_residentUserForResidentDevice:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  HMDResidentUser *v15;
  void *v16;
  HMDResidentUser *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome owner](self, "owner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pairingIdentity");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v4, "device");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = objc_alloc(MEMORY[0x1E0D165A8]);
      objc_msgSend(v7, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUIDString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "publicKey");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "privateKey");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v8, "initWithIdentifier:publicKey:privateKey:permissions:", v10, v11, v12, objc_msgSend(v6, "permissions"));

      if (objc_msgSend(v4, "isEnabled"))
        v14 = 2;
      else
        v14 = 3;
      v15 = [HMDResidentUser alloc];
      objc_msgSend(v4, "home");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = -[HMDResidentUser initWithDevice:home:pairingIdentity:configurationState:](v15, "initWithDevice:home:pairingIdentity:configurationState:", v7, v16, v13, v14);

      -[HMDUser setHome:](v17, "setHome:", self);
      if (-[HMDResidentUser isBlocked](v17, "isBlocked"))
        -[HMDResidentUser setConfigurationState:](v17, "setConfigurationState:", 3);

    }
    else
    {
      v17 = 0;
    }

  }
  else
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v21;
      v25 = 2112;
      v26 = v4;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to retrieve owner's pairing identity to create legacy resident user for device: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    v17 = 0;
  }

  return v17;
}

- (id)_residentDeviceForResidentUser:(id)a3
{
  id v4;
  void *v5;
  HMDResidentDevice *v6;
  void *v7;
  HMDResidentDevice *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "device");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = [HMDResidentDevice alloc];
    objc_msgSend(v4, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMDResidentDevice initWithDevice:identifier:](v6, "initWithDevice:identifier:", v5, v7);

    if (-[HMDHome isResidentSupported](self, "isResidentSupported") || objc_msgSend(v4, "configurationState") != 2)
      -[HMDResidentDevice setEnabled:](v8, "setEnabled:", 0);
    -[HMDHome homeManager](self, "homeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "messageDispatcher");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "remoteAccessDeviceForHome:", self);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v11, "isEqual:", v5) & 1) == 0)
      -[HMDResidentDevice setReachable:](v8, "setReachable:", 0);

  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v4;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Unable to find matching device for resident user: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v8 = 0;
  }

  return v8;
}

- (void)_notifyClientsOfUpdatedResidentUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome _residentDeviceForResidentUser:](self, "_residentDeviceForResidentUser:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated remote access gateway: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome homeManager](v7, "homeManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("ResidentUserUpdated"), v12, 1);

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to find resident for resident user: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (void)_purgeResidentUsers
{
  HMDHome *v2;
  void *v3;
  void *v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  void **p_cache;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  _BYTE v31[128];
  uint64_t v32;

  v2 = self;
  v32 = *MEMORY[0x1E0C80C00];
  -[HMDHome residentCapableDevices](self, "residentCapableDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  -[HMDHome _residentUsers](v2, "_residentUsers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  v22 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v22)
  {
    v7 = *(_QWORD *)v24;
    p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
    *(_QWORD *)&v6 = 138543618;
    v20 = v6;
    v21 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v24 != v7)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v10, "userID", v20);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(p_cache + 123, "deviceWithDestination:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12 && objc_msgSend(v3, "containsObject:", v12))
        {
          v13 = (void *)MEMORY[0x1D17BA0A0]();
          v14 = v2;
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = v5;
            v17 = v3;
            v18 = v2;
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v20;
            v28 = v19;
            v29 = 2112;
            v30 = v10;
            _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing non-legacy resident user from home: %@", buf, 0x16u);

            v2 = v18;
            v3 = v17;
            v5 = v16;
            v7 = v21;
          }

          objc_autoreleasePoolPop(v13);
          -[HMDHome _removeUser:](v14, "_removeUser:", v10);
          p_cache = (void **)(HMDCloudSyncLegacyFetchLogEvent + 16);
        }

      }
      v22 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v22);
  }

}

- (BOOL)_verifyUserManagementPermissionForAccessory:(id)a3 error:(id *)a4
{
  id v6;
  BOOL v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[2];
  _QWORD v25[2];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (!-[HMDHome isAdminUser](self, "isAdminUser"))
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Non administrator cannot perform user management", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    if (a4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 17, CFSTR("Must be administrator to perform user management"), 0, 0);
      v7 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }
LABEL_12:
    v7 = 0;
    goto LABEL_13;
  }
  if ((objc_msgSend(v6, "supportsUserManagement") & 1) == 0)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v15;
      v28 = 2112;
      v29 = v16;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Cannot perform user management on '%@' since it is does not support user management operations", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    if (a4)
    {
      v24[0] = *MEMORY[0x1E0CB2D50];
      v17 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v6, "name");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "stringWithFormat:", CFSTR("Cannot perform user management on '%@'"), v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = v19;
      v24[1] = *MEMORY[0x1E0CB2D68];
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("Accessory is not a primary accessory."), &stru_1E89C3E38, 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25[1] = v21;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 48, v22);
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_12;
  }
  v7 = 1;
LABEL_13:

  return v7;
}

- (BOOL)_isUserValid:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  BOOL v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    if (a4)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v11 = CFSTR("Missing required parameter to validate user");
      v12 = 3;
LABEL_10:
      objc_msgSend(v10, "hmErrorWithCode:description:reason:suggestion:", v12, v11, 0, 0);
      v9 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_12;
    }
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  objc_msgSend(v6, "pairingIdentity");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "userID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v16;
      v21 = 2112;
      v22 = v17;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Invalid user '%@', missing either pairing username or public key", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    if (a4)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v11 = CFSTR("Invalid user information");
      v12 = 21;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  v9 = 1;
LABEL_12:

  return v9;
}

- (void)removeAllUsersAndCloudDataFromAccessory:(id)a3 completionHandler:(id)a4
{
  id v6;
  BOOL v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  char v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t j;
  void *v51;
  void *v52;
  int v53;
  void *v54;
  HMDHome *v55;
  NSObject *v56;
  _BOOL4 v57;
  void *v58;
  void *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  NSObject *v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  HMDHome *v69;
  NSObject *v70;
  void *v71;
  void *v72;
  NSObject *v73;
  void *v74;
  NSObject *v75;
  id v76;
  id v77;
  void (**aBlock)(_QWORD);
  void *v79;
  NSObject *group;
  void *v81;
  void *v82;
  void *v83;
  id obj;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  _QWORD block[4];
  id v89;
  HMDHome *v90;
  id v91;
  id v92;
  void (**v93)(_QWORD);
  _QWORD v94[4];
  id v95;
  HMDHome *v96;
  void *v97;
  id v98;
  id v99;
  NSObject *v100;
  id v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  id v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint8_t buf[4];
  void *v112;
  __int16 v113;
  id v114;
  __int16 v115;
  NSObject *v116;
  __int16 v117;
  id v118;
  _BYTE v119[128];
  _BYTE v120[128];
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  aBlock = (void (**)(_QWORD))a4;
  v7 = -[HMDHome isOwnerUser](self, "isOwnerUser");
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v7)
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v112 = v12;
      v113 = 2112;
      v114 = v6;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing cloud data from primary accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v77 = v6;
    v13 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v76 = v15;
    objc_msgSend(v15, "identifiersForBridgedAccessories");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v107, v120, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v108;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v108 != v19)
            objc_enumerationMutation(v16);
          -[HMDHome accessoryWithUUID:](v9, "accessoryWithUUID:", *(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * i));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "removeCloudData");

        }
        v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v107, v120, 16);
      }
      while (v18);
    }

    objc_msgSend(v13, "removeCloudData");
    -[HMDHome homeManager](v9, "homeManager");
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v82, "backingStore");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "transaction:options:", CFSTR("kUserManagementOperationAddedKey"), v23);
    v81 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = v13;
    if (objc_msgSend(v24, "conformsToProtocol:", &unk_1EFAEB658))
      v25 = v24;
    else
      v25 = 0;
    v26 = v25;
    v87 = v24;

    v27 = objc_msgSend(v26, "supportsDisassociation");
    v83 = 0;
    if ((v27 & 1) != 0)
      goto LABEL_30;
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v9;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v112 = v31;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Creating remove operation for ourselves because accessory does not support disassociation", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v28);
    -[HMDHome currentUser](v29, "currentUser");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v106 = 0;
    -[HMDHome prepareUserManagementOperationForUser:accessory:type:model:error:](v29, "prepareUserManagementOperationForUser:accessory:type:model:error:", v32, v87, 2, 0, &v106);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v106;

    if (!v33)
    {
LABEL_30:
      group = dispatch_group_create();
      -[HMDHome owner](v9, "owner");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "pairingIdentity");
      v79 = (void *)objc_claimAutoreleasedReturnValue();

      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      -[HMDHome users](v9, "users");
      obj = (id)objc_claimAutoreleasedReturnValue();
      v49 = v87;
      v86 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v102, v119, 16);
      if (v86)
      {
        v85 = *(_QWORD *)v103;
        do
        {
          for (j = 0; j != v86; ++j)
          {
            if (*(_QWORD *)v103 != v85)
              objc_enumerationMutation(obj);
            v51 = *(void **)(*((_QWORD *)&v102 + 1) + 8 * j);
            -[HMDHome currentUser](v9, "currentUser");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            v53 = objc_msgSend(v51, "isEqual:", v52);

            v54 = (void *)MEMORY[0x1D17BA0A0]();
            v55 = v9;
            HMFGetOSLogHandle();
            v56 = objc_claimAutoreleasedReturnValue();
            v57 = os_log_type_enabled(v56, OS_LOG_TYPE_INFO);
            if (v53)
            {
              if (v57)
              {
                HMFGetLogIdentifier();
                v58 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v51, "userID");
                v59 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v49, "name");
                v60 = objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v112 = v58;
                v113 = 2112;
                v114 = v59;
                v115 = 2112;
                v116 = v60;
                _os_log_impl(&dword_1CD062000, v56, OS_LOG_TYPE_INFO, "%{public}@Skipping removing current user %@ from accessory %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v54);
            }
            else
            {
              if (v57)
              {
                HMFGetLogIdentifier();
                v61 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v51, "userID");
                v62 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v49, "shortDescription");
                v63 = objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v112 = v61;
                v113 = 2112;
                v114 = v62;
                v115 = 2112;
                v116 = v63;
                _os_log_impl(&dword_1CD062000, v56, OS_LOG_TYPE_INFO, "%{public}@Removing user %@ from accessory %@", buf, 0x20u);

                v49 = v87;
              }

              objc_autoreleasePoolPop(v54);
              v101 = 0;
              -[HMDHome prepareUserManagementOperationForUser:accessory:type:model:error:](v55, "prepareUserManagementOperationForUser:accessory:type:model:error:", v51, v49, 2, 0, &v101);
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              v65 = v101;
              if (v64)
              {
                objc_msgSend(v64, "setOwnerPairingIdentity:", v79);
                objc_msgSend(v83, "addDependency:", v64);
                dispatch_group_enter(group);
                objc_msgSend(v49, "identifier");
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v51, "pairingIdentity");
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                v94[0] = MEMORY[0x1E0C809B0];
                v94[1] = 3221225472;
                v94[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke;
                v94[3] = &unk_1E89A85C8;
                v95 = v64;
                v96 = v55;
                v97 = v51;
                v98 = v87;
                v99 = v81;
                v100 = group;
                objc_msgSend(v82, "cleanupOperationsForAccessory:user:completion:", v66, v67, v94);

                v49 = v87;
              }
              else
              {
                v68 = (void *)MEMORY[0x1D17BA0A0]();
                v69 = v55;
                HMFGetOSLogHandle();
                v70 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v71 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v51, "userID");
                  v72 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v87, "shortDescription");
                  v73 = objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138544130;
                  v112 = v71;
                  v113 = 2112;
                  v114 = v72;
                  v115 = 2112;
                  v116 = v73;
                  v117 = 2112;
                  v118 = v65;
                  _os_log_impl(&dword_1CD062000, v70, OS_LOG_TYPE_INFO, "%{public}@Failed to create remove user operation for user '%@' and accessory '%@': %@", buf, 0x2Au);

                  v49 = v87;
                }

                objc_autoreleasePoolPop(v68);
              }

            }
          }
          v86 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v102, v119, 16);
        }
        while (v86);
      }

      objc_msgSend(v83, "setOwnerPairingIdentity:", v79);
      -[HMDHome workQueue](v9, "workQueue");
      v74 = v49;
      v75 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_1123;
      block[3] = &unk_1E89C0598;
      v43 = v83;
      v89 = v43;
      v90 = v9;
      v91 = v74;
      v42 = v81;
      v92 = v81;
      v40 = aBlock;
      v93 = aBlock;
      v44 = group;
      dispatch_group_notify(group, v75, block);

      v41 = v76;
      v6 = v77;
    }
    else
    {
      v34 = v33;
      v35 = (void *)MEMORY[0x1D17BA0A0]();
      v36 = v29;
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v87, "shortDescription");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v112 = v38;
        v113 = 2112;
        v114 = v39;
        v115 = 2112;
        v116 = v34;
        _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_ERROR, "%{public}@Failed to create remove operation for accessory %@: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v35);
      v6 = v77;
      v40 = aBlock;
      if (aBlock)
        aBlock[2](aBlock);
      v41 = v76;
      v42 = v81;
      v43 = v83;
      v44 = v34;
    }

  }
  else
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "shortDescription");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v112 = v45;
      v113 = 2112;
      v114 = v46;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Not owner of home - bypassing removing users from accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v40 = aBlock;
    v47 = _Block_copy(aBlock);
    v41 = v47;
    if (v47)
      (*((void (**)(void *))v47 + 2))(v47);
  }

}

- (void)_addUsers:(id)a3 accessory:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id obj;
  id v47;
  HMDHome *v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  id v59;
  __int16 v60;
  void *v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v45 = a4;
  -[HMDHome homeManager](self, "homeManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "backingStore");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "transaction:options:", CFSTR("kUserManagementOperationAddedKey"), v9);
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  v48 = self;
  -[HMDHome owner](self, "owner");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "pairingIdentity");
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = v6;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v62, 16);
  if (v11)
  {
    v13 = v11;
    *(_QWORD *)&v12 = 138543874;
    v37 = v12;
    v14 = *(_QWORD *)v51;
    v43 = *(_QWORD *)v51;
    do
    {
      v15 = 0;
      v44 = v13;
      do
      {
        if (*(_QWORD *)v51 != v14)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v15);
        -[HMDHome currentUser](v48, "currentUser", v37);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v16, "isEqual:", v17);

        if ((v18 & 1) == 0)
        {
          v19 = (void *)MEMORY[0x1D17BA0A0]();
          v20 = v48;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "userID");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v55 = v22;
            v56 = 2112;
            v57 = v23;
            _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Adding user '%@' to all accessories in the home", buf, 0x16u);

            v13 = v44;
            v14 = v43;
          }

          objc_autoreleasePoolPop(v19);
          v49 = 0;
          -[HMDHome prepareUserManagementOperationForUser:accessory:type:model:error:](v20, "prepareUserManagementOperationForUser:accessory:type:model:error:", v16, v45, 1, 0, &v49);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = v49;
          v25 = (void *)MEMORY[0x1D17BA0A0]();
          v26 = v20;
          HMFGetOSLogHandle();
          v27 = objc_claimAutoreleasedReturnValue();
          v28 = v27;
          if (v24)
          {
            if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "identifier");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "UUIDString");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "user");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "userID");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "accessory");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "shortDescription");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v55 = v39;
              v56 = 2112;
              v57 = v29;
              v58 = 2112;
              v59 = v30;
              v60 = 2112;
              v61 = v32;
              _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Adding operation '%@' to manager tracking adding user '%@' to accessory '%@'", buf, 0x2Au);

              v14 = v43;
              v13 = v44;

            }
            objc_autoreleasePoolPop(v25);
            objc_msgSend(v24, "setOwnerPairingIdentity:", v41);
            objc_msgSend(v24, "modelObjectWithChangeType:", 1);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "add:", v33);

          }
          else
          {
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v34 = v25;
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "userID");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v37;
              v55 = v35;
              v56 = 2112;
              v57 = v36;
              v58 = 2112;
              v59 = v47;
              _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Failed to prepare add operations for user '%@' with error: %@", buf, 0x20u);

              v25 = v34;
            }

            objc_autoreleasePoolPop(v25);
          }

        }
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v62, 16);
    }
    while (v13);
  }

  objc_msgSend(v42, "run");
}

- (void)_addAllUsersToAccessory:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome users](self, "users");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome _addUsers:accessory:](self, "_addUsers:accessory:", v5, v4);

}

- (id)prepareUserManagementOperationForUser:(id)a3 accessories:(id)a4 type:(unint64_t)a5 error:(id *)a6
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v31;
  unint64_t v32;
  id v33;
  id v34;
  HMDHome *v35;
  id obj;
  id v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  id v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v37 = a3;
  v9 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v9, "count"));
  v34 = (id)objc_claimAutoreleasedReturnValue();
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = v9;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
  if (v10)
  {
    v11 = v10;
    v33 = 0;
    v12 = *(_QWORD *)v40;
    v35 = self;
    v32 = a5;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v40 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
        if ((objc_msgSend(v14, "supportsUserManagement") & 1) != 0)
        {
          v15 = v12;
          v38 = 0;
          -[HMDHome prepareUserManagementOperationForUser:accessory:type:model:error:](self, "prepareUserManagementOperationForUser:accessory:type:model:error:", v37, v14, a5, 0, &v38);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = v38;
          if (v16)
          {
            objc_msgSend(v34, "addObject:", v16);
          }
          else
          {
            v22 = (void *)MEMORY[0x1D17BA0A0]();
            v23 = self;
            HMFGetOSLogHandle();
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "userID");
              v31 = v22;
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "name");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v44 = v25;
              v45 = 2112;
              v46 = v26;
              v47 = 2112;
              v48 = v27;
              v49 = 2112;
              v50 = v17;
              _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to prepare user management operation for user '%@', accessory '%@ with error: %@", buf, 0x2Au);

              v22 = v31;
              self = v35;
            }

            objc_autoreleasePoolPop(v22);
            if (v17)
            {
              v28 = v17;

              v33 = v28;
            }
            a5 = v32;
          }

          v12 = v15;
        }
        else
        {
          v18 = (void *)MEMORY[0x1D17BA0A0]();
          v19 = self;
          HMFGetOSLogHandle();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v44 = v21;
            v45 = 2112;
            v46 = v14;
            _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Skipping creation of user management operation for unmanageable accessory: %@", buf, 0x16u);

            self = v35;
          }

          objc_autoreleasePoolPop(v18);
        }
      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
    }
    while (v11);
  }
  else
  {
    v33 = 0;
  }

  if (a6)
    *a6 = objc_retainAutorelease(v33);

  return v34;
}

- (id)prepareUserManagementOperationForUser:(id)a3 accessory:(id)a4 type:(unint64_t)a5 model:(id)a6 error:(id *)a7
{
  id v12;
  id v13;
  __CFString *v14;
  __CFString *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  __CFString *v20;
  __CFString *v21;
  void *v22;
  _BOOL4 v23;
  id v24;
  void *v25;
  BOOL v26;
  id v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  __CFString *v32;
  void *v33;
  id *v34;
  void *v35;
  uint64_t v36;
  id v38;
  id *v39;
  id v40;
  id v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  __CFString *v45;
  __int16 v46;
  __CFString *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v38 = a6;
  if ((shouldLogPrivateInformation() & 1) != 0)
  {
    objc_msgSend(v12, "userID");
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = CFSTR("...");
    v15 = CFSTR("...");
  }
  v39 = a7;
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (a5 - 1 > 2)
      v20 = CFSTR("unknown");
    else
      v20 = off_1E89B34E0[a5 - 1];
    v21 = v20;
    objc_msgSend(v13, "name");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v43 = v19;
    v44 = 2112;
    v45 = v21;
    v46 = 2112;
    v47 = v14;
    v48 = 2112;
    v49 = v22;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Preparing %@ user operation for user '%@' and accessory '%@'", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v16);
  v41 = 0;
  v23 = -[HMDHome _verifyUserManagementPermissionForAccessory:error:](v17, "_verifyUserManagementPermissionForAccessory:error:", v13, &v41);
  v24 = v41;
  v25 = v24;
  if (!v23
    || (v40 = v24,
        v26 = -[HMDHome _isUserValid:error:](v17, "_isUserValid:error:", v12, &v40),
        v27 = v40,
        v25,
        v25 = v27,
        !v26))
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v17;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "name");
      v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v43 = v31;
      v44 = 2112;
      v45 = v14;
      v46 = 2112;
      v47 = v32;
      v48 = 2112;
      v49 = v25;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Unable to prepare user operation for user '%@' and accessory '%@' due to error: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v28);
  }
  if (v25)
  {
    v33 = 0;
    v35 = v38;
    v34 = v39;
    goto LABEL_23;
  }
  v35 = v38;
  v34 = v39;
  if (a5 == 2)
  {
    +[HMDUserManagementOperation removeUserManagementOperationForUser:accessory:model:](HMDUserManagementOperation, "removeUserManagementOperationForUser:accessory:model:", v12, v13, v38);
    v36 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a5 != 1)
      goto LABEL_22;
    +[HMDUserManagementOperation addUserManagementOperationForUser:accessory:model:](HMDUserManagementOperation, "addUserManagementOperationForUser:accessory:model:", v12, v13, v38);
    v36 = objc_claimAutoreleasedReturnValue();
  }
  v33 = (void *)v36;
  if (v36)
  {
    v25 = 0;
    goto LABEL_23;
  }
LABEL_22:
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 3, CFSTR("Failed to create user operation"), 0, 0, v38);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0;
LABEL_23:
  if (v34)
    *v34 = objc_retainAutorelease(v25);

  return v33;
}

- (void)_cleanRemovedUsers:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHome removedUsers](self, "removedUsers", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v11, "isEqualToUser:", v4))
          objc_msgSend(v5, "addObject:", v11);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  -[HMDHome removedUsers](self, "removedUsers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeObjectsInArray:", v5);

}

- (void)_handleUserInvitations:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDHome *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  void (**v50)(_QWORD, _QWORD, _QWORD);
  void *v51;
  HMDHome *v52;
  NSObject *v53;
  void *v54;
  const char *v55;
  void (**v56)(_QWORD, _QWORD, _QWORD);
  void (**v57)(_QWORD, _QWORD, _QWORD);
  void *v58;
  HMDHome *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  id obj;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  id v70;
  uint8_t v71[128];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t (*v77)();
  _QWORD v78[5];

  v78[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", *MEMORY[0x1E0CB9300]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v37 = (void *)MEMORY[0x1D17BA0A0]();
    v38 = self;
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v73 = v40;
      v74 = 2112;
      v75 = (uint64_t)v41;
      _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_ERROR, "%{public}@Failed to send invitations, missing user invite information: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v37);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
    goto LABEL_38;
  }
  v6 = (void *)MEMORY[0x1E0CB3710];
  v7 = (void *)MEMORY[0x1E0C99E60];
  v78[0] = objc_opt_class();
  v78[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v78, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = 0;
  objc_msgSend(v6, "unarchivedObjectOfClasses:fromData:error:", v9, v5, &v70);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v70;

  v12 = (void *)v10;
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (!v10)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v73 = v42;
      v74 = 2112;
      v75 = (uint64_t)v11;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode user invite information: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v43);

    goto LABEL_37;
  }
  v64 = v11;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome users](v14, "users");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "count");
    *(_DWORD *)buf = 138543874;
    v73 = v17;
    v74 = 2048;
    v75 = v19;
    v76 = 2048;
    v77 = getHMMaximumUsersPerHome;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Adding users; current user count is %ld and max is %ld",
      buf,
      0x20u);

    v12 = (void *)v10;
  }

  objc_autoreleasePoolPop(v13);
  -[HMDHome users](v14, "users");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "count");
  v22 = objc_msgSend(v12, "count") + v21;
  v23 = maximumUsersPerHome;

  if (v22 >= v23)
  {
    v44 = (void *)MEMORY[0x1D17BA0A0]();
    v45 = v14;
    HMFGetOSLogHandle();
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v47 = v12;
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v73 = v48;
      _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_INFO, "%{public}@Can't add users; already at maximum users for home",
        buf,
        0xCu);

      v12 = v47;
    }

    objc_autoreleasePoolPop(v44);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 49, 0);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v50 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v50)[2](v50, v49, 0);

    goto LABEL_29;
  }
  v63 = v4;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  obj = v12;
  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v71, 16);
  if (!v24)
    goto LABEL_19;
  v25 = v24;
  v26 = *(_QWORD *)v67;
  v62 = v12;
  while (2)
  {
    for (i = 0; i != v25; ++i)
    {
      if (*(_QWORD *)v67 != v26)
        objc_enumerationMutation(obj);
      v28 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * i);
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v14;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v73 = v32;
        v74 = 2112;
        v75 = (uint64_t)v28;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Processing invite information : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v29);
      objc_msgSend(v28, "userID");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome users](v30, "users");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "hmf_firstObjectWithValue:forKeyPath:", v33, CFSTR("userID"));
      v35 = (void *)objc_claimAutoreleasedReturnValue();

      if (v35)
      {
        v51 = (void *)MEMORY[0x1D17BA0A0]();
        v52 = v30;
        HMFGetOSLogHandle();
        v53 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v73 = v54;
          v74 = 2112;
          v75 = (uint64_t)v33;
          v55 = "%{public}@Failed to invite user %@ since the user is already part of the home";
LABEL_34:
          _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_INFO, v55, buf, 0x16u);

        }
LABEL_35:

        objc_autoreleasePoolPop(v51);
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 1, 0);
        v56 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v4 = v63;
        objc_msgSend(v63, "responseHandler");
        v57 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v57[2](v57, v56, 0);

LABEL_36:
        v11 = v64;

        v12 = v62;
        goto LABEL_37;
      }
      -[HMDHome outgoingInvitations](v30, "outgoingInvitations");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "hmf_firstObjectWithValue:forKeyPath:", v33, CFSTR("user.userID"));
      v35 = (void *)objc_claimAutoreleasedReturnValue();

      if (v35)
      {
        v51 = (void *)MEMORY[0x1D17BA0A0]();
        v52 = v30;
        HMFGetOSLogHandle();
        v53 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v73 = v54;
          v74 = 2112;
          v75 = (uint64_t)v33;
          v55 = "%{public}@Failed to invite user %@ since the user is already invited to the home";
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      if (objc_msgSend(v28, "isAdministrator")
        && !-[HMDHome isResidentSupported](v30, "isResidentSupported"))
      {
        v58 = (void *)MEMORY[0x1D17BA0A0]();
        v59 = v30;
        HMFGetOSLogHandle();
        v60 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v73 = v61;
          v74 = 2112;
          v75 = (uint64_t)v33;
          _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_INFO, "%{public}@Cannot invite admin user %@ because it requires a resident", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v58);
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 48, 0);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = v63;
        objc_msgSend(v63, "responseHandler");
        v56 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v56)[2](v56, v35, 0);
        goto LABEL_36;
      }

    }
    v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v71, 16);
    v12 = v62;
    if (v25)
      continue;
    break;
  }
LABEL_19:

  v4 = v63;
  -[HMDHome _addUsersWithInviteInformations:message:](v14, "_addUsersWithInviteInformations:message:", obj, v63);
LABEL_29:
  v11 = v64;
LABEL_37:

LABEL_38:
}

- (void)_handleAddOutgoingHomeInvitationModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDOutgoingHomeInvitation *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  HMDOutgoingHomeInvitation *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  id location;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  HMDOutgoingHomeInvitation *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome outgoingInvitationWithUUID:](self, "outgoingInvitationWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    objc_msgSend(v6, "user");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDUser userWithDictionary:home:](HMDUser, "userWithDictionary:home:", v10, self);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v30, "refreshDisplayName");
    v11 = [HMDOutgoingHomeInvitation alloc];
    objc_msgSend(v6, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "invitationState");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "integerValue");
    objc_msgSend(v6, "expiryDate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[HMDOutgoingHomeInvitation initWithUUID:invitee:invitationState:forHome:expiryDate:messageIdentifier:](v11, "initWithUUID:invitee:invitationState:forHome:expiryDate:messageIdentifier:", v12, v30, v14, self, v15, 0);

    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v37 = v20;
      v38 = 2112;
      v39 = v30;
      v40 = 2112;
      v41 = 0;
      v42 = 2112;
      v43 = v16;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Created user [%@] from outgoing invitation: %@ / %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v17);
    v21 = objc_alloc(MEMORY[0x1E0D285D0]);
    objc_msgSend(MEMORY[0x1E0D285D8], "allMessageDestinations");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)objc_msgSend(v21, "initWithName:destination:payload:", CFSTR("kTransactionUpdate"), v22, 0);
    -[HMDOutgoingHomeInvitation transactionObjectUpdated:newValues:message:](v16, "transactionObjectUpdated:newValues:message:", 0, v6, v23);

    -[HMDHome workQueue](v18, "workQueue");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeInvitation setClientQueue:](v16, "setClientQueue:", v24);

    objc_initWeak((id *)buf, v18);
    objc_initWeak(&location, v16);
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = __57__HMDHome__handleAddOutgoingHomeInvitationModel_message___block_invoke;
    v31[3] = &unk_1E89BF2A0;
    objc_copyWeak(&v33, (id *)buf);
    objc_copyWeak(&v34, &location);
    v25 = v7;
    v32 = v25;
    -[HMDHomeInvitation setExpirationHandler:](v16, "setExpirationHandler:", v31);
    -[HMDHome addOutgoingInvitation:](v18, "addOutgoingInvitation:", v16);
    -[HMDHome _cleanRemovedUsers:](v18, "_cleanRemovedUsers:", v30);
    -[HMDOutgoingHomeInvitation notifyStateChangedForMessage:](v16, "notifyStateChangedForMessage:", v25);
    if (-[HMDHome isOwnerUser](v18, "isOwnerUser"))
    {
      -[HMDHome home](v18, "home");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "homeManager");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "updateCurrentUserEligibleForOwnerToAutoMigration");

      -[HMDHome homeManager](v18, "homeManager");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setLastUserAddRemoveTimestamp");

    }
    objc_msgSend(v25, "transactionResult");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "markChanged");

    objc_destroyWeak(&v34);
    objc_destroyWeak(&v33);
    objc_destroyWeak(&location);
    objc_destroyWeak((id *)buf);

  }
}

- (void)_handleRemoveOutgoingHomeInvitationModel:(id)a3 message:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a4;
  objc_msgSend(a3, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome outgoingInvitationWithUUID:](self, "outgoingInvitationWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[HMDHome removeOutgoingInvitation:](self, "removeOutgoingInvitation:", v7);
    objc_msgSend(v13, "transactionResult");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "markChanged");
    objc_msgSend(v7, "user");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome userWithUUID:](self, "userWithUUID:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      -[HMDHome __handleCompletedOutgoingInvitation:](self, "__handleCompletedOutgoingInvitation:", v7);
    }
    else
    {
      if (objc_msgSend(v8, "source") == 2 || objc_msgSend(v8, "source") == 3)
        objc_msgSend(v7, "cancel");
      else
        -[HMDHome __handleCancelledOutgoingInvitation:](self, "__handleCancelledOutgoingInvitation:", v7);
      objc_msgSend(v7, "updateInvitationState:", 1);
    }
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      -[HMDHome homeManager](self, "homeManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setLastUserAddRemoveTimestamp");

    }
  }
  objc_msgSend(v13, "respondWithPayload:", 0);

}

- (void)__sendOutgoingInvitations:(id)a3 suppressHomeInviteNotification:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v4 = a4;
  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        if (self)
        {
          v11 = *(id *)(*((_QWORD *)&v13 + 1) + 8 * v10);
          objc_msgSend(v11, "user");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _cleanRemovedUsers:](self, "_cleanRemovedUsers:", v12);

          -[HMDHome _sendInvitation:message:shareURL:shareToken:suppressHomeInviteNotification:](self, "_sendInvitation:message:shareURL:shareToken:suppressHomeInviteNotification:", v11, 0, 0, 0, v4);
        }
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

}

- (void)_addUsersWithInviteInformations:(id)a3 message:(id)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  HMDUser *v16;
  uint64_t v17;
  HMDOutgoingHomeInvitation *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void (**v23)(_QWORD);
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id obj;
  void *v37;
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  _QWORD aBlock[4];
  id v43;
  id v44;
  char v45;
  id location;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v35 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v47 = 0u;
  obj = v6;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v53, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v48;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v48 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        v12 = objc_msgSend((id)objc_opt_class(), "privilegeFromUserInviteInformation:", v11);
        +[HMDAccountHandleFormatter defaultFormatter](HMDAccountHandleFormatter, "defaultFormatter");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "userID");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "accountHandleFromString:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        v16 = -[HMDUser initWithAccountHandle:home:pairingIdentity:privilege:]([HMDUser alloc], "initWithAccountHandle:home:pairingIdentity:privilege:", v15, self, 0, v12);
        -[HMDUser refreshDisplayName](v16, "refreshDisplayName");
        -[HMDUser setRemoteAccessAllowed:](v16, "setRemoteAccessAllowed:", objc_msgSend(v11, "isRemoteAccessAllowed"));
        -[HMDUser setCamerasAccessLevel:](v16, "setCamerasAccessLevel:", objc_msgSend(v11, "camerasAccessLevel"));
        if (objc_msgSend(v11, "isAnnounceAccessAllowed"))
          v17 = 2;
        else
          v17 = 1;
        -[HMDUser setAnnounceAccessLevel:](v16, "setAnnounceAccessLevel:", v17);
        v18 = -[HMDOutgoingHomeInvitation initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:]([HMDOutgoingHomeInvitation alloc], "initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:", v16, 2, self, 0, 0);
        objc_msgSend(v7, "addObject:", v18);
        -[HMDHomeInvitation invitationData](v18, "invitationData");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "addObject:", v19);

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v53, 16);
    }
    while (v8);
  }

  v20 = _os_feature_enabled_impl();
  objc_initWeak(&location, self);
  v21 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke;
  aBlock[3] = &unk_1E89B90E8;
  objc_copyWeak(&v44, &location);
  v22 = v7;
  v43 = v22;
  v45 = v20;
  v23 = (void (**)(_QWORD))_Block_copy(aBlock);
  -[HMDHome _addOutgoingInvitations:message:transactionCompleted:](self, "_addOutgoingInvitations:message:transactionCompleted:", v22, v35, 0);
  -[HMDHome administratorHandler](self, "administratorHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v24, "shouldRelayMessages"))
  {
    encodeRootObject();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v51[0] = CFSTR("HM.invitations");
    v51[1] = CFSTR("HMDHomeSuppressInviteNotificationKey");
    v52[0] = v33;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v20);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v52[1] = v25;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52, v51, 2);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = (void *)MEMORY[0x1E0D285F8];
    v39[0] = v21;
    v39[1] = 3221225472;
    v39[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_2;
    v39[3] = &unk_1E89BF4F0;
    objc_copyWeak(&v41, &location);
    v40 = v22;
    objc_msgSend(v26, "messageWithName:messagePayload:responseHandler:", CFSTR("kAddHomeInvitesInternalRequestKey"), v34, v39);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMDHome uuid](self, "uuid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = (void *)objc_msgSend(v28, "initWithTarget:", v29);

    objc_msgSend(v27, "setDestination:", v30);
    objc_msgSend(v27, "setQualityOfService:", 33);
    v38 = 0;
    objc_msgSend(v24, "operationForMessage:error:", v27, &v38);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v38;
    if (v31)
      objc_msgSend(v24, "addOperation:", v31);

    objc_destroyWeak(&v41);
  }
  else
  {
    v23[2](v23);
  }

  objc_destroyWeak(&v44);
  objc_destroyWeak(&location);

}

- (void)_handleUpdateUserCamerasAccessLevel:(id)a3
{
  id v4;
  __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  __CFString *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  __CFString *v39;
  void *v40;
  void *v41;
  void *v42;
  _QWORD v43[4];
  id v44;
  id v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  const __CFString *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  -[HMDHome users](self, "users");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("userID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v47 = v17;
      v48 = 2112;
      v49 = v5;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v12 = (void *)MEMORY[0x1E0CB35C8];
    v13 = 2;
    goto LABEL_9;
  }
  if (!objc_msgSend(v7, "isOwner"))
  {
    v18 = (void *)objc_msgSend(v7, "newModelWithChangeType:", 2);
    objc_msgSend(v4, "numberForKey:", CFSTR("kUserCamerasAccessLevelInformationKey"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v19)
    {
      v21 = objc_msgSend(v19, "integerValue");
      if ((HMUserIsValidCameraAccessLevel() & 1) != 0)
      {
        v22 = objc_msgSend(v7, "camerasAccessLevel");
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = self;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = v25;
        if (v22 != v21)
        {
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            HMUserCameraAccessLevelAsString();
            v39 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v47 = v38;
            v48 = 2112;
            v49 = v39;
            v50 = 2112;
            v51 = v7;
            _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Updating cameras access level to %@ for user: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v23);
          objc_msgSend(v18, "setCamerasAccessLevel:", v20);
          -[HMDHome backingStore](v24, "backingStore");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "name");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "transaction:options:", v41, v42);
          v37 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v37, "add:", v18);
          v43[0] = MEMORY[0x1E0C809B0];
          v43[1] = 3221225472;
          v43[2] = __47__HMDHome__handleUpdateUserCamerasAccessLevel___block_invoke;
          v43[3] = &unk_1E89C21C0;
          v44 = v4;
          v45 = v20;
          objc_msgSend(v37, "run:", v43);

          goto LABEL_24;
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          HMUserCameraAccessLevelAsString();
          v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v47 = v27;
          v48 = 2112;
          v49 = v28;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Cameras access level: %@ already set", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
        v29 = (void *)MEMORY[0x1E0CB35C8];
        v30 = 1;
LABEL_23:
        objc_msgSend(v29, "hmErrorWithCode:", v30);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v37);
LABEL_24:

        goto LABEL_25;
      }
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = self;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v47 = v36;
        v48 = 2048;
        v49 = (const __CFString *)v21;
        _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@Invalid cameras access level value: %ld", buf, 0x16u);

      }
    }
    else
    {
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v47 = v34;
        v48 = 2112;
        v49 = CFSTR("kUserCamerasAccessLevelInformationKey");
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing value for key: %@", buf, 0x16u);

      }
    }

    objc_autoreleasePoolPop(v31);
    v29 = (void *)MEMORY[0x1E0CB35C8];
    v30 = 3;
    goto LABEL_23;
  }
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v47 = v11;
    v48 = 2112;
    v49 = v5;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot modify cameras access level for owner of the home: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v12 = (void *)MEMORY[0x1E0CB35C8];
  v13 = 48;
LABEL_9:
  objc_msgSend(v12, "hmErrorWithCode:", v13);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v18);
LABEL_25:

}

- (void)_handleUpdateUserAccess:(id)a3
{
  id v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  HMDHome *v46;
  NSObject *v47;
  void *v48;
  const __CFString *v49;
  void *v50;
  void *v51;
  _QWORD v52[4];
  id v53;
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  const __CFString *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0 || (objc_msgSend(v4, "isRemote") & 1) != 0)
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome users](self, "users");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("userID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v18;
        v57 = 2112;
        v58 = v5;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      v12 = (void *)MEMORY[0x1E0CB35C8];
      v13 = *MEMORY[0x1E0CB8C70];
      v14 = 2;
      goto LABEL_11;
    }
    if (objc_msgSend(v7, "isOwner"))
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v11;
        v57 = 2112;
        v58 = v5;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot modify the owner of the home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      v12 = (void *)MEMORY[0x1E0CB35C8];
      v13 = *MEMORY[0x1E0CB8C70];
      v14 = 17;
LABEL_11:
      objc_msgSend(v12, "errorWithDomain:code:userInfo:", v13, v14, 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v19, 0);
LABEL_42:

      goto LABEL_43;
    }
    -[HMDHome currentUser](self, "currentUser");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v19, "isAdministrator") & 1) == 0)
    {
      v34 = (void *)MEMORY[0x1D17BA0A0]();
      v35 = self;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v37;
        v57 = 2112;
        v58 = v19;
        _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v34);
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 17, 0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v26, 0);
      goto LABEL_41;
    }
    v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_msgSend(v7, "newModelWithChangeType:", 2);
    objc_msgSend(v4, "numberForKey:", CFSTR("kUserAdministratorInformationKey"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v25;
    if (!v25)
      goto LABEL_25;
    v27 = objc_msgSend(v25, "BOOLValue");
    if (v27 && !-[HMDHome isResidentSupported](self, "isResidentSupported"))
    {
      v38 = (void *)MEMORY[0x1D17BA0A0]();
      v39 = self;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v41;
        v57 = 2112;
        v58 = v5;
        _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Cannot update user %@ to administrator because it requires a resident", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v38);
      v42 = (void *)MEMORY[0x1E0CB35C8];
      v43 = *MEMORY[0x1E0CB8C70];
      v44 = 48;
    }
    else
    {
      if (!objc_msgSend(v7, "privilege") || objc_msgSend(v7, "privilege") == 4)
      {
        if (v27)
          v28 = &unk_1E8B32820;
        else
          v28 = &unk_1E8B327D8;
        objc_msgSend(v20, "setPrivilege:", v28);
        objc_msgSend(v7, "privilege");
LABEL_25:
        v50 = v26;
        objc_msgSend(v4, "numberForKey:", CFSTR("kUserRemoteAccessInformationKey"));
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (v29)
          objc_msgSend(v20, "setRemoteAccessAllowed:", v29);
        -[HMDHome backingStore](self, "backingStore");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "transaction:options:", v31, v32);
        v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

        objc_msgSend(v33, "add:", v20);
        v52[0] = MEMORY[0x1E0C809B0];
        v52[1] = 3221225472;
        v52[2] = __35__HMDHome__handleUpdateUserAccess___block_invoke;
        v52[3] = &unk_1E89C21C0;
        v53 = v4;
        v54 = v7;
        objc_msgSend(v33, "run:", v52);

        v26 = v50;
        goto LABEL_40;
      }
      v45 = (void *)MEMORY[0x1D17BA0A0]();
      v46 = self;
      HMFGetOSLogHandle();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v51 = v45;
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = CFSTR("non-");
        *(_DWORD *)buf = 138543874;
        v56 = v48;
        v57 = 2112;
        if (v27)
          v49 = &stru_1E89C3E38;
        v58 = v5;
        v59 = 2112;
        v60 = v49;
        _os_log_impl(&dword_1CD062000, v47, OS_LOG_TYPE_INFO, "%{public}@Failed to update user %@ to %@administrator", buf, 0x20u);

        v45 = v51;
      }

      objc_autoreleasePoolPop(v45);
      v42 = (void *)MEMORY[0x1E0CB35C8];
      v43 = *MEMORY[0x1E0CB8C70];
      v44 = 10;
    }
    objc_msgSend(v42, "errorWithDomain:code:userInfo:", v43, v44, 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v33)[2](v33, v29, 0);
LABEL_40:

LABEL_41:
    goto LABEL_42;
  }
  v21 = (void *)MEMORY[0x1D17BA0A0]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v56 = v24;
    _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to update users to home", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
  objc_msgSend(v4, "responseHandler");
  v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 17, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v5)[2](v5, v7, 0);
LABEL_43:

}

- (void)_handleUpdateUserAnnounceAccess:(id)a3
{
  id v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0 || (objc_msgSend(v4, "isRemote") & 1) != 0)
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    -[HMDHome users](self, "users");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("userID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      -[HMDHome currentUser](self, "currentUser");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v8, "isAdministrator") & 1) != 0)
      {
        v9 = (void *)objc_msgSend(v7, "newModelWithChangeType:", 2);
        objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB92E8]);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          objc_msgSend(v9, "setAnnounceAccessAllowed:", v10);
          if (objc_msgSend(v10, "BOOLValue"))
            v11 = &unk_1E8B32838;
          else
            v11 = &unk_1E8B32850;
          objc_msgSend(v9, "setAnnounceAccessLevel:", v11);
        }
        -[HMDHome backingStore](self, "backingStore");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "transaction:options:", v13, v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v15, "add:withMessage:", v9, v4);
        objc_msgSend(v15, "run");

        goto LABEL_21;
      }
      v25 = (void *)MEMORY[0x1D17BA0A0]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v28;
        v32 = 2112;
        v33 = v8;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Current user is not an administrator, cannot modify access: %@", (uint8_t *)&v30, 0x16u);

      }
      objc_autoreleasePoolPop(v25);
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 17, 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v29, 0);

    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v19;
        v32 = 2112;
        v33 = v5;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to find user %@", (uint8_t *)&v30, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v8, 0);
    }

LABEL_21:
    goto LABEL_22;
  }
  v21 = (void *)MEMORY[0x1D17BA0A0]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543362;
    v31 = v24;
    _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to update users to home", (uint8_t *)&v30, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
  objc_msgSend(v4, "responseHandler");
  v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 17, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v5)[2](v5, v7, 0);
LABEL_22:

}

- (void)_handleUpdatePresenceConsent:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  HMDHomeModel *v16;
  uint64_t v17;
  HMDHomeModel *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  id v33;
  HMDHome *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0CBA950], "authWithMessage:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Received nil presence auth", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v4, "responseHandler");
    v16 = (HMDHomeModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 17, 0);
    v17 = objc_claimAutoreleasedReturnValue();
    goto LABEL_15;
  }
  -[HMDHome presenceAuthStatus](self, "presenceAuthStatus");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = HMFEqualObjects();

  if (v7)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v11;
      v37 = 2112;
      v38 = v5;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Presence auth status is already set to %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
LABEL_14:
    objc_msgSend(v4, "responseHandler");
    v16 = (HMDHomeModel *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v17 = objc_claimAutoreleasedReturnValue();
LABEL_15:
    v26 = (void *)v17;
    (*(void (**)(HMDHomeModel *, uint64_t, _QWORD))&v16->super._bsoDataVersionOverride)(v16, v17, 0);
    goto LABEL_16;
  }
  if ((unint64_t)(objc_msgSend(v5, "value") - 1) < 2)
  {
    v18 = [HMDHomeModel alloc];
    -[HMDHome uuid](self, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](self, "homeManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 2, v19, v21);

    objc_msgSend(v5, "number");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setPresenceAuthorizationStatus:](v16, "setPresenceAuthorizationStatus:", v22);

    -[HMDHome backingStore](self, "backingStore");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "transaction:options:", v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v26, "add:", v16);
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __40__HMDHome__handleUpdatePresenceConsent___block_invoke;
    v32[3] = &unk_1E89C21C0;
    v33 = v4;
    v34 = self;
    objc_msgSend(v26, "run:", v32);

LABEL_16:
    goto LABEL_17;
  }
  v27 = (void *)MEMORY[0x1D17BA0A0]();
  v28 = self;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v36 = v30;
    v37 = 2112;
    v38 = v5;
    _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@Received invalid parameter for presence authorization: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v27);
  objc_msgSend(v4, "responseHandler");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (v31)
    goto LABEL_14;
LABEL_17:

}

- (void)_handleRemoveUser:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  int v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void (**v26)(_QWORD, _QWORD, _QWORD);
  void *v27;
  int v28;
  void *v29;
  __int16 v30;
  void (**v31)(_QWORD, _QWORD, _QWORD);
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0 || (objc_msgSend(v4, "isRemote") & 1) != 0)
  {
    objc_msgSend(v4, "uuidForKey:", CFSTR("kUserUUIDKey"));
    v5 = objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v19)[2](v19, v18, 0);

      v6 = 0;
LABEL_20:

      goto LABEL_21;
    }
    v6 = (void *)v5;
    -[HMDHome users](self, "users");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "hmf_firstObjectWithUUID:", v6);
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v9 = objc_msgSend(v8, "isOwner");
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (!v9)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = 138543618;
          v29 = v27;
          v30 = 2112;
          v31 = v8;
          _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Removing user: %@", (uint8_t *)&v28, 0x16u);

        }
        objc_autoreleasePoolPop(v10);
        -[HMDHome _removeUser:message:](v11, "_removeUser:message:", v8, v4);
        goto LABEL_19;
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138543362;
        v29 = v14;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Owner cannot be removed from home", (uint8_t *)&v28, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      v15 = (void *)MEMORY[0x1E0CB35C8];
      v16 = *MEMORY[0x1E0CB8C70];
      v17 = 17;
    }
    else
    {
      v15 = (void *)MEMORY[0x1E0CB35C8];
      v16 = *MEMORY[0x1E0CB8C70];
      v17 = 2;
    }
    objc_msgSend(v15, "errorWithDomain:code:userInfo:", v16, v17, 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v26 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v26)[2](v26, v25, 0);

LABEL_19:
    goto LABEL_20;
  }
  v20 = (void *)MEMORY[0x1D17BA0A0]();
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 138543362;
    v29 = v23;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@User management (remove) not supported for non-SPI clients", (uint8_t *)&v28, 0xCu);

  }
  objc_autoreleasePoolPop(v20);
  objc_msgSend(v4, "responseHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v6, 0);
    goto LABEL_19;
  }
LABEL_21:

}

- (void)removeUserWithUserID:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __32__HMDHome_removeUserWithUserID___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)removeUser:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v12 = v8;
    v13 = 2112;
    v14 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to remove user: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __22__HMDHome_removeUser___block_invoke;
  v10[3] = &unk_1E89C0E20;
  v10[4] = v6;
  objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:messagePayload:responseHandler:", CFSTR("kDataSyncResponseNAckKey"), 0, v10);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _removeUser:message:](v6, "_removeUser:message:", v4, v9);

}

- (void)_removeOutgoingInvitationForUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v4 = a3;
  -[HMDHome __modelObjectsForRemovingOutgoingInvitationForUser:](self, "__modelObjectsForRemovingOutgoingInvitationForUser:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "hmf_isEmpty") & 1) == 0)
  {
    -[HMDHome backingStore](self, "backingStore");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "transaction:options:", CFSTR("removeOutgoingInvitation"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "addObjects:", v5);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __44__HMDHome__removeOutgoingInvitationForUser___block_invoke;
    v9[3] = &unk_1E89C0DA8;
    v9[4] = self;
    v10 = v4;
    v11 = v5;
    objc_msgSend(v8, "run:", v9);

  }
}

- (id)__modelObjectsForRemovingOutgoingInvitationForUser:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  id v16;
  void *v17;
  HMDOutgoingHomeInvitationModel *v18;
  void *v19;
  void *v20;
  HMDOutgoingHomeInvitationModel *v21;
  HMDHome *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    -[HMDHome outgoingInvitations](self, "outgoingInvitations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v6)
    {
      v7 = v6;
      v23 = self;
      v8 = *(_QWORD *)v25;
LABEL_4:
      v9 = 0;
      while (1)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v9);
        objc_msgSend(v10, "user");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          objc_msgSend(v4, "userID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "userID");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v12, "isEqualToString:", v13);

          if ((v14 & 1) != 0)
            break;
        }

        if (v7 == ++v9)
        {
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
          if (v7)
            goto LABEL_4;
          goto LABEL_11;
        }
      }
      v16 = v10;

      if (!v16)
        goto LABEL_15;
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = [HMDOutgoingHomeInvitationModel alloc];
      objc_msgSend(v16, "identifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v23, "uuid");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 3, v19, v20);

      objc_msgSend(v17, "addObject:", v21);
      v15 = (void *)objc_msgSend(v17, "copy");

      v5 = v16;
    }
    else
    {
LABEL_11:
      v15 = (void *)MEMORY[0x1E0C9AA60];
    }

  }
  else
  {
LABEL_15:
    v15 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v15;
}

- (void)_removeUser:(id)a3 message:(id)a4
{
  id v5;
  id v6;
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  void *v21;
  __CFString *v22;
  void (**v23)(_QWORD, _QWORD, _QWORD);
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  uint64_t i;
  void *v33;
  void *v34;
  __CFString *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  __CFString *v41;
  void *v42;
  __CFString *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  __CFString *v54;
  uint64_t v55;
  id obj;
  uint64_t v58;
  void (**v59)(_QWORD, _QWORD, _QWORD);
  NSObject *group;
  uint64_t v61;
  __CFString *v62;
  _QWORD block[5];
  void (**v64)(_QWORD, _QWORD, _QWORD);
  id v65;
  id v66;
  _QWORD v67[4];
  NSObject *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  id v73;
  _QWORD v74[5];
  uint8_t v75[128];
  uint8_t buf[4];
  void *v77;
  __int16 v78;
  __CFString *v79;
  __int16 v80;
  __CFString *v81;
  __int16 v82;
  __CFString *v83;
  __int16 v84;
  id v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  if ((shouldLogPrivateInformation() & 1) != 0)
  {
    objc_msgSend(v5, "userID");
    v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v54 = CFSTR("...");
    v7 = CFSTR("...");
  }
  objc_msgSend(v5, "pairingIdentity");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[HMDHome homeManager](self, "homeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
      && (!objc_msgSend(v5, "privilege") || objc_msgSend(v5, "privilege") == 4))
    {
      v74[0] = MEMORY[0x1E0C809B0];
      v74[1] = 3221225472;
      v74[2] = __31__HMDHome__removeUser_message___block_invoke;
      v74[3] = &unk_1E89BBF48;
      v74[4] = self;
      -[HMDHome incrementOperatePrivilegeCATVersion:](self, "incrementOperatePrivilegeCATVersion:", v74);
    }
    objc_msgSend(v9, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", CFSTR("kUserManagementOperationAddedKey"), v11);
    v55 = objc_claimAutoreleasedReturnValue();

    -[HMDHome accessories](self, "accessories");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = 0;
    -[HMDHome prepareUserManagementOperationForUser:accessories:type:error:](self, "prepareUserManagementOperationForUser:accessories:type:error:", v5, v12, 2, &v73);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v73;

    v52 = v13;
    v53 = v14;
    if (v14)
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = (__CFString *)objc_opt_class();
        v20 = v19;
        -[HMDHome name](v16, "name");
        v21 = v9;
        v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v77 = v18;
        v78 = 2112;
        v79 = v19;
        v80 = 2112;
        v81 = v22;
        v82 = 2112;
        v83 = v54;
        v84 = 2112;
        v85 = v53;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@[%@ %@] Failed to prepare remove operations for user '%@' with error: %@", buf, 0x34u);

        v9 = v21;
      }

      objc_autoreleasePoolPop(v15);
      objc_msgSend(v6, "responseHandler");
      v23 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v24 = v53;
      ((void (**)(_QWORD, id, _QWORD))v23)[2](v23, v53, 0);
      v25 = (void (**)(_QWORD, _QWORD, _QWORD))v55;
    }
    else
    {
      v50 = v6;
      v51 = v5;
      -[HMDHome owner](self, "owner");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "pairingIdentity");
      v23 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      group = dispatch_group_create();
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      obj = v13;
      v25 = (void (**)(_QWORD, _QWORD, _QWORD))v55;
      v31 = self;
      v61 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v75, 16);
      if (v61)
      {
        v58 = *(_QWORD *)v70;
        v59 = v23;
        do
        {
          for (i = 0; i != v61; ++i)
          {
            if (*(_QWORD *)v70 != v58)
              objc_enumerationMutation(obj);
            v33 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
            if ((shouldLogPrivateInformation() & 1) != 0)
            {
              objc_msgSend(v33, "user");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "userID");
              v62 = (__CFString *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v35 = CFSTR("...");
              v62 = CFSTR("...");
            }
            v36 = (void *)MEMORY[0x1D17BA0A0]();
            v37 = v31;
            HMFGetOSLogHandle();
            v38 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "identifier");
              v40 = v9;
              v41 = (__CFString *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "accessory");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "shortDescription");
              v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v77 = v39;
              v78 = 2112;
              v79 = v41;
              v80 = 2112;
              v81 = v62;
              v82 = 2112;
              v83 = v43;
              _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_INFO, "%{public}@Adding operation '%@' to manager tracking remove user '%@' from accessory '%@'", buf, 0x2Au);

              v31 = self;
              v9 = v40;
              v25 = (void (**)(_QWORD, _QWORD, _QWORD))v55;

            }
            objc_autoreleasePoolPop(v36);
            dispatch_group_enter(group);
            objc_msgSend(v33, "accessory");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "identifier");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "user");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "pairingIdentity");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            v67[0] = MEMORY[0x1E0C809B0];
            v67[1] = 3221225472;
            v67[2] = __31__HMDHome__removeUser_message___block_invoke_1144;
            v67[3] = &unk_1E89C2350;
            v68 = group;
            objc_msgSend(v9, "cleanupOperationsForAccessory:user:completion:", v45, v47, v67);

            v23 = v59;
            objc_msgSend(v33, "setOwnerPairingIdentity:", v59);
            objc_msgSend(v33, "modelObjectWithChangeType:", 1);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "add:", v48);

          }
          v61 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v75, 16);
        }
        while (v61);
      }

      -[HMDHome workQueue](v31, "workQueue");
      v49 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __31__HMDHome__removeUser_message___block_invoke_2;
      block[3] = &unk_1E89C07B8;
      block[4] = v31;
      v64 = v25;
      v5 = v51;
      v65 = v51;
      v6 = v50;
      v66 = v50;
      dispatch_group_notify(group, v49, block);

      v24 = 0;
    }

    goto LABEL_31;
  }
  v26 = (void *)MEMORY[0x1D17BA0A0]();
  v27 = self;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v77 = v29;
    v78 = 2112;
    v79 = v54;
    _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve user with name: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v26);
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "responseHandler");
    v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v25)[2](v25, v9, 0);
LABEL_31:

  }
}

- (void)_removeUserFromContainer:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome presenceMonitor](self, "presenceMonitor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeUser:", v4);

  objc_msgSend(v4, "removeCloudData");
  -[HMDHome _removeUser:](self, "_removeUser:", v4);
  objc_msgSend(v4, "unconfigure");
  -[HMDHome notificationCenter](self, "notificationCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = CFSTR("HMDUserNotificationKey");
  v10[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "postNotificationName:object:userInfo:", CFSTR("HMDHomeUserRemovedNotification"), self, v7);
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    -[HMDHome homeManager](self, "homeManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLastUserAddRemoveTimestamp");

  }
}

- (void)_addUserToContainer:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome addUser:](self, "addUser:", v4);
  -[HMDHome presenceMonitor](self, "presenceMonitor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addNewUser:", v4);

  -[HMDHome notificationCenter](self, "notificationCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = CFSTR("HMDUserNotificationKey");
  v10[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "postNotificationName:object:userInfo:", CFSTR("HMDHomeUserAddedNotification"), self, v7);
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    -[HMDHome homeManager](self, "homeManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setLastUserAddRemoveTimestamp");

  }
}

- (void)refreshUserDisplayNames
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __34__HMDHome_refreshUserDisplayNames__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_refreshUserDisplayNames
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v33 = self;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v39 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        if (objc_msgSend(v9, "refreshDisplayName"))
        {
          if (isInternalBuild())
          {
            v10 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v9, "uuid");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "stringWithFormat:", CFSTR("OutgoingInviteDisplayNameUpdate_%@"), v11);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "addObject:", v12);

          }
          else
          {
            objc_msgSend(v3, "addObject:", CFSTR("OutgoingInviteDisplayNameUpdate"));
          }
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
    }
    while (v6);
  }

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  -[HMDHome users](v33, "users");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v35;
    do
    {
      for (j = 0; j != v15; ++j)
      {
        if (*(_QWORD *)v35 != v16)
          objc_enumerationMutation(v13);
        v18 = *(id *)(*((_QWORD *)&v34 + 1) + 8 * j);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v19 = v18;
        else
          v19 = 0;
        v20 = v19;

        if (!v20 && objc_msgSend(v18, "refreshDisplayName"))
        {
          if (isInternalBuild())
          {
            v21 = (void *)MEMORY[0x1E0CB3940];
            objc_msgSend(v18, "uuid");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "stringWithFormat:", CFSTR("UserDisplayNameUpdate_%@"), v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "addObject:", v23);

          }
          else
          {
            objc_msgSend(v3, "addObject:", CFSTR("UserDisplayNameUpdate"));
          }
        }

      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    }
    while (v15);
  }

  if (objc_msgSend(v3, "count"))
  {
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = v33;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "allObjects");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "componentsJoinedByString:", CFSTR(", "));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v43 = v27;
      v44 = 2112;
      v45 = v29;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@User display names updated: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    -[HMDHome saveToCurrentAccountWithReason:](v25, "saveToCurrentAccountWithReason:", CFSTR("userDisplayNameUpdated"));
    -[HMDHome home](v25, "home");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "homeManager");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v25, "uuid");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("userDisplayNameUpdated"), v32, 1);

  }
}

- (BOOL)containsRemovedUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome removedUsers](self, "removedUsers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(v7);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "isEqualToUser:", v4, (_QWORD)v12) & 1) != 0)
        {
          LOBYTE(v8) = 1;
          goto LABEL_11;
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_11:

  return v8;
}

- (void)handleCurrentUserPrivilegeChanged:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __45__HMDHome_handleCurrentUserPrivilegeChanged___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (NSNumber)overriddenHomeAccessControl
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_overriddenHomeAccessControl;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setOverriddenHomeAccessControl:(id)a3
{
  NSNumber *v4;
  NSNumber *overriddenHomeAccessControl;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  overriddenHomeAccessControl = self->_overriddenHomeAccessControl;
  self->_overriddenHomeAccessControl = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)handleCATUpdate
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome homeManager](self, "homeManager");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "accessoryBrowser");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chipAccessoryServerBrowser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome fabric](self, "fabric");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateAccessoryACLAndGetNOCFromResidentForSharedUserForFabric:", v5);

}

- (void)_processOutgoingInvitationsRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  char v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  char v29;
  id v30;
  _BYTE location[12];
  __int16 v32;
  void *v33;
  __int16 v34;
  id v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("HM.invitations"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)MEMORY[0x1E0CB3710];
    v7 = (void *)MEMORY[0x1E0C99E60];
    v36[0] = objc_opt_class();
    v36[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v36, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setWithArray:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 0;
    objc_msgSend(v6, "unarchivedObjectOfClasses:fromData:error:", v9, v5, &v30);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v30;

    if (v10)
    {
      v12 = objc_msgSend(v4, "BOOLForKey:", CFSTR("HMDHomeSuppressInviteNotificationKey"));
      objc_initWeak((id *)location, self);
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = __46__HMDHome__processOutgoingInvitationsRequest___block_invoke;
      v26[3] = &unk_1E89A85A0;
      objc_copyWeak(&v28, (id *)location);
      v27 = v10;
      v29 = v12;
      -[HMDHome _addOutgoingInvitations:message:transactionCompleted:](self, "_addOutgoingInvitations:message:transactionCompleted:", v27, v4, v26);

      objc_destroyWeak(&v28);
      objc_destroyWeak((id *)location);
    }
    else
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "identifier");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "UUIDString");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)location = 138543874;
        *(_QWORD *)&location[4] = v22;
        v32 = 2112;
        v33 = v24;
        v34 = 2112;
        v35 = v11;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Failed to unarchive outgoing home invitations from serialized outgoing home invitation data: %@: %@", location, 0x20u);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v25);

    }
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v16;
      v32 = 2112;
      v33 = v18;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Unable to find outgoing invitations to add for message: %@", location, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }

}

- (id)_outgoingInvitationForUserWithHandle:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "user");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "accountHandle");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqual:", v4);

        if ((v12 & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (void)_addOutgoingInvitations:(id)a3 message:(id)a4 transactionCompleted:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome backingStore](self, "backingStore");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "name");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "transaction:options:", v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v15 = v8;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v28 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend(v20, "setHome:", self);
        objc_msgSend(v20, "modelObjectWithChangeType:version:", 1, 4);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "add:withMessage:", v21, v9);

      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    }
    while (v17);
  }

  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __64__HMDHome__addOutgoingInvitations_message_transactionCompleted___block_invoke;
  v24[3] = &unk_1E89BFC88;
  v25 = v9;
  v26 = v10;
  v22 = v9;
  v23 = v10;
  objc_msgSend(v14, "run:", v24);

}

- (void)_sendInvitation:(id)a3 message:(id)a4 shareURL:(id)a5 shareToken:(id)a6 suppressHomeInviteNotification:(BOOL)a7
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDRemoteAccountMessageDestination *v45;
  void *v46;
  HMDRemoteAccountMessageDestination *v47;
  void *v48;
  void *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  void *v55;
  _BOOL4 v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  _QWORD *v64;
  id v65;
  id v66;
  id v67;
  _QWORD v68[2];
  void (*v69)(uint64_t, void *);
  void *v70;
  id v71;
  id v72;
  id v73;
  _QWORD v74[4];
  id v75;
  id v76;
  id v77;
  id location;
  _QWORD v79[4];
  id v80;
  id v81;
  id v82;
  id v83;
  _QWORD v84[8];
  _BYTE from[24];
  id v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  _QWORD v91[2];
  _QWORD v92[5];

  v56 = a7;
  v92[2] = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  objc_msgSend(v11, "user");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "accountHandle");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "identifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "endDate");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  objc_msgSend(v11, "expirationHandler");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v19 == 0;

  if (v20)
  {
    -[HMDHome workQueue](self, "workQueue");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setClientQueue:", v21);

    objc_initWeak((id *)from, v11);
    v74[0] = MEMORY[0x1E0C809B0];
    v74[1] = 3221225472;
    v74[2] = __86__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification___block_invoke;
    v74[3] = &unk_1E89BF2A0;
    objc_copyWeak(&v76, &location);
    objc_copyWeak(&v77, (id *)from);
    v75 = v12;
    objc_msgSend(v11, "setExpirationHandler:", v74);

    objc_destroyWeak(&v77);
    objc_destroyWeak(&v76);
    objc_destroyWeak((id *)from);
  }
  objc_msgSend(v11, "user");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v68[0] = MEMORY[0x1E0C809B0];
  v68[1] = 3221225472;
  v69 = __86__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification___block_invoke_1157;
  v70 = &unk_1E89BCB20;
  objc_copyWeak(&v73, &location);
  v71 = v16;
  v58 = v12;
  v72 = v58;
  v23 = v71;
  v65 = v17;
  v66 = v18;
  v62 = v13;
  v63 = v14;
  v67 = v22;
  v64 = v68;
  if (self)
  {
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)from = 138543874;
      *(_QWORD *)&from[4] = v27;
      *(_WORD *)&from[12] = 2112;
      *(_QWORD *)&from[14] = v23;
      *(_WORD *)&from[22] = 2112;
      v86 = v67;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Sending invite to: %@ for user: %@", from, 0x20u);

    }
    objc_autoreleasePoolPop(v24);
    +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "account");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "handles");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "containsObject:", v23);

    if (v31)
    {
      v32 = (void *)MEMORY[0x1D17BA0A0]();
      v33 = v25;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)from = 138543618;
        *(_QWORD *)&from[4] = v35;
        *(_WORD *)&from[12] = 2112;
        *(_QWORD *)&from[14] = v23;
        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Attempt to add local user: %@", from, 0x16u);

      }
      objc_autoreleasePoolPop(v32);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v69((uint64_t)v64, v60);

    }
    else
    {
      -[HMDHome keychainStore](v25, "keychainStore");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v83 = 0;
      objc_msgSend(v36, "getLocalPairingIdentity:", &v83);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = v83;

      if (v59)
      {
        v91[0] = CFSTR("kHomedVersionKey");
        v37 = (id)homedVersion;
        v91[1] = CFSTR("kHomedSupportedFeaturesKey");
        v92[0] = v37;
        v92[1] = &unk_1E8B31C68;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v92, v91, 2);
        v54 = (void *)objc_claimAutoreleasedReturnValue();

        v84[0] = CFSTR("kHomeName");
        -[HMDHome name](v25, "name");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)from = v55;
        v84[1] = CFSTR("kHomeUUID");
        -[HMDHome uuid](v25, "uuid");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "UUIDString");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&from[8] = v39;
        *(_QWORD *)&from[16] = v66;
        v84[2] = CFSTR("kInvitationExpiryDateKey");
        v84[3] = CFSTR("kControllerPublicKey");
        objc_msgSend(v59, "publicKey");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "data");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v86 = v41;
        v84[4] = CFSTR("kControllerPairingNameKey");
        objc_msgSend(v59, "identifier");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v87 = v42;
        v84[5] = CFSTR("kInvitationIdentifierKey");
        objc_msgSend(v65, "UUIDString");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v88 = v43;
        v89 = v54;
        v84[6] = CFSTR("kRequestedCapabilitiesKey");
        v84[7] = CFSTR("HMDHomeSuppressInviteNotificationKey");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v56);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v90 = v44;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", from, v84, 8);
        v57 = (void *)objc_claimAutoreleasedReturnValue();

        v45 = [HMDRemoteAccountMessageDestination alloc];
        v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
        v47 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:](v45, "initWithTarget:handle:multicast:", v46, v23, 1);

        objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("kAccessHomeInviteRequestKey"), v47, v57);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_initWeak(&v82, v25);
        v79[0] = MEMORY[0x1E0C809B0];
        v79[1] = 3221225472;
        v79[2] = __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke;
        v79[3] = &unk_1E89BF4F0;
        objc_copyWeak(&v81, &v82);
        v80 = v23;
        objc_msgSend(v48, "setResponseHandler:", v79);
        +[HMDSecureRemoteMessageTransport defaultTransport](HMDSecureRemoteMessageTransport, "defaultTransport");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "sendMessage:completionHandler:", v48, v64);

        objc_destroyWeak(&v81);
        objc_destroyWeak(&v82);

      }
      else
      {
        v50 = (void *)MEMORY[0x1D17BA0A0]();
        v51 = v25;
        HMFGetOSLogHandle();
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)from = 138543362;
          *(_QWORD *)&from[4] = v53;
          _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_ERROR, "%{public}@Failed to get local identity", from, 0xCu);

        }
        objc_autoreleasePoolPop(v50);
        v69((uint64_t)v64, v61);
      }

    }
  }

  objc_destroyWeak(&v73);
  objc_destroyWeak(&location);

}

- (BOOL)doesThisHomeHaveCameras
{
  void *v2;
  char v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_1159);

  return v3;
}

- (void)_handleUpdateOutgoingInvitationState:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void (**v26)(_QWORD, _QWORD, _QWORD);
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  void (**v34)(_QWORD, _QWORD, _QWORD);
  void *v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kInvitationIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kInvitationStateKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (!v5 || !v6)
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v37 = v25;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Unable to accept the invitation as could not find the invite", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v26 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v26)[2](v26, v9, 0);
    goto LABEL_17;
  }
  -[HMDHome outgoingInvitations](self, "outgoingInvitations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("identifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (objc_msgSend(v7, "integerValue") == 1)
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "identifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "UUIDString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CBA548], "homeInvitationStateDescription:", 1);
        v35 = v10;
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v37 = v13;
        v38 = 2112;
        v39 = v15;
        v40 = 2112;
        v41 = v16;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@[Home] Processing request to update invitation %@ to state %@", buf, 0x20u);

        v10 = v35;
      }

      objc_autoreleasePoolPop(v10);
      if ((objc_msgSend(v9, "invitationState") & 0xFFFFFFFFFFFFFFFDLL) != 4)
        -[HMDHome _sendInvitationCancelationRequestToInvitee:](v11, "_sendInvitationCancelationRequestToInvitee:", v9);
      -[HMDHome backingStore](v11, "backingStore");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "transaction:options:", v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "emptyModelObjectWithChangeType:", 3);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "add:withMessage:", v21, v4);

      objc_msgSend(v20, "run");
      goto LABEL_18;
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 43, 0);
    v26 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v34 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v34[2](v34, v26, 0);

LABEL_17:
    goto LABEL_18;
  }
  v27 = (void *)MEMORY[0x1D17BA0A0]();
  v28 = self;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v30;
    v38 = 2112;
    v39 = v31;
    _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@Invalid invite identifier specified %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v27);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "responseHandler");
  v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v33)[2](v33, v32, 0);

  v9 = 0;
LABEL_18:

}

- (void)_handleUpdateRequestForHomeInvitationFromInvitee:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  void *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kInvitationIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("kControllerPublicKey"));
  v34 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("kControllerPairingNameKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kInvitationStateKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CBA950], "authWithMessage:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("kUserIDKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "remoteSourceID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v33 = v6;
    v12 = objc_msgSend(v7, "integerValue");
    -[HMDHome outgoingInvitations](self, "outgoingInvitations");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v5;
    objc_msgSend(v13, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("identifier"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(v4, "responseHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = self;
      v17 = (void *)v34;
      -[HMDHome _handleUpdateRequestForHomeInvitation:controllerPublicKey:controllerUsername:invitationState:presenceAuthStatus:preferredUserID:fromHandle:fromAddress:issuerPublicKeyER:message:messageResponseHandler:](v16, "_handleUpdateRequestForHomeInvitation:controllerPublicKey:controllerUsername:invitationState:presenceAuthStatus:preferredUserID:fromHandle:fromAddress:issuerPublicKeyER:message:messageResponseHandler:", v14, v34, v33, v12, v8, v9, v11, v10, 0, v4, v15);

    }
    else
    {
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = self;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = v8;
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(0, "identifier");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "UUIDString");
        v31 = v21;
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v36 = v24;
        v37 = 2112;
        v38 = v25;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier %@ specified from remote user", buf, 0x16u);

        v21 = v31;
        v8 = v30;
      }

      objc_autoreleasePoolPop(v21);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27)
      {
        objc_msgSend(v4, "responseHandler");
        v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v28)[2](v28, v26, 0);

      }
      v17 = (void *)v34;
    }

    v5 = v32;
    v6 = v33;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      objc_msgSend(v4, "responseHandler");
      v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v18, 0);

    }
    v17 = (void *)v34;
  }

}

- (void)_handleUpdateRequestForHomeInvitation:(id)a3 controllerPublicKey:(id)a4 controllerUsername:(id)a5 invitationState:(int64_t)a6 presenceAuthStatus:(id)a7 preferredUserID:(id)a8 fromHandle:(id)a9 fromAddress:(id)a10 issuerPublicKeyER:(id)a11 message:(id)a12 messageResponseHandler:(id)a13
{
  id v17;
  id v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  int v30;
  const __CFString *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  HMDHome *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  char v45;
  void *v46;
  HMDHome *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  HMDHome *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  HMDHome *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  __CFString *v59;
  __CFString *v60;
  void *v61;
  void *v62;
  HMDHome *v63;
  NSObject *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  __CFString *v68;
  __CFString *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  HMDHome *v76;
  NSObject *v77;
  void *v78;
  void *v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t i;
  uint64_t v84;
  void *v85;
  NSObject *v86;
  void *v87;
  id v88;
  _QWORD *v89;
  void *v90;
  id v91;
  id obj;
  id v93;
  void *v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  void *v101;
  HMDHome *vala;
  void *v105;
  void (**v106)(id, void *, _QWORD);
  _QWORD v107[2];
  void (*v108)(uint64_t, void *);
  void *v109;
  id v110;
  HMDHome *v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  void (**v118)(id, void *, _QWORD);
  id location[4];
  HMDHome *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD v123[4];
  NSObject *v124;
  uint64_t v125;
  id v126;
  _QWORD *v127;
  id v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD v133[5];
  id v134;
  uint8_t buf[4];
  void *v136;
  __int16 v137;
  int64_t v138;
  __int16 v139;
  const __CFString *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v17 = a3;
  v99 = a4;
  v98 = a5;
  v95 = a7;
  v18 = a8;
  v96 = a9;
  v97 = a10;
  v93 = a11;
  v100 = a12;
  v106 = (void (**)(id, void *, _QWORD))a13;
  v101 = v17;
  v94 = v18;
  if (objc_msgSend(v17, "isExpired"))
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v101, "identifier");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v136 = v22;
      v137 = 2112;
      v138 = (int64_t)v23;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Invitation (%@) has already expired, invitee cannot accept or decline", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 1006, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v106)
      v106[2](v106, v24, 0);
LABEL_43:

    goto LABEL_74;
  }
  if (objc_msgSend(v17, "responseReceived"))
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v101, "identifier");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v101, "isDeclined");
      v31 = CFSTR("accepted");
      *(_DWORD *)buf = 138543874;
      v136 = v28;
      v137 = 2112;
      if (v30)
        v31 = CFSTR("declined");
      v138 = (int64_t)v29;
      v139 = 2112;
      v140 = v31;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Invitation (%@) has already been %@, invitee cannot accept or decline", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v25);
    v32 = (void *)MEMORY[0x1E0CB35C8];
    if (objc_msgSend(v101, "isDeclined"))
      v33 = 1008;
    else
      v33 = 1007;
    objc_msgSend(v32, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], v33, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v106)
      v106[2](v106, v24, 0);
    goto LABEL_43;
  }
  if ((unint64_t)(a6 - 3) > 1)
  {
    v54 = (void *)MEMORY[0x1D17BA0A0]();
    v55 = self;
    HMFGetOSLogHandle();
    v56 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v136 = v57;
      v137 = 2048;
      v138 = a6;
      _os_log_impl(&dword_1CD062000, v56, OS_LOG_TYPE_INFO, "%{public}@Failed to update invite state since the value %ld was incorrect", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v54);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 43, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v106)
      v106[2](v106, v24, 0);
    goto LABEL_43;
  }
  if (a6 == 3)
  {
    if (v99 && v98)
    {
      if (v18)
      {
        +[HMDAccountHandleFormatter defaultFormatter](HMDAccountHandleFormatter, "defaultFormatter");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "accountHandleFromString:", v18);
        v18 = (id)objc_claimAutoreleasedReturnValue();

      }
      v107[0] = MEMORY[0x1E0C809B0];
      v107[1] = 3221225472;
      v108 = __211__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_issuerPublicKeyER_message_messageResponseHandler___block_invoke;
      v109 = &unk_1E89A4BA8;
      v118 = v106;
      v110 = v96;
      v111 = self;
      v112 = v17;
      v113 = v18;
      v114 = v99;
      v115 = v98;
      v116 = v97;
      v117 = v95;
      vala = self;
      v35 = v112;
      v88 = v110;
      v91 = v113;
      v89 = v107;
      objc_msgSend(v35, "user");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "accountHandle");
      v90 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v90)
      {
        v75 = (void *)MEMORY[0x1D17BA0A0]();
        v76 = vala;
        HMFGetOSLogHandle();
        v77 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v136 = v78;
          _os_log_impl(&dword_1CD062000, v77, OS_LOG_TYPE_ERROR, "%{public}@Invalid invitee destination", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v75);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        v108((uint64_t)v89, v105);
        goto LABEL_73;
      }
      +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "accountForHandle:", v88);
      v105 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", 2);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v105, "isAuthenticated") & 1) != 0)
      {
        objc_msgSend(v105, "handles");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = objc_msgSend(v38, "containsObject:", v90);

        if ((v39 & 1) == 0)
        {
          v40 = (void *)MEMORY[0x1D17BA0A0]();
          v41 = vala;
          HMFGetOSLogHandle();
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v136 = v43;
            v137 = 2112;
            v138 = (int64_t)v90;
            _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@Authenticating the invitation handle: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v40);
          objc_msgSend(v87, "addObject:", v90);
        }
        if (v91)
        {
          objc_msgSend(v105, "handles");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = objc_msgSend(v44, "containsObject:", v91);

          if ((v45 & 1) == 0)
          {
            v46 = (void *)MEMORY[0x1D17BA0A0]();
            v47 = vala;
            HMFGetOSLogHandle();
            v48 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v136 = v49;
              v137 = 2112;
              v138 = (int64_t)v91;
              _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_INFO, "%{public}@Authenticating the preferred account handle: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v46);
            objc_msgSend(v87, "addObject:", v91);
          }
        }
        if (!objc_msgSend(v87, "hmf_isEmpty"))
        {
          v133[0] = 0;
          v133[1] = v133;
          v133[2] = 0x3032000000;
          v133[3] = __Block_byref_object_copy__10535;
          v133[4] = __Block_byref_object_dispose__10536;
          v134 = 0;
          v80 = dispatch_group_create();
          v129 = 0u;
          v130 = 0u;
          v131 = 0u;
          v132 = 0u;
          obj = v87;
          v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v129, buf, 16);
          if (v81)
          {
            v82 = *(_QWORD *)v130;
            do
            {
              for (i = 0; i != v81; ++i)
              {
                if (*(_QWORD *)v130 != v82)
                  objc_enumerationMutation(obj);
                v84 = *(_QWORD *)(*((_QWORD *)&v129 + 1) + 8 * i);
                dispatch_group_enter(v80);
                objc_initWeak(location, vala);
                +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
                v85 = (void *)objc_claimAutoreleasedReturnValue();
                v123[0] = MEMORY[0x1E0C809B0];
                v123[1] = 3221225472;
                v123[2] = ____authenticateAcceptedOutgoingInvitation_block_invoke;
                v123[3] = &unk_1E89A55D8;
                objc_copyWeak(&v128, location);
                v124 = v80;
                v125 = v84;
                v127 = v133;
                v126 = v105;
                objc_msgSend(v85, "_resolveAccountForHandle:completionHandler:", v84, v123);

                objc_destroyWeak(&v128);
                objc_destroyWeak(location);
              }
              v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v129, buf, 16);
            }
            while (v81);
          }

          -[HMDHome workQueue](vala, "workQueue");
          v86 = objc_claimAutoreleasedReturnValue();
          location[0] = (id)MEMORY[0x1E0C809B0];
          location[1] = (id)3221225472;
          location[2] = ____authenticateAcceptedOutgoingInvitation_block_invoke_3821;
          location[3] = &unk_1E89BD0A0;
          v122 = v133;
          v120 = vala;
          v121 = v89;
          dispatch_group_notify(v80, v86, location);

          _Block_object_dispose(v133, 8);
          goto LABEL_72;
        }
        v50 = (void *)MEMORY[0x1D17BA0A0]();
        v51 = vala;
        HMFGetOSLogHandle();
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v136 = v53;
          _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_DEFAULT, "%{public}@Authenticated invitation without resolving", buf, 0xCu);

        }
      }
      else
      {
        v50 = (void *)MEMORY[0x1D17BA0A0]();
        v51 = vala;
        HMFGetOSLogHandle();
        v52 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v136 = v79;
          _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Accepting invitation from unauthenticated user", buf, 0xCu);

        }
      }

      objc_autoreleasePoolPop(v50);
      v108((uint64_t)v89, 0);
LABEL_72:

LABEL_73:
      goto LABEL_74;
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    if (v106)
      ((void (*)(void))v106[2])();

  }
  else
  {
    if ((shouldLogPrivateInformation() & 1) != 0)
    {
      objc_msgSend(v17, "user");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "userID");
      v59 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v59 = CFSTR("...");
      v60 = CFSTR("...");
    }
    v62 = (void *)MEMORY[0x1D17BA0A0](v60);
    v63 = self;
    HMFGetOSLogHandle();
    v64 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v136 = v65;
      v137 = 2112;
      v138 = (int64_t)v59;
      _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@User %@ declined invite", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v62);
    objc_msgSend(v100, "name");
    v66 = objc_claimAutoreleasedReturnValue();
    v67 = (void *)v66;
    v68 = CFSTR("UpdateOutgoingInvitationToAccept");
    if (v66)
      v68 = (__CFString *)v66;
    v69 = v68;

    -[HMDHome backingStore](v63, "backingStore");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "transaction:options:", v69, v71);
    v72 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v17, "emptyModelObjectWithChangeType:", 2);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a6);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v73, "setInvitationState:", v74);

    if (v100)
      objc_msgSend(v72, "add:withMessage:", v73);
    else
      objc_msgSend(v72, "add:", v73);
    objc_msgSend(v72, "run");

  }
LABEL_74:

}

- (void)_updateOutgoingInvitationsWithCompleteUserManagementOperation:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDOutgoingHomeInvitationModel *v20;
  void *v21;
  void *v22;
  HMDOutgoingHomeInvitationModel *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[HMDHome outgoingInvitations](self, "outgoingInvitations", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v10, "operations");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v11, "containsObject:", v4))
        {
          v12 = objc_msgSend(v10, "isComplete");

          if (v12)
          {
            -[HMDHome backingStore](self, "backingStore");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "transaction:options:", CFSTR("kUpdateInvitationStateRequestKey"), v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            v20 = [HMDOutgoingHomeInvitationModel alloc];
            objc_msgSend(v10, "identifier");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome uuid](self, "uuid");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v20, "initWithObjectChangeType:uuid:parentUUID:", 3, v21, v22);

            objc_msgSend(v19, "add:", v23);
            objc_msgSend(v19, "run");

            goto LABEL_13;
          }
        }
        else
        {

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v7);
  }

  -[HMDHome homeManager](self, "homeManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "backingStore");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "transaction:options:", CFSTR("kUserManagementOperationRemovedKey"), v15);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "modelObjectWithChangeType:", 3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "add:", v16);

  objc_msgSend(v5, "run");
LABEL_13:

}

- (void)_handleAddUserModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDUser *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  __CFString *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  __CFString *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  HMDResidentUser *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  id v36;
  __CFString *v37;
  HMDUser *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  __CFString *v43;
  void *v44;
  void *v45;
  HMDHome *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  id *v51;
  NSObject *v52;
  void *v53;
  __CFString *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  __CFString *v64;
  void *v65;
  HMDHome *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  id v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  __CFString *v76;
  void *v77;
  HMDHome *v78;
  NSObject *v79;
  void *v80;
  id v81;
  id v82;
  void *v83;
  void *v84;
  HMDHome *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[3];
  _QWORD v91[3];
  uint8_t v92[128];
  uint8_t buf[4];
  void *v94;
  __int16 v95;
  __CFString *v96;
  __int16 v97;
  HMDUser *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome userWithUUID:](self, "userWithUUID:", v8);
  v9 = (HMDUser *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "debugString:", 1);
    v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v94 = v13;
    v95 = 2112;
    v96 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding HMDUserModel: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if (!v9)
  {
    v85 = v11;
    -[HMDHome homeManager](v11, "homeManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v22 = v21;
    else
      v22 = 0;
    v23 = v22;

    if (v23)
    {
      v24 = -[HMDResidentUser initWithModelObject:]([HMDResidentUser alloc], "initWithModelObject:", v23);
      if (v24)
      {
LABEL_12:
        v81 = v23;
        v82 = v6;
        v83 = v7;
        -[HMDResidentUser configureWithHome:](v24, "configureWithHome:", v85);
        -[HMDHome _addUserToContainer:](v85, "_addUserToContainer:", v24);
        -[HMDHome _cleanRemovedUsers:](v85, "_cleanRemovedUsers:", v24);
        v84 = v20;
        objc_msgSend(v20, "reprocessUserManagementModels");
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        -[HMDHome outgoingInvitations](v85, "outgoingInvitations");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v86, v92, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v87;
          while (2)
          {
            for (i = 0; i != v27; ++i)
            {
              if (*(_QWORD *)v87 != v28)
                objc_enumerationMutation(v25);
              v30 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * i);
              objc_msgSend(v30, "user");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "pairingIdentity");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDUser pairingIdentity](v24, "pairingIdentity");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v34 = objc_msgSend(v32, "isEqual:", v33);

              if (v34)
              {
                objc_msgSend(v30, "setUser:", v24);
                goto LABEL_26;
              }
            }
            v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v86, v92, 16);
            if (v27)
              continue;
            break;
          }
        }
LABEL_26:

        -[HMDHome _addUserToIdentityRegistry:](v85, "_addUserToIdentityRegistry:", v24);
        v9 = v24;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v38 = v9;
        else
          v38 = 0;
        v37 = v38;

        if (v37)
        {
          v39 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome _updateConfigurationStateForResidentDevice:desiredConfigState:message:](v85, "_updateConfigurationStateForResidentDevice:desiredConfigState:message:", v37, 2, 0));
          v40 = v85;
          HMFGetOSLogHandle();
          v41 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDUser userID](v9, "userID");
            v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v94 = v42;
            v95 = 2112;
            v96 = v43;
            _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Removing resident user %@ from unassociated list", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v39);
          -[__CFString userID](v37, "userID");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v84, "removeFromUnassociatedPeers:home:", v44, v40);

          v45 = (void *)MEMORY[0x1D17BA0A0]();
          v46 = v40;
          HMFGetOSLogHandle();
          v47 = objc_claimAutoreleasedReturnValue();
          v6 = v82;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v94 = v48;
            _os_log_impl(&dword_1CD062000, v47, OS_LOG_TYPE_DEBUG, "%{public}@Add resident device", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v45);
          v49 = v81;
        }
        else
        {
          if (-[HMDUser isCurrentUser](v9, "isCurrentUser"))
          {
            v50 = (void *)MEMORY[0x1D17BA0A0]();
            v51 = v85;
            HMFGetOSLogHandle();
            v52 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              v54 = (__CFString *)v51[6];
              *(_DWORD *)buf = 138543874;
              v94 = v53;
              v95 = 2112;
              v96 = v54;
              v97 = 2112;
              v98 = v9;
              _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Newly added user is current user, updating _currentUser from %@ to %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v50);
            objc_storeStrong(v51 + 6, v24);
            objc_msgSend(v51, "presenceAuthStatus");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v51[6], "setPresenceAuthStatus:", v55);

          }
          v90[0] = CFSTR("kUserUUIDKey");
          -[HMDUser uuid](v9, "uuid");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "UUIDString");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v91[0] = v57;
          v90[1] = CFSTR("kUserIDKey");
          -[HMDUser userID](v9, "userID");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v91[1] = v58;
          v90[2] = CFSTR("kUserDisplayNameKey");
          -[HMDUser displayName](v9, "displayName");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v91[2] = v59;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v91, v90, 3);
          v60 = (void *)objc_claimAutoreleasedReturnValue();

          v61 = (void *)objc_msgSend(v60, "mutableCopy");
          -[HMDUser userID](v9, "userID");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v61, "setObject:forKeyedSubscript:", v62, CFSTR("kUserIDKey"));

          objc_msgSend(v83, "identifier");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = v81;
          v6 = v82;
          if (v63)
            objc_msgSend(v83, "identifier");
          else
            objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
          v71 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0D285D0], "entitledMessageWithName:identifier:messagePayload:", CFSTR("kUserAddedNotificationKey"), v71, v61);
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome msgDispatcher](v85, "msgDispatcher");
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](v85, "uuid");
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v73, "sendMessage:target:", v72, v74);

        }
        v7 = v83;
        objc_msgSend(v83, "transactionResult");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "markChanged");

        v20 = v84;
        goto LABEL_54;
      }
    }
    else
    {
      v9 = -[HMDUser initWithModelObject:]([HMDUser alloc], "initWithModelObject:", v21);
      -[HMDUser refreshDisplayName](v9, "refreshDisplayName");
      -[HMDUser userID](v9, "userID");
      v35 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v35)
      {
        v69 = v20;
        v70 = v7;
        if ((shouldLogPrivateInformation() & 1) != 0)
        {
          objc_msgSend(v21, "userID");
          v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v37 = CFSTR("...");
          v76 = CFSTR("...");
        }
        v77 = (void *)MEMORY[0x1D17BA0A0]();
        v78 = v85;
        HMFGetOSLogHandle();
        v79 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v94 = v80;
          v95 = 2112;
          v96 = v37;
          _os_log_impl(&dword_1CD062000, v79, OS_LOG_TYPE_ERROR, "%{public}@User created from model no longer has userID, model userID invalid %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v77);
        v7 = v70;
        v20 = v69;
        v49 = 0;
        goto LABEL_54;
      }
      v24 = (HMDResidentUser *)v9;
      if (v9)
        goto LABEL_12;
    }
    v36 = v23;
    if ((shouldLogPrivateInformation() & 1) != 0)
    {
      objc_msgSend(v21, "userID");
      v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v37 = CFSTR("...");
      v64 = CFSTR("...");
    }
    v65 = (void *)MEMORY[0x1D17BA0A0]();
    v66 = v85;
    HMFGetOSLogHandle();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v94 = v68;
      v95 = 2112;
      v96 = v37;
      _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_ERROR, "%{public}@Failed to create new user %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v65);
    v9 = 0;
    v49 = v36;
LABEL_54:

    goto LABEL_55;
  }
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = v11;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v94 = v18;
    v95 = 2112;
    v96 = v19;
    v97 = 2112;
    v98 = v9;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@HMDUserModel %@ passed as add for existing user %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v15);
  -[HMDUser transactionObjectUpdated:newValues:message:](v9, "transactionObjectUpdated:newValues:message:", 0, v6, v7);
LABEL_55:

}

- (void)_handleRemoveUserModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDUser *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  HMDUser *currentUser;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  _QWORD v35[4];
  id v36;
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome userWithUUID:](self, "userWithUUID:", v8);
  v9 = (HMDUser *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (v9 == self->_currentUser)
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Attempting to remove current user", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      currentUser = self->_currentUser;
      self->_currentUser = 0;

    }
    -[HMDHome _removeUserFromContainer:](self, "_removeUserFromContainer:", v9);
    -[HMDHome usersPendingUserManagementOperations](self, "usersPendingUserManagementOperations");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "removeObject:", v9);

    -[HMDUser setHome:](v9, "setHome:", 0);
    objc_msgSend(v7, "transactionResult");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "markChanged");
    if (objc_msgSend(v16, "source") == 1)
    {
      +[HMDRemovedUser removedUserWithUser:](HMDRemovedUser, "removedUserWithUser:", v9);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome removedUsers](self, "removedUsers");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v17);

      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v39 = v22;
        v40 = 2112;
        v41 = v17;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Sending message to removed user: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(v17, "setRemovalInProgress:", 1);
      objc_initWeak((id *)buf, v20);
      -[HMDHome homeManager](v20, "homeManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDUser pairingUsername](v9, "pairingUsername");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = __42__HMDHome__handleRemoveUserModel_message___block_invoke;
      v35[3] = &unk_1E89BF4F0;
      objc_copyWeak(&v37, (id *)buf);
      v25 = v17;
      v36 = v25;
      objc_msgSend(v23, "sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:", v9, v20, v24, 1, v35);

      objc_destroyWeak(&v37);
      objc_destroyWeak((id *)buf);

    }
    else
    {
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v34;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Skipping remove user due to non-xpc backingstore transaction", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v31);
      objc_msgSend(v7, "respondWithPayload:", 0);
    }
  }
  else
  {
    v26 = (void *)MEMORY[0x1D17BA0A0]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v29;
      v40 = 2112;
      v41 = v30;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Cannot find the user with UUID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v16);
  }

}

- (void)__handleAcceptedOutgoingInvitationResponse:(id)a3 destinationAddress:(id)a4 publicKey:(id)a5 username:(id)a6 issuerPublicKeyER:(id)a7 presenceAuthStatus:(id)a8 completionHandler:(id)a9
{
  id v15;
  void *v16;
  NSObject *v17;
  void *v18;
  unint64_t v19;
  __CFString *v20;
  __CFString *v21;
  void *v22;
  id v23;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  __CFString *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  __CFString *v44;
  void *v45;
  void *v46;
  HMDOutgoingHomeInvitationModel *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  __CFString *v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  void *v59;
  HMDOutgoingHomeInvitationModel *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  NSObject *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  HMDHome *v79;
  NSObject *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  NSObject *v88;
  id v89;
  id v90;
  void *v91;
  __CFString *v92;
  id v93;
  uint64_t v94;
  id v95;
  HMDOutgoingHomeInvitationModel *v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id aBlock;
  HMDOutgoingHomeInvitationModel *v104;
  void *v105;
  id v106;
  id v107;
  HMDHome *val;
  __CFString *v109;
  id obj;
  void *v111;
  void *v112;
  void *v113;
  _QWORD v114[5];
  __CFString *v115;
  NSObject *v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  _QWORD v124[4];
  NSObject *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  id v130;
  id v131;
  id v132;
  _QWORD v133[5];
  uint8_t v134[128];
  uint8_t buf[4];
  void *v136;
  __int16 v137;
  __CFString *v138;
  __int16 v139;
  __CFString *v140;
  __int16 v141;
  void *v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v102 = a4;
  v99 = a5;
  v101 = a6;
  v95 = a7;
  v98 = a8;
  aBlock = a9;
  v105 = v15;
  objc_msgSend(v15, "user");
  v109 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  val = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = -[__CFString privilege](v109, "privilege");
    if (v19 > 4)
      v20 = CFSTR("None");
    else
      v20 = off_1E89BB648[v19];
    v21 = v20;
    *(_DWORD *)buf = 138543874;
    v136 = v18;
    v137 = 2112;
    v138 = v109;
    v139 = 2112;
    v140 = v21;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@User: %@, has accepted an invitation, processing acceptance. %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v16);
  -[__CFString setHome:](v109, "setHome:", val);
  -[__CFString modelObjectWithChangeType:](v109, "modelObjectWithChangeType:", 1);
  v107 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v22 = v107;
  else
    v22 = 0;
  v23 = v22;

  if (v109 && v23)
  {
    v106 = v101;
    if (-[__CFString isRemoteGateway](v109, "isRemoteGateway"))
    {
      -[HMDHome keychainStore](val, "keychainStore");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v131 = 0;
      v132 = 0;
      v25 = objc_msgSend(v24, "getControllerPublicKey:secretKey:keyPair:username:allowCreation:error:", 0, 0, 0, &v132, 0, &v131);
      v100 = v132;
      v104 = (HMDOutgoingHomeInvitationModel *)v131;

      if ((v25 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 3, CFSTR("Failed to set resident pairing name"), 0, 0);
        v50 = (id)objc_claimAutoreleasedReturnValue();
        v53 = _Block_copy(aBlock);
        v54 = v53;
        if (v53)
          (*((void (**)(void *, id))v53 + 2))(v53, v50);
        goto LABEL_48;
      }
      if (objc_msgSend(v100, "isEqualToString:", v106))
      {
        +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v102);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "identifier");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "UUIDString");
        v28 = objc_claimAutoreleasedReturnValue();

        v106 = (id)v28;
      }

    }
    v104 = (HMDOutgoingHomeInvitationModel *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28658]), "initWithPairingKeyData:", v99);
    v100 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D165A8]), "initWithIdentifier:publicKey:privateKey:permissions:", v106, v104, 0, 0);
    -[__CFString userID](v109, "userID");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](val, "uuid");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDUser UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:](HMDUser, "UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:", v29, v30, 0, v100);
    v94 = objc_claimAutoreleasedReturnValue();

    -[__CFString uuid](v109, "uuid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = HMFEqualObjects();

    if ((v32 & 1) == 0)
    {
      v33 = (void *)MEMORY[0x1D17BA0A0]();
      v34 = val;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString uuid](v109, "uuid");
        v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
        -[__CFString userID](v109, "userID");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v136 = v36;
        v137 = 2112;
        v138 = v37;
        v139 = 2112;
        v140 = (__CFString *)v94;
        v141 = 2112;
        v142 = v38;
        _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Old invitee uuid %@, new invitee uuid %@ for userID %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v33);
      -[__CFString setUUID:](v109, "setUUID:", v94);
      -[__CFString modelObjectWithChangeType:](v109, "modelObjectWithChangeType:", 1);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v40 = v39;
      else
        v40 = 0;
      v107 = v40;

    }
    objc_msgSend(v100, "hmd_dictionaryEncoding");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "setPairingIdentity:", v41);

    objc_msgSend(v98, "number");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "setPresenceAuthorizationStatus:", v42);

    -[__CFString setPairingIdentity:](v109, "setPairingIdentity:", v100);
    -[HMDHome accessories](val, "accessories");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v130 = 0;
    -[HMDHome prepareUserManagementOperationForUser:accessories:type:error:](val, "prepareUserManagementOperationForUser:accessories:type:error:", v109, v43, 1, &v130);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = (__CFString *)v130;

    if (!v97)
    {
      if ((shouldLogPrivateInformation() & 1) != 0)
      {
        -[__CFString userID](v109, "userID");
        v44 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v44 = CFSTR("...");
        v55 = CFSTR("...");
      }
      v56 = (void *)MEMORY[0x1D17BA0A0]();
      v57 = val;
      HMFGetOSLogHandle();
      v58 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v136 = v59;
        v137 = 2112;
        v138 = v44;
        v139 = 2112;
        v140 = v92;
        _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_ERROR, "%{public}@Failed to prepare add user operations for recently accepted user '%@' with error: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v56);

    }
    v60 = [HMDOutgoingHomeInvitationModel alloc];
    objc_msgSend(v15, "identifier");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](val, "uuid");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    v96 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v60, "initWithObjectChangeType:uuid:parentUUID:", 3, v61, v62);

    -[HMDOutgoingHomeInvitationModel setInvitationState:](v96, "setInvitationState:", &unk_1E8B32868);
    -[HMDOutgoingHomeInvitationModel setInviteeDestinationAddress:](v96, "setInviteeDestinationAddress:", v102);
    -[HMDHome homeManager](val, "homeManager");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "backingStore");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "transaction:options:", CFSTR("kUserManagementOperationAddedKey"), v64);
    v112 = (void *)objc_claimAutoreleasedReturnValue();

    v65 = dispatch_group_create();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v97, "count"));
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v97, "count"))
    {
      -[HMDHome usersPendingUserManagementOperations](val, "usersPendingUserManagementOperations");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "addObject:", v109);

      -[HMDBackingStoreModelObject setObjectChangeType:](v96, "setObjectChangeType:", 2);
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      obj = v97;
      v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v126, v134, 16);
      if (v67)
      {
        v68 = *(_QWORD *)v127;
        do
        {
          for (i = 0; i != v67; ++i)
          {
            if (*(_QWORD *)v127 != v68)
              objc_enumerationMutation(obj);
            v70 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * i);
            dispatch_group_enter(v65);
            objc_msgSend(v70, "accessory");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v71, "identifier");
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "user");
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v73, "pairingIdentity");
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            v124[0] = MEMORY[0x1E0C809B0];
            v124[1] = 3221225472;
            v124[2] = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1179;
            v124[3] = &unk_1E89C2350;
            v125 = v65;
            objc_msgSend(v113, "cleanupOperationsForAccessory:user:completion:", v72, v74, v124);

            objc_msgSend(v70, "modelObjectWithChangeType:", 1);
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v112, "add:", v75);

            objc_msgSend(v70, "identifier");
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v76, "UUIDString");
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v111, "addObject:", v77);

          }
          v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v126, v134, 16);
        }
        while (v67);
      }

    }
    else
    {
      v78 = (void *)MEMORY[0x1D17BA0A0]();
      v79 = val;
      HMFGetOSLogHandle();
      v80 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v136 = v81;
        _os_log_impl(&dword_1CD062000, v80, OS_LOG_TYPE_INFO, "%{public}@Immediately processing outgoing invitation as there are no accessory operations to perform", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v78);
    }
    -[HMDHome backingStore](val, "backingStore", v92);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v82, "transaction:options:", CFSTR("kAddUserRequestKey"), v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();

    v85 = (void *)MEMORY[0x1E0D285D0];
    objc_msgSend(v105, "identifier");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "messageWithName:identifier:messagePayload:", CFSTR("kAddUserRequestKey"), v86, 0);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "add:withMessage:", v107, v87);

    objc_msgSend(v84, "add:", v96);
    objc_initWeak((id *)buf, val);
    v114[0] = MEMORY[0x1E0C809B0];
    v114[1] = 3221225472;
    v114[2] = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1180;
    v114[3] = &unk_1E89A4BD0;
    v114[4] = val;
    v115 = v109;
    v88 = v65;
    v116 = v88;
    v89 = v112;
    v117 = v89;
    objc_copyWeak(&v123, (id *)buf);
    v90 = v111;
    v118 = v90;
    v119 = v105;
    v120 = v102;
    v122 = aBlock;
    v50 = v93;
    v121 = v50;
    v91 = _Block_copy(v114);
    objc_msgSend(v84, "run:", v91);

    objc_destroyWeak(&v123);
    objc_destroyWeak((id *)buf);

    v54 = (void *)v94;
LABEL_48:

    v23 = v107;
    goto LABEL_49;
  }
  -[HMDHome backingStore](val, "backingStore");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "transaction:options:", CFSTR("kUpdateInvitationStateRequestKey"), v46);
  v106 = (id)objc_claimAutoreleasedReturnValue();

  v47 = [HMDOutgoingHomeInvitationModel alloc];
  objc_msgSend(v15, "identifier");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](val, "uuid");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v104 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v47, "initWithObjectChangeType:uuid:parentUUID:", 3, v48, v49);

  objc_msgSend(v106, "add:", v104);
  v133[0] = MEMORY[0x1E0C809B0];
  v133[1] = 3221225472;
  v133[2] = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke;
  v133[3] = &unk_1E89C2350;
  v133[4] = val;
  objc_msgSend(v106, "run:", v133);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 3, CFSTR("Outgoing Invitation does not have a valid invitee. Cancelling the invite."), 0, 0);
  v50 = (id)objc_claimAutoreleasedReturnValue();
  v51 = _Block_copy(aBlock);
  v52 = v51;
  if (v51)
    (*((void (**)(void *, id))v51 + 2))(v51, v50);

LABEL_49:
}

- (void)__handleCancelledOutgoingInvitation:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "cancel");
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = v4;
  objc_msgSend(v4, "operations");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        if (objc_msgSend(v10, "isFinished") && (objc_msgSend(v10, "isCancelled") & 1) == 0)
        {
          objc_msgSend(v10, "user");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "accessory");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDUserManagementOperation removeUserManagementOperationForUser:accessory:model:](HMDUserManagementOperation, "removeUserManagementOperationForUser:accessory:model:", v11, v12, 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          v14 = (void *)MEMORY[0x1D17BA0A0]();
          v15 = self;
          HMFGetOSLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v25 = v17;
            v26 = 2112;
            v27 = v13;
            _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Adding remove operation for canceled invite: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v14);
          +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "addOperation:", v13);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    }
    while (v7);
  }

}

- (void)__handleCompletedOutgoingInvitation:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v8;
    v15 = 2112;
    v16 = v10;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Removing outgoing invitation '%@' since it completed", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "updateInvitationState:", 3);
  objc_msgSend(v4, "user");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome usersPendingUserManagementOperations](v6, "usersPendingUserManagementOperations");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeObject:", v11);

}

- (void)_sendInvitationCancelationRequestToInvitee:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[5];
  id v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = CFSTR("kInvitationIdentifierKey");
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v17[1] = CFSTR("kInvitationStateKey");
  v18[0] = v7;
  v18[1] = &unk_1E8B32808;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "invitationData");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:messagePayload:", CFSTR("kUpdateHomeInvitationStateInternalRequestKey"), v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "inviteeUserID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __54__HMDHome__sendInvitationCancelationRequestToInvitee___block_invoke;
  v15[3] = &unk_1E89BFD00;
  v15[4] = self;
  v16 = v4;
  v14 = v4;
  objc_msgSend(v5, "sendUnsecureMessage:target:userID:responseQueue:responseHandler:", v10, v11, v12, v13, v15);

}

- (void)_handleRequestHomeDataSync:(id)a3
{
  id v4;
  BOOL v5;
  _QWORD *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  char v33;
  id v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void (**v43)(_QWORD, _QWORD, _QWORD);
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t v54[128];
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = -[HMDHome isOwnerUser](self, "isOwnerUser");
  v6 = (_QWORD *)MEMORY[0x1E0CB8C70];
  if (!v5)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "UUIDString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v10;
      v57 = 2112;
      v58 = v12;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Not owner, cannot send for message: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *v6, 10, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(v4, "responseHandler");
      v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v15)[2](v15, v13, 0);

    }
  }
  objc_msgSend(v4, "stringForKey:", CFSTR("pairingUsername"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v16)
  {
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "UUIDString");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v20;
      v57 = 2112;
      v58 = v22;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@User is not specified for message: %@", buf, 0x16u);

      v6 = (_QWORD *)MEMORY[0x1E0CB8C70];
    }

    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *v6, 2, 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v24)
    {
      objc_msgSend(v4, "responseHandler");
      v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v25)[2](v25, v23, 0);

    }
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  -[HMDHome users](self, "users", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v51;
LABEL_15:
    v30 = 0;
    while (1)
    {
      if (*(_QWORD *)v51 != v29)
        objc_enumerationMutation(v26);
      v31 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v30);
      if ((objc_msgSend(v31, "isRemoteGateway") & 1) == 0)
      {
        objc_msgSend(v31, "pairingUsername");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v16, "isEqualToString:", v32);

        if ((v33 & 1) != 0)
          break;
      }
      if (v28 == ++v30)
      {
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
        if (v28)
          goto LABEL_15;
        goto LABEL_22;
      }
    }
    v34 = v31;

    if (v34)
      goto LABEL_29;
  }
  else
  {
LABEL_22:

  }
  v35 = (void *)MEMORY[0x1D17BA0A0]();
  v36 = self;
  HMFGetOSLogHandle();
  v37 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "UUIDString");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v56 = v38;
    v57 = 2112;
    v58 = v40;
    _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Unable to find user for message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v35);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "responseHandler");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (v42)
  {
    objc_msgSend(v4, "responseHandler");
    v43 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v43)[2](v43, v41, 0);

  }
  v34 = 0;
LABEL_29:
  objc_msgSend(v4, "destination");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v45 = v44;
  else
    v45 = 0;
  v46 = v45;

  if (v46)
  {
    -[HMDHome homeManager](self, "homeManager");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "device");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "remoteDestinationString");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "sendUserAdded:destination:toHome:", v34, v49, self);

  }
  objc_msgSend(v4, "respondWithPayload:", 0);

}

- (void)_notifyChangedCharacteristics:(id)a3 message:(id)a4 modifiedCharacteristics:(id)a5 broadcast:(BOOL)a6
{
  _BOOL8 v6;
  id v10;
  id v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v6 = a6;
  v27 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "shortDescription");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v24 = v16;
    v25 = 2112;
    v26 = v17;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Posting internal notification before remote and XPC notifications. %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  LOBYTE(v22) = v6;
  v18 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome _postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:](v14, "_postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:", v10, MEMORY[0x1E0C9AA60], v12, 0, 0, v11, v22));
  +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:isBroadcast:](HMDCharacteristicUpdateTuple, "characteristicUpdateTuplesWithCharacteristics:isBroadcast:", v10, v6);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHome notificationPayloadForChangedCharacteristics:destinationIsXPCTransport:](HMDHome, "notificationPayloadForChangedCharacteristics:destinationIsXPCTransport:", v19, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _splitCharacteristicChanges:changedAccessories:](v14, "_splitCharacteristicChanges:changedAccessories:", v10, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:](v14, "_sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:", 0, 0, 0, 0, v21, 0);

  objc_autoreleasePoolPop(v18);
  if (!isWatch()
    && -[HMDHome shouldRelayNotificationToRegisteredDevicesForSource:](v14, "shouldRelayNotificationToRegisteredDevicesForSource:", v11))
  {
    -[HMDHome notifyRemoteUsersOfChangedCharacteristics:message:broadcast:](v14, "notifyRemoteUsersOfChangedCharacteristics:message:broadcast:", v10, v11, v6);
  }

}

- (BOOL)shouldRelayNotificationToRegisteredDevicesForSource:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  char isKindOfClass;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  BOOL v14;
  void *v15;
  char v16;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;
  objc_msgSend(v4, "destination");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if (!objc_msgSend(v6, "isRemote") || (isKindOfClass & 1) == 0 || !v7)
    goto LABEL_16;
  objc_msgSend(v6, "name");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "isEqualToString:", CFSTR("kCharacteristicValueUpdatedNotificationKey")) & 1) == 0)
  {
    objc_msgSend(v6, "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v10, "isEqualToString:", CFSTR("kMultipleCharacteristicValuesUpdatedNotificationKey")))
    {

      goto LABEL_10;
    }
    objc_msgSend(v6, "name");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("kCharacterisiticsChangedInternalNotificationKey"));

    if ((v16 & 1) != 0)
      goto LABEL_11;
LABEL_16:
    if (!isWatch())
      goto LABEL_17;
    goto LABEL_14;
  }
LABEL_10:

LABEL_11:
  -[HMDHome primaryResident](self, "primaryResident");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "isCurrentDevice"))
  {

LABEL_17:
    v14 = 1;
    goto LABEL_18;
  }
  -[HMDHome homeManager](self, "homeManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isPairedWithWatch");

  if ((v13 & 1) != 0)
    goto LABEL_17;
LABEL_14:
  v14 = 0;
LABEL_18:

  return v14;
}

- (BOOL)_shouldRegisterForNotificationsWithDevice:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  void *v15;

  v4 = a3;
  -[HMDHome primaryResident](self, "primaryResident");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!isWatch())
  {
    if (v5)
    {
      objc_msgSend(v5, "device");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isCurrentDevice");

      if ((v12 & 1) != 0)
        goto LABEL_8;
      objc_msgSend(v5, "device");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v4, "isEqual:", v9);
    }
    else
    {
      objc_msgSend(v4, "capabilities");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v9, "isRemoteGatewayCapable");
    }
    v10 = v13;
LABEL_14:

    goto LABEL_15;
  }
  if (!v5
    || (objc_msgSend(v5, "device"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v4, "isEqual:", v6),
        v6,
        (v7 & 1) == 0))
  {
    -[HMDHome homeManager](self, "homeManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "companionDevice");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v4, "isEqual:", v9) & 1) != 0)
    {
      v10 = 1;
    }
    else if (v9)
    {
      v10 = 0;
    }
    else
    {
      objc_msgSend(v5, "device");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v4, "isEqual:", v15);

      v9 = 0;
    }
    goto LABEL_14;
  }
LABEL_8:
  v10 = 1;
LABEL_15:

  return v10;
}

- (void)_notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  char v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **p_cache;
  uint64_t k;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  HMDHome *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  HMDHome *v67;
  NSObject *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  HMDHome *v74;
  NSObject *v75;
  void *v76;
  void *v77;
  HMDHome *v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  HMDHome *v84;
  NSObject *v85;
  void *v86;
  unint64_t v87;
  int v88;
  unint64_t skippedInterDeviceChangeNotifications;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  _BOOL4 v98;
  void *v99;
  id v100;
  id v101;
  void *v102;
  id obj;
  HMDHome *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint8_t buf[4];
  void *v118;
  __int16 v119;
  unint64_t v120;
  __int16 v121;
  void *v122;
  _BYTE v123[128];
  _BYTE v124[128];
  _BYTE v125[128];
  uint64_t v126;

  v98 = a5;
  v126 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v93 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v113, v125, 16);
  obj = v8;
  v104 = self;
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v114;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v114 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * i);
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "stateNumber");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "updateTrackedAccessoryStateNumber:", v15);

        -[HMDHome hapMetadata](self, "hapMetadata");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "service");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "type");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v16, "shouldFilterChangeNotificationsForCharacteristicType:serviceType:", v17, v19);

        self = v104;
        if ((v20 & 1) == 0)
        {
          if (-[HMDHome _shouldRateLimitChangeNotificationsForCharacteristic:](v104, "_shouldRateLimitChangeNotificationsForCharacteristic:", v13))
          {
            v21 = (void *)MEMORY[0x1D17BA0A0]();
            v22 = v104;
            HMFGetOSLogHandle();
            v23 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v118 = v24;
              v119 = 2112;
              v120 = (unint64_t)v13;
              _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Filtering out characteristic for remote notification due to rate limiting: %@", buf, 0x16u);

              self = v104;
            }

            objc_autoreleasePoolPop(v21);
          }
          else
          {
            objc_msgSend(v13, "accessory");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v25, "hasBTLELink"))
            {
              objc_msgSend(v25, "identifier");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", v26, 0, 1);
              v27 = (void *)objc_claimAutoreleasedReturnValue();

              if ((objc_msgSend(v27, "isReachable") & 1) == 0)
                objc_msgSend(v94, "addObject:", v13);

            }
            objc_msgSend(v99, "addObject:", v13);

          }
        }
      }
      v8 = obj;
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v113, v125, 16);
    }
    while (v10);
  }

  v28 = v99;
  if (objc_msgSend(v99, "count"))
  {
    v29 = v93;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v30 = v29;
    else
      v30 = 0;
    v31 = v30;

    v92 = v31;
    objc_msgSend(v31, "destination");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v33 = v32;
    else
      v33 = 0;
    v34 = v33;

    v91 = v34;
    objc_msgSend(v34, "device");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome primaryResident](self, "primaryResident");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "device");
    v90 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome notificationRegistry](self, "notificationRegistry");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "usersRegisteredForNotificationsForCharacteristics:", v99);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v100 = (id)objc_msgSend(v38, "mutableCopy");

    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v38) = objc_msgSend(v39, "isCurrentDeviceAvailableResident");

    v95 = v35;
    v88 = (int)v38;
    if ((_DWORD)v38)
    {
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      -[HMDHome residentEnabledDevices](self, "residentEnabledDevices");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v109, v124, 16);
      if (!v41)
        goto LABEL_37;
      v42 = v41;
      v43 = *(_QWORD *)v110;
      while (1)
      {
        for (j = 0; j != v42; ++j)
        {
          if (*(_QWORD *)v110 != v43)
            objc_enumerationMutation(v40);
          v45 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * j);
          -[HMDHome primaryResident](self, "primaryResident");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v46, "isCurrentDevice") & 1) == 0)
          {
            -[HMDHome primaryResident](self, "primaryResident");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "device");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "remoteDestinationString");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = objc_msgSend(v100, "containsObject:", v49);

            if ((v50 & 1) != 0)
              goto LABEL_35;
            objc_msgSend(v45, "remoteDestinationString");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "addObject:", v46);
          }

LABEL_35:
          self = v104;
        }
        v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v109, v124, 16);
        if (!v42)
        {
LABEL_37:

          v35 = v95;
          break;
        }
      }
    }
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "UUIDString");
    v96 = (void *)objc_claimAutoreleasedReturnValue();

    skippedInterDeviceChangeNotifications = self->_skippedInterDeviceChangeNotifications;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v101 = v100;
    v52 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v105, v123, 16);
    v28 = v99;
    if (v52)
    {
      v53 = v52;
      v54 = *(_QWORD *)v106;
      p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
      v97 = *(_QWORD *)v106;
      do
      {
        for (k = 0; k != v53; ++k)
        {
          if (*(_QWORD *)v106 != v54)
            objc_enumerationMutation(v101);
          v57 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * k);
          objc_msgSend(p_cache + 123, "deviceWithDestination:", v57);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          if (v58)
          {
            objc_msgSend(v102, "addObject:", v58);
            if (-[HMDHome _shouldSendToDestination:device:remoteSourceDevice:](self, "_shouldSendToDestination:device:remoteSourceDevice:", v57, v58, v35))
            {
              -[HMDHome notificationRegistry](self, "notificationRegistry");
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v59, "filterCharacteristics:forUser:", v28, v57);
              v60 = (void *)objc_claimAutoreleasedReturnValue();

              +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:isBroadcast:](HMDCharacteristicUpdateTuple, "characteristicUpdateTuplesWithCharacteristics:isBroadcast:", v60, v98);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v61, "count"))
              {
                v62 = (void *)MEMORY[0x1D17BA0A0]();
                v63 = self;
                HMFGetOSLogHandle();
                v64 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v118 = v65;
                  v119 = 2112;
                  v120 = (unint64_t)v57;
                  v121 = 2112;
                  v122 = v96;
                  _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the characteristics that changed for notificationUpdateIdentifier: %@", buf, 0x20u);

                  v28 = v99;
                }

                objc_autoreleasePoolPop(v62);
                -[HMDHome _notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:](v63, "_notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:", v61, 0, v96, v57, &__block_literal_global_1183);
                self = v104;
                v35 = v95;
              }

              v54 = v97;
              p_cache = (void **)(HMDCloudSyncLegacyFetchLogEvent + 16);
            }
          }

        }
        v53 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v105, v123, 16);
      }
      while (v53);
    }

    if (!objc_msgSend(v28, "count")
      || !v90
      || (objc_msgSend(v90, "isCurrentDevice") & 1) != 0
      || (objc_msgSend(v102, "containsObject:", v90) & 1) != 0
      || (objc_msgSend(v35, "isEqual:", v90) & 1) != 0)
    {
      goto LABEL_70;
    }
    if (v88)
    {
      v66 = (void *)MEMORY[0x1D17BA0A0]();
      v67 = self;
      HMFGetOSLogHandle();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v90, "remoteDestinationString");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v118 = v69;
        v119 = 2112;
        v120 = (unint64_t)v70;
        v121 = 2112;
        v122 = v96;
        _os_log_impl(&dword_1CD062000, v68, OS_LOG_TYPE_INFO, "%{public}@Fanning to primary resident destination %@ with notificationUpdateIdentifier: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v66);
      objc_msgSend(v90, "remoteDestinationString");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:](v67, "_notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:", v28, 0, v96, v71, v98);
    }
    else
    {
      if (!objc_msgSend(v94, "count"))
      {
        ++self->_skippedInterDeviceChangeNotifications;
LABEL_70:
        v72 = v93;
        if (isInternalBuild()
          && skippedInterDeviceChangeNotifications != self->_skippedInterDeviceChangeNotifications)
        {
          v83 = (void *)MEMORY[0x1D17BA0A0]();
          v84 = self;
          HMFGetOSLogHandle();
          v85 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            v87 = self->_skippedInterDeviceChangeNotifications;
            *(_DWORD *)buf = 138543618;
            v118 = v86;
            v119 = 2048;
            v120 = v87;
            _os_log_impl(&dword_1CD062000, v85, OS_LOG_TYPE_INFO, "%{public}@Skipped %lu spurious inter-device characteristic change notifications", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v83);
          v35 = v95;
        }

        goto LABEL_76;
      }
      v77 = (void *)MEMORY[0x1D17BA0A0]();
      v78 = self;
      HMFGetOSLogHandle();
      v79 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v90, "remoteDestinationString");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v118 = v80;
        v119 = 2112;
        v120 = (unint64_t)v81;
        v121 = 2112;
        v122 = v96;
        _os_log_impl(&dword_1CD062000, v79, OS_LOG_TYPE_INFO, "%{public}@Fanning the characteristics changed over BTLE to primary resident destination %@ with notificationUpdateIdentifier: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v77);
      objc_msgSend(v94, "allObjects");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v90, "remoteDestinationString");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:](v78, "_notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:", v71, 0, v96, v82, v98);

    }
    v35 = v95;
    goto LABEL_70;
  }
  v72 = v93;
  if (objc_msgSend(v8, "count"))
  {
    v73 = (void *)MEMORY[0x1D17BA0A0]();
    v74 = self;
    HMFGetOSLogHandle();
    v75 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v118 = v76;
      _os_log_impl(&dword_1CD062000, v75, OS_LOG_TYPE_DEBUG, "%{public}@No changes to notify remote devices of changed characteristics after filtering", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v73);
  }
LABEL_76:

}

- (BOOL)_shouldRateLimitChangeNotificationsForCharacteristic:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  id v17;
  double v18;
  double v19;
  BOOL v20;

  v3 = a3;
  objc_msgSend(v3, "service");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0D15F40]) & 1) == 0)
  {

    goto LABEL_13;
  }
  objc_msgSend(v4, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0D16288]))
  {
    objc_msgSend(v4, "type");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0D161E8]);

    if (v8)
      goto LABEL_6;
LABEL_13:
    v20 = 0;
    goto LABEL_14;
  }

LABEL_6:
  objc_msgSend(v3, "previousValue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  objc_msgSend(v11, "doubleValue");
  v13 = v12;

  v14 = round(v13 + v13) * 0.5;
  objc_msgSend(v3, "value");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v16 = v15;
  else
    v16 = 0;
  v17 = v16;

  objc_msgSend(v17, "doubleValue");
  v19 = v18;

  v20 = vabdd_f64(v14, round(v19 + v19) * 0.5) < 2.22044605e-16;
LABEL_14:

  return v20;
}

- (BOOL)_shouldUseAttributeReportForBulletin:(id)a3
{
  return 1;
}

- (id)_userForDevice:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __26__HMDHome__userForDevice___block_invoke;
  v9[3] = &unk_1E89A4C18;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "hmf_objectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)_shouldSendToDestination:(id)a3 device:(id)a4 remoteSourceDevice:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  const char *v25;
  void *v26;
  id v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  char v37;
  void *v38;
  int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  char v45;
  BOOL v46;
  void *v48;
  id v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  id v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "deviceForHandle:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "account");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "shortDescription");
      v27 = v10;
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v26;
      v52 = 2112;
      v53 = v28;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Device %@ has no user attached to it", buf, 0x16u);

      v10 = v27;
    }
    goto LABEL_38;
  }
  if (!-[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled"))
  {
    -[HMDHome _userForDevice:](self, "_userForDevice:", v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v15)
    {
      v49 = v10;
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "shortDescription");
        v48 = v16;
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v51 = v19;
        v52 = 2112;
        v53 = v20;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@No user found for the matching device: %@", buf, 0x16u);

        v16 = v48;
      }

      objc_autoreleasePoolPop(v16);
      v10 = v49;
    }
    if ((objc_msgSend(v15, "isRemoteAccessAllowed", v48) & 1) == 0)
    {
      v32 = (void *)MEMORY[0x1D17BA0A0]();
      v33 = self;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v51 = v35;
        v52 = 2112;
        v53 = v9;
        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Skipping device %@ since the user lacks remote access", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v32);

      goto LABEL_39;
    }

  }
  if (v9 && objc_msgSend(v10, "isEqual:", v9))
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v24;
      v52 = 2112;
      v53 = v8;
      v25 = "%{public}@Skipping device %@ since it is the original sender";
LABEL_18:
      v29 = v23;
      v30 = OS_LOG_TYPE_DEBUG;
LABEL_37:
      _os_log_impl(&dword_1CD062000, v29, v30, v25, buf, 0x16u);

      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if (objc_msgSend(v13, "isCurrentDevice"))
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v24;
      v52 = 2112;
      v53 = v8;
      v25 = "%{public}@Skipping device %@ - ourselves";
      goto LABEL_18;
    }
LABEL_38:

    objc_autoreleasePoolPop(v21);
LABEL_39:
    v46 = 0;
    goto LABEL_40;
  }
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v31, "isCompanionCapable"))
  {

  }
  else
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v36, "isCurrentDeviceAvailableResident");

    if ((v37 & 1) == 0)
    {
      ++self->_skippedInterDeviceChangeNotifications;
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = self;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        goto LABEL_38;
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v24;
      v52 = 2112;
      v53 = v8;
      v25 = "%{public}@Skipping device %@ since this device is not a companion or enabled resident";
      goto LABEL_36;
    }
  }
  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "isCompanionCapable");

  if (v39)
  {
    objc_msgSend(v13, "productInfo");
    v40 = objc_claimAutoreleasedReturnValue();
    if (v40
      && (v41 = (void *)v40,
          objc_msgSend(v13, "productInfo"),
          v42 = (void *)objc_claimAutoreleasedReturnValue(),
          v43 = objc_msgSend(v42, "productClass"),
          v42,
          v41,
          v43 != 5))
    {
      ++self->_skippedInterDeviceChangeNotifications;
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = self;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        goto LABEL_38;
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v24;
      v52 = 2112;
      v53 = v8;
      v25 = "%{public}@Skipping device %@ since this device is a companion but sending to non-watch";
    }
    else
    {
      -[HMDHome homeManager](self, "homeManager");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend(v44, "isPairedWithWatch");

      if ((v45 & 1) != 0)
        goto LABEL_29;
      ++self->_skippedInterDeviceChangeNotifications;
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = self;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        goto LABEL_38;
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v51 = v24;
      v52 = 2112;
      v53 = v8;
      v25 = "%{public}@Skipping device %@ since this device is a companion but not paired with a watch";
    }
LABEL_36:
    v29 = v23;
    v30 = OS_LOG_TYPE_INFO;
    goto LABEL_37;
  }
LABEL_29:
  v46 = 1;
LABEL_40:

  return v46;
}

- (void)_notifyChangedCharacteristics:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 broadcast:(BOOL)a7
{
  _BOOL8 v7;
  id v12;
  id v13;
  id v14;
  id v15;

  v7 = a7;
  v12 = a6;
  v13 = a5;
  v14 = a4;
  +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:isBroadcast:](HMDCharacteristicUpdateTuple, "characteristicUpdateTuplesWithCharacteristics:isBroadcast:", a3, v7);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome _notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:](self, "_notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:", v15, v14, v13, v12, 0);

}

- (void)_sendCoalescedRemoteNotificationsForRequestMessage:(id)a3 accessories:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a4;
  v6 = a3;
  objc_msgSend(v6, "destination");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  v10 = objc_msgSend(v6, "isRemote");
  if (v10)
  {
    objc_msgSend(v9, "device");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "remoteDestinationString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectForKey:", v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v14, "sendCoalescedRemoteNotificationForAccessories:", v15);
    }
  }

}

- (void)_notifyUpdatedCharacteristic:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6 completion:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDDeviceNotificationHandler *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  char v25;
  HMDDeviceNotificationHandler *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  if (v15)
  {
    -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKey:", v15);
    v18 = (HMDDeviceNotificationHandler *)objc_claimAutoreleasedReturnValue();

    if (!v18)
    {
      -[HMDHome homeManager](self, "homeManager");
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "watchManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "connectedWatches");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      if (v21)
      {
        v29 = v14;
        v30 = v12;
        v22 = *(_QWORD *)v33;
        while (2)
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v33 != v22)
              objc_enumerationMutation(v20);
            objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * i), "remoteDestinationString");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = objc_msgSend(v24, "isEqual:", v15);

            if ((v25 & 1) != 0)
            {
              v21 = 1;
              goto LABEL_13;
            }
          }
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
          if (v21)
            continue;
          break;
        }
LABEL_13:
        v14 = v29;
        v12 = v30;
      }

      v26 = [HMDDeviceNotificationHandler alloc];
      -[HMDHome msgDispatcher](self, "msgDispatcher");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = -[HMDDeviceNotificationHandler initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:](v26, "initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:", v15, v21, v13, v27, self);

      -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setObject:forKey:", v18, v15);

    }
    -[HMDDeviceNotificationHandler sendNotificationForCharacteristicUpdates:withRequestIdentifier:notificationUpdateIdentifier:completion:](v18, "sendNotificationForCharacteristicUpdates:withRequestIdentifier:notificationUpdateIdentifier:completion:", v12, v13, v14, v16);

  }
}

- (void)notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __74__HMDHome_notifyRemoteUsersOfChangedProperties_requestMessageInformation___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_notifyRemoteUsersOfChangedProperties:(id)a3 requestMessageInformation:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **p_cache;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  HMDHome *v41;
  NSObject *v42;
  void *v43;
  HMDHome *v44;
  void *v45;
  void *v46;
  int v47;
  unint64_t skippedInterDeviceChangeNotifications;
  void *v49;
  void *v50;
  id v51;
  HMDHome *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  id obj;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  unint64_t v64;
  __int16 v65;
  void *v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v62 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Notifying users registered with resident of changes in properties", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  v50 = v7;
  objc_msgSend(v7, "remoteSourceDevice");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome primaryResident](v9, "primaryResident");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "device");
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome notificationRegistry](v9, "notificationRegistry");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "usersRegisteredForNotificationsForProperties:", v6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome residentDeviceManager](v9, "residentDeviceManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v16, "isCurrentDeviceAvailableResident");

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  skippedInterDeviceChangeNotifications = v9->_skippedInterDeviceChangeNotifications;
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "UUIDString");
  v54 = (void *)objc_claimAutoreleasedReturnValue();

  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  obj = v15;
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
  v53 = v12;
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v58;
    p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
    v51 = v6;
    v52 = v9;
    v55 = *(_QWORD *)v58;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v58 != v21)
          objc_enumerationMutation(obj);
        v24 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * i);
        objc_msgSend(p_cache + 123, "deviceWithDestination:", v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25)
        {
          objc_msgSend(v17, "addObject:", v25);
          if (-[HMDHome _shouldSendToDestination:device:remoteSourceDevice:](v9, "_shouldSendToDestination:device:remoteSourceDevice:", v24, v25, v12))
          {
            v26 = v17;
            -[HMDHome notificationRegistry](v9, "notificationRegistry");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "filterProperties:forUser:", v6, v24);
            v28 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v28, "count"))
            {
              v29 = (void *)MEMORY[0x1D17BA0A0]();
              v30 = v9;
              HMFGetOSLogHandle();
              v31 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v62 = v32;
                v63 = 2112;
                v64 = (unint64_t)v24;
                v65 = 2112;
                v66 = v54;
                _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Fanning out to device %@ with the properties that changed with notificationUpdateIdentifier: %@", buf, 0x20u);

                v6 = v51;
              }

              objc_autoreleasePoolPop(v29);
              -[HMDHome _notifyChangedProperties:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:](v30, "_notifyChangedProperties:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:", v28, 0, v54, v24);
              v9 = v52;
              v12 = v53;
            }

            v17 = v26;
            v21 = v55;
            p_cache = (void **)(HMDCloudSyncLegacyFetchLogEvent + 16);
          }
        }

      }
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
    }
    while (v20);
  }

  if (!v50
    && objc_msgSend(v6, "count")
    && v49
    && (objc_msgSend(v49, "isCurrentDevice") & 1) == 0
    && (objc_msgSend(v17, "containsObject:", v49) & 1) == 0)
  {
    if (v47)
    {
      v39 = v17;
      v40 = (void *)MEMORY[0x1D17BA0A0]();
      v41 = v9;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "remoteDestinationString");
        v44 = v9;
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v62 = v43;
        v63 = 2112;
        v64 = (unint64_t)v45;
        v65 = 2112;
        v66 = v54;
        _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@Fanning to primary resident destination %@ notificationUpdateIdentifier: %@", buf, 0x20u);

        v9 = v44;
        v12 = v53;
      }

      objc_autoreleasePoolPop(v40);
      objc_msgSend(v49, "remoteDestinationString");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _notifyChangedProperties:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:](v41, "_notifyChangedProperties:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:", v6, 0, v54, v46);

      v17 = v39;
    }
    else
    {
      ++v9->_skippedInterDeviceChangeNotifications;
    }
  }
  if (isInternalBuild()
    && skippedInterDeviceChangeNotifications != v9->_skippedInterDeviceChangeNotifications)
  {
    v33 = v17;
    v34 = (void *)MEMORY[0x1D17BA0A0]();
    v35 = v9;
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = v9->_skippedInterDeviceChangeNotifications;
      *(_DWORD *)buf = 138543618;
      v62 = v37;
      v63 = 2048;
      v64 = v38;
      _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@Skipped %lu spurious inter-device media property change notifications", buf, 0x16u);

      v12 = v53;
    }

    objc_autoreleasePoolPop(v34);
    v17 = v33;
  }

}

- (void)_notifyChangedProperties:(id)a3 withRequestIdentifier:(id)a4 notificationUpdateIdentifier:(id)a5 toUserDeviceAddress:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  HMDDeviceNotificationHandler *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  char v23;
  HMDDeviceNotificationHandler *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  if (v13)
  {
    -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKey:", v13);
    v15 = (HMDDeviceNotificationHandler *)objc_claimAutoreleasedReturnValue();

    if (!v15)
    {
      -[HMDHome homeManager](self, "homeManager");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      objc_msgSend(v16, "watchManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "connectedWatches");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      if (v19)
      {
        v27 = v16;
        v28 = v10;
        v20 = *(_QWORD *)v30;
        while (2)
        {
          for (i = 0; i != v19; ++i)
          {
            if (*(_QWORD *)v30 != v20)
              objc_enumerationMutation(v18);
            objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "remoteDestinationString", v27, v28);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = objc_msgSend(v22, "isEqual:", v13);

            if ((v23 & 1) != 0)
            {
              v19 = 1;
              goto LABEL_13;
            }
          }
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
          if (v19)
            continue;
          break;
        }
LABEL_13:
        v16 = v27;
        v10 = v28;
      }

      v24 = [HMDDeviceNotificationHandler alloc];
      -[HMDHome msgDispatcher](self, "msgDispatcher");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = -[HMDDeviceNotificationHandler initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:](v24, "initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:", v13, v19, v11, v25, self);

      -[HMDHome notificationHandlerMap](self, "notificationHandlerMap");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setObject:forKey:", v15, v13);

    }
    -[HMDDeviceNotificationHandler sendNotificationForMediaProperties:withRequestIdentifier:notificationUpdateIdentifier:](v15, "sendNotificationForMediaProperties:withRequestIdentifier:notificationUpdateIdentifier:", v10, v11, v12);

  }
}

- (void)_handleCharacteristicsChangedNotification:(id)a3
{
  HMDHome *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  HMDMediaSessionRequestMessageInformation *v51;
  void *v52;
  void *v53;
  void *v54;
  int v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  HMDHome *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  HMDHome *v68;
  NSObject *v69;
  void *v70;
  void *v71;
  HMDUnexpectedNotificationLogEvent *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id obj;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  id v88;
  void *v89;
  void *v91;
  void *v92;
  void *v93;
  _QWORD v94[4];
  id v95;
  id v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  void *v113;
  uint8_t v114[128];
  uint8_t buf[4];
  void *v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  void *v120;
  _BYTE v121[128];
  _BYTE v122[128];
  _BYTE v123[128];
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v87 = a3;
  objc_msgSend(v87, "dictionaryForKey:", CFSTR("kCharacteristicNotificationsKey"));
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v87, "stringForKey:", CFSTR("kRequestIdentifierKey"));
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  if (v80)
  {
    v3 = self;
    if (-[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled"))
    {
      -[HMDHome accessoryReaderWriter](self, "accessoryReaderWriter");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "handleRemotelyUpdatedCharacteristicsMessage:", v87);

      v3 = self;
    }
    v76 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v80);
    -[HMDHome pendingResponses](v3, "pendingResponses");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", v80);
    v86 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    if (v86)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
      objc_msgSend(v6, "setNumberStyle:", 1);
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      objc_msgSend(v79, "allKeys");
      obj = (id)objc_claimAutoreleasedReturnValue();
      v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, v123, 16);
      if (v75)
      {
        v73 = *(_QWORD *)v110;
        do
        {
          v7 = 0;
          do
          {
            if (*(_QWORD *)v110 != v73)
            {
              v8 = v7;
              objc_enumerationMutation(obj);
              v7 = v8;
            }
            v74 = v7;
            v9 = *(_QWORD *)(*((_QWORD *)&v109 + 1) + 8 * v7);
            objc_msgSend(v79, "objectForKeyedSubscript:", v9);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v11 = v10;
            else
              v11 = 0;
            v83 = v11;

            v78 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v9);
            -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v78);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v13 = v12;
            else
              v13 = 0;
            v14 = v13;

            v107 = 0u;
            v108 = 0u;
            v105 = 0u;
            v106 = 0u;
            objc_msgSend(v83, "allKeys");
            v81 = (id)objc_claimAutoreleasedReturnValue();
            v84 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v105, v122, 16);
            if (v84)
            {
              v82 = *(_QWORD *)v106;
              do
              {
                v15 = 0;
                do
                {
                  if (*(_QWORD *)v106 != v82)
                  {
                    v16 = v15;
                    objc_enumerationMutation(v81);
                    v15 = v16;
                  }
                  v85 = v15;
                  v17 = *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * v15);
                  objc_msgSend(v83, "objectForKeyedSubscript:", v17);
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                    v19 = v18;
                  else
                    v19 = 0;
                  v88 = v19;

                  objc_msgSend(v6, "numberFromString:", v17);
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v21 = objc_msgSend(v86, "pendingResponseCount");
                  if (v21 >= objc_msgSend(v88, "count"))
                  {
                    v23 = objc_msgSend(v88, "count");
                    v22 = objc_msgSend(v86, "pendingResponseCount") - v23;
                  }
                  else
                  {
                    v22 = 0;
                  }
                  objc_msgSend(v86, "setPendingResponseCount:", v22);
                  v103 = 0u;
                  v104 = 0u;
                  v101 = 0u;
                  v102 = 0u;
                  objc_msgSend(v88, "allKeys");
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v101, v121, 16);
                  if (v25)
                  {
                    v26 = 0;
                    v27 = *(_QWORD *)v102;
                    do
                    {
                      v28 = 0;
                      v29 = v26;
                      do
                      {
                        if (*(_QWORD *)v102 != v27)
                          objc_enumerationMutation(v24);
                        objc_msgSend(v6, "numberFromString:", *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * v28));
                        v30 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v14, "findCharacteristic:forService:", v30, v20);
                        v26 = (void *)objc_claimAutoreleasedReturnValue();

                        if (v26)
                        {
                          objc_msgSend(v92, "addObject:", v26);
                          if (objc_msgSend(v26, "isNotificationEnabledForClientIdentifierPrefix:", CFSTR("com.apple.HomeKitDaemon.Local")))objc_msgSend(v91, "addObject:", v26);
                        }

                        ++v28;
                        v29 = v26;
                      }
                      while (v25 != v28);
                      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v101, v121, 16);
                    }
                    while (v25);

                  }
                  v15 = v85 + 1;
                }
                while (v85 + 1 != v84);
                v84 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v105, v122, 16);
              }
              while (v84);
            }

            v7 = v74 + 1;
          }
          while (v74 + 1 != v75);
          v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, v123, 16);
        }
        while (v75);
      }

      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v116 = v34;
        v117 = 2112;
        v118 = (uint64_t)v80;
        v119 = 2112;
        v120 = v79;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Notifying changes for requestIdentifier %@: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v31);
      v35 = (void *)MEMORY[0x1D17BA0A0]();
      -[HMDHome _splitCharacteristicChanges:changedAccessories:](v32, "_splitCharacteristicChanges:changedAccessories:", v92, v79);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "requestMessage");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:](v32, "_sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:", v76, v37, 1, 1, v36, 0);

      objc_autoreleasePoolPop(v35);
    }

  }
  else
  {
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v38 = v79;
    v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v97, v114, 16);
    if (v39)
    {
      v40 = *(_QWORD *)v98;
      do
      {
        for (i = 0; i != v39; ++i)
        {
          if (*(_QWORD *)v98 != v40)
            objc_enumerationMutation(v38);
          v42 = *(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * i);
          objc_initWeak((id *)buf, self);
          v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v42);
          -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v43);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v45 = v44;
          else
            v45 = 0;
          v46 = v45;

          objc_msgSend(v38, "hmf_dictionaryForKey:", v42);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome workQueue](self, "workQueue");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          v94[0] = MEMORY[0x1E0C809B0];
          v94[1] = 3221225472;
          v94[2] = __53__HMDHome__handleCharacteristicsChangedNotification___block_invoke;
          v94[3] = &unk_1E89A4C40;
          objc_copyWeak(&v96, (id *)buf);
          v95 = v87;
          objc_msgSend(v46, "handleMultipleCharacteristicsUpdated:message:completionQueue:completionHandler:", v47, v95, v48, v94);

          objc_destroyWeak(&v96);
          objc_destroyWeak((id *)buf);
        }
        v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v97, v114, 16);
      }
      while (v39);
    }

    v49 = -[HMDHome _unexpectedCharacteristicsFromCharacteristicNotifications:](self, "_unexpectedCharacteristicsFromCharacteristicNotifications:", v38);
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v87, "dictionaryForKey:", CFSTR("kMediaNotificationsKey"));
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMediaPropertyResponse responsesFromSerializedResponse:requests:home:](HMDMediaPropertyResponse, "responsesFromSerializedResponse:requests:home:", v93, 0, self);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = -[HMDMediaSessionRequestMessageInformation initWithMessage:]([HMDMediaSessionRequestMessageInformation alloc], "initWithMessage:", v87);
  -[HMDHome updateMediaStateWithResponses:requestMessageInformation:]((uint64_t)self, v89, v51);
  objc_msgSend(v87, "remoteSourceDevice");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHome _shouldRegisterForNotificationsWithDevice:](self, "_shouldRegisterForNotificationsWithDevice:", v52))
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v91, "count"))
    {
      if (-[HMDHome isCurrentDeviceAvailableResident](self, "isCurrentDeviceAvailableResident"))
      {
        if (!-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident"))
        {
          objc_msgSend(v53, "device");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = objc_msgSend(v52, "isEqual:", v54);

          if (v55)
          {
            v56 = (void *)MEMORY[0x1D17BA0A0]();
            v57 = self;
            HMFGetOSLogHandle();
            v58 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              v60 = objc_msgSend(v91, "count");
              *(_DWORD *)buf = 138543874;
              v116 = v59;
              v117 = 2048;
              v118 = v60;
              v119 = 2112;
              v120 = v91;
              _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@Disabling %tu notifications on primary resident: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v56);
            -[HMDHome _remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:](v57, "_remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:", 0, v91, 0);
          }
        }
      }
    }
    -[HMDHome _disablePayloadFromRemotelyUpdatedCharacteristicNotifications:](self, "_disablePayloadFromRemotelyUpdatedCharacteristicNotifications:", v79);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v61, "count") || objc_msgSend(v50, "count"))
    {
      v62 = (void *)MEMORY[0x1D17BA0A0]();
      v63 = self;
      HMFGetOSLogHandle();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "shortDescription");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v116 = v65;
        v117 = 2112;
        v118 = (uint64_t)v66;
        _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations due to unexpected characteristic notification received on primary resident from remote device: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v62);
      -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:](v63, "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:", v61, MEMORY[0x1E0C9AA70], v50, 0, v52);
    }

  }
  else
  {
    v67 = (void *)MEMORY[0x1D17BA0A0]();
    v68 = self;
    HMFGetOSLogHandle();
    v69 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v116 = v70;
      v117 = 2112;
      v118 = (uint64_t)v52;
      _os_log_impl(&dword_1CD062000, v69, OS_LOG_TYPE_INFO, "%{public}@Disabling notification registrations with resident: %@ due to unexpected characteristic notification received", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v67);
    -[HMDHome logEventSubmitter](v68, "logEventSubmitter");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = -[HMDUnexpectedNotificationLogEvent initWithCount:]([HMDUnexpectedNotificationLogEvent alloc], "initWithCount:", 1);
    objc_msgSend(v71, "submitLogEvent:", v72);

    v113 = v52;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v113, 1);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _disableNotificationsForDevices:](v68, "_disableNotificationsForDevices:", v53);
  }

  objc_msgSend(v87, "respondWithPayload:", 0);
}

- (id)_disablePayloadFromRemotelyUpdatedCharacteristicNotifications:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v31;
  uint64_t v32;
  HMDHome *v33;
  id v34;
  uint64_t v35;
  id v36;
  id obj;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
    objc_msgSend(v5, "setNumberStyle:", 1);
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    objc_msgSend(v4, "allKeys");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v52;
      v9 = 0x1E0C99000uLL;
      v10 = 0x1E0CB3000uLL;
      v33 = self;
      v34 = v4;
      v32 = *(_QWORD *)v52;
      do
      {
        v11 = 0;
        v35 = v7;
        do
        {
          if (*(_QWORD *)v52 != v8)
            objc_enumerationMutation(obj);
          v38 = v11;
          v12 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * v11);
          objc_msgSend(*(id *)(v9 + 3560), "array", v31);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "hmf_dictionaryForKey:", v12);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = (void *)objc_msgSend(objc_alloc(*(Class *)(v10 + 2600)), "initWithUUIDString:", v12);
          -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v15 = v14;
          else
            v15 = 0;
          v16 = v15;

          if (v16 && (objc_msgSend(v16, "hasBTLELink") & 1) == 0 && objc_msgSend(v16, "hasIPLink"))
          {
            v36 = v16;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            objc_msgSend(v42, "allKeys");
            v40 = (id)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
            if (v17)
            {
              v18 = v17;
              v41 = *(_QWORD *)v48;
              do
              {
                v19 = 0;
                do
                {
                  if (*(_QWORD *)v48 != v41)
                    objc_enumerationMutation(v40);
                  objc_msgSend(v42, "hmf_dictionaryForKey:", *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * v19));
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v43 = 0u;
                  v44 = 0u;
                  v45 = 0u;
                  v46 = 0u;
                  objc_msgSend(v20, "allKeys");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
                  if (v22)
                  {
                    v23 = v22;
                    v24 = *(_QWORD *)v44;
                    do
                    {
                      v25 = 0;
                      do
                      {
                        if (*(_QWORD *)v44 != v24)
                          objc_enumerationMutation(v21);
                        objc_msgSend(v5, "numberFromString:", *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v25));
                        v26 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v26)
                          objc_msgSend(v13, "addObject:", v26);

                        ++v25;
                      }
                      while (v23 != v25);
                      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v43, v55, 16);
                    }
                    while (v23);
                  }

                  ++v19;
                }
                while (v19 != v18);
                v18 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v47, v56, 16);
              }
              while (v18);
            }

            self = v33;
            v4 = v34;
            v8 = v32;
            v9 = 0x1E0C99000;
            v10 = 0x1E0CB3000;
            v7 = v35;
            v16 = v36;
            if (objc_msgSend(v13, "count"))
            {
              v27 = (void *)objc_msgSend(v13, "copy");
              objc_msgSend(v39, "UUIDString");
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "setObject:forKeyedSubscript:", v27, v28);

              v7 = v35;
              v16 = v36;
            }
          }

          v11 = v38 + 1;
        }
        while (v38 + 1 != v7);
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
      }
      while (v7);
    }

    v29 = (void *)objc_msgSend(v31, "copy");
  }
  else
  {
    v29 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v29;
}

- (void)_postInternalNotificationForChangedCharacteristics:(id)a3 previouslyNilChangedCharacteristics:(id)a4 modifiedCharacteristics:(id)a5 changedByThisDevice:(BOOL)a6 residentShouldNotifyPeers:(BOOL)a7 message:(id)a8 broadcast:(BOOL)a9
{
  id v14;
  id v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  BOOL v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  HMDHomePresenceRemote *v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  void *v38;
  void *v39;
  HMDHAPAccessoryNotificationEvent *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t k;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  HMDHome *v71;
  NSObject *v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  _BOOL4 v77;
  id v78;
  id obj;
  id v80;
  HMDHome *v81;
  void *v82;
  void *v83;
  id v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _QWORD v98[5];
  id v99;
  BOOL v100;
  char v101;
  _QWORD v102[5];
  _BYTE v103[128];
  _BYTE v104[128];
  uint8_t v105[128];
  uint8_t buf[4];
  void *v107;
  __int16 v108;
  void *v109;
  __int16 v110;
  void *v111;
  __int16 v112;
  void *v113;
  __int16 v114;
  id v115;
  __int16 v116;
  void *v117;
  uint64_t v118;

  v77 = a7;
  v118 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v78 = a4;
  v84 = a5;
  v15 = a8;
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  v81 = v17;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v22 = a6;
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "shortDescription");
    v24 = v15;
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544642;
    v107 = v19;
    v108 = 2112;
    v109 = v20;
    v110 = 2112;
    v111 = v21;
    v112 = 2112;
    v113 = v23;
    v114 = 2112;
    v115 = v14;
    v116 = 2112;
    v117 = v25;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Posting internal notification and notifying remote users with changedByThisDevice: %@ residentShouldNotifyPeers: %@ broadcast: %@ about changed characteristics: %@ message: %@ ", buf, 0x3Eu);

    v15 = v24;
    a6 = v22;

    v17 = v81;
  }

  objc_autoreleasePoolPop(v16);
  if (objc_msgSend(v14, "count") || objc_msgSend(v78, "count"))
  {
    objc_msgSend(v15, "dictionaryForKey:", CFSTR("kPresenceDictionaryForNotificationKey"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "dictionaryForKey:", CFSTR("kPresencePairingIdentifierDictionaryForNotificationKey"));
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = MEMORY[0x1E0C809B0];
    v102[0] = MEMORY[0x1E0C809B0];
    v102[1] = 3221225472;
    v102[2] = __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke;
    v102[3] = &unk_1E89BF8D0;
    v102[4] = v17;
    objc_msgSend(v14, "na_filter:", v102);
    v29 = objc_claimAutoreleasedReturnValue();
    v82 = (void *)v27;
    v83 = v26;
    if (v27)
    {
      v30 = -[HMDHomePresenceRemote initWithPresenceByPairingIdentity:]([HMDHomePresenceRemote alloc], "initWithPresenceByPairingIdentity:", v27);
    }
    else
    {
      if (!v26)
      {
LABEL_10:
        -[HMDHome localCapabilitiesDataSource](v17, "localCapabilitiesDataSource");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = objc_msgSend(v31, "supportsBulletinBoard");

        if (v32)
        {
          v98[0] = v28;
          v98[1] = 3221225472;
          v98[2] = __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke_2;
          v98[3] = &unk_1E89A4C68;
          v98[4] = v17;
          v99 = v84;
          v100 = a6;
          v101 = 0;
          -[HMDHome evaluateNotificationConditionForCharacteristics:homePresence:completion:](v17, "evaluateNotificationConditionForCharacteristics:homePresence:completion:", v29, v26, v98);

        }
        v74 = (void *)v29;
        v75 = v15;

        objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        v94 = 0u;
        v95 = 0u;
        v96 = 0u;
        v97 = 0u;
        v76 = v14;
        obj = v14;
        v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v105, 16);
        if (v33)
        {
          v34 = v33;
          v35 = *(_QWORD *)v95;
          do
          {
            for (i = 0; i != v34; ++i)
            {
              if (*(_QWORD *)v95 != v35)
                objc_enumerationMutation(obj);
              v37 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * i);
              objc_msgSend(v37, "accessory");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              if (v38)
              {
                objc_msgSend(v85, "objectForKey:", v38);
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v39)
                {
                  objc_msgSend(MEMORY[0x1E0C99E20], "set");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v85, "setObject:forKey:", v39, v38);
                }
                objc_msgSend(v39, "addObject:", v37);
                v40 = -[HMDHAPAccessoryNotificationEvent initWithAccessory:characteristic:]([HMDHAPAccessoryNotificationEvent alloc], "initWithAccessory:characteristic:", v38, v37);
                -[HMDHome logEventSubmitter](v81, "logEventSubmitter");
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v41, "submitLogEvent:error:", v40, 0);

              }
            }
            v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v105, 16);
          }
          while (v34);
        }

        objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v90 = 0u;
        v91 = 0u;
        v92 = 0u;
        v93 = 0u;
        v43 = v78;
        v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v90, v104, 16);
        if (v44)
        {
          v45 = v44;
          v46 = *(_QWORD *)v91;
          do
          {
            for (j = 0; j != v45; ++j)
            {
              if (*(_QWORD *)v91 != v46)
                objc_enumerationMutation(v43);
              v48 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * j);
              objc_msgSend(v48, "accessory");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              if (v49)
              {
                objc_msgSend(v42, "objectForKey:", v49);
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v50)
                {
                  objc_msgSend(MEMORY[0x1E0C99E20], "set");
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v42, "setObject:forKey:", v50, v49);
                }
                objc_msgSend(v50, "addObject:", v48);

              }
            }
            v45 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v90, v104, 16);
          }
          while (v45);
        }

        objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v42, "count") + objc_msgSend(v85, "count"));
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v85, "hm_allKeys");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "addObjectsFromArray:", v52);

        objc_msgSend(v42, "hm_allKeys");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "addObjectsFromArray:", v53);

        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v80 = v51;
        v54 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v86, v103, 16);
        if (v54)
        {
          v55 = v54;
          v56 = MEMORY[0x1E0C9AA60];
          v57 = *(_QWORD *)v87;
          do
          {
            for (k = 0; k != v55; ++k)
            {
              if (*(_QWORD *)v87 != v57)
                objc_enumerationMutation(v80);
              v59 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * k);
              objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v85, "objectForKey:", v59);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v61, "allObjects");
              v62 = objc_claimAutoreleasedReturnValue();
              v63 = (void *)v62;
              if (v62)
                v64 = v62;
              else
                v64 = v56;
              objc_msgSend(v60, "setObject:forKeyedSubscript:", v64, CFSTR("kModifiedCharacteristicsKey"));

              objc_msgSend(v42, "objectForKey:", v59);
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "allObjects");
              v66 = objc_claimAutoreleasedReturnValue();
              v67 = (void *)v66;
              if (v66)
                v68 = v66;
              else
                v68 = v56;
              objc_msgSend(v60, "setObject:forKeyedSubscript:", v68, CFSTR("HMDModifiedPreviouslyNilValuedCharacteristicsKey"));

              objc_msgSend(v60, "setObject:forKeyedSubscript:", v84, CFSTR("kModifiedCharacteristicsMapKey"));
              objc_msgSend(v60, "setObject:forKeyedSubscript:", v83, CFSTR("kPresenceDictionaryForNotificationKey"));
              objc_msgSend(v60, "setObject:forKeyedSubscript:", v82, CFSTR("kPresencePairingIdentifierDictionaryForNotificationKey"));
              v69 = (void *)objc_msgSend(v60, "copy");
              logAndPostNotification(CFSTR("HMDAccessoryCharacteristicsChangedNotification"), v59, v69);

            }
            v55 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v86, v103, 16);
          }
          while (v55);
        }

        v15 = v75;
        v14 = v76;
        if (v77
          && -[HMDHome shouldRelayNotificationToRegisteredDevicesForSource:](v81, "shouldRelayNotificationToRegisteredDevicesForSource:", v75))
        {
          v70 = (void *)MEMORY[0x1D17BA0A0]();
          v71 = v81;
          HMFGetOSLogHandle();
          v72 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v107 = v73;
            _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_INFO, "%{public}@Posting notification to remote users since this is a resident device or is paired with a watch", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v70);
          -[HMDHome notifyRemoteUsersOfChangedCharacteristics:message:broadcast:](v71, "notifyRemoteUsersOfChangedCharacteristics:message:broadcast:", obj, v75, a9);
        }

        goto LABEL_53;
      }
      v30 = -[HMDHomePresenceRemote initWithPresenceByUserId:]([HMDHomePresenceRemote alloc], "initWithPresenceByUserId:", v26);
    }
    v26 = v30;
    goto LABEL_10;
  }
LABEL_53:

}

- (void)notifyOfChangedCharacteristic:(id)a3 changedByThisDevice:(BOOL)a4 residentShouldNotifyPeers:(BOOL)a5 message:(id)a6
{
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  BOOL v18;
  BOOL v19;

  v10 = a3;
  v11 = a6;
  -[HMDHome workQueue](self, "workQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __95__HMDHome_notifyOfChangedCharacteristic_changedByThisDevice_residentShouldNotifyPeers_message___block_invoke;
  v15[3] = &unk_1E89B84C8;
  v15[4] = self;
  v16 = v10;
  v18 = a4;
  v19 = a5;
  v17 = v11;
  v13 = v11;
  v14 = v10;
  dispatch_async(v12, v15);

}

- (void)notifyRemoteUsersOfChangedCharacteristics:(id)a3 message:(id)a4 broadcast:(BOOL)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  BOOL v16;

  v8 = a3;
  v9 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __71__HMDHome_notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke;
  v13[3] = &unk_1E89BCF10;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v16 = a5;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)_updateBulletinBoardOfChangedCharacteristics:(id)a3 modifiedCharacteristics:(id)a4 changedByThisDevice:(BOOL)a5 changeNotificationFromPrimary:(BOOL)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  id v9;
  void *v10;
  id v11;

  v6 = a6;
  v7 = a5;
  v11 = a3;
  v9 = a4;
  if (objc_msgSend(v11, "count"))
  {
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "insertBulletinsForChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:changeNotificationFromPrimary:completion:", v11, v9, v7, v6, 0);

  }
}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 identifier:(id)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD block[4];
  id v27;
  id v28;
  id v29;
  id v30;
  id v31[3];
  id location;

  v13 = a3;
  v14 = a5;
  v15 = a7;
  v16 = objc_alloc(MEMORY[0x1E0D28540]);
  v17 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@, %s:%ld"), v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 23884);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v16, "initWithName:", v19);

  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v21 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __94__HMDHome_writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_1E89A4CB8;
  objc_copyWeak(v31, &location);
  v27 = v13;
  v28 = v20;
  v29 = v14;
  v30 = v15;
  v31[1] = (id)a4;
  v31[2] = (id)a6;
  v22 = v14;
  v23 = v20;
  v24 = v13;
  v25 = v15;
  dispatch_async(v21, block);

  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
}

- (BOOL)isAccessAllowedForCharacteristicsWithMessage:(id)a3
{
  id v4;
  BOOL v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "isEntitledForSecureAccess")
    && (objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v9;
      v14 = 2112;
      v15 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Insufficient entitlements, access is not allowed for characteristic with message: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    v5 = 0;
  }

  return v5;
}

- (void)_writeCharacteristicValuesForAccessories:(id)a3 writeRequestMap:(id)a4 responseTuples:(id)a5 requestMessage:(id)a6 viaDevice:(id)a7 source:(unint64_t)a8 completionHandler:(id)a9
{
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  double v25;
  double v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t i;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t k;
  void *v63;
  HMDHome *v64;
  NSObject *v65;
  void *v66;
  void *v67;
  NSObject *v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  HMDHome *v84;
  NSObject *group;
  id v86;
  _QWORD block[4];
  id v88;
  id v89;
  id v90;
  HMDHome *v91;
  id v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _QWORD v97[4];
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  NSObject *v103;
  id v104;
  id location;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[128];
  const __CFString *v115;
  uint64_t v116;
  _BYTE v117[128];
  _BYTE v118[128];
  _QWORD v119[3];
  _QWORD v120[3];
  uint8_t buf[4];
  void *v122;
  __int16 v123;
  unint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v86 = a3;
  v83 = a4;
  v78 = a5;
  v16 = a6;
  v82 = a7;
  v77 = a9;
  v17 = objc_alloc(MEMORY[0x1E0D28540]);
  v18 = (void *)MEMORY[0x1E0CB3940];
  v84 = self;
  MEMORY[0x1D17B8D08](self, a2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "stringWithFormat:", CFSTR("%@, %s:%ld"), v19, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 24131);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = (void *)objc_msgSend(v17, "initWithName:", v20);

  group = dispatch_group_create();
  dispatch_group_enter(group);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v86, "count"))
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v122 = v24;
      v123 = 2048;
      v124 = a8;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Write operation source: %lu", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0D33490], "currentTime");
    v26 = v25;
    objc_msgSend(v16, "identifier");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "userForHome:", v22);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "uuid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "applicationBundleIdentifier");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _getLogEventsForOperation:startTime:accessories:requestMap:identifier:userUUID:source:bundleID:](v22, "_getLogEventsForOperation:startTime:accessories:requestMap:identifier:userUUID:source:bundleID:", 1, v86, v83, v27, v29, a8, v26, v30);
    v75 = (void *)objc_claimAutoreleasedReturnValue();

    v31 = objc_msgSend(v16, "BOOLForKey:", CFSTR("kShortActionKey"));
    objc_msgSend(v16, "uuidForKey:", CFSTR("kActionSetUUID"));
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
      v33 = 1;
    else
      v33 = v31;
    -[HMDHome uuid](v22, "uuid");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "UUIDString");
    v76 = (void *)objc_claimAutoreleasedReturnValue();

    v119[0] = CFSTR("kAccessoriesListKey");
    v35 = (void *)objc_msgSend(v86, "copy");
    v120[0] = v35;
    v120[1] = v76;
    v119[1] = CFSTR("kHomeUUID");
    v119[2] = CFSTR("kDoNotForwardMessageKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v82 != 0);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v120[2] = v36;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v120, v119, 3);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = (void *)objc_msgSend(v37, "mutableCopy");

    if ((v33 & 1) != 0)
    {
LABEL_29:
      v115 = CFSTR("kShortActionKey");
      v116 = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v116, &v115, 1);
      v38 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "addEntriesFromDictionary:", v38);
    }
    else
    {
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v38 = v86;
      v74 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v110, v118, 16);
      if (v74)
      {
        v39 = *(_QWORD *)v111;
        v73 = *(_QWORD *)v111;
        do
        {
          for (i = 0; i != v74; ++i)
          {
            if (*(_QWORD *)v111 != v39)
              objc_enumerationMutation(v38);
            v41 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", *(_QWORD *)(*((_QWORD *)&v110 + 1) + 8 * i));
            -[HMDHome accessoryWithUUID:](v22, "accessoryWithUUID:", v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();

            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v43 = v42;
            else
              v43 = 0;
            v44 = v43;

            objc_msgSend(v83, "objectForKey:", v44);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            v108 = 0u;
            v109 = 0u;
            v106 = 0u;
            v107 = 0u;
            v46 = v45;
            v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v106, v117, 16);
            if (v47)
            {
              v48 = *(_QWORD *)v107;
              while (2)
              {
                for (j = 0; j != v47; ++j)
                {
                  if (*(_QWORD *)v107 != v48)
                    objc_enumerationMutation(v46);
                  if (objc_msgSend(*(id *)(*((_QWORD *)&v106 + 1) + 8 * j), "requestType") == 1)
                  {

                    goto LABEL_29;
                  }
                }
                v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v106, v117, 16);
                if (v47)
                  continue;
                break;
              }
            }

            v39 = v73;
          }
          v74 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v110, v118, 16);
          v39 = v73;
        }
        while (v74);
      }
    }

    v50 = (void *)MEMORY[0x1E0D285F8];
    v51 = objc_msgSend(v16, "qualityOfService");
    -[HMDHome messageDestination](v22, "messageDestination");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = (void *)objc_msgSend(v79, "copy");
    objc_msgSend(v50, "messageWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicWriteRequestKey"), v51, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, v22);
    v97[0] = MEMORY[0x1E0C809B0];
    v97[1] = 3221225472;
    v97[2] = __133__HMDHome__writeCharacteristicValuesForAccessories_writeRequestMap_responseTuples_requestMessage_viaDevice_source_completionHandler___block_invoke;
    v97[3] = &unk_1E89A4D08;
    objc_copyWeak(&v104, &location);
    v98 = v80;
    v99 = v86;
    v55 = v83;
    v100 = v55;
    v101 = v81;
    v56 = v75;
    v102 = v56;
    v103 = group;
    objc_msgSend(v54, "setResponseHandler:", v97);
    -[HMDHome uuid](v22, "uuid");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](v22, "workQueue");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:](v22, "redispatchToResidentMessage:target:responseQueue:viaDevice:", v54, v57, v58, v82);

    if (-[HMDHome remoteAccessIsEnabled](v22, "remoteAccessIsEnabled"))
    {
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v59 = v55;
      v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v93, v114, 16);
      if (v60)
      {
        v61 = *(_QWORD *)v94;
        while (2)
        {
          for (k = 0; k != v60; ++k)
          {
            if (*(_QWORD *)v94 != v61)
              objc_enumerationMutation(v59);
            if (objc_msgSend(*(id *)(*((_QWORD *)&v93 + 1) + 8 * k), "hasBTLELink"))
            {
              v63 = (void *)MEMORY[0x1D17BA0A0]();
              v64 = v22;
              HMFGetOSLogHandle();
              v65 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543362;
                v122 = v66;
                _os_log_impl(&dword_1CD062000, v65, OS_LOG_TYPE_INFO, "%{public}@There are BTLE accessories that are currently unreachable during the write, kicking scan to update reachability", buf, 0xCu);

              }
              objc_autoreleasePoolPop(v63);
              -[HMDHome accessoryBrowser](v64, "accessoryBrowser");
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v67, "btleAccessoryReachabilityProbeTimer:", 1);

              goto LABEL_43;
            }
          }
          v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v93, v114, 16);
          if (v60)
            continue;
          break;
        }
      }
LABEL_43:

    }
    objc_destroyWeak(&v104);
    objc_destroyWeak(&location);

  }
  else
  {
    dispatch_group_leave(group);
  }
  -[HMDHome workQueue](v84, "workQueue");
  v68 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __133__HMDHome__writeCharacteristicValuesForAccessories_writeRequestMap_responseTuples_requestMessage_viaDevice_source_completionHandler___block_invoke_1217;
  block[3] = &unk_1E89C0598;
  v88 = v78;
  v89 = v81;
  v90 = v16;
  v91 = v84;
  v92 = v77;
  v69 = v77;
  v70 = v16;
  v71 = v81;
  v72 = v78;
  dispatch_group_notify(group, v68, block);

}

- (id)__residentDeviceForAccessory:(id)a3 fromMap:(id)a4
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v6, "keyEnumerator", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (id)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v6, "objectForKey:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v12, "containsObject:", v5) & 1) != 0)
        {
          v8 = v11;

          goto LABEL_11;
        }

      }
      v8 = (id)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_11:

  return v8;
}

- (void)_addAccessoryToBalancedResidentMap:(id)a3 residentDevice:(id)a4 balancedResidentMap:(id)a5
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = a5;
  objc_msgSend(v9, "objectForKey:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    if ((objc_msgSend(v10, "containsObject:", v7) & 1) == 0)
      objc_msgSend(v11, "addObject:", v7);
  }
  else
  {
    v14[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v12, "mutableCopy");
    objc_msgSend(v9, "setObject:forKey:", v13, v8);

  }
}

- (void)_loadBalancedRedispatchForAccessories:(id)a3 source:(unint64_t)a4 dispatchGroup:(id)a5 writeRequestMap:(id)a6 requestMessage:(id)a7 responseTuples:(id)a8
{
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  _BOOL4 v35;
  void *v36;
  void *v37;
  HMDHome *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  char v54;
  id v55;
  id v57;
  id v58;
  NSObject *group;
  id v60;
  void *v61;
  HMDHome *v62;
  void *v63;
  void *v64;
  id obj;
  void *v66;
  _QWORD block[4];
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  HMDHome *v75;
  NSObject *v76;
  unint64_t v77;
  char v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  id v84;
  uint8_t v85[128];
  uint8_t buf[4];
  void *v87;
  __int16 v88;
  id v89;
  __int16 v90;
  void *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v58 = a3;
  group = a5;
  v57 = a6;
  v60 = a7;
  v55 = a8;
  objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
  v84 = (id)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(v60, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  objc_msgSend(v58, "sortedArrayUsingComparator:", &__block_literal_global_1219);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "residentMesh");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "balancedResidentMapForAccessories:", v61);
  v66 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v62 = self;
  HMFGetOSLogHandle();
  v16 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v87 = v17;
    v88 = 2112;
    v89 = v61;
    v90 = 2112;
    v91 = v66;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Balanced Resident Map for accessories: %@ -> %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v15);
  dispatch_group_enter(group);
  -[HMDHome primaryResident](v62, "primaryResident");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v61, "count"));
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome primaryResident](v62, "primaryResident");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "isCurrentDevice");

  if (v19)
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = v62;
    HMFGetOSLogHandle();
    v22 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v87 = v23;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Checking for local reachability on primary resident", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    v80 = 0u;
    obj = v61;
    v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v80, v85, 16);
    if (v24)
    {
      v25 = *(_QWORD *)v81;
      do
      {
        v26 = 0;
        do
        {
          if (*(_QWORD *)v81 != v25)
            objc_enumerationMutation(obj);
          v27 = *(id *)(*((_QWORD *)&v80 + 1) + 8 * v26);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v28 = v27;
          else
            v28 = 0;
          v29 = v28;

          if (v29)
          {
            if (objc_msgSend(v29, "custom1WoBLE"))
            {
              v30 = (void *)MEMORY[0x1D17BA0A0]();
              v31 = v21;
              HMFGetOSLogHandle();
              v32 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v87 = v33;
                v88 = 2112;
                v89 = v29;
                _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@Adding accessory %@ supporting custom1WoBLE to balanced resident map", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v30);
              -[HMDHome _addAccessoryToBalancedResidentMap:residentDevice:balancedResidentMap:](v31, "_addAccessoryToBalancedResidentMap:residentDevice:balancedResidentMap:", v29, v64, v66);
            }
            -[HMDHome __residentDeviceForAccessory:fromMap:](v21, "__residentDeviceForAccessory:fromMap:", v27, v66);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = v34 == 0;

            if (v35)
            {
              if (objc_msgSend(v29, "hasBTLELink"))
              {
                v79 = 0;
                objc_msgSend(v29, "identifier");
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                -[HMDHome retrieveStateForTrackedAccessory:stateNumber:isReachable:linkQuality:lastSeen:](v21, "retrieveStateForTrackedAccessory:stateNumber:isReachable:linkQuality:lastSeen:", v36, 0, &v79, 0, 0);

                if (!v79)
                  goto LABEL_31;
                v37 = (void *)MEMORY[0x1D17BA0A0]();
                v38 = v21;
                HMFGetOSLogHandle();
                v39 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v87 = v40;
                  v88 = 2112;
                  v89 = v29;
                  v90 = 2112;
                  v91 = v64;
                  _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Adding map for locally reachable accessory: %@ to resident: %@", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v37);
                -[HMDHome _addAccessoryToBalancedResidentMap:residentDevice:balancedResidentMap:](v38, "_addAccessoryToBalancedResidentMap:residentDevice:balancedResidentMap:", v29, v64, v66);
              }
              else
              {
                if (!objc_msgSend(v29, "canWakeUpViaWoL"))
                {
LABEL_31:
                  objc_msgSend(v63, "addObject:", v29);
                  goto LABEL_20;
                }
                v41 = (void *)MEMORY[0x1D17BA0A0]();
                v42 = v21;
                HMFGetOSLogHandle();
                v43 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v87 = v44;
                  v88 = 2112;
                  v89 = v29;
                  _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Adding accessory %@ supporting WakeUpViaWoL to balanced resident map", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v41);
                -[HMDHome _addAccessoryToBalancedResidentMap:residentDevice:balancedResidentMap:](v42, "_addAccessoryToBalancedResidentMap:residentDevice:balancedResidentMap:", v29, v64, v66);
              }
            }
          }
LABEL_20:

          ++v26;
        }
        while (v24 != v26);
        v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v80, v85, 16);
        v24 = v45;
      }
      while (v45);
    }

  }
  -[HMDHome workQueue](v62, "workQueue");
  v46 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1220;
  block[3] = &unk_1E89B6EF8;
  v68 = v84;
  v69 = v63;
  v70 = v57;
  v71 = v55;
  v72 = v66;
  v73 = v64;
  v74 = v60;
  v75 = v62;
  v76 = group;
  v77 = a4;
  v78 = v54;
  v47 = group;
  v48 = v60;
  v49 = v64;
  v50 = v66;
  v51 = v55;
  v52 = v57;
  v53 = v63;
  dispatch_async(v46, block);

  __HMFActivityScopeLeave();
}

- (void)_reallyRedispatchWritesToDevice:(id)a3 accessories:(id)a4 dispatchGroup:(id)a5 requestMap:(id)a6 requestMessage:(id)a7 source:(unint64_t)a8 responseTuples:(id)a9 activity:(id)a10
{
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  HMDHome *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t i;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHome *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  NSObject *v35;
  id v36;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id obj;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void *context;
  _QWORD v48[4];
  NSObject *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v38 = a3;
  v15 = a4;
  v16 = a5;
  v45 = a6;
  v17 = a7;
  v18 = a9;
  v35 = v16;
  v36 = a10;
  dispatch_group_enter(v16);
  v19 = self;
  -[HMDHome primaryResident](self, "primaryResident");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "device");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = v15;
  v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v62, 16);
  if (v46)
  {
    v44 = *(_QWORD *)v51;
    v41 = v18;
    v42 = v17;
    v40 = v21;
    v39 = v22;
    do
    {
      for (i = 0; i != v46; ++i)
      {
        if (*(_QWORD *)v51 != v44)
          objc_enumerationMutation(obj);
        v24 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
        context = (void *)MEMORY[0x1D17BA0A0]();
        v25 = v19;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "name");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "uuid");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "UUIDString");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "uniqueIdentifier");
          v31 = v19;
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v55 = v27;
          v56 = 2112;
          v57 = v28;
          v58 = 2112;
          v59 = v30;
          v60 = 2112;
          v61 = v32;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Write bulk redispatching accessory %@/%@/%@ to resident", buf, 0x2Au);

          v19 = v31;
          v22 = v39;

          v18 = v41;
          v21 = v40;

          v17 = v42;
        }

        objc_autoreleasePoolPop(context);
        objc_msgSend(v21, "isCurrentDevice");
        objc_msgSend(v24, "uuid");

        objc_msgSend(v21, "identifier");
        objc_msgSend(v45, "objectForKey:", v24);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHome appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteWrite:message:](HMDHome, "appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteWrite:message:", v22, v18, v33, v17);

      }
      v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v62, 16);
    }
    while (v46);
  }

  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3221225472;
  v48[2] = __126__HMDHome__reallyRedispatchWritesToDevice_accessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_activity___block_invoke;
  v48[3] = &unk_1E89C0E20;
  v49 = v35;
  v34 = v35;
  -[HMDHome _writeCharacteristicValuesForAccessories:writeRequestMap:responseTuples:requestMessage:viaDevice:source:completionHandler:](v19, "_writeCharacteristicValuesForAccessories:writeRequestMap:responseTuples:requestMessage:viaDevice:source:completionHandler:", v22, v45, v18, v17, v38, a8, v48);

}

- (void)_redispatchWriteForAccessories:(id)a3 dispatchGroup:(id)a4 requestMap:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 responseTuples:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  HMDHome *v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t j;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  int v59;
  void *v60;
  HMDHome *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  unint64_t v74;
  void *v75;
  void *v76;
  id v77;
  id obja;
  id obj;
  HMDHome *v80;
  void (**v81)(void *, void *, void *);
  void *v82;
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _QWORD aBlock[4];
  id v93;
  id v94;
  id v95;
  HMDHome *v96;
  unint64_t v97;
  _BYTE v98[128];
  void *v99;
  uint8_t buf[4];
  void *v101;
  __int16 v102;
  void *v103;
  __int16 v104;
  id v105;
  _BYTE v106[128];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a8;
  -[HMDHome primaryResident](self, "primaryResident");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)v20;
  if (v19)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __104__HMDHome__redispatchWriteForAccessories_dispatchGroup_requestMap_requestMessage_source_responseTuples___block_invoke;
    aBlock[3] = &unk_1E89A4D78;
    v73 = v16;
    v93 = v73;
    v72 = v18;
    v94 = v72;
    v97 = a7;
    v83 = v17;
    v95 = v83;
    v96 = self;
    v81 = (void (**)(void *, void *, void *))_Block_copy(aBlock);
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = self;
    v82 = v22;
    v68 = v16;
    v69 = v14;
    v76 = v19;
    v77 = v15;
    v66 = v18;
    v67 = v17;
    v74 = a7;
    v75 = v21;
    if ((objc_msgSend(v19, "isCurrentDevice") & 1) != 0)
    {
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v23 = v14;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v88, v106, 16);
      if (v24)
      {
        v25 = *(_QWORD *)v89;
        v26 = v22;
        v27 = v24;
        v70 = *(_QWORD *)v89;
        v71 = v23;
        do
        {
          for (i = 0; i != v27; ++i)
          {
            if (*(_QWORD *)v89 != v25)
              objc_enumerationMutation(v23);
            v29 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * i);
            -[HMDHome homeManager](self, "homeManager");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "residentMesh");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "bestResidentDeviceForAccessory:", v29);
            v32 = (void *)objc_claimAutoreleasedReturnValue();

            if (v32)
            {
              objc_msgSend(v26, "objectForKey:", v32);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v34 = v33;
              if (v33)
              {
                v35 = v33;
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v35 = (id)objc_claimAutoreleasedReturnValue();
              }
              v48 = v35;

              objc_msgSend(v48, "addObject:", v29);
              objc_msgSend(v26, "setObject:forKey:", v48, v32);
            }
            else
            {
              v36 = MEMORY[0x1D17BA0A0]();
              v37 = self;
              v38 = (void *)v36;
              v39 = v37;
              HMFGetOSLogHandle();
              v40 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v29, "uuid");
                v42 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v42, "UUIDString");
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v29, "uniqueIdentifier");
                obja = v38;
                v44 = v27;
                v45 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v101 = v41;
                v102 = 2112;
                v103 = v43;
                v104 = 2112;
                v105 = v45;
                _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Write bulk redispatching failing for %@/%@ (No Mesh Redirect)", buf, 0x20u);

                v27 = v44;
                v38 = obja;

                v26 = v82;
                v25 = v70;

                v23 = v71;
              }

              objc_autoreleasePoolPop(v38);
              v99 = v29;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v99, 1);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              v81[2](v81, v46, v47);

              objc_msgSend(v29, "uuid");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              self = v80;
            }

          }
          v27 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v88, v106, 16);
        }
        while (v27);
      }
      else
      {
        v26 = v22;
      }
    }
    else
    {
      v23 = (id)objc_msgSend(v14, "mutableCopy");
      objc_msgSend(v22, "setObject:forKey:", v23, v19);
      v26 = v22;
    }

    v49 = objc_msgSend(v83, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
    v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    objc_msgSend(v26, "keyEnumerator");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v98, 16);
    if (v50)
    {
      v51 = v50;
      v52 = *(_QWORD *)v85;
      if (v49)
        v53 = v83;
      else
        v53 = 0;
      do
      {
        for (j = 0; j != v51; ++j)
        {
          if (*(_QWORD *)v85 != v52)
            objc_enumerationMutation(obj);
          v55 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * j);
          objc_msgSend(v26, "objectForKey:", v55);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "remoteSourceDevice");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "device");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v59 = objc_msgSend(v57, "isEqual:", v58);

          if (v59)
          {
            v60 = (void *)MEMORY[0x1D17BA0A0]();
            v61 = self;
            HMFGetOSLogHandle();
            v62 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v101 = v63;
              v102 = 2112;
              v103 = v56;
              v104 = 2112;
              v105 = v83;
              _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_ERROR, "%{public}@Skipping write bulk redispatching for %@ (Same source device). Message: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v60);
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            v81[2](v81, v56, v64);

            self = v80;
          }
          else if (v55 == v76)
          {
            -[HMDHome _reallyRedispatchWritesToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:](self, "_reallyRedispatchWritesToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:", 0, v56, v77, v73, v53, v74, v72, v75);
          }
          else
          {
            objc_msgSend(v55, "device");
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome _reallyRedispatchWritesToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:](self, "_reallyRedispatchWritesToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:", v65, v56, v77, v73, v53, v74, v72, v75);

          }
          v26 = v82;

        }
        v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v98, 16);
      }
      while (v51);
    }

    v16 = v68;
    v14 = v69;
    v19 = v76;
    v15 = v77;
    v18 = v66;
    v17 = v67;
    v21 = v75;
  }
  else
  {
    -[HMDHome _reallyRedispatchWritesToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:](self, "_reallyRedispatchWritesToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:", 0, v14, v15, v16, v17, a7, v18, v20);
  }

}

- (void)_buildCharacteristicWriteRequest:(id)a3 accessoryWriteRequestMapTable:(id)a4 accessoryList:(id)a5 responseTuples:(id)a6 user:(id)a7
{
  id v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _BOOL4 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _BOOL4 v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  HMDHome *v39;
  NSObject *v40;
  void *v41;
  NSObject *v42;
  const char *v43;
  void *v44;
  __int128 v45;
  id v46;
  id v47;
  id obj;
  id v49;
  id v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v46 = a4;
  v47 = a5;
  v51 = a6;
  v49 = a7;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  obj = v11;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
  if (v12)
  {
    v14 = v12;
    v52 = *(_QWORD *)v54;
    *(_QWORD *)&v13 = 138543618;
    v45 = v13;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v54 != v52)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
        objc_msgSend(v16, "characteristic", v45);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "service");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "accessory");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v19)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = (void *)MEMORY[0x1D17BA0A0]();
          v35 = self;
          HMFGetOSLogHandle();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v45;
            v58 = v37;
            v59 = 2112;
            v60 = v16;
            _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_ERROR, "%{public}@Aborting characteristic write request: %@, accessory is nil", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v34);
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v16, v19);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = v51;
          v33 = v31;
          goto LABEL_21;
        }
        objc_msgSend(v16, "characteristic");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "type");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "service");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "type");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = +[HMDHAPMetadata isOwnerPrivilegeRequiredForWritingCharacteristicType:serviceType:](HMDHAPMetadata, "isOwnerPrivilegeRequiredForWritingCharacteristicType:serviceType:", v21, v23);

        if (v24 && (objc_msgSend(v49, "isOwner") & 1) == 0)
        {
          v38 = (void *)MEMORY[0x1D17BA0A0]();
          v39 = self;
          HMFGetOSLogHandle();
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v45;
            v58 = v41;
            v59 = 2112;
            v60 = v16;
            v42 = v40;
            v43 = "%{public}@Aborting characteristic write request that requires owner privilege: %@";
LABEL_26:
            _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_ERROR, v43, buf, 0x16u);

          }
        }
        else
        {
          objc_msgSend(v16, "characteristic");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "type");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "service");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "type");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = +[HMDHAPMetadata isAdminPrivilegeRequiredForWritingCharacteristicType:serviceType:](HMDHAPMetadata, "isAdminPrivilegeRequiredForWritingCharacteristicType:serviceType:", v26, v28);

          if (!v29 || (objc_msgSend(v49, "isAdministrator") & 1) != 0)
          {
            if ((objc_msgSend(v19, "isPrimary") & 1) == 0)
            {
              objc_msgSend(v19, "bridge");
              v30 = objc_claimAutoreleasedReturnValue();

              v19 = (void *)v30;
            }
            if ((objc_msgSend(v47, "containsObject:", v19) & 1) == 0)
              objc_msgSend(v47, "addObject:", v19);
            objc_msgSend(v46, "objectForKey:", v19);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v31)
            {
              objc_msgSend(MEMORY[0x1E0C99DE8], "array");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v46, "setObject:forKey:", v31, v19);
            }
            v32 = v31;
            v33 = v16;
LABEL_21:
            objc_msgSend(v32, "addObject:", v33);
            goto LABEL_28;
          }
          v38 = (void *)MEMORY[0x1D17BA0A0]();
          v39 = self;
          HMFGetOSLogHandle();
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v45;
            v58 = v41;
            v59 = 2112;
            v60 = v16;
            v42 = v40;
            v43 = "%{public}@Aborting characteristic write request that requires admin privilege: %@";
            goto LABEL_26;
          }
        }

        objc_autoreleasePoolPop(v38);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 10);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v16, v31);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "addObject:", v44);

LABEL_28:
      }
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
    }
    while (v14);
  }

}

- (BOOL)_loadBalanceWriteRequestOnResidentForAccessory:(id)a3 accessoryWriteRequestMapTable:(id)a4 requestMessage:(id)a5 source:(unint64_t)a6 responseTuples:(id)a7 withCompletionHandler:(id)a8
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  id v28;
  _QWORD block[5];
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  char v37;

  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a7;
  v17 = a8;
  v18 = objc_msgSend(v15, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  objc_msgSend(v15, "identifier");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D33490], "currentTime");
  v21 = v20;
  -[HMDHome primaryResident](self, "primaryResident");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "isCurrentDevice");

  if (v23)
  {
    v28 = v13;
    v24 = dispatch_group_create();
    -[HMDHome _loadBalancedRedispatchForAccessories:source:dispatchGroup:writeRequestMap:requestMessage:responseTuples:](self, "_loadBalancedRedispatchForAccessories:source:dispatchGroup:writeRequestMap:requestMessage:responseTuples:", v28, a6, v24, v14, v15, v16);
    -[HMDHome workQueue](self, "workQueue");
    v25 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __147__HMDHome__loadBalanceWriteRequestOnResidentForAccessory_accessoryWriteRequestMapTable_requestMessage_source_responseTuples_withCompletionHandler___block_invoke;
    block[3] = &unk_1E89A4DA0;
    block[4] = self;
    v37 = v18;
    v30 = v16;
    v31 = v15;
    v35 = v21;
    v32 = v14;
    v33 = v19;
    v36 = a6;
    v34 = v17;
    dispatch_group_notify(v24, v25, block);

    v13 = v28;
  }

  return v23;
}

- (BOOL)_passWriteRequestToCompanion:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 remoteAccessories:(id)a6 responseTuples:(id)a7 withCompletionHandler:(id)a8
{
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  BOOL v21;
  char v23;
  id v25;
  void *v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  char v34;
  id location;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v27 = a3;
  v13 = a4;
  v14 = a6;
  v15 = a7;
  v25 = a8;
  v23 = objc_msgSend(v13, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  objc_msgSend(v13, "identifier");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (isWatch() && -[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v16 = v27;
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v37 != v18)
            objc_enumerationMutation(v16);
          objc_msgSend(v16, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * i));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDHome appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteWrite:message:](HMDHome, "appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteWrite:message:", v14, v15, v20, v13);

        }
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      }
      while (v17);
    }

    objc_initWeak(&location, self);
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __117__HMDHome__passWriteRequestToCompanion_requestMessage_source_remoteAccessories_responseTuples_withCompletionHandler___block_invoke;
    v28[3] = &unk_1E89A5D08;
    objc_copyWeak(&v33, &location);
    v34 = v23;
    v29 = v15;
    v30 = v26;
    v31 = v13;
    v32 = v25;
    -[HMDHome _writeCharacteristicValuesForAccessories:writeRequestMap:responseTuples:requestMessage:viaDevice:source:completionHandler:](self, "_writeCharacteristicValuesForAccessories:writeRequestMap:responseTuples:requestMessage:viaDevice:source:completionHandler:", v14, v16, v29, v31, 0, a5, v28);

    objc_destroyWeak(&v33);
    objc_destroyWeak(&location);
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

- (void)_sendWriteRequestToAccessoryServer:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 failedAccessories:(id)a6 responseTuples:(id)a7 activity:(id)a8 waitGroup:(id)a9 unreachableWaitGroup:(id)a10
{
  id v14;
  id v15;
  char v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  char v34;
  char v36;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  id obj;
  NSObject *v43;
  NSObject *group;
  _QWORD v45[5];
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  NSObject *v53;
  NSObject *v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  uint64_t v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a4;
  v38 = a6;
  v40 = a7;
  v32 = a8;
  group = a9;
  v43 = a10;
  v16 = objc_msgSend(v15, "BOOLForKey:", CFSTR("kDoNotForwardMessageKey"));
  v36 = objc_msgSend(v15, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  v17 = v15;
  objc_msgSend(v15, "identifier");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = v14;
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
  if (v41)
  {
    v34 = v16 ^ 1;
    v33 = *(_QWORD *)v58;
    do
    {
      v18 = 0;
      v19 = v32;
      do
      {
        if (*(_QWORD *)v58 != v33)
          objc_enumerationMutation(obj);
        v20 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v18);
        dispatch_group_enter(group);
        dispatch_group_enter(v43);
        objc_msgSend(obj, "objectForKey:", v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "shortDescription");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "markWithFormat:", CFSTR("Starting write for accessory: %@"), v22);

        objc_msgSend(v20, "uuid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (void *)MEMORY[0x1D17BA0A0]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = objc_msgSend(v21, "count");
          *(_DWORD *)buf = 138543874;
          v62 = v27;
          v63 = 2112;
          v64 = v23;
          v65 = 2048;
          v66 = v28;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Starting write for accessory %@ with %ld requests", buf, 0x20u);

          v19 = v32;
        }

        objc_autoreleasePoolPop(v24);
        objc_msgSend(v21, "count");
        -[HMDHome workQueue](v25, "workQueue");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v45[0] = MEMORY[0x1E0C809B0];
        v45[1] = 3221225472;
        v45[2] = __141__HMDHome__sendWriteRequestToAccessoryServer_requestMessage_source_failedAccessories_responseTuples_activity_waitGroup_unreachableWaitGroup___block_invoke;
        v45[3] = &unk_1E89A4DC8;
        v45[4] = v25;
        v46 = v23;
        v47 = v20;
        v48 = v19;
        v55 = v34;
        v49 = v38;
        v56 = v36;
        v50 = v39;
        v30 = v17;
        v51 = v30;
        v52 = v40;
        v53 = group;
        v54 = v43;
        v31 = v23;
        objc_msgSend(v20, "writeCharacteristicValues:source:message:queue:completionHandler:", v21, a5, v30, v29, v45);

        ++v18;
      }
      while (v41 != v18);
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
    }
    while (v41);
  }

}

- (void)_waitForEarlyDispatchTimeout:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 failedAccessories:(id)a6 responseTuples:(id)a7 activity:(id)a8 unreachableWaitGroup:(id)a9 failureWaitGroup:(id)a10
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  char v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD block[4];
  id v33;
  HMDHome *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  unint64_t v41;
  char v42;

  v15 = a3;
  v16 = a4;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v21 = a10;
  v22 = objc_msgSend(v16, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  dispatch_get_global_queue(0, 0);
  v23 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __142__HMDHome__waitForEarlyDispatchTimeout_requestMessage_source_failedAccessories_responseTuples_activity_unreachableWaitGroup_failureWaitGroup___block_invoke;
  block[3] = &unk_1E89A4E18;
  v33 = v20;
  v34 = self;
  v35 = v19;
  v36 = v17;
  v42 = v22;
  v37 = v18;
  v38 = v21;
  v39 = v15;
  v40 = v16;
  v41 = a5;
  v24 = v16;
  v25 = v15;
  v26 = v21;
  v27 = v18;
  v28 = v17;
  v29 = v19;
  v30 = v20;
  dispatch_async(v23, block);

}

- (void)_waitForWriteRequestFanOut:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 responseTuples:(id)a6 failedAccessories:(id)a7 activity:(id)a8 waitGroup:(id)a9 failureWaitGroup:(id)a10
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  char v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _QWORD block[4];
  id v32;
  id v33;
  id v34;
  HMDHome *v35;
  id v36;
  id v37;
  id v38;
  unint64_t v39;
  char v40;

  v15 = a3;
  v16 = a4;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a10;
  v21 = a9;
  v22 = objc_msgSend(v16, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  -[HMDHome workQueue](self, "workQueue");
  v23 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __129__HMDHome__waitForWriteRequestFanOut_requestMessage_source_responseTuples_failedAccessories_activity_waitGroup_failureWaitGroup___block_invoke;
  block[3] = &unk_1E89A4DF0;
  v32 = v19;
  v33 = v18;
  v40 = v22;
  v34 = v17;
  v35 = self;
  v36 = v20;
  v37 = v15;
  v38 = v16;
  v39 = a5;
  v24 = v16;
  v25 = v15;
  v26 = v20;
  v27 = v17;
  v28 = v18;
  v29 = v19;
  dispatch_group_notify(v21, v23, block);

}

- (id)_createMessageForReadWriteRequest:(id)a3 source:(unint64_t)a4 withCompletionHandler:(id)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v15[4];
  id v16;
  HMDHome *v17;
  id v18;
  id v19;
  id location;

  v7 = a3;
  v8 = a5;
  objc_msgSend(v7, "internal");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "copy");

  v11 = (void *)objc_msgSend(objc_alloc((Class)objc_opt_class()), "initWithInternalMessage:", v10);
  objc_initWeak(&location, v11);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __74__HMDHome__createMessageForReadWriteRequest_source_withCompletionHandler___block_invoke;
  v15[3] = &unk_1E89BDC40;
  objc_copyWeak(&v19, &location);
  v12 = v8;
  v18 = v12;
  v13 = v7;
  v16 = v13;
  v17 = self;
  objc_msgSend(v11, "setResponseHandler:", v15);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

  return v11;
}

- (void)_writeCharacteristicValues:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 withCompletionHandler:(id)a6
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  BOOL v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  dispatch_group_t v34;
  NSObject *v35;
  void *v36;
  NSObject *v37;
  id v38;
  id v39;
  void *v40;
  dispatch_group_t v41;
  void *v42;
  char v43;
  void *v44;
  void *v45;
  dispatch_group_t v46;
  id v47;
  _QWORD block[5];
  id v49;
  id v50;
  id v51;
  id v52;
  char v53;
  id v54;
  uint8_t buf[4];
  id v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  v47 = a6;
  v13 = objc_alloc(MEMORY[0x1E0D28540]);
  v14 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "stringWithFormat:", CFSTR("%@, %s:%ld"), v15, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 25026);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = (id)objc_msgSend(v13, "initWithName:", v16);

  if (-[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled"))
  {
    v17 = -[HMDHome isCurrentDeviceAvailableResident](self, "isCurrentDeviceAvailableResident");
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    if (v17)
    {
      HMFGetOSLogHandle();
      v20 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "shortDescription");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v21;
        v57 = 2112;
        v58 = v22;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Running new accessory communication logic for resident. %@", buf, 0x16u);

      }
    }
    else
    {
      HMFGetOSLogHandle();
      v20 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v29 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "shortDescription");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v29;
        v57 = 2112;
        v58 = v30;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Routing accessory write requests using Resident First logic. %@", buf, 0x16u);

      }
    }

    objc_autoreleasePoolPop(v18);
    -[HMDHome _createMessageForReadWriteRequest:source:withCompletionHandler:](v19, "_createMessageForReadWriteRequest:source:withCompletionHandler:", v12, a5, v47);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome accessoryReaderWriter](v19, "accessoryReaderWriter");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "submitWriteRequests:sourceType:requestMessage:", v11, a5, v31);

  }
  else
  {
    v23 = v11;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "identifier");
    v25 = objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v12, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
    v44 = (void *)v25;
    objc_msgSend(v12, "userForHome:", self);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = dispatch_group_create();
    objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v23, "count"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _buildCharacteristicWriteRequest:accessoryWriteRequestMapTable:accessoryList:responseTuples:user:](self, "_buildCharacteristicWriteRequest:accessoryWriteRequestMapTable:accessoryList:responseTuples:user:", v23, v27, v28, v24, v26);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    if (isWatch()
      && -[HMDHome _passWriteRequestToCompanion:requestMessage:source:remoteAccessories:responseTuples:withCompletionHandler:](self, "_passWriteRequestToCompanion:requestMessage:source:remoteAccessories:responseTuples:withCompletionHandler:", v27, v12, a5, v45, v24, v47)|| -[HMDHome _loadBalanceWriteRequestOnResidentForAccessory:accessoryWriteRequestMapTable:requestMessage:source:responseTuples:withCompletionHandler:](self, "_loadBalanceWriteRequestOnResidentForAccessory:accessoryWriteRequestMapTable:requestMessage:source:responseTuples:withCompletionHandler:", v28, v27, v12, a5, v24, v47))
    {

      v11 = v23;
    }
    else
    {
      v42 = v28;
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = dispatch_group_create();
      -[HMDHome _sendWriteRequestToAccessoryServer:requestMessage:source:failedAccessories:responseTuples:activity:waitGroup:unreachableWaitGroup:](self, "_sendWriteRequestToAccessoryServer:requestMessage:source:failedAccessories:responseTuples:activity:waitGroup:unreachableWaitGroup:", v27, v12, a5, v33, v24, v54, v46, v34);
      v40 = v26;
      v35 = dispatch_group_create();
      dispatch_group_enter(v35);
      v41 = v34;
      -[HMDHome _waitForEarlyDispatchTimeout:requestMessage:source:failedAccessories:responseTuples:activity:unreachableWaitGroup:failureWaitGroup:](self, "_waitForEarlyDispatchTimeout:requestMessage:source:failedAccessories:responseTuples:activity:unreachableWaitGroup:failureWaitGroup:", v27, v12, a5, v33, v24, v54, v34, v35);
      v36 = (void *)v33;
      -[HMDHome _waitForWriteRequestFanOut:requestMessage:source:responseTuples:failedAccessories:activity:waitGroup:failureWaitGroup:](self, "_waitForWriteRequestFanOut:requestMessage:source:responseTuples:failedAccessories:activity:waitGroup:failureWaitGroup:", v27, v12, a5, v24, v33, v54, v46, v35);
      -[HMDHome workQueue](self, "workQueue");
      v37 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __82__HMDHome__writeCharacteristicValues_requestMessage_source_withCompletionHandler___block_invoke;
      block[3] = &unk_1E89A9F98;
      v53 = v43;
      block[4] = self;
      v49 = v24;
      v50 = v44;
      v51 = v12;
      v52 = v47;
      v38 = v44;
      v39 = v24;
      dispatch_group_notify(v35, v37, block);

      v11 = v23;
    }
  }
  __HMFActivityScopeLeave();

}

- (void)_addResponseTuplesFromDictionary:(id)a3 accessoryRequestMapTable:(id)a4 responseTuples:(id)a5 completedGroup:(id)a6 logEvents:(id)a7
{
  id v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  NSObject *group;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id obj;
  void *v39;
  _QWORD v40[4];
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  HMDHome *v46;
  id v47;
  NSObject *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v34 = a4;
  v33 = a5;
  group = a6;
  v31 = a7;
  v35 = v12;
  objc_msgSend(v12, "hmf_dictionaryForKey:", CFSTR("kModifiedCharacteristicsForAccessoryKey"));
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v53, 16);
  if (v37)
  {
    v36 = *(_QWORD *)v50;
    do
    {
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v50 != v36)
          objc_enumerationMutation(obj);
        v14 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * i);
        v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v14);
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v17 = v16;
        else
          v17 = 0;
        v18 = v17;

        if (v18)
        {
          objc_msgSend(v18, "bridge");
          v19 = objc_claimAutoreleasedReturnValue();
          v39 = v15;
          v20 = (void *)v19;
          if (v19)
            v21 = (void *)v19;
          else
            v21 = v18;
          v22 = v21;

          objc_msgSend(v22, "uuid");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "UUIDString");
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v34, "objectForKey:", v22);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(obj, "hmf_dictionaryForKey:", v14);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          dispatch_group_enter(group);
          -[HMDHome workQueue](self, "workQueue");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v40[0] = MEMORY[0x1E0C809B0];
          v40[1] = 3221225472;
          v40[2] = __109__HMDHome__addResponseTuplesFromDictionary_accessoryRequestMapTable_responseTuples_completedGroup_logEvents___block_invoke;
          v40[3] = &unk_1E89A4E40;
          v41 = v25;
          v28 = v18;
          v42 = v28;
          v43 = v31;
          v44 = v24;
          v45 = v35;
          v46 = self;
          v47 = v33;
          v48 = group;
          v29 = v24;
          v30 = v25;
          objc_msgSend(v28, "handleMultipleCharacteristicsUpdated:message:completionQueue:completionHandler:", v26, 0, v27, v40);

          v15 = v39;
        }

      }
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v53, 16);
    }
    while (v37);
  }
  dispatch_group_leave(group);

}

- (void)_handleCharacteristicWrite:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id location;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kAccessoryUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  if (v9)
  {
    if (-[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled"))
    {
      objc_msgSend(v4, "messagePayload");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("kServiceInstanceID"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "messagePayload");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("kCharacteristicInstanceID"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "findService:", v24);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "findCharacteristic:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        if (objc_msgSend(v4, "isRemote"))
          objc_msgSend(v4, "dataForKey:", CFSTR("kAuthorizationDataKey"));
        else
          objc_msgSend(v13, "authorizationData");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "messagePayload");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("kCharacteristicValue"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "identifier");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:", v13, v17, v22, v18, 0, 0);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_initWeak(&location, self);
        v34[0] = v19;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = __38__HMDHome__handleCharacteristicWrite___block_invoke;
        v25[3] = &unk_1E89A4E68;
        objc_copyWeak(&v32, &location);
        v26 = v4;
        v27 = v6;
        v28 = v9;
        v29 = v24;
        v30 = v12;
        v21 = v19;
        v31 = v21;
        -[HMDHome _areWriteRequestsAllowed:message:completion:](self, "_areWriteRequestsAllowed:message:completion:", v20, v26, v25);

        objc_destroyWeak(&v32);
        objc_destroyWeak(&location);

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v15);

      }
    }
    else
    {
      objc_msgSend(v9, "_handleCharacteristicWrite:", v4);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);

  }
}

- (void)_handleMultipleCharacteristicWrite:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21[2];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v22 = 0;
  -[HMDHome writeRequestTuplesFromMessage:outUnhandledRequests:](self, "writeRequestTuplesFromMessage:outUnhandledRequests:", v4, &v22);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v22;
  if (objc_msgSend(v6, "count"))
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v24 = v10;
      v25 = 2112;
      v26 = v11;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ has characteristic requests that cannot be handled: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
  }
  v12 = (void *)parseMessageSource(v4);
  objc_msgSend(v5, "count");
  objc_msgSend(v4, "isRemote");
  v13 = +[HMDMetricsUtilities stringForSource:](HMDMetricsUtilities, "stringForSource:", v12);
  objc_initWeak((id *)buf, self);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __46__HMDHome__handleMultipleCharacteristicWrite___block_invoke;
  v17[3] = &unk_1E89A4E90;
  objc_copyWeak(v21, (id *)buf);
  v14 = v4;
  v18 = v14;
  v21[1] = v12;
  v15 = v5;
  v19 = v15;
  v16 = v6;
  v20 = v16;
  -[HMDHome _areWriteRequestsAllowed:message:completion:](self, "_areWriteRequestsAllowed:message:completion:", v15, v14, v17);

  objc_destroyWeak(v21);
  objc_destroyWeak((id *)buf);

}

- (void)_areWriteRequestsAllowed:(id)a3 message:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  unint64_t v10;
  void (**v11)(void *, uint64_t, _QWORD);
  id v12;

  v12 = a3;
  v8 = a4;
  v9 = a5;
  v10 = parseMessageSource(v8);
  if (-[HMDHome applyDeviceLockStatus:](self, "applyDeviceLockStatus:", v8))
  {
    -[HMDHome _applyDeviceLockCheck:forSource:message:completion:](self, v12, v10, v8, v9);
  }
  else
  {
    v11 = (void (**)(void *, uint64_t, _QWORD))_Block_copy(v9);

    if (v11)
    {
      v11[2](v11, 1, 0);
      v9 = v11;
    }
    else
    {
      v9 = 0;
    }
  }

}

- (id)writeRequestTuplesFromMessage:(id)a3 outUnhandledRequests:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id *v38;
  uint64_t v39;
  uint64_t v40;
  id obj;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  HMDHome *v54;
  id v55;
  uint64_t v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[128];
  _BYTE v74[128];
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(v6, "dictionaryForKey:", CFSTR("kAccessoriesListKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v55 = (id)objc_claimAutoreleasedReturnValue();
  v38 = a4;
  if (a4)
    v50 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  else
    v50 = 0;
  objc_msgSend(v6, "uuidForKey:", CFSTR("kActionSetUUID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    v9 = 1;
  else
    v9 = objc_msgSend(v6, "BOOLForKey:", CFSTR("kShortActionKey"));
  v53 = v9;

  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  obj = v7;
  v10 = v50;
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v75, 16);
  if (v40)
  {
    v39 = *(_QWORD *)v70;
    v54 = self;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v70 != v39)
          objc_enumerationMutation(obj);
        v42 = v11;
        v12 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * v11);
        objc_msgSend(obj, "hmf_dictionaryForKey:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = v12;
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v12);
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v16 = v15;
        else
          v16 = 0;
        v44 = v16;

        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v17 = v13;
        v10 = v50;
        v46 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v65, v74, 16);
        if (v46)
        {
          v45 = *(_QWORD *)v66;
          v43 = v17;
          do
          {
            for (i = 0; i != v46; ++i)
            {
              if (*(_QWORD *)v66 != v45)
                objc_enumerationMutation(v17);
              v19 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * i);
              objc_msgSend(v17, "hmf_dictionaryForKey:", v19);
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              v52 = v19;
              -[HMDHome _stringToUnsignedLongLongNumber:]((uint64_t)self, v19);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              if (v21)
              {
                v49 = i;
                v47 = v21;
                objc_msgSend(v44, "findService:", v21);
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                v61 = 0u;
                v62 = 0u;
                v63 = 0u;
                v64 = 0u;
                v48 = v20;
                v22 = v20;
                v60 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v61, v73, 16);
                if (v60)
                {
                  v23 = *(_QWORD *)v62;
                  v56 = *(_QWORD *)v62;
                  do
                  {
                    for (j = 0; j != v60; ++j)
                    {
                      if (*(_QWORD *)v62 != v23)
                        objc_enumerationMutation(v22);
                      v25 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * j);
                      -[HMDHome _stringToUnsignedLongLongNumber:]((uint64_t)self, v25);
                      v26 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v26)
                      {
                        objc_msgSend(v57, "findCharacteristic:", v26);
                        v27 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v27)
                        {
                          if (objc_msgSend(v6, "isRemote"))
                          {
                            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v25, CFSTR("kAuthorizationDataKey"));
                            v28 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v22, "hmf_dataForKey:", v28);
                            v59 = objc_claimAutoreleasedReturnValue();

                          }
                          else
                          {
                            objc_msgSend(v27, "authorizationData");
                            v59 = objc_claimAutoreleasedReturnValue();
                          }
                          v58 = objc_msgSend(v22, "hmf_BOOLForKey:", CFSTR("HMDCharacteristicWriteRequestIncludeResponseValueKey"));
                          v31 = v6;
                          if ((objc_msgSend(v6, "isRemote") & 1) != 0)
                          {
                            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v25, CFSTR("kCharacteristicContextDataForWriteKey"));
                            v32 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v22, "hmf_dataForKey:", v32);
                            v30 = (id)objc_claimAutoreleasedReturnValue();
                          }
                          else
                          {
                            -[HMDHome currentUser](self, "currentUser");
                            v32 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v32, "notificationContextHAPIdentifier");
                            v33 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v27, "contextDataForWriteRequestWithIdentifier:", v33);
                            v30 = (id)objc_claimAutoreleasedReturnValue();

                          }
                          objc_msgSend(v22, "objectForKeyedSubscript:", v25);
                          v34 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v31, "identifier");
                          v35 = (void *)objc_claimAutoreleasedReturnValue();
                          v6 = v31;
                          +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:", v27, v34, v59, v35, v53, v58, v30);
                          v36 = (void *)objc_claimAutoreleasedReturnValue();

                          v29 = (id)v59;
                          objc_msgSend(v55, "addObject:", v36);

                          self = v54;
                          v23 = v56;
                        }
                        else
                        {
                          objc_msgSend(v50, "hmf_mutableDictionaryForKey:", v51);
                          v29 = (id)objc_claimAutoreleasedReturnValue();
                          if (!v29)
                          {
                            v29 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                            objc_msgSend(v50, "setObject:forKeyedSubscript:", v29, v51);
                          }
                          objc_msgSend(v29, "hmf_mutableArrayForKey:", v52);
                          v30 = (id)objc_claimAutoreleasedReturnValue();
                          if (!v30)
                          {
                            v30 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                            objc_msgSend(v29, "setObject:forKeyedSubscript:", v30, v52);
                          }
                          objc_msgSend(v30, "addObject:", v26);
                        }

                      }
                    }
                    v60 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v61, v73, 16);
                  }
                  while (v60);
                }

                i = v49;
                v10 = v50;
                v17 = v43;
                v21 = v47;
                v20 = v48;
              }

            }
            v46 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v65, v74, 16);
          }
          while (v46);
        }

        v11 = v42 + 1;
      }
      while (v42 + 1 != v40);
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v75, 16);
    }
    while (v40);
  }

  if (v38)
    *v38 = (id)objc_msgSend(v10, "copy");

  return v55;
}

- (BOOL)_shouldWaitForAccessoriesToBeReachable
{
  void *v3;
  int v4;
  void *v5;
  void *v6;

  if (isWatch())
  {
    +[HMDWatchSystemState sharedState](HMDWatchSystemState, "sharedState");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v3, "isCompanionReachable") & 1) != 0)
    {
      LOBYTE(v4) = 0;
    }
    else
    {
      -[HMDHome residentDeviceManager](self, "residentDeviceManager");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "primaryResidentDevice");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v6, "isReachable") ^ 1;

    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (void)_performOperation:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id from;
  id location;

  v6 = a3;
  v7 = a4;
  -[HMDHome assistantOperations](self, "assistantOperations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setAssistantOperations:](self, "setAssistantOperations:", v9);

  }
  -[HMDHome assistantOperations](self, "assistantOperations");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObject:", v6);

  objc_initWeak(&location, self);
  objc_initWeak(&from, v6);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __40__HMDHome__performOperation_completion___block_invoke;
  v12[3] = &unk_1E89A4EB8;
  v11 = v7;
  v13 = v11;
  objc_copyWeak(&v14, &from);
  objc_copyWeak(&v15, &location);
  objc_msgSend(v6, "startWithCompletion:", v12);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v14);

  objc_destroyWeak(&from);
  objc_destroyWeak(&location);

}

- (void)readCharacteristicValues:(id)a3 identifier:(id)a4 source:(unint64_t)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  _QWORD block[4];
  id v27;
  id v28;
  HMDHome *v29;
  id v30;
  id v31;
  unint64_t v32;
  int64_t v33;

  v13 = a3;
  v14 = a4;
  v15 = a7;
  v16 = objc_alloc(MEMORY[0x1E0D28540]);
  v17 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@, %s:%ld"), v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 25625);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v16, "initWithName:", v19);

  -[HMDHome workQueue](self, "workQueue");
  v21 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_1E89A4EE0;
  v27 = v20;
  v28 = v13;
  v31 = v15;
  v32 = a5;
  v33 = a6;
  v29 = self;
  v30 = v14;
  v22 = v14;
  v23 = v15;
  v24 = v13;
  v25 = v20;
  dispatch_async(v21, block);

}

- (id)_getLogEventsForOperation:(BOOL)a3 startTime:(double)a4 accessories:(id)a5 requestMap:(id)a6 identifier:(id)a7 userUUID:(id)a8 source:(unint64_t)a9 bundleID:(id)a10
{
  _BOOL8 v14;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t k;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  HMDCharacteristicReadWriteLogEvent *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v59;
  id v60;
  id v61;
  id v62;
  id obj;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[128];
  _BYTE v86[128];
  _BYTE v87[128];
  uint64_t v88;

  v14 = a3;
  v88 = *MEMORY[0x1E0C80C00];
  v16 = a5;
  v17 = a6;
  v62 = a7;
  v61 = a8;
  v60 = a10;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  obj = v16;
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v87, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v82;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v82 != v20)
          objc_enumerationMutation(obj);
        v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", *(_QWORD *)(*((_QWORD *)&v81 + 1) + 8 * i));
        -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v24 = v23;
        else
          v24 = 0;
        v25 = v24;

        if (v25)
        {
          if ((objc_msgSend(v25, "isPrimary") & 1) == 0)
          {
            objc_msgSend(v25, "bridge");
            v23 = (void *)objc_claimAutoreleasedReturnValue();

          }
          objc_msgSend(v23, "uuid");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "UUIDString");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "addObject:", v27);

        }
      }
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v87, 16);
    }
    while (v19);
  }

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v17, "count"));
  v59 = (id)objc_claimAutoreleasedReturnValue();
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v66 = v17;
  v65 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v77, v86, 16);
  if (v65)
  {
    v64 = *(_QWORD *)v78;
    v28 = 2;
    if (v14)
      v28 = 3;
    v57 = v28;
    do
    {
      for (j = 0; j != v65; ++j)
      {
        if (*(_QWORD *)v78 != v64)
          objc_enumerationMutation(v66);
        v30 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * j);
        objc_msgSend(v30, "uuid");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "UUIDString");
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        if ((objc_msgSend(v71, "containsObject:", v32) & 1) != 0
          || isWatch()
          && (objc_msgSend(obj, "objectForKey:", v32),
              v33 = (void *)objc_claimAutoreleasedReturnValue(),
              v33,
              v33))
        {
          v69 = v32;
          v70 = j;
          v34 = v30;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v35 = v34;
          else
            v35 = 0;
          v36 = v35;
          v67 = v34;

          v68 = v36;
          objc_msgSend(v66, "objectForKey:", v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v37, "count"));
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v37, "count"));
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v73 = 0u;
          v74 = 0u;
          v75 = 0u;
          v76 = 0u;
          v40 = v37;
          v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v73, v85, 16);
          if (v41)
          {
            v42 = v41;
            v43 = *(_QWORD *)v74;
            do
            {
              for (k = 0; k != v42; ++k)
              {
                if (*(_QWORD *)v74 != v43)
                  objc_enumerationMutation(v40);
                v45 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * k);
                objc_msgSend(v45, "characteristic");
                v46 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v38, "addObject:", v46);

                v47 = v45;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v48 = v47;
                else
                  v48 = 0;
                v49 = v48;

                if (v14 && v49)
                {
                  objc_msgSend(v49, "value");
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v50)
                  {
                    objc_msgSend(v39, "addObject:", v50);
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0C99E38], "null");
                    v51 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v39, "addObject:", v51);

                  }
                }

              }
              v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v73, v85, 16);
            }
            while (v42);
          }

          v72 = 0;
          objc_msgSend(v68, "preferredHAPAccessoryForOperation:linkType:", v57, &v72);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v56) = 0;
          LOBYTE(v55) = 0;
          v53 = -[HMDCharacteristicReadWriteLogEvent initWithStartTime:characteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:userUUID:writtenValues:]([HMDCharacteristicReadWriteLogEvent alloc], "initWithStartTime:characteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:userUUID:writtenValues:", v38, v67, v52, a9, v14, 0, a4, v55, v62, v56, v60, v61, v39);
          v32 = v69;
          objc_msgSend(v59, "setObject:forKeyedSubscript:", v53, v69);

          j = v70;
        }

      }
      v65 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v77, v86, 16);
    }
    while (v65);
  }

  return v59;
}

- (void)_readCharacteristicValuesForAccessories:(id)a3 readRequestMap:(id)a4 responseTuples:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 viaDevice:(id)a8 completionHandler:(id)a9
{
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  HMDHome *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  NSObject *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  void *context;
  void *contexta;
  HMDHomeKitVersion *v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  int v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  _QWORD block[4];
  id v80;
  id v81;
  id v82;
  HMDHome *v83;
  id v84;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[4];
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  NSObject *v96;
  id v97;
  id location;
  uint8_t buf[4];
  void *v100;
  _BYTE v101[128];
  _QWORD v102[2];
  _QWORD v103[2];
  _QWORD v104[3];
  _QWORD v105[5];

  v105[3] = *MEMORY[0x1E0C80C00];
  v78 = a3;
  v77 = a4;
  v71 = a5;
  v16 = a6;
  v76 = a8;
  v70 = a9;
  v17 = objc_alloc(MEMORY[0x1E0D28540]);
  v18 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "stringWithFormat:", CFSTR("%@, %s:%ld"), v19, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 25764);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = (void *)objc_msgSend(v17, "initWithName:", v20);

  v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v73 = objc_msgSend(v16, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  if (!objc_msgSend(v78, "count"))
  {
    dispatch_group_leave(v21);
    goto LABEL_30;
  }
  objc_msgSend(MEMORY[0x1E0D33490], "currentTime");
  v23 = v22;
  objc_msgSend(v16, "identifier");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "userForHome:", self);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "uuid");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "applicationBundleIdentifier");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _getLogEventsForOperation:startTime:accessories:requestMap:identifier:userUUID:source:bundleID:](self, "_getLogEventsForOperation:startTime:accessories:requestMap:identifier:userUUID:source:bundleID:", 0, v78, v77, v24, v26, a7, v23, v27);
  context = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome uuid](self, "uuid");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "UUIDString");
  v69 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = (void *)MEMORY[0x1E0C99E08];
  v104[0] = CFSTR("kAccessoriesListKey");
  v104[1] = CFSTR("kHomeUUID");
  v105[0] = v78;
  v105[1] = v69;
  v104[2] = CFSTR("kDoNotForwardMessageKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v76 != 0);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v105[2] = v30;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v105, v104, 3);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "dictionaryWithDictionary:", v31);
  v72 = (void *)objc_claimAutoreleasedReturnValue();

  v68 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("4.0"));
  -[HMDHome primaryResident](self, "primaryResident");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "device");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (v33)
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "device");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "version");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v36, "isAtLeastVersion:", v68);

LABEL_7:
    goto LABEL_8;
  }
  if (isWatch())
  {
    -[HMDHome homeManager](self, "homeManager");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "companionDevice");
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v34, "version");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = objc_msgSend(v35, "isAtLeastVersion:", v68);
    goto LABEL_7;
  }
  v37 = 0;
LABEL_8:
  objc_msgSend(v16, "identifier");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = v39;
  if (v39)
    v41 = v37;
  else
    v41 = 0;
  if (v41 != 1)
    goto LABEL_14;

  if (v73)
  {
    v102[0] = CFSTR("kMultiPartResponseKey");
    v102[1] = CFSTR("kRequestIdentifierKey");
    v103[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(v16, "identifier");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "UUIDString");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v103[1] = v42;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v103, v102, 2);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "addEntriesFromDictionary:", v43);

LABEL_14:
  }
  v44 = (void *)MEMORY[0x1E0D285F8];
  v45 = objc_msgSend(v16, "qualityOfService");
  -[HMDHome messageDestination](self, "messageDestination");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = (void *)objc_msgSend(v72, "copy");
  objc_msgSend(v44, "messageWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicReadRequestKey"), v45, v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, self);
  v90[0] = MEMORY[0x1E0C809B0];
  v90[1] = 3221225472;
  v90[2] = __131__HMDHome__readCharacteristicValuesForAccessories_readRequestMap_responseTuples_requestMessage_source_viaDevice_completionHandler___block_invoke;
  v90[3] = &unk_1E89A4D08;
  objc_copyWeak(&v97, &location);
  v91 = v74;
  v92 = v78;
  v49 = v77;
  v93 = v49;
  v94 = v75;
  v50 = context;
  v95 = v50;
  v96 = v21;
  objc_msgSend(v48, "setResponseHandler:", v90);
  -[HMDHome uuid](self, "uuid");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](self, "workQueue");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:](self, "redispatchToResidentMessage:target:responseQueue:viaDevice:", v48, v51, v52, v76);

  if (-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v53 = v49;
    v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v86, v101, 16);
    if (v54)
    {
      v55 = *(_QWORD *)v87;
      while (2)
      {
        for (i = 0; i != v54; ++i)
        {
          if (*(_QWORD *)v87 != v55)
            objc_enumerationMutation(v53);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v86 + 1) + 8 * i), "hasBTLELink"))
          {
            contexta = (void *)MEMORY[0x1D17BA0A0]();
            v57 = self;
            HMFGetOSLogHandle();
            v58 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v100 = v59;
              _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@There are BTLE accessories that are currently unreachable during the read, kicking scan to update reachability", buf, 0xCu);

            }
            objc_autoreleasePoolPop(contexta);
            -[HMDHome accessoryBrowser](v57, "accessoryBrowser");
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v60, "btleAccessoryReachabilityProbeTimer:", 1);

            goto LABEL_28;
          }
        }
        v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v86, v101, 16);
        if (v54)
          continue;
        break;
      }
    }
LABEL_28:

  }
  objc_destroyWeak(&v97);
  objc_destroyWeak(&location);

LABEL_30:
  -[HMDHome workQueue](self, "workQueue");
  v61 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __131__HMDHome__readCharacteristicValuesForAccessories_readRequestMap_responseTuples_requestMessage_source_viaDevice_completionHandler___block_invoke_1263;
  block[3] = &unk_1E89A9F98;
  v80 = v71;
  v81 = v75;
  v82 = v16;
  v83 = self;
  v85 = v73;
  v84 = v70;
  v62 = v70;
  v63 = v16;
  v64 = v75;
  v65 = v71;
  dispatch_group_notify(v21, v61, block);

}

- (void)_reallyRedispatchReadsToDevice:(id)a3 accessories:(id)a4 dispatchGroup:(id)a5 requestMap:(id)a6 requestMessage:(id)a7 source:(unint64_t)a8 responseTuples:(id)a9 activity:(id)a10
{
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t i;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  id v31;
  void *v32;
  void *v33;
  NSObject *v34;
  NSObject *v35;
  id v36;
  id v37;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id obj;
  uint64_t v44;
  uint64_t v45;
  void *context;
  _QWORD v47[4];
  NSObject *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v37 = a7;
  v19 = a9;
  v35 = v17;
  v36 = a10;
  dispatch_group_enter(v17);
  -[HMDHome primaryResident](self, "primaryResident");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "device");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  obj = v16;
  v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
  if (v45)
  {
    v44 = *(_QWORD *)v50;
    v41 = v19;
    v42 = v18;
    v40 = v21;
    v39 = v22;
    do
    {
      for (i = 0; i != v45; ++i)
      {
        if (*(_QWORD *)v50 != v44)
          objc_enumerationMutation(obj);
        v24 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
        context = (void *)MEMORY[0x1D17BA0A0]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "uuid");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "UUIDString");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "uniqueIdentifier");
          v30 = self;
          v31 = v15;
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v54 = v27;
          v55 = 2112;
          v56 = v29;
          v57 = 2112;
          v58 = v32;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Read bulk redispatching accessory %@/%@ to resident", buf, 0x20u);

          v15 = v31;
          self = v30;
          v22 = v39;

          v19 = v41;
          v21 = v40;

          v18 = v42;
        }

        objc_autoreleasePoolPop(context);
        objc_msgSend(v21, "isCurrentDevice");
        objc_msgSend(v24, "uuid");

        objc_msgSend(v15, "identifier");
        objc_msgSend(v18, "objectForKey:", v24);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHome appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteRead:](HMDHome, "appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteRead:", v22, v19, v33);

      }
      v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
    }
    while (v45);
  }

  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v47[2] = __125__HMDHome__reallyRedispatchReadsToDevice_accessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_activity___block_invoke;
  v47[3] = &unk_1E89C0E20;
  v48 = v35;
  v34 = v35;
  -[HMDHome _readCharacteristicValuesForAccessories:readRequestMap:responseTuples:requestMessage:source:viaDevice:completionHandler:](self, "_readCharacteristicValuesForAccessories:readRequestMap:responseTuples:requestMessage:source:viaDevice:completionHandler:", v22, v18, v19, v37, a8, v15, v47);

}

- (void)_redispatchReadForAccessories:(id)a3 dispatchGroup:(id)a4 requestMap:(id)a5 requestMessage:(id)a6 source:(unint64_t)a7 responseTuples:(id)a8 errorResponseTuples:(id)a9
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  HMDHome *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t i;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  int v64;
  void *v65;
  HMDHome *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  void *v82;
  id obj;
  id obja;
  HMDHome *v86;
  void (**v87)(void *, void *, void *);
  void *v88;
  id v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _QWORD aBlock[4];
  id v99;
  id v100;
  id v101;
  HMDHome *v102;
  unint64_t v103;
  _BYTE v104[128];
  void *v105;
  uint8_t buf[4];
  void *v107;
  __int16 v108;
  void *v109;
  __int16 v110;
  id v111;
  _BYTE v112[128];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v75 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a8;
  v19 = a9;
  v20 = objc_alloc(MEMORY[0x1E0D28540]);
  v21 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stringWithFormat:", CFSTR("%@, %s:%ld"), v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 25961);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend(v20, "initWithName:", v23);

  -[HMDHome primaryResident](self, "primaryResident");
  v25 = objc_claimAutoreleasedReturnValue();
  v82 = (void *)v25;
  if (v25)
  {
    v26 = (void *)v25;
    v80 = v18;
    v81 = v15;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __123__HMDHome__redispatchReadForAccessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_errorResponseTuples___block_invoke;
    aBlock[3] = &unk_1E89A4D78;
    v74 = v16;
    v78 = v16;
    v99 = v78;
    v72 = v19;
    v100 = v19;
    v103 = a7;
    v73 = v17;
    v89 = v17;
    v101 = v89;
    v102 = self;
    v87 = (void (**)(void *, void *, void *))_Block_copy(aBlock);
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v86 = self;
    v79 = v24;
    v88 = v27;
    if ((objc_msgSend(v26, "isCurrentDevice") & 1) != 0)
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v28 = v75;
      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v94, v112, 16);
      if (v29)
      {
        v30 = v29;
        v31 = *(_QWORD *)v95;
        v76 = v28;
        do
        {
          v32 = 0;
          obj = (id)v30;
          do
          {
            if (*(_QWORD *)v95 != v31)
              objc_enumerationMutation(v28);
            v33 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * v32);
            -[HMDHome homeManager](self, "homeManager");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "residentMesh");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "bestResidentDeviceForAccessory:", v33);
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            if (v36)
            {
              objc_msgSend(v27, "objectForKey:", v36);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              v38 = v37;
              if (v37)
              {
                v39 = v37;
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v39 = (id)objc_claimAutoreleasedReturnValue();
              }
              v50 = v39;

              objc_msgSend(v50, "addObject:", v33);
              objc_msgSend(v27, "setObject:forKey:", v50, v36);
            }
            else
            {
              v40 = (void *)MEMORY[0x1D17BA0A0]();
              v41 = self;
              HMFGetOSLogHandle();
              v42 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v33, "uuid");
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v44, "UUIDString");
                v77 = v40;
                v45 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v33, "uniqueIdentifier");
                v46 = v31;
                v47 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v107 = v43;
                v108 = 2112;
                v109 = v45;
                v110 = 2112;
                v111 = v47;
                _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@Read bulk redispatching failing for %@/%@ (No Mesh Redirect)", buf, 0x20u);

                v31 = v46;
                v40 = v77;

                v27 = v88;
                v28 = v76;
              }

              objc_autoreleasePoolPop(v40);
              v105 = v33;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v105, 1);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              v87[2](v87, v48, v49);

              objc_msgSend(v33, "uuid");
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = (uint64_t)obj;
              self = v86;
            }

            ++v32;
          }
          while (v30 != v32);
          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v94, v112, 16);
        }
        while (v30);
      }

    }
    else
    {
      objc_msgSend(v27, "setObject:forKey:", v75, v26);
    }
    v54 = objc_msgSend(v89, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    objc_msgSend(v27, "keyEnumerator");
    obja = (id)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v90, v104, 16);
    if (v55)
    {
      v56 = v55;
      v57 = *(_QWORD *)v91;
      if (v54)
        v58 = v89;
      else
        v58 = 0;
      do
      {
        for (i = 0; i != v56; ++i)
        {
          if (*(_QWORD *)v91 != v57)
            objc_enumerationMutation(obja);
          v60 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * i);
          objc_msgSend(v27, "objectForKey:", v60);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v89, "remoteSourceDevice");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v60, "device");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v64 = objc_msgSend(v62, "isEqual:", v63);

          if (v64)
          {
            v65 = (void *)MEMORY[0x1D17BA0A0]();
            v66 = self;
            HMFGetOSLogHandle();
            v67 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v68 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v107 = v68;
              v108 = 2112;
              v109 = v61;
              v110 = 2112;
              v111 = v89;
              _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_ERROR, "%{public}@Skipping read bulk redispatching for accessories %@ (Same source device). Message: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v65);
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            v87[2](v87, v61, v69);

            self = v86;
          }
          else if (v60 == v82)
          {
            -[HMDHome _reallyRedispatchReadsToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:](self, "_reallyRedispatchReadsToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:", 0, v61, v81, v78, v58, a7, v80, v79);
          }
          else
          {
            objc_msgSend(v60, "device");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome _reallyRedispatchReadsToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:](self, "_reallyRedispatchReadsToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:", v70, v61, v81, v78, v58, a7, v80, v79);

          }
          v27 = v88;

        }
        v56 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v90, v104, 16);
      }
      while (v56);
    }

    v16 = v74;
    v52 = v75;
    v53 = v80;
    v15 = v81;
    v19 = v72;
    v17 = v73;
    v24 = v79;
  }
  else
  {
    v71 = v18;
    v51 = v18;
    v52 = v75;
    -[HMDHome _reallyRedispatchReadsToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:](self, "_reallyRedispatchReadsToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:", 0, v75, v15, v16, v17, a7, v71, v24);
    v53 = v51;
  }

}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 qualityOfService:(int64_t)a5 withCompletionHandler:(id)a6
{
  -[HMDHome readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:](self, "readCharacteristicValues:source:sourceForLogging:qualityOfService:withCompletionHandler:", a3, a4, CFSTR("Unknown"), a5, a6);
}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 sourceForLogging:(id)a5 qualityOfService:(int64_t)a6 withCompletionHandler:(id)a7
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  id v21;
  id v22;
  id v23;
  _QWORD block[4];
  id v25;
  HMDHome *v26;
  id v27;
  id v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  id v32;

  v13 = a3;
  v14 = a5;
  v15 = a7;
  v16 = objc_alloc(MEMORY[0x1E0D28540]);
  v17 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringWithFormat:", CFSTR("%@, %s:%ld"), v18, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/Home/HMDHome.m", 26070);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = (id)objc_msgSend(v16, "initWithName:", v19);

  -[HMDHome workQueue](self, "workQueue");
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __99__HMDHome_readCharacteristicValues_source_sourceForLogging_qualityOfService_withCompletionHandler___block_invoke;
  block[3] = &unk_1E89A4EE0;
  v25 = v32;
  v26 = self;
  v27 = v14;
  v28 = v13;
  v30 = a6;
  v31 = a4;
  v29 = v15;
  v21 = v15;
  v22 = v13;
  v23 = v14;
  dispatch_async(v20, block);

  __HMFActivityScopeLeave();
}

- (BOOL)_passReadRequestToCompanion:(id)a3 requestMessage:(id)a4 source:(unint64_t)a5 pendingResponses:(id)a6 remoteAccessories:(id)a7 withCompletionHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  BOOL v27;
  char v29;
  unint64_t v30;
  void *v31;
  void *v32;
  _QWORD v33[4];
  id v34;
  id v35;
  id v36;
  char v37;
  id location;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a4;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v32 = v15;
  v19 = objc_msgSend(v15, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
  v31 = v14;
  if (isWatch() && -[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    v29 = v19;
    v30 = a5;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v20 = v14;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v40;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v40 != v22)
            objc_enumerationMutation(v20);
          objc_msgSend(v20, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * i));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "allResponses");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDHome appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteRead:](HMDHome, "appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteRead:", v17, v25, v24);

        }
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
      }
      while (v21);
    }

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __118__HMDHome__passReadRequestToCompanion_requestMessage_source_pendingResponses_remoteAccessories_withCompletionHandler___block_invoke;
    v33[3] = &unk_1E89A4F08;
    objc_copyWeak(&v36, &location);
    v34 = v32;
    v37 = v29;
    v35 = v18;
    -[HMDHome _readCharacteristicValuesForAccessories:readRequestMap:responseTuples:requestMessage:source:viaDevice:completionHandler:](self, "_readCharacteristicValuesForAccessories:readRequestMap:responseTuples:requestMessage:source:viaDevice:completionHandler:", v17, v20, v26, v34, v30, 0, v33);

    objc_destroyWeak(&v36);
    objc_destroyWeak(&location);

    v27 = 1;
  }
  else
  {
    v27 = 0;
  }

  return v27;
}

- (void)_handleCharacteristicRead:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  BOOL v18;
  id v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  _QWORD v50[3];

  v50[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kAccessoryUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
LABEL_17:

    goto LABEL_18;
  }
  if (-[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled"))
  {
    objc_msgSend(v4, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("kServiceInstanceID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "messagePayload");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("kCharacteristicInstanceID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "findService:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "findCharacteristic:", v13);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)v15;
    if (v15)
    {
      v35 = v11;
      v50[0] = v15;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v50, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 0;
      v18 = -[HMDHome _isReadRequestAllowForCharacteristics:message:error:](self, "_isReadRequestAllowForCharacteristics:message:error:", v17, v4, &v36);
      v19 = v36;

      if (v18)
      {
        v34 = v19;
        +[HMDCharacteristicRequest requestWithCharacteristic:](HMDCharacteristicRequest, "requestWithCharacteristic:", v16);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = parseMessageSource(v4);
        v20 = (void *)MEMORY[0x1D17BA0A0]();
        v21 = self;
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "shortDescription");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "UUIDString");
          v30 = v22;
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "uniqueIdentifier");
          v29 = v20;
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544642;
          v39 = v31;
          v40 = 2112;
          v41 = v23;
          v42 = 2112;
          v43 = v24;
          v44 = 2112;
          v45 = v25;
          v46 = 2112;
          v47 = v35;
          v48 = 2112;
          v49 = v13;
          _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Processing single characteristic read request: %@ (%@/%@/%@/%@) as a special case of multiple characteristic read requests", buf, 0x3Eu);

          v20 = v29;
          v22 = v30;

        }
        objc_autoreleasePoolPop(v20);
        v37 = v32;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v37, 1);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome __readWriteResponseHandler:unhandledRequests:](v21, "__readWriteResponseHandler:unhandledRequests:", v4, 0);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome _readCharacteristicValues:requestMessage:source:withCompletionHandler:](v21, "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", v26, v4, v33, v27);

        v19 = v34;
      }
      else
      {
        objc_msgSend(v4, "respondWithError:", v19);
      }

      v11 = v35;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v28);

    }
    goto LABEL_17;
  }
  objc_msgSend(v9, "_handleCharacteristicRead:", v4);
LABEL_18:

}

- (void)_handleSendingNotificationsForRequest:(id)a3 requestIdentifier:(id)a4 supportsMultiPartResponse:(BOOL)a5 characteristicUpdates:(id)a6 completion:(id)a7
{
  _BOOL4 v9;
  id v12;
  id v13;
  id v14;
  void (**v15)(id, void *);
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  const char *v34;
  void *v35;
  void *v36;
  void *v37;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v9 = a5;
  v52 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a6;
  v15 = (void (**)(id, void *))a7;
  objc_msgSend(v12, "destination");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  if (objc_msgSend(v12, "isRemote")
    && (objc_msgSend(v18, "device"),
        v19 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v19, "remoteDestinationString"),
        v20 = (void *)objc_claimAutoreleasedReturnValue(),
        v20,
        v19,
        v20))
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = objc_claimAutoreleasedReturnValue();
      v37 = (void *)v24;
      objc_msgSend(v12, "shortDescription");
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = "single";
      if (v9)
        v26 = "multi";
      v34 = v26;
      v35 = (void *)v25;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v14, "count"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "device");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "remoteDestinationString");
      *(_DWORD *)buf = 138544898;
      v39 = v24;
      v40 = 2112;
      v41 = v35;
      v42 = 2080;
      v43 = v34;
      v44 = 2112;
      v45 = v27;
      v46 = 2112;
      v47 = v14;
      v48 = 2112;
      v49 = v13;
      v50 = 2112;
      v51 = objc_claimAutoreleasedReturnValue();
      v28 = (void *)v51;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Response notification for %@ (%s part) [%@] with chars: %@ with id: %@ to device: %@", buf, 0x48u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "UUIDString");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "device");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "remoteDestinationString");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:](v22, "_notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:", v14, v13, v30, v32, v15);

  }
  else if (v15)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v15[2](v15, v33);

  }
}

- (void)_handlePendingResponsesTimerFired:(BOOL)a3
{
  _BOOL8 v3;
  HMDHome *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  __int128 v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  double Current;
  double v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  _BOOL8 v39;
  void *v40;
  void *v41;
  void *v42;
  __int128 v43;
  id obj;
  void *v45;
  HMDHome *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];
  uint64_t v60;

  v3 = a3;
  v4 = self;
  v60 = *MEMORY[0x1E0C80C00];
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  -[HMDHome pendingResponses](self, "pendingResponses");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "allValues");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = v3;
  obj = v7;
  v48 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
  if (v48)
  {
    v47 = *(_QWORD *)v50;
    *(_QWORD *)&v9 = 138543618;
    v43 = v9;
    v46 = v4;
    do
    {
      for (i = 0; i != v48; ++i)
      {
        if (*(_QWORD *)v50 != v47)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
        if (!objc_msgSend(v11, "pendingResponseCount", v43))
        {
          objc_msgSend(v11, "allResponses");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "count");

          if (!v13)
          {
            v21 = (void *)MEMORY[0x1D17BA0A0]();
            v22 = v4;
            HMFGetOSLogHandle();
            v23 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "originalRequestIdentifier");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v43;
              v54 = v24;
              v55 = 2112;
              v56 = v25;
              _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Removing pending response for identifier %@ - all responses received", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v21);
            -[HMDHome pendingResponses](v22, "pendingResponses");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "originalRequestIdentifier");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "removeObjectForKey:", v20);
            goto LABEL_15;
          }
        }
        objc_msgSend(v11, "requestMessage");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "BOOLForKey:", CFSTR("kMultiPartResponseKey"));

        if (v15)
        {
          objc_msgSend(v11, "retrieveAndClearLatestResponses");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "na_map:", &__block_literal_global_1298);
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v17, "count"))
          {
            objc_msgSend(v11, "requestMessage");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "originalRequestIdentifier");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome _handleSendingNotificationsForRequest:requestIdentifier:supportsMultiPartResponse:characteristicUpdates:completion:](v4, "_handleSendingNotificationsForRequest:requestIdentifier:supportsMultiPartResponse:characteristicUpdates:completion:", v18, v19, 1, v17, 0);

          }
          -[HMDHome pendingResponsesTimer](v4, "pendingResponsesTimer");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "resume");
LABEL_15:

        }
        if (!v8)
        {
          if (objc_msgSend(v11, "pendingResponseCount"))
          {
            Current = CFAbsoluteTimeGetCurrent();
            objc_msgSend(v11, "creationTime");
            if (Current - v27 <= *(double *)&pendingResponseMaxPeriod)
              continue;
          }
        }
        objc_msgSend(v11, "requestMessage");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v29 = v28;
        else
          v29 = 0;
        v30 = v29;

        objc_msgSend(v11, "retrieveAndClearAllResponses");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        if (v30)
        {
          objc_msgSend(v30, "identifier");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "responseHandler");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome _notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:](v4, "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v31, v32, 1, 0, v30, v33);

        }
        v34 = (void *)MEMORY[0x1D17BA0A0]();
        v35 = v4;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "identifier");
          v45 = v34;
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "originalRequestIdentifier");
          v39 = v8;
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v54 = v37;
          v55 = 2112;
          v56 = v38;
          v57 = 2112;
          v58 = v40;
          _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_DEBUG, "%{public}@Removing pending response and notifying changes for message identifier: %@(%@)", buf, 0x20u);

          v8 = v39;
          v34 = v45;

        }
        objc_autoreleasePoolPop(v34);
        -[HMDHome pendingResponses](v35, "pendingResponses");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "originalRequestIdentifier");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "removeObjectForKey:", v42);

        v4 = v46;
      }
      v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
    }
    while (v48);
  }

}

- (void)_handleCharacteristicEnableNotification:(id)a3
{
  id v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  __CFString *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  const __CFString *v21;
  uint64_t i;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  NSObject *v56;
  void (**v57)(_QWORD, _QWORD, _QWORD);
  void *v58;
  void (**v59)(_QWORD, _QWORD, _QWORD);
  void *v60;
  __int128 v61;
  void *v62;
  const __CFString *v63;
  void *v64;
  id v65;
  id obj;
  __CFString *v67;
  NSObject *group;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD block[4];
  id v78;
  _QWORD *v79;
  _QWORD v80[4];
  NSObject *v81;
  _QWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[5];
  id v92;
  uint8_t v93[128];
  uint8_t buf[4];
  id v95;
  __int16 v96;
  void *v97;
  __int16 v98;
  id v99;
  __int16 v100;
  const __CFString *v101;
  __int16 v102;
  void *v103;
  __int16 v104;
  void *v105;
  _BYTE v106[128];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v71 = v3;
  if (objc_msgSend(v3, "isRemote") && (objc_msgSend(v3, "isSecureRemote") & 1) == 0)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v95 = v13;
      v96 = 2112;
      v97 = v71;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v71, "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v15, 0);

    }
  }
  else
  {
    objc_msgSend(v3, "messagePayload");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", CFSTR("kNotificationEnablePayloadKey"));
    v69 = (void *)objc_claimAutoreleasedReturnValue();

    if (v69)
    {
      v5 = CFSTR("kNotificationEnablePayloadKey");
    }
    else
    {
      objc_msgSend(v71, "messagePayload");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKey:", CFSTR("kNotificationDisablePayloadKey"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
        objc_msgSend(v71, "responseHandler");
        v59 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v59)[2](v59, v60, 0);

        goto LABEL_49;
      }
      v5 = CFSTR("kNotificationDisablePayloadKey");
    }
    objc_msgSend(v71, "dictionaryForKey:", v5);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "applicationBundleIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v71, "applicationBundleIdentifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(CFSTR("com.apple.HomeKit.client."), "stringByAppendingString:", v9);
      v67 = (__CFString *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v67 = CFSTR("com.apple.HomeKitDaemon");
      v17 = CFSTR("com.apple.HomeKitDaemon");
    }
    group = dispatch_group_create();
    v91[0] = 0;
    v91[1] = v91;
    v91[2] = 0x3032000000;
    v91[3] = __Block_byref_object_copy__10535;
    v91[4] = __Block_byref_object_dispose__10536;
    v92 = 0;
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    objc_msgSend(v70, "allKeys");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v87, v106, 16);
    if (v19)
    {
      v72 = *(_QWORD *)v88;
      v21 = CFSTR("disable");
      if (v69)
        v21 = CFSTR("enable");
      v63 = v21;
      *(_QWORD *)&v20 = 138544642;
      v61 = v20;
      obj = v18;
      do
      {
        v74 = v19;
        for (i = 0; i != v74; ++i)
        {
          if (*(_QWORD *)v88 != v72)
            objc_enumerationMutation(obj);
          v23 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * i);
          v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v23);
          -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = v26;

          if (v27)
          {
            objc_msgSend(v70, "hmf_arrayForKey:", v23);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v28, "count"))
            {
              objc_msgSend(v64, "setObject:forKey:", v28, v27);
            }
            else
            {
              v36 = (void *)MEMORY[0x1D17BA0A0]();
              v37 = self;
              HMFGetOSLogHandle();
              v38 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                v62 = v36;
                HMFGetLogIdentifier();
                v65 = (id)objc_claimAutoreleasedReturnValue();
                -[HMDHome name](v37, "name");
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                -[HMDHome uuid](v37, "uuid");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v40, "UUIDString");
                v41 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v27, "name");
                v42 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v61;
                v95 = v65;
                v96 = 2112;
                v97 = v39;
                v98 = 2112;
                v99 = v41;
                v100 = 2112;
                v101 = v63;
                v102 = 2112;
                v103 = v42;
                v104 = 2112;
                v105 = v23;
                _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_INFO, "%{public}@%@/%@: Received notification %@ for zero characteristics on accessory %@/%@", buf, 0x3Eu);

                v36 = v62;
              }

              objc_autoreleasePoolPop(v36);
            }

          }
          else
          {
            v29 = (void *)MEMORY[0x1D17BA0A0]();
            v30 = self;
            HMFGetOSLogHandle();
            v31 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v32 = (id)objc_claimAutoreleasedReturnValue();
              -[HMDHome name](v30, "name");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome uuid](v30, "uuid");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "UUIDString");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544386;
              v95 = v32;
              v96 = 2112;
              v97 = v33;
              v98 = 2112;
              v99 = v35;
              v100 = 2112;
              v101 = v63;
              v102 = 2112;
              v103 = v23;
              _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@%@/%@: Received notification %@ for different accessory: %@", buf, 0x34u);

            }
            objc_autoreleasePoolPop(v29);
          }

        }
        v18 = obj;
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v87, v106, 16);
      }
      while (v19);
    }

    v43 = objc_msgSend(v64, "count");
    if (v43)
    {
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v44 = v64;
      v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v83, v93, 16);
      if (v45)
      {
        v46 = 0;
        v47 = *(_QWORD *)v84;
        v73 = v43 - 1;
        do
        {
          v48 = 0;
          v49 = v73 - v46;
          v75 = v46 + v45;
          do
          {
            if (*(_QWORD *)v84 != v47)
              objc_enumerationMutation(v44);
            v50 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * v48);
            dispatch_group_enter(group);
            v51 = (void *)MEMORY[0x1E0D285D0];
            v80[0] = MEMORY[0x1E0C809B0];
            v80[1] = 3221225472;
            v80[2] = __51__HMDHome__handleCharacteristicEnableNotification___block_invoke;
            v80[3] = &unk_1E89BCE20;
            v82 = v91;
            v81 = group;
            objc_msgSend(v51, "messageWithMessage:messagePayload:responseHandler:", v71, 0, v80);
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            v53 = (void *)objc_msgSend(v52, "mutableCopy");

            if (v49 != v48)
            {
              objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "setIdentifier:", v54);

            }
            objc_msgSend(v44, "objectForKey:", v50, v61);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v50, "enableNotification:forCharacteristicIDs:message:clientIdentifier:", v69 != 0, v55, v53, v67);

            ++v48;
          }
          while (v45 != v48);
          v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v83, v93, 16);
          v46 = v75;
        }
        while (v45);
      }

      -[HMDHome workQueue](self, "workQueue");
      v56 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __51__HMDHome__handleCharacteristicEnableNotification___block_invoke_2;
      block[3] = &unk_1E89C0800;
      v78 = v71;
      v79 = v91;
      dispatch_group_notify(group, v56, block);

      v57 = (void (**)(_QWORD, _QWORD, _QWORD))v78;
    }
    else
    {
      objc_msgSend(v71, "responseHandler");
      v57 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v57)[2](v57, v58, 0);

    }
    _Block_object_dispose(v91, 8);

  }
LABEL_49:

}

- (BOOL)hasResidentDevicesForPrimaryResidentChangeMonitor:(id)a3
{
  void *v3;
  void *v4;
  BOOL v5;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "residentDevices");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count") != 0;

  return v5;
}

- (id)_hasConfirmedPrimaryResidentDevice
{
  void *v2;
  void *v3;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "confirmedPrimaryResidentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (NSNumber)matterFabricID
{
  void *v3;
  void *v4;

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    -[HMDHome fabric](self, "fabric");
  else
    -[HMDHome chipStorage](self, "chipStorage");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fabricID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSNumber *)v4;
}

- (BOOL)doesHomeContainResident
{
  void *v2;
  void *v3;
  BOOL v4;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "residentDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count") != 0;

  return v4;
}

- (void)_updateResidentFirstAccessoryCommunicationEnabled
{
  _BOOL8 v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = -[HMDHome shouldEnableResidentFirstAccessoryCommunication](self, "shouldEnableResidentFirstAccessoryCommunication");
  if (v3 != -[HMDHome isResidentFirstAccessoryCommunicationEnabled](self, "isResidentFirstAccessoryCommunicationEnabled"))
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome isResidentFirstAccessoryCommunicationEnabled](v5, "isResidentFirstAccessoryCommunicationEnabled");
      HMFBooleanToString();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543874;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Updating isResidentFirstAccessoryCommunicationEnabled from %@ to %@", (uint8_t *)&v10, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHome setResidentFirstAccessoryCommunicationEnabled:](v5, "setResidentFirstAccessoryCommunicationEnabled:", v3);
    logAndPostNotification(CFSTR("HMDHomeIsResidentFirstAccessoryCommunicationEnabledDidChangeNotification"), v5, 0);
  }
}

- (BOOL)shouldEnableResidentFirstAccessoryCommunication
{
  void *v2;
  char v3;

  -[HMDHome residentEnabledDevices](self, "residentEnabledDevices");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_1308);

  return v3;
}

- (id)preferredDevice
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentCommunicationHandlerForHome:", self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "preferredDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (NSArray)residentCapableDevices
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentDevices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v9), "device");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v10);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (NSArray)residentEnabledDevices
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentDevices");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v10, "isEnabled"))
        {
          objc_msgSend(v10, "device");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v11);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

  return (NSArray *)v3;
}

- (void)addResidentCapableDevice:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  HMDResidentDeviceModel *v18;
  void *v19;
  HMDResidentDeviceModel *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    objc_msgSend(v4, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isResidentCapable");

    if (v6)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "residentDevices");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v31;
        while (2)
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v31 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
            objc_msgSend(v13, "device");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v14, "isEqual:", v4);

            if (v15)
            {
              v26 = (void *)MEMORY[0x1D17BA0A0]();
              v27 = self;
              HMFGetOSLogHandle();
              v28 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v35 = v29;
                v36 = 2112;
                v37 = v13;
                _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_DEBUG, "%{public}@Resident device already exists, refraining from creating a new transaction: %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v26);
              goto LABEL_17;
            }
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
          if (v10)
            continue;
          break;
        }
      }

      -[HMDHome uuid](self, "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "identifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDResidentDevice deriveUUIDFromHomeUUID:deviceUUID:](HMDResidentDevice, "deriveUUIDFromHomeUUID:deviceUUID:", v16, v17);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = [HMDResidentDeviceModel alloc];
      -[HMDHome uuid](self, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 1, v8, v19);

      -[HMDResidentDeviceModel setEnabled:](v20, "setEnabled:", MEMORY[0x1E0C9AAB0]);
      objc_msgSend(v4, "identifier");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "UUIDString");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDResidentDeviceModel setDeviceUUID:](v20, "setDeviceUUID:", v22);

      if (objc_msgSend(v4, "isCurrentDevice"))
        -[HMDResidentDeviceModel setDevice:](v20, "setDevice:", v4);
      -[HMDHome backingStore](self, "backingStore");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "transaction:options:", CFSTR("addResidentCapableDevice"), v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v25, "add:withMessage:", v20, 0);
      objc_msgSend(v25, "run");

LABEL_17:
    }
  }

}

- (void)removeResidentCapableDevice:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[128];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "residentDevices");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v21;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v21 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
          objc_msgSend(v11, "device");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqual:", v4);

          if (v13)
          {
            -[HMDHome residentDeviceManager](self, "residentDeviceManager");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "removeResidentDevice:", v11);

            goto LABEL_16;
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v8)
          continue;
        break;
      }
    }

    if (objc_msgSend(v4, "isCurrentDevice"))
    {
      -[HMDHome notificationRegistry](self, "notificationRegistry");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "clearAllRegistrations");

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v18;
      v27 = 2112;
      v28 = v4;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Attempting to remove resident on non-owner home -- device: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }
LABEL_16:

}

- (void)migrateAfterResidentChange
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@migrateAfterResidentChange", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  if (-[HMDHome isMigratingAfterResidentChange](v4, "isMigratingAfterResidentChange"))
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = v4;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v15 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Migration after resident change is already running", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    -[HMDHome setMigratingAfterResidentChange:](v4, "setMigratingAfterResidentChange:", 1);
    objc_initWeak((id *)buf, v4);
    -[HMDHome backingStore](v4, "backingStore");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __37__HMDHome_migrateAfterResidentChange__block_invoke;
    v12[3] = &unk_1E89C0678;
    objc_copyWeak(&v13, (id *)buf);
    objc_msgSend(v11, "submitBlock:", v12);

    objc_destroyWeak(&v13);
    objc_destroyWeak((id *)buf);
  }
}

- (void)_handleResidentChange
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[4];
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id location[2];
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  -[HMDHome setMigratingAfterResidentChange:](self, "setMigratingAfterResidentChange:", 0);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  -[HMDHome triggers](self, "triggers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v28;
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_initWeak(location, v8);
        v25[0] = v6;
        v25[1] = 3221225472;
        v25[2] = __32__HMDHome__handleResidentChange__block_invoke;
        v25[3] = &unk_1E89C0678;
        objc_copyWeak(&v26, location);
        objc_msgSend(v8, "activateAfterResidentChangeWithCompletion:", v25);
        objc_destroyWeak(&v26);
        objc_destroyWeak(location);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    }
    while (v4);
  }

  if (-[HMDHome isOwnerUser](self, "isOwnerUser")
    && !-[HMDHome isResidentSupported](self, "isResidentSupported")
    && !isWatch())
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    -[HMDHome users](self, "users", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v32, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v22;
      do
      {
        for (j = 0; j != v10; ++j)
        {
          if (*(_QWORD *)v22 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * j);
          if (objc_msgSend(v13, "isAdministrator")
            && objc_msgSend(v13, "updateAdministrator:", 0))
          {
            -[HMDHome saveWithReason:postSyncNotification:](self, "saveWithReason:postSyncNotification:", CFSTR("migration"), 0);
          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v32, 16);
      }
      while (v10);
    }

  }
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v17;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Calling presence feeder to notify the presence status to the new resident", (uint8_t *)location, 0xCu);

  }
  objc_autoreleasePoolPop(v14);
  -[HMDHome presenceMonitor](v15, "presenceMonitor");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "residentChanged");

  -[HMDHome presenceFeeder](v15, "presenceFeeder");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "residentChanged");

  -[HMDHome periodicReader](v15, "periodicReader");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "residentUpdated");

  -[HMDHome _evaluateNetworkProtectionAndRouterManagement](v15, "_evaluateNetworkProtectionAndRouterManagement");
}

- (void)handleDeviceCapabilitiesUpdated:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  HMDHome *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received notification to handle device capabilities update", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "object");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  -[HMDHome workQueue](v6, "workQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __43__HMDHome_handleDeviceCapabilitiesUpdated___block_invoke;
  block[3] = &unk_1E89C20C8;
  v16 = v4;
  v17 = v6;
  v18 = v11;
  v13 = v11;
  v14 = v4;
  dispatch_async(v12, block);

}

- (void)handleRemoteDeviceBecameReachableNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  _QWORD block[5];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    -[HMDHome primaryResident](self, "primaryResident");
    v8 = objc_claimAutoreleasedReturnValue();
    -[NSObject device](v8, "device");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (v9 != v7)
    {

LABEL_14:
      goto LABEL_15;
    }
    v14 = -[HMDHome supportsUnifiedMediaNotificationsOnResidents](self);

    if (v14)
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v21 = v18;
        v22 = 2112;
        v23 = v4;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Resubscribing for apple media accessory state on primary resident did become reachable notification %@ ", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      -[HMDHome workQueue](v16, "workQueue");
      v8 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __57__HMDHome_handleRemoteDeviceBecameReachableNotification___block_invoke;
      block[3] = &unk_1E89C2730;
      block[4] = v16;
      dispatch_async(v8, block);
      goto LABEL_14;
    }
  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v13;
      v22 = 2112;
      v23 = v4;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Expected notification (%@) to contain device for reachability ", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }
LABEL_15:

}

- (void)handlePrimaryResidentChangeNotification:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  HMDHome *v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received resident update notification: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome workQueue](v6, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __51__HMDHome_handlePrimaryResidentChangeNotification___block_invoke;
  v12[3] = &unk_1E89C2328;
  v13 = v4;
  v14 = v6;
  v11 = v4;
  dispatch_async(v10, v12);

}

- (BOOL)isRemoteAccessDeviceReachable
{
  void *v3;
  BOOL v4;

  if (!-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
    return 0;
  -[HMDHome primaryResident](self, "primaryResident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (objc_msgSend(v3, "isReachable") & 1) != 0 || -[HMDHome isCompanionReachable](self, "isCompanionReachable");

  return v4;
}

- (BOOL)_residentDeviceAvailable
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (-[HMDHome isResidentSupported](self, "isResidentSupported"))
  {
    LOBYTE(v3) = 1;
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    -[HMDHome _residentUsers](self, "_residentUsers", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v3)
    {
      v5 = *(_QWORD *)v9;
      while (2)
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v4);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "configurationState") == 2)
          {
            LOBYTE(v3) = 1;
            goto LABEL_13;
          }
        }
        v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        if (v3)
          continue;
        break;
      }
    }
LABEL_13:

  }
  return v3;
}

- (void)updateNetworkConnectivity:(BOOL)a3 companionReachable:(BOOL)a4
{
  NSObject *v7;
  _QWORD v8[5];
  BOOL v9;
  BOOL v10;

  -[HMDHome workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __56__HMDHome_updateNetworkConnectivity_companionReachable___block_invoke;
  v8[3] = &unk_1E89B36F0;
  v8[4] = self;
  v9 = a3;
  v10 = a4;
  dispatch_async(v7, v8);

}

- (void)setRemoteAccessEnabled:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_remoteAccessIsEnabled = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)remoteAccessIsEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_remoteAccessIsEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)remoteAccessEnabled:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __31__HMDHome_remoteAccessEnabled___block_invoke;
  v6[3] = &unk_1E89C2758;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (void)_remoteAccessEnabled:(BOOL)a3
{
  _BOOL8 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v3 = a3;
  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        objc_msgSend(v11, "remoteAccessEnabled:", v3);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

- (void)notifyNewRemotePeersFound:(BOOL)a3 remoteUsersRemoved:(id)a4 forceRemoteNotificationRegistration:(BOOL)a5
{
  id v8;
  NSObject *v9;
  id v10;
  _QWORD block[5];
  id v12;
  BOOL v13;
  BOOL v14;

  v8 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __92__HMDHome_notifyNewRemotePeersFound_remoteUsersRemoved_forceRemoteNotificationRegistration___block_invoke;
  block[3] = &unk_1E89B8408;
  block[4] = self;
  v12 = v8;
  v13 = a3;
  v14 = a5;
  v10 = v8;
  dispatch_async(v9, block);

}

- (void)_updateConfigurationStateForResidentDevice:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "displayName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    v19 = 2048;
    v20 = a4;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Updated configuration state of resident %@ to %ld", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v10);
  if (objc_msgSend(v8, "configurationState") != a4)
  {
    objc_msgSend(v8, "setConfigurationState:", a4);
    -[HMDHome _notifyClientsOfUpdatedResidentUser:](v11, "_notifyClientsOfUpdatedResidentUser:", v8);
  }

}

- (void)_configureUnconfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  _BOOL4 v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  HMDHome *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDHome *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  HMDHome *v60;
  void *v61;
  _QWORD v62[4];
  id v63;
  id v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  void *v75;
  _QWORD v76[2];
  _QWORD v77[2];
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = objc_msgSend(v6, "configurationState");
  if (v7 == a4)
  {
    -[HMDHome _updateConfigurationStateForResidentDevice:desiredConfigState:message:](self, "_updateConfigurationStateForResidentDevice:desiredConfigState:message:", v6, a4, 0);
  }
  else
  {
    v8 = v7;
    v60 = self;
    v61 = v6;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    -[HMDHome outgoingInvitations](self, "outgoingInvitations");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v66, v78, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v67;
      while (2)
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v67 != v11)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * v12), "user");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "userID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v61, "userID");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v14, "isEqualToString:", v15);

          if (v16)
          {
            v34 = (void *)MEMORY[0x1D17BA0A0]();
            v35 = v60;
            HMFGetOSLogHandle();
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v61, "userID");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v71 = v37;
              v72 = 2112;
              v73 = v38;
              _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@Already have a pending invitation for the resident user '%@', not setting up remote access", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v34);

            goto LABEL_39;
          }
          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v66, v78, 16);
        if (v10)
          continue;
        break;
      }
    }

    v18 = a4 == 2 && v8 == 1;
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = v60;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    if (v18)
    {
      if (v22)
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "displayName");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v71 = v23;
        v72 = 2112;
        v73 = v24;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Configuring unconfigured resident %@ for remote access", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      -[HMDHome hapAccessoryUniqueIdentifiers](v20, "hapAccessoryUniqueIdentifiers");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "allObjects");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v26, "count"))
      {
        objc_msgSend(v61, "userID");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome pendingResponsesForRemoteAccessSetup](v20, "pendingResponsesForRemoteAccessSetup");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "containsObject:", v27);

        if (v29)
        {
          v30 = (void *)MEMORY[0x1D17BA0A0]();
          v31 = v20;
          HMFGetOSLogHandle();
          v32 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v71 = v33;
            v72 = 2112;
            v73 = v27;
            _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@There is already a pending request to detect if %@ is at home, dropping multiple requests", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v30);
        }
        else
        {
          -[HMDHome pendingResponsesForRemoteAccessSetup](v20, "pendingResponsesForRemoteAccessSetup");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "addObject:", v27);

          v76[0] = CFSTR("kAccessoryIdentitiesKey");
          v76[1] = CFSTR("kHomeUUID");
          v77[0] = v26;
          -[HMDHome uuid](v20, "uuid");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "UUIDString");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v77[1] = v47;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v77, v76, 2);
          v48 = (void *)objc_claimAutoreleasedReturnValue();

          v49 = (void *)MEMORY[0x1D17BA0A0]();
          v50 = v20;
          HMFGetOSLogHandle();
          v51 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v61, "displayName");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v71 = v52;
            v72 = 2112;
            v73 = v27;
            v74 = 2112;
            v75 = v53;
            _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Requesting remote gateway %@/%@ to look for accessories", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v49);
          -[HMDHome homeManager](v50, "homeManager");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "uuid");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v55, 0, v27, 0);
          v56 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:destination:messagePayload:", CFSTR("kDoYouSeeUnpairedAccessoriesKey"), v56, v48);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_initWeak((id *)buf, v50);
          v62[0] = MEMORY[0x1E0C809B0];
          v62[1] = 3221225472;
          v62[2] = __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke;
          v62[3] = &unk_1E89C1698;
          objc_copyWeak(&v65, (id *)buf);
          v63 = v27;
          v58 = v56;
          v64 = v58;
          objc_msgSend(v57, "setResponseHandler:", v62);
          objc_msgSend(v54, "messageDispatcher");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "sendMessage:completionHandler:", v57, 0);

          objc_destroyWeak(&v65);
          objc_destroyWeak((id *)buf);

        }
      }
      else
      {
        v41 = (void *)MEMORY[0x1D17BA0A0]();
        v42 = v20;
        HMFGetOSLogHandle();
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v71 = v44;
          _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_ERROR, "%{public}@No accessory identifiers found, not setting up remote access", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v41);
      }

    }
    else
    {
      if (v22)
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "displayName");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v71 = v39;
        v72 = 2112;
        v73 = v40;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Cannot configure unconfigured resident %@ to desired state", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
    }
LABEL_39:
    v6 = v61;
  }

}

- (void)_sendResidentInviteWithDestination:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  _QWORD v38[4];
  _QWORD v39[4];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "device");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "remoteDestinationString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v11;
      v42 = 2112;
      v43 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Adding user %@ as remote access point", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHome homeManager](v8, "homeManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 0;
    v37 = 0;
    v35 = 0;
    v15 = objc_msgSend(v14, "getOrCreateControllerPublicKey:controllerUsername:error:", &v37, &v36, &v35);
    v16 = v37;
    v31 = v36;
    v30 = v35;
    if ((v15 & 1) != 0)
    {
      v38[0] = CFSTR("kHomeName");
      -[HMDHome name](v8, "name");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v39[0] = v17;
      v38[1] = CFSTR("kHomeUUID");
      -[HMDHome uuid](v8, "uuid");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v39[1] = v19;
      v38[2] = CFSTR("kControllerPublicKey");
      v20 = v16;
      if (!v16)
      {
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v38[3] = CFSTR("kControllerPairingNameKey");
      v39[2] = v20;
      v39[3] = v31;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 4);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v16)

      objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:destination:messagePayload:", CFSTR("kAddRemoteAccessRequestKey"), v4, v29);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_initWeak((id *)buf, v8);
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = __46__HMDHome__sendResidentInviteWithDestination___block_invoke;
      v32[3] = &unk_1E89BF4F0;
      objc_copyWeak(&v34, (id *)buf);
      v33 = v6;
      objc_msgSend(v21, "setResponseHandler:", v32);
      objc_msgSend(v14, "messageDispatcher");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "sendMessage:completionHandler:", v21, 0);

      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);

    }
    else
    {
      v25 = (void *)MEMORY[0x1D17BA0A0]();
      v26 = v8;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v28;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed getting controller public key to add remote gateway", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v25);
    }

  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome shortDescription](v8, "shortDescription");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v41 = v23;
      v42 = 2112;
      v43 = v24;
      v44 = 2112;
      v45 = v4;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@[%@] Invalid resident invite destination: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (void)_addResidentWithUsername:(id)a3 publicKey:(id)a4 destination:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  char isKindOfClass;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  HMDOutgoingHomeInvitation *v19;
  void *v20;
  HMDOutgoingHomeInvitation *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  HMDOutgoingHomeInvitation *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (v8 && v9)
  {
    -[HMDHome unconfiguredResidentDevices](self, "unconfiguredResidentDevices");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "hmf_firstObjectWithValue:forKeyPath:", v10, CFSTR("userID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if ((isKindOfClass & 1) != 0)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v32 = v18;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Found user as unconfigured resident, creating an accepted invitation to track adding the resident", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v14);
      v19 = -[HMDOutgoingHomeInvitation initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:]([HMDOutgoingHomeInvitation alloc], "initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:", v12, 5, v15, 0, 0);
      -[HMDHome outgoingInvitations](v15, "outgoingInvitations");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "addObject:", v19);

      objc_initWeak((id *)buf, v15);
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = __58__HMDHome__addResidentWithUsername_publicKey_destination___block_invoke;
      v27[3] = &unk_1E89BCB20;
      objc_copyWeak(&v30, (id *)buf);
      v28 = v12;
      v21 = v19;
      v29 = v21;
      -[HMDHome __handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:issuerPublicKeyER:presenceAuthStatus:completionHandler:](v15, "__handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:issuerPublicKeyER:presenceAuthStatus:completionHandler:", v21, v10, v9, v8, 0, 0, v27);

      objc_destroyWeak(&v30);
      objc_destroyWeak((id *)buf);

    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v32 = v26;
        v33 = 2112;
        v34 = v10;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Attempt to pair an unknown resident user '%@', aborting", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
    }

  }
  else
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v32 = v25;
      v33 = 2112;
      v34 = v8;
      v35 = 2112;
      v36 = v9;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Aborting adding resident due to missing userName '%@' and publicKey '%@'", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v22);
  }

}

- (void)_configureConfiguredResident:(id)a3 desiredConfigState:(unint64_t)a4 message:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  uint64_t v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  if (a4 == 1)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543362;
      v28 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Unconfiguring residents is not supported", (uint8_t *)&v27, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v9, "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 48, 0, 0, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v15, 0);
LABEL_17:

    }
  }
  else
  {
    v17 = objc_msgSend(v8, "configurationState");
    -[HMDHome _updateConfigurationStateForResidentDevice:desiredConfigState:message:](self, "_updateConfigurationStateForResidentDevice:desiredConfigState:message:", v8, a4, v9);
    if (v17 != a4)
    {
      -[HMDHome homeManager](self, "homeManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
      if (a4 == 2)
      {
        if (v21)
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "displayName");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 138543618;
          v28 = v22;
          v29 = 2112;
          v30 = v23;
          _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Enabling resident device %@, checking if we need to go remote", (uint8_t *)&v27, 0x16u);

        }
        objc_autoreleasePoolPop(v18);
      }
      else
      {
        if (v21)
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "displayName");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 138543618;
          v28 = v24;
          v29 = 2112;
          v30 = v25;
          _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Disabling resident device %@, checking if we need to go remote", (uint8_t *)&v27, 0x16u);

        }
        objc_autoreleasePoolPop(v18);
        -[HMDHome uuid](v19, "uuid");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "teardownRemoteAccessForHome:", v26);

      }
      if (!-[HMDHome isResidentSupported](v19, "isResidentSupported"))
        objc_msgSend(v15, "checkForRemotePeers");
      objc_msgSend(v9, "name");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      -[HMDHome saveWithReason:postSyncNotification:](v19, "saveWithReason:postSyncNotification:", v16, 0);
      goto LABEL_17;
    }
  }

}

- (void)_handleEnableMultiUserRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDRemoteDeviceMessageDestination *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDRemoteDeviceMessageDestination *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id location;
  const __CFString *v34;
  uint64_t v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "isRemote") && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v13;
      v38 = 2112;
      v39 = v4;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);

  }
  else
  {
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      -[HMDHome _enableMultiUserWithMessage:](self, v4);
      goto LABEL_16;
    }
    -[HMDHome primaryResident](self, "primaryResident");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v37 = v16;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to forward message to home owner no resident found", buf, 0xCu);

      }
      goto LABEL_15;
    }
    if ((objc_msgSend(v4, "isRemote") & 1) != 0
      || objc_msgSend(v4, "BOOLForKey:", CFSTR("kDoNotForwardMessageKey")))
    {
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v37 = v9;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Did not expect remote message.", buf, 0xCu);

      }
LABEL_15:

      objc_autoreleasePoolPop(v6);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v17);

      goto LABEL_16;
    }
    v18 = (void *)objc_msgSend(v4, "mutableCopy");
    objc_msgSend(v18, "setRemote:", 1);
    objc_msgSend(v18, "setSecureRemote:", 1);
    v34 = CFSTR("kDoNotForwardMessageKey");
    v35 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setMessagePayload:", v19);

    v20 = [HMDRemoteDeviceMessageDestination alloc];
    objc_msgSend(v4, "destination");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "target");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "device");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v20, "initWithTarget:device:", v22, v23);
    objc_msgSend(v18, "setDestination:", v24);

    objc_initWeak(&location, self);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = __41__HMDHome__handleEnableMultiUserRequest___block_invoke;
    v30[3] = &unk_1E89BF4F0;
    objc_copyWeak(&v32, &location);
    v31 = v4;
    v25 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v18, "setResponseHandler:", v30));
    v26 = self;
    HMFGetOSLogHandle();
    v27 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v37 = v28;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Forwarding enable multi-user request to owner.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v25);
    -[HMDHome msgDispatcher](v26, "msgDispatcher");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "sendMessage:", v18);

    objc_destroyWeak(&v32);
    objc_destroyWeak(&location);

  }
LABEL_16:

}

- (void)enableMultiUser
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543362;
    v12 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Received local request to enable Multi-User", (uint8_t *)&v11, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v7 = (void *)MEMORY[0x1E0D285D0];
  v8 = *MEMORY[0x1E0CB8D58];
  -[HMDHome messageDestination](v4, "messageDestination");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "messageWithName:destination:payload:", v8, v9, MEMORY[0x1E0C9AA70]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome _enableMultiUserWithMessage:](v4, v10);
}

- (void)_handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  HMDHomeModel *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeModel *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v22 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received set has any user acknowledged camera recording onboarding request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = [HMDHomeModel alloc];
  -[HMDHome uuid](v6, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v6, "homeManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 2, v10, v12);

  -[HMDHomeModel setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v13, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", MEMORY[0x1E0C9AAB0]);
  -[HMDHome backingStore](v6, "backingStore");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "transaction:options:", v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "add:withMessage:", v13, v4);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __76__HMDHome__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest___block_invoke;
  v19[3] = &unk_1E89C2350;
  v20 = v4;
  v18 = v4;
  objc_msgSend(v17, "run:", v19);

}

- (void)_handleSetHasOnboardedForAccessCodeMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  HMDHomeModel *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeModel *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v8;
    v20 = 2112;
    v21 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling message to set has onboarded for access code: %@", (uint8_t *)&v18, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v9 = [HMDHomeModel alloc];
  -[HMDHome uuid](v6, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v6, "homeManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 2, v10, v12);

  -[HMDHomeModel setHasOnboardedForAccessCode:](v13, "setHasOnboardedForAccessCode:", MEMORY[0x1E0C9AAB0]);
  -[HMDHome backingStore](v6, "backingStore");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "transaction:options:", v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "add:withMessage:", v13, v4);
  objc_msgSend(v17, "run");

}

- (void)_handleSetHasOnboardedForWalletKeyMessage:(id)a3
{
  -[HMDHome updateHasOnboardedForWalletKey:message:](self, "updateHasOnboardedForWalletKey:message:", 1, a3);
}

- (void)_handleMultiUserEnabledChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543362;
    v21 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Multi-user enabled changed, sending notification", (uint8_t *)&v20, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "multiUserEnabled");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setMultiUserEnabled:](v9, "setMultiUserEnabled:", objc_msgSend(v12, "BOOLValue"));

  -[HMDHome notificationCenter](v9, "notificationCenter");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = *MEMORY[0x1E0CB9170];
  objc_msgSend(v13, "postNotificationName:object:", *MEMORY[0x1E0CB9170], 0);

  v15 = (void *)MEMORY[0x1E0D285F8];
  -[HMDHome messageDestination](v9, "messageDestination");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "messageWithName:destination:payload:", v14, v16, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "identifier");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setIdentifier:", v18);

  objc_msgSend(v17, "setRemote:", objc_msgSend(v7, "isRemote"));
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "sendMessage:completionHandler:", v17, 0);

}

- (void)_handleSiriPhraseOptionsStatusChange:(id)a3 message:(id)a4
{
  id v5;

  objc_msgSend(a3, "siriPhraseOptions");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome setSiriPhraseOptions:](self, "setSiriPhraseOptions:", objc_msgSend(v5, "unsignedIntegerValue"));

}

- (void)_handleSiriPhraseOptionsUpdateRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  HMDHomeModel *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeModel *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543362;
    v24 = v9;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update Siri phrase options request", (uint8_t *)&v23, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v10 = [HMDHomeModel alloc];
  -[HMDHome uuid](v7, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v7, "homeManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v10, "initWithObjectChangeType:uuid:parentUUID:", 2, v11, v13);

  objc_msgSend(v4, "messagePayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "hmf_numberForKey:", *MEMORY[0x1E0CB9248]);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "unsignedIntegerValue");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeModel setSiriPhraseOptions:](v14, "setSiriPhraseOptions:", v18);

  -[HMDHome backingStore](v7, "backingStore");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "name");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "transaction:options:", v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v22, "add:withMessage:", v14, v4);
  objc_msgSend(v22, "run");

}

- (void)_handleAssistantAccessControlUpdate:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleAssistantAccessControlUpdate:", v4);

}

- (void)_handleMediaContentProfileAccessControlUpdate:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleMediaContentProfileAccessControlUpdate:", v4);

}

- (void)_handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  __decodeAndVerifyCurrentUser(self, v4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:", v4);

}

- (void)enableUserListeningHistoryForAccessoryUUID:(id)a3 userUUID:(id)a4
{
  id v6;
  id v7;
  HMDHome *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  HMDHome *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome userWithUUID:](self, "userWithUUID:", v7);
  v8 = (HMDHome *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v13;
      v17 = 2112;
      v18 = v6;
      v19 = 2112;
      v20 = v8;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Enable ULH: accessoryUUID %@ user %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHome enableUserListeningHistoryForAccessory:](v8, "enableUserListeningHistoryForAccessory:", v6);
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v14;
      v17 = 2112;
      v18 = v7;
      v19 = 2112;
      v20 = v10;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@No user exist for userUUID %@ in home %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (void)_handleSoundCheckChange:(id)a3 message:(id)a4
{
  id v5;

  objc_msgSend(a3, "soundCheckEnabled");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome setSoundCheckEnabled:](self, "setSoundCheckEnabled:", objc_msgSend(v5, "BOOLValue"));

}

- (void)_handleSoundCheckUpdateRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  HMDHomeModel *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeModel *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v26 = v9;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update soundCheck request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v10 = [HMDHomeModel alloc];
  -[HMDHome uuid](v7, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](v7, "homeManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v10, "initWithObjectChangeType:uuid:parentUUID:", 2, v11, v13);

  objc_msgSend(v4, "messagePayload");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = *MEMORY[0x1E0CB9258];
  v24 = 0;
  v17 = objc_msgSend(v15, "hmf_BOOLForKey:error:", v16, &v24);
  v18 = v24;

  if (v18)
  {
    objc_msgSend(v4, "respondWithError:", v18);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setSoundCheckEnabled:](v14, "setSoundCheckEnabled:", v19);

    -[HMDHome backingStore](v7, "backingStore");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "transaction:options:", v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v23, "add:withMessage:", v14, v4);
    objc_msgSend(v23, "run");

  }
}

- (void)_handleLocationServicesEnabledChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "locationServicesEnabled");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating location services enabled: %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHome setLocationServicesEnabled:](v11, "setLocationServicesEnabled:", v9);

}

- (void)_handleHomeUpdateLocationServicesEnabledRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v21 = v9;
    v22 = 2112;
    v23 = v4;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update location services enabled request message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *MEMORY[0x1E0CB8E18];
  v19 = 0;
  v12 = objc_msgSend(v10, "hmf_BOOLForKey:error:", v11, &v19);
  v13 = v19;

  if (v13)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = v7;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v17;
      v22 = 2112;
      v23 = v18;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode location services enabled from update request payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(v4, "respondWithError:", v13);
  }
  else
  {
    -[HMDHome runLocationServicesEnabledUpdateWithValue:message:](v7, "runLocationServicesEnabledUpdateWithValue:message:", v12, v4);
  }

}

- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3
{
  -[HMDHome runLocationServicesEnabledUpdateWithValue:message:](self, "runLocationServicesEnabledUpdateWithValue:message:", a3, 0);
}

- (void)runLocationServicesEnabledUpdateWithValue:(BOOL)a3 message:(id)a4
{
  _BOOL8 v4;
  id v6;
  HMDHomeModel *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeModel *v15;

  v4 = a3;
  v6 = a4;
  v7 = [HMDHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 2, v8, v10);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeModel setLocationServicesEnabled:](v15, "setLocationServicesEnabled:", v11);

  -[HMDHomeModel setDidOnboardLocationServices:](v15, "setDidOnboardLocationServices:", MEMORY[0x1E0C9AAB0]);
  -[HMDHome backingStore](self, "backingStore");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "transaction:options:", CFSTR("LocationServicesEnabledUpdate"), v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "add:withMessage:", v15, v6);
  objc_msgSend(v14, "run");

}

- (void)_handleDidOnboardLocationServicesChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "didOnboardLocationServices");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating did onboard location services: %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHome setDidOnboardLocationServices:](v11, "setDidOnboardLocationServices:", v9);

}

- (void)_handleHomeUpdateDidOnboardLocationServicesRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHomeModel *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHomeModel *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v31 = v9;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received update did onboard locations services request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *MEMORY[0x1E0CB8D38];
  v29 = 0;
  v12 = objc_msgSend(v10, "hmf_BOOLForKey:error:", v11, &v29);
  v13 = v29;

  if (v13)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = v7;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v17;
      v32 = 2112;
      v33 = v18;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode did onboard location services from update request payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(v4, "respondWithError:", v13);
  }
  else
  {
    v19 = [HMDHomeModel alloc];
    -[HMDHome uuid](v7, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](v7, "homeManager");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "uuid");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v19, "initWithObjectChangeType:uuid:parentUUID:", 2, v20, v22);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v12);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeModel setDidOnboardLocationServices:](v23, "setDidOnboardLocationServices:", v24);

    -[HMDHome backingStore](v7, "backingStore");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "transaction:options:", v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v28, "add:withMessage:", v23, v4);
    objc_msgSend(v28, "run");

  }
}

- (void)_handleResolveThreadNetworkRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve thread network credentials", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    -[HMDHome threadOperationalDataset](v6, "threadOperationalDataset");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak((id *)buf, v6);
    v11 = -[HMDHome doesHomeContainResident](v6, "doesHomeContainResident");
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __46__HMDHome__handleResolveThreadNetworkRequest___block_invoke;
    v16[3] = &unk_1E89A64A0;
    objc_copyWeak(&v18, (id *)buf);
    v17 = v4;
    objc_msgSend(v9, "retrieveMetadata:homeHasResident:completion:", v10, v11, v16);

    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v10);
  }

}

- (void)_handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has any user acknowledged camera recording onboarding value changed, sending notification", (uint8_t *)&v13, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v9, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", objc_msgSend(v12, "BOOLValue"));

}

- (void)_handleSetHasOnboardedForAccessCodeChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has onboarded for access code value changed, sending notification", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "hasOnboardedForAccessCode");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setHasOnboardedForAccessCode:](v9, "setHasOnboardedForAccessCode:", objc_msgSend(v12, "BOOLValue"));

  -[HMDHome notificationCenter](v9, "notificationCenter");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "postNotificationName:object:", CFSTR("HMDHomeHasOnboardedForAccessCodeChangeNotification"), v9);

}

- (void)_handleSetHasOnboardedForWalletKeyChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Home's has onboarded for wallet key value changed, sending notification", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "hasOnboardedForWalletKey");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome setHasOnboardedForWalletKey:](v9, "setHasOnboardedForWalletKey:", objc_msgSend(v12, "BOOLValue"));

  -[HMDHome notificationCenter](v9, "notificationCenter");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "postNotificationName:object:", CFSTR("HMDHomeHasOnboardedForWalletKeyChangeNotification"), v9);

}

- (void)handleSiriEndPointAddedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  HMDHome *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (!v7)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v12;
      v22 = 2112;
      v23 = v4;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to synchronize settings after receiving endpoint added notification with no HAP accessory. %@", (uint8_t *)&v20, 0x16u);
      goto LABEL_10;
    }
LABEL_11:

    objc_autoreleasePoolPop(v9);
    goto LABEL_12;
  }
  objc_msgSend(v7, "home");
  v8 = (HMDHome *)objc_claimAutoreleasedReturnValue();

  if (v8 != self)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "home");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543874;
      v21 = v12;
      v22 = 2112;
      v23 = v7;
      v24 = 2112;
      v25 = v13;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@New accessory is added for another home for HAP accessory: %@ home:%@", (uint8_t *)&v20, 0x20u);

LABEL_10:
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  objc_msgSend(v7, "siriEndpointProfile");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v7;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@A siri endpoint accessory is added. Confirm resident device: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    -[HMDHome residentDeviceManager](v16, "residentDeviceManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "confirmWithCompletionHandler:", 0);

  }
LABEL_12:

}

- (BOOL)supportsSiriEndpointOnBoarding
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  -[HMDHome primaryResident](self, "primaryResident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "capabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "supportsSiriEndpointSetup");

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v28 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * i), "device");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (v12)
            objc_msgSend(v6, "addObject:", v12);

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      }
      while (v9);
    }

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    -[HMDHome residentDeviceManager](self, "residentDeviceManager", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "residentDevices");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v24;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v14);
          v18 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
          objc_msgSend(v18, "device");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "capabilities");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v20, "supportsHomeHub"))
          {
            v21 = objc_msgSend(v6, "containsObject:", v19);

            if ((v21 & 1) != 0)
            {

              LOBYTE(v15) = 1;
              goto LABEL_24;
            }
          }
          else
          {

          }
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
      }
      while (v15);
    }
LABEL_24:

  }
  else
  {
    LOBYTE(v15) = 0;
  }
  return v15;
}

- (BOOL)currentDeviceSupportsSidekickSettings
{
  void *v2;
  void *v3;
  void *v4;
  char v5;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "capabilitiesController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "currentResidentCapabilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "supportsSiriEndpointSetup");

  return v5;
}

- (BOOL)enabledResidentsSupportsHomeHub
{
  void *v2;
  void *v3;
  char v4;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "availableResidentDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "na_any:", &__block_literal_global_1325);

  return v4;
}

- (void)setAtHomeLevel:(int64_t)a3
{
  unint64_t atHomeLevel;
  uint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  const __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  atHomeLevel = self->_atHomeLevel;
  if (atHomeLevel != a3)
    self->_atHomeLevel = a3;
  v6 = os_unfair_recursive_lock_unlock();
  v7 = (void *)MEMORY[0x1D17BA0A0](v6);
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v10;
    v12 = CFSTR("Updated");
    if (atHomeLevel == a3)
      v12 = CFSTR("Did not update");
    if (atHomeLevel > 3)
      v13 = CFSTR("HMDAtHomeLevelNotAtHome");
    else
      v13 = off_1E89A55F8[atHomeLevel];
    if ((unint64_t)a3 > 3)
      v14 = CFSTR("HMDAtHomeLevelNotAtHome");
    else
      v14 = off_1E89A55F8[a3];
    v18 = 138544130;
    v19 = v10;
    v20 = 2112;
    v21 = v12;
    v22 = 2112;
    v23 = v13;
    v24 = 2112;
    v25 = v14;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ atHomeLevel from %@ to %@", (uint8_t *)&v18, 0x2Au);

  }
  objc_autoreleasePoolPop(v7);
  if (atHomeLevel != a3)
  {
    -[HMDHome residentDeviceManager](v8, "residentDeviceManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "atHomeLevelChanged:", a3);

    -[HMDHome homeManager](v8, "homeManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v8, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "atHomeLevelChanged:formerLevel:home:", a3, atHomeLevel, v17);

  }
}

- (BOOL)hasReachableAccessories
{
  return -[HMDHome reachableAccessoriesCount](self, "reachableAccessoriesCount") > 0;
}

- (void)_handleHomeLocationChange:(int64_t)a3 previousLocation:(int64_t)a4
{
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  HMDHome *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE v27[12];
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome name](v8, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome shortDescription](v8, "shortDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    HMStringFromHomeLocation();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMStringFromHomeLocation();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v27 = 138544386;
    *(_QWORD *)&v27[4] = v10;
    v28 = 2112;
    v29 = v11;
    v30 = 2112;
    v31 = v12;
    v32 = 2112;
    v33 = v13;
    v34 = 2112;
    v35 = v14;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Location status for home %@/%@ changing from %@ to %@", v27, 0x34u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMDHome notificationCenter](v8, "notificationCenter");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "postNotificationName:object:", CFSTR("HMDHomeLocationChangedNotification"), v8);

  -[HMDHome homeManager](v8, "homeManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v8, "uuid");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("HomeLocationChanged"), v17, 0);

  v18 = (void *)MEMORY[0x1E0D285D0];
  v19 = *MEMORY[0x1E0CB8E20];
  v20 = v8;
  -[HMDHome uuid](v20, "uuid");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v36[0] = *MEMORY[0x1E0CB8E30];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)v27 = v22;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v36, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "homeLocationAuthorizedAndEntitledMessageWithName:target:messagePayload:", v19, v21, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome msgDispatcher](v20, "msgDispatcher");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v25, "sendMessage:completionHandler:", v24, 0);
  if (a3 == 1)
  {
    -[HMDHome presenceFeeder](v20, "presenceFeeder");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "notifyDidArriveHome");
LABEL_10:

    return;
  }
  if (a3 == 3 && a4 != 2 || a3 == 2 && a4 != 3)
  {
    -[HMDHome presenceFeeder](v20, "presenceFeeder");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "notifyDidLeaveHome");
    goto LABEL_10;
  }
}

- (void)setHomeLocation:(int64_t)a3
{
  _BOOL4 v5;
  int64_t homeLocation;
  uint64_t v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  v5 = 0;
  homeLocation = self->_homeLocation;
  if (homeLocation != a3)
  {
    self->_homeLocation = a3;
    v5 = !self->_overrideHomeLocation;
  }
  v7 = os_unfair_recursive_lock_unlock();
  v8 = (void *)MEMORY[0x1D17BA0A0](v7);
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
      v12 = CFSTR("Updated");
    else
      v12 = CFSTR("Did not update");
    HMStringFromHomeLocation();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMStringFromHomeLocation();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138544130;
    v16 = v11;
    v17 = 2112;
    v18 = v12;
    v19 = 2112;
    v20 = v13;
    v21 = 2112;
    v22 = v14;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@%@ home location from %@ to %@", (uint8_t *)&v15, 0x2Au);

  }
  objc_autoreleasePoolPop(v8);
  if (v5)
    -[HMDHome _handleHomeLocationChange:previousLocation:](v9, "_handleHomeLocationChange:previousLocation:", a3, homeLocation);
}

- (void)updateHomeLocation
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __29__HMDHome_updateHomeLocation__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_updateHomeLocation
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "regionStateAtHome"))
  {

    goto LABEL_8;
  }
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "regionStateNearbyHome");

  if (!v5)
  {
LABEL_8:
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v30 = v23;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@No reachable accessories found and not all regions are determined. Setting Home location to unknown & home level to Not at Home.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    v19 = 0;
    v18 = 1;
    goto LABEL_11;
  }
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "regionStateAtHome");
    HMDRegionStateString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "regionStateNearbyHome");
    HMDRegionStateString();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[HMDHome reachableAccessoriesCount](v7, "reachableAccessoriesCount");
    HMFBooleanToString();
    v28 = v6;
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v30 = v9;
    v31 = 2112;
    v32 = v11;
    v33 = 2112;
    v34 = v13;
    v35 = 2048;
    v36 = v14;
    v37 = 2112;
    v38 = v15;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@RegionStateAtHome : %@, RegionStateNearbyHome : %@, reachableAccessoriesCount : %lu/%@", buf, 0x34u);

    v6 = v28;
  }

  objc_autoreleasePoolPop(v6);
  -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "regionStateAtHome");

  if (v17 == 1)
  {
    v18 = 2;
    v19 = 1;
  }
  else
  {
    -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "regionStateNearbyHome");

    if (v25 == 1)
    {
      v18 = 1;
      v19 = 3;
    }
    else
    {
      -[HMDHome homeLocationHandler](v7, "homeLocationHandler");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "regionStateNearbyHome");

      v18 = 1;
      if (v27 != 2)
        goto LABEL_12;
      v19 = 2;
    }
  }
LABEL_11:
  -[HMDHome setHomeLocation:](self, "setHomeLocation:", v19);
LABEL_12:
  -[HMDHome setAtHomeLevel:](self, "setAtHomeLevel:", v18);
}

- (void)_handleHomeLocationUpdateFromSharedAdmin:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  unint64_t v9;
  int v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  const char *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("kHomeLocationDataKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v24 = 0;
    objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v5, &v24);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v24;
    if (!v6)
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v26 = v21;
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive location from data: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      goto LABEL_13;
    }
    objc_msgSend(v4, "numberForKey:", CFSTR("HMD.LOC.SRC"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (int)objc_msgSend(v8, "intValue");

    v10 = isInternalBuild();
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v14)
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        HMDHomeLocationSourceToString(v9);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v26 = v15;
        v27 = 2112;
        v28 = v6;
        v29 = 2112;
        v30 = v16;
        v17 = "%{public}@Received new home location from shared admin: %@, source : %@";
LABEL_11:
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, v17, buf, 0x20u);

      }
    }
    else if (v14)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMDHomeLocationSourceToString(v9);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543875;
      v26 = v15;
      v27 = 2117;
      v28 = v6;
      v29 = 2112;
      v30 = v16;
      v17 = "%{public}@Received new home location from shared admin: %{sensitive}@, source : %@";
      goto LABEL_11;
    }

    objc_autoreleasePoolPop(v11);
    -[HMDHome homeLocationHandler](v12, "homeLocationHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "runTransactionWithLocation:updatedTime:source:", v6, v23, v9);

LABEL_13:
  }

}

- (BOOL)isAutomaticSoftwareUpdateEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_automaticSoftwareUpdateEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setAutomaticSoftwareUpdateEnabled:(BOOL)a3
{
  _BOOL4 v3;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;
  uint64_t v16;

  v3 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_automaticSoftwareUpdateEnabled == v3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_automaticSoftwareUpdateEnabled = v3;
    v5 = os_unfair_recursive_lock_unlock();
    v6 = (void *)MEMORY[0x1D17BA0A0](v5);
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v9;
      v11 = CFSTR("disabled");
      if (v3)
        v11 = CFSTR("enabled");
      v12 = 138543618;
      v13 = v9;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Automatic software updates %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v7, "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);
  }
}

- (void)_handleUpdateAutomaticSoftwareUpdate:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  HMDHomeSettingsModel *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDHomeSettingsModel *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHome *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void (**v34)(_QWORD, _QWORD, _QWORD);
  void *v35;
  void *v36;
  void *v37;
  char v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v40 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling update automatic software update message", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v38 = 0;
  v9 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kEnabledKey"), &v38);
  if (v38)
  {
    v10 = v9;
    v11 = -[HMDHome isAutomaticSoftwareUpdateEnabled](v6, "isAutomaticSoftwareUpdateEnabled");
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
    if ((_DWORD)v10 != v11)
    {
      if (v15)
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v40 = v16;
        v41 = 2112;
        v42 = v17;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Updating automatic software update to: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
      +[HMDSoftwareUpdateAutomaticUpdateToggledEvent eventWithAutomaticUpdateEnabled:](HMDSoftwareUpdateAutomaticUpdateToggledEvent, "eventWithAutomaticUpdateEnabled:", v10);
      v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      -[HMDHome logEventSubmitter](v13, "logEventSubmitter");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "submitLogEvent:", v18);

      v20 = [HMDHomeSettingsModel alloc];
      -[HMDHome uuid](v13, "uuid");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeSettingsModel modelIDForHomeUUID:](HMDHomeSettingsModel, "modelIDForHomeUUID:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v13, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v20, "initWithObjectChangeType:uuid:parentUUID:", 2, v22, v23);

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeSettingsModel setAutomaticSoftwareUpdateEnabled:](v24, "setAutomaticSoftwareUpdateEnabled:", v25);

      -[HMDHome backingStore](v13, "backingStore");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "transaction:options:", CFSTR("Update Automatic Software Update"), v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v28, "add:withMessage:", v24, v4);
      objc_msgSend(v28, "run");

      goto LABEL_16;
    }
    if (v15)
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v40 = v35;
      v41 = 2112;
      v42 = v36;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Not changing the setting because it is already set to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v4, "responseHandler");
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    if (v37)
    {
      objc_msgSend(v4, "responseHandler");
      v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v18[2](v18, 0, 0);
      goto LABEL_16;
    }
  }
  else
  {
    v29 = (void *)MEMORY[0x1D17BA0A0](v9);
    v30 = v6;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v32;
      _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(v4, "responseHandler");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 27);
      v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v34 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v34[2](v34, v18, 0);

LABEL_16:
    }
  }

}

- (BOOL)isAutomaticThirdPartyAccessorySoftwareUpdateEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_automaticThirdPartyAccessorySoftwareUpdateEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v3 = a3;
  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_automaticThirdPartyAccessorySoftwareUpdateEnabled == v3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_automaticThirdPartyAccessorySoftwareUpdateEnabled = v3;
    v5 = os_unfair_recursive_lock_unlock();
    v6 = (void *)MEMORY[0x1D17BA0A0](v5);
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HMFEnabledStatusToString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v9;
      v20 = 2112;
      v21 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Setting Automatic third-party accessory software updates to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome notificationCenter](v7, "notificationCenter");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3, CFSTR("kEnabledKey"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "postNotificationName:object:userInfo:", CFSTR("HMDHomeAutomaticThirdPartyUpdateEnabledChangedNotification"), v7, v13);

    -[HMDHome logEventSubmitter](v7, "logEventSubmitter");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent eventWithHome:](HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent, "eventWithHome:", v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "submitLogEvent:", v15);

    -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:](v7, "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);
  }
}

- (void)_handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  HMDHomeSettingsModel *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeSettingsModel *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  void *v22;
  char v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v23 = 0;
  v5 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kEnabledKey"), &v23);
  if (v23)
  {
    v6 = v5;
    if ((_DWORD)v5 != -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](self, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"))
    {
      v7 = [HMDHomeSettingsModel alloc];
      -[HMDHome uuid](self, "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeSettingsModel modelIDForHomeUUID:](HMDHomeSettingsModel, "modelIDForHomeUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 2, v9, v10);

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeSettingsModel setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:](v11, "setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:", v12);

      -[HMDHome backingStore](self, "backingStore");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "transaction:options:", CFSTR("Update Automatic Accessory Firmware Update"), v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v15, "add:withMessage:", v11, v4);
      objc_msgSend(v15, "run");

LABEL_10:
      goto LABEL_11;
    }
    objc_msgSend(v4, "responseHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      objc_msgSend(v4, "responseHandler");
      v11 = (HMDHomeSettingsModel *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(HMDHomeSettingsModel *, _QWORD, _QWORD))&v11->super.super._bsoDataVersionOverride)(v11, 0, 0);
      goto LABEL_10;
    }
  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0](v5);
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(v4, "responseHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 27);
      v11 = (HMDHomeSettingsModel *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, HMDHomeSettingsModel *, _QWORD))v21)[2](v21, v11, 0);

      goto LABEL_10;
    }
  }
LABEL_11:

}

- (void)_handleQueryResidentReachabilityForAccessories:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const __CFString *v30;
  void *v31;
  _QWORD v32[2];
  _QWORD v33[2];
  uint8_t v34[128];
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_arrayForKey:", CFSTR("kAccessoriesUUIDKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v24 = v5;
    v25 = v4;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v9 = v7;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v27 != v12)
            objc_enumerationMutation(v9);
          v14 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
          v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v14);
          -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            v32[0] = CFSTR("kAccessoryUUID");
            v32[1] = CFSTR("kAccessoryIsReachableKey");
            v33[0] = v14;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v16, "isReachable"));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v33[1] = v17;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, v32, 2);
            v18 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v8, "addObject:", v18);
          }

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
      }
      while (v11);
    }

    v30 = CFSTR("kAccessoriesInfoDictionaryKey");
    v31 = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v25;
    objc_msgSend(v25, "respondWithPayload:", v19);

    v5 = v24;
  }
  else
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v23;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Query reachability request is missing accessory UUID in payload", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 8);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (void)queryPrimaryResidentReachabilityForAccessories:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(_QWORD, void *);
  _BOOL4 v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD, void *);
  _QWORD v32[5];
  void (**v33)(_QWORD, void *);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  const __CFString *v42;
  void *v43;
  _BYTE v44[128];
  const __CFString *v45;
  void *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(_QWORD, void *))a4;
  v8 = -[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident");
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v31 = v7;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v10 = v6;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v39 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          v45 = CFSTR("kAccessoryIsReachableKey");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v15, "isReachable", v31));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = v16;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v9, "addObject:", v17);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
      }
      while (v12);
    }

    v7 = v31;
    v31[2](v31, v9);
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v18 = v6;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v35;
      do
      {
        for (j = 0; j != v20; ++j)
        {
          if (*(_QWORD *)v35 != v21)
            objc_enumerationMutation(v18);
          objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * j), "uuid");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "UUIDString");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "addObject:", v24);

        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
      }
      while (v20);
    }

    v42 = CFSTR("kAccessoriesUUIDKey");
    v43 = v9;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)MEMORY[0x1E0D285D0];
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "messageWithName:identifier:messagePayload:", CFSTR("HMDHomeQueryResidentReachabilityForAccessoriesMessageKey"), v27, v25);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __69__HMDHome_queryPrimaryResidentReachabilityForAccessories_completion___block_invoke;
    v32[3] = &unk_1E89BE018;
    v32[4] = self;
    v33 = v7;
    objc_msgSend(v28, "setResponseHandler:", v32);
    -[HMDHome uuid](self, "uuid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:](self, "redispatchToResidentMessage:target:responseQueue:", v28, v29, v30);

  }
}

- (int64_t)minimumMediaUserPrivilege
{
  int64_t minimumMediaUserPrivilege;

  os_unfair_recursive_lock_lock_with_options();
  minimumMediaUserPrivilege = self->_minimumMediaUserPrivilege;
  os_unfair_recursive_lock_unlock();
  return minimumMediaUserPrivilege;
}

- (void)setMinimumMediaUserPrivilege:(int64_t)a3
{
  uint64_t v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *workQueue;
  _QWORD v12[6];
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_minimumMediaUserPrivilege == a3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_minimumMediaUserPrivilege = a3;
    v5 = os_unfair_recursive_lock_unlock();
    v6 = (void *)MEMORY[0x1D17BA0A0](v5);
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HMUserPrivilegeToString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Updated minimum user privilege to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    workQueue = v7->_workQueue;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __40__HMDHome_setMinimumMediaUserPrivilege___block_invoke;
    v12[3] = &unk_1E89C0B98;
    v12[4] = v7;
    v12[5] = a3;
    dispatch_async(workQueue, v12);
  }
}

- (void)_handleUpdateMinimumMediaUserPrivilege:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  HMDHomeMediaSettingsModel *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeMediaSettingsModel *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("kUserPrivilegeLevelKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "integerValue");
    if (-[HMDHome minimumMediaUserPrivilege](self, "minimumMediaUserPrivilege") != v7)
    {
      v16 = [HMDHomeMediaSettingsModel alloc];
      -[HMDHome uuid](self, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v16, "initWithObjectChangeType:uuid:parentUUID:", 2, v18, v19);

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v7);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeMediaSettingsModel setMinimumMediaUserPrivilege:](v20, "setMinimumMediaUserPrivilege:", v21);

      -[HMDHome backingStore](self, "backingStore");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "transaction:options:", CFSTR("Update Minimum User Privilege"), v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v24, "add:withMessage:", v20, v4);
      objc_msgSend(v24, "run");

      goto LABEL_11;
    }
    objc_msgSend(v4, "responseHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v4, "responseHandler");
      v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v9[2](v9, 0, 0);
LABEL_9:

    }
  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v4, "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 27);
      v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v15[2](v15, v9, 0);

      goto LABEL_9;
    }
  }
LABEL_11:

}

- (BOOL)isMediaPeerToPeerEnabled
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_mediaPeerToPeerEnabled;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setMediaPeerToPeerEnabled:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_mediaPeerToPeerEnabled = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)_handleUpdateMediaPeerToPeerEnabled:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  HMDHomeMediaSettingsModel *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeMediaSettingsModel *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  void *v22;
  char v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v23 = 0;
  v5 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kEnabledKey"), &v23);
  if (v23)
  {
    v6 = v5;
    if ((_DWORD)v5 != -[HMDHome isMediaPeerToPeerEnabled](self, "isMediaPeerToPeerEnabled"))
    {
      v7 = [HMDHomeMediaSettingsModel alloc];
      -[HMDHome uuid](self, "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 2, v9, v10);

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeMediaSettingsModel setMediaPeerToPeerEnabled:](v11, "setMediaPeerToPeerEnabled:", v12);

      -[HMDHome backingStore](self, "backingStore");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "transaction:options:", CFSTR("Update Media Peer-to-peer Enabled"), v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v15, "add:withMessage:", v11, v4);
      objc_msgSend(v15, "run");

LABEL_10:
      goto LABEL_11;
    }
    objc_msgSend(v4, "responseHandler");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      objc_msgSend(v4, "responseHandler");
      v11 = (HMDHomeMediaSettingsModel *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(HMDHomeMediaSettingsModel *, _QWORD, _QWORD))&v11->super.super._bsoDataVersionOverride)(v11, 0, 0);
      goto LABEL_10;
    }
  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0](v5);
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Client request missing required key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(v4, "responseHandler");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 27);
      v11 = (HMDHomeMediaSettingsModel *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, HMDHomeMediaSettingsModel *, _QWORD))v21)[2](v21, v11, 0);

      goto LABEL_10;
    }
  }
LABEL_11:

}

- (id)mediaPassword
{
  NSString *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_mediaPassword;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setMediaPassword:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  NSObject *workQueue;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_msgSend(v4, "copy");
  os_unfair_recursive_lock_lock_with_options();
  if ((HMFEqualObjects() & 1) != 0)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    objc_storeStrong((id *)&self->_mediaPassword, v5);
    v6 = os_unfair_recursive_lock_unlock();
    v7 = (void *)MEMORY[0x1D17BA0A0](v6);
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Updated media password to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    workQueue = v8->_workQueue;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __28__HMDHome_setMediaPassword___block_invoke;
    v12[3] = &unk_1E89C2328;
    v12[4] = v8;
    v13 = v5;
    dispatch_async(workQueue, v12);

  }
}

- (void)_handleUpdateMediaPassword:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  HMDHomeMediaSettingsModel *v8;
  HMDHomeMediaSettingsModel *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHomeMediaSettingsModel *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void (**v30)(_QWORD, _QWORD, _QWORD);
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  HMDHomeMediaSettingsModel *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0CB9148]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v16;
      v34 = 2112;
      v35 = v6;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Invalid password: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v4, "responseHandler");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
      goto LABEL_18;
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 22);
    v9 = (HMDHomeMediaSettingsModel *)objc_claimAutoreleasedReturnValue();
LABEL_16:
    objc_msgSend(v4, "responseHandler");
    v30 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, HMDHomeMediaSettingsModel *, _QWORD))v30)[2](v30, v9, 0);

    goto LABEL_17;
  }
  v31 = 0;
  v7 = objc_msgSend(MEMORY[0x1E0CBA528], "isValidMediaPassword:error:", v6, &v31);
  v8 = (HMDHomeMediaSettingsModel *)v31;
  v9 = v8;
  if ((v7 & 1) == 0)
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v33 = v28;
      v34 = 2112;
      v35 = v6;
      v36 = 2112;
      v37 = v9;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to validate password, %@, with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(v4, "responseHandler");
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v29)
      goto LABEL_17;
    goto LABEL_16;
  }

LABEL_5:
  -[HMDHome mediaPassword](self, "mediaPassword");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = HMFEqualObjects();

  if (!v11)
  {
    v18 = [HMDHomeMediaSettingsModel alloc];
    -[HMDHome uuid](self, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](self, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 2, v20, v21);

    -[HMDHomeMediaSettingsModel setMediaPassword:](v9, "setMediaPassword:", v6);
    -[HMDHome backingStore](self, "backingStore");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "transaction:options:", CFSTR("Update Media Password"), v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v24, "add:withMessage:", v9, v4);
    objc_msgSend(v24, "run");

    goto LABEL_17;
  }
  objc_msgSend(v4, "responseHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(v4, "responseHandler");
    v9 = (HMDHomeMediaSettingsModel *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(HMDHomeMediaSettingsModel *, _QWORD, _QWORD))&v9->super.super._bsoDataVersionOverride)(v9, 0, 0);
LABEL_17:

  }
LABEL_18:

}

- (void)updateAppData:(id)a3 identifierKey:(id)a4 lookup:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  HMDHome *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id obj;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "dictionary");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hmf_dictionaryForKey:", CFSTR("com.apple.homekit-entitledclient.identifer"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v36 = v9;
  objc_msgSend(v12, "objectForKey:", v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13 && objc_msgSend(v13, "count"))
  {
    v33 = v12;
    v34 = v8;
    v31 = (void *)objc_msgSend(v12, "mutableCopy");
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v14, "count"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v32 = v14;
    obj = v14;
    v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
    if (v38)
    {
      v16 = *(_QWORD *)v40;
      v35 = *(_QWORD *)v40;
      do
      {
        for (i = 0; i != v38; ++i)
        {
          if (*(_QWORD *)v40 != v16)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
          objc_msgSend(v10, "objectForKey:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (v19)
          {
            v20 = (void *)MEMORY[0x1D17BA0A0]();
            v21 = self;
            HMFGetOSLogHandle();
            v22 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v23 = v15;
              v24 = self;
              v25 = v10;
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v44 = v26;
              v45 = 2112;
              v46 = v36;
              v47 = 2112;
              v48 = v18;
              v49 = 2112;
              v50 = v19;
              _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Fixup of service uuid list %@ from legacy archive %@ -> %@", buf, 0x2Au);

              v10 = v25;
              self = v24;
              v15 = v23;
              v16 = v35;
            }

            objc_autoreleasePoolPop(v20);
            v27 = v15;
            v28 = v19;
          }
          else
          {
            v27 = v15;
            v28 = v18;
          }
          objc_msgSend(v27, "addObject:", v28);

        }
        v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
      }
      while (v38);
    }

    v29 = (void *)objc_msgSend(v15, "copy");
    objc_msgSend(v31, "setObject:forKey:", v29, v36);

    v30 = (void *)objc_msgSend(v31, "copy");
    v8 = v34;
    objc_msgSend(v34, "setApplicationData:forIdentifier:", v30, CFSTR("com.apple.homekit-entitledclient.identifer"));

    v14 = v32;
    v12 = v33;
  }

}

- (void)fixupHomeAfterDecoding
{
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void **p_cache;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHome *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void **v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  HMDHome *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t j;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t k;
  __int128 v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  HMDHome *v88;
  id obj;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[128];
  _BYTE v112[128];
  void *v113;
  void *v114;
  uint8_t v115[128];
  uint8_t buf[4];
  void *v117;
  __int16 v118;
  void *v119;
  __int16 v120;
  void *v121;
  void *v122;
  _BYTE v123[128];
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  +[HMDProcessInfo privateClientIdentifierSalt](HMDProcessInfo, "privateClientIdentifierSalt");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = self;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    -[HMDHome accessories](self, "accessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v107, v123, 16);
    if (v4)
    {
      v6 = v4;
      v7 = *(_QWORD *)v108;
      p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
      *(_QWORD *)&v5 = 138543874;
      v79 = v5;
      v83 = v3;
      v84 = *(_QWORD *)v108;
      do
      {
        v9 = 0;
        v85 = v6;
        do
        {
          if (*(_QWORD *)v108 != v7)
            objc_enumerationMutation(v3);
          v10 = *(id *)(*((_QWORD *)&v107 + 1) + 8 * v9);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v11 = v10;
          else
            v11 = 0;
          v12 = v11;

          objc_msgSend(v12, "bridge");
          v13 = objc_claimAutoreleasedReturnValue();
          v14 = (void *)v13;
          if (v12)
            v15 = v13 == 0;
          else
            v15 = 1;
          if (!v15)
          {
            objc_msgSend(v12, "uniqueIdentifier");
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            if (v16)
            {
              v86 = v14;
              v87 = v9;
              v17 = (void *)MEMORY[0x1E0CB3A28];
              objc_msgSend(v14, "uuid");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = (void *)MEMORY[0x1E0D163A8];
              objc_msgSend(v12, "uniqueIdentifier");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "instanceIDForUniqueIdentifier:", v20);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "stringValue");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v122 = v22;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v122, 1);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "hm_deriveUUIDFromBaseUUID:withSalts:", v18, v23);
              v24 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v12, "uuid");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              LOBYTE(v17) = objc_msgSend(v24, "isEqual:", v25);

              if ((v17 & 1) != 0)
              {

                v6 = v85;
                v14 = v86;
                v9 = v87;
                v7 = v84;
              }
              else
              {
                v36 = (void *)MEMORY[0x1D17BA0A0]();
                v37 = v88;
                HMFGetOSLogHandle();
                v38 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  HMFGetLogIdentifier();
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v12, "uuid");
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v79;
                  v117 = v39;
                  v118 = 2112;
                  v119 = v40;
                  v120 = 2112;
                  v121 = v24;
                  _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_DEFAULT, "%{public}@Fixup of accessory uuid from legacy archive %@ -> %@", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v36);
                objc_msgSend(v12, "uuid");
                v41 = objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "setUuid:", v24);
                objc_msgSend(v12, "appData");
                v42 = (void *)objc_claimAutoreleasedReturnValue();

                if (v42)
                {
                  objc_msgSend(v12, "uuid");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v12, "appData");
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v44, "setParentUUID:", v43);

                }
                v80 = (void *)v41;
                objc_msgSend(MEMORY[0x1E0CB3A28], "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v41, v91, 0, v79);
                v93 = (void *)objc_claimAutoreleasedReturnValue();
                v81 = v24;
                objc_msgSend(MEMORY[0x1E0CB3A28], "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v24, v91, 0);
                v92 = (void *)objc_claimAutoreleasedReturnValue();
                v103 = 0u;
                v104 = 0u;
                v105 = 0u;
                v106 = 0u;
                v82 = v12;
                objc_msgSend(v12, "services");
                obj = (id)objc_claimAutoreleasedReturnValue();
                v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v103, v115, 16);
                if (v45)
                {
                  v46 = v45;
                  v90 = *(_QWORD *)v104;
                  do
                  {
                    for (i = 0; i != v46; ++i)
                    {
                      if (*(_QWORD *)v104 != v90)
                        objc_enumerationMutation(obj);
                      v48 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * i);
                      objc_msgSend(v48, "_recalculateUUID");
                      v49 = (void *)MEMORY[0x1E0CB3A28];
                      objc_msgSend(v48, "instanceID");
                      v50 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v50, "stringValue");
                      v51 = (void *)objc_claimAutoreleasedReturnValue();
                      v114 = v51;
                      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v114, 1);
                      v52 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v49, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v93, v91, v52);
                      v53 = (void *)objc_claimAutoreleasedReturnValue();

                      v54 = (void *)MEMORY[0x1E0CB3A28];
                      objc_msgSend(v48, "instanceID");
                      v55 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v55, "stringValue");
                      v56 = (void *)objc_claimAutoreleasedReturnValue();
                      v113 = v56;
                      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v113, 1);
                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v54, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v92, v91, v57);
                      v58 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend(v58, "UUIDString");
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v53, "UUIDString");
                      v60 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v94, "setObject:forKey:", v59, v60);

                      objc_msgSend(v48, "appData");
                      v61 = (void *)objc_claimAutoreleasedReturnValue();

                      if (v61)
                      {
                        objc_msgSend(v48, "uuid");
                        v62 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v48, "appData");
                        v63 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v63, "setParentUUID:", v62);

                      }
                    }
                    v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v103, v115, 16);
                  }
                  while (v46);
                }

                v3 = v83;
                v7 = v84;
                p_cache = (void **)(HMDCloudSyncLegacyFetchLogEvent + 16);
                v6 = v85;
                v14 = v86;
                v9 = v87;
                v12 = v82;
              }
            }
            else
            {
              v26 = v14;
              v27 = (void *)MEMORY[0x1D17BA0A0]();
              v28 = v88;
              HMFGetOSLogHandle();
              v29 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                HMFGetLogIdentifier();
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "uuid");
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v31, "UUIDString");
                v32 = p_cache;
                v33 = v12;
                v34 = v9;
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v117 = v30;
                v118 = 2112;
                v119 = v35;
                _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to check validity of uuid %@ (accessory has nil uniqueIdentifier)", buf, 0x16u);

                v9 = v34;
                v12 = v33;
                p_cache = v32;

                v6 = v85;
                v7 = v84;
              }

              objc_autoreleasePoolPop(v27);
              v14 = v26;
              v3 = v83;
            }
          }

          ++v9;
        }
        while (v9 != v6);
        v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v107, v123, 16);
      }
      while (v6);
    }

    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    -[HMDHome rooms](v88, "rooms");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v99, v112, 16);
    if (v65)
    {
      v66 = v65;
      v67 = *(_QWORD *)v100;
      do
      {
        for (j = 0; j != v66; ++j)
        {
          if (*(_QWORD *)v100 != v67)
            objc_enumerationMutation(v64);
          v69 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * j);
          objc_msgSend(v69, "appData", v79);
          v70 = (void *)objc_claimAutoreleasedReturnValue();

          if (v70)
          {
            objc_msgSend(v69, "appData");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome updateAppData:identifierKey:lookup:](v88, "updateAppData:identifierKey:lookup:", v71, CFSTR("HFSortedIdentifierStrings_roomServices"), v94);

          }
        }
        v66 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v99, v112, 16);
      }
      while (v66);
    }

    -[HMDHome appData](v88, "appData");
    v72 = (void *)objc_claimAutoreleasedReturnValue();

    if (v72)
    {
      -[HMDHome appData](v88, "appData");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome updateAppData:identifierKey:lookup:](v88, "updateAppData:identifierKey:lookup:", v73, CFSTR("HFSortedIdentifierStrings_homeServices"), v94);

    }
    -[HMDHome computeBridgedAccessoriesForAllBridges](v88, "computeBridgedAccessoriesForAllBridges", v79);
  }
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  -[HMDHome serviceGroups](v88, "serviceGroups");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v95, v111, 16);
  if (v75)
  {
    v76 = v75;
    v77 = *(_QWORD *)v96;
    do
    {
      for (k = 0; k != v76; ++k)
      {
        if (*(_QWORD *)v96 != v77)
          objc_enumerationMutation(v74);
        objc_msgSend(*(id *)(*((_QWORD *)&v95 + 1) + 8 * k), "fixupServiceGroup");
      }
      v76 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v95, v111, 16);
    }
    while (v76);
  }

}

- (HMDHome)initWithCoder:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;

  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = (HMDHome *)-[HMDHome _initWithCoder:](self, "_initWithCoder:", v4);
  objc_autoreleasePoolPop(v5);

  return v6;
}

- (id)_initWithCoder:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  uint64_t v8;
  NSUUID *zoneID;
  uint64_t v10;
  NSDate *creationDate;
  uint64_t v12;
  NSDate *firstHAPAccessoryAddedDate;
  uint64_t v14;
  NSString *ownerName;
  _BOOL4 v16;
  void *v17;
  int v18;
  HMDHomePresenceMonitor *v19;
  HMDHomePresenceMonitor *v20;
  HMDHomePeriodicReader *v21;
  HMDHomePeriodicReader *periodicReader;
  HMDHomeAdministratorHandler *v23;
  HMDHomeAdministratorHandler *administratorHandler;
  HMDSharedHomeUpdateHandler *sharedHomeUpdateHandler;
  void *v26;
  HMDHomeMediaSystemHandler *v27;
  HMDHomeMediaSystemHandler *mediaSystemController;
  NSMutableArray *rooms;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSMutableArray *zones;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  void *v45;
  char v46;
  void *v47;
  void *v48;
  char v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  void *v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  id v59;
  HMDSharedHomeUpdateHandler *v60;
  HMDSharedHomeUpdateHandler *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  void *v66;
  void *v67;
  HMDHome *v68;
  NSObject *v69;
  id v70;
  void *v71;
  void *v72;
  int v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSMutableArray *serviceGroups;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  NSMutableArray *actionSets;
  void *v98;
  NSMutableArray *triggerOwnedActionSets;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  HMDHome *v104;
  NSObject *v105;
  id v106;
  uint64_t v107;
  NSMutableArray *v108;
  void *v109;
  NSMutableArray *removedUsers;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t k;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t m;
  void *v137;
  void *v138;
  char v139;
  NSMutableArray *users;
  void *v141;
  void *v142;
  id *v143;
  NSObject *v144;
  id v145;
  NSMutableArray *v146;
  void *v147;
  HMDRoom *v148;
  uint64_t v149;
  void *v150;
  id *v151;
  NSObject *v152;
  id v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  HMDNotificationRegistry *v160;
  id v161;
  void *v162;
  void *v163;
  id v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t n;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t ii;
  void *v179;
  void *v180;
  NSMutableArray *v181;
  void *v182;
  void *v183;
  void *v184;
  void (**v185)(_QWORD, _QWORD, _QWORD);
  void *v186;
  uint64_t v187;
  void *v188;
  NSMutableArray *v189;
  uint64_t v190;
  uint64_t v191;
  id v192;
  uint64_t v193;
  uint64_t jj;
  void *v195;
  id v196;
  void *v197;
  void *v198;
  int v199;
  void *v200;
  void *v201;
  id *v202;
  NSObject *v203;
  id v204;
  void (**v205)(_QWORD, _QWORD, _QWORD);
  void *v206;
  uint64_t v207;
  void *v208;
  void *v209;
  id *v210;
  id *v211;
  void *v212;
  NSMutableArray *v213;
  uint64_t v214;
  void *kk;
  void *v216;
  void *v217;
  void *v218;
  uint64_t v219;
  void *v220;
  id *v221;
  NSObject *v222;
  uint64_t v223;
  NSMutableArray *v224;
  id *v225;
  void *v226;
  id v227;
  uint64_t v228;
  id v229;
  uint64_t v230;
  id v231;
  void *v232;
  id *v233;
  NSObject *v234;
  id v235;
  id v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  id v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  uint64_t v260;
  id v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  id v268;
  uint64_t v269;
  id v270;
  id v271;
  HMDHomeKitVersion *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  HMDHomeKitVersion *v277;
  id v278;
  void *v279;
  HMDHomeKitVersion *v280;
  id v281;
  uint64_t v282;
  id v283;
  uint64_t v284;
  id v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  HMDAccessoryNetworkProtectionGroupRegistry *v290;
  void *v291;
  uint64_t v292;
  id v293;
  void *v294;
  void *v295;
  HMDResidentReachabilityContext *v296;
  HMDResidentReachabilityNotificationManager *v297;
  id v298;
  void *v299;
  uint64_t v300;
  id v301;
  uint64_t v302;
  id v303;
  uint64_t v304;
  id v305;
  uint64_t v306;
  id v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  uint64_t v312;
  id v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  uint64_t v318;
  id v319;
  uint64_t v320;
  id v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  int v330;
  HMDHome *v331;
  HMDHome *v332;
  void *v334;
  id *v335;
  NSObject *v336;
  id v337;
  void *v338;
  void *v339;
  void *v340;
  HMDRoom *v341;
  void *v342;
  void *v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  void *v351;
  void *v352;
  id obj;
  HMDHome *v354;
  id v355;
  id v356;
  id v357;
  void *v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  _QWORD v391[3];
  _QWORD v392[2];
  _QWORD v393[2];
  _QWORD v394[2];
  _QWORD v395[4];
  _QWORD v396[2];
  _QWORD v397[4];
  _QWORD v398[4];
  _BYTE v399[128];
  _BYTE v400[128];
  _BYTE v401[128];
  _BYTE v402[128];
  _QWORD v403[2];
  _BYTE v404[128];
  _BYTE v405[128];
  _QWORD v406[2];
  _QWORD v407[2];
  _QWORD v408[2];
  _QWORD v409[2];
  _QWORD v410[2];
  _QWORD v411[2];
  uint8_t v412[128];
  uint8_t buf[4];
  id v414;
  __int16 v415;
  uint64_t v416;
  _BYTE v417[128];
  _QWORD v418[2];
  _QWORD v419[5];

  v419[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v347 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v6);
  v7 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:](self, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:", v5);

  v348 = v4;
  if (!v7)
    goto LABEL_241;
  v344 = v6;
  v345 = v5;
  +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v7->_uuid);
  v8 = objc_claimAutoreleasedReturnValue();
  zoneID = v7->_zoneID;
  v7->_zoneID = (NSUUID *)v8;

  v354 = v7;
  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("creationDate"));
  v10 = objc_claimAutoreleasedReturnValue();
  creationDate = v7->_creationDate;
  v7->_creationDate = (NSDate *)v10;

  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("firstHAPAccessoryAddedDate"));
  v12 = objc_claimAutoreleasedReturnValue();
  firstHAPAccessoryAddedDate = v7->_firstHAPAccessoryAddedDate;
  v7->_firstHAPAccessoryAddedDate = (NSDate *)v12;

  objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeAdmin"));
  v14 = objc_claimAutoreleasedReturnValue();
  ownerName = v7->_ownerName;
  v7->_ownerName = (NSString *)v14;

  v16 = +[HMDHomeManager isThisDeviceAdminOfHome:](HMDHomeManager, "isThisDeviceAdminOfHome:", v7);
  v7->_ownerUser = v16;
  if (v16)
  {
    -[HMDHome localCapabilitiesDataSource](v7, "localCapabilitiesDataSource");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "isResidentCapable");

    v7 = v354;
    if (v18)
    {
      objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kHMDHomePresenceMonitorCodingKey"));
      v19 = (HMDHomePresenceMonitor *)objc_claimAutoreleasedReturnValue();
      v20 = v19;
      if (!v19)
        v20 = objc_alloc_init(HMDHomePresenceMonitor);
      objc_storeStrong((id *)&v354->_presenceMonitor, v20);
      if (!v19)

      v21 = objc_alloc_init(HMDHomePeriodicReader);
      periodicReader = v354->_periodicReader;
      v354->_periodicReader = v21;

      v7 = v354;
    }
  }
  v23 = -[HMDHomeAdministratorHandler initWithHome:]([HMDHomeAdministratorHandler alloc], "initWithHome:", v7);
  administratorHandler = v7->_administratorHandler;
  v7->_administratorHandler = v23;

  if (v7->_ownerUser || isWatch())
  {
    sharedHomeUpdateHandler = v7->_sharedHomeUpdateHandler;
    v7->_sharedHomeUpdateHandler = 0;

  }
  else
  {
    v60 = objc_alloc_init(HMDSharedHomeUpdateHandler);
    v61 = v7->_sharedHomeUpdateHandler;
    v7->_sharedHomeUpdateHandler = v60;

    -[HMDSharedHomeUpdateHandler configureWithHome:](v7->_sharedHomeUpdateHandler, "configureWithHome:", v7);
  }
  v26 = v348;
  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x1E0CBAB98]);
  v27 = (HMDHomeMediaSystemHandler *)objc_claimAutoreleasedReturnValue();
  mediaSystemController = v27;
  if (!v27)
    mediaSystemController = v354->_mediaSystemController;
  objc_storeStrong((id *)&v354->_mediaSystemController, mediaSystemController);

  rooms = v354->_rooms;
  v30 = (void *)MEMORY[0x1E0C99E60];
  v419[0] = objc_opt_class();
  v419[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v419, 2);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "setWithArray:", v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v32, CFSTR("rooms"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](rooms, "setArray:", v33);

  zones = v354->_zones;
  v35 = (void *)MEMORY[0x1E0C99E60];
  v418[0] = objc_opt_class();
  v418[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v418, 2);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setWithArray:", v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v37, CFSTR("zones"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](zones, "setArray:", v38);

  if (objc_msgSend(v348, "containsValueForKey:", CFSTR("accessories")))
  {
    +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v39, CFSTR("accessories"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _addAccessories:](v354, "_addAccessories:", v40);

    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "preferenceForKey:", CFSTR("enableMediaAccessories"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "BOOLValue");

    v26 = v348;
    if ((v43 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "preferenceForKey:", CFSTR("enableAirPlay2"));
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = objc_msgSend(v45, "BOOLValue");

      if ((v46 & 1) == 0)
      {
        v389 = 0u;
        v390 = 0u;
        v387 = 0u;
        v388 = 0u;
        -[HMDHome accessories](v354, "accessories");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v62 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v387, v417, 16);
        if (v62)
        {
          v63 = v62;
          v64 = *(_QWORD *)v388;
          do
          {
            for (i = 0; i != v63; ++i)
            {
              if (*(_QWORD *)v388 != v64)
                objc_enumerationMutation(v50);
              v66 = *(void **)(*((_QWORD *)&v387 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v67 = (void *)MEMORY[0x1D17BA0A0]();
                v68 = v354;
                HMFGetOSLogHandle();
                v69 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v70 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v414 = v70;
                  v415 = 2112;
                  v416 = (uint64_t)v66;
                  _os_log_impl(&dword_1CD062000, v69, OS_LOG_TYPE_INFO, "%{public}@AirPlay2 is not enabled, dropping accessory: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v67);
                -[HMDHome _removeAccessory:](v68, "_removeAccessory:", v66);
              }
            }
            v63 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v387, v417, 16);
          }
          while (v63);
        }
        goto LABEL_42;
      }
      objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "preferenceForKey:", CFSTR("enableAppleMedia"));
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = objc_msgSend(v48, "BOOLValue");

      v26 = v348;
      if ((v49 & 1) == 0)
      {
        v385 = 0u;
        v386 = 0u;
        v383 = 0u;
        v384 = 0u;
        -[HMDHome accessories](v354, "accessories");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v383, v412, 16);
        if (v51)
        {
          v52 = v51;
          v53 = *(_QWORD *)v384;
          do
          {
            for (j = 0; j != v52; ++j)
            {
              if (*(_QWORD *)v384 != v53)
                objc_enumerationMutation(v50);
              v55 = *(void **)(*((_QWORD *)&v383 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v56 = (void *)MEMORY[0x1D17BA0A0]();
                v57 = v354;
                HMFGetOSLogHandle();
                v58 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v59 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v414 = v59;
                  v415 = 2112;
                  v416 = (uint64_t)v55;
                  _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@Apple media is not enabled, dropping accessory: %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v56);
                -[HMDHome _removeAccessory:](v57, "_removeAccessory:", v55);
              }
            }
            v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v383, v412, 16);
          }
          while (v52);
        }
LABEL_42:

        v26 = v348;
      }
    }
  }
  if (objc_msgSend(v26, "containsValueForKey:", CFSTR("accessories.airplay")))
  {
    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "preferenceForKey:", CFSTR("enableAirPlay2"));
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = objc_msgSend(v72, "BOOLValue");

    v26 = v348;
    if (v73)
    {
      +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v74, CFSTR("accessories.airplay"));
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome _addAccessories:](v354, "_addAccessories:", v75);

      v26 = v348;
    }
  }
  if (objc_msgSend(v26, "containsValueForKey:", CFSTR("accessories.homepod")))
  {
    +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v76, CFSTR("accessories.homepod"));
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _addAccessories:](v354, "_addAccessories:", v77);

    v26 = v348;
  }
  if (objc_msgSend(v26, "containsValueForKey:", CFSTR("accessories.homepod_6_1")))
  {
    +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v78, CFSTR("accessories.homepod_6_1"));
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _addAccessories:](v354, "_addAccessories:", v79);

    v26 = v348;
  }
  if (objc_msgSend(v26, "containsValueForKey:", CFSTR("HM.AppleMediaAccessorySensor")))
  {
    +[HMDHome supportedAccessoryClasses](HMDHome, "supportedAccessoryClasses");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "decodeObjectOfClasses:forKey:", v80, CFSTR("HM.AppleMediaAccessorySensor"));
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _addAccessories:](v354, "_addAccessories:", v81);

  }
  v82 = *MEMORY[0x1E0CB9178];
  if (objc_msgSend(v26, "containsValueForKey:", *MEMORY[0x1E0CB9178]))
    -[HMDHome setMultiUserEnabled:](v354, "setMultiUserEnabled:", objc_msgSend(v26, "decodeBoolForKey:", v82));
  v354->_soundCheckEnabled = objc_msgSend(v26, "decodeBoolForKey:", *MEMORY[0x1E0CB9258]);
  objc_msgSend(v26, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x1E0CB9248]);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v84 = v83;
  else
    v84 = 0;
  v85 = v84;

  v354->_siriPhraseOptions = objc_msgSend(v85, "unsignedIntegerValue");
  v354->_locationServicesEnabled = objc_msgSend(v26, "decodeBoolForKey:", *MEMORY[0x1E0CB8E18]);
  v354->_didOnboardLocationServices = objc_msgSend(v26, "decodeBoolForKey:", *MEMORY[0x1E0CB8D38]);
  v86 = *MEMORY[0x1E0CB8DB8];
  if (objc_msgSend(v26, "containsValueForKey:", *MEMORY[0x1E0CB8DB8]))
    -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:](v354, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", objc_msgSend(v26, "decodeBoolForKey:", v86));
  v87 = *MEMORY[0x1E0CB8DC0];
  if (objc_msgSend(v26, "containsValueForKey:", *MEMORY[0x1E0CB8DC0]))
    v354->_hasOnboardedForAccessCode = objc_msgSend(v26, "decodeBoolForKey:", v87);
  v88 = *MEMORY[0x1E0CB8DC8];
  if (objc_msgSend(v26, "containsValueForKey:", *MEMORY[0x1E0CB8DC8]))
    v354->_hasOnboardedForWalletKey = objc_msgSend(v26, "decodeBoolForKey:", v88);
  else
    v354->_shouldEncodeHasOnboardedForWalletKey = 0;
  serviceGroups = v354->_serviceGroups;
  v90 = (void *)MEMORY[0x1E0C99E60];
  v411[0] = objc_opt_class();
  v411[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v411, 2);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v90, "setWithArray:", v91);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "decodeObjectOfClasses:forKey:", v92, *MEMORY[0x1E0CBAC68]);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](serviceGroups, "setArray:", v93);

  v94 = (void *)MEMORY[0x1E0C99E60];
  v410[0] = objc_opt_class();
  v410[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v410, 2);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v94, "setWithArray:", v95);
  v96 = objc_claimAutoreleasedReturnValue();

  actionSets = v354->_actionSets;
  objc_msgSend(v26, "decodeObjectOfClasses:forKey:", v96, CFSTR("actionSets"));
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](actionSets, "setArray:", v98);

  triggerOwnedActionSets = v354->_triggerOwnedActionSets;
  objc_msgSend(v26, "decodeObjectOfClasses:forKey:", v96, CFSTR("HM.triggerOwnedActionSets"));
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](triggerOwnedActionSets, "setArray:", v100);

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v343 = (void *)v96;
  objc_msgSend(v26, "decodeObjectOfClasses:forKey:", v96, CFSTR("builtinActionSets"));
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v101, "setArray:", v102);

  v342 = v101;
  if (objc_msgSend(v101, "count"))
  {
    -[NSMutableArray addObjectsFromArray:](v354->_actionSets, "addObjectsFromArray:", v101);
  }
  else if (-[HMDHome isOwnerUser](v354, "isOwnerUser"))
  {
    v103 = (void *)MEMORY[0x1D17BA0A0]();
    v104 = v354;
    HMFGetOSLogHandle();
    v105 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v106 = (id)objc_claimAutoreleasedReturnValue();
      v107 = -[NSMutableArray count](v354->_actionSets, "count");
      *(_DWORD *)buf = 138543618;
      v414 = v106;
      v415 = 2048;
      v416 = v107;
      _os_log_impl(&dword_1CD062000, v105, OS_LOG_TYPE_INFO, "%{public}@init: %ld user-defined actionSets; no builtin actionSets - creating....",
        buf,
        0x16u);

    }
    objc_autoreleasePoolPop(v103);
    v108 = v354->_actionSets;
    -[HMDHome _createBuiltinActionSets](v104, "_createBuiltinActionSets");
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableArray addObjectsFromArray:](v108, "addObjectsFromArray:", v109);

  }
  removedUsers = v354->_removedUsers;
  v111 = (void *)MEMORY[0x1E0C99E60];
  v409[0] = objc_opt_class();
  v409[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v409, 2);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v111, "setWithArray:", v112);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v113, CFSTR("HM.removedUsersCodingKey"));
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray setArray:](removedUsers, "setArray:", v114);

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v358 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v115 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v348, "containsValueForKey:", CFSTR("residentDevices")))
  {
    v116 = (void *)MEMORY[0x1E0C99E60];
    v408[0] = objc_opt_class();
    v408[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v408, 2);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "setWithArray:", v117);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v118, CFSTR("residentDevices"));
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v358, "addObjectsFromArray:", v119);

  }
  if (objc_msgSend(v348, "containsValueForKey:", CFSTR("HM.sharedUsers")))
  {
    v120 = (void *)MEMORY[0x1E0C99E60];
    v407[0] = objc_opt_class();
    v407[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v407, 2);
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v120, "setWithArray:", v121);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v122, CFSTR("HM.sharedUsers"));
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v115, "addObjectsFromArray:", v123);

  }
  v124 = (void *)MEMORY[0x1E0C99E60];
  v406[0] = objc_opt_class();
  v406[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v406, 2);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v124, "setWithArray:", v125);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v126, CFSTR("users"));
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "addObjectsFromArray:", v127);

  v381 = 0u;
  v382 = 0u;
  v379 = 0u;
  v380 = 0u;
  obj = v115;
  v128 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v379, v405, 16);
  if (v128)
  {
    v129 = v128;
    v355 = *(id *)v380;
    do
    {
      for (k = 0; k != v129; ++k)
      {
        if (*(id *)v380 != v355)
          objc_enumerationMutation(obj);
        v131 = *(void **)(*((_QWORD *)&v379 + 1) + 8 * k);
        v375 = 0u;
        v376 = 0u;
        v377 = 0u;
        v378 = 0u;
        v132 = v358;
        v133 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v375, v404, 16);
        if (v133)
        {
          v134 = v133;
          v135 = *(_QWORD *)v376;
          while (2)
          {
            for (m = 0; m != v134; ++m)
            {
              if (*(_QWORD *)v376 != v135)
                objc_enumerationMutation(v132);
              objc_msgSend(*(id *)(*((_QWORD *)&v375 + 1) + 8 * m), "userID");
              v137 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v131, "userID");
              v138 = (void *)objc_claimAutoreleasedReturnValue();
              v139 = objc_msgSend(v137, "isEqualToString:", v138);

              if ((v139 & 1) != 0)
              {

                goto LABEL_89;
              }
            }
            v134 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v375, v404, 16);
            if (v134)
              continue;
            break;
          }
        }

        -[NSMutableArray addObject:](v354->_users, "addObject:", v131);
LABEL_89:
        ;
      }
      v129 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v379, v405, 16);
    }
    while (v129);
  }

  users = v354->_users;
  objc_msgSend(v358, "allObjects");
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableArray addObjectsFromArray:](users, "addObjectsFromArray:", v141);

  v142 = (void *)MEMORY[0x1D17BA0A0]();
  v143 = v354;
  HMFGetOSLogHandle();
  v144 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v145 = (id)objc_claimAutoreleasedReturnValue();
    v146 = v354->_users;
    *(_DWORD *)buf = 138543618;
    v414 = v145;
    v415 = 2112;
    v416 = (uint64_t)v146;
    _os_log_impl(&dword_1CD062000, v144, OS_LOG_TYPE_DEBUG, "%{public}@Received users in the home data: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v142);
  v147 = v348;
  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("roomForEntireHome"));
  v148 = (HMDRoom *)objc_claimAutoreleasedReturnValue();
  HMDDefaultRoomName();
  v149 = objc_claimAutoreleasedReturnValue();
  v346 = (void *)v149;
  if (v148)
  {
    -[HMDRoom setName:](v148, "setName:", v149);
  }
  else
  {
    v150 = (void *)MEMORY[0x1D17BA0A0]();
    v151 = v143;
    HMFGetOSLogHandle();
    v152 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v152, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v153 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v414 = v153;
      _os_log_impl(&dword_1CD062000, v152, OS_LOG_TYPE_INFO, "%{public}@Missing roomForEntireHome - creating one", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v150);
    v148 = -[HMDRoom initWithName:uuid:home:]([HMDRoom alloc], "initWithName:uuid:home:", v346, 0, v151);
    v147 = v348;
  }
  objc_storeStrong(v143 + 147, v148);
  if (!isWatch())
  {
    objc_msgSend(v147, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeLocationHandler"));
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    if (v154)
      objc_storeStrong(v143 + 58, v154);

    v147 = v348;
  }
  objc_msgSend(v147, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("homeConfigVersion"));
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  v143[148] = (id)objc_msgSend(v155, "integerValue");

  v156 = v348;
  if (objc_msgSend(v348, "containsValueForKey:", CFSTR("lastSyncedHomeConfigVersion")))
  {
    objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("lastSyncedHomeConfigVersion"));
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    v143[149] = (id)objc_msgSend(v157, "integerValue");

    v156 = v348;
  }
  v341 = v148;
  if (!isWatch())
  {
    objc_msgSend(v156, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("characteristicNotificationRegistryCodingKey"));
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    v159 = v158;
    if (v158)
      v160 = v158;
    else
      v160 = objc_alloc_init(HMDNotificationRegistry);
    v161 = v143[154];
    v143[154] = v160;

    objc_msgSend(v143[154], "configureWithHome:", v143);
    v156 = v348;
  }
  if (isiOSDevice() || isTVOSDevice())
  {
    objc_msgSend(v156, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.allowsRemoteAccess"));
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    v163 = v162;
    if (v162)
      *((_BYTE *)v143 + 211) = objc_msgSend(v162, "BOOLValue");

    v156 = v348;
  }
  if (!isWatch())
  {
    v164 = v143[43];
    v165 = (void *)MEMORY[0x1E0C99E60];
    v403[0] = objc_opt_class();
    v403[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v403, 2);
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v165, "setWithArray:", v166);
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v156, "decodeObjectOfClasses:forKey:", v167, CFSTR("HM.invitations"));
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v164, "setArray:", v168);

    v373 = 0u;
    v374 = 0u;
    v371 = 0u;
    v372 = 0u;
    v356 = (id)objc_msgSend(v143[43], "copy");
    v169 = objc_msgSend(v356, "countByEnumeratingWithState:objects:count:", &v371, v402, 16);
    if (v169)
    {
      v170 = v169;
      v171 = *(_QWORD *)v372;
      do
      {
        for (n = 0; n != v170; ++n)
        {
          if (*(_QWORD *)v372 != v171)
            objc_enumerationMutation(v356);
          v173 = *(void **)(*((_QWORD *)&v371 + 1) + 8 * n);
          v367 = 0u;
          v368 = 0u;
          v369 = 0u;
          v370 = 0u;
          objc_msgSend(v173, "operations");
          v174 = (void *)objc_claimAutoreleasedReturnValue();
          v175 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v367, v401, 16);
          if (v175)
          {
            v176 = v175;
            v177 = *(_QWORD *)v368;
            do
            {
              for (ii = 0; ii != v176; ++ii)
              {
                if (*(_QWORD *)v368 != v177)
                  objc_enumerationMutation(v174);
                objc_msgSend(*(id *)(*((_QWORD *)&v367 + 1) + 8 * ii), "setDelegate:", v143);
              }
              v176 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v367, v401, 16);
            }
            while (v176);
          }

          objc_msgSend(v173, "user");
          v179 = (void *)objc_claimAutoreleasedReturnValue();
          v180 = v179;
          if (v179)
          {
            v181 = v354->_users;
            objc_msgSend(v179, "userID");
            v182 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSMutableArray hmf_firstObjectWithValue:forKeyPath:](v181, "hmf_firstObjectWithValue:forKeyPath:", v182, CFSTR("userID"));
            v183 = (void *)objc_claimAutoreleasedReturnValue();

            if (v183 && objc_msgSend(v173, "isComplete"))
            {
              objc_msgSend(v143[43], "removeObject:", v173);
            }
            else if (objc_msgSend(v173, "isAccepted"))
            {
              -[NSMutableArray addObject:](v354->_users, "addObject:", v180);
              objc_msgSend(v143[144], "addObject:", v180);
              objc_msgSend(v180, "setHome:", v143);
            }

          }
        }
        v170 = objc_msgSend(v356, "countByEnumeratingWithState:objects:count:", &v371, v402, 16);
      }
      while (v170);
    }

    v156 = v348;
  }
  objc_msgSend(v156, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.residentDeviceManager"));
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  if (v184)
  {
    objc_storeStrong(v143 + 162, v184);
    objc_msgSend(v143, "_purgeResidentUsers");
  }
  v340 = v184;
  v143[180] = (id)objc_msgSend(v156, "decodeIntegerForKey:", CFSTR("HMD.nonIPadResidentDeviceCount"));
  if (objc_msgSend(v143, "isOwnerUser"))
  {
    objc_msgSend(v143, "currentUserFactory");
    v185 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, uint64_t, id *))v185)[2](v185, 3, v143);
    v186 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v156, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kHomeOwnerUUID"));
    v187 = objc_claimAutoreleasedReturnValue();
    if (v187)
    {
      v188 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v187);
      objc_msgSend(v186, "setUUID:", v188);

    }
    v339 = (void *)v187;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v350 = (void *)objc_claimAutoreleasedReturnValue();
    v363 = 0u;
    v364 = 0u;
    v365 = 0u;
    v366 = 0u;
    v189 = v354->_users;
    v190 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v189, "countByEnumeratingWithState:objects:count:", &v363, v400, 16);
    v349 = v186;
    if (v190)
    {
      v191 = v190;
      v192 = 0;
      v193 = *(_QWORD *)v364;
      do
      {
        for (jj = 0; jj != v191; ++jj)
        {
          if (*(_QWORD *)v364 != v193)
            objc_enumerationMutation(v189);
          v195 = *(void **)(*((_QWORD *)&v363 + 1) + 8 * jj);
          if (objc_msgSend(v195, "privilege") == 3 && (objc_msgSend(v195, "isRemoteGateway") & 1) == 0)
          {
            v196 = v192;
            if (v192)
              goto LABEL_152;
            objc_msgSend(v195, "pairingUsername");
            v197 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v186, "pairingUsername");
            v198 = (void *)objc_claimAutoreleasedReturnValue();
            v199 = objc_msgSend(v197, "isEqual:", v198);

            v186 = v349;
            if (!v199)
            {
LABEL_152:
              objc_msgSend(v350, "addObject:", v195);
              v192 = v196;
            }
            else
            {
              v192 = v195;
            }
          }
        }
        v191 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v189, "countByEnumeratingWithState:objects:count:", &v363, v400, 16);
      }
      while (v191);
    }
    else
    {
      v192 = 0;
    }

    -[NSMutableArray removeObjectsInArray:](v354->_users, "removeObjectsInArray:", v350);
    v209 = v192;
    v210 = v143 + 5;
    v338 = v209;
    v211 = v143 + 5;
    if (v209)
    {
      objc_storeStrong(v211, v209);
    }
    else
    {
      objc_storeStrong(v211, v186);
      -[NSMutableArray addObject:](v354->_users, "addObject:", v186, 0);
      objc_msgSend(v186, "setHome:", v143);
    }
    objc_storeStrong(v143 + 6, *v210);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v359 = 0u;
    v360 = 0u;
    v361 = 0u;
    v362 = 0u;
    v212 = (void *)objc_claimAutoreleasedReturnValue();
    v213 = v354->_users;
    v357 = (id)-[NSMutableArray countByEnumeratingWithState:objects:count:](v213, "countByEnumeratingWithState:objects:count:", &v359, v399, 16);
    if (v357)
    {
      v214 = *(_QWORD *)v360;
      do
      {
        for (kk = 0; kk != v357; kk = (char *)kk + 1)
        {
          if (*(_QWORD *)v360 != v214)
            objc_enumerationMutation(v213);
          v216 = *(void **)(*((_QWORD *)&v359 + 1) + 8 * (_QWORD)kk);
          objc_msgSend(v216, "pairingUsername", v338);
          v217 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*v210, "pairingUsername");
          v218 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v217, "isEqual:", v218))
          {
            if (!objc_msgSend(v216, "privilege"))
            {

              goto LABEL_182;
            }
            v219 = objc_msgSend(v216, "privilege");

            if (v219 == 4)
              goto LABEL_182;
          }
          else
          {

          }
          if ((objc_msgSend(v216, "isValid") & 1) != 0)
            continue;
          v220 = (void *)MEMORY[0x1D17BA0A0]();
          v221 = v143;
          HMFGetOSLogHandle();
          v222 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v351 = v220;
            v223 = v214;
            v224 = v213;
            v225 = v210;
            v226 = v212;
            v227 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v414 = v227;
            v415 = 2112;
            v416 = (uint64_t)v216;
            _os_log_impl(&dword_1CD062000, v222, OS_LOG_TYPE_DEFAULT, "%{public}@Removing invalid user %@", buf, 0x16u);

            v212 = v226;
            v210 = v225;
            v213 = v224;
            v214 = v223;
            v220 = v351;
          }

          objc_autoreleasePoolPop(v220);
LABEL_182:
          objc_msgSend(v212, "addObject:", v216);
        }
        v357 = (id)-[NSMutableArray countByEnumeratingWithState:objects:count:](v213, "countByEnumeratingWithState:objects:count:", &v359, v399, 16);
      }
      while (v357);
    }

    -[NSMutableArray removeObjectsInArray:](v354->_users, "removeObjectsInArray:", v212);
    v206 = v349;
LABEL_186:

    goto LABEL_187;
  }
  objc_msgSend(v143, "currentUser");
  v200 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v200)
  {
    v201 = (void *)MEMORY[0x1D17BA0A0]();
    v202 = v143;
    HMFGetOSLogHandle();
    v203 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v204 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v414 = v204;
      _os_log_impl(&dword_1CD062000, v203, OS_LOG_TYPE_DEFAULT, "%{public}@Current user not found, creating", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v201);
    objc_msgSend(v202, "currentUserFactory");
    v205 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, id *))v205)[2](v205, 0, v202);
    v206 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v206)
    {
      v334 = (void *)MEMORY[0x1D17BA0A0]();
      v335 = v202;
      HMFGetOSLogHandle();
      v336 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v336, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v337 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v414 = v337;
        _os_log_impl(&dword_1CD062000, v336, OS_LOG_TYPE_ERROR, "%{public}@Current user cannot be found or created, failing to deserialize home", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v334);
      v330 = 0;
      v6 = v344;
      goto LABEL_239;
    }
    objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kHomeOwnerUUID"));
    v207 = objc_claimAutoreleasedReturnValue();
    if (v207)
    {
      v208 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v207);
      objc_msgSend(v206, "setUUID:", v208);

    }
    v339 = (void *)v207;
    objc_storeStrong(v202 + 6, v206);
    -[NSMutableArray addObject:](v354->_users, "addObject:", v206);
    objc_msgSend(v206, "setHome:", v202);
    goto LABEL_186;
  }
LABEL_187:
  objc_msgSend(MEMORY[0x1E0CBA950], "authWithCoder:", v348, v338);
  v228 = objc_claimAutoreleasedReturnValue();
  v229 = v143[59];
  v143[59] = (id)v228;

  objc_msgSend(v143[6], "setPresenceAuthStatus:", v143[59]);
  objc_msgSend(MEMORY[0x1E0CBA958], "computeWithCoder:", v348);
  v230 = objc_claimAutoreleasedReturnValue();
  v231 = v143[60];
  v143[60] = (id)v230;

  v232 = (void *)MEMORY[0x1D17BA0A0]();
  v233 = v143;
  HMFGetOSLogHandle();
  v234 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v235 = (id)objc_claimAutoreleasedReturnValue();
    v236 = v143[6];
    *(_DWORD *)buf = 138543618;
    v414 = v235;
    v415 = 2112;
    v416 = (uint64_t)v236;
    _os_log_impl(&dword_1CD062000, v234, OS_LOG_TYPE_INFO, "%{public}@Current user is %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v232);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v237 = (void *)objc_claimAutoreleasedReturnValue();
  v238 = v348;
  if (objc_msgSend(v348, "containsValueForKey:", CFSTR("triggers")))
  {
    v239 = (void *)MEMORY[0x1E0C99E60];
    v398[0] = objc_opt_class();
    v398[1] = objc_opt_class();
    v398[2] = objc_opt_class();
    v398[3] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v398, 4);
    v240 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v239, "setWithArray:", v240);
    v241 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v241, CFSTR("triggers"));
    v242 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v237, "addObjectsFromArray:", v242);

    v238 = v348;
  }
  if (objc_msgSend(v238, "containsValueForKey:", CFSTR("HM.triggers")))
  {
    v243 = (void *)MEMORY[0x1E0C99E60];
    v397[0] = objc_opt_class();
    v397[1] = objc_opt_class();
    v397[2] = objc_opt_class();
    v397[3] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v397, 4);
    v244 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v243, "setWithArray:", v244);
    v245 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v245, CFSTR("HM.triggers"));
    v246 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v237, "addObjectsFromArray:", v246);

    v238 = v348;
  }
  if (objc_msgSend(v238, "containsValueForKey:", CFSTR("HM.homePodTriggers")))
  {
    v247 = (void *)MEMORY[0x1E0C99E60];
    v396[0] = objc_opt_class();
    v396[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v396, 2);
    v248 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v247, "setWithArray:", v248);
    v249 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v249, CFSTR("HM.homePodTriggers"));
    v250 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v237, "addObjectsFromArray:", v250);

    v238 = v348;
  }
  if (objc_msgSend(v238, "containsValueForKey:", CFSTR("HM.sharedActivationTriggers")))
  {
    v251 = (void *)MEMORY[0x1E0C99E60];
    v395[0] = objc_opt_class();
    v395[1] = objc_opt_class();
    v395[2] = objc_opt_class();
    v395[3] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v395, 4);
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v251, "setWithArray:", v252);
    v253 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v238, "decodeObjectOfClasses:forKey:", v253, CFSTR("HM.sharedActivationTriggers"));
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v237, "addObjectsFromArray:", v254);

  }
  objc_msgSend(v233[42], "setArray:", v237);
  v255 = v233[171];
  v256 = (void *)MEMORY[0x1E0C99E60];
  v394[0] = objc_opt_class();
  v394[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v394, 2);
  v257 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v256, "setWithArray:", v257);
  v258 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v238, "decodeObjectOfClasses:forKey:", v258, CFSTR("HM.deviceOwnedTriggers"));
  v259 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v255, "setArray:", v259);

  objc_msgSend(v238, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.appDataRepository"));
  v260 = objc_claimAutoreleasedReturnValue();
  v261 = v233[122];
  v233[122] = (id)v260;

  objc_msgSend(v233[122], "updateParentUUIDIfNil:", v354->_uuid);
  v262 = *MEMORY[0x1E0CB8D10];
  if (objc_msgSend(v238, "containsValueForKey:", *MEMORY[0x1E0CB8D10]))
    *((_BYTE *)v233 + 56) = objc_msgSend(v238, "decodeBoolForKey:", v262);
  v263 = *MEMORY[0x1E0CB8D18];
  if (objc_msgSend(v238, "containsValueForKey:", *MEMORY[0x1E0CB8D18]))
    *((_BYTE *)v233 + 57) = objc_msgSend(v238, "decodeBoolForKey:", v263);
  v264 = *MEMORY[0x1E0CB9138];
  if (objc_msgSend(v238, "containsValueForKey:", *MEMORY[0x1E0CB9138]))
    v233[8] = (id)objc_msgSend(v238, "decodeIntegerForKey:", v264);
  v265 = *MEMORY[0x1E0CB9150];
  if (objc_msgSend(v238, "containsValueForKey:", *MEMORY[0x1E0CB9150]))
    *((_BYTE *)v233 + 72) = objc_msgSend(v238, "decodeBoolForKey:", v265);
  v266 = *MEMORY[0x1E0CB9140];
  if (objc_msgSend(v238, "containsValueForKey:", *MEMORY[0x1E0CB9140]))
  {
    objc_msgSend(v238, "decodeObjectOfClass:forKey:", objc_opt_class(), v266);
    v267 = objc_claimAutoreleasedReturnValue();
    v268 = v233[10];
    v233[10] = (id)v267;

  }
  objc_msgSend(v238, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kHomeKitVersionStringKey"));
  v269 = objc_claimAutoreleasedReturnValue();
  v270 = v233[174];
  v233[174] = (id)v269;

  v271 = v233[174];
  if (v271)
  {
    v272 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("6.1"));
    v273 = objc_msgSend(v271, "isAtLeastVersion:", v272);

    if (v273)
      *((_BYTE *)v233 + 188) = 1;
  }
  v274 = *MEMORY[0x1E0CB9180];
  if (objc_msgSend(v348, "containsValueForKey:", *MEMORY[0x1E0CB9180]))
    v275 = objc_msgSend(v348, "decodeIntegerForKey:", v274);
  else
    v275 = 0;
  v233[30] = (id)v275;
  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.minimumNetworkRouterSupportHomeKitVersion"));
  v276 = (void *)objc_claimAutoreleasedReturnValue();
  if (v276)
  {
    v277 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", v276);
    v278 = v233[37];
    v233[37] = v277;

  }
  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.minHomeKitVersionForAccessoryNetworkProtectionChangeCodingKey"));
  v279 = (void *)objc_claimAutoreleasedReturnValue();

  if (v279)
  {
    v280 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", v279);
    v281 = v233[38];
    v233[38] = v280;

  }
  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.activeNetworkRouter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v282 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v6);
    v283 = v233[33];
    v233[33] = (id)v282;

  }
  if (objc_msgSend(v348, "containsValueForKey:", CFSTR("HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey")))
  {
    objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"));
    v284 = objc_claimAutoreleasedReturnValue();
    v285 = v233[35];
    v233[35] = (id)v284;

  }
  v286 = (void *)MEMORY[0x1E0C99E60];
  v393[0] = objc_opt_class();
  v393[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v393, 2);
  v287 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v286, "setWithArray:", v287);
  v288 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v288, *MEMORY[0x1E0CB8CC8]);
  v289 = (void *)objc_claimAutoreleasedReturnValue();

  v290 = [HMDAccessoryNetworkProtectionGroupRegistry alloc];
  objc_msgSend(v233, "notificationCenter");
  v291 = (void *)objc_claimAutoreleasedReturnValue();
  v292 = -[HMDAccessoryNetworkProtectionGroupRegistry initWithHome:notificationCenter:persistedGroups:](v290, "initWithHome:notificationCenter:persistedGroups:", v233, v291, v289);
  v293 = v233[32];
  v233[32] = (id)v292;

  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHH.residentReachabilityContext"));
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  v295 = v294;
  if (v294)
  {
    v296 = v294;
  }
  else
  {
    v296 = objc_alloc_init(HMDResidentReachabilityContext);

  }
  v297 = -[HMDResidentReachabilityNotificationManager initWithResidentReachabilityContext:workQueue:]([HMDResidentReachabilityNotificationManager alloc], "initWithResidentReachabilityContext:workQueue:", v296, v233[129]);
  v298 = v233[177];
  v233[177] = v297;

  v299 = v348;
  if (objc_msgSend(v348, "containsValueForKey:", CFSTR("HMHM.threadNetworkID")))
  {
    objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.threadNetworkID"));
    v300 = objc_claimAutoreleasedReturnValue();
    v301 = v233[44];
    v233[44] = (id)v300;

  }
  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x1E0CB91A0]);
  v302 = objc_claimAutoreleasedReturnValue();
  v303 = v233[51];
  v233[51] = (id)v302;

  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.personManagerZoneUUID"));
  v304 = objc_claimAutoreleasedReturnValue();
  v305 = v233[176];
  v233[176] = (id)v304;

  objc_msgSend(v348, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.nlcck"));
  v306 = objc_claimAutoreleasedReturnValue();
  v307 = v233[52];
  v233[52] = (id)v306;

  if (objc_msgSend(v348, "containsValueForKey:", CFSTR("HMDHomeLabelsByAccessCodeCodingKey")))
  {
    v308 = (void *)MEMORY[0x1E0C99E60];
    v392[0] = objc_opt_class();
    v392[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v392, 2);
    v309 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v308, "setWithArray:", v309);
    v310 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v310, CFSTR("HMDHomeLabelsByAccessCodeCodingKey"));
    v311 = (void *)objc_claimAutoreleasedReturnValue();

    v299 = v348;
    v312 = objc_msgSend(v311, "mutableCopy");
    v313 = v233[78];
    v233[78] = (id)v312;

  }
  if (objc_msgSend(v299, "containsValueForKey:", CFSTR("HMDHomeRemovedUserInfoByAccessCodeCodingKey")))
  {
    v314 = (void *)MEMORY[0x1E0C99E60];
    v391[0] = objc_opt_class();
    v391[1] = objc_opt_class();
    v391[2] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v391, 3);
    v315 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v314, "setWithArray:", v315);
    v316 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v348, "decodeObjectOfClasses:forKey:", v316, CFSTR("HMDHomeRemovedUserInfoByAccessCodeCodingKey"));
    v317 = (void *)objc_claimAutoreleasedReturnValue();

    v299 = v348;
    v318 = objc_msgSend(v317, "mutableCopy");
    v319 = v233[79];
    v233[79] = (id)v318;

  }
  if (objc_msgSend(v299, "containsValueForKey:", CFSTR("HMDHomeNFCReaderKeyCodingKey")))
  {
    objc_msgSend(v299, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMDHomeNFCReaderKeyCodingKey"));
    v320 = objc_claimAutoreleasedReturnValue();
    v321 = v233[47];
    v233[47] = (id)v320;

  }
  else
  {
    *((_BYTE *)v233 + 203) = 0;
  }
  objc_msgSend(v299, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMHM.chipStorage"));
  v322 = (void *)objc_claimAutoreleasedReturnValue();
  if (v322)
  {
    objc_storeStrong(v233 + 182, v322);
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
    {
      v352 = v279;
      v323 = v237;
      objc_msgSend(v322, "fabricID");
      v324 = (void *)objc_claimAutoreleasedReturnValue();

      if (v324)
      {
        objc_msgSend(v322, "fabricID");
        v325 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v233[183], "setFabricID:", v325);

      }
      objc_msgSend(v233, "homeManager");
      v326 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v326, "accessoryBrowser");
      v327 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v327, "chipAccessoryServerBrowser");
      v328 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v328, "storage");
      v329 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v233[183], "setStorage:", v329);

      v237 = v323;
      v279 = v352;
    }
  }
  *((_BYTE *)v233 + 214) = objc_msgSend(v348, "decodeBoolForKey:", *MEMORY[0x1E0CB92E0]);

  v330 = 1;
LABEL_239:

  v5 = v345;
  if (!v330)
  {
    v332 = 0;
    v331 = v354;
    goto LABEL_243;
  }
  v7 = v354;
LABEL_241:
  v331 = v7;
  v332 = v7;
LABEL_243:

  return v332;
}

- (void)encodeWithCoder:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  -[HMDHome _encodeWithCoder:](self, "_encodeWithCoder:", v5);
  objc_autoreleasePoolPop(v4);

}

- (void)_encodeWithCoder:(id)a3
{
  id v4;
  int v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int64_t v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  _BOOL8 v30;
  void *v31;
  _BOOL8 v32;
  _BOOL8 v33;
  _BOOL8 v34;
  _BOOL8 v35;
  _BOOL8 v36;
  void *v37;
  int v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  _BOOL4 v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  int v53;
  void *v54;
  __CFString **v55;
  void *v56;
  void *v57;
  void *v58;
  __int16 v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t j;
  void *v74;
  void *v75;
  void *v76;
  int v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  _BOOL4 v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t k;
  void *v91;
  uint64_t v92;
  void *v93;
  char v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t m;
  void *v103;
  void *v104;
  char v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  char v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t n;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t ii;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t jj;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t kk;
  void *v149;
  void *v150;
  int v151;
  void *v152;
  void *v153;
  HMDHome *v154;
  NSObject *v155;
  id v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t mm;
  void *v163;
  void *v164;
  int v165;
  void *v166;
  HMDHome *v167;
  NSObject *v168;
  id v169;
  void *v170;
  void *v171;
  void *v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  char v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t nn;
  void *v222;
  void *v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void *v228;
  int v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  const __CFString *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  void *v246;
  int v247;
  int v248;
  __int16 v249;
  int v250;
  int v251;
  uint64_t v252;
  HMDHome *v253;
  id v254;
  void *v255;
  id v256;
  void *v257;
  void *v258;
  HMDHome *v259;
  void *v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint8_t v301[128];
  uint8_t buf[4];
  id v303;
  __int16 v304;
  id v305;
  __int16 v306;
  void *v307;
  __int16 v308;
  void *v309;
  _BYTE v310[128];
  _BYTE v311[128];
  _BYTE v312[128];
  _BYTE v313[128];
  _BYTE v314[128];
  _BYTE v315[128];
  _BYTE v316[128];
  _BYTE v317[128];
  _BYTE v318[128];
  uint64_t v319;

  v319 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v250 = objc_msgSend(v4, "hmd_isForXPCTransport");
  v5 = objc_msgSend(v4, "hmd_isForLocalStore");
  v248 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  v247 = objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount");
  v249 = objc_msgSend(v4, "hmd_homeManagerOptions");
  v251 = v5;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHome isOwnerUser](v7, "isOwnerUser");
      HMFBooleanToString();
      v10 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v303 = v9;
      v304 = 2112;
      v305 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Encoding isOwnerUser : %@ for HH2 migration", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isOwnerUser](v7, "isOwnerUser"), CFSTR("HM.Owner.HH2.MI"));
  }
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v12, CFSTR("homeUUID"));

  -[HMDHome ownerName](self, "ownerName");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v13, CFSTR("homeAdmin"));

  -[HMDUser uuid](self->_owner, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v15, CFSTR("kHomeOwnerUUID"));

  -[HMDHome creationDate](self, "creationDate");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v16, CFSTR("creationDate"));

  -[HMDHome firstHAPAccessoryAddedDate](self, "firstHAPAccessoryAddedDate");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v17, CFSTR("firstHAPAccessoryAddedDate"));

  v18 = -[HMDHome configurationVersion](self, "configurationVersion");
  objc_msgSend(v4, "hmd_supportedFeatures");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "containsObject:", &unk_1E8B32880);

  if (v20)
  {
    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "preferenceForKey:", CFSTR("homeHH2MigrationConfigurationVersionIncrement"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "numberValue");
    v23 = objc_claimAutoreleasedReturnValue();

    if (v23)
      v24 = (void *)v23;
    else
      v24 = &unk_1E8B32898;
    v18 += (int)objc_msgSend(v24, "intValue");

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v18);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v25, CFSTR("homeConfigVersion"));

  -[HMDHome name](self, "name");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v26, CFSTR("homeName"));

  v27 = -[HMDHome homeHubState](self, "homeHubState");
  objc_msgSend(v4, "encodeInteger:forKey:", v27, *MEMORY[0x1E0CB8DD0]);
  v28 = -[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled");
  objc_msgSend(v4, "encodeBool:forKey:", v28, *MEMORY[0x1E0CB9178]);
  if (isFeatureHomeTheaterQFAEnabledForTests)
    v29 = objc_msgSend((id)isFeatureHomeTheaterQFAEnabledForTests, "BOOLValue");
  else
    v29 = 0;
  objc_msgSend(v4, "encodeBool:forKey:", v29, *MEMORY[0x1E0CB9270]);
  v30 = -[HMDHome soundCheckEnabled](self, "soundCheckEnabled");
  objc_msgSend(v4, "encodeBool:forKey:", v30, *MEMORY[0x1E0CB9258]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMDHome siriPhraseOptions](self, "siriPhraseOptions"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v31, *MEMORY[0x1E0CB9248]);

  v32 = -[HMDHome locationServicesEnabled](self, "locationServicesEnabled");
  objc_msgSend(v4, "encodeBool:forKey:", v32, *MEMORY[0x1E0CB8E18]);
  v33 = -[HMDHome didOnboardLocationServices](self, "didOnboardLocationServices");
  objc_msgSend(v4, "encodeBool:forKey:", v33, *MEMORY[0x1E0CB8D38]);
  v34 = -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
  objc_msgSend(v4, "encodeBool:forKey:", v34, *MEMORY[0x1E0CB8DB8]);
  v35 = -[HMDHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode");
  objc_msgSend(v4, "encodeBool:forKey:", v35, *MEMORY[0x1E0CB8DC0]);
  v36 = -[HMDHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey");
  objc_msgSend(v4, "encodeBool:forKey:", v36, *MEMORY[0x1E0CB8DC8]);
  objc_msgSend(v4, "hmd_supportedFeatures");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(v37, "containsObject:", &unk_1E8B32880);

  v39 = (void *)MEMORY[0x1D17BA0A0]();
  v40 = self;
  HMFGetOSLogHandle();
  v41 = (id)objc_claimAutoreleasedReturnValue();
  v42 = os_log_type_enabled(v41, OS_LOG_TYPE_INFO);
  if (v38)
  {
    if (v42)
    {
      HMFGetLogIdentifier();
      v43 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v303 = v43;
      _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Forcing isUpdatedToHH2 to YES", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v39);
    v44 = 1;
  }
  else
  {
    if (v42)
    {
      HMFGetLogIdentifier();
      v45 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHome isUpdatedToHH2](v40, "isUpdatedToHH2");
      HMFBooleanToString();
      v46 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v303 = v45;
      v304 = 2112;
      v305 = v46;
      _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@isUpdatedToHH2 is set to %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v39);
    v44 = -[HMDHome isUpdatedToHH2](v40, "isUpdatedToHH2");
  }
  objc_msgSend(v4, "encodeBool:forKey:", v44, *MEMORY[0x1E0CB92E0]);
  if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
  {
    v47 = -[HMDHome bulletinNotificationsSupported](v40, "bulletinNotificationsSupported");
    objc_msgSend(v4, "encodeBool:forKey:", v47, *MEMORY[0x1E0CB8D20]);
  }
  if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    if ((v250 & v248) != 1)
    {
      -[HMDHome homeLocationHandler](v40, "homeLocationHandler");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = &kHomeLocationHandlerCodingKey;
      goto LABEL_30;
    }
    if (objc_msgSend(v4, "hmd_isForXPCTransportAuthorizedForLocationAccess"))
    {
      -[HMDHome homeLocationHandler](v40, "homeLocationHandler");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "location");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v49, CFSTR("homeLocation"));

      if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForHomeLocationAccess"))
      {
        v50 = -[HMDHome homeLocation](v40, "homeLocation");
        objc_msgSend(v4, "encodeInteger:forKey:", v50, *MEMORY[0x1E0CB8E28]);
      }
    }
    -[HMDHome primaryResident](v40, "primaryResident");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "capabilities");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = objc_msgSend(v52, "supportsSiriEndpointSetup");

    if (v53)
    {
      v54 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286E0]), "initWithVersionString:", CFSTR("7.2"));
      v55 = (__CFString **)MEMORY[0x1E0CB9240];
LABEL_30:
      objc_msgSend(v4, "encodeObject:forKey:", v54, *v55);

    }
  }
  if (v251)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[HMDHome lastSyncedConfigurationVersion](v40, "lastSyncedConfigurationVersion"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v56, CFSTR("lastSyncedHomeConfigVersion"));

    -[HMDHome reachabilityNotificationManager](v40, "reachabilityNotificationManager");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "reachabilityContext");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v58, CFSTR("HMHH.residentReachabilityContext"));

  }
  v59 = v249;
  if ((v249 & 9) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    v297 = 0u;
    v298 = 0u;
    v299 = 0u;
    v300 = 0u;
    -[HMDHome _residentUsers](v40, "_residentUsers");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v297, v318, 16);
    if (v61)
    {
      v62 = v61;
      v63 = *(_QWORD *)v298;
      do
      {
        for (i = 0; i != v62; ++i)
        {
          if (*(_QWORD *)v298 != v63)
            objc_enumerationMutation(v60);
          v65 = *(void **)(*((_QWORD *)&v297 + 1) + 8 * i);
          objc_msgSend(v65, "userID");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v66);
          v67 = (void *)objc_claimAutoreleasedReturnValue();

          if (v67)
            objc_msgSend(v260, "setObject:forKey:", v65, v67);

        }
        v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v297, v318, 16);
      }
      while (v62);
    }

    v295 = 0u;
    v296 = 0u;
    v293 = 0u;
    v294 = 0u;
    -[HMDHome residentDeviceManager](v40, "residentDeviceManager");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "residentDevices");
    v69 = (void *)objc_claimAutoreleasedReturnValue();

    v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v293, v317, 16);
    if (v70)
    {
      v71 = v70;
      v72 = *(_QWORD *)v294;
      do
      {
        for (j = 0; j != v71; ++j)
        {
          if (*(_QWORD *)v294 != v72)
            objc_enumerationMutation(v69);
          v74 = *(void **)(*((_QWORD *)&v293 + 1) + 8 * j);
          objc_msgSend(v74, "device");
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v75, "capabilities");
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          v77 = objc_msgSend(v76, "isRemoteGatewayCapable");

          if (v77)
          {
            -[HMDHome _residentUserForResidentDevice:](v40, "_residentUserForResidentDevice:", v74);
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            if (v78)
            {
              objc_msgSend(v74, "device");
              v79 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v260, "setObject:forKey:", v78, v79);

            }
          }
        }
        v71 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v293, v317, 16);
      }
      while (v71);
    }

    objc_msgSend(v260, "objectEnumerator");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "allObjects");
    v81 = (void *)objc_claimAutoreleasedReturnValue();

    v259 = v40;
    if (v250 && (!isAppleTV() | v248) == 1)
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v82 = objc_claimAutoreleasedReturnValue();
      v83 = (void *)v82;
      if ((v248 & 1) != 0)
      {
        v255 = v4;
        v257 = (void *)v82;
        v245 = v81;
        -[HMDHome owner](v40, "owner");
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        v85 = -[HMDHome isOwnerUser](v40, "isOwnerUser");
        v289 = 0u;
        v290 = 0u;
        v291 = 0u;
        v292 = 0u;
        -[HMDHome users](v40, "users");
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v289, v316, 16);
        if (v87)
        {
          v88 = v87;
          v89 = *(_QWORD *)v290;
          do
          {
            for (k = 0; k != v88; ++k)
            {
              if (*(_QWORD *)v290 != v89)
                objc_enumerationMutation(v86);
              v91 = *(void **)(*((_QWORD *)&v289 + 1) + 8 * k);
              if (!v85 || (objc_msgSend(*(id *)(*((_QWORD *)&v289 + 1) + 8 * k), "isEqual:", v84) & 1) == 0)
              {
                objc_msgSend(v91, "userID");
                v92 = objc_claimAutoreleasedReturnValue();
                if (!v92)
                  continue;
                v93 = (void *)v92;
                v94 = objc_msgSend(v91, "isRemoteGateway");

                if ((v94 & 1) != 0)
                  continue;
              }
              objc_msgSend(v257, "addObject:", v91);
            }
            v88 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v289, v316, 16);
          }
          while (v88);
        }

        v40 = v259;
        v4 = v255;
        v83 = v257;
        v81 = v245;
        if (-[HMDHome isAdminUser](v259, "isAdminUser"))
        {
          v95 = (void *)MEMORY[0x1E0C99DE8];
          -[HMDHome outgoingInvitations](v259, "outgoingInvitations");
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v95, "arrayWithCapacity:", objc_msgSend(v96, "count"));
          v97 = (void *)objc_claimAutoreleasedReturnValue();

          v287 = 0u;
          v288 = 0u;
          v285 = 0u;
          v286 = 0u;
          -[HMDHome outgoingInvitations](v259, "outgoingInvitations");
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          v99 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v285, v315, 16);
          if (v99)
          {
            v100 = v99;
            v101 = *(_QWORD *)v286;
            do
            {
              for (m = 0; m != v100; ++m)
              {
                if (*(_QWORD *)v286 != v101)
                  objc_enumerationMutation(v98);
                v103 = *(void **)(*((_QWORD *)&v285 + 1) + 8 * m);
                objc_msgSend(v103, "user");
                v104 = (void *)objc_claimAutoreleasedReturnValue();
                v105 = objc_msgSend(v104, "isRemoteGateway");

                if ((v105 & 1) == 0)
                  objc_msgSend(v97, "addObject:", v103);
              }
              v100 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v285, v315, 16);
            }
            while (v100);
          }

          v106 = (void *)objc_msgSend(v97, "copy");
          objc_msgSend(v255, "encodeObject:forKey:", v106, CFSTR("HM.invitations"));

          v81 = v245;
          v83 = v257;
        }
      }
      else
      {
        -[HMDHome isAdminUser](v40, "isAdminUser");
      }
      v176 = (void *)objc_msgSend(v83, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v176, CFSTR("users"));

      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isAdminUser](v40, "isAdminUser"), CFSTR("isAdminUser"));
      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHome isOwnerUser](v40, "isOwnerUser"), CFSTR("HM.isOwnerUser"));
      v177 = -[HMDHome isAccessToHomeAllowed](v40, "isAccessToHomeAllowed");
      objc_msgSend(v4, "encodeBool:forKey:", v177, *MEMORY[0x1E0CB8DF8]);
      v59 = v249;
      if ((v177 & 1) == 0)
      {
        v178 = -[HMDHome accessNotAllowedReasonCode](v40, "accessNotAllowedReasonCode");
        objc_msgSend(v4, "encodeInteger:forKey:", v178, *MEMORY[0x1E0CB8CB0]);
      }
      -[HMDHome overriddenHomeAccessControl](v40, "overriddenHomeAccessControl");
      v179 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v179)
        goto LABEL_150;
      -[HMDHome overriddenHomeAccessControl](v40, "overriddenHomeAccessControl");
      v122 = (id)objc_claimAutoreleasedReturnValue();
      v180 = objc_msgSend(v122, "unsignedIntegerValue");
      objc_msgSend(v4, "encodeInteger:forKey:", v180, *MEMORY[0x1E0CB8CA8]);
    }
    else
    {
      v59 = v249;
      if ((v251 | v247) == 1)
      {
        v107 = (void *)MEMORY[0x1E0C99DE8];
        -[HMDHome users](v40, "users");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v107, "arrayWithArray:", v108);
        v83 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount"))
        {
          objc_msgSend(v4, "hmd_supportedFeatures");
          v109 = (void *)objc_claimAutoreleasedReturnValue();
          v110 = objc_msgSend(v109, "containsObject:", &unk_1E8B328B0);

          if ((v110 & 1) == 0)
          {
            v111 = v81;
            v283 = 0u;
            v284 = 0u;
            v281 = 0u;
            v282 = 0u;
            -[HMDHome users](v40, "users");
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            v113 = (void *)objc_msgSend(v112, "copy");

            v114 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v281, v314, 16);
            if (v114)
            {
              v115 = v114;
              v116 = *(_QWORD *)v282;
              do
              {
                for (n = 0; n != v115; ++n)
                {
                  if (*(_QWORD *)v282 != v116)
                    objc_enumerationMutation(v113);
                  v118 = *(void **)(*((_QWORD *)&v281 + 1) + 8 * n);
                  if (objc_msgSend(v118, "requiresMakoSupport"))
                    objc_msgSend(v83, "removeObject:", v118);
                }
                v115 = objc_msgSend(v113, "countByEnumeratingWithState:objects:count:", &v281, v314, 16);
              }
              while (v115);
            }

            v81 = v111;
          }
        }
        v119 = (void *)objc_msgSend(v81, "mutableCopy");
        objc_msgSend(v83, "removeObjectsInArray:", v81);
        if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
        {
          -[HMDHome usersPendingUserManagementOperations](v40, "usersPendingUserManagementOperations");
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "removeObjectsInArray:", v120);

          -[HMDHome usersPendingUserManagementOperations](v40, "usersPendingUserManagementOperations");
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v119, "removeObjectsInArray:", v121);

        }
        v279 = 0u;
        v280 = 0u;
        v277 = 0u;
        v278 = 0u;
        v122 = v119;
        v123 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v277, v313, 16);
        if (v123)
        {
          v124 = v123;
          v125 = *(_QWORD *)v278;
          do
          {
            for (ii = 0; ii != v124; ++ii)
            {
              if (*(_QWORD *)v278 != v125)
                objc_enumerationMutation(v122);
              objc_msgSend(*(id *)(*((_QWORD *)&v277 + 1) + 8 * ii), "legacyUser");
              v127 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "addObject:", v127);

            }
            v124 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v277, v313, 16);
          }
          while (v124);
        }

        v128 = (void *)objc_msgSend(v83, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v128, CFSTR("users"));

        v129 = (void *)objc_msgSend(v122, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v129, CFSTR("residentDevices"));

        v59 = v249;
      }
      else
      {
        if (!objc_msgSend(v4, "hmd_isForRemoteTransport"))
        {
LABEL_151:

          goto LABEL_152;
        }
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome owner](v40, "owner");
        v130 = (void *)objc_claimAutoreleasedReturnValue();

        if (v130)
        {
          -[HMDHome owner](v40, "owner");
          v131 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "addObject:", v131);

          objc_msgSend(v4, "hmd_user");
          v132 = (void *)objc_claimAutoreleasedReturnValue();

          if (v132)
          {
            objc_msgSend(v4, "hmd_user");
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v83, "addObject:", v133);

          }
        }
        v275 = 0u;
        v276 = 0u;
        v273 = 0u;
        v274 = 0u;
        v246 = v81;
        v134 = v81;
        v135 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v273, v312, 16);
        if (v135)
        {
          v136 = v135;
          v137 = *(_QWORD *)v274;
          do
          {
            for (jj = 0; jj != v136; ++jj)
            {
              if (*(_QWORD *)v274 != v137)
                objc_enumerationMutation(v134);
              objc_msgSend(*(id *)(*((_QWORD *)&v273 + 1) + 8 * jj), "legacyUser");
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "addObject:", v139);

            }
            v136 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v273, v312, 16);
          }
          while (v136);
        }

        v140 = (void *)objc_msgSend(v83, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v140, CFSTR("users"));

        objc_msgSend(v4, "encodeObject:forKey:", v134, CFSTR("residentDevices"));
        v258 = v83;
        if (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator"))
        {
          v141 = (void *)MEMORY[0x1E0C99DE8];
          -[HMDHome users](v40, "users");
          v142 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v141, "arrayWithCapacity:", objc_msgSend(v142, "count"));
          v143 = (void *)objc_claimAutoreleasedReturnValue();

          v271 = 0u;
          v272 = 0u;
          v269 = 0u;
          v270 = 0u;
          -[HMDHome users](v40, "users");
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          v145 = objc_msgSend(v144, "countByEnumeratingWithState:objects:count:", &v269, v311, 16);
          if (v145)
          {
            v146 = v145;
            v147 = *(_QWORD *)v270;
            do
            {
              for (kk = 0; kk != v146; ++kk)
              {
                if (*(_QWORD *)v270 != v147)
                  objc_enumerationMutation(v144);
                v149 = *(void **)(*((_QWORD *)&v269 + 1) + 8 * kk);
                if ((objc_msgSend(v149, "isRemoteGateway") & 1) == 0
                  && (objc_msgSend(v149, "privilege") == 4 || !objc_msgSend(v149, "privilege")))
                {
                  if (!objc_msgSend(v149, "requiresMakoSupport")
                    || (objc_msgSend(v4, "hmd_supportedFeatures"),
                        v150 = (void *)objc_claimAutoreleasedReturnValue(),
                        v151 = objc_msgSend(v150, "containsObject:", &unk_1E8B328B0),
                        v150,
                        v83 = v258,
                        v151))
                  {
                    objc_msgSend(v143, "addObject:", v149);
                  }
                }
              }
              v146 = objc_msgSend(v144, "countByEnumeratingWithState:objects:count:", &v269, v311, 16);
            }
            while (v146);
          }

          v152 = (void *)objc_msgSend(v143, "copy");
          objc_msgSend(v4, "encodeObject:forKey:", v152, CFSTR("HM.sharedUsers"));

          v40 = v259;
        }
        v153 = (void *)MEMORY[0x1D17BA0A0]();
        v154 = v40;
        HMFGetOSLogHandle();
        v155 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v155, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v156 = (id)objc_claimAutoreleasedReturnValue();
          -[HMDHome users](v154, "users");
          v157 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "hmd_user");
          v158 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v303 = v156;
          v304 = 2112;
          v305 = v157;
          v306 = 2112;
          v307 = v158;
          _os_log_impl(&dword_1CD062000, v155, OS_LOG_TYPE_INFO, "%{public}@encode users: %@, coder username: %@", buf, 0x20u);

          v83 = v258;
        }

        objc_autoreleasePoolPop(v153);
        v267 = 0u;
        v268 = 0u;
        v265 = 0u;
        v266 = 0u;
        -[HMDHome users](v154, "users");
        v122 = (id)objc_claimAutoreleasedReturnValue();
        v159 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v265, v310, 16);
        if (v159)
        {
          v160 = v159;
          v161 = *(_QWORD *)v266;
          v254 = v122;
          v256 = v4;
          v253 = v154;
          v252 = *(_QWORD *)v266;
          do
          {
            for (mm = 0; mm != v160; ++mm)
            {
              if (*(_QWORD *)v266 != v161)
                objc_enumerationMutation(v122);
              v163 = *(void **)(*((_QWORD *)&v265 + 1) + 8 * mm);
              objc_msgSend(v4, "hmd_user");
              v164 = (void *)objc_claimAutoreleasedReturnValue();
              v165 = objc_msgSend(v163, "isEqual:", v164);

              if (v165)
              {
                v166 = (void *)MEMORY[0x1D17BA0A0]();
                v167 = v154;
                HMFGetOSLogHandle();
                v168 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v168, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v169 = (id)objc_claimAutoreleasedReturnValue();
                  -[HMDHome users](v167, "users");
                  v170 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v4, "hmd_user");
                  v171 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v163, "presenceAuthStatus");
                  v172 = v166;
                  v173 = v160;
                  v174 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138544130;
                  v303 = v169;
                  v304 = 2112;
                  v305 = v170;
                  v306 = 2112;
                  v307 = v171;
                  v308 = 2112;
                  v309 = v174;
                  _os_log_impl(&dword_1CD062000, v168, OS_LOG_TYPE_INFO, "%{public}@encode users: %@, coder username: %@, %@", buf, 0x2Au);

                  v160 = v173;
                  v166 = v172;

                  v4 = v256;
                  v161 = v252;

                  v122 = v254;
                  v154 = v253;
                }

                objc_autoreleasePoolPop(v166);
                objc_msgSend(v163, "presenceAuthStatus");
                v175 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v175, "addToCoder:", v4);

                v40 = v259;
              }
            }
            v160 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v265, v310, 16);
          }
          while (v160);
          v59 = v249;
          v81 = v246;
          v83 = v258;
        }
        else
        {
          v59 = v249;
          v81 = v246;
        }
      }
    }

LABEL_150:
    goto LABEL_151;
  }
LABEL_152:
  if ((v59 & 0x9FD1) != 0)
    -[HMDHome _encodeObjectsWithAccessoriesWithCoder:](v40, "_encodeObjectsWithAccessoriesWithCoder:", v4);
  -[HMDHome roomForEntireHome](v40, "roomForEntireHome");
  v181 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v181, CFSTR("roomForEntireHome"));

  if ((v59 & 5) != 0 && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    -[HMDHome rooms](v40, "rooms");
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    v183 = (void *)objc_msgSend(v182, "copy");
    objc_msgSend(v4, "encodeObject:forKey:", v183, CFSTR("rooms"));

    -[HMDHome zones](v40, "zones");
    v184 = (void *)objc_claimAutoreleasedReturnValue();
    v185 = (void *)objc_msgSend(v184, "copy");
    objc_msgSend(v4, "encodeObject:forKey:", v185, CFSTR("zones"));

  }
  if ((v59 & 0x801) != 0)
  {
    if (v250)
    {
      if (!v248)
        goto LABEL_163;
      -[HMDHome residentDeviceManager](v40, "residentDeviceManager");
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v186, "residentDevices");
      v187 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "encodeObject:forKey:", v187, CFSTR("residentDevices"));
      -[HMDHome notificationRegistrations](v40, "notificationRegistrations");
      v188 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeBool:forKey:", objc_msgSend(v188, "count") != 0, CFSTR("kCharacteristicNotificationEnableKey"));

      -[HMDHome notificationsUpdatedTime](v40, "notificationsUpdatedTime");
      v189 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v189, CFSTR("kCharacteristicNotificationEnableTime"));

    }
    else
    {
      -[HMDHome residentDeviceManager](v40, "residentDeviceManager");
      v190 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v190, CFSTR("HM.residentDeviceManager"));

      -[HMDHome enabledResidents](v40, "enabledResidents");
      v191 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v191, "na_filter:", &__block_literal_global_1385);
      v192 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "encodeInteger:forKey:", objc_msgSend(v192, "count"), CFSTR("HMD.nonIPadResidentDeviceCount"));
      -[HMDHome primaryNetworkRouterManagingDeviceUUID](v40, "primaryNetworkRouterManagingDeviceUUID");
      v187 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v187, CFSTR("HMDHomePrimaryNetworkRouterManagingDeviceUUIDCodingKey"));
    }

  }
LABEL_163:
  if ((v59 & 0x85D1) != 0
    && (!objc_msgSend(v4, "hmd_isForXPCTransport")
     || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess")))
  {
    v193 = -[HMDHome minimumMediaUserPrivilege](v40, "minimumMediaUserPrivilege");
    objc_msgSend(v4, "encodeInteger:forKey:", v193, *MEMORY[0x1E0CB9138]);
    v194 = -[HMDHome isMediaPeerToPeerEnabled](v40, "isMediaPeerToPeerEnabled");
    objc_msgSend(v4, "encodeBool:forKey:", v194, *MEMORY[0x1E0CB9150]);
    if ((objc_msgSend(v4, "hmd_isForNonAdminSharedUser") & 1) == 0)
    {
      -[HMDHome mediaPassword](v40, "mediaPassword");
      v195 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v195, *MEMORY[0x1E0CB9140]);

    }
  }
  if ((v59 & 0x11) != 0
    && (!objc_msgSend(v4, "hmd_isForXPCTransport")
     || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess")))
  {
    v196 = -[HMDHome isAutomaticSoftwareUpdateEnabled](v40, "isAutomaticSoftwareUpdateEnabled");
    objc_msgSend(v4, "encodeBool:forKey:", v196, *MEMORY[0x1E0CB8D10]);
    v197 = -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](v40, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled");
    objc_msgSend(v4, "encodeBool:forKey:", v197, *MEMORY[0x1E0CB8D18]);
  }
  -[HMDHome matterFabricID](v40, "matterFabricID");
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v198, CFSTR("HM.matterFabricID"));

  if ((v59 & 1) != 0)
  {
    if (v251)
    {
      -[HMDHome presenceMonitor](v40, "presenceMonitor");
      v199 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v199, CFSTR("kHMDHomePresenceMonitorCodingKey"));

      -[HMDHome unfilteredThreadNetworkID](v40, "unfilteredThreadNetworkID");
      v200 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeObject:forKey:", v200, CFSTR("HMHM.threadNetworkID"));

    }
    if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) != 0)
    {
      if (!v250)
        goto LABEL_183;
    }
    else
    {
      if ((v250 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome allowsRemoteAccess](v40, "allowsRemoteAccess"));
        v204 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v204, CFSTR("HM.allowsRemoteAccess"));

        -[HMDHome networkProtectionGroupRegistry](v40, "networkProtectionGroupRegistry");
        v205 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v205, "persistedGroups");
        v206 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v206, *MEMORY[0x1E0CB8CC8]);

LABEL_183:
        -[HMDHome appData](v40, "appData");
        v203 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v203, CFSTR("HM.appDataRepository"));
LABEL_184:

        if (v251)
        {
          -[HMDHome removedUsers](v40, "removedUsers");
          v207 = (void *)objc_claimAutoreleasedReturnValue();
          v208 = (void *)objc_msgSend(v207, "copy");
          objc_msgSend(v4, "encodeObject:forKey:", v208, CFSTR("HM.removedUsersCodingKey"));

        }
        else if (!v247)
        {
          goto LABEL_188;
        }
        -[HMDHome presenceAuthStatus](v40, "presenceAuthStatus");
        v209 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v209, "addToCoder:", v4);

        -[HMDHome presenceComputeStatus](v40, "presenceComputeStatus");
        v210 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v210, "addToCoder:", v4);

LABEL_188:
        if ((v251 | v247) == 1)
        {
          if (!isWatch() && (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount") & 1) == 0)
          {
            -[HMDHome notificationRegistry](v40, "notificationRegistry");
            v211 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v211, CFSTR("characteristicNotificationRegistryCodingKey"));

          }
          if (!isWatch() && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
          {
            v212 = (void *)MEMORY[0x1E0C99DE8];
            -[HMDHome outgoingInvitations](v40, "outgoingInvitations");
            v213 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v212, "arrayWithArray:", v213);
            v214 = (void *)objc_claimAutoreleasedReturnValue();

            if (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount"))
            {
              objc_msgSend(v4, "hmd_supportedFeatures");
              v215 = (void *)objc_claimAutoreleasedReturnValue();
              v216 = objc_msgSend(v215, "containsObject:", &unk_1E8B328B0);

              if ((v216 & 1) == 0)
              {
                v263 = 0u;
                v264 = 0u;
                v261 = 0u;
                v262 = 0u;
                -[HMDHome outgoingInvitations](v40, "outgoingInvitations");
                v217 = (void *)objc_claimAutoreleasedReturnValue();
                v218 = objc_msgSend(v217, "countByEnumeratingWithState:objects:count:", &v261, v301, 16);
                if (v218)
                {
                  v219 = v218;
                  v220 = *(_QWORD *)v262;
                  do
                  {
                    for (nn = 0; nn != v219; ++nn)
                    {
                      if (*(_QWORD *)v262 != v220)
                        objc_enumerationMutation(v217);
                      v222 = *(void **)(*((_QWORD *)&v261 + 1) + 8 * nn);
                      objc_msgSend(v222, "user");
                      v223 = (void *)objc_claimAutoreleasedReturnValue();
                      if (objc_msgSend(v223, "requiresMakoSupport"))
                        objc_msgSend(v214, "removeObject:", v222);

                    }
                    v219 = objc_msgSend(v217, "countByEnumeratingWithState:objects:count:", &v261, v301, 16);
                  }
                  while (v219);
                }

              }
            }
            v224 = (void *)objc_msgSend(v214, "copy");
            objc_msgSend(v4, "encodeObject:forKey:", v224, CFSTR("HM.invitations"));

          }
        }
        if (!objc_msgSend(v4, "hmd_isForXPCTransport")
          || objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
        {
          v225 = -[HMDHome protectionMode](v40, "protectionMode");
          objc_msgSend(v4, "encodeInteger:forKey:", v225, *MEMORY[0x1E0CB9180]);
        }
        if (objc_msgSend(v4, "hmd_isForXPCTransport"))
        {
          if (objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
          {
            v226 = -[HMDHome networkRouterSupportDisableReason](v40, "networkRouterSupportDisableReason");
            objc_msgSend(v4, "encodeInteger:forKey:", v226, *MEMORY[0x1E0CB9188]);
          }
          v227 = -[HMDHome networkRouterSupport](v40, "networkRouterSupport");
          objc_msgSend(v4, "encodeBool:forKey:", (v227 >> 2) & 1, *MEMORY[0x1E0CB8CD8]);
        }
        -[HMDHome threadNetworkID](v40, "threadNetworkID");
        v228 = (void *)objc_claimAutoreleasedReturnValue();
        if (v228 && objc_msgSend(v4, "hmd_isForXPCTransport"))
        {
          v229 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");

          if (!v229)
            goto LABEL_219;
          -[HMDHome threadNetworkID](v40, "threadNetworkID");
          v228 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "encodeObject:forKey:", v228, *MEMORY[0x1E0CB9280]);
        }

LABEL_219:
        if ((objc_msgSend(v4, "hmd_isForXPCTransport") & 1) == 0)
        {
          -[HMDHome activeNetworkRouterUUID](v40, "activeNetworkRouterUUID");
          v230 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v230, "UUIDString");
          v231 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "encodeObject:forKey:", v231, CFSTR("HMHM.activeNetworkRouter"));

          -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v40, "minimumNetworkRouterSupportHomeKitVersion");
          v232 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v232, "versionString");
          v233 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "encodeObject:forKey:", v233, CFSTR("HMHM.minimumNetworkRouterSupportHomeKitVersion"));

          -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](v40, "minHomeKitVersionForAccessoryNetworkProtectionChange");
          v234 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v234, "versionString");
          v235 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "encodeObject:forKey:", v235, CFSTR("HMHM.minHomeKitVersionForAccessoryNetworkProtectionChangeCodingKey"));

        }
        if (v250)
        {
          if (!objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess"))
          {
LABEL_229:
            if (v251 | v247)
            {
              -[HMDHome chipStorage](v40, "chipStorage");
              v243 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "encodeObject:forKey:", v243, CFSTR("HMHM.chipStorage"));

            }
            if (!-[HMDHome isOwnerUser](v40, "isOwnerUser")
              && ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
               || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")))
            {
              -[HMDHome sharedHomeSourceVersion](v40, "sharedHomeSourceVersion");
              v244 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "encodeObject:forKey:", v244, CFSTR("kHomeKitVersionStringKey"));

            }
            goto LABEL_235;
          }
          -[HMDHome personManagerSettings](v40, "personManagerSettings");
          v236 = (void *)objc_claimAutoreleasedReturnValue();
          v237 = (const __CFString *)*MEMORY[0x1E0CB91A0];
        }
        else
        {
          -[HMDHome personManagerSettings](v40, "personManagerSettings");
          v238 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "encodeObject:forKey:", v238, *MEMORY[0x1E0CB91A0]);

          -[HMDHome personManagerZoneUUID](v40, "personManagerZoneUUID");
          v239 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "encodeObject:forKey:", v239, CFSTR("HMHM.personManagerZoneUUID"));

          -[HMDHome naturalLightingContext](v40, "naturalLightingContext");
          v240 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "encodeObject:forKey:", v240, CFSTR("HM.nlcck"));

          if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
            || objc_msgSend(v4, "hmd_isForRemoteUserAdministrator"))
          {
            -[HMDHome labelsByAccessCode](v40, "labelsByAccessCode");
            v241 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v241, CFSTR("HMDHomeLabelsByAccessCodeCodingKey"));

            -[HMDHome removedUserInfoByAccessCode](v40, "removedUserInfoByAccessCode");
            v242 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "encodeObject:forKey:", v242, CFSTR("HMDHomeRemovedUserInfoByAccessCodeCodingKey"));

          }
          -[HMDHome nfcReaderKey](v40, "nfcReaderKey");
          v236 = (void *)objc_claimAutoreleasedReturnValue();
          v237 = CFSTR("HMDHomeNFCReaderKeyCodingKey");
        }
        objc_msgSend(v4, "encodeObject:forKey:", v236, v237);

        goto LABEL_229;
      }
      if (v248)
      {
        -[HMDHome networkProtectionGroupRegistry](v40, "networkProtectionGroupRegistry");
        v201 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v201, "activeGroups");
        v202 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v202, *MEMORY[0x1E0CB8CC8]);

      }
    }
    -[HMDHome appData](v40, "appData");
    v203 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v203, "encodeForXPCTransportWithCoder:key:", v4, CFSTR("HM.appData"));
    goto LABEL_184;
  }
LABEL_235:

}

- (void)__encodeAccessoriesWithCoder:(id)a3 options:(unint64_t)a4
{
  id v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  char v21;
  char v22;
  int v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  char isKindOfClass;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  int v44;
  void *v45;
  uint64_t v46;
  void *v47;
  HMDHome *v48;
  NSObject *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t j;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  HMDHome *v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  __int16 v88;
  id obj;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[128];
  uint8_t v103[128];
  uint8_t buf[4];
  void *v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  void *v109;
  __int16 v110;
  void *v111;
  _BYTE v112[128];
  uint64_t v113;

  v88 = a4;
  v113 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v79 = self;
  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = v5;
  v8 = objc_msgSend(v5, "hmd_isForXPCTransport");
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v10 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  obj = v6;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v98, v112, 16);
  v85 = v7;
  v86 = v9;
  v87 = (void *)v10;
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v99;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v99 != v13)
          objc_enumerationMutation(obj);
        v15 = *(id *)(*((_QWORD *)&v98 + 1) + 8 * v14);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v16 = v15;
        else
          v16 = 0;
        v17 = v16;

        v18 = v15;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v19 = v18;
        else
          v19 = 0;
        v20 = v19;

        if (v20)
          v21 = v8;
        else
          v21 = 1;
        if ((v21 & 1) == 0)
        {
          v24 = (void *)v10;
          v25 = v20;
          goto LABEL_25;
        }
        if (v17)
          v22 = v8;
        else
          v22 = 1;
        if ((v22 & 1) == 0)
        {
          v24 = v9;
          v25 = v17;
          goto LABEL_25;
        }
        v23 = objc_msgSend(v18, "isCurrentAccessory");
        if ((v88 & 0x10) != 0 && v23)
        {
          v24 = v7;
          v25 = v18;
LABEL_25:
          objc_msgSend(v24, "addObject:", v25);
          goto LABEL_26;
        }
        v26 = v18;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v27 = v26;
        else
          v27 = 0;
        v28 = v27;

        if (v28)
        {
          v10 = (uint64_t)v87;
          if ((v88 & 0x100) != 0)
            objc_msgSend(v84, "addObject:", v28);
          goto LABEL_69;
        }
        v29 = v26;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v30 = v29;
        else
          v30 = 0;
        v31 = v30;

        if (v31)
        {
          v7 = v85;
          if ((v88 & 0x40) != 0
            || (v88 & 0x800) != 0
            && (objc_msgSend(v31, "device"), v32 = (void *)objc_claimAutoreleasedReturnValue(), v32, v32))
          {
            objc_msgSend(v85, "addObject:", v31);
          }
          goto LABEL_68;
        }
        v33 = v29;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v34 = v33;
        else
          v34 = 0;
        v35 = v34;
        v82 = v33;

        if (v35)
        {
          v83 = v35;
          v36 = v35;
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
            v38 = v36;
          else
            v38 = 0;
          v39 = v38;

          if ((isKindOfClass & 1) != 0)
          {
            if ((v8 & 1) != 0)
            {
              objc_msgSend(v36, "hostAccessory");
              v40 = (void *)objc_claimAutoreleasedReturnValue();

              if (!v40)
                goto LABEL_52;
LABEL_66:

              v35 = v83;
              goto LABEL_67;
            }
            v42 = v81;
            v43 = v36;
          }
          else
          {
LABEL_52:
            if (objc_msgSend(v36, "hasTelevisionService"))
            {
              if ((v88 & 0x400) == 0)
                goto LABEL_66;
            }
            else
            {
              objc_msgSend(v36, "networkRouterController");
              v41 = (void *)objc_claimAutoreleasedReturnValue();

              if (v41)
              {
                if ((v88 & 0x1000) == 0)
                  goto LABEL_66;
              }
              else if ((v88 & 0x200) == 0)
              {
                v44 = objc_msgSend(v36, "hasSmartSpeakerService");
                if ((v88 & 0x100) == 0 || !v44)
                {
                  objc_msgSend(v36, "siriEndpointProfile");
                  v45 = (void *)objc_claimAutoreleasedReturnValue();

                  if ((v88 & 0x8000) == 0 || !v45)
                    goto LABEL_66;
                }
              }
            }
            v42 = v85;
            v43 = v82;
          }
          objc_msgSend(v42, "addObject:", v43);
          goto LABEL_66;
        }
LABEL_67:

        v7 = v85;
        v31 = 0;
LABEL_68:

        v10 = (uint64_t)v87;
LABEL_69:

        v9 = v86;
LABEL_26:

        ++v14;
      }
      while (v12 != v14);
      v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v98, v112, 16);
      v12 = v46;
    }
    while (v46);
  }

  v47 = (void *)MEMORY[0x1D17BA0A0]();
  v48 = v79;
  HMFGetOSLogHandle();
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "hmd_applicationBundleIdentifier");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v85, "count"));
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "shortDescription");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v105 = v50;
    v106 = 2112;
    v107 = v51;
    v108 = 2112;
    v109 = v52;
    v110 = 2112;
    v111 = v53;
    _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_DEBUG, "%{public}@encoded Accessories [%@]: %@, %@", buf, 0x2Au);

    v7 = v85;
    v9 = v86;
  }

  objc_autoreleasePoolPop(v47);
  v54 = (void *)objc_msgSend(v7, "copy");
  objc_msgSend(v80, "encodeObject:forKey:", v54, CFSTR("accessories"));

  v55 = v7;
  v56 = (void *)objc_msgSend(v84, "copy");
  objc_msgSend(v80, "encodeObject:forKey:", v56, CFSTR("accessories.airplay"));

  v57 = (void *)objc_msgSend(v9, "copy");
  objc_msgSend(v80, "encodeObject:forKey:", v57, CFSTR("accessories.homepod"));

  v58 = v87;
  v59 = (void *)objc_msgSend(v87, "copy");
  objc_msgSend(v80, "encodeObject:forKey:", v59, CFSTR("accessories.homepod_6_1"));

  v60 = (void *)objc_msgSend(v81, "copy");
  objc_msgSend(v80, "encodeObject:forKey:", v60, CFSTR("HM.AppleMediaAccessorySensor"));

  if ((v88 & 5) == 0)
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(obj, "count"));
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v62 = v7;
    v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v94, v103, 16);
    if (v63)
    {
      v64 = v63;
      v65 = *(_QWORD *)v95;
      do
      {
        for (i = 0; i != v64; ++i)
        {
          if (*(_QWORD *)v95 != v65)
            objc_enumerationMutation(v62);
          v67 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * i);
          objc_msgSend(v67, "room");
          v68 = (void *)objc_claimAutoreleasedReturnValue();

          if (v68)
          {
            objc_msgSend(v67, "room");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v61, "addObject:", v69);

          }
        }
        v64 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v94, v103, 16);
      }
      while (v64);
    }

    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v70 = v84;
    v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v90, v102, 16);
    if (v71)
    {
      v72 = v71;
      v73 = *(_QWORD *)v91;
      do
      {
        for (j = 0; j != v72; ++j)
        {
          if (*(_QWORD *)v91 != v73)
            objc_enumerationMutation(v70);
          v75 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * j);
          objc_msgSend(v75, "room");
          v76 = (void *)objc_claimAutoreleasedReturnValue();

          if (v76)
          {
            objc_msgSend(v75, "room");
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v61, "addObject:", v77);

          }
        }
        v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v90, v102, 16);
      }
      while (v72);
    }

    objc_msgSend(v61, "allObjects");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "encodeObject:forKey:", v78, CFSTR("rooms"));

    v55 = v85;
    v9 = v86;
    v58 = v87;
  }

}

- (void)_encodeObjectsWithAccessoriesWithCoder:(id)a3
{
  id v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t j;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  HMDHome *v70;
  NSObject *v71;
  void *v72;
  void *k;
  void *v74;
  void *v75;
  id v76;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t m;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  char v88;
  void *v89;
  void *v90;
  void *v91;
  HMDHome *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  void *v102;
  void *v103;
  uint64_t v104;
  int obj;
  id obja;
  id objb;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[128];
  _BYTE v129[128];
  _BYTE v130[128];
  _BYTE v131[128];
  uint8_t v132[128];
  uint8_t buf[4];
  void *v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(v4, "hmd_isForXPCTransport");
  v6 = objc_msgSend(v4, "hmd_isForLocalStore");
  v7 = objc_msgSend(v4, "hmd_isForRemoteTransport");
  v8 = objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount");
  v9 = objc_msgSend(v4, "hmd_isForRemoteGatewayCoder");
  obj = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  v10 = objc_msgSend(v4, "hmd_homeManagerOptions");
  v11 = v10;
  if ((v10 & 1) != 0)
  {
    v92 = self;
    v99 = v4;
    if (v5)
    {
      if (obj)
        v11 = v10 | 0x9FD0;
    }
    else if (((v7 ^ 1 | v8) & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "preferenceForKey:", CFSTR("enableAirPlay2Syncing"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "BOOLValue");

      if ((v14 & 1) != 0)
      {
        v11 = -1;
      }
      else
      {
        v15 = (void *)MEMORY[0x1D17BA0A0]();
        v16 = v92;
        HMFGetOSLogHandle();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v134 = v18;
          _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Filtering AirPlay2 accessories for shared user", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v15);
        v11 = -257;
      }
      objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "preferenceForKey:", CFSTR("enableAppleMediaSyncing"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "BOOLValue");

      if ((v21 & 1) == 0)
      {
        v22 = (void *)MEMORY[0x1D17BA0A0]();
        v23 = v92;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v102 = v22;
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v134 = v25;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Filtering Apple media accessories for shared user", buf, 0xCu);

          v22 = v102;
        }

        objc_autoreleasePoolPop(v22);
        v11 &= ~0x40uLL;
      }
    }
    -[HMDHome __encodeAccessoriesWithCoder:options:](v92, "__encodeAccessoriesWithCoder:options:", v4, v11);
    -[HMDHome encodeMediaSystemsWithCoder:modifiedOptions:](v92, "encodeMediaSystemsWithCoder:modifiedOptions:", v4, v11);
    if ((objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      -[HMDHome serviceGroups](v92, "serviceGroups");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (void *)objc_msgSend(v26, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v27, *MEMORY[0x1E0CBAC68]);

    }
    -[HMDHome actionSets](v92, "actionSets");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _encodeActionSets:coder:](v92, "_encodeActionSets:coder:", v28, v4);

    if (((v5 | v6) == 1 || !(v7 ^ 1 | v8) || ((v8 ^ 1 | v9) & 1) == 0)
      && -[HMDHome shouldWeSendAutomationsToClients](v92, "shouldWeSendAutomationsToClients"))
    {
      -[HMDHome triggerOwnedActionSets](v92, "triggerOwnedActionSets");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = (void *)objc_msgSend(v29, "copy");
      objc_msgSend(v4, "encodeObject:forKey:", v30, CFSTR("HM.triggerOwnedActionSets"));

    }
    if (!isWatch())
    {
      if (v5 && (!isAppleTV() | obj) == 1)
      {
        v31 = (void *)MEMORY[0x1E0C99DE8];
        -[HMDHome triggers](v92, "triggers");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "arrayWithCapacity:", objc_msgSend(v32, "count"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        -[HMDHome triggers](v92, "triggers");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v124, v132, 16);
        if (v35)
        {
          v36 = v35;
          v37 = *(_QWORD *)v125;
          do
          {
            for (i = 0; i != v36; ++i)
            {
              if (*(_QWORD *)v125 != v37)
                objc_enumerationMutation(v34);
              v39 = *(id *)(*((_QWORD *)&v124 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v40 = v39;
              else
                v40 = 0;
              v41 = v40;

              if (v41)
              {
                objc_msgSend(v33, "addObject:", v39);
              }
              else
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v42 = v39;
                  objc_msgSend(v42, "significantEvent");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v43)
                    v44 = obj;
                  else
                    v44 = 1;
                  if (v44 == 1)
                    objc_msgSend(v33, "addObject:", v42);

                }
              }

            }
            v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v124, v132, 16);
          }
          while (v36);
        }

        v4 = v99;
        if (-[HMDHome shouldWeSendAutomationsToClients](v92, "shouldWeSendAutomationsToClients"))
        {
          v45 = (void *)objc_msgSend(v33, "copy");
          objc_msgSend(v99, "encodeObject:forKey:", v45, CFSTR("triggers"));

        }
      }
      else if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
             || objc_msgSend(v4, "hmd_isForRemoteTransport")
             && (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount") & 1) == 0
             && (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator") & 1) != 0
             || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")
             && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v100 = (id)objc_claimAutoreleasedReturnValue();
        v120 = 0u;
        v121 = 0u;
        v122 = 0u;
        v123 = 0u;
        -[HMDHome triggers](v92, "triggers");
        obja = (id)objc_claimAutoreleasedReturnValue();
        v46 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v120, v131, 16);
        if (v46)
        {
          v47 = v46;
          v48 = *(_QWORD *)v121;
          v94 = *(_QWORD *)v121;
          do
          {
            v49 = 0;
            v95 = v47;
            do
            {
              if (*(_QWORD *)v121 != v48)
                objc_enumerationMutation(obja);
              v50 = *(void **)(*((_QWORD *)&v120 + 1) + 8 * v49);
              objc_msgSend(v50, "owningDevice");
              v51 = (void *)objc_claimAutoreleasedReturnValue();

              if (v51)
              {
                v52 = v50;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v53 = v52;
                else
                  v53 = 0;
                v54 = v53;

                if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) == 0)
                {
                  v118 = 0u;
                  v119 = 0u;
                  v116 = 0u;
                  v117 = 0u;
                  objc_msgSend(v54, "characteristicBaseEvents");
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v116, v130, 16);
                  if (v56)
                  {
                    v57 = v56;
                    v58 = *(_QWORD *)v117;
                    while (2)
                    {
                      for (j = 0; j != v57; ++j)
                      {
                        if (*(_QWORD *)v117 != v58)
                          objc_enumerationMutation(v55);
                        objc_msgSend(*(id *)(*((_QWORD *)&v116 + 1) + 8 * j), "characteristic");
                        v60 = objc_claimAutoreleasedReturnValue();
                        objc_msgSend((id)v60, "accessory");
                        v61 = (void *)objc_claimAutoreleasedReturnValue();

                        objc_opt_class();
                        LOBYTE(v60) = objc_opt_isKindOfClass();

                        if ((v60 & 1) != 0 && v61)
                        {

                          v62 = v93;
                          v48 = v94;
                          v4 = v99;
                          v47 = v95;
                          goto LABEL_75;
                        }
                      }
                      v57 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v116, v130, 16);
                      if (v57)
                        continue;
                      break;
                    }
                  }

                  v4 = v99;
                  v48 = v94;
                  v47 = v95;
                }
                if (objc_msgSend(v52, "requiresDataVersion4"))
                  v62 = v100;
                else
                  v62 = v103;
LABEL_75:
                objc_msgSend(v62, "addObject:", v52);

              }
              else
              {
                objc_msgSend(v97, "addObject:", v50);
              }
              ++v49;
            }
            while (v49 != v47);
            v47 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v120, v131, 16);
          }
          while (v47);
        }

        v63 = (void *)objc_msgSend(v103, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v63, CFSTR("HM.triggers"));

        v64 = (void *)objc_msgSend(v93, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v64, CFSTR("HM.homePodTriggers"));

        v65 = (void *)objc_msgSend(v100, "copy");
        objc_msgSend(v4, "encodeObject:forKey:", v65, CFSTR("HM.sharedActivationTriggers"));

        if (objc_msgSend(v4, "hmd_isForLocalStore"))
        {
          v66 = (void *)objc_msgSend(v97, "copy");
          objc_msgSend(v4, "encodeObject:forKey:", v66, CFSTR("triggers"));

          -[HMDHome _updateOwnedTriggers](v92, "_updateOwnedTriggers");
          -[HMDHome ownedTriggers](v92, "ownedTriggers");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = (void *)objc_msgSend(v67, "copy");
          objc_msgSend(v4, "encodeObject:forKey:", v68, CFSTR("HM.deviceOwnedTriggers"));

        }
      }
      else if (objc_msgSend(v4, "hmd_isForNonAdminSharedUser"))
      {
        v69 = (void *)MEMORY[0x1D17BA0A0]();
        v70 = v92;
        HMFGetOSLogHandle();
        v71 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v134 = v72;
          _os_log_impl(&dword_1CD062000, v71, OS_LOG_TYPE_INFO, "%{public}@Syncing triggers to remote transport", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v69);
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        v112 = 0u;
        v113 = 0u;
        v114 = 0u;
        v115 = 0u;
        -[HMDHome triggers](v70, "triggers");
        v101 = (id)objc_claimAutoreleasedReturnValue();
        objb = (id)objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v112, v129, 16);
        if (objb)
        {
          v104 = *(_QWORD *)v113;
          do
          {
            for (k = 0; k != objb; k = (char *)k + 1)
            {
              if (*(_QWORD *)v113 != v104)
                objc_enumerationMutation(v101);
              v74 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * (_QWORD)k);
              objc_msgSend(v74, "owningDevice");
              v75 = (void *)objc_claimAutoreleasedReturnValue();

              if (v75)
              {
                v76 = v74;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v77 = v76;
                else
                  v77 = 0;
                v78 = v77;

                v110 = 0u;
                v111 = 0u;
                v108 = 0u;
                v109 = 0u;
                objc_msgSend(v78, "characteristicBaseEvents");
                v79 = (void *)objc_claimAutoreleasedReturnValue();
                v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v108, v128, 16);
                if (v80)
                {
                  v81 = v80;
                  v82 = *(_QWORD *)v109;
                  while (2)
                  {
                    for (m = 0; m != v81; ++m)
                    {
                      if (*(_QWORD *)v109 != v82)
                        objc_enumerationMutation(v79);
                      objc_msgSend(*(id *)(*((_QWORD *)&v108 + 1) + 8 * m), "characteristic");
                      v84 = objc_claimAutoreleasedReturnValue();
                      objc_msgSend((id)v84, "accessory");
                      v85 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_opt_class();
                      LOBYTE(v84) = objc_opt_isKindOfClass();

                      if ((v84 & 1) != 0 && v85)
                      {

                        v89 = v98;
                        goto LABEL_111;
                      }
                    }
                    v81 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v108, v128, 16);
                    if (v81)
                      continue;
                    break;
                  }
                }

                objc_msgSend(v99, "hmd_supportedFeatures");
                v86 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v99, "hmd_user");
                v87 = (void *)objc_claimAutoreleasedReturnValue();
                v88 = objc_msgSend(v76, "compatible:user:", v86, v87);

                v89 = v96;
                if ((v88 & 1) != 0)
LABEL_111:
                  objc_msgSend(v89, "addObject:", v76);

              }
            }
            objb = (id)objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", &v112, v129, 16);
          }
          while (objb);
        }

        v90 = (void *)objc_msgSend(v96, "copy");
        v4 = v99;
        objc_msgSend(v99, "encodeObject:forKey:", v90, CFSTR("HM.triggers"));

        v91 = (void *)objc_msgSend(v98, "copy");
        objc_msgSend(v99, "encodeObject:forKey:", v91, CFSTR("HM.homePodTriggers"));

      }
    }
  }
  else
  {
    -[HMDHome __encodeAccessoriesWithCoder:options:](self, "__encodeAccessoriesWithCoder:options:", v4, v10);
    -[HMDHome encodeMediaSystemsWithCoder:modifiedOptions:](self, "encodeMediaSystemsWithCoder:modifiedOptions:", v4, v11);
  }

}

- (void)encodeMediaSystemsWithCoder:(id)a3 modifiedOptions:(unint64_t)a4
{
  char v4;
  id v6;
  void *v7;
  _QWORD *v8;
  id v9;

  v4 = a4;
  v6 = a3;
  if ((v4 & 0xC0) != 0)
  {
    v9 = v6;
    if (objc_msgSend(v6, "hmd_isForXPCTransport"))
    {
      -[HMDHome mediaSystems](self, "mediaSystems");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (_QWORD *)MEMORY[0x1E0CBABC8];
    }
    else
    {
      -[HMDHome mediaSystemController](self, "mediaSystemController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (_QWORD *)MEMORY[0x1E0CBAB98];
    }
    objc_msgSend(v9, "encodeObject:forKey:", v7, *v8);

    v6 = v9;
  }

}

- (void)_encodeActionSets:(id)a3 coder:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  v6 = a4;
  if (-[HMDHome shouldWeSendAutomationsToClients](self, "shouldWeSendAutomationsToClients"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("type == %@"), *MEMORY[0x1E0CB8238]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "filteredArrayUsingPredicate:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "count"))
    {
      v10 = (void *)objc_msgSend(v9, "copy");
      objc_msgSend(v6, "encodeObject:forKey:", v10, CFSTR("actionSets"));

    }
    if ((objc_msgSend(v6, "hmd_isForRemoteGatewayCoder") & 1) == 0)
    {
      objc_msgSend(v7, "arrayByExcludingObjectsInArray:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "encodeObject:forKey:", v11, CFSTR("builtinActionSets"));

    }
  }

}

- (void)_removeCorruptAccessories
{
  HMDHome *v2;
  void *v3;
  id v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  id v23;
  HMDHome *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v2 = self;
  v42 = *MEMORY[0x1E0C80C00];
  -[HMDHome accessories](self, "accessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v4 = v3;
  v28 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
  if (v28)
  {
    v6 = *(_QWORD *)v30;
    *(_QWORD *)&v5 = 138544130;
    v22 = v5;
    v23 = v4;
    v24 = v2;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v30 != v6)
          objc_enumerationMutation(v4);
        v8 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * v7);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        objc_msgSend(v8, "identifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          v12 = v11;
          if (!v10)
          {

LABEL_16:
            objc_msgSend(v25, "addObject:", v8, v22);
            goto LABEL_17;
          }
          objc_msgSend(v10, "uniqueIdentifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v13)
            goto LABEL_16;
        }
        v14 = (void *)MEMORY[0x1D17BA0A0]();
        v15 = v2;
        HMFGetOSLogHandle();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "uuid");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "UUIDString");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "identifier");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "uniqueIdentifier");
          v27 = v14;
          v20 = v6;
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v22;
          v34 = v26;
          v35 = 2112;
          v36 = v18;
          v37 = 2112;
          v38 = v19;
          v39 = 2112;
          v40 = v21;
          _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Incomplete accessory: %@ (%@ / %@)", buf, 0x2Au);

          v6 = v20;
          v14 = v27;

          v4 = v23;
          v2 = v24;

        }
        objc_autoreleasePoolPop(v14);
LABEL_17:

        ++v7;
      }
      while (v28 != v7);
      v28 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v41, 16);
    }
    while (v28);
  }

  -[HMDHome setAccessories:](v2, "setAccessories:", v25);
}

- (HMFMessageDestination)messageDestination
{
  id v3;
  void *v4;
  void *v5;

  v3 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMDHome messageTargetUUID](self, "messageTargetUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithTarget:", v4);

  return (HMFMessageDestination *)v5;
}

- (NSSet)messageReceiverChildren
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome zones](self, "zones");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v4);

  -[HMDHome rooms](self, "rooms");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v5);

  -[HMDHome actionSets](self, "actionSets");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v6);

  -[HMDHome triggers](self, "triggers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v7);

  -[HMDHome users](self, "users");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v8);

  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v10);

  }
  -[HMDHome presenceMonitor](self, "presenceMonitor");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    -[HMDHome presenceMonitor](self, "presenceMonitor");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v12);

  }
  -[HMDHome presenceFeeder](self, "presenceFeeder");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    -[HMDHome presenceFeeder](self, "presenceFeeder");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v14);

  }
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    -[HMDHome homeLocationHandler](self, "homeLocationHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v16);

  }
  -[HMDHome serviceGroups](self, "serviceGroups");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v17);

  -[HMDHome mediaSessions](self, "mediaSessions");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v18);

  -[HMDHome accessories](self, "accessories");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObjectsFromArray:", v19);

  -[HMDHome homeReprovisionHandler](self, "homeReprovisionHandler");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    -[HMDHome homeReprovisionHandler](self, "homeReprovisionHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v21);

  }
  v22 = (void *)objc_msgSend(v3, "copy");

  return (NSSet *)v22;
}

- (BOOL)_isRegisteredForNotificationsWithRemoteGateway:(id)a3
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  BOOL v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  objc_msgSend(v5, "services");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v26 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        objc_msgSend(v12, "characteristics", 0);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (void *)objc_msgSend(v13, "copy");

        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v22;
          while (2)
          {
            for (j = 0; j != v16; ++j)
            {
              if (*(_QWORD *)v22 != v17)
                objc_enumerationMutation(v14);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * j), "notificationRegisteredWithRemoteGateway") & 1) != 0)
              {

                v19 = 1;
                goto LABEL_22;
              }
            }
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
            if (v16)
              continue;
            break;
          }
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      v19 = 0;
    }
    while (v9);
  }
  else
  {
    v19 = 0;
  }
LABEL_22:

  return v19;
}

- (BOOL)_isRegisteredForNotificationsForClients:(id)a3
{
  id v3;
  void *v4;
  id v5;
  char v6;

  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v6 = objc_msgSend(v5, "isClientRegisteredForNotifications");

  return v6;
}

- (BOOL)_isEventTriggerOnRemoteGatewayForAccessory:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome triggers](self, "triggers", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        v12 = objc_msgSend(v11, "isEventTriggerOnRemoteGatewayForAccessory:", v4);
        if ((v12 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          goto LABEL_14;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_14:

  return v6;
}

- (BOOL)_isEventTriggerOnLocalDeviceForAccessory:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome triggers](self, "triggers", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        v12 = objc_msgSend(v11, "isEventTriggerOnLocalDeviceForAccessory:", v4);
        if ((v12 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          goto LABEL_14;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_14:

  return v6;
}

- (void)accessoryBrowser:(id)a3 didAddAccessoryAdvertisement:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryWithIdentifier:](self, "accessoryWithIdentifier:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling added advertisement: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v9, "addAdvertisement:", v7);
  }

}

- (void)accessoryBrowser:(id)a3 didRemoveAccessoryAdvertisement:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryWithIdentifier:](self, "accessoryWithIdentifier:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v7;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling removed advertisement: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v9, "removeAdvertisement:", v7);
  }

}

- (void)handleRemovedMediaSessions:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __38__HMDHome_handleRemovedMediaSessions___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)accessoryBrowser:(id)a3 didRemoveAccessoryServer:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  const __CFString *v21;
  HMDHAPMetricsLogEvent *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  const __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = objc_msgSend(v9, "linkType");
    if (v10)
      v14 = 0;
    else
      v14 = v13 == 2;
    v15 = !v14;
    v16 = objc_msgSend(v9, "linkType");
    if (v16 == 1)
      v16 = objc_msgSend(v12, "_wol_processDidRemoveHPAccessoryServer:", v9);
    v17 = (void *)MEMORY[0x1D17BA0A0](v16);
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = CFSTR("not updating");
      v24 = 138543874;
      v25 = v20;
      v26 = 2112;
      if ((_DWORD)v15)
        v21 = CFSTR("updating");
      v27 = v9;
      v28 = 2112;
      v29 = v21;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@AccessoryServer %@ removed - %@ reachability", (uint8_t *)&v24, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
    -[HMDHome _unconfigurePairedAccessoriesForServer:updateReachability:](v18, "_unconfigurePairedAccessoriesForServer:updateReachability:", v9, v15);
    v22 = objc_alloc_init(HMDHAPMetricsLogEvent);
    -[HMDHAPMetricsLogEvent updateWithHAPAccessoryServer:](v22, "updateWithHAPAccessoryServer:", v9);
    -[HMDHome logEventSubmitter](v18, "logEventSubmitter");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "submitLogEvent:", v22);

  }
}

- (void)accessoryBrowser:(id)a3 didTombstoneAccessoryServer:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "shortDescription");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v13;
      v17 = 2112;
      v18 = v7;
      v19 = 2112;
      v20 = v14;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@AccessoryServer %@ tombstoned - unconfiguring all paired accessories for %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    -[HMDHome _unconfigurePairedAccessoriesForServer:updateReachability:](v11, "_unconfigurePairedAccessoriesForServer:updateReachability:", v7, 1);
  }

}

- (void)accessoryBrowser:(id)a3 didFindAccessoryServerNeedingReprovisioning:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (objc_msgSend(v9, "isPaired"))
  {
    objc_msgSend(v9, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "shortDescription");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543618;
        v20 = v16;
        v21 = 2112;
        v22 = v17;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ needs reprovisioning is found", (uint8_t *)&v19, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
      -[HMDHome homeReprovisionHandler](v14, "homeReprovisionHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFoundAccessoryNeedingReprovisioning:error:", v12, v10);

    }
  }

}

- (void)accessoryBrowser:(id)a3 didFinishWACForAccessoryWithIdentifier:(id)a4 error:(id)a5
{
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a4;
  v7 = a5;
  -[HMDHome accessoryWithIdentifier:](self, "accessoryWithIdentifier:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHome homeReprovisionHandler](self, "homeReprovisionHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleReprovionedAccessory:identifier:error:", v8, v10, v7);

  }
}

- (void)accessoryBrowser:(id)a3 discoveryFailedWithError:(id)a4 accessoryServer:(id)a5 linkType:(int64_t)a6
{
  id v9;
  id v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  int64_t v14;

  v9 = a4;
  v10 = a5;
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __78__HMDHome_accessoryBrowser_discoveryFailedWithError_accessoryServer_linkType___block_invoke;
    v12[3] = &unk_1E89A50B0;
    v14 = a6;
    v13 = v10;
    -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](self, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v9, v13, a6, v12);

  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didStopPairingWithError:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  int v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "shortDescription");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v37 = v16;
      v38 = 2112;
      v39 = v17;
      v40 = 2112;
      v41 = v10;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ stopped pairing with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = v14;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    if (v10)
    {
      if (v21)
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "shortDescription");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v37 = v22;
        v38 = 2112;
        v39 = v23;
        v40 = 2112;
        v41 = v10;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ failed to pair with error: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(v10, "userInfo");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v26 = v25;
      else
        v26 = 0;
      v27 = v26;

      objc_msgSend(v27, "domain");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = HMFEqualObjects();

      if (!v29 || objc_msgSend(v27, "code") != -6754)
      {
        objc_msgSend(v12, "setLastPairingFailureTime:", CFAbsoluteTimeGetCurrent());
        objc_msgSend(v12, "setConsecutivePairingFailures:", objc_msgSend(v12, "consecutivePairingFailures") + 1);
      }
      objc_msgSend(v9, "identifier");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v9, "linkType");
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = __68__HMDHome_accessoryBrowser_accessoryServer_didStopPairingWithError___block_invoke;
      v34[3] = &unk_1E89BEF40;
      v35 = v10;
      -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](v19, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v35, v30, v31, v34);

    }
    else
    {
      if (v21)
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "shortDescription");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v37 = v32;
        v38 = 2112;
        v39 = v33;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory server %@ pairing completed successfully", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      -[HMDHome accessoryBrowser](v19, "accessoryBrowser");
      v27 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "discoverAccessories:", v9);
    }

  }
}

- (void)accessoryBrowser:(id)a3 identifier:(id)a4 reachable:(BOOL)a5
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  int v16;
  _BOOL4 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v17 = a5;
  v23 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[HMDHome accessories](self, "accessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v19;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v7);
        v12 = *(id *)(*((_QWORD *)&v18 + 1) + 8 * v11);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v13 = v12;
        else
          v13 = 0;
        v14 = v13;

        if (!v14)
        {
          objc_msgSend(v12, "identifier");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "isEqualToString:", v6);

          if (v16)
            objc_msgSend(v12, "setReachable:", v17);
        }

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v9);
  }

}

- (void)accessoryBrowser:(id)a3 didUpdateEndpoint:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  id v19;
  void *v20;
  int v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  HMDHome *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  id obj;
  uint64_t v56;
  HMDHome *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t v73[128];
  uint8_t buf[4];
  void *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  id v79;
  __int16 v80;
  id v81;
  __int16 v82;
  uint64_t v83;
  _BYTE v84[128];
  _BYTE v85[128];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v53 = a3;
  v6 = a4;
  v7 = (void *)MEMORY[0x1E0C99DE8];
  v57 = self;
  -[HMDHome accessories](self, "accessories");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "arrayWithCapacity:", objc_msgSend(v8, "count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v54 = v6;
  objc_msgSend(v6, "advertisements");
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v58 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
  if (v58)
  {
    v56 = *(_QWORD *)v70;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v70 != v56)
          objc_enumerationMutation(obj);
        v59 = v10;
        objc_msgSend(*(id *)(*((_QWORD *)&v69 + 1) + 8 * v10), "identifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v68 = 0u;
        -[HMDHome accessories](v57, "accessories");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v65, v84, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v66;
          do
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v66 != v15)
                objc_enumerationMutation(v12);
              v17 = *(id *)(*((_QWORD *)&v65 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v18 = v17;
              else
                v18 = 0;
              v19 = v18;

              objc_msgSend(v19, "identifier");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              v21 = objc_msgSend(v20, "isEqual:", v11);

              if (v21)
                objc_msgSend(v9, "addObject:", v19);

            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v65, v84, 16);
          }
          while (v14);
        }

        v10 = v59 + 1;
      }
      while (v59 + 1 != v58);
      v58 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
    }
    while (v58);
  }

  v22 = (void *)MEMORY[0x1D17BA0A0]();
  v23 = v57;
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = v54;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "sessionIdentifier");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v75 = v26;
    v76 = 2112;
    v77 = v27;
    v78 = 2112;
    v79 = obj;
    v80 = 2112;
    v81 = v9;
    _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Endpoint %@ with advertisements %@ matches accessories %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v22);
  if (objc_msgSend(v9, "count"))
  {
    objc_msgSend(v54, "sessionIdentifier");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v28)
    {
      v39 = (void *)MEMORY[0x1D17BA0A0]();
      v40 = v23;
      HMFGetOSLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v75 = v42;
        v76 = 2112;
        v77 = 0;
        _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Nil session identifier - dropping update for endpoint %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v39);
      goto LABEL_46;
    }
    -[HMDHome mediaSessionWithIdentifier:](v23, "mediaSessionWithIdentifier:", v28);
    v29 = objc_claimAutoreleasedReturnValue();
    v60 = v28;
    if (v29)
    {
      v30 = (void *)v29;
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = v23;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "uuid");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "UUIDString");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = objc_msgSend(v9, "count");
        *(_DWORD *)buf = 138544386;
        v75 = v34;
        v76 = 2112;
        v77 = v36;
        v78 = 2112;
        v79 = v28;
        v80 = 2112;
        v81 = obj;
        v82 = 2048;
        v83 = v37;
        v38 = "%{public}@Updated the endpoint for mediaSession %@ with sessionIdentifier %@ (%@ advertisements for %tu accessories) ";
LABEL_32:
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, v38, buf, 0x34u);

      }
    }
    else
    {
      -[HMDHome _createMediaSessionWithEndpoint:](v23, "_createMediaSessionWithEndpoint:", v54);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v43 = v23;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "uuid");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "UUIDString");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend(v9, "count");
        *(_DWORD *)buf = 138544386;
        v75 = v34;
        v76 = 2112;
        v77 = v36;
        v78 = 2112;
        v79 = v28;
        v80 = 2112;
        v81 = obj;
        v82 = 2048;
        v83 = v44;
        v38 = "%{public}@Creating mediaSession %@ for sessionIdentifier %@ (%@ advertisements for %tu accessories) ";
        goto LABEL_32;
      }
    }

    objc_autoreleasePoolPop(v31);
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v45 = v9;
    v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v61, v73, 16);
    if (v46)
    {
      v47 = v46;
      v48 = *(_QWORD *)v62;
      do
      {
        for (j = 0; j != v47; ++j)
        {
          if (*(_QWORD *)v62 != v48)
            objc_enumerationMutation(v45);
          v50 = *(id *)(*((_QWORD *)&v61 + 1) + 8 * j);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v51 = v50;
          else
            v51 = 0;
          v52 = v51;

          if (!v52)
            objc_msgSend(v50, "setReachable:", 1);
          objc_msgSend(v50, "updateMediaSession:", v30);

        }
        v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v61, v73, 16);
      }
      while (v47);
    }

    v25 = v54;
    v28 = v60;
LABEL_46:

  }
}

- (id)_hmdCharacteristicsForUpdatedHAPCharacteristics:(id)a3 accessoryServer:(id)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id obj;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v24 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v27 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessories](self, "accessories");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = v6;
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v25)
  {
    v22 = *(_QWORD *)v33;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v33 != v22)
          objc_enumerationMutation(obj);
        v26 = v7;
        v8 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v7);
        objc_msgSend(v24, "primaryAccessory");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v10 = v23;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v29;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v29 != v13)
                objc_enumerationMutation(v10);
              v15 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * v14);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v16 = v15;
              else
                v16 = 0;
              v17 = v16;

              if (objc_msgSend(v17, "matchesHAPAccessory:", v9))
              {
                objc_msgSend(v8, "instanceID");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "hmdCharacteristicForInstanceId:", v18);
                v19 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend(v19, "shouldUpdateValueFromHAPCharacteristic:", v8))
                  objc_msgSend(v27, "addObject:", v19);

              }
              ++v14;
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
          }
          while (v12);
        }

        v7 = v26 + 1;
      }
      while (v26 + 1 != v25);
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v25);
  }

  return v27;
}

- (id)_changedHMDCharacteristicsForHAPCharacteristics:(id)a3 stateNumber:(id)a4 broadcast:(BOOL)a5 accessoryServer:(id)a6
{
  _BOOL4 v7;
  id v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v32;
  int v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  _BOOL4 v42;
  HMDHome *v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  char v54;
  HMDHome *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  HMDHome *v65;
  NSObject *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  HMDHome *v75;
  NSObject *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  HMDHome *v85;
  NSObject *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  HMDHome *v93;
  NSObject *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  HMDHome *v104;
  NSObject *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  HMDHome *v111;
  NSObject *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t j;
  __int128 v122;
  void *v123;
  void *v124;
  void *v125;
  HMDHome *v126;
  int v127;
  HMDHome *v128;
  id v129;
  id obj;
  id v131;
  id v132;
  id v133;
  void *context;
  void *contexta;
  HMDHome *v136;
  _BOOL4 v137;
  uint64_t v138;
  id v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint8_t v159[128];
  uint8_t buf[4];
  id v161;
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  void *v167;
  __int16 v168;
  void *v169;
  __int16 v170;
  id v171;
  __int16 v172;
  id v173;
  __int16 v174;
  void *v175;
  _BYTE v176[128];
  _BYTE v177[128];
  uint64_t v178;

  v7 = a5;
  v178 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v139 = a4;
  v133 = a6;
  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v144 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = 0u;
  v136 = self;
  obj = v10;
  v145 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v155, v177, 16);
  if (v145)
  {
    v140 = *(void **)v156;
    v137 = v7;
    do
    {
      for (i = 0; i != v145; ++i)
      {
        if (*(void **)v156 != v140)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v155 + 1) + 8 * i);
        objc_msgSend(v12, "service");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome hapMetadata](self, "hapMetadata");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v7)
        {
          objc_msgSend(v12, "type");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "shouldFilterCharacteristicOfType:", v16);

          if ((v17 & 1) != 0)
            goto LABEL_16;
          objc_msgSend(v133, "primaryAccessory");
          v18 = objc_claimAutoreleasedReturnValue();

          v14 = (void *)v18;
        }
        else
        {
          objc_msgSend(v13, "type");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v15, "shouldFilterServiceOfType:", v19);

          if ((v20 & 1) != 0)
            goto LABEL_16;
        }
        -[HMDHome hmdHAPAccessoryWithHAPAccessory:](self, "hmdHAPAccessoryWithHAPAccessory:", v14);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "instanceID");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "hmdCharacteristicForInstanceId:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          objc_msgSend(v144, "setObject:forKey:", v23, v12);
        }
        else
        {
          context = (void *)MEMORY[0x1D17BA0A0]();
          v24 = self;
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v131 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v128 = v24;
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "instanceID");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "instanceID");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "type");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544386;
            v161 = v131;
            v162 = 2112;
            v163 = (uint64_t)v26;
            v164 = 2112;
            v165 = (uint64_t)v27;
            v166 = 2112;
            v167 = v28;
            v168 = 2112;
            v169 = v29;
            _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HAPCharacteristic %@/%@/%@/%@ to a HMDCharacteristic", buf, 0x34u);

            v24 = v128;
          }

          objc_autoreleasePoolPop(context);
          self = v136;
        }

        v7 = v137;
LABEL_16:

      }
      v145 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v155, v177, 16);
    }
    while (v145);
  }

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(obj, "count"));
  v132 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v154 = 0u;
  objc_msgSend(v144, "keyEnumerator");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "allObjects");
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v129 = v31;
  v138 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v151, v176, 16);
  v33 = 0;
  if (!v138)
  {
    v34 = v139;
    goto LABEL_71;
  }
  contexta = *(void **)v152;
  *(_QWORD *)&v32 = 138543618;
  v122 = v32;
  v34 = v139;
  do
  {
    v35 = 0;
    do
    {
      if (*(void **)v152 != contexta)
        objc_enumerationMutation(v129);
      v36 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * v35);
      objc_msgSend(v144, "objectForKey:", v36, v122);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "stateNumber");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = HMFEqualObjects();

      if (v39)
      {
        v146 = v35;
        objc_msgSend(v36, "value");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "lastKnownValue");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = +[HMDCharacteristic value:differentThan:](HMDCharacteristic, "value:differentThan:", v40, v41);

        if (v34 && v42)
        {
          v141 = (void *)MEMORY[0x1D17BA0A0]();
          v43 = self;
          HMFGetOSLogHandle();
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "type");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "instanceID");
            v46 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "lastKnownValue");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "stateNumber");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "value");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138545154;
            v161 = v125;
            v162 = 2112;
            v163 = (uint64_t)v45;
            v164 = 2112;
            v165 = v46;
            v51 = (void *)v46;
            v166 = 2112;
            v167 = v47;
            v168 = 2112;
            v169 = v48;
            v170 = 2112;
            v171 = v49;
            v172 = 2112;
            v173 = v139;
            v174 = 2112;
            v175 = v50;
            _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value at same state number from %@/%@ to %@/%@ for accessory: %@", buf, 0x52u);

            self = v136;
          }
          goto LABEL_32;
        }
        if (objc_msgSend(v37, "shouldUpdateValueFromHAPCharacteristic:", v36)
          && (objc_msgSend(v36, "value"), v73 = (void *)objc_claimAutoreleasedReturnValue(), v73, v73))
        {
          v74 = (void *)MEMORY[0x1D17BA0A0]();
          v75 = self;
          HMFGetOSLogHandle();
          v76 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "type");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "instanceID");
            v126 = v75;
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "lastKnownValue");
            v142 = v74;
            v80 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "value");
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544898;
            v161 = v77;
            v162 = 2112;
            v163 = (uint64_t)v78;
            v164 = 2112;
            v165 = (uint64_t)v79;
            v166 = 2112;
            v167 = v80;
            v168 = 2112;
            v169 = v81;
            v170 = 2112;
            v171 = v139;
            v172 = 2112;
            v173 = v82;
            _os_log_impl(&dword_1CD062000, v76, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value from %@ to %@ at same state number %@ for accessory: %@", buf, 0x48u);

            v74 = v142;
            v75 = v126;

          }
          objc_autoreleasePoolPop(v74);
          objc_msgSend(v132, "addObject:", v37);
          objc_msgSend(v37, "accessory");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v83, "supportsWoL") & 1) == 0 && !objc_msgSend(v83, "custom1WoBLE"))
            goto LABEL_48;
          v84 = (void *)MEMORY[0x1D17BA0A0]();
          v85 = v75;
          HMFGetOSLogHandle();
          v86 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v161 = v87;
            v162 = 2112;
            v163 = (uint64_t)v36;
            v164 = 2112;
            v165 = (uint64_t)v37;
            v166 = 2112;
            v167 = v88;
            _os_log_impl(&dword_1CD062000, v86, OS_LOG_TYPE_INFO, "%{public}@Checking if we should update value hapCharacteristic %@ to hmdCharacteristic %@ for accessory: %@", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v84);
          if (v42
            || (objc_msgSend(v37, "lastKnownValueUpdateTime"),
                v89 = (void *)objc_claimAutoreleasedReturnValue(),
                objc_msgSend(v36, "valueUpdatedTime"),
                v90 = (void *)objc_claimAutoreleasedReturnValue(),
                v91 = objc_msgSend(v89, "compare:", v90),
                v90,
                v89,
                v91))
          {
LABEL_48:

            self = v136;
            goto LABEL_33;
          }
          v110 = (void *)MEMORY[0x1D17BA0A0]();
          v111 = v85;
          HMFGetOSLogHandle();
          v112 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v114 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v122;
            v161 = v113;
            v162 = 2112;
            v163 = (uint64_t)v114;
            _os_log_impl(&dword_1CD062000, v112, OS_LOG_TYPE_INFO, "%{public}@Not updating value because update times and values are the same for accessory: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v110);

          v34 = v139;
          objc_msgSend(v37, "setStateNumber:", v139);
          v33 = 1;
        }
        else
        {
          v92 = (void *)MEMORY[0x1D17BA0A0]();
          v93 = self;
          HMFGetOSLogHandle();
          v94 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "type");
            v95 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "instanceID");
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "stateNumber");
            v127 = v33;
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "lastKnownValue");
            v143 = v92;
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "value");
            v99 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v133, "identifier");
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544898;
            v161 = v124;
            v162 = 2112;
            v163 = v95;
            v101 = (void *)v95;
            v164 = 2112;
            v165 = (uint64_t)v96;
            v166 = 2112;
            v167 = v97;
            v168 = 2112;
            v169 = v98;
            v170 = 2112;
            v171 = v99;
            v172 = 2112;
            v173 = v100;
            _os_log_impl(&dword_1CD062000, v94, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring the update for characteristic: '%@'/%@/%@ from %@ to %@ for accessory: %@", buf, 0x48u);

            v92 = v143;
            v33 = v127;

            v34 = v139;
          }

          objc_autoreleasePoolPop(v92);
        }
        self = v136;
LABEL_53:
        v35 = v146;
        if (!v34)
          goto LABEL_59;
LABEL_54:
        if ((v33 & 1) != 0 && (objc_msgSend(v37, "shouldIgnoreCacheValueForRead") & 1) == 0)
        {
          objc_msgSend(v37, "accessory");
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          if (v102)
            objc_msgSend(v123, "addObject:", v102);

        }
        goto LABEL_59;
      }
      objc_msgSend(v36, "value");
      v52 = objc_claimAutoreleasedReturnValue();
      if (!v52
        || (v53 = (void *)v52,
            v54 = objc_msgSend(v37, "shouldUpdateValueFromHAPCharacteristic:", v36),
            v53,
            (v54 & 1) != 0))
      {
        v141 = (void *)MEMORY[0x1D17BA0A0]();
        v55 = self;
        HMFGetOSLogHandle();
        v44 = objc_claimAutoreleasedReturnValue();
        v146 = v35;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "type");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "instanceID");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "lastKnownValue");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "stateNumber");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "value");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v133, "identifier");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138545154;
          v161 = v56;
          v162 = 2112;
          v163 = (uint64_t)v57;
          v164 = 2112;
          v165 = (uint64_t)v58;
          v166 = 2112;
          v167 = v59;
          v168 = 2112;
          v169 = v60;
          v170 = 2112;
          v171 = v61;
          v172 = 2112;
          v173 = v139;
          v174 = 2112;
          v175 = v62;
          _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Characteristic: '%@'/%@ updated value / state number from %@/%@ to %@/%@ for accessory: %@", buf, 0x52u);

          self = v136;
        }
LABEL_32:

        objc_autoreleasePoolPop(v141);
        objc_msgSend(v132, "addObject:", v37);
LABEL_33:
        v34 = v139;
        objc_msgSend(v37, "setStateNumber:", v139);
        objc_msgSend(v36, "notificationContext");
        v63 = (void *)objc_claimAutoreleasedReturnValue();

        if (v63)
        {
          v64 = (void *)MEMORY[0x1D17BA0A0]();
          v65 = self;
          HMFGetOSLogHandle();
          v66 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "value");
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "notificationContext");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v161 = v67;
            v162 = 2112;
            v163 = (uint64_t)v68;
            v164 = 2112;
            v165 = (uint64_t)v69;
            _os_log_impl(&dword_1CD062000, v66, OS_LOG_TYPE_INFO, "%{public}@Updating HMD characteristic with value: %@ and notification context: %@", buf, 0x20u);

            self = v136;
          }

          objc_autoreleasePoolPop(v64);
        }
        objc_msgSend(v36, "value");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "valueUpdatedTime");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "notificationContext");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "updateValue:updatedTime:stateNumber:notificationContext:", v70, v71, v139, v72);

        v33 = 1;
        goto LABEL_53;
      }
      v103 = (void *)MEMORY[0x1D17BA0A0]();
      v104 = self;
      HMFGetOSLogHandle();
      v105 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "value");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "shortDescription");
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v133, "identifier");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v161 = v106;
        v162 = 2112;
        v163 = (uint64_t)v107;
        v164 = 2112;
        v165 = (uint64_t)v108;
        v166 = 2112;
        v167 = v109;
        _os_log_impl(&dword_1CD062000, v105, OS_LOG_TYPE_INFO, "%{public}@Ignoring same value %@ updates from local for characteristic: '%@' for accessory: %@", buf, 0x2Au);

        v34 = v139;
        self = v136;

      }
      objc_autoreleasePoolPop(v103);
      objc_msgSend(v37, "setStateNumber:", v34);
      v33 = 1;
      if (v34)
        goto LABEL_54;
LABEL_59:

      ++v35;
    }
    while (v138 != v35);
    v115 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v151, v176, 16);
    v138 = v115;
  }
  while (v115);
LABEL_71:

  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v116 = v123;
  v117 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v147, v159, 16);
  if (v117)
  {
    v118 = v117;
    v119 = *(_QWORD *)v148;
    do
    {
      for (j = 0; j != v118; ++j)
      {
        if (*(_QWORD *)v148 != v119)
          objc_enumerationMutation(v116);
        objc_msgSend(*(id *)(*((_QWORD *)&v147 + 1) + 8 * j), "notifyingCharacteristicStateNumberUpdated:", v34);
      }
      v118 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v147, v159, 16);
    }
    while (v118);
  }

  if (v34 != 0 && (v33 & 1) != 0)
    -[HMDHome saveToCurrentAccountWithReason:](self, "saveToCurrentAccountWithReason:", CFSTR("kCharacteristicValueUpdateStateNumberKey"));

  return v132;
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateValuesForCharacteristics:(id)a5 stateNumber:(id)a6 broadcast:(BOOL)a7
{
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  _QWORD block[5];
  id v19;
  id v20;
  id v21;
  BOOL v22;

  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMDHome workQueue](self, "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __100__HMDHome_accessoryBrowser_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast___block_invoke;
  block[3] = &unk_1E89BC5E8;
  block[4] = self;
  v19 = v12;
  v20 = v11;
  v21 = v13;
  v22 = a7;
  v15 = v13;
  v16 = v11;
  v17 = v12;
  dispatch_async(v14, block);

}

- (void)handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_handleUpdatedCharacteristics_accessoryServer___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_handleUpdatedCharacteristics:(id)a3 accessoryServer:(id)a4 stateNumber:(id)a5 broadcast:(BOOL)a6 internal:(BOOL)a7
{
  _BOOL8 v8;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t j;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id obj;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  _QWORD v62[2];
  _BYTE v63[128];
  uint8_t v64[128];
  uint8_t buf[4];
  void *v66;
  uint64_t v67;

  v8 = a6;
  v67 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  objc_msgSend(v13, "identifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    if (v8)
    {
      +[HMDBLEBroadcastEventReceived broadcastEventFromAccessory:withExpectedGSN:](HMDBLEBroadcastEventReceived, "broadcastEventFromAccessory:withExpectedGSN:", v16, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome logEventSubmitter](self, "logEventSubmitter");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "submitLogEvent:", v17);

      -[HMDHome _hmdCharacteristicsForUpdatedHAPCharacteristics:accessoryServer:](self, "_hmdCharacteristicsForUpdatedHAPCharacteristics:accessoryServer:", v12, v13);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = -[HMDHome _isSecureClassTriggeredByCharacteristics:](self, "_isSecureClassTriggeredByCharacteristics:", v19);

      if (v20)
      {
        v21 = (void *)MEMORY[0x1D17BA0A0]();
        v22 = self;
        HMFGetOSLogHandle();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v66 = v24;
          _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Broadcasted change - triggering secure class - confirming", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v21);
        if (objc_msgSend(v13, "linkType") == 2)
        {
          v25 = v13;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = v26;

          objc_msgSend(v27, "setConnectReason:", 4);
        }
        -[HMDHome accessoryBrowser](v22, "accessoryBrowser");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "discoverAccessories:", v13);
LABEL_33:

        goto LABEL_34;
      }

    }
    v49 = v14;
    v50 = v13;
    v51 = v12;
    -[HMDHome _changedHMDCharacteristicsForHAPCharacteristics:stateNumber:broadcast:accessoryServer:](self, "_changedHMDCharacteristicsForHAPCharacteristics:stateNumber:broadcast:accessoryServer:", v12, v14, v8, v13);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _notifyChangedCharacteristics:message:modifiedCharacteristics:broadcast:](self, "_notifyChangedCharacteristics:message:modifiedCharacteristics:broadcast:", v29, 0, 0, v8);
    if (!v8 && !a7)
      -[HMDHome _auditChangedCharactersitics:](self, "_auditChangedCharactersitics:", v29);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v30 = v29;
    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v57, v64, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v58;
      do
      {
        for (i = 0; i != v32; ++i)
        {
          if (*(_QWORD *)v58 != v33)
            objc_enumerationMutation(v30);
          v35 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * i);
          objc_msgSend(v35, "accessory");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "uuid");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "objectForKeyedSubscript:", v37);
          v38 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v38)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "uuid");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "setObject:forKeyedSubscript:", v38, v39);

          }
          objc_msgSend(v38, "addObject:", v35);

        }
        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v57, v64, 16);
      }
      while (v32);
    }
    v48 = v30;

    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    objc_msgSend(v28, "allValues");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
    if (v40)
    {
      v41 = v40;
      v42 = *(_QWORD *)v54;
      do
      {
        for (j = 0; j != v41; ++j)
        {
          if (*(_QWORD *)v54 != v42)
            objc_enumerationMutation(obj);
          v44 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * j);
          v61[0] = CFSTR("HMDNotificationCharacteristicValueUpdatedReasonKey");
          v61[1] = CFSTR("HMDNotificationCharacteristicValueUpdatedChangedCharacteristicsKey");
          v62[0] = &unk_1E8B328C8;
          v62[1] = v44;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v62, v61, 2, v48);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "firstObject");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "accessory");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          logAndPostNotification(CFSTR("HMDNotificationCharacteristicValueUpdated"), v47, v45);

        }
        v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
      }
      while (v41);
    }

    v13 = v50;
    v12 = v51;
    v14 = v49;
    v17 = v48;
    goto LABEL_33;
  }
LABEL_34:

}

- (BOOL)_isSecureClassTriggeredByCharacteristics:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t k;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  void *v30;
  BOOL v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  HMDHome *v37;
  id obj;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  void *v64;
  _BYTE v65[128];
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHome triggers](self, "triggers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v37 = self;
  -[HMDHome triggers](self, "triggers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v68, 16);
  if (v40)
  {
    v39 = *(_QWORD *)v56;
    do
    {
      for (i = 0; i != v40; ++i)
      {
        if (*(_QWORD *)v56 != v39)
          objc_enumerationMutation(obj);
        v9 = *(id *)(*((_QWORD *)&v55 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v41 = v11;
        objc_msgSend(v11, "characteristicBaseEvents");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v67, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v52;
          do
          {
            for (j = 0; j != v14; ++j)
            {
              if (*(_QWORD *)v52 != v15)
                objc_enumerationMutation(v12);
              objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * j), "characteristic");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v4, "containsObject:", v17);

              if (v18)
                objc_msgSend(v7, "addObject:", v9);
            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v67, 16);
          }
          while (v14);
        }

      }
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v68, 16);
    }
    while (v40);
  }

  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v19 = v7;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v47, v66, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v48;
    v42 = *(_QWORD *)v48;
    do
    {
      for (k = 0; k != v21; ++k)
      {
        if (*(_QWORD *)v48 != v22)
          objc_enumerationMutation(v19);
        v24 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * k);
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        objc_msgSend(v24, "actionSets");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v43, v65, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v44;
          while (2)
          {
            for (m = 0; m != v27; ++m)
            {
              if (*(_QWORD *)v44 != v28)
                objc_enumerationMutation(v25);
              v30 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * m);
              if (objc_msgSend(v30, "containsSecureCharacteristic"))
              {
                v32 = (void *)MEMORY[0x1D17BA0A0]();
                v33 = v37;
                HMFGetOSLogHandle();
                v34 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                {
                  HMFGetLogIdentifier();
                  v35 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v60 = v35;
                  v61 = 2112;
                  v62 = v24;
                  v63 = 2112;
                  v64 = v30;
                  _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_DEBUG, "%{public}@Trigger %@ has action set %@ with security class", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v32);

                v31 = 1;
                goto LABEL_40;
              }
            }
            v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v43, v65, 16);
            if (v27)
              continue;
            break;
          }
        }

        v22 = v42;
      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v47, v66, 16);
      v31 = 0;
    }
    while (v21);
  }
  else
  {
    v31 = 0;
  }
LABEL_40:

  return v31;
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateHasPairings:(BOOL)a5
{
  int v5;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v5 = a5;
  v24 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  objc_msgSend(v9, "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v15;
      v20 = 2112;
      v21 = v16;
      v22 = 1024;
      v23 = v5;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Updating accessory server %@ with new value of hasPairings: %d", (uint8_t *)&v18, 0x1Cu);

    }
    objc_autoreleasePoolPop(v12);
    if (objc_msgSend(v9, "isPaired") == v5)
    {
      -[HMDHome accessoryBrowser](v13, "accessoryBrowser");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "resurrectAccessoryServer:", v9);
    }
    else
    {
      -[HMDHome _unconfigurePairedAccessoriesForServer:updateReachability:](v13, "_unconfigurePairedAccessoriesForServer:updateReachability:", v9, 1);
      -[HMDHome accessoryBrowser](v13, "accessoryBrowser");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "tombstoneAccessoryServer:", v9);
    }

  }
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateCategory:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v9, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "shortDescription");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v16;
      v20 = 2112;
      v21 = v17;
      v22 = 2112;
      v23 = v10;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Paired Accessory: %@, Updated Category to %@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v12, "updateCategory:", v10);
  }

}

- (void)accessoryBrowser:(id)a3 didUpdateReachability:(BOOL)a4 forBTLEAccessoriesWithServerIdentifier:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v6 = a4;
  v34 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  -[HMDHome hapAccessories](self, "hapAccessories");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke;
  v26[3] = &unk_1E89BA910;
  v11 = v9;
  v27 = v11;
  objc_msgSend(v10, "na_firstObjectPassingTest:", v26);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "setReachability:serverIdentifier:linkType:", v6, v11, 2);
  if (!v6
    && isiOSDevice()
    && !-[HMDHome _hasPairedReachableBTLEAccessories](self, "_hasPairedReachableBTLEAccessories")
    && (-[HMDHome homeLocation](self, "homeLocation") == 3 || -[HMDHome homeLocation](self, "homeLocation") == 2))
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@All BLE accessories have become unreachable and we are out... Stop looking", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    -[HMDHome accessoryBrowser](v14, "accessoryBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "btleAccessoryReachabilityProbeTimer:", 0);

    -[HMDHome hapAccessories](v14, "hapAccessories");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "na_map:", &__block_literal_global_1403);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v19, "count"))
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = v14;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v21, "uuid");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v29 = v23;
        v30 = 2112;
        v31 = v19;
        v32 = 2112;
        v33 = v24;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Stop tracking BLE accessories: %@ in Home UUID: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHome accessoryBrowser](v21, "accessoryBrowser");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "stopTrackingBTLEAccessoriesWithIdentifiers:", v19);

    }
  }

}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 sessionInfo:(id)a6 linkLayerType:(int64_t)a7 withError:(id)a8
{
  _BOOL8 v10;
  id v13;
  id v14;
  void *v15;
  id v16;

  v10 = a5;
  v13 = a8;
  v14 = a6;
  objc_msgSend(a4, "identifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v15);
  v16 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "didUpdateConnectionState:sessionInfo:linkLayerType:bookkeeping:withError:", v10, v14, a7, 0, v13);
}

- (void)accessoryBrowser:(id)a3 accessoryServer:(id)a4 didUpdateConnectionState:(BOOL)a5 linkLayerType:(int64_t)a6 bookkeeping:(id)a7 withError:(id)a8
{
  _BOOL8 v10;
  id v13;
  id v14;
  void *v15;
  id v16;

  v10 = a5;
  v13 = a8;
  v14 = a7;
  objc_msgSend(a4, "identifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome hapAccessoryWithIdentifier:](self, "hapAccessoryWithIdentifier:", v15);
  v16 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "didUpdateConnectionState:sessionInfo:linkLayerType:bookkeeping:withError:", v10, 0, a6, v14, v13);
}

- (void)accessoryBrowser:(id)a3 didFinishPairingForAccessoryServer:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  HMDRemoteDeviceMessageDestination *v9;
  void *v10;
  void *v11;
  HMDRemoteDeviceMessageDestination *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  HMDHome *v33;
  NSObject *v34;
  void *v35;
  id *v36;
  id v37;
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id location;
  uint8_t buf[4];
  id v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v37 = a3;
  v38 = a4;
  -[HMDHome primaryResident](self, "primaryResident");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6 && (objc_msgSend(v6, "device"), v8 = (void *)objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    v9 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "device");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v9, "initWithTarget:device:", v10, v11);

    v13 = v38;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "nodeID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v17, CFSTR("HMDHomePairingCompletionNodeIDMessageKey"));

    objc_msgSend(v15, "fabricID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v18, CFSTR("HMDHomePairingCompletionFabricIDMessageKey"));

    objc_msgSend(v15, "fabricID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v19, CFSTR("HMDHomePairingCompletionFabricIndexMessageKey"));

    objc_msgSend(v15, "vendorID");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v20, CFSTR("HMDHomePairingCompletionVendorIDMessageKey"));

    objc_msgSend(v15, "productID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v21, CFSTR("HMDHomePairingCompletionProductIDMessageKey"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v15, "configNumber"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v22, CFSTR("HMDHomePairingCompletionConfigNumberMessageKey"));

    objc_msgSend(v15, "category");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v23, CFSTR("HMDHomePairingCompletionCategoryMessageKey"));

    objc_msgSend(v15, "topology");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setObject:forKeyedSubscript:", v24, CFSTR("HMDHomePairingCompletionTopologyMessageKey"));

    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D285F8]), "initWithName:destination:payload:", CFSTR("HMDHomeNotificationPairingCompletionMessage"), v12, v16);
    objc_msgSend(v25, "setRemote:", 1);
    objc_msgSend(v25, "setSecureRemote:", 1);
    objc_initWeak(&location, self);
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = __63__HMDHome_accessoryBrowser_didFinishPairingForAccessoryServer___block_invoke;
    v39[3] = &unk_1E89BF4F0;
    v36 = &v41;
    objc_copyWeak(&v41, &location);
    v40 = v13;
    v26 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v25, "setResponseHandler:", v39));
    v27 = self;
    HMFGetOSLogHandle();
    v28 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "shortDescription", &v41, v37);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v44 = v29;
      v45 = 2112;
      v46 = v30;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Sending message %@ to notify pairing completion", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    -[HMDHome msgDispatcher](v27, "msgDispatcher");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "sendMessage:", v25);

    objc_destroyWeak(v36);
    objc_destroyWeak(&location);

  }
  else
  {
    v32 = (void *)MEMORY[0x1D17BA0A0]();
    v33 = self;
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v44 = v35;
      _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not available", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v32);
  }

}

- (void)filterServiceTransactions:(id)a3 removedServiceUUIDs:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (v6 && objc_msgSend(v6, "count") && objc_msgSend(v7, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3788], "indexSet");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v25 = v6;
    v9 = v6;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v30;
      v26 = *(_QWORD *)v30;
      v27 = v9;
      do
      {
        v13 = 0;
        v28 = v11;
        do
        {
          if (*(_QWORD *)v30 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v13);
          objc_msgSend(v14, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v7, "containsObject:", v15);

          if (v16)
          {
            v17 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v8, "addIndex:", objc_msgSend(v9, "indexOfObject:", v14)));
            v18 = self;
            HMFGetOSLogHandle();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "uuid");
              v21 = v8;
              v22 = self;
              v23 = v7;
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v34 = v20;
              v35 = 2114;
              v36 = v24;
              v37 = 2114;
              v38 = v14;
              _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Pair-Verify %{public}@] Removing duplicate service transaction %{public}@", buf, 0x20u);

              v7 = v23;
              self = v22;
              v8 = v21;
              v9 = v27;

              v12 = v26;
            }

            objc_autoreleasePoolPop(v17);
            v11 = v28;
          }
          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
      }
      while (v11);
    }

    objc_msgSend(v9, "removeObjectsAtIndexes:", v8);
    v6 = v25;
  }

}

- (void)_processProductDataForNewlyAddedAccessory:(id)a3 transaction:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome _productDataFromHAPAccessory:](self, "_productDataFromHAPAccessory:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "shortDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v12;
      v16 = 2112;
      v17 = v13;
      v18 = 2112;
      v19 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory %@ is now bound to productData %@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v7, "setProductDataV2:", v8);
    objc_msgSend(v7, "setProductData:", v8);
  }

}

- (void)_unconfigurePairedAccessoriesForServer:(id)a3 updateReachability:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  BOOL v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v4 = a4;
  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (objc_msgSend(v6, "isPaired"))
  {
    if (v4)
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v20 = v10;
        v21 = 2112;
        v22 = v6;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting reachability to false for all paired accessories associated with %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v7);
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v6, "linkType");
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __69__HMDHome__unconfigurePairedAccessoriesForServer_updateReachability___block_invoke;
    v15[3] = &unk_1E89A5188;
    v16 = v12;
    v17 = v13;
    v18 = v4;
    v14 = v12;
    -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:](self, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v11, v14, v13, v15);

  }
}

- (void)_fetchMetadataOnCurrentDeviceWithCompletion:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHome threadOperationalDataset](self, "threadOperationalDataset");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "retrieveMetadata:homeHasResident:completion:", v5, -[HMDHome doesHomeContainResident](self, "doesHomeContainResident"), v4);

}

- (void)retrieveThreadNetworkMetadataWithCompletion:(id)a3
{
  void (**v4)(id, _QWORD, void *);
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  _QWORD v18[5];
  void (**v19)(id, _QWORD, void *);
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(id, _QWORD, void *))a3;
  if (!-[HMDHome isSharedAdmin](self, "isSharedAdmin") && !-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unexpected user. Returning without retrieving thread network credentials", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 47);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, 0, v6);
    goto LABEL_16;
  }
  if (!-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "residentDevices");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v6, "count")
      && (-[HMDHome primaryResident](self, "primaryResident"),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v8 = objc_msgSend(v7, "isReachable"),
          v7,
          v8))
    {
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __55__HMDHome_retrieveThreadNetworkMetadataWithCompletion___block_invoke;
      v18[3] = &unk_1E89B87C8;
      v18[4] = self;
      v19 = v4;
      -[HMDHome _fetchMetadataFromPrimaryResidentWithCompletion:](self, "_fetchMetadataFromPrimaryResidentWithCompletion:", v18);

    }
    else if (-[HMDHome isSharedAdmin](self, "isSharedAdmin"))
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v21 = v12;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@No resident available. Returning without retrieving thread network credentials", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 91);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v4[2](v4, 0, v13);

    }
    else
    {
      -[HMDHome _fetchMetadataOnCurrentDeviceWithCompletion:](self, "_fetchMetadataOnCurrentDeviceWithCompletion:", v4);
    }
LABEL_16:

    goto LABEL_17;
  }
  -[HMDHome _fetchMetadataOnCurrentDeviceWithCompletion:](self, "_fetchMetadataOnCurrentDeviceWithCompletion:", v4);
LABEL_17:

}

- (void)removeThreadNetworkPreferredNetworkWithCompletion:(id)a3
{
  id v3;
  id v4;

  v3 = a3;
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removePreferredNetworkWithCompletion:", v3);

}

- (id)_checkResidentCapabilitiesForCredentialSharing:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  HMDHome *v15;
  void *v16;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (!v4 || (objc_msgSend(v4, "device"), v6 = (void *)objc_claimAutoreleasedReturnValue(), v6, !v6))
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request thread credentials from", (uint8_t *)&v18, 0xCu);

    }
    v14 = 91;
    goto LABEL_11;
  }
  objc_msgSend(v5, "capabilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "supportsThreadNetworkCredentialSharing");

  if ((v8 & 1) == 0)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v16;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Primary resident doesn't support Thread Network Credential sharing", (uint8_t *)&v18, 0xCu);

    }
    v14 = 92;
LABEL_11:

    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", v14);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_12;
  }
  v9 = 0;
LABEL_12:

  return v9;
}

- (void)_fetchMetadataFromPrimaryResidentWithCompletion:(id)a3
{
  void (**v4)(id, _QWORD, void *);
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  HMDRemoteDeviceMessageDestination *v14;
  void *v15;
  void *v16;
  HMDRemoteDeviceMessageDestination *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *, void *);
  void *v23;
  void (**v24)(id, _QWORD, void *);
  id v25;
  const __CFString *v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(id, _QWORD, void *))a3;
  -[HMDHome primaryResident](self, "primaryResident");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _checkResidentCapabilitiesForCredentialSharing:](self, "_checkResidentCapabilitiesForCredentialSharing:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Couldn't find compatible resident to fetch Thread network credentials", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    v4[2](v4, 0, v6);
  }
  else
  {
    if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
      && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v12 = objc_msgSend(v11, "supportsThreadService"),
          v11,
          v12))
    {
      v26 = CFSTR("HMDHomeThreadNetworkCredentialsIsRequestorThreadCapablePayloadKey");
      v27 = &unk_1E8B328E0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = 0;
    }
    v14 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "device");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v14, "initWithTarget:device:", v15, v16);

    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D285F8]), "initWithName:destination:payload:", CFSTR("HMDHomeThreadNetworkCredentialsRequestKey"), v17, v13);
    objc_msgSend(v18, "setRemote:", 1);
    objc_msgSend(v18, "setSecureRemote:", 1);
    objc_initWeak((id *)buf, self);
    v20 = MEMORY[0x1E0C809B0];
    v21 = 3221225472;
    v22 = __59__HMDHome__fetchMetadataFromPrimaryResidentWithCompletion___block_invoke;
    v23 = &unk_1E89C1B70;
    objc_copyWeak(&v25, (id *)buf);
    v24 = v4;
    objc_msgSend(v18, "setResponseHandler:", &v20);
    -[HMDHome msgDispatcher](self, "msgDispatcher", v20, v21, v22, v23);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "sendMessage:completionHandler:", v18, 0);

    objc_destroyWeak(&v25);
    objc_destroyWeak((id *)buf);

  }
}

- (void)retrieveOperationalCertificatesForFabricID:(id)a3 commissionerNodeID:(id)a4 commissioneeNodeID:(id)a5 publicKey:(id)a6 completion:(id)a7
{
  id v12;
  void *v13;
  void *v14;
  void *v15;
  HMDRemoteDeviceMessageDestination *v16;
  void *v17;
  void *v18;
  HMDRemoteDeviceMessageDestination *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id location;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v33 = a3;
  v32 = a4;
  v34 = a5;
  v35 = a6;
  v12 = a7;
  -[HMDHome primaryResident](self, "primaryResident");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13 && (objc_msgSend(v13, "device"), v15 = (void *)objc_claimAutoreleasedReturnValue(), v15, v15))
  {
    v16 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "device");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v16, "initWithTarget:device:", v17, v18);

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v34, CFSTR("HMDHomeCommissioningDeviceNodeIDMessageKey"));
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v33, CFSTR("HMDHomeCommissioningFabricIDMessageKey"));
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v33, CFSTR("HMDHomeCommissioningFabricIndexMessageKey"));
    objc_msgSend(v20, "setObject:forKeyedSubscript:", v35, CFSTR("HMDHomeCommissioningPublicKeyMessageKey"));
    if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
      objc_msgSend(v20, "setObject:forKeyedSubscript:", v32, CFSTR("HMDHomeCommissioningCommissionerNodeIDMessageKey"));
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D285F8]), "initWithName:destination:payload:", CFSTR("HMDHomeRequestCommissioningCertificatesMessage"), v19, v20);
    objc_msgSend(v21, "setRemote:", 1);
    objc_msgSend(v21, "setSecureRemote:", 1);
    objc_initWeak(&location, self);
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __113__HMDHome_retrieveOperationalCertificatesForFabricID_commissionerNodeID_commissioneeNodeID_publicKey_completion___block_invoke;
    v36[3] = &unk_1E89C1B70;
    objc_copyWeak(&v38, &location);
    v37 = v12;
    v22 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v21, "setResponseHandler:", v36));
    v23 = self;
    HMFGetOSLogHandle();
    v24 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "shortDescription");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v25;
      v42 = 2112;
      v43 = v26;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Sending message %@ to fetch Matter operational certificates from the primary resident", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
    -[HMDHome msgDispatcher](v23, "msgDispatcher");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "sendMessage:", v21);

    objc_destroyWeak(&v38);
    objc_destroyWeak(&location);

  }
  else
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v31;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Primary resident is not available", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 91);
    v19 = (HMDRemoteDeviceMessageDestination *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD, HMDRemoteDeviceMessageDestination *))v12 + 2))(v12, 0, 0, 0, 0, v19);
  }

}

- (void)residentDeviceManager:(id)a3 didUpdateResidentAvailable:(BOOL)a4
{
  NSObject *v6;
  _QWORD v7[5];
  BOOL v8;

  -[HMDHome workQueue](self, "workQueue", a3);
  v6 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __60__HMDHome_residentDeviceManager_didUpdateResidentAvailable___block_invoke;
  v7[3] = &unk_1E89C2758;
  v7[4] = self;
  v8 = a4;
  dispatch_async(v6, v7);

}

- (void)residentDeviceManager:(id)a3 didUpdatePrimaryResident:(id)a4 previousPrimaryResident:(id)a5
{
  NSObject *v6;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3, a4, a5);
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __82__HMDHome_residentDeviceManager_didUpdatePrimaryResident_previousPrimaryResident___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v6, block);

}

- (void)residentDeviceManagerDidUpdateResidents:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __51__HMDHome_residentDeviceManagerDidUpdateResidents___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (id)balancedResidentMapForAccessories:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "residentMesh");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "balancedResidentMapForAccessories:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)userManagementOperationDidFinish:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHome_userManagementOperationDidFinish___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleDisableNotificationsTimerFired
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD v38[3];
  _QWORD v39[3];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome notificationRegistrations](self, "notificationRegistrations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  -[HMDHome notificationDeregistrations](self, "notificationDeregistrations");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "shortDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shortDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v41 = v11;
    v42 = 2112;
    v43 = v12;
    v44 = 2112;
    v45 = v13;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Notification disable timer fired - registrations %@  deregistrations %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHome setDisableNotificationTimer:](v9, "setDisableNotificationTimer:", 0);
  -[HMDHome notificationRegistrationsForAppleMediaAccessories](v9, "notificationRegistrationsForAppleMediaAccessories");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");

  -[HMDHome _applyNotificationDeregistrations](v9, "_applyNotificationDeregistrations");
  -[HMDHome notificationRegistrations](v9, "notificationRegistrations");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "count");

  -[HMDHome notificationRegistrationsForAppleMediaAccessories](v9, "notificationRegistrationsForAppleMediaAccessories");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "count");

  if (!v19 && v15)
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = v9;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v23;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Modifying Apple Media notification registrations with devices due to HomeKit client no longer active", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    -[HMDHome _subscribeForHomeAppleMediaNotificationsOnDirectTransports:](v21, 0);
  }
  if (!v17)
  {
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = v9;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v27;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with resident due to HomeKit client no longer active", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
    -[HMDHome _subscribeForHomeNotificationsFromRemoteGateway:](v25, "_subscribeForHomeNotificationsFromRemoteGateway:", 0);
    -[HMDHome _subscribeForHomeNotificationsOnDirectTransports:](v25, 0);
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setNotificationsUpdatedTime:](v25, "setNotificationsUpdatedTime:", v28);

    -[HMDHome homeManager](v25, "homeManager");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "chipDataSource");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "updateNotificationsEnabled:forHome:keepAliveOnly:", 0, v25, 0);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0, CFSTR("kCharacteristicNotificationEnableKey"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v39[0] = v31;
    v38[1] = *MEMORY[0x1E0CB8D50];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v39[1] = v32;
    v38[2] = CFSTR("kCharacteristicNotificationEnableTime");
    -[HMDHome notificationsUpdatedTime](v25, "notificationsUpdatedTime");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v39[2] = v33;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 3);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D285D0], "entitledMessageWithName:messagePayload:", *MEMORY[0x1E0CBAAE0], v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome msgDispatcher](v25, "msgDispatcher");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v25, "uuid");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "sendMessage:target:", v35, v37);

    logAndPostNotification(CFSTR("HMDHomeDidDisableCharacteristicNotifyEventNotification"), v25, 0);
  }

}

- (void)notifyClientsOfReachabilityUpdateForAccessory:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __57__HMDHome_notifyClientsOfReachabilityUpdateForAccessory___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleAccessoryReachabilityUpdatesTimerFired
{
  void *v3;
  HMDHome *v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHomeManagerXPCMessageSendPolicy *v37;
  HMDHomeManagerXPCMessageSendPolicy *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t k;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHomeManagerXPCMessageSendPolicy *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t m;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id obj;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  void *v68;
  HMDHome *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  const __CFString *v87;
  void *v88;
  _BYTE v89[128];
  const __CFString *v90;
  void *v91;
  _BYTE v92[128];
  const __CFString *v93;
  void *v94;
  uint8_t buf[4];
  void *v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet allObjects](self->_reachabilityUpdatedAccessories, "allObjects");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableSet removeAllObjects](self->_reachabilityUpdatedAccessories, "removeAllObjects");
  os_unfair_recursive_lock_unlock();
  v4 = self;
  v66 = v3;
  v58 = objc_msgSend(v66, "count");
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v69 = v4;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v58)
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v96 = v8;
      v97 = 2048;
      v98 = v58;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Sending accessory reachability updates - number of entries %lu", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v58);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v58);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v58);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    -[HMDHome accessories](v69, "accessories");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, buf, 16);
    if (v9)
    {
      v63 = *(id *)v83;
      v61 = *MEMORY[0x1E0CB7DC0];
      v59 = *MEMORY[0x1E0CB80F8];
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(id *)v83 != v63)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * i);
          objc_msgSend(v11, "uuid", v58);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "UUIDString");
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v66, "containsObject:", v13))
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v11, "isReachableForXPCClients"));
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "messageSendPolicy");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v15);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v16)
            {
              objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v58);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v68, "setObject:forKey:", v16, v15);
            }
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 3);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "setObject:forKeyedSubscript:", v14, CFSTR("kAccessoryIsReachableKey"));
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v11, "reachableTransports"));
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, v61);

            v19 = v11;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v20 = v19;
            else
              v20 = 0;
            v21 = v20;

            if (v21)
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v21, "suspendedState"));
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "setObject:forKeyedSubscript:", v22, v59);

            }
            v23 = (void *)objc_msgSend(v17, "copy");
            objc_msgSend(v16, "setObject:forKeyedSubscript:", v23, v13);

            if ((objc_msgSend(v15, "entitlements") & 4) == 0)
            {
              objc_msgSend(v60, "hmf_mutableDictionaryForKey:", v15);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v24)
              {
                objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v58);
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v60, "setObject:forKey:", v24, v15);
              }
              v93 = CFSTR("kAccessoryIsReachableKey");
              v94 = v14;
              objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v94, &v93, 1);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "setObject:forKeyedSubscript:", v25, v13);

            }
          }

        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, buf, 16);
      }
      while (v9);
    }

    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    objc_msgSend(v68, "allKeys");
    v64 = (id)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v78, v92, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v79;
      v28 = *MEMORY[0x1E0CB7B68];
      do
      {
        for (j = 0; j != v26; ++j)
        {
          if (*(_QWORD *)v79 != v27)
            objc_enumerationMutation(v64);
          v30 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * j);
          objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v30, v58);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v31, "count"))
          {
            v32 = (void *)MEMORY[0x1E0D285F8];
            -[HMDHome messageDestination](v69, "messageDestination");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v90 = CFSTR("kAccessoriesListKey");
            v34 = (void *)objc_msgSend(v31, "copy");
            v91 = v34;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v91, &v90, 1);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "messageWithName:destination:payload:", v28, v33, v35);
            v36 = (void *)objc_claimAutoreleasedReturnValue();

            if ((objc_msgSend(v30, "entitlements") & 4) != 0)
              v37 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", objc_msgSend(v30, "entitlements"), objc_msgSend(v30, "options"), 1);
            else
              v37 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", objc_msgSend(v30, "entitlements") | 4, objc_msgSend(v30, "options"), 1);
            v38 = v37;
            objc_msgSend(v36, "setSendPolicy:", v37);

            objc_msgSend(v67, "addObject:", v36);
          }

        }
        v26 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v78, v92, 16);
      }
      while (v26);
    }

    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    objc_msgSend(v60, "allKeys");
    v65 = (id)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v74, v89, 16);
    if (v39)
    {
      v40 = *(_QWORD *)v75;
      v41 = *MEMORY[0x1E0CB7B68];
      do
      {
        for (k = 0; k != v39; ++k)
        {
          if (*(_QWORD *)v75 != v40)
            objc_enumerationMutation(v65);
          v43 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * k);
          objc_msgSend(v68, "hmf_mutableDictionaryForKey:", v43, v58);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v44, "count"))
          {
            v45 = (void *)MEMORY[0x1E0D285F8];
            -[HMDHome messageDestination](v69, "messageDestination");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v87 = CFSTR("kAccessoriesListKey");
            v47 = (void *)objc_msgSend(v44, "copy");
            v88 = v47;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v88, &v87, 1);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v45, "messageWithName:destination:payload:", v41, v46, v48);
            v49 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v49, "setRequiresNoSPIEntitlement:", 1);
            v50 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", objc_msgSend(v43, "entitlements"), objc_msgSend(v43, "options"), 1);
            objc_msgSend(v49, "setSendPolicy:", v50);
            objc_msgSend(v67, "addObject:", v49);

          }
        }
        v39 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v74, v89, 16);
      }
      while (v39);
    }

    v51 = (void *)objc_msgSend(v67, "copy");
  }
  else
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v96 = v52;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Reachability update timer fired but no entries", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v51 = (void *)MEMORY[0x1E0C9AA60];
  }

  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v70, v86, 16);
  if (v53)
  {
    v54 = *(_QWORD *)v71;
    do
    {
      for (m = 0; m != v53; ++m)
      {
        if (*(_QWORD *)v71 != v54)
          objc_enumerationMutation(v51);
        v56 = *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * m);
        -[HMDHome msgDispatcher](v69, "msgDispatcher", v58);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "sendMessage:", v56);

      }
      v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v70, v86, 16);
    }
    while (v53);
  }

}

- (void)addUnconfiguredResidentDevice:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHome_addUnconfiguredResidentDevice___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)removeUnconfiguredResidentDeviceWithUserID:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __54__HMDHome_removeUnconfiguredResidentDeviceWithUserID___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleAccountHandlesUpdated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __39__HMDHome_handleAccountHandlesUpdated___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleActiveAccountChanged:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  _QWORD v10[5];
  id v11;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDAccountNotificationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __38__HMDHome_handleActiveAccountChanged___block_invoke;
  v10[3] = &unk_1E89C2328;
  v10[4] = self;
  v11 = v7;
  v9 = v7;
  dispatch_async(v8, v10);

}

- (void)handleDidReceiveIDSMessageWithNoListener:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHome_handleDidReceiveIDSMessageWithNoListener___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleDidReceiveIDSMessageWithNoListenerFromAddress:(id)a3
{
  __CFString *v4;
  int v5;
  __CFString *v6;
  __CFString *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[128];
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  __CFString *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (__CFString *)a3;
  v5 = shouldLogPrivateInformation();
  v6 = CFSTR("...");
  if (v5)
    v6 = v4;
  v7 = v6;
  if (-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v11;
      v33 = 2112;
      v34 = v7;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Received IDS message from %@ but home has remote access enabled, ignoring notification", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  else
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    -[HMDHome _residentUsers](self, "_residentUsers", 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v27;
      while (2)
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v27 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
          if (objc_msgSend(v17, "configurationState") == 2)
          {
            objc_msgSend(v17, "userID");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v18, "isEqualToString:", v4);

            if (v19)
            {
              v20 = (void *)MEMORY[0x1D17BA0A0]();
              v21 = self;
              HMFGetOSLogHandle();
              v22 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v32 = v23;
                v33 = 2112;
                v34 = v7;
                _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled but we received a message from resident at %@, requesting electing a remote peer", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v20);
              -[HMDHome homeManager](v21, "homeManager");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome uuid](v21, "uuid");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "electRemoteAccessPeerForHome:", v25);

              goto LABEL_20;
            }
          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
        if (v14)
          continue;
        break;
      }
    }
LABEL_20:

  }
}

- (void)remoteAccessHealthMonitorTimerDidFire
{
  NSObject *v3;
  _QWORD block[5];

  if (isiOSDevice())
  {
    -[HMDHome workQueue](self, "workQueue");
    v3 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __48__HMDHome_remoteAccessHealthMonitorTimerDidFire__block_invoke;
    block[3] = &unk_1E89C2730;
    block[4] = self;
    dispatch_async(v3, block);

  }
}

- (void)_remoteAccessHealthMonitorTimerDidFire
{
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  id v14;
  void *v15;
  NSObject *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  id obj;
  uint64_t v27;
  _QWORD aBlock[5];
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id location;
  uint8_t buf[4];
  id v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    -[HMDHome _residentUsers](self, "_residentUsers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    obj = v3;
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
    if (v4)
    {
      v27 = *(_QWORD *)v31;
      *(_QWORD *)&v5 = 138543618;
      v25 = v5;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v31 != v27)
            objc_enumerationMutation(obj);
          v7 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v6);
          -[HMDHome heartbeatPingMessagesQueuedWithServer](self, "heartbeatPingMessagesQueuedWithServer", v25);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "userID");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v8, "containsObject:", v9);

          v11 = (void *)MEMORY[0x1D17BA0A0]();
          v12 = self;
          if ((v10 & 1) != 0)
          {
            HMFGetOSLogHandle();
            v13 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v14 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "userID");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v25;
              v36 = v14;
              v37 = 2112;
              v38 = v15;
              _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Remote access health monitor fired, but we already have a ping queued with server to %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v11);
          }
          else
          {
            HMFGetOSLogHandle();
            v16 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v17 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "userID");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v25;
              v36 = v17;
              v37 = 2112;
              v38 = v18;
              _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Remote access health monitor fired, sending ping elect message to %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v11);
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 3221225472;
            aBlock[2] = __49__HMDHome__remoteAccessHealthMonitorTimerDidFire__block_invoke;
            aBlock[3] = &unk_1E89A5218;
            objc_copyWeak(&v29, &location);
            aBlock[4] = v7;
            v19 = _Block_copy(aBlock);
            -[HMDHome homeManager](v12, "homeManager");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "messageDispatcher");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "userID");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "userID");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome workQueue](v12, "workQueue");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "electDeviceForHH1User:destination:deviceCapabilities:responseTimeout:responseQueue:responseHandler:", v22, v23, 0, v24, v19, 600.0);

            objc_destroyWeak(&v29);
          }
          ++v6;
        }
        while (v4 != v6);
        v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
      }
      while (v4);
    }

    objc_destroyWeak(&location);
  }
}

- (void)_handleResponseForElectMessageToResident:(id)a3 error:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  const char *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (-[HMDHome remoteAccessIsEnabled](self, "remoteAccessIsEnabled"))
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
LABEL_5:

      objc_autoreleasePoolPop(v8);
      goto LABEL_19;
    }
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 138543618;
    v37 = v11;
    v38 = 2112;
    v39 = v12;
    v13 = "%{public}@Received response for ping message to resident %@. Remote access is already setup, dropping response";
LABEL_4:
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v36, 0x16u);

    goto LABEL_5;
  }
  if (v7)
  {
    objc_msgSend(v7, "domain");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v14, "isEqualToString:", *MEMORY[0x1E0D34028]))
    {
      if (objc_msgSend(v7, "code") == 16)
      {

LABEL_21:
        v8 = (void *)MEMORY[0x1D17BA0A0]();
        v9 = self;
        HMFGetOSLogHandle();
        v10 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          goto LABEL_5;
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "userID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543618;
        v37 = v11;
        v38 = 2112;
        v39 = v12;
        v13 = "%{public}@Failed to ping resident %@, will try again at next heartbeat";
        goto LABEL_4;
      }
      v35 = objc_msgSend(v7, "code");

      if (v35 == 23)
        goto LABEL_21;
    }
    else
    {

    }
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "userID");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543874;
      v37 = v31;
      v38 = 2112;
      v39 = v32;
      v40 = 2112;
      v41 = v7;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Failed to ping resident %@, but error %@ is not specific IDS error, will not re-try at next heartbeat", (uint8_t *)&v36, 0x20u);

    }
    objc_autoreleasePoolPop(v28);
    -[HMDHome heartbeatPingMessagesQueuedWithServer](v29, "heartbeatPingMessagesQueuedWithServer");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userID");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "addObject:", v34);

  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "userID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v18;
      v38 = 2112;
      v39 = v19;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Successfully sent ping message to resident %@, remembering queued message", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    -[HMDHome heartbeatPingMessagesQueuedWithServer](v16, "heartbeatPingMessagesQueuedWithServer");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "userID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "addObject:", v21);

    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = v16;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543362;
      v37 = v25;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled, requesting electing a remote peer", (uint8_t *)&v36, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    -[HMDHome homeManager](v23, "homeManager");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome uuid](v23, "uuid");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "electRemoteAccessPeerForHome:", v27);

  }
LABEL_19:

}

- (id)dumpActionSetDescription
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  -[HMDHome actionSets](self, "actionSets");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB3940];
  -[HMDHome name](self, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringWithFormat:", CFSTR("Home %@/%@:"), v7, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "addObject:", v10);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v11 = v4;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v31;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v31 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * v15), "dumpState");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v16);

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v13);
  }

  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v17, "copy");

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v19 = v18;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v27;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v27 != v22)
          objc_enumerationMutation(v19);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v23), "dumpState");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v24);

        ++v23;
      }
      while (v21 != v23);
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v21);
  }

  return v5;
}

- (id)dumpCharacteristicNotificationRegistry
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (void *)MEMORY[0x1E0CB37A0];
  -[HMDHome name](self, "name");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("Home %@/%@:"), v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome notificationRegistry](self, "notificationRegistry");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "shortDescription");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "appendString:", v9);

  return v7;
}

- (id)dumpMediaSessionDescription
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHome mediaSessionStates](self, "mediaSessionStates");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)MEMORY[0x1E0CB37A0];
  -[HMDHome name](self, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringWithFormat:", CFSTR("Home %@/%@:"), v7, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "addObject:", v10);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  -[HMDHome mediaSessionStates](self, "mediaSessionStates");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v19;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v19 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v15), "dumpState");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v16);

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v13);
  }

  return v5;
}

- (void)setAvailableBSPsCount:(id)a3
{
  NSNumber *v4;
  NSNumber *availableBSPsCount;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  availableBSPsCount = self->_availableBSPsCount;
  self->_availableBSPsCount = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)availableBSPsCount
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_availableBSPsCount;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setAvailableBorderRouters:(id)a3
{
  NSNumber *v4;
  NSNumber *availableBorderRouters;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  availableBorderRouters = self->_availableBorderRouters;
  self->_availableBorderRouters = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)availableBorderRouters
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_availableBorderRouters;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)awdPrimaryReportingDevice
{
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "primaryResidentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 && objc_msgSend(v4, "isReachable"))
  {
    objc_msgSend(v4, "device");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isCurrentDevice");
LABEL_19:

    goto LABEL_20;
  }
  if (-[HMDHome isOwnerUser](self, "isOwnerUser")
    && (objc_msgSend(MEMORY[0x1E0D28690], "productInfo"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = objc_msgSend(v7, "productClass"),
        v7,
        v8 == 1))
  {
    v6 = 1;
  }
  else
  {
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager", 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "account");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "devices");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      v11 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v19;
        while (2)
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v19 != v13)
              objc_enumerationMutation(v5);
            objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "productInfo");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v15, "productClass");

            if (v16 == 1)
            {
              v6 = 0;
              goto LABEL_19;
            }
          }
          v12 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
          if (v12)
            continue;
          break;
        }
      }
      v6 = 1;
      goto LABEL_19;
    }
    v6 = 0;
  }
LABEL_20:

  return v6;
}

- (id)accessoryForMediaProfileUniqueIdentifier:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome mediaProfileWithUUID:](self, "mediaProfileWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  return v6;
}

- (id)propertiesRegisteredForMediaProfileUniqueIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome notificationRegistry](self, "notificationRegistry");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "propertiesRegisteredForMediaProfileUniqueIdentifier:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)timerWithTimerInterval:(double)a3
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 0, a3);
}

- (void)enableMediaNotifications:(BOOL)a3 directlyOnMediaAccessory:(id)a4 forStateManager:(id)a5 completion:(id)a6
{
  -[HMDHome enableMediaNotifications:directlyOnMediaAccessory:completion:](self, "enableMediaNotifications:directlyOnMediaAccessory:completion:", a3, a4, a6);
}

- (void)_handleUpdateNetworkProtectionWithHomeModel:(id)a3 message:(id)a4
{
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a4;
  objc_msgSend(a3, "networkProtectionMode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "unsignedIntegerValue");

  if (-[HMDHome protectionMode](self, "protectionMode") != v7)
  {
    -[HMDHome setProtectionMode:](self, "setProtectionMode:", v7);
    objc_msgSend(v9, "transactionResult");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _handleNetworkProtectionModeChangeForTransaction:](self, "_handleNetworkProtectionModeChangeForTransaction:", v8);
    objc_msgSend(v8, "markChanged");

  }
}

- (id)updateHomeWithModel:(id)a3 message:(id)a4
{
  __CFString *v6;
  HMDHome *v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  id v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDHome *v24;
  NSObject *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  id v42;
  __CFString *v43;
  int v44;
  void *v45;
  HMDHome *v46;
  NSObject *v47;
  id v48;
  __CFString *v49;
  void *v50;
  int v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  char v56;
  void *v57;
  int v58;
  void *v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t j;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  char v81;
  void *v82;
  HMDHome *v83;
  NSObject *v84;
  id v85;
  __CFString *v86;
  void *v87;
  void *v88;
  void *v89;
  char v90;
  void *v91;
  id v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  char v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  char v103;
  void *v104;
  void *v105;
  void *v106;
  int v107;
  int v108;
  void *v109;
  HMDHome *v110;
  NSObject *v111;
  id v112;
  void *v113;
  const __CFString *v114;
  void *v115;
  int v116;
  int v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  int v122;
  int v123;
  void *v124;
  int v125;
  int v126;
  void *v127;
  void *v128;
  int v129;
  int v130;
  void *v131;
  HMDHome *v132;
  NSObject *v133;
  id v134;
  void *v135;
  const __CFString *v136;
  void *v137;
  void *v138;
  int v139;
  int v140;
  void *v141;
  HMDHome *v142;
  NSObject *v143;
  id v144;
  void *v145;
  __CFString *v146;
  void *v147;
  void *v148;
  int v149;
  int v150;
  void *v151;
  HMDHome *v152;
  NSObject *v153;
  id v154;
  void *v155;
  __CFString *v156;
  void *v157;
  int v158;
  _BOOL4 v159;
  void *v160;
  int v161;
  void *v162;
  HMDHome *v163;
  NSObject *v164;
  id v165;
  __CFString *v166;
  HMDHome *v167;
  void *v168;
  void *v169;
  char v170;
  void *v171;
  void *v172;
  void *v173;
  void (**v174)(_QWORD, _QWORD, _QWORD);
  void *v175;
  int v176;
  void *v177;
  void *v178;
  void *v179;
  id v180;
  _BOOL4 v182;
  void *v183;
  void *v184;
  HMDHome *v185;
  void *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  _QWORD v195[5];
  id v196;
  id v197;
  id v198;
  _BYTE v199[128];
  uint8_t v200[128];
  uint8_t buf[4];
  id v202;
  __int16 v203;
  const __CFString *v204;
  __int16 v205;
  HMDHome *v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v6 = (__CFString *)a3;
  v7 = (HMDHome *)a4;
  -[HMDHome transactionResult](v7, "transactionResult");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v202 = v12;
    v203 = 2112;
    v204 = v6;
    v205 = 2112;
    v206 = v7;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Updating home with model: %@ / %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v9);
  -[__CFString setProperties](v6, "setProperties");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "containsObject:", CFSTR("primaryResidentUUID"));

  v186 = v8;
  if (v14)
  {
    -[__CFString primaryResidentUUID](v6, "primaryResidentUUID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v16 = objc_alloc(MEMORY[0x1E0CB3A28]);
      -[__CFString primaryResidentUUID](v6, "primaryResidentUUID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(v16, "initWithUUIDString:", v17);

    }
    -[HMDHome residentDeviceManager](v10, "residentDeviceManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "primaryResidentUUID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHome primaryResident](v10, "primaryResident");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "device");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHome residentDeviceManager](v10, "residentDeviceManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "updatePrimaryResidentWithUUID:actions:", v15, v8);

    if ((HMFEqualObjects() & 1) != 0)
    {
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = v10;
      HMFGetOSLogHandle();
      v25 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v202 = v26;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Not resubscribing since the primary resident did not change", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      v8 = v186;
    }
    else
    {
      -[HMDHome backingStore](v10, "backingStore");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v195[0] = MEMORY[0x1E0C809B0];
      v195[1] = 3221225472;
      v195[2] = __39__HMDHome_updateHomeWithModel_message___block_invoke;
      v195[3] = &unk_1E89BA850;
      v195[4] = v10;
      v196 = v15;
      v197 = v19;
      v198 = v21;
      objc_msgSend(v27, "submitBlock:", v195);

    }
    if (objc_msgSend(v8, "source") == 1)
    {
      -[HMDHome residentDeviceManager](v10, "residentDeviceManager");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "primaryResidentDevice");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v29, "isReachable");

      if ((v30 & 1) == 0)
      {
        -[HMDHome residentDeviceManager](v10, "residentDeviceManager");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "electResidentDevice:", 1);

      }
    }

  }
  -[HMDHome currentUser](v10, "currentUser");
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString setProperties](v6, "setProperties");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "containsObject:", CFSTR("presenceAuthorizationStatus"));

  v185 = v7;
  if (v33)
  {
    v34 = (void *)MEMORY[0x1E0CBA950];
    -[__CFString presenceAuthorizationStatus](v6, "presenceAuthorizationStatus");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "authWithNumber:", v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    if (isPresenceAuthorizationValid())
    {
      -[HMDHome presenceAuthStatus](v10, "presenceAuthStatus");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = HMFEqualObjects();

      if ((v38 & 1) != 0)
      {
        v39 = (void *)MEMORY[0x1D17BA0A0]();
        v40 = v10;
        HMFGetOSLogHandle();
        v41 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v42 = (id)objc_claimAutoreleasedReturnValue();
          -[HMDHome presenceAuthStatus](v40, "presenceAuthStatus");
          v43 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v202 = v42;
          v203 = 2112;
          v204 = v43;
          _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Presence auth is not changing from %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v39);
        v44 = 0;
      }
      else
      {
        -[HMDHome setPresenceAuthStatus:](v10, "setPresenceAuthStatus:", v36);
        objc_msgSend(v184, "setPresenceAuthStatus:", v36);
        objc_msgSend(v8, "markChanged");
        v44 = 1;
      }
      if (!-[HMDHome isOwnerUser](v10, "isOwnerUser"))
        objc_msgSend(v8, "markSaveToSharedUserAccount");
    }
    else
    {
      v45 = (void *)MEMORY[0x1D17BA0A0]();
      v46 = v10;
      HMFGetOSLogHandle();
      v47 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v48 = (id)objc_claimAutoreleasedReturnValue();
        -[__CFString presenceAuthorizationStatus](v6, "presenceAuthorizationStatus");
        v49 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v202 = v48;
        v203 = 2112;
        v204 = v49;
        _os_log_impl(&dword_1CD062000, v47, OS_LOG_TYPE_INFO, "%{public}@Ignoring the value for presence auth in home model: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v45);
      v44 = 0;
    }

    v182 = v44 != 0;
    v7 = v185;
  }
  else
  {
    v182 = 0;
  }
  -[__CFString setProperties](v6, "setProperties");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v50, "containsObject:", CFSTR("presenceComputeStatus"));

  if (v51)
  {
    v52 = (void *)MEMORY[0x1E0CBA958];
    -[__CFString presenceComputeStatus](v6, "presenceComputeStatus");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "computeWithNumber:", v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    if (v54)
    {
      -[HMDHome presenceComputeStatus](v10, "presenceComputeStatus");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = HMFEqualObjects();

      if ((v56 & 1) == 0)
      {
        -[HMDHome setPresenceComputeStatus:](v10, "setPresenceComputeStatus:", v54);
        if (!-[HMDHome isOwnerUser](v10, "isOwnerUser"))
          objc_msgSend(v8, "markSaveToSharedUserAccount");
        objc_msgSend(v8, "markChanged");
      }
    }

  }
  -[__CFString setProperties](v6, "setProperties");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = objc_msgSend(v57, "containsObject:", CFSTR("homeLocationData"));

  if (v58)
  {
    -[HMDHome homeLocationHandler](v10, "homeLocationHandler");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "_handleHomeLocationData:message:", v6, v7);
    v60 = (void *)objc_claimAutoreleasedReturnValue();

    if (v60)
    {
      v61 = v60;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v191 = 0u;
      v192 = 0u;
      v193 = 0u;
      v194 = 0u;
      -[HMDHome xpcMessageTransportFactory](v10, "xpcMessageTransportFactory");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "defaultTransport");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "connections");
      v65 = (void *)objc_claimAutoreleasedReturnValue();

      v66 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v191, v200, 16);
      if (v66)
      {
        v67 = v66;
        v68 = *(_QWORD *)v192;
        do
        {
          for (i = 0; i != v67; ++i)
          {
            if (*(_QWORD *)v192 != v68)
              objc_enumerationMutation(v65);
            objc_msgSend(*(id *)(*((_QWORD *)&v191 + 1) + 8 * i), "processInfo");
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v70, "locationAuthorization");
            v71 = (void *)objc_claimAutoreleasedReturnValue();

            if (v71)
              objc_msgSend(v62, "addObject:", v71);

          }
          v67 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v191, v200, 16);
        }
        while (v67);
      }

      v189 = 0u;
      v190 = 0u;
      v187 = 0u;
      v188 = 0u;
      v72 = v62;
      v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v187, v199, 16);
      v8 = v186;
      if (v73)
      {
        v74 = v73;
        v75 = *(_QWORD *)v188;
        do
        {
          for (j = 0; j != v74; ++j)
          {
            if (*(_QWORD *)v188 != v75)
              objc_enumerationMutation(v72);
            v77 = *(void **)(*((_QWORD *)&v187 + 1) + 8 * j);
            if (objc_msgSend(v77, "isAuthorized"))
              objc_msgSend(v77, "mark");
          }
          v74 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v187, v199, 16);
        }
        while (v74);
      }

      v61 = 0;
      v7 = v185;
    }

  }
  else
  {
    v61 = 0;
  }
  -[__CFString naturalLightingContext](v6, "naturalLightingContext");
  v78 = objc_claimAutoreleasedReturnValue();
  -[__CFString setProperties](v6, "setProperties");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v183 = (void *)v78;
  if ((objc_msgSend(v79, "containsObject:", CFSTR("encodedNaturalLightingContext")) & 1) != 0)
  {
    -[HMDHome naturalLightingContext](v10, "naturalLightingContext");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v81 = objc_msgSend(v80, "isEqual:", v78);

    if ((v81 & 1) == 0)
    {
      v82 = (void *)MEMORY[0x1D17BA0A0]();
      v83 = v10;
      HMFGetOSLogHandle();
      v84 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v85 = (id)objc_claimAutoreleasedReturnValue();
        -[HMDHome naturalLightingContext](v83, "naturalLightingContext");
        v86 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v202 = v85;
        v203 = 2112;
        v204 = v86;
        v205 = 2112;
        v206 = (HMDHome *)v78;
        _os_log_impl(&dword_1CD062000, v84, OS_LOG_TYPE_INFO, "%{public}@Updating natural lighting context from %@ -> %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v82);
      -[HMDHome setNaturalLightingContext:](v83, "setNaturalLightingContext:", v78);
      v8 = v186;
      objc_msgSend(v186, "markChanged");
    }
  }
  else
  {

  }
  -[__CFString setProperties](v6, "setProperties");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v87, "containsObject:", CFSTR("name")))
    goto LABEL_71;
  -[__CFString name](v6, "name");
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome name](v10, "name");
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = objc_msgSend(v88, "isEqualToString:", v89);

  if ((v90 & 1) == 0)
  {
    -[HMDHome _handleRenameHomeModel:message:](v10, "_handleRenameHomeModel:message:", v6, v7);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = v91;
    if (v91)
    {
      v92 = v91;

      v61 = v92;
    }
    objc_msgSend(v8, "markSaveToAssistant");
    objc_msgSend(v8, "markChanged");
LABEL_71:

  }
  -[__CFString creationDate](v6, "creationDate");
  v93 = objc_claimAutoreleasedReturnValue();
  if (v93)
  {
    v94 = (void *)v93;
    -[__CFString creationDate](v6, "creationDate");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome creationDate](v10, "creationDate");
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v97 = objc_msgSend(v95, "isEqualToDate:", v96);

    if ((v97 & 1) == 0)
    {
      -[__CFString creationDate](v6, "creationDate");
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setCreationDate:](v10, "setCreationDate:", v98);

      objc_msgSend(v8, "markChanged");
    }
  }
  -[__CFString firstHAPAccessoryAddedDate](v6, "firstHAPAccessoryAddedDate");
  v99 = objc_claimAutoreleasedReturnValue();
  if (v99)
  {
    v100 = (void *)v99;
    -[__CFString firstHAPAccessoryAddedDate](v6, "firstHAPAccessoryAddedDate");
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome firstHAPAccessoryAddedDate](v10, "firstHAPAccessoryAddedDate");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v103 = objc_msgSend(v101, "isEqualToDate:", v102);

    if ((v103 & 1) == 0)
    {
      -[__CFString firstHAPAccessoryAddedDate](v6, "firstHAPAccessoryAddedDate");
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome setFirstHAPAccessoryAddedDate:](v10, "setFirstHAPAccessoryAddedDate:", v104);

      objc_msgSend(v8, "markChanged");
    }
  }
  -[__CFString setProperties](v6, "setProperties");
  v105 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v105, "containsObject:", CFSTR("multiUserEnabled")) & 1) != 0)
  {
    -[__CFString multiUserEnabled](v6, "multiUserEnabled");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = objc_msgSend(v106, "BOOLValue");
    v108 = -[HMDHome isMultiUserEnabled](v10, "isMultiUserEnabled");

    if (v107 != v108)
    {
      v109 = (void *)MEMORY[0x1D17BA0A0]();
      v110 = v10;
      HMFGetOSLogHandle();
      v111 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v111, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v112 = (id)objc_claimAutoreleasedReturnValue();
        -[__CFString multiUserEnabled](v6, "multiUserEnabled");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        v114 = CFSTR("YES");
        *(_DWORD *)buf = 138543874;
        v202 = v112;
        v203 = 2112;
        if (!v113)
          v114 = CFSTR("NO");
        v204 = v114;
        v205 = 2112;
        v206 = v110;
        _os_log_impl(&dword_1CD062000, v111, OS_LOG_TYPE_INFO, "%{public}@Merging multi-user enabled value %@ into home: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v109);
      -[HMDHome _handleMultiUserEnabledChange:message:](v110, "_handleMultiUserEnabledChange:message:", v6, v7);
      v8 = v186;
      objc_msgSend(v186, "markChanged");
    }
  }
  else
  {

  }
  if (-[__CFString propertyWasSet:](v6, "propertyWasSet:", CFSTR("soundCheckEnabled")))
  {
    -[__CFString soundCheckEnabled](v6, "soundCheckEnabled");
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    v116 = objc_msgSend(v115, "BOOLValue");
    v117 = -[HMDHome soundCheckEnabled](v10, "soundCheckEnabled");

    if (v116 != v117)
    {
      -[HMDHome _handleSoundCheckChange:message:](v10, "_handleSoundCheckChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (-[__CFString propertyWasSet:](v6, "propertyWasSet:", CFSTR("siriPhraseOptions")))
  {
    -[__CFString siriPhraseOptions](v6, "siriPhraseOptions");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v119 = objc_msgSend(v118, "unsignedIntegerValue");
    v120 = -[HMDHome siriPhraseOptions](v10, "siriPhraseOptions");

    if (v119 != v120)
    {
      -[HMDHome _handleSiriPhraseOptionsStatusChange:message:](v10, "_handleSiriPhraseOptionsStatusChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (-[__CFString propertyWasSet:](v6, "propertyWasSet:", CFSTR("locationServicesEnabled")))
  {
    -[__CFString locationServicesEnabled](v6, "locationServicesEnabled");
    v121 = (void *)objc_claimAutoreleasedReturnValue();
    v122 = objc_msgSend(v121, "BOOLValue");
    v123 = -[HMDHome locationServicesEnabled](v10, "locationServicesEnabled");

    if (v122 != v123)
    {
      -[HMDHome _handleLocationServicesEnabledChange:message:](v10, "_handleLocationServicesEnabledChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  if (-[__CFString propertyWasSet:](v6, "propertyWasSet:", CFSTR("didOnboardLocationServices")))
  {
    -[__CFString didOnboardLocationServices](v6, "didOnboardLocationServices");
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v125 = objc_msgSend(v124, "BOOLValue");
    v126 = -[HMDHome didOnboardLocationServices](v10, "didOnboardLocationServices");

    if (v125 != v126)
    {
      -[HMDHome _handleDidOnboardLocationServicesChange:message:](v10, "_handleDidOnboardLocationServicesChange:message:", v6, v7);
      objc_msgSend(v8, "markChanged");
    }
  }
  -[__CFString setProperties](v6, "setProperties");
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v127, "containsObject:", CFSTR("hasAnyUserAcknowledgedCameraRecordingOnboarding")) & 1) != 0)
  {
    -[__CFString hasAnyUserAcknowledgedCameraRecordingOnboarding](v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    v129 = objc_msgSend(v128, "BOOLValue");
    v130 = -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](v10, "hasAnyUserAcknowledgedCameraRecordingOnboarding");

    if (v129 != v130)
    {
      v131 = (void *)MEMORY[0x1D17BA0A0]();
      v132 = v10;
      HMFGetOSLogHandle();
      v133 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v134 = (id)objc_claimAutoreleasedReturnValue();
        -[__CFString hasAnyUserAcknowledgedCameraRecordingOnboarding](v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        v136 = CFSTR("YES");
        *(_DWORD *)buf = 138543874;
        v202 = v134;
        v203 = 2112;
        if (!v135)
          v136 = CFSTR("NO");
        v204 = v136;
        v205 = 2112;
        v206 = v132;
        _os_log_impl(&dword_1CD062000, v133, OS_LOG_TYPE_INFO, "%{public}@Merging home's has any user acknowledged camera recording onboarding value %@ into home: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v131);
      -[HMDHome _handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:message:](v132, "_handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:message:", v6, v7);
      v8 = v186;
      objc_msgSend(v186, "markChanged");
    }
  }
  else
  {

  }
  -[__CFString setProperties](v6, "setProperties");
  v137 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v137, "containsObject:", CFSTR("hasOnboardedForAccessCode")) & 1) != 0)
  {
    -[__CFString hasOnboardedForAccessCode](v6, "hasOnboardedForAccessCode");
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    v139 = objc_msgSend(v138, "BOOLValue");
    v140 = -[HMDHome hasOnboardedForAccessCode](v10, "hasOnboardedForAccessCode");

    if (v139 != v140)
    {
      v141 = (void *)MEMORY[0x1D17BA0A0]();
      v142 = v10;
      HMFGetOSLogHandle();
      v143 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v144 = (id)objc_claimAutoreleasedReturnValue();
        -[__CFString hasOnboardedForAccessCode](v6, "hasOnboardedForAccessCode");
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v145, "BOOLValue");
        HMFBooleanToString();
        v146 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v202 = v144;
        v203 = 2112;
        v204 = v146;
        v205 = 2112;
        v206 = v142;
        _os_log_impl(&dword_1CD062000, v143, OS_LOG_TYPE_INFO, "%{public}@Merging home's has onboarded for access code value %@ into home: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v141);
      -[HMDHome _handleSetHasOnboardedForAccessCodeChange:message:](v142, "_handleSetHasOnboardedForAccessCodeChange:message:", v6, v7);
      v8 = v186;
      objc_msgSend(v186, "markChanged");
    }
  }
  else
  {

  }
  -[__CFString setProperties](v6, "setProperties");
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v147, "containsObject:", CFSTR("hasOnboardedForWalletKey")) & 1) != 0)
  {
    -[__CFString hasOnboardedForWalletKey](v6, "hasOnboardedForWalletKey");
    v148 = (void *)objc_claimAutoreleasedReturnValue();
    v149 = objc_msgSend(v148, "BOOLValue");
    v150 = -[HMDHome hasOnboardedForWalletKey](v10, "hasOnboardedForWalletKey");

    if (v149 != v150)
    {
      v151 = (void *)MEMORY[0x1D17BA0A0]();
      v152 = v10;
      HMFGetOSLogHandle();
      v153 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v154 = (id)objc_claimAutoreleasedReturnValue();
        -[__CFString hasOnboardedForWalletKey](v6, "hasOnboardedForWalletKey");
        v155 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v155, "BOOLValue");
        HMFBooleanToString();
        v156 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v202 = v154;
        v203 = 2112;
        v204 = v156;
        v205 = 2112;
        v206 = v152;
        _os_log_impl(&dword_1CD062000, v153, OS_LOG_TYPE_INFO, "%{public}@Merging home's has onboarded for wallet key value %@ into home: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v151);
      -[HMDHome _handleSetHasOnboardedForWalletKeyChange:message:](v152, "_handleSetHasOnboardedForWalletKeyChange:message:", v6, v7);
      v8 = v186;
      objc_msgSend(v186, "markChanged");
    }
  }
  else
  {

  }
  -[__CFString setProperties](v6, "setProperties");
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  v158 = objc_msgSend(v157, "containsObject:", CFSTR("networkProtectionMode"));

  if (v158)
    -[HMDHome _handleUpdateNetworkProtectionWithHomeModel:message:](v10, "_handleUpdateNetworkProtectionWithHomeModel:message:", v6, v7);
  if (!-[HMDHome isOwnerUser](v10, "isOwnerUser"))
  {
    v159 = objc_msgSend(v8, "source") != 2 && objc_msgSend(v8, "source") != 3;
    -[__CFString setProperties](v6, "setProperties");
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    v161 = objc_msgSend(v160, "containsObject:", CFSTR("sharedHomeSourceVersion"));

    if (v161)
    {
      if (v159)
      {
        v162 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome _handleReceivedNonCloudSourcedSharedHomeModel](v10, "_handleReceivedNonCloudSourcedSharedHomeModel"));
        v163 = v10;
        HMFGetOSLogHandle();
        v164 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v164, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v165 = (id)objc_claimAutoreleasedReturnValue();
          -[HMDHome sharedHomeSourceVersion](v163, "sharedHomeSourceVersion");
          v166 = (__CFString *)objc_claimAutoreleasedReturnValue();
          -[__CFString sharedHomeSourceVersion](v6, "sharedHomeSourceVersion");
          v167 = (HMDHome *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v202 = v165;
          v203 = 2112;
          v204 = v166;
          v205 = 2112;
          v206 = v167;
          _os_log_impl(&dword_1CD062000, v164, OS_LOG_TYPE_INFO, "%{public}@Updating shared home source version from %@ to %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v162);
        -[HMDHome sharedHomeSourceVersion](v163, "sharedHomeSourceVersion");
        v168 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString sharedHomeSourceVersion](v6, "sharedHomeSourceVersion");
        v169 = (void *)objc_claimAutoreleasedReturnValue();
        v170 = HMFEqualObjects();

        v8 = v186;
        if ((v170 & 1) == 0)
        {
          -[__CFString sharedHomeSourceVersion](v6, "sharedHomeSourceVersion");
          v171 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome setSharedHomeSourceVersion:](v163, "setSharedHomeSourceVersion:", v171);

          objc_msgSend(v186, "markChanged");
        }
      }
    }
  }
  if (-[__CFString propertyWasSet:](v6, "propertyWasSet:", CFSTR("threadOperationalDataset")))
  {
    -[__CFString threadOperationalDataset](v6, "threadOperationalDataset");
    v172 = (void *)objc_claimAutoreleasedReturnValue();

    if (v172)
      -[HMDHome updateThreadOperationalDatasetWithHomeModel:message:](v10, "updateThreadOperationalDatasetWithHomeModel:message:", v6, v185);
  }
  -[HMDHome handleUpdatedCHIPPropertiesOnHomeModel:actions:](v10, "handleUpdatedCHIPPropertiesOnHomeModel:actions:", v6, v8);
  -[HMDHome responseHandler](v185, "responseHandler");
  v173 = (void *)objc_claimAutoreleasedReturnValue();

  if (v173)
  {
    -[HMDHome responseHandler](v185, "responseHandler");
    v174 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v174)[2](v174, v61, 0);

  }
  if (v182)
  {
    -[HMDHome name](v185, "name");
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    v176 = HMFEqualObjects();

    -[HMDHome presenceFeeder](v10, "presenceFeeder");
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    v178 = v177;
    if (v176)
    {
      objc_msgSend(v177, "presenceAuthChanged");
    }
    else
    {
      -[HMDHome presenceAuthStatus](v10, "presenceAuthStatus");
      v179 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v178, "presenceAuthStatusChangedForUser:presenceAuthStatus:", v184, v179);

    }
  }
  v180 = v61;

  return v180;
}

- (void)updateHomeConfigurationWithModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "transactionResult");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setProperties");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "containsObject:", CFSTR("configurationVersion"));

  if (v10)
  {
    objc_msgSend(v6, "configurationVersion");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "integerValue");

    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138544130;
      v23 = v16;
      v24 = 2048;
      v25 = v12;
      v26 = 2048;
      v27 = -[HMDHome lastSyncedConfigurationVersion](v14, "lastSyncedConfigurationVersion");
      v28 = 2048;
      v29 = -[HMDHome configurationVersion](v14, "configurationVersion");
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Received incoming configuration version %lu, last synced was %lu, and current is %lu", (uint8_t *)&v22, 0x2Au);

    }
    objc_autoreleasePoolPop(v13);
    if (-[HMDHome isOwnerUser](v14, "isOwnerUser"))
    {
      if (v12 >= -[HMDHome configurationVersion](v14, "configurationVersion"))
      {
        v21 = -[HMDHome configurationVersion](v14, "configurationVersion");
        if (v21 <= -[HMDHome lastSyncedConfigurationVersion](v14, "lastSyncedConfigurationVersion"))
        {
          -[HMDHome setConfigurationVersion:](v14, "setConfigurationVersion:", v12);
        }
        else
        {
          -[HMDHome setConfigurationVersion:](v14, "setConfigurationVersion:", v12 + 1);
          -[HMDHome __saveConfigurationVersionTransaction](v14, "__saveConfigurationVersionTransaction");
        }
        -[HMDHome setLastSyncedConfigurationVersion:](v14, "setLastSyncedConfigurationVersion:", v12);
      }
      else
      {
        -[HMDHome __saveConfigurationVersionTransaction](v14, "__saveConfigurationVersionTransaction");
      }
    }
    else
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = v14;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543362;
        v23 = v20;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Shared user will use incoming configuration version", (uint8_t *)&v22, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      -[HMDHome setConfigurationVersion:](v18, "setConfigurationVersion:", v12);
      -[HMDHome setLastSyncedConfigurationVersion:](v18, "setLastSyncedConfigurationVersion:", v12);
      -[HMDHome setExpectedConfigurationVersion:](v18, "setExpectedConfigurationVersion:", 0);
    }
  }
  objc_msgSend(v7, "respondWithPayload:", 0);
  objc_msgSend(v8, "markChanged");

}

- (void)updateNetworkRouterSettingsWithModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  HMDHomeKitVersion *v21;
  HMDHomeKitVersion *v22;
  void *v23;
  HMDHomeKitVersion *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  HMDHomeKitVersion *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  HMDHomeKitVersion *v35;
  HMDHomeKitVersion *v36;
  void *v37;
  int v38;
  HMDHomeKitVersion *v39;
  HMDHomeKitVersion *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  uint64_t block;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  void *v48;
  HMDHome *v49;
  HMDHomeKitVersion *v50;
  id v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  HMDHomeKitVersion *v55;
  __int16 v56;
  HMDHomeKitVersion *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "transactionResult");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setProperties");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "containsObject:", CFSTR("activeNetworkRouterAccessoryUUID"));

  if (v10)
  {
    v11 = objc_alloc(MEMORY[0x1E0CB3A28]);
    objc_msgSend(v6, "activeNetworkRouterAccessoryUUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithUUIDString:", v12);

    -[HMDHome activeNetworkRouterUUID](self, "activeNetworkRouterUUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = HMFEqualObjects();

    if ((v15 & 1) == 0)
    {
      -[HMDHome setActiveNetworkRouterUUID:](self, "setActiveNetworkRouterUUID:", v13);
      if (v13)
      {
        objc_msgSend(v6, "activeNetworkRouterAccessoryUUID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "activeNetworkRouterInitialSetupNeededUUID");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome setActiveNetworkRouterInitialSetupNeeded:](self, "setActiveNetworkRouterInitialSetupNeeded:", objc_msgSend(v16, "isEqual:", v17));

      }
      else
      {
        -[HMDHome setActiveNetworkRouterInitialSetupNeeded:](self, "setActiveNetworkRouterInitialSetupNeeded:", 0);
      }
    }
    v18 = v15 ^ 1;

  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v6, "setProperties");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "containsObject:", CFSTR("minimumNetworkRouterSupportHomeKitVersion"));

  if (v20)
  {
    objc_msgSend(v6, "minimumNetworkRouterSupportHomeKitVersion");
    v21 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      v22 = [HMDHomeKitVersion alloc];
      objc_msgSend(v6, "minimumNetworkRouterSupportHomeKitVersion");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = -[HMDHomeKitVersion initWithVersionString:](v22, "initWithVersionString:", v23);

    }
    v24 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("6.2"));
    if (-[HMDHome isOwnerUser](self, "isOwnerUser")
      && objc_msgSend(v8, "source") != 1
      && -[HMDHomeKitVersion isGreaterThanVersion:](v21, "isGreaterThanVersion:", v24))
    {
      v25 = (void *)MEMORY[0x1D17BA0A0]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v44 = v25;
        v28 = v24;
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v53 = v29;
        v54 = 2112;
        v55 = v21;
        v56 = 2112;
        v57 = v28;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Overriding minimum router support HomeKit version to enable network router support from %@ in cloud to our version %@", buf, 0x20u);

        v24 = v28;
        v25 = v44;
      }

      objc_autoreleasePoolPop(v25);
      -[HMDHome workQueue](v26, "workQueue");
      v30 = objc_claimAutoreleasedReturnValue();
      block = MEMORY[0x1E0C809B0];
      v46 = 3221225472;
      v47 = __56__HMDHome_updateNetworkRouterSettingsWithModel_message___block_invoke;
      v48 = &unk_1E89C20C8;
      v49 = v26;
      v50 = v21;
      v51 = v7;
      dispatch_async(v30, &block);

    }
    else
    {
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v32, "minimumNetworkRouterSupportHomeKitVersion");
        v44 = v8;
        v35 = v24;
        v36 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v53 = v34;
        v54 = 2112;
        v55 = v36;
        v56 = 2112;
        v57 = v21;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Updating minimum router support HomeKit version to enable network router support from %@ to cloud version %@", buf, 0x20u);

        v24 = v35;
        v8 = v44;

      }
      objc_autoreleasePoolPop(v31);
      -[HMDHome setMinimumNetworkRouterSupportHomeKitVersion:](v32, "setMinimumNetworkRouterSupportHomeKitVersion:", v21);
      v18 = 1;
    }

  }
  objc_msgSend(v6, "setProperties", v44, block, v46, v47, v48, v49);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend(v37, "containsObject:", CFSTR("minHomeKitVersionForAccessoryNetworkProtectionChange"));

  if (v38)
  {
    objc_msgSend(v6, "minHomeKitVersionForAccessoryNetworkProtectionChange");
    v39 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();

    if (v39)
    {
      v40 = [HMDHomeKitVersion alloc];
      objc_msgSend(v6, "minHomeKitVersionForAccessoryNetworkProtectionChange");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = -[HMDHomeKitVersion initWithVersionString:](v40, "initWithVersionString:", v41);

    }
    -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](self, "minHomeKitVersionForAccessoryNetworkProtectionChange");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = HMFEqualObjects();

    if ((v43 & 1) != 0)
    {

      if ((v18 & 1) == 0)
        goto LABEL_31;
    }
    else
    {
      -[HMDHome setMinHomeKitVersionForAccessoryNetworkProtectionChange:](self, "setMinHomeKitVersionForAccessoryNetworkProtectionChange:", v39);

    }
  }
  else if (!v18)
  {
    goto LABEL_31;
  }
  -[HMDHome _evaluateNetworkRouterManagementForTransaction:](self, "_evaluateNetworkRouterManagementForTransaction:", v8);
  objc_msgSend(v8, "markChanged");
LABEL_31:
  objc_msgSend(v7, "respondWithPayload:", 0);

}

- (void)updateROARStatus:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD block[5];
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v16 = v11;
    v17 = 2112;
    v18 = v6;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Found ROAR Model : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v7, "transactionResult");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome workQueue](v9, "workQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __36__HMDHome_updateROARStatus_message___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = v9;
  dispatch_async(v13, block);

  objc_msgSend(v12, "markSaveToAssistant");
  objc_msgSend(v12, "markChanged");

}

- (void)setHomeUpdatedToROARAndInformClients
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (-[HMDHome isUpdatedToHH2](self, "isUpdatedToHH2"))
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@isUpdatedToHH2 is already set on this home. Not doing anything.", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
  else if (!-[HMDHome isUpdatedToHH2](self, "isUpdatedToHH2"))
  {
    v7 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome setIsUpdatedToHH2:](self, "setIsUpdatedToHH2:", 1));
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Marked home upgraded to HH2 & informing clients about the status", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHome saveWithReason:postSyncNotification:objectChange:](v8, "saveWithReason:postSyncNotification:objectChange:", CFSTR("Upgraded To HH2"), 0, 1);
    -[HMDHome homeManager](v8, "homeManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes:", 1);

  }
}

- (void)updateNetworkRouterManagingDeviceSettingsWithModel:(id)a3 message:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a3;
  v6 = a4;
  objc_msgSend(v15, "setProperties");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v7, "containsObject:", CFSTR("primaryNetworkRouterManagingDeviceUUID")))
    goto LABEL_4;
  -[HMDHome primaryNetworkRouterManagingDeviceUUID](self, "primaryNetworkRouterManagingDeviceUUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "primaryNetworkRouterManagingDeviceUUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = HMFEqualObjects();

  if ((v11 & 1) == 0)
  {
    v12 = objc_alloc(MEMORY[0x1E0CB3A28]);
    objc_msgSend(v15, "primaryNetworkRouterManagingDeviceUUID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v12, "initWithUUIDString:", v13);

    -[HMDHome setPrimaryNetworkRouterManagingDeviceUUID:](self, "setPrimaryNetworkRouterManagingDeviceUUID:", v7);
    objc_msgSend(v6, "transactionResult");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _evaluateNetworkRouterManagementForTransaction:](self, "_evaluateNetworkRouterManagementForTransaction:", v14);
    objc_msgSend(v14, "markChanged");

LABEL_4:
  }
  objc_msgSend(v6, "respondWithPayload:", 0);

}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  HMDHome *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  HMDHome *v70;
  NSObject *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  HMDHome *v76;
  NSObject *v77;
  void *v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  void *v84;
  char contexta;
  void *context;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint8_t buf[4];
  void *v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  void *v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = v9;
  else
    v11 = 0;
  v12 = v11;
  if (!v12)
  {
    v14 = v9;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v15 = v14;
    else
      v15 = 0;
    v16 = v15;

    if (v16)
    {
      -[HMDHome updateHomeConfigurationWithModel:message:](self, "updateHomeConfigurationWithModel:message:", v16, v10);
LABEL_101:

      goto LABEL_102;
    }
    v17 = v14;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v18 = v17;
    else
      v18 = 0;
    v19 = v18;

    if (v19)
    {
      -[HMDHome residentDeviceManager](self, "residentDeviceManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "transactionObjectUpdated:newValues:message:", v8, v17, v10);

LABEL_100:
      goto LABEL_101;
    }
    v21 = v17;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v22 = v21;
    else
      v22 = 0;
    v23 = v22;

    if (v23)
    {
      -[HMDHome homeManager](self, "homeManager");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "transactionObjectUpdated:newValues:message:", v8, v21, v10);

LABEL_99:
      goto LABEL_100;
    }
    v25 = v21;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v26 = v25;
    else
      v26 = 0;
    v27 = v26;

    if (v27)
    {
      __transactionHomeSettingsUpdated(self, v27, v10);
      v23 = 0;
LABEL_98:

      goto LABEL_99;
    }
    v28 = v25;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v29 = v28;
    else
      v29 = 0;
    v30 = v29;

    if (v30)
    {
      __transactionHomeMediaSettingsUpdated(self, v30, v10);
      v23 = 0;
LABEL_97:

      v27 = 0;
      goto LABEL_98;
    }
    v31 = v28;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v32 = v31;
    else
      v32 = 0;
    v33 = v32;

    if (v33)
    {
      -[HMDHome updateNetworkRouterSettingsWithModel:message:](self, "updateNetworkRouterSettingsWithModel:message:", v33, v10);
      v23 = 0;
      v30 = 0;
LABEL_96:

      goto LABEL_97;
    }
    v34 = v31;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v35 = v34;
    else
      v35 = 0;
    v36 = v35;

    if (v36)
    {
      -[HMDHome updateNetworkRouterManagingDeviceSettingsWithModel:message:](self, "updateNetworkRouterManagingDeviceSettingsWithModel:message:", v36, v10);
      v23 = 0;
      v37 = v36;
      v33 = 0;
      v30 = 0;
LABEL_95:

      goto LABEL_96;
    }
    v38 = v34;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v39 = v38;
    else
      v39 = 0;
    v40 = v39;

    if (v40)
    {
      -[HMDHome _updateThreadNetworkWithModel:message:](self, "_updateThreadNetworkWithModel:message:", v40, v10);
      v41 = v40;
      v23 = 0;
      v33 = 0;
      v30 = 0;
LABEL_94:

      v37 = 0;
      goto LABEL_95;
    }
    v42 = v38;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v43 = v42;
    else
      v43 = 0;
    v44 = v43;

    if (v44)
    {
      v45 = v8;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v46 = v45;
      else
        v46 = 0;
      v47 = v46;

      -[HMDHome personDataManager](self, "personDataManager");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "handleUpdatedSettingsModel:previousSettingsModel:message:", v44, v47, v10);

      goto LABEL_93;
    }
    v49 = v42;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v50 = v49;
    else
      v50 = 0;
    v51 = v50;

    v91 = v51;
    if (v51)
    {
      -[HMDHome accessCodeManager](self, "accessCodeManager");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "dataManager");
      v53 = (void *)objc_claimAutoreleasedReturnValue();

      if (v53)
      {
        v54 = v53;
        objc_msgSend(v53, "handleUpdatedHomeAccessCodeModel:message:", v91, v10);
      }
      else
      {
        v60 = (void *)MEMORY[0x1D17BA0A0]();
        v61 = self;
        HMFGetOSLogHandle();
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v93 = v63;
          _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDHomeAccessCodeModel because self.accessCodeManager.dataManager is nil", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v60);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "respondWithError:", v64);

        v54 = 0;
      }
      goto LABEL_92;
    }
    v55 = v49;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v56 = v55;
    else
      v56 = 0;
    v57 = v56;

    v54 = v57;
    if (v57)
    {
      -[HMDHome accessCodeManager](self, "accessCodeManager");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "dataManager");
      v59 = (void *)objc_claimAutoreleasedReturnValue();

      v88 = v59;
      if (v59)
      {
        objc_msgSend(v59, "handleUpdatedHMDRemovedUserAccessCodeModel:message:", v54, v10);
LABEL_91:

LABEL_92:
        v44 = 0;
LABEL_93:

        v23 = 0;
        v33 = 0;
        v30 = 0;
        v41 = 0;
        goto LABEL_94;
      }
      v89 = (void *)MEMORY[0x1D17BA0A0]();
      v76 = self;
      HMFGetOSLogHandle();
      v77 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v93 = v78;
        _os_log_impl(&dword_1CD062000, v77, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDRemovedUserAccessCodeModel because self.accessCodeManager.dataManager is nil", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v89);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "respondWithError:", v79);

    }
    else
    {
      v65 = v55;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v66 = v65;
      else
        v66 = 0;
      v67 = v66;

      v88 = v67;
      if (v67)
      {
        objc_msgSend(v67, "nfcReaderKey");
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "setProperties");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v68, "containsObject:", CFSTR("encodedNfcReaderKey")))
        {
          -[HMDHome nfcReaderKey](self, "nfcReaderKey");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          contexta = HMFEqualObjects();

          if ((contexta & 1) == 0)
          {
            context = (void *)MEMORY[0x1D17BA0A0]();
            v70 = self;
            HMFGetOSLogHandle();
            v71 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome nfcReaderKey](v70, "nfcReaderKey");
              *(_DWORD *)buf = 138543874;
              v93 = v84;
              v94 = 2112;
              v95 = objc_claimAutoreleasedReturnValue();
              v72 = (void *)v95;
              v96 = 2112;
              v97 = v87;
              _os_log_impl(&dword_1CD062000, v71, OS_LOG_TYPE_INFO, "%{public}@Updating nfc reader key from %@ -> %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(context);
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome nfcReaderKey](v70, "nfcReaderKey");
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v73, "setObject:forKeyedSubscript:", v74, CFSTR("HMDHomeDidUpdateNFCReaderKeyNotificationKeyPreviousNFCReaderKey"));

            -[HMDHome setNfcReaderKey:](v70, "setNfcReaderKey:", v87);
            logAndPostNotification(CFSTR("HMDHomeDidUpdateNFCReaderKeyNotification"), v70, v73);
            objc_msgSend(v10, "transactionResult");
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v75, "markChanged");

          }
        }
        else
        {

        }
        objc_msgSend(v10, "respondWithSuccess");

        goto LABEL_91;
      }
      v80 = v65;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v81 = v80;
      else
        v81 = 0;
      v82 = v81;
      v90 = v80;

      if (v82)
      {
        -[HMDHome updateROARStatus:message:](self, "updateROARStatus:message:", v82, v10);
        objc_msgSend(v10, "respondWithSuccess");
      }
      else
      {
        -[HMDHome homeObjectChangeHandler](self, "homeObjectChangeHandler");
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v83, "handleObjectUpdate:newValues:message:", v8, v90, v10);

      }
    }
    v88 = 0;
    goto LABEL_91;
  }
  v13 = -[HMDHome updateHomeWithModel:message:](self, "updateHomeWithModel:message:", v12, v10);
LABEL_102:

}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHome *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v6;
  else
    v8 = 0;
  v9 = v8;
  if (v9)
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transactionObjectRemoved:message:", v6, v7);
  }
  else
  {
    v11 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v12 = v11;
    else
      v12 = 0;
    v10 = v12;

    if (v10)
    {
      -[HMDHome accessCodeManager](self, "accessCodeManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "dataManager");
      v14 = (id)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        objc_msgSend(v14, "handleRemovedHomeAccessCodeModel:message:", v10, v7);
      }
      else
      {
        v19 = (void *)MEMORY[0x1D17BA0A0]();
        v20 = self;
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = 138543362;
          v31 = v22;
          _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDHomeAccessCodeModel because self.accessCodeManager.dataManager is nil", (uint8_t *)&v30, 0xCu);

        }
        objc_autoreleasePoolPop(v19);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "respondWithError:", v23);

        v14 = 0;
      }
    }
    else
    {
      v15 = v11;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v16 = v15;
      else
        v16 = 0;
      v14 = v16;

      if (v14)
      {
        -[HMDHome accessCodeManager](self, "accessCodeManager");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "dataManager");
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          objc_msgSend(v18, "handleRemovedHMDRemovedUserAccessCodeModel:message:", v14, v7);
        }
        else
        {
          v25 = (void *)MEMORY[0x1D17BA0A0]();
          v26 = self;
          HMFGetOSLogHandle();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = 138543362;
            v31 = v28;
            _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not handling removed HMDRemovedUserAccessCodeModel because self.accessCodeManager.dataManager is nil", (uint8_t *)&v30, 0xCu);

          }
          objc_autoreleasePoolPop(v25);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "respondWithError:", v29);

        }
      }
      else
      {
        -[HMDHome homeObjectChangeHandler](self, "homeObjectChangeHandler");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "handleObjectRemove:message:", v15, v7);

      }
    }

  }
}

- (id)deletedBackingStoreObject
{
  void *v3;
  __objc2_class *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    v4 = HMDHomeModel;
  else
    v4 = HMDSharedHomeModel;
  v5 = [v4 alloc];
  -[HMDHome uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v5, "initWithObjectChangeType:uuid:parentUUID:", 3, v6, v7);

  return v8;
}

- (id)sharedHomeModel
{
  HMDSharedHomeModel *v3;
  void *v4;
  void *v5;
  HMDSharedHomeModel *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = [HMDSharedHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  v6 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v3, "initWithObjectChangeType:uuid:parentUUID:", 1, v4, v5);

  -[HMDHome homeManager](self, "homeManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "generateDataForSharedHomeModel:", self);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDSharedHomeModel setHomeData:](v6, "setHomeData:", v8);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[HMDHome configurationVersion](self, "configurationVersion"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDSharedHomeModel setConfigurationVersion:](v6, "setConfigurationVersion:", v9);

  return v6;
}

- (id)backingStoreObjects:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t k;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t m;
  void *v35;
  char v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t n;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ii;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t jj;
  void *v55;
  void *v56;
  HMDHome *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t kk;
  void *v67;
  char isKindOfClass;
  char v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t mm;
  void *v76;
  void *v77;
  char v78;
  void *v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t nn;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  HMDHomeSettingsModel *v92;
  void *v93;
  void *v94;
  void *v95;
  HMDHomeSettingsModel *v96;
  void *v97;
  void *v98;
  HMDHomeMediaSettingsModel *v99;
  void *v100;
  void *v101;
  void *v102;
  HMDHomeMediaSettingsModel *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  HMDHomeKitVersion *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  BOOL v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t i1;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  void *v146;
  HMDHome *v147;
  HMDHome *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _BYTE v193[128];
  _BYTE v194[128];
  _BYTE v195[128];
  uint8_t v196[128];
  uint8_t buf[4];
  void *v198;
  __int16 v199;
  void *v200;
  _BYTE v201[128];
  _BYTE v202[128];
  _BYTE v203[128];
  _BYTE v204[128];
  _BYTE v205[128];
  _BYTE v206[128];
  _BYTE v207[128];
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", 1, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v6);

  -[HMDHome homeConfigurationModelObjectWithChangeType:](self, "homeConfigurationModelObjectWithChangeType:", 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v7);

  v191 = 0u;
  v192 = 0u;
  v189 = 0u;
  v190 = 0u;
  -[HMDHome accessories](self, "accessories");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v189, v207, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v190;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v190 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v189 + 1) + 8 * i);
        if (a3 <= 3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            continue;
        }
        objc_msgSend(v13, "backingStoreObjects:", a3);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObjectsFromArray:", v14);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v189, v207, 16);
    }
    while (v10);
  }

  v187 = 0u;
  v188 = 0u;
  v185 = 0u;
  v186 = 0u;
  v147 = self;
  -[HMDHome actionSets](self, "actionSets");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v185, v206, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v186;
    do
    {
      for (j = 0; j != v17; ++j)
      {
        if (*(_QWORD *)v186 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v185 + 1) + 8 * j);
        if (a3 <= 1)
        {
          v21 = (void *)MEMORY[0x1E0CBA340];
          objc_msgSend(*(id *)(*((_QWORD *)&v185 + 1) + 8 * j), "type");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v21) = objc_msgSend(v21, "isBuiltinActionSetType:", v22);

          if ((v21 & 1) != 0)
            continue;
        }
        objc_msgSend(v20, "backingStoreObjects:", a3);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObjectsFromArray:", v23);

      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v185, v206, 16);
    }
    while (v17);
  }

  if (a3 >= 3 && !isWatch())
  {
    v183 = 0u;
    v184 = 0u;
    v181 = 0u;
    v182 = 0u;
    -[HMDHome triggerOwnedActionSets](v147, "triggerOwnedActionSets");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v181, v205, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v182;
      do
      {
        for (k = 0; k != v26; ++k)
        {
          if (*(_QWORD *)v182 != v27)
            objc_enumerationMutation(v24);
          objc_msgSend(*(id *)(*((_QWORD *)&v181 + 1) + 8 * k), "backingStoreObjects:", a3);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "addObjectsFromArray:", v29);

        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v181, v205, 16);
      }
      while (v26);
    }

    v179 = 0u;
    v180 = 0u;
    v177 = 0u;
    v178 = 0u;
    -[HMDHome triggers](v147, "triggers");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v177, v204, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v178;
      do
      {
        for (m = 0; m != v32; ++m)
        {
          if (*(_QWORD *)v178 != v33)
            objc_enumerationMutation(v30);
          v35 = *(void **)(*((_QWORD *)&v177 + 1) + 8 * m);
          v36 = objc_msgSend(v35, "requiresDataVersion4");
          if (a3 > 3 || (v36 & 1) == 0)
          {
            objc_msgSend(v35, "backingStoreObjects:", a3);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "addObjectsFromArray:", v37);

          }
        }
        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v177, v204, 16);
      }
      while (v32);
    }

  }
  v175 = 0u;
  v176 = 0u;
  v173 = 0u;
  v174 = 0u;
  -[HMDHome rooms](v147, "rooms");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v173, v203, 16);
  if (v39)
  {
    v40 = v39;
    v41 = *(_QWORD *)v174;
    do
    {
      for (n = 0; n != v40; ++n)
      {
        if (*(_QWORD *)v174 != v41)
          objc_enumerationMutation(v38);
        objc_msgSend(*(id *)(*((_QWORD *)&v173 + 1) + 8 * n), "backingStoreObjects:", a3);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObjectsFromArray:", v43);

      }
      v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v173, v203, 16);
    }
    while (v40);
  }

  v171 = 0u;
  v172 = 0u;
  v169 = 0u;
  v170 = 0u;
  -[HMDHome zones](v147, "zones");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v169, v202, 16);
  if (v45)
  {
    v46 = v45;
    v47 = *(_QWORD *)v170;
    do
    {
      for (ii = 0; ii != v46; ++ii)
      {
        if (*(_QWORD *)v170 != v47)
          objc_enumerationMutation(v44);
        objc_msgSend(*(id *)(*((_QWORD *)&v169 + 1) + 8 * ii), "backingStoreObjects:", a3);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObjectsFromArray:", v49);

      }
      v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v169, v202, 16);
    }
    while (v46);
  }

  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  -[HMDHome serviceGroups](v147, "serviceGroups");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v165, v201, 16);
  if (v51)
  {
    v52 = v51;
    v53 = *(_QWORD *)v166;
    do
    {
      for (jj = 0; jj != v52; ++jj)
      {
        if (*(_QWORD *)v166 != v53)
          objc_enumerationMutation(v50);
        objc_msgSend(*(id *)(*((_QWORD *)&v165 + 1) + 8 * jj), "backingStoreObjects:", a3);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObjectsFromArray:", v55);

      }
      v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v165, v201, 16);
    }
    while (v52);
  }

  v56 = (void *)MEMORY[0x1D17BA0A0]();
  v57 = v147;
  HMFGetOSLogHandle();
  v58 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome isUpdatedToHH2](v57, "isUpdatedToHH2");
    HMFBooleanToString();
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v198 = v59;
    v199 = 2112;
    v200 = v60;
    _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@HH2 status : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v56);
  if (-[HMDHome isUpdatedToHH2](v57, "isUpdatedToHH2"))
  {
    +[HMDHomeUpgradedToROAR defaultModelForHome:](HMDHomeUpgradedToROAR, "defaultModelForHome:", v57);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v61);

  }
  v163 = 0u;
  v164 = 0u;
  v161 = 0u;
  v162 = 0u;
  -[HMDHome users](v57, "users");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v161, v196, 16);
  if (v63)
  {
    v64 = v63;
    v65 = *(_QWORD *)v162;
    do
    {
      for (kk = 0; kk != v64; ++kk)
      {
        if (*(_QWORD *)v162 != v65)
          objc_enumerationMutation(v62);
        v67 = *(void **)(*((_QWORD *)&v161 + 1) + 8 * kk);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        v69 = isKindOfClass;
        if ((a3 > 1 || (isKindOfClass & 1) == 0)
          && (!isWatch() || (v69 & 1) == 0 && objc_msgSend(v67, "isOwner"))
          && (a3 > 3 || (objc_msgSend(v67, "requiresMakoSupport") & 1) == 0))
        {
          objc_msgSend(v67, "backingStoreObjects:", a3);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "addObjectsFromArray:", v70);

        }
      }
      v64 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v161, v196, 16);
    }
    while (v64);
  }

  if (a3 >= 2)
  {
    v159 = 0u;
    v160 = 0u;
    v157 = 0u;
    v158 = 0u;
    v148 = v57;
    -[HMDHome outgoingInvitations](v57, "outgoingInvitations");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v157, v195, 16);
    if (v72)
    {
      v73 = v72;
      v74 = *(_QWORD *)v158;
      do
      {
        for (mm = 0; mm != v73; ++mm)
        {
          if (*(_QWORD *)v158 != v74)
            objc_enumerationMutation(v71);
          v76 = *(void **)(*((_QWORD *)&v157 + 1) + 8 * mm);
          if (a3 <= 3)
          {
            objc_msgSend(*(id *)(*((_QWORD *)&v157 + 1) + 8 * mm), "user");
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            v78 = objc_msgSend(v77, "requiresMakoSupport");

            if ((v78 & 1) != 0)
              continue;
          }
          objc_msgSend(v76, "modelObjectWithChangeType:version:", 1, a3);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v80 = v79;
          else
            v80 = 0;
          v81 = v80;

          if (v81)
            objc_msgSend(v5, "addObject:", v81);

        }
        v73 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v157, v195, 16);
      }
      while (v73);
    }

    if (a3 >= 3)
    {
      v155 = 0u;
      v156 = 0u;
      v153 = 0u;
      v154 = 0u;
      -[HMDHome residentDeviceManager](v57, "residentDeviceManager");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "residentDevices");
      v83 = (void *)objc_claimAutoreleasedReturnValue();

      v84 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v153, v194, 16);
      if (v84)
      {
        v85 = v84;
        v86 = *(_QWORD *)v154;
        do
        {
          for (nn = 0; nn != v85; ++nn)
          {
            if (*(_QWORD *)v154 != v86)
              objc_enumerationMutation(v83);
            objc_msgSend(*(id *)(*((_QWORD *)&v153 + 1) + 8 * nn), "modelObjectWithChangeType:version:", 1, a3);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "addObject:", v88);

          }
          v85 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v153, v194, 16);
        }
        while (v85);
      }

      -[HMDHome appData](v57, "appData");
      v89 = (void *)objc_claimAutoreleasedReturnValue();

      if (v89)
      {
        -[HMDHome appData](v57, "appData");
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v90, "modelObjectWithChangeType:", 1);
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v91);

      }
      if (a3 >= 4)
      {
        v92 = [HMDHomeSettingsModel alloc];
        -[HMDHome uuid](v57, "uuid");
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomeSettingsModel modelIDForHomeUUID:](HMDHomeSettingsModel, "modelIDForHomeUUID:", v93);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v57, "uuid");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        v96 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v92, "initWithObjectChangeType:uuid:parentUUID:", 1, v94, v95);

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome isAutomaticSoftwareUpdateEnabled](v57, "isAutomaticSoftwareUpdateEnabled"));
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeSettingsModel setAutomaticSoftwareUpdateEnabled:](v96, "setAutomaticSoftwareUpdateEnabled:", v97);

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled](v57, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled"));
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeSettingsModel setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:](v96, "setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:", v98);

        objc_msgSend(v5, "addObject:", v96);
        v99 = [HMDHomeMediaSettingsModel alloc];
        -[HMDHome uuid](v57, "uuid");
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v100);
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v57, "uuid");
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        v103 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v99, "initWithObjectChangeType:uuid:parentUUID:", 1, v101, v102);

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[HMDHome minimumMediaUserPrivilege](v57, "minimumMediaUserPrivilege"));
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeMediaSettingsModel setMinimumMediaUserPrivilege:](v103, "setMinimumMediaUserPrivilege:", v104);

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome isMediaPeerToPeerEnabled](v57, "isMediaPeerToPeerEnabled"));
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeMediaSettingsModel setMediaPeerToPeerEnabled:](v103, "setMediaPeerToPeerEnabled:", v105);

        -[HMDHome mediaPassword](v57, "mediaPassword");
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeMediaSettingsModel setMediaPassword:](v103, "setMediaPassword:", v106);

        objc_msgSend(v5, "addObject:", v103);
        -[HMDHome mediaSystemController](v57, "mediaSystemController");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v107, "backingStoreObjectsForVersion:", a3);
        v108 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v108, "count"))
          objc_msgSend(v5, "addObjectsFromArray:", v108);
        -[HMDHome uuid](v57, "uuid");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomeNetworkRouterManagingDeviceSettingsModel defaultModelForHomeUUID:](HMDHomeNetworkRouterManagingDeviceSettingsModel, "defaultModelForHomeUUID:", v109);
        v110 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome primaryNetworkRouterManagingDeviceUUID](v57, "primaryNetworkRouterManagingDeviceUUID");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v111, "UUIDString");
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v110, "setPrimaryNetworkRouterManagingDeviceUUID:", v112);

        objc_msgSend(v5, "addObject:", v110);
        -[HMDHome uuid](v57, "uuid");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomeNetworkRouterSettingsModel defaultModelForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "defaultModelForHomeUUID:", v113);
        v114 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome activeNetworkRouterUUID](v57, "activeNetworkRouterUUID");
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v115, "UUIDString");
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "setActiveNetworkRouterAccessoryUUID:", v116);

        v117 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("6.2"));
        -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v57, "minimumNetworkRouterSupportHomeKitVersion");
        v118 = objc_claimAutoreleasedReturnValue();
        if (!v118)
          goto LABEL_113;
        v119 = (void *)v118;
        -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v57, "minimumNetworkRouterSupportHomeKitVersion");
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        v121 = objc_msgSend(v120, "compare:", v117);

        v122 = v121 == -1;
        v57 = v148;
        if (v122)
        {
LABEL_113:
          -[HMDHomeKitVersion versionString](v117, "versionString");
          v123 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v114, "setMinimumNetworkRouterSupportHomeKitVersion:", v123);

        }
        -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](v57, "minHomeKitVersionForAccessoryNetworkProtectionChange", v108);
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v124, "versionString");
        v125 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v114, "setMinHomeKitVersionForAccessoryNetworkProtectionChange:", v125);

        objc_msgSend(v5, "addObject:", v114);
        v151 = 0u;
        v152 = 0u;
        v149 = 0u;
        v150 = 0u;
        -[HMDHome networkProtectionGroupRegistry](v57, "networkProtectionGroupRegistry");
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v126, "persistedGroups");
        v127 = (void *)objc_claimAutoreleasedReturnValue();

        v128 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v149, v193, 16);
        if (v128)
        {
          v129 = v128;
          v130 = *(_QWORD *)v150;
          do
          {
            for (i1 = 0; i1 != v129; ++i1)
            {
              if (*(_QWORD *)v150 != v130)
                objc_enumerationMutation(v127);
              objc_msgSend(*(id *)(*((_QWORD *)&v149 + 1) + 8 * i1), "modelForVersion:", a3);
              v132 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v5, "addObject:", v132);

            }
            v129 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v149, v193, 16);
          }
          while (v129);
        }

        +[HMDHomeThreadNetworkModel defaultModelForHome:](HMDHomeThreadNetworkModel, "defaultModelForHome:", v148);
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome unfilteredThreadNetworkID](v148, "unfilteredThreadNetworkID");
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v133, "setThreadNetworkID:", v134);

        objc_msgSend(v5, "addObject:", v133);
        -[HMDHome uuid](v148, "uuid");
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDHomePersonManagerSettingsModel defaultModelForHomeUUID:](HMDHomePersonManagerSettingsModel, "defaultModelForHomeUUID:", v135);
        v136 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome personManagerZoneUUID](v148, "personManagerZoneUUID");
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v136, "setZoneUUID:", v137);

        objc_msgSend(v5, "addObject:", v136);
        -[HMDHome labelsByAccessCode](v148, "labelsByAccessCode");
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDAccessCodeDataManager createHomeAccessCodeModelsFromLabelsByAccessCode:forHome:](HMDAccessCodeDataManager, "createHomeAccessCodeModelsFromLabelsByAccessCode:forHome:", v138, v148);
        v139 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v5, "addObjectsFromArray:", v139);
        -[HMDHome removedUserInfoByAccessCode](v148, "removedUserInfoByAccessCode");
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDAccessCodeDataManager createRemovedUserInfoModelsFromRemovedUserInfoByAccessCode:forHome:](HMDAccessCodeDataManager, "createRemovedUserInfoModelsFromRemovedUserInfoByAccessCode:forHome:", v140, v148);
        v141 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v5, "addObjectsFromArray:", v141);
        +[HMDHomeNFCReaderKeyModel defaultModelForHome:](HMDHomeNFCReaderKeyModel, "defaultModelForHome:", v148);
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        if (-[HMDHome shouldEncodeNFCReaderKey](v148, "shouldEncodeNFCReaderKey"))
        {
          -[HMDHome nfcReaderKey](v148, "nfcReaderKey");
          v143 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v142, "setNfcReaderKey:", v143);

        }
        objc_msgSend(v5, "addObject:", v142);

      }
    }
  }
  v144 = v5;

  return v144;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return -[HMDHome modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", a3, 4);
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  -[HMDHome emptyModelObjectWithChangeType:](self, "emptyModelObjectWithChangeType:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome name](self, "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setName:", v7);

  -[HMDHome ownerName](self, "ownerName");
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)v8;
    -[HMDHome owner](self, "owner");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "publicKey");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      -[HMDHome ownerName](self, "ownerName");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setOwnerName:", v12);

      -[HMDHome owner](self, "owner");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setOwnerUUID:", v15);

      -[HMDHome owner](self, "owner");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "userID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setOwnerUserID:", v17);

      -[HMDHome owner](self, "owner");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "publicKey");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setOwnerPublicKey:", v19);

    }
  }
  -[HMDHome creationDate](self, "creationDate");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    -[HMDHome creationDate](self, "creationDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setCreationDate:", v21);

  }
  -[HMDHome firstHAPAccessoryAddedDate](self, "firstHAPAccessoryAddedDate");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    -[HMDHome firstHAPAccessoryAddedDate](self, "firstHAPAccessoryAddedDate");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setFirstHAPAccessoryAddedDate:", v23);

  }
  -[HMDHome roomForEntireHome](self, "roomForEntireHome");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "uuid");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "UUIDString");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDefaultRoomUUID:", v26);

  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "locationData");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObject();
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setHomeLocationData:", v29);

  if (a4 >= 3)
  {
    -[HMDHome residentDeviceManager](self, "residentDeviceManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "primaryResidentUUID");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "UUIDString");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setPrimaryResidentUUID:", v32);

    if (a4 != 3)
    {
      -[HMDHome presenceAuthStatus](self, "presenceAuthStatus");
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      if (v33)
      {
        -[HMDHome presenceAuthStatus](self, "presenceAuthStatus");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "number");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setPresenceAuthorizationStatus:", v35);

      }
      -[HMDHome presenceComputeStatus](self, "presenceComputeStatus");
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      if (v36)
      {
        -[HMDHome presenceComputeStatus](self, "presenceComputeStatus");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "number");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setPresenceComputeStatus:", v38);

      }
      -[HMDHome sharedHomeSourceVersion](self, "sharedHomeSourceVersion");
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      if (v39)
      {
        -[HMDHome sharedHomeSourceVersion](self, "sharedHomeSourceVersion");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setSharedHomeSourceVersion:", v40);

      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[HMDHome protectionMode](self, "protectionMode"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setNetworkProtectionMode:", v41);

    }
  }
  if (-[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome isMultiUserEnabled](self, "isMultiUserEnabled"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setMultiUserEnabled:", v42);

  }
  objc_msgSend(v6, "hasAnyUserAcknowledgedCameraRecordingOnboarding");
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  if (v43)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding](self, "hasAnyUserAcknowledgedCameraRecordingOnboarding"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHasAnyUserAcknowledgedCameraRecordingOnboarding:", v44);

  }
  if (-[HMDHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome hasOnboardedForAccessCode](self, "hasOnboardedForAccessCode"));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHasOnboardedForAccessCode:", v45);

  }
  if (-[HMDHome shouldEncodeHasOnboardedForWalletKey](self, "shouldEncodeHasOnboardedForWalletKey"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome hasOnboardedForWalletKey](self, "hasOnboardedForWalletKey"));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHasOnboardedForWalletKey:", v46);

  }
  -[HMDHome naturalLightingContext](self, "naturalLightingContext");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  if (v47)
    objc_msgSend(v6, "setNaturalLightingContext:", v47);
  -[HMDHome chipStorage](self, "chipStorage");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "updateHomeModel:", v6);

  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    -[HMDHome fabric](self, "fabric");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "fabricID");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setMatterFabricID:", v50);

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome soundCheckEnabled](self, "soundCheckEnabled"));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSoundCheckEnabled:", v51);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMDHome siriPhraseOptions](self, "siriPhraseOptions"));
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSiriPhraseOptions:", v52);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome locationServicesEnabled](self, "locationServicesEnabled"));
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setLocationServicesEnabled:", v53);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHome didOnboardLocationServices](self, "didOnboardLocationServices"));
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDidOnboardLocationServices:", v54);

  return v6;
}

- (id)emptyModelObjectWithChangeType:(unint64_t)a3
{
  HMDHomeModel *v5;
  void *v6;
  void *v7;
  HMDHomeModel *v8;

  v5 = [HMDHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  v8 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v5, "initWithObjectChangeType:uuid:parentUUID:", a3, v6, v7);

  return v8;
}

- (id)homeConfigurationUUID
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CB3A28];
  -[HMDHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = CFSTR("6741775F-2ED4-4DF8-B582-1F64BB3D1C75");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v3, 0, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)homeConfigurationModelObjectWithChangeType:(unint64_t)a3
{
  HMDHomeConfigurationModel *v5;
  void *v6;
  void *v7;
  HMDHomeConfigurationModel *v8;
  void *v9;

  v5 = [HMDHomeConfigurationModel alloc];
  -[HMDHome homeConfigurationUUID](self, "homeConfigurationUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v5, "initWithObjectChangeType:uuid:parentUUID:", a3, v6, v7);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[HMDHome configurationVersion](self, "configurationVersion"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeConfigurationModel setConfigurationVersion:](v8, "setConfigurationVersion:", v9);

  return v8;
}

- (void)dropAllChangesWithArrayOfObjectIDs:(id)a3
{
  id v4;
  void *v5;
  HMDBackingStoreLogFetchOperation *v6;
  uint64_t v7;
  id v8;
  id v9;
  HMDBackingStoreLogFetchOperation *v10;
  id v11;
  id v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  HMDHome *v24;
  id v25;
  id location;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  v6 = [HMDBackingStoreLogFetchOperation alloc];
  v7 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke;
  v22[3] = &unk_1E89A5260;
  v8 = v4;
  v23 = v8;
  v24 = self;
  v9 = v5;
  v25 = v9;
  v10 = -[HMDBackingStoreLogFetchOperation initWithNeedsPushTo:result:](v6, "initWithNeedsPushTo:result:", 2, v22);
  v18[0] = v7;
  v18[1] = 3221225472;
  v18[2] = __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke_1500;
  v18[3] = &unk_1E89BCB20;
  objc_copyWeak(&v21, &location);
  v11 = v9;
  v19 = v11;
  v12 = v8;
  v20 = v12;
  v13 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v10, "setResultBlock:", v18));
  v14 = self;
  HMFGetOSLogHandle();
  v15 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v16;
    v29 = 2112;
    v30 = v12;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Dropping of changes datastore started for %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  -[HMDHome backingStore](v14, "backingStore");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "submit:", v10);

  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);

}

- (void)dropAllChangesWithObjectID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v11 = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v11, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome dropAllChangesWithArrayOfObjectIDs:](self, "dropAllChangesWithArrayOfObjectIDs:", v6);

  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v13 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@ObjectID must be defined", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (void)cleanChangesIfNoAddChangeObjectID:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDBackingStoreLogFetchOperation *v9;
  uint64_t v10;
  id v11;
  id v12;
  HMDBackingStoreLogFetchOperation *v13;
  id v14;
  id v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, void *);
  void *v29;
  id v30;
  id v31;
  id v32;
  __int128 *v33;
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  HMDHome *v38;
  __int128 *v39;
  id location;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (v6)
  {
    *(_QWORD *)&v45 = 0;
    *((_QWORD *)&v45 + 1) = &v45;
    v46 = 0x2020000000;
    v47 = 0;
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    v9 = [HMDBackingStoreLogFetchOperation alloc];
    v10 = MEMORY[0x1E0C809B0];
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke;
    v35[3] = &unk_1E89A5288;
    v11 = v6;
    v36 = v11;
    v12 = v8;
    v38 = self;
    v39 = &v45;
    v37 = v12;
    v13 = -[HMDBackingStoreLogFetchOperation initWithNeedsPushTo:result:](v9, "initWithNeedsPushTo:result:", 2, v35);
    v26 = v10;
    v27 = 3221225472;
    v28 = __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke_1502;
    v29 = &unk_1E89BE108;
    objc_copyWeak(&v34, &location);
    v33 = &v45;
    v14 = v12;
    v30 = v14;
    v15 = v11;
    v31 = v15;
    v32 = v7;
    v16 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v13, "setResultBlock:", &v26));
    v17 = self;
    HMFGetOSLogHandle();
    v18 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v42 = v19;
      v43 = 2112;
      v44 = v15;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Cleaning of objects for %@ from datastore started", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    -[HMDHome backingStore](v17, "backingStore", v26, v27, v28, v29);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "submit:", v13);

    objc_destroyWeak(&v34);
    objc_destroyWeak(&location);

    _Block_object_dispose(&v45, 8);
  }
  else
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v45) = 138543362;
      *(_QWORD *)((char *)&v45 + 4) = v24;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@ObjectID must be defined", (uint8_t *)&v45, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v25);

  }
}

- (void)_migrateResidentDevicesCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  NSObject *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id location;
  _QWORD block[4];
  id v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v22 = a3;
  v8 = a4;
  v9 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "residentDevices");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v37;
LABEL_3:
    v16 = 0;
    while (1)
    {
      if (*(_QWORD *)v37 != v15)
        objc_enumerationMutation(v13);
      v17 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v16);
      if ((objc_msgSend(v17, "isCurrentDevice", v22) & 1) != 0)
        break;
      if (v14 == ++v16)
      {
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
        if (v14)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v18 = v17;

    if (!v18)
      goto LABEL_12;
    objc_msgSend(v18, "identifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_2;
    v23[3] = &unk_1E89A52D8;
    objc_copyWeak(&v30, &location);
    v24 = v8;
    v29 = v9;
    v25 = v10;
    v26 = v11;
    v20 = v19;
    v27 = v20;
    v21 = v18;
    v28 = v21;
    objc_msgSend(v22, "cloudRecordWithObjectID:completionHandler:", v20, v23);

    objc_destroyWeak(&v30);
    objc_destroyWeak(&location);

    goto LABEL_14;
  }
LABEL_9:

LABEL_12:
  if (v9)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke;
    block[3] = &unk_1E89C1B48;
    v35 = v9;
    v33 = v10;
    v34 = v11;
    dispatch_async(v8, block);

    v21 = v35;
LABEL_14:

  }
}

- (void)_migrateHomeSettingsCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeSettingsModel modelIDForHomeUUID:](HMDHomeSettingsModel, "modelIDForHomeUUID:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, self);
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke;
  v20[3] = &unk_1E89A5300;
  objc_copyWeak(&v26, &location);
  v15 = v9;
  v21 = v15;
  v16 = v10;
  v25 = v16;
  v17 = v11;
  v22 = v17;
  v18 = v12;
  v23 = v18;
  v19 = v14;
  v24 = v19;
  objc_msgSend(v8, "cloudRecordWithObjectID:completionHandler:", v19, v20);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);

}

- (void)_migrateHomeMediaSettingsCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeMediaSettingsModel modelIDForHomeUUID:](HMDHomeMediaSettingsModel, "modelIDForHomeUUID:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, self);
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke;
  v20[3] = &unk_1E89A5300;
  objc_copyWeak(&v26, &location);
  v15 = v9;
  v21 = v15;
  v16 = v10;
  v25 = v16;
  v17 = v11;
  v22 = v17;
  v18 = v12;
  v23 = v18;
  v19 = v14;
  v24 = v19;
  objc_msgSend(v8, "cloudRecordWithObjectID:completionHandler:", v19, v20);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);

}

- (void)_migrateHomeUsersCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id obj;
  id v22;
  NSObject *queue;
  _QWORD block[4];
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  NSObject *v31;
  id v32;
  id location;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v22 = a3;
  queue = a4;
  v20 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = dispatch_group_create();
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  -[HMDHome users](self, "users");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v11, "copy");

  obj = v12;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v35;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v35 != v14)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v15);
        dispatch_group_enter(v10);
        objc_initWeak(&location, self);
        v28[0] = MEMORY[0x1E0C809B0];
        v28[1] = 3221225472;
        v28[2] = __64__HMDHome__migrateHomeUsersCloudZone_migrationQueue_completion___block_invoke;
        v28[3] = &unk_1E89B1050;
        objc_copyWeak(&v32, &location);
        v29 = v8;
        v30 = v9;
        v31 = v10;
        objc_msgSend(v16, "migrateCloudZone:migrationQueue:completion:", v22, queue, v28);

        objc_destroyWeak(&v32);
        objc_destroyWeak(&location);
        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    }
    while (v13);
  }

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __64__HMDHome__migrateHomeUsersCloudZone_migrationQueue_completion___block_invoke_2;
  block[3] = &unk_1E89C1B48;
  v26 = v9;
  v27 = v20;
  v25 = v8;
  v17 = v9;
  v18 = v8;
  v19 = v20;
  dispatch_group_notify(v10, queue, block);

}

- (void)_migrateAppleMediaAccessoriesWithCloudZone:(id)a3 migrationQueue:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD block[4];
  NSObject *v15;

  v8 = a3;
  v9 = a5;
  v10 = a4;
  -[HMDHome currentAccessory](self, "currentAccessory");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    objc_msgSend(v13, "migrateWithCloudZone:migrationQueue:completion:", v8, v10, v9);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __80__HMDHome__migrateAppleMediaAccessoriesWithCloudZone_migrationQueue_completion___block_invoke;
    block[3] = &unk_1E89C0870;
    v15 = v9;
    dispatch_async(v10, block);

    v10 = v15;
  }

}

- (void)_migrateHomeObjectCloudZone:(id)a3 defaultModel:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  objc_msgSend(v9, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __63__HMDHome__migrateHomeObjectCloudZone_defaultModel_completion___block_invoke;
  v18[3] = &unk_1E89A5328;
  objc_copyWeak(&v23, &location);
  v14 = v10;
  v22 = v14;
  v15 = v11;
  v19 = v15;
  v16 = v12;
  v20 = v16;
  v17 = v9;
  v21 = v17;
  objc_msgSend(v8, "cloudRecordWithObjectID:completionHandler:", v13, v18);

  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);

}

- (void)_migrateHomeAllObjectsCloudZone:(id)a3 migrationGroup:(id)a4 migrationQueue:(id)a5 saveModels:(id)a6 runModels:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHome *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  BOOL v47;
  void *v48;
  void *v49;
  _BOOL8 v50;
  void *v51;
  void *v52;
  _BOOL4 v53;
  void *v54;
  _BOOL8 v55;
  void *v56;
  void *v57;
  void *v58;
  char v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  dispatch_group_t group;
  id v68;
  void (**v69)(void *, void *);
  void *v70;
  id v71;
  HMDHome *v72;
  _QWORD v73[4];
  dispatch_group_t v74;
  HMDHome *v75;
  id v76;
  id v77;
  _QWORD aBlock[4];
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id location;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  objc_initWeak(&location, self);
  v17 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke;
  aBlock[3] = &unk_1E89A5378;
  v65 = v14;
  v79 = v65;
  objc_copyWeak(&v83, &location);
  v64 = v15;
  v80 = v64;
  v66 = v16;
  v81 = v66;
  v18 = v13;
  v82 = v18;
  v19 = _Block_copy(aBlock);
  v73[0] = v17;
  v73[1] = 3221225472;
  v73[2] = __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke_3;
  v73[3] = &unk_1E89A53A0;
  group = (dispatch_group_t)v18;
  v74 = group;
  v75 = self;
  v63 = v12;
  v76 = v63;
  v68 = v19;
  v77 = v68;
  v69 = (void (**)(void *, void *))_Block_copy(v73);
  -[HMDHome uuid](self, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNetworkRouterManagingDeviceSettingsModel defaultModelForHomeUUID:](HMDHomeNetworkRouterManagingDeviceSettingsModel, "defaultModelForHomeUUID:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v69[2](v69, v21);

  -[HMDHome uuid](self, "uuid");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNetworkRouterSettingsModel defaultModelForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "defaultModelForHomeUUID:", v22);
  v70 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome activeNetworkRouterUUID](self, "activeNetworkRouterUUID");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "UUIDString");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "setActiveNetworkRouterAccessoryUUID:", v24);

  -[HMDHome minimumNetworkRouterSupportHomeKitVersion](self, "minimumNetworkRouterSupportHomeKitVersion");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "versionString");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "setMinimumNetworkRouterSupportHomeKitVersion:", v26);

  -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](self, "minHomeKitVersionForAccessoryNetworkProtectionChange");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "versionString");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "setMinHomeKitVersionForAccessoryNetworkProtectionChange:", v28);

  v69[2](v69, v70);
  v29 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHome accessories](self, "accessories");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "arrayWithCapacity:", objc_msgSend(v30, "count"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v32 = self;
  v71 = v31;
  v72 = v32;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  -[HMDHome accessories](v32, "accessories");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v85, v89, 16);
  if (v34)
  {
    v35 = *(_QWORD *)v86;
    do
    {
      v36 = 0;
      do
      {
        if (*(_QWORD *)v86 != v35)
          objc_enumerationMutation(v33);
        v37 = *(id *)(*((_QWORD *)&v85 + 1) + 8 * v36);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v38 = v37;
        else
          v38 = 0;
        v39 = v38;

        if (v39)
        {
          v40 = objc_alloc((Class)objc_msgSend((id)objc_opt_class(), "transactionClass"));
          objc_msgSend(v39, "uuid");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](v72, "uuid");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = (void *)objc_msgSend(v40, "initWithObjectChangeType:uuid:parentUUID:", 2, v41, v42);

          objc_msgSend(v39, "initialManufacturer");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          if (v44)
          {
            v45 = 0;
            goto LABEL_14;
          }
          objc_msgSend(v39, "manufacturer");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = v46 == 0;

          if (v47)
          {
            v45 = 0;
          }
          else
          {
            objc_msgSend(v39, "manufacturer");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "setInitialManufacturer:", v44);
            v45 = 1;
LABEL_14:

          }
          objc_msgSend(v39, "initialModel");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          if (v48)
          {
LABEL_18:

          }
          else
          {
            objc_msgSend(v39, "model");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v49 == 0;

            if (!v50)
            {
              objc_msgSend(v39, "model");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "setInitialModel:", v48);
              v45 = 1;
              goto LABEL_18;
            }
          }
          objc_msgSend(v39, "initialCategoryIdentifier");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          if (v51)
          {
LABEL_20:

          }
          else
          {
            objc_msgSend(v39, "category");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            v55 = v54 == 0;

            if (!v55)
            {
              v56 = (void *)MEMORY[0x1E0CBA1D8];
              objc_msgSend(v39, "category");
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v56, "categoryIdentifierForCategory:", v57);
              v51 = (void *)objc_claimAutoreleasedReturnValue();

              if (v51)
              {
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 1);
                v58 = (void *)objc_claimAutoreleasedReturnValue();
                v59 = objc_msgSend(v51, "isEqualToNumber:", v58);

                if ((v59 & 1) == 0)
                {
                  objc_msgSend(v43, "setInitialCategoryIdentifier:", v51);
                  v45 = 1;
                }
              }
              goto LABEL_20;
            }
          }
          objc_msgSend(v39, "initialServiceTypeUUIDs");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v53 = v52 == 0;

          if (v53)
          {
            objc_msgSend(v39, "serviceTypeUUIDs");
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "setInitialServiceTypeUUIDs:", v60);

          }
          else if (!v45)
          {
            goto LABEL_30;
          }
          objc_msgSend(v71, "addObject:", v43);
LABEL_30:

        }
        ++v36;
      }
      while (v34 != v36);
      v61 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v85, v89, 16);
      v34 = v61;
    }
    while (v61);
  }

  if (objc_msgSend(v71, "count"))
  {
    dispatch_group_enter(group);
    objc_msgSend(MEMORY[0x1E0C99D20], "array");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, id, _QWORD))v68 + 2))(v68, v62, v71, 0);

  }
  objc_destroyWeak(&v83);

  objc_destroyWeak(&location);
}

- (void)_migrateUnknownAccessoriesWithCloudZone:(id)a3 accessoryUUIDs:(id)a4 migrationQueue:(id)a5 completion:(id)a6
{
  id v9;
  void *v10;
  id v11;
  const char *v12;
  NSObject *v13;
  dispatch_queue_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  NSObject *queue;
  id v26;
  _QWORD block[4];
  id v28;
  id v29;
  _QWORD v30[4];
  NSObject *v31;
  id v32;
  NSObject *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v26 = a3;
  v9 = a4;
  queue = a5;
  v24 = a6;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  HMDispatchQueueNameString();
  v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v12 = (const char *)objc_msgSend(v11, "UTF8String");
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = dispatch_queue_create(v12, v13);

  v15 = dispatch_group_create();
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v16 = v9;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v35;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v35 != v19)
          objc_enumerationMutation(v16);
        v21 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * v20);
        dispatch_group_enter(v15);
        v30[0] = MEMORY[0x1E0C809B0];
        v30[1] = 3221225472;
        v30[2] = __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke;
        v30[3] = &unk_1E89BFCD8;
        v31 = v14;
        v32 = v10;
        v33 = v15;
        objc_msgSend(v26, "allDescendentsCloudRecordsForParentID:completionHandler:", v21, v30);

        ++v20;
      }
      while (v18 != v20);
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    }
    while (v18);
  }

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke_3;
  block[3] = &unk_1E89C1D68;
  v28 = v10;
  v29 = v24;
  v22 = v10;
  v23 = v24;
  dispatch_group_notify(v15, queue, block);

}

- (void)fetchAllMigratedObjectsForCloudZone:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  id v8;
  const char *v9;
  NSObject *v10;
  dispatch_queue_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  id v17;
  _QWORD block[5];
  id v19;
  dispatch_queue_t v20;
  id v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  id v26;
  _QWORD v27[4];
  NSObject *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  id v33;
  id location;
  _QWORD v35[5];
  id v36;
  _QWORD v37[5];
  id v38;
  _QWORD v39[5];
  id v40;
  _QWORD v41[5];
  id v42;

  v6 = a3;
  v7 = a4;
  v41[0] = 0;
  v41[1] = v41;
  v41[2] = 0x3032000000;
  v41[3] = __Block_byref_object_copy__10535;
  v41[4] = __Block_byref_object_dispose__10536;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v42 = (id)objc_claimAutoreleasedReturnValue();
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x3032000000;
  v39[3] = __Block_byref_object_copy__10535;
  v39[4] = __Block_byref_object_dispose__10536;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v40 = (id)objc_claimAutoreleasedReturnValue();
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x3032000000;
  v37[3] = __Block_byref_object_copy__10535;
  v37[4] = __Block_byref_object_dispose__10536;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v38 = (id)objc_claimAutoreleasedReturnValue();
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x3032000000;
  v35[3] = __Block_byref_object_copy__10535;
  v35[4] = __Block_byref_object_dispose__10536;
  v36 = 0;
  HMDispatchQueueNameString();
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v9 = (const char *)objc_msgSend(v8, "UTF8String");
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = dispatch_queue_create(v9, v10);

  v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  objc_initWeak(&location, self);
  v13 = MEMORY[0x1E0C809B0];
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke;
  v27[3] = &unk_1E89A53C8;
  objc_copyWeak(&v33, &location);
  v29 = v35;
  v14 = v12;
  v28 = v14;
  v30 = v41;
  v31 = v39;
  v32 = v37;
  objc_msgSend(v6, "fetchMigratedObjects:", v27);
  block[0] = v13;
  block[1] = 3221225472;
  block[2] = __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke_1516;
  block[3] = &unk_1E89A5418;
  v22 = v37;
  v23 = v41;
  v24 = v35;
  block[4] = self;
  v19 = v6;
  v20 = v11;
  v21 = v7;
  v15 = v11;
  v16 = v6;
  v17 = v7;
  objc_copyWeak(&v26, &location);
  v25 = v39;
  dispatch_group_notify(v14, v15, block);
  objc_destroyWeak(&v26);

  objc_destroyWeak(&v33);
  objc_destroyWeak(&location);

  _Block_object_dispose(v35, 8);
  _Block_object_dispose(v37, 8);

  _Block_object_dispose(v39, 8);
  _Block_object_dispose(v41, 8);

}

- (void)migrateCloudZone:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  const char *v11;
  NSObject *v12;
  dispatch_group_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  NSObject *v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  dispatch_queue_t v24;
  _QWORD v25[4];
  id v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  _QWORD aBlock[4];
  id v35;
  id v36;
  id v37;
  id v38;
  id location[2];

  v6 = a3;
  v7 = a4;
  -[HMDHome setMigrationNeeded:](self, "setMigrationNeeded:", 0);
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setupBackingStore](self, "setupBackingStore");
    HMDispatchQueueNameString();
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v11 = (const char *)objc_msgSend(v10, "UTF8String");
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v12 = objc_claimAutoreleasedReturnValue();
    v24 = dispatch_queue_create(v11, v12);

    v13 = dispatch_group_create();
    objc_initWeak(location, self);
    v14 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke;
    aBlock[3] = &unk_1E89BF7D0;
    objc_copyWeak(&v38, location);
    v15 = v7;
    v37 = v15;
    v16 = v8;
    v35 = v16;
    v17 = v9;
    v36 = v17;
    v18 = _Block_copy(aBlock);
    v25[0] = v14;
    v25[1] = 3221225472;
    v25[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_4;
    v25[3] = &unk_1E89A5468;
    objc_copyWeak(&v33, location);
    v31 = v15;
    v26 = v6;
    v23 = v13;
    v27 = v23;
    v19 = v24;
    v28 = v19;
    v20 = v16;
    v29 = v20;
    v21 = v17;
    v30 = v21;
    v22 = v18;
    v32 = v22;
    -[HMDHome fetchAllMigratedObjectsForCloudZone:completion:](self, "fetchAllMigratedObjectsForCloudZone:completion:", v26, v25);

    objc_destroyWeak(&v33);
    objc_destroyWeak(&v38);
    objc_destroyWeak(location);

  }
  else if (v7)
  {
    (*((void (**)(id, _QWORD))v7 + 2))(v7, 0);
  }

}

- (void)migrateAfterCloudMerge:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  NSObject *v23;
  dispatch_block_t block;
  _QWORD v25[4];
  id v26;
  id v27;
  NSObject *v28;
  id v29;
  _QWORD v30[4];
  id v31;
  id v32;
  NSObject *v33;
  id v34;
  _QWORD v35[4];
  id v36;
  id v37;
  NSObject *v38;
  id v39;
  _QWORD aBlock[4];
  id v41;
  id v42;
  id v43;
  id location[2];

  v4 = a3;
  -[HMDHome setMigrationNeeded:](self, "setMigrationNeeded:", 0);
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    HMDispatchQueueNameString();
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v8 = (const char *)objc_msgSend(v7, "UTF8String");
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = dispatch_queue_create(v8, v9);

    v11 = dispatch_group_create();
    objc_initWeak(location, self);
    v12 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke;
    aBlock[3] = &unk_1E89BD988;
    objc_copyWeak(&v43, location);
    v13 = v5;
    v41 = v13;
    v14 = v6;
    v42 = v14;
    block = _Block_copy(aBlock);
    dispatch_group_enter(v11);
    v35[0] = v12;
    v35[1] = 3221225472;
    v35[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_4;
    v35[3] = &unk_1E89B1050;
    objc_copyWeak(&v39, location);
    v15 = v13;
    v36 = v15;
    v16 = v14;
    v37 = v16;
    v17 = v11;
    v38 = v17;
    -[HMDHome _migrateHomeSettingsCloudZone:migrationQueue:completion:](self, "_migrateHomeSettingsCloudZone:migrationQueue:completion:", v4, v10, v35);
    dispatch_group_enter(v17);
    v30[0] = v12;
    v30[1] = 3221225472;
    v30[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_5;
    v30[3] = &unk_1E89B1050;
    objc_copyWeak(&v34, location);
    v18 = v15;
    v31 = v18;
    v19 = v16;
    v32 = v19;
    v20 = v17;
    v33 = v20;
    -[HMDHome _migrateHomeMediaSettingsCloudZone:migrationQueue:completion:](self, "_migrateHomeMediaSettingsCloudZone:migrationQueue:completion:", v4, v10, v30);
    dispatch_group_enter(v20);
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_6;
    v25[3] = &unk_1E89B1050;
    objc_copyWeak(&v29, location);
    v21 = v18;
    v26 = v21;
    v22 = v19;
    v27 = v22;
    v23 = v20;
    v28 = v23;
    -[HMDHome _migrateHomeUsersCloudZone:migrationQueue:completion:](self, "_migrateHomeUsersCloudZone:migrationQueue:completion:", v4, v10, v25);
    dispatch_group_notify(v23, v10, block);

    objc_destroyWeak(&v29);
    objc_destroyWeak(&v34);

    objc_destroyWeak(&v39);
    objc_destroyWeak(&v43);
    objc_destroyWeak(location);

  }
}

- (void)_registerStateHandler
{
  void *v3;
  uint64_t v4;
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = MEMORY[0x1E0C809B0];
  objc_copyWeak(&v5, &location);
  -[HMDHome setStateHandle:](self, "setStateHandle:", os_state_add_handler(), v4, 3221225472, __32__HMDHome__registerStateHandler__block_invoke, &unk_1E89BDDE8);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)_deregisterStateHandler
{
  if (-[HMDHome stateHandle](self, "stateHandle"))
  {
    -[HMDHome stateHandle](self, "stateHandle");
    os_state_remove_handler();
    -[HMDHome setStateHandle:](self, "setStateHandle:", 0);
  }
}

- (NSArray)mediaSessions
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_mediaSessions, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (id)mediaSessionWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome mediaSessions](self, "mediaSessions");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithValue:forKeyPath:", v4, CFSTR("sessionIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)mediaSessionWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome mediaSessions](self, "mediaSessions");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)addMediaSession:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((-[NSMutableArray containsObject:](self->_mediaSessions, "containsObject:", v4) & 1) == 0)
    -[NSMutableArray addObject:](self->_mediaSessions, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeMediaSession:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[NSMutableArray containsObject:](self->_mediaSessions, "containsObject:", v4))
    -[NSMutableArray removeObject:](self->_mediaSessions, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (NSArray)mediaSessionStates
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_mediaSessionStates, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (id)mediaSessionStateWithIdentifier:(id)a3
{
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;

  v4 = a3;
  if ((objc_msgSend(v4, "hasPrefix:", CFSTR("direct://")) & 1) != 0)
  {
    v5 = v4;
    objc_msgSend(v5, "substringFromIndex:", 8);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("direct://%@"), v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = v4;
  }
  v7 = v6;
  -[HMDHome mediaSessionStates](self, "mediaSessionStates");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __43__HMDHome_mediaSessionStateWithIdentifier___block_invoke;
  v13[3] = &unk_1E89A5490;
  v14 = v5;
  v15 = v7;
  v9 = v7;
  v10 = v5;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (void)addMediaSessionState:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((-[NSMutableArray containsObject:](self->_mediaSessionStates, "containsObject:", v4) & 1) == 0)
    -[NSMutableArray addObject:](self->_mediaSessionStates, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)removeMediaSessionState:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[NSMutableArray containsObject:](self->_mediaSessionStates, "containsObject:", v4))
    -[NSMutableArray removeObject:](self->_mediaSessionStates, "removeObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)redispatchMediaReadRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id location;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v19 = a4;
  v9 = a5;
  +[HMDMediaPropertyRequest serializeReadRequests:](HMDMediaPropertyRequest, "serializeReadRequests:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "count"))
  {
    -[HMDHome uuid](self, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v25[0] = CFSTR("kMediaPropertiesListKey");
    v25[1] = CFSTR("kHomeUUID");
    v26[0] = v10;
    v26[1] = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)MEMORY[0x1E0D285F8];
    -[HMDHome messageDestination](self, "messageDestination");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "messageWithName:qualityOfService:destination:payload:", CFSTR("kMediaPropertiesReadRequestKey"), 33, v15, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, self);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __60__HMDHome_redispatchMediaReadRequests_viaDevice_completion___block_invoke;
    v20[3] = &unk_1E89BCDD0;
    objc_copyWeak(&v23, &location);
    v22 = v9;
    v21 = v8;
    objc_msgSend(v16, "setResponseHandler:", v20);
    -[HMDHome uuid](self, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:](self, "redispatchToResidentMessage:target:responseQueue:viaDevice:", v16, v17, v18, v19);

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
LABEL_5:

    goto LABEL_6;
  }
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v8, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = v13;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v27, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v16);
    goto LABEL_5;
  }
LABEL_6:

}

- (void)_handleReadMediaProperties:(id)a3 source:(unint64_t)a4 message:(id)a5 completionHandler:(id)a6
{
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  int v34;
  void *v35;
  int v36;
  void *v37;
  void *v38;
  BOOL v39;
  void *v40;
  void *v41;
  BOOL v42;
  void *v43;
  NSObject *v44;
  id v45;
  void *v46;
  HMDHome *v47;
  NSObject *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  HMDHome *v53;
  NSObject *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  HMDHome *v68;
  void *v69;
  NSObject *group;
  id obj;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[4];
  id v90;
  id v91;
  _QWORD v92[4];
  NSObject *v93;
  id v94;
  id v95;
  _QWORD block[4];
  id v97;
  id v98;
  NSObject *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  id location;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint8_t v109[128];
  uint8_t buf[4];
  id v111;
  __int16 v112;
  void *v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  void *v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v65 = a5;
  v66 = a6;
  group = dispatch_group_create();
  v72 = v8;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  objc_msgSend(v8, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v75 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
  if (v75)
  {
    v74 = *(_QWORD *)v101;
    v88 = *MEMORY[0x1E0CB9558];
    v87 = *MEMORY[0x1E0CB9580];
    v85 = *MEMORY[0x1E0CB95A8];
    v86 = *MEMORY[0x1E0CB95D8];
    v82 = *MEMORY[0x1E0CB95E8];
    v79 = *MEMORY[0x1E0CB9568];
    do
    {
      v83 = 0;
      do
      {
        if (*(_QWORD *)v101 != v74)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v100 + 1) + 8 * v83);
        v81 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v9, v65);
        -[HMDHome mediaProfileWithUUID:](self, "mediaProfileWithUUID:");
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        if (v84)
        {
          objc_msgSend(v72, "hmf_arrayForKey:", v9);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDMediaPropertyRequest deserializeReadRequests:mediaProfile:](HMDMediaPropertyRequest, "deserializeReadRequests:mediaProfile:");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v10, "count"))
            goto LABEL_51;
          objc_msgSend(v84, "mediaSession");
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v84, "accessory");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v76 = v10;
          v73 = v11;
          if (v11)
          {
            objc_msgSend(v11, "identifier");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome mediaSessionStateWithIdentifier:](self, "mediaSessionStateWithIdentifier:", v12);
            v13 = (id)objc_claimAutoreleasedReturnValue();

            if (!v78 && v13)
            {
              if (-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident"))
              {
                v14 = (void *)MEMORY[0x1D17BA0A0]();
                v68 = self;
                HMFGetOSLogHandle();
                v15 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v16 = (id)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v84, "accessory");
                  v17 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v17, "name");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v111 = v16;
                  v112 = 2112;
                  v113 = v18;
                  v114 = 2112;
                  v115 = v9;
                  _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ has no session, returning local state", buf, 0x20u);

                }
                objc_autoreleasePoolPop(v14);
                v13 = v13;
                v19 = v76;
                v67 = v19;
                if (self)
                {
                  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v19, "count"));
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(MEMORY[0x1E0C99D68], "now");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v107 = 0u;
                  v108 = 0u;
                  v105 = 0u;
                  v106 = 0u;
                  v22 = v67;
                  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v105, buf, 16);
                  if (!v23)
                    goto LABEL_40;
                  v24 = *(_QWORD *)v106;
                  while (1)
                  {
                    for (i = 0; i != v23; ++i)
                    {
                      if (*(_QWORD *)v106 != v24)
                        objc_enumerationMutation(v22);
                      v26 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * i);
                      objc_msgSend(v26, "property");
                      v27 = (void *)objc_claimAutoreleasedReturnValue();
                      v28 = objc_msgSend(v27, "isEqualToString:", v88);

                      if (v28)
                      {
                        objc_msgSend(v13, "sessionIdentifier");
                        v29 = (void *)objc_claimAutoreleasedReturnValue();
                        +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                        v30 = objc_claimAutoreleasedReturnValue();
                      }
                      else
                      {
                        objc_msgSend(v26, "property");
                        v31 = (void *)objc_claimAutoreleasedReturnValue();
                        v32 = objc_msgSend(v31, "isEqualToString:", v87);

                        if (v32)
                        {
                          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v13, "playbackState"));
                          v29 = (void *)objc_claimAutoreleasedReturnValue();
                          +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                          v30 = objc_claimAutoreleasedReturnValue();
                        }
                        else
                        {
                          objc_msgSend(v26, "property");
                          v33 = (void *)objc_claimAutoreleasedReturnValue();
                          v34 = objc_msgSend(v33, "isEqualToString:", v86);

                          if (v34)
                          {
                            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v13, "shuffleState"));
                            v29 = (void *)objc_claimAutoreleasedReturnValue();
                            +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                            v30 = objc_claimAutoreleasedReturnValue();
                          }
                          else
                          {
                            objc_msgSend(v26, "property");
                            v35 = (void *)objc_claimAutoreleasedReturnValue();
                            v36 = objc_msgSend(v35, "isEqualToString:", v85);

                            if (v36)
                            {
                              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v13, "repeatState"));
                              v29 = (void *)objc_claimAutoreleasedReturnValue();
                              +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                              v30 = objc_claimAutoreleasedReturnValue();
                            }
                            else
                            {
                              objc_msgSend(v26, "property");
                              v37 = (void *)objc_claimAutoreleasedReturnValue();
                              if ((objc_msgSend(v37, "isEqualToString:", v82) & 1) != 0)
                              {
                                objc_msgSend(v13, "volume");
                                v38 = (void *)objc_claimAutoreleasedReturnValue();
                                v39 = v38 == 0;

                                if (!v39)
                                {
                                  objc_msgSend(v13, "volume");
                                  v29 = (void *)objc_claimAutoreleasedReturnValue();
                                  +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                                  v30 = objc_claimAutoreleasedReturnValue();
                                  goto LABEL_35;
                                }
                              }
                              else
                              {

                              }
                              objc_msgSend(v26, "property");
                              v40 = (void *)objc_claimAutoreleasedReturnValue();
                              if (!objc_msgSend(v40, "isEqualToString:", v79))
                                goto LABEL_37;
                              objc_msgSend(v13, "mediaUniqueIdentifier");
                              v41 = (void *)objc_claimAutoreleasedReturnValue();
                              v42 = v41 == 0;

                              if (v42)
                                continue;
                              objc_msgSend(v13, "mediaUniqueIdentifier");
                              v29 = (void *)objc_claimAutoreleasedReturnValue();
                              +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:](HMDMediaPropertyResponse, "responseWithRequest:value:updatedTime:", v26, v29, v21);
                              v30 = objc_claimAutoreleasedReturnValue();
                            }
                          }
                        }
                      }
LABEL_35:
                      v40 = (void *)v30;

                      if (!v40)
                        continue;
                      objc_msgSend(v20, "addObject:", v40);
LABEL_37:

                    }
                    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v105, buf, 16);
                    if (!v23)
                    {
LABEL_40:

                      v43 = (void *)objc_msgSend(v20, "copy");
                      goto LABEL_41;
                    }
                  }
                }
                v43 = 0;
LABEL_41:

                dispatch_group_enter(group);
                -[HMDHome workQueue](v68, "workQueue");
                v44 = objc_claimAutoreleasedReturnValue();
                block[0] = MEMORY[0x1E0C809B0];
                block[1] = 3221225472;
                block[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke;
                block[3] = &unk_1E89C20C8;
                v97 = v69;
                v98 = v43;
                v99 = group;
                v45 = v43;
                dispatch_async(v44, block);

LABEL_50:
                v10 = v76;
LABEL_51:

                goto LABEL_52;
              }
LABEL_47:
              v52 = (void *)MEMORY[0x1D17BA0A0]();
              v53 = self;
              HMFGetOSLogHandle();
              v54 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v55 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v84, "accessory");
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v56, "name");
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v111 = v55;
                v112 = 2112;
                v113 = v57;
                v114 = 2112;
                v115 = v9;
                _os_log_impl(&dword_1CD062000, v54, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ not reachable for reading", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v52);
              objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v76, v58);
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", v59);
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v69, "addEntriesFromDictionary:", v60);

              goto LABEL_50;
            }
          }
          else
          {
            v13 = 0;
          }
          if (v78)
          {
            dispatch_group_enter(group);
            v46 = (void *)MEMORY[0x1D17BA0A0]();
            v47 = self;
            HMFGetOSLogHandle();
            v48 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v49 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v84, "accessory");
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v50, "name");
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v111 = v49;
              v112 = 2112;
              v113 = v51;
              v114 = 2112;
              v115 = v9;
              v116 = 2112;
              v117 = v78;
              _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_INFO, "%{public}@Reading state for accessory with media profile %@/%@ from media session: %@", buf, 0x2Au);

            }
            objc_autoreleasePoolPop(v46);
            v92[0] = MEMORY[0x1E0C809B0];
            v92[1] = 3221225472;
            v92[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_1550;
            v92[3] = &unk_1E89C1880;
            objc_copyWeak(&v95, &location);
            v93 = group;
            v94 = v69;
            objc_msgSend(v78, "readProperties:completion:", v76, v92);

            objc_destroyWeak(&v95);
            goto LABEL_50;
          }
          goto LABEL_47;
        }
LABEL_52:

        ++v83;
      }
      while (v83 != v75);
      v61 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v100, v109, 16);
      v75 = v61;
    }
    while (v61);
  }

  -[HMDHome workQueue](self, "workQueue");
  v62 = objc_claimAutoreleasedReturnValue();
  v89[0] = MEMORY[0x1E0C809B0];
  v89[1] = 3221225472;
  v89[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_3;
  v89[3] = &unk_1E89C1D68;
  v90 = v69;
  v91 = v66;
  v63 = v69;
  v64 = v66;
  dispatch_group_notify(group, v62, v89);

  objc_destroyWeak(&location);
}

- (void)_handleMediaPropertiesRead:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kMediaPropertiesListKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count"))
  {
    v6 = parseMessageSource(v4);
    objc_initWeak(location, self);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __38__HMDHome__handleMediaPropertiesRead___block_invoke;
    v12[3] = &unk_1E89B0788;
    objc_copyWeak(&v14, location);
    v13 = v4;
    -[HMDHome _handleReadMediaProperties:source:message:completionHandler:](self, "_handleReadMediaProperties:source:message:completionHandler:", v5, v6, v13, v12);

    objc_destroyWeak(&v14);
    objc_destroyWeak(location);
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@None of the properties in media properties read are valid", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);

  }
}

- (void)redispatchMediaWriteRequests:(id)a3 viaDevice:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id location;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v19 = a4;
  v9 = a5;
  +[HMDMediaPropertyWriteRequest serializeWriteRequests:](HMDMediaPropertyWriteRequest, "serializeWriteRequests:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "count"))
  {
    -[HMDHome uuid](self, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v25[0] = CFSTR("kMediaPropertiesListKey");
    v25[1] = CFSTR("kHomeUUID");
    v26[0] = v10;
    v26[1] = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)MEMORY[0x1E0D285F8];
    -[HMDHome messageDestination](self, "messageDestination");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "messageWithName:qualityOfService:destination:payload:", CFSTR("kMediaPropertiesWriteRequestKey"), 25, v15, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, self);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __61__HMDHome_redispatchMediaWriteRequests_viaDevice_completion___block_invoke;
    v20[3] = &unk_1E89BCDD0;
    objc_copyWeak(&v23, &location);
    v22 = v9;
    v21 = v8;
    objc_msgSend(v16, "setResponseHandler:", v20);
    -[HMDHome uuid](self, "uuid");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome workQueue](self, "workQueue");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:](self, "redispatchToResidentMessage:target:responseQueue:viaDevice:", v16, v17, v18, v19);

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
LABEL_5:

    goto LABEL_6;
  }
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v8, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = v13;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v27, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v16);
    goto LABEL_5;
  }
LABEL_6:

}

- (void)_handleWriteMediaProperties:(id)a3 source:(unint64_t)a4 requestMessage:(id)a5 completionHandler:(id)a6
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  NSObject *log;
  void *v36;
  id obj;
  NSObject *group;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD block[4];
  id v45;
  id v46;
  _QWORD v47[4];
  id v48;
  NSObject *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id location;
  uint8_t buf[4];
  id v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  uint64_t v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v33 = a5;
  v34 = a6;
  v41 = v8;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v8, "count"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  group = dispatch_group_create();
  objc_initWeak(&location, self);
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  objc_msgSend(v8, "allKeys");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
  if (v10)
  {
    v39 = *(_QWORD *)v52;
    obj = v9;
    do
    {
      v42 = v10;
      for (i = 0; i != v42; ++i)
      {
        if (*(_QWORD *)v52 != v39)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * i);
        v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v12, v33);
        -[HMDHome mediaProfileWithUUID:](self, "mediaProfileWithUUID:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "hmf_dictionaryForKey:", v12);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDMediaPropertyWriteRequest deserializeWriteRequests:mediaProfile:](HMDMediaPropertyWriteRequest, "deserializeWriteRequests:mediaProfile:", v15, v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v16, "count"))
        {
          objc_msgSend(v14, "mediaSession");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17)
          {
            dispatch_group_enter(group);
            v47[0] = MEMORY[0x1E0C809B0];
            v47[1] = 3221225472;
            v47[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke;
            v47[3] = &unk_1E89C1880;
            objc_copyWeak(&v50, &location);
            v48 = v40;
            v49 = group;
            objc_msgSend(v17, "writeProperties:completion:", v16, v47);

            objc_destroyWeak(&v50);
          }
          else
          {
            v20 = (void *)MEMORY[0x1D17BA0A0]();
            v21 = self;
            HMFGetOSLogHandle();
            v22 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              log = v22;
              v36 = v20;
              HMFGetLogIdentifier();
              v23 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "accessory");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "name");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v57 = v23;
              v58 = 2112;
              v59 = v25;
              v60 = 2112;
              v61 = v12;
              v26 = v23;
              v22 = log;
              _os_log_impl(&dword_1CD062000, log, OS_LOG_TYPE_INFO, "%{public}@Accessory with media profile %@/%@ not reachable for writing", buf, 0x20u);

              v20 = v36;
            }

            objc_autoreleasePoolPop(v20);
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v16, v27);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "addEntriesFromDictionary:", v29);

            v17 = 0;
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", v16, v17);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "addEntriesFromDictionary:", v19);

        }
      }
      v9 = obj;
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v62, 16);
    }
    while (v10);
  }

  -[HMDHome workQueue](self, "workQueue");
  v30 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_3;
  block[3] = &unk_1E89C1D68;
  v45 = v40;
  v46 = v34;
  v31 = v40;
  v32 = v34;
  dispatch_group_notify(group, v30, block);

  objc_destroyWeak(&location);
}

- (void)_handleMediaPropertiesWrite:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id location;

  v4 = a3;
  v5 = parseMessageSource(v4);
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kMediaPropertiesListKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __39__HMDHome__handleMediaPropertiesWrite___block_invoke;
  v8[3] = &unk_1E89B0788;
  objc_copyWeak(&v10, &location);
  v7 = v4;
  v9 = v7;
  -[HMDHome _handleWriteMediaProperties:source:requestMessage:completionHandler:](self, "_handleWriteMediaProperties:source:requestMessage:completionHandler:", v6, v5, v7, v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);

}

- (NSArray)matterAccessories
{
  void *v2;
  void *v3;

  -[HMDHome hapAccessories](self, "hapAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_filter:", &__block_literal_global_1552);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (NSArray)hapAccessoriesForLegacyDataBlobEncoding
{
  void *v2;
  void *v3;

  -[HMDHome hapAccessories](self, "hapAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_filter:", &__block_literal_global_1553);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (NSArray)cameraAccessories
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_1554);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)userAssistantAccessControlDidUpdate:(id)a3 accessories:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  NSObject *v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHome currentUser](self, "currentUser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqual:", v6);

  if (v9)
  {
    -[HMDHome workQueue](self, "workQueue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __59__HMDHome_userAssistantAccessControlDidUpdate_accessories___block_invoke;
    block[3] = &unk_1E89C20C8;
    block[4] = self;
    v12 = v6;
    v13 = v7;
    dispatch_async(v10, block);

  }
}

- (id)destinationForMediaSystem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome mediaGroupsAggregateConsumer](self, "mediaGroupsAggregateConsumer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "destinationWithParentIdentifier:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)mediaSystemController:(id)a3 accessoryForUUID:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a4;
  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_firstObjectWithUUID:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  return v9;
}

- (void)mediaSystemController:(id)a3 removeAccessories:(id)a4 fromAssistantAccessControl:(id)a5
{
  id v7;
  void *v8;
  int v9;
  void *v10;
  id v11;

  v11 = a4;
  v7 = a5;
  -[HMDHome currentUser](self, "currentUser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqual:", v7);

  if (v9)
  {
    -[HMDHome currentUser](self, "currentUser");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeAccessoriesFromAssistantAccessControlList:", v11);

  }
}

- (void)mediaSystemController:(id)a3 didRemoveMediaSystem:(id)a4
{
  id v5;
  void *v6;
  id v7;

  v5 = a4;
  -[HMDHome homeManager](self, "homeManager");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "lastEventStoreController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "didRemoveMediaSystem:", v5);

}

- (BOOL)_ensureDevicesSymptomDiscoveryMessageCanBeHandled:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
  {
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    {
      LOBYTE(v5) = 1;
      goto LABEL_13;
    }
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Only owners may start discovering symptoms for nearby devices", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v4, "responseHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v11 = 17;
      goto LABEL_12;
    }
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Only entitled clients may stop discovering symptoms for nearby devices", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v4, "responseHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v11 = 10;
LABEL_12:
      objc_msgSend(v10, "hmErrorWithCode:", v11);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v5, 0);

      LOBYTE(v5) = 0;
    }
  }
LABEL_13:

  return (char)v5;
}

- (void)_handleStartDiscoveringSymptomsForNearbyDevicesMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  NSUInteger v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome _ensureDevicesSymptomDiscoveryMessageCanBeHandled:](self, "_ensureDevicesSymptomDiscoveryMessageCanBeHandled:", v4))
  {
    objc_msgSend(v4, "transport");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      os_unfair_recursive_lock_lock_with_options();
      if (-[NSHashTable containsObject:](self->_connectionsDiscoveringSymptomsForNearbyDevices, "containsObject:", v7))
      {
        os_unfair_recursive_lock_unlock();
      }
      else
      {
        -[NSHashTable addObject:](self->_connectionsDiscoveringSymptomsForNearbyDevices, "addObject:", v7);
        v12 = -[NSHashTable count](self->_connectionsDiscoveringSymptomsForNearbyDevices, "count");
        os_unfair_recursive_lock_unlock();
        if (v12 == 1)
        {
          +[HMDMainDriver driver](HMDMainDriver, "driver");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "symptomManager");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "startDiscoveringSymptomsRequiringNearbyInfo");

        }
      }
    }
    else
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543362;
        v16 = v11;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Asked to start discovering symptoms, but no connection proxy was available", (uint8_t *)&v15, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
    }
    objc_msgSend(v4, "respondWithPayload:", 0);

  }
}

- (void)_handleStopDiscoveringSymptomsForNearbyDevicesMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome _ensureDevicesSymptomDiscoveryMessageCanBeHandled:](self, "_ensureDevicesSymptomDiscoveryMessageCanBeHandled:", v4))
  {
    objc_msgSend(v4, "transport");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      -[HMDHome _removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:](self, "_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:", v7);
    }
    else
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138543362;
        v13 = v11;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Asked to stop discovering symptoms, but no connection proxy was available", (uint8_t *)&v12, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
    }
    objc_msgSend(v4, "respondWithPayload:", 0);

  }
}

- (void)_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:(id)a3
{
  NSUInteger v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[NSHashTable containsObject:](self->_connectionsDiscoveringSymptomsForNearbyDevices, "containsObject:", v7))
  {
    -[NSHashTable removeObject:](self->_connectionsDiscoveringSymptomsForNearbyDevices, "removeObject:", v7);
    v4 = -[NSHashTable count](self->_connectionsDiscoveringSymptomsForNearbyDevices, "count");
    os_unfair_recursive_lock_unlock();
    if (!v4)
    {
      +[HMDMainDriver driver](HMDMainDriver, "driver");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "symptomManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stopDiscoveringSymptomsRequiringNearbyInfo");

    }
  }
  else
  {
    os_unfair_recursive_lock_unlock();
  }

}

- (HMHomePersonManagerSettings)personManagerSettings
{
  HMHomePersonManagerSettings *personManagerSettings;
  HMHomePersonManagerSettings *v4;
  HMHomePersonManagerSettings *v5;

  os_unfair_recursive_lock_lock_with_options();
  personManagerSettings = self->_personManagerSettings;
  if (personManagerSettings)
    v4 = personManagerSettings;
  else
    v4 = (HMHomePersonManagerSettings *)objc_alloc_init(MEMORY[0x1E0CBA568]);
  v5 = v4;
  os_unfair_recursive_lock_unlock();
  return v5;
}

- (void)setPersonManagerSettings:(id)a3
{
  HMHomePersonManagerSettings *v4;
  HMHomePersonManagerSettings *personManagerSettings;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((-[HMHomePersonManagerSettings isEqual:](self->_personManagerSettings, "isEqual:", v6) & 1) != 0)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    v4 = (HMHomePersonManagerSettings *)objc_msgSend(v6, "copy");
    personManagerSettings = self->_personManagerSettings;
    self->_personManagerSettings = v4;

    os_unfair_recursive_lock_unlock();
    logAndPostNotification(CFSTR("HMDHomePersonManagerSettingsDidChangeNotification"), self, 0);
  }

}

- (HMDHomePersonManager)personManager
{
  void *v2;
  void *v3;

  -[HMDHome personDataManager](self, "personDataManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "personManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDHomePersonManager *)v3;
}

- (id)updatePersonManagerSettings:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome personDataManager](self, "personDataManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateSettingsModelWithSettings:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (void)handleXPCConnectionInvalidated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHome_handleXPCConnectionInvalidated___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleRemoteUserClientCloudShareRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemoteUserClientCloudShareRequest:", v4);

}

- (void)_handleRemoteUserClientCloudShareRepairRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemoteUserClientCloudShareRepairRequest:", v4);

}

- (unint64_t)threadNetworkSequenceNumber
{
  NSObject *v3;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  return self->_threadNetworkSequenceNumber;
}

- (void)setThreadNetworkSequenceNumber:(unint64_t)a3
{
  NSObject *v5;

  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  self->_threadNetworkSequenceNumber = a3;
}

- (BOOL)attemptToUpdateThreadNetworkID:(id)a3
{
  id v5;
  id *p_unfilteredThreadNetworkID;
  char v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  os_unfair_recursive_lock_lock_with_options();
  p_unfilteredThreadNetworkID = (id *)&self->_unfilteredThreadNetworkID;
  v7 = HMFEqualObjects();
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  if ((v7 & 1) != 0)
  {
    HMFGetOSLogHandle();
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v5;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEBUG, "%{public}@unfilteredThreadNetworkID did not change (%@)", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  else
  {
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *p_unfilteredThreadNetworkID;
      v16 = 138543874;
      v17 = v13;
      v18 = 2112;
      v19 = v14;
      v20 = 2112;
      v21 = v5;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@unfilteredThreadNetworkID changed: %@ -> %@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    objc_storeStrong(p_unfilteredThreadNetworkID, a3);
  }
  os_unfair_recursive_lock_unlock();

  return v7 ^ 1;
}

- (HMDDevice)companionDevice
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "companionDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDDevice *)v3;
}

- (BOOL)isCompanionReachable
{
  void *v2;
  char v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "companionReachable");

  return v3;
}

- (BOOL)isResidentReachable:(id)a3
{
  id v4;
  void *v5;
  int v6;
  char v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome isCurrentDevicePrimaryResident](self, "isCurrentDevicePrimaryResident")
    || (-[HMDHome primaryResident](self, "primaryResident"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isEqual:", v4),
        v5,
        v6))
  {
    v7 = objc_msgSend(v4, "isReachable");
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    -[HMDHome appleMediaAccessories](self, "appleMediaAccessories", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v23;
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v23 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
          objc_msgSend(v14, "device");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "device");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "isEqual:", v16);

          if (v17)
          {
            if ((objc_msgSend(v14, "isReachable") & 1) != 0)
              v7 = 1;
            else
              v7 = objc_msgSend(v14, "isDeviceReachable");

            goto LABEL_4;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
        if (v11)
          continue;
        break;
      }
    }

    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v21;
      v28 = 2112;
      v29 = v4;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Could not find matching accessory for resident %@ so assuming unreachable", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    v7 = 0;
  }
LABEL_4:

  return v7;
}

- (NSArray)mediaSystems
{
  void *v2;
  void *v3;

  -[HMDHome mediaSystemController](self, "mediaSystemController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "mediaSystems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)setNaturalLightingContext:(id)a3
{
  HMDNaturalLightingContext *v4;
  HMDNaturalLightingContext *naturalLightingContext;
  void *v6;
  id v7;

  v7 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (-[HMDNaturalLightingContext isEqual:](self->_naturalLightingContext, "isEqual:", v7))
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    v4 = (HMDNaturalLightingContext *)objc_msgSend(v7, "copy");
    naturalLightingContext = self->_naturalLightingContext;
    self->_naturalLightingContext = v4;

    os_unfair_recursive_lock_unlock();
    -[HMDHome notificationCenter](self, "notificationCenter");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "postNotificationName:object:", CFSTR("HMDHomeNaturalLightingContextUpdatedNotification"), self);

  }
}

- (HMDNaturalLightingContext)naturalLightingContext
{
  HMDNaturalLightingContext *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_naturalLightingContext;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)configureNaturalLightingForDemoMode
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Setting up natural lighting for demo mode", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHome configureNaturalLightingWithDemoModeEnabled:](v4, "configureNaturalLightingWithDemoModeEnabled:", 1);
}

- (void)setNfcReaderKey:(id)a3
{
  HMDHomeNFCReaderKey *v4;
  HMDHomeNFCReaderKey *nfcReaderKey;

  v4 = (HMDHomeNFCReaderKey *)a3;
  os_unfair_recursive_lock_lock_with_options();
  nfcReaderKey = self->_nfcReaderKey;
  self->_nfcReaderKey = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDHomeNFCReaderKey)nfcReaderKey
{
  HMDHomeNFCReaderKey *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_nfcReaderKey;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)_handleTestUpgradeToROAR:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHomeUpgradedToROAR *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHomeUpgradedToROAR *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB9260]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    if (objc_msgSend(v5, "BOOLValue"))
    {
      +[HMDHomeUpgradedToROAR defaultModelForHome:](HMDHomeUpgradedToROAR, "defaultModelForHome:", self);
      v7 = (HMDHomeUpgradedToROAR *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[HMDHome setIsUpdatedToHH2:](self, "setIsUpdatedToHH2:", 0);
      v13 = [HMDHomeUpgradedToROAR alloc];
      +[HMDHomeUpgradedToROAR modelIDForHome:](HMDHomeUpgradedToROAR, "modelIDForHome:", self);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v13, "initWithObjectChangeType:uuid:parentUUID:", 3, v14, v15);

      -[HMDHome saveWithReason:postSyncNotification:objectChange:](self, "saveWithReason:postSyncNotification:objectChange:", CFSTR("Downgrading To HH1"), 0, 1);
    }
    -[HMDHome backingStore](self, "backingStore");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "transaction:options:", v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "add:withMessage:", v7, v4);
    objc_msgSend(v19, "run");
    objc_msgSend(v4, "respondWithSuccess");

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Update flag is needed.", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);

  }
}

- (void)handleSetPreferredPrimaryMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@SetPreferredPrimary - Received set preferred primary message with payload: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "respondWithSuccess");

}

- (void)_handleFetchLastModifiedServiceOfType:(id)a3
{
  id v4;
  __CFString *v5;
  __CFString *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  __CFString *v24;
  id v25;
  _BYTE location[12];
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kServiceType"));
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543874;
      *(_QWORD *)&location[4] = v14;
      v27 = 2112;
      v28 = CFSTR("kServiceType");
      v29 = 2112;
      v30 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Missing service type parameter in message payload %@:%@", location, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 27);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v16);

    goto LABEL_10;
  }
  if (!-[__CFString isEqualToString:](v5, "isEqualToString:", *MEMORY[0x1E0CB9A28]))
  {
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543618;
      *(_QWORD *)&location[4] = v20;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Querying for the service type is not supported: %@", location, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v21);

LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  v7 = (id)*MEMORY[0x1E0CB8AA8];
  objc_initWeak((id *)location, self);
  -[HMDHome homeManager](self, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "biomeEventManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome spiClientIdentifier](self, "spiClientIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __49__HMDHome__handleFetchLastModifiedServiceOfType___block_invoke;
  v22[3] = &unk_1E89A5518;
  objc_copyWeak(&v25, (id *)location);
  v23 = v4;
  v24 = v6;
  objc_msgSend(v9, "fetchMostRecentEventWithCharacteristicType:serviceType:homeSPIClientIdentifier:completion:", v7, v24, v10, v22);

  objc_destroyWeak(&v25);
  objc_destroyWeak((id *)location);
LABEL_11:

}

- (NSSet)notificationDeregistrations
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableSet copy](self->_notificationDeregistrations, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v3;
}

- (void)addNotificationDeregistrationForApplicationBundleIdentifier:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet addObject:](self->_notificationDeregistrations, "addObject:", v4);
  os_unfair_recursive_lock_unlock();

}

- (void)_applyNotificationDeregistrations
{
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableSet minusSet:](self->_notificationRegistrations, "minusSet:", self->_notificationDeregistrations);
  -[NSMutableSet minusSet:](self->_notificationRegistrationsForAppleMediaAccessories, "minusSet:", self->_notificationDeregistrations);
  -[NSMutableSet removeAllObjects](self->_notificationDeregistrations, "removeAllObjects");
  os_unfair_recursive_lock_unlock();
}

- (void)handleReportingSessionResponseMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  -[HMDHome reportingSessionManager](self, "reportingSessionManager");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "addResponseMessagePayload:toSessionWithUUID:", v5, v6);
}

- (void)_handleRetrieveAsyncResults:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  HMDHome *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHome *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  HMDHome *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  id obj;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shortDescription");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v53 = v8;
    v54 = 2112;
    v55 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling retrieve async results message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "dataForKey:", *MEMORY[0x1E0CB91E0]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    -[HMDHome reportingSessionManager](v6, "reportingSessionManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "consumeResponseMessagePayloadsForSessionWithReportContextRequestInfo:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v12, "count"))
    {
      v44 = v10;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v13 = v12;
      v47 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
      if (v47)
      {
        v46 = *(_QWORD *)v49;
        obj = v13;
        do
        {
          for (i = 0; i != v47; ++i)
          {
            if (*(_QWORD *)v49 != v46)
              objc_enumerationMutation(obj);
            v15 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * i);
            v16 = (void *)MEMORY[0x1D17BA0A0]();
            v17 = (void *)objc_msgSend(v15, "mutableCopy");
            v18 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v17, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("kMultiPartResponseKey")));
            v19 = v6;
            v20 = v6;
            HMFGetOSLogHandle();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v53 = v22;
              v54 = 2112;
              v55 = v15;
              v56 = 2112;
              v57 = v17;
              _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Overriding payload in last cached message from %@ to %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v18);
            if (objc_msgSend(v4, "qualityOfService") < 17)
              v23 = 17;
            else
              v23 = objc_msgSend(v4, "qualityOfService");
            v24 = objc_alloc(MEMORY[0x1E0D285D8]);
            -[HMDHome uuid](v20, "uuid");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v26 = (void *)objc_msgSend(v24, "initWithTarget:", v25);

            v27 = objc_alloc(MEMORY[0x1E0D285F8]);
            v28 = (void *)objc_msgSend(v17, "copy");
            v29 = (void *)objc_msgSend(v27, "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicValuesUpdatedNotificationKey"), v23, v26, v28);

            objc_msgSend(v4, "transport");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "setTransport:", v30);
            objc_msgSend(v4, "identifier");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "setIdentifier:", v31);

            -[HMDHome msgDispatcher](v20, "msgDispatcher");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "sendMessage:", v29);

            objc_autoreleasePoolPop(v16);
            v6 = v19;
          }
          v13 = obj;
          v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
        }
        while (v47);
      }

      objc_msgSend(v4, "respondWithSuccess");
      v10 = v44;
    }
    else
    {
      v38 = v12;
      v39 = (void *)MEMORY[0x1D17BA0A0]();
      v40 = v6;
      HMFGetOSLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v53 = v42;
        _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_DEFAULT, "%{public}@Did not find any response message payloads to retrieve", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v39);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v43);

      v13 = v38;
    }
  }
  else
  {
    v33 = (void *)MEMORY[0x1D17BA0A0]();
    v34 = v6;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v53 = v36;
      v54 = 2112;
      v55 = v37;
      _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@Could not find request info in message payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v33);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);
  }

}

- (id)eventRouterDumpStateInfo
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  _QWORD v16[2];
  _QWORD v17[2];
  void *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  -[HMDHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = v4;
  v16[0] = CFSTR("RemoteClientController");
  -[HMDHome remoteEventRouterClientController](self, "remoteEventRouterClientController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dumpStateDescription");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v6)
    v8 = (const __CFString *)v6;
  else
    v8 = &stru_1E89C3E38;
  v16[1] = CFSTR("RemoteServer");
  v17[0] = v8;
  -[HMDHome remoteEventRouterServer](self, "remoteEventRouterServer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dumpStateDescription");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v10)
    v12 = (const __CFString *)v10;
  else
    v12 = &stru_1E89C3E38;
  v17[1] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5
{
  return a4;
}

- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:](HMDHomeEventsGenerated, "upstreamTopicsForTopic:", a4);
}

- (void)clientController:(id)a3 didReceiveFetchedCachedEvents:(id)a4 source:(id)a5
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v19 = a3;
  v7 = a4;
  v8 = a5;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v22;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v22 != v12)
          objc_enumerationMutation(v9);
        v14 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v13);
        v15 = (void *)MEMORY[0x1D17BA0A0](v10);
        objc_msgSend(v9, "objectForKeyedSubscript:", v14, v19);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome homeManager](self, "homeManager");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "memoryEventConsumer");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "didReceiveCachedEvent:topic:source:", v16, v14, v8);

        objc_autoreleasePoolPop(v15);
        ++v13;
      }
      while (v11 != v13);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      v11 = v10;
    }
    while (v10);
  }

}

- (id)primaryResidentDeviceIdentifierForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "primaryResidentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "device");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)eventStoreReadHandleForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome homeManager](self, "homeManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "eventStoreReadHandle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)eventStoreWriteHandleForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHome homeManager](self, "homeManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "eventStoreWriteHandle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)deviceForAccessoryUUID:(id)a3 forRemoteEventRouterClientController:(id)a4
{
  void *v4;
  void *v5;
  id v6;
  void *v7;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    objc_msgSend(v6, "deviceForDirectMessaging");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (id)deviceForPrimaryResidentForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "primaryResidentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "device");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v5, "isCurrentDevice") & 1) != 0)
    v6 = 0;
  else
    v6 = v5;

  return v6;
}

- (BOOL)isCurrentDeviceResidentCapableForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isResidentCapable");

  return v4;
}

- (BOOL)isCurrentDevicePrimaryResidentForRemoteEventRouterClientController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome residentDeviceManager](self, "residentDeviceManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCurrentDevicePrimaryResident");

  return v4;
}

- (BOOL)isMessagedHomepodSettingsEnabledForClientController:(id)a3
{
  return _os_feature_enabled_impl();
}

- (BOOL)isCurrentUserRestrictedForRemoteEventRouterClientController:(id)a3
{
  return 0;
}

- (id)routerServerUserAccessControlProviderIdentifierForMessage:(id)a3
{
  void *v3;
  void *v4;

  objc_msgSend(a3, "matchingRemoteIdentityUserForHome:", self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)routerServerUserAccessControlProviderForIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome users](self, "users");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __62__HMDHome_routerServerUserAccessControlProviderForIdentifier___block_invoke;
  v9[3] = &unk_1E89B7AD8;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)shouldAllowTopic:(id)a3 forDeviceWithMessageIdentifier:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMDHome accessoryWithDeviceIdentifier:](self, "accessoryWithDeviceIdentifier:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v13[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAccessoryEventsGenerated topicsRemovingAccessoryTopics:accessoryUUID:](HMDAccessoryEventsGenerated, "topicsRemovingAccessoryTopics:accessoryUUID:", v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count") != 0;

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

- (BOOL)isDevicePrimaryResident:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;

  v4 = a3;
  -[HMDHome primaryResident](self, "primaryResident");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", v4);

  return v7;
}

- (BOOL)isDeviceIdentifierPrimaryResident:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;

  v4 = a3;
  -[HMDHome primaryResident](self, "primaryResident");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "hmf_isEqualToUUID:", v4);

  return v8;
}

- (id)messageTargetForDeviceIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v11[4];
  id v12;

  v4 = a3;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "residentDevices");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __44__HMDHome_messageTargetForDeviceIdentifier___block_invoke;
  v11[3] = &unk_1E89B27D8;
  v12 = v4;
  v7 = v4;
  objc_msgSend(v6, "na_firstObjectPassingTest:", v11);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "device");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (BOOL)canTopicBeForwardedToPrimaryFromResident:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  char v12;

  v4 = a3;
  -[HMDHome currentAccessory](self, "currentAccessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    if (self)
    {
      v8 = (void *)MEMORY[0x1E0CBA240];
      v9 = v7;
      -[HMDHome uuid](self, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "topicPrefixWithHomeUUID:accessoryUUID:", v10, v11);
      self = (HMDHome *)objc_claimAutoreleasedReturnValue();

    }
    v12 = objc_msgSend(v4, "hasPrefix:", self);

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

- (id)expandedTopicsWithTopics:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHome homeManager](self, "homeManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeEventsGenerated expandedTopicsWithTopics:homeManager:](HMDHomeEventsGenerated, "expandedTopicsWithTopics:homeManager:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)currentAccessorySetupMetricDispatcher
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "currentAccessorySetupMetricDispatcher");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)currentAccessoryHomeUUID
{
  void *v3;
  void *v4;

  -[HMDHome currentAccessory](self, "currentAccessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[HMDHome uuid](self, "uuid");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

- (BOOL)remoteEventAllowedForTopic:(id)a3 deviceType:(unint64_t)a4 userType:(unint64_t)a5
{
  id v8;
  void *v9;

  v8 = a3;
  -[HMDHome homeRemoteEventAccessController](self, "homeRemoteEventAccessController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a5) = objc_msgSend(v9, "remoteEventAllowedForTopic:deviceType:userType:", v8, a4, a5);

  return a5;
}

- (BOOL)router:(id)a3 shouldHandleMessage:(id)a4 usingRouter:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  BOOL v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  id v22;
  int v23;
  void *v24;
  HMDHome *v25;
  NSObject *v26;
  void *v27;
  char v28;
  id v29;
  int v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHome accessoryMessageRouterViaPrimary](self, "accessoryMessageRouterViaPrimary");
  v11 = (id)objc_claimAutoreleasedReturnValue();

  if (v11 != v8)
  {
    v12 = 0;
    goto LABEL_18;
  }
  objc_msgSend(v9, "messagePayload");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "hmf_UUIDForKey:", *MEMORY[0x1E0CB8150]);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v16 = v15;
  else
    v16 = 0;
  v17 = v16;

  -[HMDHome currentAccessory](self, "currentAccessory");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "uuid");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v19, "hmf_isEqualToUUID:", v20);

  if (v17)
  {
    -[HMDHome appleDeviceRouter](self, "appleDeviceRouter");
    v22 = (id)objc_claimAutoreleasedReturnValue();
    if (v22 == v10)
    {
      v23 = -[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident") | v21;

      if (v23 == 1)
      {
        v24 = (void *)MEMORY[0x1D17BA0A0]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = 138543362;
          v32 = v27;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEBUG, "%{public}@accepting accessory router", (uint8_t *)&v31, 0xCu);

        }
        objc_autoreleasePoolPop(v24);
        v28 = 1;
        goto LABEL_14;
      }
    }
    else
    {

    }
  }
  v28 = 0;
LABEL_14:
  -[HMDHome primaryResidentMessageRouter](self, "primaryResidentMessageRouter");
  v29 = (id)objc_claimAutoreleasedReturnValue();

  if (v29 == v10)
    v12 = 1;
  else
    v12 = v28;

LABEL_18:
  return v12;
}

- (BOOL)isAppleMediaAccessory:(id)a3
{
  void *v3;
  BOOL v4;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v4 = objc_opt_isKindOfClass() & (v3 != 0);

  return v4;
}

- (BOOL)isSidekickAccessory:(id)a3
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  BOOL v8;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "siriEndpointProfile");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7 != 0;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (BOOL)isMediaSystem:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHome mediaSystems](self, "mediaSystems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __25__HMDHome_isMediaSystem___block_invoke;
  v9[3] = &unk_1E89AA628;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7 != 0;
}

- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithNoPasscodeForSiriSecureAccessoryAccessController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsSiriUnsecuringActionsWithNoPasscode");

  return v4;
}

- (BOOL)currentDeviceSupportsSiriUnsecuringActionsWithWatchAuthForSiriSecureAccessoryAccessController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome localCapabilitiesDataSource](self, "localCapabilitiesDataSource", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsSiriUnsecuringActionsWithWatchAuth");

  return v4;
}

- (BOOL)isCurrentDevicePairedWithWatchForSiriSecureAccessoryAccessController:(id)a3
{
  void *v3;
  char v4;

  -[HMDHome homeManager](self, "homeManager", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isPairedWithWatch");

  return v4;
}

- (id)deviceForAppleMediaAccessoryMessageRouter:(id)a3 message:(id)a4
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  objc_msgSend(a4, "messagePayload", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_UUIDForKey:", *MEMORY[0x1E0CB8150]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  objc_msgSend(v9, "device");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (void)didReceiveAccessorySetting:(id)a3 accessoryUUID:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  NSObject *v24;
  void *v25;
  const __CFString *v26;
  HMDHome *v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  if (v10
    && (objc_msgSend(v10, "keyPath"),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("root.siri.availableLanguages")),
        v11,
        (v12 & 1) != 0))
  {
    -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    if (v15)
    {
      -[HMDHome notificationCenter](self, "notificationCenter");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = CFSTR("HMDHomeNotificationKey");
      v27 = self;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "postNotificationName:object:userInfo:", CFSTR("HMDAppleMediaAccessoryLanguagesChangedNotification"), self, v17);

    }
    else
    {
      v22 = (void *)MEMORY[0x1D17BA0A0]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v29 = v25;
        v30 = 2112;
        v31 = v8;
        v32 = 2112;
        v33 = v7;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Received accessory setting %@ that is not for an accessory %@ in this home", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v22);
    }

  }
  else
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v21;
      v30 = 2112;
      v31 = v8;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Unexpectedly received accessory setting %@ that is not for available languages", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
  }

}

- (HMEEventForwarder)eventForwarder
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "eventForwarder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMEEventForwarder *)v3;
}

- (id)eventStoreReadHandle
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "eventStoreReadHandle");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)localAndRemoteSubscriptionProvider
{
  void *v2;
  void *v3;

  -[HMDHome homeManager](self, "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localAndRemoteSubscriptionProvider");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)aggregator:(id)a3 changedAccessoryCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void *)MEMORY[0x1D17BA0A0]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v15;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received accessory capabilities for accessory: %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  -[HMDHome _writeAccessoryCapabilities:accessoryUUID:homeUUID:](v18, "_writeAccessoryCapabilities:accessoryUUID:homeUUID:", v14, v15, v16);

}

- (void)aggregator:(id)a3 changedResidentCapabilities:(id)a4 rawCapabilities:(id)a5 accessoryUUID:(id)a6 homeUUID:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void *)MEMORY[0x1D17BA0A0]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v20;
    v23 = 2112;
    v24 = v15;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Aggregator: Received resident capabilities for accessory: %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  -[HMDHome _writeResidentCapabilities:accessoryUUID:homeUUID:](v18, "_writeResidentCapabilities:accessoryUUID:homeUUID:", v14, v15, v16);

}

- (void)aggregator:(id)a3 accessoryCapabilitiesWithUUID:(id)a4 completion:(id)a5
{
  (*((void (**)(id, _QWORD))a5 + 2))(a5, 0);
}

- (void)aggregator:(id)a3 residentCapabilitiesWithUUID:(id)a4 completion:(id)a5
{
  (*((void (**)(id, _QWORD))a5 + 2))(a5, 0);
}

- (id)_processTestModeHomeLocationStatusOverride:(id)a3
{
  id v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int64_t v13;
  int64_t v14;
  BOOL v15;
  int64_t v16;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(v4, "hmf_BOOLForKey:", CFSTR("kConfigTestingResetOverrideKey"));
  objc_msgSend(v4, "hmf_numberForKey:", CFSTR("kConfigTestingHomeLocationStatusKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if ((v5 & 1) != 0 || v6)
  {
    v13 = objc_msgSend(v6, "unsignedIntegerValue");
    v14 = -[HMDHome homeLocation](self, "homeLocation");
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {
      if (!self->_overrideHomeLocation)
      {
        self->_overriddenHomeLocation = v13;
        os_unfair_recursive_lock_unlock();
LABEL_13:
        v12 = 0;
        goto LABEL_14;
      }
      v15 = 0;
    }
    else
    {
      v15 = 1;
    }
    self->_overrideHomeLocation = v15;
    self->_overriddenHomeLocation = v13;
    os_unfair_recursive_lock_unlock();
    v16 = -[HMDHome homeLocation](self, "homeLocation");
    if (v16 != v14)
      -[HMDHome _handleHomeLocationChange:previousLocation:](self, "_handleHomeLocationChange:previousLocation:", v16, v14);
    goto LABEL_13;
  }
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543618;
    v19 = v11;
    v20 = 2112;
    v21 = v4;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Home Location override configuration incomplete: %@", (uint8_t *)&v18, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:

  return v12;
}

- (id)_processTestModeHomeAccessControlOverride:(id)a3
{
  id v4;
  int v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(v4, "hmf_BOOLForKey:", CFSTR("kConfigTestingResetOverrideKey"));
  objc_msgSend(v4, "hmf_numberForKey:", CFSTR("kConfigTestingHomeAccessControlKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    v7 = 1;
  else
    v7 = v5;
  if ((v7 & 1) != 0)
  {
    os_unfair_recursive_lock_lock_with_options();
    if (v5)
    {

      v6 = 0;
    }
    v8 = HMFEqualObjects();
    objc_storeStrong((id *)&self->_overriddenHomeAccessControl, v6);
    v9 = os_unfair_recursive_lock_unlock();
    if ((v8 & 1) != 0)
    {
      v10 = (void *)MEMORY[0x1D17BA0A0](v9);
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543618;
        v21 = v13;
        v22 = 2112;
        v23 = v4;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Home Access Control overridden to %@", (uint8_t *)&v20, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
    }
    v14 = 0;
  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v4;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Home Access Control override configuration incomplete: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }

  return v14;
}

- (void)_handleRetrieveHomeLocationForFeedback:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome homeLocationHandler](self, "homeLocationHandler");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeLocationHandler](self, "homeLocationHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "locationUpdateTimestamp");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[HMDHome homeLocationHandler](self, "homeLocationHandler");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "locationUpdateTimestamp");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0CB8E10]);

    }
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v14;
      v21 = 2112;
      v22 = v6;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Retrieve home location for feedback : %@", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(v4, "respondWithPayload:", v6);
  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543362;
      v20 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Home Location Handler does not exist.", (uint8_t *)&v19, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v6);
  }

}

- (void)runDailyTask
{
  HMDUnexpectedNotificationLogEvent *v2;
  id v3;

  -[HMDHome logEventSubmitter](self, "logEventSubmitter");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v2 = -[HMDUnexpectedNotificationLogEvent initWithCount:]([HMDUnexpectedNotificationLogEvent alloc], "initWithCount:", 0);
  objc_msgSend(v3, "submitLogEvent:", v2);

}

- (id)mediaGroupsAggregateDataTopicName
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = (void *)MEMORY[0x1E0CBA538];
  v3 = *MEMORY[0x1E0CB8D68];
  -[HMDHome uuid](self, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "topicFromSuffixID:homeUUID:", v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)destinationControllerDataForAppleMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome mediaGroupsAggregateConsumer](self, "mediaGroupsAggregateConsumer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "destinationControllerDataWithParentIdentifier:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)destinationForAppleMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  -[HMDHome mediaGroupsAggregateConsumer](self, "mediaGroupsAggregateConsumer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "destinationWithParentIdentifier:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (BOOL)hasActiveWACPairing
{
  void *v2;
  char v3;

  -[HMDHome accessoryBrowser](self, "accessoryBrowser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasActiveWACPairing");

  return v3;
}

- (BOOL)defaultRoomContainsAccessoryWithUUID:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;

  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome roomForEntireHome](self, "roomForEntireHome");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "room");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

- (BOOL)shouldWeSendAutomationsToClients
{
  return 1;
}

- (void)_handleFetchTriggerNameRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  const __CFString *v21;
  void *v22;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("triggerUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHome triggers](self, "triggers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __42__HMDHome__handleFetchTriggerNameRequest___block_invoke;
    v19[3] = &unk_1E89B1230;
    v20 = v5;
    objc_msgSend(v6, "na_firstObjectPassingTest:", v19);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "configuredName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8 || (objc_msgSend(v7, "name"), (v8 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v21 = CFSTR("kTriggerName");
      v22 = v8;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithPayload:", v9);

    }
    else
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v24 = v18;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@trigger name is nil.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v8);
    }

    v10 = v20;
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v24 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@message does not contain the trigger SPI identifier", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v10);
  }

}

- (BOOL)shouldPostBulletin
{
  return 1;
}

- (void)setMediaSessions:(id)a3
{
  objc_storeStrong((id *)&self->_mediaSessions, a3);
}

- (void)setMediaSessionStates:(id)a3
{
  objc_storeStrong((id *)&self->_mediaSessionStates, a3);
}

- (HMDAccessoryNetworkProtectionGroupRegistry)networkProtectionGroupRegistry
{
  return self->_networkProtectionGroupRegistry;
}

- (void)setNetworkProtectionGroupRegistry:(id)a3
{
  objc_storeStrong((id *)&self->_networkProtectionGroupRegistry, a3);
}

- (NSMutableDictionary)newlyConfiguredAccessories
{
  return self->_newlyConfiguredAccessories;
}

- (BOOL)isOwnerTrustZoneCapable
{
  return self->_ownerTrustZoneCapable;
}

- (BOOL)migrationNeeded
{
  return self->_migrationNeeded;
}

- (void)setMigrationNeeded:(BOOL)a3
{
  self->_migrationNeeded = a3;
}

- (NSMutableArray)currentTriggers
{
  return self->_currentTriggers;
}

- (void)setCurrentTriggers:(id)a3
{
  objc_storeStrong((id *)&self->_currentTriggers, a3);
}

- (BOOL)startThreadNetworkInProgress
{
  return self->_startThreadNetworkInProgress;
}

- (void)setStartThreadNetworkInProgress:(BOOL)a3
{
  self->_startThreadNetworkInProgress = a3;
}

- (HMDThreadNetworkStatusReporter)threadNetworkPeriodicStatusReporter
{
  return self->_threadNetworkPeriodicStatusReporter;
}

- (void)setThreadNetworkPeriodicStatusReporter:(id)a3
{
  objc_storeStrong((id *)&self->_threadNetworkPeriodicStatusReporter, a3);
}

- (void)setThreadPreferredNetworkExists:(BOOL)a3
{
  self->_threadPreferredNetworkExists = a3;
}

- (BOOL)threadNetworkIsUp
{
  return self->_threadNetworkIsUp;
}

- (void)setThreadNetworkIsUp:(BOOL)a3
{
  self->_threadNetworkIsUp = a3;
}

- (HMDHomeObjectLookup)lookup
{
  return self->_lookup;
}

- (void)setHomeManager:(id)a3
{
  objc_storeWeak((id *)&self->_homeManager, a3);
}

- (NSUUID)zoneID
{
  return self->_zoneID;
}

- (HMDHomeLocationHandler)homeLocationHandler
{
  return self->_homeLocationHandler;
}

- (HMUserPresenceAuthorization)presenceAuthStatus
{
  return self->_presenceAuthStatus;
}

- (void)setPresenceAuthStatus:(id)a3
{
  objc_storeStrong((id *)&self->_presenceAuthStatus, a3);
}

- (HMUserPresenceCompute)presenceComputeStatus
{
  return self->_presenceComputeStatus;
}

- (void)setPresenceComputeStatus:(id)a3
{
  objc_storeStrong((id *)&self->_presenceComputeStatus, a3);
}

- (HMDHomeAdministratorHandler)administratorHandler
{
  return (HMDHomeAdministratorHandler *)objc_getProperty(self, a2, 488, 1);
}

- (HMDMediaGroupsAggregator)mediaGroupsAggregator
{
  return (HMDMediaGroupsAggregator *)objc_getProperty(self, a2, 496, 1);
}

- (void)setMediaGroupsAggregator:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 496);
}

- (HMDMediaGroupsUnconfiguredParticipantOnboardingManager)mediaGroupsUnconfiguredParticipantOnboardingManager
{
  return (HMDMediaGroupsUnconfiguredParticipantOnboardingManager *)objc_getProperty(self, a2, 504, 1);
}

- (void)setMediaGroupsUnconfiguredParticipantOnboardingManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 504);
}

- (HMDHomePresenceMonitor)presenceMonitor
{
  return self->_presenceMonitor;
}

- (void)setPresenceMonitor:(id)a3
{
  objc_storeStrong((id *)&self->_presenceMonitor, a3);
}

- (HMDUserPresenceFeeder)presenceFeeder
{
  return self->_presenceFeeder;
}

- (HMDHomeMediaSystemHandler)mediaSystemController
{
  return (HMDHomeMediaSystemHandler *)objc_getProperty(self, a2, 536, 1);
}

- (void)setMediaSystemController:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 536);
}

- (HMDHomePeriodicReader)periodicReader
{
  return self->_periodicReader;
}

- (HMDPrimaryResidentChangeMonitor)primaryResidentChangeMonitor
{
  return (HMDPrimaryResidentChangeMonitor *)objc_getProperty(self, a2, 552, 1);
}

- (BOOL)isMultiUserEnabled
{
  return self->_multiUserEnabled;
}

- (void)setMultiUserEnabled:(BOOL)a3
{
  self->_multiUserEnabled = a3;
}

- (BOOL)soundCheckEnabled
{
  return self->_soundCheckEnabled;
}

- (void)setSoundCheckEnabled:(BOOL)a3
{
  self->_soundCheckEnabled = a3;
}

- (unint64_t)audioAnalysisClassifierOptions
{
  return self->_audioAnalysisClassifierOptions;
}

- (void)setAudioAnalysisClassifierOptions:(unint64_t)a3
{
  self->_audioAnalysisClassifierOptions = a3;
}

- (BOOL)didOnboardAudioAnalysis
{
  return self->_didOnboardAudioAnalysis;
}

- (void)setDidOnboardAudioAnalysis:(BOOL)a3
{
  self->_didOnboardAudioAnalysis = a3;
}

- (unint64_t)siriPhraseOptions
{
  return self->_siriPhraseOptions;
}

- (void)setSiriPhraseOptions:(unint64_t)a3
{
  self->_siriPhraseOptions = a3;
}

- (BOOL)locationServicesEnabled
{
  return self->_locationServicesEnabled;
}

- (void)setLocationServicesEnabled:(BOOL)a3
{
  self->_locationServicesEnabled = a3;
}

- (BOOL)didOnboardLocationServices
{
  return self->_didOnboardLocationServices;
}

- (void)setDidOnboardLocationServices:(BOOL)a3
{
  self->_didOnboardLocationServices = a3;
}

- (BOOL)hasAnyUserAcknowledgedCameraRecordingOnboarding
{
  return self->_hasAnyUserAcknowledgedCameraRecordingOnboarding;
}

- (void)setHasAnyUserAcknowledgedCameraRecordingOnboarding:(BOOL)a3
{
  self->_hasAnyUserAcknowledgedCameraRecordingOnboarding = a3;
}

- (BOOL)hasOnboardedForAccessCode
{
  return self->_hasOnboardedForAccessCode;
}

- (void)setHasOnboardedForAccessCode:(BOOL)a3
{
  self->_hasOnboardedForAccessCode = a3;
}

- (BOOL)hasOnboardedForWalletKey
{
  return self->_hasOnboardedForWalletKey;
}

- (void)setHasOnboardedForWalletKey:(BOOL)a3
{
  self->_hasOnboardedForWalletKey = a3;
}

- (HMDCameraAnalysisStatePublisher)analysisStatePublisher
{
  return (HMDCameraAnalysisStatePublisher *)objc_getProperty(self, a2, 576, 1);
}

- (HMDUserActionPredictionManager)userActionPredictionManager
{
  return (HMDUserActionPredictionManager *)objc_getProperty(self, a2, 584, 1);
}

- (void)setUserActionPredictionManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 584);
}

- (HMDHomeNaturalLightingCurveWriter)naturalLightingCurveWriter
{
  return (HMDHomeNaturalLightingCurveWriter *)objc_getProperty(self, a2, 592, 1);
}

- (HMDHomeWalletKeyManager)walletKeyManager
{
  return (HMDHomeWalletKeyManager *)objc_getProperty(self, a2, 600, 1);
}

- (HMDAccessCodeManager)accessCodeManager
{
  return (HMDAccessCodeManager *)objc_getProperty(self, a2, 616, 1);
}

- (void)setAccessCodeManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 616);
}

- (NSMutableDictionary)labelsByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 624, 1);
}

- (void)setLabelsByAccessCode:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 624);
}

- (NSMutableDictionary)removedUserInfoByAccessCode
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 632, 1);
}

- (void)setRemovedUserInfoByAccessCode:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 632);
}

- (HMDHomeLockNotificationManager)lockNotificationManager
{
  return (HMDHomeLockNotificationManager *)objc_getProperty(self, a2, 640, 1);
}

- (HMDAccessoryReachabilityChangedLogEventManager)reachabilityChangedLogEventManager
{
  return (HMDAccessoryReachabilityChangedLogEventManager *)objc_getProperty(self, a2, 648, 1);
}

- (HMDLogEventDailyScheduler)dailyScheduler
{
  return self->_dailyScheduler;
}

- (BOOL)supportsResidentSelection
{
  return self->_supportsResidentSelection;
}

- (HMDResidentDevice)userSelectedPreferredResident
{
  return (HMDResidentDevice *)objc_getProperty(self, a2, 672, 1);
}

- (NSArray)autoSelectedPreferredResidents
{
  return (NSArray *)objc_getProperty(self, a2, 680, 1);
}

- (id)currentUserFactory
{
  return objc_getProperty(self, a2, 688, 1);
}

- (void)setRemoveAccessoryInProgressForHMDAccessories:(id)a3
{
  objc_storeStrong((id *)&self->_removeAccessoryInProgressForHMDAccessories, a3);
}

- (unint64_t)homeHubState
{
  return self->_homeHubState;
}

- (void)setHomeHubState:(unint64_t)a3
{
  self->_homeHubState = a3;
}

- (HMDHomeLocalDeviceCapabilitiesDataSource)localCapabilitiesDataSource
{
  return self->_localCapabilitiesDataSource;
}

- (NSObject)WiFiAssertion
{
  return self->_WiFiAssertion;
}

- (void)setWiFiAssertion:(id)a3
{
  objc_storeStrong((id *)&self->_WiFiAssertion, a3);
}

- (void)setAddPendingAccessorySetupCodeHandlers:(id)a3
{
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodeHandlers, a3);
}

- (NSMutableDictionary)addPendingAccessorySetupCodes
{
  return self->_addPendingAccessorySetupCodes;
}

- (void)setAddPendingAccessorySetupCodes:(id)a3
{
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodes, a3);
}

- (NSMutableDictionary)addPendingAccessoryOnboardingSetupPayloadStrings
{
  return self->_addPendingAccessoryOnboardingSetupPayloadStrings;
}

- (void)setAddPendingAccessories:(id)a3
{
  objc_storeStrong((id *)&self->_addPendingAccessories, a3);
}

- (HMDHomeReprovisionHandler)homeReprovisionHandler
{
  return self->_homeReprovisionHandler;
}

- (void)setHomeReprovisionHandler:(id)a3
{
  objc_storeStrong((id *)&self->_homeReprovisionHandler, a3);
}

- (unint64_t)stateHandle
{
  return self->_stateHandle;
}

- (void)setStateHandle:(unint64_t)a3
{
  self->_stateHandle = a3;
}

- (NSHashTable)connectionsDiscoveringSymptomsForNearbyDevices
{
  return self->_connectionsDiscoveringSymptomsForNearbyDevices;
}

- (BOOL)shouldEncodeHasOnboardedForWalletKey
{
  return self->_shouldEncodeHasOnboardedForWalletKey;
}

- (BOOL)shouldEncodeNFCReaderKey
{
  return self->_shouldEncodeNFCReaderKey;
}

- (HMDRemoteEventRouterServer)remoteEventRouterServer
{
  return self->_remoteEventRouterServer;
}

- (void)setRemoteEventRouterServer:(id)a3
{
  objc_storeStrong((id *)&self->_remoteEventRouterServer, a3);
}

- (int64_t)previousReachableAccessoriesCount
{
  return self->_previousReachableAccessoriesCount;
}

- (void)setPreviousReachableAccessoriesCount:(int64_t)a3
{
  self->_previousReachableAccessoriesCount = a3;
}

- (int64_t)previousReachableAppleMediaAccessoriesCount
{
  return self->_previousReachableAppleMediaAccessoriesCount;
}

- (void)setPreviousReachableAppleMediaAccessoriesCount:(int64_t)a3
{
  self->_previousReachableAppleMediaAccessoriesCount = a3;
}

- (int64_t)previousReachableAccessoriesCountExcludingMatter
{
  return self->_previousReachableAccessoriesCountExcludingMatter;
}

- (void)setPreviousReachableAccessoriesCountExcludingMatter:(int64_t)a3
{
  self->_previousReachableAccessoriesCountExcludingMatter = a3;
}

- (HMDHomePersonDataManager)personDataManager
{
  return (HMDHomePersonDataManager *)objc_getProperty(self, a2, 824, 1);
}

- (HMDHomeNaturalLightingContextUpdater)naturalLightingContextUpdater
{
  return (HMDHomeNaturalLightingContextUpdater *)objc_getProperty(self, a2, 832, 1);
}

- (void)setNaturalLightingContextUpdater:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 832);
}

- (HMDHAPAccessoryConnectionCoordinator)accessoryConnectionCoordinator
{
  return self->_accessoryConnectionCoordinator;
}

- (void)setAccessoryConnectionCoordinator:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryConnectionCoordinator, a3);
}

- (HMDHAPAccessoryReaderWriter)accessoryReaderWriter
{
  return self->_accessoryReaderWriter;
}

- (void)setAccessoryReaderWriter:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryReaderWriter, a3);
}

- (BOOL)isNetworkAvailable
{
  return self->_isNetworkAvailable;
}

- (void)setIsNetworkAvailable:(BOOL)a3
{
  self->_isNetworkAvailable = a3;
}

- (HMDHomeMetricsDispatcher)metricsDispatcher
{
  return (HMDHomeMetricsDispatcher *)objc_getProperty(self, a2, 856, 1);
}

- (HMDResidentAppleMediaStateManager)mediaStateManager
{
  return self->_mediaStateManager;
}

- (void)setMediaStateManager:(id)a3
{
  objc_storeStrong((id *)&self->_mediaStateManager, a3);
}

- (void)setResidentFirstAccessoryCommunicationEnabled:(BOOL)a3
{
  self->_residentFirstAccessoryCommunicationEnabled = a3;
}

- (HMDAccessoryInfoFetchController)accessoryInfoFetchController
{
  return self->_accessoryInfoFetchController;
}

- (HMEDelegatingEventRouter)serverDelegatingEventRouter
{
  return (HMEDelegatingEventRouter *)objc_getProperty(self, a2, 896, 1);
}

- (HMDPrimaryResidentCapabilitiesAggregator)capabilitiesAggregator
{
  return self->_capabilitiesAggregator;
}

- (void)setCapabilitiesAggregator:(id)a3
{
  objc_storeStrong((id *)&self->_capabilitiesAggregator, a3);
}

- (HAPKeyStore)keychainStore
{
  return (HAPKeyStore *)objc_getProperty(self, a2, 912, 1);
}

- (BOOL)overrideSentinelZoneForConvergencePeriod
{
  return self->_overrideSentinelZoneForConvergencePeriod;
}

- (void)setOverrideSentinelZoneForConvergencePeriod:(BOOL)a3
{
  self->_overrideSentinelZoneForConvergencePeriod = a3;
}

- (HMDHomeKitVersion)currentHomeKitVersion
{
  return self->_currentHomeKitVersion;
}

- (void)setCurrentHomeKitVersion:(id)a3
{
  objc_storeStrong((id *)&self->_currentHomeKitVersion, a3);
}

- (HMDHomeRemoteEventRouterClientController)remoteEventRouterClientController
{
  return (HMDHomeRemoteEventRouterClientController *)objc_getProperty(self, a2, 936, 1);
}

- (void)setRemoteEventRouterClientController:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 936);
}

- (NSMutableArray)matterFabricEnabledClients
{
  return self->_matterFabricEnabledClients;
}

- (id)netManagerFactory
{
  return objc_getProperty(self, a2, 960, 1);
}

- (void)setNetManagerFactory:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 960);
}

- (id)wifiManagerFactory
{
  return objc_getProperty(self, a2, 968, 1);
}

- (void)setWifiManagerFactory:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 968);
}

- (HMDApplicationData)appData
{
  return (HMDApplicationData *)objc_getProperty(self, a2, 976, 1);
}

- (void)setAppData:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 976);
}

- (HMDUnifiedLanguageValueListSettingDataProvider)unifiedLanguageValueListSettingDataProvider
{
  return (HMDUnifiedLanguageValueListSettingDataProvider *)objc_getProperty(self, a2, 984, 1);
}

- (void)setUnifiedLanguageValueListSettingDataProvider:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 984);
}

- (HMDSiriEndpointProfilesMessenger)siriEndpointProfilesMessenger
{
  return (HMDSiriEndpointProfilesMessenger *)objc_getProperty(self, a2, 992, 1);
}

- (void)setSiriEndpointProfilesMessenger:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 992);
}

- (HMDMultiuserSettingsMessenger)multiuserSettingsMessenger
{
  return (HMDMultiuserSettingsMessenger *)objc_getProperty(self, a2, 1000, 1);
}

- (void)setMultiuserSettingsMessenger:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1000);
}

- (HMDAppleMediaAccessoriesStateManager)appleMediaAccessoriesStateManager
{
  return (HMDAppleMediaAccessoriesStateManager *)objc_getProperty(self, a2, 1008, 1);
}

- (void)setAppleMediaAccessoriesStateManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1008);
}

- (HMDAccessorySettingsMessenger)accessorySettingsMessenger
{
  return (HMDAccessorySettingsMessenger *)objc_getProperty(self, a2, 1016, 1);
}

- (void)setAccessorySettingsMessenger:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1016);
}

- (HMDHomeObjectChangeHandler)homeObjectChangeHandler
{
  return self->_homeObjectChangeHandler;
}

- (void)setWorkQueue:(id)a3
{
  objc_storeStrong((id *)&self->_workQueue, a3);
}

- (void)setMsgDispatcher:(id)a3
{
  objc_storeStrong((id *)&self->_msgDispatcher, a3);
}

- (void)setAccessoryBrowser:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryBrowser, a3);
}

- (HMDPrimaryResidentMessageRouter)primaryResidentMessageRouter
{
  return (HMDPrimaryResidentMessageRouter *)objc_getProperty(self, a2, 1056, 1);
}

- (void)setPrimaryResidentMessageRouter:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1056);
}

- (HMDAppleMediaAccessoryMessageRouter)appleDeviceRouter
{
  return (HMDAppleMediaAccessoryMessageRouter *)objc_getProperty(self, a2, 1064, 1);
}

- (void)setAppleDeviceRouter:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1064);
}

- (HMDDelegatingMessageRouter)accessoryMessageRouterViaPrimary
{
  return (HMDDelegatingMessageRouter *)objc_getProperty(self, a2, 1080, 1);
}

- (void)setAccessoryMessageRouterViaPrimary:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1080);
}

- (NSMutableArray)rooms
{
  return self->_rooms;
}

- (void)setRooms:(id)a3
{
  objc_storeStrong((id *)&self->_rooms, a3);
}

- (void)setZones:(id)a3
{
  objc_storeStrong((id *)&self->_zones, a3);
}

- (void)setDiscoveredAccessories:(id)a3
{
  objc_storeStrong((id *)&self->_discoveredAccessories, a3);
}

- (NSMutableArray)services
{
  return self->_services;
}

- (void)setServices:(id)a3
{
  objc_storeStrong((id *)&self->_services, a3);
}

- (void)setServiceGroups:(id)a3
{
  objc_storeStrong((id *)&self->_serviceGroups, a3);
}

- (void)setActionSets:(id)a3
{
  objc_storeStrong((id *)&self->_actionSets, a3);
}

- (NSMutableArray)triggerOwnedActionSets
{
  return self->_triggerOwnedActionSets;
}

- (void)setTriggerOwnedActionSets:(id)a3
{
  objc_storeStrong((id *)&self->_triggerOwnedActionSets, a3);
}

- (void)setRetrievalAccessoryCompletionTuples:(id)a3
{
  objc_storeStrong((id *)&self->_retrievalAccessoryCompletionTuples, a3);
}

- (NSMutableArray)usersPendingUserManagementOperations
{
  return self->_usersPendingUserManagementOperations;
}

- (void)setUsersPendingUserManagementOperations:(id)a3
{
  objc_storeStrong((id *)&self->_usersPendingUserManagementOperations, a3);
}

- (NSMutableArray)removedUsers
{
  return self->_removedUsers;
}

- (void)setRemovedUsers:(id)a3
{
  objc_storeStrong((id *)&self->_removedUsers, a3);
}

- (NSMutableArray)unconfiguredResidentDevices
{
  return self->_unconfiguredResidentDevices;
}

- (void)setUnconfiguredResidentDevices:(id)a3
{
  objc_storeStrong((id *)&self->_unconfiguredResidentDevices, a3);
}

- (void)setRoomForEntireHome:(id)a3
{
  objc_storeStrong((id *)&self->_roomForEntireHome, a3);
}

- (int64_t)configurationVersion
{
  return self->_configurationVersion;
}

- (void)setConfigurationVersion:(int64_t)a3
{
  self->_configurationVersion = a3;
}

- (int64_t)lastSyncedConfigurationVersion
{
  return self->_lastSyncedConfigurationVersion;
}

- (void)setLastSyncedConfigurationVersion:(int64_t)a3
{
  self->_lastSyncedConfigurationVersion = a3;
}

- (int64_t)expectedConfigurationVersion
{
  return self->_expectedConfigurationVersion;
}

- (void)setExpectedConfigurationVersion:(int64_t)a3
{
  self->_expectedConfigurationVersion = a3;
}

- (NSString)ownerName
{
  return self->_ownerName;
}

- (void)setOwnerName:(id)a3
{
  objc_storeStrong((id *)&self->_ownerName, a3);
}

- (NSDate)creationDate
{
  return self->_creationDate;
}

- (void)setCreationDate:(id)a3
{
  objc_storeStrong((id *)&self->_creationDate, a3);
}

- (NSDate)firstHAPAccessoryAddedDate
{
  return self->_firstHAPAccessoryAddedDate;
}

- (void)setFirstHAPAccessoryAddedDate:(id)a3
{
  objc_storeStrong((id *)&self->_firstHAPAccessoryAddedDate, a3);
}

- (HMDNotificationRegistry)notificationRegistry
{
  return self->_notificationRegistry;
}

- (void)setNotificationRegistry:(id)a3
{
  objc_storeStrong((id *)&self->_notificationRegistry, a3);
}

- (void)setRemoteAccessIsEnabled:(BOOL)a3
{
  self->_remoteAccessIsEnabled = a3;
}

- (NSMutableSet)heartbeatPingMessagesQueuedWithServer
{
  return self->_heartbeatPingMessagesQueuedWithServer;
}

- (void)setHeartbeatPingMessagesQueuedWithServer:(id)a3
{
  objc_storeStrong((id *)&self->_heartbeatPingMessagesQueuedWithServer, a3);
}

- (NSMutableSet)pendingResponsesForRemoteAccessSetup
{
  return self->_pendingResponsesForRemoteAccessSetup;
}

- (void)setPendingResponsesForRemoteAccessSetup:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResponsesForRemoteAccessSetup, a3);
}

- (void)setAdminUser:(BOOL)a3
{
  self->_adminUser = a3;
}

- (void)setSharedAdmin:(BOOL)a3
{
  self->_sharedAdmin = a3;
}

- (BOOL)registeredNotificationWithRemoteGateway
{
  return self->_registeredNotificationWithRemoteGateway;
}

- (void)setRegisteredNotificationWithRemoteGateway:(BOOL)a3
{
  self->_registeredNotificationWithRemoteGateway = a3;
}

- (BOOL)allowsRemoteAccess
{
  return self->_allowsRemoteAccess;
}

- (void)setAllowsRemoteAccess:(BOOL)a3
{
  self->_allowsRemoteAccess = a3;
}

- (BOOL)isMigratingAfterResidentChange
{
  return self->_migratingAfterResidentChange;
}

- (void)setMigratingAfterResidentChange:(BOOL)a3
{
  self->_migratingAfterResidentChange = a3;
}

- (NSMutableArray)assistantOperations
{
  return self->_assistantOperations;
}

- (void)setAssistantOperations:(id)a3
{
  objc_storeStrong((id *)&self->_assistantOperations, a3);
}

- (NSHashTable)unpairedSecondaryHAPAccessories
{
  return self->_unpairedSecondaryHAPAccessories;
}

- (HMDSharedHomeUpdateHandler)sharedHomeUpdateHandler
{
  return self->_sharedHomeUpdateHandler;
}

- (void)setCurrentRemoteReachabilityRegistration:(BOOL)a3
{
  self->_currentRemoteReachabilityRegistration = a3;
}

- (BOOL)isUpdatedToHH2
{
  return self->_isUpdatedToHH2;
}

- (void)setIsUpdatedToHH2:(BOOL)a3
{
  self->_isUpdatedToHH2 = a3;
}

- (NSMutableArray)reachabilityRegisteredDevices
{
  return self->_reachabilityRegisteredDevices;
}

- (void)setReachabilityRegisteredDevices:(id)a3
{
  objc_storeStrong((id *)&self->_reachabilityRegisteredDevices, a3);
}

- (HMFTimer)reachabilityNotificationTimer
{
  return self->_reachabilityNotificationTimer;
}

- (void)setReachabilityNotificationTimer:(id)a3
{
  objc_storeStrong((id *)&self->_reachabilityNotificationTimer, a3);
}

- (NSMutableArray)remoteReachabilityNotificationPendingAccessories
{
  return self->_remoteReachabilityNotificationPendingAccessories;
}

- (void)setRemoteReachabilityNotificationPendingAccessories:(id)a3
{
  objc_storeStrong((id *)&self->_remoteReachabilityNotificationPendingAccessories, a3);
}

- (HMFTimer)disableNotificationTimer
{
  return self->_disableNotificationTimer;
}

- (void)setDisableNotificationTimer:(id)a3
{
  objc_storeStrong((id *)&self->_disableNotificationTimer, a3);
}

- (void)setPendingResponses:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResponses, a3);
}

- (HMFTimer)pendingResponsesTimer
{
  return self->_pendingResponsesTimer;
}

- (void)setPendingResponsesTimer:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResponsesTimer, a3);
}

- (NSMutableArray)ownedTriggers
{
  return self->_ownedTriggers;
}

- (void)setOwnedTriggers:(id)a3
{
  objc_storeStrong((id *)&self->_ownedTriggers, a3);
}

- (NSMapTable)uuidToHAPAccessoryConfigTable
{
  return self->_uuidToHAPAccessoryConfigTable;
}

- (void)setUuidToHAPAccessoryConfigTable:(id)a3
{
  objc_storeStrong((id *)&self->_uuidToHAPAccessoryConfigTable, a3);
}

- (HMDPredicateUtilities)predicateUtility
{
  return self->_predicateUtility;
}

- (HMDHomeKitVersion)sharedHomeSourceVersion
{
  return self->_sharedHomeSourceVersion;
}

- (void)setSharedHomeSourceVersion:(id)a3
{
  objc_storeStrong((id *)&self->_sharedHomeSourceVersion, a3);
}

- (HMDMediaActionRouter)mediaActionRouter
{
  return self->_mediaActionRouter;
}

- (void)setMediaActionRouter:(id)a3
{
  objc_storeStrong((id *)&self->_mediaActionRouter, a3);
}

- (NSUUID)personManagerZoneUUID
{
  return self->_personManagerZoneUUID;
}

- (void)setPersonManagerZoneUUID:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1408);
}

- (HMDResidentReachabilityNotificationManager)reachabilityNotificationManager
{
  return (HMDResidentReachabilityNotificationManager *)objc_getProperty(self, a2, 1416, 1);
}

- (HMDCOStateManager)coordinationStateManager
{
  return (HMDCOStateManager *)objc_getProperty(self, a2, 1424, 1);
}

- (void)setCoordinationStateManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1424);
}

- (HMDHomeRemoteEventAccessController)homeRemoteEventAccessController
{
  return (HMDHomeRemoteEventAccessController *)objc_getProperty(self, a2, 1432, 1);
}

- (unint64_t)nonIPadResidentDeviceCountForHH2Migration
{
  return self->_nonIPadResidentDeviceCountForHH2Migration;
}

- (HMDAppleAccountSettings)accountSettings
{
  return (HMDAppleAccountSettings *)objc_getProperty(self, a2, 1448, 1);
}

- (HMDCHIPHomeStorage)chipStorage
{
  return (HMDCHIPHomeStorage *)objc_getProperty(self, a2, 1456, 1);
}

- (void)setChipStorage:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 1456);
}

- (void)setFabric:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 1464);
}

- (NSData)threadOperationalDataset
{
  return self->_threadOperationalDataset;
}

- (void)setThreadOperationalDataset:(id)a3
{
  objc_storeStrong((id *)&self->_threadOperationalDataset, a3);
}

- (NSNumber)currentOperateCATID
{
  return self->_currentOperateCATID;
}

- (void)setCurrentOperateCATID:(id)a3
{
  objc_storeStrong((id *)&self->_currentOperateCATID, a3);
}

- (NSNumber)currentAdministerCATID
{
  return self->_currentAdministerCATID;
}

- (void)setCurrentAdministerCATID:(id)a3
{
  objc_storeStrong((id *)&self->_currentAdministerCATID, a3);
}

- (BOOL)currentMatterClientRegistration
{
  return self->_currentMatterClientRegistration;
}

- (void)setCurrentMatterClientRegistration:(BOOL)a3
{
  self->_currentMatterClientRegistration = a3;
}

- (NSMutableDictionary)chipLocalSubscribers
{
  return self->_chipLocalSubscribers;
}

- (void)setChipLocalSubscribers:(id)a3
{
  objc_storeStrong((id *)&self->_chipLocalSubscribers, a3);
}

- (BOOL)bulletinNotificationsSupported
{
  return self->_bulletinNotificationsSupported;
}

- (void)setBulletinNotificationsSupported:(BOOL)a3
{
  self->_bulletinNotificationsSupported = a3;
}

- (HMDMediaGroupsAggregateConsumer)mediaGroupsAggregateConsumer
{
  return (HMDMediaGroupsAggregateConsumer *)objc_getProperty(self, a2, 1504, 1);
}

- (HMDMediaGroupSetupMetricDispatcher)mediaSystemSetupMetricDispatcher
{
  return self->_mediaSystemSetupMetricDispatcher;
}

- (HMDMediaGroupSetupMetricDispatcher)homeTheaterSetupMetricDispatcher
{
  return self->_homeTheaterSetupMetricDispatcher;
}

- (BOOL)threadNetworkShouldRestartOnNetworkChange
{
  return self->_threadNetworkShouldRestartOnNetworkChange;
}

- (void)setThreadNetworkShouldRestartOnNetworkChange:(BOOL)a3
{
  self->_threadNetworkShouldRestartOnNetworkChange = a3;
}

- (HMDSiriSecureAccessoryAccessController)siriSecureAccessoryAccessController
{
  return (HMDSiriSecureAccessoryAccessController *)objc_getProperty(self, a2, 1528, 1);
}

- (HMDCarPlayDataSource)carPlayDataSource
{
  return (HMDCarPlayDataSource *)objc_getProperty(self, a2, 1536, 1);
}

- (HMDHomeAudioAnalysisStereoPairController)audioAnalysisStereoPairController
{
  return (HMDHomeAudioAnalysisStereoPairController *)objc_getProperty(self, a2, 1544, 1);
}

- (void)setAudioAnalysisStereoPairController:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1544);
}

- (void)setIsSmokeAlarmEnabled:(BOOL)a3
{
  self->_isSmokeAlarmEnabled = a3;
}

- (void)setIsSiriPhraseOptionsHeySiriEnabled:(BOOL)a3
{
  self->_isSiriPhraseOptionsHeySiriEnabled = a3;
}

- (void)setIsSiriPhraseOptionsJustSiriEnabled:(BOOL)a3
{
  self->_isSiriPhraseOptionsJustSiriEnabled = a3;
}

- (int64_t)threadNetworkConnectionState
{
  return self->_threadNetworkConnectionState;
}

- (void)setThreadNetworkConnectionState:(int64_t)a3
{
  self->_threadNetworkConnectionState = a3;
}

- (int64_t)threadNetworkNodeType
{
  return self->_threadNetworkNodeType;
}

- (void)setThreadNetworkNodeType:(int64_t)a3
{
  self->_threadNetworkNodeType = a3;
}

- (HMDFeaturesDataSource)featureDataSource
{
  return (HMDFeaturesDataSource *)objc_getProperty(self, a2, 1568, 1);
}

- (void)setFeatureDataSource:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1568);
}

- (NSMutableDictionary)notificationHandlerMap
{
  return self->_notificationHandlerMap;
}

- (void)setNotificationHandlerMap:(id)a3
{
  objc_storeStrong((id *)&self->_notificationHandlerMap, a3);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_notificationHandlerMap, 0);
  objc_storeStrong((id *)&self->_featureDataSource, 0);
  objc_storeStrong((id *)&self->_audioAnalysisStereoPairController, 0);
  objc_storeStrong((id *)&self->_carPlayDataSource, 0);
  objc_storeStrong((id *)&self->_siriSecureAccessoryAccessController, 0);
  objc_storeStrong((id *)&self->_homeTheaterSetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_mediaSystemSetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_mediaGroupsAggregateConsumer, 0);
  objc_storeStrong((id *)&self->_chipLocalSubscribers, 0);
  objc_storeStrong((id *)&self->_currentAdministerCATID, 0);
  objc_storeStrong((id *)&self->_currentOperateCATID, 0);
  objc_storeStrong((id *)&self->_threadOperationalDataset, 0);
  objc_storeStrong((id *)&self->_fabric, 0);
  objc_storeStrong((id *)&self->_chipStorage, 0);
  objc_storeStrong((id *)&self->_accountSettings, 0);
  objc_storeStrong((id *)&self->_homeRemoteEventAccessController, 0);
  objc_storeStrong((id *)&self->_coordinationStateManager, 0);
  objc_storeStrong((id *)&self->_reachabilityNotificationManager, 0);
  objc_storeStrong((id *)&self->_personManagerZoneUUID, 0);
  objc_storeStrong((id *)&self->_mediaActionRouter, 0);
  objc_storeStrong((id *)&self->_sharedHomeSourceVersion, 0);
  objc_storeStrong((id *)&self->_predicateUtility, 0);
  objc_storeStrong((id *)&self->_uuidToHAPAccessoryConfigTable, 0);
  objc_storeStrong((id *)&self->_ownedTriggers, 0);
  objc_storeStrong((id *)&self->_pendingResponsesTimer, 0);
  objc_storeStrong((id *)&self->_pendingResponses, 0);
  objc_storeStrong((id *)&self->_disableNotificationTimer, 0);
  objc_storeStrong((id *)&self->_remoteReachabilityNotificationPendingAccessories, 0);
  objc_storeStrong((id *)&self->_reachabilityNotificationTimer, 0);
  objc_storeStrong((id *)&self->_reachabilityRegisteredDevices, 0);
  objc_storeStrong((id *)&self->_stagedRemoteReachabilityRegistration, 0);
  objc_storeStrong((id *)&self->_sharedHomeUpdateHandler, 0);
  objc_storeStrong((id *)&self->_residentDeviceManager, 0);
  objc_storeStrong((id *)&self->_unpairedSecondaryHAPAccessories, 0);
  objc_storeStrong((id *)&self->_modifyNotificationsCoalesceTimer, 0);
  objc_storeStrong((id *)&self->_disableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_enableNotificationPayload, 0);
  objc_storeStrong((id *)&self->_assistantOperations, 0);
  objc_storeStrong((id *)&self->_pendingResponsesForRemoteAccessSetup, 0);
  objc_storeStrong((id *)&self->_heartbeatPingMessagesQueuedWithServer, 0);
  objc_storeStrong((id *)&self->_notificationRegistry, 0);
  objc_storeStrong((id *)&self->_firstHAPAccessoryAddedDate, 0);
  objc_storeStrong((id *)&self->_creationDate, 0);
  objc_storeStrong((id *)&self->_ownerName, 0);
  objc_storeStrong((id *)&self->_roomForEntireHome, 0);
  objc_storeStrong((id *)&self->_unconfiguredResidentDevices, 0);
  objc_storeStrong((id *)&self->_removedUsers, 0);
  objc_storeStrong((id *)&self->_usersPendingUserManagementOperations, 0);
  objc_storeStrong((id *)&self->_retrievalAccessoryCompletionTuples, 0);
  objc_storeStrong((id *)&self->_triggerOwnedActionSets, 0);
  objc_storeStrong((id *)&self->_actionSets, 0);
  objc_storeStrong((id *)&self->_serviceGroups, 0);
  objc_storeStrong((id *)&self->_services, 0);
  objc_storeStrong((id *)&self->_discoveredAccessories, 0);
  objc_storeStrong((id *)&self->_zones, 0);
  objc_storeStrong((id *)&self->_rooms, 0);
  objc_storeStrong((id *)&self->_accessoryMessageRouterViaPrimary, 0);
  objc_storeStrong((id *)&self->_notificationCenter, 0);
  objc_storeStrong((id *)&self->_appleDeviceRouter, 0);
  objc_storeStrong((id *)&self->_primaryResidentMessageRouter, 0);
  objc_storeStrong((id *)&self->_accessoryBrowser, 0);
  objc_storeStrong((id *)&self->_msgDispatcher, 0);
  objc_storeStrong((id *)&self->_workQueue, 0);
  objc_storeStrong((id *)&self->_homeObjectChangeHandler, 0);
  objc_storeStrong((id *)&self->_accessorySettingsMessenger, 0);
  objc_storeStrong((id *)&self->_appleMediaAccessoriesStateManager, 0);
  objc_storeStrong((id *)&self->_multiuserSettingsMessenger, 0);
  objc_storeStrong((id *)&self->_siriEndpointProfilesMessenger, 0);
  objc_storeStrong((id *)&self->_unifiedLanguageValueListSettingDataProvider, 0);
  objc_storeStrong((id *)&self->_appData, 0);
  objc_storeStrong(&self->_wifiManagerFactory, 0);
  objc_storeStrong(&self->_netManagerFactory, 0);
  objc_storeStrong((id *)&self->_matterFabricEnabledClients, 0);
  objc_storeStrong((id *)&self->_accessoryRemoteReachabilityEnabledClients, 0);
  objc_storeStrong((id *)&self->_remoteEventRouterClientController, 0);
  objc_storeStrong((id *)&self->_currentHomeKitVersion, 0);
  objc_storeStrong((id *)&self->_reportingSessionManager, 0);
  objc_storeStrong((id *)&self->_keychainStore, 0);
  objc_storeStrong((id *)&self->_capabilitiesAggregator, 0);
  objc_storeStrong((id *)&self->_serverDelegatingEventRouter, 0);
  objc_storeStrong((id *)&self->_accessoryInfoFetchController, 0);
  objc_storeStrong((id *)&self->_mediaStateManager, 0);
  objc_storeStrong((id *)&self->_deviceLockStateDataSource, 0);
  objc_storeStrong((id *)&self->_hapMetadata, 0);
  objc_storeStrong((id *)&self->_metricsDispatcher, 0);
  objc_storeStrong((id *)&self->_accessoryReaderWriter, 0);
  objc_storeStrong((id *)&self->_accessoryConnectionCoordinator, 0);
  objc_storeStrong((id *)&self->_naturalLightingContextUpdater, 0);
  objc_storeStrong((id *)&self->_personDataManager, 0);
  objc_storeStrong((id *)&self->_remoteEventRouterServer, 0);
  objc_storeStrong((id *)&self->_connectionsDiscoveringSymptomsForNearbyDevices, 0);
  objc_storeStrong((id *)&self->_homeReprovisionHandler, 0);
  objc_storeStrong((id *)&self->_addPendingAccessories, 0);
  objc_storeStrong((id *)&self->_addPendingAccessoryOnboardingSetupPayloadStrings, 0);
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodes, 0);
  objc_storeStrong((id *)&self->_addPendingAccessorySetupCodeHandlers, 0);
  objc_storeStrong((id *)&self->_WiFiAssertion, 0);
  objc_storeStrong((id *)&self->_localCapabilitiesDataSource, 0);
  objc_storeStrong((id *)&self->_removeAccessoryInProgressForHMDAccessories, 0);
  objc_storeStrong((id *)&self->_xpcMessageTransportFactory, 0);
  objc_storeStrong(&self->_currentUserFactory, 0);
  objc_storeStrong((id *)&self->_autoSelectedPreferredResidents, 0);
  objc_storeStrong((id *)&self->_userSelectedPreferredResident, 0);
  objc_storeStrong((id *)&self->_dailyScheduler, 0);
  objc_storeStrong((id *)&self->_logEventSubmitter, 0);
  objc_storeStrong((id *)&self->_reachabilityChangedLogEventManager, 0);
  objc_storeStrong((id *)&self->_lockNotificationManager, 0);
  objc_storeStrong((id *)&self->_removedUserInfoByAccessCode, 0);
  objc_storeStrong((id *)&self->_labelsByAccessCode, 0);
  objc_storeStrong((id *)&self->_accessCodeManager, 0);
  objc_storeStrong((id *)&self->_nfcReaderKeyManager, 0);
  objc_storeStrong((id *)&self->_walletKeyManager, 0);
  objc_storeStrong((id *)&self->_naturalLightingCurveWriter, 0);
  objc_storeStrong((id *)&self->_userActionPredictionManager, 0);
  objc_storeStrong((id *)&self->_analysisStatePublisher, 0);
  objc_storeStrong((id *)&self->_primaryResidentChangeMonitor, 0);
  objc_storeStrong((id *)&self->_periodicReader, 0);
  objc_storeStrong((id *)&self->_mediaSystemController, 0);
  objc_storeStrong((id *)&self->_presenceFeeder, 0);
  objc_storeStrong((id *)&self->_presenceMonitor, 0);
  objc_storeStrong((id *)&self->_notificationsUpdatedTime, 0);
  objc_storeStrong((id *)&self->_mediaGroupsUnconfiguredParticipantOnboardingManager, 0);
  objc_storeStrong((id *)&self->_mediaGroupsAggregator, 0);
  objc_storeStrong((id *)&self->_administratorHandler, 0);
  objc_storeStrong((id *)&self->_presenceComputeStatus, 0);
  objc_storeStrong((id *)&self->_presenceAuthStatus, 0);
  objc_storeStrong((id *)&self->_homeLocationHandler, 0);
  objc_storeStrong((id *)&self->_zoneID, 0);
  objc_storeStrong((id *)&self->_spiClientIdentifier, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_destroyWeak((id *)&self->_homeManager);
  objc_storeStrong((id *)&self->_lookup, 0);
  objc_storeStrong((id *)&self->_naturalLightingContext, 0);
  objc_storeStrong((id *)&self->_personManagerSettings, 0);
  objc_storeStrong((id *)&self->_availableBSPsCount, 0);
  objc_storeStrong((id *)&self->_availableBorderRouters, 0);
  objc_storeStrong((id *)&self->_overriddenHomeAccessControl, 0);
  objc_storeStrong((id *)&self->_nfcReaderKey, 0);
  objc_storeStrong((id *)&self->_threadNetworkPeriodicStatusReporter, 0);
  objc_storeStrong((id *)&self->_unfilteredThreadNetworkID, 0);
  objc_storeStrong((id *)&self->_outgoingInvitations, 0);
  objc_storeStrong((id *)&self->_currentTriggers, 0);
  objc_storeStrong((id *)&self->_name, 0);
  objc_storeStrong((id *)&self->_minHomeKitVersionForAccessoryNetworkProtectionChange, 0);
  objc_storeStrong((id *)&self->_minimumNetworkRouterSupportHomeKitVersion, 0);
  objc_storeStrong((id *)&self->_backingStore, 0);
  objc_storeStrong((id *)&self->_primaryNetworkRouterManagingDeviceUUID, 0);
  objc_storeStrong((id *)&self->_newlyConfiguredAccessories, 0);
  objc_storeStrong((id *)&self->_activeNetworkRouterUUID, 0);
  objc_storeStrong((id *)&self->_networkProtectionGroupRegistry, 0);
  objc_storeStrong((id *)&self->_routerClientManager, 0);
  objc_storeStrong((id *)&self->_notificationDeregistrations, 0);
  objc_storeStrong((id *)&self->_notificationRegistrationsForAppleMediaAccessories, 0);
  objc_storeStrong((id *)&self->_notificationRegistrations, 0);
  objc_storeStrong((id *)&self->_logger, 0);
  objc_storeStrong((id *)&self->_reachabilityUpdatedAccessories, 0);
  objc_storeStrong((id *)&self->_accessoryReachabilityUpdatesTimer, 0);
  objc_storeStrong((id *)&self->_homeLocationTimer, 0);
  objc_storeStrong((id *)&self->_mediaPassword, 0);
  objc_storeStrong((id *)&self->_currentUser, 0);
  objc_storeStrong((id *)&self->_owner, 0);
  objc_storeStrong((id *)&self->_users, 0);
  objc_storeStrong((id *)&self->_mediaSessionStates, 0);
  objc_storeStrong((id *)&self->_mediaSessions, 0);
  objc_storeStrong((id *)&self->_accessories, 0);
}

uint64_t __42__HMDHome__handleFetchTriggerNameRequest___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "spiClientIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = HMFEqualObjects();

  return v3;
}

uint64_t __25__HMDHome_isMediaSystem___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __44__HMDHome_messageTargetForDeviceIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __62__HMDHome_routerServerUserAccessControlProviderForIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void __49__HMDHome__handleFetchLastModifiedServiceOfType___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  BOOL v46;
  id v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *context;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[2];
  _QWORD v64[2];
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  void *v70;
  _BYTE v71[128];
  _QWORD v72[3];

  v72[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(v3, "hmf_UUIDForKey:", CFSTR("HMDAccessorySPIClientIdentifierKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "hmf_UUIDForKey:", CFSTR("HMDServiceSPIClientIdentifierKey"));
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    if (v5 && v6)
    {
      objc_msgSend(WeakRetained, "accessoryWithSPIClientIdentifier:", v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v9 = v8;
      else
        v9 = 0;
      v10 = v9;

      if (v10)
      {
        objc_msgSend(v10, "identifiersForBridgedAccessories");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "count");

        v55 = a1;
        v56 = WeakRetained;
        v57 = v10;
        v58 = v5;
        if (v12)
        {
          objc_msgSend(v10, "identifiersForBridgedAccessories");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "allObjects");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(WeakRetained, "accessoriesWithUUIDs:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v72[0] = v10;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v72, 1);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
        }
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v28 = v15;
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
        if (v29)
        {
          v30 = v29;
          v31 = *(_QWORD *)v60;
          while (2)
          {
            for (i = 0; i != v30; ++i)
            {
              if (*(_QWORD *)v60 != v31)
                objc_enumerationMutation(v28);
              v33 = *(id *)(*((_QWORD *)&v59 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v34 = v33;
              else
                v34 = 0;
              v35 = v34;

              if (v35)
              {
                objc_msgSend(v35, "serviceWithSPIClientIdentifier:", v7);
                v36 = objc_claimAutoreleasedReturnValue();
                if (v36)
                {
                  v42 = (void *)v36;

                  objc_msgSend(v42, "instanceID");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v33, "uuid");
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v44, "UUIDString");
                  v45 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v43)
                    v46 = v45 == 0;
                  else
                    v46 = 1;
                  if (v46)
                  {
                    context = (void *)MEMORY[0x1D17BA0A0]();
                    WeakRetained = v56;
                    v47 = v56;
                    HMFGetOSLogHandle();
                    v48 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    {
                      HMFGetLogIdentifier();
                      v53 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v66 = v53;
                      v67 = 2112;
                      v68 = v43;
                      v69 = 2112;
                      v70 = v45;
                      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_ERROR, "%{public}@Either service instanceID (%@) is nil or accessory UUID (%@) is nil", buf, 0x20u);

                    }
                    objc_autoreleasePoolPop(context);
                    v49 = v43;
                    v50 = *(void **)(v55 + 32);
                    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    v51 = v50;
                    v43 = v49;
                    objc_msgSend(v51, "respondWithError:", v52);
                  }
                  else
                  {
                    v63[0] = CFSTR("kServiceInstanceID");
                    v63[1] = CFSTR("kAccessoryUUID");
                    v64[0] = v43;
                    v64[1] = v45;
                    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v64, v63, 2);
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(*(id *)(v55 + 32), "respondWithPayload:", v52);
                    WeakRetained = v56;
                  }

                  goto LABEL_43;
                }

              }
            }
            v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
            if (v30)
              continue;
            break;
          }
        }

        v37 = (void *)MEMORY[0x1D17BA0A0]();
        WeakRetained = v56;
        v38 = v56;
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v66 = v40;
          v67 = 2112;
          v68 = v7;
          _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_ERROR, "%{public}@Unable to find service with serviceSPIClientIdentifier %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v37);
        v41 = *(void **)(v55 + 32);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
        v33 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "respondWithError:", v33);
LABEL_43:

        v10 = v57;
        v5 = v58;
      }
      else
      {
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = WeakRetained;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v66 = v26;
          v67 = 2112;
          v68 = v5;
          _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Unable to find accessory with accessorySPIClientIdentifier %@", buf, 0x16u);

          v10 = 0;
        }

        objc_autoreleasePoolPop(v23);
        v27 = *(void **)(a1 + 32);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "respondWithError:", v28);
      }

    }
    else
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = WeakRetained;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        v66 = v21;
        v67 = 2112;
        v68 = v22;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Found no query results for last modified service of type: %@ ", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", MEMORY[0x1E0C9AA70]);
    }

  }
  else
  {
    v16 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "respondWithError:", v17);

  }
}

void __42__HMDHome_handleXPCConnectionInvalidated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "_removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:", v4);
  }
  else
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v9;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Received connection invalidated notification, but no connection object was found: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __59__HMDHome_userAssistantAccessControlDidUpdate_accessories___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "mediaSystemController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_userAssistantAccessControlDidUpdate:accessories:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

id __28__HMDHome_cameraAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v4, "cameraProfiles");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
    v7 = v4;
  else
    v7 = 0;

  return v7;
}

uint64_t __50__HMDHome_hapAccessoriesForLegacyDataBlobEncoding__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  char v3;

  v2 = a2;
  objc_opt_class();
  v3 = (v2 == 0) | ~objc_opt_isKindOfClass();

  return v3 & 1;
}

uint64_t __28__HMDHome_matterAccessories__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsCHIP");
}

void __39__HMDHome__handleMediaPropertiesWrite___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Responding to media write with %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, id))v9)[2](v9, 0, v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, v10, 0);

  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_2;
    block[3] = &unk_1E89C20C8;
    v8 = a1[4];
    v9 = v3;
    v10 = a1[5];
    dispatch_async(v6, block);

  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_msgSend(*(id *)(a1 + 32), "copy");
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void __79__HMDHome__handleWriteMediaProperties_source_requestMessage_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __61__HMDHome_redispatchMediaWriteRequests_viaDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      if (v8)
      {
        +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", *(_QWORD *)(a1 + 32), v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = *(_QWORD *)(a1 + 40);
        v12[0] = v9;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

LABEL_7:
      }
    }
    else if (v8)
    {
      +[HMDMediaPropertyResponse responsesFromSerializedResponse:requests:home:](HMDMediaPropertyResponse, "responsesFromSerializedResponse:requests:home:", v6, *(_QWORD *)(a1 + 32), WeakRetained);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }

}

void __38__HMDHome__handleMediaPropertiesRead___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Responding to media read with %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v3);
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_1550(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2;
    block[3] = &unk_1E89C20C8;
    v8 = a1[5];
    v9 = v3;
    v10 = a1[4];
    dispatch_async(v6, block);

  }
  else
  {
    dispatch_group_leave((dispatch_group_t)a1[4]);
  }

}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_msgSend(*(id *)(a1 + 32), "copy");
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void __71__HMDHome__handleReadMediaProperties_source_message_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  +[HMDMediaPropertyResponse serializeResponses:](HMDMediaPropertyResponse, "serializeResponses:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __60__HMDHome_redispatchMediaReadRequests_viaDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      if (v8)
      {
        +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:](HMDMediaPropertyResponse, "propertyResponsesFromRequests:error:", *(_QWORD *)(a1 + 32), v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = *(_QWORD *)(a1 + 40);
        v12[0] = v9;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v11);

LABEL_7:
      }
    }
    else if (v8)
    {
      +[HMDMediaPropertyResponse responsesFromSerializedResponse:requests:home:](HMDMediaPropertyResponse, "responsesFromSerializedResponse:requests:home:", v6, *(_QWORD *)(a1 + 32), WeakRetained);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }

}

uint64_t __43__HMDHome_mediaSessionStateWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  objc_msgSend(v3, "sessionIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isEqualToString:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    objc_msgSend(v3, "sessionIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 40));

  }
  return v5;
}

_DWORD *__32__HMDHome__registerStateHandler__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _DWORD *StateData;

  if (*(_DWORD *)(a2 + 16) != 3)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("os-state-home"));
    objc_msgSend(WeakRetained, "dumpState");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(WeakRetained, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("HomeKit Home State %@"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    StateData = createStateData(v8, (uint64_t)v4);
  }
  else
  {
    StateData = 0;
  }

  return StateData;
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id *v2;
  id WeakRetained;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id *v36;
  id *from;
  void *v38;
  uint64_t v39;
  id v40;
  id obj;
  id obja;
  id v43;
  id v44;
  void *v45;
  _QWORD v46[4];
  id v47;
  _QWORD v48[4];
  id v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t v59[128];
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  uint64_t v65;
  _BYTE v66[128];
  uint64_t v67;

  v1 = a1;
  v67 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    from = v2;
    v38 = WeakRetained;
    v39 = v1;
    if (objc_msgSend(*(id *)(v1 + 32), "count"))
    {
      v4 = (void *)MEMORY[0x1D17BA0A0]();
      v43 = WeakRetained;
      HMFGetOSLogHandle();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v61 = v6;
        _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@General Merge Migrating (Save Transactions)", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v4);
      objc_msgSend(v43, "backingStore");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "transaction:options:", CFSTR("generalMergeHomeSaveMigration"), v8);
      v45 = (void *)objc_claimAutoreleasedReturnValue();

      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      obj = *(id *)(v39 + 32);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v66, 16);
      if (v9)
      {
        v10 = *(_QWORD *)v56;
        do
        {
          for (i = 0; i != v9; ++i)
          {
            if (*(_QWORD *)v56 != v10)
              objc_enumerationMutation(obj);
            v12 = *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * i);
            v13 = (void *)MEMORY[0x1D17BA0A0]();
            v14 = v43;
            HMFGetOSLogHandle();
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "uuid");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "UUIDString");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v61 = v16;
              v62 = 2112;
              v63 = v18;
              v64 = 2112;
              v65 = v12;
              _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEBUG, "%{public}@[General Merge Home Migration %@] Object Change: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v13);
            objc_msgSend(v45, "add:withMessage:", v12, 0);
          }
          v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v66, 16);
        }
        while (v9);
      }

      objc_msgSend(v43, "metricsDispatcher");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "submitMigrationEventMetricsForModels:reason:", *(_QWORD *)(v39 + 32), CFSTR("generalMergeHomeSaveMigration"));

      v1 = v39;
    }
    else
    {
      v45 = 0;
    }
    if (objc_msgSend(*(id *)(v1 + 40), "count"))
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      obja = v38;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v61 = v22;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@General Merge New Object Migrating (Run Transactions)", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(obja, "backingStore");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "transaction:options:", CFSTR("generalMergeHomeRunNewObjectMigration"), v24);
      v44 = (id)objc_claimAutoreleasedReturnValue();

      v54 = 0u;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      v40 = *(id *)(v39 + 40);
      v25 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
      if (v25)
      {
        v26 = *(_QWORD *)v52;
        do
        {
          for (j = 0; j != v25; ++j)
          {
            if (*(_QWORD *)v52 != v26)
              objc_enumerationMutation(v40);
            v28 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * j);
            v29 = (void *)MEMORY[0x1D17BA0A0]();
            v30 = obja;
            HMFGetOSLogHandle();
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v30, "uuid");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "UUIDString");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v61 = v32;
              v62 = 2112;
              v63 = v34;
              v64 = 2112;
              v65 = v28;
              _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEBUG, "%{public}@[General Merge Home New Migration %@] Object Change: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v29);
            objc_msgSend(v44, "add:withMessage:", v28, 0);
          }
          v25 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
        }
        while (v25);
      }

      objc_msgSend(obja, "metricsDispatcher");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "submitMigrationEventMetricsForModels:reason:", *(_QWORD *)(v39 + 40), CFSTR("generalMergeHomeRunNewObjectMigration"));

      if (!v45)
      {
        if (v44)
        {
          v46[0] = MEMORY[0x1E0C809B0];
          v46[1] = 3221225472;
          v46[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_3;
          v46[3] = &unk_1E89C0678;
          v36 = &v47;
          objc_copyWeak(&v47, from);
          objc_msgSend(v44, "run:", v46);
LABEL_34:
          objc_destroyWeak(v36);

        }
LABEL_35:

        WeakRetained = v38;
        goto LABEL_36;
      }
    }
    else
    {
      if (!v45)
        goto LABEL_35;
      v44 = 0;
    }
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_1536;
    v48[3] = &unk_1E89BF250;
    v36 = &v50;
    objc_copyWeak(&v50, from);
    v44 = v44;
    v49 = v44;
    objc_msgSend(v45, "save:", v48);

    goto LABEL_34;
  }
LABEL_36:

}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_5(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_6(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_1536(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  v4 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __34__HMDHome_migrateAfterCloudMerge___block_invoke_2;
    v10[3] = &unk_1E89C0678;
    objc_copyWeak(&v11, v4);
    objc_msgSend(v7, "run:", v10);
    objc_destroyWeak(&v11);
  }
  else
  {
    objc_msgSend(WeakRetained, "homeManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "zoneID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uploadHomeToCloudZone:withDelay:", v9, 0.0);

  }
}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_3(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "homeManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "zoneID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "uploadHomeToCloudZone:withDelay:", v2, 0.0);

}

void __34__HMDHome_migrateAfterCloudMerge___block_invoke_2(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "homeManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "zoneID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "uploadHomeToCloudZone:withDelay:", v2, 0.0);

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke(id *a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(id, _QWORD);
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void (**v36)(id, _QWORD);
  id *from;
  void *v38;
  id *v39;
  id v40;
  id obj;
  id obja;
  id v43;
  id v44;
  void *v45;
  _QWORD v46[4];
  id v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t v60[128];
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  uint64_t v66;
  _BYTE v67[128];
  uint64_t v68;

  v1 = a1;
  v68 = *MEMORY[0x1E0C80C00];
  from = a1 + 7;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    v38 = WeakRetained;
    v39 = v1;
    if (objc_msgSend(v1[4], "count"))
    {
      v3 = (void *)MEMORY[0x1D17BA0A0]();
      v43 = WeakRetained;
      HMFGetOSLogHandle();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v62 = v5;
        _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@General Migrating (Save Transactions)", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v3);
      objc_msgSend(v43, "backingStore");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "transaction:options:", CFSTR("generalHomeSaveMigration"), v7);
      v45 = (void *)objc_claimAutoreleasedReturnValue();

      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      obj = v39[4];
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v67, 16);
      if (v8)
      {
        v9 = *(_QWORD *)v57;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v57 != v9)
              objc_enumerationMutation(obj);
            v11 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i);
            v12 = (void *)MEMORY[0x1D17BA0A0]();
            v13 = v43;
            HMFGetOSLogHandle();
            v14 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "uuid");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "UUIDString");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v62 = v15;
              v63 = 2112;
              v64 = v17;
              v65 = 2112;
              v66 = v11;
              _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEBUG, "%{public}@[General Home Migration %@] Object Change: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v12);
            objc_msgSend(v45, "add:withMessage:", v11, 0);
          }
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v67, 16);
        }
        while (v8);
      }

      objc_msgSend(v43, "metricsDispatcher");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "submitMigrationEventMetricsForModels:reason:", v39[4], CFSTR("generalHomeSaveMigration"));

      v1 = v39;
    }
    else
    {
      v45 = 0;
    }
    if (objc_msgSend(v1[5], "count"))
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      obja = v38;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v62 = v22;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@General New Object Migrating (Run Transactions)", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(obja, "backingStore");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "transaction:options:", CFSTR("generalHomeRunNewObjectMigration"), v24);
      v44 = (id)objc_claimAutoreleasedReturnValue();

      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v40 = v39[5];
      v25 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
      if (v25)
      {
        v26 = *(_QWORD *)v53;
        do
        {
          for (j = 0; j != v25; ++j)
          {
            if (*(_QWORD *)v53 != v26)
              objc_enumerationMutation(v40);
            v28 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * j);
            v29 = (void *)MEMORY[0x1D17BA0A0]();
            v30 = obja;
            HMFGetOSLogHandle();
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v30, "uuid");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "UUIDString");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v62 = v32;
              v63 = 2112;
              v64 = v34;
              v65 = 2112;
              v66 = v28;
              _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEBUG, "%{public}@[General Home New Migration %@] Object Change: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v29);
            objc_msgSend(v44, "add:withMessage:", v28, 0);
          }
          v25 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
        }
        while (v25);
      }

      objc_msgSend(obja, "metricsDispatcher");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "submitMigrationEventMetricsForModels:reason:", v39[5], CFSTR("generalHomeRunNewObjectMigration"));

      if (!v45)
      {
        if (v44)
        {
          v46[0] = MEMORY[0x1E0C809B0];
          v46[1] = 3221225472;
          v46[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_3;
          v46[3] = &unk_1E89C0678;
          objc_copyWeak(&v47, from);
          objc_msgSend(v44, "run:", v46);
          objc_destroyWeak(&v47);
        }
        else
        {
          v44 = 0;
        }
LABEL_36:
        v36 = (void (**)(id, _QWORD))v39[6];
        if (v36)
          v36[2](v36, 0);
        goto LABEL_38;
      }
    }
    else
    {
      v44 = 0;
      if (!v45)
        goto LABEL_36;
    }
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_1523;
    v48[3] = &unk_1E89C0650;
    objc_copyWeak(&v51, from);
    v44 = v44;
    v49 = v44;
    v50 = v39[6];
    objc_msgSend(v45, "save:", v48);

    objc_destroyWeak(&v51);
LABEL_38:

    WeakRetained = v38;
    goto LABEL_39;
  }
  v19 = (void (**)(id, _QWORD))v1[6];
  if (v19)
    v19[2](v19, 0);
LABEL_39:

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id *v38;
  uint64_t v39;
  void *v40;
  id v41;
  id *from;
  id *v43;
  void *v44;
  id obj;
  void *v46;
  id v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  id v52;
  _QWORD v53[4];
  id v54;
  id v55;
  id v56;
  id v57;
  _QWORD v58[4];
  id v59;
  id v60;
  id v61;
  id v62;
  _QWORD v63[4];
  id v64;
  id v65;
  id v66;
  id v67;
  _QWORD v68[4];
  id v69;
  id v70;
  id v71;
  id v72;
  _QWORD v73[4];
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint8_t buf[4];
  void *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  uint64_t v91;
  _BYTE v92[128];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v41 = a2;
  v5 = a3;
  from = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  v7 = WeakRetained;
  v40 = v5;
  if (WeakRetained)
  {
    v43 = (id *)a1;
    v44 = WeakRetained;
    if (v5)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = v44;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v87 = v11;
        v88 = 2112;
        v89 = v40;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to fetch migration changes in this house because of error (%@).", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
    }
    if (!objc_msgSend(v41, "count"))
      goto LABEL_20;
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = v44;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v87 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@General Object Migrating (Run Transactions)", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v47, "backingStore");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "transaction:options:", CFSTR("generalHomeRunObjectMigration"), v16);
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    obj = v41;
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, v92, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v83;
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v83 != v18)
            objc_enumerationMutation(obj);
          v20 = *(_QWORD *)(*((_QWORD *)&v82 + 1) + 8 * i);
          v21 = (void *)MEMORY[0x1D17BA0A0]();
          v22 = v47;
          HMFGetOSLogHandle();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "uuid");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "UUIDString");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v87 = v24;
            v88 = 2112;
            v89 = v26;
            v90 = 2112;
            v91 = v20;
            _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEBUG, "%{public}@[General Home Migration %@] Object Change: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v21);
          objc_msgSend(v46, "add:withMessage:", v20, 0);
        }
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v82, v92, 16);
      }
      while (v17);
    }

    if (v46)
    {
      v73[0] = MEMORY[0x1E0C809B0];
      v73[1] = 3221225472;
      v73[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_1526;
      v73[3] = &unk_1E89A5440;
      objc_copyWeak(&v81, from);
      v79 = v43[9];
      v74 = v43[4];
      v75 = v43[5];
      v76 = v43[6];
      v77 = v43[7];
      v78 = v43[8];
      v80 = v43[10];
      objc_msgSend(v46, "run:", v73);

      objc_destroyWeak(&v81);
    }
    else
    {
LABEL_20:
      dispatch_group_enter((dispatch_group_t)v43[5]);
      v27 = v43[4];
      v28 = v43[6];
      v29 = MEMORY[0x1E0C809B0];
      v68[0] = MEMORY[0x1E0C809B0];
      v68[1] = 3221225472;
      v68[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_7;
      v68[3] = &unk_1E89B1050;
      objc_copyWeak(&v72, from);
      v69 = v43[7];
      v70 = v43[8];
      v71 = v43[5];
      objc_msgSend(v44, "_migrateResidentDevicesCloudZone:migrationQueue:completion:", v27, v28, v68);
      dispatch_group_enter((dispatch_group_t)v43[5]);
      v30 = v43[4];
      v31 = v43[6];
      v63[0] = v29;
      v63[1] = 3221225472;
      v63[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_8;
      v63[3] = &unk_1E89B1050;
      objc_copyWeak(&v67, from);
      v64 = v43[7];
      v65 = v43[8];
      v66 = v43[5];
      objc_msgSend(v44, "_migrateHomeSettingsCloudZone:migrationQueue:completion:", v30, v31, v63);
      dispatch_group_enter((dispatch_group_t)v43[5]);
      v32 = v43[4];
      v33 = v43[6];
      v58[0] = v29;
      v58[1] = 3221225472;
      v58[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_9;
      v58[3] = &unk_1E89B1050;
      objc_copyWeak(&v62, from);
      v59 = v43[7];
      v60 = v43[8];
      v61 = v43[5];
      objc_msgSend(v44, "_migrateHomeMediaSettingsCloudZone:migrationQueue:completion:", v32, v33, v58);
      dispatch_group_enter((dispatch_group_t)v43[5]);
      v34 = v43[4];
      v35 = v43[6];
      v53[0] = v29;
      v53[1] = 3221225472;
      v53[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_10;
      v53[3] = &unk_1E89B1050;
      objc_copyWeak(&v57, from);
      v54 = v43[7];
      v55 = v43[8];
      v56 = v43[5];
      objc_msgSend(v44, "_migrateHomeUsersCloudZone:migrationQueue:completion:", v34, v35, v53);
      dispatch_group_enter((dispatch_group_t)v43[5]);
      v36 = v43[4];
      v37 = v43[6];
      v48[0] = v29;
      v48[1] = 3221225472;
      v48[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_11;
      v48[3] = &unk_1E89B1050;
      objc_copyWeak(&v52, from);
      v38 = v43;
      v49 = v43[7];
      v50 = v43[8];
      v51 = v43[5];
      objc_msgSend(v44, "_migrateAppleMediaAccessoriesWithCloudZone:migrationQueue:completion:", v36, v37, v48);
      objc_msgSend(v44, "_migrateHomeAllObjectsCloudZone:migrationGroup:migrationQueue:saveModels:runModels:", v38[4], v38[5], v38[6], v38[7], v38[8]);
      dispatch_group_notify((dispatch_group_t)v38[5], (dispatch_queue_t)v38[6], v38[10]);

      objc_destroyWeak(&v52);
      objc_destroyWeak(&v57);

      objc_destroyWeak(&v62);
      objc_destroyWeak(&v67);

      objc_destroyWeak(&v72);
    }
    v7 = v44;
  }
  else
  {
    v39 = *(_QWORD *)(a1 + 72);
    if (v39)
      (*(void (**)(uint64_t, _QWORD))(v39 + 16))(v39, 0);
  }

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_1526(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  id v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42;
  id v43[2];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "markMigratedObjectsAsMigrated");
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = MEMORY[0x1E0C809B0];
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_2_1527;
    v39[3] = &unk_1E89B1050;
    objc_copyWeak(v43, (id *)(a1 + 88));
    v40 = *(id *)(a1 + 56);
    v41 = *(id *)(a1 + 64);
    v42 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "_migrateResidentDevicesCloudZone:migrationQueue:completion:", v5, v6, v39);
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 48);
    v34[0] = v7;
    v34[1] = 3221225472;
    v34[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_3_1528;
    v34[3] = &unk_1E89B1050;
    objc_copyWeak(&v38, (id *)(a1 + 88));
    v35 = *(id *)(a1 + 56);
    v36 = *(id *)(a1 + 64);
    v37 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "_migrateHomeSettingsCloudZone:migrationQueue:completion:", v8, v9, v34);
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 48);
    v12 = v7;
    v29[0] = v7;
    v29[1] = 3221225472;
    v29[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_4_1529;
    v29[3] = &unk_1E89B1050;
    objc_copyWeak(&v33, (id *)(a1 + 88));
    v30 = *(id *)(a1 + 56);
    v31 = *(id *)(a1 + 64);
    v32 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "_migrateHomeMediaSettingsCloudZone:migrationQueue:completion:", v10, v11, v29);
    v13 = v3;
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 48);
    v24[0] = v12;
    v24[1] = 3221225472;
    v24[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_5;
    v24[3] = &unk_1E89B1050;
    objc_copyWeak(&v28, (id *)(a1 + 88));
    v25 = *(id *)(a1 + 56);
    v26 = *(id *)(a1 + 64);
    v27 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "_migrateHomeUsersCloudZone:migrationQueue:completion:", v14, v15, v24);
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v16 = *(_QWORD *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 48);
    v19[0] = v12;
    v19[1] = 3221225472;
    v19[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_6;
    v19[3] = &unk_1E89B1050;
    objc_copyWeak(&v23, (id *)(a1 + 88));
    v20 = *(id *)(a1 + 56);
    v21 = *(id *)(a1 + 64);
    v22 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "_migrateAppleMediaAccessoriesWithCloudZone:migrationQueue:completion:", v16, v17, v19);
    objc_msgSend(WeakRetained, "_migrateHomeAllObjectsCloudZone:migrationGroup:migrationQueue:saveModels:runModels:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    v3 = v13;
    dispatch_group_notify(*(dispatch_group_t *)(a1 + 40), *(dispatch_queue_t *)(a1 + 48), *(dispatch_block_t *)(a1 + 80));

    objc_destroyWeak(&v23);
    objc_destroyWeak(&v28);

    objc_destroyWeak(&v33);
    objc_destroyWeak(&v38);

    objc_destroyWeak(v43);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 72);
    if (v18)
      (*(void (**)(uint64_t, _QWORD))(v18 + 16))(v18, 0);
  }

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_7(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_9(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_10(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_11(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_2_1527(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_3_1528(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_4_1529(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_5(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_6(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_1523(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = WeakRetained;
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __39__HMDHome_migrateCloudZone_completion___block_invoke_2;
    v10[3] = &unk_1E89C0678;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    objc_msgSend(v6, "run:", v10);
    objc_destroyWeak(&v11);
  }
  else
  {
    objc_msgSend(WeakRetained, "homeManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "zoneID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "uploadHomeToCloudZone:withDelay:", v8, 0.0);

  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, _QWORD))(v9 + 16))(v9, 0);

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_3(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "homeManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "zoneID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "uploadHomeToCloudZone:withDelay:", v2, 0.0);

}

void __39__HMDHome_migrateCloudZone_completion___block_invoke_2(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "homeManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "zoneID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "uploadHomeToCloudZone:withDelay:", v2, 0.0);

}

void __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  id v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id obj;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t v49[128];
  uint8_t buf[4];
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  }
  else if (objc_msgSend(v5, "count"))
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v42 = v8;
    v10 = v8;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v51 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Found General Objects to Migrate", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = v5;
    obj = v5;
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v23; ++i)
        {
          if (*(_QWORD *)v46 != v24)
            objc_enumerationMutation(obj);
          v26 = *(id *)(*((_QWORD *)&v45 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v27 = v26;
          else
            v27 = 0;
          v28 = v27;

          if (v28)
          {
            objc_msgSend(v28, "uuid");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "accessoryWithUUID:", v29);
            v30 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v30)
            {
              v31 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
              objc_msgSend(v28, "uuid");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "addObject:", v32);

            }
          }
          v33 = v26;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v34 = v33;
          else
            v34 = 0;
          v35 = v34;

          if (v35)
          {
            objc_msgSend(v35, "uuid");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "accessoryWithUUID:", v36);
            v37 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v37)
            {
              v38 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
              objc_msgSend(v35, "uuid");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "addObject:", v39);

            }
          }
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v33, v42);
          v40 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
          objc_msgSend(v33, "uuid");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "addObject:", v41);

        }
        v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
      }
      while (v23);
    }

    v6 = 0;
    v5 = v43;
    v8 = v42;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke_1516(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count"))
  {
    v2 = *(void **)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke_2;
    v9[3] = &unk_1E89A53F0;
    objc_copyWeak(&v14, (id *)(a1 + 96));
    v6 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 88);
    v12 = v6;
    v7 = *(id *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 80);
    v10 = v7;
    v13 = v8;
    objc_msgSend(v2, "_migrateUnknownAccessoriesWithCloudZone:accessoryUUIDs:migrationQueue:completion:", v3, v4, v5, v9);

    objc_destroyWeak(&v14);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

void __58__HMDHome_fetchAllMigratedObjectsForCloudZone_completion___block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v7 = WeakRetained;
  if (!a3 && WeakRetained)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v8 = v5;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v19 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          objc_msgSend(v13, "uuid", (_QWORD)v18);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v14) = objc_msgSend(v14, "containsObject:", v15);

          if ((v14 & 1) == 0)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", v13);
            v16 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
            objc_msgSend(v13, "uuid");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "addObject:", v17);

          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v10);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!a3)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v21;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v21 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v11), "extractObjectChange");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = v12;
          if (v12)
          {
            objc_msgSend(v12, "setObjectChangeType:", 1);
            objc_msgSend(v6, "addObject:", v13);
          }

          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v9);
    }

  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke_2;
  block[3] = &unk_1E89C20C8;
  v14 = *(NSObject **)(a1 + 32);
  v17 = *(id *)(a1 + 40);
  v18 = v6;
  v19 = *(id *)(a1 + 48);
  v15 = v6;
  dispatch_async(v14, block);

}

uint64_t __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void __92__HMDHome__migrateUnknownAccessoriesWithCloudZone_accessoryUUIDs_migrationQueue_completion___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke_2;
  block[3] = &unk_1E89A5350;
  objc_copyWeak(&v21, (id *)(a1 + 64));
  v15 = v9;
  v16 = *(id *)(a1 + 40);
  v17 = v7;
  v18 = *(id *)(a1 + 48);
  v19 = v8;
  v20 = *(id *)(a1 + 56);
  v11 = v8;
  v12 = v7;
  v13 = v9;
  dispatch_async(v10, block);

  objc_destroyWeak(&v21);
}

void __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke_3(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;

  v3 = *(NSObject **)(a1 + 32);
  v4 = a2;
  dispatch_group_enter(v3);
  objc_msgSend(*(id *)(a1 + 40), "_migrateHomeObjectCloudZone:defaultModel:completion:", *(_QWORD *)(a1 + 48), v4, *(_QWORD *)(a1 + 56));

}

void __94__HMDHome__migrateHomeAllObjectsCloudZone_migrationGroup_migrationQueue_saveModels_runModels___block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained && !*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 56), "addObjectsFromArray:", *(_QWORD *)(a1 + 64));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

}

void __63__HMDHome__migrateHomeObjectCloudZone_defaultModel_completion___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  if (WeakRetained && !v5)
  {
    objc_msgSend(a1[6], "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __63__HMDHome__migrateHomeObjectCloudZone_defaultModel_completion___block_invoke_2;
    v9[3] = &unk_1E89BB418;
    objc_copyWeak(&v14, a1 + 8);
    v10 = a1[4];
    v11 = a1[6];
    v13 = a1[7];
    v12 = a1[5];
    objc_msgSend(WeakRetained, "cleanChangesIfNoAddChangeObjectID:completion:", v8, v9);

    objc_destroyWeak(&v14);
  }
  else
  {
    (*((void (**)(void))a1[7] + 2))();
  }

}

void __63__HMDHome__migrateHomeObjectCloudZone_defaultModel_completion___block_invoke_2(uint64_t a1, char a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained && (a2 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(a1 + 40));
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

uint64_t __80__HMDHome__migrateAppleMediaAccessoriesWithCloudZone_migrationQueue_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __64__HMDHome__migrateHomeUsersCloudZone_migrationQueue_completion___block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v9 = WeakRetained;
  if (!a4 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", v10);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v7);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

uint64_t __64__HMDHome__migrateHomeUsersCloudZone_migrationQueue_completion___block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (!WeakRetained)
  {
    v11 = *(NSObject **)(a1 + 32);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_2;
    v23[3] = &unk_1E89C1B48;
    v26 = *(id *)(a1 + 64);
    v24 = *(id *)(a1 + 40);
    v25 = *(id *)(a1 + 48);
    dispatch_async(v11, v23);

    v10 = v26;
    goto LABEL_6;
  }
  if (!v5)
  {
    v12 = *(_QWORD *)(a1 + 56);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_3;
    v17[3] = &unk_1E89BB418;
    objc_copyWeak(&v22, (id *)(a1 + 72));
    v18 = *(id *)(a1 + 48);
    v21 = *(id *)(a1 + 64);
    v19 = *(id *)(a1 + 32);
    v20 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "cleanChangesIfNoAddChangeObjectID:completion:", v12, v17);

    objc_destroyWeak(&v22);
    goto LABEL_8;
  }
  v8 = *(void **)(a1 + 64);
  if (v8)
  {
    v9 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_2_1509;
    block[3] = &unk_1E89C1B48;
    v16 = v8;
    v14 = *(id *)(a1 + 40);
    v15 = *(id *)(a1 + 48);
    dispatch_async(v9, block);

    v10 = v16;
LABEL_6:

  }
LABEL_8:

}

uint64_t __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_3(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained && (a2 & 1) == 0)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating home media settings and adding transaction to push to cloud", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(v8, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeMediaSettingsModel defaultModelForHomeUUID:](HMDHomeMediaSettingsModel, "defaultModelForHomeUUID:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
  }
  v13 = *(void **)(a1 + 56);
  if (v13)
  {
    v14 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_1508;
    block[3] = &unk_1E89C1B48;
    v18 = v13;
    v16 = *(id *)(a1 + 48);
    v17 = *(id *)(a1 + 32);
    dispatch_async(v14, block);

  }
}

uint64_t __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_2_1509(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t __72__HMDHome__migrateHomeMediaSettingsCloudZone_migrationQueue_completion___block_invoke_1508(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (!WeakRetained)
  {
    v11 = *(NSObject **)(a1 + 32);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_2;
    v23[3] = &unk_1E89C1B48;
    v26 = *(id *)(a1 + 64);
    v24 = *(id *)(a1 + 40);
    v25 = *(id *)(a1 + 48);
    dispatch_async(v11, v23);

    v10 = v26;
    goto LABEL_6;
  }
  if (!v5)
  {
    v12 = *(_QWORD *)(a1 + 56);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_3;
    v17[3] = &unk_1E89BB418;
    objc_copyWeak(&v22, (id *)(a1 + 72));
    v18 = *(id *)(a1 + 48);
    v21 = *(id *)(a1 + 64);
    v19 = *(id *)(a1 + 32);
    v20 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "cleanChangesIfNoAddChangeObjectID:completion:", v12, v17);

    objc_destroyWeak(&v22);
    goto LABEL_8;
  }
  v8 = *(void **)(a1 + 64);
  if (v8)
  {
    v9 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_2_1507;
    block[3] = &unk_1E89C1B48;
    v16 = v8;
    v14 = *(id *)(a1 + 40);
    v15 = *(id *)(a1 + 48);
    dispatch_async(v9, block);

    v10 = v16;
LABEL_6:

  }
LABEL_8:

}

uint64_t __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_3(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained && (a2 & 1) == 0)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating home settings and adding transaction to push to cloud", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(v8, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeSettingsModel defaultModelForHomeUUID:](HMDHomeSettingsModel, "defaultModelForHomeUUID:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "addObject:", v12);
  }
  v13 = *(void **)(a1 + 56);
  if (v13)
  {
    v14 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_1506;
    block[3] = &unk_1E89C1B48;
    v18 = v13;
    v16 = *(id *)(a1 + 48);
    v17 = *(id *)(a1 + 32);
    dispatch_async(v14, block);

  }
}

uint64_t __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_2_1507(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t __67__HMDHome__migrateHomeSettingsCloudZone_migrationQueue_completion___block_invoke_1506(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD block[4];
  id v25;
  id v26;
  id v27;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (!WeakRetained)
  {
    v11 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_3;
    block[3] = &unk_1E89C1B48;
    v27 = *(id *)(a1 + 72);
    v25 = *(id *)(a1 + 40);
    v26 = *(id *)(a1 + 48);
    dispatch_async(v11, block);

    v10 = v27;
    goto LABEL_6;
  }
  if (!v5)
  {
    v12 = *(_QWORD *)(a1 + 56);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_4;
    v17[3] = &unk_1E89A52B0;
    objc_copyWeak(&v23, (id *)(a1 + 80));
    v18 = *(id *)(a1 + 64);
    v19 = *(id *)(a1 + 40);
    v22 = *(id *)(a1 + 72);
    v20 = *(id *)(a1 + 32);
    v21 = *(id *)(a1 + 48);
    objc_msgSend(WeakRetained, "cleanChangesIfNoAddChangeObjectID:completion:", v12, v17);

    objc_destroyWeak(&v23);
    goto LABEL_8;
  }
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    v9 = *(NSObject **)(a1 + 32);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_2_1504;
    v13[3] = &unk_1E89C1B48;
    v16 = v8;
    v14 = *(id *)(a1 + 40);
    v15 = *(id *)(a1 + 48);
    dispatch_async(v9, v13);

    v10 = v16;
LABEL_6:

  }
LABEL_8:

}

uint64_t __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_3(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

void __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_4(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained && (a2 & 1) == 0)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating resident device and adding transaction to push to cloud", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 32), "modelObjectWithChangeType:version:", 1, 4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v11);

  }
  v12 = *(void **)(a1 + 64);
  if (v12)
  {
    v13 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_1503;
    block[3] = &unk_1E89C1B48;
    v17 = v12;
    v15 = *(id *)(a1 + 40);
    v16 = *(id *)(a1 + 56);
    dispatch_async(v13, block);

  }
}

uint64_t __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_2_1504(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t __70__HMDHome__migrateResidentDevicesCloudZone_migrationQueue_completion___block_invoke_1503(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v10 = v7;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
  if (v11)
  {
    v12 = v11;
    v26 = v9;
    v27 = v8;
    v13 = *(_QWORD *)v29;
    while (2)
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v29 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
        objc_msgSend(v15, "uuid", v26, v27);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isEqual:", *(_QWORD *)(a1 + 32));

        if (v17)
        {
          if (objc_msgSend(v15, "objectChangeType") == 1 && !objc_msgSend(*(id *)(a1 + 40), "count"))
          {
            v24 = 0;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
            goto LABEL_16;
          }
          v18 = (void *)MEMORY[0x1D17BA0A0]();
          v19 = *(id *)(a1 + 48);
          HMFGetOSLogHandle();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v33 = v21;
            v34 = 2112;
            v35 = v15;
            _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Removing object change from homes transaction store %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v18);
          v22 = *(void **)(a1 + 40);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v15, "bsoLogRowID"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "addObject:", v23);

        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
      if (v12)
        continue;
      break;
    }
    v24 = 1;
LABEL_16:
    v9 = v26;
    v8 = v27;
  }
  else
  {
    v24 = 1;
  }

  return v24;
}

void __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke_1502(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  HMDBackingStoreLogUpdateOperation *v6;
  void *v7;
  HMDBackingStoreLogUpdateOperation *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *);
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)
    && objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v6 = [HMDBackingStoreLogUpdateOperation alloc];
    objc_msgSend(*(id *)(a1 + 32), "allObjects");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:](v6, "initWithRowIDs:successfullyPushedTo:", v7, 3);

    v17 = MEMORY[0x1E0C809B0];
    v18 = 3221225472;
    v19 = __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke_2;
    v20 = &unk_1E89BE0E0;
    objc_copyWeak(&v24, (id *)(a1 + 64));
    v21 = *(id *)(a1 + 40);
    v9 = *(id *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v22 = v9;
    v23 = v10;
    v11 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v8, "setResultBlock:", &v17));
    v12 = WeakRetained;
    HMFGetOSLogHandle();
    v13 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v26 = v14;
      v27 = 2112;
      v28 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of objects for %@ in home in datastore", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(v12, "backingStore", v17, v18, v19, v20);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "submit:", v8);

    objc_destroyWeak(&v24);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      (*(void (**)(uint64_t, _QWORD, id))(v5 + 16))(v5, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), v3);
  }

}

void __56__HMDHome_cleanChangesIfNoAddChangeObjectID_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 32);
    v11 = 138543618;
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Cleaned objects for %@ in home in datastore", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, _QWORD, id))(v10 + 16))(v10, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v3);

}

uint64_t __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v24 = a3;
  v23 = a4;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        v14 = *(void **)(a1 + 32);
        objc_msgSend(v13, "uuid", v23, v24);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v14) = objc_msgSend(v14, "containsObject:", v15);

        if ((_DWORD)v14)
        {
          v16 = (void *)MEMORY[0x1D17BA0A0]();
          v17 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v30 = v19;
            v31 = 2112;
            v32 = v13;
            _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Removing object change from homes transaction store %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v16);
          v20 = *(void **)(a1 + 48);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v13, "bsoLogRowID"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "addObject:", v21);

        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    }
    while (v10);
  }

  return 1;
}

void __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke_1500(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  HMDBackingStoreLogUpdateOperation *v5;
  void *v6;
  HMDBackingStoreLogUpdateOperation *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained && objc_msgSend(a1[4], "count"))
  {
    v5 = [HMDBackingStoreLogUpdateOperation alloc];
    objc_msgSend(a1[4], "allObjects");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:](v5, "initWithRowIDs:successfullyPushedTo:", v6, 3);

    v14 = MEMORY[0x1E0C809B0];
    v15 = 3221225472;
    v16 = __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke_2;
    v17 = &unk_1E89BF250;
    objc_copyWeak(&v19, a1 + 6);
    v18 = a1[5];
    v8 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v7, "setResultBlock:", &v14));
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = a1[5];
      *(_DWORD *)buf = 138543618;
      v21 = v11;
      v22 = 2112;
      v23 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Scheduling dropping of changes in home in datastore for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(v9, "backingStore", v14, v15, v16, v17);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "submit:", v7);

    objc_destroyWeak(&v19);
  }

}

void __46__HMDHome_dropAllChangesWithArrayOfObjectIDs___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 138543618;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Dropped changes in home in datastore for %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v5);

}

uint64_t __36__HMDHome_updateROARStatus_message___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setHomeUpdatedToROARAndInformClients");
}

uint64_t __56__HMDHome_updateNetworkRouterSettingsWithModel_message___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addTransactionForMinimumNetworkRouterHomeKitVersion:message:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __39__HMDHome_updateHomeWithModel_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = 138543874;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v9;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Scheduling resubscription for new primary resident: %@, old primary: %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 32), "resubscribeForNotificationsOnResident:", *(_QWORD *)(a1 + 56));

}

void __49__HMDHome__remoteAccessHealthMonitorTimerDidFire__block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6)
    {
      objc_msgSend(v6, "userInfo");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(WeakRetained, "_handleResponseForElectMessageToResident:error:", *(_QWORD *)(a1 + 32), v5);
    }
    else
    {
      objc_msgSend(WeakRetained, "_handleResponseForElectMessageToResident:error:", *(_QWORD *)(a1 + 32), 0);
    }
  }

}

uint64_t __48__HMDHome_remoteAccessHealthMonitorTimerDidFire__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_remoteAccessHealthMonitorTimerDidFire");
}

void __52__HMDHome_handleDidReceiveIDSMessageWithNoListener___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "userInfo");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "hmf_stringForKey:", CFSTR("kIDSMessageSourceIDKey"));
    v5 = (id)objc_claimAutoreleasedReturnValue();

    v4 = v5;
    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 40), "_handleDidReceiveIDSMessageWithNoListenerFromAddress:", v5);
      v4 = v5;
    }

  }
}

void __38__HMDHome_handleActiveAccountChanged___block_invoke(uint64_t a1)
{
  __updateAccountHandleForCurrentUser(*(void **)(a1 + 32), *(void **)(a1 + 40));
}

void __39__HMDHome_handleAccountHandlesUpdated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v7 = v3;

  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "account");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v7, "isEqualToAccount:", v5);

  if (v6)
    __updateAccountHandleForCurrentUser(*(void **)(a1 + 40), v7);

}

void __54__HMDHome_removeUnconfiguredResidentDeviceWithUserID___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "unconfiguredResidentDevices");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(_QWORD *)(a1 + 40), CFSTR("userID"));
  v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "setConfigurationState:", 2);
    objc_msgSend(*(id *)(a1 + 32), "unconfiguredResidentDevices");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "removeObject:", v4);

  }
}

void __41__HMDHome_addUnconfiguredResidentDevice___block_invoke(uint64_t a1)
{
  HMDResidentUser *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  const char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t v35[128];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "unconfiguredResidentDevices");
  v2 = (HMDResidentUser *)objc_claimAutoreleasedReturnValue();
  v3 = -[HMDResidentUser countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v32;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v32 != v5)
        objc_enumerationMutation(v2);
      objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v6), "device");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 40));

      if (v8)
        break;
      if (v4 == ++v6)
      {
        v4 = -[HMDResidentUser countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      goto LABEL_25;
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v24;
    v38 = 2112;
    v39 = v25;
    v26 = "%{public}@Not adding resident device, %@, to unconfigured list since it already exists";
  }
  else
  {
LABEL_9:

    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "_residentUsers", 0);
    v2 = (HMDResidentUser *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDResidentUser countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    if (!v9)
    {
LABEL_17:

      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "shortDescription");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v37 = v18;
        v38 = 2112;
        v39 = v19;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Adding resident device, %@, to unconfigured list and posting notification", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
      v2 = -[HMDResidentUser initWithDevice:home:pairingIdentity:configurationState:]([HMDResidentUser alloc], "initWithDevice:home:pairingIdentity:configurationState:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0, 1);
      objc_msgSend(*(id *)(a1 + 32), "unconfiguredResidentDevices");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "addObject:", v2);

      -[HMDUser setHome:](v2, "setHome:", *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(a1 + 32), "_configureUnconfiguredResident:desiredConfigState:", v2, 2);
      goto LABEL_26;
    }
    v10 = v9;
    v11 = *(_QWORD *)v28;
LABEL_11:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v28 != v11)
        objc_enumerationMutation(v2);
      objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v12), "device");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "isEqual:", *(_QWORD *)(a1 + 40));

      if (v14)
        break;
      if (v10 == ++v12)
      {
        v10 = -[HMDResidentUser countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
        if (v10)
          goto LABEL_11;
        goto LABEL_17;
      }
    }
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      goto LABEL_25;
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v24;
    v38 = 2112;
    v39 = v25;
    v26 = "%{public}@Not adding resident device, %@, to unconfigured list since it already exists in users";
  }
  _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, v26, buf, 0x16u);

LABEL_25:
  objc_autoreleasePoolPop(v21);
LABEL_26:

}

void __57__HMDHome_notifyClientsOfReachabilityUpdateForAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    os_unfair_recursive_lock_lock_with_options();
    if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "containsObject:", v3) & 1) != 0)
    {
      v4 = 0;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "addObject:", v3);
      v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "count") == 1;
    }
    v10 = os_unfair_recursive_lock_unlock();
    v11 = (void *)MEMORY[0x1D17BA0A0](v10);
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "shortDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543874;
      v18 = v14;
      v19 = 2112;
      v20 = v15;
      v21 = 2112;
      v22 = v16;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Queuing up reachability update for accessory %@. Started timer: %@", (uint8_t *)&v17, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    if (v4)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 104), "resume");
  }
  else
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(void **)(a1 + 32);
      v17 = 138543618;
      v18 = v8;
      v19 = 2112;
      v20 = v9;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Attempt to queue reachability update for accessory with no UUID - %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

- (void)_enableMediaNotifications:(void *)a3 forMediaAccessory:
{
  id v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a1)
  {
    objc_msgSend(a1, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v6);

    if ((objc_msgSend(a1, "isCurrentDevicePrimaryResident") & 1) != 0
      || !-[HMDHome supportsUnifiedMediaNotificationsOnResidents](a1))
    {
      -[HMDHome _enableMediaNotifications:directlyOnMediaAccessory:completion:](a1, a2, v5, 0);
    }
    else
    {
      v8[0] = v5;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "_subscribeForHomeNotificationsFromRemoteGateway:accessories:", a2, v7);

    }
  }

}

- (void)_enableMediaNotifications:(void *)a3 directlyOnMediaAccessory:(void *)a4 completion:
{
  id v7;
  void (**v8)(id, void *);
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (a1)
  {
    objc_msgSend(a1, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v9);

    objc_msgSend(v7, "device");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "mediaProfile");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v10 && v11)
    {
      -[HMDHome mediaNotificationPayloadForProfile:](a1, v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = a1;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v23 = v14;
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v25 = v17;
        v26 = 2112;
        v27 = v18;
        v28 = 2112;
        v29 = v12;
        v30 = 2112;
        v31 = v10;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Registering for media notifications (enabled: %@) on profile %@ with device %@", buf, 0x2Au);

        v14 = v23;
      }

      objc_autoreleasePoolPop(v14);
      objc_msgSend(v15, "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:completion:", MEMORY[0x1E0C9AA70], v13, MEMORY[0x1E0C9AA60], a2, v10, v8);
    }
    else
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = a1;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v25 = v22;
        v26 = 2112;
        v27 = v7;
        v28 = 2112;
        v29 = v10;
        v30 = 2112;
        v31 = v12;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Unable to enable media notifications on apple media accessory %@ due to no device (%@) or profile (%@)", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v19);
      if (!v8)
        goto LABEL_12;
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v8[2](v8, v13);
    }

LABEL_12:
  }

}

- (id)mediaNotificationPayloadForProfile:(void *)a1
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (!v3)
      _HMFPreconditionFailure();
    objc_msgSend(v3, "uniqueIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = v6;
    +[HMDMediaSession mediaPropertyMessageKeys](HMDMediaSession, "mediaPropertyMessageKeys");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    a1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return a1;
}

void __44__HMDHome_userManagementOperationDidFinish___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  HMDUserManagementOperationTimestamp *v14;
  void *v15;
  HMDUserManagementOperationTimestamp *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  HMDUserManagementOperationTimestamp *v24;
  void *v25;
  HMDUserManagementOperationTimestamp *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "isAuditOperation");
  v3 = *(void **)(a1 + 40);
  if (!v2)
  {
    objc_msgSend(v3, "_updateOutgoingInvitationsWithCompleteUserManagementOperation:", *(_QWORD *)(a1 + 32));
    return;
  }
  objc_msgSend(v3, "backingStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "transaction:options:", CFSTR("HMDUserManagementOperationDelete"), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "accessory");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "accessoryWithUUID:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "home");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v10 && v11)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isExpired"))
    {
      objc_msgSend(v10, "transactionWithObjectChangeType:", 2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = [HMDUserManagementOperationTimestamp alloc];
      objc_msgSend(*(id *)(a1 + 40), "currentDevice");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = -[HMDUserManagementOperationTimestamp initWithDevice:state:](v14, "initWithDevice:state:", v15, 2);
      objc_msgSend(v13, "setPairingsAuditedTimestamp:", v16);

      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "name");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "uuid");
        v43 = v17;
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "UUIDString");
        v21 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "pairingsAuditedTimestamp");
        v41 = v13;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v46 = v37;
        v47 = 2112;
        v48 = v20;
        v49 = 2112;
        v50 = v21;
        v23 = (void *)v21;
        v51 = 2112;
        v52 = v22;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ pairings audit failed %@", buf, 0x2Au);

        v13 = v41;
        v17 = v43;

      }
    }
    else
    {
      if ((objc_msgSend(*(id *)(a1 + 32), "isCancelled") & 1) != 0)
        goto LABEL_13;
      objc_msgSend(v10, "transactionWithObjectChangeType:", 2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = [HMDUserManagementOperationTimestamp alloc];
      objc_msgSend(*(id *)(a1 + 40), "currentDevice");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = -[HMDUserManagementOperationTimestamp initWithDevice:state:](v24, "initWithDevice:state:", v25, 0);
      objc_msgSend(v13, "setPairingsAuditedTimestamp:", v26);

      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "name");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "uuid");
        v44 = v17;
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "UUIDString");
        v28 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "pairingsAuditedTimestamp");
        v42 = v13;
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v46 = v38;
        v47 = 2112;
        v48 = v27;
        v49 = 2112;
        v50 = v28;
        v30 = (void *)v28;
        v51 = 2112;
        v52 = v29;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ pairings audit completed %@", buf, 0x2Au);

        v13 = v42;
        v17 = v44;

      }
    }

    objc_autoreleasePoolPop(v17);
    objc_msgSend(v6, "add:", v13);

  }
LABEL_13:
  v31 = *(void **)(a1 + 32);
  objc_msgSend(v31, "accessory");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "uuid");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "modelObjectWithChangeType:parentUUID:", 3, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "add:", v34);
  objc_msgSend(v6, "run");
  if (v10
    && (objc_msgSend(*(id *)(a1 + 32), "isCancelled") & 1) == 0
    && (objc_msgSend(*(id *)(a1 + 32), "isExpired") & 1) == 0)
  {
    v35 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "auditUsersToBeAdded");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "_addUsers:accessory:", v36, v10);

  }
}

uint64_t __51__HMDHome_residentDeviceManagerDidUpdateResidents___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_evaluateOwnerTrustZoneCapabilityAndNotify");
  return objc_msgSend(*(id *)(a1 + 32), "_updateResidentFirstAccessoryCommunicationEnabled");
}

void __82__HMDHome_residentDeviceManager_didUpdatePrimaryResident_previousPrimaryResident___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_registerCameraReachabilityEventNotificationsWithCompletionHandler:", 0);
  objc_msgSend(*(id *)(a1 + 32), "migrateAfterResidentChange");
  objc_msgSend(*(id *)(a1 + 32), "reEvaluateHomeHubState");
  objc_msgSend(*(id *)(a1 + 32), "stagedRemoteReachabilityRegistration");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "resetAndStagePriorValue");

}

uint64_t __60__HMDHome_residentDeviceManager_didUpdateResidentAvailable___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  const __CFString *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "shortDescription");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    v8 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    v24 = v5;
    if (v8)
      v9 = CFSTR("available");
    else
      v9 = CFSTR("unavailable");
    v25 = 2112;
    v26 = v6;
    v27 = 2112;
    v28 = v9;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@[%@] Resident devices are %@ for this home", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  if (!*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "migrateAfterResidentChange");
    if (!*(_BYTE *)(a1 + 40))
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      objc_msgSend(*(id *)(a1 + 32), "_residentUsers", 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v19 != v13)
              objc_enumerationMutation(v10);
            objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfUpdatedResidentUser:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * i));
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v12);
      }

      objc_msgSend(*(id *)(a1 + 32), "homeManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "electRemoteAccessPeerForHome:", v16);

    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "reEvaluateHomeHubState");
}

void __113__HMDHome_retrieveOperationalCertificatesForFabricID_commissionerNodeID_commissioneeNodeID_publicKey_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *context;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = WeakRetained;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v11;
        v28 = 2112;
        v29 = v5;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for operational certificates failed with %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMDHomeCommissioningRootCertMessageKey"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMDHomeCommissioningOperationalCertMessageKey"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "hmf_numberForKey:", CFSTR("HMDHomeCommissioningOwnerNodeIDMessageKey"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMDHomeCommissioningIPKMessageKey"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      context = (void *)MEMORY[0x1D17BA0A0]();
      v16 = WeakRetained;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v17;
      if (v12 && v13)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v23 = v15;
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v27 = v19;
          v28 = 2112;
          v29 = v12;
          v30 = 2112;
          v31 = v13;
          v32 = 2112;
          v33 = v14;
          _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Request for operational certificates successful. rootCertificate %@, operationalCert %@, ownerNodeID %@", buf, 0x2Au);

          v15 = v23;
        }

        objc_autoreleasePoolPop(context);
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
      else
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v24 = v15;
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v27 = v20;
          v28 = 2112;
          v29 = v12;
          v30 = 2112;
          v31 = v13;
          v32 = 2112;
          v33 = v14;
          _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Primary resident returned unexpected values for rootCertificate %@, operationalCert %@, ownerNodeID %@", buf, 0x2Au);

          v15 = v24;
        }

        objc_autoreleasePoolPop(context);
        v21 = *(_QWORD *)(a1 + 32);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, void *))(v21 + 16))(v21, 0, 0, 0, 0, v22);

      }
    }
  }

}

void __59__HMDHome__fetchMetadataFromPrimaryResidentWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  BOOL v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = WeakRetained;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v11;
        v42 = 2112;
        v43 = v5;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for Thread Network credentials failed with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      objc_msgSend(v6, "hmf_dataForKey:", *MEMORY[0x1E0CB9278]);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = 0;
      objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v12, &v39);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = v39;
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMHomeThreadNetworkCredentialsMasterKeyMessageKey"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = WeakRetained;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v17;
      v38 = v14;
      if (v13)
        v19 = v14 == 0;
      else
        v19 = 1;
      if (v19)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v20 = v12;
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v38, "length");
          *(_DWORD *)buf = 138543874;
          v41 = v21;
          v42 = 2112;
          v43 = v13;
          v44 = 2048;
          v45 = v22;
          _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Missing metadata (%@)/masterKeyData (length %zu) in response", buf, 0x20u);

          v12 = v20;
        }

        objc_autoreleasePoolPop(v15);
        v23 = *(_QWORD *)(a1 + 32);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v24);
        v14 = v38;
      }
      else
      {
        v35 = v6;
        v36 = v12;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v41 = v26;
          _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Request for Thread Network Metadata successful", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v15);
        v34 = objc_alloc(MEMORY[0x1E0CBA908]);
        objc_msgSend(v13, "name");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v13, "channel");
        objc_msgSend(v13, "PANID");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "extendedPANID");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "passPhrase");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "PSKc");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "operationalDataset");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (void *)objc_msgSend(v34, "initWithName:channel:PANID:extendedPANID:masterKey:passPhrase:PSKc:operationalDataset:", v32, v33, v31, v27, v14, v28, v29, v30);

        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        v6 = v35;
        v12 = v36;
      }

    }
  }

}

void __55__HMDHome_retrieveThreadNetworkMetadataWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && !v6)
    goto LABEL_9;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v11;
    v18 = 2112;
    v19 = v7;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to get thread network credentials from resident. Error: %@", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  if (objc_msgSend(*(id *)(a1 + 32), "isOwnerUser"))
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Falling back to get thread network credentials from current owner device", (uint8_t *)&v16, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(*(id *)(a1 + 32), "_fetchMetadataOnCurrentDeviceWithCompletion:", *(_QWORD *)(a1 + 40));
  }
  else
  {
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t __69__HMDHome__unconfigurePairedAccessoriesForServer_updateReachability___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "unconfigureAccessoryWithServerIdentifier:linkType:updateReachability:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1416(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void **p_cache;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  __int128 v24;
  id *v25;
  id obj;
  uint64_t v27;
  _QWORD v28[4];
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[5];
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v1 = (id *)a1;
  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v1[5], "linkType");
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2_1417;
  v34[3] = &unk_1E89B91A0;
  v34[4] = v1[4];
  objc_msgSend(v2, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", 0, v3, v4, v34);

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v1[6];
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v41, 16);
  if (v5)
  {
    v7 = v5;
    v27 = *(_QWORD *)v31;
    p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
    *(_QWORD *)&v6 = 138543874;
    v24 = v6;
    v25 = v1;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v31 != v27)
          objc_enumerationMutation(obj);
        v10 = v1[4];
        objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * v9), "uuid", v24);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "accessoryWithUUID:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v13 = v12;
        else
          v13 = 0;
        v14 = v13;

        if (v14)
        {
          v15 = (void *)MEMORY[0x1D17BA0A0]();
          v16 = v1[4];
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "shortDescription");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "supportsTargetController");
            HMFBooleanToString();
            v20 = v7;
            v21 = p_cache;
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v24;
            v36 = v18;
            v37 = 2112;
            v38 = v19;
            v39 = 2112;
            v40 = v22;
            _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Bridged accessory %@ (supportsTargetController %@) being added to home", buf, 0x20u);

            v1 = v25;
            p_cache = v21;
            v7 = v20;

          }
          objc_autoreleasePoolPop(v15);
          v28[0] = MEMORY[0x1E0C809B0];
          v28[1] = 3221225472;
          v28[2] = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1418;
          v28[3] = &unk_1E89C2350;
          v29 = v14;
          objc_msgSend(v29, "readInitialRequiredCharacteristicsForAccessory:", v28);

        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v41, 16);
    }
    while (v7);
  }

  return objc_msgSend(v1[4], "_evaluateShouldRelaunchAndSetRelaunch");
}

void __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_2_1417(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  void *v7;
  uint64_t v8;
  id v9;

  v3 = a2;
  if (objc_msgSend(v3, "isPrimary"))
  {
    v4 = MEMORY[0x1E0C809B0];
    v5 = 3221225472;
    v6 = __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_3;
    v7 = &unk_1E89C21C0;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = v3;
    objc_msgSend(v9, "maybeCommissionToThreadNetworkWithCompletion:", &v4);

  }
  objc_msgSend(v3, "handleUpdatedServicesForThreadManagementWithCompletion:", 0, v4, v5, v6, v7, v8);

}

uint64_t __56__HMDHome__processUpdatedAccessoryServer_reAddServices___block_invoke_1418(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "autoConfigureTargetController");
}

uint64_t __141__HMDHome_getUpdateTransactionForAccessory_hapAccessory_accessoryTransaction_addSvcTransactions_updateSvcTransactions_removeSvcTransactions___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uuid");
}

id __88__HMDHome___updateServiceTransaction_accessoryTransaction_service_accessory_hapService___block_invoke(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void __63__HMDHome_accessoryBrowser_didFinishPairingForAccessoryServer___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(_QWORD *)(a1 + 32);
        v19 = 138543874;
        v20 = v12;
        v21 = 2112;
        v22 = v13;
        v23 = 2112;
        v24 = v5;
        v14 = "%{public}@Failed to notify pairing completion for accessory server %@ to the primary resident with error %@";
        v15 = v11;
        v16 = OS_LOG_TYPE_ERROR;
        v17 = 32;
LABEL_7:
        _os_log_impl(&dword_1CD062000, v15, v16, v14, (uint8_t *)&v19, v17);

      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 138543618;
      v20 = v12;
      v21 = 2112;
      v22 = v18;
      v14 = "%{public}@Successfully notified the primary resident of pairing completion for accessory server %@";
      v15 = v11;
      v16 = OS_LOG_TYPE_INFO;
      v17 = 22;
      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v8);
  }

}

uint64_t __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

id __89__HMDHome_accessoryBrowser_didUpdateReachability_forBTLEAccessoriesWithServerIdentifier___block_invoke_1401(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  if (objc_msgSend(v2, "hasBTLELink"))
  {
    objc_msgSend(v2, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t __56__HMDHome_handleUpdatedCharacteristics_accessoryServer___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedCharacteristics:accessoryServer:stateNumber:broadcast:internal:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 0, 1);
}

uint64_t __100__HMDHome_accessoryBrowser_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedCharacteristics:accessoryServer:stateNumber:broadcast:internal:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), 0);
}

void __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "setReachability:serverIdentifier:linkType:", 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  if (objc_msgSend(v3, "hasBTLELink") && *(_QWORD *)(a1 + 48) == 2)
  {
    objc_msgSend(*(id *)(a1 + 40), "accessoryBrowser");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke_2;
    v6[3] = &unk_1E89A50D8;
    v7 = v3;
    objc_msgSend(v4, "probeReachabilityForBTLEAccessoryServersWithIdentifiers:forceScan:withCompletion:", v5, 1, v6);

  }
}

uint64_t __85__HMDHome_accessoryBrowser_accessoryServer_didDiscoverAccessories_transaction_error___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "setReachability:serverIdentifier:linkType:", a3, a2, 2);
}

uint64_t __68__HMDHome_accessoryBrowser_accessoryServer_didStopPairingWithError___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "didEncounterError:", *(_QWORD *)(a1 + 32));
}

void __78__HMDHome_accessoryBrowser_discoveryFailedWithError_accessoryServer_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  v3 = a2;
  if (*(_QWORD *)(a1 + 40) != 2)
  {
    v6 = v3;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v4 = v6;
    else
      v4 = 0;
    v5 = v4;
    objc_msgSend(v5, "setReachability:serverIdentifier:linkType:", 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    v3 = v6;
  }

}

void __38__HMDHome_handleRemovedMediaSessions___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_arrayForKey:", CFSTR("kRemovedMediaSessionIdentifiersKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(a1 + 40), "_removeMediaSessionWithIdentifier:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++), (_QWORD)v9);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

uint64_t __60__HMDHome__shouldAvoidTombstoningAccessoryServer_accessory___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "accessoryUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

BOOL __28__HMDHome__encodeWithCoder___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "device");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "productInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "productClass") != 3;

  return v4;
}

void __28__HMDHome_setMediaPassword___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(id *)(*((_QWORD *)&v10 + 1) + 8 * v6);
        if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EFABAE10))
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        if (v9 && objc_msgSend(v9, "supportsMinimumUserPrivilege"))
          objc_msgSend(v9, "handleUpdatedPassword:", *(_QWORD *)(a1 + 40));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void __40__HMDHome_setMinimumMediaUserPrivilege___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "accessories", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(id *)(*((_QWORD *)&v10 + 1) + 8 * v6);
        if (objc_msgSend(v7, "conformsToProtocol:", &unk_1EFABAE10))
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        if (v9 && objc_msgSend(v9, "supportsMinimumUserPrivilege"))
          objc_msgSend(v9, "handleUpdatedMinimumUserPrivilege:", *(_QWORD *)(a1 + 40));

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

void __69__HMDHome_queryPrimaryResidentReachabilityForAccessories_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v11;
      v17 = 2112;
      v18 = v5;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Query reachability response error: %@", (uint8_t *)&v15, 0x16u);

    }
    v12 = 0;
LABEL_5:

    objc_autoreleasePoolPop(v8);
    goto LABEL_6;
  }
  objc_msgSend(v6, "hmf_arrayForKey:", CFSTR("kAccessoriesInfoDictionaryKey"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v13;
  if (!v13 || !objc_msgSend(v13, "count"))
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v14;
      v17 = 2112;
      v18 = v7;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@No reachability setting in query reachability response: %@", (uint8_t *)&v15, 0x16u);

    }
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t __29__HMDHome_updateHomeLocation__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateHomeLocation");
}

uint64_t __42__HMDHome_enabledResidentsSupportsHomeHub__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "capabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsHomeHub");

  return v3;
}

- (void)_readProfileState:(void *)a3 viaDevice:
{
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id location;
  _QWORD v22[5];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v17 = a3;
  if (a1)
  {
    v5 = (void *)MEMORY[0x1E0C99DE8];
    v6 = objc_msgSend(v18, "count");
    +[HMDMediaSession mediaPropertyMessageKeys](HMDMediaSession, "mediaPropertyMessageKeys");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v7, "count") * v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v9 = v18;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    v11 = MEMORY[0x1E0C809B0];
    if (v10)
    {
      v12 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v24 != v12)
            objc_enumerationMutation(v9);
          v14 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i);
          +[HMDMediaSession mediaPropertyMessageKeys](HMDMediaSession, "mediaPropertyMessageKeys", v17);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v22[0] = v11;
          v22[1] = 3221225472;
          v22[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke;
          v22[3] = &unk_1E89BE670;
          v22[4] = v14;
          objc_msgSend(v15, "na_map:", v22);
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v8, "addObjectsFromArray:", v16);
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v10);
    }

    objc_initWeak(&location, a1);
    v19[0] = v11;
    v19[1] = 3221225472;
    v19[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke_2;
    v19[3] = &unk_1E89C17B0;
    objc_copyWeak(&v20, &location);
    objc_msgSend(a1, "redispatchMediaReadRequests:viaDevice:completion:", v8, v17, v19);
    objc_destroyWeak(&v20);
    objc_destroyWeak(&location);

  }
}

HMDMediaPropertyRequest *__39__HMDHome__readProfileState_viaDevice___block_invoke(uint64_t a1, uint64_t a2)
{
  return +[HMDMediaPropertyRequest requestWithProperty:mediaProfile:](HMDMediaPropertyRequest, "requestWithProperty:mediaProfile:", a2, *(_QWORD *)(a1 + 32));
}

void __39__HMDHome__readProfileState_viaDevice___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  void *v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __39__HMDHome__readProfileState_viaDevice___block_invoke_3;
    v7[3] = &unk_1E89C2328;
    v8 = v3;
    v9 = v5;
    dispatch_async(v6, v7);

  }
}

void __39__HMDHome__readProfileState_viaDevice___block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *v27;
  int v28;
  void *v29;
  int v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  uint64_t v36;
  void *v37;
  HMDMediaSessionState *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _BOOL4 v51;
  uint64_t v52;
  void *v53;
  id v54;
  NSObject *v55;
  void *v56;
  HMDMediaSessionState *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  HMDMediaSessionState *v61;
  void *v62;
  id v63;
  NSObject *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  NSObject *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  NSObject *v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  NSObject *v80;
  HMDMediaSessionState *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  HMDHomeManagerXPCMessageSendPolicy *v91;
  void *v92;
  void *v93;
  void *v94;
  __int128 v95;
  id obj;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  const __CFString *v126;
  void *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint8_t buf[4];
  void *v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  void *v145;
  __int16 v146;
  uint64_t v147;
  _BYTE v148[128];
  _BYTE v149[128];
  uint64_t v150;

  v1 = a1;
  v150 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  obj = *(id *)(v1 + 32);
  v105 = v1;
  v101 = v2;
  v99 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v122, v149, 16);
  if (v99)
  {
    v98 = *(_QWORD *)v123;
    v117 = *MEMORY[0x1E0CB9558];
    v114 = *MEMORY[0x1E0CB9580];
    v112 = *MEMORY[0x1E0CB95D8];
    v110 = *MEMORY[0x1E0CB95A8];
    v108 = *MEMORY[0x1E0CB95E8];
    v106 = *MEMORY[0x1E0CB9568];
    *(_QWORD *)&v3 = 138544130;
    v95 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v123 != v98)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v122 + 1) + 8 * v4);
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        v121 = 0u;
        v6 = v5;
        v7 = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v118, v148, 16);
        v102 = v4;
        if (!v7)
        {

          v9 = 0;
          v113 = 0;
          v111 = 0;
          v109 = 0;
          v107 = 0;
LABEL_56:
          objc_msgSend(v9, "mediaSession", v95);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "state");
          v38 = (HMDMediaSessionState *)objc_claimAutoreleasedReturnValue();
          v8 = 0;
          goto LABEL_57;
        }
        v107 = 0;
        v109 = 0;
        v111 = 0;
        v113 = 0;
        v115 = 0;
        v8 = 0;
        v9 = 0;
        v10 = *(_QWORD *)v119;
        do
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v119 != v10)
              objc_enumerationMutation(v6);
            v12 = *(void **)(*((_QWORD *)&v118 + 1) + 8 * (_QWORD)i);
            objc_msgSend(v12, "error", v95);
            v13 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v13)
            {
              objc_msgSend(v12, "request");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "mediaProfile");
              v15 = objc_claimAutoreleasedReturnValue();

              objc_msgSend(v14, "property");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "isEqual:", v117);

              if (v17)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v8;
                v8 = v19;
                goto LABEL_42;
              }
              objc_msgSend(v14, "property");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = objc_msgSend(v21, "isEqual:", v114);

              if (v22)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v115;
                v115 = v19;
                goto LABEL_42;
              }
              objc_msgSend(v14, "property");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              v24 = objc_msgSend(v23, "isEqual:", v112);

              if (v24)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v113;
                v113 = v19;
                goto LABEL_42;
              }
              objc_msgSend(v14, "property");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = objc_msgSend(v25, "isEqual:", v110);

              if (v26)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v111;
                v111 = v19;
                goto LABEL_42;
              }
              objc_msgSend(v14, "property");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = objc_msgSend(v27, "isEqual:", v108);

              if (v28)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v109;
                v109 = v19;
                goto LABEL_42;
              }
              objc_msgSend(v14, "property");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              v30 = objc_msgSend(v29, "isEqual:", v106);

              if (v30)
              {
                objc_msgSend(v12, "value");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v19 = v18;
                else
                  v19 = 0;
                v20 = v107;
                v107 = v19;
LABEL_42:
                v31 = v19;

              }
              v9 = (void *)v15;
              continue;
            }
          }
          v7 = (void *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v118, v148, 16);
        }
        while (v7);

        v2 = v101;
        if (!v8)
        {
          v1 = v105;
          v7 = v115;
          goto LABEL_56;
        }
        objc_msgSend(v9, "accessory");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "uniqueIdentifier");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "UUIDString");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = objc_msgSend(v8, "isEqualToString:", v34);

        v1 = v105;
        v7 = v115;
        if (v35)
        {
          objc_msgSend(v32, "identifier");
          v36 = objc_claimAutoreleasedReturnValue();

          v8 = (void *)v36;
        }
        objc_msgSend(v32, "home");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "mediaSessionStateWithIdentifier:", v8);
        v38 = (HMDMediaSessionState *)objc_claimAutoreleasedReturnValue();
        if (!v38)
        {
          v39 = (void *)MEMORY[0x1D17BA0A0]();
          v40 = *(id *)(v105 + 40);
          HMFGetOSLogHandle();
          v41 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v103 = v39;
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "identifier");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v44 = *(_QWORD *)(v105 + 32);
            *(_DWORD *)buf = v95;
            v141 = v42;
            v142 = 2112;
            v143 = (uint64_t)v8;
            v144 = 2112;
            v145 = v43;
            v146 = 2112;
            v147 = v44;
            _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Creating a media session state for a remote session (sessionIdentifier %@; accessoryIdentifier %"
              "@) update - responses %@",
              buf,
              0x2Au);

            v39 = v103;
          }

          objc_autoreleasePoolPop(v39);
          v38 = -[HMDMediaSessionState initWithSessionIdentifier:]([HMDMediaSessionState alloc], "initWithSessionIdentifier:", v8);
          objc_msgSend(v37, "addMediaSessionState:", v38);
          v7 = v115;
          v1 = v105;
        }

LABEL_57:
        objc_msgSend(v9, "accessory");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "uuid");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "UUIDString");
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        if (v47 && v38)
        {
          v97 = v45;
          v48 = (void *)MEMORY[0x1E0C99E08];
          objc_msgSend(v2, "hmf_dictionaryForKey:", v47);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "dictionaryWithDictionary:", v49);
          v50 = (void *)objc_claimAutoreleasedReturnValue();

          v51 = v7 != 0;
          v116 = v7;
          v104 = v50;
          if (v7)
          {
            v52 = objc_msgSend(v7, "unsignedIntegerValue");
            v53 = (void *)MEMORY[0x1D17BA0A0](-[HMDMediaSessionState setPlaybackState:](v38, "setPlaybackState:", v52));
            v54 = *(id *)(v105 + 40);
            HMFGetOSLogHandle();
            v55 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v56 = v47;
              v57 = v38;
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v141 = v58;
              v142 = 2048;
              v143 = v52;
              _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_INFO, "%{public}@Read the profile playback state as %tu", buf, 0x16u);

              v38 = v57;
              v47 = v56;
            }

            objc_autoreleasePoolPop(v53);
            v138 = v114;
            v139 = v116;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v139, &v138, 1);
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v104;
            objc_msgSend(v104, "addEntriesFromDictionary:", v59);

          }
          v100 = v47;
          if (v113)
          {
            v60 = objc_msgSend(v113, "unsignedIntegerValue");
            v61 = v38;
            v62 = (void *)MEMORY[0x1D17BA0A0](-[HMDMediaSessionState setShuffleState:](v38, "setShuffleState:", v60));
            v63 = *(id *)(v105 + 40);
            HMFGetOSLogHandle();
            v64 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v141 = v65;
              v142 = 2048;
              v143 = v60;
              _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@Read the profile shuffle state as %tu", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v62);
            v136 = v112;
            v137 = v113;
            v51 = 1;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v137, &v136, 1);
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v104;
            objc_msgSend(v104, "addEntriesFromDictionary:", v66);

          }
          else
          {
            v61 = v38;
          }
          if (v111)
          {
            v67 = objc_msgSend(v111, "unsignedIntegerValue");
            v68 = (void *)MEMORY[0x1D17BA0A0](-[HMDMediaSessionState setRepeatState:](v61, "setRepeatState:", v67));
            v69 = *(id *)(v105 + 40);
            HMFGetOSLogHandle();
            v70 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v141 = v71;
              v142 = 2048;
              v143 = v67;
              _os_log_impl(&dword_1CD062000, v70, OS_LOG_TYPE_INFO, "%{public}@Read the profile repeat state as %tu", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v68);
            v134 = v110;
            v135 = v111;
            v51 = 1;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v135, &v134, 1);
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v104;
            objc_msgSend(v104, "addEntriesFromDictionary:", v72);

          }
          v7 = v116;
          if (v109)
          {
            v73 = (void *)MEMORY[0x1D17BA0A0](-[HMDMediaSessionState setVolume:](v61, "setVolume:", v109));
            v1 = v105;
            v74 = *(id *)(v105 + 40);
            HMFGetOSLogHandle();
            v75 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v76 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v141 = v76;
              v142 = 2112;
              v143 = (uint64_t)v109;
              _os_log_impl(&dword_1CD062000, v75, OS_LOG_TYPE_INFO, "%{public}@Read the profile volume as %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v73);
            v132 = v108;
            v133 = v109;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v133, &v132, 1);
            v77 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v104;
            objc_msgSend(v104, "addEntriesFromDictionary:", v77);

            v38 = v61;
            v47 = v100;
            if (!v107)
            {
LABEL_81:
              objc_msgSend(v101, "setObject:forKey:", v50, v47);
              goto LABEL_82;
            }
LABEL_78:
            v78 = (void *)MEMORY[0x1D17BA0A0](-[HMDMediaSessionState setMediaUniqueIdentifier:](v38, "setMediaUniqueIdentifier:", v107));
            v79 = *(id *)(v1 + 40);
            HMFGetOSLogHandle();
            v80 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v81 = v38;
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v141 = v82;
              v142 = 2112;
              v143 = (uint64_t)v107;
              _os_log_impl(&dword_1CD062000, v80, OS_LOG_TYPE_INFO, "%{public}@Read the profile mediaUniqueIdentifier state as %@", buf, 0x16u);

              v38 = v81;
              v47 = v100;
            }

            objc_autoreleasePoolPop(v78);
            v130 = v106;
            v131 = v107;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v131, &v130, 1);
            v83 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v104;
            objc_msgSend(v104, "addEntriesFromDictionary:", v83);

            goto LABEL_81;
          }
          v38 = v61;
          v1 = v105;
          v47 = v100;
          if (v107)
            goto LABEL_78;
          if (v51)
            goto LABEL_81;
LABEL_82:

          v2 = v101;
          v45 = v97;
        }

        v4 = v102 + 1;
      }
      while (v102 + 1 != v99);
      v84 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v122, v149, 16);
      v99 = v84;
    }
    while (v84);
  }

  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(*(id *)(v1 + 40), "uuid");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "UUIDString");
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v128 = v86;
    v126 = CFSTR("kAccessoriesListKey");
    v87 = (void *)objc_msgSend(v101, "copy");
    v127 = v87;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v127, &v126, 1);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v129 = v88;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v129, &v128, 1);
    v89 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D285F8], "entitledMessageWithName:messagePayload:", *MEMORY[0x1E0CB90A8], v89);
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v91 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:active:", 0, -1, 1);
    objc_msgSend(v90, "setSendPolicy:", v91);

    objc_msgSend(*(id *)(v105 + 40), "msgDispatcher");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(v105 + 40), "homeManager");
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "uuid");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v92, "sendMessage:target:", v90, v94);

    v1 = v105;
    v2 = v101;

  }
  -[HMDHome updateMediaStateWithResponses:requestMessageInformation:](*(_QWORD *)(v1 + 40), *(void **)(v1 + 32), 0);

}

- (void)updateMediaStateWithResponses:(void *)a3 requestMessageInformation:
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id obj;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    v29 = v6;
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v28 = v5;
    obj = v5;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v37;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v37 != v10)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
          objc_msgSend(v12, "firstObject", v28);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "request");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "mediaProfile");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v15;
          if (v15)
          {
            objc_msgSend(v15, "mediaSession");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            if (v17)
            {
              objc_msgSend(v31, "objectForKey:", v17);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = (void *)objc_msgSend(v18, "mutableCopy");

              if (v19)
                objc_msgSend(v19, "addObjectsFromArray:", v12);
              else
                v19 = (void *)objc_msgSend(v12, "mutableCopy");
              v20 = (void *)objc_msgSend(v19, "copy");
              objc_msgSend(v31, "setObject:forKey:", v20, v17);

            }
            else
            {
              objc_msgSend(v16, "updateWithResponses:requestMessageInformation:", v12, v29);
            }

          }
        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
      }
      while (v9);
    }

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    objc_msgSend(v31, "hm_allKeys");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    v7 = v29;
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v33 != v24)
            objc_enumerationMutation(v21);
          v26 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * j);
          objc_msgSend(v31, "objectForKey:", v26, v28);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "updateWithResponses:requestMessageInformation:", v27, v29);

        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      }
      while (v23);
    }

    v5 = v28;
  }

}

void __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1322(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  NSObject *v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  id obj;
  id v36;
  id v37;
  _QWORD block[5];
  id v39;
  uint64_t v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[128];
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  id v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v36 = a2;
  v37 = a3;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v5 = a1;
  obj = *(id *)(a1 + 32);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v48;
    *(_QWORD *)&v7 = 138543874;
    v33 = v7;
    v34 = *(_QWORD *)v48;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v48 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        objc_msgSend(v11, "characteristic", v33);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = 0;
        objc_msgSend(v37, "hmd_valueOfCharacteristic:error:", v12, &v46);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v46;

        v15 = (void *)MEMORY[0x1D17BA0A0]();
        v16 = *(id *)(v5 + 40);
        HMFGetOSLogHandle();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = v17;
        if (v13)
        {
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            goto LABEL_12;
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v33;
          v53 = v19;
          v54 = 2112;
          v55 = v11;
          v56 = 2112;
          v57 = v13;
          v20 = v18;
          v21 = OS_LOG_TYPE_INFO;
          v22 = "%{public}@Characteristic read request succeeded when Home app enabled notifications %@:%@";
        }
        else
        {
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            goto LABEL_12;
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v33;
          v53 = v19;
          v54 = 2112;
          v55 = v11;
          v56 = 2112;
          v57 = v14;
          v20 = v18;
          v21 = OS_LOG_TYPE_ERROR;
          v22 = "%{public}@Characteristic read request when Home app enabled notification failed %@:%@";
        }
        _os_log_impl(&dword_1CD062000, v20, v21, v22, buf, 0x20u);

        v9 = v34;
LABEL_12:

        objc_autoreleasePoolPop(v15);
      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
    }
    while (v8);
  }

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v23 = *(id *)(v5 + 48);
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v43;
    v27 = MEMORY[0x1E0C809B0];
    do
    {
      for (j = 0; j != v25; ++j)
      {
        if (*(_QWORD *)v43 != v26)
          objc_enumerationMutation(v23);
        v29 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * j);
        objc_msgSend(v29, "workQueue");
        v30 = objc_claimAutoreleasedReturnValue();
        block[0] = v27;
        block[1] = 3221225472;
        block[2] = __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1323;
        block[3] = &unk_1E89C07B8;
        block[4] = v29;
        v31 = v37;
        v32 = *(_QWORD *)(v5 + 40);
        v39 = v31;
        v40 = v32;
        v41 = v36;
        dispatch_async(v30, block);

      }
      v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
    }
    while (v25);
  }

}

void __63__HMDHome__refreshCharacteristicValuesOnHomeNotificationEnable__block_invoke_1323(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v17 = 0;
  objc_msgSend(v2, "updateSettingsWithReadCharacteristicResponsePayload:error:", v3, &v17);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v17;
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v19 = v10;
      v20 = 2112;
      v21 = v11;
      v22 = 2112;
      v23 = v4;
      v12 = "%{public}@Successfully updated light profile settings %@:%@";
      v13 = v9;
      v14 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_1CD062000, v13, v14, v12, buf, 0x20u);

    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    v19 = v10;
    v20 = 2112;
    v21 = v15;
    v22 = 2112;
    v23 = v16;
    v12 = "%{public}@Failed to update light profile settings %@:%@";
    v13 = v9;
    v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v6);
}

void __46__HMDHome__handleResolveThreadNetworkRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (v5 && WeakRetained)
  {
    v24 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v24);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v24;
    if (v9)
    {
      v11 = *(void **)(a1 + 32);
      v25 = *MEMORY[0x1E0CB9278];
      v26 = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "respondWithPayload:", v12);
    }
    else
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = v8;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v28 = v22;
        v29 = 2112;
        v30 = v10;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode credentials: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      v23 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 15);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "respondWithError:", v12);
    }

  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = v8;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "threadNetworkID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v28 = v16;
      v29 = 2112;
      v30 = v17;
      v31 = 2112;
      v32 = v6;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network '%@': %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    v18 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "respondWithError:", v10);
  }

}

uint64_t __76__HMDHome__handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (a2)
    return objc_msgSend(v2, "respondWithError:", a2);
  else
    return objc_msgSend(v2, "respondWithSuccess");
}

- (void)_enableMultiUserWithMessage:(void *)a1
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  HMDHomeModel *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeModel *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    if ((objc_msgSend(a1, "isMultiUserEnabled") & 1) != 0)
    {
      objc_msgSend(v3, "respondWithSuccess");
    }
    else
    {
      v4 = (void *)MEMORY[0x1D17BA0A0]();
      v5 = a1;
      HMFGetOSLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543362;
        v18 = v7;
        _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Received enable multi-user request", (uint8_t *)&v17, 0xCu);

      }
      objc_autoreleasePoolPop(v4);
      v8 = [HMDHomeModel alloc];
      objc_msgSend(v5, "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "homeManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v8, "initWithObjectChangeType:uuid:parentUUID:", 2, v9, v11);

      -[HMDHomeModel setMultiUserEnabled:](v12, "setMultiUserEnabled:", MEMORY[0x1E0C9AAB0]);
      objc_msgSend(v5, "backingStore");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultPreferencesOptions](HMDBackingStoreTransactionOptions, "defaultPreferencesOptions");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "transaction:options:", v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v16, "add:withMessage:", v12, v3);
      objc_msgSend(v16, "run");

    }
  }

}

void __41__HMDHome__handleEnableMultiUserRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v5;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Enabled multi-user on the home error: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, id))v13)[2](v13, v5, v6);

  }
}

void __58__HMDHome__addResidentWithUsername_publicKey_destination___block_invoke(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  __CFString *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if ((shouldLogPrivateInformation() & 1) != 0)
  {
    objc_msgSend(a1[4], "userID");
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = CFSTR("...");
    v6 = CFSTR("...");
  }
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = WeakRetained;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v10)
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = v5;
      v19 = 2112;
      v20 = v3;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to add resident user '%@' invitation with error: %@", (uint8_t *)&v15, 0x20u);

    }
  }
  else if (v10)
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v12;
    v17 = 2112;
    v18 = v5;
    v19 = 2112;
    v20 = v14;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Tracking adding resident user '%@' with accepted and pending invitation '%@'", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v7);

}

void __46__HMDHome__sendResidentInviteWithDestination___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD block[4];
  id v17;
  void *v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (v5 || !v6)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = v8;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "device");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "remoteDestinationString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v21 = v13;
      v22 = 2112;
      v23 = v15;
      v24 = 2112;
      v25 = v5;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive controller info to auto add user %@ due to error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
  }
  else if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __46__HMDHome__sendResidentInviteWithDestination___block_invoke_1317;
    block[3] = &unk_1E89C20C8;
    v17 = v6;
    v18 = v8;
    v19 = *(id *)(a1 + 32);
    dispatch_async(v9, block);

  }
}

void __46__HMDHome__sendResidentInviteWithDestination___block_invoke_1317(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", CFSTR("kControllerPairingNameKey"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "hmf_dataForKey:", CFSTR("kControllerPublicKey"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "device");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "remoteDestinationString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_addResidentWithUsername:publicKey:destination:", v6, v2, v5);

}

void __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  _QWORD block[5];
  id v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke_2;
    block[3] = &unk_1E89C1710;
    block[4] = v8;
    v11 = a1[4];
    v12 = v5;
    v13 = v6;
    v14 = a1[5];
    dispatch_async(v9, block);

  }
}

void __61__HMDHome__configureUnconfiguredResident_desiredConfigState___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "pendingResponsesForRemoteAccessSetup");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

  if (*(_QWORD *)(a1 + 48) || (v9 = *(void **)(a1 + 56)) == 0)
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v18 = 138543874;
      v19 = v6;
      v20 = 2112;
      v21 = v7;
      v22 = 2112;
      v23 = v8;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Remote peer %@ failed to look for accessories with error:%@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v3);
  }
  else
  {
    v10 = objc_msgSend(v9, "hmf_BOOLForKey:", CFSTR("kAtHomeStateKey"));
    objc_msgSend(*(id *)(a1 + 56), "hmf_stringForKey:", CFSTR("kDeviceNameKey"));
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v11;
    if (v10 && v11)
    {
      objc_msgSend(*(id *)(a1 + 32), "_sendResidentInviteWithDestination:", *(_QWORD *)(a1 + 64));
    }
    else
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = *(_QWORD *)(a1 + 40);
        v18 = 138543618;
        v19 = v16;
        v20 = 2112;
        v21 = v17;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Remote peer %@ is not at home", (uint8_t *)&v18, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
    }

  }
}

void __92__HMDHome_notifyNewRemotePeersFound_remoteUsersRemoved_forceRemoteNotificationRegistration___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __CFString *v11;
  __CFString *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id obj;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  __CFString *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0C99E20];
  objc_msgSend(*(id *)(a1 + 32), "users");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "intersectSet:", v5);
  if (objc_msgSend(v4, "count"))
  {
    v40 = v5;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v41 = v4;
    objc_msgSend(v4, "allObjects");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v45 != v8)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
          if ((shouldLogPrivateInformation() & 1) != 0)
          {
            objc_msgSend(v10, "userID");
            v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v11 = CFSTR("...");
            v12 = CFSTR("...");
          }
          v13 = (void *)MEMORY[0x1D17BA0A0]();
          v14 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v51 = v16;
            v52 = 2112;
            v53 = v11;
            _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing remote user %@ since it has de-registered", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v13);
          objc_msgSend(v10, "userID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          if (v17)
          {
            objc_msgSend(v10, "userID");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "addObject:", v18);

          }
          objc_msgSend(*(id *)(a1 + 32), "_removeOutgoingInvitationForUser:", v10);
          objc_msgSend(*(id *)(a1 + 32), "_removeUserFromContainer:", v10);

        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
      }
      while (v7);
    }

    objc_msgSend(*(id *)(a1 + 32), "usersPendingUserManagementOperations");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v41;
    objc_msgSend(v41, "allObjects");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "removeObjectsInArray:", v20);

    v48[0] = CFSTR("kUserIDsKey");
    v21 = (void *)objc_msgSend(v43, "copy");
    v48[1] = CFSTR("kHomeUUID");
    v49[0] = v21;
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "UUIDString");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v49[1] = v23;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v49, v48, 2);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "saveWithReason:information:postSyncNotification:", CFSTR("kRemoteUsersDeregistered"), v24, 0);
    v5 = v40;
  }
  objc_msgSend(*(id *)(a1 + 32), "localCapabilitiesDataSource");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "supportsRemoteAccess");

  if (v26)
  {
    objc_msgSend(*(id *)(a1 + 32), "homeManager");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_BYTE *)(a1 + 48))
    {
      if (objc_msgSend(*(id *)(a1 + 32), "reachableAccessoriesCount"))
      {
        if (objc_msgSend(*(id *)(a1 + 32), "allowsRemoteAccess"))
        {
          objc_msgSend(*(id *)(a1 + 32), "currentUser");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v28, "isRemoteAccessAllowed");

          if (v29)
          {
            v30 = (void *)MEMORY[0x1D17BA0A0]();
            v31 = *(id *)(a1 + 32);
            HMFGetOSLogHandle();
            v32 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v51 = v33;
              _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@We have potential remote gateways that can be auto setup, triggering detection", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v30);
            objc_msgSend(*(id *)(a1 + 32), "uuid");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "accessoriesAreLocallyReachableOnTransientDevice:forHome:", 1, v34);

          }
        }
      }
    }
    if ((objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled") & 1) == 0
      && (objc_msgSend(*(id *)(a1 + 32), "isResidentSupported") & 1) == 0)
    {
      v35 = (void *)MEMORY[0x1D17BA0A0]();
      v36 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v51 = v38;
        _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Home does not have remote access enabled, requesting electing a remote peer", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v35);
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "electRemoteAccessPeerForHome:", v39);

    }
    -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), *(_BYTE *)(a1 + 49));

  }
}

- (void)_subscribeForNotificationFromRemoteGateway:(void *)a1
{
  NSObject *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend(a1, "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v4);

    if ((a2 & 1) != 0 || !objc_msgSend(a1, "registeredNotificationWithRemoteGateway"))
    {
      objc_msgSend(a1, "notificationRegistrations");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "count");

      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = a1;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "notificationRegistrations");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "shortDescription");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543874;
        v18 = v14;
        v19 = 2112;
        v20 = v16;
        v21 = 2048;
        v22 = v10;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Modifying notification registrations with new remote gateway: %@/%lu", (uint8_t *)&v17, 0x20u);

      }
      objc_autoreleasePoolPop(v11);
      objc_msgSend(v12, "_subscribeForHomeNotificationsFromRemoteGateway:", v10 != 0);
      objc_msgSend(v12, "setRegisteredNotificationWithRemoteGateway:", 1);
    }
    else
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = a1;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543362;
        v18 = v8;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Already registered for notification with remote gateway, skipping", (uint8_t *)&v17, 0xCu);

      }
      objc_autoreleasePoolPop(v5);
    }
  }
}

uint64_t __31__HMDHome_remoteAccessEnabled___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t v41[128];
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(a1 + 40) == objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
    goto LABEL_25;
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v43 = v5;
    v44 = 2112;
    v45 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Setting remote access enabled to %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "setRemoteAccessIsEnabled:", *(unsigned __int8 *)(a1 + 40));
  if (!*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "WiFiAssertion");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v43 = v22;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Releasing WiFi assertion", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(*(id *)(a1 + 32), "wifiManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "WiFiAssertion");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "endActiveAssertion:", v24);

      objc_msgSend(*(id *)(a1 + 32), "wifiManager");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "releaseWoWAssertion");

      objc_msgSend(*(id *)(a1 + 32), "setWiFiAssertion:", 0);
    }
    goto LABEL_16;
  }
  if (isWatch())
  {
    objc_msgSend(*(id *)(a1 + 32), "homeManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v7, "isActive") & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "WiFiAssertion");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
        goto LABEL_16;
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v43 = v12;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Taking WiFi assertion", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(*(id *)(a1 + 32), "wifiManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(*(id *)(a1 + 32), "shortDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "stringWithFormat:", CFSTR("Remote Access for %@"), v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "beginActiveAssertionWithOptions:reason:", 0, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "setWiFiAssertion:", v17);

      objc_msgSend(*(id *)(a1 + 32), "wifiManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "takeWoWAssertion");
    }

  }
LABEL_16:
  if ((objc_msgSend(*(id *)(a1 + 32), "isResidentSupported") & 1) == 0)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "_residentUsers");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
    if (v27)
    {
      v28 = v27;
      v29 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v38 != v29)
            objc_enumerationMutation(v26);
          objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfUpdatedResidentUser:", *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * i));
        }
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
      }
      while (v28);
    }

  }
LABEL_25:
  v31 = (void *)MEMORY[0x1D17BA0A0]();
  v32 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v43 = v34;
    _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Clearing history of all heartbeat queued messages to server", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v31);
  objc_msgSend(*(id *)(a1 + 32), "heartbeatPingMessagesQueuedWithServer");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "removeAllObjects");

  return objc_msgSend(*(id *)(a1 + 32), "_remoteAccessEnabled:", *(unsigned __int8 *)(a1 + 40));
}

void __56__HMDHome_updateNetworkConnectivity_companionReachable___block_invoke(uint64_t a1)
{
  int v2;
  int v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "isNetworkAvailable");
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != v2)
    objc_msgSend(*(id *)(a1 + 32), "setIsNetworkAvailable:", v3 != 0);
  objc_msgSend(*(id *)(a1 + 32), "remoteEventRouterClientController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "networkAvailabilityDidChange:", *(unsigned __int8 *)(a1 + 40));

  if (isWatch() && *(_BYTE *)(a1 + 41))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Companion is reachable, ignoring network connectivity update", (uint8_t *)&v13, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }
  else if (objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@We have no network connectivity, setting reachability state for all accessories to reflect their state", (uint8_t *)&v13, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 32), "_remoteAccessEnabled:", *(unsigned __int8 *)(a1 + 40));
  }
}

void __51__HMDHome_handlePrimaryResidentChangeNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_UUIDForKey:", CFSTR("HMDResidentDeviceHomeUUIDNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", v3);

  if (v5)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "isCurrentDeviceConfirmedPrimaryResident"))
    {
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v7 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138543362;
        v12 = v9;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Resetting accessory browsers", (uint8_t *)&v11, 0xCu);

      }
      objc_autoreleasePoolPop(v6);
      objc_msgSend(*(id *)(a1 + 40), "accessoryBrowser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "restartBrowsers");

      objc_msgSend(*(id *)(a1 + 40), "_evaluateShouldRelaunchAndSetRelaunch");
    }
    objc_msgSend(*(id *)(a1 + 40), "_registerCameraReachabilityEventNotificationsWithCompletionHandler:", 0);
    objc_msgSend(*(id *)(a1 + 40), "_notifyThreadLayerOfResidentChange");
  }

}

void __57__HMDHome_handleRemoteDeviceBecameReachableNotification___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "primaryResident");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "device");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome _updateDirectAppleMediaNotificationsOnResidentChange:previousResidentDevice:](v1, v2, 0);

}

- (void)_updateDirectAppleMediaNotificationsOnResidentChange:(void *)a3 previousResidentDevice:
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  int v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  char v25;
  id v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint8_t v43[128];
  uint8_t buf[4];
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    objc_msgSend(a1, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    dispatch_assert_queue_V2(v7);

    objc_msgSend(a1, "notificationRegistrationsForAppleMediaAccessories");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "count");

    if (v9)
    {
      objc_msgSend(a1, "appleMediaAccessories");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "capabilities");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v11, "supportsUnifiedMediaNotifications"))
      {

      }
      else
      {
        objc_msgSend(v5, "capabilities");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "supportsUnifiedMediaNotifications");

        if (v17)
        {
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v33 = v10;
          v18 = v10;
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
          if (v19)
          {
            v20 = v19;
            v21 = *(_QWORD *)v39;
            do
            {
              for (i = 0; i != v20; ++i)
              {
                if (*(_QWORD *)v39 != v21)
                  objc_enumerationMutation(v18);
                v23 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
                objc_msgSend(v23, "device");
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                v25 = objc_msgSend(v24, "isEqual:", v5);

                if ((v25 & 1) == 0)
                  -[HMDHome _enableMediaNotifications:directlyOnMediaAccessory:completion:](a1, 0, v23, 0);
              }
              v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
            }
            while (v20);
          }

          v10 = v33;
          goto LABEL_29;
        }
      }
      objc_msgSend(v6, "capabilities");
      v26 = (id)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v26, "supportsUnifiedMediaNotifications") & 1) != 0)
      {
        objc_msgSend(v5, "capabilities");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v27, "supportsUnifiedMediaNotifications");

        if ((v28 & 1) != 0)
        {
LABEL_29:
          objc_msgSend(a1, "_refreshMediaProfilesOnHomeNotificationEnable");

          goto LABEL_30;
        }
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v26 = v10;
        v29 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
        if (v29)
        {
          v30 = v29;
          v31 = *(_QWORD *)v35;
          do
          {
            for (j = 0; j != v30; ++j)
            {
              if (*(_QWORD *)v35 != v31)
                objc_enumerationMutation(v26);
              -[HMDHome _enableMediaNotifications:directlyOnMediaAccessory:completion:](a1, 1, *(void **)(*((_QWORD *)&v34 + 1) + 8 * j), 0);
            }
            v30 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
          }
          while (v30);
        }
      }

      goto LABEL_29;
    }
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = a1;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v45 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Skipping updated apple media notification registrations for remote devices because there are no clients registered.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }
LABEL_30:

}

void __43__HMDHome_handleDeviceCapabilitiesUpdated___block_invoke(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[4], "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDDeviceCapabilitiesUpdatedDifferingFieldsNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v15;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v4);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v8), "isEqualToString:", CFSTR("supportsCameraRecordingReachabilityNotifications"), (_QWORD)v14))objc_msgSend(a1[5], "_registerCameraReachabilityEventNotificationsWithCompletionHandler:", 0);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v6);
  }

  objc_msgSend(a1[5], "primaryResident");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "device");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "capabilities");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11 == a1[6])
  {
    v13 = objc_msgSend(v4, "containsObject:", CFSTR("supportsUnifiedMediaNotifications"));

    if (v13 && objc_msgSend(a1[6], "supportsUnifiedMediaNotifications"))
      -[HMDHome _updateDirectAppleMediaNotificationsOnResidentChange:previousResidentDevice:](a1[5], v10, 0);
  }
  else
  {

  }
}

void __32__HMDHome__handleResidentChange__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Activating trigger after resident change finished with error (%@)", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __37__HMDHome_migrateAfterResidentChange__block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleResidentChange");

}

uint64_t __58__HMDHome_shouldEnableResidentFirstAccessoryCommunication__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "capabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsResidentFirstAccessoryCommunication");

  return v3;
}

uint64_t __37__HMDHome_areAllResidentsUnreachable__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isReachable") ^ 1;
}

void __51__HMDHome__handleCharacteristicEnableNotification___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(_QWORD *)(v4 + 40);
  v5 = (id *)(v4 + 40);
  if (!v6)
    objc_storeStrong(v5, a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void __51__HMDHome__handleCharacteristicEnableNotification___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);

  }
}

HMDCharacteristicUpdateTuple *__45__HMDHome__handlePendingResponsesTimerFired___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  HMDCharacteristicUpdateTuple *v4;
  HMDCharacteristicUpdateTuple *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = a2;
  objc_msgSend(v2, "error");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = 0;
  }
  else
  {
    v5 = [HMDCharacteristicUpdateTuple alloc];
    objc_msgSend(v2, "request");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "characteristic");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "value");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[HMDCharacteristicUpdateTuple initWithCharacteristic:updatedValue:isBroadcast:](v5, "initWithCharacteristic:updatedValue:isBroadcast:", v7, v8, 0);

  }
  return v4;
}

uint64_t __178__HMDHome__handleFailedAccessories_requestMessage_source_pendingResponses_fastFailedAccessories_slowFailedAccessories_tmpErrorResponseTuples_waitGroup_failureWaitGroup_activity___block_invoke_1274(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  id v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "begin");
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    if (*(_BYTE *)(a1 + 104))
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    else
      objc_msgSend(*(id *)(a1 + 48), "allResponses");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "begin");
    v8 = *(id *)(a1 + 32);
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v5 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v10 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for slow read failed accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 56), "_redispatchReadForAccessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:errorResponseTuples:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88));
    __HMFActivityScopeLeave();

    objc_msgSend(*(id *)(a1 + 40), "removeAllObjects");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  return objc_msgSend(*(id *)(a1 + 32), "end");
}

void __118__HMDHome__passReadRequestToCompanion_requestMessage_source_pendingResponses_remoteAccessories_withCompletionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  _QWORD v4[5];
  id v5;
  id v6;
  char v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __118__HMDHome__passReadRequestToCompanion_requestMessage_source_pendingResponses_remoteAccessories_withCompletionHandler___block_invoke_2;
  v4[3] = &unk_1E89BD720;
  v4[4] = WeakRetained;
  v5 = *(id *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 56);
  v6 = *(id *)(a1 + 40);
  dispatch_async(v3, v4);

}

void __118__HMDHome__passReadRequestToCompanion_requestMessage_source_pendingResponses_remoteAccessories_withCompletionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", 0, v3, *(unsigned __int8 *)(a1 + 56), 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void __99__HMDHome_readCharacteristicValues_source_sourceForLogging_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  const __CFString *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0D285D0];
  v3 = *(_QWORD *)(a1 + 72);
  objc_msgSend(MEMORY[0x1E0D285D8], "allMessageDestinations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = CFSTR("kMultiPartResponseKey");
  v20[0] = MEMORY[0x1E0C9AAA0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicReadRequestKey"), v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 48);
    v13 = 138543874;
    v14 = v10;
    v15 = 2114;
    v16 = v11;
    v17 = 2114;
    v18 = v12;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: %{public}@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 40), "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", *(_QWORD *)(a1 + 56), v6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64));

}

void __123__HMDHome__redispatchReadForAccessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_errorResponseTuples___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDCharacteristicReadWriteLogEvent *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id obj;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  HMDCharacteristicReadWriteLogEvent *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = v5;
  v30 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  if (v30)
  {
    v29 = *(_QWORD *)v41;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v41 != v29)
          objc_enumerationMutation(obj);
        v34 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v7);
        v35 = v7;
        objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v8, "count"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v10 = v8;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v37;
          do
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v37 != v13)
                objc_enumerationMutation(v10);
              v15 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
              v16 = *(void **)(a1 + 40);
              +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v15, v6);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "addObject:", v17);

              objc_msgSend(v15, "characteristic");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v9, "addObject:", v18);

            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
          }
          while (v12);
        }

        v32 = [HMDCharacteristicReadWriteLogEvent alloc];
        v33 = *(_QWORD *)(a1 + 64);
        objc_msgSend(*(id *)(a1 + 48), "identifier");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "applicationBundleIdentifier");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 48);
        objc_msgSend(v34, "home");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "userForHome:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "uuid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v27) = 0;
        LOBYTE(v26) = 1;
        v24 = -[HMDCharacteristicReadWriteLogEvent initWithCharacteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:userUUID:writtenValues:](v32, "initWithCharacteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:userUUID:writtenValues:", v9, v34, 0, v33, 0, 0, v26, v31, v27, v19, v23, MEMORY[0x1E0C9AA60]);

        objc_msgSend(*(id *)(a1 + 56), "logEventSubmitter");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "submitLogEvent:error:", v24, v6);

        v7 = v35 + 1;
      }
      while (v35 + 1 != v30);
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    }
    while (v30);
  }

}

void __125__HMDHome__reallyRedispatchReadsToDevice_accessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_activity___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __131__HMDHome__readCharacteristicValuesForAccessories_readRequestMap_responseTuples_requestMessage_source_viaDevice_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  NSObject *v40;
  void *v41;
  __int128 v42;
  void *v43;
  id v44;
  id obj;
  uint64_t v46;
  uint64_t v47;
  id WeakRetained;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint8_t v57[128];
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  uint64_t v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v44 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "begin");
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      obj = *(id *)(a1 + 40);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
      if (!v7)
        goto LABEL_31;
      v9 = v7;
      v47 = *(_QWORD *)v54;
      *(_QWORD *)&v8 = 138543618;
      v42 = v8;
      v43 = v6;
      while (1)
      {
        v10 = 0;
        v46 = v9;
        do
        {
          if (*(_QWORD *)v54 != v47)
            objc_enumerationMutation(obj);
          v11 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * v10);
          v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v11);
          objc_msgSend(WeakRetained, "accessoryWithUUID:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v14 = v13;
          else
            v14 = 0;
          v15 = v14;

          if ((objc_msgSend(v15, "isPrimary") & 1) != 0)
          {
            v16 = v15;
LABEL_16:
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v16, v42);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = v17;
            if (v17)
            {
              v51 = 0u;
              v52 = 0u;
              v49 = 0u;
              v50 = 0u;
              v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
              if (v19)
              {
                v20 = v19;
                v21 = *(_QWORD *)v50;
                do
                {
                  v22 = 0;
                  do
                  {
                    if (*(_QWORD *)v50 != v21)
                      objc_enumerationMutation(v18);
                    +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * v22), v5);
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(*(id *)(a1 + 56), "addObject:", v23);

                    ++v22;
                  }
                  while (v20 != v22);
                  v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
                }
                while (v20);
              }
              v24 = *(void **)(a1 + 64);
              objc_msgSend(v16, "uuid");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "UUIDString");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "objectForKeyedSubscript:", v26);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "setLocal:", objc_msgSend(v44, "hmf_BOOLForKey:", CFSTR("NoResident")));

              v28 = *(void **)(a1 + 64);
              objc_msgSend(v16, "uuid");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "UUIDString");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v28, "objectForKeyedSubscript:", v30);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("kRemoteMessageTransportAttributionKey"));
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "setTransportType:", objc_msgSend(v32, "intValue"));

              objc_msgSend(WeakRetained, "logEventSubmitter");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              v34 = *(void **)(a1 + 64);
              objc_msgSend(v16, "uuid");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "UUIDString");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "objectForKeyedSubscript:", v36);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "submitLogEvent:error:", v37, v5);

              v6 = v43;
              v9 = v46;
            }

            goto LABEL_29;
          }
          objc_msgSend(v15, "bridge");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            if ((objc_msgSend(v6, "containsObject:", v16) & 1) != 0)
              goto LABEL_29;
            objc_msgSend(v6, "addObject:", v16);
            goto LABEL_16;
          }
          v38 = (void *)MEMORY[0x1D17BA0A0]();
          v39 = WeakRetained;
          HMFGetOSLogHandle();
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v42;
            v59 = v41;
            v60 = 2112;
            v61 = v11;
            _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping read responses for nil-ed out accessory with UUID %@", buf, 0x16u);

            v9 = v46;
          }

          objc_autoreleasePoolPop(v38);
          v16 = 0;
LABEL_29:

          ++v10;
        }
        while (v10 != v9);
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
        if (!v9)
        {
LABEL_31:

          dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
          goto LABEL_33;
        }
      }
    }
    objc_msgSend(WeakRetained, "_addResponseTuplesFromDictionary:accessoryRequestMapTable:responseTuples:completedGroup:logEvents:", v44, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 64));
LABEL_33:
    objc_msgSend(*(id *)(a1 + 32), "end", v42);
  }

}

void __131__HMDHome__readCharacteristicValuesForAccessories_readRequestMap_responseTuples_requestMessage_source_viaDevice_completionHandler___block_invoke_1263(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    objc_msgSend(v2, "stringForKey:", CFSTR("kRequestIdentifierKey"));
    v3 = objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      v4 = (void *)v3;
      objc_msgSend(*(id *)(a1 + 56), "pendingResponses");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKeyedSubscript:", v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v6, "addResponsesToPendingResponse:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "identifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "UUIDString");
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 56), "pendingResponses");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectForKeyedSubscript:", v4);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        v15 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v14, "setPendingResponseCount:", 0));
        v16 = *(id *)(a1 + 56);
        HMFGetOSLogHandle();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = 138543618;
          v28 = v18;
          v29 = 2112;
          v30 = v4;
          _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Remove tracking pending response %@ because last response received", (uint8_t *)&v27, 0x16u);

        }
        objc_autoreleasePoolPop(v15);
        objc_msgSend(*(id *)(a1 + 56), "pendingResponses");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "removeObjectForKey:", v4);

      }
    }
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543362;
      v28 = v23;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Completed all the reads and sending notification.", (uint8_t *)&v27, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    v24 = *(void **)(a1 + 56);
    v25 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "identifier");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v25, v26, *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));

  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543362;
      v28 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Completed all the reads and delaying notification.", (uint8_t *)&v27, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    v11 = *(_QWORD *)(a1 + 64);
    if (v11)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v11 + 16))(v11, 0, 0);
  }
}

void __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  void (**v2)(_QWORD);
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD aBlock[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v18;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    objc_initWeak(location, *(id *)(a1 + 48));
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke_1262;
    aBlock[3] = &unk_1E89A4CB8;
    objc_copyWeak(&v17, location);
    v16 = *(id *)(a1 + 64);
    v13 = *(id *)(a1 + 32);
    v18 = *(_OWORD *)(a1 + 72);
    v14 = *(id *)(a1 + 56);
    v15 = *(id *)(a1 + 40);
    v2 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (objc_msgSend(*(id *)(a1 + 48), "_shouldWaitForAccessoriesToBeReachable"))
    {
      v3 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "workQueue");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeAssistantOperation homeAssistantOperationWithReadRequests:queue:](HMDHomeAssistantOperation, "homeAssistantOperationWithReadRequests:queue:", v3, v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 48), "_performOperation:completion:", v5, v2);
    }
    else
    {
      v2[2](v2);
    }

    objc_destroyWeak(&v17);
    objc_destroyWeak(location);
    v10 = 0;
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Empty characteristics array was given", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 64);
    if (v11)
      (*(void (**)(uint64_t, void *, _QWORD))(v11 + 16))(v11, v10, 0);
  }

}

void __93__HMDHome_readCharacteristicValues_identifier_source_qualityOfService_withCompletionHandler___block_invoke_1262(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  __CFString *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  __CFString *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  __CFString *v27;
  _QWORD v28[2];
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "begin");
    v28[0] = CFSTR("sourceType");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 72));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v28[1] = CFSTR("kMultiPartResponseKey");
    v29[0] = v3;
    v29[1] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = objc_alloc(MEMORY[0x1E0D285F8]);
    v6 = *(_QWORD *)(a1 + 80);
    objc_msgSend(MEMORY[0x1E0D285D8], "allMessageDestinations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v5, "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicReadRequestKey"), v6, v7, v4);

    v9 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v8, "setIdentifier:", *(_QWORD *)(a1 + 40)));
    v10 = WeakRetained;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 72);
      if (v14 > 9)
        v15 = CFSTR("Unknown");
      else
        v15 = off_1E89ABF20[v14];
      v21 = v15;
      v22 = 138543874;
      v23 = v12;
      v24 = 2114;
      v25 = v13;
      v26 = 2114;
      v27 = v21;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Issuing read requests with identifier %{public}@, Source: %{public}@", (uint8_t *)&v22, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v10, "_readCharacteristicValues:requestMessage:source:withCompletionHandler:", *(_QWORD *)(a1 + 48), v8, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56));
    objc_msgSend(*(id *)(a1 + 32), "end");

  }
  else
  {
    v16 = *(_QWORD *)(a1 + 56);
    if (v16)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v16 + 16))(v16, v17, 0);

    }
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543362;
      v23 = v20;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform read request", (uint8_t *)&v22, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
  }

}

void __40__HMDHome__performOperation_completion___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  id WeakRetained;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(v2, "assistantOperations");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "removeObject:", WeakRetained);

  }
}

- (void)_applyDeviceLockCheck:(unint64_t)a3 forSource:(void *)a4 message:(void *)a5 completion:
{
  int v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  int v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  __CFString *v29;
  __CFString *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v40;
  const __CFString *v41;
  __CFString *v42;
  void *v43;
  id v44;
  NSObject *v45;
  void *v46;
  __CFString *v47;
  __CFString *v48;
  id v49;
  id v50;
  int v51;
  id v52;
  __CFString *obj;
  uint64_t v55;
  void *v56;
  void *v57;
  _QWORD v58[4];
  __CFString *v59;
  id v60;
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint8_t buf[4];
  void *v68;
  __int16 v69;
  const __CFString *v70;
  __int16 v71;
  const __CFString *v72;
  __int16 v73;
  __CFString *v74;
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v50 = a2;
  v52 = a4;
  v49 = a5;
  if (a1)
  {
    v8 = objc_msgSend(a1, "synchronouslyFetchIsCarPlayConnectedStatus");
    v57 = a1;
    objc_msgSend(a1, "deviceLockStateDataSource");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isPasscodeEnabled");

    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    obj = (__CFString *)v50;
    v11 = -[__CFString countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
    if (v11)
    {
      v55 = *(_QWORD *)v64;
      v51 = v10 & v8;
LABEL_4:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v64 != v55)
          objc_enumerationMutation(obj);
        v13 = *(__CFString **)(*((_QWORD *)&v63 + 1) + 8 * v12);
        -[__CFString characteristic](v13, "characteristic", v49);
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
        -[__CFString service](v14, "service");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "hapMetadata");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString type](v14, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "type");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v16, "requiresDeviceUnlock:forService:", v17, v18);

        if (v19)
        {
          objc_msgSend(v57, "hapMetadata");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString type](v14, "type");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString value](v13, "value");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v20, "allowsSecuringWriteFor:withValue:", v21, v22);

          if (((a3 == 1) & v23) == 0)
          {
            v24 = v51
                ? objc_msgSend(v57, "isCarPlayAccessAllowedForCharacteristic:withMessage:fromSource:", v14, v52, a3)
                : 0;
            if (((objc_msgSend(v57, "isAccessAllowedForCharacteristicsWithMessage:", v52) | v24) & 1) == 0)
              break;
          }
        }

        if (v11 == ++v12)
        {
          v11 = -[__CFString countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v63, v75, 16);
          if (v11)
            goto LABEL_4;
          goto LABEL_19;
        }
      }
      HMDSecureAccessErrorCodeForMessage(v52, a3);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = (void *)MEMORY[0x1D17BA0A0]();
      v26 = v57;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        if (a3 > 9)
          v29 = CFSTR("Unknown");
        else
          v29 = off_1E89ABF20[a3];
        v30 = v29;
        *(_DWORD *)buf = 138544130;
        v68 = v28;
        v69 = 2112;
        v70 = v13;
        v71 = 2112;
        v72 = v14;
        v73 = 2112;
        v74 = v30;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Write request (%@) for characteristic: %@ from source: %@ is attempting to perform a securing write", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v25);

      if (a3 != 1)
        goto LABEL_28;
      if (!v56)
        goto LABEL_34;
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = v26;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v68 = v34;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Checking siri unlock access for siri triggered write request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v31);
      objc_initWeak((id *)buf, v32);
      objc_msgSend(v32, "siriSecureAccessoryAccessController");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v58[0] = MEMORY[0x1E0C809B0];
      v58[1] = 3221225472;
      v58[2] = __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke;
      v58[3] = &unk_1E89BDD70;
      objc_copyWeak(&v62, (id *)buf);
      v61 = v49;
      v59 = obj;
      v36 = v56;
      v60 = v36;
      objc_msgSend(v35, "isUnsecuringSiriActionAllowedWithCompletion:", v58);

      objc_destroyWeak(&v62);
      objc_destroyWeak((id *)buf);

    }
    else
    {
LABEL_19:

      if (a3 == 1)
      {
LABEL_34:
        v43 = (void *)MEMORY[0x1D17BA0A0]();
        v44 = v57;
        HMFGetOSLogHandle();
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v47 = CFSTR("Siri");
          *(_DWORD *)buf = 138543874;
          v68 = v46;
          v69 = 2112;
          v70 = obj;
          v71 = 2112;
          v72 = CFSTR("Siri");
          _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_INFO, "%{public}@Access is allowed for write requests (%@) from source: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v43);
        (*((void (**)(id, uint64_t, _QWORD))v49 + 2))(v49, 1, 0);
      }
      else
      {
        v56 = 0;
LABEL_28:
        v37 = (void *)MEMORY[0x1D17BA0A0]();
        v38 = v57;
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          if (v56)
            v41 = CFSTR("denied");
          else
            v41 = CFSTR("allowed");
          if (a3 > 9)
            v42 = CFSTR("Unknown");
          else
            v42 = off_1E89ABF20[a3];
          v48 = v42;
          *(_DWORD *)buf = 138544130;
          v68 = v40;
          v69 = 2112;
          v70 = v41;
          v71 = 2112;
          v72 = obj;
          v73 = 2112;
          v74 = v48;
          _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Access is %@ for write requests (%@) from source: %@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v37);
        (*((void (**)(id, BOOL, void *))v49 + 2))(v49, v56 == 0, v56);

      }
    }
  }

}

void __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  const __CFString *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  _QWORD block[4];
  id v15;
  id v16;
  char v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = CFSTR("denied");
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v19 = v8;
      if (a2)
        v9 = CFSTR("allowed");
      v20 = 2112;
      v21 = v9;
      v22 = 2112;
      v23 = v10;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Access is %@ for write requests (%@) by siri watch authentication", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v6, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke_1214;
    block[3] = &unk_1E89B6038;
    v16 = *(id *)(a1 + 48);
    v17 = a2;
    v15 = *(id *)(a1 + 40);
    dispatch_async(v11, block);

  }
  else
  {
    v12 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v12 + 16))(v12, 0, v13);

  }
}

uint64_t __62__HMDHome__applyDeviceLockCheck_forSource_message_completion___block_invoke_1214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 48))
    v3 = 0;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(v2 + 16))(v2, *(_BYTE *)(a1 + 48) != 0, v3);
}

void __46__HMDHome__handleMultipleCharacteristicWrite___block_invoke(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  __CFString *v17;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _BYTE buf[18];
  __int16 v24;
  __int128 *v25;
  __int16 v26;
  __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v7 = WeakRetained;
  if ((a2 & 1) != 0)
  {
    v8 = *(void **)(a1 + 32);
    if (WeakRetained)
    {
      v9 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(WeakRetained, "startReportingSessionForMessage:", *(_QWORD *)(a1 + 32)));
      v10 = v7;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          objc_msgSend(*(id *)(a1 + 32), "identifier");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "getUUIDBytes:", buf);

        }
        else
        {
          *(_OWORD *)buf = *MEMORY[0x1E0D286F8];
        }
        v22 = *(_OWORD *)buf;
        v16 = *(_QWORD *)(a1 + 64);
        if (v16 > 9)
          v17 = CFSTR("Unknown");
        else
          v17 = off_1E89ABF20[v16];
        v18 = v17;
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        v24 = 2098;
        v25 = &v22;
        v26 = 2114;
        v27 = v18;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Handling multiple characteristics write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

      }
      objc_autoreleasePoolPop(v9);
      v20 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 64);
      objc_msgSend(v10, "__readWriteResponseHandler:unhandledRequests:", v20, *(_QWORD *)(a1 + 48));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "_writeCharacteristicValues:requestMessage:source:withCompletionHandler:", v19, v20, v21, v15);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "respondWithError:", v15);
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v5);
  }

}

void __38__HMDHome__handleCharacteristicWrite___block_invoke(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  __CFString *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  _BYTE buf[42];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v7 = WeakRetained;
  if ((a2 & 1) != 0)
  {
    if (WeakRetained)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = v7;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "shortDescription");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "UUIDString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "uniqueIdentifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(a1 + 64);
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v12;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v13;
        *(_WORD *)&buf[32] = 2112;
        *(_QWORD *)&buf[34] = v14;
        v34 = 2112;
        v35 = v15;
        v36 = 2112;
        v37 = v16;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Processing single characteristic write request: %@ (%@/%@/%@/%@) as a special case of multiple characteristic write requests", buf, 0x3Eu);

      }
      objc_autoreleasePoolPop(v8);
      v17 = parseMessageSource(*(void **)(a1 + 32));
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = v9;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        if (v22)
        {
          objc_msgSend(*(id *)(a1 + 32), "identifier");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "getUUIDBytes:", buf);

        }
        else
        {
          *(_OWORD *)buf = *MEMORY[0x1E0D286F8];
        }
        v32 = *(_OWORD *)buf;
        if (v17 > 9)
          v26 = CFSTR("Unknown");
        else
          v26 = off_1E89ABF20[v17];
        v27 = v26;
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v21;
        *(_WORD *)&buf[12] = 1042;
        *(_DWORD *)&buf[14] = 16;
        *(_WORD *)&buf[18] = 2098;
        *(_QWORD *)&buf[20] = &v32;
        *(_WORD *)&buf[28] = 2114;
        *(_QWORD *)&buf[30] = v27;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Handling single characteristic write request with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

      }
      objc_autoreleasePoolPop(v18);
      v31 = *(_QWORD *)(a1 + 72);
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v31, 1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = *(_QWORD *)(a1 + 32);
      objc_msgSend(v19, "__readWriteResponseHandler:unhandledRequests:", v29, 0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "_writeCharacteristicValues:requestMessage:source:withCompletionHandler:", v28, v29, v17, v30);

    }
    else
    {
      v24 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "respondWithError:", v25);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v5);
  }

}

void __109__HMDHome__addResponseTuplesFromDictionary_accessoryRequestMapTable_responseTuples_completedGroup_logEvents___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v4 = *(id *)(a1 + 32);
  v28 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v28)
  {
    v5 = *(_QWORD *)v30;
    v26 = *(_QWORD *)v30;
    v24 = v3;
    do
    {
      for (i = 0; i != v28; ++i)
      {
        if (*(_QWORD *)v30 != v5)
          objc_enumerationMutation(v4);
        v7 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_msgSend(v7, "characteristic");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "accessory");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = *(void **)(a1 + 40);

        if (v9 == v10)
        {
          objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 56));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", CFSTR("kRemoteMessageTransportAttributionKey"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "setTransportType:", objc_msgSend(v12, "intValue"));

          objc_msgSend(v7, "characteristic");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "objectForKey:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_msgSend(v11, "isSubmitted") & 1) == 0)
          {
            objc_msgSend(*(id *)(a1 + 72), "logEventSubmitter");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "error");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "submitLogEvent:error:", v11, v16);

            v5 = v26;
          }
          if (v14 && *(_QWORD *)(a1 + 80))
          {
            objc_msgSend(v14, "error");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v7, v17);
            v27 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v7, "characteristic");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "value");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "valueUpdatedTime");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "valueUpdatedStateNumber");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "characteristic");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "notificationContext");
            v22 = v4;
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "setValue:updatedTime:stateNumber:notificationContext:", v18, v19, v20, v23);

            v4 = v22;
            v3 = v24;

            v5 = v26;
            objc_msgSend(*(id *)(a1 + 80), "addObject:", v27);

          }
        }
      }
      v28 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v28);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

uint64_t __82__HMDHome__writeCharacteristicValues_requestMessage_source_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    v7 = "multi";
    if (!*(_BYTE *)(a1 + 72))
      v7 = "single";
    v9 = 138543618;
    v10 = v5;
    v11 = 2080;
    v12 = v7;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Final notification for multi-write (%s part)", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), 0, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void __74__HMDHome__createMessageForReadWriteRequest_source_withCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = _Block_copy(*(const void **)(a1 + 48));
  v9 = v8;
  if (v8)
    (*((void (**)(void *, id, id))v8 + 2))(v8, v5, v6);

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "shortDescription");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@The response handler became nil for read/write request message: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(WeakRetained, "setResponseHandler:", 0);
  }

}

uint64_t __129__HMDHome__waitForWriteRequestFanOut_requestMessage_source_responseTuples_failedAccessories_activity_waitGroup_failureWaitGroup___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v9;
  uint8_t buf[4];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "begin");
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "count");
    if (*(_BYTE *)(a1 + 96))
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v2 = *(id *)(a1 + 48);
    }
    v3 = v2;
    objc_msgSend(*(id *)(a1 + 32), "begin");
    v9 = *(id *)(a1 + 32);
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v11 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for write failed accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 56), "_redispatchWriteForAccessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v3);
    __HMFActivityScopeLeave();

    objc_msgSend(*(id *)(a1 + 40), "removeAllObjects");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  return objc_msgSend(*(id *)(a1 + 32), "end");
}

void __142__HMDHome__waitForEarlyDispatchTimeout_requestMessage_source_failedAccessories_responseTuples_activity_unreachableWaitGroup_failureWaitGroup___block_invoke(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  char v18;

  v2 = *(NSObject **)(a1 + 32);
  v3 = dispatch_time(0, 250000000);
  dispatch_group_wait(v2, v3);
  objc_msgSend(*(id *)(a1 + 40), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __142__HMDHome__waitForEarlyDispatchTimeout_requestMessage_source_failedAccessories_responseTuples_activity_unreachableWaitGroup_failureWaitGroup___block_invoke_2;
  block[3] = &unk_1E89A4DF0;
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  v18 = *(_BYTE *)(a1 + 104);
  v5 = *(id *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 40);
  v12 = v5;
  v13 = v6;
  v14 = *(id *)(a1 + 72);
  v15 = *(id *)(a1 + 80);
  v7 = *(id *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v16 = v7;
  v17 = v8;
  dispatch_async(v4, block);

}

void __142__HMDHome__waitForEarlyDispatchTimeout_requestMessage_source_failedAccessories_responseTuples_activity_unreachableWaitGroup_failureWaitGroup___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint8_t buf[4];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(*(id *)(a1 + 40), "copy");
  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(v2, "count");
    if (*(_BYTE *)(a1 + 96))
    {
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = *(id *)(a1 + 48);
    }
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "begin");
    v9 = *(id *)(a1 + 32);
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v7 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v11 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Beginning bulk redispatch for unreachable write failed accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 56), "_redispatchWriteForAccessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:", v2, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v4);
    __HMFActivityScopeLeave();

    objc_msgSend(*(id *)(a1 + 40), "removeObjectsInArray:", v2);
  }

}

void __141__HMDHome__sendWriteRequestToAccessoryServer_requestMessage_source_failedAccessories_responseTuples_activity_waitGroup_unreachableWaitGroup___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[128];
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "uniqueIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v32 = v7;
    v33 = 2112;
    v34 = v8;
    v35 = 2112;
    v36 = v9;
    v37 = 2048;
    v38 = objc_msgSend(v3, "count");
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Completed write for accessory %@/%@ with %ld responses", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v10 = v3;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (!v11)
  {
LABEL_15:

    goto LABEL_20;
  }
  v12 = v11;
  v13 = *(_QWORD *)v27;
  v14 = *MEMORY[0x1E0CB8C70];
LABEL_5:
  v15 = 0;
  while (1)
  {
    if (*(_QWORD *)v27 != v13)
      objc_enumerationMutation(v10);
    objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v15), "error", (_QWORD)v26);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "domain");

    objc_msgSend(v16, "code");
    if (!v16)
      goto LABEL_13;
    objc_msgSend(v16, "domain");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v17, "isEqualToString:", v14) & 1) == 0)
    {

      goto LABEL_13;
    }
    v18 = objc_msgSend(v16, "code");

    if (v18 == 4)
      break;
LABEL_13:

    if (v12 == ++v15)
    {
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v12)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  v19 = (void *)MEMORY[0x1D17BA0A0]();
  v20 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(a1 + 40);
    HMFBooleanToString();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v32 = v23;
    v33 = 2112;
    v34 = v24;
    v35 = 2112;
    v36 = v25;
    _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Write for accessory with UUID: %@ failed with unreachable error, can forward to resident: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v19);

  if (*(_BYTE *)(a1 + 112))
  {
    objc_msgSend(*(id *)(a1 + 64), "addObject:", *(_QWORD *)(a1 + 48));
    goto LABEL_23;
  }
LABEL_20:
  if (*(_BYTE *)(a1 + 113))
    objc_msgSend(*(id *)(a1 + 32), "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v10, *(_QWORD *)(a1 + 72), 1, 1, *(_QWORD *)(a1 + 80), 0);
  else
    objc_msgSend(*(id *)(a1 + 88), "addObjectsFromArray:", v10);
LABEL_23:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));

}

void __117__HMDHome__passWriteRequestToCompanion_requestMessage_source_remoteAccessories_responseTuples_withCompletionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;
  id v9;
  char v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __117__HMDHome__passWriteRequestToCompanion_requestMessage_source_remoteAccessories_responseTuples_withCompletionHandler___block_invoke_2;
    v5[3] = &unk_1E89A9F98;
    v5[4] = v3;
    v10 = *(_BYTE *)(a1 + 72);
    v6 = *(id *)(a1 + 32);
    v7 = *(id *)(a1 + 40);
    v8 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 56);
    dispatch_async(v4, v5);

  }
}

uint64_t __117__HMDHome__passWriteRequestToCompanion_requestMessage_source_remoteAccessories_responseTuples_withCompletionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 72))
    v3 = 0;
  else
    v3 = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v2, "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v3, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72) != 0, 0, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

uint64_t __147__HMDHome__loadBalanceWriteRequestOnResidentForAccessory_accessoryWriteRequestMapTable_requestMessage_source_responseTuples_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint8_t v59[128];
  uint8_t buf[4];
  uint64_t v61;
  __int16 v62;
  const char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    v7 = "multi";
    if (!*(_BYTE *)(a1 + 96))
      v7 = "single";
    *(_DWORD *)buf = 138543618;
    v61 = v5;
    v62 = 2080;
    v63 = v7;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Final notification for multi-write - loadBalanceGroup primary resident (%s part)", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    objc_msgSend(*(id *)(a1 + 48), "dictionaryForKey:", CFSTR("kAccessoriesListKey"));
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = *(void **)(a1 + 32);
    v10 = *(double *)(a1 + 80);
    v12 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 48), "userForHome:", v9);
    v13 = a1;
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(v13 + 88);
    objc_msgSend(*(id *)(v13 + 48), "applicationBundleIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = (void *)v8;
    objc_msgSend(v9, "_getLogEventsForOperation:startTime:accessories:requestMap:identifier:userUUID:source:bundleID:", 1, v8, v12, v11, v15, v16, v10, v17);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v49 = v13;
    v19 = *(id *)(v13 + 40);
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v55;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v55 != v22)
            objc_enumerationMutation(v19);
          v24 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
          objc_msgSend(v24, "request");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "characteristic");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "accessory");
          v27 = (void *)objc_claimAutoreleasedReturnValue();

          if (v27)
          {
            objc_msgSend(v24, "error");
            v28 = (void *)objc_claimAutoreleasedReturnValue();

            if (v28)
            {
              objc_msgSend(v27, "bridge");
              v29 = objc_claimAutoreleasedReturnValue();
              v30 = (void *)v29;
              if (v29)
                v31 = (void *)v29;
              else
                v31 = v27;
              v32 = v31;

              objc_msgSend(v24, "error");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v32, "uuid");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "UUIDString");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "setObject:forKeyedSubscript:", v33, v35);

              v27 = v32;
            }
          }

        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
      }
      while (v21);
    }

    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v36 = v47;
    v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
    a1 = v49;
    if (v37)
    {
      v38 = v37;
      v39 = *(_QWORD *)v51;
      do
      {
        for (j = 0; j != v38; ++j)
        {
          if (*(_QWORD *)v51 != v39)
            objc_enumerationMutation(v36);
          v41 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * j);
          objc_msgSend(*(id *)(a1 + 32), "logEventSubmitter");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "objectForKeyedSubscript:", v41);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "objectForKeyedSubscript:", v41);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          if (v44)
          {
            objc_msgSend(v18, "objectForKeyedSubscript:", v41);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "submitLogEvent:error:", v43, v45);

          }
          else
          {
            objc_msgSend(v42, "submitLogEvent:error:", v43, 0);
          }

          a1 = v49;
        }
        v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
      }
      while (v38);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 96), 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72));
}

void __104__HMDHome__redispatchWriteForAccessories_dispatchGroup_requestMap_requestMessage_source_responseTuples___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDCharacteristicReadWriteLogEvent *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDCharacteristicReadWriteLogEvent *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id obj;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = v4;
  v32 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
  if (v32)
  {
    v31 = *(_QWORD *)v42;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v42 != v31)
          objc_enumerationMutation(obj);
        v34 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * v6);
        v35 = v6;
        objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v10 = v7;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v38;
          do
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v38 != v13)
                objc_enumerationMutation(v10);
              v15 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
              v16 = *(void **)(a1 + 40);
              +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v15, v5);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "addObject:", v17);

              objc_msgSend(v15, "characteristic");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "addObject:", v18);

              objc_msgSend(v15, "value");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              if (v19)
              {
                objc_msgSend(v9, "addObject:", v19);
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0C99E38], "null");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v9, "addObject:", v20);

              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
          }
          while (v12);
        }

        v21 = [HMDCharacteristicReadWriteLogEvent alloc];
        v33 = *(_QWORD *)(a1 + 64);
        objc_msgSend(*(id *)(a1 + 48), "identifier");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "applicationBundleIdentifier");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "userForHome:", *(_QWORD *)(a1 + 56));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v29) = 0;
        LOBYTE(v28) = 1;
        v26 = -[HMDCharacteristicReadWriteLogEvent initWithCharacteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:userUUID:writtenValues:](v21, "initWithCharacteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:userUUID:writtenValues:", v8, v34, 0, v33, 1, 0, v28, v22, v29, v23, v25, v9);

        objc_msgSend(*(id *)(a1 + 56), "logEventSubmitter");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "submitLogEvent:error:", v26, v5);

        v6 = v35 + 1;
      }
      while (v35 + 1 != v32);
      v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
    }
    while (v32);
  }

}

void __126__HMDHome__reallyRedispatchWritesToDevice_accessories_dispatchGroup_requestMap_requestMessage_source_responseTuples_activity___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1220(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  void **p_cache;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  id v20;
  void *v21;
  id v22;
  void *v23;
  int v24;
  void *v25;
  id v26;
  NSObject *v27;
  _BOOL4 v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t k;
  id v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  id obj;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  _QWORD v61[4];
  id v62;
  _QWORD v63[6];
  id v64;
  id v65;
  id v66;
  id v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint8_t v85[128];
  uint8_t buf[4];
  void *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  void *v91;
  _BYTE v92[128];
  _BYTE v93[128];
  _BYTE v94[128];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v81, v94, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v82;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v82 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v81 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "removeObjectForKey:", v7);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDCharacteristicResponse responsesWithRequests:error:](HMDCharacteristicResponse, "responsesWithRequests:error:", v8, v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(a1 + 56), "addObjectsFromArray:", v10);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v81, v94, 16);
    }
    while (v4);
  }

  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  objc_msgSend(*(id *)(a1 + 64), "keyEnumerator");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v77, v93, 16);
  if (v56)
  {
    v11 = 0x1E0C99000uLL;
    v55 = *(_QWORD *)v78;
    p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v78 != v55)
          objc_enumerationMutation(obj);
        v57 = v13;
        v14 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * v13);
        objc_msgSend(*(id *)(v11 + 3592), "dictionary");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 64), "objectForKey:", *(_QWORD *)(a1 + 72));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v73 = 0u;
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v59 = v15;
        v16 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v73, v92, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v74;
          do
          {
            for (j = 0; j != v17; ++j)
            {
              if (*(_QWORD *)v74 != v18)
                objc_enumerationMutation(v59);
              v20 = *(id *)(*((_QWORD *)&v73 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v21 = v20;
              else
                v21 = 0;
              v22 = v21;

              objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v22);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(p_cache + 328, "appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteWrite:message:", v60, *(_QWORD *)(a1 + 56), v23, *(_QWORD *)(a1 + 80));

            }
            v17 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v73, v92, 16);
          }
          while (v17);
        }

        v24 = objc_msgSend(v14, "isCurrentDevice");
        v25 = (void *)MEMORY[0x1D17BA0A0]();
        v26 = *(id *)(a1 + 88);
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
        if (v24)
        {
          if (v28)
          {
            HMFGetLogIdentifier();
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v87 = v29;
            v88 = 2112;
            v89 = v60;
            v90 = 2112;
            v91 = v14;
            _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Writing to accessories: %@ on current Device: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v25);
          objc_msgSend(v60, "count");
          v69 = 0u;
          v70 = 0u;
          v71 = 0u;
          v72 = 0u;
          v30 = v59;
          v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
          if (v31)
          {
            v32 = v31;
            v58 = v30;
            v33 = *(_QWORD *)v70;
            do
            {
              for (k = 0; k != v32; ++k)
              {
                if (*(_QWORD *)v70 != v33)
                  objc_enumerationMutation(v58);
                v35 = *(id *)(*((_QWORD *)&v69 + 1) + 8 * k);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v36 = v35;
                else
                  v36 = 0;
                v37 = v36;

                objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v37);
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                if (v38)
                {
                  dispatch_group_enter(*(dispatch_group_t *)(a1 + 96));
                  v39 = *(_QWORD *)(a1 + 104);
                  v40 = *(_QWORD *)(a1 + 80);
                  objc_msgSend(*(id *)(a1 + 88), "workQueue");
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  v63[0] = MEMORY[0x1E0C809B0];
                  v63[1] = 3221225472;
                  v63[2] = __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1224;
                  v63[3] = &unk_1E89A4D50;
                  v63[4] = *(_QWORD *)(a1 + 88);
                  v63[5] = v35;
                  v42 = v37;
                  v64 = v42;
                  v68 = *(_BYTE *)(a1 + 112);
                  v65 = *(id *)(a1 + 80);
                  v66 = *(id *)(a1 + 56);
                  v67 = *(id *)(a1 + 96);
                  objc_msgSend(v42, "writeCharacteristicValues:source:message:queue:completionHandler:", v38, v39, v40, v41, v63);

                }
              }
              v32 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
            }
            while (v32);
            v11 = 0x1E0C99000;
            v30 = v58;
          }
LABEL_48:

          p_cache = (void **)(HMDCloudSyncLegacyFetchLogEvent + 16);
          goto LABEL_49;
        }
        if (v28)
        {
          HMFGetLogIdentifier();
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v87 = v43;
          v88 = 2112;
          v89 = v60;
          v90 = 2112;
          v91 = v14;
          _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Dispatching accessories: %@ to resident: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v25);
        v44 = *(id *)(a1 + 32);
        objc_msgSend(v60, "count");
        objc_msgSend(v14, "identifier");
        v45 = (void *)objc_claimAutoreleasedReturnValue();

        p_cache = (void **)(HMDCloudSyncLegacyFetchLogEvent + 16);
        if (*(_QWORD *)(a1 + 48))
        {
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 96));
          if (*(_BYTE *)(a1 + 112))
            v46 = *(_QWORD *)(a1 + 80);
          else
            v46 = 0;
          v47 = *(void **)(a1 + 88);
          v48 = *(_QWORD *)(a1 + 48);
          v49 = *(_QWORD *)(a1 + 56);
          objc_msgSend(v47, "primaryResident");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "device");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v14, "isEqual:", v51))
            v14 = 0;
          v61[0] = MEMORY[0x1E0C809B0];
          v61[1] = 3221225472;
          v61[2] = __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1228;
          v61[3] = &unk_1E89C0E20;
          v52 = *(_QWORD *)(a1 + 104);
          v62 = *(id *)(a1 + 96);
          objc_msgSend(v47, "_writeCharacteristicValuesForAccessories:writeRequestMap:responseTuples:requestMessage:viaDevice:source:completionHandler:", v60, v48, v49, v46, v14, v52, v61);

          v30 = v62;
          goto LABEL_48;
        }
LABEL_49:

        v13 = v57 + 1;
      }
      while (v57 + 1 != v56);
      v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v77, v93, 16);
    }
    while (v56);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
  return objc_msgSend(*(id *)(a1 + 32), "end");
}

void __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1224(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "uniqueIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138544386;
    v15 = v7;
    v16 = 2112;
    v17 = v8;
    v18 = 2112;
    v19 = v10;
    v20 = 2112;
    v21 = v11;
    v22 = 2048;
    v23 = objc_msgSend(v3, "count");
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Load Balance completed write for accessory %@/%@/%@ with %ld responses", (uint8_t *)&v14, 0x34u);

  }
  objc_autoreleasePoolPop(v4);
  if (*(_BYTE *)(a1 + 80))
  {
    v12 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 56), "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v3, v13, 1, 1, *(_QWORD *)(a1 + 56), 0);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 64), "addObjectsFromArray:", v3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

}

void __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke_1228(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __116__HMDHome__loadBalancedRedispatchForAccessories_source_dispatchGroup_writeRequestMap_requestMessage_responseTuples___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = a3;
  objc_msgSend(a2, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "compare:", v8);

  return v9;
}

void __133__HMDHome__writeCharacteristicValuesForAccessories_writeRequestMap_responseTuples_requestMessage_viaDevice_source_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  __int128 v33;
  void *v34;
  id v35;
  void *v36;
  id obj;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t v48[128];
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  uint64_t v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v35 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "begin");
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = 0u;
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      obj = *(id *)(a1 + 40);
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
      if (!v39)
        goto LABEL_31;
      v38 = *(_QWORD *)v45;
      *(_QWORD *)&v8 = 138543618;
      v33 = v8;
      v36 = v7;
      v34 = WeakRetained;
      while (1)
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v45 != v38)
            objc_enumerationMutation(obj);
          v10 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * v9);
          v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v10);
          objc_msgSend(WeakRetained, "accessoryWithUUID:", v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v13 = v12;
          else
            v13 = 0;
          v14 = v13;

          if ((objc_msgSend(v14, "isPrimary") & 1) != 0)
          {
            v15 = v14;
LABEL_16:
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v15, v33);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = v16;
            if (v16)
            {
              v42 = 0u;
              v43 = 0u;
              v40 = 0u;
              v41 = 0u;
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
              if (v18)
              {
                v19 = v18;
                v20 = *(_QWORD *)v41;
                do
                {
                  v21 = 0;
                  do
                  {
                    if (*(_QWORD *)v41 != v20)
                      objc_enumerationMutation(v17);
                    +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * v21), v5);
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(*(id *)(a1 + 56), "addObject:", v22);

                    ++v21;
                  }
                  while (v19 != v21);
                  v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
                }
                while (v19);
              }
              v23 = *(void **)(a1 + 64);
              objc_msgSend(v15, "uuid");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "UUIDString");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "objectForKeyedSubscript:", v25);
              v26 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("kRemoteMessageTransportAttributionKey"));
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v26, "setTransportType:", objc_msgSend(v27, "intValue"));

              WeakRetained = v34;
              objc_msgSend(v34, "logEventSubmitter");
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v28, "submitLogEvent:error:", v26, v5);

              v7 = v36;
            }

            goto LABEL_29;
          }
          objc_msgSend(v14, "bridge");
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          if (v15)
          {
            if ((objc_msgSend(v7, "containsObject:", v15) & 1) != 0)
              goto LABEL_29;
            objc_msgSend(v7, "addObject:", v15);
            goto LABEL_16;
          }
          v29 = (void *)MEMORY[0x1D17BA0A0]();
          v30 = WeakRetained;
          HMFGetOSLogHandle();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v33;
            v50 = v32;
            v51 = 2112;
            v52 = v10;
            _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping write responses for nil-ed out accessory with UUID %@", buf, 0x16u);

            v7 = v36;
          }

          objc_autoreleasePoolPop(v29);
          v15 = 0;
LABEL_29:

          ++v9;
        }
        while (v9 != v39);
        v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
        if (!v39)
        {
LABEL_31:

          dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
          goto LABEL_33;
        }
      }
    }
    objc_msgSend(WeakRetained, "_addResponseTuplesFromDictionary:accessoryRequestMapTable:responseTuples:completedGroup:logEvents:", v35, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 64));
LABEL_33:
    objc_msgSend(*(id *)(a1 + 32), "end", v33);
  }

}

void __133__HMDHome__writeCharacteristicValuesForAccessories_writeRequestMap_responseTuples_requestMessage_viaDevice_source_completionHandler___block_invoke_1217(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:", *(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (void *)MEMORY[0x1D17BA0A0](v2);
  v5 = *(id *)(a1 + 56);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v8;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Completed all the writes and sending notification.", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v9 = objc_msgSend(*(id *)(a1 + 48), "BOOLForKey:", CFSTR("kMultiPartResponseKey"));
    v10 = *(void **)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:", v11, v12, v9, v9, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64));

  }
  else
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v13;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Completed all the writes and delaying notification.", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v14 = *(_QWORD *)(a1 + 64);
    if (v14)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v14 + 16))(v14, 0, 0);
  }
}

uint64_t __61__HMDHome_requiresUnlockToAccessCharacteristics_withMessage___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "hapMetadata");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "service");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "type");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "requiresDeviceUnlock:forService:", v5, v7);

  return v8;
}

void __94__HMDHome_writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler___block_invoke(id *a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  id v21[3];
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 8;
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (objc_msgSend(WeakRetained, "_shouldWaitForAccessoriesToBeReachable"))
    {
      v5 = a1[4];
      objc_msgSend(v4, "workQueue");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDHomeAssistantOperation homeAssistantOperationWithWriteRequests:queue:](HMDHomeAssistantOperation, "homeAssistantOperationWithWriteRequests:queue:", v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __94__HMDHome_writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler___block_invoke_1203;
      v16[3] = &unk_1E89A4CB8;
      objc_copyWeak(v21, v2);
      v20 = a1[7];
      v17 = a1[5];
      v8 = a1[4];
      v9 = a1[9];
      v18 = v8;
      v21[1] = v9;
      v10 = a1[6];
      v11 = a1[10];
      v19 = v10;
      v21[2] = v11;
      objc_msgSend(v4, "_performOperation:completion:", v7, v16);

      objc_destroyWeak(v21);
    }
    else
    {
      objc_msgSend(a1[5], "begin");
      -[HMDHome _writeCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v4, a1[4], a1[9], a1[6], a1[10], a1[7], a1[5]);
    }
  }
  else
  {
    if (a1[7])
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(void))a1[7] + 2))();

    }
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v23 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
  }

}

void __94__HMDHome_writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler___block_invoke_1203(id *a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  if (WeakRetained)
  {
    objc_msgSend(a1[4], "begin");
    -[HMDHome _writeCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](WeakRetained, a1[5], a1[9], a1[6], a1[10], a1[7], a1[4]);
  }
  else
  {
    if (a1[7])
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(void))a1[7] + 2))();

    }
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }

}

- (void)_writeCharacteristicValues:(void *)a3 source:(void *)a4 identifier:(void *)a5 qualityOfService:(void *)a6 withCompletionHandler:(void *)a7 activity:
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  id v30;
  id v33;
  id v34;
  id v35;
  id obj;
  void *v37;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42;
  id v43;
  id v44[3];
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v33 = a4;
  v34 = a6;
  v35 = a7;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v10, "count"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = v10;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v47 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
        objc_msgSend(v14, "characteristic");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "authorizationData");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "home");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "currentUser");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "notificationContextHAPIdentifier");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "contextDataForWriteRequestWithIdentifier:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v14, "value");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:", v15, v21, v16, 0, objc_msgSend(v14, "requestType"), objc_msgSend(v14, "includeResponseValue"), v20);
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v37, "addObject:", v22);
      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
    }
    while (v11);
  }

  objc_msgSend(a1, "deviceLockStateDataSource");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v23, "isPasscodeEnabled") & 1) == 0)
  {

    goto LABEL_14;
  }
  objc_msgSend(a1, "deviceLockStateDataSource");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "isLocked");

  if (v25)
  {
LABEL_14:
    objc_initWeak((id *)buf, a1);
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 3221225472;
    v39[2] = __104__HMDHome__writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler_activity___block_invoke;
    v39[3] = &unk_1E89A4CE0;
    objc_copyWeak(v44, (id *)buf);
    v30 = v34;
    v45 = 1;
    v43 = v30;
    v44[1] = a3;
    v40 = v35;
    v41 = v37;
    v42 = v33;
    v44[2] = a5;
    -[HMDHome _applyDeviceLockCheck:forSource:message:completion:](a1, v41, (unint64_t)a3, 0, v39);

    objc_destroyWeak(v44);
    objc_destroyWeak((id *)buf);
    goto LABEL_15;
  }
  v26 = (void *)MEMORY[0x1D17BA0A0]();
  v27 = a1;
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v51 = v29;
    _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Allowing characteristic write because device lock check is not required", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v26);
  -[HMDHome _performAllowedWriteCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v27, v37, (unint64_t)a3, v33, (uint64_t)a5, v34, v35);
LABEL_15:

}

void __104__HMDHome__writeCharacteristicValues_source_identifier_qualityOfService_withCompletionHandler_activity___block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  const __CFString *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (a2)
        v11 = CFSTR("Allowing");
      else
        v11 = CFSTR("Denying");
      NSStringFromBOOL();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 72);
      v20 = 138544386;
      v21 = v10;
      v22 = 2112;
      v23 = v11;
      v24 = 2112;
      v25 = v12;
      v26 = 2048;
      v27 = v13;
      v28 = 2112;
      v29 = v5;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@%@ characteristic write passcode=%@, source=%lu : %@", (uint8_t *)&v20, 0x34u);

    }
    objc_autoreleasePoolPop(v7);
    if ((a2 & 1) != 0)
    {
      -[HMDHome _performAllowedWriteCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:activity:](v8, *(void **)(a1 + 40), *(_QWORD *)(a1 + 72), *(void **)(a1 + 48), *(_QWORD *)(a1 + 80), *(void **)(a1 + 56), *(void **)(a1 + 32));
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 56);
      if (v19)
        (*(void (**)(uint64_t, id, _QWORD))(v19 + 16))(v19, v5, 0);
      objc_msgSend(*(id *)(a1 + 32), "end");
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 56);
    if (v14)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v14 + 16))(v14, v15, 0);

    }
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot perform write request", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
  }

}

- (void)_performAllowedWriteCharacteristicValues:(unint64_t)a3 source:(void *)a4 identifier:(uint64_t)a5 qualityOfService:(void *)a6 withCompletionHandler:(void *)a7 activity:
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  __CFString *v27;
  __CFString *v28;
  id v29;
  id v30;
  __int128 v31;
  _BYTE buf[18];
  __int16 v33;
  __int128 *v34;
  __int16 v35;
  __CFString *v36;
  _QWORD v37[2];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  v30 = a2;
  v13 = a4;
  v14 = a6;
  v15 = a7;
  v37[0] = CFSTR("sourceType");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = CFSTR("kMultiPartResponseKey");
  v38[0] = v16;
  v38[1] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = objc_alloc(MEMORY[0x1E0D285F8]);
  objc_msgSend(MEMORY[0x1E0D285D8], "allMessageDestinations");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v18, "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicWriteRequestKey"), a5, v19, v17);

  v21 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v20, "setIdentifier:", v13));
  v22 = a1;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    v29 = v13;
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    objc_msgSend(v20, "identifier");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
    {
      objc_msgSend(v20, "identifier");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "getUUIDBytes:", buf);

    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x1E0D286F8];
    }
    v31 = *(_OWORD *)buf;
    if (a3 > 9)
      v27 = CFSTR("Unknown");
    else
      v27 = off_1E89ABF20[a3];
    v28 = v27;
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    v33 = 2098;
    v34 = &v31;
    v35 = 2114;
    v36 = v28;
    _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Performing allowed write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

    v13 = v29;
  }

  objc_autoreleasePoolPop(v21);
  objc_msgSend(v22, "_writeCharacteristicValues:requestMessage:source:withCompletionHandler:", v30, v20, a3, v14);
  objc_msgSend(v15, "end");

}

void __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(void *, _QWORD, _QWORD))v2 + 2))(v2, 0, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

void __131__HMDHome__notifyChangedCharacteristics_identifier_multiPartResponse_moreMessagesInMultipart_requestMessage_withCompletionHandler___block_invoke_1202(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    (*((void (**)(void *, _QWORD, _QWORD))v2 + 2))(v2, 0, *(_QWORD *)(a1 + 32));
    v2 = v3;
  }

}

uint64_t __168__HMDHome__sendClientCharacteristicsChangedNotificationWithIdentifier_requestMessage_multiPartResponse_moreInMultiPartResponse_characteristicChanges_completionHandler___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __71__HMDHome_notifyRemoteUsersOfChangedCharacteristics_message_broadcast___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyRemoteUsersOfChangedCharacteristics:message:broadcast:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

void __95__HMDHome_notifyOfChangedCharacteristic_changedByThisDevice_residentShouldNotifyPeers_message___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v5[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v4) = 0;
  objc_msgSend(v2, "_postInternalNotificationForChangedCharacteristics:previouslyNilChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:", v3, MEMORY[0x1E0C9AA60], 0, *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(_QWORD *)(a1 + 48), v4);

}

uint64_t __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_shouldUseAttributeReportForBulletin:", a2);
}

uint64_t __186__HMDHome__postInternalNotificationForChangedCharacteristics_previouslyNilChangedCharacteristics_modifiedCharacteristics_changedByThisDevice_residentShouldNotifyPeers_message_broadcast___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateBulletinBoardOfChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:changeNotificationFromPrimary:", a3, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
}

void __53__HMDHome__handleCharacteristicsChangedNotification___block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "hm_allKeys");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_notifyChangedCharacteristics:message:modifiedCharacteristics:broadcast:", v4, *(_QWORD *)(a1 + 32), v5, 0);

  }
}

uint64_t __74__HMDHome_notifyRemoteUsersOfChangedProperties_requestMessageInformation___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyRemoteUsersOfChangedProperties:requestMessageInformation:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __26__HMDHome__userForDevice___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "account");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "account");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqual:", v4);

  return v5;
}

void __54__HMDHome__sendInvitationCancelationRequestToInvitee___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v10)
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "UUIDString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543874;
      v18 = v11;
      v19 = 2112;
      v20 = v13;
      v21 = 2112;
      v22 = v5;
      v14 = "%{public}@Failed to cancel invitation state for invitee with identifier %@ due to error %@";
      v15 = v9;
      v16 = 32;
LABEL_6:
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v17, v16);

    }
  }
  else if (v10)
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "UUIDString");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543618;
    v18 = v11;
    v19 = 2112;
    v20 = v13;
    v14 = "%{public}@Canceled invitation state for invitee with identifier %@";
    v15 = v9;
    v16 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v7);
}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Finished deleting the outgoing invitation with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1179(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1180(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  id WeakRetained;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = shouldLogPrivateInformation();
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "userID");
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "displayName");
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v29 = v9;
      v30 = 2112;
      v31 = v10;
      v32 = 2112;
      v33 = v11;
      v34 = 2112;
      v35 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Added user with userID: %@ and displayName: %@ with error: %@", buf, 0x2Au);

    }
  }
  else if (v8)
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v29 = v12;
    v30 = 2112;
    v31 = CFSTR("...");
    v32 = 2112;
    v33 = CFSTR("...");
    v34 = 2112;
    v35 = v3;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Added user with userID: %@ and displayName: %@ with error: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  v13 = *(NSObject **)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  v20 = MEMORY[0x1E0C809B0];
  v21 = 3221225472;
  v22 = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1181;
  v23 = &unk_1E89BF278;
  v24 = *(id *)(a1 + 56);
  objc_copyWeak(&v27, (id *)(a1 + 104));
  v25 = *(id *)(a1 + 64);
  v26 = *(id *)(a1 + 72);
  dispatch_group_notify(v13, v14, &v20);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  v16 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "homeManager", v20, v21, v22, v23, v24, v25);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "sendUserAdded:destination:toHome:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), v16);

  }
  v18 = _Block_copy(*(const void **)(a1 + 96));
  v19 = v18;
  if (v18)
    (*((void (**)(void *, _QWORD))v18 + 2))(v18, *(_QWORD *)(a1 + 88));

  objc_destroyWeak(&v27);
}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_1181(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_2;
  v3[3] = &unk_1E89BCB20;
  objc_copyWeak(&v6, (id *)(a1 + 56));
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "run:", v3);

  objc_destroyWeak(&v6);
}

void __147__HMDHome___handleAcceptedOutgoingInvitationResponse_destinationAddress_publicKey_username_issuerPublicKeyER_presenceAuthStatus_completionHandler___block_invoke_2(id *a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  HMDOutgoingHomeInvitationModel *v7;
  void *v8;
  void *v9;
  HMDOutgoingHomeInvitationModel *v10;
  void *v11;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v11 = WeakRetained;
    v3 = objc_msgSend(a1[4], "count");
    WeakRetained = v11;
    if (v3)
    {
      objc_msgSend(v11, "backingStore");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "transaction:options:", CFSTR("kAddUserRequestKey"), v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v7 = [HMDOutgoingHomeInvitationModel alloc];
      objc_msgSend(a1[5], "identifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 2, v8, v9);

      -[HMDOutgoingHomeInvitationModel setOperationIdentifiers:](v10, "setOperationIdentifiers:", a1[4]);
      objc_msgSend(v6, "add:", v10);
      objc_msgSend(v6, "run");

      WeakRetained = v11;
    }
  }

}

void __42__HMDHome__handleRemoveUserModel_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5 && objc_msgSend(v5, "code") != 2)
    {
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = WeakRetained;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543618;
        v26 = v24;
        v27 = 2112;
        v28 = v5;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Unable to remove user: %@", (uint8_t *)&v25, 0x16u);

      }
      objc_autoreleasePoolPop(v21);
    }
    else
    {
      if (objc_msgSend(v5, "code") == 2)
      {
        v8 = (void *)MEMORY[0x1D17BA0A0]();
        v9 = WeakRetained;
        HMFGetOSLogHandle();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = 138543618;
          v26 = v11;
          v27 = 2112;
          v28 = v5;
          _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Treating user removed message error as success: %@", (uint8_t *)&v25, 0x16u);

        }
        objc_autoreleasePoolPop(v8);
      }
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v13 = WeakRetained;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = *(void **)(a1 + 32);
        v25 = 138543618;
        v26 = v15;
        v27 = 2112;
        v28 = v16;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Successfully sent removed user message for user: %@", (uint8_t *)&v25, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
      objc_msgSend(v13, "removedUsers");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "removeObject:", *(_QWORD *)(a1 + 32));

    }
    objc_msgSend(*(id *)(a1 + 32), "setRemovalInProgress:", 0);
  }
  else
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v20;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home during user removal", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
  }

}

void __211__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_issuerPublicKeyER_message_messageResponseHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD v33[4];
  id v34;
  uint8_t buf[4];
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!v3)
  {
    +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "accountForHandle:", *(_QWORD *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v6, "isAuthenticated"))
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v36 = v10;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Received authenticated invitation response", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v7);
      objc_msgSend(*(id *)(a1 + 48), "user");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "identifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setAccountIdentifier:", v12);

    }
    if (*(_QWORD *)(a1 + 56))
    {
      objc_msgSend(*(id *)(a1 + 48), "user");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDUser userIDForAccountHandle:](HMDUser, "userIDForAccountHandle:", *(_QWORD *)(a1 + 56));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setUserID:", v14);

    }
    v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28658]), "initWithPairingKeyData:", *(_QWORD *)(a1 + 64));
    v15 = objc_msgSend(objc_alloc(MEMORY[0x1E0D165A8]), "initWithIdentifier:publicKey:privateKey:permissions:", *(_QWORD *)(a1 + 72), v32, 0, 0);
    objc_msgSend(*(id *)(a1 + 40), "homeManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "user");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v18 = v17;
    else
      v18 = 0;
    v19 = v18;

    v30 = (void *)v15;
    v31 = v6;
    if (v19)
    {
      objc_msgSend(v19, "device");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        objc_msgSend(v16, "identityRegistry");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "user");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "registerIdentity:device:object:", v15, v20, v22);

LABEL_18:
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "user");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "account");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20)
      {
        objc_msgSend(v16, "identityRegistry");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "registerIdentity:account:object:", v15, v20, *(_QWORD *)(a1 + 48));
        goto LABEL_18;
      }
    }

    v24 = *(void **)(a1 + 40);
    v25 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(a1 + 64);
    v26 = *(_QWORD *)(a1 + 72);
    v29 = *(_QWORD *)(a1 + 80);
    v28 = *(_QWORD *)(a1 + 88);
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __211__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1167;
    v33[3] = &unk_1E89C1A48;
    v34 = *(id *)(a1 + 96);
    objc_msgSend(v24, "__handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:issuerPublicKeyER:presenceAuthStatus:completionHandler:", v25, v29, v27, v26, 0, v28, v33);

    goto LABEL_20;
  }
  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
    (*(void (**)(uint64_t, id, _QWORD))(v4 + 16))(v4, v3, 0);
LABEL_20:

}

uint64_t __211__HMDHome__handleUpdateRequestForHomeInvitation_controllerPublicKey_controllerUsername_invitationState_presenceAuthStatus_preferredUserID_fromHandle_fromAddress_issuerPublicKeyER_message_messageResponseHandler___block_invoke_1167(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, a2, 0);
  return result;
}

uint64_t __34__HMDHome_doesThisHomeHaveCameras__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  v5 = v4;
  if (v4)
    v6 = objc_msgSend(v4, "hasCameraStreamService");
  else
    v6 = 0;

  return v6;
}

void __86__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification___block_invoke(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = WeakRetained;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "identifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Expiring invitation %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(v3, "updateInvitationState:", objc_msgSend(v3, "invitationState"));
    objc_msgSend(a1[4], "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "saveWithReason:postSyncNotification:", v9, 0);

  }
}

void __86__HMDHome__sendInvitation_message_shareURL_shareToken_suppressHomeInviteNotification___block_invoke_1157(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  uint64_t v15;
  void *v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  int v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v3)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 32);
    v18 = 138543874;
    v19 = v9;
    v20 = 2112;
    v21 = v10;
    v22 = 2112;
    v23 = v3;
    v11 = "%{public}@Failed to send invite to user, %@, with error: %@";
    v12 = v8;
    v13 = OS_LOG_TYPE_ERROR;
    v14 = 32;
  }
  else
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 32);
    v18 = 138543618;
    v19 = v9;
    v20 = 2112;
    v21 = v15;
    v11 = "%{public}@Successfully sent invite to user: %@";
    v12 = v8;
    v13 = OS_LOG_TYPE_INFO;
    v14 = 22;
  }
  _os_log_impl(&dword_1CD062000, v12, v13, v11, (uint8_t *)&v18, v14);

LABEL_7:
  objc_autoreleasePoolPop(v5);
  objc_msgSend(*(id *)(a1 + 40), "responseHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    objc_msgSend(*(id *)(a1 + 40), "responseHandler");
    v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v17)[2](v17, v3, 0);

  }
}

void __148__HMDHome__sendInviteToUserWithHandle_inviteIdentifier_expiryDate_shareURL_shareToken_suppressHomeInviteNotification_invitedUser_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  id v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v5 && objc_msgSend(v5, "code") != 8)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 138543874;
      v20 = v11;
      v21 = 2112;
      v22 = v18;
      v23 = 2112;
      v24 = v5;
      v13 = "%{public}@Failed to send invitation request to user, %@, due to error: %@";
      v14 = v10;
      v15 = OS_LOG_TYPE_DEFAULT;
      v16 = 32;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 32);
      v19 = 138543618;
      v20 = v11;
      v21 = 2112;
      v22 = v12;
      v13 = "%{public}@Successfully sent invitation to: %@";
      v14 = v10;
      v15 = OS_LOG_TYPE_INFO;
      v16 = 22;
LABEL_7:
      _os_log_impl(&dword_1CD062000, v14, v15, v13, (uint8_t *)&v19, v16);

    }
  }

  objc_autoreleasePoolPop(v8);
}

void __64__HMDHome__addOutgoingInvitations_message_transactionCompleted___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = _Block_copy(*(const void **)(a1 + 40));
  v4 = v3;
  if (v3)
    (*((void (**)(void *, id))v3 + 2))(v3, v5);

  objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
}

void __46__HMDHome__processOutgoingInvitationsRequest___block_invoke(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  _QWORD block[5];
  id v5;
  char v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __46__HMDHome__processOutgoingInvitationsRequest___block_invoke_2;
  block[3] = &unk_1E89C0898;
  block[4] = WeakRetained;
  v5 = *(id *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  dispatch_async(v3, block);

}

uint64_t __46__HMDHome__processOutgoingInvitationsRequest___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__sendOutgoingInvitations:suppressHomeInviteNotification:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t __45__HMDHome_handleCurrentUserPrivilegeChanged___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  int v18;
  void *v19;
  __int16 v20;
  __CFString *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "currentUser");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "privilege");
      if (v7 > 4)
        v8 = CFSTR("None");
      else
        v8 = off_1E89BB648[v7];
      v9 = v8;
      objc_msgSend(*(id *)(a1 + 32), "fabric");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "accessControl");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "currentUserPrivilege");
      HMMTRUserPrivilegeAsString();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v5;
      v20 = 2112;
      v21 = v9;
      v22 = 2112;
      v23 = v12;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Updating Fabric user privilege to %@ from priv %@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 32), "currentUser");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = +[HMDUser hmmtrUserPrivilegeFromHMDUserPrivilege:](HMDUser, "hmmtrUserPrivilegeFromHMDUserPrivilege:", objc_msgSend(v13, "privilege"));
    objc_msgSend(*(id *)(a1 + 32), "fabric");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "accessControl");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setCurrentUserPrivilege:", v14);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_evaluateNetworkProtectionAndRouterManagement");
}

uint64_t __34__HMDHome_refreshUserDisplayNames__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_refreshUserDisplayNames");
}

uint64_t __31__HMDHome__removeUser_message___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateUserCATWithOperatePrivilege:administerPrivilege:", a2, 0);
}

void __31__HMDHome__removeUser_message___block_invoke_1144(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __31__HMDHome__removeUser_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = *(void **)(a1 + 40);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __31__HMDHome__removeUser_message___block_invoke_3;
  v3[3] = &unk_1E89BCB20;
  objc_copyWeak(&v6, &location);
  v4 = *(id *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  objc_msgSend(v2, "run:", v3);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void __31__HMDHome__removeUser_message___block_invoke_3(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  void *v16;
  id v17;
  HMDUserModel *v18;
  void *v19;
  void *v20;
  HMDUserModel *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  id v25;
  id v26;
  _QWORD v27[5];
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v26 = v3;
    objc_msgSend(WeakRetained, "backingStore");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "transaction:options:", CFSTR("kRemoveUserRequestKey"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "__modelObjectsForRemovingOutgoingInvitationForUser:", a1[4]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObjects:", v9);

    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    objc_msgSend(v5, "triggers");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v30 != v13)
            objc_enumerationMutation(v10);
          v15 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v16 = v15;
          else
            v16 = 0;
          v17 = v16;

          objc_msgSend(v17, "handleRemovalOfUser:transaction:", a1[4], v8);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v12);
    }

    v18 = [HMDUserModel alloc];
    objc_msgSend(a1[4], "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v18, "initWithObjectChangeType:uuid:parentUUID:", 3, v19, v20);

    objc_msgSend(v8, "add:", v21);
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __31__HMDHome__removeUser_message___block_invoke_1146;
    v27[3] = &unk_1E89C21C0;
    v27[4] = v5;
    v28 = a1[5];
    objc_msgSend(v8, "run:", v27);

    v3 = v26;
  }
  else
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = a1[4];
      *(_DWORD *)buf = 138543618;
      v35 = v24;
      v36 = 2112;
      v37 = v25;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Home disappeared, cannot remove user %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
  }

}

void __31__HMDHome__removeUser_message___block_invoke_1146(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeUser transaction with error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_msgSend(*(id *)(a1 + 40), "respondWithPayload:error:", 0, v3);

}

void __44__HMDHome__removeOutgoingInvitationForUser___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = 138543874;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v9;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Error occurred while removing the invitation for the user : %@ / %@", (uint8_t *)&v10, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

}

void __22__HMDHome_removeUser___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Failed to remove user due to %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

void __32__HMDHome_removeUserWithUserID___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", *(_QWORD *)(a1 + 40), CFSTR("userID"));
  v4 = (id)objc_claimAutoreleasedReturnValue();

  v3 = v4;
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "removeUser:", v4);
    v3 = v4;
  }

}

void __40__HMDHome__handleUpdatePresenceConsent___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "currentUser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "presenceAuthStatus");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addToPayload:", v7);

    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_msgSend(v7, "copy");
    objc_msgSend(v5, "respondWithPayload:", v6);

  }
}

void __35__HMDHome__handleUpdateUserAccess___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v8[0] = CFSTR("kUserAdministratorInformationKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isAdministrator"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = v3;
    v8[1] = CFSTR("kUserRemoteAccessInformationKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isRemoteAccessAllowed"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v9[1] = v4;
    v8[2] = CFSTR("kUserCamerasAccessLevelInformationKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "camerasAccessLevel"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9[2] = v5;
    v8[3] = *MEMORY[0x1E0CB92E8];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 40), "isAnnounceAccessAllowed"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9[3] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v7);
  }
}

void __47__HMDHome__handleUpdateUserCamerasAccessLevel___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    v5 = CFSTR("kUserCamerasAccessLevelInformationKey");
    v6[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v4);

  }
}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "__sendOutgoingInvitations:suppressHomeInviteNotification:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));

}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[5];
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = CFSTR("kAddHomeInvitesInternalRequestKey");
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    if (v5)
    {
      objc_msgSend(v9, "workQueue");
      v12 = objc_claimAutoreleasedReturnValue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_1135;
      v13[3] = &unk_1E89C2328;
      v13[4] = v9;
      v14 = *(id *)(a1 + 32);
      dispatch_async(v12, v13);

    }
  }

}

void __51__HMDHome__addUsersWithInviteInformations_message___block_invoke_1135(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v19 = v5;
    v20 = 2112;
    v21 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing invites that were not added to resident: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = *(id *)(a1 + 40);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "removeOutgoingInvitation:", v12, (_QWORD)v13);
        objc_msgSend(*(id *)(a1 + 32), "__handleCancelledOutgoingInvitation:", v12);
        objc_msgSend(v12, "updateInvitationState:", 1);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

}

void __57__HMDHome__handleAddOutgoingHomeInvitationModel_message___block_invoke(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = WeakRetained;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "identifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Expiring invitation %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(v5, "removeOutgoingInvitation:", v3);
    objc_msgSend(v5, "__handleCancelledOutgoingInvitation:", v3);
    objc_msgSend(v3, "updateInvitationState:", objc_msgSend(v3, "invitationState"));
    objc_msgSend(a1[4], "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "saveWithReason:postSyncNotification:", v9, 0);

  }
}

void __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke(id *a1)
{
  id v2;
  void *v3;
  _QWORD v4[4];
  __int128 v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v2 = a1[4];
  objc_msgSend(a1[5], "workQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2;
  v4[3] = &unk_1E89A85C8;
  v5 = *(_OWORD *)(a1 + 5);
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[4];
  v9 = a1[9];
  objc_msgSend(v2, "executeWithCompletionQueue:completionHandler:", v3, v4);

}

void __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_1123(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  id v13;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 40), "workQueue");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2_1124;
    v9[3] = &unk_1E89BDE38;
    v4 = *(void **)(a1 + 48);
    v9[4] = *(_QWORD *)(a1 + 40);
    v10 = v4;
    v11 = *(id *)(a1 + 56);
    v12 = *(id *)(a1 + 32);
    v13 = *(id *)(a1 + 64);
    objc_msgSend(v2, "executeWithCompletionQueue:completionHandler:", v3, v9);

    v5 = v10;
  }
  else
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2_1126;
    v7[3] = &unk_1E89C1A48;
    v6 = *(void **)(a1 + 56);
    v8 = *(id *)(a1 + 64);
    objc_msgSend(v6, "run:", v7);
    v5 = v8;
  }

}

void __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2_1124(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "currentUser");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "userID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v17 = v7;
      v18 = 2112;
      v19 = v9;
      v20 = 2112;
      v21 = v10;
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove user '%@' from accessory '%@': %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v4);
    v11 = *(void **)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "modelObjectWithChangeType:", 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "add:", v12);

  }
  v13 = *(void **)(a1 + 48);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_1125;
  v14[3] = &unk_1E89C1A48;
  v15 = *(id *)(a1 + 64);
  objc_msgSend(v13, "run:", v14);

}

uint64_t __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2_1126(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_1125(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __69__HMDHome_removeAllUsersAndCloudDataFromAccessory_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "userID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "shortDescription");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138544130;
      v13 = v7;
      v14 = 2112;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      v18 = 2112;
      v19 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove user '%@' from accessory '%@': %@", (uint8_t *)&v12, 0x2Au);

    }
    objc_autoreleasePoolPop(v4);
    v10 = *(void **)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 64), "modelObjectWithChangeType:", 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "add:", v11);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

}

id __22__HMDHome_sharedUsers__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  if (objc_msgSend(v2, "privilege") == 3)
    v3 = 0;
  else
    v3 = v2;

  return v3;
}

void __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    (*(void (**)(uint64_t, id, _QWORD))(v3 + 16))(v3, v5, 0);

}

void __47__HMDHome__handleExecuteConfirmationOfTrigger___block_invoke_1104(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  if (v5 && isiOSDevice())
    +[HMDBulletinUIManager presentExecutionErrorDialogForTrigger:partialSuccess:](HMDBulletinUIManager, "presentExecutionErrorDialogForTrigger:partialSuccess:", *(_QWORD *)(a1 + 32), objc_msgSend(v5, "code") == 64);
  objc_msgSend(*(id *)(a1 + 40), "responseHandler");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    (*(void (**)(uint64_t, id, _QWORD))(v3 + 16))(v3, v5, 0);

}

void __25__HMDHome_removeTrigger___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0D285D0];
  v3 = objc_alloc(MEMORY[0x1E0D285D8]);
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithTarget:", v4);
  v10 = CFSTR("kTriggerUUID");
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithName:destination:payload:", CFSTR("kRemoveTriggerRequestKey"), v5, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "_handleRemoveTrigger:", v9);
}

uint64_t __30__HMDHome__handleAddTriggers___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
}

void __34__HMDHome__handleAddTimerTrigger___block_invoke(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;

  if (a2)
  {
    objc_msgSend(a1[4], "respondWithError:", a2);
  }
  else
  {
    v3 = a1[5];
    objc_msgSend(a1[6], "createPayload");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addEntriesFromDictionary:", v4);

    v5 = a1[4];
    v6 = (id)objc_msgSend(a1[5], "copy");
    objc_msgSend(v5, "respondWithPayload:", v6);

  }
}

void __38__HMDHome__relayAddTriggerToResident___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[5];
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = CFSTR("kAddTriggersInternalRequestKey");
      v19 = 2112;
      v20 = v5;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    if (v5)
    {
      objc_msgSend(v9, "workQueue");
      v12 = objc_claimAutoreleasedReturnValue();
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __38__HMDHome__relayAddTriggerToResident___block_invoke_1095;
      v13[3] = &unk_1E89C2328;
      v13[4] = v9;
      v14 = *(id *)(a1 + 32);
      dispatch_async(v12, v13);

    }
  }

}

void __38__HMDHome__relayAddTriggerToResident___block_invoke_1095(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  HMDTriggerModel *v7;
  void *v8;
  void *v9;
  HMDTriggerModel *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v14 = 138543618;
    v15 = v5;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing trigger that was not added to resident: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = [HMDTriggerModel alloc];
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 3, v8, v9);

  objc_msgSend(*(id *)(a1 + 32), "backingStore");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "transaction:options:", CFSTR("relayAddTrigger"), v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "add:withMessage:", v10, 0);
  objc_msgSend(v13, "run");

}

- (HMDActionSet)_createActionSetWithUUID:(void *)a3 name:(void *)a4 type:(void *)a5 fromDictionary:(void *)a6 transaction:(_QWORD *)a7 response:(_QWORD *)a8 error:
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  HMDActionSet *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  HMDApplicationData *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDActionSet *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  void *v43;
  id v44;
  NSObject *v45;
  void *v46;
  void *v47;
  id v48;
  NSObject *v49;
  void *v50;
  id v53;
  id v55;
  void *v56;
  id obj;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  id v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  if (a1)
  {
    v55 = v15;
    v18 = -[HMDActionSet initWithName:uuid:type:home:queue:]([HMDActionSet alloc], "initWithName:uuid:type:home:queue:", v14, v13, v15, a1, 0);
    -[HMDActionSet modelObjectWithChangeType:](v18, "modelObjectWithChangeType:", 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = v17;
    objc_msgSend(v17, "add:", v19);

    v56 = v16;
    objc_msgSend(v16, "hmf_arrayForKey:", CFSTR("kActionSetActions"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v20, "count"));
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    obj = v20;
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v67, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v60;
      v53 = v13;
LABEL_4:
      v25 = 0;
      while (1)
      {
        if (*(_QWORD *)v60 != v24)
          objc_enumerationMutation(obj);
        v26 = *(id *)(*((_QWORD *)&v59 + 1) + 8 * v25);
        objc_opt_class();
        v27 = (objc_opt_isKindOfClass() & 1) != 0 ? v26 : 0;
        v28 = v27;

        if (!v28)
          break;
        objc_msgSend(a1, "actionWithDictionaryRepresentation:", v28);
        v29 = objc_claimAutoreleasedReturnValue();
        if (!v29)
        {
          v43 = (void *)MEMORY[0x1D17BA0A0]();
          v44 = a1;
          HMFGetOSLogHandle();
          v45 = objc_claimAutoreleasedReturnValue();
          v13 = v53;
          v15 = v55;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v64 = v46;
            v65 = 2112;
            v66 = v28;
            _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize action: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v43);
          if (a8)
          {
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
            *a8 = (id)objc_claimAutoreleasedReturnValue();
          }

          v16 = v56;
          v35 = obj;
          v17 = v58;
LABEL_29:

          v38 = 0;
          goto LABEL_36;
        }
        v30 = (void *)v29;
        objc_msgSend(v21, "addObject:", v29);
        objc_msgSend(v30, "updateActionSetIfNil:", v18);
        objc_msgSend(v30, "modelObjectWithChangeType:", 1);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "add:", v31);

        if (v23 == ++v25)
        {
          v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v67, 16);
          v13 = v53;
          if (v23)
            goto LABEL_4;
          goto LABEL_14;
        }
      }
      v39 = (void *)MEMORY[0x1D17BA0A0]();
      v40 = a1;
      HMFGetOSLogHandle();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v42;
        v65 = 2112;
        v66 = v14;
        _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; invalid serialized action",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v39);
      v13 = v53;
      v15 = v55;
      v16 = v56;
      v35 = obj;
      v17 = v58;
      if (a8)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        *a8 = (id)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_29;
    }
LABEL_14:

    -[HMDActionSet setActions:](v18, "setActions:", v21);
    if ((objc_msgSend(a1, "validateActionsDoNotConflict:", v21) & 1) != 0)
    {
      objc_msgSend(v56, "hmf_dictionaryForKey:", CFSTR("kAppDataInformationKey"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v32, "count"))
      {
        v33 = -[HMDApplicationData initWithParentUUID:]([HMDApplicationData alloc], "initWithParentUUID:", v13);
        -[HMDApplicationData setApplicationData:forIdentifier:](v33, "setApplicationData:forIdentifier:", v32, CFSTR("com.apple.homekit-entitledclient.identifer"));
        -[HMDApplicationData modelObjectWithChangeType:](v33, "modelObjectWithChangeType:", 1);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "add:", v34);

      }
      v35 = obj;
      if (a7)
      {
        -[HMDActionSet createPayload](v18, "createPayload");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = (void *)objc_msgSend(v36, "mutableCopy");

        objc_msgSend(v37, "setObject:forKeyedSubscript:", v32, CFSTR("kAppDataInformationKey"));
        *a7 = (id)objc_msgSend(v37, "copy");

      }
      v38 = v18;

    }
    else
    {
      v47 = (void *)MEMORY[0x1D17BA0A0]();
      v48 = a1;
      HMFGetOSLogHandle();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v50;
        v65 = 2112;
        v66 = v14;
        _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_ERROR, "%{public}@Can't add action set %@; conflicting actions",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v47);
      v35 = obj;
      if (a8)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        v38 = 0;
        *a8 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v38 = 0;
      }
    }
    v15 = v55;
    v16 = v56;
    v17 = v58;
LABEL_36:

  }
  else
  {
    v38 = 0;
  }

  return v38;
}

void __34__HMDHome__handleAddEventTrigger___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  HomeKitEventTriggerAddLogEvent *v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  HMDEventTrigger *v12;
  HomeKitEventTriggerAddLogEvent *v13;
  void *v14;
  HomeKitEventTriggerAddLogEvent *v15;
  HMDAnalyticsEventTriggerData *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  __int16 v30;
  HomeKitEventTriggerAddLogEvent *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 138543874;
    v29 = v11;
    v30 = 2112;
    v31 = v6;
    v32 = 2112;
    v33 = v5;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Responding to the client about add event trigger status : Payload : [%@], error : [%@]", (uint8_t *)&v28, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", v6, v5);
  if (v9)
  {
    v12 = -[HMDEventTrigger initWithModel:home:message:]([HMDEventTrigger alloc], "initWithModel:home:message:", *(_QWORD *)(a1 + 40), v9, *(_QWORD *)(a1 + 32));
    -[HMDEventTrigger addEventsFromMessage:preserveUUIDs:transaction:error:](v12, "addEventsFromMessage:preserveUUIDs:transaction:error:", *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 56) == 0, 0, 0);
    v13 = [HomeKitEventTriggerAddLogEvent alloc];
    objc_msgSend(v9, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[HomeKitEventTriggerAddLogEvent initWithHomeUUID:](v13, "initWithHomeUUID:", v14);

    v16 = -[HMDAnalyticsEventTriggerData initWithEventTrigger:isAdding:]([HMDAnalyticsEventTriggerData alloc], "initWithEventTrigger:isAdding:", v12, 1);
    -[HomeKitEventTriggerAddLogEvent analyticsData](v15, "analyticsData");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setEventTrigger:", v16);

    v18 = objc_msgSend(v5, "code");
    -[HomeKitEventTriggerAddLogEvent analyticsData](v15, "analyticsData");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setResultErrorCode:", v18);

    if (objc_msgSend(v9, "isOwnerUser"))
    {
      -[HomeKitEventTriggerAddLogEvent analyticsData](v15, "analyticsData");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20;
      v22 = 1;
    }
    else
    {
      if (!objc_msgSend(v9, "isAdminUser"))
      {
LABEL_9:
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = v9;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = 138543618;
          v29 = v26;
          v30 = 2112;
          v31 = v15;
          _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Prepared the metric %@, submitting", (uint8_t *)&v28, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
        objc_msgSend(v24, "logEventSubmitter");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "submitLogEvent:", v15);

        goto LABEL_12;
      }
      -[HomeKitEventTriggerAddLogEvent analyticsData](v15, "analyticsData");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20;
      v22 = 2;
    }
    objc_msgSend(v20, "setRequestOrigin:", v22);

    goto LABEL_9;
  }
LABEL_12:

}

void __34__HMDHome__handleAddEventTrigger___block_invoke_1094(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v3 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "createPayloadWithCondition:", *(_QWORD *)(a1 + 56));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addEntriesFromDictionary:", v4);

    v5 = *(_QWORD *)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 72), "triggerEvents");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _createEventsPayload:](v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v7, CFSTR("kEventTriggerEventsKey"));

    v8 = *(_QWORD *)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 72), "endEvents");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _createEventsPayload:](v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, CFSTR("kEventTriggerEndEventsKey"));

    v11 = *(void **)(a1 + 32);
    v12 = (id)objc_msgSend(*(id *)(a1 + 40), "copy");
    objc_msgSend(v11, "respondWithPayload:", v12);

  }
}

- (id)_createEventsPayload:(uint64_t)a1
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (a1)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v14;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "createPayload", (_QWORD)v13);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v10);

          ++v9;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v7);
    }

    v11 = (void *)objc_msgSend(v4, "copy");
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void __28__HMDHome_executeActionSet___block_invoke(id *a1)
{
  void (**v2)(_QWORD);
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(id *);
  void *v10;
  id v11;
  id v12;
  id v13;
  id location;

  objc_initWeak(&location, a1[4]);
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = __28__HMDHome_executeActionSet___block_invoke_2;
  v10 = &unk_1E89BD988;
  objc_copyWeak(&v13, &location);
  v11 = a1[5];
  v12 = a1[6];
  v2 = (void (**)(_QWORD))_Block_copy(&v7);
  if (objc_msgSend(a1[4], "_shouldWaitForAccessoriesToBeReachable", v7, v8, v9, v10))
  {
    objc_msgSend(a1[5], "uuidForKey:", CFSTR("kActionSetUUID"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "actionSetWithUUID:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[4], "workQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeAssistantOperation homeAssistantOperationWithActionSet:queue:](HMDHomeAssistantOperation, "homeAssistantOperationWithActionSet:queue:", v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(a1[4], "_performOperation:completion:", v6, v2);
  }
  else
  {
    v2[2](v2);
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void __28__HMDHome_executeActionSet___block_invoke_2(id *a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    objc_msgSend(a1[5], "begin");
    objc_msgSend(WeakRetained, "_handleExecuteActionSet:", a1[4]);
    objc_msgSend(a1[5], "end");
  }
  else
  {
    objc_msgSend(a1[4], "responseHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "responseHandler");
      v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v5)[2](v5, v4, 0);

    }
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Home does not exist anymore, cannot execute action set", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
  }

}

void __42__HMDHome__handleAddActionSetFromBuilder___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = (id)objc_msgSend(*(id *)(a1 + 32), "removeName:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 48), "respondWithError:", v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:", *(_QWORD *)(a1 + 56));
  }

}

void __31__HMDHome_builtInActionSetInfo__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[3];
  _QWORD v23[3];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "actionSets");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v19;
    v5 = *MEMORY[0x1E0CB8238];
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v19 != v4)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v7, "type");
        v8 = objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          v9 = (void *)v8;
          objc_msgSend(v7, "type");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "isEqualToString:", v5);

          if ((v11 & 1) == 0)
          {
            v22[0] = CFSTR("kActionSetName");
            objc_msgSend(v7, "name");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v23[0] = v12;
            v22[1] = CFSTR("kActionSetType");
            objc_msgSend(v7, "type");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v23[1] = v13;
            v22[2] = CFSTR("kActionSetUUID");
            objc_msgSend(v7, "uuid");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "UUIDString");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v23[2] = v15;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(*(id *)(a1 + 40), "addObject:", v16);
          }
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v3);
  }

}

uint64_t __37__HMDHome__handleRemoveServiceGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __34__HMDHome__handleAddServiceGroup___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v8[0] = *MEMORY[0x1E0CBAC40];
    objc_msgSend(*(id *)(a1 + 40), "name");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = v4;
    v8[1] = *MEMORY[0x1E0CBAC60];
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9[1] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v7);

  }
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD block[5];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = *(NSObject **)(a1 + 32);
    objc_msgSend(WeakRetained, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2;
    block[3] = &unk_1E89A4AF8;
    block[4] = v5;
    v15 = *(id *)(a1 + 40);
    v16 = *(id *)(a1 + 48);
    v17 = *(id *)(a1 + 56);
    v18 = *(id *)(a1 + 64);
    v23 = *(id *)(a1 + 96);
    v19 = *(id *)(a1 + 72);
    v20 = *(id *)(a1 + 80);
    v21 = v3;
    v22 = *(id *)(a1 + 88);
    dispatch_group_notify(v6, v7, block);

    v8 = v15;
LABEL_7:

    goto LABEL_8;
  }
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v27 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Home missing; failed to add accessory", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v9);
  v12 = *(void **)(a1 + 96);
  if (v12)
  {
    dispatch_get_global_queue(0, 0);
    v13 = objc_claimAutoreleasedReturnValue();
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1073;
    v24[3] = &unk_1E89C0870;
    v25 = v12;
    dispatch_async(v13, v24);

    v8 = v25;
    goto LABEL_7;
  }
LABEL_8:

}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1073(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  id *v3;
  id *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  dispatch_time_t v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  void (**v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  dispatch_time_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  id obj;
  NSObject *group;
  uint64_t v64;
  _QWORD v65[4];
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  _QWORD aBlock[5];
  id v72;
  id v73;
  id v74;
  id v75;
  _QWORD v76[5];
  id v77;
  NSObject *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[5];
  id v84;
  id v85;
  NSObject *v86;
  _QWORD v87[4];
  id v88;
  uint64_t v89;
  id v90;
  NSObject *v91;
  id *v92;
  id v93;
  id *v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  void (*v97)(uint64_t);
  id v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint8_t v103[128];
  uint8_t buf[4];
  void *v105;
  __int16 v106;
  id v107;
  _BYTE v108[128];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v3 = (id *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  v4 = (id *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accessoryWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v61 = v7;

  objc_msgSend(*v3, "notificationRegistrations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v8, "count");

  objc_msgSend(*v4, "hapAccessoryLocal");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "enableNotificationsWithHAPAccessory:homeNotificationsEnabled:", v9, v64 != 0);

  logAndPostNotification(CFSTR("HMDAccessoryConnectedNotification"), v61, 0);
  objc_msgSend(v61, "updateBridgedAccessoryLightProfilesSettings");
  objc_msgSend(*v3, "finishPairingForServer:", *(_QWORD *)(a1 + 48));
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v10 = *(id *)(a1 + 56);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v99, v108, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v100;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v100 != v12)
          objc_enumerationMutation(v10);
        v14 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * i);
        v15 = *(void **)(a1 + 32);
        objc_msgSend(v14, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "accessoryWithUUID:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
        v19 = v18;

        objc_msgSend(v14, "hapAccessoryLocal");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "enableNotificationsWithHAPAccessory:homeNotificationsEnabled:", v20, v64 != 0);

        logAndPostNotification(CFSTR("HMDAccessoryConnectedNotification"), v19, 0);
      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v99, v108, 16);
    }
    while (v11);
  }

  v21 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 64), "identifier");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:", v22);
  v60 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(*(id *)(a1 + 32), "isOwnerUser") & 1) != 0)
    goto LABEL_25;
  v93 = 0;
  v94 = &v93;
  v95 = 0x3032000000;
  v96 = __Block_byref_object_copy__10535;
  v97 = __Block_byref_object_dispose__10536;
  v98 = 0;
  v23 = dispatch_group_create();
  dispatch_group_enter(v23);
  objc_msgSend(*(id *)(a1 + 32), "homeManager");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "identifier");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v87[0] = MEMORY[0x1E0C809B0];
  v87[1] = 3221225472;
  v87[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_3;
  v87[3] = &unk_1E89A4AD0;
  v26 = v61;
  v27 = *(_QWORD *)(a1 + 32);
  v88 = v26;
  v89 = v27;
  v92 = &v93;
  v28 = v60;
  v90 = v28;
  v29 = v23;
  v91 = v29;
  objc_msgSend(v24, "cleanupOperationsForAccessory:user:completion:", v25, 0, v87);

  v30 = dispatch_time(0, 180000000000);
  if (dispatch_group_wait(v29, v30))
  {
    v31 = (void *)MEMORY[0x1D17BA0A0]();
    v32 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v33 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v105 = v34;
      v106 = 2112;
      v107 = v26;
      _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Timed out waiting for resident to respond to add accessory request: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v31);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 8);
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = v94[5];
    v94[5] = (id)v35;

  }
  v37 = v94[5];
  if (v37)
  {
    objc_msgSend(*(id *)(a1 + 32), "_sharedAdminDidFailToAddAccessories:", v28);
    objc_msgSend(*(id *)(a1 + 64), "responseHandler");
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    if (v38)
    {
      objc_msgSend(*(id *)(a1 + 64), "responseHandler");
      v39 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, id, _QWORD))v39)[2](v39, v94[5], 0);

    }
    v40 = *(_QWORD *)(a1 + 104);
    if (v40)
      (*(void (**)(uint64_t, id))(v40 + 16))(v40, v94[5]);
  }

  _Block_object_dispose(&v93, 8);
  if (!v37)
  {
LABEL_25:
    group = dispatch_group_create();
    if (v61)
    {
      dispatch_group_enter(group);
      v83[0] = MEMORY[0x1E0C809B0];
      v83[1] = 3221225472;
      v83[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1074;
      v83[3] = &unk_1E89BA850;
      v83[4] = *(_QWORD *)(a1 + 32);
      v41 = v61;
      v84 = v41;
      v85 = *(id *)(a1 + 72);
      v86 = group;
      objc_msgSend(v41, "readInitialRequiredCharacteristicsForAccessory:", v83);
      objc_msgSend(*(id *)(a1 + 40), "hapAccessoryLocal");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "enableNotificationsWithHAPAccessory:homeNotificationsEnabled:", v42, v64 != 0);

    }
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    obj = *(id *)(a1 + 56);
    v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v103, 16);
    if (v43)
    {
      v44 = *(_QWORD *)v80;
      do
      {
        for (j = 0; j != v43; ++j)
        {
          if (*(_QWORD *)v80 != v44)
            objc_enumerationMutation(obj);
          v46 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * j);
          v47 = *(void **)(a1 + 32);
          objc_msgSend(v46, "uuid", v60);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "accessoryWithUUID:", v48);
          v49 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v50 = v49;
          else
            v50 = 0;
          v51 = v50;

          if (v51)
          {
            dispatch_group_enter(group);
            v76[0] = MEMORY[0x1E0C809B0];
            v76[1] = 3221225472;
            v76[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2_1076;
            v76[3] = &unk_1E89C0DA8;
            v76[4] = *(_QWORD *)(a1 + 32);
            v52 = v51;
            v77 = v52;
            v78 = group;
            objc_msgSend(v52, "readInitialRequiredCharacteristicsForAccessory:", v76);
            objc_msgSend(v46, "hapAccessoryLocal");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "enableNotificationsWithHAPAccessory:homeNotificationsEnabled:", v53, v64 != 0);

          }
        }
        v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v103, 16);
      }
      while (v43);
    }

    v54 = dispatch_time(0, 3000000000);
    dispatch_group_wait(group, v54);
    if (objc_msgSend(*(id *)(a1 + 32), "isOwnerUser"))
      objc_msgSend(*(id *)(a1 + 32), "_setupActiveNetworkRouterAccessory:existingRouterAccessories:", v60, *(_QWORD *)(a1 + 80));
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1077;
    aBlock[3] = &unk_1E89C0598;
    aBlock[4] = *(_QWORD *)(a1 + 32);
    v72 = v60;
    v73 = *(id *)(a1 + 64);
    v75 = *(id *)(a1 + 104);
    v74 = *(id *)(a1 + 88);
    v55 = _Block_copy(aBlock);
    v56 = v55;
    if (v61)
    {
      objc_msgSend(*(id *)(a1 + 72), "begin");
      v93 = *(id *)(a1 + 72);
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = *(_QWORD *)(a1 + 96);
      v65[0] = MEMORY[0x1E0C809B0];
      v65[1] = 3221225472;
      v65[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2_1078;
      v65[3] = &unk_1E89BDE38;
      v59 = v57;
      v66 = v59;
      v67 = *(id *)(a1 + 72);
      v68 = v61;
      v69 = *(id *)(a1 + 96);
      v70 = v56;
      objc_msgSend(v68, "commissionToThreadNetworkWithPairingEvent:completion:", v58, v65);

      __HMFActivityScopeLeave();
    }
    else
    {
      (*((void (**)(void *))v55 + 2))(v55);
    }

  }
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_3(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  _QWORD v10[4];
  __int128 v11;
  id v12;

  if ((objc_msgSend(*(id *)(a1 + 32), "supportsCHIP") & 1) != 0
    || (v3 = *(_QWORD *)(a1 + 32),
        v2 = *(void **)(a1 + 40),
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8),
        v12 = *(id *)(v4 + 40),
        v5 = objc_msgSend(v2, "_addOwnerToPrimaryAccessory:error:", v3, &v12),
        objc_storeStrong((id *)(v4 + 40), v12),
        v5))
  {
    v6 = *(void **)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_4;
    v10[3] = &unk_1E89B5170;
    v9 = *(_OWORD *)(a1 + 56);
    v8 = (id)v9;
    v11 = v9;
    objc_msgSend(v6, "_notifyOwnerOfAddedAccessories:completion:", v7, v10);

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1074(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  _BYTE buf[12];
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "supportsTargetController");
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v7;
    v16 = 2112;
    v17 = v8;
    v18 = 2112;
    v19 = v10;
    v20 = 2112;
    v21 = v11;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Primary accessory %@/%@ (supportsTargetController %@) being added to home", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "autoConfigureTargetController");
  objc_msgSend(*(id *)(a1 + 48), "begin");
  *(_QWORD *)buf = *(id *)(a1 + 48);
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
  v12 = *(void **)(a1 + 40);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1075;
  v13[3] = &unk_1E89C2730;
  v14 = *(id *)(a1 + 56);
  objc_msgSend(v12, "handleUpdatedServicesForThreadManagementWithCompletion:", v13);

  __HMFActivityScopeLeave();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2_1076(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "supportsTargetController");
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138544130;
    v13 = v7;
    v14 = 2112;
    v15 = v8;
    v16 = 2112;
    v17 = v10;
    v18 = 2112;
    v19 = v11;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Bridged accessory %@/%@ (supportsTargetController %@) being added to home", (uint8_t *)&v12, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "autoConfigureTargetController");
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

uint64_t __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1077(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_notifyClientOfNewlyAddedAccessories:requestMessage:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 56));
  return result;
}

uint64_t __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_2_1078(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  id v8;

  v3 = (void *)MEMORY[0x1E0C99D68];
  v4 = a2;
  objc_msgSend(v3, "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
  v7 = v6;

  objc_msgSend(*(id *)(a1 + 48), "uuid");
  v8 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  objc_msgSend(v4, "domain");

  objc_msgSend(v4, "code");
  objc_msgSend(*(id *)(a1 + 56), "setThreadCommissioningDuration:", v7);
  objc_msgSend(*(id *)(a1 + 56), "setThreadCommissioningError:", v4);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_1075(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __149__HMDHome__processAccessoriesToAddForUnpairedAccessory_certificationStatus_accessoryServer_networkCredential_pairingEvent_message_completionHandler___block_invoke_4(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (v4)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, 0);
  return result;
}

uint64_t __69__HMDHome__cancelPairingWithAccessoryUUID_context_completionHandler___block_invoke_1070(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "accessoryUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqual:", v3);

  return v4;
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  NSObject *v12;
  void *v13;
  _QWORD block[5];
  id v15;
  id v16;
  id v17;
  id v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_2;
    block[3] = &unk_1E89C0598;
    block[4] = v11;
    v15 = v7;
    v16 = v8;
    v18 = v9;
    v17 = *(id *)(a1 + 32);
    dispatch_async(v12, block);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, void *))v9 + 2))(v9, 0, 0, v13);

  }
}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke_2(id *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  _BOOL4 v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char v42;
  void *v43;
  id v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  void *v55;
  id v56;
  NSObject *v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  void *context;
  _QWORD v65[5];
  id v66;
  id v67;
  const __CFString *v68;
  id v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  void *v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[4], "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "name");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6 || (v7 = a1[6]) == 0)
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = a1[4];
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v71 = v18;
      v72 = 2112;
      v73 = v5;
      v74 = 2112;
      v75 = v19;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ went away while being added to home", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    v20 = a1[8];
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD, void *))v20 + 2))(v20, 0, 0, v21);
  }
  else
  {
    if (objc_msgSend(v7, "isEqualToString:", CFSTR("HMSetupCodeProviderReasonBadPassword")))
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = a1[4];
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v71 = v11;
        v72 = 2112;
        v73 = v3;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Clearing previous password on bad-password error for accessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(a1[4], "addPendingAccessorySetupCodes");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "removeObjectForKey:", v3);

      objc_msgSend(a1[4], "addPendingAccessoryOnboardingSetupPayloadStrings");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "removeObjectForKey:", v3);

    }
    objc_msgSend(a1[7], "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14 && objc_msgSend(a1[7], "isEntitledForSPIAccess"))
    {
      if ((objc_msgSend(a1[6], "isEqualToString:", CFSTR("HMSetupCodeProviderReasonBadPassword")) & 1) != 0)
      {

LABEL_27:
        v43 = (void *)MEMORY[0x1D17BA0A0]();
        v44 = a1[4];
        HMFGetOSLogHandle();
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[7], "stringForKey:", CFSTR("kAccessoryPairingPasswordKey"));
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "UUIDString");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v71 = v46;
          v72 = 2112;
          v73 = v47;
          v74 = 2112;
          v75 = v5;
          v76 = 2112;
          v77 = v48;
          _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_INFO, "%{public}@Provided password %@ incorrect for accessory %@/%@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v43);
        v49 = a1[8];
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2002);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, _QWORD, void *))v49 + 2))(v49, 0, 0, v21);
        goto LABEL_17;
      }
      v42 = objc_msgSend(a1[6], "isEqualToString:", CFSTR("HMSetupCodeProviderReasontTimeoutRetry"));

      if ((v42 & 1) != 0)
        goto LABEL_27;
    }
    else
    {

    }
    os_unfair_recursive_lock_lock_with_options();
    v22 = (void *)objc_msgSend(a1[8], "copy");
    v23 = _Block_copy(v22);
    objc_msgSend(*((id *)a1[4] + 92), "setObject:forKeyedSubscript:", v23, v3);

    os_unfair_recursive_lock_unlock();
    if ((objc_msgSend(a1[6], "isEqualToString:", CFSTR("HMSetupCodeProviderReasonInitial")) & 1) != 0)
    {
      objc_msgSend(a1[4], "addPendingAccessorySetupCodes");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "objectForKey:", v3);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(a1[4], "addPendingAccessoryOnboardingSetupPayloadStrings");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "objectForKeyedSubscript:", v3);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      v27 = (void *)MEMORY[0x1D17BA0A0]();
      v28 = a1[4];
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
      if (v21)
      {
        if (v30)
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = a1[5];
          *(_DWORD *)buf = 138543618;
          v71 = v31;
          v72 = 2112;
          v73 = v32;
          _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Providing setupCode for accessory %@ and removing from tracking", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v27);
        (*((void (**)(void))a1[8] + 2))();
      }
      else
      {
        if (v30)
        {
          HMFGetLogIdentifier();
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v71 = v50;
          v72 = 2112;
          v73 = v5;
          v74 = 2112;
          v75 = v3;
          _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Accessory %@/%@ prompted for pairing setupCode but did not receive it from HomeUIService", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v27);
        if (objc_msgSend(a1[7], "BOOLForKey:", CFSTR("kAccessorySetupCodeDeferredKey")))
        {
          v51 = (void *)MEMORY[0x1D17BA0A0]();
          v52 = a1[4];
          HMFGetOSLogHandle();
          v53 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "UUIDString");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v71 = v54;
            v72 = 2112;
            v73 = v5;
            v74 = 2112;
            v75 = v55;
            _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_INFO, "%{public}@addAccessory request from HomeUIService - waiting for setupCode for accessory %@/%@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v51);
        }
        else
        {
          objc_msgSend(v2, "accessorySetupManager");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[4], "uuid");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1[7], "proxyConnection");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v65[0] = MEMORY[0x1E0C809B0];
          v65[1] = 3221225472;
          v65[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_1065;
          v65[3] = &unk_1E89C1558;
          v65[4] = a1[4];
          v67 = a1[8];
          v66 = v3;
          objc_msgSend(v61, "launchAccessorySetupHostToRequestSetupCodeForAccessoryWithUUID:accessoryName:homeUUID:clientConnection:completionHandler:", v66, v5, v62, v63, v65);

        }
      }

    }
    else
    {
      v33 = objc_alloc(MEMORY[0x1E0D285D8]);
      objc_msgSend(a1[4], "uuid");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)objc_msgSend(v33, "initWithTarget:", v34);

      v35 = objc_alloc(MEMORY[0x1E0D285F8]);
      v36 = a1[6];
      v68 = CFSTR("kAccessorySetupCodeReasonKey");
      v69 = v36;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v69, &v68, 1);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = (void *)objc_msgSend(v35, "initWithName:qualityOfService:destination:payload:", *MEMORY[0x1E0CB8CD0], 33, v21, v37);

      objc_msgSend(v2, "accessorySetupManager");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "accessorySetupHostClientConnection");
      v40 = (void *)objc_claimAutoreleasedReturnValue();

      if (v40)
      {
        objc_msgSend(v38, "setTransport:", v40);
        objc_msgSend(a1[4], "msgDispatcher");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "sendMessage:", v38);
      }
      else
      {
        context = (void *)MEMORY[0x1D17BA0A0]();
        v56 = a1[4];
        HMFGetOSLogHandle();
        v57 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v59 = a1[5];
          *(_DWORD *)buf = 138543618;
          v71 = v58;
          v72 = 2112;
          v73 = v59;
          _os_log_impl(&dword_1CD062000, v57, OS_LOG_TYPE_INFO, "%{public}@No HomeUIService connection for accessory %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(context);
        v60 = a1[8];
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2002);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, _QWORD, void *))v60 + 2))(v60, 0, 0, v41);
      }

    }
  }
LABEL_17:

}

void __40__HMDHome__setupCodeProviderForMessage___block_invoke_1065(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[5];
  id v6;
  id v7;
  id v8;

  v3 = a2;
  if (v3)
  {
    objc_msgSend(a1[4], "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_2_1066;
    v5[3] = &unk_1E89C0448;
    v5[4] = a1[4];
    v6 = v3;
    v8 = a1[6];
    v7 = a1[5];
    dispatch_async(v4, v5);

  }
}

uint64_t __40__HMDHome__setupCodeProviderForMessage___block_invoke_2_1066(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v13 = v5;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to request setup code for accessory: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 760), "hm_allKeys");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __40__HMDHome__setupCodeProviderForMessage___block_invoke_1067;
  v10[3] = &unk_1E89A4A80;
  v11 = *(id *)(a1 + 48);
  objc_msgSend(v7, "na_firstObjectPassingTest:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 760), "removeObjectForKey:", v8);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 736), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 744), "removeObjectForKey:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 752), "removeObjectForKey:", *(_QWORD *)(a1 + 48));

  return os_unfair_recursive_lock_unlock();
}

uint64_t __40__HMDHome__setupCodeProviderForMessage___block_invoke_1067(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "accessoryUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqual:", v3);

  return v4;
}

void __47__HMDHome_btleAccessoryReachabilityProbeTimer___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "btleAccessoryReachabilityProbeTimer:", *(unsigned __int8 *)(a1 + 40));

}

void __76__HMDHome_dispatchRequestToEvaluateCondition_forCharacteristics_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138544386;
    v24 = v11;
    v25 = 2112;
    v26 = v12;
    v27 = 2112;
    v28 = v13;
    v29 = 2112;
    v30 = v14;
    v31 = 2112;
    v32 = v5;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Message with identifier %@ to evaluate condition %@ for characteristics %@ has been sent with error %@", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v8);
  if (v5)
    goto LABEL_7;
  v15 = objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kPredicateEvaluateResultKey"));
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = v9;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(a1 + 40);
    HMFBooleanToString();
    v22 = v15;
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v24 = v19;
    v25 = 2112;
    v26 = v20;
    v27 = 2112;
    v28 = v21;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Resident evaluate predicate %@ to %@.", buf, 0x20u);

    v15 = v22;
  }

  objc_autoreleasePoolPop(v16);
  if (v15)
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

uint64_t __34__HMDHome_reevaluateAccessoryInfo__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reevaluateAccessoryInfoWithBadgeRefresh:", 1);
}

uint64_t __61__HMDHome_notifyClientsOfAccessoryInfoUpdatedForAccessories___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfAccessoryInfoUpdatedForAccessories:shouldRefreshBadge:withCompletion:", *(_QWORD *)(a1 + 40), 1, 0);
}

void __27__HMDHome__removeCloudData__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove camera profile settings manager zone named %@: %@", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1050(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  id v8;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_2;
    v6[3] = &unk_1E89C1738;
    objc_copyWeak(&v8, v2);
    v5 = *(void **)(a1 + 40);
    v6[4] = *(_QWORD *)(a1 + 32);
    v7 = v5;
    objc_msgSend(WeakRetained, "_removeAccessory:completionHandler:", v4, v6);

    objc_destroyWeak(&v8);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  void *v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    v24 = v11;
    v25 = 2112;
    v26 = v12;
    v27 = 2112;
    v28 = v6;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed primary accessory, %@, with error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  if (v9)
  {
    objc_msgSend(v9, "workQueue");
    v13 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1051;
    block[3] = &unk_1E89C1710;
    v18 = v6;
    v19 = v9;
    v14 = v5;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(a1 + 40);
    v20 = v14;
    v21 = v15;
    v22 = v16;
    dispatch_async(v13, block);

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

}

void __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke_1051(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138543874;
      v9 = v5;
      v10 = 2112;
      v11 = v6;
      v12 = 2112;
      v13 = v7;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", (uint8_t *)&v8, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_removeAccessories:message:", *(_QWORD *)(a1 + 48), 0);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id __78__HMDHome__removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v4, "cameraProfiles");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
    v7 = v4;
  else
    v7 = 0;

  return v7;
}

void __44__HMDHome__removeAccessoriesFromContainers___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v15 = 138543874;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v3;
      v10 = "%{public}@Failed to commit removeAccessoriesFromContainersTransaction [%@] with error: %@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_1CD062000, v11, v12, v10, (uint8_t *)&v15, v13);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 40);
    v15 = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v14;
    v10 = "%{public}@Successfully finished running removeAccessoriesFromContainersTransaction : %@";
    v11 = v7;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
}

void __26__HMDHome__removeService___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeServiceTransaction with error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __33__HMDHome__removeCharacteristic___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Failed to commit removeCharacteristicTransaction with error: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __44__HMDHome__removeAccessoryWithUUID_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v8 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __44__HMDHome__removeAccessoryWithUUID_message___block_invoke_2;
    v12[3] = &unk_1E89B5F88;
    v12[4] = v8;
    v13 = a1[5];
    v14 = v6;
    v15 = v5;
    v16 = a1[4];
    v17 = a1[6];
    dispatch_async(v9, v12);

  }
  else
  {
    v10 = a1[4];
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 52);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "respondWithError:", v11);

  }
}

void __44__HMDHome__removeAccessoryWithUUID_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "logEventSubmitter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "submitLogEvent:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  if (*(_QWORD *)(a1 + 48))
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 72), "name");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v12 = v6;
      v13 = 2112;
      v14 = v7;
      v15 = 2112;
      v16 = v8;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 64), "respondWithError:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_removeAccessories:message:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 32), "updateHomeLocation");
    v9 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 64), "name");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "saveWithReason:postSyncNotification:");

  }
}

uint64_t __45__HMDHome_removeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeAccessory:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __63__HMDHome__notifyClientOfNewlyAddedAccessories_requestMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
}

void __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  __CFString *v32;
  void *v33;
  void *v34;
  uint64_t i;
  void *v36;
  void *v37;
  __CFString *v38;
  __CFString *v39;
  void *v40;
  id v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t j;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  __int128 v59;
  void *v60;
  id obj;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[4];
  id v73;
  id v74;
  id v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  id v84;
  id v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[128];
  uint8_t v91[128];
  uint8_t buf[4];
  void *v93;
  __int16 v94;
  void *v95;
  __int16 v96;
  __CFString *v97;
  __int16 v98;
  void *v99;
  __int16 v100;
  id v101;
  _BYTE v102[128];
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v70 = a1;
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(v70 + 40);
    *(_DWORD *)buf = 138543618;
    v93 = v5;
    v94 = 2112;
    v95 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing accessories that were not added to resident: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  obj = *(id *)(v70 + 40);
  v63 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v102, 16);
  if (v63)
  {
    v62 = *(_QWORD *)v87;
    *(_QWORD *)&v7 = 138544386;
    v59 = v7;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v87 != v62)
        {
          v9 = v8;
          objc_enumerationMutation(obj);
          v8 = v9;
        }
        v66 = v8;
        v10 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v8);
        if (objc_msgSend(v10, "isPrimary", v59))
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = *(void **)(v70 + 32);
          objc_msgSend(v11, "owner");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v85 = 0;
          objc_msgSend(v11, "prepareUserManagementOperationForUser:accessory:type:model:error:", v12, v10, 2, 0, &v85);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = v85;

          if (v67)
          {
            v13 = (void *)MEMORY[0x1D17BA0A0]();
            v14 = *(id *)(v70 + 32);
            HMFGetOSLogHandle();
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = (void *)objc_opt_class();
              v18 = *(void **)(v70 + 32);
              v19 = v17;
              objc_msgSend(v18, "name");
              v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(v70 + 32), "owner");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "userID");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v59;
              v93 = v16;
              v94 = 2112;
              v95 = v17;
              v96 = 2112;
              v97 = v20;
              v98 = 2112;
              v99 = v22;
              v100 = 2112;
              v101 = v67;
              _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@[%@ %@] Failed to prepare remove operations for user '%@' with error: %@", buf, 0x34u);

            }
            objc_autoreleasePoolPop(v13);
          }
          else
          {
            objc_msgSend(v65, "addObject:", v64);
            v23 = *(void **)(v70 + 32);
            objc_msgSend(v23, "currentUser");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v84 = 0;
            objc_msgSend(v23, "prepareUserManagementOperationForUser:accessory:type:model:error:", v24, v10, 2, 0, &v84);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            v67 = v84;

            if (v67)
            {
              v25 = (void *)MEMORY[0x1D17BA0A0]();
              v26 = *(id *)(v70 + 32);
              HMFGetOSLogHandle();
              v27 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                v29 = (void *)objc_opt_class();
                v30 = *(void **)(v70 + 32);
                v31 = v29;
                objc_msgSend(v30, "name");
                v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(*(id *)(v70 + 32), "currentUser");
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v33, "userID");
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v59;
                v93 = v28;
                v94 = 2112;
                v95 = v29;
                v96 = 2112;
                v97 = v32;
                v98 = 2112;
                v99 = v34;
                v100 = 2112;
                v101 = v67;
                _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@[%@ %@] Failed to prepare remove operations for user '%@' with error: %@", buf, 0x34u);

              }
              objc_autoreleasePoolPop(v25);
            }
            else
            {
              objc_msgSend(v60, "addDependency:", v64);
              objc_msgSend(v65, "addObject:", v60);
            }
            v82 = 0u;
            v83 = 0u;
            v81 = 0u;
            v80 = 0u;
            v68 = v65;
            v71 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v80, v91, 16);
            if (v71)
            {
              v69 = *(_QWORD *)v81;
              do
              {
                for (i = 0; i != v71; ++i)
                {
                  if (*(_QWORD *)v81 != v69)
                    objc_enumerationMutation(v68);
                  v36 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * i);
                  if ((shouldLogPrivateInformation() & 1) != 0)
                  {
                    objc_msgSend(v36, "user");
                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v37, "userID");
                    v38 = (__CFString *)objc_claimAutoreleasedReturnValue();

                  }
                  else
                  {
                    v38 = CFSTR("...");
                    v39 = CFSTR("...");
                  }
                  v40 = (void *)MEMORY[0x1D17BA0A0](v39);
                  v41 = *(id *)(v70 + 32);
                  HMFGetOSLogHandle();
                  v42 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v43 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v36, "identifier");
                    v44 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v36, "accessory");
                    v45 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v45, "shortDescription");
                    v46 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138544130;
                    v93 = v43;
                    v94 = 2112;
                    v95 = v44;
                    v96 = 2112;
                    v97 = v38;
                    v98 = 2112;
                    v99 = v46;
                    _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@Adding operation '%@' to manager tracking remove user '%@' from accessory '%@'", buf, 0x2Au);

                  }
                  objc_autoreleasePoolPop(v40);
                  +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v47, "addOperation:", v36);

                }
                v71 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v80, v91, 16);
              }
              while (v71);
            }

          }
        }
        v8 = v66 + 1;
      }
      while (v66 + 1 != v63);
      v63 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v102, 16);
    }
    while (v63);
  }

  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v48 = *(id *)(v70 + 40);
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v76, v90, 16);
  if (!v49)
    goto LABEL_47;
  v50 = 0;
  v51 = *(_QWORD *)v77;
  do
  {
    for (j = 0; j != v49; ++j)
    {
      if (*(_QWORD *)v77 != v51)
        objc_enumerationMutation(v48);
      v53 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * j);
      if (objc_msgSend(v53, "isPrimary"))
      {
        v54 = v53;

        objc_msgSend(v54, "networkClientIdentifier");
        v55 = (void *)objc_claimAutoreleasedReturnValue();

        if (v55)
        {
          v56 = *(void **)(v70 + 32);
          objc_msgSend(v54, "networkClientIdentifier");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "_removeClientConfigurationWithIdentifier:", v57);

        }
        v50 = v54;
      }
    }
    v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v76, v90, 16);
  }
  while (v49);

  if (v50)
  {
    objc_initWeak((id *)buf, *(id *)(v70 + 32));
    v58 = *(void **)(v70 + 32);
    v72[0] = MEMORY[0x1E0C809B0];
    v72[1] = 3221225472;
    v72[2] = __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke_1042;
    v72[3] = &unk_1E89C1738;
    objc_copyWeak(&v75, (id *)buf);
    v73 = *(id *)(v70 + 40);
    v48 = v50;
    v74 = v48;
    objc_msgSend(v58, "_removeAccessory:completionHandler:", v48, v72);

    objc_destroyWeak(&v75);
    objc_destroyWeak((id *)buf);
LABEL_47:

  }
}

void __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke_1042(id *a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  void *v10;
  id v11;
  id v12;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v6 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke_2;
    v8[3] = &unk_1E89C07B8;
    v9 = v4;
    v10 = v6;
    v11 = a1[4];
    v12 = a1[5];
    dispatch_async(v7, v8);

  }
}

void __47__HMDHome__sharedAdminDidFailToAddAccessories___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 56), "name");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138543874;
      v9 = v5;
      v10 = 2112;
      v11 = v6;
      v12 = 2112;
      v13 = v7;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove accessory %@ with error: %@", (uint8_t *)&v8, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_removeAccessories:message:", *(_QWORD *)(a1 + 48), 0);
  }
}

void __53__HMDHome__notifyOwnerOfAddedAccessories_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  const __CFString *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543874;
      v14 = v11;
      v15 = 2112;
      v16 = CFSTR("kAddAccessoriesInternalRequestKey");
      v17 = 2112;
      v18 = v5;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Relayed message %@ with error %@", (uint8_t *)&v13, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
      (*(void (**)(uint64_t, id))(v12 + 16))(v12, v5);
  }

}

void __45__HMDHome__addOwnerToPrimaryAccessory_error___block_invoke(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (v4)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t __90__HMDHome_removeWithMergeSecondaryAccessory_removedFromBridgeAccessory_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeWithMergeSecondaryAccessory:removedFromBridgeAccessory:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void __34__HMDHome_notifyOfAddedAccessory___block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v4 = CFSTR("HMDNotificationAddedAccessoryKey");
  v5[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  logAndPostNotification(CFSTR("HMDNotificationHomeAddedAccessory"), v2, v3);

}

void __43__HMDHome_notifyOfRemovedAccessory_source___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v7[1] = CFSTR("HMDNotificationSourceKey");
  v8[0] = v3;
  v7[0] = CFSTR("HMDAccessoryNotificationKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("HMDHomeAccessoryRemovedNotification"), v4, v6);

}

- (void)__removeAccessory:(void *)a1 isBeingReplaced:(void *)a2 isForceUpdate:(char)a3 message:(void *)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void (*v30)(uint64_t);
  id v31;
  id v32;
  void *v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  char v39;
  NSObject *v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  NSObject *v46;
  void *v47;
  id obj;
  uint64_t v50;
  _QWORD block[4];
  id v52;
  _QWORD v53[2];
  void (*v54)(uint64_t);
  void *v55;
  void *v56;
  void *v57;
  NSObject *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[4];
  id v68;
  _BYTE v69[128];
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a4;
  if (a1)
  {
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v8 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "backingStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)v8;
    objc_msgSend(v9, "transaction:options:", v10, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v14 = v13;
    else
      v14 = 0;
    v15 = v14;

    v16 = MEMORY[0x1E0C809B0];
    if (v15)
    {
      objc_msgSend(a1, "accessories");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v67[0] = v16;
      v67[1] = 3221225472;
      v67[2] = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke;
      v67[3] = &unk_1E89B53F8;
      v68 = v15;
      objc_msgSend(v17, "na_filter:", v67);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v12, "addObjectsFromArray:", v18);
    }
    v47 = a1;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v19 = v12;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v63, v70, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v64;
      do
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v64 != v22)
            objc_enumerationMutation(v19);
          objc_msgSend(*(id *)(*((_QWORD *)&v63 + 1) + 8 * v23), "transactionWithObjectChangeType:", 3);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "add:withMessage:", v24, v7);

          ++v23;
        }
        while (v21 != v23);
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v63, v70, 16);
      }
      while (v21);
    }
    v42 = v15;
    v44 = v7;
    v45 = v6;

    v25 = dispatch_group_create();
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    obj = v19;
    v26 = v47;
    v50 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v69, 16);
    if (v50)
    {
      v27 = *(_QWORD *)v60;
      v46 = v25;
      do
      {
        v28 = 0;
        do
        {
          if (*(_QWORD *)v60 != v27)
            objc_enumerationMutation(obj);
          v29 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * v28);
          dispatch_group_enter(v25);
          v53[0] = MEMORY[0x1E0C809B0];
          v53[1] = 3221225472;
          v30 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2;
          v54 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2;
          v55 = &unk_1E89C20C8;
          v56 = v26;
          v57 = v29;
          v58 = v25;
          v31 = v26;
          v32 = v29;
          v33 = v11;
          v34 = v11;
          v35 = v53;
          if ((a3 & 1) == 0)
          {
            v36 = v27;
            objc_msgSend(v32, "uuid");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "activeNetworkRouterUUID");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = objc_msgSend(v37, "isEqual:", v38);

            if ((v39 & 1) != 0)
            {
              objc_msgSend(v31, "_updateActiveNetworkRouterAccessory:isReplacement:withTransaction:", 0, 0, v34);
              objc_msgSend(v31, "_clearAccessoryNetworkProtectionStateWithTransaction:", v34);
              objc_msgSend(v31, "_reconfigureAccessoriesOnRouterRemovalWithCompletion:", v35);
              v27 = v36;
              v25 = v46;
              v26 = v47;
              goto LABEL_24;
            }
            v30 = v54;
            v27 = v36;
            v25 = v46;
            v26 = v47;
          }
          v30((uint64_t)v35);
LABEL_24:

          ++v28;
          v11 = v33;
        }
        while (v50 != v28);
        v50 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v69, 16);
      }
      while (v50);
    }

    objc_msgSend(v26, "workQueue");
    v40 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_5;
    block[3] = &unk_1E89C2730;
    v52 = v11;
    v41 = v11;
    dispatch_group_notify(v25, v40, block);

    v7 = v44;
    v6 = v45;
  }

}

BOOL __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "hostAccessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_2(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  _QWORD v6[2];
  void (*v7)(uint64_t);
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v1 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v7 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_3;
  v8 = &unk_1E89C20C8;
  v9 = v1;
  v10 = v2;
  v11 = *(id *)(a1 + 48);
  v3 = v1;
  v4 = v2;
  v5 = v6;
  if ((objc_msgSend(v4, "isPrimary") & 1) != 0
    || objc_msgSend(v4, "conformsToProtocol:", &unk_1EFABB088)
    && objc_msgSend(v4, "supportsUserManagement"))
  {
    objc_msgSend(v3, "removeAllUsersAndCloudDataFromAccessory:completionHandler:", v4, v5);
  }
  else
  {
    v7((uint64_t)v5);
  }

}

uint64_t __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_5(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "run");
}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  _QWORD v11[4];
  uint64_t *v12;

  v1 = MEMORY[0x1E0C809B0];
  v6 = MEMORY[0x1E0C809B0];
  v7 = 3221225472;
  v8 = __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_4;
  v9 = &unk_1E89C2730;
  v2 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  v3 = v2;
  v4 = &v6;
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EFAEB658, v6, v7))
    v5 = v3;
  else
    v5 = 0;
  if (objc_msgSend(v5, "supportsDisassociation"))
  {
    v11[0] = v1;
    v11[1] = 3221225472;
    v11[2] = ____disassociateAccessoryIfSupported_block_invoke;
    v11[3] = &unk_1E89C1A48;
    v12 = v4;
    objc_msgSend(v3, "disassociateWithCompletionHandler:", v11);

  }
  else
  {
    v8((uint64_t)v4);
  }

}

void __67__HMDHome___removeAccessory_isBeingReplaced_isForceUpdate_message___block_invoke_4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __41__HMDHome__handleRemoveAccessoryMessage___block_invoke(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v8;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@User canceled consent for removing accessory", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v9 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
  else
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v11;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@User accepted consent for removing accessory", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 32), "_handleRemoveAccessoryAfterUserConsent:message:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
}

uint64_t __41__HMDHome__handleRemoveAccessoryMessage___block_invoke_1033(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "name");
}

uint64_t __40__HMDHome_handleRemoveAccessoryMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleRemoveAccessoryMessage:", *(_QWORD *)(a1 + 40));
}

void __44__HMDHome_handleRemoveAccessory_completion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = v3;
  if (v3)
    (*((void (**)(void *, id))v3 + 2))(v3, v5);

}

void __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  NSObject *v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t);
  void *v75;
  uint64_t v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  const __CFString *v83;
  uint64_t v84;
  uint8_t buf[4];
  void *v86;
  __int16 v87;
  void *v88;
  __int16 v89;
  unint64_t v90;
  __int16 v91;
  void *v92;
  _BYTE v93[128];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "registerPairedAccessory:transports:setupHash:delegate:", v3, objc_msgSend(*(id *)(a1 + 40), "supportedTransports"), 0, *(_QWORD *)(a1 + 32));

  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "mediaBrowser");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "accessoryAdvertisements");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v78, v93, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v79;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v79 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * i);
        objc_msgSend(v11, "identifier");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "identifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v12, "isEqualToString:", v13);

        if (v14)
          objc_msgSend(*(id *)(a1 + 40), "addAdvertisement:", v11);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v78, v93, 16);
    }
    while (v8);
  }

  objc_msgSend(*(id *)(a1 + 32), "_reachabilityChangedForAccessory:reachable:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isReachable"));
  if (objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "name");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v86 = v18;
      v87 = 2112;
      v88 = v19;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ setting remote access enabled", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(*(id *)(a1 + 40), "remoteAccessEnabled:", 1);
  }
  objc_msgSend(*(id *)(a1 + 48), "transactionResult");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "source");

  if ((v21 & 0xFFFFFFFFFFFFFFFDLL) == 1)
  {
    v22 = objc_msgSend(*(id *)(a1 + 32), "isOwnerUser");
    if ((_DWORD)v22)
    {
      v27 = *(void **)(a1 + 56);
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v72 = MEMORY[0x1E0C809B0];
      v73 = 3221225472;
      v74 = __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke_1027;
      v75 = &unk_1E89C21C0;
      v29 = *(void **)(a1 + 40);
      v76 = *(_QWORD *)(a1 + 32);
      v77 = v29;
      objc_msgSend(v27, "cleanupOperationsForAccessory:user:completion:", v28, 0, &v72);

    }
  }
  v30 = (void *)MEMORY[0x1D17BA0A0](v22, v23, v24, v25, v26);
  v31 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "shortDescription");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "isCurrentDeviceConfirmedPrimaryResident");
    HMFBooleanToString();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v86 = v33;
    v87 = 2112;
    v88 = v34;
    v89 = 2048;
    v90 = v21;
    v91 = 2112;
    v92 = v35;
    _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@Apple media accessory %@ being added to home - source %tu. IsPrimary: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v30);
  if (objc_msgSend(*(id *)(a1 + 40), "supportsTargetControl"))
  {
    if (v21 <= 1)
    {
      if (objc_msgSend(*(id *)(a1 + 40), "isCurrentAccessory"))
      {
        objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "preferenceForKey:", CFSTR("autoConfigureNewTargets"));
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = objc_msgSend(v37, "BOOLValue");

        if (v38)
          objc_msgSend(*(id *)(a1 + 40), "autoConfigureTargetControllers");
      }
    }
  }
  if (*(_QWORD *)(a1 + 64))
  {
    v39 = objc_msgSend(*(id *)(a1 + 40), "isCurrentAccessory");
    if ((_DWORD)v39)
    {
      v44 = (void *)MEMORY[0x1D17BA0A0](v39, v40, v41, v42, v43);
      v45 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        v86 = v47;
        v87 = 2112;
        v88 = v48;
        _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_INFO, "%{public}@Setting up media session for current accessory during add - %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v44);
      v49 = (id)objc_msgSend(*(id *)(a1 + 32), "_addMediaSessionForCurrentAccessory:", *(_QWORD *)(a1 + 40));
    }
  }
  v50 = *(void **)(a1 + 72);
  if (v50)
  {
    objc_msgSend(v50, "configureAudioDestinationController");
    if (objc_msgSend(*(id *)(a1 + 72), "isCurrentAccessory"))
    {
      objc_msgSend(*(id *)(a1 + 32), "createRemoteEventRouterServerIfNeeded");
      objc_msgSend(*(id *)(a1 + 32), "createCoordinationStateManagerForCurrentAccessory:", *(_QWORD *)(a1 + 72));
      objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = *(_QWORD *)(a1 + 32);
      v53 = *(_QWORD *)(a1 + 72);
      v83 = CFSTR("HMDAccessoryNotificationKey");
      v84 = v53;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v84, &v83, 1);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerDidAddCurrentAccessoryNotification"), v52, v54);

      objc_msgSend(*(id *)(a1 + 56), "currentAccessorySetupMetricDispatcher");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "markSetupEndStage:error:", 7, 0);

    }
    v56 = *(void **)(a1 + 32);
    v82 = *(_QWORD *)(a1 + 72);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v82, 1, v72, v73, v74, v75, v76);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "configureRemoteEventRouterClientControllerForAccessories:", v57);

    objc_msgSend(*(id *)(a1 + 32), "capabilitiesAggregator");
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 72), "uuid");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "didAddAccessory:", v59);

  }
  if (objc_msgSend(*(id *)(a1 + 40), "isCurrentAccessory", v72, v73, v74, v75, v76))
  {
    v60 = (void *)MEMORY[0x1D17BA0A0]();
    v61 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v86 = v63;
      _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_INFO, "%{public}@Notifying that we are a reachable accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v60);
    objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "postNotificationName:object:", CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), *(_QWORD *)(a1 + 32));

    v65 = *(void **)(a1 + 72);
    if (v65)
      objc_msgSend(v65, "configureSensors");
  }
  if (*(_BYTE *)(a1 + 88))
  {
    objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "confirmWithCompletionHandler:", 0);

  }
  v67 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "identifier");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v67, "retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:", v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(*(id *)(a1 + 80), "source") == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "_notifyClientOfNewlyAddedAccessories:requestMessage:", v69, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "notifyOfNewlyAddedAccessoryByThisOwnerDevice:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:", 0);
  }
  objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v70, "removeUnassociatedAccessoryWithIdentifier:", v71);

  objc_msgSend(*(id *)(a1 + 32), "notifyOfAddedAccessory:", *(_QWORD *)(a1 + 40));
}

uint64_t __50__HMDHome___handleAddMediaAccessoryModel_message___block_invoke_1027(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addAllUsersToAccessory:", *(_QWORD *)(a1 + 40));
}

void __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1019(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  id v32;
  _QWORD v34[5];
  id v35;
  uint64_t v36;
  _BYTE buf[12];
  __int16 v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 32), "remoteAccessIsEnabled"))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "shortDescription");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v5;
      v38 = 2112;
      v39 = v6;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@accessory %@ setting remote access enabled", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 40), "remoteAccessEnabled:", 1);
  }
  objc_msgSend(*(id *)(a1 + 32), "_reachabilityChangedForAccessory:reachable:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 40), "isReachable"));
  objc_msgSend(*(id *)(a1 + 48), "transactionResult");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "source");

  if (objc_msgSend(*(id *)(a1 + 40), "isPrimary"))
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "shortDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v12;
      v38 = 2112;
      v39 = v13;
      v40 = 2112;
      v41 = v14;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@accessory %@ handling added primary HAPAccessory: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    if (!*(_QWORD *)(a1 + 56))
    {
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)buf = 0;
      objc_msgSend(*(id *)(a1 + 40), "matchesHAPAccessoryWithServerIdentifier:linkType:", v15, buf);
      objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleNewlyPairedAccessory:linkType:", v15, *(_QWORD *)buf);

      if (!isWatch())
        objc_msgSend(*(id *)(a1 + 32), "__requestAccessoryBrowsing");

    }
    if ((v8 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      if (objc_msgSend(*(id *)(a1 + 32), "isOwnerUser"))
      {
        objc_msgSend(*(id *)(a1 + 64), "sharedAdminAddedTimestamp");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v17)
        {
          objc_msgSend(*(id *)(a1 + 32), "homeManager");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "identifier");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v34[0] = MEMORY[0x1E0C809B0];
          v34[1] = 3221225472;
          v34[2] = __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1020;
          v34[3] = &unk_1E89C21C0;
          v20 = *(void **)(a1 + 40);
          v34[4] = *(_QWORD *)(a1 + 32);
          v35 = v20;
          objc_msgSend(v18, "cleanupOperationsForAccessory:user:completion:", v19, 0, v34);

        }
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "removeUnassociatedAccessoryWithIdentifier:", v22);

    objc_msgSend(*(id *)(a1 + 32), "networkProtectionGroupRegistry");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "handleAddedAccessory:", *(_QWORD *)(a1 + 40));

  }
  v24 = *(_QWORD *)(a1 + 56);
  if (v24)
  {
    objc_msgSend(*(id *)(a1 + 40), "enableNotificationsWithHAPAccessory:homeNotificationsEnabled:", v24, *(unsigned __int8 *)(a1 + 72));
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    v25 = *(void **)(a1 + 32);
    v36 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v36, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "_subscribeForHomeNotificationsFromRemoteGateway:accessories:", 1, v26);

  }
  objc_msgSend(*(id *)(a1 + 48), "name");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v27, "isEqualToString:", CFSTR("kAddAccessoryRequestKey")))
  {

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "name");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "isEqualToString:", CFSTR("kAddAccessoriesInternalRequestKey"));

    if ((v29 & 1) == 0)
    {
      v30 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 48), "identifier");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = (id)objc_msgSend(v30, "retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:", v31);

      objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:", 0);
    }
  }
  if (v8 == 1)
    objc_msgSend(*(id *)(a1 + 32), "notifyOfNewlyAddedAccessoryByThisOwnerDevice:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "notifyOfAddedAccessory:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "reevaluateAccessoryInfo");
}

uint64_t __48__HMDHome___handleAddHAPAccessoryModel_message___block_invoke_1020(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addAllUsersToAccessory:", *(_QWORD *)(a1 + 40));
}

void __33__HMDHome__handleAddAccessories___block_invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  _QWORD block[4];
  id v7;
  uint64_t v8;
  id v9;

  v2 = *(NSObject **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __33__HMDHome__handleAddAccessories___block_invoke_2;
  block[3] = &unk_1E89C20C8;
  v4 = *(id *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = v4;
  v8 = v5;
  v9 = *(id *)(a1 + 56);
  dispatch_group_notify(v2, v3, block);

}

void __33__HMDHome__handleAddAccessories___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
  v2 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:", v3);
  v4 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_setupActiveNetworkRouterAccessory:existingRouterAccessories:", v4, *(_QWORD *)(a1 + 48));
}

void __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke_2;
  block[3] = &unk_1E89B8700;
  v11 = a1[5];
  v12 = a1[6];
  v13 = v6;
  v14 = a1[4];
  v15 = a1[7];
  v16 = a1[8];
  v17 = a1[9];
  v18 = v5;
  v19 = a1[10];
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

void __100__HMDHome__continuePairingAfterUserConsentWithAccessoryDescription_progressHandlerDelegate_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  BOOL v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BYTE v14[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  objc_msgSend(v2, "accessoryUUID");

  objc_msgSend(*(id *)(a1 + 48), "domain");
  objc_msgSend(*(id *)(a1 + 48), "code");

  v4 = *(_QWORD *)(a1 + 48) == 0;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 56);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v14 = 138543362;
      *(_QWORD *)&v14[4] = v13;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Client configuration with WiFi unique PSK created successfully", v14, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 80), "setNetworkCredential:", *(_QWORD *)(a1 + 88));
    objc_msgSend(*(id *)(a1 + 64), "setUsedWiFiPPSK:", 1);
    objc_msgSend(*(id *)(a1 + 32), "begin");
    *(_QWORD *)v14 = *(id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 56), "_pairAccessoryWithAccessoryDescription:configuration:pairingEvent:progressHandler:requestMessage:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 72));
    __HMFActivityScopeLeave();

  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)v14 = 138543874;
      *(_QWORD *)&v14[4] = v9;
      v15 = 2112;
      v16 = v10;
      v17 = 2112;
      v18 = v11;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate WiFi credential for accessory %@ with error: %@", v14, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 56), "logEventSubmitter");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "submitLogEvent:error:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48));

    objc_msgSend(*(id *)(a1 + 72), "respondWithError:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 56), "_removePendingAccessoryAdd:", *(_QWORD *)(a1 + 40));
  }
}

void __74__HMDHome_createLocalAddAccessoryProgressHandler_progressHandlerDelegate___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = WeakRetained;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMSetupAccessoryProgressAsString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Local add accessory progress handler called with progress: %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  if (v8)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      objc_msgSend(v5, "accessoryUUID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (a2 == 6)
      {
        if (v12)
        {
          v13 = *(void **)(a1 + 32);
          objc_msgSend(v5, "accessoryUUID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "localAccessoryAddRequiresConsent:", v14);

        }
      }
    }
  }

}

- (void)_handleAddAccessoryWithDescription:(void *)a3 progressHandlerDelegate:(void *)a4 message:
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  uint64_t v17;
  void *v18;
  const __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void (**v27)(_QWORD, _QWORD, _QWORD);
  HMDAddAccessoryProgressState *v28;
  void *v29;
  void *v30;
  HMDAddAccessoryProgressState *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  BOOL v45;
  void *v46;
  id *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  void *v51;
  int v52;
  id v53;
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v53 = a3;
  v8 = a4;
  v9 = v8;
  if (a1)
  {
    if ((objc_msgSend(v8, "isEntitledForSPIAccess") & 1) == 0)
    {
      v36 = (void *)MEMORY[0x1D17BA0A0]();
      v37 = a1;
      HMFGetOSLogHandle();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v56 = v39;
        _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_ERROR, "%{public}@Client does not have entitlement to use SPI", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v36);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithError:", v14);
      goto LABEL_31;
    }
    objc_msgSend(a1, "accessories");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count");
    v12 = maximumAccessoriesPerHome;

    if (v11 >= v12)
    {
      v40 = (void *)MEMORY[0x1D17BA0A0]();
      v41 = a1;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v56 = v43;
        _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@Can't add additional accessories; already at maximum accessories for home",
          buf,
          0xCu);

      }
      objc_autoreleasePoolPop(v40);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 49);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithError:", v14);
      goto LABEL_31;
    }
    v54 = 0;
    v52 = objc_msgSend(a1, "_shouldAllowAddingAccessoryWithDescription:requestMessage:error:", v7, v9, &v54);
    v13 = v54;
    v14 = v13;
    if ((v52 & 1) != 0)
      goto LABEL_5;
    objc_msgSend(v13, "domain");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v44, "isEqualToString:", *MEMORY[0x1E0CB8C70]))
    {
      v45 = objc_msgSend(v14, "code") == 97;

      if (v45)
      {
LABEL_5:
        objc_msgSend(v7, "appIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15 == 0;

        if (v16)
        {
          objc_msgSend(v9, "applicationBundleIdentifier");
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = (void *)v17;
          if (v17)
            v19 = (const __CFString *)v17;
          else
            v19 = &stru_1E89C3E38;
          objc_msgSend(v7, "updateAppIdentifier:", v19);

        }
        os_unfair_recursive_lock_lock_with_options();
        objc_msgSend(a1[95], "setObject:forKey:", v9, v7);
        os_unfair_recursive_lock_unlock();
        objc_msgSend(a1, "accessoryBrowser");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "unpairedHAPAccessoryWithAccessoryDescription:", v7);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v21, "category");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v22)
        {
          v23 = (void *)MEMORY[0x1E0CBA1D8];
          objc_msgSend(v7, "setupAccessoryPayload");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "categoryNumber");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "categoryWithCategoryIdentifier:", v25);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

        }
        objc_msgSend(v21, "uuid");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        HMDHomeCreateAddAccessoryProgressHandler(a1, v7, v9);
        v27 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

        v28 = [HMDAddAccessoryProgressState alloc];
        objc_msgSend(v21, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "name");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = -[HMDAddAccessoryProgressState initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:](v28, "initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:", v29, v30, 0, v22, 0, 0);

        objc_msgSend(a1, "accessoryBrowser");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "uuid");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "registerProgressHandler:unpairedAccessoryUUID:", v27, v33);

        if (v52)
        {
          objc_msgSend(v7, "accessoryUUID");
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          if (v34)
          {
            objc_msgSend(v7, "accessoryUUID");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(a1, "_continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:", v35, 0, v9);

          }
          else
          {
            objc_msgSend(a1, "_continuePairingAfterUserConsentWithAccessoryDescription:progressHandlerDelegate:message:", v7, v53, v9);
          }
        }
        else
        {
          ((void (**)(_QWORD, uint64_t, HMDAddAccessoryProgressState *))v27)[2](v27, 9, v31);
        }

LABEL_31:
        goto LABEL_32;
      }
    }
    else
    {

    }
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = a1;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "category");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "localizedDescription");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v56 = v49;
      v57 = 2112;
      v58 = v51;
      v59 = 2112;
      v60 = v14;
      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_INFO, "%{public}@Cannot add an accessory of category '%@', error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v46);
    objc_msgSend(v9, "respondWithError:", v14);
    goto LABEL_31;
  }
LABEL_32:

}

- (void)_addMediaAccessory:(void *)a3 message:
{
  id v5;
  void *v6;
  int v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, void *);
  void *v38;
  id v39;
  uint64_t *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE buf[24];
  uint64_t (*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t);
  id v49;
  uint8_t v50[4];
  void *v51;
  __int16 v52;
  id v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  void *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v34 = a3;
  if (a1)
  {
    objc_msgSend(v5, "identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("00000000-0000-0000-0000-C2EE6102B308"));

    if (v7)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = a1;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v5;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@The accessory %@ has an unknown media route identifier", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 9001);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "respondWithError:", v12);

    }
    else
    {
      v42 = 0;
      v43 = &v42;
      v44 = 0x2020000000;
      v45 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v47 = __Block_byref_object_copy__10535;
      v48 = __Block_byref_object_dispose__10536;
      v49 = 0;
      objc_msgSend(a1, "appleMediaAccessories");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = MEMORY[0x1E0C809B0];
      v36 = 3221225472;
      v37 = __38__HMDHome__addMediaAccessory_message___block_invoke;
      v38 = &unk_1E89A49A0;
      v14 = v5;
      v39 = v14;
      v40 = &v42;
      v41 = buf;
      objc_msgSend(v13, "na_each:", &v35);

      if (v43[3] >= 1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        if (v15)
          objc_msgSend(a1, "_submitRemovalLogEventForAccessory:isLocalRemoval:isLocalFallback:isDuplicate:duplicateCount:error:", v15, 0, 0, 1);
      }
      v16 = v14;
      v17 = v34;
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = a1;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "shortDescription");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "isCurrentDevicePrimaryResident");
        HMFBooleanToString();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v50 = 138544130;
        v51 = v21;
        v52 = 2112;
        v53 = v16;
        v54 = 2112;
        v55 = v22;
        v56 = 2112;
        v57 = v23;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Performing local add of media accessory: %@. Message: %@ - isPrimaryResident: %@", v50, 0x2Au);

      }
      objc_autoreleasePoolPop(v18);
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v24))
      {
        objc_msgSend(v16, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v50 = 138412290;
        v51 = v25;
        _os_signpost_emit_with_name_impl(&dword_1CD062000, v24, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "AddAccessory", "accessoryUUID=%{signpost.description:attribute}@ ", v50, 0xCu);

      }
      objc_msgSend(v16, "addTransactionForHome:", v19, v34, v35, v36, v37, v38);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "roomForEntireHome");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "uuid");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "UUIDString");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setRoomUUID:", v29);

      objc_msgSend(v19, "backingStore");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "name");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "transaction:options:", v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v33, "add:withMessage:", v26, v17);
      objc_msgSend(v33, "run");
      if (os_signpost_enabled(v24))
      {
        *(_WORD *)v50 = 0;
        _os_signpost_emit_with_name_impl(&dword_1CD062000, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "AddAccessory", ", v50, 2u);
      }

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v42, 8);
    }
  }

}

void __38__HMDHome__addMediaAccessory_message___block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  int v6;
  id v7;

  v7 = a2;
  if (objc_msgSend(v7, "isHomePod"))
  {
    objc_msgSend(*(id *)(a1 + 32), "serialNumber");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "serialNumber");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "isEqualToString:", v5);

    if (v6)
    {
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
    }
  }

}

void __118__HMDHome__accessoryPairingDidComplete_configuration_pairingEvent_accessoryServer_certificationStatus_requestMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_primaryAccessoryForServer:", *(_QWORD *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0;
  objc_msgSend(v5, "preferredHAPAccessoryForOperation:linkType:", 1, &v27);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "pairingMetricDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v7, "copy");
  objc_msgSend(*(id *)(a1 + 40), "setMatterMetrics:", v8);

  objc_msgSend(*(id *)(a1 + 32), "clearPairingMetrics");
  objc_msgSend(*(id *)(a1 + 40), "updateEventPropertiesWithPairedAccessory:", v5);
  if (objc_msgSend(*(id *)(a1 + 40), "isMatterAccessory")
    && objc_msgSend(*(id *)(a1 + 40), "isAddOperation"))
  {
    if (v3)
      +[HMDMatterAccessoryPairingEndContext hmdContextWithStep:error:](HMDMatterAccessoryPairingEndContext, "hmdContextWithStep:error:", 24, v3);
    else
      +[HMDMatterAccessoryPairingEndContext pairingCompletedContext](HMDMatterAccessoryPairingEndContext, "pairingCompletedContext");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    notifyMatterMetricPairingEnded(WeakRetained, v9);
  }
  else
  {
    objc_msgSend(WeakRetained, "logEventSubmitter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "submitLogEvent:error:", *(_QWORD *)(a1 + 40), v3);
  }

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = WeakRetained;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "accessoryName");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v29 = v13;
    v30 = 2112;
    v31 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@_handleAddAccessory: added accessories for accessory %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(v5, "metricLoggingVendorDetails");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "server");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  v19 = *(void **)(a1 + 48);
  v20 = *(id *)(a1 + 56);
  objc_msgSend(v19, "accessoryUUID");

  objc_msgSend(*(id *)(a1 + 32), "category");
  objc_msgSend(v15, "model");

  objc_msgSend(v15, "manufacturer");
  objc_msgSend(v15, "firmwareVersion");

  v21 = (id)HAPLinkTypeDescription();
  objc_msgSend(v18, "isWacAccessory");

  v22 = (id)HMFBooleanToString();
  v23 = (id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 40), "isThreadAccessory");
  v24 = (id)HMFBooleanToString();
  objc_msgSend(*(id *)(a1 + 40), "accessorySupportsWoL");

  v25 = (id)HMFBooleanToString();
  objc_msgSend(v11, "homeLocationHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "updateHomeLocation");

  objc_msgSend(v11, "_evaluateShouldRelaunchAndSetRelaunch");
}

void __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke_2;
  block[3] = &unk_1E89A4900;
  v11 = a1[5];
  v12 = a1[6];
  v13 = v6;
  v14 = a1[4];
  v15 = a1[7];
  v16 = a1[8];
  v17 = a1[9];
  v18 = v5;
  v19 = a1[10];
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

void __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  NSObject *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  _QWORD block[5];
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    v13 = *(void **)(a1 + 32);
    v14 = (void *)MEMORY[0x1E0CB35C8];
    v15 = 2;
LABEL_7:
    objc_msgSend(v14, "hmErrorWithCode:", v15);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v16);
    goto LABEL_8;
  }
  if (v5)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v31 = v11;
      v32 = 2112;
      v33 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@WAC failed for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v13 = *(void **)(a1 + 32);
    v14 = (void *)MEMORY[0x1E0CB35C8];
    v15 = 48;
    goto LABEL_7;
  }
  v17 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v18 = v17;
  else
    v18 = 0;
  v16 = v18;

  if (v16)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v19 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke_962;
    block[3] = &unk_1E89C20C8;
    block[4] = WeakRetained;
    v28 = v16;
    v29 = *(id *)(a1 + 32);
    dispatch_async(v19, block);

  }
  else
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = WeakRetained;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v23;
      v32 = 2112;
      v33 = (id)objc_opt_class();
      v24 = v33;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Post-WAC not supported for type %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    v25 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "respondWithError:", v26);

  }
LABEL_8:

}

- (void)_addAndMaybeAssociateMediaAccessory:(void *)a3 message:
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id inited;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id location;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    if ((objc_msgSend(a1, "isOwnerUser") & 1) != 0)
    {
      objc_msgSend(a1, "homeManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "accessorySetupMetricDispatcherForAccessoryUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "addHome:", a1);
      if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EFAAB658)
        && objc_msgSend(v5, "supportsAssociation"))
      {
        inited = objc_initWeak(&location, a1);
        v11 = (void *)MEMORY[0x1D17BA0A0](inited);
        v12 = a1;
        HMFGetOSLogHandle();
        v13 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v25 = v14;
          v26 = 2112;
          v27 = v5;
          _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Starting association for media accessory: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v11);
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke;
        v19[3] = &unk_1E89BCB20;
        objc_copyWeak(&v22, &location);
        v20 = v5;
        v21 = v6;
        objc_msgSend(v20, "associateToHome:completionHandler:", v12, v19);

        objc_destroyWeak(&v22);
        objc_destroyWeak(&location);
      }
      else
      {
        -[HMDHome _addMediaAccessory:message:](a1, v5, v6);
      }
    }
    else
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = a1;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v25 = v18;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Must be owner to add WHA accessory", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "respondWithError:", v9);
    }

  }
}

void __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (v3)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = v5;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = a1[4];
      *(_DWORD *)buf = 138543874;
      v19 = v9;
      v20 = 2112;
      v21 = v10;
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to add accessory, %@, with error: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(a1[5], "respondWithError:", v3);
  }
  else if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke_1007;
    block[3] = &unk_1E89BD988;
    objc_copyWeak(&v17, a1 + 6);
    v15 = a1[5];
    v16 = a1[4];
    dispatch_async(v11, block);

    objc_destroyWeak(&v17);
  }
  else
  {
    v12 = a1[5];
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "respondWithError:", v13);

  }
}

void __55__HMDHome__addAndMaybeAssociateMediaAccessory_message___block_invoke_1007(void **a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    -[HMDHome _addMediaAccessory:message:](WeakRetained, a1[5], a1[4]);
  }
  else
  {
    v3 = a1[4];
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v4);

  }
}

void __49__HMDHome__addAndMaybeWACMediaAccessory_message___block_invoke_962(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = a1[4];
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Continuing to add accessory post-WAC", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  -[HMDHome _addAndMaybeAssociateMediaAccessory:message:](a1[4], a1[5], a1[6]);
}

void __93__HMDHome__continuePairingAfterUserConsentWithAccessoryUUID_orUnassociatedAccessory_message___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  BOOL v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _BYTE v14[12];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  objc_msgSend(v2, "accessoryUUID");

  objc_msgSend(*(id *)(a1 + 48), "domain");
  objc_msgSend(*(id *)(a1 + 48), "code");

  v4 = *(_QWORD *)(a1 + 48) == 0;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 56);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v14 = 138543362;
      *(_QWORD *)&v14[4] = v13;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Client configuration with WiFi unique PSK created successfully", v14, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 80), "setNetworkCredential:", *(_QWORD *)(a1 + 88));
    objc_msgSend(*(id *)(a1 + 64), "setUsedWiFiPPSK:", 1);
    objc_msgSend(*(id *)(a1 + 32), "begin");
    *(_QWORD *)v14 = *(id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 56), "_pairAccessoryWithAccessoryDescription:unpairedAccessory:configuration:pairingEvent:requestMessage:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
    __HMFActivityScopeLeave();

  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)v14 = 138543874;
      *(_QWORD *)&v14[4] = v9;
      v15 = 2112;
      v16 = v10;
      v17 = 2112;
      v18 = v11;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate WiFi credential for accessory %@ with error: %@", v14, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 56), "logEventSubmitter");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "submitLogEvent:error:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48));

    objc_msgSend(*(id *)(a1 + 72), "respondWithError:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 56), "_removePendingAccessoryAdd:", *(_QWORD *)(a1 + 40));
  }
}

void __86__HMDHome_performLocalAddAccessoryWithDescription_progressHandlerDelegate_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  __CFString *v12;
  uint64_t v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (id)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("failed with error: %@"), v5);
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = CFSTR("completed");
    }
    *(_DWORD *)buf = 138543618;
    v15 = v11;
    v16 = 2112;
    v17 = v12;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Perform local add accessory %@", buf, 0x16u);
    if (v5)

  }
  objc_autoreleasePoolPop(v8);
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v5);

}

void __27__HMDHome_removeAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Retrieval cancelled, accessory removed"), 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:", v2, v4, 0, 0);

  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "services", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(a1 + 32), "_removeService:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v10++));
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }

}

void __27__HMDHome_removeAccessory___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "remoteEventRouterClientController");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeResidentRouterForAccessoryUUID:", v2);

}

uint64_t __27__HMDHome__addAccessories___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addAccessory:", a2);
}

uint64_t __67__HMDHome_destinationControllerWithCommittedDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "committedData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destinationIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __58__HMDHome_destinationControllerWithDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "data");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destinationIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __47__HMDHome_destinationControllerWithIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __33__HMDHome_destinationControllers__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "audioDestinationController");
}

id __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(a2, "audioDestinationManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destination");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(a1) = objc_msgSend(v4, "containsSupportedOptions:", *(_QWORD *)(a1 + 32));

  if ((_DWORD)a1)
    v5 = v3;
  else
    v5 = 0;

  return v5;
}

id __56__HMDHome_mediaDestinationManagersWithSupportedOptions___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  id v7;

  v3 = a2;
  objc_msgSend(v3, "audioDestinationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destination");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "containsSupportedOptions:", *(_QWORD *)(a1 + 40)))
  {

    goto LABEL_5;
  }
  v6 = _mediaSystemsContainsAccessory(*(void **)(a1 + 32), v3);

  if ((v6 & 1) != 0)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v7 = v4;
LABEL_6:

  return v7;
}

id __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  id v7;

  v3 = a2;
  objc_msgSend(v3, "audioDestinationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destination");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "containsHomeTheaterSupportedOptions"))
  {

    goto LABEL_5;
  }
  v6 = _mediaSystemsContainsAccessory(*(void **)(a1 + 32), v3);

  if ((v6 & 1) != 0)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v7 = v4;
LABEL_6:

  return v7;
}

id __66__HMDHome_mediaDestinationManagersWithHomeTheaterSupportedOptions__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  int v4;
  id v5;

  objc_msgSend(a2, "audioDestinationManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "destination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "containsHomeTheaterSupportedOptions");

  if (v4)
    v5 = v2;
  else
    v5 = 0;

  return v5;
}

uint64_t __55__HMDHome_destinationManagerWithDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "destination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __50__HMDHome_destinationManagerWithParentIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "destination");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "parentIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  id v8;

  objc_msgSend(a2, "components");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke_2;
  v7[3] = &unk_1E89A4770;
  v4 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = v4;
  v5 = objc_msgSend(v3, "na_any:", v7);

  return v5;
}

uint64_t __69__HMDHome_rootDestinationManagerWithDescendantDestinationIdentifier___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "accessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (v7)
  {
    v8 = *(void **)(a1 + 40);
    objc_msgSend(v7, "audioDestination");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uniqueIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v8, "hmf_isEqualToUUID:", v10);

  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543874;
      v18 = v15;
      v19 = 2112;
      v20 = v3;
      v21 = 2112;
      v22 = v4;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to apple media accessory from component: %@ accessory: %@", (uint8_t *)&v17, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    v11 = 0;
  }

  return v11;
}

uint64_t __74__HMDHome_destinationManagersWithDestinationIdentifiers_supportedOptions___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

id __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  objc_msgSend(v3, "audioDestinationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 32);
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = objc_msgSend(v5, "containsObject:", v6);

  if ((_DWORD)v5)
  {
    objc_msgSend(v3, "targetAccessory");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id __55__HMDHome_targetAccessoriesWithDestinationIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  objc_msgSend(v3, "audioDestinationManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 32);
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = objc_msgSend(v5, "containsObject:", v6);

  if ((_DWORD)v5)
    v7 = v3;
  else
    v7 = 0;

  return v7;
}

uint64_t __56__HMDHome_audioDestinationControllerDataForDestination___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(a2, "audioDestinationControllerData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "destinationIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uniqueIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

id __32__HMDHome_appleMediaAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

uint64_t __27__HMDHome__setAccessories___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uuid");
}

uint64_t __29__HMDHome__handleRemoveZone___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __26__HMDHome__handleAddZone___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  void *v5;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v6[0] = CFSTR("kZoneUUID");
    objc_msgSend(*(id *)(a1 + 40), "UUIDString");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[1] = CFSTR("kZoneName");
    v7[0] = v4;
    v7[1] = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v5);

  }
}

void __25__HMDHome__handleRename___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    v5 = CFSTR("kHomeName");
    v6[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v4);

  }
}

id __69__HMDHome__unexpectedCharacteristicsFromCharacteristicNotifications___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char isKindOfClass;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  v6 = 0;
  if ((isKindOfClass & 1) != 0 && v4)
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v3);
    objc_msgSend(*(id *)(a1 + 40), "accessoryWithUUID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;
    v6 = v9;

  }
  return v6;
}

- (void)_notificationPayloadsForRemoteGateway:(void *)a3 accessories:(_QWORD *)a4 enableCharacteristicNotificationPayload:(_QWORD *)a5 characteristicNotificationThresholdsPayload:(_QWORD *)a6 disableCharacteristicNotificationPayload:(_QWORD *)a7 enableMediaNotificationPayload:(_QWORD *)a8 disableMediaNotificationPayload:
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  char v65;
  void *v66;
  void *v67;
  int v68;
  void *v69;
  void *v70;
  char v71;
  char v72;
  void *v73;
  void *v74;
  int v75;
  void *v76;
  id v77;
  NSObject *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  int v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  NSObject *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  id v104;
  NSObject *v105;
  void *v106;
  void *v110;
  id v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  id v120;
  void *v121;
  void *v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  void *v134;
  void *context;
  void *contexta;
  id obj;
  id obja;
  id v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _BYTE buf[32];
  __int16 v167;
  void *v168;
  __int16 v169;
  void *v170;
  __int16 v171;
  void *v172;
  _BYTE v173[128];
  _BYTE v174[128];
  __int128 v175;
  _BYTE v176[128];
  _BYTE v177[128];
  _BYTE v178[128];
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v113 = a3;
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    v162 = 0u;
    v163 = 0u;
    v164 = 0u;
    v165 = 0u;
    objc_msgSend(a1, "triggers");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v162, v178, 16);
    v132 = a1;
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v163;
      v133 = *(_QWORD *)v163;
      do
      {
        v12 = 0;
        context = (void *)v10;
        do
        {
          if (*(_QWORD *)v163 != v11)
            objc_enumerationMutation(obj);
          v13 = *(id *)(*((_QWORD *)&v162 + 1) + 8 * v12);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v14 = v13;
          else
            v14 = 0;
          v15 = v14;

          if (objc_msgSend(v15, "shouldActivateOnLocalDevice"))
          {
            v140 = v15;
            v142 = v12;
            v160 = 0u;
            v161 = 0u;
            v158 = 0u;
            v159 = 0u;
            objc_msgSend(v15, "characteristicEvents");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v158, v177, 16);
            if (v17)
            {
              v18 = v17;
              v19 = *(_QWORD *)v159;
              do
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v159 != v19)
                    objc_enumerationMutation(v16);
                  v21 = *(void **)(*((_QWORD *)&v158 + 1) + 8 * i);
                  objc_msgSend(v21, "characteristic");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v22)
                  {
                    objc_msgSend(v21, "characteristic");
                    v23 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v144, "addObject:", v23);

                  }
                  else
                  {
                    v24 = (void *)MEMORY[0x1D17BA0A0]();
                    v25 = v132;
                    HMFGetOSLogHandle();
                    v26 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                    {
                      HMFGetLogIdentifier();
                      v27 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      *(_QWORD *)&buf[4] = v27;
                      *(_WORD *)&buf[12] = 2112;
                      *(_QWORD *)&buf[14] = v21;
                      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Characteristic of HMDCharacteristicEvent %@ is nil!", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(v24);
                  }
                  a1 = v132;
                }
                v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v158, v177, 16);
              }
              while (v18);
            }

            v11 = v133;
            v10 = (uint64_t)context;
            v15 = v140;
            v12 = v142;
          }

          ++v12;
        }
        while (v12 != v10);
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v162, v178, 16);
      }
      while (v10);
    }

    v28 = 0x1E0C99000uLL;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    if (a7)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v114 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v114 = 0;
    }
    if (a8)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v110 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v110 = 0;
    }
    v29 = 0x1E0C99000uLL;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v120 = v113;
    v30 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v154, v176, 16);
    if (v30)
    {
      v31 = v30;
      v32 = v114;
      if (!a2)
        v32 = v110;
      v115 = v32;
      v123 = *(_QWORD *)v155;
      obja = (id)*MEMORY[0x1E0D16198];
      do
      {
        v33 = 0;
        v119 = v31;
        do
        {
          if (*(_QWORD *)v155 != v123)
            objc_enumerationMutation(v120);
          v125 = v33;
          v34 = *(void **)(*((_QWORD *)&v154 + 1) + 8 * v33);
          objc_msgSend(*(id *)(v29 + 3560), "array");
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v29 + 3560), "array");
          v130 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v28 + 3592), "dictionary");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = v34;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v37 = v36;
          else
            v37 = 0;
          v38 = v37;

          v39 = v36;
          v40 = v38;
          v41 = v39;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v42 = v41;
          else
            v42 = 0;
          v43 = v42;

          v145 = v35;
          if (v40)
          {
            v124 = v43;
            if (shouldSkipRemoteAccessoryNotificationRegistration(a1, v40))
            {
              v44 = (void *)MEMORY[0x1D17BA0A0]();
              v45 = a1;
              HMFGetOSLogHandle();
              v46 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v47 = (void *)objc_claimAutoreleasedReturnValue();
                *(_QWORD *)&buf[8] = 0;
                *(_QWORD *)buf = 0;
                objc_msgSend(v40, "uuid");
                v48 = (void *)objc_claimAutoreleasedReturnValue();

                if (v48)
                {
                  objc_msgSend(v40, "uuid");
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v49, "getUUIDBytes:", buf);

                }
                else
                {
                  *(_OWORD *)buf = *MEMORY[0x1E0D286F8];
                }
                v175 = *(_OWORD *)buf;
                *(_DWORD *)buf = 138543874;
                *(_QWORD *)&buf[4] = v47;
                *(_WORD *)&buf[12] = 1040;
                *(_DWORD *)&buf[14] = 16;
                *(_WORD *)&buf[18] = 2096;
                *(_QWORD *)&buf[20] = &v175;
                _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_INFO, "%{public}@Dropping all characteristics for %{uuid_t}.16P from remote notification as partitioned network is no longer supported by residents", buf, 0x1Cu);

                v29 = 0x1E0C99000;
                v31 = v119;
              }

              objc_autoreleasePoolPop(v44);
              v50 = v130;
              v35 = v145;
              v43 = v124;
              goto LABEL_111;
            }
            v121 = v41;
            v122 = v40;
            v152 = 0u;
            v153 = 0u;
            v150 = 0u;
            v151 = 0u;
            objc_msgSend(v40, "services");
            v126 = (id)objc_claimAutoreleasedReturnValue();
            v128 = objc_msgSend(v126, "countByEnumeratingWithState:objects:count:", &v150, v174, 16);
            if (!v128)
              goto LABEL_94;
            v127 = *(_QWORD *)v151;
            while (1)
            {
              v55 = 0;
              do
              {
                if (*(_QWORD *)v151 != v127)
                  objc_enumerationMutation(v126);
                v129 = v55;
                v56 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * v55);
                objc_msgSend(v56, "type");
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                v146 = 0u;
                v147 = 0u;
                v148 = 0u;
                v149 = 0u;
                objc_msgSend(v56, "characteristics");
                v58 = (void *)objc_claimAutoreleasedReturnValue();
                v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v146, v173, 16);
                if (v59)
                {
                  v60 = v59;
                  v61 = *(_QWORD *)v147;
                  v141 = *(_QWORD *)v147;
                  v143 = v58;
                  do
                  {
                    v62 = 0;
                    v131 = v60;
                    do
                    {
                      if (*(_QWORD *)v147 != v61)
                        objc_enumerationMutation(v58);
                      v63 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * v62);
                      if (objc_msgSend(v63, "supportsNotification"))
                      {
                        objc_msgSend(a1, "hapMetadata");
                        v64 = (void *)objc_claimAutoreleasedReturnValue();
                        v65 = objc_msgSend(v64, "shouldFilterEnableNotificationsForCharacteristicType:serviceType:", 0, v57);

                        if ((v65 & 1) == 0)
                        {
                          v66 = v57;
                          if (objc_msgSend(v57, "isEqualToString:", obja))
                          {
                            objc_msgSend(v63, "type");
                            v67 = (void *)objc_claimAutoreleasedReturnValue();
                            v68 = objc_msgSend(v67, "isEqualToString:", CFSTR("000000A6-0000-1000-8000-0026BB765291"));

                          }
                          else
                          {
                            v68 = 0;
                          }
                          objc_msgSend(a1, "hapMetadata");
                          v69 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v63, "type");
                          v70 = (void *)objc_claimAutoreleasedReturnValue();
                          v71 = objc_msgSend(v69, "shouldAutoEnableNotificationForCharacteristic:ofService:", v70, v66);

                          v72 = objc_msgSend(v63, "isNonHomeNotificationsEnabled");
                          if ((objc_msgSend(v144, "containsObject:", v63) & 1) != 0
                            || (v72 & 1) != 0
                            || (v71 & 1) != 0
                            || v68)
                          {
                            contexta = (void *)MEMORY[0x1D17BA0A0]();
                            v77 = a1;
                            HMFGetOSLogHandle();
                            v78 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
                            {
                              HMFGetLogIdentifier();
                              v79 = (void *)objc_claimAutoreleasedReturnValue();
                              HMFBooleanToString();
                              v80 = (void *)objc_claimAutoreleasedReturnValue();
                              HMFBooleanToString();
                              v81 = (void *)objc_claimAutoreleasedReturnValue();
                              HMFBooleanToString();
                              v82 = (void *)objc_claimAutoreleasedReturnValue();
                              HMFBooleanToString();
                              v83 = (void *)objc_claimAutoreleasedReturnValue();
                              *(_DWORD *)buf = 138544642;
                              *(_QWORD *)&buf[4] = v79;
                              *(_WORD *)&buf[12] = 2112;
                              *(_QWORD *)&buf[14] = v63;
                              *(_WORD *)&buf[22] = 2112;
                              *(_QWORD *)&buf[24] = v80;
                              v167 = 2112;
                              v168 = v81;
                              v169 = 2112;
                              v170 = v82;
                              v171 = 2112;
                              v172 = v83;
                              _os_log_impl(&dword_1CD062000, v78, OS_LOG_TYPE_DEBUG, "%{public}@Enabling characteristic %@ because characteristicInEvent: %@ nonHomeNotificationsEnabled: %@ autoEnableNotification: %@ accessoryFlags: %@", buf, 0x3Eu);

                              v60 = v131;
                            }

                            objc_autoreleasePoolPop(contexta);
                            objc_msgSend(v63, "changeThresholdForNonHomeClientEnabledNotifications");
                            v84 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v77, "hapMetadata");
                            v85 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v63, "type");
                            v86 = (void *)objc_claimAutoreleasedReturnValue();
                            v57 = v66;
                            v87 = objc_msgSend(v85, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v86, v66);

                            v35 = v145;
                            if (v84 && (v87 & a2 & 1) == 0)
                            {
                              objc_msgSend(v63, "instanceID");
                              v88 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v88, "stringValue");
                              v89 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(v145, "setObject:forKeyedSubscript:", v84, v89);

                            }
                            objc_msgSend(v63, "instanceID");
                            v90 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v134, "addObject:", v90);

                            a1 = v132;
                          }
                          else
                          {
                            v35 = v145;
                            if (a2)
                            {
                              objc_msgSend(v63, "type");
                              v73 = (void *)objc_claimAutoreleasedReturnValue();
                              objc_msgSend(a1, "hapMetadata");
                              v74 = (void *)objc_claimAutoreleasedReturnValue();
                              v57 = v66;
                              v75 = objc_msgSend(v74, "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v73, v66);

                              if (v75)
                              {
                                objc_msgSend(v63, "instanceID");
                                v76 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v134, "addObject:", v76);

                              }
LABEL_88:

                            }
                            else
                            {
                              v57 = v66;
                              if (!objc_msgSend(v63, "isClientNotificationEnabled"))
                              {
                                objc_msgSend(v63, "instanceID");
                                v73 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v130, "addObject:", v73);
                                goto LABEL_88;
                              }
                              v91 = (void *)MEMORY[0x1D17BA0A0]();
                              v92 = a1;
                              HMFGetOSLogHandle();
                              v93 = objc_claimAutoreleasedReturnValue();
                              if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
                              {
                                HMFGetLogIdentifier();
                                v94 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v63, "notificationRegistrations");
                                v95 = (void *)objc_claimAutoreleasedReturnValue();
                                *(_DWORD *)buf = 138543874;
                                *(_QWORD *)&buf[4] = v94;
                                *(_WORD *)&buf[12] = 2112;
                                *(_QWORD *)&buf[14] = v63;
                                *(_WORD *)&buf[22] = 2112;
                                *(_QWORD *)&buf[24] = v95;
                                _os_log_impl(&dword_1CD062000, v93, OS_LOG_TYPE_DEFAULT, "%{public}@Not disabling characteristic %@ because client(s) are registered: %@", buf, 0x20u);

                                v57 = v66;
                                v35 = v145;
                              }

                              objc_autoreleasePoolPop(v91);
                            }
                          }
                          v61 = v141;
                          v58 = v143;
                        }
                      }
                      ++v62;
                    }
                    while (v60 != v62);
                    v60 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v146, v173, 16);
                  }
                  while (v60);
                }

                v55 = v129 + 1;
              }
              while (v129 + 1 != v128);
              v128 = objc_msgSend(v126, "countByEnumeratingWithState:objects:count:", &v150, v174, 16);
              if (!v128)
              {
LABEL_94:

                objc_msgSend(v121, "uuid");
                v96 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v96, "UUIDString");
                v97 = (void *)objc_claimAutoreleasedReturnValue();

                if (objc_msgSend(v134, "count"))
                {
                  v98 = (void *)objc_msgSend(v134, "copy");
                  objc_msgSend(v118, "setObject:forKeyedSubscript:", v98, v97);

                }
                v29 = 0x1E0C99000;
                v28 = 0x1E0C99000;
                v31 = v119;
                if (objc_msgSend(v35, "count"))
                {
                  v99 = (void *)objc_msgSend(v35, "copy");
                  objc_msgSend(v116, "setObject:forKeyedSubscript:", v99, v97);

                }
                v50 = v130;
                v43 = v124;
                if (objc_msgSend(v130, "count"))
                {
                  v100 = (void *)objc_msgSend(v130, "copy");
                  objc_msgSend(v117, "setObject:forKeyedSubscript:", v100, v97);

                  v50 = v130;
                }

                v40 = v122;
                goto LABEL_111;
              }
            }
          }
          v50 = v130;
          if (v43)
          {
            if (objc_msgSend(a1, "isCurrentDeviceAvailableResident"))
            {
              v51 = (void *)MEMORY[0x1D17BA0A0]();
              v52 = a1;
              HMFGetOSLogHandle();
              v53 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v54 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                *(_QWORD *)&buf[4] = v54;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v43;
                _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_INFO, "%{public}@Skipping generating media notification payload for apple media accessory because current device is a resident: %@", buf, 0x16u);

                v35 = v145;
              }

              objc_autoreleasePoolPop(v51);
            }
            else
            {
              objc_msgSend(v43, "mediaProfile");
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              if (v101)
              {
                -[HMDHome mediaNotificationPayloadForProfile:](a1, v101);
                v102 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v115, "addEntriesFromDictionary:", v102);

              }
              else
              {
                v103 = (void *)MEMORY[0x1D17BA0A0]();
                v104 = a1;
                HMFGetOSLogHandle();
                v105 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v106 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  *(_QWORD *)&buf[4] = v106;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v43;
                  _os_log_impl(&dword_1CD062000, v105, OS_LOG_TYPE_INFO, "%{public}@Skipping generating media notification payload for accessory with no media profile: %@", buf, 0x16u);

                  v29 = 0x1E0C99000;
                }

                objc_autoreleasePoolPop(v103);
                v35 = v145;
              }

            }
            v50 = v130;
            v40 = 0;
            v28 = 0x1E0C99000;
          }
LABEL_111:

          v33 = v125 + 1;
        }
        while (v125 + 1 != v31);
        v31 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v154, v176, 16);
      }
      while (v31);
    }

    *a4 = (id)objc_msgSend(v118, "copy");
    if (a5)
      *a5 = (id)objc_msgSend(v116, "copy");
    *a6 = (id)objc_msgSend(v117, "copy");
    if (a7)
      *a7 = (id)objc_msgSend(v114, "copy");
    if (a8)
      *a8 = (id)objc_msgSend(v110, "copy");

  }
}

void __31__HMDHome__registerForMessages__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __31__HMDHome__registerForMessages__block_invoke_2;
  v7[3] = &unk_1E89C2350;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "confirmWithCompletionHandler:", v7);

}

uint64_t __31__HMDHome__registerForMessages__block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __74__HMDHome_notifyClientOfVendorInfoUpdatedForManufacturers_withCompletion___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t i;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id obj;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v2, "copy");

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v14 = a1;
  obj = *(id *)(a1 + 40);
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v18)
  {
    v16 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v24 != v16)
          objc_enumerationMutation(obj);
        v5 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i);
        v19 = 0u;
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v6 = v17;
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v20;
          do
          {
            for (j = 0; j != v8; ++j)
            {
              if (*(_QWORD *)v20 != v9)
                objc_enumerationMutation(v6);
              v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * j);
              objc_msgSend(v11, "manufacturer");
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              v13 = objc_msgSend(v12, "caseInsensitiveCompare:", v5);

              if (!v13)
                objc_msgSend(v3, "addObject:", v11);
            }
            v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
          }
          while (v8);
        }

      }
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v18);
  }

  objc_msgSend(*(id *)(v14 + 32), "_notifyClientsOfAccessoryInfoUpdatedForAccessories:shouldRefreshBadge:withCompletion:", v3, 0, *(_QWORD *)(v14 + 48));
}

void __29__HMDHome_resetConfiguration__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v19 = v6;
    v20 = 2112;
    v21 = v2;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@resetConfiguration - removing accessories %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = v2;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "removeAccessory:", v12, (_QWORD)v13);
        objc_msgSend(v12, "unconfigure");
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

}

uint64_t __47__HMDHome_evaluateShouldRelaunchAndSetRelaunch__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_evaluateShouldRelaunchAndSetRelaunch");
}

void __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v9[0] = CFSTR("HM.serverIdentifier");
  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = a2;
  objc_msgSend(v4, "serverIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v6;
  v9[1] = CFSTR("HM.instanceID");
  objc_msgSend(*(id *)(a1 + 40), "instanceID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[2] = CFSTR("linkType");
  v10[1] = v7;
  v10[2] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v8);

}

void __95__HMDHome_getTransactionFromHAPAccessory_hmdAccessory_uuid_hostAccessoryUUID_objectChangeType___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "transportInfoDictionary");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

uint64_t __33__HMDHome_evaluateResidentUpdate__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_evaluateNetworkProtectionAndRouterManagement");
}

void __33__HMDHome_reEvaluateHomeHubState__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "residentDevices");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = 2 * (objc_msgSend(v3, "count") != 0);
  objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "primaryResidentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v6, "isEnabled") && objc_msgSend(v6, "isReachable"))
    v4 = 1;
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v7 + 712) != v4)
  {
    *(_QWORD *)(v7 + 712) = v4;
    v8 = (void *)MEMORY[0x1E0D285D0];
    v9 = *MEMORY[0x1E0CB8DE0];
    v15 = *MEMORY[0x1E0CB8DD8];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "homeHubState"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "messageWithName:messagePayload:", v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "msgDispatcher");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sendMessage:target:", v12, v14);

  }
}

unint64_t __45__HMDHome__hasPairedReachableBTLEAccessories__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  unint64_t v3;

  v2 = a2;
  if (objc_msgSend(v2, "hasBTLELink"))
    v3 = ((unint64_t)objc_msgSend(v2, "reachableTransports") >> 1) & 1;
  else
    v3 = 0;

  return v3;
}

void __80__HMDHome__registerForReachabilityChangeNotificationsEnabled_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  int v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained)
    goto LABEL_15;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (!v11)
      goto LABEL_13;
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(unsigned __int8 *)(a1 + 48);
    v21 = 138543874;
    v22 = (uint64_t)v12;
    if (v13)
      v14 = "register";
    else
      v14 = "de-register";
    v23 = 2080;
    v24 = v14;
    v25 = 2112;
    v26 = v5;
    v15 = "%{public}@Failed to %s remote accessory reachability notification with error: %@";
    v16 = v10;
    v17 = 32;
  }
  else
  {
    if (!v11)
      goto LABEL_13;
    HMFGetLogIdentifier();
    v18 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v18;
    v19 = "registered";
    if (!*(_BYTE *)(a1 + 48))
      v19 = "de-registered";
    v21 = 138543618;
    v22 = v18;
    v23 = 2080;
    v24 = v19;
    v15 = "%{public}@Successfully %s remote accessory reachability notification";
    v16 = v10;
    v17 = 22;
  }
  _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v21, v17);

LABEL_13:
  objc_autoreleasePoolPop(v8);
  v20 = *(_QWORD *)(a1 + 32);
  if (v20)
    (*(void (**)(uint64_t, BOOL))(v20 + 16))(v20, v5 == 0);
LABEL_15:

}

void __38__HMDHome_readProfileState_viaDevice___block_invoke(void **a1)
{
  -[HMDHome _readProfileState:viaDevice:](a1[4], a1[5], a1[6]);
}

void __29__HMDHome_checkTimerTriggers__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "triggers", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v5);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend(v6, "completeConfiguration");
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v3);
  }

}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0D519C0];
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(double *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2;
  v13[3] = &unk_1E89A4528;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v14 = v8;
  v15 = v9;
  v16 = v3;
  v10 = v3;
  objc_msgSend(v4, "futureWithRetries:timeInterval:workQueue:block:", v5, v7, v13, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_661(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "na_map:", &__block_literal_global_663);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "hmf_isEmpty"))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@All read request retries failed.", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v9 = (void *)MEMORY[0x1E0D519C0];
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "futureWithError:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = (void *)MEMORY[0x1E0D519C0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryByCombiningNonOverlappingDictionaries:", v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "futureWithResult:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  v13 = (void *)v11;

  return v13;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2_662(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

id __70__HMDHome_performReadRequests_withRetries_timeInterval_loggingObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2048;
    v12 = a2;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Performing characteristic read requests with remaining retries: %ld", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "performReadRequests:loggingObject:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
  return (id)objc_claimAutoreleasedReturnValue();
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  double v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  id v16;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0D519C0];
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(double *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2;
  v13[3] = &unk_1E89A4528;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v14 = v8;
  v15 = v9;
  v16 = v3;
  v10 = v3;
  objc_msgSend(v4, "futureWithRetries:timeInterval:workQueue:block:", v5, v7, v13, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_656(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "na_map:", &__block_literal_global_659);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "hmf_isEmpty"))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@All write request retries failed.", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v9 = (void *)MEMORY[0x1E0D519C0];
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "futureWithError:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = (void *)MEMORY[0x1E0D519C0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryByCombiningNonOverlappingDictionaries:", v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "futureWithResult:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  v13 = (void *)v11;

  return v13;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2_657(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

id __71__HMDHome_performWriteRequests_withRetries_timeInterval_loggingObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v7;
    v11 = 2048;
    v12 = a2;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Performing characteristic write requests with remaining retries: %ld", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "performWriteRequests:loggingObject:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
  return (id)objc_claimAutoreleasedReturnValue();
}

void __45__HMDHome_performReadRequests_loggingObject___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(a1[6], "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "characteristic");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = 0;
    objc_msgSend(v6, "hmd_valueOfCharacteristic:error:", v8, &v20);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v20;
    if (v9)
    {
      objc_msgSend(a1[5], "finishWithResult:", v6);
    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = a1[4];
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v22 = v19;
        v23 = 2112;
        v24 = v10;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to perform read requests with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      objc_msgSend(a1[5], "finishWithError:", v10);
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = a1[4];
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v14;
      v23 = 2112;
      v24 = v5;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to perform read requests (no response payload) with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = a1[5];
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "finishWithResult:", v8);
  }

}

void __46__HMDHome_performWriteRequests_loggingObject___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(a1[6], "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "characteristic");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = 0;
    objc_msgSend(v6, "hmd_valueOfCharacteristic:error:", v8, &v20);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v20;
    if (v9)
    {
      objc_msgSend(a1[5], "finishWithResult:", v6);
    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = a1[4];
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v22 = v19;
        v23 = 2112;
        v24 = v10;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Failed to perform write requests with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);
      objc_msgSend(a1[5], "finishWithError:", v10);
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = a1[4];
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v14;
      v23 = 2112;
      v24 = v5;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to perform write requests (no response payload) with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = a1[5];
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "finishWithResult:", v8);
  }

}

void __104__HMDHome_writeCharacteristicValues_source_identifier_transport_qualityOfService_withCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  __CFString *v15;
  __CFString *v16;
  __int128 v17;
  _BYTE buf[18];
  __int16 v19;
  __int128 *v20;
  __int16 v21;
  __CFString *v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v23[0] = CFSTR("sourceType");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 80));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = CFSTR("kMultiPartResponseKey");
  v24[0] = v2;
  v24[1] = MEMORY[0x1E0C9AAA0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_alloc(MEMORY[0x1E0D285F8]);
  v5 = *(_QWORD *)(a1 + 88);
  objc_msgSend(MEMORY[0x1E0D285D8], "allMessageDestinations");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v4, "initWithName:qualityOfService:destination:payload:", CFSTR("kMultipleCharacteristicWriteRequestKey"), v5, v6, v3);

  objc_msgSend(v7, "setIdentifier:", *(_QWORD *)(a1 + 40));
  v8 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v7, "setTransport:", *(_QWORD *)(a1 + 48)));
  v9 = *(id *)(a1 + 56);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    objc_msgSend(v7, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(v7, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "getUUIDBytes:", buf);

    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x1E0D286F8];
    }
    v17 = *(_OWORD *)buf;
    v14 = *(_QWORD *)(a1 + 80);
    if (v14 > 9)
      v15 = CFSTR("Unknown");
    else
      v15 = off_1E89ABF20[v14];
    v16 = v15;
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 1042;
    *(_DWORD *)&buf[14] = 16;
    v19 = 2098;
    v20 = &v17;
    v21 = 2114;
    v22 = v16;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Issuing write requests with identifier: %{public,uuid_t}.16P, source: %{public}@", buf, 0x26u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 56), "_writeCharacteristicValues:requestMessage:source:withCompletionHandler:", *(_QWORD *)(a1 + 64), v7, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72));

}

uint64_t __29__HMDHome_regionStateUpdated__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "homeLocationHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "regionStateAtHome");

  if (v3 == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "presenceFeeder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "notifyDidEnterHomeRegion");
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "presenceFeeder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "notifyDidLeaveHomeRegion");
LABEL_5:

  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateHomeLocation");
}

uint64_t __60__HMDHome_suspendedStateChangedForAccessory_suspendedState___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "reachabilityRegisteredDevices");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");

  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      HAPAccessorySuspendedStateDescription();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      v15 = 138543874;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v10;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Notify registered devices of suspended state change to '%@' for accessory: %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 32), "_updateReachabilityChangeToRegisteredDevices:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HAPAccessorySuspendedStateDescription();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 48);
      v15 = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = v12;
      v19 = 2112;
      v20 = v13;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@No registered devices to send the suspended state change '%@' for accessory %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
  }
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientsOfReachabilityUpdateForAccessory:", *(_QWORD *)(a1 + 48));
}

void __53__HMDHome_reachabilityChangedForAccessory_reachable___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v2 = *(id *)(a1 + 32);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    v5 = *(void **)(a1 + 40);
    v21[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_updateWoWState:", v6);

  }
  objc_msgSend(*(id *)(a1 + 40), "_reachabilityChangedForAccessory:reachable:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "reachabilityRegisteredDevices");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 32);
      v17 = 138543618;
      v18 = v13;
      v19 = 2112;
      v20 = v14;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Notify registered devices of reachability change for accessory: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 40), "_updateReachabilityChangeToRegisteredDevices:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 32);
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v16;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@No registered devices available to notify reachability change update for accessory: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

uint64_t __77__HMDHome_removeAllHomeContentsAndAccessoryPairings_queue_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeAllHomeContentsAndAccessoryPairings:queue:completionHandler:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __32__HMDHome_removeCharacteristic___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_removeCharacteristic:");
    WeakRetained = v3;
  }

}

void __25__HMDHome_removeService___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_removeService:");
    NSStringFromSelector(*(SEL *)(a1 + 48));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "saveWithReason:postSyncNotification:", v3, 1);

    WeakRetained = v4;
  }

}

uint64_t __33__HMDHome_mediaSystemsWithUUIDs___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

uint64_t __44__HMDHome_accessoryWithSPIClientIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "spiClientIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __41__HMDHome_accessoryWithDeviceIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  objc_msgSend(v5, "deviceForDirectMessaging");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v8;
}

uint64_t __60__HMDHome_roomWithUniqueIdentifier_forClientIdentifierSalt___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = (void *)MEMORY[0x1E0CB3A28];
  objc_msgSend(a2, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, *(_QWORD *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 40));
  return v6;
}

uint64_t __40__HMDHome_configureBulletinNotification__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_configureBulletinNotification");
}

uint64_t __42__HMDHome_saveToCurrentAccountWithReason___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "saveWithReason:information:postSyncNotification:", *(_QWORD *)(a1 + 40), 0, 0);
  return objc_msgSend(*(id *)(a1 + 32), "configureBulletinNotification");
}

void __75__HMDHome__saveSharedHomeToAccountWithReason_postSyncNotification_options___block_invoke(uint64_t a1)
{
  HMDHomeSaveRequest *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = -[HMDHomeSaveRequest initWithHome:reason:information:postSyncNotification:objectChange:]([HMDHomeSaveRequest alloc], "initWithHome:reason:information:postSyncNotification:objectChange:", WeakRetained, *(_QWORD *)(a1 + 32), 0, *(unsigned __int8 *)(a1 + 48), 1);
    objc_msgSend(WeakRetained, "homeManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "saveWithRequest:", v2);

  }
}

void __74__HMDHome_saveSharedHomeToAccountWithReason_postSyncNotification_options___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_saveSharedHomeToAccountWithReason:postSyncNotification:options:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
    WeakRetained = v3;
  }

}

id __70__HMDHome__handleAccessoryReachabilityEventNotificationsRegistration___block_invoke_2(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  void *v4;

  v2 = (objc_class *)MEMORY[0x1E0CB3A28];
  v3 = a2;
  v4 = (void *)objc_msgSend([v2 alloc], "initWithUUIDString:", v3);

  return v4;
}

id __70__HMDHome__handleAccessoryReachabilityEventNotificationsRegistration___block_invoke(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  void *v4;

  v2 = (objc_class *)MEMORY[0x1E0CB3A28];
  v3 = a2;
  v4 = (void *)objc_msgSend([v2 alloc], "initWithUUIDString:", v3);

  return v4;
}

void __38__HMDHome_auditUsersForNotifications___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "notificationRegistry");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "auditUsersForNotifications:forHome:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

void __135__HMDHome__modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD block[4];
  id v19;
  id v20;
  id v21;
  id v22;
  char v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = v8;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138543874;
        v25 = v12;
        v26 = 2112;
        v27 = v13;
        v28 = 2112;
        v29 = v5;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to modify notifications with remote gateway %@ due to error %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v9);
      v14 = *(_QWORD *)(a1 + 48);
      if (v14)
        (*(void (**)(uint64_t, id))(v14 + 16))(v14, v5);
    }
    else
    {
      objc_msgSend(WeakRetained, "workQueue");
      v17 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __135__HMDHome__modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice_completion___block_invoke_632;
      block[3] = &unk_1E89A4448;
      objc_copyWeak(&v22, (id *)(a1 + 56));
      v19 = *(id *)(a1 + 32);
      v20 = *(id *)(a1 + 40);
      v23 = *(_BYTE *)(a1 + 64);
      v21 = *(id *)(a1 + 48);
      dispatch_async(v17, block);

      objc_destroyWeak(&v22);
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 48);
    if (v15)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 8);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

    }
  }

}

void __135__HMDHome__modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice_completion___block_invoke_632(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = WeakRetained;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 32);
    v9 = 138543618;
    v10 = v6;
    v11 = 2112;
    v12 = v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Modified notifications with remote gateway %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(v4, "_handleRemoteGatewayNotificationRegistration:enable:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 64));
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, _QWORD))(v8 + 16))(v8, 0);

}

uint64_t __123__HMDHome_modifyCharacteristicNotifications_mediaNotifications_actionSetNotificationPayload_enableNotification_withDevice___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_modifyCharacteristicNotifications:mediaNotifications:actionSetNotificationPayload:enableNotification:withDevice:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 64));
}

uint64_t __49__HMDHome_resubscribeForNotificationsOnResident___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resubscribeForNotificationsOnResident:", *(_QWORD *)(a1 + 40));
}

void __111__HMDHome__registerResidentReachabilityNotificationWithEnableAccessories_disableAccessories_completionHandler___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v5)
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543618;
    v18 = v11;
    v19 = 2112;
    v20 = v5;
    v12 = "%{public}@Failed to update accessory reachability event notification registry due to error: %@";
    v13 = v10;
    v14 = OS_LOG_TYPE_ERROR;
    v15 = 22;
  }
  else
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543362;
    v18 = v11;
    v12 = "%{public}@Successfully updated accessory reachability event notification registry";
    v13 = v10;
    v14 = OS_LOG_TYPE_INFO;
    v15 = 12;
  }
  _os_log_impl(&dword_1CD062000, v13, v14, v12, (uint8_t *)&v17, v15);

LABEL_7:
  objc_autoreleasePoolPop(v7);
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    (*(void (**)(uint64_t, id))(v16 + 16))(v16, v5);

}

id __111__HMDHome__registerResidentReachabilityNotificationWithEnableAccessories_disableAccessories_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id __111__HMDHome__registerResidentReachabilityNotificationWithEnableAccessories_disableAccessories_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void __89__HMDHome_setCameraReachabilityEventNotificationsEnabled_forAccessory_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 56))
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
LABEL_5:
    v6 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v6, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "_registerResidentReachabilityNotificationWithEnableAccessories:disableAccessories:completionHandler:", v4, v5, *(_QWORD *)(a1 + 48));

    if (!v3)
      return;
    goto LABEL_6;
  }
  v7[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_5;
  objc_msgSend(v2, "_registerResidentReachabilityNotificationWithEnableAccessories:disableAccessories:completionHandler:", v4, MEMORY[0x1E0C9AA60], *(_QWORD *)(a1 + 48));
LABEL_6:

}

uint64_t __77__HMDHome_registerCameraReachabilityEventNotificationsWithCompletionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_registerCameraReachabilityEventNotificationsWithCompletionHandler:", *(_QWORD *)(a1 + 40));
}

uint64_t __42__HMDHome_disableNotificationsForDevices___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_disableNotificationsForDevices:", *(_QWORD *)(a1 + 40));
}

uint64_t __41__HMDHome_enableNotificationsForDevices___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_enableNotificationsForDevices:", *(_QWORD *)(a1 + 40));
}

void __72__HMDHome_enableMediaNotifications_directlyOnMediaAccessory_completion___block_invoke(uint64_t a1)
{
  -[HMDHome _enableMediaNotifications:directlyOnMediaAccessory:completion:](*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

void __52__HMDHome_enableHomeNotificationsForMediaAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a1 + 32), "notificationRegistrationsForAppleMediaAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");

  if (v3)
    -[HMDHome _enableMediaNotifications:forMediaAccessory:](*(void **)(a1 + 32), 1, *(void **)(a1 + 40));
}

void __53__HMDHome_subscribeForNotificationsFromRemoteGateway__block_invoke(uint64_t a1)
{
  -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), 0);
}

uint64_t __93__HMDHome_remotelySetNotificationsEnabled_forCharacteristics_characteristicChangeThresholds___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_2;
  block[3] = &unk_1E89C1B48;
  v7 = *(NSObject **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

void __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_3()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[9];

  v2[8] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("kCharacteristicWriteRequestKey");
  v2[1] = CFSTR("kCharacteristicReadRequestKey");
  v2[2] = CFSTR("kMultipleCharacteristicWriteRequestKey");
  v2[3] = CFSTR("kMultipleCharacteristicReadRequestKey");
  v2[4] = CFSTR("kIdentifyAccessoryRequestKey");
  v2[5] = CFSTR("kMediaPropertiesWriteRequestKey");
  v2[6] = CFSTR("kMediaPropertiesReadRequestKey");
  v2[7] = CFSTR("HMDHomeSetNaturalLightingEnabledForLightProfilesMessage");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages;
  redispatchToResidentMessage_target_responseQueue_viaDevice___restrictedToLocalMessages = v0;

}

uint64_t __70__HMDHome_redispatchToResidentMessage_target_responseQueue_viaDevice___block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void __38__HMDHome_addCompanionAsResidentUser___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "userID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_firstObjectWithValue:forKeyPath:", v3, CFSTR("userID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 32), "_addUserToContainer:", *(_QWORD *)(a1 + 40)));
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Added a new resident user", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }
  -[HMDHome _subscribeForNotificationFromRemoteGateway:](*(void **)(a1 + 32), 0);

}

uint64_t __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(a2, "room");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

uint64_t __50__HMDHome_roomForAllDestinationParentIdentifiers___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  objc_msgSend(a2, "room");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "hmf_isEqualToUUID:", v5);

  return v6;
}

void __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destinationWithParentIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    objc_msgSend(v7, "mergeAudioDestination:", v6);

}

void __46__HMDHome_mergeMediaDestinationsWithConsumer___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destinationWithParentIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    objc_msgSend(v7, "mergeAudioDestination:", v6);

}

void __59__HMDHome_mergeMediaDestinationControllerDataWithConsumer___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7 = v3;
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "destinationControllerDataWithParentIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    objc_msgSend(v7, "mergeAudioDestinationControllerData:", v6);

}

uint64_t __32__HMDHome_accessoriesWithUUIDs___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

void __55__HMDHome_configureNaturalLightingWithDemoModeEnabled___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  HMDHomeNaturalLightingContextUpdater *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "localCapabilitiesDataSource");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isResidentCapable") & 1) != 0)
  {

  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 40);

    if (!v3)
      return;
  }
  v4 = -[HMDHomeNaturalLightingContextUpdater initWithHome:demoModeEnabled:]([HMDHomeNaturalLightingContextUpdater alloc], "initWithHome:demoModeEnabled:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setNaturalLightingContextUpdater:", v4);

  objc_msgSend(*(id *)(a1 + 32), "naturalLightingContextUpdater");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "configure");

}

uint64_t __62__HMDHome_configureMediaDestinationControllersForAccessories___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "configureAudioDestinationController");
}

id __62__HMDHome_configureMediaDestinationControllersForAccessories___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

uint64_t __47__HMDHome_migrateLegacyLocationServiceSettings__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "legacyLocationServicesEnabled");
}

uint64_t __126__HMDHome_configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory_accessories_uncommittedTransactions___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "root");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "encodeForKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v2, "isEqualToString:", v4);

  return v5;
}

void __126__HMDHome_configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory_accessories_uncommittedTransactions___block_invoke_574(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Saved uncommitted transaction models %@ with error: %@", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  int8x16_t v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "account");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "senderCorrelationIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v14 = v7;
      v15 = 2112;
      v16 = v8;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Owner for home %@ does not have a merge ID, resolving handle", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    +[HMDRemoteAccountManager sharedManager](HMDRemoteAccountManager, "sharedManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "accountHandle");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_548;
    v11[3] = &unk_1E89A42A8;
    v12 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    objc_msgSend(v9, "_resolveAccountForHandle:completionHandler:", v10, v11);

  }
}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_557(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:accessories:uncommittedTransactions:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_564(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "accessCodeManager");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "msgDispatcher");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "configureWithMessageDispatcher:", v2);

}

void __86__HMDHome_configureWithHomeManager_accessoriesPresent_uncommittedTransactions_source___block_invoke_548(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "accountHandle");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to resolve account handle for account with no merge ID %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

void __38__HMDHome___handleProcessStateChange___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "bundleIdentifier");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isEqual:", *MEMORY[0x1E0CB9288]))
    objc_msgSend(*(id *)(a1 + 40), "_cleanAddAccessoryOperations");
  objc_msgSend(*(id *)(a1 + 40), "_disableNotificationsForClient:", v2);

}

uint64_t __38__HMDHome___handleProcessStateChange___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "checkHAPSessionRestore");
}

void __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke(uint64_t a1, int a2)
{
  if (a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __62__HMDHome__disableDirectCharacteristicNotificationsForClient___block_invoke_2(uint64_t result)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24))
    return objc_msgSend(*(id *)(result + 32), "saveToCurrentAccountWithReason:", CFSTR("HMDApplicationTerminatedSaveReason"));
  return result;
}

uint64_t __57__HMDHome_handleAccessoryReachabilityChangeNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAnyBTLEAccessoryReachable:", objc_msgSend(*(id *)(a1 + 32), "_hasPairedReachableBTLEAccessories"));
}

uint64_t __44__HMDHome_handleAdaptiveClientDisconnected___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_disableNotificationsForClient:", *(_QWORD *)(a1 + 40));
}

uint64_t __71__HMDHome_registerForMatterFabricNotifications_registrationIdentifier___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_registerForMatterFabricNotifications:registrationIdentifier:clientBundleIdentifier:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40), 0);
}

uint64_t __80__HMDHome_registerForAccessoryReachabilityNotifications_registrationIdentifier___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_registerForAccessoryReachabilityNotifications:registrationIdentifier:clientBundleIdentifier:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40), 0);
}

void __26__HMDHome_handleInactive___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_stringForKey:", CFSTR("HMDXPCConnectionBundleIdentifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "_registerForAccessoryReachabilityNotifications:registrationIdentifier:clientBundleIdentifier:", 0, CFSTR("HMDAccessoryActiveClientRemoteRegistrationIdentifierKey"), v3);
  objc_msgSend(*(id *)(a1 + 40), "_registerForMatterFabricNotifications:registrationIdentifier:clientBundleIdentifier:", 0, CFSTR("HMDAccessoryActiveClientRemoteRegistrationIdentifierKey"), v3);
  objc_msgSend(*(id *)(a1 + 40), "WiFiAssertion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Releasing WiFi assertion", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 40), "wifiManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "WiFiAssertion");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "endActiveAssertion:", v10);

    objc_msgSend(*(id *)(a1 + 40), "wifiManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "releaseWoWAssertion");

    objc_msgSend(*(id *)(a1 + 40), "setWiFiAssertion:", 0);
  }

}

void __495__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;

  v7 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v7)
    objc_msgSend(WeakRetained, "_registerForReachabilityChangeNotificationsEnabled:completionHandler:", objc_msgSend(v7, "BOOLValue"), v5);

}

unint64_t __495__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth_metricsDispatcherFactory_logEventSubmitter_dailyScheduler_currentUserFactory_residentDeviceManagerFactory_locationHandlerFactory_hapMetadata_siriSecureAccessoryAccessController_carPlayDataSource_deviceLockStateDataSource_notificationRegistry_administratorHandlerFactory_netManagerFactory_wifiManagerFactory_xpcMessageTransportFactory_localCapabilitiesDataSource_notificationCenter_keychainStore_reportingSessionManager___block_invoke_472(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  unint64_t v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "currentUser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = +[HMDUser hmmtrUserPrivilegeFromHMDUserPrivilege:](HMDUser, "hmmtrUserPrivilegeFromHMDUserPrivilege:", objc_msgSend(v3, "privilege"));

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_6()
{
  return objc_msgSend(MEMORY[0x1E0D286E8], "sharedManager");
}

uint64_t __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_5()
{
  return objc_msgSend(MEMORY[0x1E0D28608], "sharedManager");
}

HMDHomeLocationHandler *__76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_4()
{
  return objc_alloc_init(HMDHomeLocationHandler);
}

HMDHomeAdministratorHandler *__76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_3(uint64_t a1, void *a2)
{
  id v2;
  HMDHomeAdministratorHandler *v3;

  v2 = a2;
  v3 = -[HMDHomeAdministratorHandler initWithHome:]([HMDHomeAdministratorHandler alloc], "initWithHome:", v2);

  return v3;
}

id __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDResidentDeviceManagerFactory createManagerForHomeUUID:](HMDResidentDeviceManagerFactory, "createManagerForHomeUUID:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id __76__HMDHome_initWithName_uuid_defaultRoomUUID_owner_homeManager_presenceAuth___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[HMDUser currentUserWithPrivilege:forHome:](HMDUser, "currentUserWithPrivilege:forHome:", a2, a3);
}

+ (void)_initialize
{
  if (_initialize_onceToken != -1)
    dispatch_once(&_initialize_onceToken, &__block_literal_global_10848);
}

+ (id)getBuiltinActionSets
{
  if (getBuiltinActionSets_onceToken != -1)
    dispatch_once(&getBuiltinActionSets_onceToken, &__block_literal_global_389);
  return (id)getBuiltinActionSets_builtinActionSets;
}

+ (BOOL)isObjectContainedInHome:(id)a3
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  +[HMDHome _initialize](HMDHome, "_initialize");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = (id)allowedClasses;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v4);
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          LOBYTE(v5) = 1;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

  return v5;
}

+ (id)zoneIDFromHomeUUID:(id)a3
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0CB3A28];
  v9 = CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938");
  v4 = (void *)MEMORY[0x1E0C99D20];
  v5 = a3;
  objc_msgSend(v4, "arrayWithObjects:count:", &v9, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:", v5, 0, v6, v9, v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

+ (id)filterUsersSupportingPresence:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          objc_msgSend(v4, "addObject:", v10, (_QWORD)v12);
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  return v4;
}

+ (unint64_t)privilegeFromUserInviteInformation:(id)a3
{
  if (objc_msgSend(a3, "isAdministrator"))
    return 4;
  else
    return 0;
}

+ (id)notificationPayloadForChangedCharacteristics:(id)a3 destinationIsXPCTransport:(BOOL)a4
{
  id v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  void *v20;
  void *v21;
  BOOL v22;
  id v23;
  char isKindOfClass;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  NSObject *v41;
  char v42;
  uint64_t v43;
  int v44;
  void *v45;
  void *v46;
  __int128 v48;
  void *v49;
  void *context;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id obj;
  void *v61;
  id v62;
  _BOOL4 v63;
  id v64;
  id v65;
  id v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  id v74;
  const __CFString *v75;
  void *v76;
  _BYTE v77[128];
  uint64_t v78;

  v63 = a4;
  v78 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v53 = (id)objc_claimAutoreleasedReturnValue();
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  obj = v4;
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v77, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v68;
    *(_QWORD *)&v7 = 138543618;
    v48 = v7;
    v61 = v5;
    v57 = *(_QWORD *)v68;
    do
    {
      v10 = 0;
      v59 = v8;
      do
      {
        if (*(_QWORD *)v68 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * v10);
        objc_msgSend(v11, "characteristic", v48);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "service");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "home");
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = (void *)v15;
        if (v12)
          v17 = v13 == 0;
        else
          v17 = 1;
        if (!v17 && v14 != 0 && v15 != 0)
        {
          objc_msgSend(v11, "updatedValue");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = v20;
          if (v20)
            v22 = !v63;
          else
            v22 = 1;
          if (!v22)
          {
            v23 = v20;
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();

            if ((isKindOfClass & 1) != 0)
              goto LABEL_44;
LABEL_24:
            if (v63)
            {
              objc_msgSend(v12, "type");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend(v61, "shouldFilterCharacteristicOfTypeFromApp:", v25) & 1) != 0)
              {

                goto LABEL_44;
              }
              objc_msgSend(v13, "type");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v27 = objc_msgSend(v61, "shouldFilterServiceOfTypeFromApp:", v26);

              if ((v27 & 1) != 0)
                goto LABEL_44;
            }
            objc_msgSend(v14, "uuid");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "UUIDString");
            v29 = objc_claimAutoreleasedReturnValue();

            objc_msgSend(v53, "hmf_mutableDictionaryForKey:", v29);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v30)
            {
              objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "setObject:forKey:", v30, v29);
            }
            v56 = (void *)v29;
            objc_msgSend(v13, "instanceID");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "stringValue");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v55 = v30;
            objc_msgSend(v30, "hmf_mutableDictionaryForKey:", v32);
            v33 = objc_claimAutoreleasedReturnValue();

            v34 = (void *)v33;
            if (!v33)
            {
              objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "instanceID");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "stringValue");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v55, "setObject:forKey:", v34, v36);

            }
            v75 = CFSTR("kCharacteristicValue");
            v76 = v21;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v76, &v75, 1);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = (void *)objc_msgSend(v37, "mutableCopy");

            v65 = 0;
            v66 = 0;
            v64 = 0;
            objc_msgSend(v12, "getLastKnownValueUpdateTime:stateNumber:notificationContext:", &v66, &v65, &v64);
            v39 = v66;
            v58 = v65;
            v62 = v64;
            if (v39)
              objc_msgSend(v38, "setObject:forKey:", v39, CFSTR("kCharacteristicValueUpdateTime"));
            v54 = v39;
            if (v58)
              objc_msgSend(v38, "setObject:forKey:", v58, CFSTR("kCharacteristicValueUpdateStateNumberKey"));
            if (v62)
            {
              v52 = v34;
              context = (void *)MEMORY[0x1D17BA0A0]();
              v40 = a1;
              HMFGetOSLogHandle();
              v41 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v48;
                v72 = v49;
                v73 = 2112;
                v74 = v62;
                _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Setting notification context in notification payload to %@ ", buf, 0x16u);

              }
              objc_autoreleasePoolPop(context);
              objc_msgSend(v38, "setObject:forKey:", v62, CFSTR("kCharacteristicNotificationContextKey"));
              v34 = v52;
            }
            v42 = objc_msgSend(v11, "isBroadcast");
            v43 = MEMORY[0x1E0C9AAB0];
            if ((v42 & 1) != 0
              || (v44 = objc_msgSend(v14, "isBLELinkConnected", MEMORY[0x1E0C9AAB0]), v43 = MEMORY[0x1E0C9AAA0], v44))
            {
              objc_msgSend(v38, "setObject:forKey:", v43, CFSTR("kCharacteristicBroadcastValueUpdateKey"));
            }
            objc_msgSend(v12, "instanceID", v43);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v45, "stringValue");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "setObject:forKey:", v38, v46);

            goto LABEL_44;
          }
          if (v20)
            goto LABEL_24;
LABEL_44:

          v5 = v61;
          v9 = v57;
          v8 = v59;
        }

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v77, 16);
    }
    while (v8);
  }

  return v53;
}

+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteWrite:(id)a5 message:(id)a6
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  BOOL v19;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  id obj;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v48 = a3;
  v45 = a4;
  v9 = a5;
  v44 = a6;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = v9;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v54, v58, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v55;
    v42 = *MEMORY[0x1E0CB8C70];
    v43 = *(_QWORD *)v55;
    do
    {
      v13 = 0;
      v46 = v11;
      do
      {
        if (*(_QWORD *)v55 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v13);
        objc_msgSend(v14, "characteristic");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "service");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "accessory");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = v17;
        if (v15)
          v19 = v16 == 0;
        else
          v19 = 1;
        if (v19 || v17 == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", v42, 4, 0);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v14, v21);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "addObject:", v22);
        }
        else
        {
          objc_msgSend(v17, "uuid");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "UUIDString");
          v24 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(v16, "instanceID");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "stringValue");
          v26 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(v15, "instanceID");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "stringValue");
          v53 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v48, "hmf_mutableDictionaryForKey:", v24);
          v28 = objc_claimAutoreleasedReturnValue();
          v29 = (void *)v28;
          if (!v28)
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "setObject:forKeyedSubscript:", v29, v24);
          }
          v52 = (void *)v24;
          objc_msgSend(v29, "hmf_mutableDictionaryForKey:", v26);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v30)
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "setObject:forKeyedSubscript:", v30, v26);
          }
          v50 = v29;
          v51 = (void *)v26;
          objc_msgSend(v15, "authorizationData");
          v31 = objc_claimAutoreleasedReturnValue();
          if (v31)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v53, CFSTR("kAuthorizationDataKey"));
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "setObject:forKeyedSubscript:", v31, v32);

          }
          v49 = (void *)v31;
          objc_msgSend(v18, "home");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "currentUser");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "notificationContextHAPIdentifier");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "contextDataForWriteRequestWithIdentifier:", v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          if (v36)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v53, CFSTR("kCharacteristicContextDataForWriteKey"));
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "setObject:forKeyedSubscript:", v36, v37);

          }
          objc_msgSend(v44, "uuidForKey:", CFSTR("kActionSetUUID"));
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = objc_msgSend(v44, "BOOLForKey:", CFSTR("kShortActionKey"));
          v22 = v51;
          if (v38 || v39)
            objc_msgSend(v48, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("kShortActionKey"));
          objc_msgSend(v14, "value");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "setObject:forKeyedSubscript:", v40, v53);

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v14, "includeResponseValue"));
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "setObject:forKeyedSubscript:", v41, CFSTR("HMDCharacteristicWriteRequestIncludeResponseValueKey"));

          v12 = v43;
          v11 = v46;
          v21 = v52;
        }

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v58, 16);
    }
    while (v11);
  }

}

+ (void)appendCharacteristicsToAccessoryList:(id)a3 responseTuples:(id)a4 forMultipleCharacteristicsRemoteRead:(id)a5
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id obj;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v32 = a3;
  v29 = a4;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = a5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v34;
    v28 = *MEMORY[0x1E0CB8C70];
    do
    {
      v10 = 0;
      v30 = v8;
      do
      {
        if (*(_QWORD *)v34 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v10);
        objc_msgSend(v11, "characteristic");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "service");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "accessory");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (v12)
          v16 = v13 == 0;
        else
          v16 = 1;
        if (v16 || v14 == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", v28, 4, 0);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v11, v20);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "addObject:", v18);
        }
        else
        {
          objc_msgSend(v14, "uuid");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "UUIDString");
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v32, "hmf_mutableDictionaryForKey:", v20);
          v21 = objc_claimAutoreleasedReturnValue();
          v18 = (void *)v21;
          if (!v21)
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "setObject:forKey:", v18, v20);
          }
          objc_msgSend(v13, "instanceID");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "stringValue");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "hmf_mutableArrayForKey:", v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v24)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "instanceID");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "stringValue");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "setObject:forKey:", v24, v26);

          }
          objc_msgSend(v12, "instanceID");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "addObject:", v27);

          v8 = v30;
        }

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    }
    while (v8);
  }

}

+ (id)supportedAccessoryClasses
{
  if (supportedAccessoryClasses_onceToken != -1)
    dispatch_once(&supportedAccessoryClasses_onceToken, &__block_literal_global_1367);
  return (id)supportedAccessoryClasses_supportedAccessoryClasses;
}

+ (BOOL)supportsSecureCoding
{
  return 1;
}

+ (BOOL)hasMessageReceiverChildren
{
  return 1;
}

+ (id)filterAllowedToPostBulletinFromCharacteristics:(id)a3
{
  return (id)objc_msgSend(a3, "na_filter:", &__block_literal_global_1569);
}

uint64_t __58__HMDHome_filterAllowedToPostBulletinFromCharacteristics___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "service");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "home");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "shouldPostBulletin");

  return v5;
}

void __22__HMDHome_logCategory__block_invoke()
{
  uint64_t v0;
  void *v1;

  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)logCategory__hmf_once_v1338;
  logCategory__hmf_once_v1338 = v0;

}

void __36__HMDHome_supportedAccessoryClasses__block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 2);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)supportedAccessoryClasses_supportedAccessoryClasses;
  supportedAccessoryClasses_supportedAccessoryClasses = v2;

}

void __31__HMDHome_getBuiltinActionSets__block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0CB81E0];
  v1 = *MEMORY[0x1E0CB8228];
  v7[0] = *MEMORY[0x1E0CB8240];
  v7[1] = v1;
  v2 = *MEMORY[0x1E0CB81D8];
  v8[0] = v0;
  v8[1] = v2;
  v3 = *MEMORY[0x1E0CB8218];
  v7[2] = *MEMORY[0x1E0CB8210];
  v7[3] = v3;
  v4 = *MEMORY[0x1E0CB81D0];
  v8[2] = *MEMORY[0x1E0CB81C8];
  v8[3] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)getBuiltinActionSets_builtinActionSets;
  getBuiltinActionSets_builtinActionSets = v5;

}

void __22__HMDHome__initialize__block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  v13 = objc_opt_class();
  v14 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v4, 11);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)allowedClasses;
  allowedClasses = v2;

}

- (void)setMediaSettingsValue:(int64_t)a3 mediaPassword:(id)a4 enabled:(BOOL)a5
{
  _BOOL8 v5;
  id v8;

  v5 = a5;
  v8 = a4;
  -[HMDHome setMinimumMediaUserPrivilege:](self, "setMinimumMediaUserPrivilege:", a3);
  -[HMDHome setMediaPassword:](self, "setMediaPassword:", v8);

  -[HMDHome setMediaPeerToPeerEnabled:](self, "setMediaPeerToPeerEnabled:", v5);
}

- (BOOL)isThreadNetworkUp
{
  -[HMDHome _scheduleThreadNetworkUpdate](self, "_scheduleThreadNetworkUpdate");
  return -[HMDHome threadNetworkIsUp](self, "threadNetworkIsUp");
}

- (void)_registerForThreadNetworkEvents
{
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __71__HMDHome_ThreadResidentCommissioning___registerForThreadNetworkEvents__block_invoke;
  v4[3] = &unk_1E89BE3F8;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)_unregisterForThreadNetworkEvents
{
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __73__HMDHome_ThreadResidentCommissioning___unregisterForThreadNetworkEvents__block_invoke;
  v4[3] = &unk_1E89BE3F8;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)setThreadNetworkID:(id)a3
{
  id v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHome *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  -[HMDHome threadNetworkID](self, "threadNetworkID");
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6
    && (v7 = (void *)v6,
        v8 = objc_msgSend(v5, "isEqualToString:", CFSTR("770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F")),
        v7,
        (v8 & 1) == 0))
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome unfilteredThreadNetworkID](v15, "unfilteredThreadNetworkID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543874;
      v20 = v17;
      v21 = 2112;
      v22 = v5;
      v23 = 2112;
      v24 = v18;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to set threadNetworkID to %@. (current value=%@)", (uint8_t *)&v19, 0x20u);

    }
    objc_autoreleasePoolPop(v14);
  }
  else if (-[HMDHome attemptToUpdateThreadNetworkID:](self, "attemptToUpdateThreadNetworkID:", v5))
  {
    +[HMDHomeThreadNetworkModel defaultModelForHome:](HMDHomeThreadNetworkModel, "defaultModelForHome:", self);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setThreadNetworkID:", v5);
    -[HMDHome backingStore](self, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromSelector(a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "add:withMessage:", v9, 0);
    objc_msgSend(v13, "run");

  }
}

- (BOOL)isCurrentDeviceThreadPreferredPrimaryResident
{
  void *v2;
  char v3;

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsThreadBorderRouter");

  return v3;
}

- (void)_registerThreadResidentCommissioningMessageHandlers
{
  void *v3;
  HMDHome *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for HMFWiFiManagerCurrentNetworkDidChangeNotification", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObserver:selector:name:object:", v4, sel_handleCurrentWiFiNetworkChangedNotification_, *MEMORY[0x1E0D28538], 0);

  }
}

- (void)handleCurrentWiFiNetworkChangedNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHome workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __84__HMDHome_ThreadResidentCommissioning__handleCurrentWiFiNetworkChangedNotification___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_handleThreadNetworkCredentialsRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *, void *);
  void *v21;
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve request for Thread Network Credentials", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_initWeak((id *)buf, v6);
    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = __79__HMDHome_ThreadResidentCommissioning___handleThreadNetworkCredentialsRequest___block_invoke;
    v21 = &unk_1E89A64A0;
    objc_copyWeak(&v23, (id *)buf);
    v22 = v4;
    v10 = _Block_copy(&v18);
    -[HMDHome threadOperationalDataset](v6, "threadOperationalDataset", v18, v19, v20, v21);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome home](v6, "home");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "retrieveMetadata:homeHasResident:completion:", v11, objc_msgSend(v12, "doesHomeContainResident"), v10);

    objc_destroyWeak(&v23);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = v6;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v17);

  }
}

- (void)_handleJoinOrFormThreadNetworkMessage:(id)a3
{
  id v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  _QWORD block[4];
  id v19;
  HMDHome *v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = _os_feature_enabled_impl();
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled())
  {
    +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "supportsThreadService");

    if (((v7 | v5) & 1) == 0)
    {
LABEL_3:
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v23 = v11;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Resident commissioning is disabled", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 5);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithPayload:error:", 0, v12);
      goto LABEL_13;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v4, "messagePayload");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(v4, "messagePayload");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0CB9280]);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v16 = v15;
    else
      v16 = 0;
    v13 = v16;

  }
  -[HMDHome workQueue](self, "workQueue");
  v17 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke;
  block[3] = &unk_1E89C20C8;
  v19 = v13;
  v20 = self;
  v21 = v4;
  v12 = v13;
  dispatch_async(v17, block);

LABEL_13:
}

- (void)_handleUnjoinThreadNetworkMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)startThreadNetwork:(BOOL)a3
{
  void *v5;
  char v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[5];
  BOOL v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "supportsThreadService"),
        v5,
        (v6 & 1) != 0))
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Starting resident commissioning timer", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHome workQueue](v8, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __59__HMDHome_ThreadResidentCommissioning__startThreadNetwork___block_invoke;
    v16[3] = &unk_1E89C2758;
    v16[4] = v8;
    v17 = a3;
    dispatch_async(v11, v16);

  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Thread commissioning is not supported on this platform", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }
}

- (void)_incrementCurrentSequenceNumber
{
  NSObject *v3;
  unint64_t v4;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = -[HMDHome threadNetworkSequenceNumber](self, "threadNetworkSequenceNumber");
  -[HMDHome setThreadNetworkSequenceNumber:](self, "setThreadNetworkSequenceNumber:", v4 + 1);
  if (v4 == -1)
    -[HMDHome setThreadNetworkSequenceNumber:](self, "setThreadNetworkSequenceNumber:", -[HMDHome threadNetworkSequenceNumber](self, "threadNetworkSequenceNumber") + 1);
}

- (void)_retryStartThreadNetwork:(double)a3
{
  NSObject *v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  dispatch_time_t v17;
  NSObject *v18;
  _QWORD aBlock[4];
  id v20[4];
  id location;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = fabs(a3);
  v7 = 30.0;
  if (a3 > 0.0)
  {
    v8 = fmin(a3 + a3, 1800.0);
    if (v6 < 2.22044605e-16)
      v7 = 30.0;
    else
      v7 = v8;
  }
  v9 = -[HMDHome threadNetworkSequenceNumber](self, "threadNetworkSequenceNumber");
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke;
  aBlock[3] = &unk_1E89A5DA8;
  objc_copyWeak(v20, &location);
  v20[1] = *(id *)&a3;
  v20[2] = v9;
  v20[3] = *(id *)&v7;
  v10 = _Block_copy(aBlock);
  v11 = v10;
  if (v6 < 2.22044605e-16 || a3 <= 0.0)
  {
    (*((void (**)(void *))v10 + 2))(v10);
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v16;
      v24 = 2048;
      v25 = (unint64_t)a3;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Next resident commissioning attempt will happen in %lu seconds", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v17 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
    -[HMDHome workQueue](v14, "workQueue");
    v18 = objc_claimAutoreleasedReturnValue();
    dispatch_after(v17, v18, v11);

  }
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
}

- (void)_startThreadNetworkOnCommissionerWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _QWORD v14[5];
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__14674;
  v21 = __Block_byref_object_dispose__14675;
  -[HMDHome threadNetworkID](self, "threadNetworkID");
  v22 = (id)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v18[5];
    *(_DWORD *)buf = 138543618;
    v24 = v9;
    v25 = 2112;
    v26 = v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Start thread network: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v18[5];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke;
  v14[3] = &unk_1E89A5DD0;
  v14[4] = v7;
  v13 = v4;
  v15 = v13;
  v16 = &v17;
  objc_msgSend(v11, "startThreadNetworkWithID:completion:", v12, v14);

  _Block_object_dispose(&v17, 8);
}

- (void)_startThreadNetworkOnCommissionerForIOSWithOperationalDataset:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  id v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v8);

  -[HMDHome homeManager](self, "homeManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "chipDataSource");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome home](self, "home");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v10, "hasValidGeoOrPreferredNetworkForHome:", v11);

  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome threadNetworkID](v14, "threadNetworkID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v28 = v16;
    v29 = 2112;
    v30 = v17;
    v31 = 2112;
    v32 = v6;
    v33 = 2112;
    v34 = v18;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Start thread network with uuid: %@, credentials: %@, geoAvailable: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v13);
  +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setGeoAvailable:", v12);
  -[HMDHome _registerForThreadNetworkEvents](v14, "_registerForThreadNetworkEvents");
  -[HMDHome threadNetworkID](v14, "threadNetworkID");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HMDHome isOwnerUser](v14, "isOwnerUser");
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke;
  v24[3] = &unk_1E89C1558;
  v24[4] = v14;
  v25 = v6;
  v26 = v7;
  v22 = v7;
  v23 = v6;
  objc_msgSend(v19, "startThreadNetworkWithOperationalDataset:threadNetworkID:isOwnerUser:completion:", v23, v20, v21, v24);

}

- (void)_retrievePreferredNetworkWithCompletion:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHome *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v26 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Attempting to resolve request for Thread Network Credentials", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDThreadNetworkMetadataStore defaultStore](HMDThreadNetworkMetadataStore, "defaultStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    if (-[HMDHome isOwnerUser](v6, "isOwnerUser"))
    {
      objc_initWeak((id *)buf, v6);
      -[HMDHome threadOperationalDataset](v6, "threadOperationalDataset");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __80__HMDHome_ThreadResidentCommissioning___retrievePreferredNetworkWithCompletion___block_invoke;
      v22[3] = &unk_1E89A5DF8;
      objc_copyWeak(&v24, (id *)buf);
      v23 = v4;
      objc_msgSend(v9, "retrievePreferredNetwork:completion:", v10, v22);

      objc_destroyWeak(&v24);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = v6;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome threadOperationalDataset](v17, "threadOperationalDataset");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome home](v17, "home");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v26 = v19;
        v27 = 2112;
        v28 = v20;
        v29 = 2112;
        v30 = v21;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Shared user -  always use cached threadOperationalDataset %@ for home %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
      (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
    }
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = v6;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@No thread network metadata store", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 58);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v15);

  }
}

- (BOOL)_overrideStartThreadTimeout
{
  return 0;
}

- (void)_startThreadNetworkOnIOSWithCompletion:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  dispatch_time_t v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  _QWORD aBlock[4];
  id v17;
  _QWORD *v18;
  id v19;
  id location;
  _QWORD v21[3];
  char v22;

  v4 = a3;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v22 = 0;
  objc_initWeak(&location, self);
  v5 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke;
  aBlock[3] = &unk_1E89BD0F0;
  objc_copyWeak(&v19, &location);
  v18 = v21;
  v6 = v4;
  v17 = v6;
  v7 = _Block_copy(aBlock);
  if (!-[HMDHome _overrideStartThreadTimeout](self, "_overrideStartThreadTimeout"))
  {
    v8 = dispatch_time(0, 20000000000);
    -[HMDHome workQueue](self, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = v5;
    block[1] = 3221225472;
    block[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_2;
    block[3] = &unk_1E89C0870;
    v15 = v7;
    dispatch_after(v8, v9, block);

  }
  v11[0] = v5;
  v11[1] = 3221225472;
  v11[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_3;
  v11[3] = &unk_1E89BE698;
  objc_copyWeak(&v13, &location);
  v10 = v7;
  v12 = v10;
  -[HMDHome _retrievePreferredNetworkWithCompletion:](self, "_retrievePreferredNetworkWithCompletion:", v11);

  objc_destroyWeak(&v13);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(v21, 8);

}

- (void)_startThreadNetworkWithCompletion:(id)a3
{
  void (**v4)(id, void *);
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  HMDHome *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(id, void *))a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if ((isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled() & 1) != 0)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v9;
      v13 = 2112;
      v14 = v7;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Thread start starting for home %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHome setStartThreadNetworkInProgress:](v7, "setStartThreadNetworkInProgress:", 1);
    -[HMDHome setThreadNetworkShouldRestartOnNetworkChange:](v7, "setThreadNetworkShouldRestartOnNetworkChange:", 1);
    -[HMDHome _startThreadNetworkOnIOSWithCompletion:](v7, "_startThreadNetworkOnIOSWithCompletion:", v4);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v4[2](v4, v10);

  }
}

- (void)stopThreadNetwork:(BOOL)a3
{
  -[HMDHome stopThreadNetworkWithCompletion:completion:](self, "stopThreadNetworkWithCompletion:completion:", a3, 0);
}

- (void)stopThreadNetworkWithCompletion:(BOOL)a3 completion:(id)a4
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v5 = a4;
  -[HMDHome workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke;
  v8[3] = &unk_1E89C1D68;
  v8[4] = self;
  v9 = v5;
  v7 = v5;
  dispatch_async(v6, v8);

}

- (void)_stopThreadNetworkWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHome setThreadNetworkShouldRestartOnNetworkChange:](self, "setThreadNetworkShouldRestartOnNetworkChange:", 0);
  -[HMDHome _incrementCurrentSequenceNumber](self, "_incrementCurrentSequenceNumber");
  +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __73__HMDHome_ThreadResidentCommissioning___stopThreadNetworkWithCompletion___block_invoke;
  v8[3] = &unk_1E89BFC88;
  v8[4] = self;
  v9 = v4;
  v7 = v4;
  objc_msgSend(v6, "stopThreadNetworkWithCompletion:", v8);

}

- (void)_unjoinThreadNetworkWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome threadNetworkID](v7, "threadNetworkID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v15 = v9;
    v16 = 2112;
    v17 = v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Request to unjoin previous thread network: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDHome setThreadNetworkID:](v7, "setThreadNetworkID:", CFSTR("770E5B2E-0BAD-0BAD-0BAD-EE86505EFF8F"));
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __75__HMDHome_ThreadResidentCommissioning___unjoinThreadNetworkWithCompletion___block_invoke;
  v12[3] = &unk_1E89BFC88;
  v12[4] = v7;
  v13 = v4;
  v11 = v4;
  -[HMDHome _stopThreadNetworkWithCompletion:](v7, "_stopThreadNetworkWithCompletion:", v12);

}

- (void)connectToThreadAccessoryWithExtendedMACAddress:(id)a3 completion:(id)a4
{
  id v5;
  id v6;
  void *v7;
  char v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  v6 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = objc_msgSend(v7, "supportsThreadService"),
        v7,
        (v8 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __98__HMDHome_ThreadResidentCommissioning__connectToThreadAccessoryWithExtendedMACAddress_completion___block_invoke;
    v10[3] = &unk_1E89C1A48;
    v11 = v6;
    objc_msgSend(v9, "connectToThreadAccessoryWithExtendedMACAddress:completion:", v5, v10);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v6 + 2))(v6, v9);
  }

}

- (void)onThreadNetworkConnectionStateChange:(int64_t)a3
{
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (-[HMDHome threadNetworkConnectionState](self, "threadNetworkConnectionState") != a3)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2048;
      v13 = a3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Thread network connection state changed to %ld", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome setThreadNetworkConnectionState:](v6, "setThreadNetworkConnectionState:", a3);
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeThreadNetworkConnectionStateChangeNotification"), v6);

  }
}

- (void)onThreadNetworkNodeTypeStateChange:(int64_t)a3
{
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  int64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (-[HMDHome threadNetworkNodeType](self, "threadNetworkNodeType") != a3)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2048;
      v13 = a3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Thread network node type changed to %ld", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome setThreadNetworkNodeType:](v6, "setThreadNetworkNodeType:", a3);
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeThreadNetworkNodeTypeChangeNotification"), v6);

  }
}

- (void)onThreadNetworkWakeOnDeviceConnectionStateChange:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x1E0CB37D0];
  v4 = a3;
  objc_msgSend(v3, "defaultCenter");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("HMDHomeThreadNetworkWakeOnConnectionStateChangeNotification"), v4);

}

- (void)onThreadNetworkPeripheralDeviceNodeTypeChange:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x1E0CB37D0];
  v4 = a3;
  objc_msgSend(v3, "defaultCenter");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("HMDHomeThreadNetworkPeripheralDeviceNodeTypeChangedNotification"), v4);

}

- (void)onThreadNetworkCallStateChange:(BOOL)a3
{
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a3 && -[HMDHome threadNetworkShouldRestartOnNetworkChange](self, "threadNetworkShouldRestartOnNetworkChange"))
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Restarting thread network after call end", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHome startThreadNetwork:](v5, "startThreadNetwork:", 1);
  }
}

- (void)startThreadAccessoryPairingWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v7;
  id v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v6 = a4;
  v7 = a3;
  v8 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "supportsThreadService"),
        v9,
        (v10 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __113__HMDHome_ThreadResidentCommissioning__startThreadAccessoryPairingWithExtendedMACAddress_isWedDevice_completion___block_invoke;
    v13[3] = &unk_1E89C1A48;
    v14 = v8;
    objc_msgSend(v11, "startThreadAccessoryPairingWithExtendedMACAddress:isWedDevice:completion:", v7, v6, v13);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v8 + 2))(v8, v12);

  }
}

- (void)stopThreadAccessoryPairingWithCompletion:(id)a3
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "supportsThreadService"),
        v4,
        (v5 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __81__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryPairingWithCompletion___block_invoke;
    v7[3] = &unk_1E89C1A48;
    v8 = v3;
    objc_msgSend(v6, "stopThreadAccessoryPairingWithCompletion:", v7);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v3 + 2))(v3, v6);
  }

}

- (void)startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:(id)a3 isWedDevice:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v7;
  id v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v6 = a4;
  v7 = a3;
  v8 = a5;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "supportsThreadService"),
        v9,
        (v10 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __120__HMDHome_ThreadResidentCommissioning__startThreadAccessoryFirmwareUpdateWithExtendedMACAddress_isWedDevice_completion___block_invoke;
    v13[3] = &unk_1E89C1A48;
    v14 = v8;
    objc_msgSend(v11, "startThreadAccessoryFirmwareUpdateWithExtendedMACAddress:isWedDevice:completion:", v7, v6, v13);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v8 + 2))(v8, v12);

  }
}

- (void)stopThreadAccessoryFirmwareUpdateWithCompletion:(id)a3
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = a3;
  if (isFeatureMatteriPhoneOnlyPairingControlForThreadEnabled()
    && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "supportsThreadService"),
        v4,
        (v5 & 1) != 0))
  {
    +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __88__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryFirmwareUpdateWithCompletion___block_invoke;
    v7[3] = &unk_1E89C1A48;
    v8 = v3;
    objc_msgSend(v6, "stopThreadAccessoryFirmwareUpdateWithCompletion:", v7);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v3 + 2))(v3, v6);
  }

}

- (void)updateThreadOperationalDatasetWithHomeModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHome *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (isFeatureMatteriPhoneOnlyPairingControlEnabled())
  {
    objc_msgSend(v6, "threadOperationalDataset");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome setThreadOperationalDataset:](self, "setThreadOperationalDataset:", v8);

    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome threadOperationalDataset](v10, "threadOperationalDataset");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2048;
      v17 = objc_msgSend(v13, "length");
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Updated thread operational dataset, Length: %lu", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (void)saveAndSyncWithThreadOperationalDataset:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  void *v18;
  HMDHome *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[5];
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome home](self, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    objc_msgSend(v5, "residentDeviceManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "residentDevices");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "count")
      && !-[HMDHome isCurrentDeviceConfirmedPrimaryResident](self, "isCurrentDeviceConfirmedPrimaryResident"))
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v28 = v14;
        v29 = 2112;
        v30 = v6;
        v15 = "%{public}@There are residents for home: %@, but we are not the primary. Not saving ThreadOperationalDataset.";
        v16 = v13;
        v17 = 22;
        goto LABEL_13;
      }
    }
    else
    {
      -[HMDHome threadOperationalDataset](self, "threadOperationalDataset");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = HMFEqualObjects();

      if (!v10)
      {
        -[HMDHome emptyModelObjectWithChangeType:](self, "emptyModelObjectWithChangeType:", 2);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "setThreadOperationalDataset:", v4);
        -[HMDHome setThreadOperationalDataset:](self, "setThreadOperationalDataset:", v4);
        -[HMDHome backingStore](self, "backingStore");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "transaction:options:", CFSTR("Update thread operational dataset"), v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v25, "add:", v22);
        v26[0] = MEMORY[0x1E0C809B0];
        v26[1] = 3221225472;
        v26[2] = __80__HMDHome_ThreadResidentCommissioning__saveAndSyncWithThreadOperationalDataset___block_invoke;
        v26[3] = &unk_1E89C2350;
        v26[4] = self;
        objc_msgSend(v25, "run:", v26);
        -[HMDHome setThreadOperationalDataset:](self, "setThreadOperationalDataset:", v4);

LABEL_15:
        goto LABEL_16;
      }
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v28 = v14;
        v15 = "%{public}@Thread operational dataset has not changed, ignoring request to save and sync";
        v16 = v13;
        v17 = 12;
LABEL_13:
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, v15, buf, v17);

      }
    }

    objc_autoreleasePoolPop(v11);
    goto LABEL_15;
  }
  v18 = (void *)MEMORY[0x1D17BA0A0]();
  v19 = self;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v21;
    v29 = 2112;
    v30 = v6;
    _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@threadOperationalDataset is null for home %@, not saving...", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
LABEL_16:

}

- (void)_updateThreadNetworkWithModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "setProperties");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "containsObject:", CFSTR("threadNetworkID"));

  if (!v9)
  {
LABEL_13:
    objc_msgSend(v7, "respondWithPayload:", 0);
    goto LABEL_14;
  }
  -[HMDHome unfilteredThreadNetworkID](self, "unfilteredThreadNetworkID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "threadNetworkID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome threadNetworkID](self, "threadNetworkID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    objc_msgSend(v7, "transactionResult");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "source");

    if (v19 == 2 && v11 && -[HMDHome attemptToUpdateThreadNetworkID:](self, "attemptToUpdateThreadNetworkID:", v11))
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v23;
        v27 = 2112;
        v28 = v10;
        v29 = 2112;
        v30 = v11;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@threadNetworkID updated from cloud: %@ -> %@", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHome startThreadNetwork:](v21, "startThreadNetwork:", 0);
    }
    objc_msgSend(v7, "transactionResult");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "markChanged");

    goto LABEL_13;
  }
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543874;
    v26 = v16;
    v27 = 2112;
    v28 = v10;
    v29 = 2112;
    v30 = v11;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Ignoring threadNetworkID update from cloud: %@ -> %@", (uint8_t *)&v25, 0x20u);

  }
  objc_autoreleasePoolPop(v13);
  objc_msgSend(v7, "transactionResult");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "markChanged");

  objc_msgSend(v7, "respondWithPayload:", 0);
LABEL_14:

}

- (void)_notifyThreadLayerOfResidentChange
{
  NSObject *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  -[HMDHome workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHome home](self, "home");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v12 = v4;
    v6 = objc_msgSend(v4, "isCurrentDeviceAvailableResident");
    v5 = v12;
    if (v6)
    {
      +[HMDThreadResidentCommissioner sharedCommissioner](HMDThreadResidentCommissioner, "sharedCommissioner");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "primaryResident");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isCurrentDevice");
      objc_msgSend(v12, "primaryResident");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "capabilities");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "informThreadLayerOfResidentChange:primaryResidentIsThreadCapable:", v9, objc_msgSend(v11, "supportsThreadBorderRouter"));

      v5 = v12;
    }
  }

}

void __80__HMDHome_ThreadResidentCommissioning__saveAndSyncWithThreadOperationalDataset___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v8;
      v13 = 2112;
      v14 = (uint64_t)v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to sync thread operational dataset, error: %@", (uint8_t *)&v11, 0x16u);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "threadOperationalDataset");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v9;
    v13 = 2048;
    v14 = objc_msgSend(v10, "length");
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully sync'ed thread operational dataset, Length: %lu", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

uint64_t __88__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryFirmwareUpdateWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __120__HMDHome_ThreadResidentCommissioning__startThreadAccessoryFirmwareUpdateWithExtendedMACAddress_isWedDevice_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __81__HMDHome_ThreadResidentCommissioning__stopThreadAccessoryPairingWithCompletion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __113__HMDHome_ThreadResidentCommissioning__startThreadAccessoryPairingWithExtendedMACAddress_isWedDevice_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __98__HMDHome_ThreadResidentCommissioning__connectToThreadAccessoryWithExtendedMACAddress_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __75__HMDHome_ThreadResidentCommissioning___unjoinThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v8;
      v17 = 2112;
      v18 = v3;
      v9 = "%{public}@Failed to leave previous thread network: %@";
      v10 = v7;
      v11 = OS_LOG_TYPE_ERROR;
      v12 = 22;
LABEL_6:
      _os_log_impl(&dword_1CD062000, v10, v11, v9, (uint8_t *)&v15, v12);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543362;
    v16 = v8;
    v9 = "%{public}@Successfully left previous thread network";
    v10 = v7;
    v11 = OS_LOG_TYPE_DEFAULT;
    v12 = 12;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
  (*(void (**)(_QWORD, id, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v3, v13, v14);

}

void __73__HMDHome_ThreadResidentCommissioning___stopThreadNetworkWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "_unregisterForThreadNetworkEvents");
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0));
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "threadNetworkID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v12 = v5;
    v13 = 2112;
    v14 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Stop thread network: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke_46;
  v8[3] = &unk_1E89BFC88;
  v7 = *(void **)(a1 + 40);
  v9 = *(id *)(a1 + 32);
  v10 = v7;
  objc_msgSend(v9, "_stopThreadNetworkWithCompletion:", v8);

}

void __83__HMDHome_ThreadResidentCommissioning__stopThreadNetworkWithCompletion_completion___block_invoke_46(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v3;
    v9 = "%{public}@Failed to stop thread network: %@";
    v10 = v7;
    v11 = OS_LOG_TYPE_ERROR;
    v12 = 22;
  }
  else
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543362;
    v16 = v8;
    v9 = "%{public}@Successfully stopped thread network";
    v10 = v7;
    v11 = OS_LOG_TYPE_DEFAULT;
    v12 = 12;
  }
  _os_log_impl(&dword_1CD062000, v10, v11, v9, (uint8_t *)&v15, v12);

LABEL_7:
  objc_autoreleasePoolPop(v4);
  v13 = _Block_copy(*(const void **)(a1 + 40));
  v14 = v13;
  if (v13)
    (*((void (**)(void *))v13 + 2))(v13);

}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  __int128 v27;
  _QWORD block[4];
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  _QWORD v33[5];
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v3)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = WeakRetained;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v36 = v8;
        v37 = 2112;
        v38 = v6;
        v39 = 2112;
        v40 = v3;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Error starting thread for home %@, resetting state: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v5);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        v9 = (void *)MEMORY[0x1D17BA0A0]();
        v10 = v6;
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v36 = v12;
          v37 = 2112;
          v38 = v10;
          v39 = 2112;
          v40 = v3;
          _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Thread start completed for home %@, error = %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v9);
        objc_msgSend(v10, "setStartThreadNetworkInProgress:", 0);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        objc_msgSend(v10, "workQueue");
        v13 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_44;
        block[3] = &unk_1E89C1D68;
        v30 = *(id *)(a1 + 32);
        v29 = v3;
        dispatch_async(v13, block);

        v14 = v30;
LABEL_18:

      }
    }
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      goto LABEL_13;
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = WeakRetained;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v36 = v18;
      v37 = 2112;
      v38 = v16;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Starting thread took longer than expected for home %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
LABEL_13:
      objc_msgSend(WeakRetained, "threadOperationalDataset");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19)
      {
        objc_msgSend(WeakRetained, "threadOperationalDataset");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_41;
        v33[3] = &unk_1E89B6820;
        v33[4] = WeakRetained;
        v27 = *(_OWORD *)(a1 + 32);
        v21 = (id)v27;
        v34 = v27;
        objc_msgSend(WeakRetained, "_startThreadNetworkOnCommissionerForIOSWithOperationalDataset:completion:", v20, v33);

        v14 = (void *)v34;
      }
      else
      {
        v22 = (void *)MEMORY[0x1D17BA0A0]();
        v23 = WeakRetained;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v36 = v25;
          v37 = 2112;
          v38 = v23;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Thread operational dataset not available. Cancelling thread start for home %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v22);
        objc_msgSend(v23, "setStartThreadNetworkInProgress:", 0);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        objc_msgSend(v23, "workQueue");
        v26 = objc_claimAutoreleasedReturnValue();
        v31[0] = MEMORY[0x1E0C809B0];
        v31[1] = 3221225472;
        v31[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_43;
        v31[3] = &unk_1E89C0870;
        v32 = *(id *)(a1 + 32);
        dispatch_async(v26, v31);

        v14 = v32;
      }
      goto LABEL_18;
    }
  }

}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 8);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (v3 || !WeakRetained)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = v5;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v9;
      v29 = 2112;
      v30 = v3;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve preferred thread network: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v7, "threadOperationalDataset");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      v23 = *(_QWORD *)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v24);

      goto LABEL_12;
    }
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = v7;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "threadOperationalDataset");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "threadNetworkID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "home");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v28 = v14;
      v29 = 2112;
      v30 = v15;
      v31 = 2112;
      v32 = v16;
      v33 = 2112;
      v34 = v17;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Using cached threadOperationalDataset %@ and uuid %@ from home %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v11);
  }
  v18 = (void *)MEMORY[0x1D17BA0A0]();
  v19 = v5;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v21;
    v29 = 2112;
    v30 = v19;
    _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Successfully fetched preferred network, scheduling startThread for home %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
  objc_msgSend(v19, "workQueue");
  v22 = objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_45;
  v25[3] = &unk_1E89C1D68;
  v25[4] = v19;
  v26 = *(id *)(a1 + 32);
  dispatch_async(v22, v25);

LABEL_12:
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_45(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(*(id *)(a1 + 32), "startThreadNetworkInProgress") & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 32);
      v9 = 138543618;
      v10 = v5;
      v11 = 2112;
      v12 = v6;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Thread network stop was requested by the time preferred network was fetched to start Thread for home %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    v7 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_41(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v7;
      v21 = 2112;
      v22 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Unable to start thread with operational dataset: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    v20 = v11;
    v21 = 2112;
    v22 = v12;
    v23 = 2112;
    v24 = v3;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Thread start completed for home %@, error = %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_42;
  v16[3] = &unk_1E89C1D68;
  v14 = *(id *)(a1 + 40);
  v17 = v3;
  v18 = v14;
  v15 = v3;
  dispatch_async(v13, v16);

}

void __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_43(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t __79__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnIOSWithCompletion___block_invoke_42(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __80__HMDHome_ThreadResidentCommissioning___retrievePreferredNetworkWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id WeakRetained;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void (*v26)(void);
  NSObject *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  id v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = WeakRetained;
  if (!v12 && v9 && WeakRetained)
  {
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v33 = v17;
      v34 = 2112;
      v35 = v9;
      v36 = 2112;
      v37 = v10;
      v38 = 2112;
      v39 = v11;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Successfully retrieved preferred thread credentials %@ with UUID %@ and operationalDataset %@ from network metadata store", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v14);
    if (v11)
    {
      v18 = (void *)objc_msgSend(v11, "copy");
      objc_msgSend(v15, "saveAndSyncWithThreadOperationalDataset:", v18);

      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = v15;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = v9;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "threadOperationalDataset");
        v29 = v10;
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "home");
        v31 = v19;
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v33 = v22;
        v34 = 2112;
        v35 = v23;
        v36 = 2112;
        v37 = v24;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@threadOperationalDataset set to %@ for home %@", buf, 0x20u);

        v19 = v31;
        v10 = v29;

        v9 = v30;
      }

      objc_autoreleasePoolPop(v19);
    }
    if (v10)
    {
      v25 = (void *)objc_msgSend(v10, "copy");
      objc_msgSend(v15, "setThreadNetworkID:", v25);

    }
    v26 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  else
  {
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v28;
      v34 = 2112;
      v35 = v12;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v26 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  v26();

}

void __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD block[5];
  id v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "threadNetworkID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138544130;
      v17 = v7;
      v18 = 2112;
      v19 = v8;
      v20 = 2112;
      v21 = v9;
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to attach to thread network %@ with operational data set%@: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_39;
  block[3] = &unk_1E89C1B48;
  block[4] = *(_QWORD *)(a1 + 32);
  v11 = *(id *)(a1 + 48);
  v14 = v3;
  v15 = v11;
  v12 = v3;
  dispatch_async(v10, block);

}

uint64_t __113__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerForIOSWithOperationalDataset_completion___block_invoke_39(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_scheduleThreadNetworkUpdate");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint32_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  id *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  _QWORD v26[5];
  id v27;
  _QWORD block[5];
  NSObject *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
    if (v7 && !objc_msgSend(v7, "isEqualToString:", v5))
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_12;
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138543874;
      v32 = v11;
      v33 = 2112;
      v34 = v5;
      v35 = 2112;
      v36 = v24;
      v12 = "%{public}@Attached to thread network %@, but expected to attach to %@";
      v13 = v10;
      v14 = OS_LOG_TYPE_ERROR;
      v15 = 32;
    }
    else
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_12;
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v11;
      v33 = 2112;
      v34 = v5;
      v12 = "%{public}@Attached to thread network %@";
      v13 = v10;
      v14 = OS_LOG_TYPE_DEFAULT;
      v15 = 22;
    }
    _os_log_impl(&dword_1CD062000, v13, v14, v12, buf, v15);

LABEL_12:
    objc_autoreleasePoolPop(v8);
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) || (objc_msgSend(v5, "isEqualToString:") & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "setThreadNetworkID:", v5);
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v23 = objc_claimAutoreleasedReturnValue();
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_37;
    v26[3] = &unk_1E89C1D68;
    v25 = *(void **)(a1 + 40);
    v26[4] = *(_QWORD *)(a1 + 32);
    v22 = &v27;
    v27 = v25;
    dispatch_async(v23, v26);
    goto LABEL_16;
  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v32 = v19;
    v33 = 2112;
    v34 = 0;
    v35 = 2112;
    v36 = v6;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to attach to thread network %@: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v16);
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v20 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_36;
  block[3] = &unk_1E89C1B48;
  v21 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v22 = &v30;
  v30 = v21;
  v29 = v6;
  dispatch_async(v20, block);

  v23 = v29;
LABEL_16:

}

uint64_t __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_36(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t __88__HMDHome_ThreadResidentCommissioning___startThreadNetworkOnCommissionerWithCompletion___block_invoke_37(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setStartThreadNetworkInProgress:", 0);
  objc_msgSend(*(id *)(a1 + 32), "_scheduleThreadNetworkUpdate");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke(uint64_t a1)
{
  id WeakRetained;
  __n128 v3;
  __n128 v4;
  double v5;
  BOOL v6;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[7];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    v14 = MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Home has died, resident commissioning canceled", buf, 0xCu);

    }
    v17 = (void *)v14;
    goto LABEL_17;
  }
  v5 = *(double *)(a1 + 40);
  v4.n128_f64[0] = fabs(v5);
  v6 = v5 <= 0.0;
  v3.n128_u64[0] = 0x3CB0000000000000;
  if (!v6 && v4.n128_f64[0] >= 2.22044605e-16)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0](v3, v4);
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning timer expired", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
  }
  v12 = objc_msgSend(WeakRetained, "threadNetworkSequenceNumber");
  v13 = v12;
  if (v12 != *(_QWORD *)(a1 + 48))
  {
    v18 = MEMORY[0x1D17BA0A0]();
    v19 = WeakRetained;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v25 = v21;
      v26 = 2048;
      v27 = v22;
      v28 = 2048;
      v29 = v13;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning sequence number no longer matches: %lu != %lu", buf, 0x20u);

    }
    v17 = (void *)v18;
LABEL_17:
    objc_autoreleasePoolPop(v17);
    goto LABEL_18;
  }
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke_34;
  v23[3] = &unk_1E89A5D80;
  v23[4] = WeakRetained;
  v23[5] = v12;
  v23[6] = *(_QWORD *)(a1 + 56);
  objc_msgSend(WeakRetained, "_startThreadNetworkWithCompletion:", v23);
LABEL_18:

}

void __65__HMDHome_ThreadResidentCommissioning___retryStartThreadNetwork___block_invoke_34(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "domain");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0CB8C70]))
    {
      if (objc_msgSend(v4, "code") == 48)
      {

        goto LABEL_12;
      }
      v13 = objc_msgSend(v4, "code");

      if (v13 == 23)
        goto LABEL_12;
    }
    else
    {

    }
    v6 = objc_msgSend(*(id *)(a1 + 32), "threadNetworkSequenceNumber");
    if (v6 == *(_QWORD *)(a1 + 40))
    {
      objc_msgSend(*(id *)(a1 + 32), "_retryStartThreadNetwork:", *(double *)(a1 + 48));
    }
    else
    {
      v7 = v6;
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(_QWORD *)(a1 + 40);
        v14 = 138543874;
        v15 = v11;
        v16 = 2048;
        v17 = v12;
        v18 = 2048;
        v19 = v7;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Resident commissioning sequence number no longer matches: %lu != %lu", (uint8_t *)&v14, 0x20u);

      }
      objc_autoreleasePoolPop(v8);
    }
  }
LABEL_12:

}

void __59__HMDHome_ThreadResidentCommissioning__startThreadNetwork___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  const char *v7;
  void *v8;
  char v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "homeManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "isStartThreadNetworkInProgress"))
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v6;
      v7 = "%{public}@Not starting thread network, start already in progress for another network";
LABEL_4:
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v10, 0xCu);

    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 40)
      || (objc_msgSend(*(id *)(a1 + 32), "threadNetworkID"),
          v8 = (void *)objc_claimAutoreleasedReturnValue(),
          v9 = objc_msgSend(v2, "isCurrentResidentDeviceRunningThreadNetwork:", v8),
          v8,
          (v9 & 1) != 0))
    {
      objc_msgSend(*(id *)(a1 + 32), "_incrementCurrentSequenceNumber");
      objc_msgSend(*(id *)(a1 + 32), "_retryStartThreadNetwork:", 0.0);
      goto LABEL_9;
    }
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v6;
      v7 = "%{public}@Not starting thread network, not associated with thread network homes";
      goto LABEL_4;
    }
  }

  objc_autoreleasePoolPop(v3);
LABEL_9:

}

void __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke_2;
  v2[3] = &unk_1E89C2350;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "_unjoinThreadNetworkWithCompletion:", v2);

}

uint64_t __74__HMDHome_ThreadResidentCommissioning___handleUnjoinThreadNetworkMessage___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "threadNetworkID");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v12 = v5;
      v13 = 2112;
      v14 = v6;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Updating thread network %@ -> %@ and starting", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 40), "setThreadNetworkID:", *(_QWORD *)(a1 + 32));
  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke_32;
  v9[3] = &unk_1E89C2350;
  v8 = *(void **)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v8, "_startThreadNetworkWithCompletion:", v9);

}

uint64_t __78__HMDHome_ThreadResidentCommissioning___handleJoinOrFormThreadNetworkMessage___block_invoke_32(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __79__HMDHome_ThreadResidentCommissioning___handleThreadNetworkCredentialsRequest___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  if (v5 && WeakRetained)
  {
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = v11;
      v28 = 2112;
      v29 = v5;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Successfully retrieved thread credentials %@ from network metadata store", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v25 = 0;
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v25);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v25;
    if (v12)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v12, *MEMORY[0x1E0CB9278]);
      objc_msgSend(v5, "masterKey");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, CFSTR("HMHomeThreadNetworkCredentialsMasterKeyMessageKey"));

      objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", v14);
    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = v9;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v27 = v23;
        v28 = 2112;
        v29 = v13;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode credentials: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      v24 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 15);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "respondWithError:", v14);
    }

  }
  else
  {
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "threadNetworkID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v27 = v17;
      v28 = 2112;
      v29 = v18;
      v30 = 2112;
      v31 = v6;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network '%@': %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    v19 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "respondWithError:", v13);
  }

}

void __84__HMDHome_ThreadResidentCommissioning__handleCurrentWiFiNetworkChangedNotification___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "threadNetworkShouldRestartOnNetworkChange");
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v7;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Restarting Thread network upon WiFi network changed notification", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 32), "startThreadNetwork:", 1);
  }
  else
  {
    if (v6)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Ignoring WiFi network changed notification when Thread is not up", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
}

void __73__HMDHome_ThreadResidentCommissioning___unregisterForThreadNetworkEvents__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained
    && (objc_msgSend(WeakRetained, "threadNetworkPeriodicStatusReporter"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    objc_msgSend(v2, "threadNetworkPeriodicStatusReporter");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "unregisterForThreadNetworkEvents");

    objc_msgSend(v2, "setThreadNetworkPeriodicStatusReporter:", 0);
  }
  else
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = v2;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@_unregisterForThreadNetworkEvents already unregistered", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __71__HMDHome_ThreadResidentCommissioning___registerForThreadNetworkEvents__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  HMDThreadNetworkStatusReporter *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "threadNetworkPeriodicStatusReporter");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      v4 = -[HMDThreadNetworkStatusReporter initWithHome:]([HMDThreadNetworkStatusReporter alloc], "initWithHome:", v2);
      objc_msgSend(v2, "setThreadNetworkPeriodicStatusReporter:", v4);

    }
    objc_msgSend(v2, "threadNetworkPeriodicStatusReporter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "registerForThreadNetworkEvents");

  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@_registerForThreadNetworkEvents could not get a strong reference to self", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (id)actionWithDictionaryRepresentation:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_numberForKey:", CFSTR("kActionType"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      if ((unint64_t)objc_msgSend(v6, "integerValue") <= 3)
      {
        objc_opt_class();
        v8 = (id)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          objc_msgSend(v8, "actionWithDictionaryRepresentation:home:", v5, self);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:

          goto LABEL_14;
        }
      }
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138543618;
        v19 = v13;
        v20 = 2112;
        v21 = v7;
        v14 = "%{public}@Unknown action type: %@";
        v15 = v12;
        v16 = 22;
LABEL_11:
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v18, v16);

      }
    }
    else
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138543362;
        v19 = v13;
        v14 = "%{public}@Unable to determine the action type";
        v15 = v12;
        v16 = 12;
        goto LABEL_11;
      }
    }

    objc_autoreleasePoolPop(v10);
    v9 = 0;
    goto LABEL_13;
  }
  v9 = 0;
LABEL_14:

  return v9;
}

- (void)configureAppleMediaAccessoriesStateManagerWithStateManagerWithFactory:(id)a3 messengerFactory:(id)a4 metricsDispatcherFactory:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v14;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Configuring apple media accessories state manager", (uint8_t *)&v22, 0xCu);

  }
  objc_autoreleasePoolPop(v11);
  -[HMDHome uuid](v12, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v12, "msgDispatcher");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
  v17 = objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  if (!v16)
  {
LABEL_8:
    _HMFPreconditionFailure();
LABEL_9:
    _HMFPreconditionFailure();
  }
  v18 = (void *)v17;
  if (!v17)
    goto LABEL_9;
  objc_msgSend(v9, "createAppleMediaAccessoriesStateMessengerWithIdentifier:messageDispatcher:", v15, v16);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "createAppleMediaAccessoriesStateManagerMetricsDispatcherWithIdentifier:logEventSubmitter:", v15, v18);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "createAppleMediaAccessoriesStateManagerWithIdentifier:messenger:metricsDispatcher:", v15, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setDelegate:", v21);
  objc_msgSend(v21, "setDataSource:", v12);
  objc_msgSend(v19, "registerForMessagesWithHome:", v12);
  objc_msgSend(v21, "run");
  -[HMDHome setAppleMediaAccessoriesStateManager:](v12, "setAppleMediaAccessoriesStateManager:", v21);

}

- (id)createAppleMediaAccessoriesStateManagerWithIdentifier:(id)a3 messenger:(id)a4 metricsDispatcher:(id)a5
{
  id v7;
  id v8;
  id v9;
  HMDAppleMediaAccessoriesStateManager *v10;

  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = -[HMDAppleMediaAccessoriesStateManager initWithIdentifier:messenger:metricsDispatcher:]([HMDAppleMediaAccessoriesStateManager alloc], "initWithIdentifier:messenger:metricsDispatcher:", v9, v8, v7);

  return v10;
}

- (void)_auditAndDeregisterCharacteristicsForHAPAccessory:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  HMDHome *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHome *v23;
  void *v24;
  id obj;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE buf[18];
  __int16 v39;
  __int128 *v40;
  __int16 v41;
  void *v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v23 = self;
  v45 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v24 = v3;
  objc_msgSend(v3, "services");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v44, 16);
  if (v27)
  {
    v26 = *(_QWORD *)v34;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v34 != v26)
          objc_enumerationMutation(obj);
        v28 = v6;
        v7 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v6);
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        objc_msgSend(v7, "characteristics", v23);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v43, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v30;
          do
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v30 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
              objc_msgSend(v13, "notificationRegistrations");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v15 = objc_msgSend(v14, "count");

              if (!v15)
              {
                objc_msgSend(v4, "addObject:", v13);
                objc_msgSend(v13, "shortDescription");
                v16 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v5, "appendString:", v16);

                objc_msgSend(v5, "appendString:", CFSTR("\n"));
              }
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v29, v43, 16);
          }
          while (v10);
        }

        v6 = v28 + 1;
      }
      while (v28 + 1 != v27);
      v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v44, 16);
    }
    while (v27);
  }

  v17 = (void *)MEMORY[0x1D17BA0A0]();
  v18 = v23;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    objc_msgSend(v24, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      objc_msgSend(v24, "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "getUUIDBytes:", buf);

    }
    else
    {
      *(_OWORD *)buf = *MEMORY[0x1E0D286F8];
    }
    v37 = *(_OWORD *)buf;
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v20;
    *(_WORD *)&buf[12] = 1040;
    *(_DWORD *)&buf[14] = 16;
    v39 = 2096;
    v40 = &v37;
    v41 = 2112;
    v42 = v5;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Audit de-registering notifications accessory %{uuid_t}.16P characteristics %@", buf, 0x26u);

  }
  objc_autoreleasePoolPop(v17);
  objc_msgSend(v24, "enableNotification:forCharacteristics:message:clientIdentifier:", 0, v4, 0, 0);

}

- (void)_auditChangedCharactersitics:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  id v23;
  void *v24;
  id v25;
  void *v26;
  int v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v34 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v10, "notificationRegistrations");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "count");

        if (!v12)
        {
          objc_msgSend(v10, "accessory");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v14);

          if ((objc_msgSend(v13, "isPrimary") & 1) == 0)
          {
            objc_msgSend(v13, "bridge");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "identifiersForBridgedAccessories");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "unionSet:", v16);

          }
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v4, "count") == 1)
  {
    objc_msgSend(v5, "firstObject");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "accessory");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome _auditAndDeregisterCharacteristicsForHAPAccessory:](self, "_auditAndDeregisterCharacteristicsForHAPAccessory:", v18);

  }
  else
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    -[HMDHome accessories](self, "accessories");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v30;
      do
      {
        for (j = 0; j != v20; ++j)
        {
          if (*(_QWORD *)v30 != v21)
            objc_enumerationMutation(v17);
          v23 = *(id *)(*((_QWORD *)&v29 + 1) + 8 * j);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v24 = v23;
          else
            v24 = 0;
          v25 = v24;

          if (v25)
          {
            objc_msgSend(v25, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = objc_msgSend(v4, "containsObject:", v26);

            if (v27)
              -[HMDHome _auditAndDeregisterCharacteristicsForHAPAccessory:](self, "_auditAndDeregisterCharacteristicsForHAPAccessory:", v25);
          }

        }
        v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      }
      while (v20);
    }
  }

}

- (void)updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v3 = a3;
  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (v13)
        {
          objc_msgSend(v13, "lightProfiles");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = v14;
          if (v3)
          {
            objc_msgSend(v14, "na_filter:", &__block_literal_global_43797);
            v16 = objc_claimAutoreleasedReturnValue();

            v15 = (void *)v16;
          }
          objc_msgSend(v15, "allObjects");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "addObjectsFromArray:", v17);

        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v8);
  }

  -[HMDHome updateLightProfilesSettings:](self, "updateLightProfilesSettings:", v5);
}

void __46__HMDHome_Light__updateLightProfilesSettings___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  id obj;
  id v20;
  _QWORD block[5];
  id v22;
  id v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t v29[128];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = v5;
    if (objc_msgSend(v5, "count"))
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      obj = *(id *)(a1 + 32);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v26;
        v11 = MEMORY[0x1E0C809B0];
        do
        {
          for (i = 0; i != v9; ++i)
          {
            if (*(_QWORD *)v26 != v10)
              objc_enumerationMutation(obj);
            v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
            objc_msgSend(v13, "workQueue");
            v14 = objc_claimAutoreleasedReturnValue();
            block[0] = v11;
            block[1] = 3221225472;
            block[2] = __46__HMDHome_Light__updateLightProfilesSettings___block_invoke_13;
            block[3] = &unk_1E89C07B8;
            block[4] = v13;
            v5 = v7;
            v22 = v7;
            v23 = WeakRetained;
            v24 = v20;
            dispatch_async(v14, block);

          }
          v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        }
        while (v9);
      }

    }
    else
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      objc_msgSend(WeakRetained, "lightLogCategory");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v31 = v18;
        v32 = 2112;
        v33 = v7;
        v34 = 2112;
        v35 = v20;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Received empty response payload for light profile charactersitic read requests %@:%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
      v5 = v7;
    }
  }

}

void __46__HMDHome_Light__updateLightProfilesSettings___block_invoke_13(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v17 = 0;
  objc_msgSend(v2, "updateSettingsWithReadCharacteristicResponsePayload:error:", v3, &v17);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v17;
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  objc_msgSend(*(id *)(a1 + 48), "lightLogCategory");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v19 = v10;
      v20 = 2112;
      v21 = v11;
      v22 = 2112;
      v23 = v4;
      v12 = "%{public}@Successfully updated light profile settings %@:%@";
      v13 = v9;
      v14 = OS_LOG_TYPE_INFO;
LABEL_6:
      _os_log_impl(&dword_1CD062000, v13, v14, v12, buf, 0x20u);

    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    v19 = v10;
    v20 = 2112;
    v21 = v15;
    v22 = 2112;
    v23 = v16;
    v12 = "%{public}@Failed to update light profile settings %@:%@";
    v13 = v9;
    v14 = OS_LOG_TYPE_ERROR;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v6);
}

BOOL __82__HMDHome_Light__updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "notificationEnabledCharacteristics");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

- (void)configurePrimaryResidentMessageRouterWithFactory:(id)a3 metricsDispatcherFactory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543362;
    v19 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring primary resident message router", (uint8_t *)&v18, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
    _HMFPreconditionFailure();
  +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](v9, "uuid");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "createPrimaryResidentMessageRouterWithHomeUUID:messageDispatcher:metricsDispatcher:", v16, v12, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "setDataSource:", v9);
  -[HMDHome setPrimaryResidentMessageRouter:](v9, "setPrimaryResidentMessageRouter:", v17);

}

- (id)createPrimaryResidentMessageRouterWithHomeUUID:(id)a3 messageDispatcher:(id)a4 metricsDispatcher:(id)a5
{
  id v7;
  id v8;
  id v9;
  HMDPrimaryResidentMessageRouter *v10;

  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = -[HMDPrimaryResidentMessageRouter initWithHomeUUID:messageDispatcher:metricsDispatcher:]([HMDPrimaryResidentMessageRouter alloc], "initWithHomeUUID:messageDispatcher:metricsDispatcher:", v9, v8, v7);

  return v10;
}

- (id)createAccessorySettingsLocalMessageHandlerWithHomeUUID:(id)a3 languageValuesDataProvider:(id)a4
{
  id v5;
  id v6;
  HMDAccessorySettingsLocalMessageHandler *v7;

  v5 = a4;
  v6 = a3;
  v7 = -[HMDAccessorySettingsLocalMessageHandler initWithHomeUUID:languageValuesDataProvider:]([HMDAccessorySettingsLocalMessageHandler alloc], "initWithHomeUUID:languageValuesDataProvider:", v6, v5);

  return v7;
}

- (HMDAccessoryCount)accessoryCount
{
  return -[HMDAccessoryCount initWithHome:]([HMDAccessoryCount alloc], "initWithHome:", self);
}

- (id)createSiriEndpointProfileMessageHandlerWithHomeUUID:(id)a3
{
  id v3;
  HMDSiriEndpointProfileMessageHandler *v4;

  v3 = a3;
  v4 = -[HMDSiriEndpointProfileMessageHandler initWithHomeUUID:]([HMDSiriEndpointProfileMessageHandler alloc], "initWithHomeUUID:", v3);

  return v4;
}

- (id)createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:(id)a3
{
  id v3;
  HMDPrimaryResidentMessageRouterMetricsDispatcher *v4;

  v3 = a3;
  v4 = -[HMDPrimaryResidentMessageRouterMetricsDispatcher initWithLogEventSubmitter:]([HMDPrimaryResidentMessageRouterMetricsDispatcher alloc], "initWithLogEventSubmitter:", v3);

  return v4;
}

- (NSArray)accessoriesRequiringManualReconfigurationOnRouterRemoval
{
  void *v2;
  void *v3;

  -[HMDHome accessories](self, "accessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_objectsPassingTest:", &__block_literal_global_73654);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v3;
}

- (void)_reconfigureAccessoriesOnRouterRemovalWithCompletion:(id)a3
{
  void (**v4)(_QWORD);
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  id v23;
  void *v24;
  id v25;
  void *v26;
  HMDWiFiReconfigurationLogEvent *v27;
  NSObject *v28;
  HMDHome *v29;
  void (**block)(_QWORD);
  void *v31;
  _QWORD v32[5];
  NSObject *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[128];
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(_QWORD))a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHome accessories](self, "accessories");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_objectsPassingTest:", &__block_literal_global_1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "count"))
  {
    -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "networkRouterController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "wiFiSSID");
    v10 = objc_claimAutoreleasedReturnValue();

    +[HMDWiFiManagementController sharedPSKForNetworkWithSSID:](HMDWiFiManagementController, "sharedPSKForNetworkWithSSID:", v10);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)v11;
    v31 = (void *)v10;
    if (v10 && v11)
    {
      block = v4;
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v40 = v16;
        v41 = 2048;
        v42 = objc_msgSend(v7, "count");
        v43 = 2112;
        v44 = v31;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Reconfiguring %ld accessories on '%@' due to router removal", buf, 0x20u);

      }
      v29 = v14;

      objc_autoreleasePoolPop(v13);
      v17 = dispatch_group_create();
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v18 = v7;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v35;
        do
        {
          for (i = 0; i != v20; ++i)
          {
            if (*(_QWORD *)v35 != v21)
              objc_enumerationMutation(v18);
            v23 = *(id *)(*((_QWORD *)&v34 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v24 = v23;
            else
              v24 = 0;
            v25 = v24;

            objc_msgSend(v25, "wiFiManagementController");
            v26 = (void *)objc_claimAutoreleasedReturnValue();

            if (v26)
            {
              dispatch_group_enter(v17);
              v27 = objc_alloc_init(HMDWiFiReconfigurationLogEvent);
              -[HMDWiFiReconfigurationLogEvent setCredentialType:](v27, "setCredentialType:", 2);
              v32[0] = MEMORY[0x1E0C809B0];
              v32[1] = 3221225472;
              v32[2] = __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke_4;
              v32[3] = &unk_1E89C21C0;
              v32[4] = v23;
              v33 = v17;
              objc_msgSend(v26, "reconfigureWithSSID:PSK:logEvent:completion:", v31, v12, v27, v32);

            }
          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        }
        while (v20);
      }

      -[HMDHome workQueue](v29, "workQueue");
      v28 = objc_claimAutoreleasedReturnValue();
      v4 = block;
      dispatch_group_notify(v17, v28, block);

    }
    else
    {
      v4[2](v4);
    }

  }
  else
  {
    v4[2](v4);
  }

}

void __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke_4(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "saveWiFiUniquePreSharedKey:credentialType:", 0, 2 * (a2 == 0));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t __80__HMDHome_WiFiManagement___reconfigureAccessoriesOnRouterRemovalWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  if (objc_msgSend(v2, "wiFiCredentialType") == 3)
    v3 = isReconfigurationPossible(v2);
  else
    v3 = 0;

  return v3;
}

uint64_t __83__HMDHome_WiFiManagement__accessoriesRequiringManualReconfigurationOnRouterRemoval__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  if (objc_msgSend(v2, "wiFiCredentialType") == 3)
    v3 = isReconfigurationPossible(v2) ^ 1;
  else
    v3 = 0;

  return v3;
}

- (id)playbackArchiveWithSessionIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome actionSets](self, "actionSets");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome triggerOwnedActionSets](self, "triggerOwnedActionSets");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayByAddingObjectsFromArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v8 = v7;
  v25 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v25)
  {
    v9 = *(_QWORD *)v33;
    v27 = v8;
    v24 = *(_QWORD *)v33;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v33 != v9)
          objc_enumerationMutation(v8);
        v26 = v10;
        v11 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v10);
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        objc_msgSend(v11, "actions", v24);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v29;
          while (2)
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v29 != v15)
                objc_enumerationMutation(v12);
              v17 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v18 = v17;
              else
                v18 = 0;
              v19 = v18;

              objc_msgSend(v19, "playbackArchive");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "playbackSessionIdentifier");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = objc_msgSend(v21, "isEqualToString:", v4);

              if ((v22 & 1) != 0)
              {

                v8 = v27;
                goto LABEL_22;
              }

            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
            if (v14)
              continue;
            break;
          }
        }

        v10 = v26 + 1;
        v8 = v27;
        v9 = v24;
      }
      while (v26 + 1 != v25);
      v20 = 0;
      v25 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v25);
  }
  else
  {
    v20 = 0;
  }
LABEL_22:

  return v20;
}

- (id)accessorySettingsMessengerMessageTargetUUID
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CBA2F0];
  -[HMDHome uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageTargetUUIDWithHomeUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)configureAccessorySettingsMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDAccessorySettingsLegacyMessageReceiver *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v31 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring accessory settings messenger", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryMessageRouterViaPrimary](v9, "accessoryMessageRouterViaPrimary");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome unifiedLanguageValueListSettingDataProvider](v9, "unifiedLanguageValueListSettingDataProvider");
  v14 = objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    _HMFPreconditionFailure();
    goto LABEL_8;
  }
  if (!v13)
  {
LABEL_8:
    _HMFPreconditionFailure();
LABEL_9:
    _HMFPreconditionFailure();
  }
  v15 = (void *)v14;
  if (!v14)
    goto LABEL_9;
  -[HMDHome uuid](v9, "uuid");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "createAccessorySettingsLocalMessageHandlerWithHomeUUID:languageValuesDataProvider:", v16, v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "setDataSource:", v9);
  -[HMDHome homeManager](v9, "homeManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "compositeSettingsControllerManager");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setDelegate:", v19);

  v20 = (void *)MEMORY[0x1E0CBA2F0];
  -[HMDHome uuid](v9, "uuid");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "legacyMessageTargetUUIDWithHomeUUID:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = -[HMDAccessorySettingsLegacyMessageReceiver initWithMessageTargetUUID:messageDispatcher:]([HMDAccessorySettingsLegacyMessageReceiver alloc], "initWithMessageTargetUUID:messageDispatcher:", v22, v12);
  -[HMDHome accessorySettingsMessengerMessageTargetUUID](v9, "accessorySettingsMessengerMessageTargetUUID");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome logEventSubmitter](v9, "logEventSubmitter");
  v28 = v15;
  v25 = v6;
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "createAccessorySettingsMessengerWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:logEventSubmitter:legacyMessageReceiver:", v24, v12, v13, v17, v26, v23);
  v29 = v7;
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDAccessorySettingsLegacyMessageReceiver setMessenger:](v23, "setMessenger:", v27);
  objc_msgSend(v27, "registerForMessagesWithHome:", v9);
  -[HMDHome setAccessorySettingsMessenger:](v9, "setAccessorySettingsMessenger:", v27);

}

- (id)createAccessorySettingsMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6 logEventSubmitter:(id)a7 legacyMessageReceiver:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  HMDHome *v21;
  NSObject *v22;
  void *v23;
  HMDAccessorySettingsMessenger *v24;
  int v26;
  void *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = (void *)MEMORY[0x1D17BA0A0]();
  v21 = self;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 138544386;
    v27 = v23;
    v28 = 2112;
    v29 = v14;
    v30 = 2112;
    v31 = v15;
    v32 = 2112;
    v33 = v16;
    v34 = 2112;
    v35 = v17;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Creating accessory settings messenger with message target UUID: %@ message dispatcher: %@ message router: %@ message handler: %@", (uint8_t *)&v26, 0x34u);

  }
  objc_autoreleasePoolPop(v20);
  v24 = -[HMDAccessorySettingsMessenger initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:logEventSubmitter:legacyMessageReceiver:]([HMDAccessorySettingsMessenger alloc], "initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:logEventSubmitter:legacyMessageReceiver:", v14, v15, v16, v17, v18, v19);

  return v24;
}

- (id)hubAccessories
{
  void *v2;
  void *v3;

  -[HMDHome appleMediaAccessories](self, "appleMediaAccessories");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_filter:", &__block_literal_global_101277);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t __51__HMDHome_SiriEndpointHubProviding__hubAccessories__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsHomeHub");
}

- (id)createAppleMediaAccessoriesStateMessengerWithIdentifier:(id)a3 messageDispatcher:(id)a4
{
  id v5;
  id v6;
  HMDAppleMediaAccessoriesStateMessenger *v7;

  v5 = a4;
  v6 = a3;
  v7 = -[HMDAppleMediaAccessoriesStateMessenger initWithIdentifier:messageDispatcher:]([HMDAppleMediaAccessoriesStateMessenger alloc], "initWithIdentifier:messageDispatcher:", v6, v5);

  return v7;
}

- (BOOL)synchronouslyFetchIsCarPlayConnectedStatus
{
  void *v2;
  char v3;

  -[HMDHome carPlayDataSource](self, "carPlayDataSource");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "synchronouslyFetchIsCarPlayConnectedStatus");

  return v3;
}

- (BOOL)synchronouslyFetchIsConnectedToCarPlayNetwork
{
  void *v2;
  char v3;

  -[HMDHome carPlayDataSource](self, "carPlayDataSource");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "synchronouslyFetchIsConnectedToCarPlayNetwork");

  return v3;
}

- (BOOL)isCarPlayAccessAllowedForCharacteristic:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5
{
  id v8;
  id v9;
  char v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  if ((-[HMDHome isMessageEntitledForCarPlayAccess:source:]((uint64_t)self, v9, a5) & 1) == 0)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v14;
      v18 = 2112;
      v19 = v8;
      v20 = 2048;
      v21 = a5;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@CarPlay access is not allowed for characteristic: %@ because message from source: %lu does not have sufficient entitlements", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    goto LABEL_9;
  }
  if (!self || -[HMDHome homeLocation](self, "homeLocation") != 1 && -[HMDHome homeLocation](self, "homeLocation") != 3)
  {
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
  v10 = -[HMDHome isCharacteristicAllowedForCarPlayAccess:](v8);
LABEL_10:

  return v10;
}

- (BOOL)isCarPlayAccessAllowedForActionSet:(id)a3 withMessage:(id)a4 fromSource:(unint64_t)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHome *v13;
  NSObject *v14;
  void *v15;
  _BYTE v17[24];
  void *v18;
  HMDHome *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  if ((-[HMDHome isMessageEntitledForCarPlayAccess:source:]((uint64_t)self, v9, a5) & 1) == 0)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v17 = 138543874;
      *(_QWORD *)&v17[4] = v15;
      *(_WORD *)&v17[12] = 2112;
      *(_QWORD *)&v17[14] = v8;
      *(_WORD *)&v17[22] = 2048;
      v18 = (void *)a5;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@CarPlay access is not allowed for action set: %@ because message from source: %lu does not have sufficient entitlements", v17, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    goto LABEL_9;
  }
  if (self)
  {
    if (-[HMDHome homeLocation](self, "homeLocation") == 1 || -[HMDHome homeLocation](self, "homeLocation") == 3)
    {
      objc_msgSend(v8, "actions");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "na_filter:", &__block_literal_global_103815);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      *(_QWORD *)v17 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v17[8] = 3221225472;
      *(_QWORD *)&v17[16] = __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke_2;
      v18 = &unk_1E89B2AC8;
      v19 = self;
      LOBYTE(self) = objc_msgSend(v11, "na_all:", v17);

      goto LABEL_10;
    }
LABEL_9:
    LOBYTE(self) = 0;
  }
LABEL_10:

  return (char)self;
}

- (uint64_t)isMessageEntitledForCarPlayAccess:(uint64_t)a3 source:
{
  id v5;
  void *v6;

  v5 = a2;
  v6 = v5;
  if (!a1)
    goto LABEL_5;
  if (a3 != 1)
  {
    if (objc_msgSend(v5, "isEntitledForSecureAccess"))
    {
      a3 = objc_msgSend(v6, "isEntitledForSPIAccess");
      goto LABEL_6;
    }
LABEL_5:
    a3 = 0;
  }
LABEL_6:

  return a3;
}

uint64_t __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = v3;
  if (v2 && !objc_msgSend(v3, "type"))
  {
    v6 = v4;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
    v8 = v7;

    if (v8)
    {
      objc_msgSend(v8, "characteristic");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = -[HMDHome isCharacteristicAllowedForCarPlayAccess:](v9);

    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (uint64_t)isCharacteristicAllowedForCarPlayAccess:(void *)a1
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "service");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "serviceType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CB9A28]) & 1) != 0)
    v3 = 1;
  else
    v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CB9A80]);

  return v3;
}

uint64_t __55__HMDHome_CarPlay__isActionSetAllowedForCarPlayAccess___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isUnsecuringAction");
}

- (NSString)urlString
{
  void *v2;
  void *v3;

  -[HMDHome uuid](self, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  hm_assistantIdentifier();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v3;
}

- (NSDictionary)assistantObject
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  -[HMDHome name](self, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v15[0] = *MEMORY[0x1E0D88A20];
    -[HMDHome name](self, "name", CFSTR("objectType"), CFSTR("objectName"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v15[1] = v4;
    v14[2] = CFSTR("objectIdentifier");
    -[HMDHome urlString](self, "urlString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v15[2] = v5;
    v14[3] = CFSTR("objectHomeIdentifier");
    -[HMDHome urlString](self, "urlString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v14[4] = CFSTR("objectReference");
    v15[3] = v6;
    v15[4] = self;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    return (NSDictionary *)v7;
  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](self, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "UUIDString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v11;
      v18 = 2112;
      v19 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping because home.name is nil for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    return (NSDictionary *)0;
  }
}

- (id)multiUserSettings
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  v33 = 0;
  -[HMDHome users](self, "users");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
  v19 = v3;
  if (v5)
  {
    v22 = 0;
    v23 = 0;
    v20 = 0;
    v21 = 0;
    v24 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)v27;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v27 != v8)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v9);
        if ((objc_msgSend(v10, "isOwner") & 1) == 0)
        {
          objc_msgSend(v10, "sharedSettingValuesByKeyPath");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = (void *)objc_msgSend(v11, "mutableCopy");

          if (objc_msgSend(v12, "count"))
          {
            v25[0] = MEMORY[0x1E0C809B0];
            v25[1] = 3221225472;
            v25[2] = __54__HMDHome_MultiUserSettingsMetrics__multiUserSettings__block_invoke;
            v25[3] = &unk_1E89B4070;
            v25[4] = &v34;
            v25[5] = &v30;
            objc_msgSend(v12, "enumerateKeysAndObjectsUsingBlock:", v25);
            ++v7;
          }
          else
          {
            objc_msgSend(v10, "cloudShareTrustManager");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v13, "isTrustConfigured");

            v6 += v14 ^ 1u;
            switch(objc_msgSend(v10, "sharedUserSettingsLogEventBackingStoreControllerRunState"))
            {
              case 0:
              case 1:
                ++v24;
                break;
              case 2:
                ++v21;
                break;
              case 3:
                ++v23;
                break;
              case 4:
                ++v22;
                break;
              case 5:
                ++v20;
                break;
              default:
                break;
            }
          }

        }
        ++v9;
      }
      while (v5 != v9);
      v15 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
      v5 = v15;
    }
    while (v15);
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v20 = 0;
    v21 = 0;
    v24 = 0;
    v6 = 0;
    v7 = 0;
  }

  v16 = objc_alloc(MEMORY[0x1E0CBA698]);
  v17 = (void *)objc_msgSend(v16, "initWithNumSharedUsers:numUsersWithSettings:numUsersWithIdentifyVoiceOff:numUsersWithPlayBackInfluencesForYouOff:numUsersCloudShareTrustNotConfigured:numUsersSharedBackingStoreNotStarted:numUsersSharedBackingStoreRunning:numUsersSharedBackingStoreNotRunningDueToError:numUsersSharedBackingStoreNotRunningDueToStopped:numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation:", (v19 - 1) & ~((v19 - 1) >> 63), v7, v35[3], v31[3], v6, v24, v21, v23, v22, v20);

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
  return v17;
}

void __54__HMDHome_MultiUserSettingsMetrics__multiUserSettings__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  int v9;
  id v10;
  void *v11;
  id v12;
  int v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (objc_msgSend(v14, "isEqualToString:", CFSTR("shared.root.siri.identifyVoice")))
  {
    v6 = v5;
    objc_opt_class();
    v7 = (objc_opt_isKindOfClass() & 1) != 0 ? v6 : 0;
    v8 = v7;

    v9 = objc_msgSend(v8, "intValue");
    if (!v9)
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  if (objc_msgSend(v14, "isEqualToString:", CFSTR("shared.root.music.playbackInfluencesForYou")))
  {
    v10 = v5;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v10;
    else
      v11 = 0;
    v12 = v11;

    v13 = objc_msgSend(v12, "intValue");
    if (!v13)
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }

}

- (unint64_t)deriveNetworkRouterSupport:(unint64_t)a3
{
  char v3;
  unint64_t v4;
  unint64_t v5;

  v3 = a3;
  v4 = 4;
  if ((a3 & 8) == 0)
    v4 = 15;
  if ((a3 & 1) != 0)
  {
    v5 = v4 & 8;
    if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
      v4 = v5;
    else
      v4 = 0;
  }
  if ((v3 & 2) != 0)
    v4 = 0;
  if ((v3 & 4) != 0)
    v4 &= 9u;
  if ((v3 & 0x10) != 0)
    return v4 & 0xFFFFFFFFFFFFFFFDLL;
  else
    return v4;
}

- (void)_addTransactionWithProtectionMode:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDHomeModel *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeModel *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  HMDHome *v20;

  v6 = a4;
  v7 = a3;
  v8 = [HMDHomeModel alloc];
  -[HMDHome uuid](self, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome homeManager](self, "homeManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v8, "initWithObjectChangeType:uuid:parentUUID:", 2, v9, v11);

  -[HMDHomeModel setNetworkProtectionMode:](v12, "setNetworkProtectionMode:", v7);
  -[HMDHome backingStore](self, "backingStore");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "name");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "transaction:options:", v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "add:withMessage:", v12, v6);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __76__HMDHome_NetworkRouterInternal___addTransactionWithProtectionMode_message___block_invoke;
  v18[3] = &unk_1E89C21C0;
  v19 = v6;
  v20 = self;
  v17 = v6;
  objc_msgSend(v16, "run:", v18);

}

- (void)_addTransactionForActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a4;
  v6 = a3;
  -[HMDHome backingStore](self, "backingStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "transaction:options:", CFSTR("Update Active Network Router Accessory"), v8);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  -[HMDHome _updateActiveNetworkRouterAccessory:isReplacement:withTransaction:](self, "_updateActiveNetworkRouterAccessory:isReplacement:withTransaction:", v6, v4, v9);
  objc_msgSend(v9, "run");

}

- (void)_updateActiveNetworkRouterAccessory:(id)a3 isReplacement:(BOOL)a4 withTransaction:(id)a5
{
  _BOOL4 v5;
  id v8;
  HMDHomeNetworkRouterSettingsModel *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeNetworkRouterSettingsModel *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeModel *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHomeModel *v21;
  id v22;

  v5 = a4;
  v22 = a5;
  v8 = a3;
  v9 = [HMDHomeNetworkRouterSettingsModel alloc];
  -[HMDHome uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "modelIDForHomeUUID:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 2, v11, v12);

  objc_msgSend(v8, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeNetworkRouterSettingsModel setActiveNetworkRouterAccessoryUUID:](v13, "setActiveNetworkRouterAccessoryUUID:", v15);
  if (v5)
    v16 = 0;
  else
    v16 = v15;
  -[HMDHomeNetworkRouterSettingsModel setActiveNetworkRouterInitialSetupNeededUUID:](v13, "setActiveNetworkRouterInitialSetupNeededUUID:", v16);
  objc_msgSend(v22, "add:", v13);
  if (!v5)
  {
    v17 = [HMDHomeModel alloc];
    -[HMDHome uuid](self, "uuid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome homeManager](self, "homeManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v17, "initWithObjectChangeType:uuid:parentUUID:", 2, v18, v20);

    -[HMDHomeModel setNetworkProtectionMode:](v21, "setNetworkProtectionMode:", &unk_1E8B33E70);
    objc_msgSend(v22, "add:", v21);

  }
}

- (void)_clearAccessoryNetworkProtectionStateWithTransaction:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v10, "networkRouterUUID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {

        }
        else
        {
          objc_msgSend(v10, "networkClientIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v12)
            continue;
        }
        objc_msgSend(v10, "transactionWithObjectChangeType:", 2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setNetworkRouterUUID:", 0);
        objc_msgSend(v13, "setNetworkClientIdentifier:", 0);
        objc_msgSend(v13, "setNetworkClientProfileFingerprint:", 0);
        objc_msgSend(v13, "setAppliedFirewallWANRules:", 0);
        objc_msgSend(v13, "setNetworkClientLAN:", &unk_1E8B33E88);
        objc_msgSend(v13, "setCurrentNetworkProtectionMode:", &unk_1E8B33EA0);
        objc_msgSend(v4, "add:", v13);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

}

- (void)_addTransactionForMinimumNetworkRouterHomeKitVersion:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDHomeNetworkRouterSettingsModel *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeNetworkRouterSettingsModel *v16;

  v6 = a4;
  v7 = a3;
  v8 = [HMDHomeNetworkRouterSettingsModel alloc];
  -[HMDHome uuid](self, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "modelIDForHomeUUID:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v8, "initWithObjectChangeType:uuid:parentUUID:", 2, v10, v11);

  objc_msgSend(v7, "versionString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeNetworkRouterSettingsModel setMinimumNetworkRouterSupportHomeKitVersion:](v16, "setMinimumNetworkRouterSupportHomeKitVersion:", v12);
  -[HMDHome backingStore](self, "backingStore");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "transaction:options:", CFSTR("Update Minimum Network Router Support HomeKit Version"), v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "add:withMessage:", v16, v6);
  objc_msgSend(v15, "run");

}

- (void)_addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDHomeNetworkRouterSettingsModel *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeNetworkRouterSettingsModel *v16;

  v6 = a4;
  v7 = a3;
  v8 = [HMDHomeNetworkRouterSettingsModel alloc];
  -[HMDHome uuid](self, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:](HMDHomeNetworkRouterSettingsModel, "modelIDForHomeUUID:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome uuid](self, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v8, "initWithObjectChangeType:uuid:parentUUID:", 2, v10, v11);

  objc_msgSend(v7, "versionString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeNetworkRouterSettingsModel setMinHomeKitVersionForAccessoryNetworkProtectionChange:](v16, "setMinHomeKitVersionForAccessoryNetworkProtectionChange:", v12);
  -[HMDHome backingStore](self, "backingStore");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "transaction:options:", CFSTR("Update Minimum HomeKit Version For Accessory Network Protection Change"), v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "add:withMessage:", v16, v6);
  objc_msgSend(v15, "run");

}

- (void)_handleUpdateNetworkProtection:(id)a3
{
  id v4;
  void *v5;
  BOOL v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CBAB48]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_9:
    objc_msgSend(v4, "respondWithError:", v7);
    goto LABEL_10;
  }
  v14 = 0;
  v6 = -[HMDHome checkForNetworkRouterSupport:error:](self, "checkForNetworkRouterSupport:error:", 1, &v14);
  v7 = v14;
  if (!v6)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HMDNetworkRouterSupportAsString(-[HMDHome networkRouterSupport](v9, "networkRouterSupport"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = v12;
      v19 = 2112;
      v20 = v7;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot update home network protection mode - networkRouterSupport %@ error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    goto LABEL_9;
  }
  if ((unint64_t)objc_msgSend(v5, "integerValue") > 1)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);

  }
  else
  {
    -[HMDHome _addTransactionWithProtectionMode:message:](self, "_addTransactionWithProtectionMode:message:", v5, v4);
  }
LABEL_10:

}

- (void)_handleSetMinimumNetworkRouterHomeKitVersion:(id)a3
{
  id v4;
  void *v5;
  HMDHomeKitVersion *v6;
  void *v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomedVersionKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", v5);
  if (v6)
  {
    +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "isGreaterThanVersion:", v6))
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeKitVersion versionString](v6, "versionString");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "versionString");
        v15 = v8;
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v17 = v11;
        v18 = 2112;
        v19 = v12;
        v20 = 2112;
        v21 = v13;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Attempting to set the network router support HomeKit version to %@ - lower than version of HomeKit on this device - %@", buf, 0x20u);

        v8 = v15;
      }

      objc_autoreleasePoolPop(v8);
    }
    -[HMDHome _addTransactionForMinimumNetworkRouterHomeKitVersion:message:](self, "_addTransactionForMinimumNetworkRouterHomeKitVersion:message:", v6, v4);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);

  }
}

- (void)_handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange:(id)a3
{
  void *v4;
  HMDHomeKitVersion *v5;
  void *v6;
  id v7;

  v7 = a3;
  objc_msgSend(v7, "stringForKey:", CFSTR("kHomedVersionKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", v4);
    if (v5)
    {
      -[HMDHome _addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:message:](self, "_addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:message:", v5, v7);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "respondWithError:", v6);

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v5 = (HMDHomeKitVersion *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v5);
  }

}

- (void)_handleCreateUniquePSKClientConfiguration:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  HMDNetworkRouterCredential *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  const __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, void *, void *);
  void *v31;
  HMDHome *v32;
  id v33;
  _BYTE buf[24];
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received request to create a unique PSK client configuration", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome activeNetworkRouterAccessory](v6, "activeNetworkRouterAccessory");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v28 = MEMORY[0x1E0C809B0];
  v29 = 3221225472;
  v30 = __76__HMDHome_NetworkRouterInternal___handleCreateUniquePSKClientConfiguration___block_invoke;
  v31 = &unk_1E89B5600;
  v32 = v6;
  v33 = v4;
  v11 = v4;
  v12 = v9;
  v13 = &v28;
  generateWiFiUniquePreSharedKey();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "dataUsingEncoding:", 1, v28, v29);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "networkRouterController");
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)v16;
  if (v15 && v16)
  {
    +[HMDNetworkRouterClientConfiguration configurationForOpenProtectionWithClientIdentifier:](HMDNetworkRouterClientConfiguration, "configurationForOpenProtectionWithClientIdentifier:", 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_alloc_init(HMDNetworkRouterCredential);
    objc_msgSend(v18, "setCredential:", v19);

    objc_msgSend(v18, "credential");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setPsk:", v15);

    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __HMDCreateUniquePSKClientConfiguration_block_invoke;
    v35 = &unk_1E89BDE38;
    v40 = v13;
    v21 = v17;
    v36 = v21;
    v37 = v18;
    v38 = v12;
    v39 = v15;
    v22 = v18;
    objc_msgSend(v21, "writeManagedNetworkEnable:completion:", 1, buf);

  }
  else
  {
    v23 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = (void *)v25;
      v27 = CFSTR("no router controller found");
      if (v17)
        v27 = CFSTR("PSK generation");
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v27;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to create unique PSK client configuration due to %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    v30((uint64_t)v13, 0, v22);
  }

}

- (void)_handleRemoveClientConfiguration:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v14 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received request to remove a client configuration", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "numberForKey:", CFSTR("HMDH.NetworkClientIdentifierMessageKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __67__HMDHome_NetworkRouterInternal___handleRemoveClientConfiguration___block_invoke;
    v11[3] = &unk_1E89C2350;
    v12 = v4;
    -[HMDHome _removeClientConfigurationWithIdentifier:completion:](v6, "_removeClientConfigurationWithIdentifier:completion:", v9, v11);
    v10 = v12;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 27);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v10);
  }

}

- (void)_configureNetworkRouterClientManager:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDNetworkRouterClientManager *v15;
  void *v16;
  void *v17;
  HMDNetworkRouterClientManager *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[5];
  _QWORD v25[5];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHome supportsRouterManagement](self, "supportsRouterManagement"))
  {
    -[HMDHome routerClientManager](self, "routerClientManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      -[HMDHome routerClientManager](self, "routerClientManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "replaceActiveNetworkRouterAccessory:", v4);

    }
    else
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "uuid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "UUIDString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v27 = v10;
        v28 = 2112;
        v29 = v11;
        v30 = 2112;
        v31 = v13;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Creating network router client manager with accessory %@/%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v7);
      +[HMDNetworkRouterFirewallRuleManager sharedInstance](HMDNetworkRouterFirewallRuleManager, "sharedInstance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = [HMDNetworkRouterClientManager alloc];
      -[HMDHome workQueue](v8, "workQueue");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = -[HMDNetworkRouterClientManager initWithNetworkRouterAccessory:workQueue:firewallRuleManager:notificationCenter:](v15, "initWithNetworkRouterAccessory:workQueue:firewallRuleManager:notificationCenter:", v4, v16, v14, v17);
      -[HMDHome setRouterClientManager:](v8, "setRouterClientManager:", v18);

      -[HMDHome routerClientManager](v8, "routerClientManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = MEMORY[0x1E0C809B0];
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke;
      v25[3] = &unk_1E89C2350;
      v25[4] = v8;
      objc_msgSend(v14, "startupForClient:completion:", v19, v25);

      -[HMDHome residentDeviceManager](v8, "residentDeviceManager");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome routerClientManager](v8, "routerClientManager");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addDataSource:", v22);

      -[HMDHome residentDeviceManager](v8, "residentDeviceManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = v20;
      v24[1] = 3221225472;
      v24[2] = __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke_67;
      v24[3] = &unk_1E89C2350;
      v24[4] = v8;
      objc_msgSend(v23, "confirmWithCompletionHandler:", v24);

    }
  }

}

- (void)_unconfigureNetworkRouterClientManager
{
  void *v3;
  void *v4;
  HMDHome *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  -[HMDHome routerClientManager](self, "routerClientManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Shutting down firewall rule manager and network router client manager", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(v3, "stop");
    -[HMDHome setRouterClientManager:](v5, "setRouterClientManager:", 0);
    +[HMDNetworkRouterFirewallRuleManager sharedInstance](HMDNetworkRouterFirewallRuleManager, "sharedInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "shutdownForClient:", v3);

  }
}

- (void)handleAccessoryDidAddNetworkRouterControllerNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __91__HMDHome_NetworkRouterInternal__handleAccessoryDidAddNetworkRouterControllerNotification___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleAccessoryDidRemoveNetworkRouterControllerNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHome *v9;

  v4 = a3;
  -[HMDHome workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __94__HMDHome_NetworkRouterInternal__handleAccessoryDidRemoveNetworkRouterControllerNotification___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_scheduleApplyNetworkRouterSettingsAction:(id)a3
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke;
  v3[3] = &unk_1E89B5628;
  v3[4] = self;
  objc_msgSend(a3, "addPostApplyActionIfNotPresent:usingBlock:", CFSTR("HMDNetworkRouterApplySettingsAction"), v3);
}

- (void)_evaluateNetworkRouterManagementForTransaction:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_msgSend(v5, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("EvaluateRouterManagement"));

  -[HMDHome _scheduleApplyNetworkRouterSettingsAction:](self, "_scheduleApplyNetworkRouterSettingsAction:", v5);
}

- (void)_handleNetworkProtectionModeChangeForTransaction:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  objc_msgSend(v5, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("NetworkProtectionModeChanged"));

  -[HMDHome _scheduleApplyNetworkRouterSettingsAction:](self, "_scheduleApplyNetworkRouterSettingsAction:", v5);
}

- (void)_evaluateNetworkProtectionAndRouterManagement
{
  void *v3;
  void *v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  -[HMDHome _evaluateNetworkProtectionSupport](self, "_evaluateNetworkProtectionSupport");
  -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "networkRouterController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "name");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v9;
      v18 = 2112;
      v19 = v11;
      v20 = 2112;
      v21 = v12;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Found active network router accessory %@/%@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome _configureNetworkRouterClientManager:](v6, "_configureNetworkRouterClientManager:", v3);
  }
  else
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome activeNetworkRouterUUID](v6, "activeNetworkRouterUUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v13;
      v18 = 2112;
      v19 = v14;
      v20 = 2112;
      v21 = v15;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@No active network router accessory with router info %@/%@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHome _unconfigureNetworkRouterClientManager](v6, "_unconfigureNetworkRouterClientManager");
  }

}

- (void)_createUniquePSKClientConfigurationWithRequestMessage:(id)a3 pairingEvent:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _QWORD aBlock[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __112__HMDHome_NetworkRouterInternal___createUniquePSKClientConfigurationWithRequestMessage_pairingEvent_completion___block_invoke;
  aBlock[3] = &unk_1E89B5650;
  objc_copyWeak(&v19, &location);
  v11 = v9;
  v16 = v11;
  v12 = v8;
  v17 = v12;
  v13 = v10;
  v18 = v13;
  v14 = _Block_copy(aBlock);
  -[HMDHome _requestUniquePSKClientConfigurationWithCompletion:](self, "_requestUniquePSKClientConfigurationWithCompletion:", v14);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

}

- (void)_requestUniquePSKClientConfigurationWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDRemoteDeviceMessageDestination *v8;
  void *v9;
  HMDRemoteDeviceMessageDestination *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHome *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, void *, void *);
  void *v20;
  id v21;
  id v22;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "primaryResidentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "device");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v8, "initWithTarget:device:", v9, v7);

    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D285F8]), "initWithName:destination:payload:", CFSTR("HMDHomeCreateUniquePSKClientConfigurationRequestKey"), v10, 0);
    objc_msgSend(v11, "setSecureRemote:", 1);
    objc_initWeak(location, self);
    v17 = MEMORY[0x1E0C809B0];
    v18 = 3221225472;
    v19 = __85__HMDHome_NetworkRouterInternal___requestUniquePSKClientConfigurationWithCompletion___block_invoke;
    v20 = &unk_1E89C1B70;
    objc_copyWeak(&v22, location);
    v21 = v4;
    objc_msgSend(v11, "setResponseHandler:", &v17);
    -[HMDHome msgDispatcher](self, "msgDispatcher", v17, v18, v19, v20);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "sendMessage:completionHandler:", v11, 0);

    objc_destroyWeak(&v22);
    objc_destroyWeak(location);

  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request unique PSK from", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 91);
    v10 = (HMDRemoteDeviceMessageDestination *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, HMDRemoteDeviceMessageDestination *))v4 + 2))(v4, 0, v10);
  }

}

- (void)_removeClientConfigurationWithIdentifier:(id)a3
{
  id v4;

  v4 = a3;
  if (-[HMDHome isOwnerUser](self, "isOwnerUser"))
    -[HMDHome _removeClientConfigurationWithIdentifier:completion:](self, "_removeClientConfigurationWithIdentifier:completion:", v4, 0);
  else
    -[HMDHome _requestRemoveClientConfigurationWithIdentifier:](self, "_requestRemoveClientConfigurationWithIdentifier:", v4);

}

- (void)_removeClientConfigurationWithIdentifier:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "networkRouterController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __86__HMDHome_NetworkRouterInternal___removeClientConfigurationWithIdentifier_completion___block_invoke;
    v18[3] = &unk_1E89C1558;
    v18[4] = self;
    v19 = v6;
    v20 = v7;
    objc_msgSend(v9, "removeClientConfigurationWithClientIdentifier:completion:", v19, v18);

  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome activeNetworkRouterAccessory](v11, "activeNetworkRouterAccessory");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "UUIDString");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v22 = v13;
      v23 = 2112;
      v24 = v6;
      v25 = 2112;
      v26 = v16;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove client configuration %@ due to no router controller found on the active network router %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v7 + 2))(v7, v17);

    }
  }

}

- (void)_requestRemoveClientConfigurationWithIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDRemoteDeviceMessageDestination *v8;
  void *v9;
  HMDRemoteDeviceMessageDestination *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *, void *);
  void *v22;
  id v23;
  id v24;
  const __CFString *v25;
  id v26;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "primaryResidentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "device");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHome uuid](self, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v8, "initWithTarget:device:", v9, v7);

    v11 = objc_alloc(MEMORY[0x1E0D285F8]);
    v25 = CFSTR("HMDH.NetworkClientIdentifierMessageKey");
    v26 = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v11, "initWithName:destination:payload:", CFSTR("HMDHomeRemoveClientConfigurationRequestKey"), v10, v12);

    objc_msgSend(v13, "setSecureRemote:", 1);
    objc_initWeak(location, self);
    v19 = MEMORY[0x1E0C809B0];
    v20 = 3221225472;
    v21 = __82__HMDHome_NetworkRouterInternal___requestRemoveClientConfigurationWithIdentifier___block_invoke;
    v22 = &unk_1E89BF4F0;
    objc_copyWeak(&v24, location);
    v23 = v4;
    objc_msgSend(v13, "setResponseHandler:", &v19);
    -[HMDHome msgDispatcher](self, "msgDispatcher", v19, v20, v21, v22);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "sendMessage:completionHandler:", v13, 0);

    objc_destroyWeak(&v24);
    objc_destroyWeak(location);

  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@No primary resident device to request to remove client configuration", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (void)_evaluateNetworkProtectionSupport
{
  HMDHome *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMDHome *v18;
  void *v19;
  int v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  HMDHome *v24;
  void *v25;
  void *v26;
  _BOOL4 v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  _BOOL4 v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  int v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  void *v79;
  __int16 v80;
  void *v81;
  _BYTE v82[128];
  uint64_t v83;

  v2 = self;
  v83 = *MEMORY[0x1E0C80C00];
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  -[HMDHome residentDeviceManager](self, "residentDeviceManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "residentDevices");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v63, v82, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v64;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v64 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
        objc_msgSend(v9, "device");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v9, "isEnabled"))
        {
          objc_msgSend(v9, "capabilities");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "supportsRouterManagement");

          if (v12)
          {
            -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v2, "minimumNetworkRouterSupportHomeKitVersion");
            v13 = objc_claimAutoreleasedReturnValue();
            if (!v13)
              goto LABEL_13;
            v14 = (void *)v13;
            objc_msgSend(v10, "version");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v2, "minimumNetworkRouterSupportHomeKitVersion");
            v16 = v7;
            v17 = v4;
            v18 = v2;
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v61 = objc_msgSend(v15, "isAtLeastVersion:", v19);

            v2 = v18;
            v4 = v17;
            v7 = v16;

            if (v61)
            {
LABEL_13:
              v21 = (void *)MEMORY[0x1D17BA0A0]();
              v22 = v2;
              HMFGetOSLogHandle();
              v23 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v24 = v2;
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v73 = v25;
                v74 = 2112;
                v75 = v9;
                _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Found resident with router management support: %@", buf, 0x16u);

                v2 = v24;
              }

              objc_autoreleasePoolPop(v21);
              v20 = 1;
              goto LABEL_16;
            }
          }
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v63, v82, 16);
      if (v6)
        continue;
      break;
    }
  }
  v20 = 0;
LABEL_16:

  -[HMDHome activeNetworkRouterAccessory](v2, "activeNetworkRouterAccessory");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = -[HMDHome _isNetworkRouterSupportEnabledForCurrentDevice](v2, "_isNetworkRouterSupportEnabledForCurrentDevice");
  v28 = (void *)MEMORY[0x1D17BA0A0]();
  v29 = v2;
  HMFGetOSLogHandle();
  v30 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
  {
    v31 = v27;
    HMFGetLogIdentifier();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome name](v29, "name");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v62 = v28;
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v73 = v32;
    v74 = 2112;
    v75 = v33;
    v76 = 2112;
    v77 = v34;
    v78 = 2112;
    v79 = v35;
    v80 = 2112;
    v81 = v36;
    _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Evaluating network protection support for home %@, Router Managing Device: %@, Active Network Router Accessory: %@, Router support enabled: %@", buf, 0x34u);

    v28 = v62;
    v27 = v31;

  }
  objc_autoreleasePoolPop(v28);
  -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](v29, "minHomeKitVersionForAccessoryNetworkProtectionChange");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange](v29, "minHomeKitVersionForAccessoryNetworkProtectionChange");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend(v38, "isGreaterThanVersion:", v39);

  }
  else
  {
    v40 = 0;
  }

  v41 = -[HMDHome isAdminUser](v29, "isAdminUser");
  v42 = 4;
  if (v41)
    v42 = 0;
  if (!v26)
    v42 |= 8uLL;
  v43 = v42 | v20 ^ 1u;
  if (!v27)
    v43 |= 2uLL;
  if (v40)
    v44 = v43 | 0x10;
  else
    v44 = v43;
  if (-[HMDHome networkRouterSupportDisableReason](v29, "networkRouterSupportDisableReason") != v44)
  {
    -[HMDHome setNetworkRouterSupportDisableReason:](v29, "setNetworkRouterSupportDisableReason:", v44);
    -[HMDHome setNetworkRouterSupport:](v29, "setNetworkRouterSupport:", -[HMDHome deriveNetworkRouterSupport:](v29, "deriveNetworkRouterSupport:", v44));
    v45 = (-[HMDHome networkRouterSupport](v29, "networkRouterSupport") >> 2) & 1;
    v46 = (void *)MEMORY[0x1E0D285F8];
    v47 = *MEMORY[0x1E0CB9198];
    -[HMDHome messageDestination](v29, "messageDestination");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = *MEMORY[0x1E0CB9190];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v44);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v71[0] = v49;
    v70 = *MEMORY[0x1E0CB8CE0];
    v50 = v70;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v45);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v71[1] = v51;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v71, &v69, 2);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "messageWithName:destination:payload:", v47, v48, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v53, "setRequiresSPIEntitlement");
    -[HMDHome msgDispatcher](v29, "msgDispatcher");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v54, "sendMessage:completionHandler:", v53, 0);

    v55 = (void *)MEMORY[0x1E0D285F8];
    -[HMDHome messageDestination](v29, "messageDestination");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = v50;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v45);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = v57;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "messageWithName:destination:payload:", v47, v56, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v59, "setRequiresNoSPIEntitlement");
    -[HMDHome msgDispatcher](v29, "msgDispatcher");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "sendMessage:completionHandler:", v59, 0);

  }
}

void __82__HMDHome_NetworkRouterInternal___requestRemoveClientConfigurationWithIdentifier___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(_QWORD *)(a1 + 32);
        v19 = 138543874;
        v20 = v12;
        v21 = 2112;
        v22 = v13;
        v23 = 2112;
        v24 = v5;
        v14 = "%{public}@Request to remove client configuration %@ failed with error: %@";
        v15 = v11;
        v16 = OS_LOG_TYPE_ERROR;
        v17 = 32;
LABEL_7:
        _os_log_impl(&dword_1CD062000, v15, v16, v14, (uint8_t *)&v19, v17);

      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 138543618;
      v20 = v12;
      v21 = 2112;
      v22 = v18;
      v14 = "%{public}@Request remove client configuration %@ successful";
      v15 = v11;
      v16 = OS_LOG_TYPE_INFO;
      v17 = 22;
      goto LABEL_7;
    }

    objc_autoreleasePoolPop(v8);
  }

}

void __86__HMDHome_NetworkRouterInternal___removeClientConfigurationWithIdentifier_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v15 = 138543874;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove client configuration %@ due to error %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
    {
      v11 = *(void (**)(void))(v10 + 16);
LABEL_10:
      v11();
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 40);
      v15 = 138543618;
      v16 = v12;
      v17 = 2112;
      v18 = v13;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Removed client configuration %@ successfully", (uint8_t *)&v15, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v14 = *(_QWORD *)(a1 + 48);
    if (v14)
    {
      v11 = *(void (**)(void))(v14 + 16);
      goto LABEL_10;
    }
  }

}

void __85__HMDHome_NetworkRouterInternal___requestUniquePSKClientConfigurationWithCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDAccessoryNetworkCredential *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = WeakRetained;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v36 = v11;
        v37 = 2112;
        v38 = v5;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Request for unique PSK failed with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      objc_msgSend(v6, "hmf_dataForKey:", CFSTR("HMDH.UniquePSKMessageKey"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "hmf_numberForKey:", CFSTR("HMDH.NetworkClientIdentifierMessageKey"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_alloc(MEMORY[0x1E0CB3A28]);
      objc_msgSend(v6, "hmf_stringForKey:", CFSTR("HMDH.NetworkRouterUUIDMessageKey"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)objc_msgSend(v14, "initWithUUIDString:", v15);

      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = WeakRetained;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v31 = v17;
        v20 = v13;
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v32 = v12;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "UUIDString");
        v33 = v16;
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v36 = v21;
        v37 = 2112;
        v38 = v22;
        v39 = 2112;
        v40 = v20;
        v41 = 2112;
        v42 = v23;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Request for unique PSK results successful. PSK: %@, Client Identifier: %@, Network Router UUID: %@", buf, 0x2Au);

        v16 = v33;
        v12 = v32;

        v13 = v20;
        v17 = v31;
      }

      objc_autoreleasePoolPop(v17);
      if (v12 && v13 && v16)
      {
        v24 = -[HMDAccessoryNetworkCredential initWithNetworkRouterUUID:clientIdentifier:wiFiPSK:]([HMDAccessoryNetworkCredential alloc], "initWithNetworkRouterUUID:clientIdentifier:wiFiPSK:", v16, v13, v12);
        (*(void (**)(_QWORD, HMDAccessoryNetworkCredential *, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v24, 0);
      }
      else
      {
        v25 = (void *)MEMORY[0x1D17BA0A0]();
        v26 = v18;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v34 = v16;
          v28 = v13;
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v36 = v29;
          _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Missing info in response", buf, 0xCu);

          v13 = v28;
          v16 = v34;
        }

        objc_autoreleasePoolPop(v25);
        v30 = *(_QWORD *)(a1 + 32);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
        v24 = (HMDAccessoryNetworkCredential *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, _QWORD, HMDAccessoryNetworkCredential *))(v30 + 16))(v30, 0, v24);
      }

    }
  }

}

void __112__HMDHome_NetworkRouterInternal___createUniquePSKClientConfigurationWithRequestMessage_pairingEvent_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:underlyingError:", 98, 0, 0, 0, v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v11, v8);

    }
    else
    {
      (*(void (**)(uint64_t, id, _QWORD))(v7 + 16))(v7, v11, 0);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (*(_QWORD *)(a1 + 32))
    {
      +[HMDMetricsManager sharedLogEventSubmitter](HMDMetricsManager, "sharedLogEventSubmitter");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "submitLogEvent:error:", *(_QWORD *)(a1 + 32), v9);

    }
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v9);

  }
}

void __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke_2;
  v7[3] = &unk_1E89C2328;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

void __76__HMDHome_NetworkRouterInternal___scheduleApplyNetworkRouterSettingsAction___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("EvaluateRouterManagement"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    objc_msgSend(*(id *)(a1 + 40), "_evaluateNetworkProtectionAndRouterManagement");
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("NetworkProtectionModeChanged"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "postNotificationName:object:", CFSTR("HMDHomeNetworkProtectionUpdatedNotificationKey"), *(_QWORD *)(a1 + 40));

  }
}

void __94__HMDHome_NetworkRouterInternal__handleAccessoryDidRemoveNetworkRouterControllerNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  char v7;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDNetworkRouterAccessoryNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (!v5)
    _HMFPreconditionFailure();
  objc_msgSend(*(id *)(a1 + 40), "activeNetworkRouterAccessory");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEqual:", v5);
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if ((v7 & 1) != 0)
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed network router profile for active network router accessory", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(a1 + 40), "_addTransactionForActiveNetworkRouterAccessory:isReplacement:", 0, 0);
  }
  else
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Removed network router profile for non-active network router accessory", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
  }

}

void __91__HMDHome_NetworkRouterInternal__handleAccessoryDidAddNetworkRouterControllerNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  id v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDNetworkRouterAccessoryNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (!v5)
    _HMFPreconditionFailure();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "activeNetworkRouterUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "isEqual:", v7);

  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_INFO);
  if ((v8 & 1) != 0)
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v13;
      v20 = 2112;
      v21 = v14;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Added network router controller is for active network router accessory %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 40), "_evaluateNetworkProtectionAndRouterManagement");
  }
  else
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "activeNetworkRouterUUID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543874;
      v19 = v15;
      v20 = 2112;
      v21 = v16;
      v22 = 2112;
      v23 = v17;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Ignoring added network router controller for accessory %@ since it is not for the active network router accessory %@", (uint8_t *)&v18, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

void __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v7;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Firewall rule manager failed to start with error %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "routerClientManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "evaluateManagement");

  }
}

void __71__HMDHome_NetworkRouterInternal___configureNetworkRouterClientManager___block_invoke_67(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Confirming primary resident with active network router in the home completed with %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

uint64_t __67__HMDHome_NetworkRouterInternal___handleRemoveClientConfiguration___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (a2)
    return objc_msgSend(v2, "respondWithError:", a2);
  else
    return objc_msgSend(v2, "respondWithPayload:", 0);
}

void __76__HMDHome_NetworkRouterInternal___handleCreateUniquePSKClientConfiguration___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[3];
  _QWORD v23[3];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v11;
      v26 = 2112;
      v27 = v6;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to create a unique PSK client configuration with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v6);
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "clientIdentifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "networkRouterUUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v12;
      v26 = 2112;
      v27 = v13;
      v28 = 2112;
      v29 = v15;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Created unique PSK client configuration with client identifier %@ on network router %@ for remote request", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    v16 = *(void **)(a1 + 40);
    objc_msgSend(v5, "clientIdentifier", CFSTR("HMDH.NetworkClientIdentifierMessageKey"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = v17;
    v22[1] = CFSTR("HMDH.UniquePSKMessageKey");
    objc_msgSend(v5, "wiFiPSK");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v23[1] = v18;
    v22[2] = CFSTR("HMDH.NetworkRouterUUIDMessageKey");
    objc_msgSend(v5, "networkRouterUUID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "UUIDString");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23[2] = v20;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "respondWithPayload:", v21);

  }
}

void __76__HMDHome_NetworkRouterInternal___addTransactionWithProtectionMode_message___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v5 = *MEMORY[0x1E0CBAB48];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "protectionMode"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v4);

  }
}

- (id)_currentDeviceCapabilities
{
  return +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
}

- (BOOL)_isNetworkRouterSupportEnabledForCurrentDevice
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  BOOL v25;
  void *v26;
  void *v27;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome minimumNetworkRouterSupportHomeKitVersion](self, "minimumNetworkRouterSupportHomeKitVersion");
  v4 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = (void *)v4;
    -[HMDHome minimumNetworkRouterSupportHomeKitVersion](self, "minimumNetworkRouterSupportHomeKitVersion");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isGreaterThanVersion:", v3);

    if (v7)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome minimumNetworkRouterSupportHomeKitVersion](v9, "minimumNetworkRouterSupportHomeKitVersion");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "versionString");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "versionString");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138543874;
        v30 = v11;
        v31 = 2112;
        v32 = v13;
        v33 = 2112;
        v34 = v14;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Network router support requires minimum HomeKit version of %@ - current %@; disabling",
          (uint8_t *)&v29,
          0x20u);

LABEL_9:
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "primaryProfileVersion");
  v16 = objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    v17 = (void *)v16;
    -[HMDHome activeNetworkRouterAccessory](self, "activeNetworkRouterAccessory");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "primaryProfileVersion");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "majorVersion");

    if (v20 >= 2)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = (void *)MEMORY[0x1E0CB37E8];
        -[HMDHome activeNetworkRouterAccessory](v9, "activeNetworkRouterAccessory");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "primaryProfileVersion");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "numberWithUnsignedInteger:", objc_msgSend(v23, "majorVersion"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138543874;
        v30 = v11;
        v31 = 2112;
        v32 = v24;
        v33 = 2112;
        v34 = &unk_1E8B33E58;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Network router major version %@ not supported on this device - only supports up to major version %@; disabling",
          (uint8_t *)&v29,
          0x20u);

        goto LABEL_9;
      }
LABEL_10:

      objc_autoreleasePoolPop(v8);
      v25 = 0;
      goto LABEL_17;
    }
  }
  else
  {

  }
  objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "preferenceForKey:", CFSTR("enableNetworkRouterSupport"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = !v27 || objc_msgSend(v27, "BOOLValue");
LABEL_17:

  return v25;
}

- (BOOL)supportsRouterManagement
{
  void *v3;
  char v4;

  if (!-[HMDHome _isNetworkRouterSupportEnabledForCurrentDevice](self, "_isNetworkRouterSupportEnabledForCurrentDevice")|| !-[HMDHome isOwnerUser](self, "isOwnerUser"))
  {
    return 0;
  }
  -[HMDHome _currentDeviceCapabilities](self, "_currentDeviceCapabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsRouterManagement");

  return v4;
}

- (NSArray)wiFiRouterAccessories
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHome accessories](self, "accessories", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        objc_msgSend(v11, "networkRouterController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
          objc_msgSend(v3, "addObject:", v11);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_msgSend(v3, "copy");
  return (NSArray *)v13;
}

- (HMDHAPAccessory)activeNetworkRouterAccessory
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  HMDHAPAccessory *v7;

  -[HMDHome activeNetworkRouterUUID](self, "activeNetworkRouterUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome accessoryWithUUID:](self, "accessoryWithUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  return v7;
}

- (BOOL)checkForNetworkRouterSupport:(unint64_t)a3 error:(id *)a4
{
  char v5;
  char v6;
  BOOL result;
  uint64_t v8;
  id v9;

  v5 = a3;
  v6 = -[HMDHome networkRouterSupportDisableReason](self, "networkRouterSupportDisableReason");
  if ((v5 & 4) != 0)
  {
    if ((v6 & 4) != 0)
      goto LABEL_16;
    if ((v6 & 2) != 0)
      goto LABEL_22;
    if ((v6 & 1) != 0)
      goto LABEL_14;
  }
  if ((v5 & 3) == 0)
    goto LABEL_7;
  if ((v6 & 4) == 0)
  {
    if ((v6 & 8) != 0 || (v6 & 2) != 0)
      goto LABEL_22;
    if ((v6 & 1) != 0)
      goto LABEL_14;
LABEL_7:
    if ((v5 & 2) == 0 || (v6 & 0x10) == 0)
    {
      if ((v5 & 8) == 0)
        return 1;
      if ((v6 & 8) == 0 && (v6 & 2) == 0)
      {
        if ((v6 & 1) == 0)
          return 1;
LABEL_14:
        if (a4)
        {
          v8 = 92;
LABEL_24:
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", v8);
          v9 = (id)objc_claimAutoreleasedReturnValue();
          result = 0;
          *a4 = v9;
          return result;
        }
        return 0;
      }
    }
LABEL_22:
    if (a4)
    {
      v8 = 48;
      goto LABEL_24;
    }
    return 0;
  }
LABEL_16:
  if (a4)
  {
    v8 = 17;
    goto LABEL_24;
  }
  return 0;
}

- (id)createAppleMediaAccessoriesStateManagerMetricsDispatcherWithIdentifier:(id)a3 logEventSubmitter:(id)a4
{
  id v5;
  id v6;
  HMDAppleMediaAccessoriesStateManagerMetricsDispatcher *v7;

  v5 = a4;
  v6 = a3;
  v7 = -[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher initWithIdentifier:logEventSubmitter:]([HMDAppleMediaAccessoriesStateManagerMetricsDispatcher alloc], "initWithIdentifier:logEventSubmitter:", v6, v5);

  return v7;
}

- (void)configureMultiuserSettingsMessengerWithMessengerFactory:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome home](v6, "home");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring Multiuser settings messenger %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHome home](v6, "home");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome msgDispatcher](v6, "msgDispatcher");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "createMultiuserSettingsMessenger:messageDispatcher:", v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "registerForMessages");
  -[HMDHome setMultiuserSettingsMessenger:](v6, "setMultiuserSettingsMessenger:", v12);

}

- (id)createMultiuserSettingsMessenger:(id)a3 messageDispatcher:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDMultiuserSettingsMessenger *v13;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v11;
    v17 = 2112;
    v18 = v12;
    v19 = 2112;
    v20 = v7;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Creating Multiuser settings messenger with current home UUID: %@ message dispatcher: %@", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  v13 = -[HMDMultiuserSettingsMessenger initWithHome:messageDispatcher:]([HMDMultiuserSettingsMessenger alloc], "initWithHome:messageDispatcher:", v6, v7);

  return v13;
}

- (BOOL)_isAccessToHomeAllowed
{
  return !-[HMDHome isThisHomeMigratedToHH2](self, "isThisHomeMigratedToHH2");
}

- (unint64_t)accessNotAllowedReasonCode
{
  unint64_t v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  HMDHome *v8;
  NSObject *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (-[HMDHome isAccessToHomeAllowed](self, "isAccessToHomeAllowed"))
  {
    v3 = 1;
  }
  else
  {
    -[HMDHome currentHomeKitVersion](self, "currentHomeKitVersion");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    HMDMinimumHomeKitVersionSupportingHH2();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "isAtLeastVersion:", v5);

    if (v6)
      v3 = 4;
    else
      v3 = 2;
  }
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v10;
    v14 = 2048;
    v15 = v3;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Home access is not allowed with reason code : %lu", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  return v3;
}

- (BOOL)isThisHomeMigratedToHH2
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  HMDHome *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  HMDHome *v22;
  NSObject *v23;
  void *v24;
  char v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  -[HMDHome homeManager](self, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3
    || (objc_msgSend(v3, "hh2FrameworkSwitch"), v5 = (void *)objc_claimAutoreleasedReturnValue(), v5, !v5))
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v24;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Unable to find a valid instance of homeManager or this OS is not capable of running ROAR. Marking this home as not migrated to ROAR", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    goto LABEL_11;
  }
  -[HMDHome owner](self, "owner");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isCurrentUser");

  objc_msgSend(v4, "hh2FrameworkSwitch");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "checkExistenceOfHH2SentinelZone");

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome isUpdatedToHH2](v11, "isUpdatedToHH2");
    HMFBooleanToString();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v26 = v9;
    v17 = v7;
    v18 = v10;
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v28 = v13;
    v29 = 2112;
    v30 = v14;
    v31 = 2112;
    v32 = v15;
    v33 = 2112;
    v34 = v16;
    v35 = 2112;
    v36 = v19;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@[HH2 Sentinel zone exist : %@], [isOwner: %@], [Is Shared Home Updated to HH2: %@], [Running in HH2 daemon: %@]", buf, 0x34u);

    v10 = v18;
    v7 = v17;
    v9 = v26;

  }
  objc_autoreleasePoolPop(v10);
  if ((v9 & 1) == 0)
  {
    if ((v7 & 1) == 0)
      goto LABEL_13;
LABEL_11:
    v20 = 0;
    goto LABEL_14;
  }
  if ((v7 & 1) == 0)
  {
LABEL_13:
    v20 = -[HMDHome isUpdatedToHH2](v11, "isUpdatedToHH2");
    goto LABEL_14;
  }
  v20 = 1;
LABEL_14:

  return v20;
}

- (id)_processTestModeSkipHH2MigrationOverride:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0](-[HMDHome setOverrideSentinelZoneForConvergencePeriod:](self, "setOverrideSentinelZoneForConvergencePeriod:", objc_msgSend(v4, "hmf_BOOLForKey:", CFSTR("kConfigTestingSkipMigrationCheckOverrideKey"))));
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome overrideSentinelZoneForConvergencePeriod](v6, "overrideSentinelZoneForConvergencePeriod");
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Override for HH2 Migration Skip is set to : %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v5);

  return 0;
}

- (void)storeMigrationCharacteristicsAuthorizationData
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  HMDHome *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  HMDHome *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHome *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHome *v35;
  NSObject *v36;
  void *v37;
  _QWORD v38[4];
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  -[HMDHome currentUser](self, "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isOwner");

  if (v5)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome name](v7, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v9;
      v42 = 2112;
      v43 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Skipping characteristic authorization archiving for home: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHome hapAccessories](self, "hapAccessories");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke;
    v38[3] = &unk_1E89B91A0;
    v13 = v11;
    v39 = v13;
    objc_msgSend(v12, "na_each:", v38);

    v14 = objc_msgSend(v13, "count");
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v14)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome name](v16, "name");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v41 = v19;
        v42 = 2112;
        v43 = v20;
        v44 = 2112;
        v45 = v13;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Archiving characteristic authorization data for migration for home: %@, [%@]", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
      v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
      objc_msgSend(v21, "encodeObject:forKey:", v13, *MEMORY[0x1E0CB2CD0]);
      objc_msgSend(v21, "finishEncoding");
      objc_msgSend(v21, "encodedData");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        -[HMDHome uuid](v16, "uuid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (void *)MEMORY[0x1E0CB3940];
        v25 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
        objc_msgSend(v24, "stringWithFormat:", CFSTR("%@/HMDHome-Authorization-Data-%@.plist"), v25, v23);
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        +[HMDPersistentStore writeData:toStorePath:dataLabel:](HMDPersistentStore, "writeData:toStorePath:dataLabel:", v22, v26, CFSTR("CharacteristicAuthorizationData"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = (void *)MEMORY[0x1D17BA0A0]();
        v29 = v16;
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v41 = v31;
          v42 = 2112;
          v43 = v27;
          v44 = 2112;
          v45 = v26;
          _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_DEBUG, "%{public}@Stored characteristic authorization data ([%@] bytes) to [%@]", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v28);

      }
      else
      {
        v34 = (void *)MEMORY[0x1D17BA0A0]();
        v35 = v16;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v41 = v37;
          _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_ERROR, "%{public}@Unable to store characteristic authorization data during migration, archived data is nil", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v34);
      }

    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome name](v16, "name");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v32;
        v42 = 2112;
        v43 = v33;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEBUG, "%{public}@No characteristic authorization data to migrate for home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v15);
    }

  }
  objc_autoreleasePoolPop(v3);
}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  objc_msgSend(v3, "services");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_2;
  v6[3] = &unk_1E89B9178;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "na_each:", v6);

}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;

  objc_msgSend(a2, "characteristics");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_3;
  v4[3] = &unk_1E89B9150;
  v5 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  objc_msgSend(v3, "na_each:", v4);

}

void __90__HMDHome_CharacteristicAuthorizationData__storeMigrationCharacteristicsAuthorizationData__block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  objc_msgSend(v15, "getCharacteristicDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("kCharacteristicAuthorizationDataCodingKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v10);

    }
    v11 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "instanceID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v4, v14);

  }
}

- (void)configureSiriEndpointProfilesMessengerWithMessengerFactory:(id)a3 messageHandlerFactory:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHome *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543362;
    v23 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Configuring siri endpoint profiles messenger", (uint8_t *)&v22, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHome msgDispatcher](v9, "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHome primaryResidentMessageRouter](v9, "primaryResidentMessageRouter");
  v13 = objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    _HMFPreconditionFailure();
LABEL_7:
    _HMFPreconditionFailure();
  }
  v14 = (void *)v13;
  if (!v13)
    goto LABEL_7;
  v15 = (void *)MEMORY[0x1E0CBA880];
  -[HMDHome uuid](v9, "uuid");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "messageTargetUUIDWithHomeUUID:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome uuid](v9, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "createSiriEndpointProfileMessageHandlerWithHomeUUID:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHome homeManager](v9, "homeManager");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setDataSource:", v20);

  objc_msgSend(v6, "createSiriEndpointProfilesMessengerWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:", v17, v12, v14, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "registerForMessagesWithHome:", v9);
  -[HMDHome setSiriEndpointProfilesMessenger:](v9, "setSiriEndpointProfilesMessenger:", v21);

}

- (id)createSiriEndpointProfilesMessengerWithMessageTargetUUID:(id)a3 messageDispatcher:(id)a4 messageRouter:(id)a5 messageHandler:(id)a6
{
  id v9;
  id v10;
  id v11;
  id v12;
  HMDSiriEndpointProfilesMessenger *v13;

  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  v13 = -[HMDSiriEndpointProfilesMessenger initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:]([HMDSiriEndpointProfilesMessenger alloc], "initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:", v12, v11, v10, v9);

  return v13;
}

- (void)_unitTest_setRetrievalCompletionsTimeout:(double)a3
{
  void *v5;
  _QWORD v6[6];

  -[HMDHome retrievalAccessoryCompletionTuples](self, "retrievalAccessoryCompletionTuples");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke;
  v6[3] = &unk_1E89BE808;
  v6[4] = self;
  *(double *)&v6[5] = a3;
  objc_msgSend(v5, "na_each:", v6);

}

void __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke_2;
  v6[3] = &unk_1E89C0B98;
  v7 = v3;
  v8 = *(_QWORD *)(a1 + 40);
  v5 = v3;
  dispatch_async(v4, v6);

}

uint64_t __72__HMDHome_AccessoryRetrieval___unitTest_setRetrievalCompletionsTimeout___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "stop");
  objc_msgSend(*(id *)(a1 + 32), "setRetrievalTimeout:", *(double *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "start");
}

uint64_t __105__HMDHome_AccessoryRetrieval___retrieveHAPAccessoryForHMDHAPAccessory_linkType_forceRetrieve_completion___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_dequeueRetrievalForAccessory:linkType:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

- (unint64_t)accessorySettingsLocalMessageHandler:(id)a3 callerPrivilegeWithMessage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  HMDHome *v12;
  NSObject *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "userForHome:", self);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    v10 = objc_msgSend(v8, "privilege");
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v7;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to get accessory settings local message handler caller privilege from message: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v10 = 2;
  }

  return v10;
}

- (void)configureUnifiedLanguageValueListSettingDataProviderWithFactory:(id)a3
{
  id v4;
  void *v5;
  HMDHome *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring unified language value list setting data provider", (uint8_t *)&v10, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "createUnifiedLanguageValueListSettingDataProvider");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setDataSource:", v6);
  -[HMDHome setUnifiedLanguageValueListSettingDataProvider:](v6, "setUnifiedLanguageValueListSettingDataProvider:", v9);

}

- (id)createUnifiedLanguageValueListSettingDataProvider
{
  return objc_alloc_init(HMDUnifiedLanguageValueListSettingDataProvider);
}

- (void)executeActionsFromMessage:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  id v10;
  char isKindOfClass;
  void *v12;
  id v13;
  void *v14;
  char v15;
  BOOL v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  HMDHome *v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  HMDHome *v41;
  NSObject *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHome *v50;
  NSObject *v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  void *v61;
  __CFString *v62;
  __CFString *v63;
  void *v64;
  HMDHome *v65;
  NSObject *v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  HMDHome *v71;
  NSObject *v72;
  void *v73;
  void *v74;
  HMDHome *v75;
  NSObject *v76;
  void *v77;
  void *v78;
  HMDHome *v79;
  NSObject *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  HMDHome *v85;
  NSObject *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  NSObject *v92;
  __int128 v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  NSObject *group;
  void *v102;
  void *v103;
  void *v104;
  id v105;
  id obj;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  HMDHome *val;
  _QWORD block[4];
  id v112;
  id v113;
  _BYTE *v114;
  _QWORD v115[4];
  id v116;
  id v117;
  id v118;
  id v119;
  NSObject *v120;
  _BYTE *v121;
  id v122;
  _QWORD v123[4];
  id v124;
  NSObject *v125;
  _BYTE *v126;
  id v127;
  _QWORD v128[4];
  id v129;
  id v130;
  NSObject *v131;
  _BYTE *v132;
  id v133;
  id location;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint8_t v146[4];
  id v147;
  __int16 v148;
  _BYTE v149[14];
  __int16 v150;
  HMDHome *v151;
  __int16 v152;
  uint64_t v153;
  uint8_t v154[128];
  _BYTE buf[24];
  uint64_t (*v156)(uint64_t, uint64_t);
  void (*v157)(uint64_t);
  id v158;
  _BYTE v159[128];
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v105 = a3;
  objc_msgSend(v105, "arrayForKey:", *MEMORY[0x1E0CB8D70]);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v96, "count"))
  {
    if ((objc_msgSend(v96, "hmf_objectsAreKindOfClass:", objc_opt_class()) & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = parseMessageSource(v105);
      objc_msgSend(v105, "transport");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v96, "count"));
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v4 = v96;
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v139, v159, 16);
      if (!v5)
        goto LABEL_17;
      v6 = *(_QWORD *)v140;
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v140 != v6)
            objc_enumerationMutation(v4);
          v8 = *(_QWORD *)(*((_QWORD *)&v139 + 1) + 8 * i);
          -[HMDHome actionWithDictionaryRepresentation:](self, "actionWithDictionaryRepresentation:", v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v9)
          {
            v78 = (void *)MEMORY[0x1D17BA0A0]();
            v79 = self;
            HMFGetOSLogHandle();
            v80 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              *(_QWORD *)&buf[4] = v81;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v8;
              _os_log_impl(&dword_1CD062000, v80, OS_LOG_TYPE_ERROR, "%{public}@Failed to deserialize action: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v78);
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
            v10 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v105, "respondWithError:", v10);
LABEL_88:

            goto LABEL_93;
          }
          v10 = v9;
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
            v12 = v10;
          else
            v12 = 0;
          v13 = v12;

          if ((isKindOfClass & 1) != 0)
          {
            objc_msgSend(v105, "proxyConnection");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            if (v14)
            {
              v15 = objc_msgSend(v105, "isEntitledForShortcutsAutomationAccess");

              if ((v15 & 1) == 0)
              {
                v84 = (void *)MEMORY[0x1D17BA0A0]();
                v85 = self;
                HMFGetOSLogHandle();
                v86 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v87 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v87;
                  _os_log_impl(&dword_1CD062000, v86, OS_LOG_TYPE_ERROR, "%{public}@Missing ShortcutsAutomationAccess Entitlement for Execute", buf, 0xCu);

                }
                objc_autoreleasePoolPop(v84);
                objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 80, CFSTR("Missing Entitlement"), 0, 0);
                v88 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v105, "respondWithError:", v88);

                goto LABEL_88;
              }
            }
          }
          objc_msgSend(v97, "addObject:", v10);

        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v139, v159, 16);
        if (v5)
          continue;
        break;
      }
LABEL_17:

      v16 = -[HMDHome validateActionsDoNotConflict:](self, "validateActionsDoNotConflict:", v97);
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      val = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = v18;
      if (v16)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v20;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v97;
          _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Executing actions: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v17);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v156 = __Block_byref_object_copy__185019;
        v157 = __Block_byref_object_dispose__185020;
        v158 = 0;
        -[HMDHome workQueue](val, "workQueue");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        group = dispatch_group_create();
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v97, "count"));
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        obj = v97;
        v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v135, v154, 16);
        if (!v21)
        {
LABEL_69:

          if (objc_msgSend(v107, "count"))
          {
            objc_initWeak(&location, val);
            dispatch_group_enter(group);
            v64 = (void *)MEMORY[0x1D17BA0A0]();
            v65 = val;
            HMFGetOSLogHandle();
            v66 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v67 = (id)objc_claimAutoreleasedReturnValue();
              v144 = 0uLL;
              objc_msgSend(v105, "identifier");
              v68 = (void *)objc_claimAutoreleasedReturnValue();

              if (v68)
              {
                objc_msgSend(v105, "identifier");
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v69, "getUUIDBytes:", &v144);

              }
              else
              {
                v144 = *MEMORY[0x1E0D286F8];
              }
              v143 = v144;
              v89 = objc_msgSend(v107, "count");
              *(_DWORD *)v146 = 138544386;
              v147 = v67;
              v148 = 1042;
              *(_DWORD *)v149 = 16;
              *(_WORD *)&v149[4] = 2098;
              *(_QWORD *)&v149[6] = &v143;
              v150 = 2114;
              v151 = v65;
              v152 = 2048;
              v153 = v89;
              _os_log_impl(&dword_1CD062000, v66, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier %{public,uuid_t}.16P from home: %{public}@ count: %lu for characteristic write actions", v146, 0x30u);

            }
            objc_autoreleasePoolPop(v64);
            objc_msgSend(v105, "identifier");
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            v91 = objc_msgSend(v105, "qualityOfService");
            v115[0] = MEMORY[0x1E0C809B0];
            v115[1] = 3221225472;
            v115[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_24;
            v115[3] = &unk_1E89C2578;
            v116 = v98;
            objc_copyWeak(&v122, &location);
            v117 = v107;
            v118 = v100;
            v119 = v103;
            v121 = buf;
            v120 = group;
            -[HMDHome writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:](v65, "writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:", v117, v95, v90, v94, v91, v115);

            objc_destroyWeak(&v122);
            objc_destroyWeak(&location);
          }
          -[HMDHome workQueue](val, "workQueue");
          v92 = objc_claimAutoreleasedReturnValue();
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_26;
          block[3] = &unk_1E89C25A0;
          v112 = v105;
          v114 = buf;
          v113 = obj;
          dispatch_group_notify(group, v92, block);

          _Block_object_dispose(buf, 8);
          goto LABEL_93;
        }
        v108 = *(_QWORD *)v136;
        *(_QWORD *)&v22 = 138544386;
        v93 = v22;
        while (2)
        {
          v109 = v21;
          v23 = 0;
LABEL_23:
          if (*(_QWORD *)v136 != v108)
            objc_enumerationMutation(obj);
          v24 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * v23);
          objc_msgSend(v24, "configureWithHome:", val, v93);
          v25 = v24;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v26 = v25;
          else
            v26 = 0;
          v27 = v26;

          if (v27)
          {
            objc_msgSend(v27, "characteristic");
            v28 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "targetValue");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "authorizationData");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:type:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:type:", v28, v29, v30, 1);
            v31 = (void *)objc_claimAutoreleasedReturnValue();

            if (v31)
            {
              objc_msgSend(v107, "addObject:", v31);
              objc_msgSend(v103, "setObject:forKey:", v27, v31);
              goto LABEL_67;
            }

          }
          v32 = v25;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v33 = v32;
          else
            v33 = 0;
          v28 = v33;

          objc_msgSend(v28, "lightProfile");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          if (v31)
          {
            objc_msgSend(v28, "writeRequestForTransitionStartWithLightProfile:startDate:type:", v31, v104, 1);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            if (v34)
            {
              objc_msgSend(v100, "setObject:forKey:", v28, v34);
              objc_msgSend(v107, "addObject:", v34);
            }
            else
            {
              v40 = (void *)MEMORY[0x1D17BA0A0]();
              v41 = val;
              HMFGetOSLogHandle();
              v42 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v146 = 138543618;
                v147 = v43;
                v148 = 2112;
                *(_QWORD *)v149 = v28;
                _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_ERROR, "%{public}@Failed to create characteristic write request for natural lighting action: %@", v146, 0x16u);

              }
              objc_autoreleasePoolPop(v40);
              v34 = 0;
            }
LABEL_66:

LABEL_67:
            if (v109 == ++v23)
            {
              v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v135, v154, 16);
              if (!v21)
                goto LABEL_69;
              continue;
            }
            goto LABEL_23;
          }
          break;
        }
        if (v28)
        {
          v35 = (void *)MEMORY[0x1D17BA0A0]();
          v36 = val;
          HMFGetOSLogHandle();
          v37 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v146 = 138543618;
            v147 = v38;
            v148 = 2112;
            *(_QWORD *)v149 = v28;
            _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_ERROR, "%{public}@Skipping executing natural lighting action, missing light profile: %@", v146, 0x16u);

          }
          objc_autoreleasePoolPop(v35);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
          v39 = objc_claimAutoreleasedReturnValue();
          v34 = *(void **)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v39;
          goto LABEL_66;
        }
        v44 = v32;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v45 = v44;
        else
          v45 = 0;
        v46 = v45;
        v99 = v44;

        if (v46)
        {
          objc_msgSend(v46, "convertedCharacteristicWriteRequests");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = v47;
          if (v47)
          {
            objc_msgSend(v47, "residualAction");
            v34 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v48, "characteristicWriteRequests");
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v34)
            {
LABEL_55:

              goto LABEL_56;
            }
          }
          else
          {
            v102 = 0;
            v34 = v44;
          }
          objc_msgSend(v34, "setEncodePlaybackArchiveForExecution:", 1);
          goto LABEL_55;
        }
        v34 = 0;
        v102 = 0;
LABEL_56:
        objc_initWeak(&location, val);
        if (objc_msgSend(v102, "count"))
        {
          dispatch_group_enter(group);
          v49 = (void *)MEMORY[0x1D17BA0A0]();
          v50 = val;
          HMFGetOSLogHandle();
          v51 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v52 = (id)objc_claimAutoreleasedReturnValue();
            v144 = 0uLL;
            objc_msgSend(v105, "identifier");
            v53 = (void *)objc_claimAutoreleasedReturnValue();

            if (v53)
            {
              objc_msgSend(v105, "identifier");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v54, "getUUIDBytes:", &v144);

            }
            else
            {
              v144 = *MEMORY[0x1E0D286F8];
            }
            v145 = v144;
            v55 = objc_msgSend(v102, "count");
            *(_DWORD *)v146 = v93;
            v147 = v52;
            v148 = 1042;
            *(_DWORD *)v149 = 16;
            *(_WORD *)&v149[4] = 2098;
            *(_QWORD *)&v149[6] = &v145;
            v150 = 2114;
            v151 = val;
            v152 = 2048;
            v153 = v55;
            _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Executing write requests for request identifier %{public,uuid_t}.16P from home: %{public}@ count: %lu for media actions", v146, 0x30u);

          }
          objc_autoreleasePoolPop(v49);
          v56 = parseMessageSource(v105);
          objc_msgSend(v105, "identifier");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v58 = objc_msgSend(v105, "qualityOfService");
          v128[0] = MEMORY[0x1E0C809B0];
          v128[1] = 3221225472;
          v128[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke;
          v128[3] = &unk_1E89C24D8;
          v129 = v98;
          objc_copyWeak(&v133, &location);
          v59 = v102;
          v130 = v59;
          v132 = buf;
          v131 = group;
          -[HMDHome writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:](v50, "writeCharacteristicValues:source:identifier:transport:qualityOfService:withCompletionHandler:", v59, v56, v57, v94, v58, v128);

          objc_destroyWeak(&v133);
        }
        objc_msgSend(v105, "clientName");
        v60 = objc_claimAutoreleasedReturnValue();
        v61 = (void *)v60;
        v62 = CFSTR("Unknown");
        if (v60)
          v62 = (__CFString *)v60;
        v63 = v62;

        dispatch_group_enter(group);
        v123[0] = MEMORY[0x1E0C809B0];
        v123[1] = 3221225472;
        v123[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_21;
        v123[3] = &unk_1E89C2528;
        v124 = v98;
        objc_copyWeak(&v127, &location);
        v126 = buf;
        v125 = group;
        objc_msgSend(v99, "executeWithSource:clientName:completionHandler:", v95, v63, v123);

        objc_destroyWeak(&v127);
        objc_destroyWeak(&location);

        goto LABEL_66;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v82;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to validate actions", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v105, "respondWithError:", v83);

LABEL_93:
    }
    else
    {
      v74 = (void *)MEMORY[0x1D17BA0A0]();
      v75 = self;
      HMFGetOSLogHandle();
      v76 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v77;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v105;
        _os_log_impl(&dword_1CD062000, v76, OS_LOG_TYPE_ERROR, "%{public}@Invalid actions payload: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v74);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 22);
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v105, "respondWithError:", v104);
    }
  }
  else
  {
    v70 = (void *)MEMORY[0x1D17BA0A0]();
    v71 = self;
    HMFGetOSLogHandle();
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v73;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v105;
      _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_ERROR, "%{public}@No Actions in message:(%@)", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v70);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "respondWithError:", v104);
  }

}

- (BOOL)validateActionsDoNotConflict:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  void *v26;
  HMDHome *v27;
  NSObject *v28;
  void *v29;
  void *v31;
  HMDHome *v32;
  NSObject *v33;
  void *v34;
  HMDHome *v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t v48[128];
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  id v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v7 = v4;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
    if (v8)
    {
      v9 = v8;
      v35 = self;
      v36 = v4;
      v38 = v7;
      v39 = *(_QWORD *)v45;
      v37 = v5;
      while (2)
      {
        v10 = 0;
        v11 = v39;
        do
        {
          if (*(_QWORD *)v45 != v11)
            objc_enumerationMutation(v7);
          v12 = *(id *)(*((_QWORD *)&v44 + 1) + 8 * v10);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v13 = v12;
          else
            v13 = 0;
          v14 = v13;

          if (v14)
          {
            objc_msgSend(v14, "characteristic");
            v15 = (id)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v5, "containsObject:", v15))
            {
              v31 = (void *)MEMORY[0x1D17BA0A0]();
              v32 = v35;
              HMFGetOSLogHandle();
              v33 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v50 = v34;
                v51 = 2112;
                v52 = v12;
                _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v31);
LABEL_34:

              v25 = 0;
              v4 = v36;
              v7 = v38;
              goto LABEL_36;
            }
            objc_msgSend(v5, "addObject:", v15);
          }
          else
          {
            v16 = v12;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v17 = v16;
            else
              v17 = 0;
            v15 = v17;

            if (v15)
            {
              v42 = 0u;
              v43 = 0u;
              v40 = 0u;
              v41 = 0u;
              objc_msgSend(v15, "mediaProfiles");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
              if (v19)
              {
                v20 = v19;
                v21 = *(_QWORD *)v41;
                while (2)
                {
                  for (i = 0; i != v20; ++i)
                  {
                    if (*(_QWORD *)v41 != v21)
                      objc_enumerationMutation(v18);
                    v23 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * i);
                    if (objc_msgSend(v6, "containsObject:", v23))
                    {
                      v26 = (void *)MEMORY[0x1D17BA0A0]();
                      v27 = v35;
                      HMFGetOSLogHandle();
                      v28 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                      {
                        HMFGetLogIdentifier();
                        v29 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138543618;
                        v50 = v29;
                        v51 = 2112;
                        v52 = v16;
                        _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Conflicting action detected: %@", buf, 0x16u);

                      }
                      objc_autoreleasePoolPop(v26);

                      v14 = 0;
                      v5 = v37;
                      goto LABEL_34;
                    }
                    objc_msgSend(v6, "addObject:", v23);
                  }
                  v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
                  if (v20)
                    continue;
                  break;
                }
              }

              v14 = 0;
              v5 = v37;
              v7 = v38;
              v11 = v39;
            }
          }

          ++v10;
        }
        while (v10 != v9);
        v24 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v44, v53, 16);
        v9 = v24;
        v25 = 1;
        v4 = v36;
        if (v24)
          continue;
        break;
      }
    }
    else
    {
      v25 = 1;
    }
LABEL_36:

  }
  else
  {
    v25 = 1;
  }

  return v25;
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  __int128 v16;
  id v17;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2;
  block[3] = &unk_1E89C24B0;
  objc_copyWeak(&v17, (id *)(a1 + 64));
  v13 = v5;
  v14 = *(id *)(a1 + 40);
  v15 = v6;
  v11 = *(_OWORD *)(a1 + 48);
  v8 = (id)v11;
  v16 = v11;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v17);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_21(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  __int128 v7;
  _QWORD block[4];
  id v9;
  __int128 v10;
  id v11;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_22;
  block[3] = &unk_1E89C2500;
  objc_copyWeak(&v11, (id *)(a1 + 56));
  v9 = v3;
  v7 = *(_OWORD *)(a1 + 40);
  v5 = (id)v7;
  v10 = v7;
  v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v11);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_24(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  __int128 v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  __int128 v18;
  id v19;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_25;
  block[3] = &unk_1E89C2550;
  objc_copyWeak(&v19, (id *)(a1 + 80));
  v13 = v5;
  v14 = *(id *)(a1 + 40);
  v15 = *(id *)(a1 + 48);
  v16 = v6;
  v17 = *(id *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v8 = (id)v11;
  v18 = v11;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v19);
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_26(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 0);

  }
}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_25(uint64_t a1)
{
  id WeakRetained;
  id v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  uint32_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  uint32_t v33;
  uint64_t v34;
  id *v35;
  uint64_t v36;
  id v37;
  id obj;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  id v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  v3 = *(id *)(a1 + 32);
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = *(id *)(a1 + 40);
  v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
  if (v41)
  {
    v40 = *(_QWORD *)v45;
    v37 = WeakRetained;
    do
    {
      for (i = 0; i != v41; ++i)
      {
        if (*(_QWORD *)v45 != v40)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 48), "objectForKey:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = v6;
        if (v6)
        {
          v8 = *(void **)(a1 + 56);
          v9 = objc_msgSend(v6, "isNaturalLightingEnabled");
          v43 = 0;
          v10 = objc_msgSend(v8, "hmd_isValidResponseForWriteRequest:naturalLightingEnabled:error:", v5, v9, &v43);
          v11 = v43;
          v12 = (void *)MEMORY[0x1D17BA0A0]();
          v13 = WeakRetained;
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = v14;
          if ((v10 & 1) != 0)
          {
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v49 = v16;
              v50 = 2112;
              v51 = v7;
              v17 = v15;
              v18 = OS_LOG_TYPE_INFO;
              v19 = "%{public}@Successfully executed natural lighting action: %@";
              v20 = 22;
              goto LABEL_15;
            }
          }
          else if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v49 = v16;
            v50 = 2112;
            v51 = v7;
            v52 = 2112;
            v53 = v11;
            v17 = v15;
            v18 = OS_LOG_TYPE_ERROR;
            v19 = "%{public}@Failed to execute natural lighting action %@:%@";
            v20 = 32;
LABEL_15:
            _os_log_impl(&dword_1CD062000, v17, v18, v19, buf, v20);

          }
          objc_autoreleasePoolPop(v12);
          if (v3)
            goto LABEL_24;
          goto LABEL_22;
        }
        v39 = v3;
        objc_msgSend(*(id *)(a1 + 64), "objectForKey:", v5);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 56);
        objc_msgSend(v5, "characteristic");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = 0;
        objc_msgSend(v22, "hmd_valueOfCharacteristic:error:", v23, &v42);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v42;

        v25 = (void *)MEMORY[0x1D17BA0A0]();
        v26 = WeakRetained;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v27;
        if (v24)
        {
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            goto LABEL_21;
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v49 = v29;
          v50 = 2112;
          v51 = v21;
          v30 = v28;
          v31 = OS_LOG_TYPE_INFO;
          v32 = "%{public}@Successfully executed characteristic write action: %@";
          v33 = 22;
        }
        else
        {
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            goto LABEL_21;
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v49 = v29;
          v50 = 2112;
          v51 = v21;
          v52 = 2112;
          v53 = v11;
          v30 = v28;
          v31 = OS_LOG_TYPE_ERROR;
          v32 = "%{public}@Failed to execute characteristic write action %@:%@";
          v33 = 32;
        }
        _os_log_impl(&dword_1CD062000, v30, v31, v32, buf, v33);

        WeakRetained = v37;
LABEL_21:

        objc_autoreleasePoolPop(v25);
        v3 = v39;
        if (v39)
          goto LABEL_24;
LABEL_22:
        if (v11)
          v3 = v11;
LABEL_24:

      }
      v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v54, 16);
    }
    while (v41);
  }

  if (v3)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v36 = *(_QWORD *)(v34 + 40);
    v35 = (id *)(v34 + 40);
    if (!v36)
      objc_storeStrong(v35, v3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2_22(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = WeakRetained;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 32);
      v11 = 138543618;
      v12 = v6;
      v13 = 2112;
      v14 = v7;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute action with error: %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v3);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(_QWORD *)(v8 + 40);
    v9 = (id *)(v8 + 40);
    if (!v10)
      objc_storeStrong(v9, *(id *)(a1 + 32));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __56__HMDHome_HMActionExecution__executeActionsFromMessage___block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t i;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  id v27;
  uint64_t v28;
  id obj;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v1 = a1;
  v69 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v3 = *(id *)(v1 + 32);
  v38 = WeakRetained;
  if (v3)
  {
    v4 = v3;
    v5 = MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    v7 = (void *)v5;
    v8 = v6;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v57 = v10;
      v58 = 2112;
      v59 = v4;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write requests for converted media action with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    v28 = objc_msgSend(*(id *)(v1 + 40), "count");
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v12 = *(id *)(v1 + 48);
    v32 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v52, v68, 16);
    if (!v32)
    {

      v4 = 0;
      v27 = 0;
      goto LABEL_38;
    }
    v43 = 0;
    v4 = 0;
    obj = v12;
    v30 = *(_QWORD *)v53;
    v31 = v1;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v53 != v30)
          objc_enumerationMutation(obj);
        v33 = v13;
        v39 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * v13);
        objc_msgSend(*(id *)(v1 + 48), "hmf_dictionaryForKey:", v28);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v36 = v14;
        v35 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v48, v67, 16);
        if (v35)
        {
          v34 = *(_QWORD *)v49;
          do
          {
            v15 = 0;
            do
            {
              if (*(_QWORD *)v49 != v34)
                objc_enumerationMutation(v36);
              v37 = v15;
              v40 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v15);
              objc_msgSend(v36, "hmf_dictionaryForKey:");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = 0u;
              v45 = 0u;
              v46 = 0u;
              v47 = 0u;
              v17 = v16;
              v42 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v44, v66, 16);
              if (v42)
              {
                v41 = *(_QWORD *)v45;
                do
                {
                  for (i = 0; i != v42; ++i)
                  {
                    if (*(_QWORD *)v45 != v41)
                      objc_enumerationMutation(v17);
                    v19 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * i);
                    objc_msgSend(v17, "hmf_dictionaryForKey:", v19);
                    v20 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v20, "hmf_dataForKey:", CFSTR("kCharacteristicErrorDataKey"));
                    v21 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v21)
                    {
                      objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v21, 0);
                      v22 = objc_claimAutoreleasedReturnValue();

                      v23 = (void *)MEMORY[0x1D17BA0A0]();
                      v24 = WeakRetained;
                      HMFGetOSLogHandle();
                      v25 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                      {
                        HMFGetLogIdentifier();
                        v26 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138544386;
                        v57 = v26;
                        v58 = 2112;
                        v59 = v39;
                        v60 = 2112;
                        v61 = v40;
                        v62 = 2112;
                        v63 = v19;
                        v64 = 2112;
                        v65 = v22;
                        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write requests for %@/%@/%@ with error: %@", buf, 0x34u);

                        WeakRetained = v38;
                      }
                      ++v43;

                      objc_autoreleasePoolPop(v23);
                      v4 = (void *)v22;
                    }

                  }
                  v42 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v44, v66, 16);
                }
                while (v42);
              }

              v15 = v37 + 1;
            }
            while (v37 + 1 != v35);
            v35 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v48, v67, 16);
          }
          while (v35);
        }

        v13 = v33 + 1;
        v1 = v31;
      }
      while (v33 + 1 != v32);
      v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v68, 16);
    }
    while (v32);

    v27 = 0;
    if (!v28 || v28 != v43)
      goto LABEL_38;
    if (!v4)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 8);
  if (!*(_QWORD *)(v11 + 40))
  {
    v27 = v4;
    v4 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v27;
    WeakRetained = v38;
LABEL_38:

    v4 = v27;
    goto LABEL_39;
  }
LABEL_6:
  WeakRetained = v38;
LABEL_39:
  dispatch_group_leave(*(dispatch_group_t *)(v1 + 56));

}

@end
